
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025164  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000061d0  08035308  08035308  00026308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803b4d8  0803b4d8  0002d870  2**0
                  CONTENTS
  4 .ARM          00000008  0803b4d8  0803b4d8  0002c4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803b4e0  0803b4e0  0002d870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803b4e0  0803b4e0  0002c4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803b4e8  0803b4e8  0002c4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  0803b4ec  0002d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019248  20000870  0803bd5c  0002d870  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20019ab8  0803bd5c  0002dab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002d870  2**0
                  CONTENTS, READONLY
 12 .debug_info   000591c7  00000000  00000000  0002d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007bb9  00000000  00000000  00086a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00027e0a  00000000  00000000  0008e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002fb0  00000000  00000000  000b6430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002fb7  00000000  00000000  000b93e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213e6  00000000  00000000  000bc397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048378  00000000  00000000  000dd77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa872  00000000  00000000  00125af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d0367  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bd00  00000000  00000000  001d03ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001dc0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	20000870 	.word	0x20000870
 80101bc:	00000000 	.word	0x00000000
 80101c0:	080352ec 	.word	0x080352ec

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	20000874 	.word	0x20000874
 80101dc:	080352ec 	.word	0x080352ec

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_ldivmod>:
 8010cb8:	b97b      	cbnz	r3, 8010cda <__aeabi_ldivmod+0x22>
 8010cba:	b972      	cbnz	r2, 8010cda <__aeabi_ldivmod+0x22>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bfbe      	ittt	lt
 8010cc0:	2000      	movlt	r0, #0
 8010cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8010cc6:	e006      	blt.n	8010cd6 <__aeabi_ldivmod+0x1e>
 8010cc8:	bf08      	it	eq
 8010cca:	2800      	cmpeq	r0, #0
 8010ccc:	bf1c      	itt	ne
 8010cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8010cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010cd6:	f000 b9ff 	b.w	80110d8 <__aeabi_idiv0>
 8010cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	db09      	blt.n	8010cfa <__aeabi_ldivmod+0x42>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	db1a      	blt.n	8010d20 <__aeabi_ldivmod+0x68>
 8010cea:	f000 f897 	bl	8010e1c <__udivmoddi4>
 8010cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cf6:	b004      	add	sp, #16
 8010cf8:	4770      	bx	lr
 8010cfa:	4240      	negs	r0, r0
 8010cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	db1b      	blt.n	8010d3c <__aeabi_ldivmod+0x84>
 8010d04:	f000 f88a 	bl	8010e1c <__udivmoddi4>
 8010d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d10:	b004      	add	sp, #16
 8010d12:	4240      	negs	r0, r0
 8010d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d18:	4252      	negs	r2, r2
 8010d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d1e:	4770      	bx	lr
 8010d20:	4252      	negs	r2, r2
 8010d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d26:	f000 f879 	bl	8010e1c <__udivmoddi4>
 8010d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d32:	b004      	add	sp, #16
 8010d34:	4240      	negs	r0, r0
 8010d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3a:	4770      	bx	lr
 8010d3c:	4252      	negs	r2, r2
 8010d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d42:	f000 f86b 	bl	8010e1c <__udivmoddi4>
 8010d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d4e:	b004      	add	sp, #16
 8010d50:	4252      	negs	r2, r2
 8010d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010d56:	4770      	bx	lr

08010d58 <__aeabi_uldivmod>:
 8010d58:	b953      	cbnz	r3, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5a:	b94a      	cbnz	r2, 8010d70 <__aeabi_uldivmod+0x18>
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	bf08      	it	eq
 8010d60:	2800      	cmpeq	r0, #0
 8010d62:	bf1c      	itt	ne
 8010d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8010d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8010d6c:	f000 b9b4 	b.w	80110d8 <__aeabi_idiv0>
 8010d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8010d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010d78:	f000 f850 	bl	8010e1c <__udivmoddi4>
 8010d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d84:	b004      	add	sp, #16
 8010d86:	4770      	bx	lr

08010d88 <__popcountsi2>:
 8010d88:	0843      	lsrs	r3, r0, #1
 8010d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010d8e:	1ac0      	subs	r0, r0, r3
 8010d90:	0883      	lsrs	r3, r0, #2
 8010d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010d9a:	4418      	add	r0, r3
 8010d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010dac:	0e00      	lsrs	r0, r0, #24
 8010dae:	4770      	bx	lr

08010db0 <__aeabi_d2lz>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	2200      	movs	r2, #0
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	460d      	mov	r5, r1
 8010dba:	f7ff fea7 	bl	8010b0c <__aeabi_dcmplt>
 8010dbe:	b928      	cbnz	r0, 8010dcc <__aeabi_d2lz+0x1c>
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	4629      	mov	r1, r5
 8010dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dc8:	f000 b80a 	b.w	8010de0 <__aeabi_d2ulz>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010dd2:	f000 f805 	bl	8010de0 <__aeabi_d2ulz>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop

08010de0 <__aeabi_d2ulz>:
 8010de0:	b5d0      	push	{r4, r6, r7, lr}
 8010de2:	4b0c      	ldr	r3, [pc, #48]	@ (8010e14 <__aeabi_d2ulz+0x34>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ff fc1d 	bl	8010628 <__aeabi_dmul>
 8010dee:	f7ff fef3 	bl	8010bd8 <__aeabi_d2uiz>
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fb9e 	bl	8010534 <__aeabi_ui2d>
 8010df8:	4b07      	ldr	r3, [pc, #28]	@ (8010e18 <__aeabi_d2ulz+0x38>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ff fc14 	bl	8010628 <__aeabi_dmul>
 8010e00:	4602      	mov	r2, r0
 8010e02:	460b      	mov	r3, r1
 8010e04:	4630      	mov	r0, r6
 8010e06:	4639      	mov	r1, r7
 8010e08:	f7ff fa56 	bl	80102b8 <__aeabi_dsub>
 8010e0c:	f7ff fee4 	bl	8010bd8 <__aeabi_d2uiz>
 8010e10:	4621      	mov	r1, r4
 8010e12:	bdd0      	pop	{r4, r6, r7, pc}
 8010e14:	3df00000 	.word	0x3df00000
 8010e18:	41f00000 	.word	0x41f00000

08010e1c <__udivmoddi4>:
 8010e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e20:	9d08      	ldr	r5, [sp, #32]
 8010e22:	460c      	mov	r4, r1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d14e      	bne.n	8010ec6 <__udivmoddi4+0xaa>
 8010e28:	4694      	mov	ip, r2
 8010e2a:	458c      	cmp	ip, r1
 8010e2c:	4686      	mov	lr, r0
 8010e2e:	fab2 f282 	clz	r2, r2
 8010e32:	d962      	bls.n	8010efa <__udivmoddi4+0xde>
 8010e34:	b14a      	cbz	r2, 8010e4a <__udivmoddi4+0x2e>
 8010e36:	f1c2 0320 	rsb	r3, r2, #32
 8010e3a:	4091      	lsls	r1, r2
 8010e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8010e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8010e44:	4319      	orrs	r1, r3
 8010e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8010e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e4e:	fa1f f68c 	uxth.w	r6, ip
 8010e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8010e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8010e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e62:	fb04 f106 	mul.w	r1, r4, r6
 8010e66:	4299      	cmp	r1, r3
 8010e68:	d90a      	bls.n	8010e80 <__udivmoddi4+0x64>
 8010e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8010e72:	f080 8112 	bcs.w	801109a <__udivmoddi4+0x27e>
 8010e76:	4299      	cmp	r1, r3
 8010e78:	f240 810f 	bls.w	801109a <__udivmoddi4+0x27e>
 8010e7c:	3c02      	subs	r4, #2
 8010e7e:	4463      	add	r3, ip
 8010e80:	1a59      	subs	r1, r3, r1
 8010e82:	fa1f f38e 	uxth.w	r3, lr
 8010e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8010e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8010e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010e92:	fb00 f606 	mul.w	r6, r0, r6
 8010e96:	429e      	cmp	r6, r3
 8010e98:	d90a      	bls.n	8010eb0 <__udivmoddi4+0x94>
 8010e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8010e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8010ea2:	f080 80fc 	bcs.w	801109e <__udivmoddi4+0x282>
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	f240 80f9 	bls.w	801109e <__udivmoddi4+0x282>
 8010eac:	4463      	add	r3, ip
 8010eae:	3802      	subs	r0, #2
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	b11d      	cbz	r5, 8010ec2 <__udivmoddi4+0xa6>
 8010eba:	40d3      	lsrs	r3, r2
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8010ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec6:	428b      	cmp	r3, r1
 8010ec8:	d905      	bls.n	8010ed6 <__udivmoddi4+0xba>
 8010eca:	b10d      	cbz	r5, 8010ed0 <__udivmoddi4+0xb4>
 8010ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	e7f5      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010ed6:	fab3 f183 	clz	r1, r3
 8010eda:	2900      	cmp	r1, #0
 8010edc:	d146      	bne.n	8010f6c <__udivmoddi4+0x150>
 8010ede:	42a3      	cmp	r3, r4
 8010ee0:	d302      	bcc.n	8010ee8 <__udivmoddi4+0xcc>
 8010ee2:	4290      	cmp	r0, r2
 8010ee4:	f0c0 80f0 	bcc.w	80110c8 <__udivmoddi4+0x2ac>
 8010ee8:	1a86      	subs	r6, r0, r2
 8010eea:	eb64 0303 	sbc.w	r3, r4, r3
 8010eee:	2001      	movs	r0, #1
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d0e6      	beq.n	8010ec2 <__udivmoddi4+0xa6>
 8010ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8010ef8:	e7e3      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f040 8090 	bne.w	8011020 <__udivmoddi4+0x204>
 8010f00:	eba1 040c 	sub.w	r4, r1, ip
 8010f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f08:	fa1f f78c 	uxth.w	r7, ip
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010f16:	fb08 4416 	mls	r4, r8, r6, r4
 8010f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f1e:	fb07 f006 	mul.w	r0, r7, r6
 8010f22:	4298      	cmp	r0, r3
 8010f24:	d908      	bls.n	8010f38 <__udivmoddi4+0x11c>
 8010f26:	eb1c 0303 	adds.w	r3, ip, r3
 8010f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8010f2e:	d202      	bcs.n	8010f36 <__udivmoddi4+0x11a>
 8010f30:	4298      	cmp	r0, r3
 8010f32:	f200 80cd 	bhi.w	80110d0 <__udivmoddi4+0x2b4>
 8010f36:	4626      	mov	r6, r4
 8010f38:	1a1c      	subs	r4, r3, r0
 8010f3a:	fa1f f38e 	uxth.w	r3, lr
 8010f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010f42:	fb08 4410 	mls	r4, r8, r0, r4
 8010f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f4a:	fb00 f707 	mul.w	r7, r0, r7
 8010f4e:	429f      	cmp	r7, r3
 8010f50:	d908      	bls.n	8010f64 <__udivmoddi4+0x148>
 8010f52:	eb1c 0303 	adds.w	r3, ip, r3
 8010f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8010f5a:	d202      	bcs.n	8010f62 <__udivmoddi4+0x146>
 8010f5c:	429f      	cmp	r7, r3
 8010f5e:	f200 80b0 	bhi.w	80110c2 <__udivmoddi4+0x2a6>
 8010f62:	4620      	mov	r0, r4
 8010f64:	1bdb      	subs	r3, r3, r7
 8010f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010f6a:	e7a5      	b.n	8010eb8 <__udivmoddi4+0x9c>
 8010f6c:	f1c1 0620 	rsb	r6, r1, #32
 8010f70:	408b      	lsls	r3, r1
 8010f72:	fa22 f706 	lsr.w	r7, r2, r6
 8010f76:	431f      	orrs	r7, r3
 8010f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8010f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8010f80:	ea43 030c 	orr.w	r3, r3, ip
 8010f84:	40f4      	lsrs	r4, r6
 8010f86:	fa00 f801 	lsl.w	r8, r0, r1
 8010f8a:	0c38      	lsrs	r0, r7, #16
 8010f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010f90:	fbb4 fef0 	udiv	lr, r4, r0
 8010f94:	fa1f fc87 	uxth.w	ip, r7
 8010f98:	fb00 441e 	mls	r4, r0, lr, r4
 8010f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8010fa4:	45a1      	cmp	r9, r4
 8010fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8010faa:	d90a      	bls.n	8010fc2 <__udivmoddi4+0x1a6>
 8010fac:	193c      	adds	r4, r7, r4
 8010fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8010fb2:	f080 8084 	bcs.w	80110be <__udivmoddi4+0x2a2>
 8010fb6:	45a1      	cmp	r9, r4
 8010fb8:	f240 8081 	bls.w	80110be <__udivmoddi4+0x2a2>
 8010fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8010fc0:	443c      	add	r4, r7
 8010fc2:	eba4 0409 	sub.w	r4, r4, r9
 8010fc6:	fa1f f983 	uxth.w	r9, r3
 8010fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8010fce:	fb00 4413 	mls	r4, r0, r3, r4
 8010fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8010fda:	45a4      	cmp	ip, r4
 8010fdc:	d907      	bls.n	8010fee <__udivmoddi4+0x1d2>
 8010fde:	193c      	adds	r4, r7, r4
 8010fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8010fe4:	d267      	bcs.n	80110b6 <__udivmoddi4+0x29a>
 8010fe6:	45a4      	cmp	ip, r4
 8010fe8:	d965      	bls.n	80110b6 <__udivmoddi4+0x29a>
 8010fea:	3b02      	subs	r3, #2
 8010fec:	443c      	add	r4, r7
 8010fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8010ff6:	eba4 040c 	sub.w	r4, r4, ip
 8010ffa:	429c      	cmp	r4, r3
 8010ffc:	46ce      	mov	lr, r9
 8010ffe:	469c      	mov	ip, r3
 8011000:	d351      	bcc.n	80110a6 <__udivmoddi4+0x28a>
 8011002:	d04e      	beq.n	80110a2 <__udivmoddi4+0x286>
 8011004:	b155      	cbz	r5, 801101c <__udivmoddi4+0x200>
 8011006:	ebb8 030e 	subs.w	r3, r8, lr
 801100a:	eb64 040c 	sbc.w	r4, r4, ip
 801100e:	fa04 f606 	lsl.w	r6, r4, r6
 8011012:	40cb      	lsrs	r3, r1
 8011014:	431e      	orrs	r6, r3
 8011016:	40cc      	lsrs	r4, r1
 8011018:	e9c5 6400 	strd	r6, r4, [r5]
 801101c:	2100      	movs	r1, #0
 801101e:	e750      	b.n	8010ec2 <__udivmoddi4+0xa6>
 8011020:	f1c2 0320 	rsb	r3, r2, #32
 8011024:	fa20 f103 	lsr.w	r1, r0, r3
 8011028:	fa0c fc02 	lsl.w	ip, ip, r2
 801102c:	fa24 f303 	lsr.w	r3, r4, r3
 8011030:	4094      	lsls	r4, r2
 8011032:	430c      	orrs	r4, r1
 8011034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011038:	fa00 fe02 	lsl.w	lr, r0, r2
 801103c:	fa1f f78c 	uxth.w	r7, ip
 8011040:	fbb3 f0f8 	udiv	r0, r3, r8
 8011044:	fb08 3110 	mls	r1, r8, r0, r3
 8011048:	0c23      	lsrs	r3, r4, #16
 801104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801104e:	fb00 f107 	mul.w	r1, r0, r7
 8011052:	4299      	cmp	r1, r3
 8011054:	d908      	bls.n	8011068 <__udivmoddi4+0x24c>
 8011056:	eb1c 0303 	adds.w	r3, ip, r3
 801105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 801105e:	d22c      	bcs.n	80110ba <__udivmoddi4+0x29e>
 8011060:	4299      	cmp	r1, r3
 8011062:	d92a      	bls.n	80110ba <__udivmoddi4+0x29e>
 8011064:	3802      	subs	r0, #2
 8011066:	4463      	add	r3, ip
 8011068:	1a5b      	subs	r3, r3, r1
 801106a:	b2a4      	uxth	r4, r4
 801106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8011070:	fb08 3311 	mls	r3, r8, r1, r3
 8011074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011078:	fb01 f307 	mul.w	r3, r1, r7
 801107c:	42a3      	cmp	r3, r4
 801107e:	d908      	bls.n	8011092 <__udivmoddi4+0x276>
 8011080:	eb1c 0404 	adds.w	r4, ip, r4
 8011084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8011088:	d213      	bcs.n	80110b2 <__udivmoddi4+0x296>
 801108a:	42a3      	cmp	r3, r4
 801108c:	d911      	bls.n	80110b2 <__udivmoddi4+0x296>
 801108e:	3902      	subs	r1, #2
 8011090:	4464      	add	r4, ip
 8011092:	1ae4      	subs	r4, r4, r3
 8011094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011098:	e739      	b.n	8010f0e <__udivmoddi4+0xf2>
 801109a:	4604      	mov	r4, r0
 801109c:	e6f0      	b.n	8010e80 <__udivmoddi4+0x64>
 801109e:	4608      	mov	r0, r1
 80110a0:	e706      	b.n	8010eb0 <__udivmoddi4+0x94>
 80110a2:	45c8      	cmp	r8, r9
 80110a4:	d2ae      	bcs.n	8011004 <__udivmoddi4+0x1e8>
 80110a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80110aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80110ae:	3801      	subs	r0, #1
 80110b0:	e7a8      	b.n	8011004 <__udivmoddi4+0x1e8>
 80110b2:	4631      	mov	r1, r6
 80110b4:	e7ed      	b.n	8011092 <__udivmoddi4+0x276>
 80110b6:	4603      	mov	r3, r0
 80110b8:	e799      	b.n	8010fee <__udivmoddi4+0x1d2>
 80110ba:	4630      	mov	r0, r6
 80110bc:	e7d4      	b.n	8011068 <__udivmoddi4+0x24c>
 80110be:	46d6      	mov	lr, sl
 80110c0:	e77f      	b.n	8010fc2 <__udivmoddi4+0x1a6>
 80110c2:	4463      	add	r3, ip
 80110c4:	3802      	subs	r0, #2
 80110c6:	e74d      	b.n	8010f64 <__udivmoddi4+0x148>
 80110c8:	4606      	mov	r6, r0
 80110ca:	4623      	mov	r3, r4
 80110cc:	4608      	mov	r0, r1
 80110ce:	e70f      	b.n	8010ef0 <__udivmoddi4+0xd4>
 80110d0:	3e02      	subs	r6, #2
 80110d2:	4463      	add	r3, ip
 80110d4:	e730      	b.n	8010f38 <__udivmoddi4+0x11c>
 80110d6:	bf00      	nop

080110d8 <__aeabi_idiv0>:
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <EthBegin>:

void EthResetEnd(void){
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
}

void EthBegin(void * param){
 80110dc:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 80110de:	2200      	movs	r2, #0
 80110e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110e4:	4801      	ldr	r0, [pc, #4]	@ (80110ec <EthBegin+0x10>)
 80110e6:	f004 feb4 	bl	8015e52 <HAL_GPIO_WritePin>
}
 80110ea:	bd08      	pop	{r3, pc}
 80110ec:	40020400 	.word	0x40020400

080110f0 <EthEnd>:

void EthEnd(void * param){
 80110f0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 80110f2:	2201      	movs	r2, #1
 80110f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80110f8:	4801      	ldr	r0, [pc, #4]	@ (8011100 <EthEnd+0x10>)
 80110fa:	f004 feaa 	bl	8015e52 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 80110fe:	bd08      	pop	{r3, pc}
 8011100:	40020400 	.word	0x40020400

08011104 <FlashBegin>:
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
  return rx_data;
}

void FlashBegin(void){
 8011104:	b508      	push	{r3, lr}
	//osMutexAcquire(SPI2MutexHandle, osWaitForever);
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8011106:	2200      	movs	r2, #0
 8011108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801110c:	4801      	ldr	r0, [pc, #4]	@ (8011114 <FlashBegin+0x10>)
 801110e:	f004 fea0 	bl	8015e52 <HAL_GPIO_WritePin>
}
 8011112:	bd08      	pop	{r3, pc}
 8011114:	40020000 	.word	0x40020000

08011118 <FlashEnd>:

void FlashEnd(void){
 8011118:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 801111a:	2201      	movs	r2, #1
 801111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011120:	4801      	ldr	r0, [pc, #4]	@ (8011128 <FlashEnd+0x10>)
 8011122:	f004 fe96 	bl	8015e52 <HAL_GPIO_WritePin>
	//osMutexRelease(SPI2MutexHandle);
}
 8011126:	bd08      	pop	{r3, pc}
 8011128:	40020000 	.word	0x40020000

0801112c <StartIOTask>:
{
 801112c:	b510      	push	{r4, lr}
 801112e:	b08e      	sub	sp, #56	@ 0x38
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 8011130:	4b48      	ldr	r3, [pc, #288]	@ (8011254 <StartIOTask+0x128>)
 8011132:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011136:	900c      	str	r0, [sp, #48]	@ 0x30
 8011138:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 801113c:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8011140:	f103 0408 	add.w	r4, r3, #8
 8011144:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011148:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 801114c:	3314      	adds	r3, #20
 801114e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011152:	9007      	str	r0, [sp, #28]
 8011154:	f8ad 1020 	strh.w	r1, [sp, #32]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8011158:	ab04      	add	r3, sp, #16
 801115a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if ((sizeof(pinCoils) / sizeof(pinCoils[0])) != OUTPUTS_COUNT ||
 8011162:	e06f      	b.n	8011244 <StartIOTask+0x118>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8011164:	2300      	movs	r3, #0
 8011166:	461a      	mov	r2, r3
 8011168:	a901      	add	r1, sp, #4
 801116a:	483b      	ldr	r0, [pc, #236]	@ (8011258 <StartIOTask+0x12c>)
 801116c:	6800      	ldr	r0, [r0, #0]
 801116e:	f006 feea 	bl	8017f46 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011172:	2400      	movs	r4, #0
 8011174:	e00e      	b.n	8011194 <StartIOTask+0x68>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8011176:	2200      	movs	r2, #0
 8011178:	ab0e      	add	r3, sp, #56	@ 0x38
 801117a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801117e:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8011182:	ab0e      	add	r3, sp, #56	@ 0x38
 8011184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011188:	f853 0c14 	ldr.w	r0, [r3, #-20]
 801118c:	f004 fe61 	bl	8015e52 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	b2e4      	uxtb	r4, r4
 8011194:	2c02      	cmp	r4, #2
 8011196:	d85b      	bhi.n	8011250 <StartIOTask+0x124>
		     if (pinOutputs_w[i]) {
 8011198:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801119c:	446b      	add	r3, sp
 801119e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d0e7      	beq.n	8011176 <StartIOTask+0x4a>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 80111a6:	2201      	movs	r2, #1
 80111a8:	ab0e      	add	r3, sp, #56	@ 0x38
 80111aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80111ae:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 80111b2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111b8:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111bc:	f004 fe49 	bl	8015e52 <HAL_GPIO_WritePin>
 80111c0:	e7e6      	b.n	8011190 <StartIOTask+0x64>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80111c2:	ab0e      	add	r3, sp, #56	@ 0x38
 80111c4:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80111c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80111cc:	f832 1c08 	ldrh.w	r1, [r2, #-8]
 80111d0:	f853 0c14 	ldr.w	r0, [r3, #-20]
 80111d4:	f004 fe36 	bl	8015e44 <HAL_GPIO_ReadPin>
 80111d8:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 80111dc:	446b      	add	r3, sp
 80111de:	f803 0c30 	strb.w	r0, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80111e2:	3401      	adds	r4, #1
 80111e4:	b2e4      	uxtb	r4, r4
 80111e6:	2c02      	cmp	r4, #2
 80111e8:	d9eb      	bls.n	80111c2 <StartIOTask+0x96>
	osMessageQueueReset(outputReadQHandle);
 80111ea:	4c1c      	ldr	r4, [pc, #112]	@ (801125c <StartIOTask+0x130>)
 80111ec:	6820      	ldr	r0, [r4, #0]
 80111ee:	f006 fef8 	bl	8017fe2 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 80111f2:	2300      	movs	r3, #0
 80111f4:	461a      	mov	r2, r3
 80111f6:	a902      	add	r1, sp, #8
 80111f8:	6820      	ldr	r0, [r4, #0]
 80111fa:	f006 fe62 	bl	8017ec2 <osMessageQueuePut>
	for (i = 0; i < INPUTS_COUNT; i++) {
 80111fe:	2400      	movs	r4, #0
 8011200:	e011      	b.n	8011226 <StartIOTask+0xfa>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 8011202:	ab0e      	add	r3, sp, #56	@ 0x38
 8011204:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 8011208:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801120c:	f832 1c1c 	ldrh.w	r1, [r2, #-28]
 8011210:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8011214:	f004 fe16 	bl	8015e44 <HAL_GPIO_ReadPin>
 8011218:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801121c:	446b      	add	r3, sp
 801121e:	f803 0c2c 	strb.w	r0, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8011222:	3401      	adds	r4, #1
 8011224:	b2e4      	uxtb	r4, r4
 8011226:	2c02      	cmp	r4, #2
 8011228:	d9eb      	bls.n	8011202 <StartIOTask+0xd6>
	osMessageQueueReset(inputReadQHandle);
 801122a:	4c0d      	ldr	r4, [pc, #52]	@ (8011260 <StartIOTask+0x134>)
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	f006 fed8 	bl	8017fe2 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 8011232:	2300      	movs	r3, #0
 8011234:	461a      	mov	r2, r3
 8011236:	a903      	add	r1, sp, #12
 8011238:	6820      	ldr	r0, [r4, #0]
 801123a:	f006 fe42 	bl	8017ec2 <osMessageQueuePut>
    osDelay(1);
 801123e:	2001      	movs	r0, #1
 8011240:	f006 fd47 	bl	8017cd2 <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8011244:	4b04      	ldr	r3, [pc, #16]	@ (8011258 <StartIOTask+0x12c>)
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	f006 febe 	bl	8017fc8 <osMessageQueueGetCount>
 801124c:	2800      	cmp	r0, #0
 801124e:	d189      	bne.n	8011164 <StartIOTask+0x38>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8011250:	2400      	movs	r4, #0
 8011252:	e7c8      	b.n	80111e6 <StartIOTask+0xba>
 8011254:	08035308 	.word	0x08035308
 8011258:	2000089c 	.word	0x2000089c
 801125c:	200008a0 	.word	0x200008a0
 8011260:	200008a4 	.word	0x200008a4

08011264 <add_log_mess_to_q>:
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}

void add_log_mess_to_q(struct log_message mess){
 8011264:	b084      	sub	sp, #16
 8011266:	b508      	push	{r3, lr}
 8011268:	f10d 0c08 	add.w	ip, sp, #8
 801126c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8011270:	2300      	movs	r3, #0
 8011272:	461a      	mov	r2, r3
 8011274:	4661      	mov	r1, ip
 8011276:	4804      	ldr	r0, [pc, #16]	@ (8011288 <add_log_mess_to_q+0x24>)
 8011278:	6800      	ldr	r0, [r0, #0]
 801127a:	f006 fe22 	bl	8017ec2 <osMessageQueuePut>

}
 801127e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011282:	b004      	add	sp, #16
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	20000894 	.word	0x20000894

0801128c <StartDisplayTask>:
{
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	b08a      	sub	sp, #40	@ 0x28
	osDelay(1000);//
 8011290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011294:	f006 fd1d 	bl	8017cd2 <osDelay>
	SSD1306_Init (); // initialise the display
 8011298:	f006 fbb4 	bl	8017a04 <SSD1306_Init>
	osDelay(100);//
 801129c:	2064      	movs	r0, #100	@ 0x64
 801129e:	f006 fd18 	bl	8017cd2 <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80112a2:	2100      	movs	r1, #0
 80112a4:	2001      	movs	r0, #1
 80112a6:	f006 fb11 	bl	80178cc <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80112aa:	2000      	movs	r0, #0
 80112ac:	f006 fad2 	bl	8017854 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112b0:	4c48      	ldr	r4, [pc, #288]	@ (80113d4 <StartDisplayTask+0x148>)
 80112b2:	2201      	movs	r2, #1
 80112b4:	4621      	mov	r1, r4
 80112b6:	4848      	ldr	r0, [pc, #288]	@ (80113d8 <StartDisplayTask+0x14c>)
 80112b8:	f006 fb5c 	bl	8017974 <SSD1306_Puts>
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112bc:	2201      	movs	r2, #1
 80112be:	4621      	mov	r1, r4
 80112c0:	4846      	ldr	r0, [pc, #280]	@ (80113dc <StartDisplayTask+0x150>)
 80112c2:	f006 fb57 	bl	8017974 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112c6:	210b      	movs	r1, #11
 80112c8:	2001      	movs	r0, #1
 80112ca:	f006 faff 	bl	80178cc <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 80112ce:	2201      	movs	r2, #1
 80112d0:	4621      	mov	r1, r4
 80112d2:	4843      	ldr	r0, [pc, #268]	@ (80113e0 <StartDisplayTask+0x154>)
 80112d4:	f006 fb4e 	bl	8017974 <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80112d8:	2116      	movs	r1, #22
 80112da:	2001      	movs	r0, #1
 80112dc:	f006 faf6 	bl	80178cc <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80112e0:	2201      	movs	r2, #1
 80112e2:	4621      	mov	r1, r4
 80112e4:	483f      	ldr	r0, [pc, #252]	@ (80113e4 <StartDisplayTask+0x158>)
 80112e6:	f006 fb45 	bl	8017974 <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 80112ea:	2121      	movs	r1, #33	@ 0x21
 80112ec:	2001      	movs	r0, #1
 80112ee:	f006 faed 	bl	80178cc <SSD1306_GotoXY>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 80112f2:	4b3d      	ldr	r3, [pc, #244]	@ (80113e8 <StartDisplayTask+0x15c>)
 80112f4:	6859      	ldr	r1, [r3, #4]
 80112f6:	780a      	ldrb	r2, [r1, #0]
 80112f8:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 80112fa:	7888      	ldrb	r0, [r1, #2]
 80112fc:	78cd      	ldrb	r5, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 80112fe:	790e      	ldrb	r6, [r1, #4]
 8011300:	7949      	ldrb	r1, [r1, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8011302:	9103      	str	r1, [sp, #12]
 8011304:	9602      	str	r6, [sp, #8]
 8011306:	9501      	str	r5, [sp, #4]
 8011308:	9000      	str	r0, [sp, #0]
 801130a:	4938      	ldr	r1, [pc, #224]	@ (80113ec <StartDisplayTask+0x160>)
 801130c:	a805      	add	r0, sp, #20
 801130e:	f01a faad 	bl	802b86c <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011312:	2201      	movs	r2, #1
 8011314:	4621      	mov	r1, r4
 8011316:	a805      	add	r0, sp, #20
 8011318:	f006 fb2c 	bl	8017974 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 801131c:	f006 fc1c 	bl	8017b58 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 8011320:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011324:	f008 f840 	bl	80193a8 <vTaskDelay>
    int i=0;
 8011328:	2500      	movs	r5, #0
 801132a:	e003      	b.n	8011334 <StartDisplayTask+0xa8>
		osDelay(1000);
 801132c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011330:	f006 fccf 	bl	8017cd2 <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 8011334:	2100      	movs	r1, #0
 8011336:	2001      	movs	r0, #1
 8011338:	f006 fac8 	bl	80178cc <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 801133c:	2000      	movs	r0, #0
 801133e:	f006 fa89 	bl	8017854 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 8011342:	4c24      	ldr	r4, [pc, #144]	@ (80113d4 <StartDisplayTask+0x148>)
 8011344:	2201      	movs	r2, #1
 8011346:	4621      	mov	r1, r4
 8011348:	4829      	ldr	r0, [pc, #164]	@ (80113f0 <StartDisplayTask+0x164>)
 801134a:	f006 fb13 	bl	8017974 <SSD1306_Puts>
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 801134e:	4b26      	ldr	r3, [pc, #152]	@ (80113e8 <StartDisplayTask+0x15c>)
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011354:	0e13      	lsrs	r3, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8011356:	9301      	str	r3, [sp, #4]
 8011358:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011362:	b2d2      	uxtb	r2, r2
 8011364:	4923      	ldr	r1, [pc, #140]	@ (80113f4 <StartDisplayTask+0x168>)
 8011366:	a805      	add	r0, sp, #20
 8011368:	f01a fa80 	bl	802b86c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 801136c:	2201      	movs	r2, #1
 801136e:	4621      	mov	r1, r4
 8011370:	a805      	add	r0, sp, #20
 8011372:	f006 faff 	bl	8017974 <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 8011376:	210a      	movs	r1, #10
 8011378:	2001      	movs	r0, #1
 801137a:	f006 faa7 	bl	80178cc <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 801137e:	2201      	movs	r2, #1
 8011380:	4621      	mov	r1, r4
 8011382:	481d      	ldr	r0, [pc, #116]	@ (80113f8 <StartDisplayTask+0x16c>)
 8011384:	f006 faf6 	bl	8017974 <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 8011388:	3501      	adds	r5, #1
 801138a:	462a      	mov	r2, r5
 801138c:	491b      	ldr	r1, [pc, #108]	@ (80113fc <StartDisplayTask+0x170>)
 801138e:	a805      	add	r0, sp, #20
 8011390:	f01a fa6c 	bl	802b86c <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 8011394:	2201      	movs	r2, #1
 8011396:	4621      	mov	r1, r4
 8011398:	a805      	add	r0, sp, #20
 801139a:	f006 faeb 	bl	8017974 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 801139e:	f006 fbdb 	bl	8017b58 <SSD1306_UpdateScreen>
		while(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80113a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80113a6:	2201      	movs	r2, #1
 80113a8:	2178      	movs	r1, #120	@ 0x78
 80113aa:	4815      	ldr	r0, [pc, #84]	@ (8011400 <StartDisplayTask+0x174>)
 80113ac:	f005 f89c 	bl	80164e8 <HAL_I2C_IsDeviceReady>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d0bb      	beq.n	801132c <StartDisplayTask+0xa0>
			HAL_I2C_DeInit(&hi2c1);
 80113b4:	4812      	ldr	r0, [pc, #72]	@ (8011400 <StartDisplayTask+0x174>)
 80113b6:	f004 ffc1 	bl	801633c <HAL_I2C_DeInit>
			vTaskDelay(1000);
 80113ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113be:	f007 fff3 	bl	80193a8 <vTaskDelay>
			MX_I2C1_Init();
 80113c2:	f000 fc61 	bl	8011c88 <MX_I2C1_Init>
			vTaskDelay(1000);
 80113c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80113ca:	f007 ffed 	bl	80193a8 <vTaskDelay>
			SSD1306_Init ();
 80113ce:	f006 fb19 	bl	8017a04 <SSD1306_Init>
 80113d2:	e7e6      	b.n	80113a2 <StartDisplayTask+0x116>
 80113d4:	2000010c 	.word	0x2000010c
 80113d8:	08035584 	.word	0x08035584
 80113dc:	08035590 	.word	0x08035590
 80113e0:	0803559c 	.word	0x0803559c
 80113e4:	080355a8 	.word	0x080355a8
 80113e8:	200008bc 	.word	0x200008bc
 80113ec:	080355b0 	.word	0x080355b0
 80113f0:	080355d0 	.word	0x080355d0
 80113f4:	080355d4 	.word	0x080355d4
 80113f8:	080355e4 	.word	0x080355e4
 80113fc:	0803a574 	.word	0x0803a574
 8011400:	200008c4 	.word	0x200008c4

08011404 <StartSettingsTask>:
{
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	b0ba      	sub	sp, #232	@ 0xe8
	size_t  f_size = 0;
 8011408:	2300      	movs	r3, #0
 801140a:	9339      	str	r3, [sp, #228]	@ 0xe4
  SPI_flash_reg_cb(FlashBegin, FlashEnd, FlashSPIrecvBuff, FlashSPIsendByte);
 801140c:	4b79      	ldr	r3, [pc, #484]	@ (80115f4 <StartSettingsTask+0x1f0>)
 801140e:	4a7a      	ldr	r2, [pc, #488]	@ (80115f8 <StartSettingsTask+0x1f4>)
 8011410:	497a      	ldr	r1, [pc, #488]	@ (80115fc <StartSettingsTask+0x1f8>)
 8011412:	487b      	ldr	r0, [pc, #492]	@ (8011600 <StartSettingsTask+0x1fc>)
 8011414:	f004 f8b0 	bl	8015578 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 8011418:	497a      	ldr	r1, [pc, #488]	@ (8011604 <StartSettingsTask+0x200>)
 801141a:	487b      	ldr	r0, [pc, #492]	@ (8011608 <StartSettingsTask+0x204>)
 801141c:	f009 f88e 	bl	801a53c <lfs_fs_ll_init>
 8011420:	2800      	cmp	r0, #0
 8011422:	db3b      	blt.n	801149c <StartSettingsTask+0x98>
  mg_fs_lfs_mkdir("/web");
 8011424:	4879      	ldr	r0, [pc, #484]	@ (801160c <StartSettingsTask+0x208>)
 8011426:	f009 f877 	bl	801a518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 801142a:	4c79      	ldr	r4, [pc, #484]	@ (8011610 <StartSettingsTask+0x20c>)
 801142c:	4620      	mov	r0, r4
 801142e:	f009 f867 	bl	801a500 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 8011432:	4878      	ldr	r0, [pc, #480]	@ (8011614 <StartSettingsTask+0x210>)
 8011434:	f009 f864 	bl	801a500 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8011438:	4620      	mov	r0, r4
 801143a:	f009 f86d 	bl	801a518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 801143e:	4876      	ldr	r0, [pc, #472]	@ (8011618 <StartSettingsTask+0x214>)
 8011440:	f009 f86a 	bl	801a518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 8011444:	4875      	ldr	r0, [pc, #468]	@ (801161c <StartSettingsTask+0x218>)
 8011446:	f009 f867 	bl	801a518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 801144a:	4875      	ldr	r0, [pc, #468]	@ (8011620 <StartSettingsTask+0x21c>)
 801144c:	f009 f864 	bl	801a518 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/auth");
 8011450:	4874      	ldr	r0, [pc, #464]	@ (8011624 <StartSettingsTask+0x220>)
 8011452:	f009 f861 	bl	801a518 <mg_fs_lfs_mkdir>
  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8011456:	2200      	movs	r2, #0
 8011458:	a939      	add	r1, sp, #228	@ 0xe4
 801145a:	4873      	ldr	r0, [pc, #460]	@ (8011628 <StartSettingsTask+0x224>)
 801145c:	f008 ffa4 	bl	801a3a8 <mg_fs_lfs_status>
 8011460:	b1f8      	cbz	r0, 80114a2 <StartSettingsTask+0x9e>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 8011462:	2101      	movs	r1, #1
 8011464:	4870      	ldr	r0, [pc, #448]	@ (8011628 <StartSettingsTask+0x224>)
 8011466:	f008 ffdd 	bl	801a424 <mg_fs_lfs_open>
 801146a:	4604      	mov	r4, r0
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801146c:	22c6      	movs	r2, #198	@ 0xc6
 801146e:	a907      	add	r1, sp, #28
 8011470:	f009 f808 	bl	801a484 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8011474:	4620      	mov	r0, r4
 8011476:	f008 fff9 	bl	801a46c <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 801147a:	2200      	movs	r2, #0
 801147c:	f88d 201c 	strb.w	r2, [sp, #28]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011480:	2302      	movs	r3, #2
 8011482:	a907      	add	r1, sp, #28
 8011484:	4869      	ldr	r0, [pc, #420]	@ (801162c <StartSettingsTask+0x228>)
 8011486:	6800      	ldr	r0, [r0, #0]
 8011488:	f006 ff82 	bl	8018390 <xQueueGenericSend>
  if (mg_fs_lfs_status(WEB_USERS_FILE, &f_size, NULL) == 0){//file not found
 801148c:	2200      	movs	r2, #0
 801148e:	a939      	add	r1, sp, #228	@ 0xe4
 8011490:	4867      	ldr	r0, [pc, #412]	@ (8011630 <StartSettingsTask+0x22c>)
 8011492:	f008 ff89 	bl	801a3a8 <mg_fs_lfs_status>
 8011496:	b188      	cbz	r0, 80114bc <StartSettingsTask+0xb8>
{
 8011498:	2400      	movs	r4, #0
 801149a:	e082      	b.n	80115a2 <StartSettingsTask+0x19e>
	  HAL_NVIC_SystemReset(); //TODO fo Release uncomment
 801149c:	f004 fb62 	bl	8015b64 <HAL_NVIC_SystemReset>
 80114a0:	e7c0      	b.n	8011424 <StartSettingsTask+0x20>
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 80114a2:	22c6      	movs	r2, #198	@ 0xc6
 80114a4:	2100      	movs	r1, #0
 80114a6:	a807      	add	r0, sp, #28
 80114a8:	f01a fda2 	bl	802bff0 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80114ac:	2302      	movs	r3, #2
 80114ae:	2200      	movs	r2, #0
 80114b0:	a907      	add	r1, sp, #28
 80114b2:	485e      	ldr	r0, [pc, #376]	@ (801162c <StartSettingsTask+0x228>)
 80114b4:	6800      	ldr	r0, [r0, #0]
 80114b6:	f006 ff6b 	bl	8018390 <xQueueGenericSend>
 80114ba:	e7e7      	b.n	801148c <StartSettingsTask+0x88>
	  web_users = (users_list_t *)malloc(user_list_size * sizeof(users_list_t));
 80114bc:	f240 609a 	movw	r0, #1690	@ 0x69a
 80114c0:	f008 fe0a 	bl	801a0d8 <pvPortMalloc>
	  if (web_users == NULL) {
 80114c4:	4604      	mov	r4, r0
 80114c6:	b390      	cbz	r0, 801152e <StartSettingsTask+0x12a>
		  logging(L_INFO, "Initialize default login pass for web (admin:admin)'");
 80114c8:	495a      	ldr	r1, [pc, #360]	@ (8011634 <StartSettingsTask+0x230>)
 80114ca:	2001      	movs	r0, #1
 80114cc:	f000 fc70 	bl	8011db0 <logging>
		  strcpy(web_users[0].user, WEB_ADMIN_DEFAULT);
 80114d0:	4b59      	ldr	r3, [pc, #356]	@ (8011638 <StartSettingsTask+0x234>)
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	6020      	str	r0, [r4, #0]
 80114d6:	889b      	ldrh	r3, [r3, #4]
 80114d8:	80a3      	strh	r3, [r4, #4]
		  unsigned char pass_digest[] = WEB_ADMIN_PASS_DIGEST;
 80114da:	ad01      	add	r5, sp, #4
 80114dc:	4e57      	ldr	r6, [pc, #348]	@ (801163c <StartSettingsTask+0x238>)
 80114de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80114e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80114e6:	f845 0b04 	str.w	r0, [r5], #4
 80114ea:	7029      	strb	r1, [r5, #0]
		  memcpy(web_users[0].pass_digest, pass_digest, sizeof(pass_digest));
 80114ec:	ad01      	add	r5, sp, #4
 80114ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114f0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 80114f4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 80114f8:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 80114fc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8011500:	6828      	ldr	r0, [r5, #0]
 8011502:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
 8011506:	792b      	ldrb	r3, [r5, #4]
 8011508:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
		  f_pointer = mg_fs_lfs_open(WEB_USERS_FILE, MG_FS_WRITE);
 801150c:	2102      	movs	r1, #2
 801150e:	4848      	ldr	r0, [pc, #288]	@ (8011630 <StartSettingsTask+0x22c>)
 8011510:	f008 ff88 	bl	801a424 <mg_fs_lfs_open>
 8011514:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, web_users, user_list_size * sizeof(users_list_t));
 8011516:	f240 629a 	movw	r2, #1690	@ 0x69a
 801151a:	4621      	mov	r1, r4
 801151c:	f008 ffbe 	bl	801a49c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011520:	4628      	mov	r0, r5
 8011522:	f008 ffa3 	bl	801a46c <mg_fs_lfs_close>
	  free(web_users);
 8011526:	4620      	mov	r0, r4
 8011528:	f008 fe58 	bl	801a1dc <vPortFree>
 801152c:	e7b4      	b.n	8011498 <StartSettingsTask+0x94>
		  logging(L_ERR, "Failed to allocate memory for 'web_users' ");
 801152e:	4944      	ldr	r1, [pc, #272]	@ (8011640 <StartSettingsTask+0x23c>)
 8011530:	2003      	movs	r0, #3
 8011532:	f000 fc3d 	bl	8011db0 <logging>
 8011536:	e7f6      	b.n	8011526 <StartSettingsTask+0x122>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 8011538:	4d3b      	ldr	r5, [pc, #236]	@ (8011628 <StartSettingsTask+0x224>)
 801153a:	4628      	mov	r0, r5
 801153c:	f008 ffe0 	bl	801a500 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 8011540:	2102      	movs	r1, #2
 8011542:	4628      	mov	r0, r5
 8011544:	f008 ff6e 	bl	801a424 <mg_fs_lfs_open>
 8011548:	4605      	mov	r5, r0
 801154a:	2800      	cmp	r0, #0
 801154c:	d033      	beq.n	80115b6 <StartSettingsTask+0x1b2>
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 801154e:	22c6      	movs	r2, #198	@ 0xc6
 8011550:	a907      	add	r1, sp, #28
 8011552:	f008 ffa3 	bl	801a49c <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 8011556:	4628      	mov	r0, r5
 8011558:	f008 ff88 	bl	801a46c <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 801155c:	2200      	movs	r2, #0
 801155e:	f88d 201c 	strb.w	r2, [sp, #28]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8011562:	2302      	movs	r3, #2
 8011564:	a907      	add	r1, sp, #28
 8011566:	4831      	ldr	r0, [pc, #196]	@ (801162c <StartSettingsTask+0x228>)
 8011568:	6800      	ldr	r0, [r0, #0]
 801156a:	f006 ff11 	bl	8018390 <xQueueGenericSend>
 801156e:	e022      	b.n	80115b6 <StartSettingsTask+0x1b2>
				 osDelay(1);
 8011570:	2001      	movs	r0, #1
 8011572:	f006 fbae 	bl	8017cd2 <osDelay>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 8011576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801157a:	4832      	ldr	r0, [pc, #200]	@ (8011644 <StartSettingsTask+0x240>)
 801157c:	f004 fc62 	bl	8015e44 <HAL_GPIO_ReadPin>
 8011580:	2800      	cmp	r0, #0
 8011582:	d0f5      	beq.n	8011570 <StartSettingsTask+0x16c>
			 osDelay(1000);
 8011584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011588:	f006 fba3 	bl	8017cd2 <osDelay>
			 mg_fs_lfs_remove(WEB_USERS_FILE);
 801158c:	4828      	ldr	r0, [pc, #160]	@ (8011630 <StartSettingsTask+0x22c>)
 801158e:	f008 ffb7 	bl	801a500 <mg_fs_lfs_remove>
			 HAL_NVIC_SystemReset();
 8011592:	f004 fae7 	bl	8015b64 <HAL_NVIC_SystemReset>
 8011596:	e000      	b.n	801159a <StartSettingsTask+0x196>
		 press_time = 0;
 8011598:	2400      	movs	r4, #0
	  osDelay(1000);
 801159a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801159e:	f006 fb98 	bl	8017cd2 <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80115a2:	2200      	movs	r2, #0
 80115a4:	a907      	add	r1, sp, #28
 80115a6:	4b21      	ldr	r3, [pc, #132]	@ (801162c <StartSettingsTask+0x228>)
 80115a8:	6818      	ldr	r0, [r3, #0]
 80115aa:	f007 fa04 	bl	80189b6 <xQueuePeek>
	  if(mqtt_config.save){
 80115ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1c0      	bne.n	8011538 <StartSettingsTask+0x134>
	 if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){ // If key pressed, more than 8 secons - reset auth file and reset mcu
 80115b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115ba:	4822      	ldr	r0, [pc, #136]	@ (8011644 <StartSettingsTask+0x240>)
 80115bc:	f004 fc42 	bl	8015e44 <HAL_GPIO_ReadPin>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d1e9      	bne.n	8011598 <StartSettingsTask+0x194>
		 press_time++;
 80115c4:	3401      	adds	r4, #1
 80115c6:	b2e4      	uxtb	r4, r4
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115c8:	4d1e      	ldr	r5, [pc, #120]	@ (8011644 <StartSettingsTask+0x240>)
 80115ca:	2201      	movs	r2, #1
 80115cc:	2102      	movs	r1, #2
 80115ce:	4628      	mov	r0, r5
 80115d0:	f004 fc3f 	bl	8015e52 <HAL_GPIO_WritePin>
		 osDelay(100);
 80115d4:	2064      	movs	r0, #100	@ 0x64
 80115d6:	f006 fb7c 	bl	8017cd2 <osDelay>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80115da:	2200      	movs	r2, #0
 80115dc:	2102      	movs	r1, #2
 80115de:	4628      	mov	r0, r5
 80115e0:	f004 fc37 	bl	8015e52 <HAL_GPIO_WritePin>
		 if (press_time == 8){
 80115e4:	2c08      	cmp	r4, #8
 80115e6:	d1d8      	bne.n	801159a <StartSettingsTask+0x196>
			 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80115e8:	2201      	movs	r2, #1
 80115ea:	2102      	movs	r1, #2
 80115ec:	4628      	mov	r0, r5
 80115ee:	f004 fc30 	bl	8015e52 <HAL_GPIO_WritePin>
			 while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET){
 80115f2:	e7c0      	b.n	8011576 <StartSettingsTask+0x172>
 80115f4:	08011811 	.word	0x08011811
 80115f8:	08011835 	.word	0x08011835
 80115fc:	08011119 	.word	0x08011119
 8011600:	08011105 	.word	0x08011105
 8011604:	08011861 	.word	0x08011861
 8011608:	0801184d 	.word	0x0801184d
 801160c:	080355e8 	.word	0x080355e8
 8011610:	080355f0 	.word	0x080355f0
 8011614:	080355fc 	.word	0x080355fc
 8011618:	0803560c 	.word	0x0803560c
 801161c:	08035618 	.word	0x08035618
 8011620:	08035620 	.word	0x08035620
 8011624:	08035628 	.word	0x08035628
 8011628:	08035630 	.word	0x08035630
 801162c:	20000898 	.word	0x20000898
 8011630:	08035644 	.word	0x08035644
 8011634:	08035680 	.word	0x08035680
 8011638:	080356b8 	.word	0x080356b8
 801163c:	080356c0 	.word	0x080356c0
 8011640:	08035654 	.word	0x08035654
 8011644:	40020400 	.word	0x40020400

08011648 <RW_parameters_from_queue>:
void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8011648:	b508      	push	{r3, lr}
	switch (param_type) {
 801164a:	2901      	cmp	r1, #1
 801164c:	d014      	beq.n	8011678 <RW_parameters_from_queue+0x30>
 801164e:	2902      	cmp	r1, #2
 8011650:	d01a      	beq.n	8011688 <RW_parameters_from_queue+0x40>
 8011652:	b101      	cbz	r1, 8011656 <RW_parameters_from_queue+0xe>
}
 8011654:	bd08      	pop	{r3, pc}
			if (direction == S_READ){
 8011656:	b14a      	cbz	r2, 801166c <RW_parameters_from_queue+0x24>
			}else if (direction == S_WRITE){
 8011658:	2a01      	cmp	r2, #1
 801165a:	d1fb      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(mqttQHandle, pr);
 801165c:	2302      	movs	r3, #2
 801165e:	2200      	movs	r2, #0
 8011660:	4601      	mov	r1, r0
 8011662:	4812      	ldr	r0, [pc, #72]	@ (80116ac <RW_parameters_from_queue+0x64>)
 8011664:	6800      	ldr	r0, [r0, #0]
 8011666:	f006 fe93 	bl	8018390 <xQueueGenericSend>
 801166a:	e7f3      	b.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(mqttQHandle, pr, 0);
 801166c:	4601      	mov	r1, r0
 801166e:	4b0f      	ldr	r3, [pc, #60]	@ (80116ac <RW_parameters_from_queue+0x64>)
 8011670:	6818      	ldr	r0, [r3, #0]
 8011672:	f007 f9a0 	bl	80189b6 <xQueuePeek>
 8011676:	e7ed      	b.n	8011654 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011678:	2a00      	cmp	r2, #0
 801167a:	d1eb      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(inputReadQHandle, input, 0);
 801167c:	4601      	mov	r1, r0
 801167e:	4b0c      	ldr	r3, [pc, #48]	@ (80116b0 <RW_parameters_from_queue+0x68>)
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	f007 f998 	bl	80189b6 <xQueuePeek>
 8011686:	e7e5      	b.n	8011654 <RW_parameters_from_queue+0xc>
			if (direction == S_READ){
 8011688:	b14a      	cbz	r2, 801169e <RW_parameters_from_queue+0x56>
			}else if(direction == S_WRITE){
 801168a:	2a01      	cmp	r2, #1
 801168c:	d1e2      	bne.n	8011654 <RW_parameters_from_queue+0xc>
				xQueueOverwrite(outputWriteQHandle, output);
 801168e:	2302      	movs	r3, #2
 8011690:	2200      	movs	r2, #0
 8011692:	4601      	mov	r1, r0
 8011694:	4807      	ldr	r0, [pc, #28]	@ (80116b4 <RW_parameters_from_queue+0x6c>)
 8011696:	6800      	ldr	r0, [r0, #0]
 8011698:	f006 fe7a 	bl	8018390 <xQueueGenericSend>
}
 801169c:	e7da      	b.n	8011654 <RW_parameters_from_queue+0xc>
				xQueuePeek(outputReadQHandle, output, 0);
 801169e:	4601      	mov	r1, r0
 80116a0:	4b05      	ldr	r3, [pc, #20]	@ (80116b8 <RW_parameters_from_queue+0x70>)
 80116a2:	6818      	ldr	r0, [r3, #0]
 80116a4:	f007 f987 	bl	80189b6 <xQueuePeek>
 80116a8:	e7d4      	b.n	8011654 <RW_parameters_from_queue+0xc>
 80116aa:	bf00      	nop
 80116ac:	20000898 	.word	0x20000898
 80116b0:	200008a4 	.word	0x200008a4
 80116b4:	2000089c 	.word	0x2000089c
 80116b8:	200008a0 	.word	0x200008a0

080116bc <StartLoggingTask>:
{
 80116bc:	b530      	push	{r4, r5, lr}
 80116be:	b0d1      	sub	sp, #324	@ 0x144
	reg_logging_fn(add_log_mess_to_q);
 80116c0:	483e      	ldr	r0, [pc, #248]	@ (80117bc <StartLoggingTask+0x100>)
 80116c2:	f000 fb69 	bl	8011d98 <reg_logging_fn>
	logger_set_level(L_INFO);
 80116c6:	2001      	movs	r0, #1
 80116c8:	f000 fb6c 	bl	8011da4 <logger_set_level>
	logging(L_INFO, "Device started...");
 80116cc:	493c      	ldr	r1, [pc, #240]	@ (80117c0 <StartLoggingTask+0x104>)
 80116ce:	2001      	movs	r0, #1
 80116d0:	f000 fb6e 	bl	8011db0 <logging>
	osDelay(2000);
 80116d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80116d8:	f006 fafb 	bl	8017cd2 <osDelay>
	uint32_t count = 2000;
 80116dc:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
 80116e0:	e048      	b.n	8011774 <StartLoggingTask+0xb8>
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 80116e2:	2300      	movs	r3, #0
 80116e4:	461a      	mov	r2, r3
 80116e6:	a907      	add	r1, sp, #28
 80116e8:	4836      	ldr	r0, [pc, #216]	@ (80117c4 <StartLoggingTask+0x108>)
 80116ea:	6800      	ldr	r0, [r0, #0]
 80116ec:	f006 fc2b 	bl	8017f46 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 80116f0:	2102      	movs	r1, #2
 80116f2:	4835      	ldr	r0, [pc, #212]	@ (80117c8 <StartLoggingTask+0x10c>)
 80116f4:	f008 fe96 	bl	801a424 <mg_fs_lfs_open>
 80116f8:	4605      	mov	r5, r0
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 80116fa:	f89d 211d 	ldrb.w	r2, [sp, #285]	@ 0x11d
 80116fe:	f10d 011d 	add.w	r1, sp, #29
 8011702:	f008 fecb 	bl	801a49c <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8011706:	4628      	mov	r0, r5
 8011708:	f008 feb0 	bl	801a46c <mg_fs_lfs_close>
 801170c:	e038      	b.n	8011780 <StartLoggingTask+0xc4>
    	vPortGetHeapStats(&heap_status);
 801170e:	a848      	add	r0, sp, #288	@ 0x120
 8011710:	f008 fda2 	bl	801a258 <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8011714:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8011716:	9304      	str	r3, [sp, #16]
 8011718:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
 801171a:	9303      	str	r3, [sp, #12]
 801171c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 801171e:	9302      	str	r3, [sp, #8]
 8011720:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 8011722:	9301      	str	r3, [sp, #4]
 8011724:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 801172a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 801172c:	4927      	ldr	r1, [pc, #156]	@ (80117cc <StartLoggingTask+0x110>)
 801172e:	2001      	movs	r0, #1
 8011730:	f000 fb3e 	bl	8011db0 <logging>
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011734:	4c26      	ldr	r4, [pc, #152]	@ (80117d0 <StartLoggingTask+0x114>)
 8011736:	6863      	ldr	r3, [r4, #4]
 8011738:	689a      	ldr	r2, [r3, #8]
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 801173a:	0e13      	lsrs	r3, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011742:	9300      	str	r3, [sp, #0]
 8011744:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011748:	b2d2      	uxtb	r2, r2
 801174a:	4922      	ldr	r1, [pc, #136]	@ (80117d4 <StartLoggingTask+0x118>)
 801174c:	2001      	movs	r0, #1
 801174e:	f000 fb2f 	bl	8011db0 <logging>
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8011752:	6861      	ldr	r1, [r4, #4]
 8011754:	780a      	ldrb	r2, [r1, #0]
 8011756:	784b      	ldrb	r3, [r1, #1]
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8011758:	7888      	ldrb	r0, [r1, #2]
 801175a:	78cc      	ldrb	r4, [r1, #3]
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 801175c:	790d      	ldrb	r5, [r1, #4]
 801175e:	7949      	ldrb	r1, [r1, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8011760:	9103      	str	r1, [sp, #12]
 8011762:	9502      	str	r5, [sp, #8]
 8011764:	9401      	str	r4, [sp, #4]
 8011766:	9000      	str	r0, [sp, #0]
 8011768:	491b      	ldr	r1, [pc, #108]	@ (80117d8 <StartLoggingTask+0x11c>)
 801176a:	2001      	movs	r0, #1
 801176c:	f000 fb20 	bl	8011db0 <logging>
    	count = 0;
 8011770:	2400      	movs	r4, #0
    count ++;
 8011772:	3401      	adds	r4, #1
	  if (osMessageQueueGetCount(loggingQHandle)){
 8011774:	4b13      	ldr	r3, [pc, #76]	@ (80117c4 <StartLoggingTask+0x108>)
 8011776:	6818      	ldr	r0, [r3, #0]
 8011778:	f006 fc26 	bl	8017fc8 <osMessageQueueGetCount>
 801177c:	2800      	cmp	r0, #0
 801177e:	d1b0      	bne.n	80116e2 <StartLoggingTask+0x26>
    osDelay(500);
 8011780:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011784:	f006 faa5 	bl	8017cd2 <osDelay>
    if (count == 2000){
 8011788:	f5b4 6ffa 	cmp.w	r4, #2000	@ 0x7d0
 801178c:	d1f1      	bne.n	8011772 <StartLoggingTask+0xb6>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 801178e:	2200      	movs	r2, #0
 8011790:	a94f      	add	r1, sp, #316	@ 0x13c
 8011792:	480d      	ldr	r0, [pc, #52]	@ (80117c8 <StartLoggingTask+0x10c>)
 8011794:	f008 fe08 	bl	801a3a8 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8011798:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 801179a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 801179e:	429a      	cmp	r2, r3
 80117a0:	d9b5      	bls.n	801170e <StartLoggingTask+0x52>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 80117a2:	4c0e      	ldr	r4, [pc, #56]	@ (80117dc <StartLoggingTask+0x120>)
 80117a4:	4620      	mov	r0, r4
 80117a6:	f008 feab 	bl	801a500 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 80117aa:	4621      	mov	r1, r4
 80117ac:	4806      	ldr	r0, [pc, #24]	@ (80117c8 <StartLoggingTask+0x10c>)
 80117ae:	f008 fe9b 	bl	801a4e8 <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 80117b2:	490b      	ldr	r1, [pc, #44]	@ (80117e0 <StartLoggingTask+0x124>)
 80117b4:	2001      	movs	r0, #1
 80117b6:	f000 fafb 	bl	8011db0 <logging>
 80117ba:	e7a8      	b.n	801170e <StartLoggingTask+0x52>
 80117bc:	08011265 	.word	0x08011265
 80117c0:	080356d8 	.word	0x080356d8
 80117c4:	20000894 	.word	0x20000894
 80117c8:	080356ec 	.word	0x080356ec
 80117cc:	08035720 	.word	0x08035720
 80117d0:	200008bc 	.word	0x200008bc
 80117d4:	080357b4 	.word	0x080357b4
 80117d8:	080357d0 	.word	0x080357d0
 80117dc:	080356fc 	.word	0x080356fc
 80117e0:	0803570c 	.word	0x0803570c

080117e4 <EthTxn>:
uint8_t EthTxn(void *spi, uint8_t data) {
 80117e4:	b500      	push	{lr}
 80117e6:	b087      	sub	sp, #28
 80117e8:	f88d 100f 	strb.w	r1, [sp, #15]
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 80117ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	2301      	movs	r3, #1
 80117f4:	f10d 0217 	add.w	r2, sp, #23
 80117f8:	f10d 010f 	add.w	r1, sp, #15
 80117fc:	4803      	ldr	r0, [pc, #12]	@ (801180c <EthTxn+0x28>)
 80117fe:	f005 fcc6 	bl	801718e <HAL_SPI_TransmitReceive>
}
 8011802:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8011806:	b007      	add	sp, #28
 8011808:	f85d fb04 	ldr.w	pc, [sp], #4
 801180c:	200009e4 	.word	0x200009e4

08011810 <FlashSPIsendByte>:
void FlashSPIsendByte(uint8_t byte){
 8011810:	b500      	push	{lr}
 8011812:	b083      	sub	sp, #12
 8011814:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8011818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801181c:	2201      	movs	r2, #1
 801181e:	f10d 0107 	add.w	r1, sp, #7
 8011822:	4803      	ldr	r0, [pc, #12]	@ (8011830 <FlashSPIsendByte+0x20>)
 8011824:	f005 fbd1 	bl	8016fca <HAL_SPI_Transmit>
}
 8011828:	b003      	add	sp, #12
 801182a:	f85d fb04 	ldr.w	pc, [sp], #4
 801182e:	bf00      	nop
 8011830:	20000a3c 	.word	0x20000a3c

08011834 <FlashSPIrecvBuff>:
int FlashSPIrecvBuff(uint8_t * buffer, uint16_t size){
 8011834:	b508      	push	{r3, lr}
 8011836:	460a      	mov	r2, r1
	return HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8011838:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801183c:	4601      	mov	r1, r0
 801183e:	4802      	ldr	r0, [pc, #8]	@ (8011848 <FlashSPIrecvBuff+0x14>)
 8011840:	f005 fdcf 	bl	80173e2 <HAL_SPI_Receive>
}
 8011844:	bd08      	pop	{r3, pc}
 8011846:	bf00      	nop
 8011848:	20000a3c 	.word	0x20000a3c

0801184c <FS_Lock>:
void FS_Lock(void * param){
 801184c:	b508      	push	{r3, lr}
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 801184e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011852:	4b02      	ldr	r3, [pc, #8]	@ (801185c <FS_Lock+0x10>)
 8011854:	6818      	ldr	r0, [r3, #0]
 8011856:	f006 fa93 	bl	8017d80 <osMutexAcquire>
}
 801185a:	bd08      	pop	{r3, pc}
 801185c:	2000088c 	.word	0x2000088c

08011860 <FS_Unlock>:
void FS_Unlock(void * param){
 8011860:	b508      	push	{r3, lr}
	osMutexRelease(FSMutexHandle);
 8011862:	4b02      	ldr	r3, [pc, #8]	@ (801186c <FS_Unlock+0xc>)
 8011864:	6818      	ldr	r0, [r3, #0]
 8011866:	f006 faba 	bl	8017dde <osMutexRelease>
}
 801186a:	bd08      	pop	{r3, pc}
 801186c:	2000088c 	.word	0x2000088c

08011870 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8011870:	b508      	push	{r3, lr}
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 8011872:	4829      	ldr	r0, [pc, #164]	@ (8011918 <MX_FREERTOS_Init+0xa8>)
 8011874:	f006 fa3b 	bl	8017cee <osMutexNew>
 8011878:	4b28      	ldr	r3, [pc, #160]	@ (801191c <MX_FREERTOS_Init+0xac>)
 801187a:	6018      	str	r0, [r3, #0]
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 801187c:	4828      	ldr	r0, [pc, #160]	@ (8011920 <MX_FREERTOS_Init+0xb0>)
 801187e:	f006 fa36 	bl	8017cee <osMutexNew>
 8011882:	4b28      	ldr	r3, [pc, #160]	@ (8011924 <MX_FREERTOS_Init+0xb4>)
 8011884:	6018      	str	r0, [r3, #0]
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 8011886:	4a28      	ldr	r2, [pc, #160]	@ (8011928 <MX_FREERTOS_Init+0xb8>)
 8011888:	2103      	movs	r1, #3
 801188a:	2001      	movs	r0, #1
 801188c:	f006 face 	bl	8017e2c <osMessageQueueNew>
 8011890:	4b26      	ldr	r3, [pc, #152]	@ (801192c <MX_FREERTOS_Init+0xbc>)
 8011892:	6018      	str	r0, [r3, #0]
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8011894:	4a26      	ldr	r2, [pc, #152]	@ (8011930 <MX_FREERTOS_Init+0xc0>)
 8011896:	2103      	movs	r1, #3
 8011898:	2001      	movs	r0, #1
 801189a:	f006 fac7 	bl	8017e2c <osMessageQueueNew>
 801189e:	4b25      	ldr	r3, [pc, #148]	@ (8011934 <MX_FREERTOS_Init+0xc4>)
 80118a0:	6018      	str	r0, [r3, #0]
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 80118a2:	4a25      	ldr	r2, [pc, #148]	@ (8011938 <MX_FREERTOS_Init+0xc8>)
 80118a4:	2103      	movs	r1, #3
 80118a6:	2001      	movs	r0, #1
 80118a8:	f006 fac0 	bl	8017e2c <osMessageQueueNew>
 80118ac:	4b23      	ldr	r3, [pc, #140]	@ (801193c <MX_FREERTOS_Init+0xcc>)
 80118ae:	6018      	str	r0, [r3, #0]
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 80118b0:	4a23      	ldr	r2, [pc, #140]	@ (8011940 <MX_FREERTOS_Init+0xd0>)
 80118b2:	21c6      	movs	r1, #198	@ 0xc6
 80118b4:	2001      	movs	r0, #1
 80118b6:	f006 fab9 	bl	8017e2c <osMessageQueueNew>
 80118ba:	4b22      	ldr	r3, [pc, #136]	@ (8011944 <MX_FREERTOS_Init+0xd4>)
 80118bc:	6018      	str	r0, [r3, #0]
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 80118be:	4a22      	ldr	r2, [pc, #136]	@ (8011948 <MX_FREERTOS_Init+0xd8>)
 80118c0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80118c4:	200f      	movs	r0, #15
 80118c6:	f006 fab1 	bl	8017e2c <osMessageQueueNew>
 80118ca:	4b20      	ldr	r3, [pc, #128]	@ (801194c <MX_FREERTOS_Init+0xdc>)
 80118cc:	6018      	str	r0, [r3, #0]
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 80118ce:	4a20      	ldr	r2, [pc, #128]	@ (8011950 <MX_FREERTOS_Init+0xe0>)
 80118d0:	2100      	movs	r1, #0
 80118d2:	4820      	ldr	r0, [pc, #128]	@ (8011954 <MX_FREERTOS_Init+0xe4>)
 80118d4:	f006 f99e 	bl	8017c14 <osThreadNew>
 80118d8:	4b1f      	ldr	r3, [pc, #124]	@ (8011958 <MX_FREERTOS_Init+0xe8>)
 80118da:	6018      	str	r0, [r3, #0]
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 80118dc:	4a1f      	ldr	r2, [pc, #124]	@ (801195c <MX_FREERTOS_Init+0xec>)
 80118de:	2100      	movs	r1, #0
 80118e0:	481f      	ldr	r0, [pc, #124]	@ (8011960 <MX_FREERTOS_Init+0xf0>)
 80118e2:	f006 f997 	bl	8017c14 <osThreadNew>
 80118e6:	4b1f      	ldr	r3, [pc, #124]	@ (8011964 <MX_FREERTOS_Init+0xf4>)
 80118e8:	6018      	str	r0, [r3, #0]
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 80118ea:	4a1f      	ldr	r2, [pc, #124]	@ (8011968 <MX_FREERTOS_Init+0xf8>)
 80118ec:	2100      	movs	r1, #0
 80118ee:	481f      	ldr	r0, [pc, #124]	@ (801196c <MX_FREERTOS_Init+0xfc>)
 80118f0:	f006 f990 	bl	8017c14 <osThreadNew>
 80118f4:	4b1e      	ldr	r3, [pc, #120]	@ (8011970 <MX_FREERTOS_Init+0x100>)
 80118f6:	6018      	str	r0, [r3, #0]
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 80118f8:	4a1e      	ldr	r2, [pc, #120]	@ (8011974 <MX_FREERTOS_Init+0x104>)
 80118fa:	2100      	movs	r1, #0
 80118fc:	481e      	ldr	r0, [pc, #120]	@ (8011978 <MX_FREERTOS_Init+0x108>)
 80118fe:	f006 f989 	bl	8017c14 <osThreadNew>
 8011902:	4b1e      	ldr	r3, [pc, #120]	@ (801197c <MX_FREERTOS_Init+0x10c>)
 8011904:	6018      	str	r0, [r3, #0]
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 8011906:	4a1e      	ldr	r2, [pc, #120]	@ (8011980 <MX_FREERTOS_Init+0x110>)
 8011908:	2100      	movs	r1, #0
 801190a:	481e      	ldr	r0, [pc, #120]	@ (8011984 <MX_FREERTOS_Init+0x114>)
 801190c:	f006 f982 	bl	8017c14 <osThreadNew>
 8011910:	4b1d      	ldr	r3, [pc, #116]	@ (8011988 <MX_FREERTOS_Init+0x118>)
 8011912:	6018      	str	r0, [r3, #0]
}
 8011914:	bd08      	pop	{r3, pc}
 8011916:	bf00      	nop
 8011918:	080358d4 	.word	0x080358d4
 801191c:	20000890 	.word	0x20000890
 8011920:	080358c4 	.word	0x080358c4
 8011924:	2000088c 	.word	0x2000088c
 8011928:	08035944 	.word	0x08035944
 801192c:	200008a4 	.word	0x200008a4
 8011930:	0803592c 	.word	0x0803592c
 8011934:	200008a0 	.word	0x200008a0
 8011938:	08035914 	.word	0x08035914
 801193c:	2000089c 	.word	0x2000089c
 8011940:	080358fc 	.word	0x080358fc
 8011944:	20000898 	.word	0x20000898
 8011948:	080358e4 	.word	0x080358e4
 801194c:	20000894 	.word	0x20000894
 8011950:	080359ec 	.word	0x080359ec
 8011954:	080119b5 	.word	0x080119b5
 8011958:	200008b8 	.word	0x200008b8
 801195c:	080359c8 	.word	0x080359c8
 8011960:	0801112d 	.word	0x0801112d
 8011964:	200008b4 	.word	0x200008b4
 8011968:	080359a4 	.word	0x080359a4
 801196c:	0801128d 	.word	0x0801128d
 8011970:	200008b0 	.word	0x200008b0
 8011974:	08035980 	.word	0x08035980
 8011978:	08011405 	.word	0x08011405
 801197c:	200008ac 	.word	0x200008ac
 8011980:	0803595c 	.word	0x0803595c
 8011984:	080116bd 	.word	0x080116bd
 8011988:	200008a8 	.word	0x200008a8

0801198c <EthResetBegin>:
void EthResetBegin(void){
 801198c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 801198e:	2200      	movs	r2, #0
 8011990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011994:	4801      	ldr	r0, [pc, #4]	@ (801199c <EthResetBegin+0x10>)
 8011996:	f004 fa5c 	bl	8015e52 <HAL_GPIO_WritePin>
}
 801199a:	bd08      	pop	{r3, pc}
 801199c:	40020000 	.word	0x40020000

080119a0 <EthResetEnd>:
void EthResetEnd(void){
 80119a0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 80119a2:	2201      	movs	r2, #1
 80119a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119a8:	4801      	ldr	r0, [pc, #4]	@ (80119b0 <EthResetEnd+0x10>)
 80119aa:	f004 fa52 	bl	8015e52 <HAL_GPIO_WritePin>
}
 80119ae:	bd08      	pop	{r3, pc}
 80119b0:	40020000 	.word	0x40020000

080119b4 <StartEthTask>:
{
 80119b4:	b530      	push	{r4, r5, lr}
 80119b6:	b0eb      	sub	sp, #428	@ 0x1ac
  struct               mg_tcpip_spi spi = {
 80119b8:	ad22      	add	r5, sp, #136	@ 0x88
 80119ba:	4b64      	ldr	r3, [pc, #400]	@ (8011b4c <StartEthTask+0x198>)
 80119bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  struct              mg_tcpip_if   mif = {
 80119c2:	ac02      	add	r4, sp, #8
 80119c4:	2280      	movs	r2, #128	@ 0x80
 80119c6:	2100      	movs	r1, #0
 80119c8:	4620      	mov	r0, r4
 80119ca:	f01a fb11 	bl	802bff0 <memset>
 80119ce:	2340      	movs	r3, #64	@ 0x40
 80119d0:	f88d 3008 	strb.w	r3, [sp, #8]
 80119d4:	2322      	movs	r3, #34	@ 0x22
 80119d6:	f88d 3009 	strb.w	r3, [sp, #9]
													  *(uint8_t*)(UID_BASE),
 80119da:	4b5d      	ldr	r3, [pc, #372]	@ (8011b50 <StartEthTask+0x19c>)
 80119dc:	7c1a      	ldrb	r2, [r3, #16]
  struct              mg_tcpip_if   mif = {
 80119de:	f88d 200a 	strb.w	r2, [sp, #10]
													  *(uint8_t*)(UID_BASE + 0x02),
 80119e2:	7c9a      	ldrb	r2, [r3, #18]
  struct              mg_tcpip_if   mif = {
 80119e4:	f88d 200b 	strb.w	r2, [sp, #11]
													  *(uint8_t*)(UID_BASE + 0x04),
 80119e8:	7d1a      	ldrb	r2, [r3, #20]
  struct              mg_tcpip_if   mif = {
 80119ea:	f88d 200c 	strb.w	r2, [sp, #12]
													  *(uint8_t*)(UID_BASE + 0x08)
 80119ee:	7e1b      	ldrb	r3, [r3, #24]
  struct              mg_tcpip_if   mif = {
 80119f0:	f88d 300d 	strb.w	r3, [sp, #13]
 80119f4:	2301      	movs	r3, #1
 80119f6:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80119fa:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80119fe:	4b55      	ldr	r3, [pc, #340]	@ (8011b54 <StartEthTask+0x1a0>)
 8011a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a02:	950c      	str	r5, [sp, #48]	@ 0x30
  mg_full_info.mgr =  &mgr;
 8011a04:	4b54      	ldr	r3, [pc, #336]	@ (8011b58 <StartEthTask+0x1a4>)
 8011a06:	aa58      	add	r2, sp, #352	@ 0x160
 8011a08:	601a      	str	r2, [r3, #0]
  mg_full_info.mgr_if =  &mif;
 8011a0a:	605c      	str	r4, [r3, #4]
  while (mg_fs_mounted() == 0){
 8011a0c:	e003      	b.n	8011a16 <StartEthTask+0x62>
	  osDelay(500);
 8011a0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a12:	f006 f95e 	bl	8017cd2 <osDelay>
  while (mg_fs_mounted() == 0){
 8011a16:	f008 fd8b 	bl	801a530 <mg_fs_mounted>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d0f7      	beq.n	8011a0e <StartEthTask+0x5a>
  mg_mgr_init(&mgr);        // Mongoose event manager
 8011a1e:	a858      	add	r0, sp, #352	@ 0x160
 8011a20:	f011 f912 	bl	8022c48 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8011a24:	4b4d      	ldr	r3, [pc, #308]	@ (8011b5c <StartEthTask+0x1a8>)
 8011a26:	2203      	movs	r2, #3
 8011a28:	601a      	str	r2, [r3, #0]
  web_handler = dash_hdl(); // Get dashboard handler
 8011a2a:	f002 fb85 	bl	8014138 <dash_hdl>
 8011a2e:	4604      	mov	r4, r0
  while(mif.mtu == 0){
 8011a30:	e00f      	b.n	8011a52 <StartEthTask+0x9e>
	  EthResetBegin();
 8011a32:	f7ff ffab 	bl	801198c <EthResetBegin>
	  osDelay(500);
 8011a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011a3a:	f006 f94a 	bl	8017cd2 <osDelay>
	  EthResetEnd();
 8011a3e:	f7ff ffaf 	bl	80119a0 <EthResetEnd>
	  osDelay(2000);
 8011a42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8011a46:	f006 f944 	bl	8017cd2 <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8011a4a:	a902      	add	r1, sp, #8
 8011a4c:	a858      	add	r0, sp, #352	@ 0x160
 8011a4e:	f016 fcf1 	bl	8028434 <mg_tcpip_init>
  while(mif.mtu == 0){
 8011a52:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d0eb      	beq.n	8011a32 <StartEthTask+0x7e>
  set_device_id(mif.mac, sizeof(mif.mac));
 8011a5a:	2106      	movs	r1, #6
 8011a5c:	a802      	add	r0, sp, #8
 8011a5e:	f002 ff97 	bl	8014990 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 8011a62:	483f      	ldr	r0, [pc, #252]	@ (8011b60 <StartEthTask+0x1ac>)
 8011a64:	f002 fb76 	bl	8014154 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8011a68:	4b3b      	ldr	r3, [pc, #236]	@ (8011b58 <StartEthTask+0x1a4>)
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	493d      	ldr	r1, [pc, #244]	@ (8011b64 <StartEthTask+0x1b0>)
 8011a6e:	a858      	add	r0, sp, #352	@ 0x160
 8011a70:	f014 ff0e 	bl	8026890 <mg_http_listen>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011a74:	e006      	b.n	8011a84 <StartEthTask+0xd0>
    mg_mgr_poll(&mgr, 1);
 8011a76:	2101      	movs	r1, #1
 8011a78:	a858      	add	r0, sp, #352	@ 0x160
 8011a7a:	f017 fa75 	bl	8028f68 <mg_mgr_poll>
    osDelay(1);
 8011a7e:	2001      	movs	r0, #1
 8011a80:	f006 f927 	bl	8017cd2 <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8011a84:	f89d 3084 	ldrb.w	r3, [sp, #132]	@ 0x84
 8011a88:	2b03      	cmp	r3, #3
 8011a8a:	d1f4      	bne.n	8011a76 <StartEthTask+0xc2>
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011a8c:	4b32      	ldr	r3, [pc, #200]	@ (8011b58 <StartEthTask+0x1a4>)
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	689a      	ldr	r2, [r3, #8]
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8011a92:	0e13      	lsrs	r3, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8011a94:	9301      	str	r3, [sp, #4]
 8011a96:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011a9a:	9300      	str	r3, [sp, #0]
 8011a9c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011aa0:	b2d2      	uxtb	r2, r2
 8011aa2:	4931      	ldr	r1, [pc, #196]	@ (8011b68 <StartEthTask+0x1b4>)
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	f000 f983 	bl	8011db0 <logging>
  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 8011aaa:	2200      	movs	r2, #0
 8011aac:	4611      	mov	r1, r2
 8011aae:	a826      	add	r0, sp, #152	@ 0x98
 8011ab0:	f7ff fdca 	bl	8011648 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 8011ab4:	f89d 3099 	ldrb.w	r3, [sp, #153]	@ 0x99
 8011ab8:	b1eb      	cbz	r3, 8011af6 <StartEthTask+0x142>
	  logging(L_INFO, "MQTT function enabled.");
 8011aba:	492c      	ldr	r1, [pc, #176]	@ (8011b6c <StartEthTask+0x1b8>)
 8011abc:	2001      	movs	r0, #1
 8011abe:	f000 f977 	bl	8011db0 <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 8011ac2:	4b27      	ldr	r3, [pc, #156]	@ (8011b60 <StartEthTask+0x1ac>)
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	f20d 133d 	addw	r3, sp, #317	@ 0x13d
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	ab47      	add	r3, sp, #284	@ 0x11c
 8011ace:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
 8011ad2:	a902      	add	r1, sp, #8
 8011ad4:	a858      	add	r0, sp, #352	@ 0x160
 8011ad6:	f002 fe99 	bl	801480c <mqtt_init>
  start_sntp(&mgr);
 8011ada:	a858      	add	r0, sp, #352	@ 0x160
 8011adc:	f003 fb2e 	bl	801513c <start_sntp>
  ssdp_start_server(&mgr, &mif);
 8011ae0:	a902      	add	r1, sp, #8
 8011ae2:	a858      	add	r0, sp, #352	@ 0x160
 8011ae4:	f003 fcf6 	bl	80154d4 <ssdp_start_server>
  init_mb_tcp(&mgr);
 8011ae8:	a858      	add	r0, sp, #352	@ 0x160
 8011aea:	f000 ff27 	bl	801293c <init_mb_tcp>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 8011aee:	f007 fb4d 	bl	801918c <xTaskGetTickCount>
 8011af2:	4605      	mov	r5, r0
 8011af4:	e008      	b.n	8011b08 <StartEthTask+0x154>
	  logging(L_INFO, "MQTT function disabled");
 8011af6:	491e      	ldr	r1, [pc, #120]	@ (8011b70 <StartEthTask+0x1bc>)
 8011af8:	2001      	movs	r0, #1
 8011afa:	f000 f959 	bl	8011db0 <logging>
 8011afe:	e7ec      	b.n	8011ada <StartEthTask+0x126>
      osDelay(1);
 8011b00:	2001      	movs	r0, #1
 8011b02:	f006 f8e6 	bl	8017cd2 <osDelay>
	  last_tick = current_tick; // обновляем значение тиков
 8011b06:	4625      	mov	r5, r4
	  TickType_t current_tick = xTaskGetTickCount();
 8011b08:	f007 fb40 	bl	801918c <xTaskGetTickCount>
 8011b0c:	4604      	mov	r4, r0
	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8011b0e:	1b41      	subs	r1, r0, r5
 8011b10:	a858      	add	r0, sp, #352	@ 0x160
 8011b12:	f017 fa29 	bl	8028f68 <mg_mgr_poll>
      while (mif.driver->up(&mif) == false){
 8011b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	a802      	add	r0, sp, #8
 8011b1c:	4798      	blx	r3
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	d1ee      	bne.n	8011b00 <StartEthTask+0x14c>
    	  EthResetBegin(); //enable reset state w5500
 8011b22:	f7ff ff33 	bl	801198c <EthResetBegin>
    	  osDelay(100);
 8011b26:	2064      	movs	r0, #100	@ 0x64
 8011b28:	f006 f8d3 	bl	8017cd2 <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 8011b2c:	f7ff ff38 	bl	80119a0 <EthResetEnd>
    	  osDelay(3000);
 8011b30:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8011b34:	f006 f8cd 	bl	8017cd2 <osDelay>
    	  mif.driver->init(&mif);
 8011b38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	a802      	add	r0, sp, #8
 8011b3e:	4798      	blx	r3
    	  osDelay(7000);
 8011b40:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8011b44:	f006 f8c5 	bl	8017cd2 <osDelay>
 8011b48:	e7e5      	b.n	8011b16 <StartEthTask+0x162>
 8011b4a:	bf00      	nop
 8011b4c:	08035324 	.word	0x08035324
 8011b50:	1fff7a00 	.word	0x1fff7a00
 8011b54:	20000118 	.word	0x20000118
 8011b58:	200008bc 	.word	0x200008bc
 8011b5c:	2000012c 	.word	0x2000012c
 8011b60:	08011649 	.word	0x08011649
 8011b64:	080357f8 	.word	0x080357f8
 8011b68:	080357b4 	.word	0x080357b4
 8011b6c:	0803580c 	.word	0x0803580c
 8011b70:	08035824 	.word	0x08035824

08011b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b78:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b7a:	2400      	movs	r4, #0
 8011b7c:	9403      	str	r4, [sp, #12]
 8011b7e:	9404      	str	r4, [sp, #16]
 8011b80:	9405      	str	r4, [sp, #20]
 8011b82:	9406      	str	r4, [sp, #24]
 8011b84:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8011b86:	9400      	str	r4, [sp, #0]
 8011b88:	4b3c      	ldr	r3, [pc, #240]	@ (8011c7c <MX_GPIO_Init+0x108>)
 8011b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011b90:	631a      	str	r2, [r3, #48]	@ 0x30
 8011b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b94:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8011b98:	9200      	str	r2, [sp, #0]
 8011b9a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b9c:	9401      	str	r4, [sp, #4]
 8011b9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ba0:	f042 0201 	orr.w	r2, r2, #1
 8011ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ba8:	f002 0201 	and.w	r2, r2, #1
 8011bac:	9201      	str	r2, [sp, #4]
 8011bae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011bb0:	9402      	str	r4, [sp, #8]
 8011bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011bb4:	f042 0202 	orr.w	r2, r2, #2
 8011bb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8011bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011bbc:	f003 0302 	and.w	r3, r3, #2
 8011bc0:	9302      	str	r3, [sp, #8]
 8011bc2:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8011bc4:	4e2e      	ldr	r6, [pc, #184]	@ (8011c80 <MX_GPIO_Init+0x10c>)
 8011bc6:	4622      	mov	r2, r4
 8011bc8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8011bcc:	4630      	mov	r0, r6
 8011bce:	f004 f940 	bl	8015e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8011bd2:	4d2c      	ldr	r5, [pc, #176]	@ (8011c84 <MX_GPIO_Init+0x110>)
 8011bd4:	4622      	mov	r2, r4
 8011bd6:	2107      	movs	r1, #7
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f004 f93a 	bl	8015e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8011bde:	2201      	movs	r2, #1
 8011be0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8011be4:	4628      	mov	r0, r5
 8011be6:	f004 f934 	bl	8015e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8011bea:	2201      	movs	r2, #1
 8011bec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f004 f92e 	bl	8015e52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8011bf6:	f04f 0907 	mov.w	r9, #7
 8011bfa:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011bfe:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011c00:	f04f 0802 	mov.w	r8, #2
 8011c04:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c08:	a903      	add	r1, sp, #12
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	f003 ffae 	bl	8015b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8011c10:	23e0      	movs	r3, #224	@ 0xe0
 8011c12:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c14:	2701      	movs	r7, #1
 8011c16:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c18:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c1a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c1c:	a903      	add	r1, sp, #12
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f003 ffa4 	bl	8015b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8011c24:	f8cd 900c 	str.w	r9, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c28:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c2a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011c2c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011c2e:	a903      	add	r1, sp, #12
 8011c30:	4628      	mov	r0, r5
 8011c32:	f003 ff9b 	bl	8015b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8011c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011c3a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c3c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c3e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011c40:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8011c44:	a903      	add	r1, sp, #12
 8011c46:	4628      	mov	r0, r5
 8011c48:	f003 ff90 	bl	8015b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8011c4c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8011c50:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011c52:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c54:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011c56:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c5a:	a903      	add	r1, sp, #12
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	f003 ff85 	bl	8015b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8011c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011c66:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011c68:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c6a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8011c6c:	a903      	add	r1, sp, #12
 8011c6e:	4628      	mov	r0, r5
 8011c70:	f003 ff7c 	bl	8015b6c <HAL_GPIO_Init>

}
 8011c74:	b009      	add	sp, #36	@ 0x24
 8011c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c7a:	bf00      	nop
 8011c7c:	40023800 	.word	0x40023800
 8011c80:	40020000 	.word	0x40020000
 8011c84:	40020400 	.word	0x40020400

08011c88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8011c88:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8011c8a:	480b      	ldr	r0, [pc, #44]	@ (8011cb8 <MX_I2C1_Init+0x30>)
 8011c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8011cbc <MX_I2C1_Init+0x34>)
 8011c8e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8011c90:	4b0b      	ldr	r3, [pc, #44]	@ (8011cc0 <MX_I2C1_Init+0x38>)
 8011c92:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011c94:	2300      	movs	r3, #0
 8011c96:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8011c98:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011c9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8011c9e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011ca0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8011ca2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011ca4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011ca6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011ca8:	f004 fa6a 	bl	8016180 <HAL_I2C_Init>
 8011cac:	b900      	cbnz	r0, 8011cb0 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8011cae:	bd08      	pop	{r3, pc}
    Error_Handler();
 8011cb0:	f000 f928 	bl	8011f04 <Error_Handler>
}
 8011cb4:	e7fb      	b.n	8011cae <MX_I2C1_Init+0x26>
 8011cb6:	bf00      	nop
 8011cb8:	200008c4 	.word	0x200008c4
 8011cbc:	40005400 	.word	0x40005400
 8011cc0:	00030d40 	.word	0x00030d40

08011cc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011cc4:	b530      	push	{r4, r5, lr}
 8011cc6:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011cc8:	2300      	movs	r3, #0
 8011cca:	9303      	str	r3, [sp, #12]
 8011ccc:	9304      	str	r3, [sp, #16]
 8011cce:	9305      	str	r3, [sp, #20]
 8011cd0:	9306      	str	r3, [sp, #24]
 8011cd2:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8011cd4:	6802      	ldr	r2, [r0, #0]
 8011cd6:	4b15      	ldr	r3, [pc, #84]	@ (8011d2c <HAL_I2C_MspInit+0x68>)
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d001      	beq.n	8011ce0 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8011cdc:	b009      	add	sp, #36	@ 0x24
 8011cde:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011ce0:	2500      	movs	r5, #0
 8011ce2:	9501      	str	r5, [sp, #4]
 8011ce4:	4c12      	ldr	r4, [pc, #72]	@ (8011d30 <HAL_I2C_MspInit+0x6c>)
 8011ce6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ce8:	f043 0302 	orr.w	r3, r3, #2
 8011cec:	6323      	str	r3, [r4, #48]	@ 0x30
 8011cee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011cf0:	f003 0302 	and.w	r3, r3, #2
 8011cf4:	9301      	str	r3, [sp, #4]
 8011cf6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011cf8:	23c0      	movs	r3, #192	@ 0xc0
 8011cfa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011cfc:	2312      	movs	r3, #18
 8011cfe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011d00:	2301      	movs	r3, #1
 8011d02:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d04:	2303      	movs	r3, #3
 8011d06:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011d08:	2304      	movs	r3, #4
 8011d0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d0c:	a903      	add	r1, sp, #12
 8011d0e:	4809      	ldr	r0, [pc, #36]	@ (8011d34 <HAL_I2C_MspInit+0x70>)
 8011d10:	f003 ff2c 	bl	8015b6c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011d14:	9502      	str	r5, [sp, #8]
 8011d16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011d1c:	6423      	str	r3, [r4, #64]	@ 0x40
 8011d1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011d24:	9302      	str	r3, [sp, #8]
 8011d26:	9b02      	ldr	r3, [sp, #8]
}
 8011d28:	e7d8      	b.n	8011cdc <HAL_I2C_MspInit+0x18>
 8011d2a:	bf00      	nop
 8011d2c:	40005400 	.word	0x40005400
 8011d30:	40023800 	.word	0x40023800
 8011d34:	40020400 	.word	0x40020400

08011d38 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8011d38:	6802      	ldr	r2, [r0, #0]
 8011d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8011d64 <HAL_I2C_MspDeInit+0x2c>)
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d000      	beq.n	8011d42 <HAL_I2C_MspDeInit+0xa>
 8011d40:	4770      	bx	lr
{
 8011d42:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011d44:	4a08      	ldr	r2, [pc, #32]	@ (8011d68 <HAL_I2C_MspDeInit+0x30>)
 8011d46:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011d48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011d4c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8011d4e:	4c07      	ldr	r4, [pc, #28]	@ (8011d6c <HAL_I2C_MspDeInit+0x34>)
 8011d50:	2140      	movs	r1, #64	@ 0x40
 8011d52:	4620      	mov	r0, r4
 8011d54:	f003 ffee 	bl	8015d34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8011d58:	2180      	movs	r1, #128	@ 0x80
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	f003 ffea 	bl	8015d34 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8011d60:	bd10      	pop	{r4, pc}
 8011d62:	bf00      	nop
 8011d64:	40005400 	.word	0x40005400
 8011d68:	40023800 	.word	0x40023800
 8011d6c:	40020400 	.word	0x40020400

08011d70 <proto>:
#define time_ms_now() mg_now()

logging_level_t _level_ = L_DEBUG;
const char *level_strings[] = {"DEBUG", "INFO", "WARNING", "ERROR"};

static void proto(struct log_message mess ){};
 8011d70:	b084      	sub	sp, #16
 8011d72:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011d76:	b004      	add	sp, #16
 8011d78:	4770      	bx	lr

08011d7a <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 8011d7a:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8011d7c:	fb01 f400 	mul.w	r4, r1, r0
 8011d80:	4620      	mov	r0, r4
 8011d82:	f008 f9a9 	bl	801a0d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8011d86:	4605      	mov	r5, r0
 8011d88:	b118      	cbz	r0, 8011d92 <mg_calloc+0x18>
 8011d8a:	4622      	mov	r2, r4
 8011d8c:	2100      	movs	r1, #0
 8011d8e:	f01a f92f 	bl	802bff0 <memset>
  return p;
}
 8011d92:	4628      	mov	r0, r5
 8011d94:	bd38      	pop	{r3, r4, r5, pc}
	...

08011d98 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
	if (fn != NULL){
 8011d98:	b108      	cbz	r0, 8011d9e <reg_logging_fn+0x6>
		_send_log_mess = fn;
 8011d9a:	4a01      	ldr	r2, [pc, #4]	@ (8011da0 <reg_logging_fn+0x8>)
 8011d9c:	6010      	str	r0, [r2, #0]
	}
}
 8011d9e:	4770      	bx	lr
 8011da0:	20000000 	.word	0x20000000

08011da4 <logger_set_level>:

void logger_set_level(logging_level_t l){
	_level_ = l;
 8011da4:	4b01      	ldr	r3, [pc, #4]	@ (8011dac <logger_set_level+0x8>)
 8011da6:	7018      	strb	r0, [r3, #0]
}
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop
 8011dac:	20000918 	.word	0x20000918

08011db0 <logging>:

void logging(logging_level_t level, const char *format, ...){
 8011db0:	b40e      	push	{r1, r2, r3}
 8011db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011db4:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;

    if (level < _level_) return;
 8011db8:	4b44      	ldr	r3, [pc, #272]	@ (8011ecc <logging+0x11c>)
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	4283      	cmp	r3, r0
 8011dbe:	d905      	bls.n	8011dcc <logging+0x1c>
    if (_send_log_mess) {
        _send_log_mess(mess);
    }

    free(tmp_buf);
}
 8011dc0:	f50d 7d1c 	add.w	sp, sp, #624	@ 0x270
 8011dc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011dc8:	b003      	add	sp, #12
 8011dca:	4770      	bx	lr
 8011dcc:	4604      	mov	r4, r0
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8011dce:	2101      	movs	r1, #1
 8011dd0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8011dd4:	f7ff ffd1 	bl	8011d7a <mg_calloc>
    if (!tmp_buf){
 8011dd8:	4605      	mov	r5, r0
 8011dda:	2800      	cmp	r0, #0
 8011ddc:	d0f0      	beq.n	8011dc0 <logging+0x10>
    memset(&mess, 0, sizeof(log_message_t));
 8011dde:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8011de2:	2100      	movs	r1, #0
 8011de4:	a85b      	add	r0, sp, #364	@ 0x16c
 8011de6:	f01a f903 	bl	802bff0 <memset>
    mess.log_level = level;
 8011dea:	f88d 416c 	strb.w	r4, [sp, #364]	@ 0x16c
    double ms_now = time_ms_now();
 8011dee:	f017 f94f 	bl	8029090 <mg_now>
 8011df2:	f7fe fbe3 	bl	80105bc <__aeabi_ul2d>
 8011df6:	4606      	mov	r6, r0
 8011df8:	460f      	mov	r7, r1
    time_t now = (time_t)(ms_now / 1000.0);
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	4b34      	ldr	r3, [pc, #208]	@ (8011ed0 <logging+0x120>)
 8011dfe:	f7fe fd3d 	bl	801087c <__aeabi_ddiv>
 8011e02:	f7fe ffd5 	bl	8010db0 <__aeabi_d2lz>
 8011e06:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
    localtime_r(&now, &tm_info);
 8011e0a:	a94f      	add	r1, sp, #316	@ 0x13c
 8011e0c:	a858      	add	r0, sp, #352	@ 0x160
 8011e0e:	f01a f985 	bl	802c11c <localtime_r>
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 8011e12:	ab4f      	add	r3, sp, #316	@ 0x13c
 8011e14:	4a2f      	ldr	r2, [pc, #188]	@ (8011ed4 <logging+0x124>)
 8011e16:	2140      	movs	r1, #64	@ 0x40
 8011e18:	a83f      	add	r0, sp, #252	@ 0xfc
 8011e1a:	f01a ff91 	bl	802cd40 <strftime>
 8011e1e:	4604      	mov	r4, r0
    int millis = (int)(ms_now) % 1000;
 8011e20:	4630      	mov	r0, r6
 8011e22:	4639      	mov	r1, r7
 8011e24:	f7fe feb0 	bl	8010b88 <__aeabi_d2iz>
 8011e28:	4a2b      	ldr	r2, [pc, #172]	@ (8011ed8 <logging+0x128>)
 8011e2a:	fb82 3200 	smull	r3, r2, r2, r0
 8011e2e:	17c3      	asrs	r3, r0, #31
 8011e30:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8011e34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011e38:	fb02 0313 	mls	r3, r2, r3, r0
 8011e3c:	4a27      	ldr	r2, [pc, #156]	@ (8011edc <logging+0x12c>)
 8011e3e:	f1c4 0140 	rsb	r1, r4, #64	@ 0x40
 8011e42:	a83f      	add	r0, sp, #252	@ 0xfc
 8011e44:	4420      	add	r0, r4
 8011e46:	f019 fba9 	bl	802b59c <snprintf>
 8011e4a:	4404      	add	r4, r0
    time_str[time_len++] = ' ';
 8011e4c:	1c63      	adds	r3, r4, #1
 8011e4e:	2220      	movs	r2, #32
 8011e50:	a93f      	add	r1, sp, #252	@ 0xfc
 8011e52:	550a      	strb	r2, [r1, r4]
    time_str[time_len++] = '\0';
 8011e54:	2200      	movs	r2, #0
 8011e56:	54ca      	strb	r2, [r1, r3]
    va_start(args, format);
 8011e58:	aba2      	add	r3, sp, #648	@ 0x288
 8011e5a:	935a      	str	r3, [sp, #360]	@ 0x168
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8011e5c:	f20d 166d 	addw	r6, sp, #365	@ 0x16d
 8011e60:	9aa1      	ldr	r2, [sp, #644]	@ 0x284
 8011e62:	21fd      	movs	r1, #253	@ 0xfd
 8011e64:	4630      	mov	r0, r6
 8011e66:	f019 fe61 	bl	802bb2c <vsnprintf>
 8011e6a:	4604      	mov	r4, r0
    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s:%s\r\n", time_str, level_strings[mess.log_level], mess.log_text);
 8011e6c:	f89d 216c 	ldrb.w	r2, [sp, #364]	@ 0x16c
 8011e70:	9601      	str	r6, [sp, #4]
 8011e72:	4b1b      	ldr	r3, [pc, #108]	@ (8011ee0 <logging+0x130>)
 8011e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e78:	9300      	str	r3, [sp, #0]
 8011e7a:	ab3f      	add	r3, sp, #252	@ 0xfc
 8011e7c:	4a19      	ldr	r2, [pc, #100]	@ (8011ee4 <logging+0x134>)
 8011e7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e82:	4628      	mov	r0, r5
 8011e84:	f019 fb8a 	bl	802b59c <snprintf>
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 10) {
 8011e88:	2cf5      	cmp	r4, #245	@ 0xf5
 8011e8a:	d81b      	bhi.n	8011ec4 <logging+0x114>
         mess.log_len = strlen(tmp_buf);
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	f7fe fa07 	bl	80102a0 <strlen>
 8011e92:	f88d 026d 	strb.w	r0, [sp, #621]	@ 0x26d
     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 8011e96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011e9a:	4629      	mov	r1, r5
 8011e9c:	f20d 106d 	addw	r0, sp, #365	@ 0x16d
 8011ea0:	f01a f8ed 	bl	802c07e <strncpy>
    if (_send_log_mess) {
 8011ea4:	4b10      	ldr	r3, [pc, #64]	@ (8011ee8 <logging+0x138>)
 8011ea6:	681e      	ldr	r6, [r3, #0]
 8011ea8:	b146      	cbz	r6, 8011ebc <logging+0x10c>
        _send_log_mess(mess);
 8011eaa:	ac5b      	add	r4, sp, #364	@ 0x16c
 8011eac:	22f2      	movs	r2, #242	@ 0xf2
 8011eae:	a95f      	add	r1, sp, #380	@ 0x17c
 8011eb0:	4668      	mov	r0, sp
 8011eb2:	f01b fad9 	bl	802d468 <memcpy>
 8011eb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011eba:	47b0      	blx	r6
    free(tmp_buf);
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	f008 f98d 	bl	801a1dc <vPortFree>
 8011ec2:	e77d      	b.n	8011dc0 <logging+0x10>
         mess.log_len = LOG_MES_TEXT_LEN - 10;
 8011ec4:	23f6      	movs	r3, #246	@ 0xf6
 8011ec6:	f88d 326d 	strb.w	r3, [sp, #621]	@ 0x26d
 8011eca:	e7e4      	b.n	8011e96 <logging+0xe6>
 8011ecc:	20000918 	.word	0x20000918
 8011ed0:	408f4000 	.word	0x408f4000
 8011ed4:	08035a10 	.word	0x08035a10
 8011ed8:	10624dd3 	.word	0x10624dd3
 8011edc:	08035a24 	.word	0x08035a24
 8011ee0:	20000004 	.word	0x20000004
 8011ee4:	08035a2c 	.word	0x08035a2c
 8011ee8:	20000000 	.word	0x20000000

08011eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8011eee:	6802      	ldr	r2, [r0, #0]
 8011ef0:	4b03      	ldr	r3, [pc, #12]	@ (8011f00 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d000      	beq.n	8011ef8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011ef6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8011ef8:	f003 fd94 	bl	8015a24 <HAL_IncTick>
}
 8011efc:	e7fb      	b.n	8011ef6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8011efe:	bf00      	nop
 8011f00:	40014000 	.word	0x40014000

08011f04 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8011f04:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011f06:	e7fe      	b.n	8011f06 <Error_Handler+0x2>

08011f08 <SystemClock_Config>:
{
 8011f08:	b500      	push	{lr}
 8011f0a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011f0c:	2230      	movs	r2, #48	@ 0x30
 8011f0e:	2100      	movs	r1, #0
 8011f10:	a808      	add	r0, sp, #32
 8011f12:	f01a f86d 	bl	802bff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011f16:	2300      	movs	r3, #0
 8011f18:	9303      	str	r3, [sp, #12]
 8011f1a:	9304      	str	r3, [sp, #16]
 8011f1c:	9305      	str	r3, [sp, #20]
 8011f1e:	9306      	str	r3, [sp, #24]
 8011f20:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011f22:	9301      	str	r3, [sp, #4]
 8011f24:	4a1e      	ldr	r2, [pc, #120]	@ (8011fa0 <SystemClock_Config+0x98>)
 8011f26:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8011f28:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8011f2c:	6411      	str	r1, [r2, #64]	@ 0x40
 8011f2e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8011f30:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8011f34:	9201      	str	r2, [sp, #4]
 8011f36:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011f38:	9302      	str	r3, [sp, #8]
 8011f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8011fa4 <SystemClock_Config+0x9c>)
 8011f3c:	6811      	ldr	r1, [r2, #0]
 8011f3e:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8011f42:	6011      	str	r1, [r2, #0]
 8011f44:	6812      	ldr	r2, [r2, #0]
 8011f46:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8011f4a:	9202      	str	r2, [sp, #8]
 8011f4c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8011f4e:	2202      	movs	r2, #2
 8011f50:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8011f52:	2101      	movs	r1, #1
 8011f54:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8011f56:	2110      	movs	r1, #16
 8011f58:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011f5a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8011f5c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8011f5e:	2308      	movs	r3, #8
 8011f60:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8011f62:	2364      	movs	r3, #100	@ 0x64
 8011f64:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011f66:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8011f68:	2304      	movs	r3, #4
 8011f6a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011f6c:	a808      	add	r0, sp, #32
 8011f6e:	f004 fb85 	bl	801667c <HAL_RCC_OscConfig>
 8011f72:	b988      	cbnz	r0, 8011f98 <SystemClock_Config+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011f74:	230f      	movs	r3, #15
 8011f76:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011f78:	2302      	movs	r3, #2
 8011f7a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8011f80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011f84:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011f86:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8011f88:	2103      	movs	r1, #3
 8011f8a:	a803      	add	r0, sp, #12
 8011f8c:	f004 fde0 	bl	8016b50 <HAL_RCC_ClockConfig>
 8011f90:	b920      	cbnz	r0, 8011f9c <SystemClock_Config+0x94>
}
 8011f92:	b015      	add	sp, #84	@ 0x54
 8011f94:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8011f98:	f7ff ffb4 	bl	8011f04 <Error_Handler>
    Error_Handler();
 8011f9c:	f7ff ffb2 	bl	8011f04 <Error_Handler>
 8011fa0:	40023800 	.word	0x40023800
 8011fa4:	40007000 	.word	0x40007000

08011fa8 <main>:
{
 8011fa8:	b500      	push	{lr}
 8011faa:	b083      	sub	sp, #12
 8011fac:	b672      	cpsid	i
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 8011fae:	4b10      	ldr	r3, [pc, #64]	@ (8011ff0 <main+0x48>)
 8011fb0:	4a10      	ldr	r2, [pc, #64]	@ (8011ff4 <main+0x4c>)
 8011fb2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8011fb4:	b662      	cpsie	i
	volatile int i = 1000000;
 8011fb6:	4b10      	ldr	r3, [pc, #64]	@ (8011ff8 <main+0x50>)
 8011fb8:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8011fba:	e002      	b.n	8011fc2 <main+0x1a>
		i--;
 8011fbc:	9b01      	ldr	r3, [sp, #4]
 8011fbe:	3b01      	subs	r3, #1
 8011fc0:	9301      	str	r3, [sp, #4]
	while (i > 0){ //delay for startup
 8011fc2:	9b01      	ldr	r3, [sp, #4]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	dcf9      	bgt.n	8011fbc <main+0x14>
  HAL_Init();
 8011fc8:	f003 fd12 	bl	80159f0 <HAL_Init>
  SystemClock_Config();
 8011fcc:	f7ff ff9c 	bl	8011f08 <SystemClock_Config>
  MX_GPIO_Init();
 8011fd0:	f7ff fdd0 	bl	8011b74 <MX_GPIO_Init>
  MX_SPI2_Init();
 8011fd4:	f000 f870 	bl	80120b8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8011fd8:	f7ff fe56 	bl	8011c88 <MX_I2C1_Init>
  MX_SPI1_Init();
 8011fdc:	f000 f84a 	bl	8012074 <MX_SPI1_Init>
  osKernelInitialize();
 8011fe0:	f005 fdea 	bl	8017bb8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8011fe4:	f7ff fc44 	bl	8011870 <MX_FREERTOS_Init>
  osKernelStart();
 8011fe8:	f005 fdf8 	bl	8017bdc <osKernelStart>
  while (1)
 8011fec:	e7fe      	b.n	8011fec <main+0x44>
 8011fee:	bf00      	nop
 8011ff0:	e000ed00 	.word	0xe000ed00
 8011ff4:	08010000 	.word	0x08010000
 8011ff8:	000f4240 	.word	0x000f4240

08011ffc <eMBRegHoldingCB>:

// Пример массива регистров
static USHORT usRegHoldingBuf[100];

// Обработчик для чтения/записи регистров
eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode) {
 8011ffc:	b530      	push	{r4, r5, lr}
    USHORT i;
    usAddress--; // Modbus адреса начинаются с 1
 8011ffe:	3901      	subs	r1, #1
 8012000:	b289      	uxth	r1, r1

    if ((usAddress >= 0) && (usAddress + usNRegs <= 100)) {
 8012002:	1854      	adds	r4, r2, r1
 8012004:	2c64      	cmp	r4, #100	@ 0x64
 8012006:	dd01      	ble.n	801200c <eMBRegHoldingCB+0x10>
                usRegHoldingBuf[usAddress + i] = (pucRegBuffer[2 * i] << 8) | pucRegBuffer[2 * i + 1];
            }
        }
        return MB_ENOERR;
    }
    return MB_ENOREG;
 8012008:	2001      	movs	r0, #1
}
 801200a:	bd30      	pop	{r4, r5, pc}
        if (eMode == MB_REG_READ) {
 801200c:	b1c3      	cbz	r3, 8012040 <eMBRegHoldingCB+0x44>
        } else if (eMode == MB_REG_WRITE) {
 801200e:	2b01      	cmp	r3, #1
 8012010:	d114      	bne.n	801203c <eMBRegHoldingCB+0x40>
            for (i = 0; i < usNRegs; i++) {
 8012012:	2300      	movs	r3, #0
 8012014:	e024      	b.n	8012060 <eMBRegHoldingCB+0x64>
                pucRegBuffer[2 * i] = (usRegHoldingBuf[usAddress + i] >> 8) & 0xFF;
 8012016:	eb01 0c03 	add.w	ip, r1, r3
 801201a:	4c13      	ldr	r4, [pc, #76]	@ (8012068 <eMBRegHoldingCB+0x6c>)
 801201c:	f834 e01c 	ldrh.w	lr, [r4, ip, lsl #1]
 8012020:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8012024:	ea4f 241e 	mov.w	r4, lr, lsr #8
 8012028:	f800 4013 	strb.w	r4, [r0, r3, lsl #1]
                pucRegBuffer[2 * i + 1] = usRegHoldingBuf[usAddress + i] & 0xFF;
 801202c:	f10c 0c01 	add.w	ip, ip, #1
 8012030:	f800 e00c 	strb.w	lr, [r0, ip]
            for (i = 0; i < usNRegs; i++) {
 8012034:	3301      	adds	r3, #1
 8012036:	b29b      	uxth	r3, r3
 8012038:	4293      	cmp	r3, r2
 801203a:	d3ec      	bcc.n	8012016 <eMBRegHoldingCB+0x1a>
        return MB_ENOERR;
 801203c:	2000      	movs	r0, #0
 801203e:	e7e4      	b.n	801200a <eMBRegHoldingCB+0xe>
            for (i = 0; i < usNRegs; i++) {
 8012040:	2300      	movs	r3, #0
 8012042:	e7f9      	b.n	8012038 <eMBRegHoldingCB+0x3c>
                usRegHoldingBuf[usAddress + i] = (pucRegBuffer[2 * i] << 8) | pucRegBuffer[2 * i + 1];
 8012044:	f810 5013 	ldrb.w	r5, [r0, r3, lsl #1]
 8012048:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 801204c:	7864      	ldrb	r4, [r4, #1]
 801204e:	eb01 0c03 	add.w	ip, r1, r3
 8012052:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8012056:	4d04      	ldr	r5, [pc, #16]	@ (8012068 <eMBRegHoldingCB+0x6c>)
 8012058:	f825 401c 	strh.w	r4, [r5, ip, lsl #1]
            for (i = 0; i < usNRegs; i++) {
 801205c:	3301      	adds	r3, #1
 801205e:	b29b      	uxth	r3, r3
 8012060:	4293      	cmp	r3, r2
 8012062:	d3ef      	bcc.n	8012044 <eMBRegHoldingCB+0x48>
 8012064:	e7ea      	b.n	801203c <eMBRegHoldingCB+0x40>
 8012066:	bf00      	nop
 8012068:	2000091c 	.word	0x2000091c

0801206c <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{

}
 801206c:	4770      	bx	lr

0801206e <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{

}
 801206e:	4770      	bx	lr

08012070 <eMBRegDiscreteCB>:

eMBErrorCode eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete){

}
 8012070:	4770      	bx	lr
	...

08012074 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8012074:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8012076:	480e      	ldr	r0, [pc, #56]	@ (80120b0 <MX_SPI1_Init+0x3c>)
 8012078:	4b0e      	ldr	r3, [pc, #56]	@ (80120b4 <MX_SPI1_Init+0x40>)
 801207a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801207c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012080:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8012082:	2300      	movs	r3, #0
 8012084:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8012086:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8012088:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801208a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801208c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012090:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012092:	2208      	movs	r2, #8
 8012094:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012096:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8012098:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801209a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 801209c:	230a      	movs	r3, #10
 801209e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80120a0:	f004 ff34 	bl	8016f0c <HAL_SPI_Init>
 80120a4:	b900      	cbnz	r0, 80120a8 <MX_SPI1_Init+0x34>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80120a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80120a8:	f7ff ff2c 	bl	8011f04 <Error_Handler>
}
 80120ac:	e7fb      	b.n	80120a6 <MX_SPI1_Init+0x32>
 80120ae:	bf00      	nop
 80120b0:	20000a3c 	.word	0x20000a3c
 80120b4:	40013000 	.word	0x40013000

080120b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80120b8:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80120ba:	480d      	ldr	r0, [pc, #52]	@ (80120f0 <MX_SPI2_Init+0x38>)
 80120bc:	4b0d      	ldr	r3, [pc, #52]	@ (80120f4 <MX_SPI2_Init+0x3c>)
 80120be:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80120c0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80120c4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80120c6:	2300      	movs	r3, #0
 80120c8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80120ca:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80120cc:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80120ce:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80120d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80120d4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80120d6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80120d8:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80120da:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80120dc:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80120de:	230a      	movs	r3, #10
 80120e0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80120e2:	f004 ff13 	bl	8016f0c <HAL_SPI_Init>
 80120e6:	b900      	cbnz	r0, 80120ea <MX_SPI2_Init+0x32>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80120e8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80120ea:	f7ff ff0b 	bl	8011f04 <Error_Handler>
}
 80120ee:	e7fb      	b.n	80120e8 <MX_SPI2_Init+0x30>
 80120f0:	200009e4 	.word	0x200009e4
 80120f4:	40003800 	.word	0x40003800

080120f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80120f8:	b500      	push	{lr}
 80120fa:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120fc:	2300      	movs	r3, #0
 80120fe:	9305      	str	r3, [sp, #20]
 8012100:	9306      	str	r3, [sp, #24]
 8012102:	9307      	str	r3, [sp, #28]
 8012104:	9308      	str	r3, [sp, #32]
 8012106:	9309      	str	r3, [sp, #36]	@ 0x24
  if(spiHandle->Instance==SPI1)
 8012108:	6803      	ldr	r3, [r0, #0]
 801210a:	4a28      	ldr	r2, [pc, #160]	@ (80121ac <HAL_SPI_MspInit+0xb4>)
 801210c:	4293      	cmp	r3, r2
 801210e:	d005      	beq.n	801211c <HAL_SPI_MspInit+0x24>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8012110:	4a27      	ldr	r2, [pc, #156]	@ (80121b0 <HAL_SPI_MspInit+0xb8>)
 8012112:	4293      	cmp	r3, r2
 8012114:	d025      	beq.n	8012162 <HAL_SPI_MspInit+0x6a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8012116:	b00b      	add	sp, #44	@ 0x2c
 8012118:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 801211c:	2100      	movs	r1, #0
 801211e:	9101      	str	r1, [sp, #4]
 8012120:	4b24      	ldr	r3, [pc, #144]	@ (80121b4 <HAL_SPI_MspInit+0xbc>)
 8012122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012124:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012128:	645a      	str	r2, [r3, #68]	@ 0x44
 801212a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801212c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8012130:	9201      	str	r2, [sp, #4]
 8012132:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012134:	9102      	str	r1, [sp, #8]
 8012136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012138:	f042 0202 	orr.w	r2, r2, #2
 801213c:	631a      	str	r2, [r3, #48]	@ 0x30
 801213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012140:	f003 0302 	and.w	r3, r3, #2
 8012144:	9302      	str	r3, [sp, #8]
 8012146:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012148:	2338      	movs	r3, #56	@ 0x38
 801214a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801214c:	2302      	movs	r3, #2
 801214e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012150:	2303      	movs	r3, #3
 8012152:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012154:	2305      	movs	r3, #5
 8012156:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012158:	a905      	add	r1, sp, #20
 801215a:	4817      	ldr	r0, [pc, #92]	@ (80121b8 <HAL_SPI_MspInit+0xc0>)
 801215c:	f003 fd06 	bl	8015b6c <HAL_GPIO_Init>
 8012160:	e7d9      	b.n	8012116 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8012162:	2100      	movs	r1, #0
 8012164:	9103      	str	r1, [sp, #12]
 8012166:	4b13      	ldr	r3, [pc, #76]	@ (80121b4 <HAL_SPI_MspInit+0xbc>)
 8012168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801216a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801216e:	641a      	str	r2, [r3, #64]	@ 0x40
 8012170:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012172:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8012176:	9203      	str	r2, [sp, #12]
 8012178:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801217a:	9104      	str	r1, [sp, #16]
 801217c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801217e:	f042 0202 	orr.w	r2, r2, #2
 8012182:	631a      	str	r2, [r3, #48]	@ 0x30
 8012184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012186:	f003 0302 	and.w	r3, r3, #2
 801218a:	9304      	str	r3, [sp, #16]
 801218c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 801218e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8012192:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012194:	2302      	movs	r3, #2
 8012196:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012198:	2303      	movs	r3, #3
 801219a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801219c:	2305      	movs	r3, #5
 801219e:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80121a0:	a905      	add	r1, sp, #20
 80121a2:	4805      	ldr	r0, [pc, #20]	@ (80121b8 <HAL_SPI_MspInit+0xc0>)
 80121a4:	f003 fce2 	bl	8015b6c <HAL_GPIO_Init>
}
 80121a8:	e7b5      	b.n	8012116 <HAL_SPI_MspInit+0x1e>
 80121aa:	bf00      	nop
 80121ac:	40013000 	.word	0x40013000
 80121b0:	40003800 	.word	0x40003800
 80121b4:	40023800 	.word	0x40023800
 80121b8:	40020400 	.word	0x40020400

080121bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80121bc:	b500      	push	{lr}
 80121be:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80121c0:	2200      	movs	r2, #0
 80121c2:	9200      	str	r2, [sp, #0]
 80121c4:	4b0d      	ldr	r3, [pc, #52]	@ (80121fc <HAL_MspInit+0x40>)
 80121c6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80121c8:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80121cc:	6459      	str	r1, [r3, #68]	@ 0x44
 80121ce:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80121d0:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80121d4:	9100      	str	r1, [sp, #0]
 80121d6:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80121d8:	9201      	str	r2, [sp, #4]
 80121da:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80121dc:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80121e0:	6419      	str	r1, [r3, #64]	@ 0x40
 80121e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80121e8:	9301      	str	r3, [sp, #4]
 80121ea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80121ec:	210f      	movs	r1, #15
 80121ee:	f06f 0001 	mvn.w	r0, #1
 80121f2:	f003 fca3 	bl	8015b3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80121f6:	b003      	add	sp, #12
 80121f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80121fc:	40023800 	.word	0x40023800

08012200 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012200:	b530      	push	{r4, r5, lr}
 8012202:	b089      	sub	sp, #36	@ 0x24
 8012204:	4605      	mov	r5, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8012206:	2400      	movs	r4, #0
 8012208:	9401      	str	r4, [sp, #4]
 801220a:	4b1d      	ldr	r3, [pc, #116]	@ (8012280 <HAL_InitTick+0x80>)
 801220c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801220e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8012212:	645a      	str	r2, [r3, #68]	@ 0x44
 8012214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801221a:	9301      	str	r3, [sp, #4]
 801221c:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801221e:	a902      	add	r1, sp, #8
 8012220:	a803      	add	r0, sp, #12
 8012222:	f004 fd6b 	bl	8016cfc <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012226:	f004 fd59 	bl	8016cdc <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801222a:	4a16      	ldr	r2, [pc, #88]	@ (8012284 <HAL_InitTick+0x84>)
 801222c:	fba2 2300 	umull	r2, r3, r2, r0
 8012230:	0c9b      	lsrs	r3, r3, #18
 8012232:	3b01      	subs	r3, #1

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8012234:	4814      	ldr	r0, [pc, #80]	@ (8012288 <HAL_InitTick+0x88>)
 8012236:	4a15      	ldr	r2, [pc, #84]	@ (801228c <HAL_InitTick+0x8c>)
 8012238:	6002      	str	r2, [r0, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 801223a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 801223e:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8012240:	6043      	str	r3, [r0, #4]
  htim9.Init.ClockDivision = 0;
 8012242:	6104      	str	r4, [r0, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012244:	6084      	str	r4, [r0, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012246:	6184      	str	r4, [r0, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8012248:	f005 fad6 	bl	80177f8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 801224c:	4604      	mov	r4, r0
 801224e:	b110      	cbz	r0, 8012256 <HAL_InitTick+0x56>
    }
  }

 /* Return function status */
  return status;
}
 8012250:	4620      	mov	r0, r4
 8012252:	b009      	add	sp, #36	@ 0x24
 8012254:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim9);
 8012256:	480c      	ldr	r0, [pc, #48]	@ (8012288 <HAL_InitTick+0x88>)
 8012258:	f005 f988 	bl	801756c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 801225c:	4604      	mov	r4, r0
 801225e:	2800      	cmp	r0, #0
 8012260:	d1f6      	bne.n	8012250 <HAL_InitTick+0x50>
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8012262:	2018      	movs	r0, #24
 8012264:	f003 fc7a 	bl	8015b5c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012268:	2d0f      	cmp	r5, #15
 801226a:	d901      	bls.n	8012270 <HAL_InitTick+0x70>
        status = HAL_ERROR;
 801226c:	2401      	movs	r4, #1
 801226e:	e7ef      	b.n	8012250 <HAL_InitTick+0x50>
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8012270:	2200      	movs	r2, #0
 8012272:	4629      	mov	r1, r5
 8012274:	2018      	movs	r0, #24
 8012276:	f003 fc61 	bl	8015b3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801227a:	4b05      	ldr	r3, [pc, #20]	@ (8012290 <HAL_InitTick+0x90>)
 801227c:	601d      	str	r5, [r3, #0]
 801227e:	e7e7      	b.n	8012250 <HAL_InitTick+0x50>
 8012280:	40023800 	.word	0x40023800
 8012284:	431bde83 	.word	0x431bde83
 8012288:	20000a94 	.word	0x20000a94
 801228c:	40014000 	.word	0x40014000
 8012290:	20000108 	.word	0x20000108

08012294 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012294:	e7fe      	b.n	8012294 <NMI_Handler>

08012296 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012296:	e7fe      	b.n	8012296 <HardFault_Handler>

08012298 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012298:	e7fe      	b.n	8012298 <MemManage_Handler>

0801229a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801229a:	e7fe      	b.n	801229a <BusFault_Handler>

0801229c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801229c:	e7fe      	b.n	801229c <UsageFault_Handler>

0801229e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801229e:	4770      	bx	lr

080122a0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80122a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80122a2:	4802      	ldr	r0, [pc, #8]	@ (80122ac <TIM1_BRK_TIM9_IRQHandler+0xc>)
 80122a4:	f005 f9a2 	bl	80175ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80122a8:	bd08      	pop	{r3, pc}
 80122aa:	bf00      	nop
 80122ac:	20000a94 	.word	0x20000a94

080122b0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80122b0:	2001      	movs	r0, #1
 80122b2:	4770      	bx	lr

080122b4 <_kill>:

int _kill(int pid, int sig)
{
 80122b4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80122b6:	f01b f89f 	bl	802d3f8 <__errno>
 80122ba:	2316      	movs	r3, #22
 80122bc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80122be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122c2:	bd08      	pop	{r3, pc}

080122c4 <_exit>:

void _exit (int status)
{
 80122c4:	b508      	push	{r3, lr}
  _kill(status, -1);
 80122c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80122ca:	f7ff fff3 	bl	80122b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80122ce:	e7fe      	b.n	80122ce <_exit+0xa>

080122d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80122d0:	b570      	push	{r4, r5, r6, lr}
 80122d2:	460c      	mov	r4, r1
 80122d4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122d6:	2500      	movs	r5, #0
 80122d8:	e006      	b.n	80122e8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80122da:	f3af 8000 	nop.w
 80122de:	4621      	mov	r1, r4
 80122e0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122e4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80122e6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122e8:	42b5      	cmp	r5, r6
 80122ea:	dbf6      	blt.n	80122da <_read+0xa>
  }

  return len;
}
 80122ec:	4630      	mov	r0, r6
 80122ee:	bd70      	pop	{r4, r5, r6, pc}

080122f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80122f0:	b570      	push	{r4, r5, r6, lr}
 80122f2:	460c      	mov	r4, r1
 80122f4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80122f6:	2500      	movs	r5, #0
 80122f8:	e004      	b.n	8012304 <_write+0x14>
  {
    __io_putchar(*ptr++);
 80122fa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80122fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012302:	3501      	adds	r5, #1
 8012304:	42b5      	cmp	r5, r6
 8012306:	dbf8      	blt.n	80122fa <_write+0xa>
  }
  return len;
}
 8012308:	4630      	mov	r0, r6
 801230a:	bd70      	pop	{r4, r5, r6, pc}

0801230c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 801230c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012310:	4770      	bx	lr

08012312 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8012312:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012316:	604b      	str	r3, [r1, #4]
  return 0;
}
 8012318:	2000      	movs	r0, #0
 801231a:	4770      	bx	lr

0801231c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 801231c:	2001      	movs	r0, #1
 801231e:	4770      	bx	lr

08012320 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8012320:	2000      	movs	r0, #0
 8012322:	4770      	bx	lr

08012324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012324:	b510      	push	{r4, lr}
 8012326:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012328:	4a0c      	ldr	r2, [pc, #48]	@ (801235c <_sbrk+0x38>)
 801232a:	490d      	ldr	r1, [pc, #52]	@ (8012360 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801232c:	480d      	ldr	r0, [pc, #52]	@ (8012364 <_sbrk+0x40>)
 801232e:	6800      	ldr	r0, [r0, #0]
 8012330:	b140      	cbz	r0, 8012344 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012332:	480c      	ldr	r0, [pc, #48]	@ (8012364 <_sbrk+0x40>)
 8012334:	6800      	ldr	r0, [r0, #0]
 8012336:	4403      	add	r3, r0
 8012338:	1a52      	subs	r2, r2, r1
 801233a:	4293      	cmp	r3, r2
 801233c:	d806      	bhi.n	801234c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 801233e:	4a09      	ldr	r2, [pc, #36]	@ (8012364 <_sbrk+0x40>)
 8012340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8012342:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8012344:	4807      	ldr	r0, [pc, #28]	@ (8012364 <_sbrk+0x40>)
 8012346:	4c08      	ldr	r4, [pc, #32]	@ (8012368 <_sbrk+0x44>)
 8012348:	6004      	str	r4, [r0, #0]
 801234a:	e7f2      	b.n	8012332 <_sbrk+0xe>
    errno = ENOMEM;
 801234c:	f01b f854 	bl	802d3f8 <__errno>
 8012350:	230c      	movs	r3, #12
 8012352:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8012354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012358:	e7f3      	b.n	8012342 <_sbrk+0x1e>
 801235a:	bf00      	nop
 801235c:	20020000 	.word	0x20020000
 8012360:	00000800 	.word	0x00000800
 8012364:	20000ae0 	.word	0x20000ae0
 8012368:	20019ab8 	.word	0x20019ab8

0801236c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801236c:	4a03      	ldr	r2, [pc, #12]	@ (801237c <SystemInit+0x10>)
 801236e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8012372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012376:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801237a:	4770      	bx	lr
 801237c:	e000ed00 	.word	0xe000ed00

08012380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8012380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80123b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8012384:	f7ff fff2 	bl	801236c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012388:	480c      	ldr	r0, [pc, #48]	@ (80123bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801238a:	490d      	ldr	r1, [pc, #52]	@ (80123c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801238c:	4a0d      	ldr	r2, [pc, #52]	@ (80123c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801238e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012390:	e002      	b.n	8012398 <LoopCopyDataInit>

08012392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012396:	3304      	adds	r3, #4

08012398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801239c:	d3f9      	bcc.n	8012392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801239e:	4a0a      	ldr	r2, [pc, #40]	@ (80123c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80123a0:	4c0a      	ldr	r4, [pc, #40]	@ (80123cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80123a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80123a4:	e001      	b.n	80123aa <LoopFillZerobss>

080123a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80123a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80123a8:	3204      	adds	r2, #4

080123aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80123aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80123ac:	d3fb      	bcc.n	80123a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80123ae:	f01b f831 	bl	802d414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80123b2:	f7ff fdf9 	bl	8011fa8 <main>
  bx  lr    
 80123b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80123b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80123bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80123c0:	20000870 	.word	0x20000870
  ldr r2, =_sidata
 80123c4:	0803b4ec 	.word	0x0803b4ec
  ldr r2, =_sbss
 80123c8:	20000870 	.word	0x20000870
  ldr r4, =_ebss
 80123cc:	20019ab8 	.word	0x20019ab8

080123d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80123d0:	e7fe      	b.n	80123d0 <ADC_IRQHandler>

080123d2 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80123d2:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80123d4:	880b      	ldrh	r3, [r1, #0]
 80123d6:	2b05      	cmp	r3, #5
 80123d8:	d001      	beq.n	80123de <eMBFuncReadCoils+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80123da:	2003      	movs	r0, #3
    }
    return eStatus;
}
 80123dc:	bd38      	pop	{r3, r4, r5, pc}
 80123de:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80123e0:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80123e2:	7881      	ldrb	r1, [r0, #2]
 80123e4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 80123e8:	3101      	adds	r1, #1
 80123ea:	b289      	uxth	r1, r1
        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80123ec:	78c3      	ldrb	r3, [r0, #3]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80123ee:	7902      	ldrb	r2, [r0, #4]
 80123f0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usCoilCount >= 1 ) &&
 80123f4:	1e53      	subs	r3, r2, #1
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 80123fc:	4563      	cmp	r3, ip
 80123fe:	d820      	bhi.n	8012442 <eMBFuncReadCoils+0x70>
            *usLen = MB_PDU_FUNC_OFF;
 8012400:	2300      	movs	r3, #0
 8012402:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8012404:	2301      	movs	r3, #1
 8012406:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012408:	8823      	ldrh	r3, [r4, #0]
 801240a:	3301      	adds	r3, #1
 801240c:	8023      	strh	r3, [r4, #0]
            if( ( usCoilCount & 0x0007 ) != 0 )
 801240e:	f012 0f07 	tst.w	r2, #7
 8012412:	d010      	beq.n	8012436 <eMBFuncReadCoils+0x64>
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8012414:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012418:	3301      	adds	r3, #1
 801241a:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 801241c:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 801241e:	8823      	ldrh	r3, [r4, #0]
 8012420:	3301      	adds	r3, #1
 8012422:	8023      	strh	r3, [r4, #0]
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8012424:	2300      	movs	r3, #0
 8012426:	3002      	adds	r0, #2
 8012428:	f7ff fe20 	bl	801206c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 801242c:	b930      	cbnz	r0, 801243c <eMBFuncReadCoils+0x6a>
                *usLen += ucNBytes;;
 801242e:	8823      	ldrh	r3, [r4, #0]
 8012430:	442b      	add	r3, r5
 8012432:	8023      	strh	r3, [r4, #0]
 8012434:	e7d2      	b.n	80123dc <eMBFuncReadCoils+0xa>
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8012436:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 801243a:	e7ef      	b.n	801241c <eMBFuncReadCoils+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 801243c:	f000 f9a8 	bl	8012790 <prveMBError2Exception>
 8012440:	e7cc      	b.n	80123dc <eMBFuncReadCoils+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012442:	2003      	movs	r0, #3
 8012444:	e7ca      	b.n	80123dc <eMBFuncReadCoils+0xa>

08012446 <eMBFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012446:	880b      	ldrh	r3, [r1, #0]
 8012448:	2b05      	cmp	r3, #5
 801244a:	d001      	beq.n	8012450 <eMBFuncWriteCoil+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801244c:	2003      	movs	r0, #3
 801244e:	4770      	bx	lr
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8012450:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012452:	7881      	ldrb	r1, [r0, #2]
 8012454:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012458:	3101      	adds	r1, #1
 801245a:	b289      	uxth	r1, r1
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 801245c:	7903      	ldrb	r3, [r0, #4]
 801245e:	b9f3      	cbnz	r3, 801249e <eMBFuncWriteCoil+0x58>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8012460:	78c2      	ldrb	r2, [r0, #3]
 8012462:	1e53      	subs	r3, r2, #1
 8012464:	b2db      	uxtb	r3, r3
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8012466:	2bfd      	cmp	r3, #253	@ 0xfd
 8012468:	d91b      	bls.n	80124a2 <eMBFuncWriteCoil+0x5c>
{
 801246a:	b500      	push	{lr}
 801246c:	b083      	sub	sp, #12
            ucBuf[1] = 0;
 801246e:	2300      	movs	r3, #0
 8012470:	f88d 3005 	strb.w	r3, [sp, #5]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8012474:	2aff      	cmp	r2, #255	@ 0xff
 8012476:	d00b      	beq.n	8012490 <eMBFuncWriteCoil+0x4a>
                ucBuf[0] = 0;
 8012478:	2300      	movs	r3, #0
 801247a:	f88d 3004 	strb.w	r3, [sp, #4]
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 801247e:	2301      	movs	r3, #1
 8012480:	461a      	mov	r2, r3
 8012482:	a801      	add	r0, sp, #4
 8012484:	f7ff fdf2 	bl	801206c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 8012488:	b930      	cbnz	r0, 8012498 <eMBFuncWriteCoil+0x52>
    }
    return eStatus;
}
 801248a:	b003      	add	sp, #12
 801248c:	f85d fb04 	ldr.w	pc, [sp], #4
                ucBuf[0] = 1;
 8012490:	2301      	movs	r3, #1
 8012492:	f88d 3004 	strb.w	r3, [sp, #4]
 8012496:	e7f2      	b.n	801247e <eMBFuncWriteCoil+0x38>
                eStatus = prveMBError2Exception( eRegStatus );
 8012498:	f000 f97a 	bl	8012790 <prveMBError2Exception>
 801249c:	e7f5      	b.n	801248a <eMBFuncWriteCoil+0x44>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801249e:	2003      	movs	r0, #3
 80124a0:	4770      	bx	lr
 80124a2:	2003      	movs	r0, #3
}
 80124a4:	4770      	bx	lr

080124a6 <eMBFuncWriteMultipleCoils>:
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80124a6:	880b      	ldrh	r3, [r1, #0]
 80124a8:	2b05      	cmp	r3, #5
 80124aa:	d92d      	bls.n	8012508 <eMBFuncWriteMultipleCoils+0x62>
{
 80124ac:	b510      	push	{r4, lr}
 80124ae:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80124b0:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80124b2:	7883      	ldrb	r3, [r0, #2]
 80124b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 80124b8:	3301      	adds	r3, #1
 80124ba:	b299      	uxth	r1, r3

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 80124bc:	78c2      	ldrb	r2, [r0, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 80124be:	7903      	ldrb	r3, [r0, #4]
 80124c0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80124c4:	f890 e005 	ldrb.w	lr, [r0, #5]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80124c8:	f013 0f07 	tst.w	r3, #7
 80124cc:	d00e      	beq.n	80124ec <eMBFuncWriteMultipleCoils+0x46>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80124ce:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80124d2:	f10c 0c01 	add.w	ip, ip, #1
 80124d6:	fa5f fc8c 	uxtb.w	ip, ip
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
 80124da:	1e53      	subs	r3, r2, #1
 80124dc:	b29b      	uxth	r3, r3
 80124de:	f5b3 6ff6 	cmp.w	r3, #1968	@ 0x7b0
 80124e2:	d213      	bcs.n	801250c <eMBFuncWriteMultipleCoils+0x66>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80124e4:	45f4      	cmp	ip, lr
 80124e6:	d004      	beq.n	80124f2 <eMBFuncWriteMultipleCoils+0x4c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80124e8:	2003      	movs	r0, #3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80124ea:	bd10      	pop	{r4, pc}
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80124ec:	f3c2 0cc7 	ubfx	ip, r2, #3, #8
 80124f0:	e7f3      	b.n	80124da <eMBFuncWriteMultipleCoils+0x34>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80124f2:	2301      	movs	r3, #1
 80124f4:	3006      	adds	r0, #6
 80124f6:	f7ff fdb9 	bl	801206c <eMBRegCoilsCB>
            if( eRegStatus != MB_ENOERR )
 80124fa:	b910      	cbnz	r0, 8012502 <eMBFuncWriteMultipleCoils+0x5c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80124fc:	2305      	movs	r3, #5
 80124fe:	8023      	strh	r3, [r4, #0]
 8012500:	e7f3      	b.n	80124ea <eMBFuncWriteMultipleCoils+0x44>
                eStatus = prveMBError2Exception( eRegStatus );
 8012502:	f000 f945 	bl	8012790 <prveMBError2Exception>
 8012506:	e7f0      	b.n	80124ea <eMBFuncWriteMultipleCoils+0x44>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012508:	2003      	movs	r0, #3
}
 801250a:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801250c:	2003      	movs	r0, #3
 801250e:	e7ec      	b.n	80124ea <eMBFuncWriteMultipleCoils+0x44>

08012510 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8012510:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012512:	880b      	ldrh	r3, [r1, #0]
 8012514:	2b05      	cmp	r3, #5
 8012516:	d001      	beq.n	801251c <eMBFuncReadDiscreteInputs+0xc>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012518:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801251a:	bd38      	pop	{r3, r4, r5, pc}
 801251c:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801251e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012520:	7881      	ldrb	r1, [r0, #2]
 8012522:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012526:	3101      	adds	r1, #1
 8012528:	b289      	uxth	r1, r1
        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 801252a:	78c3      	ldrb	r3, [r0, #3]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 801252c:	7902      	ldrb	r2, [r0, #4]
 801252e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
        if( ( usDiscreteCnt >= 1 ) &&
 8012532:	1e53      	subs	r3, r2, #1
 8012534:	b29b      	uxth	r3, r3
 8012536:	f240 7cce 	movw	ip, #1998	@ 0x7ce
 801253a:	4563      	cmp	r3, ip
 801253c:	d81f      	bhi.n	801257e <eMBFuncReadDiscreteInputs+0x6e>
            *usLen = MB_PDU_FUNC_OFF;
 801253e:	2300      	movs	r3, #0
 8012540:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8012542:	2302      	movs	r3, #2
 8012544:	7003      	strb	r3, [r0, #0]
            *usLen += 1;
 8012546:	8823      	ldrh	r3, [r4, #0]
 8012548:	3301      	adds	r3, #1
 801254a:	8023      	strh	r3, [r4, #0]
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 801254c:	f012 0f07 	tst.w	r2, #7
 8012550:	d00f      	beq.n	8012572 <eMBFuncReadDiscreteInputs+0x62>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 8012552:	f3c2 03c7 	ubfx	r3, r2, #3, #8
 8012556:	3301      	adds	r3, #1
 8012558:	b2dd      	uxtb	r5, r3
            *pucFrameCur++ = ucNBytes;
 801255a:	7045      	strb	r5, [r0, #1]
            *usLen += 1;
 801255c:	8823      	ldrh	r3, [r4, #0]
 801255e:	3301      	adds	r3, #1
 8012560:	8023      	strh	r3, [r4, #0]
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 8012562:	3002      	adds	r0, #2
 8012564:	f7ff fd84 	bl	8012070 <eMBRegDiscreteCB>
            if( eRegStatus != MB_ENOERR )
 8012568:	b930      	cbnz	r0, 8012578 <eMBFuncReadDiscreteInputs+0x68>
                *usLen += ucNBytes;;
 801256a:	8823      	ldrh	r3, [r4, #0]
 801256c:	442b      	add	r3, r5
 801256e:	8023      	strh	r3, [r4, #0]
 8012570:	e7d3      	b.n	801251a <eMBFuncReadDiscreteInputs+0xa>
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 8012572:	f3c2 05c7 	ubfx	r5, r2, #3, #8
 8012576:	e7f0      	b.n	801255a <eMBFuncReadDiscreteInputs+0x4a>
                eStatus = prveMBError2Exception( eRegStatus );
 8012578:	f000 f90a 	bl	8012790 <prveMBError2Exception>
 801257c:	e7cd      	b.n	801251a <eMBFuncReadDiscreteInputs+0xa>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801257e:	2003      	movs	r0, #3
 8012580:	e7cb      	b.n	801251a <eMBFuncReadDiscreteInputs+0xa>

08012582 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012582:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8012584:	880b      	ldrh	r3, [r1, #0]
 8012586:	2b05      	cmp	r3, #5
 8012588:	d001      	beq.n	801258e <eMBFuncWriteHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801258a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801258c:	bd08      	pop	{r3, pc}
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 801258e:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8012590:	7881      	ldrb	r1, [r0, #2]
 8012592:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 8012596:	3101      	adds	r1, #1
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8012598:	2301      	movs	r3, #1
 801259a:	461a      	mov	r2, r3
 801259c:	b289      	uxth	r1, r1
 801259e:	3003      	adds	r0, #3
 80125a0:	f7ff fd2c 	bl	8011ffc <eMBRegHoldingCB>
        if( eRegStatus != MB_ENOERR )
 80125a4:	2800      	cmp	r0, #0
 80125a6:	d0f1      	beq.n	801258c <eMBFuncWriteHoldingRegister+0xa>
            eStatus = prveMBError2Exception( eRegStatus );
 80125a8:	f000 f8f2 	bl	8012790 <prveMBError2Exception>
 80125ac:	e7ee      	b.n	801258c <eMBFuncWriteHoldingRegister+0xa>

080125ae <eMBFuncWriteMultipleHoldingRegister>:
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 80125ae:	880b      	ldrh	r3, [r1, #0]
 80125b0:	2b05      	cmp	r3, #5
 80125b2:	d922      	bls.n	80125fa <eMBFuncWriteMultipleHoldingRegister+0x4c>
{
 80125b4:	b510      	push	{r4, lr}
 80125b6:	460c      	mov	r4, r1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80125b8:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80125ba:	7883      	ldrb	r3, [r0, #2]
 80125bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        usRegAddress++;
 80125c0:	3301      	adds	r3, #1
 80125c2:	b299      	uxth	r1, r3

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80125c4:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80125c6:	7902      	ldrb	r2, [r0, #4]
 80125c8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80125cc:	f890 c005 	ldrb.w	ip, [r0, #5]

        if( ( usRegCount >= 1 ) &&
 80125d0:	1e53      	subs	r3, r2, #1
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	2b77      	cmp	r3, #119	@ 0x77
 80125d6:	d812      	bhi.n	80125fe <eMBFuncWriteMultipleHoldingRegister+0x50>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80125d8:	0053      	lsls	r3, r2, #1
 80125da:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80125dc:	4563      	cmp	r3, ip
 80125de:	d001      	beq.n	80125e4 <eMBFuncWriteMultipleHoldingRegister+0x36>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125e0:	2003      	movs	r0, #3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80125e2:	bd10      	pop	{r4, pc}
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80125e4:	2301      	movs	r3, #1
 80125e6:	3006      	adds	r0, #6
 80125e8:	f7ff fd08 	bl	8011ffc <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 80125ec:	b910      	cbnz	r0, 80125f4 <eMBFuncWriteMultipleHoldingRegister+0x46>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 80125ee:	2305      	movs	r3, #5
 80125f0:	8023      	strh	r3, [r4, #0]
 80125f2:	e7f6      	b.n	80125e2 <eMBFuncWriteMultipleHoldingRegister+0x34>
                eStatus = prveMBError2Exception( eRegStatus );
 80125f4:	f000 f8cc 	bl	8012790 <prveMBError2Exception>
 80125f8:	e7f3      	b.n	80125e2 <eMBFuncWriteMultipleHoldingRegister+0x34>
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125fa:	2003      	movs	r0, #3
}
 80125fc:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80125fe:	2003      	movs	r0, #3
 8012600:	e7ef      	b.n	80125e2 <eMBFuncWriteMultipleHoldingRegister+0x34>

08012602 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8012602:	b538      	push	{r3, r4, r5, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8012604:	880b      	ldrh	r3, [r1, #0]
 8012606:	2b05      	cmp	r3, #5
 8012608:	d001      	beq.n	801260e <eMBFuncReadHoldingRegister+0xc>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 801260a:	2003      	movs	r0, #3
    }
    return eStatus;
}
 801260c:	bd38      	pop	{r3, r4, r5, pc}
 801260e:	4602      	mov	r2, r0
 8012610:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8012612:	7843      	ldrb	r3, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8012614:	7881      	ldrb	r1, [r0, #2]
 8012616:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegAddress++;
 801261a:	3101      	adds	r1, #1
 801261c:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 801261e:	7905      	ldrb	r5, [r0, #4]
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8012620:	1e6b      	subs	r3, r5, #1
 8012622:	b29b      	uxth	r3, r3
 8012624:	2b7c      	cmp	r3, #124	@ 0x7c
 8012626:	d901      	bls.n	801262c <eMBFuncReadHoldingRegister+0x2a>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012628:	2003      	movs	r0, #3
 801262a:	e7ef      	b.n	801260c <eMBFuncReadHoldingRegister+0xa>
            *usLen = MB_PDU_FUNC_OFF;
 801262c:	2300      	movs	r3, #0
 801262e:	8023      	strh	r3, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8012630:	f04f 0c03 	mov.w	ip, #3
 8012634:	f800 cb02 	strb.w	ip, [r0], #2
            *usLen += 1;
 8012638:	f8b4 c000 	ldrh.w	ip, [r4]
 801263c:	f10c 0c01 	add.w	ip, ip, #1
 8012640:	f8a4 c000 	strh.w	ip, [r4]
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8012644:	ea4f 0c45 	mov.w	ip, r5, lsl #1
 8012648:	f882 c001 	strb.w	ip, [r2, #1]
            *usLen += 1;
 801264c:	8822      	ldrh	r2, [r4, #0]
 801264e:	3201      	adds	r2, #1
 8012650:	8022      	strh	r2, [r4, #0]
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 8012652:	462a      	mov	r2, r5
 8012654:	f7ff fcd2 	bl	8011ffc <eMBRegHoldingCB>
            if( eRegStatus != MB_ENOERR )
 8012658:	b920      	cbnz	r0, 8012664 <eMBFuncReadHoldingRegister+0x62>
                *usLen += usRegCount * 2;
 801265a:	8823      	ldrh	r3, [r4, #0]
 801265c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012660:	8023      	strh	r3, [r4, #0]
 8012662:	e7d3      	b.n	801260c <eMBFuncReadHoldingRegister+0xa>
                eStatus = prveMBError2Exception( eRegStatus );
 8012664:	f000 f894 	bl	8012790 <prveMBError2Exception>
 8012668:	e7d0      	b.n	801260c <eMBFuncReadHoldingRegister+0xa>

0801266a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 801266a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 801266c:	880b      	ldrh	r3, [r1, #0]
 801266e:	2b09      	cmp	r3, #9
 8012670:	d943      	bls.n	80126fa <eMBFuncReadWriteMultipleHoldingRegister+0x90>
 8012672:	4604      	mov	r4, r0
 8012674:	460d      	mov	r5, r1
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8012676:	7843      	ldrb	r3, [r0, #1]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 8012678:	7881      	ldrb	r1, [r0, #2]
 801267a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegReadAddress++;
 801267e:	3101      	adds	r1, #1
 8012680:	b28e      	uxth	r6, r1

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8012682:	78c3      	ldrb	r3, [r0, #3]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 8012684:	7907      	ldrb	r7, [r0, #4]
 8012686:	ea47 2703 	orr.w	r7, r7, r3, lsl #8

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 801268a:	7943      	ldrb	r3, [r0, #5]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 801268c:	7981      	ldrb	r1, [r0, #6]
 801268e:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
        usRegWriteAddress++;
 8012692:	3101      	adds	r1, #1
 8012694:	b289      	uxth	r1, r1

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8012696:	79c3      	ldrb	r3, [r0, #7]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8012698:	7a02      	ldrb	r2, [r0, #8]
 801269a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 801269e:	7a40      	ldrb	r0, [r0, #9]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80126a0:	1e7b      	subs	r3, r7, #1
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	2b7c      	cmp	r3, #124	@ 0x7c
 80126a6:	d82a      	bhi.n	80126fe <eMBFuncReadWriteMultipleHoldingRegister+0x94>
 80126a8:	b35a      	cbz	r2, 8012702 <eMBFuncReadWriteMultipleHoldingRegister+0x98>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80126aa:	2a79      	cmp	r2, #121	@ 0x79
 80126ac:	d82b      	bhi.n	8012706 <eMBFuncReadWriteMultipleHoldingRegister+0x9c>
 80126ae:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 80126b2:	d001      	beq.n	80126b8 <eMBFuncReadWriteMultipleHoldingRegister+0x4e>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126b4:	2003      	movs	r0, #3
 80126b6:	e021      	b.n	80126fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80126b8:	2301      	movs	r3, #1
 80126ba:	f104 000a 	add.w	r0, r4, #10
 80126be:	f7ff fc9d 	bl	8011ffc <eMBRegHoldingCB>
 80126c2:	4603      	mov	r3, r0
            if( eRegStatus == MB_ENOERR )
 80126c4:	b9b0      	cbnz	r0, 80126f4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                *usLen = MB_PDU_FUNC_OFF;
 80126c6:	8028      	strh	r0, [r5, #0]
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80126c8:	4620      	mov	r0, r4
 80126ca:	2217      	movs	r2, #23
 80126cc:	f800 2b02 	strb.w	r2, [r0], #2
                *usLen += 1;
 80126d0:	882a      	ldrh	r2, [r5, #0]
 80126d2:	3201      	adds	r2, #1
 80126d4:	802a      	strh	r2, [r5, #0]
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 80126d6:	007a      	lsls	r2, r7, #1
 80126d8:	7062      	strb	r2, [r4, #1]
                *usLen += 1;
 80126da:	882a      	ldrh	r2, [r5, #0]
 80126dc:	3201      	adds	r2, #1
 80126de:	802a      	strh	r2, [r5, #0]
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 80126e0:	463a      	mov	r2, r7
 80126e2:	4631      	mov	r1, r6
 80126e4:	f7ff fc8a 	bl	8011ffc <eMBRegHoldingCB>
                if( eRegStatus == MB_ENOERR )
 80126e8:	b920      	cbnz	r0, 80126f4 <eMBFuncReadWriteMultipleHoldingRegister+0x8a>
                    *usLen += 2 * usRegReadCount;
 80126ea:	882b      	ldrh	r3, [r5, #0]
 80126ec:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80126f0:	802b      	strh	r3, [r5, #0]
            if( eRegStatus != MB_ENOERR )
 80126f2:	e003      	b.n	80126fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
                eStatus = prveMBError2Exception( eRegStatus );
 80126f4:	f000 f84c 	bl	8012790 <prveMBError2Exception>
 80126f8:	e000      	b.n	80126fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
    eMBException    eStatus = MB_EX_NONE;
 80126fa:	2000      	movs	r0, #0
        }
    }
    return eStatus;
}
 80126fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80126fe:	2003      	movs	r0, #3
 8012700:	e7fc      	b.n	80126fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012702:	2003      	movs	r0, #3
 8012704:	e7fa      	b.n	80126fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>
 8012706:	2003      	movs	r0, #3
 8012708:	e7f8      	b.n	80126fc <eMBFuncReadWriteMultipleHoldingRegister+0x92>

0801270a <eMBFuncReadInputRegister>:
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 801270a:	880a      	ldrh	r2, [r1, #0]
 801270c:	2a05      	cmp	r2, #5
 801270e:	d001      	beq.n	8012714 <eMBFuncReadInputRegister+0xa>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012710:	2003      	movs	r0, #3
    }
    return eStatus;
}
 8012712:	4770      	bx	lr
{
 8012714:	b538      	push	{r3, r4, r5, lr}
 8012716:	4603      	mov	r3, r0
 8012718:	460c      	mov	r4, r1
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 801271a:	7842      	ldrb	r2, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 801271c:	7881      	ldrb	r1, [r0, #2]
 801271e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
        usRegAddress++;
 8012722:	3101      	adds	r1, #1
 8012724:	b289      	uxth	r1, r1
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8012726:	78c2      	ldrb	r2, [r0, #3]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8012728:	7905      	ldrb	r5, [r0, #4]
 801272a:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 801272e:	1e6a      	subs	r2, r5, #1
 8012730:	b292      	uxth	r2, r2
        if( ( usRegCount >= 1 )
 8012732:	2a7b      	cmp	r2, #123	@ 0x7b
 8012734:	d901      	bls.n	801273a <eMBFuncReadInputRegister+0x30>
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8012736:	2003      	movs	r0, #3
}
 8012738:	bd38      	pop	{r3, r4, r5, pc}
            *usLen = MB_PDU_FUNC_OFF;
 801273a:	2200      	movs	r2, #0
 801273c:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 801273e:	2204      	movs	r2, #4
 8012740:	f800 2b02 	strb.w	r2, [r0], #2
            *usLen += 1;
 8012744:	8822      	ldrh	r2, [r4, #0]
 8012746:	3201      	adds	r2, #1
 8012748:	8022      	strh	r2, [r4, #0]
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 801274a:	006a      	lsls	r2, r5, #1
 801274c:	705a      	strb	r2, [r3, #1]
            *usLen += 1;
 801274e:	8823      	ldrh	r3, [r4, #0]
 8012750:	3301      	adds	r3, #1
 8012752:	8023      	strh	r3, [r4, #0]
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8012754:	462a      	mov	r2, r5
 8012756:	f7ff fc8a 	bl	801206e <eMBRegInputCB>
            if( eRegStatus != MB_ENOERR )
 801275a:	b920      	cbnz	r0, 8012766 <eMBFuncReadInputRegister+0x5c>
                *usLen += usRegCount * 2;
 801275c:	8823      	ldrh	r3, [r4, #0]
 801275e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8012762:	8023      	strh	r3, [r4, #0]
 8012764:	e7e8      	b.n	8012738 <eMBFuncReadInputRegister+0x2e>
                eStatus = prveMBError2Exception( eRegStatus );
 8012766:	f000 f813 	bl	8012790 <prveMBError2Exception>
 801276a:	e7e5      	b.n	8012738 <eMBFuncReadInputRegister+0x2e>

0801276c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 801276c:	b538      	push	{r3, r4, r5, lr}
 801276e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8012770:	4b05      	ldr	r3, [pc, #20]	@ (8012788 <eMBFuncReportSlaveID+0x1c>)
 8012772:	881c      	ldrh	r4, [r3, #0]
 8012774:	4622      	mov	r2, r4
 8012776:	4905      	ldr	r1, [pc, #20]	@ (801278c <eMBFuncReportSlaveID+0x20>)
 8012778:	3001      	adds	r0, #1
 801277a:	f01a fe75 	bl	802d468 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 801277e:	3401      	adds	r4, #1
 8012780:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 8012782:	2000      	movs	r0, #0
 8012784:	bd38      	pop	{r3, r4, r5, pc}
 8012786:	bf00      	nop
 8012788:	20000ae4 	.word	0x20000ae4
 801278c:	20000ae8 	.word	0x20000ae8

08012790 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
 8012790:	2801      	cmp	r0, #1
 8012792:	d005      	beq.n	80127a0 <prveMBError2Exception+0x10>
 8012794:	2807      	cmp	r0, #7
 8012796:	d005      	beq.n	80127a4 <prveMBError2Exception+0x14>
 8012798:	b108      	cbz	r0, 801279e <prveMBError2Exception+0xe>
        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 801279a:	2004      	movs	r0, #4
            break;
    }

    return eStatus;
}
 801279c:	4770      	bx	lr
 801279e:	4770      	bx	lr
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80127a0:	2002      	movs	r0, #2
 80127a2:	4770      	bx	lr
            eStatus = MB_EX_SLAVE_BUSY;
 80127a4:	2006      	movs	r0, #6
 80127a6:	4770      	bx	lr

080127a8 <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80127a8:	b530      	push	{r4, r5, lr}
 80127aa:	b083      	sub	sp, #12
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80127ac:	4b36      	ldr	r3, [pc, #216]	@ (8012888 <eMBPoll+0xe0>)
 80127ae:	781c      	ldrb	r4, [r3, #0]
 80127b0:	2c00      	cmp	r4, #0
 80127b2:	d163      	bne.n	801287c <eMBPoll+0xd4>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80127b4:	f10d 0007 	add.w	r0, sp, #7
 80127b8:	f000 f886 	bl	80128c8 <xMBPortEventGet>
 80127bc:	2801      	cmp	r0, #1
 80127be:	d002      	beq.n	80127c6 <eMBPoll+0x1e>
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
 80127c0:	4620      	mov	r0, r4
 80127c2:	b003      	add	sp, #12
 80127c4:	bd30      	pop	{r4, r5, pc}
        switch ( eEvent )
 80127c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d014      	beq.n	80127f8 <eMBPoll+0x50>
 80127ce:	2b02      	cmp	r3, #2
 80127d0:	d1f6      	bne.n	80127c0 <eMBPoll+0x18>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80127d2:	4b2e      	ldr	r3, [pc, #184]	@ (801288c <eMBPoll+0xe4>)
 80127d4:	6818      	ldr	r0, [r3, #0]
 80127d6:	7801      	ldrb	r1, [r0, #0]
 80127d8:	4b2d      	ldr	r3, [pc, #180]	@ (8012890 <eMBPoll+0xe8>)
 80127da:	7019      	strb	r1, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80127dc:	4b2d      	ldr	r3, [pc, #180]	@ (8012894 <eMBPoll+0xec>)
 80127de:	2201      	movs	r2, #1
 80127e0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80127e2:	2300      	movs	r3, #0
 80127e4:	2b0f      	cmp	r3, #15
 80127e6:	dc25      	bgt.n	8012834 <eMBPoll+0x8c>
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80127e8:	4a2b      	ldr	r2, [pc, #172]	@ (8012898 <eMBPoll+0xf0>)
 80127ea:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80127ee:	b30a      	cbz	r2, 8012834 <eMBPoll+0x8c>
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80127f0:	4291      	cmp	r1, r2
 80127f2:	d017      	beq.n	8012824 <eMBPoll+0x7c>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80127f4:	3301      	adds	r3, #1
 80127f6:	e7f5      	b.n	80127e4 <eMBPoll+0x3c>
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 80127f8:	4b28      	ldr	r3, [pc, #160]	@ (801289c <eMBPoll+0xf4>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4a28      	ldr	r2, [pc, #160]	@ (80128a0 <eMBPoll+0xf8>)
 80127fe:	4923      	ldr	r1, [pc, #140]	@ (801288c <eMBPoll+0xe4>)
 8012800:	4828      	ldr	r0, [pc, #160]	@ (80128a4 <eMBPoll+0xfc>)
 8012802:	4798      	blx	r3
            if( eStatus == MB_ENOERR )
 8012804:	4605      	mov	r5, r0
 8012806:	2800      	cmp	r0, #0
 8012808:	d1da      	bne.n	80127c0 <eMBPoll+0x18>
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 801280a:	4b26      	ldr	r3, [pc, #152]	@ (80128a4 <eMBPoll+0xfc>)
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	4a26      	ldr	r2, [pc, #152]	@ (80128a8 <eMBPoll+0x100>)
 8012810:	7812      	ldrb	r2, [r2, #0]
 8012812:	4293      	cmp	r3, r2
 8012814:	d001      	beq.n	801281a <eMBPoll+0x72>
 8012816:	2b00      	cmp	r3, #0
 8012818:	d132      	bne.n	8012880 <eMBPoll+0xd8>
                    ( void )xMBPortEventPost( EV_EXECUTE );
 801281a:	2002      	movs	r0, #2
 801281c:	f000 f848 	bl	80128b0 <xMBPortEventPost>
    return MB_ENOERR;
 8012820:	462c      	mov	r4, r5
 8012822:	e7cd      	b.n	80127c0 <eMBPoll+0x18>
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8012824:	4a1c      	ldr	r2, [pc, #112]	@ (8012898 <eMBPoll+0xf0>)
 8012826:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	491c      	ldr	r1, [pc, #112]	@ (80128a0 <eMBPoll+0xf8>)
 801282e:	4798      	blx	r3
 8012830:	4b18      	ldr	r3, [pc, #96]	@ (8012894 <eMBPoll+0xec>)
 8012832:	7018      	strb	r0, [r3, #0]
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8012834:	4b1b      	ldr	r3, [pc, #108]	@ (80128a4 <eMBPoll+0xfc>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	b323      	cbz	r3, 8012884 <eMBPoll+0xdc>
                if( eException != MB_EX_NONE )
 801283a:	4b16      	ldr	r3, [pc, #88]	@ (8012894 <eMBPoll+0xec>)
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	b19b      	cbz	r3, 8012868 <eMBPoll+0xc0>
                    usLength = 0;
 8012840:	4a17      	ldr	r2, [pc, #92]	@ (80128a0 <eMBPoll+0xf8>)
 8012842:	2100      	movs	r1, #0
 8012844:	8011      	strh	r1, [r2, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8012846:	4912      	ldr	r1, [pc, #72]	@ (8012890 <eMBPoll+0xe8>)
 8012848:	7809      	ldrb	r1, [r1, #0]
 801284a:	4810      	ldr	r0, [pc, #64]	@ (801288c <eMBPoll+0xe4>)
 801284c:	6805      	ldr	r5, [r0, #0]
 801284e:	f04f 0c01 	mov.w	ip, #1
 8012852:	f8a2 c000 	strh.w	ip, [r2]
 8012856:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 801285a:	7029      	strb	r1, [r5, #0]
                    ucMBFrame[usLength++] = eException;
 801285c:	6800      	ldr	r0, [r0, #0]
 801285e:	8811      	ldrh	r1, [r2, #0]
 8012860:	eb01 050c 	add.w	r5, r1, ip
 8012864:	8015      	strh	r5, [r2, #0]
 8012866:	5443      	strb	r3, [r0, r1]
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8012868:	4b10      	ldr	r3, [pc, #64]	@ (80128ac <eMBPoll+0x104>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	4a0c      	ldr	r2, [pc, #48]	@ (80128a0 <eMBPoll+0xf8>)
 801286e:	8812      	ldrh	r2, [r2, #0]
 8012870:	4906      	ldr	r1, [pc, #24]	@ (801288c <eMBPoll+0xe4>)
 8012872:	6809      	ldr	r1, [r1, #0]
 8012874:	480c      	ldr	r0, [pc, #48]	@ (80128a8 <eMBPoll+0x100>)
 8012876:	7800      	ldrb	r0, [r0, #0]
 8012878:	4798      	blx	r3
 801287a:	e7a1      	b.n	80127c0 <eMBPoll+0x18>
        return MB_EILLSTATE;
 801287c:	2406      	movs	r4, #6
 801287e:	e79f      	b.n	80127c0 <eMBPoll+0x18>
    return MB_ENOERR;
 8012880:	4604      	mov	r4, r0
 8012882:	e79d      	b.n	80127c0 <eMBPoll+0x18>
 8012884:	461c      	mov	r4, r3
 8012886:	e79b      	b.n	80127c0 <eMBPoll+0x18>
 8012888:	2000009c 	.word	0x2000009c
 801288c:	20000b0c 	.word	0x20000b0c
 8012890:	20000b09 	.word	0x20000b09
 8012894:	20000b08 	.word	0x20000b08
 8012898:	2000001c 	.word	0x2000001c
 801289c:	20000b14 	.word	0x20000b14
 80128a0:	20000b0a 	.word	0x20000b0a
 80128a4:	20000b10 	.word	0x20000b10
 80128a8:	20000b1c 	.word	0x20000b1c
 80128ac:	20000b18 	.word	0x20000b18

080128b0 <xMBPortEventPost>:
}

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
 80128b0:	2301      	movs	r3, #1
 80128b2:	4a03      	ldr	r2, [pc, #12]	@ (80128c0 <xMBPortEventPost+0x10>)
 80128b4:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 80128b6:	4a03      	ldr	r2, [pc, #12]	@ (80128c4 <xMBPortEventPost+0x14>)
 80128b8:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	4770      	bx	lr
 80128be:	bf00      	nop
 80128c0:	20000b1d 	.word	0x20000b1d
 80128c4:	20000b1e 	.word	0x20000b1e

080128c8 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 80128c8:	4603      	mov	r3, r0
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 80128ca:	4a05      	ldr	r2, [pc, #20]	@ (80128e0 <xMBPortEventGet+0x18>)
 80128cc:	7810      	ldrb	r0, [r2, #0]
 80128ce:	b130      	cbz	r0, 80128de <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
 80128d0:	4a04      	ldr	r2, [pc, #16]	@ (80128e4 <xMBPortEventGet+0x1c>)
 80128d2:	7812      	ldrb	r2, [r2, #0]
 80128d4:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 80128d6:	4b02      	ldr	r3, [pc, #8]	@ (80128e0 <xMBPortEventGet+0x18>)
 80128d8:	2200      	movs	r2, #0
 80128da:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 80128dc:	2001      	movs	r0, #1
    }
    return xEventHappened;
}
 80128de:	4770      	bx	lr
 80128e0:	20000b1d 	.word	0x20000b1d
 80128e4:	20000b1e 	.word	0x20000b1e

080128e8 <handler_mb_tcp>:
//}
//

static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_READ) {
 80128e8:	2907      	cmp	r1, #7
 80128ea:	d000      	beq.n	80128ee <handler_mb_tcp+0x6>
 80128ec:	4770      	bx	lr
static void handler_mb_tcp(struct mg_connection *c, int ev, void *ev_data){
 80128ee:	b538      	push	{r3, r4, r5, lr}
 80128f0:	4604      	mov	r4, r0
		struct mg_iobuf *r = &c->recv;

		ucTCPRequestLen = r->len;
 80128f2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80128f6:	4a0d      	ldr	r2, [pc, #52]	@ (801292c <handler_mb_tcp+0x44>)
 80128f8:	8013      	strh	r3, [r2, #0]
		if(ucTCPRequestLen>0){
 80128fa:	b903      	cbnz	r3, 80128fe <handler_mb_tcp+0x16>
			}
		}


	}
}
 80128fc:	bd38      	pop	{r3, r4, r5, pc}
			xMBPortEventPost (EV_FRAME_RECEIVED);
 80128fe:	2001      	movs	r0, #1
 8012900:	f7ff ffd6 	bl	80128b0 <xMBPortEventPost>
			eMBPoll ();
 8012904:	f7ff ff50 	bl	80127a8 <eMBPoll>
			eMBPoll ();
 8012908:	f7ff ff4e 	bl	80127a8 <eMBPoll>
			if(bFrameSent){
 801290c:	4b08      	ldr	r3, [pc, #32]	@ (8012930 <handler_mb_tcp+0x48>)
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d0f3      	beq.n	80128fc <handler_mb_tcp+0x14>
				bFrameSent = FALSE;
 8012914:	2500      	movs	r5, #0
 8012916:	4b06      	ldr	r3, [pc, #24]	@ (8012930 <handler_mb_tcp+0x48>)
 8012918:	701d      	strb	r5, [r3, #0]
				mg_send(c, ucTCPResponseFrame, ucTCPResponseLen);
 801291a:	4b06      	ldr	r3, [pc, #24]	@ (8012934 <handler_mb_tcp+0x4c>)
 801291c:	881a      	ldrh	r2, [r3, #0]
 801291e:	4906      	ldr	r1, [pc, #24]	@ (8012938 <handler_mb_tcp+0x50>)
 8012920:	4620      	mov	r0, r4
 8012922:	f014 f81d 	bl	8026960 <mg_send>
				r->len = 0;                  // Tell Mongoose we've consumed data
 8012926:	6425      	str	r5, [r4, #64]	@ 0x40
}
 8012928:	e7e8      	b.n	80128fc <handler_mb_tcp+0x14>
 801292a:	bf00      	nop
 801292c:	20001324 	.word	0x20001324
 8012930:	20000b1f 	.word	0x20000b1f
 8012934:	20000b20 	.word	0x20000b20
 8012938:	20000b24 	.word	0x20000b24

0801293c <init_mb_tcp>:

static const char *s_lsn = "tcp://0.0.0.0:502";   // Listening address ModBusTCP

void init_mb_tcp(void * param){
 801293c:	b508      	push	{r3, lr}

	struct mg_mgr *mgr = (struct mg_mgr *)param;  // Event manager
	mg_listen(mgr, s_lsn, handler_mb_tcp, NULL);  // Create server connection
 801293e:	2300      	movs	r3, #0
 8012940:	4a02      	ldr	r2, [pc, #8]	@ (801294c <init_mb_tcp+0x10>)
 8012942:	4903      	ldr	r1, [pc, #12]	@ (8012950 <init_mb_tcp+0x14>)
 8012944:	f013 ff20 	bl	8026788 <mg_listen>

}
 8012948:	bd08      	pop	{r3, pc}
 801294a:	bf00      	nop
 801294c:	080128e9 	.word	0x080128e9
 8012950:	08035a70 	.word	0x08035a70

08012954 <handle_OPTIONS_method>:
	free(pub_topics_str);
	free(subscr_topics_str);
}


static void handle_OPTIONS_method(struct mg_connection *c){
 8012954:	b508      	push	{r3, lr}

	mg_http_reply(c, 200,
 8012956:	4b03      	ldr	r3, [pc, #12]	@ (8012964 <handle_OPTIONS_method+0x10>)
 8012958:	4a03      	ldr	r2, [pc, #12]	@ (8012968 <handle_OPTIONS_method+0x14>)
 801295a:	21c8      	movs	r1, #200	@ 0xc8
 801295c:	f010 fe8a 	bl	8023674 <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8012960:	bd08      	pop	{r3, pc}
 8012962:	bf00      	nop
 8012964:	08039ed4 	.word	0x08039ed4
 8012968:	08035a84 	.word	0x08035a84

0801296c <handle_firmware_deactivate>:
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 801296c:	b570      	push	{r4, r5, r6, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	4605      	mov	r5, r0
 8012972:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8012974:	ae02      	add	r6, sp, #8
 8012976:	4914      	ldr	r1, [pc, #80]	@ (80129c8 <handle_firmware_deactivate+0x5c>)
 8012978:	4630      	mov	r0, r6
 801297a:	f011 f805 	bl	8023988 <mg_str_s>
 801297e:	2300      	movs	r3, #0
 8012980:	9300      	str	r3, [sp, #0]
 8012982:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012986:	e894 0003 	ldmia.w	r4, {r0, r1}
 801298a:	f011 fa1f 	bl	8023dcc <mg_match>
 801298e:	b198      	cbz	r0, 80129b8 <handle_firmware_deactivate+0x4c>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 8012990:	4b0e      	ldr	r3, [pc, #56]	@ (80129cc <handle_firmware_deactivate+0x60>)
 8012992:	6a1b      	ldr	r3, [r3, #32]
 8012994:	480e      	ldr	r0, [pc, #56]	@ (80129d0 <handle_firmware_deactivate+0x64>)
 8012996:	4798      	blx	r3
 8012998:	b138      	cbz	r0, 80129aa <handle_firmware_deactivate+0x3e>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 801299a:	4b0e      	ldr	r3, [pc, #56]	@ (80129d4 <handle_firmware_deactivate+0x68>)
 801299c:	4a0e      	ldr	r2, [pc, #56]	@ (80129d8 <handle_firmware_deactivate+0x6c>)
 801299e:	21c8      	movs	r1, #200	@ 0xc8
 80129a0:	4628      	mov	r0, r5
 80129a2:	f010 fe67 	bl	8023674 <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80129a6:	b004      	add	sp, #16
 80129a8:	bd70      	pop	{r4, r5, r6, pc}
					mg_http_reply(c, 200, headers, //TODO delete for release,
 80129aa:	4b0c      	ldr	r3, [pc, #48]	@ (80129dc <handle_firmware_deactivate+0x70>)
 80129ac:	4a0a      	ldr	r2, [pc, #40]	@ (80129d8 <handle_firmware_deactivate+0x6c>)
 80129ae:	21c8      	movs	r1, #200	@ 0xc8
 80129b0:	4628      	mov	r0, r5
 80129b2:	f010 fe5f 	bl	8023674 <mg_http_reply>
 80129b6:	e7f6      	b.n	80129a6 <handle_firmware_deactivate+0x3a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80129b8:	4b09      	ldr	r3, [pc, #36]	@ (80129e0 <handle_firmware_deactivate+0x74>)
 80129ba:	4a07      	ldr	r2, [pc, #28]	@ (80129d8 <handle_firmware_deactivate+0x6c>)
 80129bc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80129c0:	4628      	mov	r0, r5
 80129c2:	f010 fe57 	bl	8023674 <mg_http_reply>
}
 80129c6:	e7ee      	b.n	80129a6 <handle_firmware_deactivate+0x3a>
 80129c8:	08035b24 	.word	0x08035b24
 80129cc:	200000a0 	.word	0x200000a0
 80129d0:	080355fc 	.word	0x080355fc
 80129d4:	08035b2c 	.word	0x08035b2c
 80129d8:	08035b68 	.word	0x08035b68
 80129dc:	08035bd8 	.word	0x08035bd8
 80129e0:	08035c1c 	.word	0x08035c1c

080129e4 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 80129e4:	b570      	push	{r4, r5, r6, lr}
 80129e6:	b084      	sub	sp, #16
 80129e8:	4605      	mov	r5, r0
 80129ea:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80129ec:	ae02      	add	r6, sp, #8
 80129ee:	4912      	ldr	r1, [pc, #72]	@ (8012a38 <handle_web_files_remove+0x54>)
 80129f0:	4630      	mov	r0, r6
 80129f2:	f010 ffc9 	bl	8023988 <mg_str_s>
 80129f6:	2300      	movs	r3, #0
 80129f8:	9300      	str	r3, [sp, #0]
 80129fa:	e896 000c 	ldmia.w	r6, {r2, r3}
 80129fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012a02:	f011 f9e3 	bl	8023dcc <mg_match>
 8012a06:	b178      	cbz	r0, 8012a28 <handle_web_files_remove+0x44>
			mg_fs_lfs.rm("/web");
 8012a08:	4e0c      	ldr	r6, [pc, #48]	@ (8012a3c <handle_web_files_remove+0x58>)
 8012a0a:	6a33      	ldr	r3, [r6, #32]
 8012a0c:	4c0c      	ldr	r4, [pc, #48]	@ (8012a40 <handle_web_files_remove+0x5c>)
 8012a0e:	4620      	mov	r0, r4
 8012a10:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 8012a12:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8012a14:	4620      	mov	r0, r4
 8012a16:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012a18:	4b0a      	ldr	r3, [pc, #40]	@ (8012a44 <handle_web_files_remove+0x60>)
 8012a1a:	4a0b      	ldr	r2, [pc, #44]	@ (8012a48 <handle_web_files_remove+0x64>)
 8012a1c:	21c8      	movs	r1, #200	@ 0xc8
 8012a1e:	4628      	mov	r0, r5
 8012a20:	f010 fe28 	bl	8023674 <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 8012a24:	b004      	add	sp, #16
 8012a26:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012a28:	4b08      	ldr	r3, [pc, #32]	@ (8012a4c <handle_web_files_remove+0x68>)
 8012a2a:	4a07      	ldr	r2, [pc, #28]	@ (8012a48 <handle_web_files_remove+0x64>)
 8012a2c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012a30:	4628      	mov	r0, r5
 8012a32:	f010 fe1f 	bl	8023674 <mg_http_reply>
}
 8012a36:	e7f5      	b.n	8012a24 <handle_web_files_remove+0x40>
 8012a38:	08035b24 	.word	0x08035b24
 8012a3c:	200000a0 	.word	0x200000a0
 8012a40:	080355e8 	.word	0x080355e8
 8012a44:	08035c6c 	.word	0x08035c6c
 8012a48:	08035b68 	.word	0x08035b68
 8012a4c:	08035c1c 	.word	0x08035c1c

08012a50 <handler_logout>:
static void handler_logout(struct mg_connection *c,struct mg_http_message *hm){
 8012a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a52:	b0c3      	sub	sp, #268	@ 0x10c
 8012a54:	4606      	mov	r6, r0
 8012a56:	460d      	mov	r5, r1
	char username[128] = {0};
 8012a58:	2400      	movs	r4, #0
 8012a5a:	9422      	str	r4, [sp, #136]	@ 0x88
 8012a5c:	277c      	movs	r7, #124	@ 0x7c
 8012a5e:	463a      	mov	r2, r7
 8012a60:	4621      	mov	r1, r4
 8012a62:	a823      	add	r0, sp, #140	@ 0x8c
 8012a64:	f019 fac4 	bl	802bff0 <memset>
	char pass[128] = {0};
 8012a68:	9402      	str	r4, [sp, #8]
 8012a6a:	463a      	mov	r2, r7
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	a803      	add	r0, sp, #12
 8012a70:	f019 fabe 	bl	802bff0 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8012a74:	2280      	movs	r2, #128	@ 0x80
 8012a76:	9200      	str	r2, [sp, #0]
 8012a78:	ab02      	add	r3, sp, #8
 8012a7a:	a922      	add	r1, sp, #136	@ 0x88
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	f011 feab 	bl	80247d8 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8012a82:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8012a86:	b113      	cbz	r3, 8012a8e <handler_logout+0x3e>
 8012a88:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012a8c:	b962      	cbnz	r2, 8012aa8 <handler_logout+0x58>
	}else if (username[0] == '\0' && pass[0] != '\0') {
 8012a8e:	b913      	cbnz	r3, 8012a96 <handler_logout+0x46>
 8012a90:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012a94:	bb23      	cbnz	r3, 8012ae0 <handler_logout+0x90>
        mg_http_reply(c, 404, headers, //TODO delete for release,
 8012a96:	4b1e      	ldr	r3, [pc, #120]	@ (8012b10 <handler_logout+0xc0>)
 8012a98:	4a1e      	ldr	r2, [pc, #120]	@ (8012b14 <handler_logout+0xc4>)
 8012a9a:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f010 fde8 	bl	8023674 <mg_http_reply>
}
 8012aa4:	b043      	add	sp, #268	@ 0x10c
 8012aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mg_http_reply(c, 400, headers, //TODO delete for release,
 8012aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8012b18 <handler_logout+0xc8>)
 8012aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8012b14 <handler_logout+0xc4>)
 8012aac:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f010 fddf 	bl	8023674 <mg_http_reply>
        return;
 8012ab6:	e7f5      	b.n	8012aa4 <handler_logout+0x54>
				web_tokens[i].token[0] = '\0';
 8012ab8:	4a18      	ldr	r2, [pc, #96]	@ (8012b1c <handler_logout+0xcc>)
 8012aba:	23b8      	movs	r3, #184	@ 0xb8
 8012abc:	fb04 f303 	mul.w	r3, r4, r3
 8012ac0:	18d0      	adds	r0, r2, r3
 8012ac2:	2100      	movs	r1, #0
 8012ac4:	f880 1080 	strb.w	r1, [r0, #128]	@ 0x80
				web_tokens[i].expare = 0;
 8012ac8:	2400      	movs	r4, #0
 8012aca:	2500      	movs	r5, #0
 8012acc:	e9c0 452c 	strd	r4, r5, [r0, #176]	@ 0xb0
				web_tokens[i].user[0] = '\0';
 8012ad0:	54d1      	strb	r1, [r2, r3]
		        mg_http_reply(c, 200, headers, //TODO delete for release,
 8012ad2:	4b13      	ldr	r3, [pc, #76]	@ (8012b20 <handler_logout+0xd0>)
 8012ad4:	4a0f      	ldr	r2, [pc, #60]	@ (8012b14 <handler_logout+0xc4>)
 8012ad6:	21c8      	movs	r1, #200	@ 0xc8
 8012ad8:	4630      	mov	r0, r6
 8012ada:	f010 fdcb 	bl	8023674 <mg_http_reply>
		        return;
 8012ade:	e7e1      	b.n	8012aa4 <handler_logout+0x54>
		for (i=0;i<user_list_size; i++){
 8012ae0:	2400      	movs	r4, #0
 8012ae2:	2c09      	cmp	r4, #9
 8012ae4:	dc0c      	bgt.n	8012b00 <handler_logout+0xb0>
			if((strcmp(web_tokens[i].token, pass) == 0)){
 8012ae6:	23b8      	movs	r3, #184	@ 0xb8
 8012ae8:	fb04 f303 	mul.w	r3, r4, r3
 8012aec:	3380      	adds	r3, #128	@ 0x80
 8012aee:	a902      	add	r1, sp, #8
 8012af0:	480a      	ldr	r0, [pc, #40]	@ (8012b1c <handler_logout+0xcc>)
 8012af2:	4418      	add	r0, r3
 8012af4:	f7fd fb74 	bl	80101e0 <strcmp>
 8012af8:	2800      	cmp	r0, #0
 8012afa:	d0dd      	beq.n	8012ab8 <handler_logout+0x68>
		for (i=0;i<user_list_size; i++){
 8012afc:	3401      	adds	r4, #1
 8012afe:	e7f0      	b.n	8012ae2 <handler_logout+0x92>
        mg_http_reply(c, 404, headers,
 8012b00:	4b08      	ldr	r3, [pc, #32]	@ (8012b24 <handler_logout+0xd4>)
 8012b02:	4a04      	ldr	r2, [pc, #16]	@ (8012b14 <handler_logout+0xc4>)
 8012b04:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f010 fdb3 	bl	8023674 <mg_http_reply>
        return;
 8012b0e:	e7c9      	b.n	8012aa4 <handler_logout+0x54>
 8012b10:	08035da4 	.word	0x08035da4
 8012b14:	08035b68 	.word	0x08035b68
 8012b18:	08035cb4 	.word	0x08035cb4
 8012b1c:	20001328 	.word	0x20001328
 8012b20:	08035d34 	.word	0x08035d34
 8012b24:	08035d70 	.word	0x08035d70

08012b28 <handle_login>:
static void handle_login(struct mg_connection *c, tokens_list_t *u) {
 8012b28:	b530      	push	{r4, r5, lr}
 8012b2a:	b0c7      	sub	sp, #284	@ 0x11c
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	460d      	mov	r5, r1
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8012b30:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8012b34:	f013 0240 	ands.w	r2, r3, #64	@ 0x40
 8012b38:	d01f      	beq.n	8012b7a <handle_login+0x52>
 8012b3a:	4b12      	ldr	r3, [pc, #72]	@ (8012b84 <handle_login+0x5c>)
              cookie_name, u->token,
 8012b3c:	f105 0180 	add.w	r1, r5, #128	@ 0x80
  mg_snprintf(cookie, sizeof(cookie),
 8012b40:	b1ea      	cbz	r2, 8012b7e <handle_login+0x56>
 8012b42:	4a11      	ldr	r2, [pc, #68]	@ (8012b88 <handle_login+0x60>)
 8012b44:	4811      	ldr	r0, [pc, #68]	@ (8012b8c <handle_login+0x64>)
 8012b46:	9002      	str	r0, [sp, #8]
 8012b48:	9201      	str	r2, [sp, #4]
 8012b4a:	9100      	str	r1, [sp, #0]
 8012b4c:	4a10      	ldr	r2, [pc, #64]	@ (8012b90 <handle_login+0x68>)
 8012b4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012b52:	a806      	add	r0, sp, #24
 8012b54:	f010 f88e 	bl	8022c74 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->user));
 8012b58:	9505      	str	r5, [sp, #20]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	9204      	str	r2, [sp, #16]
 8012b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b94 <handle_login+0x6c>)
 8012b60:	9303      	str	r3, [sp, #12]
 8012b62:	490d      	ldr	r1, [pc, #52]	@ (8012b98 <handle_login+0x70>)
 8012b64:	9102      	str	r1, [sp, #8]
 8012b66:	9201      	str	r2, [sp, #4]
 8012b68:	9300      	str	r3, [sp, #0]
 8012b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8012b9c <handle_login+0x74>)
 8012b6c:	aa06      	add	r2, sp, #24
 8012b6e:	21c8      	movs	r1, #200	@ 0xc8
 8012b70:	4620      	mov	r0, r4
 8012b72:	f010 fd7f 	bl	8023674 <mg_http_reply>
}
 8012b76:	b047      	add	sp, #284	@ 0x11c
 8012b78:	bd30      	pop	{r4, r5, pc}
  const char *cookie_name = c->is_tls ? "secure_access_token" : "access_token";
 8012b7a:	4b09      	ldr	r3, [pc, #36]	@ (8012ba0 <handle_login+0x78>)
 8012b7c:	e7de      	b.n	8012b3c <handle_login+0x14>
  mg_snprintf(cookie, sizeof(cookie),
 8012b7e:	4a09      	ldr	r2, [pc, #36]	@ (8012ba4 <handle_login+0x7c>)
 8012b80:	e7e0      	b.n	8012b44 <handle_login+0x1c>
 8012b82:	bf00      	nop
 8012b84:	08035e1c 	.word	0x08035e1c
 8012b88:	08035e40 	.word	0x08035e40
 8012b8c:	0002a300 	.word	0x0002a300
 8012b90:	08035e4c 	.word	0x08035e4c
 8012b94:	08021f05 	.word	0x08021f05
 8012b98:	08036bf8 	.word	0x08036bf8
 8012b9c:	08035e90 	.word	0x08035e90
 8012ba0:	08035e30 	.word	0x08035e30
 8012ba4:	0803606c 	.word	0x0803606c

08012ba8 <auth>:
static bool auth(struct mg_connection *c, struct mg_http_message *hm, bool set_cookie){
 8012ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bac:	b0e5      	sub	sp, #404	@ 0x194
 8012bae:	4605      	mov	r5, r0
 8012bb0:	460c      	mov	r4, r1
 8012bb2:	4616      	mov	r6, r2
	char pass_digest[sha1_str_len] = {0};
 8012bb4:	2100      	movs	r1, #0
 8012bb6:	9159      	str	r1, [sp, #356]	@ 0x164
 8012bb8:	2225      	movs	r2, #37	@ 0x25
 8012bba:	a85a      	add	r0, sp, #360	@ 0x168
 8012bbc:	f019 fa18 	bl	802bff0 <memset>
	mg_http_creds(hm, username, sizeof(username), pass, sizeof(pass));
 8012bc0:	2280      	movs	r2, #128	@ 0x80
 8012bc2:	9200      	str	r2, [sp, #0]
 8012bc4:	ab02      	add	r3, sp, #8
 8012bc6:	a922      	add	r1, sp, #136	@ 0x88
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f011 fe05 	bl	80247d8 <mg_http_creds>
	if (username[0] != '\0' && pass[0] != '\0') {
 8012bce:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8012bd2:	b113      	cbz	r3, 8012bda <auth+0x32>
 8012bd4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012bd8:	b94a      	cbnz	r2, 8012bee <auth+0x46>
	} else if (username[0] == '\0' && pass[0] != '\0') {
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	f040 80ad 	bne.w	8012d3a <auth+0x192>
 8012be0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	f040 80a4 	bne.w	8012d32 <auth+0x18a>
	return false;
 8012bea:	2000      	movs	r0, #0
 8012bec:	e0a6      	b.n	8012d3c <auth+0x194>
		mg_sha1_init(&sha1_ctx);
 8012bee:	a842      	add	r0, sp, #264	@ 0x108
 8012bf0:	f010 fe18 	bl	8023824 <mg_sha1_init>
		mg_sha1_update(&sha1_ctx, (const unsigned char *)pass, strlen(pass) * sizeof(char));
 8012bf4:	a802      	add	r0, sp, #8
 8012bf6:	f7fd fb53 	bl	80102a0 <strlen>
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	a902      	add	r1, sp, #8
 8012bfe:	a842      	add	r0, sp, #264	@ 0x108
 8012c00:	f010 fe2a 	bl	8023858 <mg_sha1_update>
		mg_sha1_final((unsigned char *)&pass_digest, &sha1_ctx); // calculate sha1 pass
 8012c04:	a942      	add	r1, sp, #264	@ 0x108
 8012c06:	a859      	add	r0, sp, #356	@ 0x164
 8012c08:	f010 fe60 	bl	80238cc <mg_sha1_final>
		for (i=0; i< user_list_size; i++ ){
 8012c0c:	2400      	movs	r4, #0
 8012c0e:	e026      	b.n	8012c5e <auth+0xb6>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8012c10:	4649      	mov	r1, r9
 8012c12:	4628      	mov	r0, r5
 8012c14:	f7ff ff88 	bl	8012b28 <handle_login>
 8012c18:	e062      	b.n	8012ce0 <auth+0x138>
					strncpy(web_tokens[1].user, username, sizeof(web_tokens[1].user));
 8012c1a:	4f4a      	ldr	r7, [pc, #296]	@ (8012d44 <auth+0x19c>)
 8012c1c:	2280      	movs	r2, #128	@ 0x80
 8012c1e:	a922      	add	r1, sp, #136	@ 0x88
 8012c20:	4638      	mov	r0, r7
 8012c22:	f019 fa2c 	bl	802c07e <strncpy>
					web_tokens[1].expare = mg_now() + token_life_time;
 8012c26:	f016 fa33 	bl	8029090 <mg_now>
 8012c2a:	4b47      	ldr	r3, [pc, #284]	@ (8012d48 <auth+0x1a0>)
 8012c2c:	18c3      	adds	r3, r0, r3
 8012c2e:	f141 0100 	adc.w	r1, r1, #0
 8012c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012c36:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
					mg_random_str(web_tokens[1].token, sha1_str_len -1);
 8012c3a:	2128      	movs	r1, #40	@ 0x28
 8012c3c:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8012c40:	f012 fa10 	bl	8025064 <mg_random_str>
					if (set_cookie)handle_login(c, &web_tokens[i]);
 8012c44:	b90e      	cbnz	r6, 8012c4a <auth+0xa2>
					return true;
 8012c46:	2001      	movs	r0, #1
 8012c48:	e078      	b.n	8012d3c <auth+0x194>
					if (set_cookie)handle_login(c, &web_tokens[i]);
 8012c4a:	21b8      	movs	r1, #184	@ 0xb8
 8012c4c:	f1a7 03b8 	sub.w	r3, r7, #184	@ 0xb8
 8012c50:	fb01 3104 	mla	r1, r1, r4, r3
 8012c54:	4628      	mov	r0, r5
 8012c56:	f7ff ff67 	bl	8012b28 <handle_login>
 8012c5a:	e7f4      	b.n	8012c46 <auth+0x9e>
		for (i=0; i< user_list_size; i++ ){
 8012c5c:	3401      	adds	r4, #1
 8012c5e:	2c09      	cmp	r4, #9
 8012c60:	dc40      	bgt.n	8012ce4 <auth+0x13c>
			if((strcmp(web_users[i].user, username) == 0) && (strcmp(web_users[i].pass_digest, pass_digest) == 0)){
 8012c62:	a922      	add	r1, sp, #136	@ 0x88
 8012c64:	20a9      	movs	r0, #169	@ 0xa9
 8012c66:	4b39      	ldr	r3, [pc, #228]	@ (8012d4c <auth+0x1a4>)
 8012c68:	fb00 3004 	mla	r0, r0, r4, r3
 8012c6c:	f7fd fab8 	bl	80101e0 <strcmp>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d1f3      	bne.n	8012c5c <auth+0xb4>
 8012c74:	23a9      	movs	r3, #169	@ 0xa9
 8012c76:	fb04 f303 	mul.w	r3, r4, r3
 8012c7a:	3380      	adds	r3, #128	@ 0x80
 8012c7c:	a959      	add	r1, sp, #356	@ 0x164
 8012c7e:	4833      	ldr	r0, [pc, #204]	@ (8012d4c <auth+0x1a4>)
 8012c80:	4418      	add	r0, r3
 8012c82:	f7fd faad 	bl	80101e0 <strcmp>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d1e8      	bne.n	8012c5c <auth+0xb4>
					if(web_tokens[i].expare < mg_now()){
 8012c8a:	4b31      	ldr	r3, [pc, #196]	@ (8012d50 <auth+0x1a8>)
 8012c8c:	22b8      	movs	r2, #184	@ 0xb8
 8012c8e:	fb02 3304 	mla	r3, r2, r4, r3
 8012c92:	f8d3 80b0 	ldr.w	r8, [r3, #176]	@ 0xb0
 8012c96:	f8d3 70b4 	ldr.w	r7, [r3, #180]	@ 0xb4
 8012c9a:	f016 f9f9 	bl	8029090 <mg_now>
 8012c9e:	4580      	cmp	r8, r0
 8012ca0:	418f      	sbcs	r7, r1
 8012ca2:	d2ba      	bcs.n	8012c1a <auth+0x72>
						strncpy(web_tokens[i].user, username, sizeof(web_tokens[i].user));
 8012ca4:	27b8      	movs	r7, #184	@ 0xb8
 8012ca6:	fb04 f707 	mul.w	r7, r4, r7
 8012caa:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8012d50 <auth+0x1a8>
 8012cae:	eb07 0908 	add.w	r9, r7, r8
 8012cb2:	2280      	movs	r2, #128	@ 0x80
 8012cb4:	a922      	add	r1, sp, #136	@ 0x88
 8012cb6:	4648      	mov	r0, r9
 8012cb8:	f019 f9e1 	bl	802c07e <strncpy>
						web_tokens[i].expare = mg_now() + token_life_time;
 8012cbc:	f016 f9e8 	bl	8029090 <mg_now>
 8012cc0:	4b21      	ldr	r3, [pc, #132]	@ (8012d48 <auth+0x1a0>)
 8012cc2:	18c0      	adds	r0, r0, r3
 8012cc4:	f141 0100 	adc.w	r1, r1, #0
 8012cc8:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 8012ccc:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
						mg_random_str(web_tokens[i].token, sha1_str_len -1);
 8012cd0:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8012cd4:	2128      	movs	r1, #40	@ 0x28
 8012cd6:	4440      	add	r0, r8
 8012cd8:	f012 f9c4 	bl	8025064 <mg_random_str>
						if (set_cookie)handle_login(c, &web_tokens[i]);
 8012cdc:	2e00      	cmp	r6, #0
 8012cde:	d197      	bne.n	8012c10 <auth+0x68>
						return true;
 8012ce0:	2001      	movs	r0, #1
 8012ce2:	e02b      	b.n	8012d3c <auth+0x194>
	return false;
 8012ce4:	2000      	movs	r0, #0
 8012ce6:	e029      	b.n	8012d3c <auth+0x194>
				        		"{\"status\":\"success\",\"message\":\"Token is valid\", \"user\": \"%s\"}\r\n", web_tokens[i].user);
 8012ce8:	22b8      	movs	r2, #184	@ 0xb8
 8012cea:	4b19      	ldr	r3, [pc, #100]	@ (8012d50 <auth+0x1a8>)
 8012cec:	fb02 3304 	mla	r3, r2, r4, r3
				if (set_cookie) mg_http_reply(c, 200, headers,
 8012cf0:	9300      	str	r3, [sp, #0]
 8012cf2:	4b18      	ldr	r3, [pc, #96]	@ (8012d54 <auth+0x1ac>)
 8012cf4:	4a18      	ldr	r2, [pc, #96]	@ (8012d58 <auth+0x1b0>)
 8012cf6:	21c8      	movs	r1, #200	@ 0xc8
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	f010 fcbb 	bl	8023674 <mg_http_reply>
 8012cfe:	e016      	b.n	8012d2e <auth+0x186>
		for (i=0;i<user_list_size; i++){
 8012d00:	3401      	adds	r4, #1
 8012d02:	2c09      	cmp	r4, #9
 8012d04:	dc17      	bgt.n	8012d36 <auth+0x18e>
			if((strcmp(web_tokens[i].token, pass) == 0 && web_tokens[i].user[0] != 0)){// && (web_tokens[i].expare > mg_now())
 8012d06:	23b8      	movs	r3, #184	@ 0xb8
 8012d08:	fb04 f303 	mul.w	r3, r4, r3
 8012d0c:	3380      	adds	r3, #128	@ 0x80
 8012d0e:	a902      	add	r1, sp, #8
 8012d10:	480f      	ldr	r0, [pc, #60]	@ (8012d50 <auth+0x1a8>)
 8012d12:	4418      	add	r0, r3
 8012d14:	f7fd fa64 	bl	80101e0 <strcmp>
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	d1f1      	bne.n	8012d00 <auth+0x158>
 8012d1c:	23b8      	movs	r3, #184	@ 0xb8
 8012d1e:	fb04 f303 	mul.w	r3, r4, r3
 8012d22:	4a0b      	ldr	r2, [pc, #44]	@ (8012d50 <auth+0x1a8>)
 8012d24:	5cd3      	ldrb	r3, [r2, r3]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d0ea      	beq.n	8012d00 <auth+0x158>
				if (set_cookie) mg_http_reply(c, 200, headers,
 8012d2a:	2e00      	cmp	r6, #0
 8012d2c:	d1dc      	bne.n	8012ce8 <auth+0x140>
				return true;
 8012d2e:	2001      	movs	r0, #1
 8012d30:	e004      	b.n	8012d3c <auth+0x194>
		for (i=0;i<user_list_size; i++){
 8012d32:	2400      	movs	r4, #0
 8012d34:	e7e5      	b.n	8012d02 <auth+0x15a>
	return false;
 8012d36:	2000      	movs	r0, #0
 8012d38:	e000      	b.n	8012d3c <auth+0x194>
 8012d3a:	2000      	movs	r0, #0
}
 8012d3c:	b065      	add	sp, #404	@ 0x194
 8012d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d42:	bf00      	nop
 8012d44:	200013e0 	.word	0x200013e0
 8012d48:	0a4cb800 	.word	0x0a4cb800
 8012d4c:	20001a58 	.word	0x20001a58
 8012d50:	20001328 	.word	0x20001328
 8012d54:	08035e98 	.word	0x08035e98
 8012d58:	08035b68 	.word	0x08035b68

08012d5c <handler_authanticate>:
static void handler_authanticate(struct mg_connection *c,struct mg_http_message *hm){
 8012d5c:	b510      	push	{r4, lr}
 8012d5e:	4604      	mov	r4, r0
	if ( auth(c, hm, 1) ){
 8012d60:	2201      	movs	r2, #1
 8012d62:	f7ff ff21 	bl	8012ba8 <auth>
 8012d66:	b100      	cbz	r0, 8012d6a <handler_authanticate+0xe>
}
 8012d68:	bd10      	pop	{r4, pc}
        mg_http_reply(c, 403, headers, //TODO delete for release,
 8012d6a:	4b04      	ldr	r3, [pc, #16]	@ (8012d7c <handler_authanticate+0x20>)
 8012d6c:	4a04      	ldr	r2, [pc, #16]	@ (8012d80 <handler_authanticate+0x24>)
 8012d6e:	f240 1193 	movw	r1, #403	@ 0x193
 8012d72:	4620      	mov	r0, r4
 8012d74:	f010 fc7e 	bl	8023674 <mg_http_reply>
}
 8012d78:	e7f6      	b.n	8012d68 <handler_authanticate+0xc>
 8012d7a:	bf00      	nop
 8012d7c:	08035ed8 	.word	0x08035ed8
 8012d80:	08035b68 	.word	0x08035b68

08012d84 <handle_ram_status_get>:
static void handle_ram_status_get(struct mg_connection *c){
 8012d84:	b510      	push	{r4, lr}
 8012d86:	b090      	sub	sp, #64	@ 0x40
 8012d88:	4604      	mov	r4, r0
	vPortGetHeapStats(&heap_status);
 8012d8a:	a809      	add	r0, sp, #36	@ 0x24
 8012d8c:	f007 fa64 	bl	801a258 <vPortGetHeapStats>
	logging(1, "Start execute API RAM status");
 8012d90:	490c      	ldr	r1, [pc, #48]	@ (8012dc4 <handle_ram_status_get+0x40>)
 8012d92:	2001      	movs	r0, #1
 8012d94:	f7ff f80c 	bl	8011db0 <logging>
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 8012d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d9a:	9306      	str	r3, [sp, #24]
 8012d9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d9e:	9305      	str	r3, [sp, #20]
 8012da0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012da2:	9304      	str	r3, [sp, #16]
 8012da4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012da6:	9303      	str	r3, [sp, #12]
 8012da8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012daa:	9302      	str	r3, [sp, #8]
 8012dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012dae:	9301      	str	r3, [sp, #4]
 8012db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	4b04      	ldr	r3, [pc, #16]	@ (8012dc8 <handle_ram_status_get+0x44>)
 8012db6:	4a05      	ldr	r2, [pc, #20]	@ (8012dcc <handle_ram_status_get+0x48>)
 8012db8:	21c8      	movs	r1, #200	@ 0xc8
 8012dba:	4620      	mov	r0, r4
 8012dbc:	f010 fc5a 	bl	8023674 <mg_http_reply>
}
 8012dc0:	b010      	add	sp, #64	@ 0x40
 8012dc2:	bd10      	pop	{r4, pc}
 8012dc4:	08035f08 	.word	0x08035f08
 8012dc8:	08035f28 	.word	0x08035f28
 8012dcc:	0803602c 	.word	0x0803602c

08012dd0 <handle_io_status_get>:
static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8012dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dd2:	b091      	sub	sp, #68	@ 0x44
 8012dd4:	4606      	mov	r6, r0
 8012dd6:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012dd8:	ad0c      	add	r5, sp, #48	@ 0x30
 8012dda:	494b      	ldr	r1, [pc, #300]	@ (8012f08 <handle_io_status_get+0x138>)
 8012ddc:	4628      	mov	r0, r5
 8012dde:	f010 fdd3 	bl	8023988 <mg_str_s>
 8012de2:	2300      	movs	r3, #0
 8012de4:	9300      	str	r3, [sp, #0]
 8012de6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012dee:	f010 ffed 	bl	8023dcc <mg_match>
 8012df2:	b328      	cbz	r0, 8012e40 <handle_io_status_get+0x70>
		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8012df4:	4c45      	ldr	r4, [pc, #276]	@ (8012f0c <handle_io_status_get+0x13c>)
 8012df6:	6823      	ldr	r3, [r4, #0]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	2101      	movs	r1, #1
 8012dfc:	a80a      	add	r0, sp, #40	@ 0x28
 8012dfe:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8012e00:	6823      	ldr	r3, [r4, #0]
 8012e02:	2200      	movs	r2, #0
 8012e04:	2102      	movs	r1, #2
 8012e06:	f10d 002b 	add.w	r0, sp, #43	@ 0x2b
 8012e0a:	4798      	blx	r3
						status.inputs[0], status.inputs[1], status.inputs[2],
 8012e0c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8012e10:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8012e14:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
						status.outputs[0], status.outputs[1], status.outputs[2]
 8012e18:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 8012e1c:	f89d 402c 	ldrb.w	r4, [sp, #44]	@ 0x2c
 8012e20:	f89d 502d 	ldrb.w	r5, [sp, #45]	@ 0x2d
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8012e24:	9505      	str	r5, [sp, #20]
 8012e26:	9404      	str	r4, [sp, #16]
 8012e28:	9003      	str	r0, [sp, #12]
 8012e2a:	9102      	str	r1, [sp, #8]
 8012e2c:	9201      	str	r2, [sp, #4]
 8012e2e:	9300      	str	r3, [sp, #0]
 8012e30:	4b37      	ldr	r3, [pc, #220]	@ (8012f10 <handle_io_status_get+0x140>)
 8012e32:	4a38      	ldr	r2, [pc, #224]	@ (8012f14 <handle_io_status_get+0x144>)
 8012e34:	21c8      	movs	r1, #200	@ 0xc8
 8012e36:	4630      	mov	r0, r6
 8012e38:	f010 fc1c 	bl	8023674 <mg_http_reply>
}
 8012e3c:	b011      	add	sp, #68	@ 0x44
 8012e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012e40:	ad0e      	add	r5, sp, #56	@ 0x38
 8012e42:	4935      	ldr	r1, [pc, #212]	@ (8012f18 <handle_io_status_get+0x148>)
 8012e44:	4628      	mov	r0, r5
 8012e46:	f010 fd9f 	bl	8023988 <mg_str_s>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	9300      	str	r3, [sp, #0]
 8012e4e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e56:	f010 ffb9 	bl	8023dcc <mg_match>
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	d04b      	beq.n	8012ef6 <handle_io_status_get+0x126>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012e5e:	ab08      	add	r3, sp, #32
 8012e60:	4a2e      	ldr	r2, [pc, #184]	@ (8012f1c <handle_io_status_get+0x14c>)
 8012e62:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8012e66:	c903      	ldmia	r1, {r0, r1}
 8012e68:	f00f fcc8 	bl	80227fc <mg_json_get_num>
 8012e6c:	2800      	cmp	r0, #0
 8012e6e:	d03a      	beq.n	8012ee6 <handle_io_status_get+0x116>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8012e70:	ab0a      	add	r3, sp, #40	@ 0x28
 8012e72:	4a2b      	ldr	r2, [pc, #172]	@ (8012f20 <handle_io_status_get+0x150>)
 8012e74:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8012e78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012e7c:	f00f fcbe 	bl	80227fc <mg_json_get_num>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8012e80:	2800      	cmp	r0, #0
 8012e82:	d030      	beq.n	8012ee6 <handle_io_status_get+0x116>
			relay_id = (uint8_t) tmp1;
 8012e84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012e88:	f7fd fea6 	bl	8010bd8 <__aeabi_d2uiz>
 8012e8c:	b2c4      	uxtb	r4, r0
			state = (uint8_t) tmp2;
 8012e8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8012e92:	f7fd fea1 	bl	8010bd8 <__aeabi_d2uiz>
 8012e96:	b2c5      	uxtb	r5, r0
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8012e98:	1e63      	subs	r3, r4, #1
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	2b02      	cmp	r3, #2
 8012e9e:	d801      	bhi.n	8012ea4 <handle_io_status_get+0xd4>
 8012ea0:	2d01      	cmp	r5, #1
 8012ea2:	d907      	bls.n	8012eb4 <handle_io_status_get+0xe4>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8012ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8012f24 <handle_io_status_get+0x154>)
 8012ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8012f14 <handle_io_status_get+0x144>)
 8012ea8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012eac:	4630      	mov	r0, r6
 8012eae:	f010 fbe1 	bl	8023674 <mg_http_reply>
 8012eb2:	e7c3      	b.n	8012e3c <handle_io_status_get+0x6c>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8012eb4:	4f15      	ldr	r7, [pc, #84]	@ (8012f0c <handle_io_status_get+0x13c>)
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	2102      	movs	r1, #2
 8012ebc:	a807      	add	r0, sp, #28
 8012ebe:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8012ec0:	f104 033f 	add.w	r3, r4, #63	@ 0x3f
 8012ec4:	446b      	add	r3, sp
 8012ec6:	f803 5c24 	strb.w	r5, [r3, #-36]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	2201      	movs	r2, #1
 8012ece:	2102      	movs	r1, #2
 8012ed0:	a807      	add	r0, sp, #28
 8012ed2:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8012ed4:	9501      	str	r5, [sp, #4]
 8012ed6:	9400      	str	r4, [sp, #0]
 8012ed8:	4b13      	ldr	r3, [pc, #76]	@ (8012f28 <handle_io_status_get+0x158>)
 8012eda:	4a0e      	ldr	r2, [pc, #56]	@ (8012f14 <handle_io_status_get+0x144>)
 8012edc:	21c8      	movs	r1, #200	@ 0xc8
 8012ede:	4630      	mov	r0, r6
 8012ee0:	f010 fbc8 	bl	8023674 <mg_http_reply>
 8012ee4:	e7aa      	b.n	8012e3c <handle_io_status_get+0x6c>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8012ee6:	4b11      	ldr	r3, [pc, #68]	@ (8012f2c <handle_io_status_get+0x15c>)
 8012ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8012f14 <handle_io_status_get+0x144>)
 8012eea:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012eee:	4630      	mov	r0, r6
 8012ef0:	f010 fbc0 	bl	8023674 <mg_http_reply>
 8012ef4:	e7a2      	b.n	8012e3c <handle_io_status_get+0x6c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8012ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8012f30 <handle_io_status_get+0x160>)
 8012ef8:	4a06      	ldr	r2, [pc, #24]	@ (8012f14 <handle_io_status_get+0x144>)
 8012efa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8012efe:	4630      	mov	r0, r6
 8012f00:	f010 fbb8 	bl	8023674 <mg_http_reply>
}
 8012f04:	e79a      	b.n	8012e3c <handle_io_status_get+0x6c>
 8012f06:	bf00      	nop
 8012f08:	08036070 	.word	0x08036070
 8012f0c:	200020f4 	.word	0x200020f4
 8012f10:	08036074 	.word	0x08036074
 8012f14:	08035b68 	.word	0x08035b68
 8012f18:	08035b24 	.word	0x08035b24
 8012f1c:	080360a8 	.word	0x080360a8
 8012f20:	080360b4 	.word	0x080360b4
 8012f24:	080360f4 	.word	0x080360f4
 8012f28:	080360bc 	.word	0x080360bc
 8012f2c:	08036130 	.word	0x08036130
 8012f30:	0803616c 	.word	0x0803616c

08012f34 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8012f34:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8012f36:	fb01 f400 	mul.w	r4, r1, r0
 8012f3a:	4620      	mov	r0, r4
 8012f3c:	f007 f8cc 	bl	801a0d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8012f40:	4605      	mov	r5, r0
 8012f42:	b118      	cbz	r0, 8012f4c <mg_calloc+0x18>
 8012f44:	4622      	mov	r2, r4
 8012f46:	2100      	movs	r1, #0
 8012f48:	f019 f852 	bl	802bff0 <memset>
}
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	bd38      	pop	{r3, r4, r5, pc}

08012f50 <handle_mqtt_conf>:
static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8012f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f52:	b08b      	sub	sp, #44	@ 0x2c
 8012f54:	4606      	mov	r6, r0
 8012f56:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8012f58:	ad06      	add	r5, sp, #24
 8012f5a:	4984      	ldr	r1, [pc, #528]	@ (801316c <handle_mqtt_conf+0x21c>)
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	f010 fd13 	bl	8023988 <mg_str_s>
 8012f62:	2300      	movs	r3, #0
 8012f64:	9300      	str	r3, [sp, #0]
 8012f66:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012f6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012f6e:	f010 ff2d 	bl	8023dcc <mg_match>
 8012f72:	2800      	cmp	r0, #0
 8012f74:	d03b      	beq.n	8012fee <handle_mqtt_conf+0x9e>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8012f76:	21c6      	movs	r1, #198	@ 0xc6
 8012f78:	2001      	movs	r0, #1
 8012f7a:	f7ff ffdb 	bl	8012f34 <mg_calloc>
		if (mqtt_config == NULL) {
 8012f7e:	4605      	mov	r5, r0
 8012f80:	b340      	cbz	r0, 8012fd4 <handle_mqtt_conf+0x84>
		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8012f82:	4b7b      	ldr	r3, [pc, #492]	@ (8013170 <handle_mqtt_conf+0x220>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2200      	movs	r2, #0
 8012f88:	4611      	mov	r1, r2
 8012f8a:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8012f8c:	f105 07a5 	add.w	r7, r5, #165	@ 0xa5
 8012f90:	4638      	mov	r0, r7
 8012f92:	f7fd f985 	bl	80102a0 <strlen>
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8012f96:	b2c4      	uxtb	r4, r0
 8012f98:	4622      	mov	r2, r4
 8012f9a:	212a      	movs	r1, #42	@ 0x2a
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	f019 f827 	bl	802bff0 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8012fa2:	442c      	add	r4, r5
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012faa:	786b      	ldrb	r3, [r5, #1]
 8012fac:	b1eb      	cbz	r3, 8012fea <handle_mqtt_conf+0x9a>
 8012fae:	4b71      	ldr	r3, [pc, #452]	@ (8013174 <handle_mqtt_conf+0x224>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8012fb0:	1caa      	adds	r2, r5, #2
 8012fb2:	f105 0184 	add.w	r1, r5, #132	@ 0x84
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012fb6:	9703      	str	r7, [sp, #12]
 8012fb8:	9102      	str	r1, [sp, #8]
 8012fba:	9201      	str	r2, [sp, #4]
 8012fbc:	9300      	str	r3, [sp, #0]
 8012fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8013178 <handle_mqtt_conf+0x228>)
 8012fc0:	4a6e      	ldr	r2, [pc, #440]	@ (801317c <handle_mqtt_conf+0x22c>)
 8012fc2:	21c8      	movs	r1, #200	@ 0xc8
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	f010 fb55 	bl	8023674 <mg_http_reply>
		free(mqtt_config);
 8012fca:	4628      	mov	r0, r5
 8012fcc:	f007 f906 	bl	801a1dc <vPortFree>
}
 8012fd0:	b00b      	add	sp, #44	@ 0x2c
 8012fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8012fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8013180 <handle_mqtt_conf+0x230>)
 8012fd6:	4a69      	ldr	r2, [pc, #420]	@ (801317c <handle_mqtt_conf+0x22c>)
 8012fd8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8012fdc:	4630      	mov	r0, r6
 8012fde:	f010 fb49 	bl	8023674 <mg_http_reply>
			free(mqtt_config);
 8012fe2:	4628      	mov	r0, r5
 8012fe4:	f007 f8fa 	bl	801a1dc <vPortFree>
			return;
 8012fe8:	e7f2      	b.n	8012fd0 <handle_mqtt_conf+0x80>
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8012fea:	4b66      	ldr	r3, [pc, #408]	@ (8013184 <handle_mqtt_conf+0x234>)
 8012fec:	e7e0      	b.n	8012fb0 <handle_mqtt_conf+0x60>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8012fee:	ad08      	add	r5, sp, #32
 8012ff0:	4965      	ldr	r1, [pc, #404]	@ (8013188 <handle_mqtt_conf+0x238>)
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f010 fcc8 	bl	8023988 <mg_str_s>
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	9300      	str	r3, [sp, #0]
 8012ffc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013000:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013004:	f010 fee2 	bl	8023dcc <mg_match>
 8013008:	2800      	cmp	r0, #0
 801300a:	f000 80a7 	beq.w	801315c <handle_mqtt_conf+0x20c>
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 801300e:	21c6      	movs	r1, #198	@ 0xc6
 8013010:	2001      	movs	r0, #1
 8013012:	f7ff ff8f 	bl	8012f34 <mg_calloc>
		if (mqtt_config == NULL) {
 8013016:	4605      	mov	r5, r0
 8013018:	b310      	cbz	r0, 8013060 <handle_mqtt_conf+0x110>
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 801301a:	ab05      	add	r3, sp, #20
 801301c:	4a5b      	ldr	r2, [pc, #364]	@ (801318c <handle_mqtt_conf+0x23c>)
 801301e:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 8013022:	c903      	ldmia	r1, {r0, r1}
 8013024:	f00f f980 	bl	8022328 <mg_json_get>
 8013028:	2800      	cmp	r0, #0
 801302a:	db24      	blt.n	8013076 <handle_mqtt_conf+0x126>
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 801302c:	1c6b      	adds	r3, r5, #1
 801302e:	4a58      	ldr	r2, [pc, #352]	@ (8013190 <handle_mqtt_conf+0x240>)
 8013030:	f504 7700 	add.w	r7, r4, #512	@ 0x200
 8013034:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013038:	f00f fc06 	bl	8022848 <mg_json_get_bool>
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 801303c:	4a55      	ldr	r2, [pc, #340]	@ (8013194 <handle_mqtt_conf+0x244>)
 801303e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013042:	f011 fd91 	bl	8024b68 <mg_json_get_str>
 8013046:	4607      	mov	r7, r0
 8013048:	b328      	cbz	r0, 8013096 <handle_mqtt_conf+0x146>
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 801304a:	f016 fa3d 	bl	80294c8 <is_valid_mqtt_url>
 801304e:	4603      	mov	r3, r0
 8013050:	b1e0      	cbz	r0, 801308c <handle_mqtt_conf+0x13c>
					switch (err) {
 8013052:	3304      	adds	r3, #4
 8013054:	2b03      	cmp	r3, #3
 8013056:	d879      	bhi.n	801314c <handle_mqtt_conf+0x1fc>
 8013058:	e8df f003 	tbb	[pc, r3]
 801305c:	52606870 	.word	0x52606870
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8013060:	4b47      	ldr	r3, [pc, #284]	@ (8013180 <handle_mqtt_conf+0x230>)
 8013062:	4a46      	ldr	r2, [pc, #280]	@ (801317c <handle_mqtt_conf+0x22c>)
 8013064:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013068:	4630      	mov	r0, r6
 801306a:	f010 fb03 	bl	8023674 <mg_http_reply>
			free(mqtt_config);
 801306e:	4628      	mov	r0, r5
 8013070:	f007 f8b4 	bl	801a1dc <vPortFree>
			return;
 8013074:	e7ac      	b.n	8012fd0 <handle_mqtt_conf+0x80>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013076:	4b48      	ldr	r3, [pc, #288]	@ (8013198 <handle_mqtt_conf+0x248>)
 8013078:	4a40      	ldr	r2, [pc, #256]	@ (801317c <handle_mqtt_conf+0x22c>)
 801307a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801307e:	4630      	mov	r0, r6
 8013080:	f010 faf8 	bl	8023674 <mg_http_reply>
		free(mqtt_config);
 8013084:	4628      	mov	r0, r5
 8013086:	f007 f8a9 	bl	801a1dc <vPortFree>
 801308a:	e7a1      	b.n	8012fd0 <handle_mqtt_conf+0x80>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 801308c:	227f      	movs	r2, #127	@ 0x7f
 801308e:	4639      	mov	r1, r7
 8013090:	1ca8      	adds	r0, r5, #2
 8013092:	f018 fff4 	bl	802c07e <strncpy>
			free(broker);
 8013096:	4638      	mov	r0, r7
 8013098:	f007 f8a0 	bl	801a1dc <vPortFree>
			if((username = mg_json_get_str(hm->body, "$.username"))){
 801309c:	4a3f      	ldr	r2, [pc, #252]	@ (801319c <handle_mqtt_conf+0x24c>)
 801309e:	f504 7300 	add.w	r3, r4, #512	@ 0x200
 80130a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80130a6:	f011 fd5f 	bl	8024b68 <mg_json_get_str>
 80130aa:	4607      	mov	r7, r0
 80130ac:	b128      	cbz	r0, 80130ba <handle_mqtt_conf+0x16a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 80130ae:	2220      	movs	r2, #32
 80130b0:	4601      	mov	r1, r0
 80130b2:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80130b6:	f018 ffe2 	bl	802c07e <strncpy>
			free(username);
 80130ba:	4638      	mov	r0, r7
 80130bc:	f007 f88e 	bl	801a1dc <vPortFree>
			if((password = mg_json_get_str(hm->body, "$.password"))){
 80130c0:	4a37      	ldr	r2, [pc, #220]	@ (80131a0 <handle_mqtt_conf+0x250>)
 80130c2:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 80130c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80130ca:	f011 fd4d 	bl	8024b68 <mg_json_get_str>
 80130ce:	4604      	mov	r4, r0
 80130d0:	b128      	cbz	r0, 80130de <handle_mqtt_conf+0x18e>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 80130d2:	2220      	movs	r2, #32
 80130d4:	4601      	mov	r1, r0
 80130d6:	f105 00a5 	add.w	r0, r5, #165	@ 0xa5
 80130da:	f018 ffd0 	bl	802c07e <strncpy>
			free(password);
 80130de:	4620      	mov	r0, r4
 80130e0:	f007 f87c 	bl	801a1dc <vPortFree>
			mqtt_config->save = 1;
 80130e4:	2201      	movs	r2, #1
 80130e6:	702a      	strb	r2, [r5, #0]
			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 80130e8:	4b21      	ldr	r3, [pc, #132]	@ (8013170 <handle_mqtt_conf+0x220>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	2100      	movs	r1, #0
 80130ee:	4628      	mov	r0, r5
 80130f0:	4798      	blx	r3
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80130f2:	4b2c      	ldr	r3, [pc, #176]	@ (80131a4 <handle_mqtt_conf+0x254>)
 80130f4:	4a21      	ldr	r2, [pc, #132]	@ (801317c <handle_mqtt_conf+0x22c>)
 80130f6:	21c8      	movs	r1, #200	@ 0xc8
 80130f8:	4630      	mov	r0, r6
 80130fa:	f010 fabb 	bl	8023674 <mg_http_reply>
 80130fe:	e7c1      	b.n	8013084 <handle_mqtt_conf+0x134>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8013100:	4b29      	ldr	r3, [pc, #164]	@ (80131a8 <handle_mqtt_conf+0x258>)
 8013102:	4a1e      	ldr	r2, [pc, #120]	@ (801317c <handle_mqtt_conf+0x22c>)
 8013104:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013108:	4630      	mov	r0, r6
 801310a:	f010 fab3 	bl	8023674 <mg_http_reply>
					free(broker);
 801310e:	4638      	mov	r0, r7
 8013110:	f007 f864 	bl	801a1dc <vPortFree>
					free(mqtt_config);
 8013114:	4628      	mov	r0, r5
 8013116:	f007 f861 	bl	801a1dc <vPortFree>
					return;
 801311a:	e759      	b.n	8012fd0 <handle_mqtt_conf+0x80>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 801311c:	4b23      	ldr	r3, [pc, #140]	@ (80131ac <handle_mqtt_conf+0x25c>)
 801311e:	4a17      	ldr	r2, [pc, #92]	@ (801317c <handle_mqtt_conf+0x22c>)
 8013120:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013124:	4630      	mov	r0, r6
 8013126:	f010 faa5 	bl	8023674 <mg_http_reply>
							break;
 801312a:	e7f0      	b.n	801310e <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 801312c:	4b20      	ldr	r3, [pc, #128]	@ (80131b0 <handle_mqtt_conf+0x260>)
 801312e:	4a13      	ldr	r2, [pc, #76]	@ (801317c <handle_mqtt_conf+0x22c>)
 8013130:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013134:	4630      	mov	r0, r6
 8013136:	f010 fa9d 	bl	8023674 <mg_http_reply>
							break;
 801313a:	e7e8      	b.n	801310e <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 801313c:	4b1d      	ldr	r3, [pc, #116]	@ (80131b4 <handle_mqtt_conf+0x264>)
 801313e:	4a0f      	ldr	r2, [pc, #60]	@ (801317c <handle_mqtt_conf+0x22c>)
 8013140:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013144:	4630      	mov	r0, r6
 8013146:	f010 fa95 	bl	8023674 <mg_http_reply>
							break;
 801314a:	e7e0      	b.n	801310e <handle_mqtt_conf+0x1be>
							mg_http_reply(c, 400, headers, //TODO delete for release,
 801314c:	4b1a      	ldr	r3, [pc, #104]	@ (80131b8 <handle_mqtt_conf+0x268>)
 801314e:	4a0b      	ldr	r2, [pc, #44]	@ (801317c <handle_mqtt_conf+0x22c>)
 8013150:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013154:	4630      	mov	r0, r6
 8013156:	f010 fa8d 	bl	8023674 <mg_http_reply>
							break;
 801315a:	e7d8      	b.n	801310e <handle_mqtt_conf+0x1be>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 801315c:	4b17      	ldr	r3, [pc, #92]	@ (80131bc <handle_mqtt_conf+0x26c>)
 801315e:	4a07      	ldr	r2, [pc, #28]	@ (801317c <handle_mqtt_conf+0x22c>)
 8013160:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013164:	4630      	mov	r0, r6
 8013166:	f010 fa85 	bl	8023674 <mg_http_reply>
 801316a:	e731      	b.n	8012fd0 <handle_mqtt_conf+0x80>
 801316c:	08036070 	.word	0x08036070
 8013170:	200020f4 	.word	0x200020f4
 8013174:	080361c0 	.word	0x080361c0
 8013178:	0803620c 	.word	0x0803620c
 801317c:	08035b68 	.word	0x08035b68
 8013180:	080361d0 	.word	0x080361d0
 8013184:	080361c8 	.word	0x080361c8
 8013188:	08035b24 	.word	0x08035b24
 801318c:	08036254 	.word	0x08036254
 8013190:	08036288 	.word	0x08036288
 8013194:	08036294 	.word	0x08036294
 8013198:	08036258 	.word	0x08036258
 801319c:	080363dc 	.word	0x080363dc
 80131a0:	080363e8 	.word	0x080363e8
 80131a4:	080363f4 	.word	0x080363f4
 80131a8:	080362a0 	.word	0x080362a0
 80131ac:	080362e4 	.word	0x080362e4
 80131b0:	08036330 	.word	0x08036330
 80131b4:	08036370 	.word	0x08036370
 80131b8:	080363a8 	.word	0x080363a8
 80131bc:	0803616c 	.word	0x0803616c

080131c0 <handle_dev_status>:
static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 80131c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c4:	b0c7      	sub	sp, #284	@ 0x11c
 80131c6:	4681      	mov	r9, r0
 80131c8:	468a      	mov	sl, r1
	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 80131ca:	2272      	movs	r2, #114	@ 0x72
 80131cc:	498e      	ldr	r1, [pc, #568]	@ (8013408 <handle_dev_status+0x248>)
 80131ce:	a827      	add	r0, sp, #156	@ 0x9c
 80131d0:	f01a f94a 	bl	802d468 <memcpy>
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 80131d4:	2101      	movs	r1, #1
 80131d6:	201e      	movs	r0, #30
 80131d8:	f7ff feac 	bl	8012f34 <mg_calloc>
 80131dc:	4606      	mov	r6, r0
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 80131de:	2101      	movs	r1, #1
 80131e0:	202e      	movs	r0, #46	@ 0x2e
 80131e2:	f7ff fea7 	bl	8012f34 <mg_calloc>
 80131e6:	4607      	mov	r7, r0
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 80131e8:	2101      	movs	r1, #1
 80131ea:	202e      	movs	r0, #46	@ 0x2e
 80131ec:	f7ff fea2 	bl	8012f34 <mg_calloc>
 80131f0:	4680      	mov	r8, r0
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80131f2:	2101      	movs	r1, #1
 80131f4:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80131f8:	f7ff fe9c 	bl	8012f34 <mg_calloc>
 80131fc:	4604      	mov	r4, r0
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 80131fe:	2101      	movs	r1, #1
 8013200:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8013204:	f7ff fe96 	bl	8012f34 <mg_calloc>
 8013208:	4605      	mov	r5, r0
	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 801320a:	2e00      	cmp	r6, #0
 801320c:	f000 80e3 	beq.w	80133d6 <handle_dev_status+0x216>
 8013210:	2f00      	cmp	r7, #0
 8013212:	f000 80e0 	beq.w	80133d6 <handle_dev_status+0x216>
 8013216:	f1b8 0f00 	cmp.w	r8, #0
 801321a:	f000 80dc 	beq.w	80133d6 <handle_dev_status+0x216>
 801321e:	2c00      	cmp	r4, #0
 8013220:	f000 80d9 	beq.w	80133d6 <handle_dev_status+0x216>
 8013224:	2800      	cmp	r0, #0
 8013226:	f000 80d6 	beq.w	80133d6 <handle_dev_status+0x216>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 801322a:	f50d 7b88 	add.w	fp, sp, #272	@ 0x110
 801322e:	4977      	ldr	r1, [pc, #476]	@ (801340c <handle_dev_status+0x24c>)
 8013230:	4658      	mov	r0, fp
 8013232:	f010 fba9 	bl	8023988 <mg_str_s>
 8013236:	2300      	movs	r3, #0
 8013238:	9300      	str	r3, [sp, #0]
 801323a:	e89b 000c 	ldmia.w	fp, {r2, r3}
 801323e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8013242:	f010 fdc3 	bl	8023dcc <mg_match>
 8013246:	2800      	cmp	r0, #0
 8013248:	f000 80bd 	beq.w	80133c6 <handle_dev_status+0x206>
			mqtt_connection =  get_mqtt_connection();
 801324c:	f001 fad8 	bl	8014800 <get_mqtt_connection>
			if(!mqtt_connection){
 8013250:	4682      	mov	sl, r0
 8013252:	b358      	cbz	r0, 80132ac <handle_dev_status+0xec>
				if (mqtt_connection->is_connecting){
 8013254:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8013258:	f013 0f20 	tst.w	r3, #32
 801325c:	d12c      	bne.n	80132b8 <handle_dev_status+0xf8>
				}else if(mqtt_connection->is_closing){
 801325e:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8013262:	f013 0f20 	tst.w	r3, #32
 8013266:	d02d      	beq.n	80132c4 <handle_dev_status+0x104>
					strncpy(mqtt_status_str, "closing",str_part_len);
 8013268:	221e      	movs	r2, #30
 801326a:	4969      	ldr	r1, [pc, #420]	@ (8013410 <handle_dev_status+0x250>)
 801326c:	4630      	mov	r0, r6
 801326e:	f018 ff06 	bl	802c07e <strncpy>
				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 8013272:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 8013438 <handle_dev_status+0x278>
 8013276:	f10a 0308 	add.w	r3, sl, #8
 801327a:	9300      	str	r3, [sp, #0]
 801327c:	465b      	mov	r3, fp
 801327e:	4a65      	ldr	r2, [pc, #404]	@ (8013414 <handle_dev_status+0x254>)
 8013280:	212e      	movs	r1, #46	@ 0x2e
 8013282:	4640      	mov	r0, r8
 8013284:	f00f fcf6 	bl	8022c74 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 8013288:	f10a 031c 	add.w	r3, sl, #28
 801328c:	9300      	str	r3, [sp, #0]
 801328e:	465b      	mov	r3, fp
 8013290:	4a60      	ldr	r2, [pc, #384]	@ (8013414 <handle_dev_status+0x254>)
 8013292:	212e      	movs	r1, #46	@ 0x2e
 8013294:	4638      	mov	r0, r7
 8013296:	f00f fced 	bl	8022c74 <mg_snprintf>
			strcat(pub_topics_str, "\"");
 801329a:	4620      	mov	r0, r4
 801329c:	f7fd f800 	bl	80102a0 <strlen>
 80132a0:	4b5d      	ldr	r3, [pc, #372]	@ (8013418 <handle_dev_status+0x258>)
 80132a2:	881b      	ldrh	r3, [r3, #0]
 80132a4:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80132a6:	f04f 0a01 	mov.w	sl, #1
 80132aa:	e028      	b.n	80132fe <handle_dev_status+0x13e>
				strncpy(mqtt_status_str, "closed", str_part_len);
 80132ac:	221e      	movs	r2, #30
 80132ae:	495b      	ldr	r1, [pc, #364]	@ (801341c <handle_dev_status+0x25c>)
 80132b0:	4630      	mov	r0, r6
 80132b2:	f018 fee4 	bl	802c07e <strncpy>
 80132b6:	e7f0      	b.n	801329a <handle_dev_status+0xda>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 80132b8:	221e      	movs	r2, #30
 80132ba:	4959      	ldr	r1, [pc, #356]	@ (8013420 <handle_dev_status+0x260>)
 80132bc:	4630      	mov	r0, r6
 80132be:	f018 fede 	bl	802c07e <strncpy>
 80132c2:	e7d6      	b.n	8013272 <handle_dev_status+0xb2>
					strncpy(mqtt_status_str, "established", str_part_len);
 80132c4:	221e      	movs	r2, #30
 80132c6:	4957      	ldr	r1, [pc, #348]	@ (8013424 <handle_dev_status+0x264>)
 80132c8:	4630      	mov	r0, r6
 80132ca:	f018 fed8 	bl	802c07e <strncpy>
 80132ce:	e7d0      	b.n	8013272 <handle_dev_status+0xb2>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 80132d0:	fa5f f38a 	uxtb.w	r3, sl
 80132d4:	2201      	movs	r2, #1
 80132d6:	2180      	movs	r1, #128	@ 0x80
 80132d8:	a807      	add	r0, sp, #28
 80132da:	f001 fe81 	bl	8014fe0 <generate_status_topik>
				strcat(pub_topics_str, topic);
 80132de:	a907      	add	r1, sp, #28
 80132e0:	4620      	mov	r0, r4
 80132e2:	f018 fe8d 	bl	802c000 <strcat>
				strcat(pub_topics_str, "\", \"");
 80132e6:	4620      	mov	r0, r4
 80132e8:	f7fc ffda 	bl	80102a0 <strlen>
 80132ec:	4603      	mov	r3, r0
 80132ee:	1821      	adds	r1, r4, r0
 80132f0:	4a4d      	ldr	r2, [pc, #308]	@ (8013428 <handle_dev_status+0x268>)
 80132f2:	6810      	ldr	r0, [r2, #0]
 80132f4:	50e0      	str	r0, [r4, r3]
 80132f6:	7913      	ldrb	r3, [r2, #4]
 80132f8:	710b      	strb	r3, [r1, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 80132fa:	f10a 0a01 	add.w	sl, sl, #1
 80132fe:	f1ba 0f03 	cmp.w	sl, #3
 8013302:	dde5      	ble.n	80132d0 <handle_dev_status+0x110>
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013304:	f04f 0a01 	mov.w	sl, #1
 8013308:	e007      	b.n	801331a <handle_dev_status+0x15a>
					strcat(pub_topics_str, "\"");
 801330a:	4620      	mov	r0, r4
 801330c:	f7fc ffc8 	bl	80102a0 <strlen>
 8013310:	4b41      	ldr	r3, [pc, #260]	@ (8013418 <handle_dev_status+0x258>)
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	5223      	strh	r3, [r4, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013316:	f10a 0a01 	add.w	sl, sl, #1
 801331a:	f1ba 0f03 	cmp.w	sl, #3
 801331e:	dc18      	bgt.n	8013352 <handle_dev_status+0x192>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8013320:	fa5f f38a 	uxtb.w	r3, sl
 8013324:	2202      	movs	r2, #2
 8013326:	2180      	movs	r1, #128	@ 0x80
 8013328:	a807      	add	r0, sp, #28
 801332a:	f001 fe59 	bl	8014fe0 <generate_status_topik>
				strcat(pub_topics_str, topic);
 801332e:	a907      	add	r1, sp, #28
 8013330:	4620      	mov	r0, r4
 8013332:	f018 fe65 	bl	802c000 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013336:	f1ba 0f02 	cmp.w	sl, #2
 801333a:	dce6      	bgt.n	801330a <handle_dev_status+0x14a>
					strcat(pub_topics_str, "\", \"");
 801333c:	4620      	mov	r0, r4
 801333e:	f7fc ffaf 	bl	80102a0 <strlen>
 8013342:	4603      	mov	r3, r0
 8013344:	1821      	adds	r1, r4, r0
 8013346:	4a38      	ldr	r2, [pc, #224]	@ (8013428 <handle_dev_status+0x268>)
 8013348:	6810      	ldr	r0, [r2, #0]
 801334a:	50e0      	str	r0, [r4, r3]
 801334c:	7913      	ldrb	r3, [r2, #4]
 801334e:	710b      	strb	r3, [r1, #4]
 8013350:	e7e1      	b.n	8013316 <handle_dev_status+0x156>
			strcat(subscr_topics_str, "\"");
 8013352:	4628      	mov	r0, r5
 8013354:	f7fc ffa4 	bl	80102a0 <strlen>
 8013358:	4b2f      	ldr	r3, [pc, #188]	@ (8013418 <handle_dev_status+0x258>)
 801335a:	881b      	ldrh	r3, [r3, #0]
 801335c:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 801335e:	f04f 0a01 	mov.w	sl, #1
 8013362:	e007      	b.n	8013374 <handle_dev_status+0x1b4>
					strcat(subscr_topics_str, "\"");
 8013364:	4628      	mov	r0, r5
 8013366:	f7fc ff9b 	bl	80102a0 <strlen>
 801336a:	4b2b      	ldr	r3, [pc, #172]	@ (8013418 <handle_dev_status+0x258>)
 801336c:	881b      	ldrh	r3, [r3, #0]
 801336e:	522b      	strh	r3, [r5, r0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8013370:	f10a 0a01 	add.w	sl, sl, #1
 8013374:	f1ba 0f03 	cmp.w	sl, #3
 8013378:	dc18      	bgt.n	80133ac <handle_dev_status+0x1ec>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 801337a:	fa5f f38a 	uxtb.w	r3, sl
 801337e:	2202      	movs	r2, #2
 8013380:	2180      	movs	r1, #128	@ 0x80
 8013382:	a807      	add	r0, sp, #28
 8013384:	f001 fe14 	bl	8014fb0 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8013388:	a907      	add	r1, sp, #28
 801338a:	4628      	mov	r0, r5
 801338c:	f018 fe38 	bl	802c000 <strcat>
				if (i < OUTPUTS_COUNT) {
 8013390:	f1ba 0f02 	cmp.w	sl, #2
 8013394:	dce6      	bgt.n	8013364 <handle_dev_status+0x1a4>
					strcat(subscr_topics_str, "\", \"");
 8013396:	4628      	mov	r0, r5
 8013398:	f7fc ff82 	bl	80102a0 <strlen>
 801339c:	4603      	mov	r3, r0
 801339e:	1829      	adds	r1, r5, r0
 80133a0:	4a21      	ldr	r2, [pc, #132]	@ (8013428 <handle_dev_status+0x268>)
 80133a2:	6810      	ldr	r0, [r2, #0]
 80133a4:	50e8      	str	r0, [r5, r3]
 80133a6:	7913      	ldrb	r3, [r2, #4]
 80133a8:	710b      	strb	r3, [r1, #4]
 80133aa:	e7e1      	b.n	8013370 <handle_dev_status+0x1b0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80133ac:	9504      	str	r5, [sp, #16]
 80133ae:	9403      	str	r4, [sp, #12]
 80133b0:	9702      	str	r7, [sp, #8]
 80133b2:	f8cd 8004 	str.w	r8, [sp, #4]
 80133b6:	9600      	str	r6, [sp, #0]
 80133b8:	ab27      	add	r3, sp, #156	@ 0x9c
 80133ba:	4a1c      	ldr	r2, [pc, #112]	@ (801342c <handle_dev_status+0x26c>)
 80133bc:	21c8      	movs	r1, #200	@ 0xc8
 80133be:	4648      	mov	r0, r9
 80133c0:	f010 f958 	bl	8023674 <mg_http_reply>
 80133c4:	e00e      	b.n	80133e4 <handle_dev_status+0x224>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80133c6:	4b1a      	ldr	r3, [pc, #104]	@ (8013430 <handle_dev_status+0x270>)
 80133c8:	4a18      	ldr	r2, [pc, #96]	@ (801342c <handle_dev_status+0x26c>)
 80133ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133ce:	4648      	mov	r0, r9
 80133d0:	f010 f950 	bl	8023674 <mg_http_reply>
 80133d4:	e006      	b.n	80133e4 <handle_dev_status+0x224>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80133d6:	4b17      	ldr	r3, [pc, #92]	@ (8013434 <handle_dev_status+0x274>)
 80133d8:	4a14      	ldr	r2, [pc, #80]	@ (801342c <handle_dev_status+0x26c>)
 80133da:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80133de:	4648      	mov	r0, r9
 80133e0:	f010 f948 	bl	8023674 <mg_http_reply>
	free(mqtt_status_str);
 80133e4:	4630      	mov	r0, r6
 80133e6:	f006 fef9 	bl	801a1dc <vPortFree>
	free(mqtt_server_addr);
 80133ea:	4638      	mov	r0, r7
 80133ec:	f006 fef6 	bl	801a1dc <vPortFree>
	free(mqtt_local_addr);
 80133f0:	4640      	mov	r0, r8
 80133f2:	f006 fef3 	bl	801a1dc <vPortFree>
	free(pub_topics_str);
 80133f6:	4620      	mov	r0, r4
 80133f8:	f006 fef0 	bl	801a1dc <vPortFree>
	free(subscr_topics_str);
 80133fc:	4628      	mov	r0, r5
 80133fe:	f006 feed 	bl	801a1dc <vPortFree>
}
 8013402:	b047      	add	sp, #284	@ 0x11c
 8013404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013408:	0803649c 	.word	0x0803649c
 801340c:	08036070 	.word	0x08036070
 8013410:	0803643c 	.word	0x0803643c
 8013414:	08036450 	.word	0x08036450
 8013418:	08036454 	.word	0x08036454
 801341c:	0803a064 	.word	0x0803a064
 8013420:	08036430 	.word	0x08036430
 8013424:	08036444 	.word	0x08036444
 8013428:	08036458 	.word	0x08036458
 801342c:	08035b68 	.word	0x08035b68
 8013430:	0803616c 	.word	0x0803616c
 8013434:	08036460 	.word	0x08036460
 8013438:	08025725 	.word	0x08025725

0801343c <handle_fs_get_log>:
  }
}

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 801343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801343e:	b08d      	sub	sp, #52	@ 0x34
 8013440:	4607      	mov	r7, r0
 8013442:	460c      	mov	r4, r1
 8013444:	4615      	mov	r5, r2

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013446:	ae08      	add	r6, sp, #32
 8013448:	4923      	ldr	r1, [pc, #140]	@ (80134d8 <handle_fs_get_log+0x9c>)
 801344a:	4630      	mov	r0, r6
 801344c:	f010 fa9c 	bl	8023988 <mg_str_s>
 8013450:	2300      	movs	r3, #0
 8013452:	9300      	str	r3, [sp, #0]
 8013454:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013458:	e894 0003 	ldmia.w	r4, {r0, r1}
 801345c:	f010 fcb6 	bl	8023dcc <mg_match>
 8013460:	b318      	cbz	r0, 80134aa <handle_fs_get_log+0x6e>

		struct mg_http_serve_opts opts = {
 8013462:	2300      	movs	r3, #0
 8013464:	9302      	str	r3, [sp, #8]
 8013466:	9303      	str	r3, [sp, #12]
 8013468:	9304      	str	r3, [sp, #16]
 801346a:	9305      	str	r3, [sp, #20]
 801346c:	9306      	str	r3, [sp, #24]
 801346e:	9307      	str	r3, [sp, #28]
 8013470:	4b1a      	ldr	r3, [pc, #104]	@ (80134dc <handle_fs_get_log+0xa0>)
 8013472:	9302      	str	r3, [sp, #8]
 8013474:	4b1a      	ldr	r3, [pc, #104]	@ (80134e0 <handle_fs_get_log+0xa4>)
 8013476:	9307      	str	r3, [sp, #28]
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 8013478:	b145      	cbz	r5, 801348c <handle_fs_get_log+0x50>
 801347a:	2d01      	cmp	r5, #1
 801347c:	d00e      	beq.n	801349c <handle_fs_get_log+0x60>
				break;
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
				break;
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 801347e:	ab02      	add	r3, sp, #8
 8013480:	4a18      	ldr	r2, [pc, #96]	@ (80134e4 <handle_fs_get_log+0xa8>)
 8013482:	4621      	mov	r1, r4
 8013484:	4638      	mov	r0, r7
 8013486:	f010 fe5d 	bl	8024144 <mg_http_serve_file>
				break;
 801348a:	e005      	b.n	8013498 <handle_fs_get_log+0x5c>
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 801348c:	ab02      	add	r3, sp, #8
 801348e:	4a15      	ldr	r2, [pc, #84]	@ (80134e4 <handle_fs_get_log+0xa8>)
 8013490:	4621      	mov	r1, r4
 8013492:	4638      	mov	r0, r7
 8013494:	f010 fe56 	bl	8024144 <mg_http_serve_file>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8013498:	b00d      	add	sp, #52	@ 0x34
 801349a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 801349c:	ab02      	add	r3, sp, #8
 801349e:	4a12      	ldr	r2, [pc, #72]	@ (80134e8 <handle_fs_get_log+0xac>)
 80134a0:	4621      	mov	r1, r4
 80134a2:	4638      	mov	r0, r7
 80134a4:	f010 fe4e 	bl	8024144 <mg_http_serve_file>
				break;
 80134a8:	e7f6      	b.n	8013498 <handle_fs_get_log+0x5c>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80134aa:	ad0a      	add	r5, sp, #40	@ 0x28
 80134ac:	490f      	ldr	r1, [pc, #60]	@ (80134ec <handle_fs_get_log+0xb0>)
 80134ae:	4628      	mov	r0, r5
 80134b0:	f010 fa6a 	bl	8023988 <mg_str_s>
 80134b4:	2300      	movs	r3, #0
 80134b6:	9300      	str	r3, [sp, #0]
 80134b8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80134bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80134c0:	f010 fc84 	bl	8023dcc <mg_match>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	d1e7      	bne.n	8013498 <handle_fs_get_log+0x5c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80134c8:	4b09      	ldr	r3, [pc, #36]	@ (80134f0 <handle_fs_get_log+0xb4>)
 80134ca:	4a0a      	ldr	r2, [pc, #40]	@ (80134f4 <handle_fs_get_log+0xb8>)
 80134cc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80134d0:	4638      	mov	r0, r7
 80134d2:	f010 f8cf 	bl	8023674 <mg_http_reply>
}
 80134d6:	e7df      	b.n	8013498 <handle_fs_get_log+0x5c>
 80134d8:	08036070 	.word	0x08036070
 80134dc:	08035620 	.word	0x08035620
 80134e0:	200000a0 	.word	0x200000a0
 80134e4:	080356ec 	.word	0x080356ec
 80134e8:	080356fc 	.word	0x080356fc
 80134ec:	08035b24 	.word	0x08035b24
 80134f0:	08036510 	.word	0x08036510
 80134f4:	08035b68 	.word	0x08035b68

080134f8 <write_users>:
static void write_users(const char *file_path, users_list_t * users, size_t count){
 80134f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134fa:	4604      	mov	r4, r0
 80134fc:	460d      	mov	r5, r1
 80134fe:	4616      	mov	r6, r2
	mg_fs_lfs.rm(file_path);
 8013500:	4f09      	ldr	r7, [pc, #36]	@ (8013528 <write_users+0x30>)
 8013502:	6a3b      	ldr	r3, [r7, #32]
 8013504:	4798      	blx	r3
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_WRITE);
 8013506:	2202      	movs	r2, #2
 8013508:	4621      	mov	r1, r4
 801350a:	4638      	mov	r0, r7
 801350c:	f00e fe23 	bl	8022156 <mg_fs_open>
 8013510:	4604      	mov	r4, r0
	mg_fs_lfs.wr(fd->fd, users, sizeof(users_list_t) * count);
 8013512:	697b      	ldr	r3, [r7, #20]
 8013514:	22a9      	movs	r2, #169	@ 0xa9
 8013516:	fb06 f202 	mul.w	r2, r6, r2
 801351a:	4629      	mov	r1, r5
 801351c:	6800      	ldr	r0, [r0, #0]
 801351e:	4798      	blx	r3
	mg_fs_close(fd);
 8013520:	4620      	mov	r0, r4
 8013522:	f00e fe31 	bl	8022188 <mg_fs_close>
}
 8013526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013528:	200000a0 	.word	0x200000a0

0801352c <handle_manage_user>:

static void handle_manage_user(struct mg_connection *c, struct mg_http_message *hm){
 801352c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013530:	b0af      	sub	sp, #188	@ 0xbc
 8013532:	4607      	mov	r7, r0
 8013534:	460c      	mov	r4, r1

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013536:	ad26      	add	r5, sp, #152	@ 0x98
 8013538:	49a4      	ldr	r1, [pc, #656]	@ (80137cc <handle_manage_user+0x2a0>)
 801353a:	4628      	mov	r0, r5
 801353c:	f010 fa24 	bl	8023988 <mg_str_s>
 8013540:	2300      	movs	r3, #0
 8013542:	9300      	str	r3, [sp, #0]
 8013544:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013548:	e894 0003 	ldmia.w	r4, {r0, r1}
 801354c:	f010 fc3e 	bl	8023dcc <mg_match>
 8013550:	2800      	cmp	r0, #0
 8013552:	f000 8090 	beq.w	8013676 <handle_manage_user+0x14a>

		uint32_t response_len = 1024;
		uint32_t user_entry_len = 160;
	    char *response = calloc(response_len, sizeof(char));
 8013556:	2101      	movs	r1, #1
 8013558:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801355c:	f7ff fcea 	bl	8012f34 <mg_calloc>
 8013560:	4680      	mov	r8, r0
	    char *user_entry = calloc(user_entry_len, sizeof(char));
 8013562:	2101      	movs	r1, #1
 8013564:	20a0      	movs	r0, #160	@ 0xa0
 8013566:	f7ff fce5 	bl	8012f34 <mg_calloc>
 801356a:	4681      	mov	r9, r0
	    size_t offset = 0;

	    if (response && user_entry) {
 801356c:	f1b8 0f00 	cmp.w	r8, #0
 8013570:	d046      	beq.n	8013600 <handle_manage_user+0xd4>
 8013572:	2800      	cmp	r0, #0
 8013574:	d044      	beq.n	8013600 <handle_manage_user+0xd4>
	        // Начало JSON-объекта
	        offset += snprintf(response + offset, response_len - offset, "{ \"users\": [");
 8013576:	4b96      	ldr	r3, [pc, #600]	@ (80137d0 <handle_manage_user+0x2a4>)
 8013578:	cb07      	ldmia	r3!, {r0, r1, r2}
 801357a:	f8c8 0000 	str.w	r0, [r8]
 801357e:	f8c8 1004 	str.w	r1, [r8, #4]
 8013582:	f8c8 2008 	str.w	r2, [r8, #8]
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	f888 300c 	strb.w	r3, [r8, #12]
 801358c:	260c      	movs	r6, #12

	        // Проход по всем пользователям
	        for (int i = 0; i < user_list_size; i++) {
 801358e:	2500      	movs	r5, #0
 8013590:	e009      	b.n	80135a6 <handle_manage_user+0x7a>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
	                    offset += snprintf(response + offset, response_len - offset, ",");
	                }

	                // Добавляем объект пользователя в JSON
	                offset += snprintf(response + offset, response_len - offset, "%s", user_entry);
 8013592:	464b      	mov	r3, r9
 8013594:	4a8f      	ldr	r2, [pc, #572]	@ (80137d4 <handle_manage_user+0x2a8>)
 8013596:	f5c6 6180 	rsb	r1, r6, #1024	@ 0x400
 801359a:	eb08 0006 	add.w	r0, r8, r6
 801359e:	f017 fffd 	bl	802b59c <snprintf>
 80135a2:	4406      	add	r6, r0
	        for (int i = 0; i < user_list_size; i++) {
 80135a4:	3501      	adds	r5, #1
 80135a6:	2d09      	cmp	r5, #9
 80135a8:	dc1a      	bgt.n	80135e0 <handle_manage_user+0xb4>
	            if (web_users[i].user[0] != '\0') {  // Проверяем, что имя пользователя не пустое
 80135aa:	22a9      	movs	r2, #169	@ 0xa9
 80135ac:	fb05 f202 	mul.w	r2, r5, r2
 80135b0:	4b89      	ldr	r3, [pc, #548]	@ (80137d8 <handle_manage_user+0x2ac>)
 80135b2:	5c9b      	ldrb	r3, [r3, r2]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d0f5      	beq.n	80135a4 <handle_manage_user+0x78>
	                snprintf(user_entry, user_entry_len, "{\"user\": \"%s\"}", web_users[i].user);
 80135b8:	22a9      	movs	r2, #169	@ 0xa9
 80135ba:	4b87      	ldr	r3, [pc, #540]	@ (80137d8 <handle_manage_user+0x2ac>)
 80135bc:	fb02 3305 	mla	r3, r2, r5, r3
 80135c0:	4a86      	ldr	r2, [pc, #536]	@ (80137dc <handle_manage_user+0x2b0>)
 80135c2:	21a0      	movs	r1, #160	@ 0xa0
 80135c4:	4648      	mov	r0, r9
 80135c6:	f017 ffe9 	bl	802b59c <snprintf>
	                if (offset > 12) { // 12 символов — это длина строки "{ \"users\": ["
 80135ca:	2e0c      	cmp	r6, #12
 80135cc:	d9e1      	bls.n	8013592 <handle_manage_user+0x66>
	                    offset += snprintf(response + offset, response_len - offset, ",");
 80135ce:	4a84      	ldr	r2, [pc, #528]	@ (80137e0 <handle_manage_user+0x2b4>)
 80135d0:	f5c6 6180 	rsb	r1, r6, #1024	@ 0x400
 80135d4:	eb08 0006 	add.w	r0, r8, r6
 80135d8:	f017 ffe0 	bl	802b59c <snprintf>
 80135dc:	4406      	add	r6, r0
 80135de:	e7d8      	b.n	8013592 <handle_manage_user+0x66>
	            }
	        }

	        // Завершаем JSON-объект
	        offset += snprintf(response + offset, response_len - offset, "]}");
 80135e0:	4a80      	ldr	r2, [pc, #512]	@ (80137e4 <handle_manage_user+0x2b8>)
 80135e2:	f5c6 6180 	rsb	r1, r6, #1024	@ 0x400
 80135e6:	eb08 0006 	add.w	r0, r8, r6
 80135ea:	f017 ffd7 	bl	802b59c <snprintf>

	        // Отправляем JSON-ответ
	        mg_http_reply(c, 200, headers, "%s", response);
 80135ee:	f8cd 8000 	str.w	r8, [sp]
 80135f2:	4b78      	ldr	r3, [pc, #480]	@ (80137d4 <handle_manage_user+0x2a8>)
 80135f4:	4a7c      	ldr	r2, [pc, #496]	@ (80137e8 <handle_manage_user+0x2bc>)
 80135f6:	21c8      	movs	r1, #200	@ 0xc8
 80135f8:	4638      	mov	r0, r7
 80135fa:	f010 f83b 	bl	8023674 <mg_http_reply>
 80135fe:	e00a      	b.n	8013616 <handle_manage_user+0xea>
	    } else {
	        // Если память не выделена, отправляем ошибку
	    	logging(L_ERR, "Memory allocation failed in handle_manage_user GET");
 8013600:	497a      	ldr	r1, [pc, #488]	@ (80137ec <handle_manage_user+0x2c0>)
 8013602:	2003      	movs	r0, #3
 8013604:	f7fe fbd4 	bl	8011db0 <logging>
	        mg_http_reply(c, 500, headers, "{\"error\": \"Memory allocation failed\"}");
 8013608:	4b79      	ldr	r3, [pc, #484]	@ (80137f0 <handle_manage_user+0x2c4>)
 801360a:	4a77      	ldr	r2, [pc, #476]	@ (80137e8 <handle_manage_user+0x2bc>)
 801360c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013610:	4638      	mov	r0, r7
 8013612:	f010 f82f 	bl	8023674 <mg_http_reply>
	    }

	    // Освобождаем память
	    free(response);
 8013616:	4640      	mov	r0, r8
 8013618:	f006 fde0 	bl	801a1dc <vPortFree>
	    free(user_entry);
 801361c:	4648      	mov	r0, r9
 801361e:	f006 fddd 	bl	801a1dc <vPortFree>
	    // Free allocated memory
	    free(username_edit);
	    free(new_password);


	}if (mg_match(hm->method, mg_str("DELETE"), NULL)){
 8013622:	ad2c      	add	r5, sp, #176	@ 0xb0
 8013624:	4973      	ldr	r1, [pc, #460]	@ (80137f4 <handle_manage_user+0x2c8>)
 8013626:	4628      	mov	r0, r5
 8013628:	f010 f9ae 	bl	8023988 <mg_str_s>
 801362c:	2300      	movs	r3, #0
 801362e:	9300      	str	r3, [sp, #0]
 8013630:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013638:	f010 fbc8 	bl	8023dcc <mg_match>
 801363c:	2800      	cmp	r0, #0
 801363e:	f000 81b2 	beq.w	80139a6 <handle_manage_user+0x47a>
		char *username_del = NULL;

	    username_del = mg_json_get_str(hm->body, "$.user");
 8013642:	4a6d      	ldr	r2, [pc, #436]	@ (80137f8 <handle_manage_user+0x2cc>)
 8013644:	f504 7400 	add.w	r4, r4, #512	@ 0x200
 8013648:	e894 0003 	ldmia.w	r4, {r0, r1}
 801364c:	f011 fa8c 	bl	8024b68 <mg_json_get_str>

	    if (username_del && strlen(username_del) > 0) {
 8013650:	4606      	mov	r6, r0
 8013652:	b118      	cbz	r0, 801365c <handle_manage_user+0x130>
 8013654:	7803      	ldrb	r3, [r0, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	f040 818e 	bne.w	8013978 <handle_manage_user+0x44c>
	            mg_http_reply(c, 400, headers,
	                          "{\"status\":\"error\",\"message\":\"User not found or cannot delete user at index 0\"}\r\n");
	        }
	    } else {
	        // Неполные данные
	        mg_http_reply(c, 400, headers,
 801365c:	4b67      	ldr	r3, [pc, #412]	@ (80137fc <handle_manage_user+0x2d0>)
 801365e:	4a62      	ldr	r2, [pc, #392]	@ (80137e8 <handle_manage_user+0x2bc>)
 8013660:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013664:	4638      	mov	r0, r7
 8013666:	f010 f805 	bl	8023674 <mg_http_reply>
	                      "{\"status\":\"error\",\"message\":\"Field user is empty or missing\"}\r\n");
	    }

	    // Освобождаем память
	    free(username_del);
 801366a:	4630      	mov	r0, r6
 801366c:	f006 fdb6 	bl	801a1dc <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET POST PUT DELETE methods\"}\r\n");

	}
}
 8013670:	b02f      	add	sp, #188	@ 0xbc
 8013672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013676:	ad28      	add	r5, sp, #160	@ 0xa0
 8013678:	4961      	ldr	r1, [pc, #388]	@ (8013800 <handle_manage_user+0x2d4>)
 801367a:	4628      	mov	r0, r5
 801367c:	f010 f984 	bl	8023988 <mg_str_s>
 8013680:	2300      	movs	r3, #0
 8013682:	9300      	str	r3, [sp, #0]
 8013684:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013688:	e894 0003 	ldmia.w	r4, {r0, r1}
 801368c:	f010 fb9e 	bl	8023dcc <mg_match>
 8013690:	2800      	cmp	r0, #0
 8013692:	f000 80c7 	beq.w	8013824 <handle_manage_user+0x2f8>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013696:	ab03      	add	r3, sp, #12
 8013698:	4a5a      	ldr	r2, [pc, #360]	@ (8013804 <handle_manage_user+0x2d8>)
 801369a:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801369e:	c903      	ldmia	r1, {r0, r1}
 80136a0:	f00e fe42 	bl	8022328 <mg_json_get>
 80136a4:	2800      	cmp	r0, #0
 80136a6:	db21      	blt.n	80136ec <handle_manage_user+0x1c0>
	    username_add = mg_json_get_str(hm->body, "$.user");
 80136a8:	4a53      	ldr	r2, [pc, #332]	@ (80137f8 <handle_manage_user+0x2cc>)
 80136aa:	f504 7600 	add.w	r6, r4, #512	@ 0x200
 80136ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80136b2:	f011 fa59 	bl	8024b68 <mg_json_get_str>
 80136b6:	4605      	mov	r5, r0
	    password_add = mg_json_get_str(hm->body, "$.pass");
 80136b8:	4a53      	ldr	r2, [pc, #332]	@ (8013808 <handle_manage_user+0x2dc>)
 80136ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 80136be:	f011 fa53 	bl	8024b68 <mg_json_get_str>
 80136c2:	4606      	mov	r6, r0
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 80136c4:	b125      	cbz	r5, 80136d0 <handle_manage_user+0x1a4>
 80136c6:	b118      	cbz	r0, 80136d0 <handle_manage_user+0x1a4>
 80136c8:	782b      	ldrb	r3, [r5, #0]
 80136ca:	b10b      	cbz	r3, 80136d0 <handle_manage_user+0x1a4>
 80136cc:	7803      	ldrb	r3, [r0, #0]
 80136ce:	bb8b      	cbnz	r3, 8013734 <handle_manage_user+0x208>
	        mg_http_reply(c, 400, headers,
 80136d0:	4b4e      	ldr	r3, [pc, #312]	@ (801380c <handle_manage_user+0x2e0>)
 80136d2:	4a45      	ldr	r2, [pc, #276]	@ (80137e8 <handle_manage_user+0x2bc>)
 80136d4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80136d8:	4638      	mov	r0, r7
 80136da:	f00f ffcb 	bl	8023674 <mg_http_reply>
		free(username_add);
 80136de:	4628      	mov	r0, r5
 80136e0:	f006 fd7c 	bl	801a1dc <vPortFree>
		free(password_add);
 80136e4:	4630      	mov	r0, r6
 80136e6:	f006 fd79 	bl	801a1dc <vPortFree>
 80136ea:	e79a      	b.n	8013622 <handle_manage_user+0xf6>
	        mg_http_reply(c, 400, headers,
 80136ec:	4b48      	ldr	r3, [pc, #288]	@ (8013810 <handle_manage_user+0x2e4>)
 80136ee:	4a3e      	ldr	r2, [pc, #248]	@ (80137e8 <handle_manage_user+0x2bc>)
 80136f0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80136f4:	4638      	mov	r0, r7
 80136f6:	f00f ffbd 	bl	8023674 <mg_http_reply>
	        return;
 80136fa:	e7b9      	b.n	8013670 <handle_manage_user+0x144>
	        for (int i = 0; i < user_list_size; i++) {
 80136fc:	f108 0801 	add.w	r8, r8, #1
 8013700:	f1b8 0f09 	cmp.w	r8, #9
 8013704:	dc19      	bgt.n	801373a <handle_manage_user+0x20e>
	            if (strcmp(web_users[i].user, username_add) == 0) {
 8013706:	4629      	mov	r1, r5
 8013708:	20a9      	movs	r0, #169	@ 0xa9
 801370a:	4b33      	ldr	r3, [pc, #204]	@ (80137d8 <handle_manage_user+0x2ac>)
 801370c:	fb00 3008 	mla	r0, r0, r8, r3
 8013710:	f7fc fd66 	bl	80101e0 <strcmp>
 8013714:	2800      	cmp	r0, #0
 8013716:	d1f1      	bne.n	80136fc <handle_manage_user+0x1d0>
	                mg_http_reply(c, 400, headers,
 8013718:	4b3e      	ldr	r3, [pc, #248]	@ (8013814 <handle_manage_user+0x2e8>)
 801371a:	4a33      	ldr	r2, [pc, #204]	@ (80137e8 <handle_manage_user+0x2bc>)
 801371c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013720:	4638      	mov	r0, r7
 8013722:	f00f ffa7 	bl	8023674 <mg_http_reply>
	                free(username_add);
 8013726:	4628      	mov	r0, r5
 8013728:	f006 fd58 	bl	801a1dc <vPortFree>
	                free(password_add);
 801372c:	4630      	mov	r0, r6
 801372e:	f006 fd55 	bl	801a1dc <vPortFree>
	                return;
 8013732:	e79d      	b.n	8013670 <handle_manage_user+0x144>
	        for (int i = 0; i < user_list_size; i++) {
 8013734:	f04f 0800 	mov.w	r8, #0
 8013738:	e7e2      	b.n	8013700 <handle_manage_user+0x1d4>
			char add_pass_digest[sha1_str_len] = {0};
 801373a:	f04f 0800 	mov.w	r8, #0
 801373e:	f8cd 8010 	str.w	r8, [sp, #16]
 8013742:	2225      	movs	r2, #37	@ 0x25
 8013744:	4641      	mov	r1, r8
 8013746:	a805      	add	r0, sp, #20
 8013748:	f018 fc52 	bl	802bff0 <memset>
			mg_sha1_init(&sha1_ctx);
 801374c:	a80f      	add	r0, sp, #60	@ 0x3c
 801374e:	f010 f869 	bl	8023824 <mg_sha1_init>
			mg_sha1_update(&sha1_ctx, (const unsigned char *)password_add, strlen(password_add) * sizeof(char));
 8013752:	4630      	mov	r0, r6
 8013754:	f7fc fda4 	bl	80102a0 <strlen>
 8013758:	4602      	mov	r2, r0
 801375a:	4631      	mov	r1, r6
 801375c:	a80f      	add	r0, sp, #60	@ 0x3c
 801375e:	f010 f87b 	bl	8023858 <mg_sha1_update>
			mg_sha1_final((unsigned char *)add_pass_digest, &sha1_ctx);
 8013762:	a90f      	add	r1, sp, #60	@ 0x3c
 8013764:	a804      	add	r0, sp, #16
 8013766:	f010 f8b1 	bl	80238cc <mg_sha1_final>
	        for (int i = 0; i < user_list_size; i++) {
 801376a:	4643      	mov	r3, r8
 801376c:	e000      	b.n	8013770 <handle_manage_user+0x244>
 801376e:	3301      	adds	r3, #1
 8013770:	2b09      	cmp	r3, #9
 8013772:	dc23      	bgt.n	80137bc <handle_manage_user+0x290>
	            if (web_users[i].user[0] == '\0') { // Пустая запись
 8013774:	22a9      	movs	r2, #169	@ 0xa9
 8013776:	fb03 f202 	mul.w	r2, r3, r2
 801377a:	4917      	ldr	r1, [pc, #92]	@ (80137d8 <handle_manage_user+0x2ac>)
 801377c:	5c8a      	ldrb	r2, [r1, r2]
 801377e:	2a00      	cmp	r2, #0
 8013780:	d1f5      	bne.n	801376e <handle_manage_user+0x242>
	                strncpy(web_users[i].user, username_add, sizeof(web_users[i].user) - 1);
 8013782:	22a9      	movs	r2, #169	@ 0xa9
 8013784:	fb02 f803 	mul.w	r8, r2, r3
 8013788:	4689      	mov	r9, r1
 801378a:	227f      	movs	r2, #127	@ 0x7f
 801378c:	4629      	mov	r1, r5
 801378e:	eb09 0008 	add.w	r0, r9, r8
 8013792:	f018 fc74 	bl	802c07e <strncpy>
	                strncpy(web_users[i].pass_digest, add_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 8013796:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 801379a:	2228      	movs	r2, #40	@ 0x28
 801379c:	a904      	add	r1, sp, #16
 801379e:	4448      	add	r0, r9
 80137a0:	f018 fc6d 	bl	802c07e <strncpy>
	                write_users(user_cred_file, web_users, user_list_size);
 80137a4:	220a      	movs	r2, #10
 80137a6:	4649      	mov	r1, r9
 80137a8:	481b      	ldr	r0, [pc, #108]	@ (8013818 <handle_manage_user+0x2ec>)
 80137aa:	f7ff fea5 	bl	80134f8 <write_users>
	            mg_http_reply(c, 200, headers,
 80137ae:	4b1b      	ldr	r3, [pc, #108]	@ (801381c <handle_manage_user+0x2f0>)
 80137b0:	4a0d      	ldr	r2, [pc, #52]	@ (80137e8 <handle_manage_user+0x2bc>)
 80137b2:	21c8      	movs	r1, #200	@ 0xc8
 80137b4:	4638      	mov	r0, r7
 80137b6:	f00f ff5d 	bl	8023674 <mg_http_reply>
 80137ba:	e790      	b.n	80136de <handle_manage_user+0x1b2>
	            mg_http_reply(c, 400, headers,
 80137bc:	4b18      	ldr	r3, [pc, #96]	@ (8013820 <handle_manage_user+0x2f4>)
 80137be:	4a0a      	ldr	r2, [pc, #40]	@ (80137e8 <handle_manage_user+0x2bc>)
 80137c0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80137c4:	4638      	mov	r0, r7
 80137c6:	f00f ff55 	bl	8023674 <mg_http_reply>
	    if (username_add && password_add && strlen(username_add) > 0 && strlen(password_add) > 0) {
 80137ca:	e788      	b.n	80136de <handle_manage_user+0x1b2>
 80137cc:	08036070 	.word	0x08036070
 80137d0:	08036568 	.word	0x08036568
 80137d4:	0803a070 	.word	0x0803a070
 80137d8:	20001a58 	.word	0x20001a58
 80137dc:	08036578 	.word	0x08036578
 80137e0:	08036588 	.word	0x08036588
 80137e4:	0803658c 	.word	0x0803658c
 80137e8:	08035b68 	.word	0x08035b68
 80137ec:	08036590 	.word	0x08036590
 80137f0:	080365c4 	.word	0x080365c4
 80137f4:	080367a4 	.word	0x080367a4
 80137f8:	080365ec 	.word	0x080365ec
 80137fc:	08036840 	.word	0x08036840
 8013800:	08035b24 	.word	0x08035b24
 8013804:	08036254 	.word	0x08036254
 8013808:	080365f4 	.word	0x080365f4
 801380c:	080366a8 	.word	0x080366a8
 8013810:	08036258 	.word	0x08036258
 8013814:	080365fc 	.word	0x080365fc
 8013818:	08035644 	.word	0x08035644
 801381c:	08036638 	.word	0x08036638
 8013820:	08036674 	.word	0x08036674
	}else if (mg_match(hm->method, mg_str("PUT"), NULL)){
 8013824:	ad2a      	add	r5, sp, #168	@ 0xa8
 8013826:	4964      	ldr	r1, [pc, #400]	@ (80139b8 <handle_manage_user+0x48c>)
 8013828:	4628      	mov	r0, r5
 801382a:	f010 f8ad 	bl	8023988 <mg_str_s>
 801382e:	2300      	movs	r3, #0
 8013830:	9300      	str	r3, [sp, #0]
 8013832:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013836:	e894 0003 	ldmia.w	r4, {r0, r1}
 801383a:	f010 fac7 	bl	8023dcc <mg_match>
 801383e:	2800      	cmp	r0, #0
 8013840:	f43f aeef 	beq.w	8013622 <handle_manage_user+0xf6>
	    if (mg_json_get(hm->body, "$", &length) < 0) {
 8013844:	ab03      	add	r3, sp, #12
 8013846:	4a5d      	ldr	r2, [pc, #372]	@ (80139bc <handle_manage_user+0x490>)
 8013848:	f504 7100 	add.w	r1, r4, #512	@ 0x200
 801384c:	c903      	ldmia	r1, {r0, r1}
 801384e:	f00e fd6b 	bl	8022328 <mg_json_get>
 8013852:	2800      	cmp	r0, #0
 8013854:	db21      	blt.n	801389a <handle_manage_user+0x36e>
	        username_edit = mg_json_get_str(hm->body, "$.user");
 8013856:	4a5a      	ldr	r2, [pc, #360]	@ (80139c0 <handle_manage_user+0x494>)
 8013858:	f504 7600 	add.w	r6, r4, #512	@ 0x200
 801385c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013860:	f011 f982 	bl	8024b68 <mg_json_get_str>
 8013864:	4605      	mov	r5, r0
	        new_password = mg_json_get_str(hm->body, "$.pass");
 8013866:	4a57      	ldr	r2, [pc, #348]	@ (80139c4 <handle_manage_user+0x498>)
 8013868:	e896 0003 	ldmia.w	r6, {r0, r1}
 801386c:	f011 f97c 	bl	8024b68 <mg_json_get_str>
 8013870:	4606      	mov	r6, r0
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013872:	b125      	cbz	r5, 801387e <handle_manage_user+0x352>
 8013874:	b118      	cbz	r0, 801387e <handle_manage_user+0x352>
 8013876:	782b      	ldrb	r3, [r5, #0]
 8013878:	b10b      	cbz	r3, 801387e <handle_manage_user+0x352>
 801387a:	7803      	ldrb	r3, [r0, #0]
 801387c:	b9bb      	cbnz	r3, 80138ae <handle_manage_user+0x382>
	            mg_http_reply(c, 400, headers,
 801387e:	4b52      	ldr	r3, [pc, #328]	@ (80139c8 <handle_manage_user+0x49c>)
 8013880:	4a52      	ldr	r2, [pc, #328]	@ (80139cc <handle_manage_user+0x4a0>)
 8013882:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013886:	4638      	mov	r0, r7
 8013888:	f00f fef4 	bl	8023674 <mg_http_reply>
	    free(username_edit);
 801388c:	4628      	mov	r0, r5
 801388e:	f006 fca5 	bl	801a1dc <vPortFree>
	    free(new_password);
 8013892:	4630      	mov	r0, r6
 8013894:	f006 fca2 	bl	801a1dc <vPortFree>
 8013898:	e6c3      	b.n	8013622 <handle_manage_user+0xf6>
	        mg_http_reply(c, 400, headers,
 801389a:	4b4d      	ldr	r3, [pc, #308]	@ (80139d0 <handle_manage_user+0x4a4>)
 801389c:	4a4b      	ldr	r2, [pc, #300]	@ (80139cc <handle_manage_user+0x4a0>)
 801389e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80138a2:	4638      	mov	r0, r7
 80138a4:	f00f fee6 	bl	8023674 <mg_http_reply>
	    char *new_password = NULL;
 80138a8:	2600      	movs	r6, #0
	    char *username_edit = NULL;
 80138aa:	4635      	mov	r5, r6
 80138ac:	e7ee      	b.n	801388c <handle_manage_user+0x360>
	            char new_pass_digest[sha1_str_len] = {0};
 80138ae:	f04f 0800 	mov.w	r8, #0
 80138b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80138b6:	2225      	movs	r2, #37	@ 0x25
 80138b8:	4641      	mov	r1, r8
 80138ba:	a805      	add	r0, sp, #20
 80138bc:	f018 fb98 	bl	802bff0 <memset>
	            mg_sha1_init(&sha1_ctx);
 80138c0:	a80f      	add	r0, sp, #60	@ 0x3c
 80138c2:	f00f ffaf 	bl	8023824 <mg_sha1_init>
	            mg_sha1_update(&sha1_ctx, (const unsigned char *)new_password, strlen(new_password));
 80138c6:	4630      	mov	r0, r6
 80138c8:	f7fc fcea 	bl	80102a0 <strlen>
 80138cc:	4602      	mov	r2, r0
 80138ce:	4631      	mov	r1, r6
 80138d0:	a80f      	add	r0, sp, #60	@ 0x3c
 80138d2:	f00f ffc1 	bl	8023858 <mg_sha1_update>
	            mg_sha1_final((unsigned char *)new_pass_digest, &sha1_ctx);
 80138d6:	a90f      	add	r1, sp, #60	@ 0x3c
 80138d8:	a804      	add	r0, sp, #16
 80138da:	f00f fff7 	bl	80238cc <mg_sha1_final>
	            for (int i = 0; i < user_list_size; i++) {
 80138de:	f1b8 0f09 	cmp.w	r8, #9
 80138e2:	dc26      	bgt.n	8013932 <handle_manage_user+0x406>
	                if (strcmp(web_users[i].user, username_edit) == 0) {
 80138e4:	4629      	mov	r1, r5
 80138e6:	20a9      	movs	r0, #169	@ 0xa9
 80138e8:	4b3a      	ldr	r3, [pc, #232]	@ (80139d4 <handle_manage_user+0x4a8>)
 80138ea:	fb00 3008 	mla	r0, r0, r8, r3
 80138ee:	f7fc fc77 	bl	80101e0 <strcmp>
 80138f2:	b110      	cbz	r0, 80138fa <handle_manage_user+0x3ce>
	            for (int i = 0; i < user_list_size; i++) {
 80138f4:	f108 0801 	add.w	r8, r8, #1
 80138f8:	e7f1      	b.n	80138de <handle_manage_user+0x3b2>
	                    strncpy(web_users[i].pass_digest, new_pass_digest, sizeof(web_users[i].pass_digest) - 1);
 80138fa:	23a9      	movs	r3, #169	@ 0xa9
 80138fc:	fb03 f808 	mul.w	r8, r3, r8
 8013900:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 8013904:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 80139d4 <handle_manage_user+0x4a8>
 8013908:	2228      	movs	r2, #40	@ 0x28
 801390a:	a904      	add	r1, sp, #16
 801390c:	4448      	add	r0, r9
 801390e:	f018 fbb6 	bl	802c07e <strncpy>
	                    web_users[i].pass_digest[sizeof(web_users[i].pass_digest) - 1] = '\0';
 8013912:	44c8      	add	r8, r9
 8013914:	2300      	movs	r3, #0
 8013916:	f888 30a8 	strb.w	r3, [r8, #168]	@ 0xa8
	                    write_users(user_cred_file, web_users, user_list_size);
 801391a:	220a      	movs	r2, #10
 801391c:	4649      	mov	r1, r9
 801391e:	482e      	ldr	r0, [pc, #184]	@ (80139d8 <handle_manage_user+0x4ac>)
 8013920:	f7ff fdea 	bl	80134f8 <write_users>
	                mg_http_reply(c, 200, headers,
 8013924:	4b2d      	ldr	r3, [pc, #180]	@ (80139dc <handle_manage_user+0x4b0>)
 8013926:	4a29      	ldr	r2, [pc, #164]	@ (80139cc <handle_manage_user+0x4a0>)
 8013928:	21c8      	movs	r1, #200	@ 0xc8
 801392a:	4638      	mov	r0, r7
 801392c:	f00f fea2 	bl	8023674 <mg_http_reply>
 8013930:	e7ac      	b.n	801388c <handle_manage_user+0x360>
	                mg_http_reply(c, 404, headers,
 8013932:	4b2b      	ldr	r3, [pc, #172]	@ (80139e0 <handle_manage_user+0x4b4>)
 8013934:	4a25      	ldr	r2, [pc, #148]	@ (80139cc <handle_manage_user+0x4a0>)
 8013936:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 801393a:	4638      	mov	r0, r7
 801393c:	f00f fe9a 	bl	8023674 <mg_http_reply>
	        if (username_edit && new_password && strlen(username_edit) > 0 && strlen(new_password) > 0) {
 8013940:	e7a4      	b.n	801388c <handle_manage_user+0x360>
	                memset(web_users[i].user, 0, sizeof(web_users[i].user));
 8013942:	2280      	movs	r2, #128	@ 0x80
 8013944:	2100      	movs	r1, #0
 8013946:	4628      	mov	r0, r5
 8013948:	f018 fb52 	bl	802bff0 <memset>
	                memset(web_users[i].pass_digest, 0, sizeof(web_users[i].pass_digest));
 801394c:	23a9      	movs	r3, #169	@ 0xa9
 801394e:	fb03 f004 	mul.w	r0, r3, r4
 8013952:	3080      	adds	r0, #128	@ 0x80
 8013954:	4c1f      	ldr	r4, [pc, #124]	@ (80139d4 <handle_manage_user+0x4a8>)
 8013956:	2229      	movs	r2, #41	@ 0x29
 8013958:	2100      	movs	r1, #0
 801395a:	4420      	add	r0, r4
 801395c:	f018 fb48 	bl	802bff0 <memset>
	                write_users(user_cred_file, web_users, user_list_size);
 8013960:	220a      	movs	r2, #10
 8013962:	4621      	mov	r1, r4
 8013964:	481c      	ldr	r0, [pc, #112]	@ (80139d8 <handle_manage_user+0x4ac>)
 8013966:	f7ff fdc7 	bl	80134f8 <write_users>
	            mg_http_reply(c, 200, headers,
 801396a:	4b1e      	ldr	r3, [pc, #120]	@ (80139e4 <handle_manage_user+0x4b8>)
 801396c:	4a17      	ldr	r2, [pc, #92]	@ (80139cc <handle_manage_user+0x4a0>)
 801396e:	21c8      	movs	r1, #200	@ 0xc8
 8013970:	4638      	mov	r0, r7
 8013972:	f00f fe7f 	bl	8023674 <mg_http_reply>
 8013976:	e678      	b.n	801366a <handle_manage_user+0x13e>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8013978:	2401      	movs	r4, #1
 801397a:	2c09      	cmp	r4, #9
 801397c:	dc0b      	bgt.n	8013996 <handle_manage_user+0x46a>
	            if (strcmp(web_users[i].user, username_del) == 0) {
 801397e:	23a9      	movs	r3, #169	@ 0xa9
 8013980:	4d14      	ldr	r5, [pc, #80]	@ (80139d4 <handle_manage_user+0x4a8>)
 8013982:	fb03 5504 	mla	r5, r3, r4, r5
 8013986:	4631      	mov	r1, r6
 8013988:	4628      	mov	r0, r5
 801398a:	f7fc fc29 	bl	80101e0 <strcmp>
 801398e:	2800      	cmp	r0, #0
 8013990:	d0d7      	beq.n	8013942 <handle_manage_user+0x416>
	        for (int i = 1; i < user_list_size; i++) { // Нельзя удалять пользователя под индексом 0
 8013992:	3401      	adds	r4, #1
 8013994:	e7f1      	b.n	801397a <handle_manage_user+0x44e>
	            mg_http_reply(c, 400, headers,
 8013996:	4b14      	ldr	r3, [pc, #80]	@ (80139e8 <handle_manage_user+0x4bc>)
 8013998:	4a0c      	ldr	r2, [pc, #48]	@ (80139cc <handle_manage_user+0x4a0>)
 801399a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801399e:	4638      	mov	r0, r7
 80139a0:	f00f fe68 	bl	8023674 <mg_http_reply>
 80139a4:	e661      	b.n	801366a <handle_manage_user+0x13e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80139a6:	4b11      	ldr	r3, [pc, #68]	@ (80139ec <handle_manage_user+0x4c0>)
 80139a8:	4a08      	ldr	r2, [pc, #32]	@ (80139cc <handle_manage_user+0x4a0>)
 80139aa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80139ae:	4638      	mov	r0, r7
 80139b0:	f00f fe60 	bl	8023674 <mg_http_reply>
 80139b4:	e65c      	b.n	8013670 <handle_manage_user+0x144>
 80139b6:	bf00      	nop
 80139b8:	080366e8 	.word	0x080366e8
 80139bc:	08036254 	.word	0x08036254
 80139c0:	080365ec 	.word	0x080365ec
 80139c4:	080365f4 	.word	0x080365f4
 80139c8:	08036760 	.word	0x08036760
 80139cc:	08035b68 	.word	0x08035b68
 80139d0:	08036258 	.word	0x08036258
 80139d4:	20001a58 	.word	0x20001a58
 80139d8:	08035644 	.word	0x08035644
 80139dc:	080366ec 	.word	0x080366ec
 80139e0:	08036730 	.word	0x08036730
 80139e4:	080367ac 	.word	0x080367ac
 80139e8:	080367ec 	.word	0x080367ec
 80139ec:	08036880 	.word	0x08036880

080139f0 <load_users>:
static bool load_users(const char *file_path, users_list_t * users, size_t count){
 80139f0:	b570      	push	{r4, r5, r6, lr}
 80139f2:	460e      	mov	r6, r1
 80139f4:	4614      	mov	r4, r2
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, file_path, MG_FS_READ);
 80139f6:	2201      	movs	r2, #1
 80139f8:	4601      	mov	r1, r0
 80139fa:	480a      	ldr	r0, [pc, #40]	@ (8013a24 <load_users+0x34>)
 80139fc:	f00e fbab 	bl	8022156 <mg_fs_open>
	if (!fd) return false;
 8013a00:	b168      	cbz	r0, 8013a1e <load_users+0x2e>
 8013a02:	4605      	mov	r5, r0
	mg_fs_lfs.rd(fd->fd, users, sizeof(users_list_t) * count);
 8013a04:	4b07      	ldr	r3, [pc, #28]	@ (8013a24 <load_users+0x34>)
 8013a06:	691b      	ldr	r3, [r3, #16]
 8013a08:	22a9      	movs	r2, #169	@ 0xa9
 8013a0a:	fb04 f202 	mul.w	r2, r4, r2
 8013a0e:	4631      	mov	r1, r6
 8013a10:	6800      	ldr	r0, [r0, #0]
 8013a12:	4798      	blx	r3
	mg_fs_close(fd);
 8013a14:	4628      	mov	r0, r5
 8013a16:	f00e fbb7 	bl	8022188 <mg_fs_close>
	return true;
 8013a1a:	2001      	movs	r0, #1
}
 8013a1c:	bd70      	pop	{r4, r5, r6, pc}
	if (!fd) return false;
 8013a1e:	2000      	movs	r0, #0
 8013a20:	e7fc      	b.n	8013a1c <load_users+0x2c>
 8013a22:	bf00      	nop
 8013a24:	200000a0 	.word	0x200000a0

08013a28 <handle_restart_mcu>:
static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	b086      	sub	sp, #24
 8013a2c:	4605      	mov	r5, r0
 8013a2e:	460c      	mov	r4, r1
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013a30:	ae04      	add	r6, sp, #16
 8013a32:	4915      	ldr	r1, [pc, #84]	@ (8013a88 <handle_restart_mcu+0x60>)
 8013a34:	4630      	mov	r0, r6
 8013a36:	f00f ffa7 	bl	8023988 <mg_str_s>
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	9300      	str	r3, [sp, #0]
 8013a3e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a46:	f010 f9c1 	bl	8023dcc <mg_match>
 8013a4a:	b1a0      	cbz	r0, 8013a76 <handle_restart_mcu+0x4e>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 8013a4c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
		mg_timer_add(param->mgr, 2000 /* 2 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 8013a4e:	6818      	ldr	r0, [r3, #0]
 8013a50:	2300      	movs	r3, #0
 8013a52:	9302      	str	r3, [sp, #8]
 8013a54:	4b0d      	ldr	r3, [pc, #52]	@ (8013a8c <handle_restart_mcu+0x64>)
 8013a56:	9301      	str	r3, [sp, #4]
 8013a58:	2301      	movs	r3, #1
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8013a60:	2300      	movs	r3, #0
 8013a62:	f011 f973 	bl	8024d4c <mg_timer_add>
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8013a66:	4b0a      	ldr	r3, [pc, #40]	@ (8013a90 <handle_restart_mcu+0x68>)
 8013a68:	4a0a      	ldr	r2, [pc, #40]	@ (8013a94 <handle_restart_mcu+0x6c>)
 8013a6a:	21c8      	movs	r1, #200	@ 0xc8
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	f00f fe01 	bl	8023674 <mg_http_reply>
}
 8013a72:	b006      	add	sp, #24
 8013a74:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013a76:	4b08      	ldr	r3, [pc, #32]	@ (8013a98 <handle_restart_mcu+0x70>)
 8013a78:	4a06      	ldr	r2, [pc, #24]	@ (8013a94 <handle_restart_mcu+0x6c>)
 8013a7a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013a7e:	4628      	mov	r0, r5
 8013a80:	f00f fdf8 	bl	8023674 <mg_http_reply>
}
 8013a84:	e7f5      	b.n	8013a72 <handle_restart_mcu+0x4a>
 8013a86:	bf00      	nop
 8013a88:	08035b24 	.word	0x08035b24
 8013a8c:	08015b65 	.word	0x08015b65
 8013a90:	080368e0 	.word	0x080368e0
 8013a94:	08035b68 	.word	0x08035b68
 8013a98:	08035c1c 	.word	0x08035c1c

08013a9c <handle_activete_and_reboot>:
static void handle_activete_and_reboot(struct mg_connection *c, struct mg_http_message *hm){
 8013a9c:	b570      	push	{r4, r5, r6, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	4605      	mov	r5, r0
 8013aa2:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013aa4:	ae02      	add	r6, sp, #8
 8013aa6:	4914      	ldr	r1, [pc, #80]	@ (8013af8 <handle_activete_and_reboot+0x5c>)
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	f00f ff6d 	bl	8023988 <mg_str_s>
 8013aae:	2300      	movs	r3, #0
 8013ab0:	9300      	str	r3, [sp, #0]
 8013ab2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013ab6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013aba:	f010 f987 	bl	8023dcc <mg_match>
 8013abe:	b198      	cbz	r0, 8013ae8 <handle_activete_and_reboot+0x4c>
		if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 8013ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8013afc <handle_activete_and_reboot+0x60>)
 8013ac2:	69db      	ldr	r3, [r3, #28]
 8013ac4:	490e      	ldr	r1, [pc, #56]	@ (8013b00 <handle_activete_and_reboot+0x64>)
 8013ac6:	480f      	ldr	r0, [pc, #60]	@ (8013b04 <handle_activete_and_reboot+0x68>)
 8013ac8:	4798      	blx	r3
 8013aca:	b128      	cbz	r0, 8013ad8 <handle_activete_and_reboot+0x3c>
			handle_restart_mcu(c, hm);
 8013acc:	4621      	mov	r1, r4
 8013ace:	4628      	mov	r0, r5
 8013ad0:	f7ff ffaa 	bl	8013a28 <handle_restart_mcu>
}
 8013ad4:	b004      	add	sp, #16
 8013ad6:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 500, headers, //TODO delete for release,
 8013ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8013b08 <handle_activete_and_reboot+0x6c>)
 8013ada:	4a0c      	ldr	r2, [pc, #48]	@ (8013b0c <handle_activete_and_reboot+0x70>)
 8013adc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	f00f fdc7 	bl	8023674 <mg_http_reply>
 8013ae6:	e7f5      	b.n	8013ad4 <handle_activete_and_reboot+0x38>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013ae8:	4b09      	ldr	r3, [pc, #36]	@ (8013b10 <handle_activete_and_reboot+0x74>)
 8013aea:	4a08      	ldr	r2, [pc, #32]	@ (8013b0c <handle_activete_and_reboot+0x70>)
 8013aec:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013af0:	4628      	mov	r0, r5
 8013af2:	f00f fdbf 	bl	8023674 <mg_http_reply>
}
 8013af6:	e7ed      	b.n	8013ad4 <handle_activete_and_reboot+0x38>
 8013af8:	08035b24 	.word	0x08035b24
 8013afc:	200000a0 	.word	0x200000a0
 8013b00:	080355fc 	.word	0x080355fc
 8013b04:	08036918 	.word	0x08036918
 8013b08:	08036930 	.word	0x08036930
 8013b0c:	08035b68 	.word	0x08035b68
 8013b10:	08035c1c 	.word	0x08035c1c

08013b14 <handle_firmware_upload>:
static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 8013b14:	b570      	push	{r4, r5, r6, lr}
 8013b16:	b0a4      	sub	sp, #144	@ 0x90
 8013b18:	4605      	mov	r5, r0
 8013b1a:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013b1c:	ae22      	add	r6, sp, #136	@ 0x88
 8013b1e:	491a      	ldr	r1, [pc, #104]	@ (8013b88 <handle_firmware_upload+0x74>)
 8013b20:	4630      	mov	r0, r6
 8013b22:	f00f ff31 	bl	8023988 <mg_str_s>
 8013b26:	2300      	movs	r3, #0
 8013b28:	9300      	str	r3, [sp, #0]
 8013b2a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013b2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b32:	f010 f94b 	bl	8023dcc <mg_match>
 8013b36:	b1f0      	cbz	r0, 8013b76 <handle_firmware_upload+0x62>
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 8013b38:	2380      	movs	r3, #128	@ 0x80
 8013b3a:	aa02      	add	r2, sp, #8
 8013b3c:	4913      	ldr	r1, [pc, #76]	@ (8013b8c <handle_firmware_upload+0x78>)
 8013b3e:	f104 0010 	add.w	r0, r4, #16
 8013b42:	f010 fe0e 	bl	8024762 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 8013b46:	4912      	ldr	r1, [pc, #72]	@ (8013b90 <handle_firmware_upload+0x7c>)
 8013b48:	a802      	add	r0, sp, #8
 8013b4a:	f7fc fb49 	bl	80101e0 <strcmp>
 8013b4e:	b940      	cbnz	r0, 8013b62 <handle_firmware_upload+0x4e>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 8013b50:	4b10      	ldr	r3, [pc, #64]	@ (8013b94 <handle_firmware_upload+0x80>)
 8013b52:	9300      	str	r3, [sp, #0]
 8013b54:	4b10      	ldr	r3, [pc, #64]	@ (8013b98 <handle_firmware_upload+0x84>)
 8013b56:	4a11      	ldr	r2, [pc, #68]	@ (8013b9c <handle_firmware_upload+0x88>)
 8013b58:	4621      	mov	r1, r4
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	f012 fb8c 	bl	8026278 <mg_http_upload>
 8013b60:	e010      	b.n	8013b84 <handle_firmware_upload+0x70>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8013b62:	4b0b      	ldr	r3, [pc, #44]	@ (8013b90 <handle_firmware_upload+0x7c>)
 8013b64:	9300      	str	r3, [sp, #0]
 8013b66:	4b0e      	ldr	r3, [pc, #56]	@ (8013ba0 <handle_firmware_upload+0x8c>)
 8013b68:	4a0e      	ldr	r2, [pc, #56]	@ (8013ba4 <handle_firmware_upload+0x90>)
 8013b6a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f00f fd80 	bl	8023674 <mg_http_reply>
 8013b74:	e006      	b.n	8013b84 <handle_firmware_upload+0x70>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013b76:	4b0c      	ldr	r3, [pc, #48]	@ (8013ba8 <handle_firmware_upload+0x94>)
 8013b78:	4a0a      	ldr	r2, [pc, #40]	@ (8013ba4 <handle_firmware_upload+0x90>)
 8013b7a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f00f fd78 	bl	8023674 <mg_http_reply>
}
 8013b84:	b024      	add	sp, #144	@ 0x90
 8013b86:	bd70      	pop	{r4, r5, r6, pc}
 8013b88:	08035b24 	.word	0x08035b24
 8013b8c:	08039fc0 	.word	0x08039fc0
 8013b90:	08036974 	.word	0x08036974
 8013b94:	0003d090 	.word	0x0003d090
 8013b98:	080355f0 	.word	0x080355f0
 8013b9c:	200000a0 	.word	0x200000a0
 8013ba0:	08036984 	.word	0x08036984
 8013ba4:	08035b68 	.word	0x08035b68
 8013ba8:	08035c1c 	.word	0x08035c1c

08013bac <handle_fs_mkdir>:
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8013bac:	b570      	push	{r4, r5, r6, lr}
 8013bae:	b0c4      	sub	sp, #272	@ 0x110
 8013bb0:	4606      	mov	r6, r0
 8013bb2:	460c      	mov	r4, r1
  if (mg_match(hm->method, mg_str("POST"), NULL)){
 8013bb4:	ad42      	add	r5, sp, #264	@ 0x108
 8013bb6:	4920      	ldr	r1, [pc, #128]	@ (8013c38 <handle_fs_mkdir+0x8c>)
 8013bb8:	4628      	mov	r0, r5
 8013bba:	f00f fee5 	bl	8023988 <mg_str_s>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	9300      	str	r3, [sp, #0]
 8013bc2:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013bca:	f010 f8ff 	bl	8023dcc <mg_match>
 8013bce:	b350      	cbz	r0, 8013c26 <handle_fs_mkdir+0x7a>
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 8013bd0:	237b      	movs	r3, #123	@ 0x7b
 8013bd2:	aa23      	add	r2, sp, #140	@ 0x8c
 8013bd4:	4919      	ldr	r1, [pc, #100]	@ (8013c3c <handle_fs_mkdir+0x90>)
 8013bd6:	f504 7000 	add.w	r0, r4, #512	@ 0x200
 8013bda:	f010 fdc2 	bl	8024762 <mg_http_get_var>
 8013bde:	2800      	cmp	r0, #0
 8013be0:	dd19      	ble.n	8013c16 <handle_fs_mkdir+0x6a>
		snprintf(path, sizeof(path), "/web/%s", name);
 8013be2:	ab23      	add	r3, sp, #140	@ 0x8c
 8013be4:	4a16      	ldr	r2, [pc, #88]	@ (8013c40 <handle_fs_mkdir+0x94>)
 8013be6:	2180      	movs	r1, #128	@ 0x80
 8013be8:	a803      	add	r0, sp, #12
 8013bea:	f017 fcd7 	bl	802b59c <snprintf>
		if (mg_fs_lfs.mkd(path)) {
 8013bee:	4b15      	ldr	r3, [pc, #84]	@ (8013c44 <handle_fs_mkdir+0x98>)
 8013bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bf2:	a803      	add	r0, sp, #12
 8013bf4:	4798      	blx	r3
 8013bf6:	b130      	cbz	r0, 8013c06 <handle_fs_mkdir+0x5a>
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 8013bf8:	4b13      	ldr	r3, [pc, #76]	@ (8013c48 <handle_fs_mkdir+0x9c>)
 8013bfa:	4a14      	ldr	r2, [pc, #80]	@ (8013c4c <handle_fs_mkdir+0xa0>)
 8013bfc:	21c8      	movs	r1, #200	@ 0xc8
 8013bfe:	4630      	mov	r0, r6
 8013c00:	f00f fd38 	bl	8023674 <mg_http_reply>
 8013c04:	e016      	b.n	8013c34 <handle_fs_mkdir+0x88>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8013c06:	4b12      	ldr	r3, [pc, #72]	@ (8013c50 <handle_fs_mkdir+0xa4>)
 8013c08:	4a10      	ldr	r2, [pc, #64]	@ (8013c4c <handle_fs_mkdir+0xa0>)
 8013c0a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8013c0e:	4630      	mov	r0, r6
 8013c10:	f00f fd30 	bl	8023674 <mg_http_reply>
 8013c14:	e00e      	b.n	8013c34 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013c16:	4b0f      	ldr	r3, [pc, #60]	@ (8013c54 <handle_fs_mkdir+0xa8>)
 8013c18:	4a0c      	ldr	r2, [pc, #48]	@ (8013c4c <handle_fs_mkdir+0xa0>)
 8013c1a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c1e:	4630      	mov	r0, r6
 8013c20:	f00f fd28 	bl	8023674 <mg_http_reply>
 8013c24:	e006      	b.n	8013c34 <handle_fs_mkdir+0x88>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013c26:	4b0c      	ldr	r3, [pc, #48]	@ (8013c58 <handle_fs_mkdir+0xac>)
 8013c28:	4a08      	ldr	r2, [pc, #32]	@ (8013c4c <handle_fs_mkdir+0xa0>)
 8013c2a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013c2e:	4630      	mov	r0, r6
 8013c30:	f00f fd20 	bl	8023674 <mg_http_reply>
}
 8013c34:	b044      	add	sp, #272	@ 0x110
 8013c36:	bd70      	pop	{r4, r5, r6, pc}
 8013c38:	08035b24 	.word	0x08035b24
 8013c3c:	080369d0 	.word	0x080369d0
 8013c40:	080369d8 	.word	0x080369d8
 8013c44:	200000a0 	.word	0x200000a0
 8013c48:	080369e0 	.word	0x080369e0
 8013c4c:	08035b68 	.word	0x08035b68
 8013c50:	08036a14 	.word	0x08036a14
 8013c54:	08036a50 	.word	0x08036a50
 8013c58:	08035c1c 	.word	0x08035c1c

08013c5c <calc_file_md5sum>:
static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 8013c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c5e:	b097      	sub	sp, #92	@ 0x5c
 8013c60:	4604      	mov	r4, r0
 8013c62:	460e      	mov	r6, r1
	char * buff = calloc(buff_len, 1);
 8013c64:	2101      	movs	r1, #1
 8013c66:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8013c6a:	f7ff f963 	bl	8012f34 <mg_calloc>
	if (buff == NULL){
 8013c6e:	4605      	mov	r5, r0
 8013c70:	b150      	cbz	r0, 8013c88 <calc_file_md5sum+0x2c>
	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 8013c72:	2201      	movs	r2, #1
 8013c74:	4621      	mov	r1, r4
 8013c76:	4828      	ldr	r0, [pc, #160]	@ (8013d18 <calc_file_md5sum+0xbc>)
 8013c78:	f00e fa6d 	bl	8022156 <mg_fs_open>
	if (fd==NULL){
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	b140      	cbz	r0, 8013c92 <calc_file_md5sum+0x36>
	mg_md5_init(&md5_ctx);
 8013c80:	4668      	mov	r0, sp
 8013c82:	f00e fe77 	bl	8022974 <mg_md5_init>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8013c86:	e010      	b.n	8013caa <calc_file_md5sum+0x4e>
		free(buff);
 8013c88:	f006 faa8 	bl	801a1dc <vPortFree>
		return -1;
 8013c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c90:	e040      	b.n	8013d14 <calc_file_md5sum+0xb8>
		mg_fs_close(fd);
 8013c92:	f00e fa79 	bl	8022188 <mg_fs_close>
		free(buff);
 8013c96:	4628      	mov	r0, r5
 8013c98:	f006 faa0 	bl	801a1dc <vPortFree>
		return -2;
 8013c9c:	f06f 0001 	mvn.w	r0, #1
 8013ca0:	e038      	b.n	8013d14 <calc_file_md5sum+0xb8>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	4668      	mov	r0, sp
 8013ca6:	f00e fe7b 	bl	80229a0 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8013caa:	4b1b      	ldr	r3, [pc, #108]	@ (8013d18 <calc_file_md5sum+0xbc>)
 8013cac:	691b      	ldr	r3, [r3, #16]
 8013cae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013cb2:	4629      	mov	r1, r5
 8013cb4:	6820      	ldr	r0, [r4, #0]
 8013cb6:	4798      	blx	r3
 8013cb8:	4602      	mov	r2, r0
 8013cba:	2800      	cmp	r0, #0
 8013cbc:	d1f1      	bne.n	8013ca2 <calc_file_md5sum+0x46>
	mg_fs_close(fd);
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	f00e fa62 	bl	8022188 <mg_fs_close>
	uint8_t * digest = calloc(digest_len, 1);
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	2010      	movs	r0, #16
 8013cc8:	f7ff f934 	bl	8012f34 <mg_calloc>
	if (digest == NULL){
 8013ccc:	4607      	mov	r7, r0
 8013cce:	b128      	cbz	r0, 8013cdc <calc_file_md5sum+0x80>
	mg_md5_final(&md5_ctx, digest);
 8013cd0:	4601      	mov	r1, r0
 8013cd2:	4668      	mov	r0, sp
 8013cd4:	f00e febb 	bl	8022a4e <mg_md5_final>
	for (int i = 0; i < 16; ++i) {
 8013cd8:	2400      	movs	r4, #0
 8013cda:	e012      	b.n	8013d02 <calc_file_md5sum+0xa6>
		free(buff);
 8013cdc:	4628      	mov	r0, r5
 8013cde:	f006 fa7d 	bl	801a1dc <vPortFree>
		free(digest);
 8013ce2:	4638      	mov	r0, r7
 8013ce4:	f006 fa7a 	bl	801a1dc <vPortFree>
		return -1;
 8013ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013cec:	e012      	b.n	8013d14 <calc_file_md5sum+0xb8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8013cee:	0061      	lsls	r1, r4, #1
 8013cf0:	5d3b      	ldrb	r3, [r7, r4]
 8013cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8013d1c <calc_file_md5sum+0xc0>)
 8013cf4:	f1c1 0121 	rsb	r1, r1, #33	@ 0x21
 8013cf8:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 8013cfc:	f017 fc4e 	bl	802b59c <snprintf>
	for (int i = 0; i < 16; ++i) {
 8013d00:	3401      	adds	r4, #1
 8013d02:	2c0f      	cmp	r4, #15
 8013d04:	ddf3      	ble.n	8013cee <calc_file_md5sum+0x92>
	free(buff);
 8013d06:	4628      	mov	r0, r5
 8013d08:	f006 fa68 	bl	801a1dc <vPortFree>
	free(digest);
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	f006 fa65 	bl	801a1dc <vPortFree>
	return 0;
 8013d12:	2000      	movs	r0, #0
}
 8013d14:	b017      	add	sp, #92	@ 0x5c
 8013d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d18:	200000a0 	.word	0x200000a0
 8013d1c:	08036a8c 	.word	0x08036a8c

08013d20 <handle_firmware_md5>:
static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 8013d20:	b570      	push	{r4, r5, r6, lr}
 8013d22:	b084      	sub	sp, #16
 8013d24:	4605      	mov	r5, r0
 8013d26:	460c      	mov	r4, r1
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8013d28:	ae02      	add	r6, sp, #8
 8013d2a:	4919      	ldr	r1, [pc, #100]	@ (8013d90 <handle_firmware_md5+0x70>)
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	f00f fe2b 	bl	8023988 <mg_str_s>
 8013d32:	2300      	movs	r3, #0
 8013d34:	9300      	str	r3, [sp, #0]
 8013d36:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013d3e:	f010 f845 	bl	8023dcc <mg_match>
 8013d42:	b1e8      	cbz	r0, 8013d80 <handle_firmware_md5+0x60>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 8013d44:	2101      	movs	r1, #1
 8013d46:	2021      	movs	r0, #33	@ 0x21
 8013d48:	f7ff f8f4 	bl	8012f34 <mg_calloc>
 8013d4c:	4604      	mov	r4, r0
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8013d4e:	4601      	mov	r1, r0
 8013d50:	4810      	ldr	r0, [pc, #64]	@ (8013d94 <handle_firmware_md5+0x74>)
 8013d52:	f7ff ff83 	bl	8013c5c <calc_file_md5sum>
 8013d56:	b958      	cbnz	r0, 8013d70 <handle_firmware_md5+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8013d58:	9400      	str	r4, [sp, #0]
 8013d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8013d98 <handle_firmware_md5+0x78>)
 8013d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8013d9c <handle_firmware_md5+0x7c>)
 8013d5e:	21c8      	movs	r1, #200	@ 0xc8
 8013d60:	4628      	mov	r0, r5
 8013d62:	f00f fc87 	bl	8023674 <mg_http_reply>
		free(md5_str);
 8013d66:	4620      	mov	r0, r4
 8013d68:	f006 fa38 	bl	801a1dc <vPortFree>
}
 8013d6c:	b004      	add	sp, #16
 8013d6e:	bd70      	pop	{r4, r5, r6, pc}
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8013d70:	4b0b      	ldr	r3, [pc, #44]	@ (8013da0 <handle_firmware_md5+0x80>)
 8013d72:	4a0a      	ldr	r2, [pc, #40]	@ (8013d9c <handle_firmware_md5+0x7c>)
 8013d74:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8013d78:	4628      	mov	r0, r5
 8013d7a:	f00f fc7b 	bl	8023674 <mg_http_reply>
 8013d7e:	e7f2      	b.n	8013d66 <handle_firmware_md5+0x46>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8013d80:	4b08      	ldr	r3, [pc, #32]	@ (8013da4 <handle_firmware_md5+0x84>)
 8013d82:	4a06      	ldr	r2, [pc, #24]	@ (8013d9c <handle_firmware_md5+0x7c>)
 8013d84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8013d88:	4628      	mov	r0, r5
 8013d8a:	f00f fc73 	bl	8023674 <mg_http_reply>
}
 8013d8e:	e7ed      	b.n	8013d6c <handle_firmware_md5+0x4c>
 8013d90:	08036070 	.word	0x08036070
 8013d94:	08036918 	.word	0x08036918
 8013d98:	08036a94 	.word	0x08036a94
 8013d9c:	08035b68 	.word	0x08035b68
 8013da0:	08036ab8 	.word	0x08036ab8
 8013da4:	08036af8 	.word	0x08036af8

08013da8 <dashboard>:


static void dashboard(struct mg_connection *c, int ev, void *ev_data) {

	if (ev == MG_EV_HTTP_MSG) {
 8013da8:	290b      	cmp	r1, #11
 8013daa:	d000      	beq.n	8013dae <dashboard+0x6>
 8013dac:	4770      	bx	lr
static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 8013dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013db0:	b0af      	sub	sp, #188	@ 0xbc
 8013db2:	4605      	mov	r5, r0
 8013db4:	4614      	mov	r4, r2
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;

    bool authenticate = auth(c, hm, 0); //Check authentication status
 8013db6:	2200      	movs	r2, #0
 8013db8:	4621      	mov	r1, r4
 8013dba:	f7fe fef5 	bl	8012ba8 <auth>
 8013dbe:	4607      	mov	r7, r0

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8013dc0:	ae08      	add	r6, sp, #32
 8013dc2:	49a7      	ldr	r1, [pc, #668]	@ (8014060 <dashboard+0x2b8>)
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	f00f fddf 	bl	8023988 <mg_str_s>
 8013dca:	2300      	movs	r3, #0
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013dd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013dd6:	f00f fff9 	bl	8023dcc <mg_match>
 8013dda:	b120      	cbz	r0, 8013de6 <dashboard+0x3e>
            	handle_OPTIONS_method(c);
 8013ddc:	4628      	mov	r0, r5
 8013dde:	f7fe fdb9 	bl	8012954 <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 8013de2:	b02f      	add	sp, #188	@ 0xbc
 8013de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        }else if (mg_match(hm->uri, mg_str("/api/#"), NULL) && !authenticate ) { // All requests to /api should be authenticated
 8013de6:	ae0a      	add	r6, sp, #40	@ 0x28
 8013de8:	499e      	ldr	r1, [pc, #632]	@ (8014064 <dashboard+0x2bc>)
 8013dea:	4630      	mov	r0, r6
 8013dec:	f00f fdcc 	bl	8023988 <mg_str_s>
 8013df0:	2300      	movs	r3, #0
 8013df2:	9300      	str	r3, [sp, #0]
 8013df4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013df8:	f104 0108 	add.w	r1, r4, #8
 8013dfc:	c903      	ldmia	r1, {r0, r1}
 8013dfe:	f00f ffe5 	bl	8023dcc <mg_match>
 8013e02:	b100      	cbz	r0, 8013e06 <dashboard+0x5e>
 8013e04:	b19f      	cbz	r7, 8013e2e <dashboard+0x86>
		}else if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 8013e06:	ae0c      	add	r6, sp, #48	@ 0x30
 8013e08:	4997      	ldr	r1, [pc, #604]	@ (8014068 <dashboard+0x2c0>)
 8013e0a:	4630      	mov	r0, r6
 8013e0c:	f00f fdbc 	bl	8023988 <mg_str_s>
 8013e10:	2300      	movs	r3, #0
 8013e12:	9300      	str	r3, [sp, #0]
 8013e14:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013e18:	f104 0108 	add.w	r1, r4, #8
 8013e1c:	c903      	ldmia	r1, {r0, r1}
 8013e1e:	f00f ffd5 	bl	8023dcc <mg_match>
 8013e22:	b160      	cbz	r0, 8013e3e <dashboard+0x96>
        	 handler_authanticate(c,hm);
 8013e24:	4621      	mov	r1, r4
 8013e26:	4628      	mov	r0, r5
 8013e28:	f7fe ff98 	bl	8012d5c <handler_authanticate>
 8013e2c:	e7d9      	b.n	8013de2 <dashboard+0x3a>
        	mg_http_reply(c, 403, "", "Not Authorised\n");
 8013e2e:	4b8f      	ldr	r3, [pc, #572]	@ (801406c <dashboard+0x2c4>)
 8013e30:	4a8f      	ldr	r2, [pc, #572]	@ (8014070 <dashboard+0x2c8>)
 8013e32:	f240 1193 	movw	r1, #403	@ 0x193
 8013e36:	4628      	mov	r0, r5
 8013e38:	f00f fc1c 	bl	8023674 <mg_http_reply>
 8013e3c:	e7d1      	b.n	8013de2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8013e3e:	ae0e      	add	r6, sp, #56	@ 0x38
 8013e40:	498c      	ldr	r1, [pc, #560]	@ (8014074 <dashboard+0x2cc>)
 8013e42:	4630      	mov	r0, r6
 8013e44:	f00f fda0 	bl	8023988 <mg_str_s>
 8013e48:	2300      	movs	r3, #0
 8013e4a:	9300      	str	r3, [sp, #0]
 8013e4c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013e50:	f104 0108 	add.w	r1, r4, #8
 8013e54:	c903      	ldmia	r1, {r0, r1}
 8013e56:	f00f ffb9 	bl	8023dcc <mg_match>
 8013e5a:	b120      	cbz	r0, 8013e66 <dashboard+0xbe>
			handler_logout(c,hm);
 8013e5c:	4621      	mov	r1, r4
 8013e5e:	4628      	mov	r0, r5
 8013e60:	f7fe fdf6 	bl	8012a50 <handler_logout>
 8013e64:	e7bd      	b.n	8013de2 <dashboard+0x3a>
		}else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 8013e66:	ae10      	add	r6, sp, #64	@ 0x40
 8013e68:	4983      	ldr	r1, [pc, #524]	@ (8014078 <dashboard+0x2d0>)
 8013e6a:	4630      	mov	r0, r6
 8013e6c:	f00f fd8c 	bl	8023988 <mg_str_s>
 8013e70:	2300      	movs	r3, #0
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013e78:	f104 0108 	add.w	r1, r4, #8
 8013e7c:	c903      	ldmia	r1, {r0, r1}
 8013e7e:	f00f ffa5 	bl	8023dcc <mg_match>
 8013e82:	b118      	cbz	r0, 8013e8c <dashboard+0xe4>
			handle_ram_status_get(c);
 8013e84:	4628      	mov	r0, r5
 8013e86:	f7fe ff7d 	bl	8012d84 <handle_ram_status_get>
 8013e8a:	e7aa      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 8013e8c:	ae12      	add	r6, sp, #72	@ 0x48
 8013e8e:	497b      	ldr	r1, [pc, #492]	@ (801407c <dashboard+0x2d4>)
 8013e90:	4630      	mov	r0, r6
 8013e92:	f00f fd79 	bl	8023988 <mg_str_s>
 8013e96:	2300      	movs	r3, #0
 8013e98:	9300      	str	r3, [sp, #0]
 8013e9a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013e9e:	f104 0108 	add.w	r1, r4, #8
 8013ea2:	c903      	ldmia	r1, {r0, r1}
 8013ea4:	f00f ff92 	bl	8023dcc <mg_match>
 8013ea8:	b120      	cbz	r0, 8013eb4 <dashboard+0x10c>
			handle_io_status_get(c, hm);
 8013eaa:	4621      	mov	r1, r4
 8013eac:	4628      	mov	r0, r5
 8013eae:	f7fe ff8f 	bl	8012dd0 <handle_io_status_get>
 8013eb2:	e796      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8013eb4:	ae14      	add	r6, sp, #80	@ 0x50
 8013eb6:	4972      	ldr	r1, [pc, #456]	@ (8014080 <dashboard+0x2d8>)
 8013eb8:	4630      	mov	r0, r6
 8013eba:	f00f fd65 	bl	8023988 <mg_str_s>
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013ec6:	f104 0108 	add.w	r1, r4, #8
 8013eca:	c903      	ldmia	r1, {r0, r1}
 8013ecc:	f00f ff7e 	bl	8023dcc <mg_match>
 8013ed0:	b120      	cbz	r0, 8013edc <dashboard+0x134>
			handle_mqtt_conf(c, hm);
 8013ed2:	4621      	mov	r1, r4
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	f7ff f83b 	bl	8012f50 <handle_mqtt_conf>
 8013eda:	e782      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8013edc:	ae16      	add	r6, sp, #88	@ 0x58
 8013ede:	4969      	ldr	r1, [pc, #420]	@ (8014084 <dashboard+0x2dc>)
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f00f fd51 	bl	8023988 <mg_str_s>
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013eee:	f104 0108 	add.w	r1, r4, #8
 8013ef2:	c903      	ldmia	r1, {r0, r1}
 8013ef4:	f00f ff6a 	bl	8023dcc <mg_match>
 8013ef8:	b120      	cbz	r0, 8013f04 <dashboard+0x15c>
			handle_dev_status(c, hm);
 8013efa:	4621      	mov	r1, r4
 8013efc:	4628      	mov	r0, r5
 8013efe:	f7ff f95f 	bl	80131c0 <handle_dev_status>
 8013f02:	e76e      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8013f04:	ae18      	add	r6, sp, #96	@ 0x60
 8013f06:	4960      	ldr	r1, [pc, #384]	@ (8014088 <dashboard+0x2e0>)
 8013f08:	4630      	mov	r0, r6
 8013f0a:	f00f fd3d 	bl	8023988 <mg_str_s>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	9300      	str	r3, [sp, #0]
 8013f12:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013f16:	f104 0108 	add.w	r1, r4, #8
 8013f1a:	c903      	ldmia	r1, {r0, r1}
 8013f1c:	f00f ff56 	bl	8023dcc <mg_match>
 8013f20:	b128      	cbz	r0, 8013f2e <dashboard+0x186>
			handle_fs_get_log(c, hm, 0);
 8013f22:	2200      	movs	r2, #0
 8013f24:	4621      	mov	r1, r4
 8013f26:	4628      	mov	r0, r5
 8013f28:	f7ff fa88 	bl	801343c <handle_fs_get_log>
 8013f2c:	e759      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8013f2e:	ae1a      	add	r6, sp, #104	@ 0x68
 8013f30:	4956      	ldr	r1, [pc, #344]	@ (801408c <dashboard+0x2e4>)
 8013f32:	4630      	mov	r0, r6
 8013f34:	f00f fd28 	bl	8023988 <mg_str_s>
 8013f38:	2300      	movs	r3, #0
 8013f3a:	9300      	str	r3, [sp, #0]
 8013f3c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013f40:	68e1      	ldr	r1, [r4, #12]
 8013f42:	68a0      	ldr	r0, [r4, #8]
 8013f44:	f00f ff42 	bl	8023dcc <mg_match>
 8013f48:	b128      	cbz	r0, 8013f56 <dashboard+0x1ae>
			handle_fs_get_log(c, hm, 1);
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	4621      	mov	r1, r4
 8013f4e:	4628      	mov	r0, r5
 8013f50:	f7ff fa74 	bl	801343c <handle_fs_get_log>
 8013f54:	e745      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/user"), NULL)){
 8013f56:	ae1c      	add	r6, sp, #112	@ 0x70
 8013f58:	494d      	ldr	r1, [pc, #308]	@ (8014090 <dashboard+0x2e8>)
 8013f5a:	4630      	mov	r0, r6
 8013f5c:	f00f fd14 	bl	8023988 <mg_str_s>
 8013f60:	2300      	movs	r3, #0
 8013f62:	9300      	str	r3, [sp, #0]
 8013f64:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013f68:	68e1      	ldr	r1, [r4, #12]
 8013f6a:	68a0      	ldr	r0, [r4, #8]
 8013f6c:	f00f ff2e 	bl	8023dcc <mg_match>
 8013f70:	b120      	cbz	r0, 8013f7c <dashboard+0x1d4>
			handle_manage_user(c, hm);
 8013f72:	4621      	mov	r1, r4
 8013f74:	4628      	mov	r0, r5
 8013f76:	f7ff fad9 	bl	801352c <handle_manage_user>
 8013f7a:	e732      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8013f7c:	ae1e      	add	r6, sp, #120	@ 0x78
 8013f7e:	4945      	ldr	r1, [pc, #276]	@ (8014094 <dashboard+0x2ec>)
 8013f80:	4630      	mov	r0, r6
 8013f82:	f00f fd01 	bl	8023988 <mg_str_s>
 8013f86:	2300      	movs	r3, #0
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013f8e:	68e1      	ldr	r1, [r4, #12]
 8013f90:	68a0      	ldr	r0, [r4, #8]
 8013f92:	f00f ff1b 	bl	8023dcc <mg_match>
 8013f96:	b120      	cbz	r0, 8013fa2 <dashboard+0x1fa>
			handle_restart_mcu(c, hm);
 8013f98:	4621      	mov	r1, r4
 8013f9a:	4628      	mov	r0, r5
 8013f9c:	f7ff fd44 	bl	8013a28 <handle_restart_mcu>
 8013fa0:	e71f      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8013fa2:	ae20      	add	r6, sp, #128	@ 0x80
 8013fa4:	493c      	ldr	r1, [pc, #240]	@ (8014098 <dashboard+0x2f0>)
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	f00f fcee 	bl	8023988 <mg_str_s>
 8013fac:	2300      	movs	r3, #0
 8013fae:	9300      	str	r3, [sp, #0]
 8013fb0:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013fb4:	68e1      	ldr	r1, [r4, #12]
 8013fb6:	68a0      	ldr	r0, [r4, #8]
 8013fb8:	f00f ff08 	bl	8023dcc <mg_match>
 8013fbc:	b120      	cbz	r0, 8013fc8 <dashboard+0x220>
			handle_firmware_upload(c, hm);
 8013fbe:	4621      	mov	r1, r4
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f7ff fda7 	bl	8013b14 <handle_firmware_upload>
 8013fc6:	e70c      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8013fc8:	ae22      	add	r6, sp, #136	@ 0x88
 8013fca:	4934      	ldr	r1, [pc, #208]	@ (801409c <dashboard+0x2f4>)
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f00f fcdb 	bl	8023988 <mg_str_s>
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8013fda:	68e1      	ldr	r1, [r4, #12]
 8013fdc:	68a0      	ldr	r0, [r4, #8]
 8013fde:	f00f fef5 	bl	8023dcc <mg_match>
 8013fe2:	b120      	cbz	r0, 8013fee <dashboard+0x246>
			handle_firmware_md5(c, hm);
 8013fe4:	4621      	mov	r1, r4
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	f7ff fe9a 	bl	8013d20 <handle_firmware_md5>
 8013fec:	e6f9      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate_and_reboot"), NULL)){
 8013fee:	ae24      	add	r6, sp, #144	@ 0x90
 8013ff0:	492b      	ldr	r1, [pc, #172]	@ (80140a0 <dashboard+0x2f8>)
 8013ff2:	4630      	mov	r0, r6
 8013ff4:	f00f fcc8 	bl	8023988 <mg_str_s>
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	9300      	str	r3, [sp, #0]
 8013ffc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014000:	68e1      	ldr	r1, [r4, #12]
 8014002:	68a0      	ldr	r0, [r4, #8]
 8014004:	f00f fee2 	bl	8023dcc <mg_match>
 8014008:	b120      	cbz	r0, 8014014 <dashboard+0x26c>
			handle_activete_and_reboot(c, hm);
 801400a:	4621      	mov	r1, r4
 801400c:	4628      	mov	r0, r5
 801400e:	f7ff fd45 	bl	8013a9c <handle_activete_and_reboot>
 8014012:	e6e6      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8014014:	ae26      	add	r6, sp, #152	@ 0x98
 8014016:	4923      	ldr	r1, [pc, #140]	@ (80140a4 <dashboard+0x2fc>)
 8014018:	4630      	mov	r0, r6
 801401a:	f00f fcb5 	bl	8023988 <mg_str_s>
 801401e:	2300      	movs	r3, #0
 8014020:	9300      	str	r3, [sp, #0]
 8014022:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014026:	68e1      	ldr	r1, [r4, #12]
 8014028:	68a0      	ldr	r0, [r4, #8]
 801402a:	f00f fecf 	bl	8023dcc <mg_match>
 801402e:	b120      	cbz	r0, 801403a <dashboard+0x292>
			handle_firmware_deactivate(c, hm);
 8014030:	4621      	mov	r1, r4
 8014032:	4628      	mov	r0, r5
 8014034:	f7fe fc9a 	bl	801296c <handle_firmware_deactivate>
 8014038:	e6d3      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 801403a:	ae28      	add	r6, sp, #160	@ 0xa0
 801403c:	491a      	ldr	r1, [pc, #104]	@ (80140a8 <dashboard+0x300>)
 801403e:	4630      	mov	r0, r6
 8014040:	f00f fca2 	bl	8023988 <mg_str_s>
 8014044:	2300      	movs	r3, #0
 8014046:	9300      	str	r3, [sp, #0]
 8014048:	e896 000c 	ldmia.w	r6, {r2, r3}
 801404c:	68e1      	ldr	r1, [r4, #12]
 801404e:	68a0      	ldr	r0, [r4, #8]
 8014050:	f00f febc 	bl	8023dcc <mg_match>
 8014054:	b350      	cbz	r0, 80140ac <dashboard+0x304>
			 handle_web_files_remove(c, hm);
 8014056:	4621      	mov	r1, r4
 8014058:	4628      	mov	r0, r5
 801405a:	f7fe fcc3 	bl	80129e4 <handle_web_files_remove>
 801405e:	e6c0      	b.n	8013de2 <dashboard+0x3a>
 8014060:	08036b48 	.word	0x08036b48
 8014064:	08036b50 	.word	0x08036b50
 8014068:	08036b68 	.word	0x08036b68
 801406c:	08036b58 	.word	0x08036b58
 8014070:	0803606c 	.word	0x0803606c
 8014074:	08036b74 	.word	0x08036b74
 8014078:	08036b80 	.word	0x08036b80
 801407c:	08036b90 	.word	0x08036b90
 8014080:	08036ba0 	.word	0x08036ba0
 8014084:	08036bb4 	.word	0x08036bb4
 8014088:	08036bc8 	.word	0x08036bc8
 801408c:	08036bd8 	.word	0x08036bd8
 8014090:	08036bec 	.word	0x08036bec
 8014094:	08036c00 	.word	0x08036c00
 8014098:	08036c14 	.word	0x08036c14
 801409c:	08036c2c 	.word	0x08036c2c
 80140a0:	08036c40 	.word	0x08036c40
 80140a4:	08036c64 	.word	0x08036c64
 80140a8:	08036c80 	.word	0x08036c80
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 80140ac:	ae2a      	add	r6, sp, #168	@ 0xa8
 80140ae:	491d      	ldr	r1, [pc, #116]	@ (8014124 <dashboard+0x37c>)
 80140b0:	4630      	mov	r0, r6
 80140b2:	f00f fc69 	bl	8023988 <mg_str_s>
 80140b6:	2300      	movs	r3, #0
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	e896 000c 	ldmia.w	r6, {r2, r3}
 80140be:	68e1      	ldr	r1, [r4, #12]
 80140c0:	68a0      	ldr	r0, [r4, #8]
 80140c2:	f00f fe83 	bl	8023dcc <mg_match>
 80140c6:	b140      	cbz	r0, 80140da <dashboard+0x332>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 80140c8:	4b17      	ldr	r3, [pc, #92]	@ (8014128 <dashboard+0x380>)
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	4b17      	ldr	r3, [pc, #92]	@ (801412c <dashboard+0x384>)
 80140ce:	4a18      	ldr	r2, [pc, #96]	@ (8014130 <dashboard+0x388>)
 80140d0:	4621      	mov	r1, r4
 80140d2:	4628      	mov	r0, r5
 80140d4:	f012 f8d0 	bl	8026278 <mg_http_upload>
 80140d8:	e683      	b.n	8013de2 <dashboard+0x3a>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 80140da:	ae2c      	add	r6, sp, #176	@ 0xb0
 80140dc:	4915      	ldr	r1, [pc, #84]	@ (8014134 <dashboard+0x38c>)
 80140de:	4630      	mov	r0, r6
 80140e0:	f00f fc52 	bl	8023988 <mg_str_s>
 80140e4:	2300      	movs	r3, #0
 80140e6:	9300      	str	r3, [sp, #0]
 80140e8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80140ec:	68e1      	ldr	r1, [r4, #12]
 80140ee:	68a0      	ldr	r0, [r4, #8]
 80140f0:	f00f fe6c 	bl	8023dcc <mg_match>
 80140f4:	b120      	cbz	r0, 8014100 <dashboard+0x358>
			 handle_fs_mkdir(c, hm);
 80140f6:	4621      	mov	r1, r4
 80140f8:	4628      	mov	r0, r5
 80140fa:	f7ff fd57 	bl	8013bac <handle_fs_mkdir>
 80140fe:	e670      	b.n	8013de2 <dashboard+0x3a>
			struct mg_http_serve_opts opts = {
 8014100:	2300      	movs	r3, #0
 8014102:	9302      	str	r3, [sp, #8]
 8014104:	9303      	str	r3, [sp, #12]
 8014106:	9304      	str	r3, [sp, #16]
 8014108:	9305      	str	r3, [sp, #20]
 801410a:	9306      	str	r3, [sp, #24]
 801410c:	9307      	str	r3, [sp, #28]
 801410e:	4b07      	ldr	r3, [pc, #28]	@ (801412c <dashboard+0x384>)
 8014110:	9302      	str	r3, [sp, #8]
 8014112:	4b07      	ldr	r3, [pc, #28]	@ (8014130 <dashboard+0x388>)
 8014114:	9307      	str	r3, [sp, #28]
			mg_http_serve_dir(c, ev_data, &opts);
 8014116:	aa02      	add	r2, sp, #8
 8014118:	4621      	mov	r1, r4
 801411a:	4628      	mov	r0, r5
 801411c:	f011 ffc6 	bl	80260ac <mg_http_serve_dir>
}
 8014120:	e65f      	b.n	8013de2 <dashboard+0x3a>
 8014122:	bf00      	nop
 8014124:	08036c9c 	.word	0x08036c9c
 8014128:	0016e360 	.word	0x0016e360
 801412c:	080355e8 	.word	0x080355e8
 8014130:	200000a0 	.word	0x200000a0
 8014134:	08036cb8 	.word	0x08036cb8

08014138 <dash_hdl>:

void * dash_hdl (void){
 8014138:	b508      	push	{r3, lr}

	load_users(user_cred_file, web_users, user_list_size);
 801413a:	220a      	movs	r2, #10
 801413c:	4902      	ldr	r1, [pc, #8]	@ (8014148 <dash_hdl+0x10>)
 801413e:	4803      	ldr	r0, [pc, #12]	@ (801414c <dash_hdl+0x14>)
 8014140:	f7ff fc56 	bl	80139f0 <load_users>

	return &dashboard;
}
 8014144:	4802      	ldr	r0, [pc, #8]	@ (8014150 <dash_hdl+0x18>)
 8014146:	bd08      	pop	{r3, pc}
 8014148:	20001a58 	.word	0x20001a58
 801414c:	08035644 	.word	0x08035644
 8014150:	08013da9 	.word	0x08013da9

08014154 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
    r_w_parameter = func;
 8014154:	4b01      	ldr	r3, [pc, #4]	@ (801415c <reg_parameter_handler+0x8>)
 8014156:	6018      	str	r0, [r3, #0]
}
 8014158:	4770      	bx	lr
 801415a:	bf00      	nop
 801415c:	200020f4 	.word	0x200020f4

08014160 <_ZL18mqtt_timer_handlerPv>:
	}
}

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
	if (!mqtt_conn){
 8014160:	4b1a      	ldr	r3, [pc, #104]	@ (80141cc <_ZL18mqtt_timer_handlerPv+0x6c>)
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	b103      	cbz	r3, 8014168 <_ZL18mqtt_timer_handlerPv+0x8>
 8014166:	4770      	bx	lr
static void mqtt_timer_handler(void *arg){
 8014168:	b530      	push	{r4, r5, lr}
 801416a:	b085      	sub	sp, #20
		logging(L_INFO, "Try to connect to MQTT server");
 801416c:	4918      	ldr	r1, [pc, #96]	@ (80141d0 <_ZL18mqtt_timer_handlerPv+0x70>)
 801416e:	2001      	movs	r0, #1
 8014170:	f7fd fe1e 	bl	8011db0 <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 8014174:	4c17      	ldr	r4, [pc, #92]	@ (80141d4 <_ZL18mqtt_timer_handlerPv+0x74>)
 8014176:	2240      	movs	r2, #64	@ 0x40
 8014178:	2100      	movs	r1, #0
 801417a:	4620      	mov	r0, r4
 801417c:	f017 ff38 	bl	802bff0 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 8014180:	ad02      	add	r5, sp, #8
 8014182:	4b15      	ldr	r3, [pc, #84]	@ (80141d8 <_ZL18mqtt_timer_handlerPv+0x78>)
 8014184:	6819      	ldr	r1, [r3, #0]
 8014186:	4628      	mov	r0, r5
 8014188:	f00f fbfe 	bl	8023988 <mg_str_s>
 801418c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014190:	e884 0003 	stmia.w	r4, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 8014194:	4b11      	ldr	r3, [pc, #68]	@ (80141dc <_ZL18mqtt_timer_handlerPv+0x7c>)
 8014196:	6819      	ldr	r1, [r3, #0]
 8014198:	4628      	mov	r0, r5
 801419a:	f00f fbf5 	bl	8023988 <mg_str_s>
 801419e:	f104 0308 	add.w	r3, r4, #8
 80141a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80141a6:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 80141aa:	233c      	movs	r3, #60	@ 0x3c
 80141ac:	8563      	strh	r3, [r4, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 80141ae:	2300      	movs	r3, #0
 80141b0:	9300      	str	r3, [sp, #0]
 80141b2:	4b0b      	ldr	r3, [pc, #44]	@ (80141e0 <_ZL18mqtt_timer_handlerPv+0x80>)
 80141b4:	4622      	mov	r2, r4
 80141b6:	490b      	ldr	r1, [pc, #44]	@ (80141e4 <_ZL18mqtt_timer_handlerPv+0x84>)
 80141b8:	6809      	ldr	r1, [r1, #0]
 80141ba:	480b      	ldr	r0, [pc, #44]	@ (80141e8 <_ZL18mqtt_timer_handlerPv+0x88>)
 80141bc:	6800      	ldr	r0, [r0, #0]
 80141be:	f014 f91b 	bl	80283f8 <mg_mqtt_connect>
 80141c2:	4b02      	ldr	r3, [pc, #8]	@ (80141cc <_ZL18mqtt_timer_handlerPv+0x6c>)
 80141c4:	6018      	str	r0, [r3, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 80141c6:	b005      	add	sp, #20
 80141c8:	bd30      	pop	{r4, r5, pc}
 80141ca:	bf00      	nop
 80141cc:	20002118 	.word	0x20002118
 80141d0:	08036cd4 	.word	0x08036cd4
 80141d4:	2000211c 	.word	0x2000211c
 80141d8:	20002170 	.word	0x20002170
 80141dc:	2000216c 	.word	0x2000216c
 80141e0:	0801473d 	.word	0x0801473d
 80141e4:	20002174 	.word	0x20002174
 80141e8:	20002160 	.word	0x20002160

080141ec <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 80141ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f0:	b085      	sub	sp, #20
 80141f2:	4681      	mov	r9, r0
 80141f4:	4688      	mov	r8, r1
 80141f6:	4692      	mov	sl, r2
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 80141f8:	4c2a      	ldr	r4, [pc, #168]	@ (80142a4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xb8>)
 80141fa:	f100 0308 	add.w	r3, r0, #8
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	4b29      	ldr	r3, [pc, #164]	@ (80142a8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xbc>)
 8014202:	4a2a      	ldr	r2, [pc, #168]	@ (80142ac <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc0>)
 8014204:	2128      	movs	r1, #40	@ 0x28
 8014206:	6820      	ldr	r0, [r4, #0]
 8014208:	f00e fd34 	bl	8022c74 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 801420c:	6824      	ldr	r4, [r4, #0]
 801420e:	4620      	mov	r0, r4
 8014210:	f7fc f846 	bl	80102a0 <strlen>
 8014214:	4601      	mov	r1, r0
 8014216:	4620      	mov	r0, r4
 8014218:	f000 fbe0 	bl	80149dc <set_device_conf_ip>
	for (size_t i = 0; i < sensor_count; i++) {
 801421c:	2600      	movs	r6, #0
 801421e:	e03b      	b.n	8014298 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xac>
	        int sensor_type = sensors[i].sensor_type;
 8014220:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8014224:	f818 4036 	ldrb.w	r4, [r8, r6, lsl #3]
 8014228:	791d      	ldrb	r5, [r3, #4]
 801422a:	4f21      	ldr	r7, [pc, #132]	@ (80142b0 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc4>)
 801422c:	462b      	mov	r3, r5
 801422e:	4622      	mov	r2, r4
 8014230:	2180      	movs	r1, #128	@ 0x80
 8014232:	6838      	ldr	r0, [r7, #0]
 8014234:	f000 fbf0 	bl	8014a18 <get_config_topik_string>
			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8014238:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80142bc <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xd0>
 801423c:	462b      	mov	r3, r5
 801423e:	4622      	mov	r2, r4
 8014240:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014244:	f8db 0000 	ldr.w	r0, [fp]
 8014248:	f000 fc96 	bl	8014b78 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 801424c:	4d19      	ldr	r5, [pc, #100]	@ (80142b4 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xc8>)
 801424e:	ac02      	add	r4, sp, #8
 8014250:	6839      	ldr	r1, [r7, #0]
 8014252:	4620      	mov	r0, r4
 8014254:	f00f fb98 	bl	8023988 <mg_str_s>
 8014258:	f105 0318 	add.w	r3, r5, #24
 801425c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014260:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8014264:	f8db 1000 	ldr.w	r1, [fp]
 8014268:	4620      	mov	r0, r4
 801426a:	f00f fb8d 	bl	8023988 <mg_str_s>
 801426e:	f105 0320 	add.w	r3, r5, #32
 8014272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014276:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 801427a:	2401      	movs	r4, #1
 801427c:	f885 4028 	strb.w	r4, [r5, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8014280:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014284:	4629      	mov	r1, r5
 8014286:	4648      	mov	r0, r9
 8014288:	f012 fe1c 	bl	8026ec4 <mg_mqtt_pub>
			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	490a      	ldr	r1, [pc, #40]	@ (80142b8 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xcc>)
 8014290:	4620      	mov	r0, r4
 8014292:	f7fd fd8d 	bl	8011db0 <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8014296:	4426      	add	r6, r4
 8014298:	4556      	cmp	r6, sl
 801429a:	d3c1      	bcc.n	8014220 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x34>
}
 801429c:	b005      	add	sp, #20
 801429e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a2:	bf00      	nop
 80142a4:	20002114 	.word	0x20002114
 80142a8:	08025709 	.word	0x08025709
 80142ac:	08036450 	.word	0x08036450
 80142b0:	20002168 	.word	0x20002168
 80142b4:	2000211c 	.word	0x2000211c
 80142b8:	08036cf4 	.word	0x08036cf4
 80142bc:	20002164 	.word	0x20002164

080142c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:
static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 80142c0:	b570      	push	{r4, r5, r6, lr}
 80142c2:	b084      	sub	sp, #16
	int relay_number = 0;  // Переменная для хранения номера реле
 80142c4:	2300      	movs	r3, #0
 80142c6:	9301      	str	r3, [sp, #4]
    const char *topic = mess->topic.buf;
 80142c8:	6805      	ldr	r5, [r0, #0]
    const char *message = mess->data.buf;
 80142ca:	6886      	ldr	r6, [r0, #8]
    if(message == NULL || topic == NULL){
 80142cc:	b326      	cbz	r6, 8014318 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
 80142ce:	4604      	mov	r4, r0
 80142d0:	b315      	cbz	r5, 8014318 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x58>
    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 80142d2:	4b71      	ldr	r3, [pc, #452]	@ (8014498 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	2200      	movs	r2, #0
 80142d8:	2102      	movs	r1, #2
 80142da:	a803      	add	r0, sp, #12
 80142dc:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 80142de:	9b03      	ldr	r3, [sp, #12]
 80142e0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80142e4:	0c1b      	lsrs	r3, r3, #16
 80142e6:	f88d 300a 	strb.w	r3, [sp, #10]
    const char *switch_position = strstr(topic, "switch");
 80142ea:	496c      	ldr	r1, [pc, #432]	@ (801449c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1dc>)
 80142ec:	4628      	mov	r0, r5
 80142ee:	f017 feff 	bl	802c0f0 <strstr>
    if (switch_position != NULL) {
 80142f2:	2800      	cmp	r0, #0
 80142f4:	f000 80ba 	beq.w	801446c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ac>
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 80142f8:	aa01      	add	r2, sp, #4
 80142fa:	4969      	ldr	r1, [pc, #420]	@ (80144a0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e0>)
 80142fc:	f017 fad6 	bl	802b8ac <sscanf>
 8014300:	2801      	cmp	r0, #1
 8014302:	d018      	beq.n	8014336 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x76>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014304:	4b67      	ldr	r3, [pc, #412]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	f300 80a5 	bgt.w	8014458 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x198>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 801430e:	4966      	ldr	r1, [pc, #408]	@ (80144a8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e8>)
 8014310:	2003      	movs	r0, #3
 8014312:	f7fd fd4d 	bl	8011db0 <logging>
 8014316:	e0b2      	b.n	801447e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8014318:	4b62      	ldr	r3, [pc, #392]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	2b00      	cmp	r3, #0
 801431e:	f340 80ae 	ble.w	801447e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
 8014322:	4b62      	ldr	r3, [pc, #392]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014324:	2292      	movs	r2, #146	@ 0x92
 8014326:	4962      	ldr	r1, [pc, #392]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014328:	2001      	movs	r0, #1
 801432a:	f011 fa65 	bl	80257f8 <mg_log_prefix>
 801432e:	4861      	ldr	r0, [pc, #388]	@ (80144b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f4>)
 8014330:	f00f f94c 	bl	80235cc <mg_log>
    	return;
 8014334:	e0a3      	b.n	801447e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8014336:	4b5b      	ldr	r3, [pc, #364]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	2b01      	cmp	r3, #1
 801433c:	dc18      	bgt.n	8014370 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb0>
    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 801433e:	462b      	mov	r3, r5
 8014340:	9a01      	ldr	r2, [sp, #4]
 8014342:	495d      	ldr	r1, [pc, #372]	@ (80144b8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f8>)
 8014344:	2001      	movs	r0, #1
 8014346:	f7fd fd33 	bl	8011db0 <logging>
    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 801434a:	9d01      	ldr	r5, [sp, #4]
 801434c:	1e6b      	subs	r3, r5, #1
 801434e:	2b02      	cmp	r3, #2
 8014350:	d81a      	bhi.n	8014388 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xc8>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 8014352:	68e4      	ldr	r4, [r4, #12]
 8014354:	2c02      	cmp	r4, #2
 8014356:	d02e      	beq.n	80143b6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xf6>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8014358:	2c03      	cmp	r4, #3
 801435a:	d04f      	beq.n	80143fc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x13c>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 801435c:	4b51      	ldr	r3, [pc, #324]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	dc6e      	bgt.n	8014442 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x182>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 8014364:	4632      	mov	r2, r6
 8014366:	4955      	ldr	r1, [pc, #340]	@ (80144bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8014368:	2003      	movs	r0, #3
 801436a:	f7fd fd21 	bl	8011db0 <logging>
 801436e:	e086      	b.n	801447e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 8014370:	4b4e      	ldr	r3, [pc, #312]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014372:	229f      	movs	r2, #159	@ 0x9f
 8014374:	494e      	ldr	r1, [pc, #312]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014376:	2002      	movs	r0, #2
 8014378:	f011 fa3e 	bl	80257f8 <mg_log_prefix>
 801437c:	462a      	mov	r2, r5
 801437e:	9901      	ldr	r1, [sp, #4]
 8014380:	484f      	ldr	r0, [pc, #316]	@ (80144c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x200>)
 8014382:	f00f f923 	bl	80235cc <mg_log>
 8014386:	e7da      	b.n	801433e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x7e>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 8014388:	4b46      	ldr	r3, [pc, #280]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2b00      	cmp	r3, #0
 801438e:	dc06      	bgt.n	801439e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xde>
    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 8014390:	9b01      	ldr	r3, [sp, #4]
 8014392:	2203      	movs	r2, #3
 8014394:	494b      	ldr	r1, [pc, #300]	@ (80144c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 8014396:	4610      	mov	r0, r2
 8014398:	f7fd fd0a 	bl	8011db0 <logging>
    			return;
 801439c:	e06f      	b.n	801447e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 801439e:	4b43      	ldr	r3, [pc, #268]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80143a0:	22a4      	movs	r2, #164	@ 0xa4
 80143a2:	4943      	ldr	r1, [pc, #268]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80143a4:	2001      	movs	r0, #1
 80143a6:	f011 fa27 	bl	80257f8 <mg_log_prefix>
 80143aa:	9a01      	ldr	r2, [sp, #4]
 80143ac:	2103      	movs	r1, #3
 80143ae:	4845      	ldr	r0, [pc, #276]	@ (80144c4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x204>)
 80143b0:	f00f f90c 	bl	80235cc <mg_log>
 80143b4:	e7ec      	b.n	8014390 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xd0>
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 80143b6:	2202      	movs	r2, #2
 80143b8:	4943      	ldr	r1, [pc, #268]	@ (80144c8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x208>)
 80143ba:	4630      	mov	r0, r6
 80143bc:	f017 fe4d 	bl	802c05a <strncmp>
 80143c0:	2800      	cmp	r0, #0
 80143c2:	d1c9      	bne.n	8014358 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x98>
				sw_w[relay_number-1] = 1;
 80143c4:	f105 030f 	add.w	r3, r5, #15
 80143c8:	446b      	add	r3, sp
 80143ca:	2201      	movs	r2, #1
 80143cc:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 80143d0:	4b34      	ldr	r3, [pc, #208]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4293      	cmp	r3, r2
 80143d6:	dc06      	bgt.n	80143e6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x126>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80143d8:	4b2f      	ldr	r3, [pc, #188]	@ (8014498 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	2201      	movs	r2, #1
 80143de:	2102      	movs	r1, #2
 80143e0:	a802      	add	r0, sp, #8
 80143e2:	4798      	blx	r3
 80143e4:	e04b      	b.n	801447e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is ON.\n", relay_number));
 80143e6:	4b31      	ldr	r3, [pc, #196]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 80143e8:	22ae      	movs	r2, #174	@ 0xae
 80143ea:	4931      	ldr	r1, [pc, #196]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 80143ec:	2002      	movs	r0, #2
 80143ee:	f011 fa03 	bl	80257f8 <mg_log_prefix>
 80143f2:	9901      	ldr	r1, [sp, #4]
 80143f4:	4835      	ldr	r0, [pc, #212]	@ (80144cc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>)
 80143f6:	f00f f8e9 	bl	80235cc <mg_log>
 80143fa:	e7ed      	b.n	80143d8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x118>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 80143fc:	2203      	movs	r2, #3
 80143fe:	4934      	ldr	r1, [pc, #208]	@ (80144d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x210>)
 8014400:	4630      	mov	r0, r6
 8014402:	f017 fe2a 	bl	802c05a <strncmp>
 8014406:	2800      	cmp	r0, #0
 8014408:	d1a8      	bne.n	801435c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x9c>
				sw_w[relay_number-1] = 0;
 801440a:	f105 030f 	add.w	r3, r5, #15
 801440e:	446b      	add	r3, sp
 8014410:	2200      	movs	r2, #0
 8014412:	f803 2c08 	strb.w	r2, [r3, #-8]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8014416:	4b23      	ldr	r3, [pc, #140]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2b01      	cmp	r3, #1
 801441c:	dc06      	bgt.n	801442c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x16c>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 801441e:	4b1e      	ldr	r3, [pc, #120]	@ (8014498 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1d8>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2201      	movs	r2, #1
 8014424:	2102      	movs	r1, #2
 8014426:	a802      	add	r0, sp, #8
 8014428:	4798      	blx	r3
 801442a:	e028      	b.n	801447e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1be>
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 801442c:	4b1f      	ldr	r3, [pc, #124]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801442e:	22b2      	movs	r2, #178	@ 0xb2
 8014430:	491f      	ldr	r1, [pc, #124]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014432:	2002      	movs	r0, #2
 8014434:	f011 f9e0 	bl	80257f8 <mg_log_prefix>
 8014438:	9901      	ldr	r1, [sp, #4]
 801443a:	4826      	ldr	r0, [pc, #152]	@ (80144d4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x214>)
 801443c:	f00f f8c6 	bl	80235cc <mg_log>
 8014440:	e7ed      	b.n	801441e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x15e>
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 8014442:	4b1a      	ldr	r3, [pc, #104]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014444:	22b6      	movs	r2, #182	@ 0xb6
 8014446:	491a      	ldr	r1, [pc, #104]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014448:	2001      	movs	r0, #1
 801444a:	f011 f9d5 	bl	80257f8 <mg_log_prefix>
 801444e:	4631      	mov	r1, r6
 8014450:	481a      	ldr	r0, [pc, #104]	@ (80144bc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1fc>)
 8014452:	f00f f8bb 	bl	80235cc <mg_log>
 8014456:	e785      	b.n	8014364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xa4>
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 8014458:	4b14      	ldr	r3, [pc, #80]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 801445a:	22bb      	movs	r2, #187	@ 0xbb
 801445c:	4914      	ldr	r1, [pc, #80]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 801445e:	2001      	movs	r0, #1
 8014460:	f011 f9ca 	bl	80257f8 <mg_log_prefix>
 8014464:	481c      	ldr	r0, [pc, #112]	@ (80144d8 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>)
 8014466:	f00f f8b1 	bl	80235cc <mg_log>
 801446a:	e750      	b.n	801430e <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x4e>
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 801446c:	4b0d      	ldr	r3, [pc, #52]	@ (80144a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e4>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	dc06      	bgt.n	8014482 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c2>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 8014474:	462a      	mov	r2, r5
 8014476:	4919      	ldr	r1, [pc, #100]	@ (80144dc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8014478:	2003      	movs	r0, #3
 801447a:	f7fd fc99 	bl	8011db0 <logging>
}
 801447e:	b004      	add	sp, #16
 8014480:	bd70      	pop	{r4, r5, r6, pc}
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8014482:	4b0a      	ldr	r3, [pc, #40]	@ (80144ac <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1ec>)
 8014484:	22bf      	movs	r2, #191	@ 0xbf
 8014486:	490a      	ldr	r1, [pc, #40]	@ (80144b0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>)
 8014488:	2001      	movs	r0, #1
 801448a:	f011 f9b5 	bl	80257f8 <mg_log_prefix>
 801448e:	4629      	mov	r1, r5
 8014490:	4812      	ldr	r0, [pc, #72]	@ (80144dc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21c>)
 8014492:	f00f f89b 	bl	80235cc <mg_log>
 8014496:	e7ed      	b.n	8014474 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1b4>
 8014498:	20002100 	.word	0x20002100
 801449c:	08036d88 	.word	0x08036d88
 80144a0:	08036d90 	.word	0x08036d90
 80144a4:	2000012c 	.word	0x2000012c
 80144a8:	08036ee4 	.word	0x08036ee4
 80144ac:	08036d18 	.word	0x08036d18
 80144b0:	08036d38 	.word	0x08036d38
 80144b4:	08036d64 	.word	0x08036d64
 80144b8:	08036dc8 	.word	0x08036dc8
 80144bc:	08036e70 	.word	0x08036e70
 80144c0:	08036d9c 	.word	0x08036d9c
 80144c4:	08036df0 	.word	0x08036df0
 80144c8:	08036e40 	.word	0x08036e40
 80144cc:	08036e44 	.word	0x08036e44
 80144d0:	08036e58 	.word	0x08036e58
 80144d4:	08036e5c 	.word	0x08036e5c
 80144d8:	08036eac 	.word	0x08036eac
 80144dc:	08036f1c 	.word	0x08036f1c

080144e0 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 80144e0:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 80144e2:	fb01 f400 	mul.w	r4, r1, r0
 80144e6:	4620      	mov	r0, r4
 80144e8:	f005 fdf6 	bl	801a0d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 80144ec:	4605      	mov	r5, r0
 80144ee:	b118      	cbz	r0, 80144f8 <_ZL9my_callocjj+0x18>
 80144f0:	4622      	mov	r2, r4
 80144f2:	2100      	movs	r1, #0
 80144f4:	f017 fd7c 	bl	802bff0 <memset>
  return p;
}
 80144f8:	4628      	mov	r0, r5
 80144fa:	bd38      	pop	{r3, r4, r5, pc}

080144fc <_ZL19mqtt_send_io_statusP13mg_connectionb>:
static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 80144fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014500:	b087      	sub	sp, #28
 8014502:	4607      	mov	r7, r0
 8014504:	460c      	mov	r4, r1
	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8014506:	4d58      	ldr	r5, [pc, #352]	@ (8014668 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x16c>)
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	2200      	movs	r2, #0
 801450c:	2101      	movs	r1, #1
 801450e:	a804      	add	r0, sp, #16
 8014510:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8014512:	682b      	ldr	r3, [r5, #0]
 8014514:	2200      	movs	r2, #0
 8014516:	2102      	movs	r1, #2
 8014518:	f10d 0013 	add.w	r0, sp, #19
 801451c:	4798      	blx	r3
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 801451e:	2203      	movs	r2, #3
 8014520:	4952      	ldr	r1, [pc, #328]	@ (801466c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014522:	a804      	add	r0, sp, #16
 8014524:	f017 fcd0 	bl	802bec8 <memcmp>
 8014528:	b948      	cbnz	r0, 801453e <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 801452a:	2203      	movs	r2, #3
 801452c:	4950      	ldr	r1, [pc, #320]	@ (8014670 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x174>)
 801452e:	f10d 0013 	add.w	r0, sp, #19
 8014532:	f017 fcc9 	bl	802bec8 <memcmp>
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8014536:	b910      	cbnz	r0, 801453e <_ZL19mqtt_send_io_statusP13mg_connectionb+0x42>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8014538:	2c00      	cmp	r4, #0
 801453a:	f000 8091 	beq.w	8014660 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x164>
		memcpy(&prev_status, &status, sizeof(status));
 801453e:	4b4b      	ldr	r3, [pc, #300]	@ (801466c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x170>)
 8014540:	aa06      	add	r2, sp, #24
 8014542:	e912 0003 	ldmdb	r2, {r0, r1}
 8014546:	6018      	str	r0, [r3, #0]
 8014548:	8099      	strh	r1, [r3, #4]
		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 801454a:	2101      	movs	r1, #1
 801454c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014550:	f7ff ffc6 	bl	80144e0 <_ZL9my_callocjj>
 8014554:	4606      	mov	r6, r0
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014556:	2101      	movs	r1, #1
 8014558:	2080      	movs	r0, #128	@ 0x80
 801455a:	f7ff ffc1 	bl	80144e0 <_ZL9my_callocjj>
 801455e:	4605      	mov	r5, r0
		for (i = 0; i < INPUTS_COUNT; i++){
 8014560:	2200      	movs	r2, #0
 8014562:	e038      	b.n	80145d6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0xda>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8014564:	f102 0801 	add.w	r8, r2, #1
 8014568:	fa5f f888 	uxtb.w	r8, r8
 801456c:	f102 0318 	add.w	r3, r2, #24
 8014570:	eb0d 0203 	add.w	r2, sp, r3
 8014574:	f812 3c08 	ldrb.w	r3, [r2, #-8]
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	4643      	mov	r3, r8
 801457c:	2201      	movs	r2, #1
 801457e:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8014582:	4630      	mov	r0, r6
 8014584:	f000 fcec 	bl	8014f60 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8014588:	4643      	mov	r3, r8
 801458a:	2201      	movs	r2, #1
 801458c:	2180      	movs	r1, #128	@ 0x80
 801458e:	4628      	mov	r0, r5
 8014590:	f000 fd26 	bl	8014fe0 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8014594:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8014674 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014598:	ac02      	add	r4, sp, #8
 801459a:	4629      	mov	r1, r5
 801459c:	4620      	mov	r0, r4
 801459e:	f00f f9f3 	bl	8023988 <mg_str_s>
 80145a2:	f109 0318 	add.w	r3, r9, #24
 80145a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80145aa:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 80145ae:	4631      	mov	r1, r6
 80145b0:	4620      	mov	r0, r4
 80145b2:	f00f f9e9 	bl	8023988 <mg_str_s>
 80145b6:	f109 0320 	add.w	r3, r9, #32
 80145ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80145be:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 80145c2:	2300      	movs	r3, #0
 80145c4:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 80145c8:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 80145cc:	4649      	mov	r1, r9
 80145ce:	4638      	mov	r0, r7
 80145d0:	f012 fc78 	bl	8026ec4 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 80145d4:	4642      	mov	r2, r8
 80145d6:	2a02      	cmp	r2, #2
 80145d8:	d9c4      	bls.n	8014564 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x68>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 80145da:	2200      	movs	r2, #0
 80145dc:	e038      	b.n	8014650 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x154>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 80145de:	f102 0801 	add.w	r8, r2, #1
 80145e2:	fa5f f888 	uxtb.w	r8, r8
 80145e6:	f102 0318 	add.w	r3, r2, #24
 80145ea:	eb0d 0203 	add.w	r2, sp, r3
 80145ee:	f812 3c05 	ldrb.w	r3, [r2, #-5]
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	4643      	mov	r3, r8
 80145f6:	2202      	movs	r2, #2
 80145f8:	f44f 7116 	mov.w	r1, #600	@ 0x258
 80145fc:	4630      	mov	r0, r6
 80145fe:	f000 fcaf 	bl	8014f60 <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8014602:	4643      	mov	r3, r8
 8014604:	2202      	movs	r2, #2
 8014606:	2180      	movs	r1, #128	@ 0x80
 8014608:	4628      	mov	r0, r5
 801460a:	f000 fce9 	bl	8014fe0 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 801460e:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8014674 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x178>
 8014612:	ac02      	add	r4, sp, #8
 8014614:	4629      	mov	r1, r5
 8014616:	4620      	mov	r0, r4
 8014618:	f00f f9b6 	bl	8023988 <mg_str_s>
 801461c:	f109 0318 	add.w	r3, r9, #24
 8014620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014624:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8014628:	4631      	mov	r1, r6
 801462a:	4620      	mov	r0, r4
 801462c:	f00f f9ac 	bl	8023988 <mg_str_s>
 8014630:	f109 0320 	add.w	r3, r9, #32
 8014634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014638:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 801463c:	2300      	movs	r3, #0
 801463e:	f889 3028 	strb.w	r3, [r9, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8014642:	f889 302e 	strb.w	r3, [r9, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8014646:	4649      	mov	r1, r9
 8014648:	4638      	mov	r0, r7
 801464a:	f012 fc3b 	bl	8026ec4 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 801464e:	4642      	mov	r2, r8
 8014650:	2a02      	cmp	r2, #2
 8014652:	d9c4      	bls.n	80145de <_ZL19mqtt_send_io_statusP13mg_connectionb+0xe2>
		free(payload);
 8014654:	4630      	mov	r0, r6
 8014656:	f005 fdc1 	bl	801a1dc <vPortFree>
		free(topik);
 801465a:	4628      	mov	r0, r5
 801465c:	f005 fdbe 	bl	801a1dc <vPortFree>
}
 8014660:	b007      	add	sp, #28
 8014662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014666:	bf00      	nop
 8014668:	20002100 	.word	0x20002100
 801466c:	200020f8 	.word	0x200020f8
 8014670:	200020fb 	.word	0x200020fb
 8014674:	2000211c 	.word	0x2000211c

08014678 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8014678:	b508      	push	{r3, lr}
	if(mqtt_conn && is_registered){
 801467a:	4b05      	ldr	r3, [pc, #20]	@ (8014690 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x18>)
 801467c:	6818      	ldr	r0, [r3, #0]
 801467e:	b110      	cbz	r0, 8014686 <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014680:	4b04      	ldr	r3, [pc, #16]	@ (8014694 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x1c>)
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	b903      	cbnz	r3, 8014688 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x10>
		mqtt_send_io_status(mqtt_conn, 0);
	}
}
 8014686:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 0);
 8014688:	2100      	movs	r1, #0
 801468a:	f7ff ff37 	bl	80144fc <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 801468e:	e7fa      	b.n	8014686 <_ZL33mqtt_timer_handler_cher_io_statusPv+0xe>
 8014690:	20002118 	.word	0x20002118
 8014694:	20002104 	.word	0x20002104

08014698 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:
static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8014698:	b508      	push	{r3, lr}
	if(is_registered){
 801469a:	4b05      	ldr	r3, [pc, #20]	@ (80146b0 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x18>)
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	b903      	cbnz	r3, 80146a2 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0xa>
}
 80146a0:	bd08      	pop	{r3, pc}
		mqtt_send_io_status(mqtt_conn, 1);
 80146a2:	2101      	movs	r1, #1
 80146a4:	4b03      	ldr	r3, [pc, #12]	@ (80146b4 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>)
 80146a6:	6818      	ldr	r0, [r3, #0]
 80146a8:	f7ff ff28 	bl	80144fc <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 80146ac:	e7f8      	b.n	80146a0 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x8>
 80146ae:	bf00      	nop
 80146b0:	20002104 	.word	0x20002104
 80146b4:	20002118 	.word	0x20002118

080146b8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:
static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 80146b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146bc:	b083      	sub	sp, #12
 80146be:	4681      	mov	r9, r0
 80146c0:	460d      	mov	r5, r1
 80146c2:	4616      	mov	r6, r2
	for (size_t i = 0; i < sensor_count; i++) {
 80146c4:	2400      	movs	r4, #0
 80146c6:	e000      	b.n	80146ca <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x12>
 80146c8:	3401      	adds	r4, #1
 80146ca:	42b4      	cmp	r4, r6
 80146cc:	d22e      	bcs.n	801472c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x74>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 80146ce:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
 80146d2:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80146d6:	2b02      	cmp	r3, #2
 80146d8:	d1f6      	bne.n	80146c8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80146da:	2101      	movs	r1, #1
 80146dc:	2080      	movs	r0, #128	@ 0x80
 80146de:	f7ff feff 	bl	80144e0 <_ZL9my_callocjj>
 80146e2:	4607      	mov	r7, r0
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 80146e4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80146e8:	2202      	movs	r2, #2
 80146ea:	2180      	movs	r1, #128	@ 0x80
 80146ec:	f000 fc60 	bl	8014fb0 <generate_comand_topik_for_subscrabe>
			mqtt_opts.qos = 1;
 80146f0:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8014738 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x80>
 80146f4:	f04f 0b01 	mov.w	fp, #1
 80146f8:	f888 b028 	strb.w	fp, [r8, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 80146fc:	46ea      	mov	sl, sp
 80146fe:	4639      	mov	r1, r7
 8014700:	4650      	mov	r0, sl
 8014702:	f00f f941 	bl	8023988 <mg_str_s>
 8014706:	f108 0318 	add.w	r3, r8, #24
 801470a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801470e:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 8014712:	4641      	mov	r1, r8
 8014714:	4648      	mov	r0, r9
 8014716:	f012 fb87 	bl	8026e28 <mg_mqtt_sub>
			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 801471a:	463a      	mov	r2, r7
 801471c:	4905      	ldr	r1, [pc, #20]	@ (8014734 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7c>)
 801471e:	4658      	mov	r0, fp
 8014720:	f7fd fb46 	bl	8011db0 <logging>
			free(topik);
 8014724:	4638      	mov	r0, r7
 8014726:	f005 fd59 	bl	801a1dc <vPortFree>
 801472a:	e7cd      	b.n	80146c8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x10>
}
 801472c:	b003      	add	sp, #12
 801472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014732:	bf00      	nop
 8014734:	08036f4c 	.word	0x08036f4c
 8014738:	2000211c 	.word	0x2000211c

0801473c <_ZL18mqtt_event_handlerP13mg_connectioniPv>:
static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 801473c:	b570      	push	{r4, r5, r6, lr}
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 801473e:	2910      	cmp	r1, #16
 8014740:	d031      	beq.n	80147a6 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x6a>
 8014742:	4605      	mov	r5, r0
 8014744:	2911      	cmp	r1, #17
 8014746:	d002      	beq.n	801474e <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x12>
 8014748:	2909      	cmp	r1, #9
 801474a:	d03a      	beq.n	80147c2 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x86>
}
 801474c:	bd70      	pop	{r4, r5, r6, pc}
		MG_DEBUG(("MQTT_open_connection"));
 801474e:	4b22      	ldr	r3, [pc, #136]	@ (80147d8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9c>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	2b02      	cmp	r3, #2
 8014754:	dc1d      	bgt.n	8014792 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x56>
		logging(L_INFO, "MQTT Open connection");
 8014756:	4921      	ldr	r1, [pc, #132]	@ (80147dc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa0>)
 8014758:	2001      	movs	r0, #1
 801475a:	f7fd fb29 	bl	8011db0 <logging>
		mqtt_conn = conn;
 801475e:	4b20      	ldr	r3, [pc, #128]	@ (80147e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014760:	601d      	str	r5, [r3, #0]
		if(!is_registered){
 8014762:	4b20      	ldr	r3, [pc, #128]	@ (80147e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d1f0      	bne.n	801474c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 801476a:	4e1f      	ldr	r6, [pc, #124]	@ (80147e8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xac>)
 801476c:	2206      	movs	r2, #6
 801476e:	4631      	mov	r1, r6
 8014770:	4628      	mov	r0, r5
 8014772:	f7ff fd3b 	bl	80141ec <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 8014776:	4c1a      	ldr	r4, [pc, #104]	@ (80147e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 8014778:	2101      	movs	r1, #1
 801477a:	6820      	ldr	r0, [r4, #0]
 801477c:	f7ff febe 	bl	80144fc <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8014780:	2206      	movs	r2, #6
 8014782:	4631      	mov	r1, r6
 8014784:	6820      	ldr	r0, [r4, #0]
 8014786:	f7ff ff97 	bl	80146b8 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 801478a:	4b16      	ldr	r3, [pc, #88]	@ (80147e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 801478c:	2201      	movs	r2, #1
 801478e:	701a      	strb	r2, [r3, #0]
 8014790:	e7dc      	b.n	801474c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		MG_DEBUG(("MQTT_open_connection"));
 8014792:	4b16      	ldr	r3, [pc, #88]	@ (80147ec <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb0>)
 8014794:	22cd      	movs	r2, #205	@ 0xcd
 8014796:	4916      	ldr	r1, [pc, #88]	@ (80147f0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb4>)
 8014798:	2003      	movs	r0, #3
 801479a:	f011 f82d 	bl	80257f8 <mg_log_prefix>
 801479e:	4815      	ldr	r0, [pc, #84]	@ (80147f4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xb8>)
 80147a0:	f00e ff14 	bl	80235cc <mg_log>
 80147a4:	e7d7      	b.n	8014756 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x1a>
 80147a6:	4614      	mov	r4, r2
		logging(L_INFO, "Receive message from MQTT server");
 80147a8:	4913      	ldr	r1, [pc, #76]	@ (80147f8 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbc>)
 80147aa:	2001      	movs	r0, #1
 80147ac:	f7fd fb00 	bl	8011db0 <logging>
		 mqtt_subscrabe_recv_cmd_parce(mm);
 80147b0:	4620      	mov	r0, r4
 80147b2:	f7ff fd85 	bl	80142c0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 80147b6:	2100      	movs	r1, #0
 80147b8:	4b09      	ldr	r3, [pc, #36]	@ (80147e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80147ba:	6818      	ldr	r0, [r3, #0]
 80147bc:	f7ff fe9e 	bl	80144fc <_ZL19mqtt_send_io_statusP13mg_connectionb>
 80147c0:	e7c4      	b.n	801474c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
		logging(L_INFO, "MQTT Close connection");
 80147c2:	490e      	ldr	r1, [pc, #56]	@ (80147fc <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc0>)
 80147c4:	2001      	movs	r0, #1
 80147c6:	f7fd faf3 	bl	8011db0 <logging>
		mqtt_conn     = NULL;
 80147ca:	2300      	movs	r3, #0
 80147cc:	4a04      	ldr	r2, [pc, #16]	@ (80147e0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa4>)
 80147ce:	6013      	str	r3, [r2, #0]
		is_registered = false;
 80147d0:	4a04      	ldr	r2, [pc, #16]	@ (80147e4 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xa8>)
 80147d2:	7013      	strb	r3, [r2, #0]
}
 80147d4:	e7ba      	b.n	801474c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x10>
 80147d6:	bf00      	nop
 80147d8:	2000012c 	.word	0x2000012c
 80147dc:	08036f94 	.word	0x08036f94
 80147e0:	20002118 	.word	0x20002118
 80147e4:	20002104 	.word	0x20002104
 80147e8:	200000c8 	.word	0x200000c8
 80147ec:	08036f68 	.word	0x08036f68
 80147f0:	08036d38 	.word	0x08036d38
 80147f4:	08036f7c 	.word	0x08036f7c
 80147f8:	08036fac 	.word	0x08036fac
 80147fc:	08036fd0 	.word	0x08036fd0

08014800 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
    return mqtt_conn;
}
 8014800:	4b01      	ldr	r3, [pc, #4]	@ (8014808 <get_mqtt_connection+0x8>)
 8014802:	6818      	ldr	r0, [r3, #0]
 8014804:	4770      	bx	lr
 8014806:	bf00      	nop
 8014808:	20002118 	.word	0x20002118

0801480c <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 801480c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014810:	b086      	sub	sp, #24
 8014812:	4606      	mov	r6, r0
 8014814:	460c      	mov	r4, r1
 8014816:	4691      	mov	r9, r2
 8014818:	461d      	mov	r5, r3

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 801481a:	2101      	movs	r1, #1
 801481c:	2080      	movs	r0, #128	@ 0x80
 801481e:	f7ff fe5f 	bl	80144e0 <_ZL9my_callocjj>
 8014822:	f8df a148 	ldr.w	sl, [pc, #328]	@ 801496c <mqtt_init+0x160>
 8014826:	f8ca 0000 	str.w	r0, [sl]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 801482a:	2101      	movs	r1, #1
 801482c:	2021      	movs	r0, #33	@ 0x21
 801482e:	f7ff fe57 	bl	80144e0 <_ZL9my_callocjj>
 8014832:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8014970 <mqtt_init+0x164>
 8014836:	f8c8 0000 	str.w	r0, [r8]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 801483a:	2101      	movs	r1, #1
 801483c:	2021      	movs	r0, #33	@ 0x21
 801483e:	f7ff fe4f 	bl	80144e0 <_ZL9my_callocjj>
 8014842:	4f3b      	ldr	r7, [pc, #236]	@ (8014930 <mqtt_init+0x124>)
 8014844:	6038      	str	r0, [r7, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8014846:	2101      	movs	r1, #1
 8014848:	2080      	movs	r0, #128	@ 0x80
 801484a:	f7ff fe49 	bl	80144e0 <_ZL9my_callocjj>
 801484e:	4b39      	ldr	r3, [pc, #228]	@ (8014934 <mqtt_init+0x128>)
 8014850:	6018      	str	r0, [r3, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8014852:	2101      	movs	r1, #1
 8014854:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014858:	f7ff fe42 	bl	80144e0 <_ZL9my_callocjj>
 801485c:	4b36      	ldr	r3, [pc, #216]	@ (8014938 <mqtt_init+0x12c>)
 801485e:	6018      	str	r0, [r3, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 8014860:	2101      	movs	r1, #1
 8014862:	2028      	movs	r0, #40	@ 0x28
 8014864:	f7ff fe3c 	bl	80144e0 <_ZL9my_callocjj>
 8014868:	4b34      	ldr	r3, [pc, #208]	@ (801493c <mqtt_init+0x130>)
 801486a:	6018      	str	r0, [r3, #0]
	r_w_parameter   = fn;
 801486c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801486e:	4b34      	ldr	r3, [pc, #208]	@ (8014940 <mqtt_init+0x134>)
 8014870:	601a      	str	r2, [r3, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 8014872:	f8da a000 	ldr.w	sl, [sl]
 8014876:	4649      	mov	r1, r9
 8014878:	4650      	mov	r0, sl
 801487a:	f018 fdc3 	bl	802d404 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 801487e:	f8d8 9000 	ldr.w	r9, [r8]
 8014882:	4629      	mov	r1, r5
 8014884:	4648      	mov	r0, r9
 8014886:	f018 fdbd 	bl	802d404 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 801488a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801488c:	6838      	ldr	r0, [r7, #0]
 801488e:	f018 fdb9 	bl	802d404 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 8014892:	464b      	mov	r3, r9
 8014894:	4652      	mov	r2, sl
 8014896:	492b      	ldr	r1, [pc, #172]	@ (8014944 <mqtt_init+0x138>)
 8014898:	2001      	movs	r0, #1
 801489a:	f7fd fa89 	bl	8011db0 <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 801489e:	4d2a      	ldr	r5, [pc, #168]	@ (8014948 <mqtt_init+0x13c>)
 80148a0:	602e      	str	r6, [r5, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 80148a2:	4b2a      	ldr	r3, [pc, #168]	@ (801494c <mqtt_init+0x140>)
 80148a4:	601c      	str	r4, [r3, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 80148a6:	2106      	movs	r1, #6
 80148a8:	4620      	mov	r0, r4
 80148aa:	f000 f871 	bl	8014990 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 80148ae:	4e28      	ldr	r6, [pc, #160]	@ (8014950 <mqtt_init+0x144>)
 80148b0:	ac04      	add	r4, sp, #16
 80148b2:	f8d8 1000 	ldr.w	r1, [r8]
 80148b6:	4620      	mov	r0, r4
 80148b8:	f00f f866 	bl	8023988 <mg_str_s>
 80148bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148c0:	e886 0003 	stmia.w	r6, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 80148c4:	6839      	ldr	r1, [r7, #0]
 80148c6:	4620      	mov	r0, r4
 80148c8:	f00f f85e 	bl	8023988 <mg_str_s>
 80148cc:	f106 0308 	add.w	r3, r6, #8
 80148d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80148d4:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 80148d8:	233c      	movs	r3, #60	@ 0x3c
 80148da:	8573      	strh	r3, [r6, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 80148dc:	2400      	movs	r4, #0
 80148de:	9402      	str	r4, [sp, #8]
 80148e0:	4b1c      	ldr	r3, [pc, #112]	@ (8014954 <mqtt_init+0x148>)
 80148e2:	9301      	str	r3, [sp, #4]
 80148e4:	2303      	movs	r3, #3
 80148e6:	9300      	str	r3, [sp, #0]
 80148e8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80148ec:	2300      	movs	r3, #0
 80148ee:	6828      	ldr	r0, [r5, #0]
 80148f0:	f010 fa2c 	bl	8024d4c <mg_timer_add>
 80148f4:	4b18      	ldr	r3, [pc, #96]	@ (8014958 <mqtt_init+0x14c>)
 80148f6:	6018      	str	r0, [r3, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 80148f8:	9402      	str	r4, [sp, #8]
 80148fa:	4b18      	ldr	r3, [pc, #96]	@ (801495c <mqtt_init+0x150>)
 80148fc:	9301      	str	r3, [sp, #4]
 80148fe:	2601      	movs	r6, #1
 8014900:	9600      	str	r6, [sp, #0]
 8014902:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8014906:	2300      	movs	r3, #0
 8014908:	6828      	ldr	r0, [r5, #0]
 801490a:	f010 fa1f 	bl	8024d4c <mg_timer_add>
 801490e:	4b14      	ldr	r3, [pc, #80]	@ (8014960 <mqtt_init+0x154>)
 8014910:	6018      	str	r0, [r3, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 8014912:	9402      	str	r4, [sp, #8]
 8014914:	4b13      	ldr	r3, [pc, #76]	@ (8014964 <mqtt_init+0x158>)
 8014916:	9301      	str	r3, [sp, #4]
 8014918:	9600      	str	r6, [sp, #0]
 801491a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801491e:	2300      	movs	r3, #0
 8014920:	6828      	ldr	r0, [r5, #0]
 8014922:	f010 fa13 	bl	8024d4c <mg_timer_add>
 8014926:	4b10      	ldr	r3, [pc, #64]	@ (8014968 <mqtt_init+0x15c>)
 8014928:	6018      	str	r0, [r3, #0]

}
 801492a:	b006      	add	sp, #24
 801492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014930:	2000216c 	.word	0x2000216c
 8014934:	20002168 	.word	0x20002168
 8014938:	20002164 	.word	0x20002164
 801493c:	20002114 	.word	0x20002114
 8014940:	20002100 	.word	0x20002100
 8014944:	08036fe8 	.word	0x08036fe8
 8014948:	20002160 	.word	0x20002160
 801494c:	2000215c 	.word	0x2000215c
 8014950:	2000211c 	.word	0x2000211c
 8014954:	08014161 	.word	0x08014161
 8014958:	20002110 	.word	0x20002110
 801495c:	08014699 	.word	0x08014699
 8014960:	2000210c 	.word	0x2000210c
 8014964:	08014679 	.word	0x08014679
 8014968:	20002108 	.word	0x20002108
 801496c:	20002174 	.word	0x20002174
 8014970:	20002170 	.word	0x20002170

08014974 <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8014974:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8014976:	fb01 f400 	mul.w	r4, r1, r0
 801497a:	4620      	mov	r0, r4
 801497c:	f005 fbac 	bl	801a0d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8014980:	4605      	mov	r5, r0
 8014982:	b118      	cbz	r0, 801498c <_ZL9my_callocjj+0x18>
 8014984:	4622      	mov	r2, r4
 8014986:	2100      	movs	r1, #0
 8014988:	f017 fb32 	bl	802bff0 <memset>
}
 801498c:	4628      	mov	r0, r5
 801498e:	bd38      	pop	{r3, r4, r5, pc}

08014990 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8014990:	b570      	push	{r4, r5, r6, lr}
 8014992:	4606      	mov	r6, r0
 8014994:	460d      	mov	r5, r1

	if ( unical_id){
 8014996:	4b0f      	ldr	r3, [pc, #60]	@ (80149d4 <set_device_id+0x44>)
 8014998:	6818      	ldr	r0, [r3, #0]
 801499a:	b108      	cbz	r0, 80149a0 <set_device_id+0x10>
		free(unical_id);
 801499c:	f005 fc1e 	bl	801a1dc <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80149a0:	0068      	lsls	r0, r5, #1
 80149a2:	2101      	movs	r1, #1
 80149a4:	4408      	add	r0, r1
 80149a6:	f7ff ffe5 	bl	8014974 <_ZL9my_callocjj>
 80149aa:	4b0a      	ldr	r3, [pc, #40]	@ (80149d4 <set_device_id+0x44>)
 80149ac:	6018      	str	r0, [r3, #0]


	if (unical_id){
 80149ae:	b108      	cbz	r0, 80149b4 <set_device_id+0x24>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80149b0:	2400      	movs	r4, #0
 80149b2:	e00b      	b.n	80149cc <set_device_id+0x3c>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80149b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149b8:	e00b      	b.n	80149d2 <set_device_id+0x42>
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80149ba:	4b06      	ldr	r3, [pc, #24]	@ (80149d4 <set_device_id+0x44>)
 80149bc:	6818      	ldr	r0, [r3, #0]
 80149be:	5d32      	ldrb	r2, [r6, r4]
 80149c0:	4905      	ldr	r1, [pc, #20]	@ (80149d8 <set_device_id+0x48>)
 80149c2:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80149c6:	f016 ff51 	bl	802b86c <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80149ca:	3401      	adds	r4, #1
 80149cc:	42ac      	cmp	r4, r5
 80149ce:	d3f4      	bcc.n	80149ba <set_device_id+0x2a>
	}

	return NO_ERR; // Успешно
 80149d0:	2000      	movs	r0, #0
}
 80149d2:	bd70      	pop	{r4, r5, r6, pc}
 80149d4:	2000217c 	.word	0x2000217c
 80149d8:	08037014 	.word	0x08037014

080149dc <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 80149dc:	b538      	push	{r3, r4, r5, lr}
 80149de:	4605      	mov	r5, r0
 80149e0:	460c      	mov	r4, r1

	if(dev_conf_ip){
 80149e2:	4b0c      	ldr	r3, [pc, #48]	@ (8014a14 <set_device_conf_ip+0x38>)
 80149e4:	6818      	ldr	r0, [r3, #0]
 80149e6:	b108      	cbz	r0, 80149ec <set_device_conf_ip+0x10>
		free(dev_conf_ip);
 80149e8:	f005 fbf8 	bl	801a1dc <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 80149ec:	2101      	movs	r1, #1
 80149ee:	1860      	adds	r0, r4, r1
 80149f0:	f7ff ffc0 	bl	8014974 <_ZL9my_callocjj>
 80149f4:	4b07      	ldr	r3, [pc, #28]	@ (8014a14 <set_device_conf_ip+0x38>)
 80149f6:	6018      	str	r0, [r3, #0]

	if(dev_conf_ip){
 80149f8:	b140      	cbz	r0, 8014a0c <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 80149fa:	4622      	mov	r2, r4
 80149fc:	4629      	mov	r1, r5
 80149fe:	f017 fb3e 	bl	802c07e <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 8014a02:	4b04      	ldr	r3, [pc, #16]	@ (8014a14 <set_device_conf_ip+0x38>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	2000      	movs	r0, #0
 8014a08:	5518      	strb	r0, [r3, r4]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
}
 8014a0a:	bd38      	pop	{r3, r4, r5, pc}
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 8014a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a10:	e7fb      	b.n	8014a0a <set_device_conf_ip+0x2e>
 8014a12:	bf00      	nop
 8014a14:	20002178 	.word	0x20002178

08014a18 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 8014a18:	b500      	push	{lr}
 8014a1a:	b087      	sub	sp, #28

	strcpy(buff, "");
 8014a1c:	f04f 0c00 	mov.w	ip, #0
 8014a20:	f880 c000 	strb.w	ip, [r0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8014a24:	3a01      	subs	r2, #1
 8014a26:	2a07      	cmp	r2, #7
 8014a28:	f200 8087 	bhi.w	8014b3a <get_config_topik_string+0x122>
 8014a2c:	e8df f002 	tbb	[pc, r2]
 8014a30:	45251604 	.word	0x45251604
 8014a34:	55756535 	.word	0x55756535
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 8014a38:	9304      	str	r3, [sp, #16]
 8014a3a:	4b41      	ldr	r3, [pc, #260]	@ (8014b40 <get_config_topik_string+0x128>)
 8014a3c:	9303      	str	r3, [sp, #12]
 8014a3e:	4b41      	ldr	r3, [pc, #260]	@ (8014b44 <get_config_topik_string+0x12c>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	9302      	str	r3, [sp, #8]
 8014a44:	4b40      	ldr	r3, [pc, #256]	@ (8014b48 <get_config_topik_string+0x130>)
 8014a46:	9301      	str	r3, [sp, #4]
 8014a48:	4b40      	ldr	r3, [pc, #256]	@ (8014b4c <get_config_topik_string+0x134>)
 8014a4a:	9300      	str	r3, [sp, #0]
 8014a4c:	4b40      	ldr	r3, [pc, #256]	@ (8014b50 <get_config_topik_string+0x138>)
 8014a4e:	4a41      	ldr	r2, [pc, #260]	@ (8014b54 <get_config_topik_string+0x13c>)
 8014a50:	f016 fda4 	bl	802b59c <snprintf>
			return -1;
			break;
	}


	return 0;
 8014a54:	2000      	movs	r0, #0
}
 8014a56:	b007      	add	sp, #28
 8014a58:	f85d fb04 	ldr.w	pc, [sp], #4
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 8014a5c:	9304      	str	r3, [sp, #16]
 8014a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8014b58 <get_config_topik_string+0x140>)
 8014a60:	9303      	str	r3, [sp, #12]
 8014a62:	4a38      	ldr	r2, [pc, #224]	@ (8014b44 <get_config_topik_string+0x12c>)
 8014a64:	6812      	ldr	r2, [r2, #0]
 8014a66:	9202      	str	r2, [sp, #8]
 8014a68:	4a37      	ldr	r2, [pc, #220]	@ (8014b48 <get_config_topik_string+0x130>)
 8014a6a:	9201      	str	r2, [sp, #4]
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	4b38      	ldr	r3, [pc, #224]	@ (8014b50 <get_config_topik_string+0x138>)
 8014a70:	4a38      	ldr	r2, [pc, #224]	@ (8014b54 <get_config_topik_string+0x13c>)
 8014a72:	f016 fd93 	bl	802b59c <snprintf>
	return 0;
 8014a76:	2000      	movs	r0, #0
			break;
 8014a78:	e7ed      	b.n	8014a56 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 8014a7a:	9304      	str	r3, [sp, #16]
 8014a7c:	4b37      	ldr	r3, [pc, #220]	@ (8014b5c <get_config_topik_string+0x144>)
 8014a7e:	9303      	str	r3, [sp, #12]
 8014a80:	4b30      	ldr	r3, [pc, #192]	@ (8014b44 <get_config_topik_string+0x12c>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	9302      	str	r3, [sp, #8]
 8014a86:	4b30      	ldr	r3, [pc, #192]	@ (8014b48 <get_config_topik_string+0x130>)
 8014a88:	9301      	str	r3, [sp, #4]
 8014a8a:	4b35      	ldr	r3, [pc, #212]	@ (8014b60 <get_config_topik_string+0x148>)
 8014a8c:	9300      	str	r3, [sp, #0]
 8014a8e:	4b30      	ldr	r3, [pc, #192]	@ (8014b50 <get_config_topik_string+0x138>)
 8014a90:	4a30      	ldr	r2, [pc, #192]	@ (8014b54 <get_config_topik_string+0x13c>)
 8014a92:	f016 fd83 	bl	802b59c <snprintf>
	return 0;
 8014a96:	2000      	movs	r0, #0
			break;
 8014a98:	e7dd      	b.n	8014a56 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8014a9a:	9304      	str	r3, [sp, #16]
 8014a9c:	4b31      	ldr	r3, [pc, #196]	@ (8014b64 <get_config_topik_string+0x14c>)
 8014a9e:	9303      	str	r3, [sp, #12]
 8014aa0:	4b28      	ldr	r3, [pc, #160]	@ (8014b44 <get_config_topik_string+0x12c>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	9302      	str	r3, [sp, #8]
 8014aa6:	4b28      	ldr	r3, [pc, #160]	@ (8014b48 <get_config_topik_string+0x130>)
 8014aa8:	9301      	str	r3, [sp, #4]
 8014aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8014b60 <get_config_topik_string+0x148>)
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	4b28      	ldr	r3, [pc, #160]	@ (8014b50 <get_config_topik_string+0x138>)
 8014ab0:	4a28      	ldr	r2, [pc, #160]	@ (8014b54 <get_config_topik_string+0x13c>)
 8014ab2:	f016 fd73 	bl	802b59c <snprintf>
	return 0;
 8014ab6:	2000      	movs	r0, #0
			break;
 8014ab8:	e7cd      	b.n	8014a56 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8014aba:	9304      	str	r3, [sp, #16]
 8014abc:	4b2a      	ldr	r3, [pc, #168]	@ (8014b68 <get_config_topik_string+0x150>)
 8014abe:	9303      	str	r3, [sp, #12]
 8014ac0:	4b20      	ldr	r3, [pc, #128]	@ (8014b44 <get_config_topik_string+0x12c>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	9302      	str	r3, [sp, #8]
 8014ac6:	4b20      	ldr	r3, [pc, #128]	@ (8014b48 <get_config_topik_string+0x130>)
 8014ac8:	9301      	str	r3, [sp, #4]
 8014aca:	4b25      	ldr	r3, [pc, #148]	@ (8014b60 <get_config_topik_string+0x148>)
 8014acc:	9300      	str	r3, [sp, #0]
 8014ace:	4b20      	ldr	r3, [pc, #128]	@ (8014b50 <get_config_topik_string+0x138>)
 8014ad0:	4a20      	ldr	r2, [pc, #128]	@ (8014b54 <get_config_topik_string+0x13c>)
 8014ad2:	f016 fd63 	bl	802b59c <snprintf>
	return 0;
 8014ad6:	2000      	movs	r0, #0
			break;
 8014ad8:	e7bd      	b.n	8014a56 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 8014ada:	9304      	str	r3, [sp, #16]
 8014adc:	4b23      	ldr	r3, [pc, #140]	@ (8014b6c <get_config_topik_string+0x154>)
 8014ade:	9303      	str	r3, [sp, #12]
 8014ae0:	4b18      	ldr	r3, [pc, #96]	@ (8014b44 <get_config_topik_string+0x12c>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	9302      	str	r3, [sp, #8]
 8014ae6:	4b18      	ldr	r3, [pc, #96]	@ (8014b48 <get_config_topik_string+0x130>)
 8014ae8:	9301      	str	r3, [sp, #4]
 8014aea:	4b1d      	ldr	r3, [pc, #116]	@ (8014b60 <get_config_topik_string+0x148>)
 8014aec:	9300      	str	r3, [sp, #0]
 8014aee:	4b18      	ldr	r3, [pc, #96]	@ (8014b50 <get_config_topik_string+0x138>)
 8014af0:	4a18      	ldr	r2, [pc, #96]	@ (8014b54 <get_config_topik_string+0x13c>)
 8014af2:	f016 fd53 	bl	802b59c <snprintf>
	return 0;
 8014af6:	2000      	movs	r0, #0
			break;
 8014af8:	e7ad      	b.n	8014a56 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8014afa:	9304      	str	r3, [sp, #16]
 8014afc:	4b1c      	ldr	r3, [pc, #112]	@ (8014b70 <get_config_topik_string+0x158>)
 8014afe:	9303      	str	r3, [sp, #12]
 8014b00:	4b10      	ldr	r3, [pc, #64]	@ (8014b44 <get_config_topik_string+0x12c>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	9302      	str	r3, [sp, #8]
 8014b06:	4b10      	ldr	r3, [pc, #64]	@ (8014b48 <get_config_topik_string+0x130>)
 8014b08:	9301      	str	r3, [sp, #4]
 8014b0a:	4b15      	ldr	r3, [pc, #84]	@ (8014b60 <get_config_topik_string+0x148>)
 8014b0c:	9300      	str	r3, [sp, #0]
 8014b0e:	4b10      	ldr	r3, [pc, #64]	@ (8014b50 <get_config_topik_string+0x138>)
 8014b10:	4a10      	ldr	r2, [pc, #64]	@ (8014b54 <get_config_topik_string+0x13c>)
 8014b12:	f016 fd43 	bl	802b59c <snprintf>
	return 0;
 8014b16:	2000      	movs	r0, #0
			break;
 8014b18:	e79d      	b.n	8014a56 <get_config_topik_string+0x3e>
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 8014b1a:	9304      	str	r3, [sp, #16]
 8014b1c:	4b15      	ldr	r3, [pc, #84]	@ (8014b74 <get_config_topik_string+0x15c>)
 8014b1e:	9303      	str	r3, [sp, #12]
 8014b20:	4b08      	ldr	r3, [pc, #32]	@ (8014b44 <get_config_topik_string+0x12c>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	9302      	str	r3, [sp, #8]
 8014b26:	4b08      	ldr	r3, [pc, #32]	@ (8014b48 <get_config_topik_string+0x130>)
 8014b28:	9301      	str	r3, [sp, #4]
 8014b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8014b60 <get_config_topik_string+0x148>)
 8014b2c:	9300      	str	r3, [sp, #0]
 8014b2e:	4b08      	ldr	r3, [pc, #32]	@ (8014b50 <get_config_topik_string+0x138>)
 8014b30:	4a08      	ldr	r2, [pc, #32]	@ (8014b54 <get_config_topik_string+0x13c>)
 8014b32:	f016 fd33 	bl	802b59c <snprintf>
	return 0;
 8014b36:	2000      	movs	r0, #0
			break;
 8014b38:	e78d      	b.n	8014a56 <get_config_topik_string+0x3e>
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8014b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b3e:	e78a      	b.n	8014a56 <get_config_topik_string+0x3e>
 8014b40:	08037034 	.word	0x08037034
 8014b44:	2000217c 	.word	0x2000217c
 8014b48:	0803703c 	.word	0x0803703c
 8014b4c:	08037044 	.word	0x08037044
 8014b50:	200000f8 	.word	0x200000f8
 8014b54:	0803701c 	.word	0x0803701c
 8014b58:	08036d88 	.word	0x08036d88
 8014b5c:	08037054 	.word	0x08037054
 8014b60:	0803705c 	.word	0x0803705c
 8014b64:	08037064 	.word	0x08037064
 8014b68:	0803706c 	.word	0x0803706c
 8014b6c:	08037074 	.word	0x08037074
 8014b70:	08037084 	.word	0x08037084
 8014b74:	08037094 	.word	0x08037094

08014b78 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8014b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b7c:	b099      	sub	sp, #100	@ 0x64
 8014b7e:	9017      	str	r0, [sp, #92]	@ 0x5c
 8014b80:	460d      	mov	r5, r1
 8014b82:	4617      	mov	r7, r2
 8014b84:	461c      	mov	r4, r3

	uint8_t len = 0;
	char * name      = NULL;
	char * com_topik = NULL;
	memset(payload, 0, payload_len * sizeof(char));
 8014b86:	460a      	mov	r2, r1
 8014b88:	2100      	movs	r1, #0
 8014b8a:	f017 fa31 	bl	802bff0 <memset>

	switch (payload_type) {
 8014b8e:	1e7a      	subs	r2, r7, #1
 8014b90:	2a07      	cmp	r2, #7
 8014b92:	f200 81ba 	bhi.w	8014f0a <get_config_payload_string+0x392>
 8014b96:	e8df f012 	tbh	[pc, r2, lsl #1]
 8014b9a:	0008      	.short	0x0008
 8014b9c:	00a10043 	.word	0x00a10043
 8014ba0:	00c500ea 	.word	0x00c500ea
 8014ba4:	0193016e 	.word	0x0193016e
 8014ba8:	0149      	.short	0x0149

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014baa:	2101      	movs	r1, #1
 8014bac:	2080      	movs	r0, #128	@ 0x80
 8014bae:	f7ff fee1 	bl	8014974 <_ZL9my_callocjj>
 8014bb2:	4607      	mov	r7, r0
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8014bb4:	9400      	str	r4, [sp, #0]
 8014bb6:	4b80      	ldr	r3, [pc, #512]	@ (8014db8 <get_config_payload_string+0x240>)
 8014bb8:	4a80      	ldr	r2, [pc, #512]	@ (8014dbc <get_config_payload_string+0x244>)
 8014bba:	2180      	movs	r1, #128	@ 0x80
 8014bbc:	f016 fcee 	bl	802b59c <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8014bc0:	4b7f      	ldr	r3, [pc, #508]	@ (8014dc0 <get_config_payload_string+0x248>)
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	4b7f      	ldr	r3, [pc, #508]	@ (8014dc4 <get_config_payload_string+0x24c>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	9314      	str	r3, [sp, #80]	@ 0x50
 8014bca:	4b7f      	ldr	r3, [pc, #508]	@ (8014dc8 <get_config_payload_string+0x250>)
 8014bcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014bce:	4b7f      	ldr	r3, [pc, #508]	@ (8014dcc <get_config_payload_string+0x254>)
 8014bd0:	9312      	str	r3, [sp, #72]	@ 0x48
 8014bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8014dd0 <get_config_payload_string+0x258>)
 8014bd4:	9311      	str	r3, [sp, #68]	@ 0x44
 8014bd6:	4b7f      	ldr	r3, [pc, #508]	@ (8014dd4 <get_config_payload_string+0x25c>)
 8014bd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8014bda:	4b7f      	ldr	r3, [pc, #508]	@ (8014dd8 <get_config_payload_string+0x260>)
 8014bdc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014bde:	920e      	str	r2, [sp, #56]	@ 0x38
 8014be0:	4b7e      	ldr	r3, [pc, #504]	@ (8014ddc <get_config_payload_string+0x264>)
 8014be2:	930d      	str	r3, [sp, #52]	@ 0x34
 8014be4:	497e      	ldr	r1, [pc, #504]	@ (8014de0 <get_config_payload_string+0x268>)
 8014be6:	910c      	str	r1, [sp, #48]	@ 0x30
 8014be8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014bea:	497e      	ldr	r1, [pc, #504]	@ (8014de4 <get_config_payload_string+0x26c>)
 8014bec:	910a      	str	r1, [sp, #40]	@ 0x28
 8014bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8014bf0:	9308      	str	r3, [sp, #32]
 8014bf2:	9707      	str	r7, [sp, #28]
 8014bf4:	487c      	ldr	r0, [pc, #496]	@ (8014de8 <get_config_payload_string+0x270>)
 8014bf6:	9006      	str	r0, [sp, #24]
 8014bf8:	9405      	str	r4, [sp, #20]
 8014bfa:	9104      	str	r1, [sp, #16]
 8014bfc:	9403      	str	r4, [sp, #12]
 8014bfe:	9102      	str	r1, [sp, #8]
 8014c00:	9201      	str	r2, [sp, #4]
 8014c02:	9300      	str	r3, [sp, #0]
 8014c04:	4b79      	ldr	r3, [pc, #484]	@ (8014dec <get_config_payload_string+0x274>)
 8014c06:	4a7a      	ldr	r2, [pc, #488]	@ (8014df0 <get_config_payload_string+0x278>)
 8014c08:	4629      	mov	r1, r5
 8014c0a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014c0c:	f016 fcc6 	bl	802b59c <snprintf>
 8014c10:	4604      	mov	r4, r0
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8014c12:	4638      	mov	r0, r7
 8014c14:	f005 fae2 	bl	801a1dc <vPortFree>

			return len;
 8014c18:	b2e0      	uxtb	r0, r4

		default:
			return -1;
			break;
	}
}
 8014c1a:	b019      	add	sp, #100	@ 0x64
 8014c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014c20:	2101      	movs	r1, #1
 8014c22:	2080      	movs	r0, #128	@ 0x80
 8014c24:	f7ff fea6 	bl	8014974 <_ZL9my_callocjj>
 8014c28:	4607      	mov	r7, r0
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8014c2a:	2101      	movs	r1, #1
 8014c2c:	2080      	movs	r0, #128	@ 0x80
 8014c2e:	f7ff fea1 	bl	8014974 <_ZL9my_callocjj>
 8014c32:	4680      	mov	r8, r0
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8014c34:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8014e28 <get_config_payload_string+0x2b0>
 8014c38:	9400      	str	r4, [sp, #0]
 8014c3a:	464b      	mov	r3, r9
 8014c3c:	4a6d      	ldr	r2, [pc, #436]	@ (8014df4 <get_config_payload_string+0x27c>)
 8014c3e:	2180      	movs	r1, #128	@ 0x80
 8014c40:	4638      	mov	r0, r7
 8014c42:	f016 fcab 	bl	802b59c <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8014c46:	f8df a194 	ldr.w	sl, [pc, #404]	@ 8014ddc <get_config_payload_string+0x264>
 8014c4a:	4e65      	ldr	r6, [pc, #404]	@ (8014de0 <get_config_payload_string+0x268>)
 8014c4c:	9602      	str	r6, [sp, #8]
 8014c4e:	9701      	str	r7, [sp, #4]
 8014c50:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8014dc0 <get_config_payload_string+0x248>
 8014c54:	f8db 3000 	ldr.w	r3, [fp]
 8014c58:	9300      	str	r3, [sp, #0]
 8014c5a:	4653      	mov	r3, sl
 8014c5c:	4a66      	ldr	r2, [pc, #408]	@ (8014df8 <get_config_payload_string+0x280>)
 8014c5e:	2180      	movs	r1, #128	@ 0x80
 8014c60:	4640      	mov	r0, r8
 8014c62:	f016 fc9b 	bl	802b59c <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8014c66:	9400      	str	r4, [sp, #0]
 8014c68:	4b64      	ldr	r3, [pc, #400]	@ (8014dfc <get_config_payload_string+0x284>)
 8014c6a:	4a54      	ldr	r2, [pc, #336]	@ (8014dbc <get_config_payload_string+0x244>)
 8014c6c:	2180      	movs	r1, #128	@ 0x80
 8014c6e:	4638      	mov	r0, r7
 8014c70:	f016 fc94 	bl	802b59c <snprintf>
			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8014c74:	f8db 3000 	ldr.w	r3, [fp]
 8014c78:	4a52      	ldr	r2, [pc, #328]	@ (8014dc4 <get_config_payload_string+0x24c>)
 8014c7a:	6812      	ldr	r2, [r2, #0]
 8014c7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8014c7e:	4a52      	ldr	r2, [pc, #328]	@ (8014dc8 <get_config_payload_string+0x250>)
 8014c80:	9213      	str	r2, [sp, #76]	@ 0x4c
 8014c82:	4a52      	ldr	r2, [pc, #328]	@ (8014dcc <get_config_payload_string+0x254>)
 8014c84:	9212      	str	r2, [sp, #72]	@ 0x48
 8014c86:	4a52      	ldr	r2, [pc, #328]	@ (8014dd0 <get_config_payload_string+0x258>)
 8014c88:	9211      	str	r2, [sp, #68]	@ 0x44
 8014c8a:	4a52      	ldr	r2, [pc, #328]	@ (8014dd4 <get_config_payload_string+0x25c>)
 8014c8c:	9210      	str	r2, [sp, #64]	@ 0x40
 8014c8e:	4a52      	ldr	r2, [pc, #328]	@ (8014dd8 <get_config_payload_string+0x260>)
 8014c90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014c92:	930e      	str	r3, [sp, #56]	@ 0x38
 8014c94:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8014c98:	960c      	str	r6, [sp, #48]	@ 0x30
 8014c9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014c9c:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8014ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ca2:	f8cd a020 	str.w	sl, [sp, #32]
 8014ca6:	9707      	str	r7, [sp, #28]
 8014ca8:	f8cd 8018 	str.w	r8, [sp, #24]
 8014cac:	9405      	str	r4, [sp, #20]
 8014cae:	f8cd 9010 	str.w	r9, [sp, #16]
 8014cb2:	9403      	str	r4, [sp, #12]
 8014cb4:	f8cd 9008 	str.w	r9, [sp, #8]
 8014cb8:	9301      	str	r3, [sp, #4]
 8014cba:	f8cd a000 	str.w	sl, [sp]
 8014cbe:	464b      	mov	r3, r9
 8014cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8014df0 <get_config_payload_string+0x278>)
 8014cc2:	4629      	mov	r1, r5
 8014cc4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014cc6:	f016 fc69 	bl	802b59c <snprintf>
 8014cca:	4604      	mov	r4, r0
			free(name);
 8014ccc:	4638      	mov	r0, r7
 8014cce:	f005 fa85 	bl	801a1dc <vPortFree>
			free(com_topik);
 8014cd2:	4640      	mov	r0, r8
 8014cd4:	f005 fa82 	bl	801a1dc <vPortFree>
			return len;
 8014cd8:	b2e0      	uxtb	r0, r4
 8014cda:	e79e      	b.n	8014c1a <get_config_payload_string+0xa2>
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8014cdc:	4b38      	ldr	r3, [pc, #224]	@ (8014dc0 <get_config_payload_string+0x248>)
 8014cde:	6819      	ldr	r1, [r3, #0]
 8014ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8014ddc <get_config_payload_string+0x264>)
 8014ce2:	4a47      	ldr	r2, [pc, #284]	@ (8014e00 <get_config_payload_string+0x288>)
 8014ce4:	4837      	ldr	r0, [pc, #220]	@ (8014dc4 <get_config_payload_string+0x24c>)
 8014ce6:	6800      	ldr	r0, [r0, #0]
 8014ce8:	9010      	str	r0, [sp, #64]	@ 0x40
 8014cea:	4837      	ldr	r0, [pc, #220]	@ (8014dc8 <get_config_payload_string+0x250>)
 8014cec:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014cee:	4837      	ldr	r0, [pc, #220]	@ (8014dcc <get_config_payload_string+0x254>)
 8014cf0:	900e      	str	r0, [sp, #56]	@ 0x38
 8014cf2:	4837      	ldr	r0, [pc, #220]	@ (8014dd0 <get_config_payload_string+0x258>)
 8014cf4:	900d      	str	r0, [sp, #52]	@ 0x34
 8014cf6:	4837      	ldr	r0, [pc, #220]	@ (8014dd4 <get_config_payload_string+0x25c>)
 8014cf8:	900c      	str	r0, [sp, #48]	@ 0x30
 8014cfa:	4837      	ldr	r0, [pc, #220]	@ (8014dd8 <get_config_payload_string+0x260>)
 8014cfc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014cfe:	910a      	str	r1, [sp, #40]	@ 0x28
 8014d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d02:	4840      	ldr	r0, [pc, #256]	@ (8014e04 <get_config_payload_string+0x28c>)
 8014d04:	9008      	str	r0, [sp, #32]
 8014d06:	9207      	str	r2, [sp, #28]
 8014d08:	9106      	str	r1, [sp, #24]
 8014d0a:	9305      	str	r3, [sp, #20]
 8014d0c:	483e      	ldr	r0, [pc, #248]	@ (8014e08 <get_config_payload_string+0x290>)
 8014d0e:	9004      	str	r0, [sp, #16]
 8014d10:	483e      	ldr	r0, [pc, #248]	@ (8014e0c <get_config_payload_string+0x294>)
 8014d12:	9003      	str	r0, [sp, #12]
 8014d14:	9202      	str	r2, [sp, #8]
 8014d16:	483e      	ldr	r0, [pc, #248]	@ (8014e10 <get_config_payload_string+0x298>)
 8014d18:	9001      	str	r0, [sp, #4]
 8014d1a:	9100      	str	r1, [sp, #0]
 8014d1c:	4934      	ldr	r1, [pc, #208]	@ (8014df0 <get_config_payload_string+0x278>)
 8014d1e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014d20:	f016 fda4 	bl	802b86c <sprintf>
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8014d24:	4b26      	ldr	r3, [pc, #152]	@ (8014dc0 <get_config_payload_string+0x248>)
 8014d26:	6819      	ldr	r1, [r3, #0]
 8014d28:	4b2c      	ldr	r3, [pc, #176]	@ (8014ddc <get_config_payload_string+0x264>)
 8014d2a:	4a3a      	ldr	r2, [pc, #232]	@ (8014e14 <get_config_payload_string+0x29c>)
 8014d2c:	4825      	ldr	r0, [pc, #148]	@ (8014dc4 <get_config_payload_string+0x24c>)
 8014d2e:	6800      	ldr	r0, [r0, #0]
 8014d30:	9010      	str	r0, [sp, #64]	@ 0x40
 8014d32:	4825      	ldr	r0, [pc, #148]	@ (8014dc8 <get_config_payload_string+0x250>)
 8014d34:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014d36:	4825      	ldr	r0, [pc, #148]	@ (8014dcc <get_config_payload_string+0x254>)
 8014d38:	900e      	str	r0, [sp, #56]	@ 0x38
 8014d3a:	4825      	ldr	r0, [pc, #148]	@ (8014dd0 <get_config_payload_string+0x258>)
 8014d3c:	900d      	str	r0, [sp, #52]	@ 0x34
 8014d3e:	4825      	ldr	r0, [pc, #148]	@ (8014dd4 <get_config_payload_string+0x25c>)
 8014d40:	900c      	str	r0, [sp, #48]	@ 0x30
 8014d42:	4825      	ldr	r0, [pc, #148]	@ (8014dd8 <get_config_payload_string+0x260>)
 8014d44:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014d46:	910a      	str	r1, [sp, #40]	@ 0x28
 8014d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d4a:	4833      	ldr	r0, [pc, #204]	@ (8014e18 <get_config_payload_string+0x2a0>)
 8014d4c:	9008      	str	r0, [sp, #32]
 8014d4e:	9207      	str	r2, [sp, #28]
 8014d50:	9106      	str	r1, [sp, #24]
 8014d52:	9305      	str	r3, [sp, #20]
 8014d54:	4831      	ldr	r0, [pc, #196]	@ (8014e1c <get_config_payload_string+0x2a4>)
 8014d56:	9004      	str	r0, [sp, #16]
 8014d58:	4823      	ldr	r0, [pc, #140]	@ (8014de8 <get_config_payload_string+0x270>)
 8014d5a:	9003      	str	r0, [sp, #12]
 8014d5c:	9202      	str	r2, [sp, #8]
 8014d5e:	482c      	ldr	r0, [pc, #176]	@ (8014e10 <get_config_payload_string+0x298>)
 8014d60:	9001      	str	r0, [sp, #4]
 8014d62:	9100      	str	r1, [sp, #0]
 8014d64:	4922      	ldr	r1, [pc, #136]	@ (8014df0 <get_config_payload_string+0x278>)
 8014d66:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014d68:	f016 fd80 	bl	802b86c <sprintf>
			break;
 8014d6c:	e7da      	b.n	8014d24 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8014d6e:	4b14      	ldr	r3, [pc, #80]	@ (8014dc0 <get_config_payload_string+0x248>)
 8014d70:	6819      	ldr	r1, [r3, #0]
 8014d72:	4b1a      	ldr	r3, [pc, #104]	@ (8014ddc <get_config_payload_string+0x264>)
 8014d74:	4a1d      	ldr	r2, [pc, #116]	@ (8014dec <get_config_payload_string+0x274>)
 8014d76:	4813      	ldr	r0, [pc, #76]	@ (8014dc4 <get_config_payload_string+0x24c>)
 8014d78:	6800      	ldr	r0, [r0, #0]
 8014d7a:	9010      	str	r0, [sp, #64]	@ 0x40
 8014d7c:	4812      	ldr	r0, [pc, #72]	@ (8014dc8 <get_config_payload_string+0x250>)
 8014d7e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014d80:	4812      	ldr	r0, [pc, #72]	@ (8014dcc <get_config_payload_string+0x254>)
 8014d82:	900e      	str	r0, [sp, #56]	@ 0x38
 8014d84:	4812      	ldr	r0, [pc, #72]	@ (8014dd0 <get_config_payload_string+0x258>)
 8014d86:	900d      	str	r0, [sp, #52]	@ 0x34
 8014d88:	4812      	ldr	r0, [pc, #72]	@ (8014dd4 <get_config_payload_string+0x25c>)
 8014d8a:	900c      	str	r0, [sp, #48]	@ 0x30
 8014d8c:	4812      	ldr	r0, [pc, #72]	@ (8014dd8 <get_config_payload_string+0x260>)
 8014d8e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014d90:	910a      	str	r1, [sp, #40]	@ 0x28
 8014d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d94:	4822      	ldr	r0, [pc, #136]	@ (8014e20 <get_config_payload_string+0x2a8>)
 8014d96:	9008      	str	r0, [sp, #32]
 8014d98:	9207      	str	r2, [sp, #28]
 8014d9a:	9106      	str	r1, [sp, #24]
 8014d9c:	9305      	str	r3, [sp, #20]
 8014d9e:	4821      	ldr	r0, [pc, #132]	@ (8014e24 <get_config_payload_string+0x2ac>)
 8014da0:	9004      	str	r0, [sp, #16]
 8014da2:	4811      	ldr	r0, [pc, #68]	@ (8014de8 <get_config_payload_string+0x270>)
 8014da4:	9003      	str	r0, [sp, #12]
 8014da6:	9202      	str	r2, [sp, #8]
 8014da8:	4819      	ldr	r0, [pc, #100]	@ (8014e10 <get_config_payload_string+0x298>)
 8014daa:	9001      	str	r0, [sp, #4]
 8014dac:	9100      	str	r1, [sp, #0]
 8014dae:	4910      	ldr	r1, [pc, #64]	@ (8014df0 <get_config_payload_string+0x278>)
 8014db0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014db2:	f016 fd5b 	bl	802b86c <sprintf>
			break;
 8014db6:	e7b5      	b.n	8014d24 <get_config_payload_string+0x1ac>
 8014db8:	0803709c 	.word	0x0803709c
 8014dbc:	080370a8 	.word	0x080370a8
 8014dc0:	2000217c 	.word	0x2000217c
 8014dc4:	20002178 	.word	0x20002178
 8014dc8:	080370b0 	.word	0x080370b0
 8014dcc:	080370b4 	.word	0x080370b4
 8014dd0:	080370b8 	.word	0x080370b8
 8014dd4:	080370c8 	.word	0x080370c8
 8014dd8:	080370dc 	.word	0x080370dc
 8014ddc:	0803703c 	.word	0x0803703c
 8014de0:	0803606c 	.word	0x0803606c
 8014de4:	08037034 	.word	0x08037034
 8014de8:	08039510 	.word	0x08039510
 8014dec:	0803706c 	.word	0x0803706c
 8014df0:	08037240 	.word	0x08037240
 8014df4:	080370e8 	.word	0x080370e8
 8014df8:	08037218 	.word	0x08037218
 8014dfc:	080370f0 	.word	0x080370f0
 8014e00:	08037054 	.word	0x08037054
 8014e04:	08037104 	.word	0x08037104
 8014e08:	08037108 	.word	0x08037108
 8014e0c:	08037118 	.word	0x08037118
 8014e10:	0803713c 	.word	0x0803713c
 8014e14:	08037064 	.word	0x08037064
 8014e18:	08037144 	.word	0x08037144
 8014e1c:	08037148 	.word	0x08037148
 8014e20:	08037158 	.word	0x08037158
 8014e24:	0803715c 	.word	0x0803715c
 8014e28:	08036d88 	.word	0x08036d88
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8014e2c:	4b38      	ldr	r3, [pc, #224]	@ (8014f10 <get_config_payload_string+0x398>)
 8014e2e:	6819      	ldr	r1, [r3, #0]
 8014e30:	4b38      	ldr	r3, [pc, #224]	@ (8014f14 <get_config_payload_string+0x39c>)
 8014e32:	4a39      	ldr	r2, [pc, #228]	@ (8014f18 <get_config_payload_string+0x3a0>)
 8014e34:	4839      	ldr	r0, [pc, #228]	@ (8014f1c <get_config_payload_string+0x3a4>)
 8014e36:	6800      	ldr	r0, [r0, #0]
 8014e38:	9010      	str	r0, [sp, #64]	@ 0x40
 8014e3a:	4839      	ldr	r0, [pc, #228]	@ (8014f20 <get_config_payload_string+0x3a8>)
 8014e3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014e3e:	4839      	ldr	r0, [pc, #228]	@ (8014f24 <get_config_payload_string+0x3ac>)
 8014e40:	900e      	str	r0, [sp, #56]	@ 0x38
 8014e42:	4839      	ldr	r0, [pc, #228]	@ (8014f28 <get_config_payload_string+0x3b0>)
 8014e44:	900d      	str	r0, [sp, #52]	@ 0x34
 8014e46:	4839      	ldr	r0, [pc, #228]	@ (8014f2c <get_config_payload_string+0x3b4>)
 8014e48:	900c      	str	r0, [sp, #48]	@ 0x30
 8014e4a:	4839      	ldr	r0, [pc, #228]	@ (8014f30 <get_config_payload_string+0x3b8>)
 8014e4c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014e4e:	910a      	str	r1, [sp, #40]	@ 0x28
 8014e50:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e52:	4838      	ldr	r0, [pc, #224]	@ (8014f34 <get_config_payload_string+0x3bc>)
 8014e54:	9008      	str	r0, [sp, #32]
 8014e56:	9207      	str	r2, [sp, #28]
 8014e58:	9106      	str	r1, [sp, #24]
 8014e5a:	9305      	str	r3, [sp, #20]
 8014e5c:	4836      	ldr	r0, [pc, #216]	@ (8014f38 <get_config_payload_string+0x3c0>)
 8014e5e:	9004      	str	r0, [sp, #16]
 8014e60:	4836      	ldr	r0, [pc, #216]	@ (8014f3c <get_config_payload_string+0x3c4>)
 8014e62:	9003      	str	r0, [sp, #12]
 8014e64:	9202      	str	r2, [sp, #8]
 8014e66:	4836      	ldr	r0, [pc, #216]	@ (8014f40 <get_config_payload_string+0x3c8>)
 8014e68:	9001      	str	r0, [sp, #4]
 8014e6a:	9100      	str	r1, [sp, #0]
 8014e6c:	4935      	ldr	r1, [pc, #212]	@ (8014f44 <get_config_payload_string+0x3cc>)
 8014e6e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014e70:	f016 fcfc 	bl	802b86c <sprintf>
			break;
 8014e74:	e756      	b.n	8014d24 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8014e76:	4b26      	ldr	r3, [pc, #152]	@ (8014f10 <get_config_payload_string+0x398>)
 8014e78:	6819      	ldr	r1, [r3, #0]
 8014e7a:	4b26      	ldr	r3, [pc, #152]	@ (8014f14 <get_config_payload_string+0x39c>)
 8014e7c:	4a32      	ldr	r2, [pc, #200]	@ (8014f48 <get_config_payload_string+0x3d0>)
 8014e7e:	4827      	ldr	r0, [pc, #156]	@ (8014f1c <get_config_payload_string+0x3a4>)
 8014e80:	6800      	ldr	r0, [r0, #0]
 8014e82:	9010      	str	r0, [sp, #64]	@ 0x40
 8014e84:	4826      	ldr	r0, [pc, #152]	@ (8014f20 <get_config_payload_string+0x3a8>)
 8014e86:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014e88:	4826      	ldr	r0, [pc, #152]	@ (8014f24 <get_config_payload_string+0x3ac>)
 8014e8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8014e8c:	4826      	ldr	r0, [pc, #152]	@ (8014f28 <get_config_payload_string+0x3b0>)
 8014e8e:	900d      	str	r0, [sp, #52]	@ 0x34
 8014e90:	4826      	ldr	r0, [pc, #152]	@ (8014f2c <get_config_payload_string+0x3b4>)
 8014e92:	900c      	str	r0, [sp, #48]	@ 0x30
 8014e94:	4826      	ldr	r0, [pc, #152]	@ (8014f30 <get_config_payload_string+0x3b8>)
 8014e96:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014e98:	910a      	str	r1, [sp, #40]	@ 0x28
 8014e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e9c:	482b      	ldr	r0, [pc, #172]	@ (8014f4c <get_config_payload_string+0x3d4>)
 8014e9e:	9008      	str	r0, [sp, #32]
 8014ea0:	9207      	str	r2, [sp, #28]
 8014ea2:	9106      	str	r1, [sp, #24]
 8014ea4:	9305      	str	r3, [sp, #20]
 8014ea6:	482a      	ldr	r0, [pc, #168]	@ (8014f50 <get_config_payload_string+0x3d8>)
 8014ea8:	9004      	str	r0, [sp, #16]
 8014eaa:	4824      	ldr	r0, [pc, #144]	@ (8014f3c <get_config_payload_string+0x3c4>)
 8014eac:	9003      	str	r0, [sp, #12]
 8014eae:	9202      	str	r2, [sp, #8]
 8014eb0:	4823      	ldr	r0, [pc, #140]	@ (8014f40 <get_config_payload_string+0x3c8>)
 8014eb2:	9001      	str	r0, [sp, #4]
 8014eb4:	9100      	str	r1, [sp, #0]
 8014eb6:	4923      	ldr	r1, [pc, #140]	@ (8014f44 <get_config_payload_string+0x3cc>)
 8014eb8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014eba:	f016 fcd7 	bl	802b86c <sprintf>
			break;
 8014ebe:	e731      	b.n	8014d24 <get_config_payload_string+0x1ac>
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8014ec0:	4b13      	ldr	r3, [pc, #76]	@ (8014f10 <get_config_payload_string+0x398>)
 8014ec2:	6819      	ldr	r1, [r3, #0]
 8014ec4:	4b13      	ldr	r3, [pc, #76]	@ (8014f14 <get_config_payload_string+0x39c>)
 8014ec6:	4a23      	ldr	r2, [pc, #140]	@ (8014f54 <get_config_payload_string+0x3dc>)
 8014ec8:	4814      	ldr	r0, [pc, #80]	@ (8014f1c <get_config_payload_string+0x3a4>)
 8014eca:	6800      	ldr	r0, [r0, #0]
 8014ecc:	9010      	str	r0, [sp, #64]	@ 0x40
 8014ece:	4814      	ldr	r0, [pc, #80]	@ (8014f20 <get_config_payload_string+0x3a8>)
 8014ed0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014ed2:	4814      	ldr	r0, [pc, #80]	@ (8014f24 <get_config_payload_string+0x3ac>)
 8014ed4:	900e      	str	r0, [sp, #56]	@ 0x38
 8014ed6:	4814      	ldr	r0, [pc, #80]	@ (8014f28 <get_config_payload_string+0x3b0>)
 8014ed8:	900d      	str	r0, [sp, #52]	@ 0x34
 8014eda:	4814      	ldr	r0, [pc, #80]	@ (8014f2c <get_config_payload_string+0x3b4>)
 8014edc:	900c      	str	r0, [sp, #48]	@ 0x30
 8014ede:	4814      	ldr	r0, [pc, #80]	@ (8014f30 <get_config_payload_string+0x3b8>)
 8014ee0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014ee2:	910a      	str	r1, [sp, #40]	@ 0x28
 8014ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ee6:	481c      	ldr	r0, [pc, #112]	@ (8014f58 <get_config_payload_string+0x3e0>)
 8014ee8:	9008      	str	r0, [sp, #32]
 8014eea:	9207      	str	r2, [sp, #28]
 8014eec:	9106      	str	r1, [sp, #24]
 8014eee:	9305      	str	r3, [sp, #20]
 8014ef0:	481a      	ldr	r0, [pc, #104]	@ (8014f5c <get_config_payload_string+0x3e4>)
 8014ef2:	9004      	str	r0, [sp, #16]
 8014ef4:	4811      	ldr	r0, [pc, #68]	@ (8014f3c <get_config_payload_string+0x3c4>)
 8014ef6:	9003      	str	r0, [sp, #12]
 8014ef8:	9202      	str	r2, [sp, #8]
 8014efa:	4811      	ldr	r0, [pc, #68]	@ (8014f40 <get_config_payload_string+0x3c8>)
 8014efc:	9001      	str	r0, [sp, #4]
 8014efe:	9100      	str	r1, [sp, #0]
 8014f00:	4910      	ldr	r1, [pc, #64]	@ (8014f44 <get_config_payload_string+0x3cc>)
 8014f02:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014f04:	f016 fcb2 	bl	802b86c <sprintf>
			break;
 8014f08:	e70c      	b.n	8014d24 <get_config_payload_string+0x1ac>
	switch (payload_type) {
 8014f0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f0e:	e684      	b.n	8014c1a <get_config_payload_string+0xa2>
 8014f10:	2000217c 	.word	0x2000217c
 8014f14:	0803703c 	.word	0x0803703c
 8014f18:	08037074 	.word	0x08037074
 8014f1c:	20002178 	.word	0x20002178
 8014f20:	080370b0 	.word	0x080370b0
 8014f24:	080370b4 	.word	0x080370b4
 8014f28:	080370b8 	.word	0x080370b8
 8014f2c:	080370c8 	.word	0x080370c8
 8014f30:	080370dc 	.word	0x080370dc
 8014f34:	08037180 	.word	0x08037180
 8014f38:	08037184 	.word	0x08037184
 8014f3c:	08039510 	.word	0x08039510
 8014f40:	0803713c 	.word	0x0803713c
 8014f44:	08037240 	.word	0x08037240
 8014f48:	08037084 	.word	0x08037084
 8014f4c:	080371a4 	.word	0x080371a4
 8014f50:	080371a8 	.word	0x080371a8
 8014f54:	08037094 	.word	0x08037094
 8014f58:	080371d4 	.word	0x080371d4
 8014f5c:	080371d8 	.word	0x080371d8

08014f60 <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8014f60:	b530      	push	{r4, r5, lr}
 8014f62:	b083      	sub	sp, #12
 8014f64:	461c      	mov	r4, r3
 8014f66:	f89d 5018 	ldrb.w	r5, [sp, #24]

	char * sens_name = NULL;
	switch (sensor_type) {
 8014f6a:	2a01      	cmp	r2, #1
 8014f6c:	d00b      	beq.n	8014f86 <gen_bin_sensor_status_payload_JSON+0x26>
 8014f6e:	2a02      	cmp	r2, #2
 8014f70:	d10b      	bne.n	8014f8a <gen_bin_sensor_status_payload_JSON+0x2a>
		case INPUT_SENSOR:
			sens_name = (char *)component_input;
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
 8014f72:	4b0a      	ldr	r3, [pc, #40]	@ (8014f9c <gen_bin_sensor_status_payload_JSON+0x3c>)
			break;
		default:
			break;
	}

	if (state){
 8014f74:	b15d      	cbz	r5, 8014f8e <gen_bin_sensor_status_payload_JSON+0x2e>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8014f76:	4a0a      	ldr	r2, [pc, #40]	@ (8014fa0 <gen_bin_sensor_status_payload_JSON+0x40>)
 8014f78:	9201      	str	r2, [sp, #4]
 8014f7a:	9400      	str	r4, [sp, #0]
 8014f7c:	4a09      	ldr	r2, [pc, #36]	@ (8014fa4 <gen_bin_sensor_status_payload_JSON+0x44>)
 8014f7e:	f016 fb0d 	bl	802b59c <snprintf>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
	}
}
 8014f82:	b003      	add	sp, #12
 8014f84:	bd30      	pop	{r4, r5, pc}
			sens_name = (char *)component_input;
 8014f86:	4b08      	ldr	r3, [pc, #32]	@ (8014fa8 <gen_bin_sensor_status_payload_JSON+0x48>)
 8014f88:	e7f4      	b.n	8014f74 <gen_bin_sensor_status_payload_JSON+0x14>
	switch (sensor_type) {
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	e7f2      	b.n	8014f74 <gen_bin_sensor_status_payload_JSON+0x14>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8014f8e:	4a07      	ldr	r2, [pc, #28]	@ (8014fac <gen_bin_sensor_status_payload_JSON+0x4c>)
 8014f90:	9201      	str	r2, [sp, #4]
 8014f92:	9400      	str	r4, [sp, #0]
 8014f94:	4a03      	ldr	r2, [pc, #12]	@ (8014fa4 <gen_bin_sensor_status_payload_JSON+0x44>)
 8014f96:	f016 fb01 	bl	802b59c <snprintf>
 8014f9a:	e7f2      	b.n	8014f82 <gen_bin_sensor_status_payload_JSON+0x22>
 8014f9c:	08036d88 	.word	0x08036d88
 8014fa0:	08036e40 	.word	0x08036e40
 8014fa4:	08037208 	.word	0x08037208
 8014fa8:	08037034 	.word	0x08037034
 8014fac:	08036e58 	.word	0x08036e58

08014fb0 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8014fb0:	b500      	push	{lr}
 8014fb2:	b085      	sub	sp, #20

	switch(sensor_type){

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8014fb4:	9302      	str	r3, [sp, #8]
 8014fb6:	4b06      	ldr	r3, [pc, #24]	@ (8014fd0 <generate_comand_topik_for_subscrabe+0x20>)
 8014fb8:	9301      	str	r3, [sp, #4]
 8014fba:	4b06      	ldr	r3, [pc, #24]	@ (8014fd4 <generate_comand_topik_for_subscrabe+0x24>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	9300      	str	r3, [sp, #0]
 8014fc0:	4b05      	ldr	r3, [pc, #20]	@ (8014fd8 <generate_comand_topik_for_subscrabe+0x28>)
 8014fc2:	4a06      	ldr	r2, [pc, #24]	@ (8014fdc <generate_comand_topik_for_subscrabe+0x2c>)
 8014fc4:	f016 faea 	bl	802b59c <snprintf>
			break;
	}
}
 8014fc8:	b005      	add	sp, #20
 8014fca:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fce:	bf00      	nop
 8014fd0:	08036d88 	.word	0x08036d88
 8014fd4:	2000217c 	.word	0x2000217c
 8014fd8:	0803703c 	.word	0x0803703c
 8014fdc:	080371e4 	.word	0x080371e4

08014fe0 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8014fe0:	b500      	push	{lr}
 8014fe2:	b085      	sub	sp, #20

	strcpy(topik, "\0");
 8014fe4:	f04f 0c00 	mov.w	ip, #0
 8014fe8:	f880 c000 	strb.w	ip, [r0]

	switch (sensor_type) {
 8014fec:	2a01      	cmp	r2, #1
 8014fee:	d006      	beq.n	8014ffe <generate_status_topik+0x1e>
 8014ff0:	2a02      	cmp	r2, #2
 8014ff2:	d00f      	beq.n	8015014 <generate_status_topik+0x34>
 8014ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
			return -1;
			break;
	}

	return 0;
}
 8014ff8:	b005      	add	sp, #20
 8014ffa:	f85d fb04 	ldr.w	pc, [sp], #4
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8014ffe:	9302      	str	r3, [sp, #8]
 8015000:	4b0a      	ldr	r3, [pc, #40]	@ (801502c <generate_status_topik+0x4c>)
 8015002:	9301      	str	r3, [sp, #4]
 8015004:	4b0a      	ldr	r3, [pc, #40]	@ (8015030 <generate_status_topik+0x50>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	9300      	str	r3, [sp, #0]
 801500a:	4b0a      	ldr	r3, [pc, #40]	@ (8015034 <generate_status_topik+0x54>)
 801500c:	4a0a      	ldr	r2, [pc, #40]	@ (8015038 <generate_status_topik+0x58>)
 801500e:	f016 fac5 	bl	802b59c <snprintf>
 8015012:	e7f1      	b.n	8014ff8 <generate_status_topik+0x18>
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8015014:	9302      	str	r3, [sp, #8]
 8015016:	4b09      	ldr	r3, [pc, #36]	@ (801503c <generate_status_topik+0x5c>)
 8015018:	9301      	str	r3, [sp, #4]
 801501a:	4b05      	ldr	r3, [pc, #20]	@ (8015030 <generate_status_topik+0x50>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	9300      	str	r3, [sp, #0]
 8015020:	4b04      	ldr	r3, [pc, #16]	@ (8015034 <generate_status_topik+0x54>)
 8015022:	4a05      	ldr	r2, [pc, #20]	@ (8015038 <generate_status_topik+0x58>)
 8015024:	f016 faba 	bl	802b59c <snprintf>
 8015028:	e7e6      	b.n	8014ff8 <generate_status_topik+0x18>
 801502a:	bf00      	nop
 801502c:	08037034 	.word	0x08037034
 8015030:	2000217c 	.word	0x2000217c
 8015034:	0803703c 	.word	0x0803703c
 8015038:	080371f4 	.word	0x080371f4
 801503c:	08036d88 	.word	0x08036d88

08015040 <timer_fn>:
  }
  (void) c;
}


void timer_fn(void *arg) {
 8015040:	b508      	push	{r3, lr}
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015042:	4b08      	ldr	r3, [pc, #32]	@ (8015064 <timer_fn+0x24>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	b12b      	cbz	r3, 8015054 <timer_fn+0x14>
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8015048:	4b06      	ldr	r3, [pc, #24]	@ (8015064 <timer_fn+0x24>)
 801504a:	6818      	ldr	r0, [r3, #0]
 801504c:	b108      	cbz	r0, 8015052 <timer_fn+0x12>
 801504e:	f014 f8e3 	bl	8029218 <mg_sntp_request>
}
 8015052:	bd08      	pop	{r3, pc}
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8015054:	4a04      	ldr	r2, [pc, #16]	@ (8015068 <timer_fn+0x28>)
 8015056:	4619      	mov	r1, r3
 8015058:	f014 f9b0 	bl	80293bc <mg_sntp_connect>
 801505c:	4b01      	ldr	r3, [pc, #4]	@ (8015064 <timer_fn+0x24>)
 801505e:	6018      	str	r0, [r3, #0]
 8015060:	e7f2      	b.n	8015048 <timer_fn+0x8>
 8015062:	bf00      	nop
 8015064:	20002180 	.word	0x20002180
 8015068:	0801506d 	.word	0x0801506d

0801506c <sfn>:
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 801506c:	b570      	push	{r4, r5, r6, lr}
  if (ev == MG_EV_SNTP_TIME) {
 801506e:	2912      	cmp	r1, #18
 8015070:	d002      	beq.n	8015078 <sfn+0xc>
  } else if (ev == MG_EV_CLOSE) {
 8015072:	2909      	cmp	r1, #9
 8015074:	d046      	beq.n	8015104 <sfn+0x98>
}
 8015076:	bd70      	pop	{r4, r5, r6, pc}
 8015078:	4614      	mov	r4, r2
	  logging(L_INFO, "Response from NTP server received");
 801507a:	4926      	ldr	r1, [pc, #152]	@ (8015114 <sfn+0xa8>)
 801507c:	2001      	movs	r0, #1
 801507e:	f7fc fe97 	bl	8011db0 <logging>
    uint64_t curtime = mg_now();
 8015082:	f014 f805 	bl	8029090 <mg_now>
 8015086:	4606      	mov	r6, r0
 8015088:	460d      	mov	r5, r1
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 801508a:	4b23      	ldr	r3, [pc, #140]	@ (8015118 <sfn+0xac>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	2b01      	cmp	r3, #1
 8015090:	dc20      	bgt.n	80150d4 <sfn+0x68>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 8015092:	4632      	mov	r2, r6
 8015094:	462b      	mov	r3, r5
 8015096:	4921      	ldr	r1, [pc, #132]	@ (801511c <sfn+0xb0>)
 8015098:	2001      	movs	r0, #1
 801509a:	f7fc fe89 	bl	8011db0 <logging>
      uint64_t t = *(uint64_t *) ev_data;
 801509e:	6825      	ldr	r5, [r4, #0]
 80150a0:	6864      	ldr	r4, [r4, #4]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 80150a2:	f010 fba4 	bl	80257ee <mg_millis>
 80150a6:	1a28      	subs	r0, r5, r0
 80150a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80150ac:	f04f 0300 	mov.w	r3, #0
 80150b0:	eb64 0101 	sbc.w	r1, r4, r1
 80150b4:	f7fb fe50 	bl	8010d58 <__aeabi_uldivmod>
 80150b8:	4b19      	ldr	r3, [pc, #100]	@ (8015120 <sfn+0xb4>)
 80150ba:	e9c3 0100 	strd	r0, r1, [r3]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80150be:	4b16      	ldr	r3, [pc, #88]	@ (8015118 <sfn+0xac>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	dc12      	bgt.n	80150ec <sfn+0x80>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 80150c6:	462a      	mov	r2, r5
 80150c8:	4623      	mov	r3, r4
 80150ca:	4916      	ldr	r1, [pc, #88]	@ (8015124 <sfn+0xb8>)
 80150cc:	2001      	movs	r0, #1
 80150ce:	f7fc fe6f 	bl	8011db0 <logging>
 80150d2:	e7d0      	b.n	8015076 <sfn+0xa>
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 80150d4:	4b14      	ldr	r3, [pc, #80]	@ (8015128 <sfn+0xbc>)
 80150d6:	221b      	movs	r2, #27
 80150d8:	4914      	ldr	r1, [pc, #80]	@ (801512c <sfn+0xc0>)
 80150da:	2002      	movs	r0, #2
 80150dc:	f010 fb8c 	bl	80257f8 <mg_log_prefix>
 80150e0:	4632      	mov	r2, r6
 80150e2:	462b      	mov	r3, r5
 80150e4:	480d      	ldr	r0, [pc, #52]	@ (801511c <sfn+0xb0>)
 80150e6:	f00e fa71 	bl	80235cc <mg_log>
 80150ea:	e7d2      	b.n	8015092 <sfn+0x26>
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80150ec:	4b0e      	ldr	r3, [pc, #56]	@ (8015128 <sfn+0xbc>)
 80150ee:	2221      	movs	r2, #33	@ 0x21
 80150f0:	490e      	ldr	r1, [pc, #56]	@ (801512c <sfn+0xc0>)
 80150f2:	2002      	movs	r0, #2
 80150f4:	f010 fb80 	bl	80257f8 <mg_log_prefix>
 80150f8:	462a      	mov	r2, r5
 80150fa:	4623      	mov	r3, r4
 80150fc:	480c      	ldr	r0, [pc, #48]	@ (8015130 <sfn+0xc4>)
 80150fe:	f00e fa65 	bl	80235cc <mg_log>
 8015102:	e7e0      	b.n	80150c6 <sfn+0x5a>
	  logging(L_INFO, "NTP connection is closed");
 8015104:	490b      	ldr	r1, [pc, #44]	@ (8015134 <sfn+0xc8>)
 8015106:	2001      	movs	r0, #1
 8015108:	f7fc fe52 	bl	8011db0 <logging>
    s_sntp_conn = NULL;
 801510c:	4b0a      	ldr	r3, [pc, #40]	@ (8015138 <sfn+0xcc>)
 801510e:	2200      	movs	r2, #0
 8015110:	601a      	str	r2, [r3, #0]
}
 8015112:	e7b0      	b.n	8015076 <sfn+0xa>
 8015114:	080373c0 	.word	0x080373c0
 8015118:	2000012c 	.word	0x2000012c
 801511c:	08037404 	.word	0x08037404
 8015120:	20002188 	.word	0x20002188
 8015124:	0803745c 	.word	0x0803745c
 8015128:	080374b8 	.word	0x080374b8
 801512c:	080373e4 	.word	0x080373e4
 8015130:	08037438 	.word	0x08037438
 8015134:	08037480 	.word	0x08037480
 8015138:	20002180 	.word	0x20002180

0801513c <start_sntp>:

void start_sntp(void *arg){
 801513c:	b530      	push	{r4, r5, lr}
 801513e:	b085      	sub	sp, #20
 8015140:	4604      	mov	r4, r0
	logging(L_INFO, "starting NTP client service");
 8015142:	490d      	ldr	r1, [pc, #52]	@ (8015178 <start_sntp+0x3c>)
 8015144:	2001      	movs	r0, #1
 8015146:	f7fc fe33 	bl	8011db0 <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 801514a:	9402      	str	r4, [sp, #8]
 801514c:	4d0b      	ldr	r5, [pc, #44]	@ (801517c <start_sntp+0x40>)
 801514e:	9501      	str	r5, [sp, #4]
 8015150:	2300      	movs	r3, #0
 8015152:	9300      	str	r3, [sp, #0]
 8015154:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8015158:	2300      	movs	r3, #0
 801515a:	4620      	mov	r0, r4
 801515c:	f00f fdf6 	bl	8024d4c <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8015160:	9402      	str	r4, [sp, #8]
 8015162:	9501      	str	r5, [sp, #4]
 8015164:	2301      	movs	r3, #1
 8015166:	9300      	str	r3, [sp, #0]
 8015168:	4a05      	ldr	r2, [pc, #20]	@ (8015180 <start_sntp+0x44>)
 801516a:	2300      	movs	r3, #0
 801516c:	4620      	mov	r0, r4
 801516e:	f00f fded 	bl	8024d4c <mg_timer_add>

}
 8015172:	b005      	add	sp, #20
 8015174:	bd30      	pop	{r4, r5, pc}
 8015176:	bf00      	nop
 8015178:	0803749c 	.word	0x0803749c
 801517c:	08015041 	.word	0x08015041
 8015180:	00107ac0 	.word	0x00107ac0

08015184 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 8015184:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8015186:	fb01 f400 	mul.w	r4, r1, r0
 801518a:	4620      	mov	r0, r4
 801518c:	f004 ffa4 	bl	801a0d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8015190:	4605      	mov	r5, r0
 8015192:	b118      	cbz	r0, 801519c <my_calloc+0x18>
 8015194:	4622      	mov	r2, r4
 8015196:	2100      	movs	r1, #0
 8015198:	f016 ff2a 	bl	802bff0 <memset>
}
 801519c:	4628      	mov	r0, r5
 801519e:	bd38      	pop	{r3, r4, r5, pc}

080151a0 <dev_description_handler>:
		}
	}
}


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 80151a0:	b570      	push	{r4, r5, r6, lr}
 80151a2:	b088      	sub	sp, #32
 80151a4:	4605      	mov	r5, r0
 80151a6:	460c      	mov	r4, r1
	logging(L_DEBUG, "Call dev_description_handler");
 80151a8:	4917      	ldr	r1, [pc, #92]	@ (8015208 <dev_description_handler+0x68>)
 80151aa:	2000      	movs	r0, #0
 80151ac:	f7fc fe00 	bl	8011db0 <logging>
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80151b0:	ae06      	add	r6, sp, #24
 80151b2:	4916      	ldr	r1, [pc, #88]	@ (801520c <dev_description_handler+0x6c>)
 80151b4:	4630      	mov	r0, r6
 80151b6:	f00e fbe7 	bl	8023988 <mg_str_s>
 80151ba:	2300      	movs	r3, #0
 80151bc:	9300      	str	r3, [sp, #0]
 80151be:	e896 000c 	ldmia.w	r6, {r2, r3}
 80151c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80151c6:	f00e fe01 	bl	8023dcc <mg_match>
 80151ca:	b1a8      	cbz	r0, 80151f8 <dev_description_handler+0x58>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, ssdp_dev_ver, dev_id, ip_addr_str);
 80151cc:	4b10      	ldr	r3, [pc, #64]	@ (8015210 <dev_description_handler+0x70>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	9305      	str	r3, [sp, #20]
 80151d2:	4b10      	ldr	r3, [pc, #64]	@ (8015214 <dev_description_handler+0x74>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	9304      	str	r3, [sp, #16]
 80151d8:	4b0f      	ldr	r3, [pc, #60]	@ (8015218 <dev_description_handler+0x78>)
 80151da:	9303      	str	r3, [sp, #12]
 80151dc:	4b0f      	ldr	r3, [pc, #60]	@ (801521c <dev_description_handler+0x7c>)
 80151de:	9302      	str	r3, [sp, #8]
 80151e0:	4b0f      	ldr	r3, [pc, #60]	@ (8015220 <dev_description_handler+0x80>)
 80151e2:	9301      	str	r3, [sp, #4]
 80151e4:	4b0f      	ldr	r3, [pc, #60]	@ (8015224 <dev_description_handler+0x84>)
 80151e6:	9300      	str	r3, [sp, #0]
 80151e8:	4b0f      	ldr	r3, [pc, #60]	@ (8015228 <dev_description_handler+0x88>)
 80151ea:	4a10      	ldr	r2, [pc, #64]	@ (801522c <dev_description_handler+0x8c>)
 80151ec:	21c8      	movs	r1, #200	@ 0xc8
 80151ee:	4628      	mov	r0, r5
 80151f0:	f00e fa40 	bl	8023674 <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 80151f4:	b008      	add	sp, #32
 80151f6:	bd70      	pop	{r4, r5, r6, pc}
		mg_http_reply(c, 400, "", //TODO delete for release,
 80151f8:	4b0d      	ldr	r3, [pc, #52]	@ (8015230 <dev_description_handler+0x90>)
 80151fa:	4a0c      	ldr	r2, [pc, #48]	@ (801522c <dev_description_handler+0x8c>)
 80151fc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8015200:	4628      	mov	r0, r5
 8015202:	f00e fa37 	bl	8023674 <mg_http_reply>
}
 8015206:	e7f5      	b.n	80151f4 <dev_description_handler+0x54>
 8015208:	080374bc 	.word	0x080374bc
 801520c:	08036070 	.word	0x08036070
 8015210:	2000219c 	.word	0x2000219c
 8015214:	200021a4 	.word	0x200021a4
 8015218:	080370b0 	.word	0x080370b0
 801521c:	080370c8 	.word	0x080370c8
 8015220:	080370b8 	.word	0x080370b8
 8015224:	080370dc 	.word	0x080370dc
 8015228:	080377c4 	.word	0x080377c4
 801522c:	0803606c 	.word	0x0803606c
 8015230:	08036510 	.word	0x08036510

08015234 <dev_404_handler>:


static void dev_404_handler(struct mg_connection *c, struct mg_http_message *hm){
 8015234:	b510      	push	{r4, lr}
 8015236:	4604      	mov	r4, r0
	logging(L_DEBUG, "Call  dev_404_handler");
 8015238:	4905      	ldr	r1, [pc, #20]	@ (8015250 <dev_404_handler+0x1c>)
 801523a:	2000      	movs	r0, #0
 801523c:	f7fc fdb8 	bl	8011db0 <logging>
	mg_http_reply(c, 404, "", //TODO delete for release,
 8015240:	4b04      	ldr	r3, [pc, #16]	@ (8015254 <dev_404_handler+0x20>)
 8015242:	4a05      	ldr	r2, [pc, #20]	@ (8015258 <dev_404_handler+0x24>)
 8015244:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8015248:	4620      	mov	r0, r4
 801524a:	f00e fa13 	bl	8023674 <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Not found\"}\r\n");

}
 801524e:	bd10      	pop	{r4, pc}
 8015250:	080374dc 	.word	0x080374dc
 8015254:	080374f4 	.word	0x080374f4
 8015258:	0803606c 	.word	0x0803606c

0801525c <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){

	if (ev == MG_EV_HTTP_MSG) {
 801525c:	290b      	cmp	r1, #11
 801525e:	d000      	beq.n	8015262 <ssdp_web_handler+0x6>
 8015260:	4770      	bx	lr
static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 8015262:	b570      	push	{r4, r5, r6, lr}
 8015264:	b086      	sub	sp, #24
 8015266:	4605      	mov	r5, r0
 8015268:	4614      	mov	r4, r2
		logging(L_DEBUG, "Call ssdp_web_handler MG_EV_HTTP_MSG");
 801526a:	4917      	ldr	r1, [pc, #92]	@ (80152c8 <ssdp_web_handler+0x6c>)
 801526c:	2000      	movs	r0, #0
 801526e:	f7fc fd9f 	bl	8011db0 <logging>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 8015272:	ae02      	add	r6, sp, #8
 8015274:	4915      	ldr	r1, [pc, #84]	@ (80152cc <ssdp_web_handler+0x70>)
 8015276:	4630      	mov	r0, r6
 8015278:	f00e fb86 	bl	8023988 <mg_str_s>
 801527c:	2300      	movs	r3, #0
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015284:	f104 0108 	add.w	r1, r4, #8
 8015288:	c903      	ldmia	r1, {r0, r1}
 801528a:	f00e fd9f 	bl	8023dcc <mg_match>
 801528e:	b128      	cbz	r0, 801529c <ssdp_web_handler+0x40>
			dev_description_handler(c, hm);
 8015290:	4621      	mov	r1, r4
 8015292:	4628      	mov	r0, r5
 8015294:	f7ff ff84 	bl	80151a0 <dev_description_handler>
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
			dev_404_handler(c, hm);
		}
	}
}
 8015298:	b006      	add	sp, #24
 801529a:	bd70      	pop	{r4, r5, r6, pc}
		}else if (mg_match(hm->uri, mg_str("/*"), NULL)) {
 801529c:	ae04      	add	r6, sp, #16
 801529e:	490c      	ldr	r1, [pc, #48]	@ (80152d0 <ssdp_web_handler+0x74>)
 80152a0:	4630      	mov	r0, r6
 80152a2:	f00e fb71 	bl	8023988 <mg_str_s>
 80152a6:	2300      	movs	r3, #0
 80152a8:	9300      	str	r3, [sp, #0]
 80152aa:	e896 000c 	ldmia.w	r6, {r2, r3}
 80152ae:	f104 0108 	add.w	r1, r4, #8
 80152b2:	c903      	ldmia	r1, {r0, r1}
 80152b4:	f00e fd8a 	bl	8023dcc <mg_match>
 80152b8:	2800      	cmp	r0, #0
 80152ba:	d0ed      	beq.n	8015298 <ssdp_web_handler+0x3c>
			dev_404_handler(c, hm);
 80152bc:	4621      	mov	r1, r4
 80152be:	4628      	mov	r0, r5
 80152c0:	f7ff ffb8 	bl	8015234 <dev_404_handler>
}
 80152c4:	e7e8      	b.n	8015298 <ssdp_web_handler+0x3c>
 80152c6:	bf00      	nop
 80152c8:	08037520 	.word	0x08037520
 80152cc:	08037548 	.word	0x08037548
 80152d0:	08037560 	.word	0x08037560

080152d4 <ip_to_string>:
void ip_to_string(uint32_t ip, char *buffer) {
 80152d4:	b510      	push	{r4, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	4602      	mov	r2, r0
 80152da:	4608      	mov	r0, r1
    bytes[3] = (ip >> 24) & 0xFF; // Старший байт
 80152dc:	0e14      	lsrs	r4, r2, #24
 80152de:	f88d 400f 	strb.w	r4, [sp, #15]
    bytes[2] = (ip >> 16) & 0xFF;
 80152e2:	0c11      	lsrs	r1, r2, #16
 80152e4:	f88d 100e 	strb.w	r1, [sp, #14]
    bytes[1] = (ip >> 8) & 0xFF;
 80152e8:	0a13      	lsrs	r3, r2, #8
 80152ea:	f88d 300d 	strb.w	r3, [sp, #13]
    bytes[0] = ip & 0xFF;         // Младший байт
 80152ee:	f88d 200c 	strb.w	r2, [sp, #12]
    sprintf(buffer, "%u.%u.%u.%u", bytes[0], bytes[1], bytes[2], bytes[3]);
 80152f2:	9401      	str	r4, [sp, #4]
 80152f4:	b2c9      	uxtb	r1, r1
 80152f6:	9100      	str	r1, [sp, #0]
 80152f8:	b2db      	uxtb	r3, r3
 80152fa:	b2d2      	uxtb	r2, r2
 80152fc:	4902      	ldr	r1, [pc, #8]	@ (8015308 <ip_to_string+0x34>)
 80152fe:	f016 fab5 	bl	802b86c <sprintf>
}
 8015302:	b004      	add	sp, #16
 8015304:	bd10      	pop	{r4, pc}
 8015306:	bf00      	nop
 8015308:	08037564 	.word	0x08037564

0801530c <send_ssdp_notify>:
static void send_ssdp_notify(void *param){
 801530c:	b570      	push	{r4, r5, r6, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	4606      	mov	r6, r0
	logging(L_DEBUG, "Call send_ssdp_notify");
 8015312:	491e      	ldr	r1, [pc, #120]	@ (801538c <send_ssdp_notify+0x80>)
 8015314:	2000      	movs	r0, #0
 8015316:	f7fc fd4b 	bl	8011db0 <logging>
	size_t buff_len = (strlen(ssdp_notify_template) + strlen(MG_VERSION) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + strlen(dev_id)+ 20); //20 just for spirit healthy, in rel +1 for \0 is needed
 801531a:	4b1d      	ldr	r3, [pc, #116]	@ (8015390 <send_ssdp_notify+0x84>)
 801531c:	6818      	ldr	r0, [r3, #0]
 801531e:	f7fa ffbf 	bl	80102a0 <strlen>
 8015322:	4604      	mov	r4, r0
	buff = calloc(buff_len, sizeof(char));
 8015324:	2101      	movs	r1, #1
 8015326:	f200 1039 	addw	r0, r0, #313	@ 0x139
 801532a:	f7ff ff2b 	bl	8015184 <my_calloc>
 801532e:	4a19      	ldr	r2, [pc, #100]	@ (8015394 <send_ssdp_notify+0x88>)
 8015330:	6010      	str	r0, [r2, #0]
	if (!buff) {
 8015332:	b330      	cbz	r0, 8015382 <send_ssdp_notify+0x76>
	ip_to_string(mif->ip, ip_addr_str);
 8015334:	4b18      	ldr	r3, [pc, #96]	@ (8015398 <send_ssdp_notify+0x8c>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	4d18      	ldr	r5, [pc, #96]	@ (801539c <send_ssdp_notify+0x90>)
 801533a:	6829      	ldr	r1, [r5, #0]
 801533c:	6898      	ldr	r0, [r3, #8]
 801533e:	f7ff ffc9 	bl	80152d4 <ip_to_string>
	snprintf(buff, buff_len-1, ssdp_notify_template, MG_VERSION, ip_addr_str, ssdp_web_port, dev_id);
 8015342:	4b13      	ldr	r3, [pc, #76]	@ (8015390 <send_ssdp_notify+0x84>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	9302      	str	r3, [sp, #8]
 8015348:	4b15      	ldr	r3, [pc, #84]	@ (80153a0 <send_ssdp_notify+0x94>)
 801534a:	9301      	str	r3, [sp, #4]
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	9300      	str	r3, [sp, #0]
 8015350:	4b14      	ldr	r3, [pc, #80]	@ (80153a4 <send_ssdp_notify+0x98>)
 8015352:	4a15      	ldr	r2, [pc, #84]	@ (80153a8 <send_ssdp_notify+0x9c>)
 8015354:	f504 719c 	add.w	r1, r4, #312	@ 0x138
 8015358:	480e      	ldr	r0, [pc, #56]	@ (8015394 <send_ssdp_notify+0x88>)
 801535a:	6800      	ldr	r0, [r0, #0]
 801535c:	f016 f91e 	bl	802b59c <snprintf>
    if (udp_conn != NULL) {
 8015360:	b14e      	cbz	r6, 8015376 <send_ssdp_notify+0x6a>
        mg_send(udp_conn, buff, strlen(buff));
 8015362:	4b0c      	ldr	r3, [pc, #48]	@ (8015394 <send_ssdp_notify+0x88>)
 8015364:	681c      	ldr	r4, [r3, #0]
 8015366:	4620      	mov	r0, r4
 8015368:	f7fa ff9a 	bl	80102a0 <strlen>
 801536c:	4602      	mov	r2, r0
 801536e:	4621      	mov	r1, r4
 8015370:	4630      	mov	r0, r6
 8015372:	f011 faf5 	bl	8026960 <mg_send>
    free(buff);
 8015376:	4b07      	ldr	r3, [pc, #28]	@ (8015394 <send_ssdp_notify+0x88>)
 8015378:	6818      	ldr	r0, [r3, #0]
 801537a:	f004 ff2f 	bl	801a1dc <vPortFree>
}
 801537e:	b004      	add	sp, #16
 8015380:	bd70      	pop	{r4, r5, r6, pc}
		logging(L_ERR, "Error allocating memory for send SSDP Message");
 8015382:	490a      	ldr	r1, [pc, #40]	@ (80153ac <send_ssdp_notify+0xa0>)
 8015384:	2003      	movs	r0, #3
 8015386:	f7fc fd13 	bl	8011db0 <logging>
		return; //TODO add log
 801538a:	e7f8      	b.n	801537e <send_ssdp_notify+0x72>
 801538c:	08037570 	.word	0x08037570
 8015390:	200021a4 	.word	0x200021a4
 8015394:	200021a0 	.word	0x200021a0
 8015398:	20002194 	.word	0x20002194
 801539c:	2000219c 	.word	0x2000219c
 80153a0:	080375c0 	.word	0x080375c0
 80153a4:	080375b8 	.word	0x080375b8
 80153a8:	080376cc 	.word	0x080376cc
 80153ac:	08037588 	.word	0x08037588

080153b0 <ssdp_listener_handler>:
}

static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
	//char *buffer = NULL;

	if (ev == MG_EV_READ) {
 80153b0:	2907      	cmp	r1, #7
 80153b2:	d000      	beq.n	80153b6 <ssdp_listener_handler+0x6>
 80153b4:	4770      	bx	lr
static void ssdp_listener_handler(struct mg_connection *c, int ev, void *ev_data){
 80153b6:	b570      	push	{r4, r5, r6, lr}
 80153b8:	b088      	sub	sp, #32
 80153ba:	4604      	mov	r4, r0
		logging(L_DEBUG, "Call ssdp_listener_handler if (ev == MG_EV_READ)");
 80153bc:	491a      	ldr	r1, [pc, #104]	@ (8015428 <ssdp_listener_handler+0x78>)
 80153be:	2000      	movs	r0, #0
 80153c0:	f7fc fcf6 	bl	8011db0 <logging>
		struct mg_str msg = mg_str_n((char *) udp_listen_conn->recv.buf, udp_listen_conn->recv.len);
 80153c4:	4b19      	ldr	r3, [pc, #100]	@ (801542c <ssdp_listener_handler+0x7c>)
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	ad02      	add	r5, sp, #8
 80153ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80153cc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80153ce:	4628      	mov	r0, r5
 80153d0:	f00e fae6 	bl	80239a0 <mg_str_n>
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 80153d4:	ae04      	add	r6, sp, #16
 80153d6:	4916      	ldr	r1, [pc, #88]	@ (8015430 <ssdp_listener_handler+0x80>)
 80153d8:	4630      	mov	r0, r6
 80153da:	f00e fad5 	bl	8023988 <mg_str_s>
 80153de:	2300      	movs	r3, #0
 80153e0:	9300      	str	r3, [sp, #0]
 80153e2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80153e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80153ea:	f00e fcef 	bl	8023dcc <mg_match>
 80153ee:	b918      	cbnz	r0, 80153f8 <ssdp_listener_handler+0x48>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
			send_ssdp_notify(udp_listen_conn);
		}
		c->recv.len = 0;
 80153f0:	2300      	movs	r3, #0
 80153f2:	6423      	str	r3, [r4, #64]	@ 0x40
	}
}
 80153f4:	b008      	add	sp, #32
 80153f6:	bd70      	pop	{r4, r5, r6, pc}
		if (mg_match(msg, mg_str("M-SEARCH#"), NULL) && mg_match(msg, mg_str("#ssdp:discover#"), NULL)) {
 80153f8:	ad06      	add	r5, sp, #24
 80153fa:	490e      	ldr	r1, [pc, #56]	@ (8015434 <ssdp_listener_handler+0x84>)
 80153fc:	4628      	mov	r0, r5
 80153fe:	f00e fac3 	bl	8023988 <mg_str_s>
 8015402:	2300      	movs	r3, #0
 8015404:	9300      	str	r3, [sp, #0]
 8015406:	e895 000c 	ldmia.w	r5, {r2, r3}
 801540a:	a902      	add	r1, sp, #8
 801540c:	c903      	ldmia	r1, {r0, r1}
 801540e:	f00e fcdd 	bl	8023dcc <mg_match>
 8015412:	2800      	cmp	r0, #0
 8015414:	d0ec      	beq.n	80153f0 <ssdp_listener_handler+0x40>
			logging(L_DEBUG, "SSDP response on M-SEARCH ssdp:discover request");
 8015416:	4908      	ldr	r1, [pc, #32]	@ (8015438 <ssdp_listener_handler+0x88>)
 8015418:	2000      	movs	r0, #0
 801541a:	f7fc fcc9 	bl	8011db0 <logging>
			send_ssdp_notify(udp_listen_conn);
 801541e:	4b03      	ldr	r3, [pc, #12]	@ (801542c <ssdp_listener_handler+0x7c>)
 8015420:	6818      	ldr	r0, [r3, #0]
 8015422:	f7ff ff73 	bl	801530c <send_ssdp_notify>
 8015426:	e7e3      	b.n	80153f0 <ssdp_listener_handler+0x40>
 8015428:	080375c8 	.word	0x080375c8
 801542c:	20002190 	.word	0x20002190
 8015430:	080375fc 	.word	0x080375fc
 8015434:	08037608 	.word	0x08037608
 8015438:	08037618 	.word	0x08037618

0801543c <ssdp_timer_handler>:
static void ssdp_timer_handler(void *param){
 801543c:	b510      	push	{r4, lr}
	logging(L_DEBUG, "Call ssdp_timer_handler");
 801543e:	490c      	ldr	r1, [pc, #48]	@ (8015470 <ssdp_timer_handler+0x34>)
 8015440:	2000      	movs	r0, #0
 8015442:	f7fc fcb5 	bl	8011db0 <logging>
	struct mg_connection *conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8015446:	2300      	movs	r3, #0
 8015448:	461a      	mov	r2, r3
 801544a:	490a      	ldr	r1, [pc, #40]	@ (8015474 <ssdp_timer_handler+0x38>)
 801544c:	480a      	ldr	r0, [pc, #40]	@ (8015478 <ssdp_timer_handler+0x3c>)
 801544e:	6800      	ldr	r0, [r0, #0]
 8015450:	f012 ff5a 	bl	8028308 <mg_connect>
	if (conn == NULL){
 8015454:	b130      	cbz	r0, 8015464 <ssdp_timer_handler+0x28>
 8015456:	4604      	mov	r4, r0
	send_ssdp_notify(conn);
 8015458:	f7ff ff58 	bl	801530c <send_ssdp_notify>
	mg_close_conn(conn);
 801545c:	4620      	mov	r0, r4
 801545e:	f011 f93d 	bl	80266dc <mg_close_conn>
}
 8015462:	bd10      	pop	{r4, pc}
		logging(L_ERR, "Call ssdp_timer_handler error open conn");
 8015464:	4905      	ldr	r1, [pc, #20]	@ (801547c <ssdp_timer_handler+0x40>)
 8015466:	2003      	movs	r0, #3
 8015468:	f7fc fca2 	bl	8011db0 <logging>
		return ;
 801546c:	e7f9      	b.n	8015462 <ssdp_timer_handler+0x26>
 801546e:	bf00      	nop
 8015470:	08037648 	.word	0x08037648
 8015474:	08037968 	.word	0x08037968
 8015478:	20002198 	.word	0x20002198
 801547c:	08037660 	.word	0x08037660

08015480 <ssdp_set_id>:
void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 8015480:	b570      	push	{r4, r5, r6, lr}
 8015482:	4606      	mov	r6, r0
 8015484:	460d      	mov	r5, r1
	logging(L_DEBUG, "Call ssdp_set_id");
 8015486:	4910      	ldr	r1, [pc, #64]	@ (80154c8 <ssdp_set_id+0x48>)
 8015488:	2000      	movs	r0, #0
 801548a:	f7fc fc91 	bl	8011db0 <logging>
	if (id && (id_len > 0)){
 801548e:	b1d6      	cbz	r6, 80154c6 <ssdp_set_id+0x46>
 8015490:	b1cd      	cbz	r5, 80154c6 <ssdp_set_id+0x46>
		if(dev_id) free(dev_id);
 8015492:	4b0e      	ldr	r3, [pc, #56]	@ (80154cc <ssdp_set_id+0x4c>)
 8015494:	6818      	ldr	r0, [r3, #0]
 8015496:	b108      	cbz	r0, 801549c <ssdp_set_id+0x1c>
 8015498:	f004 fea0 	bl	801a1dc <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 801549c:	0068      	lsls	r0, r5, #1
 801549e:	2101      	movs	r1, #1
 80154a0:	4408      	add	r0, r1
 80154a2:	f7ff fe6f 	bl	8015184 <my_calloc>
 80154a6:	4b09      	ldr	r3, [pc, #36]	@ (80154cc <ssdp_set_id+0x4c>)
 80154a8:	6018      	str	r0, [r3, #0]
		if (dev_id ){
 80154aa:	b160      	cbz	r0, 80154c6 <ssdp_set_id+0x46>
	        for (unsigned int i = 0; i < id_len; i++) {
 80154ac:	2400      	movs	r4, #0
 80154ae:	e008      	b.n	80154c2 <ssdp_set_id+0x42>
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 80154b0:	4b06      	ldr	r3, [pc, #24]	@ (80154cc <ssdp_set_id+0x4c>)
 80154b2:	6818      	ldr	r0, [r3, #0]
 80154b4:	5d32      	ldrb	r2, [r6, r4]
 80154b6:	4906      	ldr	r1, [pc, #24]	@ (80154d0 <ssdp_set_id+0x50>)
 80154b8:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80154bc:	f016 f9d6 	bl	802b86c <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 80154c0:	3401      	adds	r4, #1
 80154c2:	42a5      	cmp	r5, r4
 80154c4:	d8f4      	bhi.n	80154b0 <ssdp_set_id+0x30>
}
 80154c6:	bd70      	pop	{r4, r5, r6, pc}
 80154c8:	08037688 	.word	0x08037688
 80154cc:	200021a4 	.word	0x200021a4
 80154d0:	08037014 	.word	0x08037014

080154d4 <ssdp_start_server>:

void ssdp_start_server(void * param_mgr, void * param_mif){
 80154d4:	b530      	push	{r4, r5, lr}
 80154d6:	b085      	sub	sp, #20
	mgr 		= (struct mg_mgr *)param_mgr;
 80154d8:	4b18      	ldr	r3, [pc, #96]	@ (801553c <ssdp_start_server+0x68>)
 80154da:	6018      	str	r0, [r3, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 80154dc:	4b18      	ldr	r3, [pc, #96]	@ (8015540 <ssdp_start_server+0x6c>)
 80154de:	6019      	str	r1, [r3, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 80154e0:	2101      	movs	r1, #1
 80154e2:	2028      	movs	r0, #40	@ 0x28
 80154e4:	f7ff fe4e 	bl	8015184 <my_calloc>
 80154e8:	4b16      	ldr	r3, [pc, #88]	@ (8015544 <ssdp_start_server+0x70>)
 80154ea:	6018      	str	r0, [r3, #0]
	if (!ip_addr_str) return; //TODO add logging
 80154ec:	b318      	cbz	r0, 8015536 <ssdp_start_server+0x62>

	ssdp_set_id(mif->mac, mac_len);
 80154ee:	4d14      	ldr	r5, [pc, #80]	@ (8015540 <ssdp_start_server+0x6c>)
 80154f0:	2106      	movs	r1, #6
 80154f2:	6828      	ldr	r0, [r5, #0]
 80154f4:	f7ff ffc4 	bl	8015480 <ssdp_set_id>

	logging(L_INFO, "Starting SSDP service");
 80154f8:	4913      	ldr	r1, [pc, #76]	@ (8015548 <ssdp_start_server+0x74>)
 80154fa:	2001      	movs	r0, #1
 80154fc:	f7fc fc58 	bl	8011db0 <logging>
	mg_timer_add(mgr, 60000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, ssdp_timer_handler, NULL);
 8015500:	4c0e      	ldr	r4, [pc, #56]	@ (801553c <ssdp_start_server+0x68>)
 8015502:	2300      	movs	r3, #0
 8015504:	9302      	str	r3, [sp, #8]
 8015506:	4b11      	ldr	r3, [pc, #68]	@ (801554c <ssdp_start_server+0x78>)
 8015508:	9301      	str	r3, [sp, #4]
 801550a:	2303      	movs	r3, #3
 801550c:	9300      	str	r3, [sp, #0]
 801550e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8015512:	2300      	movs	r3, #0
 8015514:	6820      	ldr	r0, [r4, #0]
 8015516:	f00f fc19 	bl	8024d4c <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:40000", ssdp_web_handler, mif);
 801551a:	682b      	ldr	r3, [r5, #0]
 801551c:	4a0c      	ldr	r2, [pc, #48]	@ (8015550 <ssdp_start_server+0x7c>)
 801551e:	490d      	ldr	r1, [pc, #52]	@ (8015554 <ssdp_start_server+0x80>)
 8015520:	6820      	ldr	r0, [r4, #0]
 8015522:	f011 f9b5 	bl	8026890 <mg_http_listen>
	udp_listen_conn = mg_listen(mgr, ssdp_addr, ssdp_listener_handler, mif);
 8015526:	682b      	ldr	r3, [r5, #0]
 8015528:	4a0b      	ldr	r2, [pc, #44]	@ (8015558 <ssdp_start_server+0x84>)
 801552a:	490c      	ldr	r1, [pc, #48]	@ (801555c <ssdp_start_server+0x88>)
 801552c:	6820      	ldr	r0, [r4, #0]
 801552e:	f011 f92b 	bl	8026788 <mg_listen>
 8015532:	4b0b      	ldr	r3, [pc, #44]	@ (8015560 <ssdp_start_server+0x8c>)
 8015534:	6018      	str	r0, [r3, #0]
}
 8015536:	b005      	add	sp, #20
 8015538:	bd30      	pop	{r4, r5, pc}
 801553a:	bf00      	nop
 801553c:	20002198 	.word	0x20002198
 8015540:	20002194 	.word	0x20002194
 8015544:	2000219c 	.word	0x2000219c
 8015548:	0803769c 	.word	0x0803769c
 801554c:	0801543d 	.word	0x0801543d
 8015550:	0801525d 	.word	0x0801525d
 8015554:	080376b4 	.word	0x080376b4
 8015558:	080153b1 	.word	0x080153b1
 801555c:	08037968 	.word	0x08037968
 8015560:	20002190 	.word	0x20002190

08015564 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8015564:	4770      	bx	lr
	...

08015568 <sFLASH_SPI_ReadBuffer>:
	flash_conf.receive_buffer(&byte, 1);
	return byte;
}


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8015568:	b508      	push	{r3, lr}
	flash_conf.receive_buffer(buffer, size);
 801556a:	4b02      	ldr	r3, [pc, #8]	@ (8015574 <sFLASH_SPI_ReadBuffer+0xc>)
 801556c:	685b      	ldr	r3, [r3, #4]
 801556e:	4798      	blx	r3
}
 8015570:	bd08      	pop	{r3, pc}
 8015572:	bf00      	nop
 8015574:	200021e8 	.word	0x200021e8

08015578 <SPI_flash_reg_cb>:
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 8015578:	b410      	push	{r4}
	if (chip_select){
 801557a:	b158      	cbz	r0, 8015594 <SPI_flash_reg_cb+0x1c>
 801557c:	4604      	mov	r4, r0
		flash_conf.select_chip		= chip_select;
 801557e:	4809      	ldr	r0, [pc, #36]	@ (80155a4 <SPI_flash_reg_cb+0x2c>)
 8015580:	60c4      	str	r4, [r0, #12]
	if (chip_deselect){
 8015582:	b159      	cbz	r1, 801559c <SPI_flash_reg_cb+0x24>
		flash_conf.deselect_chip	= chip_deselect;
 8015584:	4807      	ldr	r0, [pc, #28]	@ (80155a4 <SPI_flash_reg_cb+0x2c>)
 8015586:	6101      	str	r1, [r0, #16]
	flash_conf.receive_buffer	= receive_buffer;
 8015588:	4906      	ldr	r1, [pc, #24]	@ (80155a4 <SPI_flash_reg_cb+0x2c>)
 801558a:	604a      	str	r2, [r1, #4]
	flash_conf.send_byte		= send_byte;
 801558c:	608b      	str	r3, [r1, #8]
}
 801558e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015592:	4770      	bx	lr
		flash_conf.select_chip		= function_prototype;
 8015594:	4803      	ldr	r0, [pc, #12]	@ (80155a4 <SPI_flash_reg_cb+0x2c>)
 8015596:	4c04      	ldr	r4, [pc, #16]	@ (80155a8 <SPI_flash_reg_cb+0x30>)
 8015598:	60c4      	str	r4, [r0, #12]
 801559a:	e7f2      	b.n	8015582 <SPI_flash_reg_cb+0xa>
		flash_conf.deselect_chip	= function_prototype;
 801559c:	4901      	ldr	r1, [pc, #4]	@ (80155a4 <SPI_flash_reg_cb+0x2c>)
 801559e:	4802      	ldr	r0, [pc, #8]	@ (80155a8 <SPI_flash_reg_cb+0x30>)
 80155a0:	6108      	str	r0, [r1, #16]
 80155a2:	e7f1      	b.n	8015588 <SPI_flash_reg_cb+0x10>
 80155a4:	200021e8 	.word	0x200021e8
 80155a8:	08015565 	.word	0x08015565

080155ac <sFLASH_CS_LOW>:
void sFLASH_CS_LOW(void){ //select chip
 80155ac:	b508      	push	{r3, lr}
	flash_conf.select_chip();
 80155ae:	4b02      	ldr	r3, [pc, #8]	@ (80155b8 <sFLASH_CS_LOW+0xc>)
 80155b0:	68db      	ldr	r3, [r3, #12]
 80155b2:	4798      	blx	r3
}
 80155b4:	bd08      	pop	{r3, pc}
 80155b6:	bf00      	nop
 80155b8:	200021e8 	.word	0x200021e8

080155bc <sFLASH_CS_HIGH>:
void sFLASH_CS_HIGH(void){ //deselect chip
 80155bc:	b508      	push	{r3, lr}
	flash_conf.deselect_chip();
 80155be:	4b02      	ldr	r3, [pc, #8]	@ (80155c8 <sFLASH_CS_HIGH+0xc>)
 80155c0:	691b      	ldr	r3, [r3, #16]
 80155c2:	4798      	blx	r3
}
 80155c4:	bd08      	pop	{r3, pc}
 80155c6:	bf00      	nop
 80155c8:	200021e8 	.word	0x200021e8

080155cc <sFLASH_ReadByte>:
{
 80155cc:	b500      	push	{lr}
 80155ce:	b083      	sub	sp, #12
	flash_conf.receive_buffer(&byte, 1);
 80155d0:	4b05      	ldr	r3, [pc, #20]	@ (80155e8 <sFLASH_ReadByte+0x1c>)
 80155d2:	685b      	ldr	r3, [r3, #4]
 80155d4:	2101      	movs	r1, #1
 80155d6:	f10d 0007 	add.w	r0, sp, #7
 80155da:	4798      	blx	r3
}
 80155dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80155e0:	b003      	add	sp, #12
 80155e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80155e6:	bf00      	nop
 80155e8:	200021e8 	.word	0x200021e8

080155ec <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 80155ec:	b508      	push	{r3, lr}
	flash_conf.send_byte(byte);
 80155ee:	4b02      	ldr	r3, [pc, #8]	@ (80155f8 <sFLASH_SendByte+0xc>)
 80155f0:	689b      	ldr	r3, [r3, #8]
 80155f2:	4798      	blx	r3
}
 80155f4:	bd08      	pop	{r3, pc}
 80155f6:	bf00      	nop
 80155f8:	200021e8 	.word	0x200021e8

080155fc <sFLASH_Reset>:
void sFLASH_Reset(void){
 80155fc:	b508      	push	{r3, lr}
    sFLASH_CS_LOW();
 80155fe:	f7ff ffd5 	bl	80155ac <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8015602:	2066      	movs	r0, #102	@ 0x66
 8015604:	f7ff fff2 	bl	80155ec <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8015608:	2099      	movs	r0, #153	@ 0x99
 801560a:	f7ff ffef 	bl	80155ec <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 801560e:	f7ff ffd5 	bl	80155bc <sFLASH_CS_HIGH>
}
 8015612:	bd08      	pop	{r3, pc}

08015614 <sFLASH_Init>:
void sFLASH_Init(void){
 8015614:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8015616:	2064      	movs	r0, #100	@ 0x64
 8015618:	f000 fa16 	bl	8015a48 <HAL_Delay>
    sFLASH_Reset();
 801561c:	f7ff ffee 	bl	80155fc <sFLASH_Reset>
    HAL_Delay(100);
 8015620:	2064      	movs	r0, #100	@ 0x64
 8015622:	f000 fa11 	bl	8015a48 <HAL_Delay>
    HAL_Delay(100);
 8015626:	2064      	movs	r0, #100	@ 0x64
 8015628:	f000 fa0e 	bl	8015a48 <HAL_Delay>
}
 801562c:	bd08      	pop	{r3, pc}

0801562e <sFLASH_ReadBuffer>:
{
 801562e:	b570      	push	{r4, r5, r6, lr}
 8015630:	4606      	mov	r6, r0
 8015632:	460c      	mov	r4, r1
 8015634:	4615      	mov	r5, r2
  sFLASH_CS_LOW();
 8015636:	f7ff ffb9 	bl	80155ac <sFLASH_CS_LOW>
  if (NumByteToRead > 16){
 801563a:	2d10      	cmp	r5, #16
 801563c:	d917      	bls.n	801566e <sFLASH_ReadBuffer+0x40>
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 801563e:	200b      	movs	r0, #11
 8015640:	f7ff ffd4 	bl	80155ec <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015644:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015648:	f7ff ffd0 	bl	80155ec <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 801564c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015650:	f7ff ffcc 	bl	80155ec <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015654:	b2e0      	uxtb	r0, r4
 8015656:	f7ff ffc9 	bl	80155ec <sFLASH_SendByte>
	  sFLASH_SendByte(0x00);
 801565a:	2000      	movs	r0, #0
 801565c:	f7ff ffc6 	bl	80155ec <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8015660:	4629      	mov	r1, r5
 8015662:	4630      	mov	r0, r6
 8015664:	f7ff ff80 	bl	8015568 <sFLASH_SPI_ReadBuffer>
  sFLASH_CS_HIGH();
 8015668:	f7ff ffa8 	bl	80155bc <sFLASH_CS_HIGH>
}
 801566c:	bd70      	pop	{r4, r5, r6, pc}
	  sFLASH_SendByte(sFLASH_CMD_READ);
 801566e:	2003      	movs	r0, #3
 8015670:	f7ff ffbc 	bl	80155ec <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015674:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8015678:	f7ff ffb8 	bl	80155ec <sFLASH_SendByte>
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 801567c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8015680:	f7ff ffb4 	bl	80155ec <sFLASH_SendByte>
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8015684:	b2e0      	uxtb	r0, r4
 8015686:	f7ff ffb1 	bl	80155ec <sFLASH_SendByte>
	  while (NumByteToRead--) /*!< while there is data to be read */
 801568a:	e004      	b.n	8015696 <sFLASH_ReadBuffer+0x68>
		  *pBuffer = sFLASH_ReadByte();
 801568c:	f7ff ff9e 	bl	80155cc <sFLASH_ReadByte>
 8015690:	f806 0b01 	strb.w	r0, [r6], #1
	  while (NumByteToRead--) /*!< while there is data to be read */
 8015694:	4625      	mov	r5, r4
 8015696:	1e6b      	subs	r3, r5, #1
 8015698:	b29c      	uxth	r4, r3
 801569a:	2d00      	cmp	r5, #0
 801569c:	d1f6      	bne.n	801568c <sFLASH_ReadBuffer+0x5e>
 801569e:	e7e3      	b.n	8015668 <sFLASH_ReadBuffer+0x3a>

080156a0 <sFLASH_ReadID>:
{
 80156a0:	b570      	push	{r4, r5, r6, lr}
  sFLASH_CS_LOW();
 80156a2:	f7ff ff83 	bl	80155ac <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80156a6:	f7ff ff89 	bl	80155bc <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80156aa:	f7ff ff7f 	bl	80155ac <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80156ae:	f7ff ff85 	bl	80155bc <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80156b2:	f7ff ff7b 	bl	80155ac <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80156b6:	209f      	movs	r0, #159	@ 0x9f
 80156b8:	f7ff ff98 	bl	80155ec <sFLASH_SendByte>
  Temp0 = sFLASH_ReadByte();
 80156bc:	f7ff ff86 	bl	80155cc <sFLASH_ReadByte>
 80156c0:	4606      	mov	r6, r0
  Temp1 = sFLASH_ReadByte();
 80156c2:	f7ff ff83 	bl	80155cc <sFLASH_ReadByte>
 80156c6:	4604      	mov	r4, r0
  Temp2 = sFLASH_ReadByte();
 80156c8:	f7ff ff80 	bl	80155cc <sFLASH_ReadByte>
 80156cc:	4605      	mov	r5, r0
  sFLASH_CS_HIGH();
 80156ce:	f7ff ff75 	bl	80155bc <sFLASH_CS_HIGH>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80156d2:	0224      	lsls	r4, r4, #8
 80156d4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
}
 80156d8:	ea44 0005 	orr.w	r0, r4, r5
 80156dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080156e0 <sFLASH_GetInfo>:
struct SPI_flash_info sFLASH_GetInfo(void){
 80156e0:	b538      	push	{r3, r4, r5, lr}
 80156e2:	4605      	mov	r5, r0
	sFLASH_Init();
 80156e4:	f7ff ff96 	bl	8015614 <sFLASH_Init>
	flash_id = sFLASH_ReadID();
 80156e8:	f7ff ffda 	bl	80156a0 <sFLASH_ReadID>
	switch (flash_id) {
 80156ec:	4b52      	ldr	r3, [pc, #328]	@ (8015838 <sFLASH_GetInfo+0x158>)
 80156ee:	4298      	cmp	r0, r3
 80156f0:	f000 8085 	beq.w	80157fe <sFLASH_GetInfo+0x11e>
 80156f4:	f0c0 809c 	bcc.w	8015830 <sFLASH_GetInfo+0x150>
 80156f8:	4b50      	ldr	r3, [pc, #320]	@ (801583c <sFLASH_GetInfo+0x15c>)
 80156fa:	4298      	cmp	r0, r3
 80156fc:	f200 8098 	bhi.w	8015830 <sFLASH_GetInfo+0x150>
 8015700:	3b03      	subs	r3, #3
 8015702:	4298      	cmp	r0, r3
 8015704:	f0c0 8094 	bcc.w	8015830 <sFLASH_GetInfo+0x150>
 8015708:	4b4d      	ldr	r3, [pc, #308]	@ (8015840 <sFLASH_GetInfo+0x160>)
 801570a:	4403      	add	r3, r0
 801570c:	2b03      	cmp	r3, #3
 801570e:	f200 808f 	bhi.w	8015830 <sFLASH_GetInfo+0x150>
 8015712:	e8df f003 	tbb	[pc, r3]
 8015716:	2b02      	.short	0x2b02
 8015718:	5d44      	.short	0x5d44
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 801571a:	4c4a      	ldr	r4, [pc, #296]	@ (8015844 <sFLASH_GetInfo+0x164>)
 801571c:	4b4a      	ldr	r3, [pc, #296]	@ (8015848 <sFLASH_GetInfo+0x168>)
 801571e:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015720:	2301      	movs	r3, #1
 8015722:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015724:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801572a:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801572c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015730:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 512;
 8015732:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015736:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q16", sizeof(flash_info.model_name) - 1);
 8015738:	2231      	movs	r2, #49	@ 0x31
 801573a:	4944      	ldr	r1, [pc, #272]	@ (801584c <sFLASH_GetInfo+0x16c>)
 801573c:	f104 000e 	add.w	r0, r4, #14
 8015740:	f016 fc9d 	bl	802c07e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015744:	2300      	movs	r3, #0
 8015746:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
	return flash_info;
 801574a:	46ac      	mov	ip, r5
 801574c:	4c3d      	ldr	r4, [pc, #244]	@ (8015844 <sFLASH_GetInfo+0x164>)
 801574e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015750:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015756:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801575a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801575c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015760:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015764:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 8015768:	4628      	mov	r0, r5
 801576a:	bd38      	pop	{r3, r4, r5, pc}
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 801576c:	4c35      	ldr	r4, [pc, #212]	@ (8015844 <sFLASH_GetInfo+0x164>)
 801576e:	4b38      	ldr	r3, [pc, #224]	@ (8015850 <sFLASH_GetInfo+0x170>)
 8015770:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015772:	2301      	movs	r3, #1
 8015774:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015776:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 8015778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801577c:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 801577e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015782:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015788:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q32", sizeof(flash_info.model_name) - 1);
 801578a:	2231      	movs	r2, #49	@ 0x31
 801578c:	4931      	ldr	r1, [pc, #196]	@ (8015854 <sFLASH_GetInfo+0x174>)
 801578e:	f104 000e 	add.w	r0, r4, #14
 8015792:	f016 fc74 	bl	802c07e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015796:	2300      	movs	r3, #0
 8015798:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801579c:	e7d5      	b.n	801574a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 801579e:	4c29      	ldr	r4, [pc, #164]	@ (8015844 <sFLASH_GetInfo+0x164>)
 80157a0:	4b2d      	ldr	r3, [pc, #180]	@ (8015858 <sFLASH_GetInfo+0x178>)
 80157a2:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80157a4:	2301      	movs	r3, #1
 80157a6:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80157a8:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80157aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80157ae:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80157b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80157b4:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 2048;
 80157b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80157ba:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q64", sizeof(flash_info.model_name) - 1);
 80157bc:	2231      	movs	r2, #49	@ 0x31
 80157be:	4927      	ldr	r1, [pc, #156]	@ (801585c <sFLASH_GetInfo+0x17c>)
 80157c0:	f104 000e 	add.w	r0, r4, #14
 80157c4:	f016 fc5b 	bl	802c07e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80157c8:	2300      	movs	r3, #0
 80157ca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80157ce:	e7bc      	b.n	801574a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 80157d0:	4c1c      	ldr	r4, [pc, #112]	@ (8015844 <sFLASH_GetInfo+0x164>)
 80157d2:	4b1a      	ldr	r3, [pc, #104]	@ (801583c <sFLASH_GetInfo+0x15c>)
 80157d4:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 80157d6:	2301      	movs	r3, #1
 80157d8:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 80157da:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 80157dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80157e0:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 80157e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80157e6:	8162      	strh	r2, [r4, #10]
			flash_info.block_count = 4096;
 80157e8:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "W25Q128", sizeof(flash_info.model_name) - 1);
 80157ea:	2231      	movs	r2, #49	@ 0x31
 80157ec:	491c      	ldr	r1, [pc, #112]	@ (8015860 <sFLASH_GetInfo+0x180>)
 80157ee:	f104 000e 	add.w	r0, r4, #14
 80157f2:	f016 fc44 	bl	802c07e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 80157f6:	2300      	movs	r3, #0
 80157f8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 80157fc:	e7a5      	b.n	801574a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 80157fe:	4c11      	ldr	r4, [pc, #68]	@ (8015844 <sFLASH_GetInfo+0x164>)
 8015800:	4b0d      	ldr	r3, [pc, #52]	@ (8015838 <sFLASH_GetInfo+0x158>)
 8015802:	6023      	str	r3, [r4, #0]
			flash_info.read_size = 1;
 8015804:	2301      	movs	r3, #1
 8015806:	80a3      	strh	r3, [r4, #4]
			flash_info.write_size = 1;
 8015808:	80e3      	strh	r3, [r4, #6]
			flash_info.erase_size = 4096;
 801580a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801580e:	8123      	strh	r3, [r4, #8]
			flash_info.page_size = 256;
 8015810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015814:	8163      	strh	r3, [r4, #10]
			flash_info.block_count = 1024;
 8015816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801581a:	81a3      	strh	r3, [r4, #12]
			strncpy(flash_info.model_name, "MX25L32", sizeof(flash_info.model_name) - 1);
 801581c:	2231      	movs	r2, #49	@ 0x31
 801581e:	4911      	ldr	r1, [pc, #68]	@ (8015864 <sFLASH_GetInfo+0x184>)
 8015820:	f104 000e 	add.w	r0, r4, #14
 8015824:	f016 fc2b 	bl	802c07e <strncpy>
			flash_info.model_name[sizeof(flash_info.model_name) - 1] = '\0'; // Guarantee null-terminator
 8015828:	2300      	movs	r3, #0
 801582a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			break;
 801582e:	e78c      	b.n	801574a <sFLASH_GetInfo+0x6a>
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8015830:	4b04      	ldr	r3, [pc, #16]	@ (8015844 <sFLASH_GetInfo+0x164>)
 8015832:	2200      	movs	r2, #0
 8015834:	601a      	str	r2, [r3, #0]
			break;
 8015836:	e788      	b.n	801574a <sFLASH_GetInfo+0x6a>
 8015838:	00c22016 	.word	0x00c22016
 801583c:	00ef4018 	.word	0x00ef4018
 8015840:	ff10bfeb 	.word	0xff10bfeb
 8015844:	200021a8 	.word	0x200021a8
 8015848:	00ef4015 	.word	0x00ef4015
 801584c:	08037984 	.word	0x08037984
 8015850:	00ef4016 	.word	0x00ef4016
 8015854:	0803798c 	.word	0x0803798c
 8015858:	00ef4017 	.word	0x00ef4017
 801585c:	08037994 	.word	0x08037994
 8015860:	0803799c 	.word	0x0803799c
 8015864:	080379a4 	.word	0x080379a4

08015868 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015868:	b508      	push	{r3, lr}
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801586a:	f7ff fe9f 	bl	80155ac <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 801586e:	2006      	movs	r0, #6
 8015870:	f7ff febc 	bl	80155ec <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015874:	f7ff fea2 	bl	80155bc <sFLASH_CS_HIGH>
}
 8015878:	bd08      	pop	{r3, pc}
	...

0801587c <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 801587c:	b538      	push	{r3, r4, r5, lr}
  uint8_t flashstatus = 0;

  int32_t timeout = 100000;
 801587e:	4d09      	ldr	r5, [pc, #36]	@ (80158a4 <sFLASH_WaitForWriteEnd+0x28>)
  //(sFLASH_CMD_RDSR);

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  sFLASH_CS_LOW();
 8015880:	f7ff fe94 	bl	80155ac <sFLASH_CS_LOW>
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015884:	2005      	movs	r0, #5
 8015886:	f7ff feb1 	bl	80155ec <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 801588a:	f7ff fe9f 	bl	80155cc <sFLASH_ReadByte>
 801588e:	4604      	mov	r4, r0

	  sFLASH_CS_HIGH();
 8015890:	f7ff fe94 	bl	80155bc <sFLASH_CS_HIGH>

	  /*!< Decrement timeout to avoid infinite loop */
	  if (timeout-- == 0)
 8015894:	462b      	mov	r3, r5
 8015896:	3d01      	subs	r5, #1
 8015898:	b113      	cbz	r3, 80158a0 <sFLASH_WaitForWriteEnd+0x24>
		  //printf("Timeout waiting for Write End\n"); Logging
		  return; //Exit if timeout
	  }

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 801589a:	f014 0f01 	tst.w	r4, #1
 801589e:	d1ef      	bne.n	8015880 <sFLASH_WaitForWriteEnd+0x4>

  /*!< Deselect the FLASH: Chip Select high */
  //sFLASH_CS_HIGH();
}
 80158a0:	bd38      	pop	{r3, r4, r5, pc}
 80158a2:	bf00      	nop
 80158a4:	000186a0 	.word	0x000186a0

080158a8 <sFLASH_EraseSector>:
{
 80158a8:	b510      	push	{r4, lr}
 80158aa:	4604      	mov	r4, r0
  sFLASH_WriteEnable();
 80158ac:	f7ff ffdc 	bl	8015868 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80158b0:	f7ff fe7c 	bl	80155ac <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_SE);
 80158b4:	2020      	movs	r0, #32
 80158b6:	f7ff fe99 	bl	80155ec <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80158ba:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80158be:	f7ff fe95 	bl	80155ec <sFLASH_SendByte>
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80158c2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80158c6:	f7ff fe91 	bl	80155ec <sFLASH_SendByte>
  sFLASH_SendByte(SectorAddr & 0xFF);
 80158ca:	b2e0      	uxtb	r0, r4
 80158cc:	f7ff fe8e 	bl	80155ec <sFLASH_SendByte>
  sFLASH_CS_HIGH();
 80158d0:	f7ff fe74 	bl	80155bc <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 80158d4:	f7ff ffd2 	bl	801587c <sFLASH_WaitForWriteEnd>
}
 80158d8:	bd10      	pop	{r4, pc}

080158da <sFLASH_WritePage>:
{
 80158da:	b570      	push	{r4, r5, r6, lr}
 80158dc:	4606      	mov	r6, r0
 80158de:	460c      	mov	r4, r1
 80158e0:	4615      	mov	r5, r2
  sFLASH_WriteEnable();
 80158e2:	f7ff ffc1 	bl	8015868 <sFLASH_WriteEnable>
  sFLASH_CS_LOW();
 80158e6:	f7ff fe61 	bl	80155ac <sFLASH_CS_LOW>
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80158ea:	2002      	movs	r0, #2
 80158ec:	f7ff fe7e 	bl	80155ec <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80158f0:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80158f4:	f7ff fe7a 	bl	80155ec <sFLASH_SendByte>
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80158f8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80158fc:	f7ff fe76 	bl	80155ec <sFLASH_SendByte>
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015900:	b2e0      	uxtb	r0, r4
 8015902:	f7ff fe73 	bl	80155ec <sFLASH_SendByte>
  while (NumByteToWrite--)
 8015906:	e004      	b.n	8015912 <sFLASH_WritePage+0x38>
    sFLASH_SendByte(*pBuffer);
 8015908:	f816 0b01 	ldrb.w	r0, [r6], #1
 801590c:	f7ff fe6e 	bl	80155ec <sFLASH_SendByte>
  while (NumByteToWrite--)
 8015910:	4625      	mov	r5, r4
 8015912:	1e6b      	subs	r3, r5, #1
 8015914:	b29c      	uxth	r4, r3
 8015916:	2d00      	cmp	r5, #0
 8015918:	d1f6      	bne.n	8015908 <sFLASH_WritePage+0x2e>
  sFLASH_CS_HIGH();
 801591a:	f7ff fe4f 	bl	80155bc <sFLASH_CS_HIGH>
  sFLASH_WaitForWriteEnd();
 801591e:	f7ff ffad 	bl	801587c <sFLASH_WaitForWriteEnd>
}
 8015922:	bd70      	pop	{r4, r5, r6, pc}

08015924 <sFLASH_WriteBuffer>:
{
 8015924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015928:	4605      	mov	r5, r0
 801592a:	460c      	mov	r4, r1
 801592c:	4617      	mov	r7, r2
  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 801592e:	b2cb      	uxtb	r3, r1
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015930:	0a11      	lsrs	r1, r2, #8
  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8015932:	b9d3      	cbnz	r3, 801596a <sFLASH_WriteBuffer+0x46>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015934:	b971      	cbnz	r1, 8015954 <sFLASH_WriteBuffer+0x30>
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015936:	4621      	mov	r1, r4
 8015938:	f7ff ffcf 	bl	80158da <sFLASH_WritePage>
 801593c:	e013      	b.n	8015966 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 801593e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015942:	4621      	mov	r1, r4
 8015944:	4628      	mov	r0, r5
 8015946:	f7ff ffc8 	bl	80158da <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801594a:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 801594e:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 8015952:	4631      	mov	r1, r6
 8015954:	1e4b      	subs	r3, r1, #1
 8015956:	b2de      	uxtb	r6, r3
 8015958:	2900      	cmp	r1, #0
 801595a:	d1f0      	bne.n	801593e <sFLASH_WriteBuffer+0x1a>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801595c:	b2fa      	uxtb	r2, r7
 801595e:	4621      	mov	r1, r4
 8015960:	4628      	mov	r0, r5
 8015962:	f7ff ffba 	bl	80158da <sFLASH_WritePage>
}
 8015966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801596a:	f1c3 0800 	rsb	r8, r3, #0
 801596e:	fa5f f888 	uxtb.w	r8, r8
 8015972:	b2d2      	uxtb	r2, r2
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015974:	b9a1      	cbnz	r1, 80159a0 <sFLASH_WriteBuffer+0x7c>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8015976:	4590      	cmp	r8, r2
 8015978:	d20d      	bcs.n	8015996 <sFLASH_WriteBuffer+0x72>
        temp = NumOfSingle - count;
 801597a:	4413      	add	r3, r2
 801597c:	b2de      	uxtb	r6, r3
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 801597e:	4642      	mov	r2, r8
 8015980:	4621      	mov	r1, r4
 8015982:	f7ff ffaa 	bl	80158da <sFLASH_WritePage>
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 8015986:	4632      	mov	r2, r6
 8015988:	eb08 0104 	add.w	r1, r8, r4
 801598c:	eb05 0008 	add.w	r0, r5, r8
 8015990:	f7ff ffa3 	bl	80158da <sFLASH_WritePage>
 8015994:	e7e7      	b.n	8015966 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015996:	463a      	mov	r2, r7
 8015998:	4621      	mov	r1, r4
 801599a:	f7ff ff9e 	bl	80158da <sFLASH_WritePage>
 801599e:	e7e2      	b.n	8015966 <sFLASH_WriteBuffer+0x42>
      NumByteToWrite -= count;
 80159a0:	eba7 0708 	sub.w	r7, r7, r8
 80159a4:	fa1f f987 	uxth.w	r9, r7
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80159a8:	f3c7 2607 	ubfx	r6, r7, #8, #8
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80159ac:	b2ff      	uxtb	r7, r7
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 80159ae:	4642      	mov	r2, r8
 80159b0:	4621      	mov	r1, r4
 80159b2:	f7ff ff92 	bl	80158da <sFLASH_WritePage>
      WriteAddr +=  count;
 80159b6:	4444      	add	r4, r8
      pBuffer += count;
 80159b8:	4445      	add	r5, r8
      while (NumOfPage--)
 80159ba:	e00a      	b.n	80159d2 <sFLASH_WriteBuffer+0xae>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80159bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80159c0:	4621      	mov	r1, r4
 80159c2:	4628      	mov	r0, r5
 80159c4:	f7ff ff89 	bl	80158da <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80159c8:	f504 7480 	add.w	r4, r4, #256	@ 0x100
        pBuffer += sFLASH_SPI_PAGESIZE;
 80159cc:	f505 7580 	add.w	r5, r5, #256	@ 0x100
      while (NumOfPage--)
 80159d0:	4646      	mov	r6, r8
 80159d2:	1e73      	subs	r3, r6, #1
 80159d4:	fa5f f883 	uxtb.w	r8, r3
 80159d8:	2e00      	cmp	r6, #0
 80159da:	d1ef      	bne.n	80159bc <sFLASH_WriteBuffer+0x98>
      if (NumOfSingle != 0)
 80159dc:	2f00      	cmp	r7, #0
 80159de:	d0c2      	beq.n	8015966 <sFLASH_WriteBuffer+0x42>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80159e0:	fa5f f289 	uxtb.w	r2, r9
 80159e4:	4621      	mov	r1, r4
 80159e6:	4628      	mov	r0, r5
 80159e8:	f7ff ff77 	bl	80158da <sFLASH_WritePage>
}
 80159ec:	e7bb      	b.n	8015966 <sFLASH_WriteBuffer+0x42>
	...

080159f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80159f0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80159f2:	4b0b      	ldr	r3, [pc, #44]	@ (8015a20 <HAL_Init+0x30>)
 80159f4:	681a      	ldr	r2, [r3, #0]
 80159f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80159fa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80159fc:	681a      	ldr	r2, [r3, #0]
 80159fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8015a02:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015a04:	681a      	ldr	r2, [r3, #0]
 8015a06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015a0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015a0c:	2003      	movs	r0, #3
 8015a0e:	f000 f883 	bl	8015b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015a12:	200f      	movs	r0, #15
 8015a14:	f7fc fbf4 	bl	8012200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015a18:	f7fc fbd0 	bl	80121bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8015a1c:	2000      	movs	r0, #0
 8015a1e:	bd08      	pop	{r3, pc}
 8015a20:	40023c00 	.word	0x40023c00

08015a24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8015a24:	4a03      	ldr	r2, [pc, #12]	@ (8015a34 <HAL_IncTick+0x10>)
 8015a26:	6811      	ldr	r1, [r2, #0]
 8015a28:	4b03      	ldr	r3, [pc, #12]	@ (8015a38 <HAL_IncTick+0x14>)
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	440b      	add	r3, r1
 8015a2e:	6013      	str	r3, [r2, #0]
}
 8015a30:	4770      	bx	lr
 8015a32:	bf00      	nop
 8015a34:	200021fc 	.word	0x200021fc
 8015a38:	20000106 	.word	0x20000106

08015a3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8015a3c:	4b01      	ldr	r3, [pc, #4]	@ (8015a44 <HAL_GetTick+0x8>)
 8015a3e:	6818      	ldr	r0, [r3, #0]
}
 8015a40:	4770      	bx	lr
 8015a42:	bf00      	nop
 8015a44:	200021fc 	.word	0x200021fc

08015a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015a48:	b538      	push	{r3, r4, r5, lr}
 8015a4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8015a4c:	f7ff fff6 	bl	8015a3c <HAL_GetTick>
 8015a50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015a52:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8015a56:	d002      	beq.n	8015a5e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8015a58:	4b04      	ldr	r3, [pc, #16]	@ (8015a6c <HAL_Delay+0x24>)
 8015a5a:	781b      	ldrb	r3, [r3, #0]
 8015a5c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8015a5e:	f7ff ffed 	bl	8015a3c <HAL_GetTick>
 8015a62:	1b40      	subs	r0, r0, r5
 8015a64:	42a0      	cmp	r0, r4
 8015a66:	d3fa      	bcc.n	8015a5e <HAL_Delay+0x16>
  {
  }
}
 8015a68:	bd38      	pop	{r3, r4, r5, pc}
 8015a6a:	bf00      	nop
 8015a6c:	20000106 	.word	0x20000106

08015a70 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8015a70:	2800      	cmp	r0, #0
 8015a72:	db07      	blt.n	8015a84 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015a74:	f000 021f 	and.w	r2, r0, #31
 8015a78:	0940      	lsrs	r0, r0, #5
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	4093      	lsls	r3, r2
 8015a7e:	4a02      	ldr	r2, [pc, #8]	@ (8015a88 <__NVIC_EnableIRQ+0x18>)
 8015a80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8015a84:	4770      	bx	lr
 8015a86:	bf00      	nop
 8015a88:	e000e100 	.word	0xe000e100

08015a8c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	db08      	blt.n	8015aa2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015a90:	0109      	lsls	r1, r1, #4
 8015a92:	b2c9      	uxtb	r1, r1
 8015a94:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8015a98:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8015a9c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8015aa0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015aa2:	f000 000f 	and.w	r0, r0, #15
 8015aa6:	0109      	lsls	r1, r1, #4
 8015aa8:	b2c9      	uxtb	r1, r1
 8015aaa:	4b01      	ldr	r3, [pc, #4]	@ (8015ab0 <__NVIC_SetPriority+0x24>)
 8015aac:	5419      	strb	r1, [r3, r0]
  }
}
 8015aae:	4770      	bx	lr
 8015ab0:	e000ed14 	.word	0xe000ed14

08015ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015ab4:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015ab6:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015aba:	f1c0 0c07 	rsb	ip, r0, #7
 8015abe:	f1bc 0f04 	cmp.w	ip, #4
 8015ac2:	bf28      	it	cs
 8015ac4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015ac8:	1d03      	adds	r3, r0, #4
 8015aca:	2b06      	cmp	r3, #6
 8015acc:	d90f      	bls.n	8015aee <NVIC_EncodePriority+0x3a>
 8015ace:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015ad0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8015ad4:	fa0e f00c 	lsl.w	r0, lr, ip
 8015ad8:	ea21 0100 	bic.w	r1, r1, r0
 8015adc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015ade:	fa0e fe03 	lsl.w	lr, lr, r3
 8015ae2:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8015ae6:	ea41 0002 	orr.w	r0, r1, r2
 8015aea:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015aee:	2300      	movs	r3, #0
 8015af0:	e7ee      	b.n	8015ad0 <NVIC_EncodePriority+0x1c>
	...

08015af4 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8015af4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8015af8:	4905      	ldr	r1, [pc, #20]	@ (8015b10 <__NVIC_SystemReset+0x1c>)
 8015afa:	68ca      	ldr	r2, [r1, #12]
 8015afc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015b00:	4b04      	ldr	r3, [pc, #16]	@ (8015b14 <__NVIC_SystemReset+0x20>)
 8015b02:	4313      	orrs	r3, r2
 8015b04:	60cb      	str	r3, [r1, #12]
 8015b06:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8015b0a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8015b0c:	e7fd      	b.n	8015b0a <__NVIC_SystemReset+0x16>
 8015b0e:	bf00      	nop
 8015b10:	e000ed00 	.word	0xe000ed00
 8015b14:	05fa0004 	.word	0x05fa0004

08015b18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015b18:	4a07      	ldr	r2, [pc, #28]	@ (8015b38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8015b1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015b1c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8015b20:	041b      	lsls	r3, r3, #16
 8015b22:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015b24:	0200      	lsls	r0, r0, #8
 8015b26:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015b2a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8015b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8015b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8015b34:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8015b36:	4770      	bx	lr
 8015b38:	e000ed00 	.word	0xe000ed00

08015b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015b3c:	b510      	push	{r4, lr}
 8015b3e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015b40:	4b05      	ldr	r3, [pc, #20]	@ (8015b58 <HAL_NVIC_SetPriority+0x1c>)
 8015b42:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015b44:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8015b48:	f7ff ffb4 	bl	8015ab4 <NVIC_EncodePriority>
 8015b4c:	4601      	mov	r1, r0
 8015b4e:	4620      	mov	r0, r4
 8015b50:	f7ff ff9c 	bl	8015a8c <__NVIC_SetPriority>
}
 8015b54:	bd10      	pop	{r4, pc}
 8015b56:	bf00      	nop
 8015b58:	e000ed00 	.word	0xe000ed00

08015b5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015b5c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015b5e:	f7ff ff87 	bl	8015a70 <__NVIC_EnableIRQ>
}
 8015b62:	bd08      	pop	{r3, pc}

08015b64 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8015b64:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8015b66:	f7ff ffc5 	bl	8015af4 <__NVIC_SystemReset>
	...

08015b6c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	2b0f      	cmp	r3, #15
 8015b70:	f200 80d7 	bhi.w	8015d22 <HAL_GPIO_Init+0x1b6>
{
 8015b74:	b570      	push	{r4, r5, r6, lr}
 8015b76:	b082      	sub	sp, #8
 8015b78:	e065      	b.n	8015c46 <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015b7a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015b7c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8015b80:	2403      	movs	r4, #3
 8015b82:	fa04 f40e 	lsl.w	r4, r4, lr
 8015b86:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015b8a:	68cc      	ldr	r4, [r1, #12]
 8015b8c:	fa04 f40e 	lsl.w	r4, r4, lr
 8015b90:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8015b92:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015b94:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015b96:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015b9a:	684a      	ldr	r2, [r1, #4]
 8015b9c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8015ba0:	409a      	lsls	r2, r3
 8015ba2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8015ba4:	6042      	str	r2, [r0, #4]
 8015ba6:	e05c      	b.n	8015c62 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015ba8:	08dc      	lsrs	r4, r3, #3
 8015baa:	3408      	adds	r4, #8
 8015bac:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015bb0:	f003 0507 	and.w	r5, r3, #7
 8015bb4:	00ad      	lsls	r5, r5, #2
 8015bb6:	f04f 0e0f 	mov.w	lr, #15
 8015bba:	fa0e fe05 	lsl.w	lr, lr, r5
 8015bbe:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015bc2:	690a      	ldr	r2, [r1, #16]
 8015bc4:	40aa      	lsls	r2, r5
 8015bc6:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8015bca:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8015bce:	e05c      	b.n	8015c8a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015bd0:	2204      	movs	r2, #4
 8015bd2:	e000      	b.n	8015bd6 <HAL_GPIO_Init+0x6a>
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	fa02 f20e 	lsl.w	r2, r2, lr
 8015bda:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015bdc:	3402      	adds	r4, #2
 8015bde:	4d51      	ldr	r5, [pc, #324]	@ (8015d24 <HAL_GPIO_Init+0x1b8>)
 8015be0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015be4:	4a50      	ldr	r2, [pc, #320]	@ (8015d28 <HAL_GPIO_Init+0x1bc>)
 8015be6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8015be8:	ea6f 020c 	mvn.w	r2, ip
 8015bec:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015bf0:	684e      	ldr	r6, [r1, #4]
 8015bf2:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8015bf6:	d001      	beq.n	8015bfc <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8015bf8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8015bfc:	4c4a      	ldr	r4, [pc, #296]	@ (8015d28 <HAL_GPIO_Init+0x1bc>)
 8015bfe:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8015c00:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8015c02:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015c06:	684e      	ldr	r6, [r1, #4]
 8015c08:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8015c0c:	d001      	beq.n	8015c12 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8015c0e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8015c12:	4c45      	ldr	r4, [pc, #276]	@ (8015d28 <HAL_GPIO_Init+0x1bc>)
 8015c14:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8015c16:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8015c18:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015c1c:	684e      	ldr	r6, [r1, #4]
 8015c1e:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8015c22:	d001      	beq.n	8015c28 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8015c24:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8015c28:	4c3f      	ldr	r4, [pc, #252]	@ (8015d28 <HAL_GPIO_Init+0x1bc>)
 8015c2a:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015c2c:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8015c2e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015c30:	684d      	ldr	r5, [r1, #4]
 8015c32:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8015c36:	d001      	beq.n	8015c3c <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8015c38:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8015c3c:	4c3a      	ldr	r4, [pc, #232]	@ (8015d28 <HAL_GPIO_Init+0x1bc>)
 8015c3e:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015c40:	3301      	adds	r3, #1
 8015c42:	2b0f      	cmp	r3, #15
 8015c44:	d86b      	bhi.n	8015d1e <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8015c46:	2201      	movs	r2, #1
 8015c48:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015c4a:	680c      	ldr	r4, [r1, #0]
 8015c4c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8015c50:	ea32 0404 	bics.w	r4, r2, r4
 8015c54:	d1f4      	bne.n	8015c40 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015c56:	684c      	ldr	r4, [r1, #4]
 8015c58:	f004 0403 	and.w	r4, r4, #3
 8015c5c:	3c01      	subs	r4, #1
 8015c5e:	2c01      	cmp	r4, #1
 8015c60:	d98b      	bls.n	8015b7a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015c62:	684a      	ldr	r2, [r1, #4]
 8015c64:	f002 0203 	and.w	r2, r2, #3
 8015c68:	2a03      	cmp	r2, #3
 8015c6a:	d009      	beq.n	8015c80 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8015c6c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015c6e:	005d      	lsls	r5, r3, #1
 8015c70:	2203      	movs	r2, #3
 8015c72:	40aa      	lsls	r2, r5
 8015c74:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015c78:	688a      	ldr	r2, [r1, #8]
 8015c7a:	40aa      	lsls	r2, r5
 8015c7c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8015c7e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015c80:	684a      	ldr	r2, [r1, #4]
 8015c82:	f002 0203 	and.w	r2, r2, #3
 8015c86:	2a02      	cmp	r2, #2
 8015c88:	d08e      	beq.n	8015ba8 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8015c8a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015c8c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8015c90:	2203      	movs	r2, #3
 8015c92:	fa02 f20e 	lsl.w	r2, r2, lr
 8015c96:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015c9a:	684a      	ldr	r2, [r1, #4]
 8015c9c:	f002 0203 	and.w	r2, r2, #3
 8015ca0:	fa02 f20e 	lsl.w	r2, r2, lr
 8015ca4:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8015ca6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015ca8:	684a      	ldr	r2, [r1, #4]
 8015caa:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8015cae:	d0c7      	beq.n	8015c40 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	9201      	str	r2, [sp, #4]
 8015cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8015d2c <HAL_GPIO_Init+0x1c0>)
 8015cb6:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8015cb8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8015cbc:	6454      	str	r4, [r2, #68]	@ 0x44
 8015cbe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8015cc0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8015cc4:	9201      	str	r2, [sp, #4]
 8015cc6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8015cc8:	089c      	lsrs	r4, r3, #2
 8015cca:	1ca5      	adds	r5, r4, #2
 8015ccc:	4a15      	ldr	r2, [pc, #84]	@ (8015d24 <HAL_GPIO_Init+0x1b8>)
 8015cce:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015cd2:	f003 0e03 	and.w	lr, r3, #3
 8015cd6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8015cda:	220f      	movs	r2, #15
 8015cdc:	fa02 f20e 	lsl.w	r2, r2, lr
 8015ce0:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015ce4:	4a12      	ldr	r2, [pc, #72]	@ (8015d30 <HAL_GPIO_Init+0x1c4>)
 8015ce6:	4290      	cmp	r0, r2
 8015ce8:	f43f af74 	beq.w	8015bd4 <HAL_GPIO_Init+0x68>
 8015cec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015cf0:	4290      	cmp	r0, r2
 8015cf2:	d00e      	beq.n	8015d12 <HAL_GPIO_Init+0x1a6>
 8015cf4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015cf8:	4290      	cmp	r0, r2
 8015cfa:	d00c      	beq.n	8015d16 <HAL_GPIO_Init+0x1aa>
 8015cfc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015d00:	4290      	cmp	r0, r2
 8015d02:	d00a      	beq.n	8015d1a <HAL_GPIO_Init+0x1ae>
 8015d04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8015d08:	4290      	cmp	r0, r2
 8015d0a:	f43f af61 	beq.w	8015bd0 <HAL_GPIO_Init+0x64>
 8015d0e:	2207      	movs	r2, #7
 8015d10:	e761      	b.n	8015bd6 <HAL_GPIO_Init+0x6a>
 8015d12:	2201      	movs	r2, #1
 8015d14:	e75f      	b.n	8015bd6 <HAL_GPIO_Init+0x6a>
 8015d16:	2202      	movs	r2, #2
 8015d18:	e75d      	b.n	8015bd6 <HAL_GPIO_Init+0x6a>
 8015d1a:	2203      	movs	r2, #3
 8015d1c:	e75b      	b.n	8015bd6 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8015d1e:	b002      	add	sp, #8
 8015d20:	bd70      	pop	{r4, r5, r6, pc}
 8015d22:	4770      	bx	lr
 8015d24:	40013800 	.word	0x40013800
 8015d28:	40013c00 	.word	0x40013c00
 8015d2c:	40023800 	.word	0x40023800
 8015d30:	40020000 	.word	0x40020000

08015d34 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015d34:	2300      	movs	r3, #0
 8015d36:	2b0f      	cmp	r3, #15
 8015d38:	d87c      	bhi.n	8015e34 <HAL_GPIO_DeInit+0x100>
{
 8015d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d3c:	e02d      	b.n	8015d9a <HAL_GPIO_DeInit+0x66>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8015d3e:	2504      	movs	r5, #4
 8015d40:	e000      	b.n	8015d44 <HAL_GPIO_DeInit+0x10>
 8015d42:	2500      	movs	r5, #0
 8015d44:	fa05 f50c 	lsl.w	r5, r5, ip
 8015d48:	42a5      	cmp	r5, r4
 8015d4a:	d057      	beq.n	8015dfc <HAL_GPIO_DeInit+0xc8>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015d4c:	6804      	ldr	r4, [r0, #0]
 8015d4e:	005d      	lsls	r5, r3, #1
 8015d50:	f04f 0c03 	mov.w	ip, #3
 8015d54:	fa0c fc05 	lsl.w	ip, ip, r5
 8015d58:	ea24 040c 	bic.w	r4, r4, ip
 8015d5c:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015d5e:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8015d62:	f10e 0e08 	add.w	lr, lr, #8
 8015d66:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8015d6a:	f003 0607 	and.w	r6, r3, #7
 8015d6e:	00b6      	lsls	r6, r6, #2
 8015d70:	250f      	movs	r5, #15
 8015d72:	40b5      	lsls	r5, r6
 8015d74:	ea24 0405 	bic.w	r4, r4, r5
 8015d78:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015d7c:	68c4      	ldr	r4, [r0, #12]
 8015d7e:	ea24 040c 	bic.w	r4, r4, ip
 8015d82:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015d84:	6844      	ldr	r4, [r0, #4]
 8015d86:	ea24 0202 	bic.w	r2, r4, r2
 8015d8a:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015d8c:	6882      	ldr	r2, [r0, #8]
 8015d8e:	ea22 020c 	bic.w	r2, r2, ip
 8015d92:	6082      	str	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015d94:	3301      	adds	r3, #1
 8015d96:	2b0f      	cmp	r3, #15
 8015d98:	d84b      	bhi.n	8015e32 <HAL_GPIO_DeInit+0xfe>
    ioposition = 0x01U << position;
 8015d9a:	2201      	movs	r2, #1
 8015d9c:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8015d9e:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8015da2:	ea32 0401 	bics.w	r4, r2, r1
 8015da6:	d1f5      	bne.n	8015d94 <HAL_GPIO_DeInit+0x60>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8015da8:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8015dac:	f10e 0502 	add.w	r5, lr, #2
 8015db0:	4c21      	ldr	r4, [pc, #132]	@ (8015e38 <HAL_GPIO_DeInit+0x104>)
 8015db2:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8015db6:	f003 0c03 	and.w	ip, r3, #3
 8015dba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8015dbe:	250f      	movs	r5, #15
 8015dc0:	fa05 f70c 	lsl.w	r7, r5, ip
 8015dc4:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8015dc6:	4d1d      	ldr	r5, [pc, #116]	@ (8015e3c <HAL_GPIO_DeInit+0x108>)
 8015dc8:	42a8      	cmp	r0, r5
 8015dca:	d0ba      	beq.n	8015d42 <HAL_GPIO_DeInit+0xe>
 8015dcc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8015dd0:	42a8      	cmp	r0, r5
 8015dd2:	d00d      	beq.n	8015df0 <HAL_GPIO_DeInit+0xbc>
 8015dd4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8015dd8:	42a8      	cmp	r0, r5
 8015dda:	d00b      	beq.n	8015df4 <HAL_GPIO_DeInit+0xc0>
 8015ddc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8015de0:	42a8      	cmp	r0, r5
 8015de2:	d009      	beq.n	8015df8 <HAL_GPIO_DeInit+0xc4>
 8015de4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8015de8:	42a8      	cmp	r0, r5
 8015dea:	d0a8      	beq.n	8015d3e <HAL_GPIO_DeInit+0xa>
 8015dec:	2507      	movs	r5, #7
 8015dee:	e7a9      	b.n	8015d44 <HAL_GPIO_DeInit+0x10>
 8015df0:	2501      	movs	r5, #1
 8015df2:	e7a7      	b.n	8015d44 <HAL_GPIO_DeInit+0x10>
 8015df4:	2502      	movs	r5, #2
 8015df6:	e7a5      	b.n	8015d44 <HAL_GPIO_DeInit+0x10>
 8015df8:	2503      	movs	r5, #3
 8015dfa:	e7a3      	b.n	8015d44 <HAL_GPIO_DeInit+0x10>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8015dfc:	4c10      	ldr	r4, [pc, #64]	@ (8015e40 <HAL_GPIO_DeInit+0x10c>)
 8015dfe:	6825      	ldr	r5, [r4, #0]
 8015e00:	ea25 0506 	bic.w	r5, r5, r6
 8015e04:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8015e06:	6865      	ldr	r5, [r4, #4]
 8015e08:	ea25 0506 	bic.w	r5, r5, r6
 8015e0c:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8015e0e:	68e5      	ldr	r5, [r4, #12]
 8015e10:	ea25 0506 	bic.w	r5, r5, r6
 8015e14:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8015e16:	68a5      	ldr	r5, [r4, #8]
 8015e18:	ea25 0506 	bic.w	r5, r5, r6
 8015e1c:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8015e1e:	4e06      	ldr	r6, [pc, #24]	@ (8015e38 <HAL_GPIO_DeInit+0x104>)
 8015e20:	f10e 0402 	add.w	r4, lr, #2
 8015e24:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8015e28:	ea25 0507 	bic.w	r5, r5, r7
 8015e2c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8015e30:	e78c      	b.n	8015d4c <HAL_GPIO_DeInit+0x18>
    }
  }
}
 8015e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e34:	4770      	bx	lr
 8015e36:	bf00      	nop
 8015e38:	40013800 	.word	0x40013800
 8015e3c:	40020000 	.word	0x40020000
 8015e40:	40013c00 	.word	0x40013c00

08015e44 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8015e44:	6903      	ldr	r3, [r0, #16]
 8015e46:	4219      	tst	r1, r3
 8015e48:	d001      	beq.n	8015e4e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8015e4a:	2001      	movs	r0, #1
 8015e4c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015e4e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8015e50:	4770      	bx	lr

08015e52 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015e52:	b10a      	cbz	r2, 8015e58 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015e54:	6181      	str	r1, [r0, #24]
 8015e56:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015e58:	0409      	lsls	r1, r1, #16
 8015e5a:	6181      	str	r1, [r0, #24]
  }
}
 8015e5c:	4770      	bx	lr

08015e5e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015e5e:	6803      	ldr	r3, [r0, #0]
 8015e60:	695a      	ldr	r2, [r3, #20]
 8015e62:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8015e66:	d101      	bne.n	8015e6c <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8015e68:	2000      	movs	r0, #0
}
 8015e6a:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8015e70:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8015e72:	2300      	movs	r3, #0
 8015e74:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8015e76:	2220      	movs	r2, #32
 8015e78:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015e7c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8015e80:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8015e82:	f042 0204 	orr.w	r2, r2, #4
 8015e86:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8015e88:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8015e8c:	2001      	movs	r0, #1
 8015e8e:	4770      	bx	lr

08015e90 <I2C_WaitOnFlagUntilTimeout>:
{
 8015e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e94:	4606      	mov	r6, r0
 8015e96:	460c      	mov	r4, r1
 8015e98:	4617      	mov	r7, r2
 8015e9a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015e9c:	e03b      	b.n	8015f16 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015e9e:	f7ff fdcd 	bl	8015a3c <HAL_GetTick>
 8015ea2:	9b06      	ldr	r3, [sp, #24]
 8015ea4:	1ac0      	subs	r0, r0, r3
 8015ea6:	4540      	cmp	r0, r8
 8015ea8:	d802      	bhi.n	8015eb0 <I2C_WaitOnFlagUntilTimeout+0x20>
 8015eaa:	f1b8 0f00 	cmp.w	r8, #0
 8015eae:	d132      	bne.n	8015f16 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8015eb0:	2d01      	cmp	r5, #1
 8015eb2:	d018      	beq.n	8015ee6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8015eb4:	6833      	ldr	r3, [r6, #0]
 8015eb6:	699b      	ldr	r3, [r3, #24]
 8015eb8:	ea24 0303 	bic.w	r3, r4, r3
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	fab3 f383 	clz	r3, r3
 8015ec2:	095b      	lsrs	r3, r3, #5
 8015ec4:	429f      	cmp	r7, r3
 8015ec6:	d126      	bne.n	8015f16 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8015ecc:	2220      	movs	r2, #32
 8015ece:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8015ed2:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8015ed6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015ed8:	f042 0220 	orr.w	r2, r2, #32
 8015edc:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8015ede:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8015ee2:	2001      	movs	r0, #1
 8015ee4:	e027      	b.n	8015f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8015ee6:	6833      	ldr	r3, [r6, #0]
 8015ee8:	695b      	ldr	r3, [r3, #20]
 8015eea:	ea24 0303 	bic.w	r3, r4, r3
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	fab3 f383 	clz	r3, r3
 8015ef4:	095b      	lsrs	r3, r3, #5
 8015ef6:	e7e5      	b.n	8015ec4 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015ef8:	6833      	ldr	r3, [r6, #0]
 8015efa:	695b      	ldr	r3, [r3, #20]
 8015efc:	ea24 0c03 	bic.w	ip, r4, r3
 8015f00:	fa1f fc8c 	uxth.w	ip, ip
 8015f04:	fabc fc8c 	clz	ip, ip
 8015f08:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8015f0c:	4567      	cmp	r7, ip
 8015f0e:	d111      	bne.n	8015f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8015f10:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8015f14:	d1c3      	bne.n	8015e9e <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015f16:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8015f1a:	2d01      	cmp	r5, #1
 8015f1c:	d0ec      	beq.n	8015ef8 <I2C_WaitOnFlagUntilTimeout+0x68>
 8015f1e:	6833      	ldr	r3, [r6, #0]
 8015f20:	699b      	ldr	r3, [r3, #24]
 8015f22:	ea24 0c03 	bic.w	ip, r4, r3
 8015f26:	fa1f fc8c 	uxth.w	ip, ip
 8015f2a:	fabc fc8c 	clz	ip, ip
 8015f2e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8015f32:	e7eb      	b.n	8015f0c <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8015f34:	2000      	movs	r0, #0
}
 8015f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8015f3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f3e:	4605      	mov	r5, r0
 8015f40:	460e      	mov	r6, r1
 8015f42:	4690      	mov	r8, r2
 8015f44:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8015f46:	e053      	b.n	8015ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015f4e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015f50:	682b      	ldr	r3, [r5, #0]
 8015f52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8015f56:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8015f5c:	2220      	movs	r2, #32
 8015f5e:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015f62:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8015f66:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8015f68:	f042 0204 	orr.w	r2, r2, #4
 8015f6c:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8015f6e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8015f72:	2001      	movs	r0, #1
 8015f74:	e04a      	b.n	801600c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f76:	f7ff fd61 	bl	8015a3c <HAL_GetTick>
 8015f7a:	eba0 0009 	sub.w	r0, r0, r9
 8015f7e:	4540      	cmp	r0, r8
 8015f80:	d802      	bhi.n	8015f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8015f82:	f1b8 0f00 	cmp.w	r8, #0
 8015f86:	d133      	bne.n	8015ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8015f88:	2f01      	cmp	r7, #1
 8015f8a:	d017      	beq.n	8015fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8015f8c:	682b      	ldr	r3, [r5, #0]
 8015f8e:	699b      	ldr	r3, [r3, #24]
 8015f90:	ea26 0303 	bic.w	r3, r6, r3
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	3b00      	subs	r3, #0
 8015f98:	bf18      	it	ne
 8015f9a:	2301      	movne	r3, #1
 8015f9c:	b343      	cbz	r3, 8015ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8015fa2:	2220      	movs	r2, #32
 8015fa4:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8015fa8:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8015fac:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8015fae:	f042 0220 	orr.w	r2, r2, #32
 8015fb2:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8015fb4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8015fb8:	2001      	movs	r0, #1
 8015fba:	e027      	b.n	801600c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8015fbc:	682b      	ldr	r3, [r5, #0]
 8015fbe:	695b      	ldr	r3, [r3, #20]
 8015fc0:	ea26 0303 	bic.w	r3, r6, r3
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	3b00      	subs	r3, #0
 8015fc8:	bf18      	it	ne
 8015fca:	2301      	movne	r3, #1
 8015fcc:	e7e6      	b.n	8015f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8015fce:	682b      	ldr	r3, [r5, #0]
 8015fd0:	699c      	ldr	r4, [r3, #24]
 8015fd2:	ea26 0404 	bic.w	r4, r6, r4
 8015fd6:	b2a4      	uxth	r4, r4
 8015fd8:	3c00      	subs	r4, #0
 8015fda:	bf18      	it	ne
 8015fdc:	2401      	movne	r4, #1
 8015fde:	b1a4      	cbz	r4, 801600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015fe0:	682b      	ldr	r3, [r5, #0]
 8015fe2:	695a      	ldr	r2, [r3, #20]
 8015fe4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8015fe8:	d1ae      	bne.n	8015f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8015fea:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8015fee:	d1c2      	bne.n	8015f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8015ff0:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8015ff4:	2f01      	cmp	r7, #1
 8015ff6:	d1ea      	bne.n	8015fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8015ff8:	682b      	ldr	r3, [r5, #0]
 8015ffa:	695c      	ldr	r4, [r3, #20]
 8015ffc:	ea26 0404 	bic.w	r4, r6, r4
 8016000:	b2a4      	uxth	r4, r4
 8016002:	3c00      	subs	r4, #0
 8016004:	bf18      	it	ne
 8016006:	2401      	movne	r4, #1
 8016008:	e7e9      	b.n	8015fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 801600a:	2000      	movs	r0, #0
}
 801600c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016010 <I2C_MasterRequestWrite>:
{
 8016010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016012:	b083      	sub	sp, #12
 8016014:	4604      	mov	r4, r0
 8016016:	460d      	mov	r5, r1
 8016018:	4616      	mov	r6, r2
 801601a:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801601c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801601e:	2b08      	cmp	r3, #8
 8016020:	d00d      	beq.n	801603e <I2C_MasterRequestWrite+0x2e>
 8016022:	2b01      	cmp	r3, #1
 8016024:	d00b      	beq.n	801603e <I2C_MasterRequestWrite+0x2e>
 8016026:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801602a:	d008      	beq.n	801603e <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801602c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801602e:	2b12      	cmp	r3, #18
 8016030:	d10a      	bne.n	8016048 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016032:	6802      	ldr	r2, [r0, #0]
 8016034:	6813      	ldr	r3, [r2, #0]
 8016036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801603a:	6013      	str	r3, [r2, #0]
 801603c:	e004      	b.n	8016048 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801603e:	6822      	ldr	r2, [r4, #0]
 8016040:	6813      	ldr	r3, [r2, #0]
 8016042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016046:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8016048:	9700      	str	r7, [sp, #0]
 801604a:	4633      	mov	r3, r6
 801604c:	2200      	movs	r2, #0
 801604e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8016052:	4620      	mov	r0, r4
 8016054:	f7ff ff1c 	bl	8015e90 <I2C_WaitOnFlagUntilTimeout>
 8016058:	b980      	cbnz	r0, 801607c <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801605a:	6923      	ldr	r3, [r4, #16]
 801605c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016060:	d116      	bne.n	8016090 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8016062:	6823      	ldr	r3, [r4, #0]
 8016064:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8016068:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801606a:	463b      	mov	r3, r7
 801606c:	4632      	mov	r2, r6
 801606e:	4913      	ldr	r1, [pc, #76]	@ (80160bc <I2C_MasterRequestWrite+0xac>)
 8016070:	4620      	mov	r0, r4
 8016072:	f7ff ff62 	bl	8015f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8016076:	b9f8      	cbnz	r0, 80160b8 <I2C_MasterRequestWrite+0xa8>
}
 8016078:	b003      	add	sp, #12
 801607a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801607c:	6823      	ldr	r3, [r4, #0]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016084:	d002      	beq.n	801608c <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016086:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801608a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 801608c:	2003      	movs	r0, #3
 801608e:	e7f3      	b.n	8016078 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8016090:	11eb      	asrs	r3, r5, #7
 8016092:	6822      	ldr	r2, [r4, #0]
 8016094:	f003 0306 	and.w	r3, r3, #6
 8016098:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 801609c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801609e:	463b      	mov	r3, r7
 80160a0:	4632      	mov	r2, r6
 80160a2:	4907      	ldr	r1, [pc, #28]	@ (80160c0 <I2C_MasterRequestWrite+0xb0>)
 80160a4:	4620      	mov	r0, r4
 80160a6:	f7ff ff48 	bl	8015f3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80160aa:	b918      	cbnz	r0, 80160b4 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80160ac:	6823      	ldr	r3, [r4, #0]
 80160ae:	b2ed      	uxtb	r5, r5
 80160b0:	611d      	str	r5, [r3, #16]
 80160b2:	e7da      	b.n	801606a <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80160b4:	2001      	movs	r0, #1
 80160b6:	e7df      	b.n	8016078 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80160b8:	2001      	movs	r0, #1
 80160ba:	e7dd      	b.n	8016078 <I2C_MasterRequestWrite+0x68>
 80160bc:	00010002 	.word	0x00010002
 80160c0:	00010008 	.word	0x00010008

080160c4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80160c4:	b570      	push	{r4, r5, r6, lr}
 80160c6:	4604      	mov	r4, r0
 80160c8:	460d      	mov	r5, r1
 80160ca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80160cc:	6823      	ldr	r3, [r4, #0]
 80160ce:	695b      	ldr	r3, [r3, #20]
 80160d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80160d4:	d121      	bne.n	801611a <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80160d6:	4620      	mov	r0, r4
 80160d8:	f7ff fec1 	bl	8015e5e <I2C_IsAcknowledgeFailed>
 80160dc:	b9f8      	cbnz	r0, 801611e <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80160de:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80160e2:	d0f3      	beq.n	80160cc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80160e4:	f7ff fcaa 	bl	8015a3c <HAL_GetTick>
 80160e8:	1b80      	subs	r0, r0, r6
 80160ea:	42a8      	cmp	r0, r5
 80160ec:	d801      	bhi.n	80160f2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80160ee:	2d00      	cmp	r5, #0
 80160f0:	d1ec      	bne.n	80160cc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80160f2:	6823      	ldr	r3, [r4, #0]
 80160f4:	695b      	ldr	r3, [r3, #20]
 80160f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80160fa:	d1e7      	bne.n	80160cc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80160fc:	2300      	movs	r3, #0
 80160fe:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8016100:	2220      	movs	r2, #32
 8016102:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016106:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801610a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801610c:	f042 0220 	orr.w	r2, r2, #32
 8016110:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016112:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8016116:	2001      	movs	r0, #1
 8016118:	e000      	b.n	801611c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 801611a:	2000      	movs	r0, #0
}
 801611c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 801611e:	2001      	movs	r0, #1
 8016120:	e7fc      	b.n	801611c <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08016122 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8016122:	b570      	push	{r4, r5, r6, lr}
 8016124:	4604      	mov	r4, r0
 8016126:	460d      	mov	r5, r1
 8016128:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801612a:	6823      	ldr	r3, [r4, #0]
 801612c:	695b      	ldr	r3, [r3, #20]
 801612e:	f013 0f04 	tst.w	r3, #4
 8016132:	d121      	bne.n	8016178 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8016134:	4620      	mov	r0, r4
 8016136:	f7ff fe92 	bl	8015e5e <I2C_IsAcknowledgeFailed>
 801613a:	b9f8      	cbnz	r0, 801617c <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 801613c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8016140:	d0f3      	beq.n	801612a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016142:	f7ff fc7b 	bl	8015a3c <HAL_GetTick>
 8016146:	1b80      	subs	r0, r0, r6
 8016148:	42a8      	cmp	r0, r5
 801614a:	d801      	bhi.n	8016150 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 801614c:	2d00      	cmp	r5, #0
 801614e:	d1ec      	bne.n	801612a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8016150:	6823      	ldr	r3, [r4, #0]
 8016152:	695b      	ldr	r3, [r3, #20]
 8016154:	f013 0f04 	tst.w	r3, #4
 8016158:	d1e7      	bne.n	801612a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 801615a:	2300      	movs	r3, #0
 801615c:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801615e:	2220      	movs	r2, #32
 8016160:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016164:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016168:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801616a:	f042 0220 	orr.w	r2, r2, #32
 801616e:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8016170:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8016174:	2001      	movs	r0, #1
 8016176:	e000      	b.n	801617a <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8016178:	2000      	movs	r0, #0
}
 801617a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 801617c:	2001      	movs	r0, #1
 801617e:	e7fc      	b.n	801617a <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08016180 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8016180:	2800      	cmp	r0, #0
 8016182:	f000 80cc 	beq.w	801631e <HAL_I2C_Init+0x19e>
{
 8016186:	b570      	push	{r4, r5, r6, lr}
 8016188:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 801618a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801618e:	2b00      	cmp	r3, #0
 8016190:	d077      	beq.n	8016282 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016192:	2324      	movs	r3, #36	@ 0x24
 8016194:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8016198:	6822      	ldr	r2, [r4, #0]
 801619a:	6813      	ldr	r3, [r2, #0]
 801619c:	f023 0301 	bic.w	r3, r3, #1
 80161a0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80161a2:	6822      	ldr	r2, [r4, #0]
 80161a4:	6813      	ldr	r3, [r2, #0]
 80161a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80161aa:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80161ac:	6822      	ldr	r2, [r4, #0]
 80161ae:	6813      	ldr	r3, [r2, #0]
 80161b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80161b4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80161b6:	f000 fd81 	bl	8016cbc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80161ba:	6862      	ldr	r2, [r4, #4]
 80161bc:	4b5a      	ldr	r3, [pc, #360]	@ (8016328 <HAL_I2C_Init+0x1a8>)
 80161be:	429a      	cmp	r2, r3
 80161c0:	d864      	bhi.n	801628c <HAL_I2C_Init+0x10c>
 80161c2:	4b5a      	ldr	r3, [pc, #360]	@ (801632c <HAL_I2C_Init+0x1ac>)
 80161c4:	4298      	cmp	r0, r3
 80161c6:	bf8c      	ite	hi
 80161c8:	2300      	movhi	r3, #0
 80161ca:	2301      	movls	r3, #1
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	f040 80a8 	bne.w	8016322 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80161d2:	4957      	ldr	r1, [pc, #348]	@ (8016330 <HAL_I2C_Init+0x1b0>)
 80161d4:	fba1 3100 	umull	r3, r1, r1, r0
 80161d8:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80161da:	6825      	ldr	r5, [r4, #0]
 80161dc:	686a      	ldr	r2, [r5, #4]
 80161de:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80161e2:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80161e6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80161e8:	6821      	ldr	r1, [r4, #0]
 80161ea:	6a0a      	ldr	r2, [r1, #32]
 80161ec:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80161f0:	6866      	ldr	r6, [r4, #4]
 80161f2:	4d4d      	ldr	r5, [pc, #308]	@ (8016328 <HAL_I2C_Init+0x1a8>)
 80161f4:	42ae      	cmp	r6, r5
 80161f6:	d84f      	bhi.n	8016298 <HAL_I2C_Init+0x118>
 80161f8:	3301      	adds	r3, #1
 80161fa:	4313      	orrs	r3, r2
 80161fc:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80161fe:	6821      	ldr	r1, [r4, #0]
 8016200:	69ca      	ldr	r2, [r1, #28]
 8016202:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8016206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 801620a:	6865      	ldr	r5, [r4, #4]
 801620c:	4b46      	ldr	r3, [pc, #280]	@ (8016328 <HAL_I2C_Init+0x1a8>)
 801620e:	429d      	cmp	r5, r3
 8016210:	d84c      	bhi.n	80162ac <HAL_I2C_Init+0x12c>
 8016212:	1e43      	subs	r3, r0, #1
 8016214:	006d      	lsls	r5, r5, #1
 8016216:	fbb3 f3f5 	udiv	r3, r3, r5
 801621a:	3301      	adds	r3, #1
 801621c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8016220:	4203      	tst	r3, r0
 8016222:	d078      	beq.n	8016316 <HAL_I2C_Init+0x196>
 8016224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016228:	431a      	orrs	r2, r3
 801622a:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801622c:	6821      	ldr	r1, [r4, #0]
 801622e:	680b      	ldr	r3, [r1, #0]
 8016230:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8016234:	69e2      	ldr	r2, [r4, #28]
 8016236:	6a20      	ldr	r0, [r4, #32]
 8016238:	4302      	orrs	r2, r0
 801623a:	4313      	orrs	r3, r2
 801623c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801623e:	6821      	ldr	r1, [r4, #0]
 8016240:	688b      	ldr	r3, [r1, #8]
 8016242:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8016246:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801624a:	6922      	ldr	r2, [r4, #16]
 801624c:	68e0      	ldr	r0, [r4, #12]
 801624e:	4302      	orrs	r2, r0
 8016250:	4313      	orrs	r3, r2
 8016252:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016254:	6821      	ldr	r1, [r4, #0]
 8016256:	68cb      	ldr	r3, [r1, #12]
 8016258:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801625c:	6962      	ldr	r2, [r4, #20]
 801625e:	69a0      	ldr	r0, [r4, #24]
 8016260:	4302      	orrs	r2, r0
 8016262:	4313      	orrs	r3, r2
 8016264:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8016266:	6822      	ldr	r2, [r4, #0]
 8016268:	6813      	ldr	r3, [r2, #0]
 801626a:	f043 0301 	orr.w	r3, r3, #1
 801626e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016270:	2000      	movs	r0, #0
 8016272:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016274:	2320      	movs	r3, #32
 8016276:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801627a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801627c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8016280:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8016282:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8016286:	f7fb fd1d 	bl	8011cc4 <HAL_I2C_MspInit>
 801628a:	e782      	b.n	8016192 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801628c:	4b29      	ldr	r3, [pc, #164]	@ (8016334 <HAL_I2C_Init+0x1b4>)
 801628e:	4298      	cmp	r0, r3
 8016290:	bf8c      	ite	hi
 8016292:	2300      	movhi	r3, #0
 8016294:	2301      	movls	r3, #1
 8016296:	e799      	b.n	80161cc <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016298:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 801629c:	fb05 f303 	mul.w	r3, r5, r3
 80162a0:	4d25      	ldr	r5, [pc, #148]	@ (8016338 <HAL_I2C_Init+0x1b8>)
 80162a2:	fba5 5303 	umull	r5, r3, r5, r3
 80162a6:	099b      	lsrs	r3, r3, #6
 80162a8:	3301      	adds	r3, #1
 80162aa:	e7a6      	b.n	80161fa <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80162ac:	68a6      	ldr	r6, [r4, #8]
 80162ae:	b9be      	cbnz	r6, 80162e0 <HAL_I2C_Init+0x160>
 80162b0:	1e43      	subs	r3, r0, #1
 80162b2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80162b6:	fbb3 f3fc 	udiv	r3, r3, ip
 80162ba:	3301      	adds	r3, #1
 80162bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80162c0:	fab3 f383 	clz	r3, r3
 80162c4:	095b      	lsrs	r3, r3, #5
 80162c6:	bb43      	cbnz	r3, 801631a <HAL_I2C_Init+0x19a>
 80162c8:	b9c6      	cbnz	r6, 80162fc <HAL_I2C_Init+0x17c>
 80162ca:	1e43      	subs	r3, r0, #1
 80162cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80162d0:	fbb3 f3f5 	udiv	r3, r3, r5
 80162d4:	3301      	adds	r3, #1
 80162d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80162da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80162de:	e7a3      	b.n	8016228 <HAL_I2C_Init+0xa8>
 80162e0:	1e43      	subs	r3, r0, #1
 80162e2:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80162e6:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80162ea:	fbb3 f3fc 	udiv	r3, r3, ip
 80162ee:	3301      	adds	r3, #1
 80162f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80162f4:	fab3 f383 	clz	r3, r3
 80162f8:	095b      	lsrs	r3, r3, #5
 80162fa:	e7e4      	b.n	80162c6 <HAL_I2C_Init+0x146>
 80162fc:	1e43      	subs	r3, r0, #1
 80162fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016302:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016306:	fbb3 f3f5 	udiv	r3, r3, r5
 801630a:	3301      	adds	r3, #1
 801630c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8016314:	e788      	b.n	8016228 <HAL_I2C_Init+0xa8>
 8016316:	2304      	movs	r3, #4
 8016318:	e786      	b.n	8016228 <HAL_I2C_Init+0xa8>
 801631a:	2301      	movs	r3, #1
 801631c:	e784      	b.n	8016228 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 801631e:	2001      	movs	r0, #1
}
 8016320:	4770      	bx	lr
    return HAL_ERROR;
 8016322:	2001      	movs	r0, #1
 8016324:	e7ac      	b.n	8016280 <HAL_I2C_Init+0x100>
 8016326:	bf00      	nop
 8016328:	000186a0 	.word	0x000186a0
 801632c:	001e847f 	.word	0x001e847f
 8016330:	431bde83 	.word	0x431bde83
 8016334:	003d08ff 	.word	0x003d08ff
 8016338:	10624dd3 	.word	0x10624dd3

0801633c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 801633c:	b1a8      	cbz	r0, 801636a <HAL_I2C_DeInit+0x2e>
{
 801633e:	b510      	push	{r4, lr}
 8016340:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8016342:	2324      	movs	r3, #36	@ 0x24
 8016344:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8016348:	6802      	ldr	r2, [r0, #0]
 801634a:	6813      	ldr	r3, [r2, #0]
 801634c:	f023 0301 	bic.w	r3, r3, #1
 8016350:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8016352:	f7fb fcf1 	bl	8011d38 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8016356:	2000      	movs	r0, #0
 8016358:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 801635a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801635e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016360:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8016364:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8016368:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801636a:	2001      	movs	r0, #1
}
 801636c:	4770      	bx	lr
	...

08016370 <HAL_I2C_Master_Transmit>:
{
 8016370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016374:	b085      	sub	sp, #20
 8016376:	4604      	mov	r4, r0
 8016378:	460f      	mov	r7, r1
 801637a:	4691      	mov	r9, r2
 801637c:	4698      	mov	r8, r3
 801637e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8016380:	f7ff fb5c 	bl	8015a3c <HAL_GetTick>
 8016384:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8016386:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 801638a:	b2c0      	uxtb	r0, r0
 801638c:	2820      	cmp	r0, #32
 801638e:	d004      	beq.n	801639a <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8016390:	2702      	movs	r7, #2
}
 8016392:	4638      	mov	r0, r7
 8016394:	b005      	add	sp, #20
 8016396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801639a:	9500      	str	r5, [sp, #0]
 801639c:	2319      	movs	r3, #25
 801639e:	2201      	movs	r2, #1
 80163a0:	494f      	ldr	r1, [pc, #316]	@ (80164e0 <HAL_I2C_Master_Transmit+0x170>)
 80163a2:	4620      	mov	r0, r4
 80163a4:	f7ff fd74 	bl	8015e90 <I2C_WaitOnFlagUntilTimeout>
 80163a8:	2800      	cmp	r0, #0
 80163aa:	f040 8092 	bne.w	80164d2 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 80163ae:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80163b2:	2b01      	cmp	r3, #1
 80163b4:	f000 808f 	beq.w	80164d6 <HAL_I2C_Master_Transmit+0x166>
 80163b8:	2301      	movs	r3, #1
 80163ba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80163be:	6823      	ldr	r3, [r4, #0]
 80163c0:	681a      	ldr	r2, [r3, #0]
 80163c2:	f012 0f01 	tst.w	r2, #1
 80163c6:	d103      	bne.n	80163d0 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80163c8:	681a      	ldr	r2, [r3, #0]
 80163ca:	f042 0201 	orr.w	r2, r2, #1
 80163ce:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80163d0:	6822      	ldr	r2, [r4, #0]
 80163d2:	6813      	ldr	r3, [r2, #0]
 80163d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80163d8:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80163da:	2321      	movs	r3, #33	@ 0x21
 80163dc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80163e0:	2310      	movs	r3, #16
 80163e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80163e6:	2300      	movs	r3, #0
 80163e8:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80163ea:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80163ee:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80163f2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80163f4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80163f6:	4b3b      	ldr	r3, [pc, #236]	@ (80164e4 <HAL_I2C_Master_Transmit+0x174>)
 80163f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80163fa:	462b      	mov	r3, r5
 80163fc:	4632      	mov	r2, r6
 80163fe:	4639      	mov	r1, r7
 8016400:	4620      	mov	r0, r4
 8016402:	f7ff fe05 	bl	8016010 <I2C_MasterRequestWrite>
 8016406:	4607      	mov	r7, r0
 8016408:	2800      	cmp	r0, #0
 801640a:	d166      	bne.n	80164da <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801640c:	2300      	movs	r3, #0
 801640e:	9303      	str	r3, [sp, #12]
 8016410:	6823      	ldr	r3, [r4, #0]
 8016412:	695a      	ldr	r2, [r3, #20]
 8016414:	9203      	str	r2, [sp, #12]
 8016416:	699b      	ldr	r3, [r3, #24]
 8016418:	9303      	str	r3, [sp, #12]
 801641a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 801641c:	e011      	b.n	8016442 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801641e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016420:	2b04      	cmp	r3, #4
 8016422:	d001      	beq.n	8016428 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8016424:	2701      	movs	r7, #1
 8016426:	e7b4      	b.n	8016392 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016428:	6822      	ldr	r2, [r4, #0]
 801642a:	6813      	ldr	r3, [r2, #0]
 801642c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8016430:	6013      	str	r3, [r2, #0]
 8016432:	e7f7      	b.n	8016424 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016434:	462a      	mov	r2, r5
 8016436:	4631      	mov	r1, r6
 8016438:	4620      	mov	r0, r4
 801643a:	f7ff fe72 	bl	8016122 <I2C_WaitOnBTFFlagUntilTimeout>
 801643e:	2800      	cmp	r0, #0
 8016440:	d12e      	bne.n	80164a0 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8016442:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016444:	2b00      	cmp	r3, #0
 8016446:	d036      	beq.n	80164b6 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016448:	462a      	mov	r2, r5
 801644a:	4631      	mov	r1, r6
 801644c:	4620      	mov	r0, r4
 801644e:	f7ff fe39 	bl	80160c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8016452:	2800      	cmp	r0, #0
 8016454:	d1e3      	bne.n	801641e <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016456:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016458:	6823      	ldr	r3, [r4, #0]
 801645a:	7812      	ldrb	r2, [r2, #0]
 801645c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801645e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8016460:	1c43      	adds	r3, r0, #1
 8016462:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8016464:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8016466:	b289      	uxth	r1, r1
 8016468:	3901      	subs	r1, #1
 801646a:	b289      	uxth	r1, r1
 801646c:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 801646e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8016470:	3b01      	subs	r3, #1
 8016472:	b29b      	uxth	r3, r3
 8016474:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016476:	6822      	ldr	r2, [r4, #0]
 8016478:	6951      	ldr	r1, [r2, #20]
 801647a:	f011 0f04 	tst.w	r1, #4
 801647e:	d0d9      	beq.n	8016434 <HAL_I2C_Master_Transmit+0xc4>
 8016480:	2b00      	cmp	r3, #0
 8016482:	d0d7      	beq.n	8016434 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016484:	7843      	ldrb	r3, [r0, #1]
 8016486:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8016488:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801648a:	3301      	adds	r3, #1
 801648c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 801648e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8016490:	b29b      	uxth	r3, r3
 8016492:	3b01      	subs	r3, #1
 8016494:	b29b      	uxth	r3, r3
 8016496:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8016498:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 801649a:	3b01      	subs	r3, #1
 801649c:	8523      	strh	r3, [r4, #40]	@ 0x28
 801649e:	e7c9      	b.n	8016434 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80164a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80164a2:	2b04      	cmp	r3, #4
 80164a4:	d001      	beq.n	80164aa <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 80164a6:	2701      	movs	r7, #1
 80164a8:	e773      	b.n	8016392 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80164aa:	6822      	ldr	r2, [r4, #0]
 80164ac:	6813      	ldr	r3, [r2, #0]
 80164ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80164b2:	6013      	str	r3, [r2, #0]
 80164b4:	e7f7      	b.n	80164a6 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80164b6:	6822      	ldr	r2, [r4, #0]
 80164b8:	6813      	ldr	r3, [r2, #0]
 80164ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80164be:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80164c0:	2320      	movs	r3, #32
 80164c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80164c6:	2300      	movs	r3, #0
 80164c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 80164cc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 80164d0:	e75f      	b.n	8016392 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80164d2:	2702      	movs	r7, #2
 80164d4:	e75d      	b.n	8016392 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80164d6:	2702      	movs	r7, #2
 80164d8:	e75b      	b.n	8016392 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80164da:	2701      	movs	r7, #1
 80164dc:	e759      	b.n	8016392 <HAL_I2C_Master_Transmit+0x22>
 80164de:	bf00      	nop
 80164e0:	00100002 	.word	0x00100002
 80164e4:	ffff0000 	.word	0xffff0000

080164e8 <HAL_I2C_IsDeviceReady>:
{
 80164e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164ec:	b085      	sub	sp, #20
 80164ee:	4604      	mov	r4, r0
 80164f0:	4688      	mov	r8, r1
 80164f2:	4691      	mov	r9, r2
 80164f4:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80164f6:	f7ff faa1 	bl	8015a3c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80164fa:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80164fe:	b2db      	uxtb	r3, r3
 8016500:	2b20      	cmp	r3, #32
 8016502:	d003      	beq.n	801650c <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8016504:	2002      	movs	r0, #2
}
 8016506:	b005      	add	sp, #20
 8016508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801650c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801650e:	9000      	str	r0, [sp, #0]
 8016510:	2319      	movs	r3, #25
 8016512:	2201      	movs	r2, #1
 8016514:	4957      	ldr	r1, [pc, #348]	@ (8016674 <HAL_I2C_IsDeviceReady+0x18c>)
 8016516:	4620      	mov	r0, r4
 8016518:	f7ff fcba 	bl	8015e90 <I2C_WaitOnFlagUntilTimeout>
 801651c:	2800      	cmp	r0, #0
 801651e:	f040 80a0 	bne.w	8016662 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8016522:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8016526:	2b01      	cmp	r3, #1
 8016528:	f000 809d 	beq.w	8016666 <HAL_I2C_IsDeviceReady+0x17e>
 801652c:	2301      	movs	r3, #1
 801652e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016532:	6823      	ldr	r3, [r4, #0]
 8016534:	681a      	ldr	r2, [r3, #0]
 8016536:	f012 0f01 	tst.w	r2, #1
 801653a:	d103      	bne.n	8016544 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 801653c:	681a      	ldr	r2, [r3, #0]
 801653e:	f042 0201 	orr.w	r2, r2, #1
 8016542:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016544:	6822      	ldr	r2, [r4, #0]
 8016546:	6813      	ldr	r3, [r2, #0]
 8016548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801654c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 801654e:	2324      	movs	r3, #36	@ 0x24
 8016550:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016554:	2700      	movs	r7, #0
 8016556:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016558:	4b47      	ldr	r3, [pc, #284]	@ (8016678 <HAL_I2C_IsDeviceReady+0x190>)
 801655a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801655c:	e040      	b.n	80165e0 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801655e:	6823      	ldr	r3, [r4, #0]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8016566:	d002      	beq.n	801656e <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8016568:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801656c:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 801656e:	2003      	movs	r0, #3
 8016570:	e7c9      	b.n	8016506 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8016572:	23a0      	movs	r3, #160	@ 0xa0
 8016574:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8016578:	6822      	ldr	r2, [r4, #0]
 801657a:	6953      	ldr	r3, [r2, #20]
 801657c:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016580:	6952      	ldr	r2, [r2, #20]
 8016582:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8016586:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 801658a:	fa5f fc8c 	uxtb.w	ip, ip
 801658e:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8016592:	d009      	beq.n	80165a8 <HAL_I2C_IsDeviceReady+0xc0>
 8016594:	b943      	cbnz	r3, 80165a8 <HAL_I2C_IsDeviceReady+0xc0>
 8016596:	b93a      	cbnz	r2, 80165a8 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016598:	f7ff fa50 	bl	8015a3c <HAL_GetTick>
 801659c:	1b80      	subs	r0, r0, r6
 801659e:	42a8      	cmp	r0, r5
 80165a0:	d8e7      	bhi.n	8016572 <HAL_I2C_IsDeviceReady+0x8a>
 80165a2:	2d00      	cmp	r5, #0
 80165a4:	d1e8      	bne.n	8016578 <HAL_I2C_IsDeviceReady+0x90>
 80165a6:	e7e4      	b.n	8016572 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 80165a8:	2320      	movs	r3, #32
 80165aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80165ae:	6823      	ldr	r3, [r4, #0]
 80165b0:	695a      	ldr	r2, [r3, #20]
 80165b2:	f012 0f02 	tst.w	r2, #2
 80165b6:	d131      	bne.n	801661c <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80165b8:	681a      	ldr	r2, [r3, #0]
 80165ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80165be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80165c0:	6823      	ldr	r3, [r4, #0]
 80165c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80165c6:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80165c8:	9600      	str	r6, [sp, #0]
 80165ca:	2319      	movs	r3, #25
 80165cc:	2201      	movs	r2, #1
 80165ce:	4929      	ldr	r1, [pc, #164]	@ (8016674 <HAL_I2C_IsDeviceReady+0x18c>)
 80165d0:	4620      	mov	r0, r4
 80165d2:	f7ff fc5d 	bl	8015e90 <I2C_WaitOnFlagUntilTimeout>
 80165d6:	2800      	cmp	r0, #0
 80165d8:	d149      	bne.n	801666e <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 80165da:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80165dc:	454f      	cmp	r7, r9
 80165de:	d238      	bcs.n	8016652 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80165e0:	6822      	ldr	r2, [r4, #0]
 80165e2:	6813      	ldr	r3, [r2, #0]
 80165e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80165e8:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80165ea:	9600      	str	r6, [sp, #0]
 80165ec:	462b      	mov	r3, r5
 80165ee:	2200      	movs	r2, #0
 80165f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80165f4:	4620      	mov	r0, r4
 80165f6:	f7ff fc4b 	bl	8015e90 <I2C_WaitOnFlagUntilTimeout>
 80165fa:	2800      	cmp	r0, #0
 80165fc:	d1af      	bne.n	801655e <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80165fe:	6823      	ldr	r3, [r4, #0]
 8016600:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8016604:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8016606:	f7ff fa19 	bl	8015a3c <HAL_GetTick>
 801660a:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801660c:	6822      	ldr	r2, [r4, #0]
 801660e:	6953      	ldr	r3, [r2, #20]
 8016610:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8016614:	6952      	ldr	r2, [r2, #20]
 8016616:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801661a:	e7b4      	b.n	8016586 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016622:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016624:	2300      	movs	r3, #0
 8016626:	9303      	str	r3, [sp, #12]
 8016628:	6823      	ldr	r3, [r4, #0]
 801662a:	695a      	ldr	r2, [r3, #20]
 801662c:	9203      	str	r2, [sp, #12]
 801662e:	699b      	ldr	r3, [r3, #24]
 8016630:	9303      	str	r3, [sp, #12]
 8016632:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016634:	9600      	str	r6, [sp, #0]
 8016636:	2319      	movs	r3, #25
 8016638:	2201      	movs	r2, #1
 801663a:	490e      	ldr	r1, [pc, #56]	@ (8016674 <HAL_I2C_IsDeviceReady+0x18c>)
 801663c:	4620      	mov	r0, r4
 801663e:	f7ff fc27 	bl	8015e90 <I2C_WaitOnFlagUntilTimeout>
 8016642:	b990      	cbnz	r0, 801666a <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8016644:	2320      	movs	r3, #32
 8016646:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 801664a:	2300      	movs	r3, #0
 801664c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8016650:	e759      	b.n	8016506 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8016652:	2320      	movs	r3, #32
 8016654:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8016658:	2300      	movs	r3, #0
 801665a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 801665e:	2001      	movs	r0, #1
 8016660:	e751      	b.n	8016506 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8016662:	2002      	movs	r0, #2
 8016664:	e74f      	b.n	8016506 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8016666:	2002      	movs	r0, #2
 8016668:	e74d      	b.n	8016506 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 801666a:	2001      	movs	r0, #1
 801666c:	e74b      	b.n	8016506 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 801666e:	2001      	movs	r0, #1
 8016670:	e749      	b.n	8016506 <HAL_I2C_IsDeviceReady+0x1e>
 8016672:	bf00      	nop
 8016674:	00100002 	.word	0x00100002
 8016678:	ffff0000 	.word	0xffff0000

0801667c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801667c:	2800      	cmp	r0, #0
 801667e:	f000 81e0 	beq.w	8016a42 <HAL_RCC_OscConfig+0x3c6>
{
 8016682:	b570      	push	{r4, r5, r6, lr}
 8016684:	b082      	sub	sp, #8
 8016686:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016688:	6803      	ldr	r3, [r0, #0]
 801668a:	f013 0f01 	tst.w	r3, #1
 801668e:	d03b      	beq.n	8016708 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8016690:	4b9f      	ldr	r3, [pc, #636]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 8016692:	689b      	ldr	r3, [r3, #8]
 8016694:	f003 030c 	and.w	r3, r3, #12
 8016698:	2b04      	cmp	r3, #4
 801669a:	d02c      	beq.n	80166f6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801669c:	4b9c      	ldr	r3, [pc, #624]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 801669e:	689b      	ldr	r3, [r3, #8]
 80166a0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80166a4:	2b08      	cmp	r3, #8
 80166a6:	d021      	beq.n	80166ec <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80166a8:	6863      	ldr	r3, [r4, #4]
 80166aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80166ae:	d04f      	beq.n	8016750 <HAL_RCC_OscConfig+0xd4>
 80166b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80166b4:	d052      	beq.n	801675c <HAL_RCC_OscConfig+0xe0>
 80166b6:	4b96      	ldr	r3, [pc, #600]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80166be:	601a      	str	r2, [r3, #0]
 80166c0:	681a      	ldr	r2, [r3, #0]
 80166c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80166c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80166c8:	6863      	ldr	r3, [r4, #4]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d050      	beq.n	8016770 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80166ce:	f7ff f9b5 	bl	8015a3c <HAL_GetTick>
 80166d2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80166d4:	4b8e      	ldr	r3, [pc, #568]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80166dc:	d114      	bne.n	8016708 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80166de:	f7ff f9ad 	bl	8015a3c <HAL_GetTick>
 80166e2:	1b40      	subs	r0, r0, r5
 80166e4:	2864      	cmp	r0, #100	@ 0x64
 80166e6:	d9f5      	bls.n	80166d4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80166e8:	2003      	movs	r0, #3
 80166ea:	e1b1      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80166ec:	4b88      	ldr	r3, [pc, #544]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80166ee:	685b      	ldr	r3, [r3, #4]
 80166f0:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80166f4:	d0d8      	beq.n	80166a8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80166f6:	4b86      	ldr	r3, [pc, #536]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80166fe:	d003      	beq.n	8016708 <HAL_RCC_OscConfig+0x8c>
 8016700:	6863      	ldr	r3, [r4, #4]
 8016702:	2b00      	cmp	r3, #0
 8016704:	f000 819f 	beq.w	8016a46 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016708:	6823      	ldr	r3, [r4, #0]
 801670a:	f013 0f02 	tst.w	r3, #2
 801670e:	d054      	beq.n	80167ba <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016710:	4b7f      	ldr	r3, [pc, #508]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 8016712:	689b      	ldr	r3, [r3, #8]
 8016714:	f013 0f0c 	tst.w	r3, #12
 8016718:	d03e      	beq.n	8016798 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801671a:	4b7d      	ldr	r3, [pc, #500]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 801671c:	689b      	ldr	r3, [r3, #8]
 801671e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8016722:	2b08      	cmp	r3, #8
 8016724:	d033      	beq.n	801678e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8016726:	68e3      	ldr	r3, [r4, #12]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d068      	beq.n	80167fe <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801672c:	4b79      	ldr	r3, [pc, #484]	@ (8016914 <HAL_RCC_OscConfig+0x298>)
 801672e:	2201      	movs	r2, #1
 8016730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016732:	f7ff f983 	bl	8015a3c <HAL_GetTick>
 8016736:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016738:	4b75      	ldr	r3, [pc, #468]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	f013 0f02 	tst.w	r3, #2
 8016740:	d154      	bne.n	80167ec <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016742:	f7ff f97b 	bl	8015a3c <HAL_GetTick>
 8016746:	1b40      	subs	r0, r0, r5
 8016748:	2802      	cmp	r0, #2
 801674a:	d9f5      	bls.n	8016738 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 801674c:	2003      	movs	r0, #3
 801674e:	e17f      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016750:	4a6f      	ldr	r2, [pc, #444]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 8016752:	6813      	ldr	r3, [r2, #0]
 8016754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016758:	6013      	str	r3, [r2, #0]
 801675a:	e7b5      	b.n	80166c8 <HAL_RCC_OscConfig+0x4c>
 801675c:	4b6c      	ldr	r3, [pc, #432]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 801675e:	681a      	ldr	r2, [r3, #0]
 8016760:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8016764:	601a      	str	r2, [r3, #0]
 8016766:	681a      	ldr	r2, [r3, #0]
 8016768:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801676c:	601a      	str	r2, [r3, #0]
 801676e:	e7ab      	b.n	80166c8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8016770:	f7ff f964 	bl	8015a3c <HAL_GetTick>
 8016774:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8016776:	4b66      	ldr	r3, [pc, #408]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801677e:	d0c3      	beq.n	8016708 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016780:	f7ff f95c 	bl	8015a3c <HAL_GetTick>
 8016784:	1b40      	subs	r0, r0, r5
 8016786:	2864      	cmp	r0, #100	@ 0x64
 8016788:	d9f5      	bls.n	8016776 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 801678a:	2003      	movs	r0, #3
 801678c:	e160      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801678e:	4b60      	ldr	r3, [pc, #384]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 8016790:	685b      	ldr	r3, [r3, #4]
 8016792:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016796:	d1c6      	bne.n	8016726 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8016798:	4b5d      	ldr	r3, [pc, #372]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	f013 0f02 	tst.w	r3, #2
 80167a0:	d003      	beq.n	80167aa <HAL_RCC_OscConfig+0x12e>
 80167a2:	68e3      	ldr	r3, [r4, #12]
 80167a4:	2b01      	cmp	r3, #1
 80167a6:	f040 8150 	bne.w	8016a4a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80167aa:	4a59      	ldr	r2, [pc, #356]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80167ac:	6813      	ldr	r3, [r2, #0]
 80167ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80167b2:	6921      	ldr	r1, [r4, #16]
 80167b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80167b8:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80167ba:	6823      	ldr	r3, [r4, #0]
 80167bc:	f013 0f08 	tst.w	r3, #8
 80167c0:	d042      	beq.n	8016848 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80167c2:	6963      	ldr	r3, [r4, #20]
 80167c4:	b36b      	cbz	r3, 8016822 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80167c6:	4b53      	ldr	r3, [pc, #332]	@ (8016914 <HAL_RCC_OscConfig+0x298>)
 80167c8:	2201      	movs	r2, #1
 80167ca:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80167ce:	f7ff f935 	bl	8015a3c <HAL_GetTick>
 80167d2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80167d4:	4b4e      	ldr	r3, [pc, #312]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80167d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80167d8:	f013 0f02 	tst.w	r3, #2
 80167dc:	d134      	bne.n	8016848 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80167de:	f7ff f92d 	bl	8015a3c <HAL_GetTick>
 80167e2:	1b40      	subs	r0, r0, r5
 80167e4:	2802      	cmp	r0, #2
 80167e6:	d9f5      	bls.n	80167d4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80167e8:	2003      	movs	r0, #3
 80167ea:	e131      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80167ec:	4a48      	ldr	r2, [pc, #288]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80167ee:	6813      	ldr	r3, [r2, #0]
 80167f0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80167f4:	6921      	ldr	r1, [r4, #16]
 80167f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80167fa:	6013      	str	r3, [r2, #0]
 80167fc:	e7dd      	b.n	80167ba <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80167fe:	4b45      	ldr	r3, [pc, #276]	@ (8016914 <HAL_RCC_OscConfig+0x298>)
 8016800:	2200      	movs	r2, #0
 8016802:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8016804:	f7ff f91a 	bl	8015a3c <HAL_GetTick>
 8016808:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801680a:	4b41      	ldr	r3, [pc, #260]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	f013 0f02 	tst.w	r3, #2
 8016812:	d0d2      	beq.n	80167ba <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016814:	f7ff f912 	bl	8015a3c <HAL_GetTick>
 8016818:	1b40      	subs	r0, r0, r5
 801681a:	2802      	cmp	r0, #2
 801681c:	d9f5      	bls.n	801680a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 801681e:	2003      	movs	r0, #3
 8016820:	e116      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016822:	4b3c      	ldr	r3, [pc, #240]	@ (8016914 <HAL_RCC_OscConfig+0x298>)
 8016824:	2200      	movs	r2, #0
 8016826:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801682a:	f7ff f907 	bl	8015a3c <HAL_GetTick>
 801682e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016830:	4b37      	ldr	r3, [pc, #220]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 8016832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016834:	f013 0f02 	tst.w	r3, #2
 8016838:	d006      	beq.n	8016848 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801683a:	f7ff f8ff 	bl	8015a3c <HAL_GetTick>
 801683e:	1b40      	subs	r0, r0, r5
 8016840:	2802      	cmp	r0, #2
 8016842:	d9f5      	bls.n	8016830 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8016844:	2003      	movs	r0, #3
 8016846:	e103      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016848:	6823      	ldr	r3, [r4, #0]
 801684a:	f013 0f04 	tst.w	r3, #4
 801684e:	d077      	beq.n	8016940 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8016850:	4b2f      	ldr	r3, [pc, #188]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 8016852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016854:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8016858:	d133      	bne.n	80168c2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801685a:	2300      	movs	r3, #0
 801685c:	9301      	str	r3, [sp, #4]
 801685e:	4b2c      	ldr	r3, [pc, #176]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 8016860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016862:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8016866:	641a      	str	r2, [r3, #64]	@ 0x40
 8016868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801686a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801686e:	9301      	str	r3, [sp, #4]
 8016870:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8016872:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016874:	4b28      	ldr	r3, [pc, #160]	@ (8016918 <HAL_RCC_OscConfig+0x29c>)
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801687c:	d023      	beq.n	80168c6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801687e:	68a3      	ldr	r3, [r4, #8]
 8016880:	2b01      	cmp	r3, #1
 8016882:	d034      	beq.n	80168ee <HAL_RCC_OscConfig+0x272>
 8016884:	2b05      	cmp	r3, #5
 8016886:	d038      	beq.n	80168fa <HAL_RCC_OscConfig+0x27e>
 8016888:	4b21      	ldr	r3, [pc, #132]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 801688a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801688c:	f022 0201 	bic.w	r2, r2, #1
 8016890:	671a      	str	r2, [r3, #112]	@ 0x70
 8016892:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016894:	f022 0204 	bic.w	r2, r2, #4
 8016898:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801689a:	68a3      	ldr	r3, [r4, #8]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d03d      	beq.n	801691c <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80168a0:	f7ff f8cc 	bl	8015a3c <HAL_GetTick>
 80168a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80168a6:	4b1a      	ldr	r3, [pc, #104]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80168a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80168aa:	f013 0f02 	tst.w	r3, #2
 80168ae:	d146      	bne.n	801693e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80168b0:	f7ff f8c4 	bl	8015a3c <HAL_GetTick>
 80168b4:	1b80      	subs	r0, r0, r6
 80168b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80168ba:	4298      	cmp	r0, r3
 80168bc:	d9f3      	bls.n	80168a6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80168be:	2003      	movs	r0, #3
 80168c0:	e0c6      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80168c2:	2500      	movs	r5, #0
 80168c4:	e7d6      	b.n	8016874 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80168c6:	4a14      	ldr	r2, [pc, #80]	@ (8016918 <HAL_RCC_OscConfig+0x29c>)
 80168c8:	6813      	ldr	r3, [r2, #0]
 80168ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80168ce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80168d0:	f7ff f8b4 	bl	8015a3c <HAL_GetTick>
 80168d4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80168d6:	4b10      	ldr	r3, [pc, #64]	@ (8016918 <HAL_RCC_OscConfig+0x29c>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80168de:	d1ce      	bne.n	801687e <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80168e0:	f7ff f8ac 	bl	8015a3c <HAL_GetTick>
 80168e4:	1b80      	subs	r0, r0, r6
 80168e6:	2802      	cmp	r0, #2
 80168e8:	d9f5      	bls.n	80168d6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80168ea:	2003      	movs	r0, #3
 80168ec:	e0b0      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80168ee:	4a08      	ldr	r2, [pc, #32]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80168f0:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80168f2:	f043 0301 	orr.w	r3, r3, #1
 80168f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80168f8:	e7cf      	b.n	801689a <HAL_RCC_OscConfig+0x21e>
 80168fa:	4b05      	ldr	r3, [pc, #20]	@ (8016910 <HAL_RCC_OscConfig+0x294>)
 80168fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80168fe:	f042 0204 	orr.w	r2, r2, #4
 8016902:	671a      	str	r2, [r3, #112]	@ 0x70
 8016904:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016906:	f042 0201 	orr.w	r2, r2, #1
 801690a:	671a      	str	r2, [r3, #112]	@ 0x70
 801690c:	e7c5      	b.n	801689a <HAL_RCC_OscConfig+0x21e>
 801690e:	bf00      	nop
 8016910:	40023800 	.word	0x40023800
 8016914:	42470000 	.word	0x42470000
 8016918:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801691c:	f7ff f88e 	bl	8015a3c <HAL_GetTick>
 8016920:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016922:	4b52      	ldr	r3, [pc, #328]	@ (8016a6c <HAL_RCC_OscConfig+0x3f0>)
 8016924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016926:	f013 0f02 	tst.w	r3, #2
 801692a:	d008      	beq.n	801693e <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801692c:	f7ff f886 	bl	8015a3c <HAL_GetTick>
 8016930:	1b80      	subs	r0, r0, r6
 8016932:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016936:	4298      	cmp	r0, r3
 8016938:	d9f3      	bls.n	8016922 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 801693a:	2003      	movs	r0, #3
 801693c:	e088      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801693e:	b9ed      	cbnz	r5, 801697c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016940:	69a3      	ldr	r3, [r4, #24]
 8016942:	2b00      	cmp	r3, #0
 8016944:	f000 8083 	beq.w	8016a4e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8016948:	4a48      	ldr	r2, [pc, #288]	@ (8016a6c <HAL_RCC_OscConfig+0x3f0>)
 801694a:	6892      	ldr	r2, [r2, #8]
 801694c:	f002 020c 	and.w	r2, r2, #12
 8016950:	2a08      	cmp	r2, #8
 8016952:	d051      	beq.n	80169f8 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016954:	2b02      	cmp	r3, #2
 8016956:	d017      	beq.n	8016988 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016958:	4b45      	ldr	r3, [pc, #276]	@ (8016a70 <HAL_RCC_OscConfig+0x3f4>)
 801695a:	2200      	movs	r2, #0
 801695c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801695e:	f7ff f86d 	bl	8015a3c <HAL_GetTick>
 8016962:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016964:	4b41      	ldr	r3, [pc, #260]	@ (8016a6c <HAL_RCC_OscConfig+0x3f0>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801696c:	d042      	beq.n	80169f4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801696e:	f7ff f865 	bl	8015a3c <HAL_GetTick>
 8016972:	1b00      	subs	r0, r0, r4
 8016974:	2802      	cmp	r0, #2
 8016976:	d9f5      	bls.n	8016964 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8016978:	2003      	movs	r0, #3
 801697a:	e069      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 801697c:	4a3b      	ldr	r2, [pc, #236]	@ (8016a6c <HAL_RCC_OscConfig+0x3f0>)
 801697e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016984:	6413      	str	r3, [r2, #64]	@ 0x40
 8016986:	e7db      	b.n	8016940 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8016988:	4b39      	ldr	r3, [pc, #228]	@ (8016a70 <HAL_RCC_OscConfig+0x3f4>)
 801698a:	2200      	movs	r2, #0
 801698c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 801698e:	f7ff f855 	bl	8015a3c <HAL_GetTick>
 8016992:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016994:	4b35      	ldr	r3, [pc, #212]	@ (8016a6c <HAL_RCC_OscConfig+0x3f0>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801699c:	d006      	beq.n	80169ac <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801699e:	f7ff f84d 	bl	8015a3c <HAL_GetTick>
 80169a2:	1b40      	subs	r0, r0, r5
 80169a4:	2802      	cmp	r0, #2
 80169a6:	d9f5      	bls.n	8016994 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80169a8:	2003      	movs	r0, #3
 80169aa:	e051      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80169ac:	69e3      	ldr	r3, [r4, #28]
 80169ae:	6a22      	ldr	r2, [r4, #32]
 80169b0:	4313      	orrs	r3, r2
 80169b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80169b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80169b8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80169ba:	0852      	lsrs	r2, r2, #1
 80169bc:	3a01      	subs	r2, #1
 80169be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80169c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80169c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80169c8:	4a28      	ldr	r2, [pc, #160]	@ (8016a6c <HAL_RCC_OscConfig+0x3f0>)
 80169ca:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80169cc:	4b28      	ldr	r3, [pc, #160]	@ (8016a70 <HAL_RCC_OscConfig+0x3f4>)
 80169ce:	2201      	movs	r2, #1
 80169d0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80169d2:	f7ff f833 	bl	8015a3c <HAL_GetTick>
 80169d6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80169d8:	4b24      	ldr	r3, [pc, #144]	@ (8016a6c <HAL_RCC_OscConfig+0x3f0>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80169e0:	d106      	bne.n	80169f0 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80169e2:	f7ff f82b 	bl	8015a3c <HAL_GetTick>
 80169e6:	1b00      	subs	r0, r0, r4
 80169e8:	2802      	cmp	r0, #2
 80169ea:	d9f5      	bls.n	80169d8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80169ec:	2003      	movs	r0, #3
 80169ee:	e02f      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80169f0:	2000      	movs	r0, #0
 80169f2:	e02d      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
 80169f4:	2000      	movs	r0, #0
 80169f6:	e02b      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d02b      	beq.n	8016a54 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80169fc:	4b1b      	ldr	r3, [pc, #108]	@ (8016a6c <HAL_RCC_OscConfig+0x3f0>)
 80169fe:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016a00:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8016a04:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016a06:	4291      	cmp	r1, r2
 8016a08:	d126      	bne.n	8016a58 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8016a0e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016a10:	428a      	cmp	r2, r1
 8016a12:	d123      	bne.n	8016a5c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016a14:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016a16:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8016a1a:	401a      	ands	r2, r3
 8016a1c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8016a20:	d11e      	bne.n	8016a60 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8016a22:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8016a26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8016a28:	0852      	lsrs	r2, r2, #1
 8016a2a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016a2c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8016a30:	d118      	bne.n	8016a64 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8016a32:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8016a36:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8016a38:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8016a3c:	d114      	bne.n	8016a68 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8016a3e:	2000      	movs	r0, #0
 8016a40:	e006      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8016a42:	2001      	movs	r0, #1
}
 8016a44:	4770      	bx	lr
        return HAL_ERROR;
 8016a46:	2001      	movs	r0, #1
 8016a48:	e002      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8016a4a:	2001      	movs	r0, #1
 8016a4c:	e000      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8016a4e:	2000      	movs	r0, #0
}
 8016a50:	b002      	add	sp, #8
 8016a52:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8016a54:	2001      	movs	r0, #1
 8016a56:	e7fb      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8016a58:	2001      	movs	r0, #1
 8016a5a:	e7f9      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
 8016a5c:	2001      	movs	r0, #1
 8016a5e:	e7f7      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
 8016a60:	2001      	movs	r0, #1
 8016a62:	e7f5      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
 8016a64:	2001      	movs	r0, #1
 8016a66:	e7f3      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
 8016a68:	2001      	movs	r0, #1
 8016a6a:	e7f1      	b.n	8016a50 <HAL_RCC_OscConfig+0x3d4>
 8016a6c:	40023800 	.word	0x40023800
 8016a70:	42470000 	.word	0x42470000

08016a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016a74:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016a76:	4b33      	ldr	r3, [pc, #204]	@ (8016b44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016a78:	689b      	ldr	r3, [r3, #8]
 8016a7a:	f003 030c 	and.w	r3, r3, #12
 8016a7e:	2b04      	cmp	r3, #4
 8016a80:	d05b      	beq.n	8016b3a <HAL_RCC_GetSysClockFreq+0xc6>
 8016a82:	2b08      	cmp	r3, #8
 8016a84:	d15b      	bne.n	8016b3e <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016a86:	4b2f      	ldr	r3, [pc, #188]	@ (8016b44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016a88:	685a      	ldr	r2, [r3, #4]
 8016a8a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8016a8e:	685b      	ldr	r3, [r3, #4]
 8016a90:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8016a94:	d02c      	beq.n	8016af0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016a96:	4b2b      	ldr	r3, [pc, #172]	@ (8016b44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016a98:	6858      	ldr	r0, [r3, #4]
 8016a9a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8016a9e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8016aa2:	ebbc 0c00 	subs.w	ip, ip, r0
 8016aa6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8016aaa:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8016aae:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8016ab2:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8016ab6:	ebb1 010c 	subs.w	r1, r1, ip
 8016aba:	eb63 030e 	sbc.w	r3, r3, lr
 8016abe:	00db      	lsls	r3, r3, #3
 8016ac0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016ac4:	00c9      	lsls	r1, r1, #3
 8016ac6:	eb11 0c00 	adds.w	ip, r1, r0
 8016aca:	f143 0300 	adc.w	r3, r3, #0
 8016ace:	0259      	lsls	r1, r3, #9
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8016ad6:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8016ada:	f7fa f93d 	bl	8010d58 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8016ade:	4b19      	ldr	r3, [pc, #100]	@ (8016b44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016ae0:	685b      	ldr	r3, [r3, #4]
 8016ae2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8016aea:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8016aee:	e027      	b.n	8016b40 <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016af0:	4b14      	ldr	r3, [pc, #80]	@ (8016b44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8016af2:	6858      	ldr	r0, [r3, #4]
 8016af4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8016af8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8016afc:	ebbc 0c00 	subs.w	ip, ip, r0
 8016b00:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8016b04:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8016b08:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8016b0c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8016b10:	ebb1 010c 	subs.w	r1, r1, ip
 8016b14:	eb63 030e 	sbc.w	r3, r3, lr
 8016b18:	00db      	lsls	r3, r3, #3
 8016b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8016b1e:	00c9      	lsls	r1, r1, #3
 8016b20:	eb11 0c00 	adds.w	ip, r1, r0
 8016b24:	f143 0300 	adc.w	r3, r3, #0
 8016b28:	0299      	lsls	r1, r3, #10
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8016b30:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8016b34:	f7fa f910 	bl	8010d58 <__aeabi_uldivmod>
 8016b38:	e7d1      	b.n	8016ade <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8016b3a:	4803      	ldr	r0, [pc, #12]	@ (8016b48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8016b3c:	e000      	b.n	8016b40 <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016b3e:	4803      	ldr	r0, [pc, #12]	@ (8016b4c <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8016b40:	bd08      	pop	{r3, pc}
 8016b42:	bf00      	nop
 8016b44:	40023800 	.word	0x40023800
 8016b48:	007a1200 	.word	0x007a1200
 8016b4c:	00f42400 	.word	0x00f42400

08016b50 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8016b50:	2800      	cmp	r0, #0
 8016b52:	f000 809b 	beq.w	8016c8c <HAL_RCC_ClockConfig+0x13c>
{
 8016b56:	b570      	push	{r4, r5, r6, lr}
 8016b58:	460d      	mov	r5, r1
 8016b5a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8016b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8016c9c <HAL_RCC_ClockConfig+0x14c>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	f003 0307 	and.w	r3, r3, #7
 8016b64:	428b      	cmp	r3, r1
 8016b66:	d208      	bcs.n	8016b7a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016b68:	b2cb      	uxtb	r3, r1
 8016b6a:	4a4c      	ldr	r2, [pc, #304]	@ (8016c9c <HAL_RCC_ClockConfig+0x14c>)
 8016b6c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016b6e:	6813      	ldr	r3, [r2, #0]
 8016b70:	f003 0307 	and.w	r3, r3, #7
 8016b74:	428b      	cmp	r3, r1
 8016b76:	f040 808b 	bne.w	8016c90 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	f013 0f02 	tst.w	r3, #2
 8016b80:	d017      	beq.n	8016bb2 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016b82:	f013 0f04 	tst.w	r3, #4
 8016b86:	d004      	beq.n	8016b92 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016b88:	4a45      	ldr	r2, [pc, #276]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016b8a:	6893      	ldr	r3, [r2, #8]
 8016b8c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8016b90:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016b92:	6823      	ldr	r3, [r4, #0]
 8016b94:	f013 0f08 	tst.w	r3, #8
 8016b98:	d004      	beq.n	8016ba4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016b9a:	4a41      	ldr	r2, [pc, #260]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016b9c:	6893      	ldr	r3, [r2, #8]
 8016b9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8016ba2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016ba6:	6893      	ldr	r3, [r2, #8]
 8016ba8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8016bac:	68a1      	ldr	r1, [r4, #8]
 8016bae:	430b      	orrs	r3, r1
 8016bb0:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	f013 0f01 	tst.w	r3, #1
 8016bb8:	d032      	beq.n	8016c20 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016bba:	6863      	ldr	r3, [r4, #4]
 8016bbc:	2b01      	cmp	r3, #1
 8016bbe:	d021      	beq.n	8016c04 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016bc0:	1e9a      	subs	r2, r3, #2
 8016bc2:	2a01      	cmp	r2, #1
 8016bc4:	d925      	bls.n	8016c12 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016bc6:	4a36      	ldr	r2, [pc, #216]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016bc8:	6812      	ldr	r2, [r2, #0]
 8016bca:	f012 0f02 	tst.w	r2, #2
 8016bce:	d061      	beq.n	8016c94 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016bd0:	4933      	ldr	r1, [pc, #204]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016bd2:	688a      	ldr	r2, [r1, #8]
 8016bd4:	f022 0203 	bic.w	r2, r2, #3
 8016bd8:	4313      	orrs	r3, r2
 8016bda:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8016bdc:	f7fe ff2e 	bl	8015a3c <HAL_GetTick>
 8016be0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016be2:	4b2f      	ldr	r3, [pc, #188]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016be4:	689b      	ldr	r3, [r3, #8]
 8016be6:	f003 030c 	and.w	r3, r3, #12
 8016bea:	6862      	ldr	r2, [r4, #4]
 8016bec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8016bf0:	d016      	beq.n	8016c20 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016bf2:	f7fe ff23 	bl	8015a3c <HAL_GetTick>
 8016bf6:	1b80      	subs	r0, r0, r6
 8016bf8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016bfc:	4298      	cmp	r0, r3
 8016bfe:	d9f0      	bls.n	8016be2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8016c00:	2003      	movs	r0, #3
 8016c02:	e042      	b.n	8016c8a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016c04:	4a26      	ldr	r2, [pc, #152]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016c06:	6812      	ldr	r2, [r2, #0]
 8016c08:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8016c0c:	d1e0      	bne.n	8016bd0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8016c0e:	2001      	movs	r0, #1
 8016c10:	e03b      	b.n	8016c8a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016c12:	4a23      	ldr	r2, [pc, #140]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016c14:	6812      	ldr	r2, [r2, #0]
 8016c16:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8016c1a:	d1d9      	bne.n	8016bd0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8016c1c:	2001      	movs	r0, #1
 8016c1e:	e034      	b.n	8016c8a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8016c20:	4b1e      	ldr	r3, [pc, #120]	@ (8016c9c <HAL_RCC_ClockConfig+0x14c>)
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	f003 0307 	and.w	r3, r3, #7
 8016c28:	42ab      	cmp	r3, r5
 8016c2a:	d907      	bls.n	8016c3c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016c2c:	b2ea      	uxtb	r2, r5
 8016c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8016c9c <HAL_RCC_ClockConfig+0x14c>)
 8016c30:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	f003 0307 	and.w	r3, r3, #7
 8016c38:	42ab      	cmp	r3, r5
 8016c3a:	d12d      	bne.n	8016c98 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016c3c:	6823      	ldr	r3, [r4, #0]
 8016c3e:	f013 0f04 	tst.w	r3, #4
 8016c42:	d006      	beq.n	8016c52 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016c44:	4a16      	ldr	r2, [pc, #88]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016c46:	6893      	ldr	r3, [r2, #8]
 8016c48:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8016c4c:	68e1      	ldr	r1, [r4, #12]
 8016c4e:	430b      	orrs	r3, r1
 8016c50:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016c52:	6823      	ldr	r3, [r4, #0]
 8016c54:	f013 0f08 	tst.w	r3, #8
 8016c58:	d007      	beq.n	8016c6a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8016c5a:	4a11      	ldr	r2, [pc, #68]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016c5c:	6893      	ldr	r3, [r2, #8]
 8016c5e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8016c62:	6921      	ldr	r1, [r4, #16]
 8016c64:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8016c68:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8016c6a:	f7ff ff03 	bl	8016a74 <HAL_RCC_GetSysClockFreq>
 8016c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8016ca0 <HAL_RCC_ClockConfig+0x150>)
 8016c70:	689b      	ldr	r3, [r3, #8]
 8016c72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8016c76:	4a0b      	ldr	r2, [pc, #44]	@ (8016ca4 <HAL_RCC_ClockConfig+0x154>)
 8016c78:	5cd3      	ldrb	r3, [r2, r3]
 8016c7a:	40d8      	lsrs	r0, r3
 8016c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8016ca8 <HAL_RCC_ClockConfig+0x158>)
 8016c7e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8016c80:	4b0a      	ldr	r3, [pc, #40]	@ (8016cac <HAL_RCC_ClockConfig+0x15c>)
 8016c82:	6818      	ldr	r0, [r3, #0]
 8016c84:	f7fb fabc 	bl	8012200 <HAL_InitTick>
  return HAL_OK;
 8016c88:	2000      	movs	r0, #0
}
 8016c8a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8016c8c:	2001      	movs	r0, #1
}
 8016c8e:	4770      	bx	lr
      return HAL_ERROR;
 8016c90:	2001      	movs	r0, #1
 8016c92:	e7fa      	b.n	8016c8a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8016c94:	2001      	movs	r0, #1
 8016c96:	e7f8      	b.n	8016c8a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8016c98:	2001      	movs	r0, #1
 8016c9a:	e7f6      	b.n	8016c8a <HAL_RCC_ClockConfig+0x13a>
 8016c9c:	40023c00 	.word	0x40023c00
 8016ca0:	40023800 	.word	0x40023800
 8016ca4:	08035a60 	.word	0x08035a60
 8016ca8:	20000018 	.word	0x20000018
 8016cac:	20000108 	.word	0x20000108

08016cb0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8016cb0:	4b01      	ldr	r3, [pc, #4]	@ (8016cb8 <HAL_RCC_GetHCLKFreq+0x8>)
 8016cb2:	6818      	ldr	r0, [r3, #0]
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	20000018 	.word	0x20000018

08016cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016cbc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8016cbe:	f7ff fff7 	bl	8016cb0 <HAL_RCC_GetHCLKFreq>
 8016cc2:	4b04      	ldr	r3, [pc, #16]	@ (8016cd4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8016cc4:	689b      	ldr	r3, [r3, #8]
 8016cc6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8016cca:	4a03      	ldr	r2, [pc, #12]	@ (8016cd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8016ccc:	5cd3      	ldrb	r3, [r2, r3]
}
 8016cce:	40d8      	lsrs	r0, r3
 8016cd0:	bd08      	pop	{r3, pc}
 8016cd2:	bf00      	nop
 8016cd4:	40023800 	.word	0x40023800
 8016cd8:	08035a58 	.word	0x08035a58

08016cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016cdc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8016cde:	f7ff ffe7 	bl	8016cb0 <HAL_RCC_GetHCLKFreq>
 8016ce2:	4b04      	ldr	r3, [pc, #16]	@ (8016cf4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8016ce4:	689b      	ldr	r3, [r3, #8]
 8016ce6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8016cea:	4a03      	ldr	r2, [pc, #12]	@ (8016cf8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8016cec:	5cd3      	ldrb	r3, [r2, r3]
}
 8016cee:	40d8      	lsrs	r0, r3
 8016cf0:	bd08      	pop	{r3, pc}
 8016cf2:	bf00      	nop
 8016cf4:	40023800 	.word	0x40023800
 8016cf8:	08035a58 	.word	0x08035a58

08016cfc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8016cfc:	230f      	movs	r3, #15
 8016cfe:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016d00:	4b0b      	ldr	r3, [pc, #44]	@ (8016d30 <HAL_RCC_GetClockConfig+0x34>)
 8016d02:	689a      	ldr	r2, [r3, #8]
 8016d04:	f002 0203 	and.w	r2, r2, #3
 8016d08:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016d0a:	689a      	ldr	r2, [r3, #8]
 8016d0c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8016d10:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016d12:	689a      	ldr	r2, [r3, #8]
 8016d14:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8016d18:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016d1a:	689b      	ldr	r3, [r3, #8]
 8016d1c:	08db      	lsrs	r3, r3, #3
 8016d1e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8016d22:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016d24:	4b03      	ldr	r3, [pc, #12]	@ (8016d34 <HAL_RCC_GetClockConfig+0x38>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	f003 0307 	and.w	r3, r3, #7
 8016d2c:	600b      	str	r3, [r1, #0]
}
 8016d2e:	4770      	bx	lr
 8016d30:	40023800 	.word	0x40023800
 8016d34:	40023c00 	.word	0x40023c00

08016d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8016d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d3c:	b082      	sub	sp, #8
 8016d3e:	4605      	mov	r5, r0
 8016d40:	4688      	mov	r8, r1
 8016d42:	4617      	mov	r7, r2
 8016d44:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8016d46:	f7fe fe79 	bl	8015a3c <HAL_GetTick>
 8016d4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016d4c:	1a1b      	subs	r3, r3, r0
 8016d4e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8016d52:	f7fe fe73 	bl	8015a3c <HAL_GetTick>
 8016d56:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8016d58:	4b28      	ldr	r3, [pc, #160]	@ (8016dfc <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8016d60:	fb09 f303 	mul.w	r3, r9, r3
 8016d64:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016d66:	682b      	ldr	r3, [r5, #0]
 8016d68:	689c      	ldr	r4, [r3, #8]
 8016d6a:	ea38 0404 	bics.w	r4, r8, r4
 8016d6e:	bf0c      	ite	eq
 8016d70:	2301      	moveq	r3, #1
 8016d72:	2300      	movne	r3, #0
 8016d74:	42bb      	cmp	r3, r7
 8016d76:	d03d      	beq.n	8016df4 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016d78:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016d7c:	d0f3      	beq.n	8016d66 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016d7e:	f7fe fe5d 	bl	8015a3c <HAL_GetTick>
 8016d82:	eba0 000a 	sub.w	r0, r0, sl
 8016d86:	4548      	cmp	r0, r9
 8016d88:	d207      	bcs.n	8016d9a <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8016d8a:	9a01      	ldr	r2, [sp, #4]
 8016d8c:	b102      	cbz	r2, 8016d90 <SPI_WaitFlagStateUntilTimeout+0x58>
 8016d8e:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8016d90:	9b01      	ldr	r3, [sp, #4]
 8016d92:	3b01      	subs	r3, #1
 8016d94:	9301      	str	r3, [sp, #4]
 8016d96:	4691      	mov	r9, r2
 8016d98:	e7e5      	b.n	8016d66 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8016d9a:	682a      	ldr	r2, [r5, #0]
 8016d9c:	6853      	ldr	r3, [r2, #4]
 8016d9e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8016da2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016da4:	686b      	ldr	r3, [r5, #4]
 8016da6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016daa:	d00b      	beq.n	8016dc4 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8016dac:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8016dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016db2:	d014      	beq.n	8016dde <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8016db4:	2301      	movs	r3, #1
 8016db6:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8016dba:	2300      	movs	r3, #0
 8016dbc:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8016dc0:	2003      	movs	r0, #3
 8016dc2:	e018      	b.n	8016df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016dc4:	68ab      	ldr	r3, [r5, #8]
 8016dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016dca:	d002      	beq.n	8016dd2 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016dd0:	d1ec      	bne.n	8016dac <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8016dd2:	682a      	ldr	r2, [r5, #0]
 8016dd4:	6813      	ldr	r3, [r2, #0]
 8016dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016dda:	6013      	str	r3, [r2, #0]
 8016ddc:	e7e6      	b.n	8016dac <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8016dde:	682a      	ldr	r2, [r5, #0]
 8016de0:	6813      	ldr	r3, [r2, #0]
 8016de2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016de6:	6013      	str	r3, [r2, #0]
 8016de8:	682a      	ldr	r2, [r5, #0]
 8016dea:	6813      	ldr	r3, [r2, #0]
 8016dec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016df0:	6013      	str	r3, [r2, #0]
 8016df2:	e7df      	b.n	8016db4 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8016df4:	2000      	movs	r0, #0
}
 8016df6:	b002      	add	sp, #8
 8016df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dfc:	20000018 	.word	0x20000018

08016e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8016e00:	b570      	push	{r4, r5, r6, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	4604      	mov	r4, r0
 8016e06:	460d      	mov	r5, r1
 8016e08:	4616      	mov	r6, r2
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8016e0a:	9200      	str	r2, [sp, #0]
 8016e0c:	460b      	mov	r3, r1
 8016e0e:	2201      	movs	r2, #1
 8016e10:	2102      	movs	r1, #2
 8016e12:	f7ff ff91 	bl	8016d38 <SPI_WaitFlagStateUntilTimeout>
 8016e16:	b9d0      	cbnz	r0, 8016e4e <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8016e18:	4b17      	ldr	r3, [pc, #92]	@ (8016e78 <SPI_EndRxTxTransaction+0x78>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	4a17      	ldr	r2, [pc, #92]	@ (8016e7c <SPI_EndRxTxTransaction+0x7c>)
 8016e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8016e22:	0d5b      	lsrs	r3, r3, #21
 8016e24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016e28:	fb02 f303 	mul.w	r3, r2, r3
 8016e2c:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016e2e:	6863      	ldr	r3, [r4, #4]
 8016e30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016e34:	d011      	beq.n	8016e5a <SPI_EndRxTxTransaction+0x5a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8016e36:	9b03      	ldr	r3, [sp, #12]
 8016e38:	b13b      	cbz	r3, 8016e4a <SPI_EndRxTxTransaction+0x4a>
      {
        break;
      }
      count--;
 8016e3a:	9b03      	ldr	r3, [sp, #12]
 8016e3c:	3b01      	subs	r3, #1
 8016e3e:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8016e40:	6823      	ldr	r3, [r4, #0]
 8016e42:	689b      	ldr	r3, [r3, #8]
 8016e44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016e48:	d1f5      	bne.n	8016e36 <SPI_EndRxTxTransaction+0x36>
  }

  return HAL_OK;
}
 8016e4a:	b004      	add	sp, #16
 8016e4c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016e4e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016e50:	f043 0320 	orr.w	r3, r3, #32
 8016e54:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8016e56:	2003      	movs	r0, #3
 8016e58:	e7f7      	b.n	8016e4a <SPI_EndRxTxTransaction+0x4a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8016e5a:	9600      	str	r6, [sp, #0]
 8016e5c:	462b      	mov	r3, r5
 8016e5e:	2200      	movs	r2, #0
 8016e60:	2180      	movs	r1, #128	@ 0x80
 8016e62:	4620      	mov	r0, r4
 8016e64:	f7ff ff68 	bl	8016d38 <SPI_WaitFlagStateUntilTimeout>
 8016e68:	2800      	cmp	r0, #0
 8016e6a:	d0ee      	beq.n	8016e4a <SPI_EndRxTxTransaction+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016e6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016e6e:	f043 0320 	orr.w	r3, r3, #32
 8016e72:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8016e74:	2003      	movs	r0, #3
 8016e76:	e7e8      	b.n	8016e4a <SPI_EndRxTxTransaction+0x4a>
 8016e78:	20000018 	.word	0x20000018
 8016e7c:	165e9f81 	.word	0x165e9f81

08016e80 <SPI_EndRxTransaction>:
{
 8016e80:	b510      	push	{r4, lr}
 8016e82:	b082      	sub	sp, #8
 8016e84:	4604      	mov	r4, r0
 8016e86:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016e88:	6841      	ldr	r1, [r0, #4]
 8016e8a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8016e8e:	d014      	beq.n	8016eba <SPI_EndRxTransaction+0x3a>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016e90:	6861      	ldr	r1, [r4, #4]
 8016e92:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 8016e96:	d12a      	bne.n	8016eee <SPI_EndRxTransaction+0x6e>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8016e98:	68a1      	ldr	r1, [r4, #8]
 8016e9a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016e9e:	d019      	beq.n	8016ed4 <SPI_EndRxTransaction+0x54>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8016ea0:	9200      	str	r2, [sp, #0]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	2180      	movs	r1, #128	@ 0x80
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	f7ff ff46 	bl	8016d38 <SPI_WaitFlagStateUntilTimeout>
 8016eac:	b330      	cbz	r0, 8016efc <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016eae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016eb0:	f043 0320 	orr.w	r3, r3, #32
 8016eb4:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8016eb6:	2003      	movs	r0, #3
 8016eb8:	e020      	b.n	8016efc <SPI_EndRxTransaction+0x7c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016eba:	6881      	ldr	r1, [r0, #8]
 8016ebc:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8016ec0:	d002      	beq.n	8016ec8 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016ec2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016ec6:	d1e3      	bne.n	8016e90 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8016ec8:	6820      	ldr	r0, [r4, #0]
 8016eca:	6801      	ldr	r1, [r0, #0]
 8016ecc:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8016ed0:	6001      	str	r1, [r0, #0]
 8016ed2:	e7dd      	b.n	8016e90 <SPI_EndRxTransaction+0x10>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8016ed4:	9200      	str	r2, [sp, #0]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	2101      	movs	r1, #1
 8016eda:	4620      	mov	r0, r4
 8016edc:	f7ff ff2c 	bl	8016d38 <SPI_WaitFlagStateUntilTimeout>
 8016ee0:	b160      	cbz	r0, 8016efc <SPI_EndRxTransaction+0x7c>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016ee2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016ee4:	f043 0320 	orr.w	r3, r3, #32
 8016ee8:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8016eea:	2003      	movs	r0, #3
 8016eec:	e006      	b.n	8016efc <SPI_EndRxTransaction+0x7c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8016eee:	9200      	str	r2, [sp, #0]
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	2101      	movs	r1, #1
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	f7ff ff1f 	bl	8016d38 <SPI_WaitFlagStateUntilTimeout>
 8016efa:	b908      	cbnz	r0, 8016f00 <SPI_EndRxTransaction+0x80>
}
 8016efc:	b002      	add	sp, #8
 8016efe:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8016f00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8016f02:	f043 0320 	orr.w	r3, r3, #32
 8016f06:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8016f08:	2003      	movs	r0, #3
 8016f0a:	e7f7      	b.n	8016efc <SPI_EndRxTransaction+0x7c>

08016f0c <HAL_SPI_Init>:
  if (hspi == NULL)
 8016f0c:	2800      	cmp	r0, #0
 8016f0e:	d05a      	beq.n	8016fc6 <HAL_SPI_Init+0xba>
{
 8016f10:	b510      	push	{r4, lr}
 8016f12:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8016f14:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016f16:	b933      	cbnz	r3, 8016f26 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016f18:	6843      	ldr	r3, [r0, #4]
 8016f1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016f1e:	d005      	beq.n	8016f2c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016f20:	2300      	movs	r3, #0
 8016f22:	61c3      	str	r3, [r0, #28]
 8016f24:	e002      	b.n	8016f2c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8016f26:	2300      	movs	r3, #0
 8016f28:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8016f2a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8016f30:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d040      	beq.n	8016fba <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8016f38:	2302      	movs	r3, #2
 8016f3a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8016f3e:	6822      	ldr	r2, [r4, #0]
 8016f40:	6813      	ldr	r3, [r2, #0]
 8016f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016f46:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8016f48:	6863      	ldr	r3, [r4, #4]
 8016f4a:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8016f4e:	68a2      	ldr	r2, [r4, #8]
 8016f50:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8016f54:	4313      	orrs	r3, r2
 8016f56:	68e2      	ldr	r2, [r4, #12]
 8016f58:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8016f5c:	4313      	orrs	r3, r2
 8016f5e:	6922      	ldr	r2, [r4, #16]
 8016f60:	f002 0202 	and.w	r2, r2, #2
 8016f64:	4313      	orrs	r3, r2
 8016f66:	6962      	ldr	r2, [r4, #20]
 8016f68:	f002 0201 	and.w	r2, r2, #1
 8016f6c:	4313      	orrs	r3, r2
 8016f6e:	69a2      	ldr	r2, [r4, #24]
 8016f70:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8016f74:	4313      	orrs	r3, r2
 8016f76:	69e2      	ldr	r2, [r4, #28]
 8016f78:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8016f7c:	4313      	orrs	r3, r2
 8016f7e:	6a22      	ldr	r2, [r4, #32]
 8016f80:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8016f84:	4313      	orrs	r3, r2
 8016f86:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8016f88:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8016f8c:	6821      	ldr	r1, [r4, #0]
 8016f8e:	4313      	orrs	r3, r2
 8016f90:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8016f92:	8b63      	ldrh	r3, [r4, #26]
 8016f94:	f003 0304 	and.w	r3, r3, #4
 8016f98:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8016f9a:	f002 0210 	and.w	r2, r2, #16
 8016f9e:	6821      	ldr	r1, [r4, #0]
 8016fa0:	4313      	orrs	r3, r2
 8016fa2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8016fa4:	6822      	ldr	r2, [r4, #0]
 8016fa6:	69d3      	ldr	r3, [r2, #28]
 8016fa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016fac:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8016fae:	2000      	movs	r0, #0
 8016fb0:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8016fb8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8016fba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f7fb f89a 	bl	80120f8 <HAL_SPI_MspInit>
 8016fc4:	e7b8      	b.n	8016f38 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8016fc6:	2001      	movs	r0, #1
}
 8016fc8:	4770      	bx	lr

08016fca <HAL_SPI_Transmit>:
{
 8016fca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016fce:	b083      	sub	sp, #12
 8016fd0:	4604      	mov	r4, r0
 8016fd2:	4689      	mov	r9, r1
 8016fd4:	4690      	mov	r8, r2
 8016fd6:	461d      	mov	r5, r3
  tickstart = HAL_GetTick();
 8016fd8:	f7fe fd30 	bl	8015a3c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8016fdc:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8016fe0:	b2f6      	uxtb	r6, r6
 8016fe2:	2e01      	cmp	r6, #1
 8016fe4:	f040 80cc 	bne.w	8017180 <HAL_SPI_Transmit+0x1b6>
 8016fe8:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8016fea:	f1b9 0f00 	cmp.w	r9, #0
 8016fee:	f000 80c8 	beq.w	8017182 <HAL_SPI_Transmit+0x1b8>
 8016ff2:	f1b8 0f00 	cmp.w	r8, #0
 8016ff6:	f000 80c4 	beq.w	8017182 <HAL_SPI_Transmit+0x1b8>
  __HAL_LOCK(hspi);
 8016ffa:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8016ffe:	2b01      	cmp	r3, #1
 8017000:	f000 80c3 	beq.w	801718a <HAL_SPI_Transmit+0x1c0>
 8017004:	2301      	movs	r3, #1
 8017006:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801700a:	2303      	movs	r3, #3
 801700c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017010:	2300      	movs	r3, #0
 8017012:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8017014:	f8c4 9030 	str.w	r9, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8017018:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 801701c:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8017020:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8017022:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8017024:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8017026:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8017028:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801702a:	68a3      	ldr	r3, [r4, #8]
 801702c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017030:	d01e      	beq.n	8017070 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017032:	6823      	ldr	r3, [r4, #0]
 8017034:	681a      	ldr	r2, [r3, #0]
 8017036:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801703a:	d103      	bne.n	8017044 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 801703c:	681a      	ldr	r2, [r3, #0]
 801703e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017042:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017044:	68e3      	ldr	r3, [r4, #12]
 8017046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801704a:	d01c      	beq.n	8017086 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801704c:	6863      	ldr	r3, [r4, #4]
 801704e:	b113      	cbz	r3, 8017056 <HAL_SPI_Transmit+0x8c>
 8017050:	f1b8 0f01 	cmp.w	r8, #1
 8017054:	d15f      	bne.n	8017116 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017056:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017058:	6823      	ldr	r3, [r4, #0]
 801705a:	7812      	ldrb	r2, [r2, #0]
 801705c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801705e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017060:	3301      	adds	r3, #1
 8017062:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017064:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017066:	b29b      	uxth	r3, r3
 8017068:	3b01      	subs	r3, #1
 801706a:	b29b      	uxth	r3, r3
 801706c:	86e3      	strh	r3, [r4, #54]	@ 0x36
 801706e:	e052      	b.n	8017116 <HAL_SPI_Transmit+0x14c>
    __HAL_SPI_DISABLE(hspi);
 8017070:	6822      	ldr	r2, [r4, #0]
 8017072:	6813      	ldr	r3, [r2, #0]
 8017074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017078:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 801707a:	6822      	ldr	r2, [r4, #0]
 801707c:	6813      	ldr	r3, [r2, #0]
 801707e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017082:	6013      	str	r3, [r2, #0]
 8017084:	e7d5      	b.n	8017032 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017086:	6863      	ldr	r3, [r4, #4]
 8017088:	b113      	cbz	r3, 8017090 <HAL_SPI_Transmit+0xc6>
 801708a:	f1b8 0f01 	cmp.w	r8, #1
 801708e:	d115      	bne.n	80170bc <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8017090:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017092:	6823      	ldr	r3, [r4, #0]
 8017094:	8812      	ldrh	r2, [r2, #0]
 8017096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017098:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801709a:	3302      	adds	r3, #2
 801709c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 801709e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	3b01      	subs	r3, #1
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80170a8:	e008      	b.n	80170bc <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80170aa:	f7fe fcc7 	bl	8015a3c <HAL_GetTick>
 80170ae:	1bc0      	subs	r0, r0, r7
 80170b0:	42a8      	cmp	r0, r5
 80170b2:	d302      	bcc.n	80170ba <HAL_SPI_Transmit+0xf0>
 80170b4:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80170b8:	d115      	bne.n	80170e6 <HAL_SPI_Transmit+0x11c>
 80170ba:	b1a5      	cbz	r5, 80170e6 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 80170bc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80170be:	b29b      	uxth	r3, r3
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d042      	beq.n	801714a <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80170c4:	6823      	ldr	r3, [r4, #0]
 80170c6:	689a      	ldr	r2, [r3, #8]
 80170c8:	f012 0f02 	tst.w	r2, #2
 80170cc:	d0ed      	beq.n	80170aa <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80170ce:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80170d0:	8812      	ldrh	r2, [r2, #0]
 80170d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80170d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80170d6:	3302      	adds	r3, #2
 80170d8:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80170da:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80170dc:	b29b      	uxth	r3, r3
 80170de:	3b01      	subs	r3, #1
 80170e0:	b29b      	uxth	r3, r3
 80170e2:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80170e4:	e7ea      	b.n	80170bc <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 80170e6:	2301      	movs	r3, #1
 80170e8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80170ec:	2300      	movs	r3, #0
 80170ee:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80170f2:	2603      	movs	r6, #3
 80170f4:	e045      	b.n	8017182 <HAL_SPI_Transmit+0x1b8>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80170f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80170f8:	7812      	ldrb	r2, [r2, #0]
 80170fa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80170fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80170fe:	3301      	adds	r3, #1
 8017100:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017102:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 8017106:	fa1f fc8c 	uxth.w	ip, ip
 801710a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801710e:	fa1f fc8c 	uxth.w	ip, ip
 8017112:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8017116:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017118:	b29b      	uxth	r3, r3
 801711a:	b1b3      	cbz	r3, 801714a <HAL_SPI_Transmit+0x180>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801711c:	6823      	ldr	r3, [r4, #0]
 801711e:	689a      	ldr	r2, [r3, #8]
 8017120:	f012 0f02 	tst.w	r2, #2
 8017124:	d1e7      	bne.n	80170f6 <HAL_SPI_Transmit+0x12c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017126:	f7fe fc89 	bl	8015a3c <HAL_GetTick>
 801712a:	1bc0      	subs	r0, r0, r7
 801712c:	42a8      	cmp	r0, r5
 801712e:	d302      	bcc.n	8017136 <HAL_SPI_Transmit+0x16c>
 8017130:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017134:	d101      	bne.n	801713a <HAL_SPI_Transmit+0x170>
 8017136:	2d00      	cmp	r5, #0
 8017138:	d1ed      	bne.n	8017116 <HAL_SPI_Transmit+0x14c>
          hspi->State = HAL_SPI_STATE_READY;
 801713a:	2301      	movs	r3, #1
 801713c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8017140:	2300      	movs	r3, #0
 8017142:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017146:	2603      	movs	r6, #3
 8017148:	e01b      	b.n	8017182 <HAL_SPI_Transmit+0x1b8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801714a:	463a      	mov	r2, r7
 801714c:	4629      	mov	r1, r5
 801714e:	4620      	mov	r0, r4
 8017150:	f7ff fe56 	bl	8016e00 <SPI_EndRxTxTransaction>
 8017154:	b108      	cbz	r0, 801715a <HAL_SPI_Transmit+0x190>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017156:	2320      	movs	r3, #32
 8017158:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801715a:	68a3      	ldr	r3, [r4, #8]
 801715c:	b933      	cbnz	r3, 801716c <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801715e:	9301      	str	r3, [sp, #4]
 8017160:	6823      	ldr	r3, [r4, #0]
 8017162:	68da      	ldr	r2, [r3, #12]
 8017164:	9201      	str	r2, [sp, #4]
 8017166:	689b      	ldr	r3, [r3, #8]
 8017168:	9301      	str	r3, [sp, #4]
 801716a:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 801716c:	2301      	movs	r3, #1
 801716e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8017172:	2300      	movs	r3, #0
 8017174:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017178:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801717a:	b913      	cbnz	r3, 8017182 <HAL_SPI_Transmit+0x1b8>
    return HAL_OK;
 801717c:	2600      	movs	r6, #0
 801717e:	e000      	b.n	8017182 <HAL_SPI_Transmit+0x1b8>
    return HAL_BUSY;
 8017180:	2602      	movs	r6, #2
}
 8017182:	4630      	mov	r0, r6
 8017184:	b003      	add	sp, #12
 8017186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 801718a:	2602      	movs	r6, #2
 801718c:	e7f9      	b.n	8017182 <HAL_SPI_Transmit+0x1b8>

0801718e <HAL_SPI_TransmitReceive>:
{
 801718e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017192:	b083      	sub	sp, #12
 8017194:	4604      	mov	r4, r0
 8017196:	4688      	mov	r8, r1
 8017198:	4691      	mov	r9, r2
 801719a:	461f      	mov	r7, r3
 801719c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 801719e:	f7fe fc4d 	bl	8015a3c <HAL_GetTick>
 80171a2:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80171a4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80171a8:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80171aa:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80171ac:	2b01      	cmp	r3, #1
 80171ae:	d00a      	beq.n	80171c6 <HAL_SPI_TransmitReceive+0x38>
 80171b0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80171b4:	f040 8105 	bne.w	80173c2 <HAL_SPI_TransmitReceive+0x234>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80171b8:	68a2      	ldr	r2, [r4, #8]
 80171ba:	2a00      	cmp	r2, #0
 80171bc:	f040 8105 	bne.w	80173ca <HAL_SPI_TransmitReceive+0x23c>
 80171c0:	2b04      	cmp	r3, #4
 80171c2:	f040 8104 	bne.w	80173ce <HAL_SPI_TransmitReceive+0x240>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80171c6:	f1b8 0f00 	cmp.w	r8, #0
 80171ca:	f000 8102 	beq.w	80173d2 <HAL_SPI_TransmitReceive+0x244>
 80171ce:	f1b9 0f00 	cmp.w	r9, #0
 80171d2:	f000 8100 	beq.w	80173d6 <HAL_SPI_TransmitReceive+0x248>
 80171d6:	2f00      	cmp	r7, #0
 80171d8:	f000 80ff 	beq.w	80173da <HAL_SPI_TransmitReceive+0x24c>
  __HAL_LOCK(hspi);
 80171dc:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80171e0:	2b01      	cmp	r3, #1
 80171e2:	f000 80fc 	beq.w	80173de <HAL_SPI_TransmitReceive+0x250>
 80171e6:	2301      	movs	r3, #1
 80171e8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80171ec:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80171f0:	b2db      	uxtb	r3, r3
 80171f2:	2b04      	cmp	r3, #4
 80171f4:	d002      	beq.n	80171fc <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80171f6:	2305      	movs	r3, #5
 80171f8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80171fc:	2300      	movs	r3, #0
 80171fe:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8017200:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8017204:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8017206:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8017208:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 801720c:	86e7      	strh	r7, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 801720e:	86a7      	strh	r7, [r4, #52]	@ 0x34
  hspi->RxISR       = NULL;
 8017210:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8017212:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017214:	6823      	ldr	r3, [r4, #0]
 8017216:	681a      	ldr	r2, [r3, #0]
 8017218:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801721c:	d103      	bne.n	8017226 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 801721e:	681a      	ldr	r2, [r3, #0]
 8017220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017224:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8017226:	68e3      	ldr	r3, [r4, #12]
 8017228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801722c:	d011      	beq.n	8017252 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801722e:	6863      	ldr	r3, [r4, #4]
 8017230:	b10b      	cbz	r3, 8017236 <HAL_SPI_TransmitReceive+0xa8>
 8017232:	2f01      	cmp	r7, #1
 8017234:	d10b      	bne.n	801724e <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8017236:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017238:	6823      	ldr	r3, [r4, #0]
 801723a:	7812      	ldrb	r2, [r2, #0]
 801723c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801723e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017240:	3301      	adds	r3, #1
 8017242:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017244:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017246:	b29b      	uxth	r3, r3
 8017248:	3b01      	subs	r3, #1
 801724a:	b29b      	uxth	r3, r3
 801724c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 801724e:	2701      	movs	r7, #1
 8017250:	e071      	b.n	8017336 <HAL_SPI_TransmitReceive+0x1a8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017252:	6863      	ldr	r3, [r4, #4]
 8017254:	b10b      	cbz	r3, 801725a <HAL_SPI_TransmitReceive+0xcc>
 8017256:	2f01      	cmp	r7, #1
 8017258:	d10b      	bne.n	8017272 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 801725a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801725c:	6823      	ldr	r3, [r4, #0]
 801725e:	8812      	ldrh	r2, [r2, #0]
 8017260:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017262:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017264:	3302      	adds	r3, #2
 8017266:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8017268:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801726a:	b29b      	uxth	r3, r3
 801726c:	3b01      	subs	r3, #1
 801726e:	b29b      	uxth	r3, r3
 8017270:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8017272:	2701      	movs	r7, #1
 8017274:	e01b      	b.n	80172ae <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017276:	6823      	ldr	r3, [r4, #0]
 8017278:	689a      	ldr	r2, [r3, #8]
 801727a:	f012 0f01 	tst.w	r2, #1
 801727e:	d00e      	beq.n	801729e <HAL_SPI_TransmitReceive+0x110>
 8017280:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017282:	b292      	uxth	r2, r2
 8017284:	b15a      	cbz	r2, 801729e <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017286:	68da      	ldr	r2, [r3, #12]
 8017288:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801728a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801728c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801728e:	3302      	adds	r3, #2
 8017290:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017292:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8017294:	b29b      	uxth	r3, r3
 8017296:	3b01      	subs	r3, #1
 8017298:	b29b      	uxth	r3, r3
 801729a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 801729c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801729e:	f7fe fbcd 	bl	8015a3c <HAL_GetTick>
 80172a2:	1b80      	subs	r0, r0, r6
 80172a4:	42a8      	cmp	r0, r5
 80172a6:	d302      	bcc.n	80172ae <HAL_SPI_TransmitReceive+0x120>
 80172a8:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80172ac:	d11e      	bne.n	80172ec <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80172ae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	b91b      	cbnz	r3, 80172bc <HAL_SPI_TransmitReceive+0x12e>
 80172b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80172b6:	b29b      	uxth	r3, r3
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d062      	beq.n	8017382 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80172bc:	6823      	ldr	r3, [r4, #0]
 80172be:	689a      	ldr	r2, [r3, #8]
 80172c0:	f012 0f02 	tst.w	r2, #2
 80172c4:	d0d7      	beq.n	8017276 <HAL_SPI_TransmitReceive+0xe8>
 80172c6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80172c8:	b292      	uxth	r2, r2
 80172ca:	2a00      	cmp	r2, #0
 80172cc:	d0d3      	beq.n	8017276 <HAL_SPI_TransmitReceive+0xe8>
 80172ce:	2f00      	cmp	r7, #0
 80172d0:	d0d1      	beq.n	8017276 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80172d2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80172d4:	8812      	ldrh	r2, [r2, #0]
 80172d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80172d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80172da:	3302      	adds	r3, #2
 80172dc:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80172de:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80172e0:	b29b      	uxth	r3, r3
 80172e2:	3b01      	subs	r3, #1
 80172e4:	b29b      	uxth	r3, r3
 80172e6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80172e8:	2700      	movs	r7, #0
 80172ea:	e7c4      	b.n	8017276 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80172ec:	2301      	movs	r3, #1
 80172ee:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80172f2:	2300      	movs	r3, #0
 80172f4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 80172f8:	2003      	movs	r0, #3
 80172fa:	e063      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80172fc:	6823      	ldr	r3, [r4, #0]
 80172fe:	689a      	ldr	r2, [r3, #8]
 8017300:	f012 0f01 	tst.w	r2, #1
 8017304:	d00e      	beq.n	8017324 <HAL_SPI_TransmitReceive+0x196>
 8017306:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017308:	b292      	uxth	r2, r2
 801730a:	b15a      	cbz	r2, 8017324 <HAL_SPI_TransmitReceive+0x196>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801730c:	68da      	ldr	r2, [r3, #12]
 801730e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017310:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8017312:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8017314:	3301      	adds	r3, #1
 8017316:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017318:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801731a:	b29b      	uxth	r3, r3
 801731c:	3b01      	subs	r3, #1
 801731e:	b29b      	uxth	r3, r3
 8017320:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8017322:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017324:	f7fe fb8a 	bl	8015a3c <HAL_GetTick>
 8017328:	1b83      	subs	r3, r0, r6
 801732a:	42ab      	cmp	r3, r5
 801732c:	d302      	bcc.n	8017334 <HAL_SPI_TransmitReceive+0x1a6>
 801732e:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8017332:	d11e      	bne.n	8017372 <HAL_SPI_TransmitReceive+0x1e4>
 8017334:	b1ed      	cbz	r5, 8017372 <HAL_SPI_TransmitReceive+0x1e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017336:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017338:	b29b      	uxth	r3, r3
 801733a:	b913      	cbnz	r3, 8017342 <HAL_SPI_TransmitReceive+0x1b4>
 801733c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 801733e:	b29b      	uxth	r3, r3
 8017340:	b1fb      	cbz	r3, 8017382 <HAL_SPI_TransmitReceive+0x1f4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017342:	6823      	ldr	r3, [r4, #0]
 8017344:	689a      	ldr	r2, [r3, #8]
 8017346:	f012 0f02 	tst.w	r2, #2
 801734a:	d0d7      	beq.n	80172fc <HAL_SPI_TransmitReceive+0x16e>
 801734c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801734e:	b292      	uxth	r2, r2
 8017350:	2a00      	cmp	r2, #0
 8017352:	d0d3      	beq.n	80172fc <HAL_SPI_TransmitReceive+0x16e>
 8017354:	2f00      	cmp	r7, #0
 8017356:	d0d1      	beq.n	80172fc <HAL_SPI_TransmitReceive+0x16e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8017358:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801735a:	7812      	ldrb	r2, [r2, #0]
 801735c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 801735e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017360:	3301      	adds	r3, #1
 8017362:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8017364:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8017366:	b29b      	uxth	r3, r3
 8017368:	3b01      	subs	r3, #1
 801736a:	b29b      	uxth	r3, r3
 801736c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 801736e:	2700      	movs	r7, #0
 8017370:	e7c4      	b.n	80172fc <HAL_SPI_TransmitReceive+0x16e>
        hspi->State = HAL_SPI_STATE_READY;
 8017372:	2301      	movs	r3, #1
 8017374:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8017378:	2300      	movs	r3, #0
 801737a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_TIMEOUT;
 801737e:	2003      	movs	r0, #3
 8017380:	e020      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017382:	4632      	mov	r2, r6
 8017384:	4629      	mov	r1, r5
 8017386:	4620      	mov	r0, r4
 8017388:	f7ff fd3a 	bl	8016e00 <SPI_EndRxTxTransaction>
 801738c:	b990      	cbnz	r0, 80173b4 <HAL_SPI_TransmitReceive+0x226>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801738e:	68a3      	ldr	r3, [r4, #8]
 8017390:	b933      	cbnz	r3, 80173a0 <HAL_SPI_TransmitReceive+0x212>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8017392:	9301      	str	r3, [sp, #4]
 8017394:	6823      	ldr	r3, [r4, #0]
 8017396:	68da      	ldr	r2, [r3, #12]
 8017398:	9201      	str	r2, [sp, #4]
 801739a:	689b      	ldr	r3, [r3, #8]
 801739c:	9301      	str	r3, [sp, #4]
 801739e:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80173a0:	2301      	movs	r3, #1
 80173a2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80173a6:	2300      	movs	r3, #0
 80173a8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80173ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80173ae:	b14b      	cbz	r3, 80173c4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80173b0:	2001      	movs	r0, #1
 80173b2:	e007      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80173b4:	2320      	movs	r3, #32
 80173b6:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80173b8:	2300      	movs	r3, #0
 80173ba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80173be:	2001      	movs	r0, #1
 80173c0:	e000      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_BUSY;
 80173c2:	2002      	movs	r0, #2
}
 80173c4:	b003      	add	sp, #12
 80173c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80173ca:	2002      	movs	r0, #2
 80173cc:	e7fa      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
 80173ce:	2002      	movs	r0, #2
 80173d0:	e7f8      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
    return HAL_ERROR;
 80173d2:	2001      	movs	r0, #1
 80173d4:	e7f6      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
 80173d6:	2001      	movs	r0, #1
 80173d8:	e7f4      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
 80173da:	2001      	movs	r0, #1
 80173dc:	e7f2      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>
  __HAL_LOCK(hspi);
 80173de:	2002      	movs	r0, #2
 80173e0:	e7f0      	b.n	80173c4 <HAL_SPI_TransmitReceive+0x236>

080173e2 <HAL_SPI_Receive>:
{
 80173e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173e6:	b083      	sub	sp, #12
  if (hspi->State != HAL_SPI_STATE_READY)
 80173e8:	f890 6051 	ldrb.w	r6, [r0, #81]	@ 0x51
 80173ec:	b2f6      	uxtb	r6, r6
 80173ee:	2e01      	cmp	r6, #1
 80173f0:	f040 80b4 	bne.w	801755c <HAL_SPI_Receive+0x17a>
 80173f4:	4604      	mov	r4, r0
 80173f6:	4689      	mov	r9, r1
 80173f8:	4690      	mov	r8, r2
 80173fa:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80173fc:	6843      	ldr	r3, [r0, #4]
 80173fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017402:	d101      	bne.n	8017408 <HAL_SPI_Receive+0x26>
 8017404:	6883      	ldr	r3, [r0, #8]
 8017406:	b393      	cbz	r3, 801746e <HAL_SPI_Receive+0x8c>
  tickstart = HAL_GetTick();
 8017408:	f7fe fb18 	bl	8015a3c <HAL_GetTick>
 801740c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 801740e:	f1b9 0f00 	cmp.w	r9, #0
 8017412:	f000 80a4 	beq.w	801755e <HAL_SPI_Receive+0x17c>
 8017416:	f1b8 0f00 	cmp.w	r8, #0
 801741a:	f000 80a0 	beq.w	801755e <HAL_SPI_Receive+0x17c>
  __HAL_LOCK(hspi);
 801741e:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8017422:	2b01      	cmp	r3, #1
 8017424:	f000 809f 	beq.w	8017566 <HAL_SPI_Receive+0x184>
 8017428:	2301      	movs	r3, #1
 801742a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801742e:	2304      	movs	r3, #4
 8017430:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8017434:	2300      	movs	r3, #0
 8017436:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8017438:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 801743c:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8017440:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8017444:	6323      	str	r3, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8017446:	86a3      	strh	r3, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8017448:	86e3      	strh	r3, [r4, #54]	@ 0x36
  hspi->RxISR       = NULL;
 801744a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801744c:	6463      	str	r3, [r4, #68]	@ 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801744e:	68a3      	ldr	r3, [r4, #8]
 8017450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017454:	d015      	beq.n	8017482 <HAL_SPI_Receive+0xa0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017456:	6823      	ldr	r3, [r4, #0]
 8017458:	681a      	ldr	r2, [r3, #0]
 801745a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 801745e:	d103      	bne.n	8017468 <HAL_SPI_Receive+0x86>
    __HAL_SPI_ENABLE(hspi);
 8017460:	681a      	ldr	r2, [r3, #0]
 8017462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8017466:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8017468:	68e3      	ldr	r3, [r4, #12]
 801746a:	b1f3      	cbz	r3, 80174aa <HAL_SPI_Receive+0xc8>
 801746c:	e043      	b.n	80174f6 <HAL_SPI_Receive+0x114>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801746e:	2304      	movs	r3, #4
 8017470:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8017474:	9500      	str	r5, [sp, #0]
 8017476:	4613      	mov	r3, r2
 8017478:	460a      	mov	r2, r1
 801747a:	f7ff fe88 	bl	801718e <HAL_SPI_TransmitReceive>
 801747e:	4606      	mov	r6, r0
 8017480:	e06d      	b.n	801755e <HAL_SPI_Receive+0x17c>
    __HAL_SPI_DISABLE(hspi);
 8017482:	6822      	ldr	r2, [r4, #0]
 8017484:	6813      	ldr	r3, [r2, #0]
 8017486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801748a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 801748c:	6822      	ldr	r2, [r4, #0]
 801748e:	6813      	ldr	r3, [r2, #0]
 8017490:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017494:	6013      	str	r3, [r2, #0]
 8017496:	e7de      	b.n	8017456 <HAL_SPI_Receive+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8017498:	f7fe fad0 	bl	8015a3c <HAL_GetTick>
 801749c:	1bc0      	subs	r0, r0, r7
 801749e:	42a8      	cmp	r0, r5
 80174a0:	d302      	bcc.n	80174a8 <HAL_SPI_Receive+0xc6>
 80174a2:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80174a6:	d115      	bne.n	80174d4 <HAL_SPI_Receive+0xf2>
 80174a8:	b1a5      	cbz	r5, 80174d4 <HAL_SPI_Receive+0xf2>
    while (hspi->RxXferCount > 0U)
 80174aa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d042      	beq.n	8017538 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80174b2:	6823      	ldr	r3, [r4, #0]
 80174b4:	689a      	ldr	r2, [r3, #8]
 80174b6:	f012 0f01 	tst.w	r2, #1
 80174ba:	d0ed      	beq.n	8017498 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80174bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80174be:	7b1b      	ldrb	r3, [r3, #12]
 80174c0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80174c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80174c4:	3301      	adds	r3, #1
 80174c6:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80174c8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80174ca:	b29b      	uxth	r3, r3
 80174cc:	3b01      	subs	r3, #1
 80174ce:	b29b      	uxth	r3, r3
 80174d0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80174d2:	e7ea      	b.n	80174aa <HAL_SPI_Receive+0xc8>
          hspi->State = HAL_SPI_STATE_READY;
 80174d4:	2301      	movs	r3, #1
 80174d6:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80174da:	2300      	movs	r3, #0
 80174dc:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 80174e0:	2603      	movs	r6, #3
 80174e2:	e03c      	b.n	801755e <HAL_SPI_Receive+0x17c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80174e4:	f7fe faaa 	bl	8015a3c <HAL_GetTick>
 80174e8:	1bc0      	subs	r0, r0, r7
 80174ea:	42a8      	cmp	r0, r5
 80174ec:	d302      	bcc.n	80174f4 <HAL_SPI_Receive+0x112>
 80174ee:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80174f2:	d119      	bne.n	8017528 <HAL_SPI_Receive+0x146>
 80174f4:	b1c5      	cbz	r5, 8017528 <HAL_SPI_Receive+0x146>
    while (hspi->RxXferCount > 0U)
 80174f6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80174f8:	b29b      	uxth	r3, r3
 80174fa:	b1eb      	cbz	r3, 8017538 <HAL_SPI_Receive+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80174fc:	6823      	ldr	r3, [r4, #0]
 80174fe:	689a      	ldr	r2, [r3, #8]
 8017500:	f012 0f01 	tst.w	r2, #1
 8017504:	d0ee      	beq.n	80174e4 <HAL_SPI_Receive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8017506:	68da      	ldr	r2, [r3, #12]
 8017508:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801750a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801750c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801750e:	3302      	adds	r3, #2
 8017510:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8017512:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8017516:	fa1f fc8c 	uxth.w	ip, ip
 801751a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801751e:	fa1f fc8c 	uxth.w	ip, ip
 8017522:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8017526:	e7e6      	b.n	80174f6 <HAL_SPI_Receive+0x114>
          hspi->State = HAL_SPI_STATE_READY;
 8017528:	2301      	movs	r3, #1
 801752a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 801752e:	2300      	movs	r3, #0
 8017530:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_TIMEOUT;
 8017534:	2603      	movs	r6, #3
 8017536:	e012      	b.n	801755e <HAL_SPI_Receive+0x17c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017538:	463a      	mov	r2, r7
 801753a:	4629      	mov	r1, r5
 801753c:	4620      	mov	r0, r4
 801753e:	f7ff fc9f 	bl	8016e80 <SPI_EndRxTransaction>
 8017542:	b108      	cbz	r0, 8017548 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8017544:	2320      	movs	r3, #32
 8017546:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8017548:	2301      	movs	r3, #1
 801754a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 801754e:	2300      	movs	r3, #0
 8017550:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017554:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017556:	b913      	cbnz	r3, 801755e <HAL_SPI_Receive+0x17c>
    return HAL_OK;
 8017558:	2600      	movs	r6, #0
 801755a:	e000      	b.n	801755e <HAL_SPI_Receive+0x17c>
    return HAL_BUSY;
 801755c:	2602      	movs	r6, #2
}
 801755e:	4630      	mov	r0, r6
 8017560:	b003      	add	sp, #12
 8017562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8017566:	2602      	movs	r6, #2
 8017568:	e7f9      	b.n	801755e <HAL_SPI_Receive+0x17c>

0801756a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801756a:	4770      	bx	lr

0801756c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801756c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017570:	b2db      	uxtb	r3, r3
 8017572:	2b01      	cmp	r3, #1
 8017574:	d12f      	bne.n	80175d6 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017576:	2302      	movs	r3, #2
 8017578:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801757c:	6802      	ldr	r2, [r0, #0]
 801757e:	68d3      	ldr	r3, [r2, #12]
 8017580:	f043 0301 	orr.w	r3, r3, #1
 8017584:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017586:	6803      	ldr	r3, [r0, #0]
 8017588:	4a15      	ldr	r2, [pc, #84]	@ (80175e0 <HAL_TIM_Base_Start_IT+0x74>)
 801758a:	4293      	cmp	r3, r2
 801758c:	d018      	beq.n	80175c0 <HAL_TIM_Base_Start_IT+0x54>
 801758e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017592:	d015      	beq.n	80175c0 <HAL_TIM_Base_Start_IT+0x54>
 8017594:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8017598:	4293      	cmp	r3, r2
 801759a:	d011      	beq.n	80175c0 <HAL_TIM_Base_Start_IT+0x54>
 801759c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80175a0:	4293      	cmp	r3, r2
 80175a2:	d00d      	beq.n	80175c0 <HAL_TIM_Base_Start_IT+0x54>
 80175a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80175a8:	4293      	cmp	r3, r2
 80175aa:	d009      	beq.n	80175c0 <HAL_TIM_Base_Start_IT+0x54>
 80175ac:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80175b0:	4293      	cmp	r3, r2
 80175b2:	d005      	beq.n	80175c0 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80175b4:	681a      	ldr	r2, [r3, #0]
 80175b6:	f042 0201 	orr.w	r2, r2, #1
 80175ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80175bc:	2000      	movs	r0, #0
 80175be:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80175c0:	689a      	ldr	r2, [r3, #8]
 80175c2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80175c6:	2a06      	cmp	r2, #6
 80175c8:	d007      	beq.n	80175da <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 80175ca:	681a      	ldr	r2, [r3, #0]
 80175cc:	f042 0201 	orr.w	r2, r2, #1
 80175d0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80175d2:	2000      	movs	r0, #0
 80175d4:	4770      	bx	lr
    return HAL_ERROR;
 80175d6:	2001      	movs	r0, #1
 80175d8:	4770      	bx	lr
  return HAL_OK;
 80175da:	2000      	movs	r0, #0
}
 80175dc:	4770      	bx	lr
 80175de:	bf00      	nop
 80175e0:	40010000 	.word	0x40010000

080175e4 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80175e4:	4770      	bx	lr

080175e6 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80175e6:	4770      	bx	lr

080175e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80175e8:	4770      	bx	lr

080175ea <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80175ea:	4770      	bx	lr

080175ec <HAL_TIM_IRQHandler>:
{
 80175ec:	b570      	push	{r4, r5, r6, lr}
 80175ee:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80175f0:	6803      	ldr	r3, [r0, #0]
 80175f2:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80175f4:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80175f6:	f015 0f02 	tst.w	r5, #2
 80175fa:	d010      	beq.n	801761e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80175fc:	f016 0f02 	tst.w	r6, #2
 8017600:	d00d      	beq.n	801761e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017602:	f06f 0202 	mvn.w	r2, #2
 8017606:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017608:	2301      	movs	r3, #1
 801760a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801760c:	6803      	ldr	r3, [r0, #0]
 801760e:	699b      	ldr	r3, [r3, #24]
 8017610:	f013 0f03 	tst.w	r3, #3
 8017614:	d05e      	beq.n	80176d4 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8017616:	f7ff ffe6 	bl	80175e6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801761a:	2300      	movs	r3, #0
 801761c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801761e:	f015 0f04 	tst.w	r5, #4
 8017622:	d012      	beq.n	801764a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017624:	f016 0f04 	tst.w	r6, #4
 8017628:	d00f      	beq.n	801764a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801762a:	6823      	ldr	r3, [r4, #0]
 801762c:	f06f 0204 	mvn.w	r2, #4
 8017630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017632:	2302      	movs	r3, #2
 8017634:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017636:	6823      	ldr	r3, [r4, #0]
 8017638:	699b      	ldr	r3, [r3, #24]
 801763a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 801763e:	d04f      	beq.n	80176e0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8017640:	4620      	mov	r0, r4
 8017642:	f7ff ffd0 	bl	80175e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017646:	2300      	movs	r3, #0
 8017648:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801764a:	f015 0f08 	tst.w	r5, #8
 801764e:	d012      	beq.n	8017676 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017650:	f016 0f08 	tst.w	r6, #8
 8017654:	d00f      	beq.n	8017676 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017656:	6823      	ldr	r3, [r4, #0]
 8017658:	f06f 0208 	mvn.w	r2, #8
 801765c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801765e:	2304      	movs	r3, #4
 8017660:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	69db      	ldr	r3, [r3, #28]
 8017666:	f013 0f03 	tst.w	r3, #3
 801766a:	d040      	beq.n	80176ee <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 801766c:	4620      	mov	r0, r4
 801766e:	f7ff ffba 	bl	80175e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017672:	2300      	movs	r3, #0
 8017674:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017676:	f015 0f10 	tst.w	r5, #16
 801767a:	d012      	beq.n	80176a2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801767c:	f016 0f10 	tst.w	r6, #16
 8017680:	d00f      	beq.n	80176a2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8017682:	6823      	ldr	r3, [r4, #0]
 8017684:	f06f 0210 	mvn.w	r2, #16
 8017688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801768a:	2308      	movs	r3, #8
 801768c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801768e:	6823      	ldr	r3, [r4, #0]
 8017690:	69db      	ldr	r3, [r3, #28]
 8017692:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8017696:	d031      	beq.n	80176fc <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8017698:	4620      	mov	r0, r4
 801769a:	f7ff ffa4 	bl	80175e6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801769e:	2300      	movs	r3, #0
 80176a0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80176a2:	f015 0f01 	tst.w	r5, #1
 80176a6:	d002      	beq.n	80176ae <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80176a8:	f016 0f01 	tst.w	r6, #1
 80176ac:	d12d      	bne.n	801770a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80176ae:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80176b2:	d002      	beq.n	80176ba <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80176b4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80176b8:	d12f      	bne.n	801771a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80176ba:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80176be:	d002      	beq.n	80176c6 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80176c0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80176c4:	d131      	bne.n	801772a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80176c6:	f015 0f20 	tst.w	r5, #32
 80176ca:	d002      	beq.n	80176d2 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80176cc:	f016 0f20 	tst.w	r6, #32
 80176d0:	d133      	bne.n	801773a <HAL_TIM_IRQHandler+0x14e>
}
 80176d2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80176d4:	f7ff ff86 	bl	80175e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80176d8:	4620      	mov	r0, r4
 80176da:	f7ff ff85 	bl	80175e8 <HAL_TIM_PWM_PulseFinishedCallback>
 80176de:	e79c      	b.n	801761a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80176e0:	4620      	mov	r0, r4
 80176e2:	f7ff ff7f 	bl	80175e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80176e6:	4620      	mov	r0, r4
 80176e8:	f7ff ff7e 	bl	80175e8 <HAL_TIM_PWM_PulseFinishedCallback>
 80176ec:	e7ab      	b.n	8017646 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80176ee:	4620      	mov	r0, r4
 80176f0:	f7ff ff78 	bl	80175e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80176f4:	4620      	mov	r0, r4
 80176f6:	f7ff ff77 	bl	80175e8 <HAL_TIM_PWM_PulseFinishedCallback>
 80176fa:	e7ba      	b.n	8017672 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80176fc:	4620      	mov	r0, r4
 80176fe:	f7ff ff71 	bl	80175e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017702:	4620      	mov	r0, r4
 8017704:	f7ff ff70 	bl	80175e8 <HAL_TIM_PWM_PulseFinishedCallback>
 8017708:	e7c9      	b.n	801769e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801770a:	6823      	ldr	r3, [r4, #0]
 801770c:	f06f 0201 	mvn.w	r2, #1
 8017710:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8017712:	4620      	mov	r0, r4
 8017714:	f7fa fbea 	bl	8011eec <HAL_TIM_PeriodElapsedCallback>
 8017718:	e7c9      	b.n	80176ae <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801771a:	6823      	ldr	r3, [r4, #0]
 801771c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8017720:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8017722:	4620      	mov	r0, r4
 8017724:	f000 f895 	bl	8017852 <HAL_TIMEx_BreakCallback>
 8017728:	e7c7      	b.n	80176ba <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801772a:	6823      	ldr	r3, [r4, #0]
 801772c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017730:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8017732:	4620      	mov	r0, r4
 8017734:	f7ff ff59 	bl	80175ea <HAL_TIM_TriggerCallback>
 8017738:	e7c5      	b.n	80176c6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801773a:	6823      	ldr	r3, [r4, #0]
 801773c:	f06f 0220 	mvn.w	r2, #32
 8017740:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8017742:	4620      	mov	r0, r4
 8017744:	f000 f884 	bl	8017850 <HAL_TIMEx_CommutCallback>
}
 8017748:	e7c3      	b.n	80176d2 <HAL_TIM_IRQHandler+0xe6>
	...

0801774c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801774c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801774e:	4a29      	ldr	r2, [pc, #164]	@ (80177f4 <TIM_Base_SetConfig+0xa8>)
 8017750:	4290      	cmp	r0, r2
 8017752:	d00e      	beq.n	8017772 <TIM_Base_SetConfig+0x26>
 8017754:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017758:	d00b      	beq.n	8017772 <TIM_Base_SetConfig+0x26>
 801775a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801775e:	4290      	cmp	r0, r2
 8017760:	d007      	beq.n	8017772 <TIM_Base_SetConfig+0x26>
 8017762:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017766:	4290      	cmp	r0, r2
 8017768:	d003      	beq.n	8017772 <TIM_Base_SetConfig+0x26>
 801776a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801776e:	4290      	cmp	r0, r2
 8017770:	d103      	bne.n	801777a <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8017776:	684a      	ldr	r2, [r1, #4]
 8017778:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801777a:	4a1e      	ldr	r2, [pc, #120]	@ (80177f4 <TIM_Base_SetConfig+0xa8>)
 801777c:	4290      	cmp	r0, r2
 801777e:	d01a      	beq.n	80177b6 <TIM_Base_SetConfig+0x6a>
 8017780:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8017784:	d017      	beq.n	80177b6 <TIM_Base_SetConfig+0x6a>
 8017786:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 801778a:	4290      	cmp	r0, r2
 801778c:	d013      	beq.n	80177b6 <TIM_Base_SetConfig+0x6a>
 801778e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8017792:	4290      	cmp	r0, r2
 8017794:	d00f      	beq.n	80177b6 <TIM_Base_SetConfig+0x6a>
 8017796:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801779a:	4290      	cmp	r0, r2
 801779c:	d00b      	beq.n	80177b6 <TIM_Base_SetConfig+0x6a>
 801779e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80177a2:	4290      	cmp	r0, r2
 80177a4:	d007      	beq.n	80177b6 <TIM_Base_SetConfig+0x6a>
 80177a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80177aa:	4290      	cmp	r0, r2
 80177ac:	d003      	beq.n	80177b6 <TIM_Base_SetConfig+0x6a>
 80177ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80177b2:	4290      	cmp	r0, r2
 80177b4:	d103      	bne.n	80177be <TIM_Base_SetConfig+0x72>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80177b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80177ba:	68ca      	ldr	r2, [r1, #12]
 80177bc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80177be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80177c2:	694a      	ldr	r2, [r1, #20]
 80177c4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80177c6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80177c8:	688b      	ldr	r3, [r1, #8]
 80177ca:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80177cc:	680b      	ldr	r3, [r1, #0]
 80177ce:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80177d0:	4b08      	ldr	r3, [pc, #32]	@ (80177f4 <TIM_Base_SetConfig+0xa8>)
 80177d2:	4298      	cmp	r0, r3
 80177d4:	d00a      	beq.n	80177ec <TIM_Base_SetConfig+0xa0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80177d6:	2301      	movs	r3, #1
 80177d8:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80177da:	6903      	ldr	r3, [r0, #16]
 80177dc:	f013 0f01 	tst.w	r3, #1
 80177e0:	d003      	beq.n	80177ea <TIM_Base_SetConfig+0x9e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80177e2:	6903      	ldr	r3, [r0, #16]
 80177e4:	f023 0301 	bic.w	r3, r3, #1
 80177e8:	6103      	str	r3, [r0, #16]
  }
}
 80177ea:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80177ec:	690b      	ldr	r3, [r1, #16]
 80177ee:	6303      	str	r3, [r0, #48]	@ 0x30
 80177f0:	e7f1      	b.n	80177d6 <TIM_Base_SetConfig+0x8a>
 80177f2:	bf00      	nop
 80177f4:	40010000 	.word	0x40010000

080177f8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80177f8:	b340      	cbz	r0, 801784c <HAL_TIM_Base_Init+0x54>
{
 80177fa:	b510      	push	{r4, lr}
 80177fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80177fe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8017802:	b1f3      	cbz	r3, 8017842 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8017804:	2302      	movs	r3, #2
 8017806:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801780a:	4621      	mov	r1, r4
 801780c:	f851 0b04 	ldr.w	r0, [r1], #4
 8017810:	f7ff ff9c 	bl	801774c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017814:	2301      	movs	r3, #1
 8017816:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801781a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 801781e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8017822:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8017826:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801782a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801782e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017832:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8017836:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 801783a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 801783e:	2000      	movs	r0, #0
}
 8017840:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8017842:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8017846:	f7ff fe90 	bl	801756a <HAL_TIM_Base_MspInit>
 801784a:	e7db      	b.n	8017804 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 801784c:	2001      	movs	r0, #1
}
 801784e:	4770      	bx	lr

08017850 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017850:	4770      	bx	lr

08017852 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017852:	4770      	bx	lr

08017854 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8017854:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8017856:	b930      	cbnz	r0, 8017866 <SSD1306_Fill+0x12>
 8017858:	2100      	movs	r1, #0
 801785a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801785e:	4803      	ldr	r0, [pc, #12]	@ (801786c <SSD1306_Fill+0x18>)
 8017860:	f014 fbc6 	bl	802bff0 <memset>
}
 8017864:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8017866:	21ff      	movs	r1, #255	@ 0xff
 8017868:	e7f7      	b.n	801785a <SSD1306_Fill+0x6>
 801786a:	bf00      	nop
 801786c:	20002208 	.word	0x20002208

08017870 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8017870:	287f      	cmp	r0, #127	@ 0x7f
 8017872:	d825      	bhi.n	80178c0 <SSD1306_DrawPixel+0x50>
		x >= SSD1306_WIDTH ||
 8017874:	293f      	cmp	r1, #63	@ 0x3f
 8017876:	d823      	bhi.n	80178c0 <SSD1306_DrawPixel+0x50>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8017878:	b410      	push	{r4}
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 801787a:	4b12      	ldr	r3, [pc, #72]	@ (80178c4 <SSD1306_DrawPixel+0x54>)
 801787c:	791b      	ldrb	r3, [r3, #4]
 801787e:	b113      	cbz	r3, 8017886 <SSD1306_DrawPixel+0x16>
		color = (SSD1306_COLOR_t)!color;
 8017880:	fab2 f282 	clz	r2, r2
 8017884:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8017886:	2a01      	cmp	r2, #1
 8017888:	d00f      	beq.n	80178aa <SSD1306_DrawPixel+0x3a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 801788a:	08cb      	lsrs	r3, r1, #3
 801788c:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8017890:	4c0d      	ldr	r4, [pc, #52]	@ (80178c8 <SSD1306_DrawPixel+0x58>)
 8017892:	5c22      	ldrb	r2, [r4, r0]
 8017894:	f001 0107 	and.w	r1, r1, #7
 8017898:	2301      	movs	r3, #1
 801789a:	408b      	lsls	r3, r1
 801789c:	43db      	mvns	r3, r3
 801789e:	b25b      	sxtb	r3, r3
 80178a0:	4013      	ands	r3, r2
 80178a2:	5423      	strb	r3, [r4, r0]
	}
}
 80178a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178a8:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80178aa:	08cb      	lsrs	r3, r1, #3
 80178ac:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80178b0:	4c05      	ldr	r4, [pc, #20]	@ (80178c8 <SSD1306_DrawPixel+0x58>)
 80178b2:	5c23      	ldrb	r3, [r4, r0]
 80178b4:	f001 0107 	and.w	r1, r1, #7
 80178b8:	408a      	lsls	r2, r1
 80178ba:	4313      	orrs	r3, r2
 80178bc:	5423      	strb	r3, [r4, r0]
 80178be:	e7f1      	b.n	80178a4 <SSD1306_DrawPixel+0x34>
 80178c0:	4770      	bx	lr
 80178c2:	bf00      	nop
 80178c4:	20002200 	.word	0x20002200
 80178c8:	20002208 	.word	0x20002208

080178cc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80178cc:	4b01      	ldr	r3, [pc, #4]	@ (80178d4 <SSD1306_GotoXY+0x8>)
 80178ce:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80178d0:	8059      	strh	r1, [r3, #2]
}
 80178d2:	4770      	bx	lr
 80178d4:	20002200 	.word	0x20002200

080178d8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80178d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178dc:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80178de:	4b24      	ldr	r3, [pc, #144]	@ (8017970 <SSD1306_Putc+0x98>)
 80178e0:	881b      	ldrh	r3, [r3, #0]
 80178e2:	780a      	ldrb	r2, [r1, #0]
 80178e4:	4413      	add	r3, r2
	if (
 80178e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80178e8:	dc3e      	bgt.n	8017968 <SSD1306_Putc+0x90>
 80178ea:	4681      	mov	r9, r0
 80178ec:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80178ee:	4b20      	ldr	r3, [pc, #128]	@ (8017970 <SSD1306_Putc+0x98>)
 80178f0:	885b      	ldrh	r3, [r3, #2]
 80178f2:	784a      	ldrb	r2, [r1, #1]
 80178f4:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80178f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80178f8:	dc38      	bgt.n	801796c <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80178fa:	2600      	movs	r6, #0
 80178fc:	e020      	b.n	8017940 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80178fe:	4b1c      	ldr	r3, [pc, #112]	@ (8017970 <SSD1306_Putc+0x98>)
 8017900:	8818      	ldrh	r0, [r3, #0]
 8017902:	8859      	ldrh	r1, [r3, #2]
 8017904:	4431      	add	r1, r6
 8017906:	4420      	add	r0, r4
 8017908:	fab8 f288 	clz	r2, r8
 801790c:	0952      	lsrs	r2, r2, #5
 801790e:	b289      	uxth	r1, r1
 8017910:	b280      	uxth	r0, r0
 8017912:	f7ff ffad 	bl	8017870 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8017916:	3401      	adds	r4, #1
 8017918:	782b      	ldrb	r3, [r5, #0]
 801791a:	42a3      	cmp	r3, r4
 801791c:	d90f      	bls.n	801793e <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 801791e:	fa07 f304 	lsl.w	r3, r7, r4
 8017922:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8017926:	d0ea      	beq.n	80178fe <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8017928:	4b11      	ldr	r3, [pc, #68]	@ (8017970 <SSD1306_Putc+0x98>)
 801792a:	8818      	ldrh	r0, [r3, #0]
 801792c:	8859      	ldrh	r1, [r3, #2]
 801792e:	4431      	add	r1, r6
 8017930:	4420      	add	r0, r4
 8017932:	4642      	mov	r2, r8
 8017934:	b289      	uxth	r1, r1
 8017936:	b280      	uxth	r0, r0
 8017938:	f7ff ff9a 	bl	8017870 <SSD1306_DrawPixel>
 801793c:	e7eb      	b.n	8017916 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 801793e:	3601      	adds	r6, #1
 8017940:	786a      	ldrb	r2, [r5, #1]
 8017942:	42b2      	cmp	r2, r6
 8017944:	d908      	bls.n	8017958 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8017946:	6869      	ldr	r1, [r5, #4]
 8017948:	f1a9 0320 	sub.w	r3, r9, #32
 801794c:	fb02 6303 	mla	r3, r2, r3, r6
 8017950:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8017954:	2400      	movs	r4, #0
 8017956:	e7df      	b.n	8017918 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8017958:	4a05      	ldr	r2, [pc, #20]	@ (8017970 <SSD1306_Putc+0x98>)
 801795a:	8813      	ldrh	r3, [r2, #0]
 801795c:	7829      	ldrb	r1, [r5, #0]
 801795e:	440b      	add	r3, r1
 8017960:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8017962:	4648      	mov	r0, r9
}
 8017964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8017968:	2000      	movs	r0, #0
 801796a:	e7fb      	b.n	8017964 <SSD1306_Putc+0x8c>
 801796c:	2000      	movs	r0, #0
 801796e:	e7f9      	b.n	8017964 <SSD1306_Putc+0x8c>
 8017970:	20002200 	.word	0x20002200

08017974 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8017974:	b570      	push	{r4, r5, r6, lr}
 8017976:	4604      	mov	r4, r0
 8017978:	460e      	mov	r6, r1
 801797a:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 801797c:	e000      	b.n	8017980 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 801797e:	3401      	adds	r4, #1
	while (*str) {
 8017980:	7820      	ldrb	r0, [r4, #0]
 8017982:	b138      	cbz	r0, 8017994 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8017984:	462a      	mov	r2, r5
 8017986:	4631      	mov	r1, r6
 8017988:	f7ff ffa6 	bl	80178d8 <SSD1306_Putc>
 801798c:	4603      	mov	r3, r0
 801798e:	7820      	ldrb	r0, [r4, #0]
 8017990:	4283      	cmp	r3, r0
 8017992:	d0f4      	beq.n	801797e <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8017994:	bd70      	pop	{r4, r5, r6, pc}
	...

08017998 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8017998:	b500      	push	{lr}
 801799a:	b0c3      	sub	sp, #268	@ 0x10c
uint8_t dt[256];
dt[0] = reg;
 801799c:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80179a0:	f04f 0c00 	mov.w	ip, #0
 80179a4:	e009      	b.n	80179ba <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 80179a6:	f10c 0e01 	add.w	lr, ip, #1
 80179aa:	f812 100c 	ldrb.w	r1, [r2, ip]
 80179ae:	f10d 0c08 	add.w	ip, sp, #8
 80179b2:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 80179b6:	fa5f fc8e 	uxtb.w	ip, lr
 80179ba:	459c      	cmp	ip, r3
 80179bc:	d3f3      	bcc.n	80179a6 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80179be:	3301      	adds	r3, #1
 80179c0:	220a      	movs	r2, #10
 80179c2:	9200      	str	r2, [sp, #0]
 80179c4:	b29b      	uxth	r3, r3
 80179c6:	aa02      	add	r2, sp, #8
 80179c8:	4601      	mov	r1, r0
 80179ca:	4803      	ldr	r0, [pc, #12]	@ (80179d8 <ssd1306_I2C_WriteMulti+0x40>)
 80179cc:	f7fe fcd0 	bl	8016370 <HAL_I2C_Master_Transmit>
}
 80179d0:	b043      	add	sp, #268	@ 0x10c
 80179d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80179d6:	bf00      	nop
 80179d8:	200008c4 	.word	0x200008c4

080179dc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80179dc:	b500      	push	{lr}
 80179de:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80179e0:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80179e4:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80179e8:	230a      	movs	r3, #10
 80179ea:	9300      	str	r3, [sp, #0]
 80179ec:	2302      	movs	r3, #2
 80179ee:	aa03      	add	r2, sp, #12
 80179f0:	4601      	mov	r1, r0
 80179f2:	4803      	ldr	r0, [pc, #12]	@ (8017a00 <ssd1306_I2C_Write+0x24>)
 80179f4:	f7fe fcbc 	bl	8016370 <HAL_I2C_Master_Transmit>
}
 80179f8:	b005      	add	sp, #20
 80179fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80179fe:	bf00      	nop
 8017a00:	200008c4 	.word	0x200008c4

08017a04 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8017a04:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8017a06:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8017a0a:	2201      	movs	r2, #1
 8017a0c:	2178      	movs	r1, #120	@ 0x78
 8017a0e:	4850      	ldr	r0, [pc, #320]	@ (8017b50 <SSD1306_Init+0x14c>)
 8017a10:	f7fe fd6a 	bl	80164e8 <HAL_I2C_IsDeviceReady>
 8017a14:	2800      	cmp	r0, #0
 8017a16:	f040 8099 	bne.w	8017b4c <SSD1306_Init+0x148>
	uint32_t p = 2500;
 8017a1a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8017a1e:	e000      	b.n	8017a22 <SSD1306_Init+0x1e>
		p--;
 8017a20:	3b01      	subs	r3, #1
	while(p>0)
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d1fc      	bne.n	8017a20 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8017a26:	22ae      	movs	r2, #174	@ 0xae
 8017a28:	2100      	movs	r1, #0
 8017a2a:	2078      	movs	r0, #120	@ 0x78
 8017a2c:	f7ff ffd6 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8017a30:	2220      	movs	r2, #32
 8017a32:	2100      	movs	r1, #0
 8017a34:	2078      	movs	r0, #120	@ 0x78
 8017a36:	f7ff ffd1 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8017a3a:	2210      	movs	r2, #16
 8017a3c:	2100      	movs	r1, #0
 8017a3e:	2078      	movs	r0, #120	@ 0x78
 8017a40:	f7ff ffcc 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8017a44:	22b0      	movs	r2, #176	@ 0xb0
 8017a46:	2100      	movs	r1, #0
 8017a48:	2078      	movs	r0, #120	@ 0x78
 8017a4a:	f7ff ffc7 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8017a4e:	22c8      	movs	r2, #200	@ 0xc8
 8017a50:	2100      	movs	r1, #0
 8017a52:	2078      	movs	r0, #120	@ 0x78
 8017a54:	f7ff ffc2 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8017a58:	2200      	movs	r2, #0
 8017a5a:	4611      	mov	r1, r2
 8017a5c:	2078      	movs	r0, #120	@ 0x78
 8017a5e:	f7ff ffbd 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8017a62:	2210      	movs	r2, #16
 8017a64:	2100      	movs	r1, #0
 8017a66:	2078      	movs	r0, #120	@ 0x78
 8017a68:	f7ff ffb8 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8017a6c:	2240      	movs	r2, #64	@ 0x40
 8017a6e:	2100      	movs	r1, #0
 8017a70:	2078      	movs	r0, #120	@ 0x78
 8017a72:	f7ff ffb3 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8017a76:	2281      	movs	r2, #129	@ 0x81
 8017a78:	2100      	movs	r1, #0
 8017a7a:	2078      	movs	r0, #120	@ 0x78
 8017a7c:	f7ff ffae 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8017a80:	22ff      	movs	r2, #255	@ 0xff
 8017a82:	2100      	movs	r1, #0
 8017a84:	2078      	movs	r0, #120	@ 0x78
 8017a86:	f7ff ffa9 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8017a8a:	22a1      	movs	r2, #161	@ 0xa1
 8017a8c:	2100      	movs	r1, #0
 8017a8e:	2078      	movs	r0, #120	@ 0x78
 8017a90:	f7ff ffa4 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8017a94:	22a6      	movs	r2, #166	@ 0xa6
 8017a96:	2100      	movs	r1, #0
 8017a98:	2078      	movs	r0, #120	@ 0x78
 8017a9a:	f7ff ff9f 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8017a9e:	22a8      	movs	r2, #168	@ 0xa8
 8017aa0:	2100      	movs	r1, #0
 8017aa2:	2078      	movs	r0, #120	@ 0x78
 8017aa4:	f7ff ff9a 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8017aa8:	223f      	movs	r2, #63	@ 0x3f
 8017aaa:	2100      	movs	r1, #0
 8017aac:	2078      	movs	r0, #120	@ 0x78
 8017aae:	f7ff ff95 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8017ab2:	22a4      	movs	r2, #164	@ 0xa4
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	2078      	movs	r0, #120	@ 0x78
 8017ab8:	f7ff ff90 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8017abc:	22d3      	movs	r2, #211	@ 0xd3
 8017abe:	2100      	movs	r1, #0
 8017ac0:	2078      	movs	r0, #120	@ 0x78
 8017ac2:	f7ff ff8b 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	4611      	mov	r1, r2
 8017aca:	2078      	movs	r0, #120	@ 0x78
 8017acc:	f7ff ff86 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8017ad0:	22d5      	movs	r2, #213	@ 0xd5
 8017ad2:	2100      	movs	r1, #0
 8017ad4:	2078      	movs	r0, #120	@ 0x78
 8017ad6:	f7ff ff81 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8017ada:	22f0      	movs	r2, #240	@ 0xf0
 8017adc:	2100      	movs	r1, #0
 8017ade:	2078      	movs	r0, #120	@ 0x78
 8017ae0:	f7ff ff7c 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8017ae4:	22d9      	movs	r2, #217	@ 0xd9
 8017ae6:	2100      	movs	r1, #0
 8017ae8:	2078      	movs	r0, #120	@ 0x78
 8017aea:	f7ff ff77 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8017aee:	2222      	movs	r2, #34	@ 0x22
 8017af0:	2100      	movs	r1, #0
 8017af2:	2078      	movs	r0, #120	@ 0x78
 8017af4:	f7ff ff72 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8017af8:	22da      	movs	r2, #218	@ 0xda
 8017afa:	2100      	movs	r1, #0
 8017afc:	2078      	movs	r0, #120	@ 0x78
 8017afe:	f7ff ff6d 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8017b02:	2212      	movs	r2, #18
 8017b04:	2100      	movs	r1, #0
 8017b06:	2078      	movs	r0, #120	@ 0x78
 8017b08:	f7ff ff68 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8017b0c:	22db      	movs	r2, #219	@ 0xdb
 8017b0e:	2100      	movs	r1, #0
 8017b10:	2078      	movs	r0, #120	@ 0x78
 8017b12:	f7ff ff63 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8017b16:	2220      	movs	r2, #32
 8017b18:	2100      	movs	r1, #0
 8017b1a:	2078      	movs	r0, #120	@ 0x78
 8017b1c:	f7ff ff5e 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8017b20:	228d      	movs	r2, #141	@ 0x8d
 8017b22:	2100      	movs	r1, #0
 8017b24:	2078      	movs	r0, #120	@ 0x78
 8017b26:	f7ff ff59 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8017b2a:	2214      	movs	r2, #20
 8017b2c:	2100      	movs	r1, #0
 8017b2e:	2078      	movs	r0, #120	@ 0x78
 8017b30:	f7ff ff54 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8017b34:	22af      	movs	r2, #175	@ 0xaf
 8017b36:	2100      	movs	r1, #0
 8017b38:	2078      	movs	r0, #120	@ 0x78
 8017b3a:	f7ff ff4f 	bl	80179dc <ssd1306_I2C_Write>
	SSD1306.CurrentX = 0;
 8017b3e:	4b05      	ldr	r3, [pc, #20]	@ (8017b54 <SSD1306_Init+0x150>)
 8017b40:	2200      	movs	r2, #0
 8017b42:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8017b44:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8017b46:	2001      	movs	r0, #1
 8017b48:	7158      	strb	r0, [r3, #5]
}
 8017b4a:	bd08      	pop	{r3, pc}
		return 0;
 8017b4c:	2000      	movs	r0, #0
 8017b4e:	e7fc      	b.n	8017b4a <SSD1306_Init+0x146>
 8017b50:	200008c4 	.word	0x200008c4
 8017b54:	20002200 	.word	0x20002200

08017b58 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8017b58:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8017b5a:	2400      	movs	r4, #0
 8017b5c:	e01a      	b.n	8017b94 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8017b5e:	f1a4 0250 	sub.w	r2, r4, #80	@ 0x50
 8017b62:	b2d2      	uxtb	r2, r2
 8017b64:	2100      	movs	r1, #0
 8017b66:	2078      	movs	r0, #120	@ 0x78
 8017b68:	f7ff ff38 	bl	80179dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	4611      	mov	r1, r2
 8017b70:	2078      	movs	r0, #120	@ 0x78
 8017b72:	f7ff ff33 	bl	80179dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8017b76:	2210      	movs	r2, #16
 8017b78:	2100      	movs	r1, #0
 8017b7a:	2078      	movs	r0, #120	@ 0x78
 8017b7c:	f7ff ff2e 	bl	80179dc <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8017b80:	2380      	movs	r3, #128	@ 0x80
 8017b82:	4a06      	ldr	r2, [pc, #24]	@ (8017b9c <SSD1306_UpdateScreen+0x44>)
 8017b84:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8017b88:	2140      	movs	r1, #64	@ 0x40
 8017b8a:	2078      	movs	r0, #120	@ 0x78
 8017b8c:	f7ff ff04 	bl	8017998 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8017b90:	3401      	adds	r4, #1
 8017b92:	b2e4      	uxtb	r4, r4
 8017b94:	2c07      	cmp	r4, #7
 8017b96:	d9e2      	bls.n	8017b5e <SSD1306_UpdateScreen+0x6>
}
 8017b98:	bd10      	pop	{r4, pc}
 8017b9a:	bf00      	nop
 8017b9c:	20002208 	.word	0x20002208

08017ba0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017ba0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8017ba2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017ba6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017ba8:	f001 fd4a 	bl	8019640 <xTaskGetSchedulerState>
 8017bac:	2801      	cmp	r0, #1
 8017bae:	d100      	bne.n	8017bb2 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8017bb0:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8017bb2:	f002 f947 	bl	8019e44 <xPortSysTickHandler>
}
 8017bb6:	e7fb      	b.n	8017bb0 <SysTick_Handler+0x10>

08017bb8 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017bb8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8017bbc:	b92b      	cbnz	r3, 8017bca <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8017bbe:	4b06      	ldr	r3, [pc, #24]	@ (8017bd8 <osKernelInitialize+0x20>)
 8017bc0:	6818      	ldr	r0, [r3, #0]
 8017bc2:	b928      	cbnz	r0, 8017bd0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017bc4:	2201      	movs	r2, #1
 8017bc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017bc8:	4770      	bx	lr
    stat = osErrorISR;
 8017bca:	f06f 0005 	mvn.w	r0, #5
 8017bce:	4770      	bx	lr
    } else {
      stat = osError;
 8017bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop
 8017bd8:	20002f08 	.word	0x20002f08

08017bdc <osKernelStart>:
 8017bdc:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8017be0:	b973      	cbnz	r3, 8017c00 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8017be2:	4b0a      	ldr	r3, [pc, #40]	@ (8017c0c <osKernelStart+0x30>)
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	2b01      	cmp	r3, #1
 8017be8:	d10d      	bne.n	8017c06 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8017bea:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017bec:	2400      	movs	r4, #0
 8017bee:	4b08      	ldr	r3, [pc, #32]	@ (8017c10 <osKernelStart+0x34>)
 8017bf0:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017bf2:	4b06      	ldr	r3, [pc, #24]	@ (8017c0c <osKernelStart+0x30>)
 8017bf4:	2202      	movs	r2, #2
 8017bf6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017bf8:	f001 fa6a 	bl	80190d0 <vTaskStartScheduler>
      stat = osOK;
 8017bfc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8017bfe:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8017c00:	f06f 0005 	mvn.w	r0, #5
 8017c04:	4770      	bx	lr
      stat = osError;
 8017c06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8017c0a:	4770      	bx	lr
 8017c0c:	20002f08 	.word	0x20002f08
 8017c10:	e000ed00 	.word	0xe000ed00

08017c14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c16:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017c18:	2400      	movs	r4, #0
 8017c1a:	9405      	str	r4, [sp, #20]
 8017c1c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8017c20:	bb7c      	cbnz	r4, 8017c82 <osThreadNew+0x6e>
 8017c22:	b370      	cbz	r0, 8017c82 <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8017c24:	b32a      	cbz	r2, 8017c72 <osThreadNew+0x5e>
      if (attr->name != NULL) {
 8017c26:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8017c28:	6993      	ldr	r3, [r2, #24]
 8017c2a:	b903      	cbnz	r3, 8017c2e <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 8017c2c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017c2e:	1e5c      	subs	r4, r3, #1
 8017c30:	2c37      	cmp	r4, #55	@ 0x37
 8017c32:	d84a      	bhi.n	8017cca <osThreadNew+0xb6>
 8017c34:	6854      	ldr	r4, [r2, #4]
 8017c36:	f014 0f01 	tst.w	r4, #1
 8017c3a:	d148      	bne.n	8017cce <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8017c3c:	6956      	ldr	r6, [r2, #20]
 8017c3e:	b176      	cbz	r6, 8017c5e <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017c40:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017c44:	6894      	ldr	r4, [r2, #8]
 8017c46:	b134      	cbz	r4, 8017c56 <osThreadNew+0x42>
 8017c48:	68d7      	ldr	r7, [r2, #12]
 8017c4a:	f5b7 7fc0 	cmp.w	r7, #384	@ 0x180
 8017c4e:	d302      	bcc.n	8017c56 <osThreadNew+0x42>
 8017c50:	6917      	ldr	r7, [r2, #16]
 8017c52:	b107      	cbz	r7, 8017c56 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017c54:	b9c6      	cbnz	r6, 8017c88 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017c56:	b12c      	cbz	r4, 8017c64 <osThreadNew+0x50>
    mem  = -1;
 8017c58:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017c5c:	e00e      	b.n	8017c7c <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8017c5e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8017c62:	e7ef      	b.n	8017c44 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017c64:	68d4      	ldr	r4, [r2, #12]
 8017c66:	b98c      	cbnz	r4, 8017c8c <osThreadNew+0x78>
 8017c68:	6914      	ldr	r4, [r2, #16]
 8017c6a:	b194      	cbz	r4, 8017c92 <osThreadNew+0x7e>
    mem  = -1;
 8017c6c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017c70:	e004      	b.n	8017c7c <osThreadNew+0x68>
    name = NULL;
 8017c72:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8017c74:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8017c76:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8017c78:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 8017c7c:	2c01      	cmp	r4, #1
 8017c7e:	d00a      	beq.n	8017c96 <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8017c80:	b1ac      	cbz	r4, 8017cae <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017c82:	9805      	ldr	r0, [sp, #20]
}
 8017c84:	b007      	add	sp, #28
 8017c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8017c88:	2401      	movs	r4, #1
 8017c8a:	e7f7      	b.n	8017c7c <osThreadNew+0x68>
    mem  = -1;
 8017c8c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017c90:	e7f4      	b.n	8017c7c <osThreadNew+0x68>
          mem = 0;
 8017c92:	2400      	movs	r4, #0
 8017c94:	e7f2      	b.n	8017c7c <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017c96:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017c98:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017c9a:	9202      	str	r2, [sp, #8]
 8017c9c:	9401      	str	r4, [sp, #4]
 8017c9e:	9300      	str	r3, [sp, #0]
 8017ca0:	460b      	mov	r3, r1
 8017ca2:	4662      	mov	r2, ip
 8017ca4:	4629      	mov	r1, r5
 8017ca6:	f001 f9a3 	bl	8018ff0 <xTaskCreateStatic>
 8017caa:	9005      	str	r0, [sp, #20]
 8017cac:	e7e9      	b.n	8017c82 <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017cae:	aa05      	add	r2, sp, #20
 8017cb0:	9201      	str	r2, [sp, #4]
 8017cb2:	9300      	str	r3, [sp, #0]
 8017cb4:	460b      	mov	r3, r1
 8017cb6:	fa1f f28c 	uxth.w	r2, ip
 8017cba:	4629      	mov	r1, r5
 8017cbc:	f001 f9d5 	bl	801906a <xTaskCreate>
 8017cc0:	2801      	cmp	r0, #1
 8017cc2:	d0de      	beq.n	8017c82 <osThreadNew+0x6e>
            hTask = NULL;
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	9305      	str	r3, [sp, #20]
 8017cc8:	e7db      	b.n	8017c82 <osThreadNew+0x6e>
        return (NULL);
 8017cca:	2000      	movs	r0, #0
 8017ccc:	e7da      	b.n	8017c84 <osThreadNew+0x70>
 8017cce:	2000      	movs	r0, #0
 8017cd0:	e7d8      	b.n	8017c84 <osThreadNew+0x70>

08017cd2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017cd2:	b508      	push	{r3, lr}
 8017cd4:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8017cd8:	b933      	cbnz	r3, 8017ce8 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8017cda:	b908      	cbnz	r0, 8017ce0 <osDelay+0xe>
    stat = osOK;
 8017cdc:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8017cde:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8017ce0:	f001 fb62 	bl	80193a8 <vTaskDelay>
    stat = osOK;
 8017ce4:	2000      	movs	r0, #0
 8017ce6:	e7fa      	b.n	8017cde <osDelay+0xc>
    stat = osErrorISR;
 8017ce8:	f06f 0005 	mvn.w	r0, #5
 8017cec:	e7f7      	b.n	8017cde <osDelay+0xc>

08017cee <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8017cee:	b570      	push	{r4, r5, r6, lr}
 8017cf0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d13c      	bne.n	8017d72 <osMutexNew+0x84>
 8017cf8:	4604      	mov	r4, r0
    if (attr != NULL) {
 8017cfa:	b100      	cbz	r0, 8017cfe <osMutexNew+0x10>
      type = attr->attr_bits;
 8017cfc:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8017cfe:	f013 0601 	ands.w	r6, r3, #1
 8017d02:	d000      	beq.n	8017d06 <osMutexNew+0x18>
      rmtx = 1U;
 8017d04:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8017d06:	f013 0f08 	tst.w	r3, #8
 8017d0a:	d135      	bne.n	8017d78 <osMutexNew+0x8a>
      mem = -1;

      if (attr != NULL) {
 8017d0c:	b344      	cbz	r4, 8017d60 <osMutexNew+0x72>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017d0e:	68a1      	ldr	r1, [r4, #8]
 8017d10:	b111      	cbz	r1, 8017d18 <osMutexNew+0x2a>
 8017d12:	68e3      	ldr	r3, [r4, #12]
 8017d14:	2b4f      	cmp	r3, #79	@ 0x4f
 8017d16:	d818      	bhi.n	8017d4a <osMutexNew+0x5c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017d18:	b191      	cbz	r1, 8017d40 <osMutexNew+0x52>
      mem = -1;
 8017d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8017d1e:	bb6b      	cbnz	r3, 8017d7c <osMutexNew+0x8e>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8017d20:	b316      	cbz	r6, 8017d68 <osMutexNew+0x7a>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8017d22:	2004      	movs	r0, #4
 8017d24:	f000 fc04 	bl	8018530 <xQueueCreateMutex>
 8017d28:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8017d2a:	b31d      	cbz	r5, 8017d74 <osMutexNew+0x86>
        if (attr != NULL) {
 8017d2c:	b104      	cbz	r4, 8017d30 <osMutexNew+0x42>
          name = attr->name;
 8017d2e:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8017d30:	4621      	mov	r1, r4
 8017d32:	4628      	mov	r0, r5
 8017d34:	f000 ff64 	bl	8018c00 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8017d38:	b1e6      	cbz	r6, 8017d74 <osMutexNew+0x86>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8017d3a:	f045 0501 	orr.w	r5, r5, #1
 8017d3e:	e019      	b.n	8017d74 <osMutexNew+0x86>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017d40:	68e3      	ldr	r3, [r4, #12]
 8017d42:	b17b      	cbz	r3, 8017d64 <osMutexNew+0x76>
      mem = -1;
 8017d44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017d48:	e7e9      	b.n	8017d1e <osMutexNew+0x30>
          if (rmtx != 0U) {
 8017d4a:	b126      	cbz	r6, 8017d56 <osMutexNew+0x68>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8017d4c:	2004      	movs	r0, #4
 8017d4e:	f000 fbfa 	bl	8018546 <xQueueCreateMutexStatic>
 8017d52:	4605      	mov	r5, r0
 8017d54:	e7e9      	b.n	8017d2a <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8017d56:	2001      	movs	r0, #1
 8017d58:	f000 fbf5 	bl	8018546 <xQueueCreateMutexStatic>
 8017d5c:	4605      	mov	r5, r0
 8017d5e:	e7e4      	b.n	8017d2a <osMutexNew+0x3c>
        mem = 0;
 8017d60:	2300      	movs	r3, #0
 8017d62:	e7dc      	b.n	8017d1e <osMutexNew+0x30>
            mem = 0;
 8017d64:	2300      	movs	r3, #0
 8017d66:	e7da      	b.n	8017d1e <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8017d68:	2001      	movs	r0, #1
 8017d6a:	f000 fbe1 	bl	8018530 <xQueueCreateMutex>
 8017d6e:	4605      	mov	r5, r0
 8017d70:	e7db      	b.n	8017d2a <osMutexNew+0x3c>
  hMutex = NULL;
 8017d72:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8017d74:	4628      	mov	r0, r5
 8017d76:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8017d78:	2500      	movs	r5, #0
 8017d7a:	e7fb      	b.n	8017d74 <osMutexNew+0x86>
 8017d7c:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8017d7e:	e7f9      	b.n	8017d74 <osMutexNew+0x86>

08017d80 <osMutexAcquire>:
 8017d80:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8017d84:	b9da      	cbnz	r2, 8017dbe <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8017d86:	b510      	push	{r4, lr}
 8017d88:	4603      	mov	r3, r0
 8017d8a:	460c      	mov	r4, r1
 8017d8c:	f020 0001 	bic.w	r0, r0, #1
 8017d90:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8017d94:	2b01      	cmp	r3, #1
 8017d96:	d915      	bls.n	8017dc4 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8017d98:	b141      	cbz	r1, 8017dac <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8017d9a:	4621      	mov	r1, r4
 8017d9c:	f000 fdeb 	bl	8018976 <xQueueTakeMutexRecursive>
 8017da0:	2801      	cmp	r0, #1
 8017da2:	d012      	beq.n	8017dca <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8017da4:	b19c      	cbz	r4, 8017dce <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8017da6:	f06f 0001 	mvn.w	r0, #1
 8017daa:	e00f      	b.n	8017dcc <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8017dac:	4621      	mov	r1, r4
 8017dae:	f000 fd0f 	bl	80187d0 <xQueueSemaphoreTake>
 8017db2:	2801      	cmp	r0, #1
 8017db4:	d00e      	beq.n	8017dd4 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8017db6:	b17c      	cbz	r4, 8017dd8 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8017db8:	f06f 0001 	mvn.w	r0, #1
 8017dbc:	e006      	b.n	8017dcc <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8017dbe:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8017dc2:	4770      	bx	lr
    stat = osErrorParameter;
 8017dc4:	f06f 0003 	mvn.w	r0, #3
 8017dc8:	e000      	b.n	8017dcc <osMutexAcquire+0x4c>
  stat = osOK;
 8017dca:	2000      	movs	r0, #0
}
 8017dcc:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8017dce:	f06f 0002 	mvn.w	r0, #2
 8017dd2:	e7fb      	b.n	8017dcc <osMutexAcquire+0x4c>
  stat = osOK;
 8017dd4:	2000      	movs	r0, #0
 8017dd6:	e7f9      	b.n	8017dcc <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8017dd8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8017ddc:	e7f6      	b.n	8017dcc <osMutexAcquire+0x4c>

08017dde <osMutexRelease>:
 8017dde:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8017de2:	b9ba      	cbnz	r2, 8017e14 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8017de4:	b508      	push	{r3, lr}
 8017de6:	4603      	mov	r3, r0
 8017de8:	f020 0001 	bic.w	r0, r0, #1
 8017dec:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8017df0:	2b01      	cmp	r3, #1
 8017df2:	d912      	bls.n	8017e1a <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8017df4:	b129      	cbz	r1, 8017e02 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8017df6:	f000 fbb5 	bl	8018564 <xQueueGiveMutexRecursive>
 8017dfa:	2801      	cmp	r0, #1
 8017dfc:	d110      	bne.n	8017e20 <osMutexRelease+0x42>
  stat = osOK;
 8017dfe:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8017e00:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8017e02:	2300      	movs	r3, #0
 8017e04:	461a      	mov	r2, r3
 8017e06:	4619      	mov	r1, r3
 8017e08:	f000 fac2 	bl	8018390 <xQueueGenericSend>
 8017e0c:	2801      	cmp	r0, #1
 8017e0e:	d10a      	bne.n	8017e26 <osMutexRelease+0x48>
  stat = osOK;
 8017e10:	2000      	movs	r0, #0
 8017e12:	e7f5      	b.n	8017e00 <osMutexRelease+0x22>
    stat = osErrorISR;
 8017e14:	f06f 0005 	mvn.w	r0, #5
}
 8017e18:	4770      	bx	lr
    stat = osErrorParameter;
 8017e1a:	f06f 0003 	mvn.w	r0, #3
 8017e1e:	e7ef      	b.n	8017e00 <osMutexRelease+0x22>
        stat = osErrorResource;
 8017e20:	f06f 0002 	mvn.w	r0, #2
 8017e24:	e7ec      	b.n	8017e00 <osMutexRelease+0x22>
        stat = osErrorResource;
 8017e26:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8017e2a:	e7e9      	b.n	8017e00 <osMutexRelease+0x22>

08017e2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8017e2c:	b570      	push	{r4, r5, r6, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	d13a      	bne.n	8017eae <osMessageQueueNew+0x82>
 8017e38:	4614      	mov	r4, r2
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	d03b      	beq.n	8017eb6 <osMessageQueueNew+0x8a>
 8017e3e:	2900      	cmp	r1, #0
 8017e40:	d03b      	beq.n	8017eba <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8017e42:	b36a      	cbz	r2, 8017ea0 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017e44:	6893      	ldr	r3, [r2, #8]
 8017e46:	b14b      	cbz	r3, 8017e5c <osMessageQueueNew+0x30>
 8017e48:	68d2      	ldr	r2, [r2, #12]
 8017e4a:	2a4f      	cmp	r2, #79	@ 0x4f
 8017e4c:	d906      	bls.n	8017e5c <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017e4e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017e50:	b122      	cbz	r2, 8017e5c <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017e52:	fb01 f500 	mul.w	r5, r1, r0
 8017e56:	6966      	ldr	r6, [r4, #20]
 8017e58:	42ae      	cmp	r6, r5
 8017e5a:	d21b      	bcs.n	8017e94 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017e5c:	b173      	cbz	r3, 8017e7c <osMessageQueueNew+0x50>
    mem = -1;
 8017e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8017e62:	bb63      	cbnz	r3, 8017ebe <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8017e64:	2200      	movs	r2, #0
 8017e66:	f000 fa6f 	bl	8018348 <xQueueGenericCreate>
 8017e6a:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8017e6c:	b305      	cbz	r5, 8017eb0 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8017e6e:	b104      	cbz	r4, 8017e72 <osMessageQueueNew+0x46>
        name = attr->name;
 8017e70:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8017e72:	4621      	mov	r1, r4
 8017e74:	4628      	mov	r0, r5
 8017e76:	f000 fec3 	bl	8018c00 <vQueueAddToRegistry>
 8017e7a:	e019      	b.n	8017eb0 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017e7c:	68e3      	ldr	r3, [r4, #12]
 8017e7e:	b98b      	cbnz	r3, 8017ea4 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017e80:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8017e82:	b113      	cbz	r3, 8017e8a <osMessageQueueNew+0x5e>
    mem = -1;
 8017e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017e88:	e7eb      	b.n	8017e62 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017e8a:	6963      	ldr	r3, [r4, #20]
 8017e8c:	b16b      	cbz	r3, 8017eaa <osMessageQueueNew+0x7e>
    mem = -1;
 8017e8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017e92:	e7e6      	b.n	8017e62 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8017e94:	2500      	movs	r5, #0
 8017e96:	9500      	str	r5, [sp, #0]
 8017e98:	f000 fa0c 	bl	80182b4 <xQueueGenericCreateStatic>
 8017e9c:	4605      	mov	r5, r0
 8017e9e:	e7e5      	b.n	8017e6c <osMessageQueueNew+0x40>
      mem = 0;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	e7de      	b.n	8017e62 <osMessageQueueNew+0x36>
    mem = -1;
 8017ea4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017ea8:	e7db      	b.n	8017e62 <osMessageQueueNew+0x36>
          mem = 0;
 8017eaa:	2300      	movs	r3, #0
 8017eac:	e7d9      	b.n	8017e62 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8017eae:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8017eb0:	4628      	mov	r0, r5
 8017eb2:	b002      	add	sp, #8
 8017eb4:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8017eb6:	2500      	movs	r5, #0
 8017eb8:	e7fa      	b.n	8017eb0 <osMessageQueueNew+0x84>
 8017eba:	2500      	movs	r5, #0
 8017ebc:	e7f8      	b.n	8017eb0 <osMessageQueueNew+0x84>
 8017ebe:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8017ec0:	e7f6      	b.n	8017eb0 <osMessageQueueNew+0x84>

08017ec2 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8017ec2:	b510      	push	{r4, lr}
 8017ec4:	b082      	sub	sp, #8
 8017ec6:	461c      	mov	r4, r3
 8017ec8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8017ecc:	b1c3      	cbz	r3, 8017f00 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017ece:	b318      	cbz	r0, 8017f18 <osMessageQueuePut+0x56>
 8017ed0:	b329      	cbz	r1, 8017f1e <osMessageQueuePut+0x5c>
 8017ed2:	bb3c      	cbnz	r4, 8017f24 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8017ed8:	aa01      	add	r2, sp, #4
 8017eda:	f000 fb63 	bl	80185a4 <xQueueGenericSendFromISR>
 8017ede:	2801      	cmp	r0, #1
 8017ee0:	d123      	bne.n	8017f2a <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8017ee2:	9801      	ldr	r0, [sp, #4]
 8017ee4:	b150      	cbz	r0, 8017efc <osMessageQueuePut+0x3a>
 8017ee6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017eee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017ef2:	f3bf 8f4f 	dsb	sy
 8017ef6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8017efa:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8017efc:	b002      	add	sp, #8
 8017efe:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017f00:	b1b0      	cbz	r0, 8017f30 <osMessageQueuePut+0x6e>
 8017f02:	b1c1      	cbz	r1, 8017f36 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017f04:	2300      	movs	r3, #0
 8017f06:	4622      	mov	r2, r4
 8017f08:	f000 fa42 	bl	8018390 <xQueueGenericSend>
 8017f0c:	2801      	cmp	r0, #1
 8017f0e:	d015      	beq.n	8017f3c <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8017f10:	b1b4      	cbz	r4, 8017f40 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8017f12:	f06f 0001 	mvn.w	r0, #1
 8017f16:	e7f1      	b.n	8017efc <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8017f18:	f06f 0003 	mvn.w	r0, #3
 8017f1c:	e7ee      	b.n	8017efc <osMessageQueuePut+0x3a>
 8017f1e:	f06f 0003 	mvn.w	r0, #3
 8017f22:	e7eb      	b.n	8017efc <osMessageQueuePut+0x3a>
 8017f24:	f06f 0003 	mvn.w	r0, #3
 8017f28:	e7e8      	b.n	8017efc <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8017f2a:	f06f 0002 	mvn.w	r0, #2
 8017f2e:	e7e5      	b.n	8017efc <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8017f30:	f06f 0003 	mvn.w	r0, #3
 8017f34:	e7e2      	b.n	8017efc <osMessageQueuePut+0x3a>
 8017f36:	f06f 0003 	mvn.w	r0, #3
 8017f3a:	e7df      	b.n	8017efc <osMessageQueuePut+0x3a>
  stat = osOK;
 8017f3c:	2000      	movs	r0, #0
 8017f3e:	e7dd      	b.n	8017efc <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8017f40:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8017f44:	e7da      	b.n	8017efc <osMessageQueuePut+0x3a>

08017f46 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8017f46:	b510      	push	{r4, lr}
 8017f48:	b082      	sub	sp, #8
 8017f4a:	461c      	mov	r4, r3
 8017f4c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8017f50:	b1c3      	cbz	r3, 8017f84 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017f52:	b310      	cbz	r0, 8017f9a <osMessageQueueGet+0x54>
 8017f54:	b321      	cbz	r1, 8017fa0 <osMessageQueueGet+0x5a>
 8017f56:	bb34      	cbnz	r4, 8017fa6 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8017f58:	2300      	movs	r3, #0
 8017f5a:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8017f5c:	aa01      	add	r2, sp, #4
 8017f5e:	f000 fdd9 	bl	8018b14 <xQueueReceiveFromISR>
 8017f62:	2801      	cmp	r0, #1
 8017f64:	d122      	bne.n	8017fac <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8017f66:	9801      	ldr	r0, [sp, #4]
 8017f68:	b150      	cbz	r0, 8017f80 <osMessageQueueGet+0x3a>
 8017f6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8017f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8017f76:	f3bf 8f4f 	dsb	sy
 8017f7a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8017f7e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8017f80:	b002      	add	sp, #8
 8017f82:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017f84:	b1a8      	cbz	r0, 8017fb2 <osMessageQueueGet+0x6c>
 8017f86:	b1b9      	cbz	r1, 8017fb8 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017f88:	4622      	mov	r2, r4
 8017f8a:	f000 fb72 	bl	8018672 <xQueueReceive>
 8017f8e:	2801      	cmp	r0, #1
 8017f90:	d015      	beq.n	8017fbe <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8017f92:	b1b4      	cbz	r4, 8017fc2 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8017f94:	f06f 0001 	mvn.w	r0, #1
 8017f98:	e7f2      	b.n	8017f80 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8017f9a:	f06f 0003 	mvn.w	r0, #3
 8017f9e:	e7ef      	b.n	8017f80 <osMessageQueueGet+0x3a>
 8017fa0:	f06f 0003 	mvn.w	r0, #3
 8017fa4:	e7ec      	b.n	8017f80 <osMessageQueueGet+0x3a>
 8017fa6:	f06f 0003 	mvn.w	r0, #3
 8017faa:	e7e9      	b.n	8017f80 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8017fac:	f06f 0002 	mvn.w	r0, #2
 8017fb0:	e7e6      	b.n	8017f80 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8017fb2:	f06f 0003 	mvn.w	r0, #3
 8017fb6:	e7e3      	b.n	8017f80 <osMessageQueueGet+0x3a>
 8017fb8:	f06f 0003 	mvn.w	r0, #3
 8017fbc:	e7e0      	b.n	8017f80 <osMessageQueueGet+0x3a>
  stat = osOK;
 8017fbe:	2000      	movs	r0, #0
 8017fc0:	e7de      	b.n	8017f80 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8017fc2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8017fc6:	e7db      	b.n	8017f80 <osMessageQueueGet+0x3a>

08017fc8 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8017fc8:	b148      	cbz	r0, 8017fde <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8017fca:	b508      	push	{r3, lr}
 8017fcc:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8017fd0:	b112      	cbz	r2, 8017fd8 <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8017fd2:	f000 fe09 	bl	8018be8 <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8017fd6:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8017fd8:	f000 fdf3 	bl	8018bc2 <uxQueueMessagesWaiting>
 8017fdc:	e7fb      	b.n	8017fd6 <osMessageQueueGetCount+0xe>
    count = 0U;
 8017fde:	2000      	movs	r0, #0
}
 8017fe0:	4770      	bx	lr

08017fe2 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8017fe2:	b508      	push	{r3, lr}
 8017fe4:	f3ef 8305 	mrs	r3, IPSR
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

  if (IS_IRQ()) {
 8017fe8:	b92b      	cbnz	r3, 8017ff6 <osMessageQueueReset+0x14>
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8017fea:	b138      	cbz	r0, 8017ffc <osMessageQueueReset+0x1a>
    stat = osErrorParameter;
  }
  else {
    stat = osOK;
    (void)xQueueReset (hQueue);
 8017fec:	2100      	movs	r1, #0
 8017fee:	f000 f90e 	bl	801820e <xQueueGenericReset>
    stat = osOK;
 8017ff2:	2000      	movs	r0, #0
  }

  return (stat);
}
 8017ff4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8017ff6:	f06f 0005 	mvn.w	r0, #5
 8017ffa:	e7fb      	b.n	8017ff4 <osMessageQueueReset+0x12>
    stat = osErrorParameter;
 8017ffc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8018000:	e7f8      	b.n	8017ff4 <osMessageQueueReset+0x12>
	...

08018004 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018004:	4b03      	ldr	r3, [pc, #12]	@ (8018014 <vApplicationGetIdleTaskMemory+0x10>)
 8018006:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018008:	4b03      	ldr	r3, [pc, #12]	@ (8018018 <vApplicationGetIdleTaskMemory+0x14>)
 801800a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801800c:	2380      	movs	r3, #128	@ 0x80
 801800e:	6013      	str	r3, [r2, #0]
}
 8018010:	4770      	bx	lr
 8018012:	bf00      	nop
 8018014:	20002d88 	.word	0x20002d88
 8018018:	20002b88 	.word	0x20002b88

0801801c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801801c:	4b03      	ldr	r3, [pc, #12]	@ (801802c <vApplicationGetTimerTaskMemory+0x10>)
 801801e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018020:	4b03      	ldr	r3, [pc, #12]	@ (8018030 <vApplicationGetTimerTaskMemory+0x14>)
 8018022:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018024:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018028:	6013      	str	r3, [r2, #0]
}
 801802a:	4770      	bx	lr
 801802c:	20002a08 	.word	0x20002a08
 8018030:	20002608 	.word	0x20002608

08018034 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018034:	f100 0308 	add.w	r3, r0, #8
 8018038:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801803a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801803e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018040:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018042:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018044:	2300      	movs	r3, #0
 8018046:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018048:	4770      	bx	lr

0801804a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801804a:	2300      	movs	r3, #0
 801804c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801804e:	4770      	bx	lr

08018050 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8018050:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018052:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018054:	689a      	ldr	r2, [r3, #8]
 8018056:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018058:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801805a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801805c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801805e:	6803      	ldr	r3, [r0, #0]
 8018060:	3301      	adds	r3, #1
 8018062:	6003      	str	r3, [r0, #0]
}
 8018064:	4770      	bx	lr

08018066 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018066:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018068:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801806a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801806e:	d011      	beq.n	8018094 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018070:	f100 0308 	add.w	r3, r0, #8
 8018074:	461c      	mov	r4, r3
 8018076:	685b      	ldr	r3, [r3, #4]
 8018078:	681a      	ldr	r2, [r3, #0]
 801807a:	42aa      	cmp	r2, r5
 801807c:	d9fa      	bls.n	8018074 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801807e:	6863      	ldr	r3, [r4, #4]
 8018080:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018082:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018084:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8018086:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018088:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801808a:	6803      	ldr	r3, [r0, #0]
 801808c:	3301      	adds	r3, #1
 801808e:	6003      	str	r3, [r0, #0]
}
 8018090:	bc30      	pop	{r4, r5}
 8018092:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8018094:	6904      	ldr	r4, [r0, #16]
 8018096:	e7f2      	b.n	801807e <vListInsert+0x18>

08018098 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018098:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801809a:	6841      	ldr	r1, [r0, #4]
 801809c:	6882      	ldr	r2, [r0, #8]
 801809e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80180a0:	6841      	ldr	r1, [r0, #4]
 80180a2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80180a4:	685a      	ldr	r2, [r3, #4]
 80180a6:	4282      	cmp	r2, r0
 80180a8:	d006      	beq.n	80180b8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80180aa:	2200      	movs	r2, #0
 80180ac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80180ae:	681a      	ldr	r2, [r3, #0]
 80180b0:	3a01      	subs	r2, #1
 80180b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80180b4:	6818      	ldr	r0, [r3, #0]
}
 80180b6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80180b8:	6882      	ldr	r2, [r0, #8]
 80180ba:	605a      	str	r2, [r3, #4]
 80180bc:	e7f5      	b.n	80180aa <uxListRemove+0x12>

080180be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80180be:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80180c0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80180c2:	b118      	cbz	r0, 80180cc <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80180c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180c6:	6818      	ldr	r0, [r3, #0]
 80180c8:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 80180cc:	4770      	bx	lr

080180ce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80180ce:	b510      	push	{r4, lr}
 80180d0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80180d2:	f001 fe47 	bl	8019d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80180d6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80180d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80180da:	429a      	cmp	r2, r3
 80180dc:	d004      	beq.n	80180e8 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80180de:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80180e0:	f001 fe62 	bl	8019da8 <vPortExitCritical>

	return xReturn;
}
 80180e4:	4620      	mov	r0, r4
 80180e6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80180e8:	2401      	movs	r4, #1
 80180ea:	e7f9      	b.n	80180e0 <prvIsQueueFull+0x12>

080180ec <prvIsQueueEmpty>:
{
 80180ec:	b510      	push	{r4, lr}
 80180ee:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80180f0:	f001 fe38 	bl	8019d64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80180f4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80180f6:	b923      	cbnz	r3, 8018102 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 80180f8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80180fa:	f001 fe55 	bl	8019da8 <vPortExitCritical>
}
 80180fe:	4620      	mov	r0, r4
 8018100:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8018102:	2400      	movs	r4, #0
 8018104:	e7f9      	b.n	80180fa <prvIsQueueEmpty+0xe>

08018106 <prvCopyDataToQueue>:
{
 8018106:	b570      	push	{r4, r5, r6, lr}
 8018108:	4604      	mov	r4, r0
 801810a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801810c:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801810e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018110:	b95a      	cbnz	r2, 801812a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018112:	6803      	ldr	r3, [r0, #0]
 8018114:	b11b      	cbz	r3, 801811e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8018116:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018118:	3601      	adds	r6, #1
 801811a:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 801811c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801811e:	6880      	ldr	r0, [r0, #8]
 8018120:	f001 faea 	bl	80196f8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018124:	2300      	movs	r3, #0
 8018126:	60a3      	str	r3, [r4, #8]
 8018128:	e7f6      	b.n	8018118 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 801812a:	b96d      	cbnz	r5, 8018148 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801812c:	6840      	ldr	r0, [r0, #4]
 801812e:	f015 f99b 	bl	802d468 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018132:	6863      	ldr	r3, [r4, #4]
 8018134:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8018136:	4413      	add	r3, r2
 8018138:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801813a:	68a2      	ldr	r2, [r4, #8]
 801813c:	4293      	cmp	r3, r2
 801813e:	d319      	bcc.n	8018174 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018140:	6823      	ldr	r3, [r4, #0]
 8018142:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8018144:	4628      	mov	r0, r5
 8018146:	e7e7      	b.n	8018118 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018148:	68c0      	ldr	r0, [r0, #12]
 801814a:	f015 f98d 	bl	802d468 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801814e:	68e3      	ldr	r3, [r4, #12]
 8018150:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8018152:	4251      	negs	r1, r2
 8018154:	1a9b      	subs	r3, r3, r2
 8018156:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018158:	6822      	ldr	r2, [r4, #0]
 801815a:	4293      	cmp	r3, r2
 801815c:	d202      	bcs.n	8018164 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801815e:	68a3      	ldr	r3, [r4, #8]
 8018160:	440b      	add	r3, r1
 8018162:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8018164:	2d02      	cmp	r5, #2
 8018166:	d001      	beq.n	801816c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8018168:	2000      	movs	r0, #0
 801816a:	e7d5      	b.n	8018118 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801816c:	b126      	cbz	r6, 8018178 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 801816e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8018170:	2000      	movs	r0, #0
 8018172:	e7d1      	b.n	8018118 <prvCopyDataToQueue+0x12>
 8018174:	4628      	mov	r0, r5
 8018176:	e7cf      	b.n	8018118 <prvCopyDataToQueue+0x12>
 8018178:	2000      	movs	r0, #0
 801817a:	e7cd      	b.n	8018118 <prvCopyDataToQueue+0x12>

0801817c <prvCopyDataFromQueue>:
{
 801817c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801817e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8018180:	b16a      	cbz	r2, 801819e <prvCopyDataFromQueue+0x22>
{
 8018182:	b510      	push	{r4, lr}
 8018184:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018186:	68d9      	ldr	r1, [r3, #12]
 8018188:	4411      	add	r1, r2
 801818a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801818c:	689c      	ldr	r4, [r3, #8]
 801818e:	42a1      	cmp	r1, r4
 8018190:	d301      	bcc.n	8018196 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018192:	6819      	ldr	r1, [r3, #0]
 8018194:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018196:	68d9      	ldr	r1, [r3, #12]
 8018198:	f015 f966 	bl	802d468 <memcpy>
}
 801819c:	bd10      	pop	{r4, pc}
 801819e:	4770      	bx	lr

080181a0 <prvUnlockQueue>:
{
 80181a0:	b538      	push	{r3, r4, r5, lr}
 80181a2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80181a4:	f001 fdde 	bl	8019d64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80181a8:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 80181ac:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80181ae:	e001      	b.n	80181b4 <prvUnlockQueue+0x14>
			--cTxLock;
 80181b0:	3c01      	subs	r4, #1
 80181b2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80181b4:	2c00      	cmp	r4, #0
 80181b6:	dd0a      	ble.n	80181ce <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80181b8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80181ba:	b143      	cbz	r3, 80181ce <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80181bc:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 80181c0:	f001 f99e 	bl	8019500 <xTaskRemoveFromEventList>
 80181c4:	2800      	cmp	r0, #0
 80181c6:	d0f3      	beq.n	80181b0 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80181c8:	f001 fa2e 	bl	8019628 <vTaskMissedYield>
 80181cc:	e7f0      	b.n	80181b0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80181ce:	23ff      	movs	r3, #255	@ 0xff
 80181d0:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 80181d4:	f001 fde8 	bl	8019da8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80181d8:	f001 fdc4 	bl	8019d64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80181dc:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 80181e0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80181e2:	e001      	b.n	80181e8 <prvUnlockQueue+0x48>
				--cRxLock;
 80181e4:	3c01      	subs	r4, #1
 80181e6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80181e8:	2c00      	cmp	r4, #0
 80181ea:	dd0a      	ble.n	8018202 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80181ec:	692b      	ldr	r3, [r5, #16]
 80181ee:	b143      	cbz	r3, 8018202 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80181f0:	f105 0010 	add.w	r0, r5, #16
 80181f4:	f001 f984 	bl	8019500 <xTaskRemoveFromEventList>
 80181f8:	2800      	cmp	r0, #0
 80181fa:	d0f3      	beq.n	80181e4 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 80181fc:	f001 fa14 	bl	8019628 <vTaskMissedYield>
 8018200:	e7f0      	b.n	80181e4 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8018202:	23ff      	movs	r3, #255	@ 0xff
 8018204:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8018208:	f001 fdce 	bl	8019da8 <vPortExitCritical>
}
 801820c:	bd38      	pop	{r3, r4, r5, pc}

0801820e <xQueueGenericReset>:
{
 801820e:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8018210:	b1e0      	cbz	r0, 801824c <xQueueGenericReset+0x3e>
 8018212:	460d      	mov	r5, r1
 8018214:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018216:	f001 fda5 	bl	8019d64 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801821a:	6823      	ldr	r3, [r4, #0]
 801821c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801821e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8018220:	fb01 3002 	mla	r0, r1, r2, r3
 8018224:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018226:	2000      	movs	r0, #0
 8018228:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801822a:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801822c:	3a01      	subs	r2, #1
 801822e:	fb02 3301 	mla	r3, r2, r1, r3
 8018232:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018234:	23ff      	movs	r3, #255	@ 0xff
 8018236:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801823a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 801823e:	b9fd      	cbnz	r5, 8018280 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018240:	6923      	ldr	r3, [r4, #16]
 8018242:	b963      	cbnz	r3, 801825e <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8018244:	f001 fdb0 	bl	8019da8 <vPortExitCritical>
}
 8018248:	2001      	movs	r0, #1
 801824a:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801824c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018250:	f383 8811 	msr	BASEPRI, r3
 8018254:	f3bf 8f6f 	isb	sy
 8018258:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801825c:	e7fe      	b.n	801825c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801825e:	f104 0010 	add.w	r0, r4, #16
 8018262:	f001 f94d 	bl	8019500 <xTaskRemoveFromEventList>
 8018266:	2800      	cmp	r0, #0
 8018268:	d0ec      	beq.n	8018244 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 801826a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801826e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018272:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018276:	f3bf 8f4f 	dsb	sy
 801827a:	f3bf 8f6f 	isb	sy
 801827e:	e7e1      	b.n	8018244 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018280:	f104 0010 	add.w	r0, r4, #16
 8018284:	f7ff fed6 	bl	8018034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018288:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801828c:	f7ff fed2 	bl	8018034 <vListInitialise>
 8018290:	e7d8      	b.n	8018244 <xQueueGenericReset+0x36>

08018292 <prvInitialiseNewQueue>:
{
 8018292:	b538      	push	{r3, r4, r5, lr}
 8018294:	461d      	mov	r5, r3
 8018296:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8018298:	460b      	mov	r3, r1
 801829a:	b949      	cbnz	r1, 80182b0 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801829c:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801829e:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80182a0:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80182a2:	2101      	movs	r1, #1
 80182a4:	4620      	mov	r0, r4
 80182a6:	f7ff ffb2 	bl	801820e <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80182aa:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 80182ae:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80182b0:	6022      	str	r2, [r4, #0]
 80182b2:	e7f4      	b.n	801829e <prvInitialiseNewQueue+0xc>

080182b4 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80182b4:	b940      	cbnz	r0, 80182c8 <xQueueGenericCreateStatic+0x14>
 80182b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182ba:	f383 8811 	msr	BASEPRI, r3
 80182be:	f3bf 8f6f 	isb	sy
 80182c2:	f3bf 8f4f 	dsb	sy
 80182c6:	e7fe      	b.n	80182c6 <xQueueGenericCreateStatic+0x12>
	{
 80182c8:	b510      	push	{r4, lr}
 80182ca:	b084      	sub	sp, #16
 80182cc:	461c      	mov	r4, r3
 80182ce:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80182d0:	b153      	cbz	r3, 80182e8 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80182d2:	b192      	cbz	r2, 80182fa <xQueueGenericCreateStatic+0x46>
 80182d4:	b989      	cbnz	r1, 80182fa <xQueueGenericCreateStatic+0x46>
 80182d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182da:	f383 8811 	msr	BASEPRI, r3
 80182de:	f3bf 8f6f 	isb	sy
 80182e2:	f3bf 8f4f 	dsb	sy
 80182e6:	e7fe      	b.n	80182e6 <xQueueGenericCreateStatic+0x32>
 80182e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80182ec:	f383 8811 	msr	BASEPRI, r3
 80182f0:	f3bf 8f6f 	isb	sy
 80182f4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80182f8:	e7fe      	b.n	80182f8 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80182fa:	b16a      	cbz	r2, 8018318 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80182fc:	2350      	movs	r3, #80	@ 0x50
 80182fe:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018300:	9b03      	ldr	r3, [sp, #12]
 8018302:	2b50      	cmp	r3, #80	@ 0x50
 8018304:	d013      	beq.n	801832e <xQueueGenericCreateStatic+0x7a>
 8018306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801830a:	f383 8811 	msr	BASEPRI, r3
 801830e:	f3bf 8f6f 	isb	sy
 8018312:	f3bf 8f4f 	dsb	sy
 8018316:	e7fe      	b.n	8018316 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018318:	2900      	cmp	r1, #0
 801831a:	d0ef      	beq.n	80182fc <xQueueGenericCreateStatic+0x48>
 801831c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018320:	f383 8811 	msr	BASEPRI, r3
 8018324:	f3bf 8f6f 	isb	sy
 8018328:	f3bf 8f4f 	dsb	sy
 801832c:	e7fe      	b.n	801832c <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801832e:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018330:	2301      	movs	r3, #1
 8018332:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018336:	9400      	str	r4, [sp, #0]
 8018338:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801833c:	4660      	mov	r0, ip
 801833e:	f7ff ffa8 	bl	8018292 <prvInitialiseNewQueue>
	}
 8018342:	4620      	mov	r0, r4
 8018344:	b004      	add	sp, #16
 8018346:	bd10      	pop	{r4, pc}

08018348 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018348:	b940      	cbnz	r0, 801835c <xQueueGenericCreate+0x14>
 801834a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801834e:	f383 8811 	msr	BASEPRI, r3
 8018352:	f3bf 8f6f 	isb	sy
 8018356:	f3bf 8f4f 	dsb	sy
 801835a:	e7fe      	b.n	801835a <xQueueGenericCreate+0x12>
	{
 801835c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801835e:	b083      	sub	sp, #12
 8018360:	460d      	mov	r5, r1
 8018362:	4614      	mov	r4, r2
 8018364:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018366:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801836a:	3050      	adds	r0, #80	@ 0x50
 801836c:	f001 feb4 	bl	801a0d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8018370:	4607      	mov	r7, r0
 8018372:	b150      	cbz	r0, 801838a <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018374:	2300      	movs	r3, #0
 8018376:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801837a:	9000      	str	r0, [sp, #0]
 801837c:	4623      	mov	r3, r4
 801837e:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8018382:	4629      	mov	r1, r5
 8018384:	4630      	mov	r0, r6
 8018386:	f7ff ff84 	bl	8018292 <prvInitialiseNewQueue>
	}
 801838a:	4638      	mov	r0, r7
 801838c:	b003      	add	sp, #12
 801838e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018390 <xQueueGenericSend>:
{
 8018390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018392:	b085      	sub	sp, #20
 8018394:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8018396:	b188      	cbz	r0, 80183bc <xQueueGenericSend+0x2c>
 8018398:	460f      	mov	r7, r1
 801839a:	461d      	mov	r5, r3
 801839c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801839e:	b1b1      	cbz	r1, 80183ce <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80183a0:	2d02      	cmp	r5, #2
 80183a2:	d120      	bne.n	80183e6 <xQueueGenericSend+0x56>
 80183a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80183a6:	2b01      	cmp	r3, #1
 80183a8:	d01d      	beq.n	80183e6 <xQueueGenericSend+0x56>
 80183aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183ae:	f383 8811 	msr	BASEPRI, r3
 80183b2:	f3bf 8f6f 	isb	sy
 80183b6:	f3bf 8f4f 	dsb	sy
 80183ba:	e7fe      	b.n	80183ba <xQueueGenericSend+0x2a>
 80183bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183c0:	f383 8811 	msr	BASEPRI, r3
 80183c4:	f3bf 8f6f 	isb	sy
 80183c8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80183cc:	e7fe      	b.n	80183cc <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80183ce:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d0e5      	beq.n	80183a0 <xQueueGenericSend+0x10>
 80183d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183d8:	f383 8811 	msr	BASEPRI, r3
 80183dc:	f3bf 8f6f 	isb	sy
 80183e0:	f3bf 8f4f 	dsb	sy
 80183e4:	e7fe      	b.n	80183e4 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80183e6:	f001 f92b 	bl	8019640 <xTaskGetSchedulerState>
 80183ea:	4606      	mov	r6, r0
 80183ec:	b958      	cbnz	r0, 8018406 <xQueueGenericSend+0x76>
 80183ee:	9b01      	ldr	r3, [sp, #4]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d048      	beq.n	8018486 <xQueueGenericSend+0xf6>
 80183f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80183f8:	f383 8811 	msr	BASEPRI, r3
 80183fc:	f3bf 8f6f 	isb	sy
 8018400:	f3bf 8f4f 	dsb	sy
 8018404:	e7fe      	b.n	8018404 <xQueueGenericSend+0x74>
 8018406:	2600      	movs	r6, #0
 8018408:	e03d      	b.n	8018486 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801840a:	462a      	mov	r2, r5
 801840c:	4639      	mov	r1, r7
 801840e:	4620      	mov	r0, r4
 8018410:	f7ff fe79 	bl	8018106 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018414:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018416:	b97b      	cbnz	r3, 8018438 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8018418:	b148      	cbz	r0, 801842e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 801841a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801841e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018422:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018426:	f3bf 8f4f 	dsb	sy
 801842a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 801842e:	f001 fcbb 	bl	8019da8 <vPortExitCritical>
				return pdPASS;
 8018432:	2001      	movs	r0, #1
}
 8018434:	b005      	add	sp, #20
 8018436:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018438:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801843c:	f001 f860 	bl	8019500 <xTaskRemoveFromEventList>
 8018440:	2800      	cmp	r0, #0
 8018442:	d0f4      	beq.n	801842e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8018444:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801844c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018450:	f3bf 8f4f 	dsb	sy
 8018454:	f3bf 8f6f 	isb	sy
 8018458:	e7e9      	b.n	801842e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 801845a:	f001 fca5 	bl	8019da8 <vPortExitCritical>
					return errQUEUE_FULL;
 801845e:	2000      	movs	r0, #0
 8018460:	e7e8      	b.n	8018434 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018462:	a802      	add	r0, sp, #8
 8018464:	f001 f892 	bl	801958c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018468:	2601      	movs	r6, #1
 801846a:	e019      	b.n	80184a0 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 801846c:	2300      	movs	r3, #0
 801846e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018472:	e021      	b.n	80184b8 <xQueueGenericSend+0x128>
 8018474:	2300      	movs	r3, #0
 8018476:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801847a:	e023      	b.n	80184c4 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 801847c:	4620      	mov	r0, r4
 801847e:	f7ff fe8f 	bl	80181a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018482:	f000 ff15 	bl	80192b0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8018486:	f001 fc6d 	bl	8019d64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801848a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801848c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801848e:	429a      	cmp	r2, r3
 8018490:	d3bb      	bcc.n	801840a <xQueueGenericSend+0x7a>
 8018492:	2d02      	cmp	r5, #2
 8018494:	d0b9      	beq.n	801840a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018496:	9b01      	ldr	r3, [sp, #4]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d0de      	beq.n	801845a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 801849c:	2e00      	cmp	r6, #0
 801849e:	d0e0      	beq.n	8018462 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80184a0:	f001 fc82 	bl	8019da8 <vPortExitCritical>
		vTaskSuspendAll();
 80184a4:	f000 fe6a 	bl	801917c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80184a8:	f001 fc5c 	bl	8019d64 <vPortEnterCritical>
 80184ac:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80184b0:	b252      	sxtb	r2, r2
 80184b2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80184b6:	d0d9      	beq.n	801846c <xQueueGenericSend+0xdc>
 80184b8:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80184bc:	b252      	sxtb	r2, r2
 80184be:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80184c2:	d0d7      	beq.n	8018474 <xQueueGenericSend+0xe4>
 80184c4:	f001 fc70 	bl	8019da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80184c8:	a901      	add	r1, sp, #4
 80184ca:	a802      	add	r0, sp, #8
 80184cc:	f001 f86a 	bl	80195a4 <xTaskCheckForTimeOut>
 80184d0:	b9d8      	cbnz	r0, 801850a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80184d2:	4620      	mov	r0, r4
 80184d4:	f7ff fdfb 	bl	80180ce <prvIsQueueFull>
 80184d8:	2800      	cmp	r0, #0
 80184da:	d0cf      	beq.n	801847c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80184dc:	9901      	ldr	r1, [sp, #4]
 80184de:	f104 0010 	add.w	r0, r4, #16
 80184e2:	f000 ffd9 	bl	8019498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80184e6:	4620      	mov	r0, r4
 80184e8:	f7ff fe5a 	bl	80181a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80184ec:	f000 fee0 	bl	80192b0 <xTaskResumeAll>
 80184f0:	2800      	cmp	r0, #0
 80184f2:	d1c8      	bne.n	8018486 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80184f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80184f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80184fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018500:	f3bf 8f4f 	dsb	sy
 8018504:	f3bf 8f6f 	isb	sy
 8018508:	e7bd      	b.n	8018486 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 801850a:	4620      	mov	r0, r4
 801850c:	f7ff fe48 	bl	80181a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018510:	f000 fece 	bl	80192b0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8018514:	2000      	movs	r0, #0
 8018516:	e78d      	b.n	8018434 <xQueueGenericSend+0xa4>

08018518 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8018518:	b148      	cbz	r0, 801852e <prvInitialiseMutex+0x16>
	{
 801851a:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801851c:	2100      	movs	r1, #0
 801851e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018520:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018522:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8018524:	460b      	mov	r3, r1
 8018526:	460a      	mov	r2, r1
 8018528:	f7ff ff32 	bl	8018390 <xQueueGenericSend>
	}
 801852c:	bd08      	pop	{r3, pc}
 801852e:	4770      	bx	lr

08018530 <xQueueCreateMutex>:
	{
 8018530:	b510      	push	{r4, lr}
 8018532:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018534:	2100      	movs	r1, #0
 8018536:	2001      	movs	r0, #1
 8018538:	f7ff ff06 	bl	8018348 <xQueueGenericCreate>
 801853c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801853e:	f7ff ffeb 	bl	8018518 <prvInitialiseMutex>
	}
 8018542:	4620      	mov	r0, r4
 8018544:	bd10      	pop	{r4, pc}

08018546 <xQueueCreateMutexStatic>:
	{
 8018546:	b510      	push	{r4, lr}
 8018548:	b082      	sub	sp, #8
 801854a:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801854c:	9000      	str	r0, [sp, #0]
 801854e:	2200      	movs	r2, #0
 8018550:	4611      	mov	r1, r2
 8018552:	2001      	movs	r0, #1
 8018554:	f7ff feae 	bl	80182b4 <xQueueGenericCreateStatic>
 8018558:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801855a:	f7ff ffdd 	bl	8018518 <prvInitialiseMutex>
	}
 801855e:	4620      	mov	r0, r4
 8018560:	b002      	add	sp, #8
 8018562:	bd10      	pop	{r4, pc}

08018564 <xQueueGiveMutexRecursive>:
	{
 8018564:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8018566:	b138      	cbz	r0, 8018578 <xQueueGiveMutexRecursive+0x14>
 8018568:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801856a:	6885      	ldr	r5, [r0, #8]
 801856c:	f001 f862 	bl	8019634 <xTaskGetCurrentTaskHandle>
 8018570:	4285      	cmp	r5, r0
 8018572:	d00a      	beq.n	801858a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8018574:	2000      	movs	r0, #0
	}
 8018576:	bd38      	pop	{r3, r4, r5, pc}
 8018578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801857c:	f383 8811 	msr	BASEPRI, r3
 8018580:	f3bf 8f6f 	isb	sy
 8018584:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8018588:	e7fe      	b.n	8018588 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801858a:	68e3      	ldr	r3, [r4, #12]
 801858c:	3b01      	subs	r3, #1
 801858e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8018590:	b10b      	cbz	r3, 8018596 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8018592:	2001      	movs	r0, #1
		return xReturn;
 8018594:	e7ef      	b.n	8018576 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8018596:	461a      	mov	r2, r3
 8018598:	4619      	mov	r1, r3
 801859a:	4620      	mov	r0, r4
 801859c:	f7ff fef8 	bl	8018390 <xQueueGenericSend>
			xReturn = pdPASS;
 80185a0:	2001      	movs	r0, #1
 80185a2:	e7e8      	b.n	8018576 <xQueueGiveMutexRecursive+0x12>

080185a4 <xQueueGenericSendFromISR>:
{
 80185a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80185a8:	b190      	cbz	r0, 80185d0 <xQueueGenericSendFromISR+0x2c>
 80185aa:	460f      	mov	r7, r1
 80185ac:	4616      	mov	r6, r2
 80185ae:	461c      	mov	r4, r3
 80185b0:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80185b2:	b1b1      	cbz	r1, 80185e2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80185b4:	2c02      	cmp	r4, #2
 80185b6:	d120      	bne.n	80185fa <xQueueGenericSendFromISR+0x56>
 80185b8:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80185ba:	2b01      	cmp	r3, #1
 80185bc:	d01d      	beq.n	80185fa <xQueueGenericSendFromISR+0x56>
 80185be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185c2:	f383 8811 	msr	BASEPRI, r3
 80185c6:	f3bf 8f6f 	isb	sy
 80185ca:	f3bf 8f4f 	dsb	sy
 80185ce:	e7fe      	b.n	80185ce <xQueueGenericSendFromISR+0x2a>
 80185d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185d4:	f383 8811 	msr	BASEPRI, r3
 80185d8:	f3bf 8f6f 	isb	sy
 80185dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80185e0:	e7fe      	b.n	80185e0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80185e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d0e5      	beq.n	80185b4 <xQueueGenericSendFromISR+0x10>
 80185e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185ec:	f383 8811 	msr	BASEPRI, r3
 80185f0:	f3bf 8f6f 	isb	sy
 80185f4:	f3bf 8f4f 	dsb	sy
 80185f8:	e7fe      	b.n	80185f8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80185fa:	f001 fcd9 	bl	8019fb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80185fe:	f3ef 8811 	mrs	r8, BASEPRI
 8018602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018606:	f383 8811 	msr	BASEPRI, r3
 801860a:	f3bf 8f6f 	isb	sy
 801860e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018612:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8018614:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8018616:	429a      	cmp	r2, r3
 8018618:	d306      	bcc.n	8018628 <xQueueGenericSendFromISR+0x84>
 801861a:	2c02      	cmp	r4, #2
 801861c:	d004      	beq.n	8018628 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 801861e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018620:	f388 8811 	msr	BASEPRI, r8
}
 8018624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8018628:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 801862c:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018630:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018632:	4622      	mov	r2, r4
 8018634:	4639      	mov	r1, r7
 8018636:	4628      	mov	r0, r5
 8018638:	f7ff fd65 	bl	8018106 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801863c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8018640:	d006      	beq.n	8018650 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018642:	f109 0301 	add.w	r3, r9, #1
 8018646:	b25b      	sxtb	r3, r3
 8018648:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 801864c:	2001      	movs	r0, #1
 801864e:	e7e7      	b.n	8018620 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018650:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018652:	b90b      	cbnz	r3, 8018658 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8018654:	2001      	movs	r0, #1
 8018656:	e7e3      	b.n	8018620 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018658:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 801865c:	f000 ff50 	bl	8019500 <xTaskRemoveFromEventList>
 8018660:	b118      	cbz	r0, 801866a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8018662:	b126      	cbz	r6, 801866e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018664:	2001      	movs	r0, #1
 8018666:	6030      	str	r0, [r6, #0]
 8018668:	e7da      	b.n	8018620 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 801866a:	2001      	movs	r0, #1
 801866c:	e7d8      	b.n	8018620 <xQueueGenericSendFromISR+0x7c>
 801866e:	2001      	movs	r0, #1
 8018670:	e7d6      	b.n	8018620 <xQueueGenericSendFromISR+0x7c>

08018672 <xQueueReceive>:
{
 8018672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018674:	b085      	sub	sp, #20
 8018676:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8018678:	b190      	cbz	r0, 80186a0 <xQueueReceive+0x2e>
 801867a:	460f      	mov	r7, r1
 801867c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801867e:	b1c1      	cbz	r1, 80186b2 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018680:	f000 ffde 	bl	8019640 <xTaskGetSchedulerState>
 8018684:	4606      	mov	r6, r0
 8018686:	bb00      	cbnz	r0, 80186ca <xQueueReceive+0x58>
 8018688:	9b01      	ldr	r3, [sp, #4]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d05e      	beq.n	801874c <xQueueReceive+0xda>
	__asm volatile
 801868e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018692:	f383 8811 	msr	BASEPRI, r3
 8018696:	f3bf 8f6f 	isb	sy
 801869a:	f3bf 8f4f 	dsb	sy
 801869e:	e7fe      	b.n	801869e <xQueueReceive+0x2c>
 80186a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186a4:	f383 8811 	msr	BASEPRI, r3
 80186a8:	f3bf 8f6f 	isb	sy
 80186ac:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80186b0:	e7fe      	b.n	80186b0 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80186b2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d0e3      	beq.n	8018680 <xQueueReceive+0xe>
 80186b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80186bc:	f383 8811 	msr	BASEPRI, r3
 80186c0:	f3bf 8f6f 	isb	sy
 80186c4:	f3bf 8f4f 	dsb	sy
 80186c8:	e7fe      	b.n	80186c8 <xQueueReceive+0x56>
 80186ca:	2600      	movs	r6, #0
 80186cc:	e03e      	b.n	801874c <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80186ce:	4639      	mov	r1, r7
 80186d0:	4620      	mov	r0, r4
 80186d2:	f7ff fd53 	bl	801817c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80186d6:	3d01      	subs	r5, #1
 80186d8:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80186da:	6923      	ldr	r3, [r4, #16]
 80186dc:	b923      	cbnz	r3, 80186e8 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80186de:	f001 fb63 	bl	8019da8 <vPortExitCritical>
				return pdPASS;
 80186e2:	2001      	movs	r0, #1
}
 80186e4:	b005      	add	sp, #20
 80186e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80186e8:	f104 0010 	add.w	r0, r4, #16
 80186ec:	f000 ff08 	bl	8019500 <xTaskRemoveFromEventList>
 80186f0:	2800      	cmp	r0, #0
 80186f2:	d0f4      	beq.n	80186de <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80186f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80186f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80186fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018700:	f3bf 8f4f 	dsb	sy
 8018704:	f3bf 8f6f 	isb	sy
 8018708:	e7e9      	b.n	80186de <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 801870a:	f001 fb4d 	bl	8019da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801870e:	2000      	movs	r0, #0
 8018710:	e7e8      	b.n	80186e4 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018712:	a802      	add	r0, sp, #8
 8018714:	f000 ff3a 	bl	801958c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018718:	2601      	movs	r6, #1
 801871a:	e021      	b.n	8018760 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 801871c:	2300      	movs	r3, #0
 801871e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018722:	e029      	b.n	8018778 <xQueueReceive+0x106>
 8018724:	2300      	movs	r3, #0
 8018726:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801872a:	e02b      	b.n	8018784 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 801872c:	4620      	mov	r0, r4
 801872e:	f7ff fd37 	bl	80181a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018732:	f000 fdbd 	bl	80192b0 <xTaskResumeAll>
 8018736:	e009      	b.n	801874c <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8018738:	4620      	mov	r0, r4
 801873a:	f7ff fd31 	bl	80181a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801873e:	f000 fdb7 	bl	80192b0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018742:	4620      	mov	r0, r4
 8018744:	f7ff fcd2 	bl	80180ec <prvIsQueueEmpty>
 8018748:	2800      	cmp	r0, #0
 801874a:	d13f      	bne.n	80187cc <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 801874c:	f001 fb0a 	bl	8019d64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018750:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018752:	2d00      	cmp	r5, #0
 8018754:	d1bb      	bne.n	80186ce <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018756:	9b01      	ldr	r3, [sp, #4]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d0d6      	beq.n	801870a <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 801875c:	2e00      	cmp	r6, #0
 801875e:	d0d8      	beq.n	8018712 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8018760:	f001 fb22 	bl	8019da8 <vPortExitCritical>
		vTaskSuspendAll();
 8018764:	f000 fd0a 	bl	801917c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018768:	f001 fafc 	bl	8019d64 <vPortEnterCritical>
 801876c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018770:	b25b      	sxtb	r3, r3
 8018772:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018776:	d0d1      	beq.n	801871c <xQueueReceive+0xaa>
 8018778:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801877c:	b25b      	sxtb	r3, r3
 801877e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018782:	d0cf      	beq.n	8018724 <xQueueReceive+0xb2>
 8018784:	f001 fb10 	bl	8019da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018788:	a901      	add	r1, sp, #4
 801878a:	a802      	add	r0, sp, #8
 801878c:	f000 ff0a 	bl	80195a4 <xTaskCheckForTimeOut>
 8018790:	2800      	cmp	r0, #0
 8018792:	d1d1      	bne.n	8018738 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018794:	4620      	mov	r0, r4
 8018796:	f7ff fca9 	bl	80180ec <prvIsQueueEmpty>
 801879a:	2800      	cmp	r0, #0
 801879c:	d0c6      	beq.n	801872c <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801879e:	9901      	ldr	r1, [sp, #4]
 80187a0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80187a4:	f000 fe78 	bl	8019498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80187a8:	4620      	mov	r0, r4
 80187aa:	f7ff fcf9 	bl	80181a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80187ae:	f000 fd7f 	bl	80192b0 <xTaskResumeAll>
 80187b2:	2800      	cmp	r0, #0
 80187b4:	d1ca      	bne.n	801874c <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80187b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80187ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80187be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80187c2:	f3bf 8f4f 	dsb	sy
 80187c6:	f3bf 8f6f 	isb	sy
 80187ca:	e7bf      	b.n	801874c <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80187cc:	2000      	movs	r0, #0
 80187ce:	e789      	b.n	80186e4 <xQueueReceive+0x72>

080187d0 <xQueueSemaphoreTake>:
{
 80187d0:	b570      	push	{r4, r5, r6, lr}
 80187d2:	b084      	sub	sp, #16
 80187d4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80187d6:	b158      	cbz	r0, 80187f0 <xQueueSemaphoreTake+0x20>
 80187d8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80187da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80187dc:	b18b      	cbz	r3, 8018802 <xQueueSemaphoreTake+0x32>
 80187de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187e2:	f383 8811 	msr	BASEPRI, r3
 80187e6:	f3bf 8f6f 	isb	sy
 80187ea:	f3bf 8f4f 	dsb	sy
 80187ee:	e7fe      	b.n	80187ee <xQueueSemaphoreTake+0x1e>
 80187f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187f4:	f383 8811 	msr	BASEPRI, r3
 80187f8:	f3bf 8f6f 	isb	sy
 80187fc:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8018800:	e7fe      	b.n	8018800 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018802:	f000 ff1d 	bl	8019640 <xTaskGetSchedulerState>
 8018806:	4605      	mov	r5, r0
 8018808:	b950      	cbnz	r0, 8018820 <xQueueSemaphoreTake+0x50>
 801880a:	9b01      	ldr	r3, [sp, #4]
 801880c:	b15b      	cbz	r3, 8018826 <xQueueSemaphoreTake+0x56>
 801880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018812:	f383 8811 	msr	BASEPRI, r3
 8018816:	f3bf 8f6f 	isb	sy
 801881a:	f3bf 8f4f 	dsb	sy
 801881e:	e7fe      	b.n	801881e <xQueueSemaphoreTake+0x4e>
 8018820:	2600      	movs	r6, #0
 8018822:	4635      	mov	r5, r6
 8018824:	e055      	b.n	80188d2 <xQueueSemaphoreTake+0x102>
 8018826:	4606      	mov	r6, r0
 8018828:	e053      	b.n	80188d2 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801882a:	3b01      	subs	r3, #1
 801882c:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801882e:	6823      	ldr	r3, [r4, #0]
 8018830:	b13b      	cbz	r3, 8018842 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018832:	6923      	ldr	r3, [r4, #16]
 8018834:	b94b      	cbnz	r3, 801884a <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8018836:	f001 fab7 	bl	8019da8 <vPortExitCritical>
				return pdPASS;
 801883a:	2601      	movs	r6, #1
}
 801883c:	4630      	mov	r0, r6
 801883e:	b004      	add	sp, #16
 8018840:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018842:	f000 fff1 	bl	8019828 <pvTaskIncrementMutexHeldCount>
 8018846:	60a0      	str	r0, [r4, #8]
 8018848:	e7f3      	b.n	8018832 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801884a:	f104 0010 	add.w	r0, r4, #16
 801884e:	f000 fe57 	bl	8019500 <xTaskRemoveFromEventList>
 8018852:	2800      	cmp	r0, #0
 8018854:	d0ef      	beq.n	8018836 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8018856:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801885a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801885e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018862:	f3bf 8f4f 	dsb	sy
 8018866:	f3bf 8f6f 	isb	sy
 801886a:	e7e4      	b.n	8018836 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 801886c:	b146      	cbz	r6, 8018880 <xQueueSemaphoreTake+0xb0>
 801886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018872:	f383 8811 	msr	BASEPRI, r3
 8018876:	f3bf 8f6f 	isb	sy
 801887a:	f3bf 8f4f 	dsb	sy
 801887e:	e7fe      	b.n	801887e <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8018880:	f001 fa92 	bl	8019da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018884:	e7da      	b.n	801883c <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018886:	a802      	add	r0, sp, #8
 8018888:	f000 fe80 	bl	801958c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801888c:	2501      	movs	r5, #1
 801888e:	e02a      	b.n	80188e6 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8018890:	2300      	movs	r3, #0
 8018892:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018896:	e032      	b.n	80188fe <xQueueSemaphoreTake+0x12e>
 8018898:	2300      	movs	r3, #0
 801889a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801889e:	e034      	b.n	801890a <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80188a0:	f001 fa60 	bl	8019d64 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80188a4:	68a0      	ldr	r0, [r4, #8]
 80188a6:	f000 fedb 	bl	8019660 <xTaskPriorityInherit>
 80188aa:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80188ac:	f001 fa7c 	bl	8019da8 <vPortExitCritical>
 80188b0:	e03b      	b.n	801892a <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80188b2:	4620      	mov	r0, r4
 80188b4:	f7ff fc74 	bl	80181a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80188b8:	f000 fcfa 	bl	80192b0 <xTaskResumeAll>
 80188bc:	e009      	b.n	80188d2 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80188be:	4620      	mov	r0, r4
 80188c0:	f7ff fc6e 	bl	80181a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80188c4:	f000 fcf4 	bl	80192b0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80188c8:	4620      	mov	r0, r4
 80188ca:	f7ff fc0f 	bl	80180ec <prvIsQueueEmpty>
 80188ce:	2800      	cmp	r0, #0
 80188d0:	d142      	bne.n	8018958 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80188d2:	f001 fa47 	bl	8019d64 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80188d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d1a6      	bne.n	801882a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80188dc:	9b01      	ldr	r3, [sp, #4]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d0c4      	beq.n	801886c <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80188e2:	2d00      	cmp	r5, #0
 80188e4:	d0cf      	beq.n	8018886 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80188e6:	f001 fa5f 	bl	8019da8 <vPortExitCritical>
		vTaskSuspendAll();
 80188ea:	f000 fc47 	bl	801917c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80188ee:	f001 fa39 	bl	8019d64 <vPortEnterCritical>
 80188f2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80188f6:	b25b      	sxtb	r3, r3
 80188f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80188fc:	d0c8      	beq.n	8018890 <xQueueSemaphoreTake+0xc0>
 80188fe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018902:	b25b      	sxtb	r3, r3
 8018904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018908:	d0c6      	beq.n	8018898 <xQueueSemaphoreTake+0xc8>
 801890a:	f001 fa4d 	bl	8019da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801890e:	a901      	add	r1, sp, #4
 8018910:	a802      	add	r0, sp, #8
 8018912:	f000 fe47 	bl	80195a4 <xTaskCheckForTimeOut>
 8018916:	2800      	cmp	r0, #0
 8018918:	d1d1      	bne.n	80188be <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801891a:	4620      	mov	r0, r4
 801891c:	f7ff fbe6 	bl	80180ec <prvIsQueueEmpty>
 8018920:	2800      	cmp	r0, #0
 8018922:	d0c6      	beq.n	80188b2 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018924:	6823      	ldr	r3, [r4, #0]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d0ba      	beq.n	80188a0 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801892a:	9901      	ldr	r1, [sp, #4]
 801892c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018930:	f000 fdb2 	bl	8019498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018934:	4620      	mov	r0, r4
 8018936:	f7ff fc33 	bl	80181a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801893a:	f000 fcb9 	bl	80192b0 <xTaskResumeAll>
 801893e:	2800      	cmp	r0, #0
 8018940:	d1c7      	bne.n	80188d2 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8018942:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801894a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 801894e:	f3bf 8f4f 	dsb	sy
 8018952:	f3bf 8f6f 	isb	sy
 8018956:	e7bc      	b.n	80188d2 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8018958:	b90e      	cbnz	r6, 801895e <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 801895a:	2600      	movs	r6, #0
 801895c:	e76e      	b.n	801883c <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 801895e:	f001 fa01 	bl	8019d64 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018962:	4620      	mov	r0, r4
 8018964:	f7ff fbab 	bl	80180be <prvGetDisinheritPriorityAfterTimeout>
 8018968:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801896a:	68a0      	ldr	r0, [r4, #8]
 801896c:	f000 ff0c 	bl	8019788 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8018970:	f001 fa1a 	bl	8019da8 <vPortExitCritical>
 8018974:	e7f1      	b.n	801895a <xQueueSemaphoreTake+0x18a>

08018976 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8018976:	b180      	cbz	r0, 801899a <xQueueTakeMutexRecursive+0x24>
	{
 8018978:	b570      	push	{r4, r5, r6, lr}
 801897a:	460c      	mov	r4, r1
 801897c:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801897e:	6886      	ldr	r6, [r0, #8]
 8018980:	f000 fe58 	bl	8019634 <xTaskGetCurrentTaskHandle>
 8018984:	4286      	cmp	r6, r0
 8018986:	d011      	beq.n	80189ac <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8018988:	4621      	mov	r1, r4
 801898a:	4628      	mov	r0, r5
 801898c:	f7ff ff20 	bl	80187d0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8018990:	b180      	cbz	r0, 80189b4 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018992:	68eb      	ldr	r3, [r5, #12]
 8018994:	3301      	adds	r3, #1
 8018996:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8018998:	e00c      	b.n	80189b4 <xQueueTakeMutexRecursive+0x3e>
 801899a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801899e:	f383 8811 	msr	BASEPRI, r3
 80189a2:	f3bf 8f6f 	isb	sy
 80189a6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80189aa:	e7fe      	b.n	80189aa <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80189ac:	68eb      	ldr	r3, [r5, #12]
 80189ae:	3301      	adds	r3, #1
 80189b0:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80189b2:	2001      	movs	r0, #1
	}
 80189b4:	bd70      	pop	{r4, r5, r6, pc}

080189b6 <xQueuePeek>:
{
 80189b6:	b570      	push	{r4, r5, r6, lr}
 80189b8:	b084      	sub	sp, #16
 80189ba:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80189bc:	b190      	cbz	r0, 80189e4 <xQueuePeek+0x2e>
 80189be:	460e      	mov	r6, r1
 80189c0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80189c2:	b1c1      	cbz	r1, 80189f6 <xQueuePeek+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80189c4:	f000 fe3c 	bl	8019640 <xTaskGetSchedulerState>
 80189c8:	4605      	mov	r5, r0
 80189ca:	bb00      	cbnz	r0, 8018a0e <xQueuePeek+0x58>
 80189cc:	9b01      	ldr	r3, [sp, #4]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d05e      	beq.n	8018a90 <xQueuePeek+0xda>
 80189d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189d6:	f383 8811 	msr	BASEPRI, r3
 80189da:	f3bf 8f6f 	isb	sy
 80189de:	f3bf 8f4f 	dsb	sy
 80189e2:	e7fe      	b.n	80189e2 <xQueuePeek+0x2c>
 80189e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189e8:	f383 8811 	msr	BASEPRI, r3
 80189ec:	f3bf 8f6f 	isb	sy
 80189f0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80189f4:	e7fe      	b.n	80189f4 <xQueuePeek+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80189f6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d0e3      	beq.n	80189c4 <xQueuePeek+0xe>
 80189fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a00:	f383 8811 	msr	BASEPRI, r3
 8018a04:	f3bf 8f6f 	isb	sy
 8018a08:	f3bf 8f4f 	dsb	sy
 8018a0c:	e7fe      	b.n	8018a0c <xQueuePeek+0x56>
 8018a0e:	2500      	movs	r5, #0
 8018a10:	e03e      	b.n	8018a90 <xQueuePeek+0xda>
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8018a12:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018a14:	4631      	mov	r1, r6
 8018a16:	4620      	mov	r0, r4
 8018a18:	f7ff fbb0 	bl	801817c <prvCopyDataFromQueue>
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8018a1c:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018a1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018a20:	b923      	cbnz	r3, 8018a2c <xQueuePeek+0x76>
				taskEXIT_CRITICAL();
 8018a22:	f001 f9c1 	bl	8019da8 <vPortExitCritical>
				return pdPASS;
 8018a26:	2001      	movs	r0, #1
}
 8018a28:	b004      	add	sp, #16
 8018a2a:	bd70      	pop	{r4, r5, r6, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018a2c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018a30:	f000 fd66 	bl	8019500 <xTaskRemoveFromEventList>
 8018a34:	2800      	cmp	r0, #0
 8018a36:	d0f4      	beq.n	8018a22 <xQueuePeek+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8018a38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018a40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018a44:	f3bf 8f4f 	dsb	sy
 8018a48:	f3bf 8f6f 	isb	sy
 8018a4c:	e7e9      	b.n	8018a22 <xQueuePeek+0x6c>
					taskEXIT_CRITICAL();
 8018a4e:	f001 f9ab 	bl	8019da8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018a52:	2000      	movs	r0, #0
 8018a54:	e7e8      	b.n	8018a28 <xQueuePeek+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018a56:	a802      	add	r0, sp, #8
 8018a58:	f000 fd98 	bl	801958c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018a5c:	2501      	movs	r5, #1
 8018a5e:	e021      	b.n	8018aa4 <xQueuePeek+0xee>
		prvLockQueue( pxQueue );
 8018a60:	2300      	movs	r3, #0
 8018a62:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018a66:	e029      	b.n	8018abc <xQueuePeek+0x106>
 8018a68:	2300      	movs	r3, #0
 8018a6a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018a6e:	e02b      	b.n	8018ac8 <xQueuePeek+0x112>
				prvUnlockQueue( pxQueue );
 8018a70:	4620      	mov	r0, r4
 8018a72:	f7ff fb95 	bl	80181a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018a76:	f000 fc1b 	bl	80192b0 <xTaskResumeAll>
 8018a7a:	e009      	b.n	8018a90 <xQueuePeek+0xda>
			prvUnlockQueue( pxQueue );
 8018a7c:	4620      	mov	r0, r4
 8018a7e:	f7ff fb8f 	bl	80181a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018a82:	f000 fc15 	bl	80192b0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a86:	4620      	mov	r0, r4
 8018a88:	f7ff fb30 	bl	80180ec <prvIsQueueEmpty>
 8018a8c:	2800      	cmp	r0, #0
 8018a8e:	d13f      	bne.n	8018b10 <xQueuePeek+0x15a>
		taskENTER_CRITICAL();
 8018a90:	f001 f968 	bl	8019d64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018a94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d1bb      	bne.n	8018a12 <xQueuePeek+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018a9a:	9b01      	ldr	r3, [sp, #4]
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d0d6      	beq.n	8018a4e <xQueuePeek+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8018aa0:	2d00      	cmp	r5, #0
 8018aa2:	d0d8      	beq.n	8018a56 <xQueuePeek+0xa0>
		taskEXIT_CRITICAL();
 8018aa4:	f001 f980 	bl	8019da8 <vPortExitCritical>
		vTaskSuspendAll();
 8018aa8:	f000 fb68 	bl	801917c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018aac:	f001 f95a 	bl	8019d64 <vPortEnterCritical>
 8018ab0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018ab4:	b25b      	sxtb	r3, r3
 8018ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018aba:	d0d1      	beq.n	8018a60 <xQueuePeek+0xaa>
 8018abc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018ac0:	b25b      	sxtb	r3, r3
 8018ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018ac6:	d0cf      	beq.n	8018a68 <xQueuePeek+0xb2>
 8018ac8:	f001 f96e 	bl	8019da8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018acc:	a901      	add	r1, sp, #4
 8018ace:	a802      	add	r0, sp, #8
 8018ad0:	f000 fd68 	bl	80195a4 <xTaskCheckForTimeOut>
 8018ad4:	2800      	cmp	r0, #0
 8018ad6:	d1d1      	bne.n	8018a7c <xQueuePeek+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018ad8:	4620      	mov	r0, r4
 8018ada:	f7ff fb07 	bl	80180ec <prvIsQueueEmpty>
 8018ade:	2800      	cmp	r0, #0
 8018ae0:	d0c6      	beq.n	8018a70 <xQueuePeek+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018ae2:	9901      	ldr	r1, [sp, #4]
 8018ae4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018ae8:	f000 fcd6 	bl	8019498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018aec:	4620      	mov	r0, r4
 8018aee:	f7ff fb57 	bl	80181a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018af2:	f000 fbdd 	bl	80192b0 <xTaskResumeAll>
 8018af6:	2800      	cmp	r0, #0
 8018af8:	d1ca      	bne.n	8018a90 <xQueuePeek+0xda>
					portYIELD_WITHIN_API();
 8018afa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b02:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018b06:	f3bf 8f4f 	dsb	sy
 8018b0a:	f3bf 8f6f 	isb	sy
 8018b0e:	e7bf      	b.n	8018a90 <xQueuePeek+0xda>
				return errQUEUE_EMPTY;
 8018b10:	2000      	movs	r0, #0
 8018b12:	e789      	b.n	8018a28 <xQueuePeek+0x72>

08018b14 <xQueueReceiveFromISR>:
{
 8018b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8018b18:	b1b0      	cbz	r0, 8018b48 <xQueueReceiveFromISR+0x34>
 8018b1a:	460d      	mov	r5, r1
 8018b1c:	4690      	mov	r8, r2
 8018b1e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018b20:	b1d9      	cbz	r1, 8018b5a <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018b22:	f001 fa45 	bl	8019fb0 <vPortValidateInterruptPriority>
	__asm volatile
 8018b26:	f3ef 8711 	mrs	r7, BASEPRI
 8018b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b2e:	f383 8811 	msr	BASEPRI, r3
 8018b32:	f3bf 8f6f 	isb	sy
 8018b36:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018b3a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018b3c:	b9ce      	cbnz	r6, 8018b72 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8018b3e:	2000      	movs	r0, #0
	__asm volatile
 8018b40:	f387 8811 	msr	BASEPRI, r7
}
 8018b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8018b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b4c:	f383 8811 	msr	BASEPRI, r3
 8018b50:	f3bf 8f6f 	isb	sy
 8018b54:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018b58:	e7fe      	b.n	8018b58 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018b5a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d0e0      	beq.n	8018b22 <xQueueReceiveFromISR+0xe>
 8018b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b64:	f383 8811 	msr	BASEPRI, r3
 8018b68:	f3bf 8f6f 	isb	sy
 8018b6c:	f3bf 8f4f 	dsb	sy
 8018b70:	e7fe      	b.n	8018b70 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8018b72:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8018b76:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018b7a:	4629      	mov	r1, r5
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	f7ff fafd 	bl	801817c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018b82:	1e73      	subs	r3, r6, #1
 8018b84:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8018b86:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8018b8a:	d006      	beq.n	8018b9a <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018b8c:	f109 0301 	add.w	r3, r9, #1
 8018b90:	b25b      	sxtb	r3, r3
 8018b92:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8018b96:	2001      	movs	r0, #1
 8018b98:	e7d2      	b.n	8018b40 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018b9a:	6923      	ldr	r3, [r4, #16]
 8018b9c:	b90b      	cbnz	r3, 8018ba2 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8018b9e:	2001      	movs	r0, #1
 8018ba0:	e7ce      	b.n	8018b40 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018ba2:	f104 0010 	add.w	r0, r4, #16
 8018ba6:	f000 fcab 	bl	8019500 <xTaskRemoveFromEventList>
 8018baa:	b130      	cbz	r0, 8018bba <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8018bac:	f1b8 0f00 	cmp.w	r8, #0
 8018bb0:	d005      	beq.n	8018bbe <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018bb2:	2001      	movs	r0, #1
 8018bb4:	f8c8 0000 	str.w	r0, [r8]
 8018bb8:	e7c2      	b.n	8018b40 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8018bba:	2001      	movs	r0, #1
 8018bbc:	e7c0      	b.n	8018b40 <xQueueReceiveFromISR+0x2c>
 8018bbe:	2001      	movs	r0, #1
 8018bc0:	e7be      	b.n	8018b40 <xQueueReceiveFromISR+0x2c>

08018bc2 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8018bc2:	b140      	cbz	r0, 8018bd6 <uxQueueMessagesWaiting+0x14>
{
 8018bc4:	b510      	push	{r4, lr}
 8018bc6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018bc8:	f001 f8cc 	bl	8019d64 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8018bcc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8018bce:	f001 f8eb 	bl	8019da8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018bd2:	4620      	mov	r0, r4
 8018bd4:	bd10      	pop	{r4, pc}
 8018bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bda:	f383 8811 	msr	BASEPRI, r3
 8018bde:	f3bf 8f6f 	isb	sy
 8018be2:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8018be6:	e7fe      	b.n	8018be6 <uxQueueMessagesWaiting+0x24>

08018be8 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8018be8:	b108      	cbz	r0, 8018bee <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8018bea:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018bec:	4770      	bx	lr
 8018bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018bf2:	f383 8811 	msr	BASEPRI, r3
 8018bf6:	f3bf 8f6f 	isb	sy
 8018bfa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8018bfe:	e7fe      	b.n	8018bfe <uxQueueMessagesWaitingFromISR+0x16>

08018c00 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018c00:	2300      	movs	r3, #0
 8018c02:	2b07      	cmp	r3, #7
 8018c04:	d80c      	bhi.n	8018c20 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018c06:	4a07      	ldr	r2, [pc, #28]	@ (8018c24 <vQueueAddToRegistry+0x24>)
 8018c08:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018c0c:	b10a      	cbz	r2, 8018c12 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018c0e:	3301      	adds	r3, #1
 8018c10:	e7f7      	b.n	8018c02 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018c12:	4a04      	ldr	r2, [pc, #16]	@ (8018c24 <vQueueAddToRegistry+0x24>)
 8018c14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018c18:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8018c1c:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018c1e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018c20:	4770      	bx	lr
 8018c22:	bf00      	nop
 8018c24:	20002f0c 	.word	0x20002f0c

08018c28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018c28:	b570      	push	{r4, r5, r6, lr}
 8018c2a:	4604      	mov	r4, r0
 8018c2c:	460d      	mov	r5, r1
 8018c2e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018c30:	f001 f898 	bl	8019d64 <vPortEnterCritical>
 8018c34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018c38:	b25b      	sxtb	r3, r3
 8018c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018c3e:	d00d      	beq.n	8018c5c <vQueueWaitForMessageRestricted+0x34>
 8018c40:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018c44:	b25b      	sxtb	r3, r3
 8018c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018c4a:	d00b      	beq.n	8018c64 <vQueueWaitForMessageRestricted+0x3c>
 8018c4c:	f001 f8ac 	bl	8019da8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018c50:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8018c52:	b15b      	cbz	r3, 8018c6c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018c54:	4620      	mov	r0, r4
 8018c56:	f7ff faa3 	bl	80181a0 <prvUnlockQueue>
	}
 8018c5a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8018c62:	e7ed      	b.n	8018c40 <vQueueWaitForMessageRestricted+0x18>
 8018c64:	2300      	movs	r3, #0
 8018c66:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8018c6a:	e7ef      	b.n	8018c4c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018c6c:	4632      	mov	r2, r6
 8018c6e:	4629      	mov	r1, r5
 8018c70:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8018c74:	f000 fc28 	bl	80194c8 <vTaskPlaceOnEventListRestricted>
 8018c78:	e7ec      	b.n	8018c54 <vQueueWaitForMessageRestricted+0x2c>
	...

08018c7c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018c7c:	4b08      	ldr	r3, [pc, #32]	@ (8018ca0 <prvResetNextTaskUnblockTime+0x24>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	b923      	cbnz	r3, 8018c8e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018c84:	4b07      	ldr	r3, [pc, #28]	@ (8018ca4 <prvResetNextTaskUnblockTime+0x28>)
 8018c86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018c8a:	601a      	str	r2, [r3, #0]
 8018c8c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c8e:	4b04      	ldr	r3, [pc, #16]	@ (8018ca0 <prvResetNextTaskUnblockTime+0x24>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	68db      	ldr	r3, [r3, #12]
 8018c94:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018c96:	685a      	ldr	r2, [r3, #4]
 8018c98:	4b02      	ldr	r3, [pc, #8]	@ (8018ca4 <prvResetNextTaskUnblockTime+0x28>)
 8018c9a:	601a      	str	r2, [r3, #0]
	}
}
 8018c9c:	4770      	bx	lr
 8018c9e:	bf00      	nop
 8018ca0:	20002fbc 	.word	0x20002fbc
 8018ca4:	20002f54 	.word	0x20002f54

08018ca8 <prvInitialiseNewTask>:
{
 8018ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cac:	4680      	mov	r8, r0
 8018cae:	460d      	mov	r5, r1
 8018cb0:	4617      	mov	r7, r2
 8018cb2:	4699      	mov	r9, r3
 8018cb4:	9e08      	ldr	r6, [sp, #32]
 8018cb6:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 8018cba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018cbc:	0092      	lsls	r2, r2, #2
 8018cbe:	21a5      	movs	r1, #165	@ 0xa5
 8018cc0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018cc2:	f013 f995 	bl	802bff0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018cc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018cc8:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 8018ccc:	3a01      	subs	r2, #1
 8018cce:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018cd2:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8018cd6:	2d00      	cmp	r5, #0
 8018cd8:	d061      	beq.n	8018d9e <prvInitialiseNewTask+0xf6>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018cda:	f04f 0c00 	mov.w	ip, #0
 8018cde:	f1bc 0f0f 	cmp.w	ip, #15
 8018ce2:	d809      	bhi.n	8018cf8 <prvInitialiseNewTask+0x50>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018ce4:	f815 300c 	ldrb.w	r3, [r5, ip]
 8018ce8:	eb04 020c 	add.w	r2, r4, ip
 8018cec:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8018cf0:	b113      	cbz	r3, 8018cf8 <prvInitialiseNewTask+0x50>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018cf2:	f10c 0c01 	add.w	ip, ip, #1
 8018cf6:	e7f2      	b.n	8018cde <prvInitialiseNewTask+0x36>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018cfe:	2e37      	cmp	r6, #55	@ 0x37
 8018d00:	d900      	bls.n	8018d04 <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018d02:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 8018d04:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8018d06:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018d08:	2500      	movs	r5, #0
 8018d0a:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018d0c:	1d20      	adds	r0, r4, #4
 8018d0e:	f7ff f99c 	bl	801804a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018d12:	f104 0018 	add.w	r0, r4, #24
 8018d16:	f7ff f998 	bl	801804a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018d1a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018d1c:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 8018d20:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018d22:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8018d24:	f8c4 5178 	str.w	r5, [r4, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018d28:	f884 517c 	strb.w	r5, [r4, #380]	@ 0x17c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8018d2c:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8018d30:	4629      	mov	r1, r5
 8018d32:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018d36:	f013 f95b 	bl	802bff0 <memset>
 8018d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8018da8 <prvInitialiseNewTask+0x100>)
 8018d3c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8018d3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018d42:	6622      	str	r2, [r4, #96]	@ 0x60
 8018d44:	33d0      	adds	r3, #208	@ 0xd0
 8018d46:	6663      	str	r3, [r4, #100]	@ 0x64
 8018d48:	2201      	movs	r2, #1
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	e9c4 233c 	strd	r2, r3, [r4, #240]	@ 0xf0
 8018d50:	f243 330e 	movw	r3, #13070	@ 0x330e
 8018d54:	f8a4 30f8 	strh.w	r3, [r4, #248]	@ 0xf8
 8018d58:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 8018d5c:	f8a4 30fa 	strh.w	r3, [r4, #250]	@ 0xfa
 8018d60:	f241 2334 	movw	r3, #4660	@ 0x1234
 8018d64:	f8a4 30fc 	strh.w	r3, [r4, #252]	@ 0xfc
 8018d68:	f24e 636d 	movw	r3, #58989	@ 0xe66d
 8018d6c:	f8a4 30fe 	strh.w	r3, [r4, #254]	@ 0xfe
 8018d70:	f64d 63ec 	movw	r3, #57068	@ 0xdeec
 8018d74:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
 8018d78:	2305      	movs	r3, #5
 8018d7a:	f8a4 3102 	strh.w	r3, [r4, #258]	@ 0x102
 8018d7e:	230b      	movs	r3, #11
 8018d80:	f8a4 3104 	strh.w	r3, [r4, #260]	@ 0x104
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018d84:	464a      	mov	r2, r9
 8018d86:	4641      	mov	r1, r8
 8018d88:	4638      	mov	r0, r7
 8018d8a:	f000 ffc3 	bl	8019d14 <pxPortInitialiseStack>
 8018d8e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8018d90:	f1ba 0f00 	cmp.w	sl, #0
 8018d94:	d001      	beq.n	8018d9a <prvInitialiseNewTask+0xf2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018d96:	f8ca 4000 	str.w	r4, [sl]
}
 8018d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018d9e:	2300      	movs	r3, #0
 8018da0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8018da4:	e7ab      	b.n	8018cfe <prvInitialiseNewTask+0x56>
 8018da6:	bf00      	nop
 8018da8:	20019784 	.word	0x20019784

08018dac <prvInitialiseTaskLists>:
{
 8018dac:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018dae:	2400      	movs	r4, #0
 8018db0:	e007      	b.n	8018dc2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018db2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8018db6:	0093      	lsls	r3, r2, #2
 8018db8:	480e      	ldr	r0, [pc, #56]	@ (8018df4 <prvInitialiseTaskLists+0x48>)
 8018dba:	4418      	add	r0, r3
 8018dbc:	f7ff f93a 	bl	8018034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018dc0:	3401      	adds	r4, #1
 8018dc2:	2c37      	cmp	r4, #55	@ 0x37
 8018dc4:	d9f5      	bls.n	8018db2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8018dc6:	4d0c      	ldr	r5, [pc, #48]	@ (8018df8 <prvInitialiseTaskLists+0x4c>)
 8018dc8:	4628      	mov	r0, r5
 8018dca:	f7ff f933 	bl	8018034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018dce:	4c0b      	ldr	r4, [pc, #44]	@ (8018dfc <prvInitialiseTaskLists+0x50>)
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	f7ff f92f 	bl	8018034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018dd6:	480a      	ldr	r0, [pc, #40]	@ (8018e00 <prvInitialiseTaskLists+0x54>)
 8018dd8:	f7ff f92c 	bl	8018034 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8018ddc:	4809      	ldr	r0, [pc, #36]	@ (8018e04 <prvInitialiseTaskLists+0x58>)
 8018dde:	f7ff f929 	bl	8018034 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8018de2:	4809      	ldr	r0, [pc, #36]	@ (8018e08 <prvInitialiseTaskLists+0x5c>)
 8018de4:	f7ff f926 	bl	8018034 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8018de8:	4b08      	ldr	r3, [pc, #32]	@ (8018e0c <prvInitialiseTaskLists+0x60>)
 8018dea:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018dec:	4b08      	ldr	r3, [pc, #32]	@ (8018e10 <prvInitialiseTaskLists+0x64>)
 8018dee:	601c      	str	r4, [r3, #0]
}
 8018df0:	bd38      	pop	{r3, r4, r5, pc}
 8018df2:	bf00      	nop
 8018df4:	20002fe8 	.word	0x20002fe8
 8018df8:	20002fd4 	.word	0x20002fd4
 8018dfc:	20002fc0 	.word	0x20002fc0
 8018e00:	20002fa4 	.word	0x20002fa4
 8018e04:	20002f90 	.word	0x20002f90
 8018e08:	20002f78 	.word	0x20002f78
 8018e0c:	20002fbc 	.word	0x20002fbc
 8018e10:	20002fb8 	.word	0x20002fb8

08018e14 <prvAddNewTaskToReadyList>:
{
 8018e14:	b510      	push	{r4, lr}
 8018e16:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8018e18:	f000 ffa4 	bl	8019d64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8018e1c:	4a22      	ldr	r2, [pc, #136]	@ (8018ea8 <prvAddNewTaskToReadyList+0x94>)
 8018e1e:	6813      	ldr	r3, [r2, #0]
 8018e20:	3301      	adds	r3, #1
 8018e22:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018e24:	4b21      	ldr	r3, [pc, #132]	@ (8018eac <prvAddNewTaskToReadyList+0x98>)
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	b15b      	cbz	r3, 8018e42 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8018e2a:	4b21      	ldr	r3, [pc, #132]	@ (8018eb0 <prvAddNewTaskToReadyList+0x9c>)
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	b96b      	cbnz	r3, 8018e4c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018e30:	4b1e      	ldr	r3, [pc, #120]	@ (8018eac <prvAddNewTaskToReadyList+0x98>)
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8018e38:	429a      	cmp	r2, r3
 8018e3a:	d807      	bhi.n	8018e4c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8018e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8018eac <prvAddNewTaskToReadyList+0x98>)
 8018e3e:	601c      	str	r4, [r3, #0]
 8018e40:	e004      	b.n	8018e4c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8018e42:	4b1a      	ldr	r3, [pc, #104]	@ (8018eac <prvAddNewTaskToReadyList+0x98>)
 8018e44:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018e46:	6813      	ldr	r3, [r2, #0]
 8018e48:	2b01      	cmp	r3, #1
 8018e4a:	d029      	beq.n	8018ea0 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8018e4c:	4a19      	ldr	r2, [pc, #100]	@ (8018eb4 <prvAddNewTaskToReadyList+0xa0>)
 8018e4e:	6813      	ldr	r3, [r2, #0]
 8018e50:	3301      	adds	r3, #1
 8018e52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018e54:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8018e56:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018e58:	4b17      	ldr	r3, [pc, #92]	@ (8018eb8 <prvAddNewTaskToReadyList+0xa4>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	4298      	cmp	r0, r3
 8018e5e:	d901      	bls.n	8018e64 <prvAddNewTaskToReadyList+0x50>
 8018e60:	4b15      	ldr	r3, [pc, #84]	@ (8018eb8 <prvAddNewTaskToReadyList+0xa4>)
 8018e62:	6018      	str	r0, [r3, #0]
 8018e64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018e68:	1d21      	adds	r1, r4, #4
 8018e6a:	4b14      	ldr	r3, [pc, #80]	@ (8018ebc <prvAddNewTaskToReadyList+0xa8>)
 8018e6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018e70:	f7ff f8ee 	bl	8018050 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8018e74:	f000 ff98 	bl	8019da8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8018e78:	4b0d      	ldr	r3, [pc, #52]	@ (8018eb0 <prvAddNewTaskToReadyList+0x9c>)
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	b17b      	cbz	r3, 8018e9e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8018eac <prvAddNewTaskToReadyList+0x98>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018e84:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8018e86:	429a      	cmp	r2, r3
 8018e88:	d209      	bcs.n	8018e9e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8018e8a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e92:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018e96:	f3bf 8f4f 	dsb	sy
 8018e9a:	f3bf 8f6f 	isb	sy
}
 8018e9e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8018ea0:	f7ff ff84 	bl	8018dac <prvInitialiseTaskLists>
 8018ea4:	e7d2      	b.n	8018e4c <prvAddNewTaskToReadyList+0x38>
 8018ea6:	bf00      	nop
 8018ea8:	20002f74 	.word	0x20002f74
 8018eac:	20003448 	.word	0x20003448
 8018eb0:	20002f68 	.word	0x20002f68
 8018eb4:	20002f58 	.word	0x20002f58
 8018eb8:	20002f6c 	.word	0x20002f6c
 8018ebc:	20002fe8 	.word	0x20002fe8

08018ec0 <prvDeleteTCB>:
	{
 8018ec0:	b510      	push	{r4, lr}
 8018ec2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8018ec4:	3058      	adds	r0, #88	@ 0x58
 8018ec6:	f014 fa35 	bl	802d334 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018eca:	f894 317d 	ldrb.w	r3, [r4, #381]	@ 0x17d
 8018ece:	b163      	cbz	r3, 8018eea <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018ed0:	2b01      	cmp	r3, #1
 8018ed2:	d011      	beq.n	8018ef8 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018ed4:	2b02      	cmp	r3, #2
 8018ed6:	d00e      	beq.n	8018ef6 <prvDeleteTCB+0x36>
 8018ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018edc:	f383 8811 	msr	BASEPRI, r3
 8018ee0:	f3bf 8f6f 	isb	sy
 8018ee4:	f3bf 8f4f 	dsb	sy
 8018ee8:	e7fe      	b.n	8018ee8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8018eea:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018eec:	f001 f976 	bl	801a1dc <vPortFree>
				vPortFree( pxTCB );
 8018ef0:	4620      	mov	r0, r4
 8018ef2:	f001 f973 	bl	801a1dc <vPortFree>
	}
 8018ef6:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8018ef8:	4620      	mov	r0, r4
 8018efa:	f001 f96f 	bl	801a1dc <vPortFree>
 8018efe:	e7fa      	b.n	8018ef6 <prvDeleteTCB+0x36>

08018f00 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018f00:	4b0f      	ldr	r3, [pc, #60]	@ (8018f40 <prvCheckTasksWaitingTermination+0x40>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	b1d3      	cbz	r3, 8018f3c <prvCheckTasksWaitingTermination+0x3c>
{
 8018f06:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8018f08:	f000 ff2c 	bl	8019d64 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8018f44 <prvCheckTasksWaitingTermination+0x44>)
 8018f0e:	68db      	ldr	r3, [r3, #12]
 8018f10:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018f12:	1d20      	adds	r0, r4, #4
 8018f14:	f7ff f8c0 	bl	8018098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018f18:	4a0b      	ldr	r2, [pc, #44]	@ (8018f48 <prvCheckTasksWaitingTermination+0x48>)
 8018f1a:	6813      	ldr	r3, [r2, #0]
 8018f1c:	3b01      	subs	r3, #1
 8018f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018f20:	4a07      	ldr	r2, [pc, #28]	@ (8018f40 <prvCheckTasksWaitingTermination+0x40>)
 8018f22:	6813      	ldr	r3, [r2, #0]
 8018f24:	3b01      	subs	r3, #1
 8018f26:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8018f28:	f000 ff3e 	bl	8019da8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8018f2c:	4620      	mov	r0, r4
 8018f2e:	f7ff ffc7 	bl	8018ec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018f32:	4b03      	ldr	r3, [pc, #12]	@ (8018f40 <prvCheckTasksWaitingTermination+0x40>)
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d1e6      	bne.n	8018f08 <prvCheckTasksWaitingTermination+0x8>
}
 8018f3a:	bd10      	pop	{r4, pc}
 8018f3c:	4770      	bx	lr
 8018f3e:	bf00      	nop
 8018f40:	20002f8c 	.word	0x20002f8c
 8018f44:	20002f90 	.word	0x20002f90
 8018f48:	20002f74 	.word	0x20002f74

08018f4c <prvIdleTask>:
{
 8018f4c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8018f4e:	f7ff ffd7 	bl	8018f00 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018f52:	4b07      	ldr	r3, [pc, #28]	@ (8018f70 <prvIdleTask+0x24>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	d9f9      	bls.n	8018f4e <prvIdleTask+0x2>
				taskYIELD();
 8018f5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8018f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018f62:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8018f66:	f3bf 8f4f 	dsb	sy
 8018f6a:	f3bf 8f6f 	isb	sy
 8018f6e:	e7ee      	b.n	8018f4e <prvIdleTask+0x2>
 8018f70:	20002fe8 	.word	0x20002fe8

08018f74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018f74:	b570      	push	{r4, r5, r6, lr}
 8018f76:	4604      	mov	r4, r0
 8018f78:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018f7a:	4b17      	ldr	r3, [pc, #92]	@ (8018fd8 <prvAddCurrentTaskToDelayedList+0x64>)
 8018f7c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018f7e:	4b17      	ldr	r3, [pc, #92]	@ (8018fdc <prvAddCurrentTaskToDelayedList+0x68>)
 8018f80:	6818      	ldr	r0, [r3, #0]
 8018f82:	3004      	adds	r0, #4
 8018f84:	f7ff f888 	bl	8018098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018f88:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8018f8c:	d00d      	beq.n	8018faa <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018f8e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018f90:	4b12      	ldr	r3, [pc, #72]	@ (8018fdc <prvAddCurrentTaskToDelayedList+0x68>)
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8018f96:	42a6      	cmp	r6, r4
 8018f98:	d910      	bls.n	8018fbc <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018f9a:	4b11      	ldr	r3, [pc, #68]	@ (8018fe0 <prvAddCurrentTaskToDelayedList+0x6c>)
 8018f9c:	6818      	ldr	r0, [r3, #0]
 8018f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8018fdc <prvAddCurrentTaskToDelayedList+0x68>)
 8018fa0:	6819      	ldr	r1, [r3, #0]
 8018fa2:	3104      	adds	r1, #4
 8018fa4:	f7ff f85f 	bl	8018066 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018fa8:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018faa:	2d00      	cmp	r5, #0
 8018fac:	d0ef      	beq.n	8018f8e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018fae:	4b0b      	ldr	r3, [pc, #44]	@ (8018fdc <prvAddCurrentTaskToDelayedList+0x68>)
 8018fb0:	6819      	ldr	r1, [r3, #0]
 8018fb2:	3104      	adds	r1, #4
 8018fb4:	480b      	ldr	r0, [pc, #44]	@ (8018fe4 <prvAddCurrentTaskToDelayedList+0x70>)
 8018fb6:	f7ff f84b 	bl	8018050 <vListInsertEnd>
 8018fba:	e7f5      	b.n	8018fa8 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8018fe8 <prvAddCurrentTaskToDelayedList+0x74>)
 8018fbe:	6818      	ldr	r0, [r3, #0]
 8018fc0:	4b06      	ldr	r3, [pc, #24]	@ (8018fdc <prvAddCurrentTaskToDelayedList+0x68>)
 8018fc2:	6819      	ldr	r1, [r3, #0]
 8018fc4:	3104      	adds	r1, #4
 8018fc6:	f7ff f84e 	bl	8018066 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018fca:	4b08      	ldr	r3, [pc, #32]	@ (8018fec <prvAddCurrentTaskToDelayedList+0x78>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	42a3      	cmp	r3, r4
 8018fd0:	d9ea      	bls.n	8018fa8 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8018fd2:	4b06      	ldr	r3, [pc, #24]	@ (8018fec <prvAddCurrentTaskToDelayedList+0x78>)
 8018fd4:	601c      	str	r4, [r3, #0]
}
 8018fd6:	e7e7      	b.n	8018fa8 <prvAddCurrentTaskToDelayedList+0x34>
 8018fd8:	20002f70 	.word	0x20002f70
 8018fdc:	20003448 	.word	0x20003448
 8018fe0:	20002fb8 	.word	0x20002fb8
 8018fe4:	20002f78 	.word	0x20002f78
 8018fe8:	20002fbc 	.word	0x20002fbc
 8018fec:	20002f54 	.word	0x20002f54

08018ff0 <xTaskCreateStatic>:
	{
 8018ff0:	b530      	push	{r4, r5, lr}
 8018ff2:	b087      	sub	sp, #28
 8018ff4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8018ff6:	b18c      	cbz	r4, 801901c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8018ff8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8018ffa:	b1c5      	cbz	r5, 801902e <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8018ffc:	f44f 75c0 	mov.w	r5, #384	@ 0x180
 8019000:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019002:	9d04      	ldr	r5, [sp, #16]
 8019004:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8019008:	d01a      	beq.n	8019040 <xTaskCreateStatic+0x50>
 801900a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801900e:	f383 8811 	msr	BASEPRI, r3
 8019012:	f3bf 8f6f 	isb	sy
 8019016:	f3bf 8f4f 	dsb	sy
 801901a:	e7fe      	b.n	801901a <xTaskCreateStatic+0x2a>
 801901c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019020:	f383 8811 	msr	BASEPRI, r3
 8019024:	f3bf 8f6f 	isb	sy
 8019028:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 801902c:	e7fe      	b.n	801902c <xTaskCreateStatic+0x3c>
 801902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019032:	f383 8811 	msr	BASEPRI, r3
 8019036:	f3bf 8f6f 	isb	sy
 801903a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 801903e:	e7fe      	b.n	801903e <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019040:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019042:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019044:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019046:	2402      	movs	r4, #2
 8019048:	f885 417d 	strb.w	r4, [r5, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801904c:	2400      	movs	r4, #0
 801904e:	9403      	str	r4, [sp, #12]
 8019050:	9502      	str	r5, [sp, #8]
 8019052:	ac05      	add	r4, sp, #20
 8019054:	9401      	str	r4, [sp, #4]
 8019056:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019058:	9400      	str	r4, [sp, #0]
 801905a:	f7ff fe25 	bl	8018ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801905e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8019060:	f7ff fed8 	bl	8018e14 <prvAddNewTaskToReadyList>
	}
 8019064:	9805      	ldr	r0, [sp, #20]
 8019066:	b007      	add	sp, #28
 8019068:	bd30      	pop	{r4, r5, pc}

0801906a <xTaskCreate>:
	{
 801906a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801906e:	b085      	sub	sp, #20
 8019070:	4607      	mov	r7, r0
 8019072:	4688      	mov	r8, r1
 8019074:	4614      	mov	r4, r2
 8019076:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019078:	0090      	lsls	r0, r2, #2
 801907a:	f001 f82d 	bl	801a0d8 <pvPortMalloc>
			if( pxStack != NULL )
 801907e:	b310      	cbz	r0, 80190c6 <xTaskCreate+0x5c>
 8019080:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019082:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8019086:	f001 f827 	bl	801a0d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801908a:	4605      	mov	r5, r0
 801908c:	b1a8      	cbz	r0, 80190ba <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 801908e:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019092:	2300      	movs	r3, #0
 8019094:	f880 317d 	strb.w	r3, [r0, #381]	@ 0x17d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019098:	9303      	str	r3, [sp, #12]
 801909a:	9002      	str	r0, [sp, #8]
 801909c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801909e:	9301      	str	r3, [sp, #4]
 80190a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80190a2:	9300      	str	r3, [sp, #0]
 80190a4:	4633      	mov	r3, r6
 80190a6:	4622      	mov	r2, r4
 80190a8:	4641      	mov	r1, r8
 80190aa:	4638      	mov	r0, r7
 80190ac:	f7ff fdfc 	bl	8018ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80190b0:	4628      	mov	r0, r5
 80190b2:	f7ff feaf 	bl	8018e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80190b6:	2001      	movs	r0, #1
 80190b8:	e007      	b.n	80190ca <xTaskCreate+0x60>
					vPortFree( pxStack );
 80190ba:	4648      	mov	r0, r9
 80190bc:	f001 f88e 	bl	801a1dc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80190c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80190c4:	e001      	b.n	80190ca <xTaskCreate+0x60>
 80190c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 80190ca:	b005      	add	sp, #20
 80190cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080190d0 <vTaskStartScheduler>:
{
 80190d0:	b510      	push	{r4, lr}
 80190d2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80190d4:	2400      	movs	r4, #0
 80190d6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80190d8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80190da:	aa07      	add	r2, sp, #28
 80190dc:	a906      	add	r1, sp, #24
 80190de:	a805      	add	r0, sp, #20
 80190e0:	f7fe ff90 	bl	8018004 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80190e4:	9b05      	ldr	r3, [sp, #20]
 80190e6:	9302      	str	r3, [sp, #8]
 80190e8:	9b06      	ldr	r3, [sp, #24]
 80190ea:	9301      	str	r3, [sp, #4]
 80190ec:	9400      	str	r4, [sp, #0]
 80190ee:	4623      	mov	r3, r4
 80190f0:	9a07      	ldr	r2, [sp, #28]
 80190f2:	491a      	ldr	r1, [pc, #104]	@ (801915c <vTaskStartScheduler+0x8c>)
 80190f4:	481a      	ldr	r0, [pc, #104]	@ (8019160 <vTaskStartScheduler+0x90>)
 80190f6:	f7ff ff7b 	bl	8018ff0 <xTaskCreateStatic>
 80190fa:	4b1a      	ldr	r3, [pc, #104]	@ (8019164 <vTaskStartScheduler+0x94>)
 80190fc:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 80190fe:	b1e8      	cbz	r0, 801913c <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 8019100:	f000 fc0c 	bl	801991c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8019104:	2801      	cmp	r0, #1
 8019106:	d11a      	bne.n	801913e <vTaskStartScheduler+0x6e>
 8019108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801910c:	f383 8811 	msr	BASEPRI, r3
 8019110:	f3bf 8f6f 	isb	sy
 8019114:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019118:	4b13      	ldr	r3, [pc, #76]	@ (8019168 <vTaskStartScheduler+0x98>)
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	3358      	adds	r3, #88	@ 0x58
 801911e:	4a13      	ldr	r2, [pc, #76]	@ (801916c <vTaskStartScheduler+0x9c>)
 8019120:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8019122:	4b13      	ldr	r3, [pc, #76]	@ (8019170 <vTaskStartScheduler+0xa0>)
 8019124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019128:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801912a:	4b12      	ldr	r3, [pc, #72]	@ (8019174 <vTaskStartScheduler+0xa4>)
 801912c:	2201      	movs	r2, #1
 801912e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019130:	4b11      	ldr	r3, [pc, #68]	@ (8019178 <vTaskStartScheduler+0xa8>)
 8019132:	2200      	movs	r2, #0
 8019134:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8019136:	f000 feaf 	bl	8019e98 <xPortStartScheduler>
 801913a:	e003      	b.n	8019144 <vTaskStartScheduler+0x74>
			xReturn = pdFAIL;
 801913c:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801913e:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8019142:	d001      	beq.n	8019148 <vTaskStartScheduler+0x78>
}
 8019144:	b008      	add	sp, #32
 8019146:	bd10      	pop	{r4, pc}
 8019148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801914c:	f383 8811 	msr	BASEPRI, r3
 8019150:	f3bf 8f6f 	isb	sy
 8019154:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019158:	e7fe      	b.n	8019158 <vTaskStartScheduler+0x88>
 801915a:	bf00      	nop
 801915c:	08038118 	.word	0x08038118
 8019160:	08018f4d 	.word	0x08018f4d
 8019164:	20002f50 	.word	0x20002f50
 8019168:	20003448 	.word	0x20003448
 801916c:	200002d8 	.word	0x200002d8
 8019170:	20002f54 	.word	0x20002f54
 8019174:	20002f68 	.word	0x20002f68
 8019178:	20002f70 	.word	0x20002f70

0801917c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 801917c:	4a02      	ldr	r2, [pc, #8]	@ (8019188 <vTaskSuspendAll+0xc>)
 801917e:	6813      	ldr	r3, [r2, #0]
 8019180:	3301      	adds	r3, #1
 8019182:	6013      	str	r3, [r2, #0]
}
 8019184:	4770      	bx	lr
 8019186:	bf00      	nop
 8019188:	20002f4c 	.word	0x20002f4c

0801918c <xTaskGetTickCount>:
		xTicks = xTickCount;
 801918c:	4b01      	ldr	r3, [pc, #4]	@ (8019194 <xTaskGetTickCount+0x8>)
 801918e:	6818      	ldr	r0, [r3, #0]
}
 8019190:	4770      	bx	lr
 8019192:	bf00      	nop
 8019194:	20002f70 	.word	0x20002f70

08019198 <xTaskIncrementTick>:
{
 8019198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801919a:	4b3a      	ldr	r3, [pc, #232]	@ (8019284 <xTaskIncrementTick+0xec>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d169      	bne.n	8019276 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80191a2:	4b39      	ldr	r3, [pc, #228]	@ (8019288 <xTaskIncrementTick+0xf0>)
 80191a4:	681d      	ldr	r5, [r3, #0]
 80191a6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80191a8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80191aa:	b9c5      	cbnz	r5, 80191de <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80191ac:	4b37      	ldr	r3, [pc, #220]	@ (801928c <xTaskIncrementTick+0xf4>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	b143      	cbz	r3, 80191c6 <xTaskIncrementTick+0x2e>
 80191b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191b8:	f383 8811 	msr	BASEPRI, r3
 80191bc:	f3bf 8f6f 	isb	sy
 80191c0:	f3bf 8f4f 	dsb	sy
 80191c4:	e7fe      	b.n	80191c4 <xTaskIncrementTick+0x2c>
 80191c6:	4a31      	ldr	r2, [pc, #196]	@ (801928c <xTaskIncrementTick+0xf4>)
 80191c8:	6811      	ldr	r1, [r2, #0]
 80191ca:	4b31      	ldr	r3, [pc, #196]	@ (8019290 <xTaskIncrementTick+0xf8>)
 80191cc:	6818      	ldr	r0, [r3, #0]
 80191ce:	6010      	str	r0, [r2, #0]
 80191d0:	6019      	str	r1, [r3, #0]
 80191d2:	4a30      	ldr	r2, [pc, #192]	@ (8019294 <xTaskIncrementTick+0xfc>)
 80191d4:	6813      	ldr	r3, [r2, #0]
 80191d6:	3301      	adds	r3, #1
 80191d8:	6013      	str	r3, [r2, #0]
 80191da:	f7ff fd4f 	bl	8018c7c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80191de:	4b2e      	ldr	r3, [pc, #184]	@ (8019298 <xTaskIncrementTick+0x100>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	42ab      	cmp	r3, r5
 80191e4:	d93d      	bls.n	8019262 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80191e6:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80191e8:	4b2c      	ldr	r3, [pc, #176]	@ (801929c <xTaskIncrementTick+0x104>)
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80191ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80191f2:	009a      	lsls	r2, r3, #2
 80191f4:	4b2a      	ldr	r3, [pc, #168]	@ (80192a0 <xTaskIncrementTick+0x108>)
 80191f6:	589b      	ldr	r3, [r3, r2]
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	d900      	bls.n	80191fe <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 80191fc:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 80191fe:	4b29      	ldr	r3, [pc, #164]	@ (80192a4 <xTaskIncrementTick+0x10c>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d03c      	beq.n	8019280 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8019206:	2701      	movs	r7, #1
	return xSwitchRequired;
 8019208:	e03a      	b.n	8019280 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 801920a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801920c:	4b1f      	ldr	r3, [pc, #124]	@ (801928c <xTaskIncrementTick+0xf4>)
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	b343      	cbz	r3, 8019266 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019214:	4b1d      	ldr	r3, [pc, #116]	@ (801928c <xTaskIncrementTick+0xf4>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	68db      	ldr	r3, [r3, #12]
 801921a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801921c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 801921e:	429d      	cmp	r5, r3
 8019220:	d326      	bcc.n	8019270 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019222:	1d26      	adds	r6, r4, #4
 8019224:	4630      	mov	r0, r6
 8019226:	f7fe ff37 	bl	8018098 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801922a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801922c:	b11b      	cbz	r3, 8019236 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801922e:	f104 0018 	add.w	r0, r4, #24
 8019232:	f7fe ff31 	bl	8018098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019236:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8019238:	4a1b      	ldr	r2, [pc, #108]	@ (80192a8 <xTaskIncrementTick+0x110>)
 801923a:	6812      	ldr	r2, [r2, #0]
 801923c:	4293      	cmp	r3, r2
 801923e:	d901      	bls.n	8019244 <xTaskIncrementTick+0xac>
 8019240:	4a19      	ldr	r2, [pc, #100]	@ (80192a8 <xTaskIncrementTick+0x110>)
 8019242:	6013      	str	r3, [r2, #0]
 8019244:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019248:	009a      	lsls	r2, r3, #2
 801924a:	4631      	mov	r1, r6
 801924c:	4814      	ldr	r0, [pc, #80]	@ (80192a0 <xTaskIncrementTick+0x108>)
 801924e:	4410      	add	r0, r2
 8019250:	f7fe fefe 	bl	8018050 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019254:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019256:	4b11      	ldr	r3, [pc, #68]	@ (801929c <xTaskIncrementTick+0x104>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801925c:	429a      	cmp	r2, r3
 801925e:	d2d4      	bcs.n	801920a <xTaskIncrementTick+0x72>
 8019260:	e7d4      	b.n	801920c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8019262:	2700      	movs	r7, #0
 8019264:	e7d2      	b.n	801920c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019266:	4b0c      	ldr	r3, [pc, #48]	@ (8019298 <xTaskIncrementTick+0x100>)
 8019268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801926c:	601a      	str	r2, [r3, #0]
					break;
 801926e:	e7bb      	b.n	80191e8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8019270:	4a09      	ldr	r2, [pc, #36]	@ (8019298 <xTaskIncrementTick+0x100>)
 8019272:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019274:	e7b8      	b.n	80191e8 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8019276:	4a0d      	ldr	r2, [pc, #52]	@ (80192ac <xTaskIncrementTick+0x114>)
 8019278:	6813      	ldr	r3, [r2, #0]
 801927a:	3301      	adds	r3, #1
 801927c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801927e:	2700      	movs	r7, #0
}
 8019280:	4638      	mov	r0, r7
 8019282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019284:	20002f4c 	.word	0x20002f4c
 8019288:	20002f70 	.word	0x20002f70
 801928c:	20002fbc 	.word	0x20002fbc
 8019290:	20002fb8 	.word	0x20002fb8
 8019294:	20002f5c 	.word	0x20002f5c
 8019298:	20002f54 	.word	0x20002f54
 801929c:	20003448 	.word	0x20003448
 80192a0:	20002fe8 	.word	0x20002fe8
 80192a4:	20002f60 	.word	0x20002f60
 80192a8:	20002f6c 	.word	0x20002f6c
 80192ac:	20002f64 	.word	0x20002f64

080192b0 <xTaskResumeAll>:
{
 80192b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80192b2:	4b35      	ldr	r3, [pc, #212]	@ (8019388 <xTaskResumeAll+0xd8>)
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	b943      	cbnz	r3, 80192ca <xTaskResumeAll+0x1a>
 80192b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192bc:	f383 8811 	msr	BASEPRI, r3
 80192c0:	f3bf 8f6f 	isb	sy
 80192c4:	f3bf 8f4f 	dsb	sy
 80192c8:	e7fe      	b.n	80192c8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80192ca:	f000 fd4b 	bl	8019d64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80192ce:	4b2e      	ldr	r3, [pc, #184]	@ (8019388 <xTaskResumeAll+0xd8>)
 80192d0:	681a      	ldr	r2, [r3, #0]
 80192d2:	3a01      	subs	r2, #1
 80192d4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d14f      	bne.n	801937c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80192dc:	4b2b      	ldr	r3, [pc, #172]	@ (801938c <xTaskResumeAll+0xdc>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	b90b      	cbnz	r3, 80192e6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80192e2:	2400      	movs	r4, #0
 80192e4:	e04b      	b.n	801937e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80192e6:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80192e8:	4b29      	ldr	r3, [pc, #164]	@ (8019390 <xTaskResumeAll+0xe0>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	b31b      	cbz	r3, 8019336 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80192ee:	4b28      	ldr	r3, [pc, #160]	@ (8019390 <xTaskResumeAll+0xe0>)
 80192f0:	68db      	ldr	r3, [r3, #12]
 80192f2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80192f4:	f104 0018 	add.w	r0, r4, #24
 80192f8:	f7fe fece 	bl	8018098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80192fc:	1d25      	adds	r5, r4, #4
 80192fe:	4628      	mov	r0, r5
 8019300:	f7fe feca 	bl	8018098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019304:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019306:	4b23      	ldr	r3, [pc, #140]	@ (8019394 <xTaskResumeAll+0xe4>)
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	4298      	cmp	r0, r3
 801930c:	d901      	bls.n	8019312 <xTaskResumeAll+0x62>
 801930e:	4b21      	ldr	r3, [pc, #132]	@ (8019394 <xTaskResumeAll+0xe4>)
 8019310:	6018      	str	r0, [r3, #0]
 8019312:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019316:	4629      	mov	r1, r5
 8019318:	4b1f      	ldr	r3, [pc, #124]	@ (8019398 <xTaskResumeAll+0xe8>)
 801931a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801931e:	f7fe fe97 	bl	8018050 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019322:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019324:	4b1d      	ldr	r3, [pc, #116]	@ (801939c <xTaskResumeAll+0xec>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801932a:	429a      	cmp	r2, r3
 801932c:	d3dc      	bcc.n	80192e8 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 801932e:	4b1c      	ldr	r3, [pc, #112]	@ (80193a0 <xTaskResumeAll+0xf0>)
 8019330:	2201      	movs	r2, #1
 8019332:	601a      	str	r2, [r3, #0]
 8019334:	e7d8      	b.n	80192e8 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8019336:	b10c      	cbz	r4, 801933c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8019338:	f7ff fca0 	bl	8018c7c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801933c:	4b19      	ldr	r3, [pc, #100]	@ (80193a4 <xTaskResumeAll+0xf4>)
 801933e:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8019340:	b984      	cbnz	r4, 8019364 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8019342:	4b17      	ldr	r3, [pc, #92]	@ (80193a0 <xTaskResumeAll+0xf0>)
 8019344:	681c      	ldr	r4, [r3, #0]
 8019346:	b1d4      	cbz	r4, 801937e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8019348:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801934c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019350:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019354:	f3bf 8f4f 	dsb	sy
 8019358:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801935c:	2401      	movs	r4, #1
 801935e:	e00e      	b.n	801937e <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019360:	3c01      	subs	r4, #1
 8019362:	d007      	beq.n	8019374 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8019364:	f7ff ff18 	bl	8019198 <xTaskIncrementTick>
 8019368:	2800      	cmp	r0, #0
 801936a:	d0f9      	beq.n	8019360 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 801936c:	4b0c      	ldr	r3, [pc, #48]	@ (80193a0 <xTaskResumeAll+0xf0>)
 801936e:	2201      	movs	r2, #1
 8019370:	601a      	str	r2, [r3, #0]
 8019372:	e7f5      	b.n	8019360 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8019374:	4b0b      	ldr	r3, [pc, #44]	@ (80193a4 <xTaskResumeAll+0xf4>)
 8019376:	2200      	movs	r2, #0
 8019378:	601a      	str	r2, [r3, #0]
 801937a:	e7e2      	b.n	8019342 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 801937c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801937e:	f000 fd13 	bl	8019da8 <vPortExitCritical>
}
 8019382:	4620      	mov	r0, r4
 8019384:	bd38      	pop	{r3, r4, r5, pc}
 8019386:	bf00      	nop
 8019388:	20002f4c 	.word	0x20002f4c
 801938c:	20002f74 	.word	0x20002f74
 8019390:	20002fa4 	.word	0x20002fa4
 8019394:	20002f6c 	.word	0x20002f6c
 8019398:	20002fe8 	.word	0x20002fe8
 801939c:	20003448 	.word	0x20003448
 80193a0:	20002f60 	.word	0x20002f60
 80193a4:	20002f64 	.word	0x20002f64

080193a8 <vTaskDelay>:
	{
 80193a8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80193aa:	b1a8      	cbz	r0, 80193d8 <vTaskDelay+0x30>
 80193ac:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80193ae:	4b10      	ldr	r3, [pc, #64]	@ (80193f0 <vTaskDelay+0x48>)
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	b143      	cbz	r3, 80193c6 <vTaskDelay+0x1e>
 80193b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80193b8:	f383 8811 	msr	BASEPRI, r3
 80193bc:	f3bf 8f6f 	isb	sy
 80193c0:	f3bf 8f4f 	dsb	sy
 80193c4:	e7fe      	b.n	80193c4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80193c6:	f7ff fed9 	bl	801917c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80193ca:	2100      	movs	r1, #0
 80193cc:	4620      	mov	r0, r4
 80193ce:	f7ff fdd1 	bl	8018f74 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80193d2:	f7ff ff6d 	bl	80192b0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80193d6:	b948      	cbnz	r0, 80193ec <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 80193d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80193dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80193e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80193e4:	f3bf 8f4f 	dsb	sy
 80193e8:	f3bf 8f6f 	isb	sy
	}
 80193ec:	bd10      	pop	{r4, pc}
 80193ee:	bf00      	nop
 80193f0:	20002f4c 	.word	0x20002f4c

080193f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80193f4:	4b22      	ldr	r3, [pc, #136]	@ (8019480 <vTaskSwitchContext+0x8c>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	b11b      	cbz	r3, 8019402 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80193fa:	4b22      	ldr	r3, [pc, #136]	@ (8019484 <vTaskSwitchContext+0x90>)
 80193fc:	2201      	movs	r2, #1
 80193fe:	601a      	str	r2, [r3, #0]
 8019400:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8019402:	4b20      	ldr	r3, [pc, #128]	@ (8019484 <vTaskSwitchContext+0x90>)
 8019404:	2200      	movs	r2, #0
 8019406:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019408:	4b1f      	ldr	r3, [pc, #124]	@ (8019488 <vTaskSwitchContext+0x94>)
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019410:	008a      	lsls	r2, r1, #2
 8019412:	491e      	ldr	r1, [pc, #120]	@ (801948c <vTaskSwitchContext+0x98>)
 8019414:	588a      	ldr	r2, [r1, r2]
 8019416:	b95a      	cbnz	r2, 8019430 <vTaskSwitchContext+0x3c>
 8019418:	b10b      	cbz	r3, 801941e <vTaskSwitchContext+0x2a>
 801941a:	3b01      	subs	r3, #1
 801941c:	e7f6      	b.n	801940c <vTaskSwitchContext+0x18>
 801941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019422:	f383 8811 	msr	BASEPRI, r3
 8019426:	f3bf 8f6f 	isb	sy
 801942a:	f3bf 8f4f 	dsb	sy
 801942e:	e7fe      	b.n	801942e <vTaskSwitchContext+0x3a>
 8019430:	4608      	mov	r0, r1
 8019432:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019436:	008a      	lsls	r2, r1, #2
 8019438:	4402      	add	r2, r0
 801943a:	6851      	ldr	r1, [r2, #4]
 801943c:	6849      	ldr	r1, [r1, #4]
 801943e:	6051      	str	r1, [r2, #4]
 8019440:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8019444:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8019448:	3208      	adds	r2, #8
 801944a:	4402      	add	r2, r0
 801944c:	4291      	cmp	r1, r2
 801944e:	d00f      	beq.n	8019470 <vTaskSwitchContext+0x7c>
 8019450:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8019454:	0091      	lsls	r1, r2, #2
 8019456:	4a0d      	ldr	r2, [pc, #52]	@ (801948c <vTaskSwitchContext+0x98>)
 8019458:	440a      	add	r2, r1
 801945a:	6852      	ldr	r2, [r2, #4]
 801945c:	68d1      	ldr	r1, [r2, #12]
 801945e:	4a0c      	ldr	r2, [pc, #48]	@ (8019490 <vTaskSwitchContext+0x9c>)
 8019460:	6011      	str	r1, [r2, #0]
 8019462:	4909      	ldr	r1, [pc, #36]	@ (8019488 <vTaskSwitchContext+0x94>)
 8019464:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019466:	6813      	ldr	r3, [r2, #0]
 8019468:	3358      	adds	r3, #88	@ 0x58
 801946a:	4a0a      	ldr	r2, [pc, #40]	@ (8019494 <vTaskSwitchContext+0xa0>)
 801946c:	6013      	str	r3, [r2, #0]
}
 801946e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019470:	6848      	ldr	r0, [r1, #4]
 8019472:	4662      	mov	r2, ip
 8019474:	0091      	lsls	r1, r2, #2
 8019476:	4a05      	ldr	r2, [pc, #20]	@ (801948c <vTaskSwitchContext+0x98>)
 8019478:	440a      	add	r2, r1
 801947a:	6050      	str	r0, [r2, #4]
 801947c:	e7e8      	b.n	8019450 <vTaskSwitchContext+0x5c>
 801947e:	bf00      	nop
 8019480:	20002f4c 	.word	0x20002f4c
 8019484:	20002f60 	.word	0x20002f60
 8019488:	20002f6c 	.word	0x20002f6c
 801948c:	20002fe8 	.word	0x20002fe8
 8019490:	20003448 	.word	0x20003448
 8019494:	200002d8 	.word	0x200002d8

08019498 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8019498:	b158      	cbz	r0, 80194b2 <vTaskPlaceOnEventList+0x1a>
{
 801949a:	b510      	push	{r4, lr}
 801949c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801949e:	4a09      	ldr	r2, [pc, #36]	@ (80194c4 <vTaskPlaceOnEventList+0x2c>)
 80194a0:	6811      	ldr	r1, [r2, #0]
 80194a2:	3118      	adds	r1, #24
 80194a4:	f7fe fddf 	bl	8018066 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80194a8:	2101      	movs	r1, #1
 80194aa:	4620      	mov	r0, r4
 80194ac:	f7ff fd62 	bl	8018f74 <prvAddCurrentTaskToDelayedList>
}
 80194b0:	bd10      	pop	{r4, pc}
 80194b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194b6:	f383 8811 	msr	BASEPRI, r3
 80194ba:	f3bf 8f6f 	isb	sy
 80194be:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80194c2:	e7fe      	b.n	80194c2 <vTaskPlaceOnEventList+0x2a>
 80194c4:	20003448 	.word	0x20003448

080194c8 <vTaskPlaceOnEventListRestricted>:
	{
 80194c8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80194ca:	b170      	cbz	r0, 80194ea <vTaskPlaceOnEventListRestricted+0x22>
 80194cc:	460d      	mov	r5, r1
 80194ce:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80194d0:	4a0a      	ldr	r2, [pc, #40]	@ (80194fc <vTaskPlaceOnEventListRestricted+0x34>)
 80194d2:	6811      	ldr	r1, [r2, #0]
 80194d4:	3118      	adds	r1, #24
 80194d6:	f7fe fdbb 	bl	8018050 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80194da:	b10c      	cbz	r4, 80194e0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80194dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80194e0:	4621      	mov	r1, r4
 80194e2:	4628      	mov	r0, r5
 80194e4:	f7ff fd46 	bl	8018f74 <prvAddCurrentTaskToDelayedList>
	}
 80194e8:	bd38      	pop	{r3, r4, r5, pc}
 80194ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80194ee:	f383 8811 	msr	BASEPRI, r3
 80194f2:	f3bf 8f6f 	isb	sy
 80194f6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80194fa:	e7fe      	b.n	80194fa <vTaskPlaceOnEventListRestricted+0x32>
 80194fc:	20003448 	.word	0x20003448

08019500 <xTaskRemoveFromEventList>:
{
 8019500:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019502:	68c3      	ldr	r3, [r0, #12]
 8019504:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8019506:	b324      	cbz	r4, 8019552 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019508:	f104 0518 	add.w	r5, r4, #24
 801950c:	4628      	mov	r0, r5
 801950e:	f7fe fdc3 	bl	8018098 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019512:	4b18      	ldr	r3, [pc, #96]	@ (8019574 <xTaskRemoveFromEventList+0x74>)
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	bb2b      	cbnz	r3, 8019564 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019518:	1d25      	adds	r5, r4, #4
 801951a:	4628      	mov	r0, r5
 801951c:	f7fe fdbc 	bl	8018098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019520:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019522:	4b15      	ldr	r3, [pc, #84]	@ (8019578 <xTaskRemoveFromEventList+0x78>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	4298      	cmp	r0, r3
 8019528:	d901      	bls.n	801952e <xTaskRemoveFromEventList+0x2e>
 801952a:	4b13      	ldr	r3, [pc, #76]	@ (8019578 <xTaskRemoveFromEventList+0x78>)
 801952c:	6018      	str	r0, [r3, #0]
 801952e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019532:	4629      	mov	r1, r5
 8019534:	4b11      	ldr	r3, [pc, #68]	@ (801957c <xTaskRemoveFromEventList+0x7c>)
 8019536:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801953a:	f7fe fd89 	bl	8018050 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801953e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8019540:	4b0f      	ldr	r3, [pc, #60]	@ (8019580 <xTaskRemoveFromEventList+0x80>)
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019546:	429a      	cmp	r2, r3
 8019548:	d911      	bls.n	801956e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801954a:	2001      	movs	r0, #1
 801954c:	4b0d      	ldr	r3, [pc, #52]	@ (8019584 <xTaskRemoveFromEventList+0x84>)
 801954e:	6018      	str	r0, [r3, #0]
}
 8019550:	bd38      	pop	{r3, r4, r5, pc}
 8019552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019556:	f383 8811 	msr	BASEPRI, r3
 801955a:	f3bf 8f6f 	isb	sy
 801955e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8019562:	e7fe      	b.n	8019562 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019564:	4629      	mov	r1, r5
 8019566:	4808      	ldr	r0, [pc, #32]	@ (8019588 <xTaskRemoveFromEventList+0x88>)
 8019568:	f7fe fd72 	bl	8018050 <vListInsertEnd>
 801956c:	e7e7      	b.n	801953e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 801956e:	2000      	movs	r0, #0
	return xReturn;
 8019570:	e7ee      	b.n	8019550 <xTaskRemoveFromEventList+0x50>
 8019572:	bf00      	nop
 8019574:	20002f4c 	.word	0x20002f4c
 8019578:	20002f6c 	.word	0x20002f6c
 801957c:	20002fe8 	.word	0x20002fe8
 8019580:	20003448 	.word	0x20003448
 8019584:	20002f60 	.word	0x20002f60
 8019588:	20002fa4 	.word	0x20002fa4

0801958c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801958c:	4b03      	ldr	r3, [pc, #12]	@ (801959c <vTaskInternalSetTimeOutState+0x10>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019592:	4b03      	ldr	r3, [pc, #12]	@ (80195a0 <vTaskInternalSetTimeOutState+0x14>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	6043      	str	r3, [r0, #4]
}
 8019598:	4770      	bx	lr
 801959a:	bf00      	nop
 801959c:	20002f5c 	.word	0x20002f5c
 80195a0:	20002f70 	.word	0x20002f70

080195a4 <xTaskCheckForTimeOut>:
{
 80195a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80195a6:	b1c8      	cbz	r0, 80195dc <xTaskCheckForTimeOut+0x38>
 80195a8:	460c      	mov	r4, r1
 80195aa:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80195ac:	b1f9      	cbz	r1, 80195ee <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80195ae:	f000 fbd9 	bl	8019d64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80195b2:	4b1b      	ldr	r3, [pc, #108]	@ (8019620 <xTaskCheckForTimeOut+0x7c>)
 80195b4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80195b6:	686b      	ldr	r3, [r5, #4]
 80195b8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80195ba:	6822      	ldr	r2, [r4, #0]
 80195bc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80195c0:	d026      	beq.n	8019610 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80195c2:	4e18      	ldr	r6, [pc, #96]	@ (8019624 <xTaskCheckForTimeOut+0x80>)
 80195c4:	6836      	ldr	r6, [r6, #0]
 80195c6:	682f      	ldr	r7, [r5, #0]
 80195c8:	42b7      	cmp	r7, r6
 80195ca:	d001      	beq.n	80195d0 <xTaskCheckForTimeOut+0x2c>
 80195cc:	428b      	cmp	r3, r1
 80195ce:	d924      	bls.n	801961a <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80195d0:	4282      	cmp	r2, r0
 80195d2:	d815      	bhi.n	8019600 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80195d4:	2300      	movs	r3, #0
 80195d6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80195d8:	2401      	movs	r4, #1
 80195da:	e01a      	b.n	8019612 <xTaskCheckForTimeOut+0x6e>
 80195dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195e0:	f383 8811 	msr	BASEPRI, r3
 80195e4:	f3bf 8f6f 	isb	sy
 80195e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80195ec:	e7fe      	b.n	80195ec <xTaskCheckForTimeOut+0x48>
 80195ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80195f2:	f383 8811 	msr	BASEPRI, r3
 80195f6:	f3bf 8f6f 	isb	sy
 80195fa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80195fe:	e7fe      	b.n	80195fe <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8019600:	1a5b      	subs	r3, r3, r1
 8019602:	4413      	add	r3, r2
 8019604:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019606:	4628      	mov	r0, r5
 8019608:	f7ff ffc0 	bl	801958c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801960c:	2400      	movs	r4, #0
 801960e:	e000      	b.n	8019612 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8019610:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019612:	f000 fbc9 	bl	8019da8 <vPortExitCritical>
}
 8019616:	4620      	mov	r0, r4
 8019618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801961a:	2401      	movs	r4, #1
 801961c:	e7f9      	b.n	8019612 <xTaskCheckForTimeOut+0x6e>
 801961e:	bf00      	nop
 8019620:	20002f70 	.word	0x20002f70
 8019624:	20002f5c 	.word	0x20002f5c

08019628 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8019628:	4b01      	ldr	r3, [pc, #4]	@ (8019630 <vTaskMissedYield+0x8>)
 801962a:	2201      	movs	r2, #1
 801962c:	601a      	str	r2, [r3, #0]
}
 801962e:	4770      	bx	lr
 8019630:	20002f60 	.word	0x20002f60

08019634 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8019634:	4b01      	ldr	r3, [pc, #4]	@ (801963c <xTaskGetCurrentTaskHandle+0x8>)
 8019636:	6818      	ldr	r0, [r3, #0]
	}
 8019638:	4770      	bx	lr
 801963a:	bf00      	nop
 801963c:	20003448 	.word	0x20003448

08019640 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8019640:	4b05      	ldr	r3, [pc, #20]	@ (8019658 <xTaskGetSchedulerState+0x18>)
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	b133      	cbz	r3, 8019654 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019646:	4b05      	ldr	r3, [pc, #20]	@ (801965c <xTaskGetSchedulerState+0x1c>)
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	b10b      	cbz	r3, 8019650 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 801964c:	2000      	movs	r0, #0
	}
 801964e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8019650:	2002      	movs	r0, #2
 8019652:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019654:	2001      	movs	r0, #1
 8019656:	4770      	bx	lr
 8019658:	20002f68 	.word	0x20002f68
 801965c:	20002f4c 	.word	0x20002f4c

08019660 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8019660:	2800      	cmp	r0, #0
 8019662:	d03e      	beq.n	80196e2 <xTaskPriorityInherit+0x82>
	{
 8019664:	b538      	push	{r3, r4, r5, lr}
 8019666:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019668:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801966a:	4a20      	ldr	r2, [pc, #128]	@ (80196ec <xTaskPriorityInherit+0x8c>)
 801966c:	6812      	ldr	r2, [r2, #0]
 801966e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019670:	4293      	cmp	r3, r2
 8019672:	d22e      	bcs.n	80196d2 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019674:	6982      	ldr	r2, [r0, #24]
 8019676:	2a00      	cmp	r2, #0
 8019678:	db05      	blt.n	8019686 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801967a:	4a1c      	ldr	r2, [pc, #112]	@ (80196ec <xTaskPriorityInherit+0x8c>)
 801967c:	6812      	ldr	r2, [r2, #0]
 801967e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8019680:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8019684:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019686:	6961      	ldr	r1, [r4, #20]
 8019688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801968c:	4a18      	ldr	r2, [pc, #96]	@ (80196f0 <xTaskPriorityInherit+0x90>)
 801968e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019692:	4299      	cmp	r1, r3
 8019694:	d005      	beq.n	80196a2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019696:	4b15      	ldr	r3, [pc, #84]	@ (80196ec <xTaskPriorityInherit+0x8c>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801969c:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 801969e:	2001      	movs	r0, #1
	}
 80196a0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80196a2:	1d25      	adds	r5, r4, #4
 80196a4:	4628      	mov	r0, r5
 80196a6:	f7fe fcf7 	bl	8018098 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80196aa:	4b10      	ldr	r3, [pc, #64]	@ (80196ec <xTaskPriorityInherit+0x8c>)
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80196b0:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80196b2:	4b10      	ldr	r3, [pc, #64]	@ (80196f4 <xTaskPriorityInherit+0x94>)
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	4298      	cmp	r0, r3
 80196b8:	d901      	bls.n	80196be <xTaskPriorityInherit+0x5e>
 80196ba:	4b0e      	ldr	r3, [pc, #56]	@ (80196f4 <xTaskPriorityInherit+0x94>)
 80196bc:	6018      	str	r0, [r3, #0]
 80196be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80196c2:	4629      	mov	r1, r5
 80196c4:	4b0a      	ldr	r3, [pc, #40]	@ (80196f0 <xTaskPriorityInherit+0x90>)
 80196c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80196ca:	f7fe fcc1 	bl	8018050 <vListInsertEnd>
				xReturn = pdTRUE;
 80196ce:	2001      	movs	r0, #1
 80196d0:	e7e6      	b.n	80196a0 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80196d2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80196d4:	4b05      	ldr	r3, [pc, #20]	@ (80196ec <xTaskPriorityInherit+0x8c>)
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80196da:	429a      	cmp	r2, r3
 80196dc:	d303      	bcc.n	80196e6 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 80196de:	2000      	movs	r0, #0
 80196e0:	e7de      	b.n	80196a0 <xTaskPriorityInherit+0x40>
 80196e2:	2000      	movs	r0, #0
	}
 80196e4:	4770      	bx	lr
					xReturn = pdTRUE;
 80196e6:	2001      	movs	r0, #1
		return xReturn;
 80196e8:	e7da      	b.n	80196a0 <xTaskPriorityInherit+0x40>
 80196ea:	bf00      	nop
 80196ec:	20003448 	.word	0x20003448
 80196f0:	20002fe8 	.word	0x20002fe8
 80196f4:	20002f6c 	.word	0x20002f6c

080196f8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80196f8:	2800      	cmp	r0, #0
 80196fa:	d03b      	beq.n	8019774 <xTaskPriorityDisinherit+0x7c>
	{
 80196fc:	b538      	push	{r3, r4, r5, lr}
 80196fe:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8019700:	4b1e      	ldr	r3, [pc, #120]	@ (801977c <xTaskPriorityDisinherit+0x84>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	4283      	cmp	r3, r0
 8019706:	d008      	beq.n	801971a <xTaskPriorityDisinherit+0x22>
 8019708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801970c:	f383 8811 	msr	BASEPRI, r3
 8019710:	f3bf 8f6f 	isb	sy
 8019714:	f3bf 8f4f 	dsb	sy
 8019718:	e7fe      	b.n	8019718 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801971a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801971c:	b943      	cbnz	r3, 8019730 <xTaskPriorityDisinherit+0x38>
 801971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019722:	f383 8811 	msr	BASEPRI, r3
 8019726:	f3bf 8f6f 	isb	sy
 801972a:	f3bf 8f4f 	dsb	sy
 801972e:	e7fe      	b.n	801972e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8019730:	3b01      	subs	r3, #1
 8019732:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019734:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8019736:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8019738:	4291      	cmp	r1, r2
 801973a:	d01d      	beq.n	8019778 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801973c:	b10b      	cbz	r3, 8019742 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 801973e:	2000      	movs	r0, #0
	}
 8019740:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019742:	1d05      	adds	r5, r0, #4
 8019744:	4628      	mov	r0, r5
 8019746:	f7fe fca7 	bl	8018098 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801974a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801974c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801974e:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 8019752:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8019754:	4b0a      	ldr	r3, [pc, #40]	@ (8019780 <xTaskPriorityDisinherit+0x88>)
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	4298      	cmp	r0, r3
 801975a:	d901      	bls.n	8019760 <xTaskPriorityDisinherit+0x68>
 801975c:	4b08      	ldr	r3, [pc, #32]	@ (8019780 <xTaskPriorityDisinherit+0x88>)
 801975e:	6018      	str	r0, [r3, #0]
 8019760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8019764:	4629      	mov	r1, r5
 8019766:	4b07      	ldr	r3, [pc, #28]	@ (8019784 <xTaskPriorityDisinherit+0x8c>)
 8019768:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801976c:	f7fe fc70 	bl	8018050 <vListInsertEnd>
					xReturn = pdTRUE;
 8019770:	2001      	movs	r0, #1
 8019772:	e7e5      	b.n	8019740 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8019774:	2000      	movs	r0, #0
	}
 8019776:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8019778:	2000      	movs	r0, #0
 801977a:	e7e1      	b.n	8019740 <xTaskPriorityDisinherit+0x48>
 801977c:	20003448 	.word	0x20003448
 8019780:	20002f6c 	.word	0x20002f6c
 8019784:	20002fe8 	.word	0x20002fe8

08019788 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8019788:	2800      	cmp	r0, #0
 801978a:	d046      	beq.n	801981a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 801978c:	b538      	push	{r3, r4, r5, lr}
 801978e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8019790:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019792:	b943      	cbnz	r3, 80197a6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8019794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019798:	f383 8811 	msr	BASEPRI, r3
 801979c:	f3bf 8f6f 	isb	sy
 80197a0:	f3bf 8f4f 	dsb	sy
 80197a4:	e7fe      	b.n	80197a4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80197a6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80197a8:	428a      	cmp	r2, r1
 80197aa:	d200      	bcs.n	80197ae <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80197ac:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80197ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80197b0:	4291      	cmp	r1, r2
 80197b2:	d001      	beq.n	80197b8 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	d000      	beq.n	80197ba <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80197b8:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80197ba:	4b18      	ldr	r3, [pc, #96]	@ (801981c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	42a3      	cmp	r3, r4
 80197c0:	d022      	beq.n	8019808 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80197c2:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80197c4:	69a3      	ldr	r3, [r4, #24]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	db02      	blt.n	80197d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80197ca:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80197ce:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80197d0:	6962      	ldr	r2, [r4, #20]
 80197d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80197d6:	4b12      	ldr	r3, [pc, #72]	@ (8019820 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80197d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80197dc:	429a      	cmp	r2, r3
 80197de:	d1eb      	bne.n	80197b8 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80197e0:	1d25      	adds	r5, r4, #4
 80197e2:	4628      	mov	r0, r5
 80197e4:	f7fe fc58 	bl	8018098 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80197e8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80197ea:	4b0e      	ldr	r3, [pc, #56]	@ (8019824 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	4298      	cmp	r0, r3
 80197f0:	d901      	bls.n	80197f6 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 80197f2:	4b0c      	ldr	r3, [pc, #48]	@ (8019824 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80197f4:	6018      	str	r0, [r3, #0]
 80197f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80197fa:	4629      	mov	r1, r5
 80197fc:	4b08      	ldr	r3, [pc, #32]	@ (8019820 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80197fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019802:	f7fe fc25 	bl	8018050 <vListInsertEnd>
	}
 8019806:	e7d7      	b.n	80197b8 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8019808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801980c:	f383 8811 	msr	BASEPRI, r3
 8019810:	f3bf 8f6f 	isb	sy
 8019814:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8019818:	e7fe      	b.n	8019818 <vTaskPriorityDisinheritAfterTimeout+0x90>
 801981a:	4770      	bx	lr
 801981c:	20003448 	.word	0x20003448
 8019820:	20002fe8 	.word	0x20002fe8
 8019824:	20002f6c 	.word	0x20002f6c

08019828 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8019828:	4b05      	ldr	r3, [pc, #20]	@ (8019840 <pvTaskIncrementMutexHeldCount+0x18>)
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	b123      	cbz	r3, 8019838 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801982e:	4b04      	ldr	r3, [pc, #16]	@ (8019840 <pvTaskIncrementMutexHeldCount+0x18>)
 8019830:	681a      	ldr	r2, [r3, #0]
 8019832:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8019834:	3301      	adds	r3, #1
 8019836:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8019838:	4b01      	ldr	r3, [pc, #4]	@ (8019840 <pvTaskIncrementMutexHeldCount+0x18>)
 801983a:	6818      	ldr	r0, [r3, #0]
	}
 801983c:	4770      	bx	lr
 801983e:	bf00      	nop
 8019840:	20003448 	.word	0x20003448

08019844 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019844:	4b06      	ldr	r3, [pc, #24]	@ (8019860 <prvGetNextExpireTime+0x1c>)
 8019846:	681a      	ldr	r2, [r3, #0]
 8019848:	6813      	ldr	r3, [r2, #0]
 801984a:	b92b      	cbnz	r3, 8019858 <prvGetNextExpireTime+0x14>
 801984c:	2301      	movs	r3, #1
 801984e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019850:	b923      	cbnz	r3, 801985c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019852:	68d3      	ldr	r3, [r2, #12]
 8019854:	6818      	ldr	r0, [r3, #0]
 8019856:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019858:	2300      	movs	r3, #0
 801985a:	e7f8      	b.n	801984e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801985c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801985e:	4770      	bx	lr
 8019860:	2000354c 	.word	0x2000354c

08019864 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019864:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019866:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019868:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801986a:	4291      	cmp	r1, r2
 801986c:	d80c      	bhi.n	8019888 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801986e:	1ad2      	subs	r2, r2, r3
 8019870:	6983      	ldr	r3, [r0, #24]
 8019872:	429a      	cmp	r2, r3
 8019874:	d301      	bcc.n	801987a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019876:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8019878:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801987a:	1d01      	adds	r1, r0, #4
 801987c:	4b09      	ldr	r3, [pc, #36]	@ (80198a4 <prvInsertTimerInActiveList+0x40>)
 801987e:	6818      	ldr	r0, [r3, #0]
 8019880:	f7fe fbf1 	bl	8018066 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8019884:	2000      	movs	r0, #0
 8019886:	e7f7      	b.n	8019878 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019888:	429a      	cmp	r2, r3
 801988a:	d201      	bcs.n	8019890 <prvInsertTimerInActiveList+0x2c>
 801988c:	4299      	cmp	r1, r3
 801988e:	d206      	bcs.n	801989e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019890:	1d01      	adds	r1, r0, #4
 8019892:	4b05      	ldr	r3, [pc, #20]	@ (80198a8 <prvInsertTimerInActiveList+0x44>)
 8019894:	6818      	ldr	r0, [r3, #0]
 8019896:	f7fe fbe6 	bl	8018066 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801989a:	2000      	movs	r0, #0
 801989c:	e7ec      	b.n	8019878 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801989e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80198a0:	e7ea      	b.n	8019878 <prvInsertTimerInActiveList+0x14>
 80198a2:	bf00      	nop
 80198a4:	20003548 	.word	0x20003548
 80198a8:	2000354c 	.word	0x2000354c

080198ac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80198ac:	b530      	push	{r4, r5, lr}
 80198ae:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80198b0:	f000 fa58 	bl	8019d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80198b4:	4b11      	ldr	r3, [pc, #68]	@ (80198fc <prvCheckForValidListAndQueue+0x50>)
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	b11b      	cbz	r3, 80198c2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80198ba:	f000 fa75 	bl	8019da8 <vPortExitCritical>
}
 80198be:	b003      	add	sp, #12
 80198c0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80198c2:	4d0f      	ldr	r5, [pc, #60]	@ (8019900 <prvCheckForValidListAndQueue+0x54>)
 80198c4:	4628      	mov	r0, r5
 80198c6:	f7fe fbb5 	bl	8018034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80198ca:	4c0e      	ldr	r4, [pc, #56]	@ (8019904 <prvCheckForValidListAndQueue+0x58>)
 80198cc:	4620      	mov	r0, r4
 80198ce:	f7fe fbb1 	bl	8018034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80198d2:	4b0d      	ldr	r3, [pc, #52]	@ (8019908 <prvCheckForValidListAndQueue+0x5c>)
 80198d4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80198d6:	4b0d      	ldr	r3, [pc, #52]	@ (801990c <prvCheckForValidListAndQueue+0x60>)
 80198d8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80198da:	2300      	movs	r3, #0
 80198dc:	9300      	str	r3, [sp, #0]
 80198de:	4b0c      	ldr	r3, [pc, #48]	@ (8019910 <prvCheckForValidListAndQueue+0x64>)
 80198e0:	4a0c      	ldr	r2, [pc, #48]	@ (8019914 <prvCheckForValidListAndQueue+0x68>)
 80198e2:	2110      	movs	r1, #16
 80198e4:	200a      	movs	r0, #10
 80198e6:	f7fe fce5 	bl	80182b4 <xQueueGenericCreateStatic>
 80198ea:	4b04      	ldr	r3, [pc, #16]	@ (80198fc <prvCheckForValidListAndQueue+0x50>)
 80198ec:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80198ee:	2800      	cmp	r0, #0
 80198f0:	d0e3      	beq.n	80198ba <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80198f2:	4909      	ldr	r1, [pc, #36]	@ (8019918 <prvCheckForValidListAndQueue+0x6c>)
 80198f4:	f7ff f984 	bl	8018c00 <vQueueAddToRegistry>
 80198f8:	e7df      	b.n	80198ba <prvCheckForValidListAndQueue+0xe>
 80198fa:	bf00      	nop
 80198fc:	20003544 	.word	0x20003544
 8019900:	20003564 	.word	0x20003564
 8019904:	20003550 	.word	0x20003550
 8019908:	2000354c 	.word	0x2000354c
 801990c:	20003548 	.word	0x20003548
 8019910:	2000344c 	.word	0x2000344c
 8019914:	2000349c 	.word	0x2000349c
 8019918:	08038120 	.word	0x08038120

0801991c <xTimerCreateTimerTask>:
{
 801991c:	b510      	push	{r4, lr}
 801991e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8019920:	f7ff ffc4 	bl	80198ac <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8019924:	4b12      	ldr	r3, [pc, #72]	@ (8019970 <xTimerCreateTimerTask+0x54>)
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	b1cb      	cbz	r3, 801995e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801992a:	2400      	movs	r4, #0
 801992c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801992e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019930:	aa07      	add	r2, sp, #28
 8019932:	a906      	add	r1, sp, #24
 8019934:	a805      	add	r0, sp, #20
 8019936:	f7fe fb71 	bl	801801c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801993a:	9b05      	ldr	r3, [sp, #20]
 801993c:	9302      	str	r3, [sp, #8]
 801993e:	9b06      	ldr	r3, [sp, #24]
 8019940:	9301      	str	r3, [sp, #4]
 8019942:	2302      	movs	r3, #2
 8019944:	9300      	str	r3, [sp, #0]
 8019946:	4623      	mov	r3, r4
 8019948:	9a07      	ldr	r2, [sp, #28]
 801994a:	490a      	ldr	r1, [pc, #40]	@ (8019974 <xTimerCreateTimerTask+0x58>)
 801994c:	480a      	ldr	r0, [pc, #40]	@ (8019978 <xTimerCreateTimerTask+0x5c>)
 801994e:	f7ff fb4f 	bl	8018ff0 <xTaskCreateStatic>
 8019952:	4b0a      	ldr	r3, [pc, #40]	@ (801997c <xTimerCreateTimerTask+0x60>)
 8019954:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8019956:	b110      	cbz	r0, 801995e <xTimerCreateTimerTask+0x42>
}
 8019958:	2001      	movs	r0, #1
 801995a:	b008      	add	sp, #32
 801995c:	bd10      	pop	{r4, pc}
 801995e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019962:	f383 8811 	msr	BASEPRI, r3
 8019966:	f3bf 8f6f 	isb	sy
 801996a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801996e:	e7fe      	b.n	801996e <xTimerCreateTimerTask+0x52>
 8019970:	20003544 	.word	0x20003544
 8019974:	08038128 	.word	0x08038128
 8019978:	08019c81 	.word	0x08019c81
 801997c:	20003540 	.word	0x20003540

08019980 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8019980:	b1b8      	cbz	r0, 80199b2 <xTimerGenericCommand+0x32>
 8019982:	469c      	mov	ip, r3
 8019984:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8019986:	4818      	ldr	r0, [pc, #96]	@ (80199e8 <xTimerGenericCommand+0x68>)
 8019988:	6800      	ldr	r0, [r0, #0]
 801998a:	b358      	cbz	r0, 80199e4 <xTimerGenericCommand+0x64>
{
 801998c:	b500      	push	{lr}
 801998e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8019990:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019992:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019994:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019996:	2905      	cmp	r1, #5
 8019998:	dc1c      	bgt.n	80199d4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801999a:	f7ff fe51 	bl	8019640 <xTaskGetSchedulerState>
 801999e:	2802      	cmp	r0, #2
 80199a0:	d010      	beq.n	80199c4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80199a2:	2300      	movs	r3, #0
 80199a4:	461a      	mov	r2, r3
 80199a6:	4669      	mov	r1, sp
 80199a8:	480f      	ldr	r0, [pc, #60]	@ (80199e8 <xTimerGenericCommand+0x68>)
 80199aa:	6800      	ldr	r0, [r0, #0]
 80199ac:	f7fe fcf0 	bl	8018390 <xQueueGenericSend>
 80199b0:	e015      	b.n	80199de <xTimerGenericCommand+0x5e>
 80199b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80199b6:	f383 8811 	msr	BASEPRI, r3
 80199ba:	f3bf 8f6f 	isb	sy
 80199be:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80199c2:	e7fe      	b.n	80199c2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80199c4:	2300      	movs	r3, #0
 80199c6:	9a06      	ldr	r2, [sp, #24]
 80199c8:	4669      	mov	r1, sp
 80199ca:	4807      	ldr	r0, [pc, #28]	@ (80199e8 <xTimerGenericCommand+0x68>)
 80199cc:	6800      	ldr	r0, [r0, #0]
 80199ce:	f7fe fcdf 	bl	8018390 <xQueueGenericSend>
 80199d2:	e004      	b.n	80199de <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80199d4:	2300      	movs	r3, #0
 80199d6:	4662      	mov	r2, ip
 80199d8:	4669      	mov	r1, sp
 80199da:	f7fe fde3 	bl	80185a4 <xQueueGenericSendFromISR>
}
 80199de:	b005      	add	sp, #20
 80199e0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80199e4:	2000      	movs	r0, #0
}
 80199e6:	4770      	bx	lr
 80199e8:	20003544 	.word	0x20003544

080199ec <prvSwitchTimerLists>:
{
 80199ec:	b570      	push	{r4, r5, r6, lr}
 80199ee:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80199f0:	4b1b      	ldr	r3, [pc, #108]	@ (8019a60 <prvSwitchTimerLists+0x74>)
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	681a      	ldr	r2, [r3, #0]
 80199f6:	b362      	cbz	r2, 8019a52 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80199f8:	68db      	ldr	r3, [r3, #12]
 80199fa:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80199fc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80199fe:	1d25      	adds	r5, r4, #4
 8019a00:	4628      	mov	r0, r5
 8019a02:	f7fe fb49 	bl	8018098 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019a06:	6a23      	ldr	r3, [r4, #32]
 8019a08:	4620      	mov	r0, r4
 8019a0a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019a0c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019a10:	f013 0f04 	tst.w	r3, #4
 8019a14:	d0ec      	beq.n	80199f0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019a16:	69a3      	ldr	r3, [r4, #24]
 8019a18:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8019a1a:	429e      	cmp	r6, r3
 8019a1c:	d207      	bcs.n	8019a2e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019a1e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019a20:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019a22:	4629      	mov	r1, r5
 8019a24:	4b0e      	ldr	r3, [pc, #56]	@ (8019a60 <prvSwitchTimerLists+0x74>)
 8019a26:	6818      	ldr	r0, [r3, #0]
 8019a28:	f7fe fb1d 	bl	8018066 <vListInsert>
 8019a2c:	e7e0      	b.n	80199f0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019a2e:	2100      	movs	r1, #0
 8019a30:	9100      	str	r1, [sp, #0]
 8019a32:	460b      	mov	r3, r1
 8019a34:	4632      	mov	r2, r6
 8019a36:	4620      	mov	r0, r4
 8019a38:	f7ff ffa2 	bl	8019980 <xTimerGenericCommand>
				configASSERT( xResult );
 8019a3c:	2800      	cmp	r0, #0
 8019a3e:	d1d7      	bne.n	80199f0 <prvSwitchTimerLists+0x4>
 8019a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019a44:	f383 8811 	msr	BASEPRI, r3
 8019a48:	f3bf 8f6f 	isb	sy
 8019a4c:	f3bf 8f4f 	dsb	sy
 8019a50:	e7fe      	b.n	8019a50 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8019a52:	4a04      	ldr	r2, [pc, #16]	@ (8019a64 <prvSwitchTimerLists+0x78>)
 8019a54:	6810      	ldr	r0, [r2, #0]
 8019a56:	4902      	ldr	r1, [pc, #8]	@ (8019a60 <prvSwitchTimerLists+0x74>)
 8019a58:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8019a5a:	6013      	str	r3, [r2, #0]
}
 8019a5c:	b002      	add	sp, #8
 8019a5e:	bd70      	pop	{r4, r5, r6, pc}
 8019a60:	2000354c 	.word	0x2000354c
 8019a64:	20003548 	.word	0x20003548

08019a68 <prvSampleTimeNow>:
{
 8019a68:	b538      	push	{r3, r4, r5, lr}
 8019a6a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8019a6c:	f7ff fb8e 	bl	801918c <xTaskGetTickCount>
 8019a70:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8019a72:	4b07      	ldr	r3, [pc, #28]	@ (8019a90 <prvSampleTimeNow+0x28>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	4283      	cmp	r3, r0
 8019a78:	d805      	bhi.n	8019a86 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8019a7e:	4b04      	ldr	r3, [pc, #16]	@ (8019a90 <prvSampleTimeNow+0x28>)
 8019a80:	601c      	str	r4, [r3, #0]
}
 8019a82:	4620      	mov	r0, r4
 8019a84:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8019a86:	f7ff ffb1 	bl	80199ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019a8a:	2301      	movs	r3, #1
 8019a8c:	602b      	str	r3, [r5, #0]
 8019a8e:	e7f6      	b.n	8019a7e <prvSampleTimeNow+0x16>
 8019a90:	2000353c 	.word	0x2000353c

08019a94 <prvProcessExpiredTimer>:
{
 8019a94:	b570      	push	{r4, r5, r6, lr}
 8019a96:	b082      	sub	sp, #8
 8019a98:	4606      	mov	r6, r0
 8019a9a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a9c:	4917      	ldr	r1, [pc, #92]	@ (8019afc <prvProcessExpiredTimer+0x68>)
 8019a9e:	6809      	ldr	r1, [r1, #0]
 8019aa0:	68c9      	ldr	r1, [r1, #12]
 8019aa2:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019aa4:	1d20      	adds	r0, r4, #4
 8019aa6:	f7fe faf7 	bl	8018098 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019aaa:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 8019aae:	f01c 0f04 	tst.w	ip, #4
 8019ab2:	d108      	bne.n	8019ac6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019ab4:	f02c 0c01 	bic.w	ip, ip, #1
 8019ab8:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019abc:	6a23      	ldr	r3, [r4, #32]
 8019abe:	4620      	mov	r0, r4
 8019ac0:	4798      	blx	r3
}
 8019ac2:	b002      	add	sp, #8
 8019ac4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019ac6:	69a1      	ldr	r1, [r4, #24]
 8019ac8:	4633      	mov	r3, r6
 8019aca:	462a      	mov	r2, r5
 8019acc:	4431      	add	r1, r6
 8019ace:	4620      	mov	r0, r4
 8019ad0:	f7ff fec8 	bl	8019864 <prvInsertTimerInActiveList>
 8019ad4:	2800      	cmp	r0, #0
 8019ad6:	d0f1      	beq.n	8019abc <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019ad8:	2100      	movs	r1, #0
 8019ada:	9100      	str	r1, [sp, #0]
 8019adc:	460b      	mov	r3, r1
 8019ade:	4632      	mov	r2, r6
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	f7ff ff4d 	bl	8019980 <xTimerGenericCommand>
			configASSERT( xResult );
 8019ae6:	2800      	cmp	r0, #0
 8019ae8:	d1e8      	bne.n	8019abc <prvProcessExpiredTimer+0x28>
 8019aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019aee:	f383 8811 	msr	BASEPRI, r3
 8019af2:	f3bf 8f6f 	isb	sy
 8019af6:	f3bf 8f4f 	dsb	sy
 8019afa:	e7fe      	b.n	8019afa <prvProcessExpiredTimer+0x66>
 8019afc:	2000354c 	.word	0x2000354c

08019b00 <prvProcessTimerOrBlockTask>:
{
 8019b00:	b570      	push	{r4, r5, r6, lr}
 8019b02:	b082      	sub	sp, #8
 8019b04:	4606      	mov	r6, r0
 8019b06:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8019b08:	f7ff fb38 	bl	801917c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019b0c:	a801      	add	r0, sp, #4
 8019b0e:	f7ff ffab 	bl	8019a68 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8019b12:	9b01      	ldr	r3, [sp, #4]
 8019b14:	bb33      	cbnz	r3, 8019b64 <prvProcessTimerOrBlockTask+0x64>
 8019b16:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019b18:	b9e4      	cbnz	r4, 8019b54 <prvProcessTimerOrBlockTask+0x54>
 8019b1a:	42b0      	cmp	r0, r6
 8019b1c:	d213      	bcs.n	8019b46 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019b1e:	4622      	mov	r2, r4
 8019b20:	1b71      	subs	r1, r6, r5
 8019b22:	4b12      	ldr	r3, [pc, #72]	@ (8019b6c <prvProcessTimerOrBlockTask+0x6c>)
 8019b24:	6818      	ldr	r0, [r3, #0]
 8019b26:	f7ff f87f 	bl	8018c28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019b2a:	f7ff fbc1 	bl	80192b0 <xTaskResumeAll>
 8019b2e:	b9d8      	cbnz	r0, 8019b68 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8019b30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019b38:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8019b3c:	f3bf 8f4f 	dsb	sy
 8019b40:	f3bf 8f6f 	isb	sy
 8019b44:	e010      	b.n	8019b68 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8019b46:	f7ff fbb3 	bl	80192b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019b4a:	4629      	mov	r1, r5
 8019b4c:	4630      	mov	r0, r6
 8019b4e:	f7ff ffa1 	bl	8019a94 <prvProcessExpiredTimer>
 8019b52:	e009      	b.n	8019b68 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019b54:	4a06      	ldr	r2, [pc, #24]	@ (8019b70 <prvProcessTimerOrBlockTask+0x70>)
 8019b56:	6812      	ldr	r2, [r2, #0]
 8019b58:	6812      	ldr	r2, [r2, #0]
 8019b5a:	b90a      	cbnz	r2, 8019b60 <prvProcessTimerOrBlockTask+0x60>
 8019b5c:	2401      	movs	r4, #1
 8019b5e:	e7de      	b.n	8019b1e <prvProcessTimerOrBlockTask+0x1e>
 8019b60:	461c      	mov	r4, r3
 8019b62:	e7dc      	b.n	8019b1e <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8019b64:	f7ff fba4 	bl	80192b0 <xTaskResumeAll>
}
 8019b68:	b002      	add	sp, #8
 8019b6a:	bd70      	pop	{r4, r5, r6, pc}
 8019b6c:	20003544 	.word	0x20003544
 8019b70:	20003548 	.word	0x20003548

08019b74 <prvProcessReceivedCommands>:
{
 8019b74:	b510      	push	{r4, lr}
 8019b76:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019b78:	e002      	b.n	8019b80 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019b7a:	9b04      	ldr	r3, [sp, #16]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	da0f      	bge.n	8019ba0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019b80:	2200      	movs	r2, #0
 8019b82:	a904      	add	r1, sp, #16
 8019b84:	4b3d      	ldr	r3, [pc, #244]	@ (8019c7c <prvProcessReceivedCommands+0x108>)
 8019b86:	6818      	ldr	r0, [r3, #0]
 8019b88:	f7fe fd73 	bl	8018672 <xQueueReceive>
 8019b8c:	2800      	cmp	r0, #0
 8019b8e:	d073      	beq.n	8019c78 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019b90:	9b04      	ldr	r3, [sp, #16]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	daf1      	bge.n	8019b7a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019b96:	9907      	ldr	r1, [sp, #28]
 8019b98:	9806      	ldr	r0, [sp, #24]
 8019b9a:	9b05      	ldr	r3, [sp, #20]
 8019b9c:	4798      	blx	r3
 8019b9e:	e7ec      	b.n	8019b7a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019ba0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019ba2:	6963      	ldr	r3, [r4, #20]
 8019ba4:	b113      	cbz	r3, 8019bac <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019ba6:	1d20      	adds	r0, r4, #4
 8019ba8:	f7fe fa76 	bl	8018098 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019bac:	a803      	add	r0, sp, #12
 8019bae:	f7ff ff5b 	bl	8019a68 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8019bb2:	9b04      	ldr	r3, [sp, #16]
 8019bb4:	2b09      	cmp	r3, #9
 8019bb6:	d8e3      	bhi.n	8019b80 <prvProcessReceivedCommands+0xc>
 8019bb8:	e8df f003 	tbb	[pc, r3]
 8019bbc:	30050505 	.word	0x30050505
 8019bc0:	05055037 	.word	0x05055037
 8019bc4:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019bc6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019bca:	f043 0301 	orr.w	r3, r3, #1
 8019bce:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019bd2:	9b05      	ldr	r3, [sp, #20]
 8019bd4:	69a1      	ldr	r1, [r4, #24]
 8019bd6:	4602      	mov	r2, r0
 8019bd8:	4419      	add	r1, r3
 8019bda:	4620      	mov	r0, r4
 8019bdc:	f7ff fe42 	bl	8019864 <prvInsertTimerInActiveList>
 8019be0:	2800      	cmp	r0, #0
 8019be2:	d0cd      	beq.n	8019b80 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019be4:	6a23      	ldr	r3, [r4, #32]
 8019be6:	4620      	mov	r0, r4
 8019be8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019bea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019bee:	f013 0f04 	tst.w	r3, #4
 8019bf2:	d0c5      	beq.n	8019b80 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019bf4:	69a2      	ldr	r2, [r4, #24]
 8019bf6:	2100      	movs	r1, #0
 8019bf8:	9100      	str	r1, [sp, #0]
 8019bfa:	460b      	mov	r3, r1
 8019bfc:	9805      	ldr	r0, [sp, #20]
 8019bfe:	4402      	add	r2, r0
 8019c00:	4620      	mov	r0, r4
 8019c02:	f7ff febd 	bl	8019980 <xTimerGenericCommand>
							configASSERT( xResult );
 8019c06:	2800      	cmp	r0, #0
 8019c08:	d1ba      	bne.n	8019b80 <prvProcessReceivedCommands+0xc>
 8019c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c0e:	f383 8811 	msr	BASEPRI, r3
 8019c12:	f3bf 8f6f 	isb	sy
 8019c16:	f3bf 8f4f 	dsb	sy
 8019c1a:	e7fe      	b.n	8019c1a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c1c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019c20:	f023 0301 	bic.w	r3, r3, #1
 8019c24:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8019c28:	e7aa      	b.n	8019b80 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019c2a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019c2e:	f043 0301 	orr.w	r3, r3, #1
 8019c32:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019c36:	9905      	ldr	r1, [sp, #20]
 8019c38:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019c3a:	b131      	cbz	r1, 8019c4a <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	4602      	mov	r2, r0
 8019c40:	4401      	add	r1, r0
 8019c42:	4620      	mov	r0, r4
 8019c44:	f7ff fe0e 	bl	8019864 <prvInsertTimerInActiveList>
					break;
 8019c48:	e79a      	b.n	8019b80 <prvProcessReceivedCommands+0xc>
 8019c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019c4e:	f383 8811 	msr	BASEPRI, r3
 8019c52:	f3bf 8f6f 	isb	sy
 8019c56:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019c5a:	e7fe      	b.n	8019c5a <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8019c5c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8019c60:	f013 0f02 	tst.w	r3, #2
 8019c64:	d004      	beq.n	8019c70 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019c66:	f023 0301 	bic.w	r3, r3, #1
 8019c6a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8019c6e:	e787      	b.n	8019b80 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8019c70:	4620      	mov	r0, r4
 8019c72:	f000 fab3 	bl	801a1dc <vPortFree>
 8019c76:	e783      	b.n	8019b80 <prvProcessReceivedCommands+0xc>
}
 8019c78:	b008      	add	sp, #32
 8019c7a:	bd10      	pop	{r4, pc}
 8019c7c:	20003544 	.word	0x20003544

08019c80 <prvTimerTask>:
{
 8019c80:	b500      	push	{lr}
 8019c82:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019c84:	a801      	add	r0, sp, #4
 8019c86:	f7ff fddd 	bl	8019844 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019c8a:	9901      	ldr	r1, [sp, #4]
 8019c8c:	f7ff ff38 	bl	8019b00 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8019c90:	f7ff ff70 	bl	8019b74 <prvProcessReceivedCommands>
	for( ;; )
 8019c94:	e7f6      	b.n	8019c84 <prvTimerTask+0x4>
	...

08019c98 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019c98:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8019cd4 <prvTaskExitError+0x3c>)
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019ca6:	d008      	beq.n	8019cba <prvTaskExitError+0x22>
 8019ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cac:	f383 8811 	msr	BASEPRI, r3
 8019cb0:	f3bf 8f6f 	isb	sy
 8019cb4:	f3bf 8f4f 	dsb	sy
 8019cb8:	e7fe      	b.n	8019cb8 <prvTaskExitError+0x20>
 8019cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019cbe:	f383 8811 	msr	BASEPRI, r3
 8019cc2:	f3bf 8f6f 	isb	sy
 8019cc6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019cca:	9b01      	ldr	r3, [sp, #4]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d0fc      	beq.n	8019cca <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019cd0:	b002      	add	sp, #8
 8019cd2:	4770      	bx	lr
 8019cd4:	20000114 	.word	0x20000114

08019cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019cd8:	4808      	ldr	r0, [pc, #32]	@ (8019cfc <prvPortStartFirstTask+0x24>)
 8019cda:	6800      	ldr	r0, [r0, #0]
 8019cdc:	6800      	ldr	r0, [r0, #0]
 8019cde:	f380 8808 	msr	MSP, r0
 8019ce2:	f04f 0000 	mov.w	r0, #0
 8019ce6:	f380 8814 	msr	CONTROL, r0
 8019cea:	b662      	cpsie	i
 8019cec:	b661      	cpsie	f
 8019cee:	f3bf 8f4f 	dsb	sy
 8019cf2:	f3bf 8f6f 	isb	sy
 8019cf6:	df00      	svc	0
 8019cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019cfa:	0000      	.short	0x0000
 8019cfc:	e000ed08 	.word	0xe000ed08

08019d00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019d00:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019d10 <vPortEnableVFP+0x10>
 8019d04:	6801      	ldr	r1, [r0, #0]
 8019d06:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8019d0a:	6001      	str	r1, [r0, #0]
 8019d0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019d0e:	0000      	.short	0x0000
 8019d10:	e000ed88 	.word	0xe000ed88

08019d14 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019d14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8019d18:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019d1c:	f021 0101 	bic.w	r1, r1, #1
 8019d20:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019d24:	4b05      	ldr	r3, [pc, #20]	@ (8019d3c <pxPortInitialiseStack+0x28>)
 8019d26:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019d2a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019d2e:	f06f 0302 	mvn.w	r3, #2
 8019d32:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8019d36:	3844      	subs	r0, #68	@ 0x44
 8019d38:	4770      	bx	lr
 8019d3a:	bf00      	nop
 8019d3c:	08019c99 	.word	0x08019c99

08019d40 <SVC_Handler>:
	__asm volatile (
 8019d40:	4b07      	ldr	r3, [pc, #28]	@ (8019d60 <pxCurrentTCBConst2>)
 8019d42:	6819      	ldr	r1, [r3, #0]
 8019d44:	6808      	ldr	r0, [r1, #0]
 8019d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d4a:	f380 8809 	msr	PSP, r0
 8019d4e:	f3bf 8f6f 	isb	sy
 8019d52:	f04f 0000 	mov.w	r0, #0
 8019d56:	f380 8811 	msr	BASEPRI, r0
 8019d5a:	4770      	bx	lr
 8019d5c:	f3af 8000 	nop.w

08019d60 <pxCurrentTCBConst2>:
 8019d60:	20003448 	.word	0x20003448

08019d64 <vPortEnterCritical>:
 8019d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d68:	f383 8811 	msr	BASEPRI, r3
 8019d6c:	f3bf 8f6f 	isb	sy
 8019d70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8019d74:	4a0b      	ldr	r2, [pc, #44]	@ (8019da4 <vPortEnterCritical+0x40>)
 8019d76:	6813      	ldr	r3, [r2, #0]
 8019d78:	3301      	adds	r3, #1
 8019d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8019d7c:	2b01      	cmp	r3, #1
 8019d7e:	d000      	beq.n	8019d82 <vPortEnterCritical+0x1e>
}
 8019d80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019d82:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019d86:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8019d8a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8019d8e:	d0f7      	beq.n	8019d80 <vPortEnterCritical+0x1c>
 8019d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019d94:	f383 8811 	msr	BASEPRI, r3
 8019d98:	f3bf 8f6f 	isb	sy
 8019d9c:	f3bf 8f4f 	dsb	sy
 8019da0:	e7fe      	b.n	8019da0 <vPortEnterCritical+0x3c>
 8019da2:	bf00      	nop
 8019da4:	20000114 	.word	0x20000114

08019da8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8019da8:	4b09      	ldr	r3, [pc, #36]	@ (8019dd0 <vPortExitCritical+0x28>)
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	b943      	cbnz	r3, 8019dc0 <vPortExitCritical+0x18>
 8019dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019db2:	f383 8811 	msr	BASEPRI, r3
 8019db6:	f3bf 8f6f 	isb	sy
 8019dba:	f3bf 8f4f 	dsb	sy
 8019dbe:	e7fe      	b.n	8019dbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8019dc0:	3b01      	subs	r3, #1
 8019dc2:	4a03      	ldr	r2, [pc, #12]	@ (8019dd0 <vPortExitCritical+0x28>)
 8019dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019dc6:	b90b      	cbnz	r3, 8019dcc <vPortExitCritical+0x24>
	__asm volatile
 8019dc8:	f383 8811 	msr	BASEPRI, r3
}
 8019dcc:	4770      	bx	lr
 8019dce:	bf00      	nop
 8019dd0:	20000114 	.word	0x20000114
	...

08019de0 <PendSV_Handler>:
	__asm volatile
 8019de0:	f3ef 8009 	mrs	r0, PSP
 8019de4:	f3bf 8f6f 	isb	sy
 8019de8:	4b15      	ldr	r3, [pc, #84]	@ (8019e40 <pxCurrentTCBConst>)
 8019dea:	681a      	ldr	r2, [r3, #0]
 8019dec:	f01e 0f10 	tst.w	lr, #16
 8019df0:	bf08      	it	eq
 8019df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dfa:	6010      	str	r0, [r2, #0]
 8019dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019e04:	f380 8811 	msr	BASEPRI, r0
 8019e08:	f3bf 8f4f 	dsb	sy
 8019e0c:	f3bf 8f6f 	isb	sy
 8019e10:	f7ff faf0 	bl	80193f4 <vTaskSwitchContext>
 8019e14:	f04f 0000 	mov.w	r0, #0
 8019e18:	f380 8811 	msr	BASEPRI, r0
 8019e1c:	bc09      	pop	{r0, r3}
 8019e1e:	6819      	ldr	r1, [r3, #0]
 8019e20:	6808      	ldr	r0, [r1, #0]
 8019e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e26:	f01e 0f10 	tst.w	lr, #16
 8019e2a:	bf08      	it	eq
 8019e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019e30:	f380 8809 	msr	PSP, r0
 8019e34:	f3bf 8f6f 	isb	sy
 8019e38:	4770      	bx	lr
 8019e3a:	bf00      	nop
 8019e3c:	f3af 8000 	nop.w

08019e40 <pxCurrentTCBConst>:
 8019e40:	20003448 	.word	0x20003448

08019e44 <xPortSysTickHandler>:
{
 8019e44:	b508      	push	{r3, lr}
	__asm volatile
 8019e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019e4a:	f383 8811 	msr	BASEPRI, r3
 8019e4e:	f3bf 8f6f 	isb	sy
 8019e52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8019e56:	f7ff f99f 	bl	8019198 <xTaskIncrementTick>
 8019e5a:	b128      	cbz	r0, 8019e68 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019e5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019e64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8019e68:	2300      	movs	r3, #0
 8019e6a:	f383 8811 	msr	BASEPRI, r3
}
 8019e6e:	bd08      	pop	{r3, pc}

08019e70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019e70:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8019e74:	2300      	movs	r3, #0
 8019e76:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019e78:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019e7a:	4b05      	ldr	r3, [pc, #20]	@ (8019e90 <vPortSetupTimerInterrupt+0x20>)
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	4905      	ldr	r1, [pc, #20]	@ (8019e94 <vPortSetupTimerInterrupt+0x24>)
 8019e80:	fba1 1303 	umull	r1, r3, r1, r3
 8019e84:	099b      	lsrs	r3, r3, #6
 8019e86:	3b01      	subs	r3, #1
 8019e88:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019e8a:	2307      	movs	r3, #7
 8019e8c:	6113      	str	r3, [r2, #16]
}
 8019e8e:	4770      	bx	lr
 8019e90:	20000018 	.word	0x20000018
 8019e94:	10624dd3 	.word	0x10624dd3

08019e98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019e98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019e9c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8019ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8019f98 <xPortStartScheduler+0x100>)
 8019ea2:	429a      	cmp	r2, r3
 8019ea4:	d01c      	beq.n	8019ee0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019ea6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019eaa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8019eae:	4b3b      	ldr	r3, [pc, #236]	@ (8019f9c <xPortStartScheduler+0x104>)
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	d01e      	beq.n	8019ef2 <xPortStartScheduler+0x5a>
{
 8019eb4:	b530      	push	{r4, r5, lr}
 8019eb6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019eb8:	4b39      	ldr	r3, [pc, #228]	@ (8019fa0 <xPortStartScheduler+0x108>)
 8019eba:	781a      	ldrb	r2, [r3, #0]
 8019ebc:	b2d2      	uxtb	r2, r2
 8019ebe:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019ec0:	22ff      	movs	r2, #255	@ 0xff
 8019ec2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019ec4:	781b      	ldrb	r3, [r3, #0]
 8019ec6:	b2db      	uxtb	r3, r3
 8019ec8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019ecc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019ed0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8019ed4:	4a33      	ldr	r2, [pc, #204]	@ (8019fa4 <xPortStartScheduler+0x10c>)
 8019ed6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019ed8:	4b33      	ldr	r3, [pc, #204]	@ (8019fa8 <xPortStartScheduler+0x110>)
 8019eda:	2207      	movs	r2, #7
 8019edc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019ede:	e01b      	b.n	8019f18 <xPortStartScheduler+0x80>
	__asm volatile
 8019ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ee4:	f383 8811 	msr	BASEPRI, r3
 8019ee8:	f3bf 8f6f 	isb	sy
 8019eec:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019ef0:	e7fe      	b.n	8019ef0 <xPortStartScheduler+0x58>
 8019ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ef6:	f383 8811 	msr	BASEPRI, r3
 8019efa:	f3bf 8f6f 	isb	sy
 8019efe:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019f02:	e7fe      	b.n	8019f02 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8019f04:	4a28      	ldr	r2, [pc, #160]	@ (8019fa8 <xPortStartScheduler+0x110>)
 8019f06:	6813      	ldr	r3, [r2, #0]
 8019f08:	3b01      	subs	r3, #1
 8019f0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019f0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019f10:	005b      	lsls	r3, r3, #1
 8019f12:	b2db      	uxtb	r3, r3
 8019f14:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019f18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8019f1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019f20:	d1f0      	bne.n	8019f04 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019f22:	4b21      	ldr	r3, [pc, #132]	@ (8019fa8 <xPortStartScheduler+0x110>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	2b03      	cmp	r3, #3
 8019f28:	d008      	beq.n	8019f3c <xPortStartScheduler+0xa4>
 8019f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019f2e:	f383 8811 	msr	BASEPRI, r3
 8019f32:	f3bf 8f6f 	isb	sy
 8019f36:	f3bf 8f4f 	dsb	sy
 8019f3a:	e7fe      	b.n	8019f3a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019f3c:	021b      	lsls	r3, r3, #8
 8019f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8019fa8 <xPortStartScheduler+0x110>)
 8019f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019f42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019f46:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019f48:	9b01      	ldr	r3, [sp, #4]
 8019f4a:	b2db      	uxtb	r3, r3
 8019f4c:	4a14      	ldr	r2, [pc, #80]	@ (8019fa0 <xPortStartScheduler+0x108>)
 8019f4e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019f50:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8019f54:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8019f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8019f5c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019f60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8019f64:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019f68:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8019f6c:	f7ff ff80 	bl	8019e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8019f70:	2500      	movs	r5, #0
 8019f72:	4b0e      	ldr	r3, [pc, #56]	@ (8019fac <xPortStartScheduler+0x114>)
 8019f74:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8019f76:	f7ff fec3 	bl	8019d00 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019f7a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8019f7e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8019f82:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8019f86:	f7ff fea7 	bl	8019cd8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8019f8a:	f7ff fa33 	bl	80193f4 <vTaskSwitchContext>
	prvTaskExitError();
 8019f8e:	f7ff fe83 	bl	8019c98 <prvTaskExitError>
}
 8019f92:	4628      	mov	r0, r5
 8019f94:	b003      	add	sp, #12
 8019f96:	bd30      	pop	{r4, r5, pc}
 8019f98:	410fc271 	.word	0x410fc271
 8019f9c:	410fc270 	.word	0x410fc270
 8019fa0:	e000e400 	.word	0xe000e400
 8019fa4:	2000357c 	.word	0x2000357c
 8019fa8:	20003578 	.word	0x20003578
 8019fac:	20000114 	.word	0x20000114

08019fb0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019fb0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019fb4:	2b0f      	cmp	r3, #15
 8019fb6:	d90f      	bls.n	8019fd8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019fb8:	4a11      	ldr	r2, [pc, #68]	@ (801a000 <vPortValidateInterruptPriority+0x50>)
 8019fba:	5c9b      	ldrb	r3, [r3, r2]
 8019fbc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019fbe:	4a11      	ldr	r2, [pc, #68]	@ (801a004 <vPortValidateInterruptPriority+0x54>)
 8019fc0:	7812      	ldrb	r2, [r2, #0]
 8019fc2:	429a      	cmp	r2, r3
 8019fc4:	d908      	bls.n	8019fd8 <vPortValidateInterruptPriority+0x28>
 8019fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019fca:	f383 8811 	msr	BASEPRI, r3
 8019fce:	f3bf 8f6f 	isb	sy
 8019fd2:	f3bf 8f4f 	dsb	sy
 8019fd6:	e7fe      	b.n	8019fd6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019fd8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8019fdc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8019fe0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8019fe4:	4a08      	ldr	r2, [pc, #32]	@ (801a008 <vPortValidateInterruptPriority+0x58>)
 8019fe6:	6812      	ldr	r2, [r2, #0]
 8019fe8:	4293      	cmp	r3, r2
 8019fea:	d908      	bls.n	8019ffe <vPortValidateInterruptPriority+0x4e>
 8019fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019ff0:	f383 8811 	msr	BASEPRI, r3
 8019ff4:	f3bf 8f6f 	isb	sy
 8019ff8:	f3bf 8f4f 	dsb	sy
 8019ffc:	e7fe      	b.n	8019ffc <vPortValidateInterruptPriority+0x4c>
	}
 8019ffe:	4770      	bx	lr
 801a000:	e000e3f0 	.word	0xe000e3f0
 801a004:	2000357c 	.word	0x2000357c
 801a008:	20003578 	.word	0x20003578

0801a00c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a00c:	4a12      	ldr	r2, [pc, #72]	@ (801a058 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a00e:	f012 0f07 	tst.w	r2, #7
 801a012:	d01f      	beq.n	801a054 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a014:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a016:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a01a:	f5c1 33b0 	rsb	r3, r1, #90112	@ 0x16000
 801a01e:	33f8      	adds	r3, #248	@ 0xf8
 801a020:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a022:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a024:	480d      	ldr	r0, [pc, #52]	@ (801a05c <prvHeapInit+0x50>)
 801a026:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a028:	2100      	movs	r1, #0
 801a02a:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a02c:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801a02e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a030:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801a034:	480a      	ldr	r0, [pc, #40]	@ (801a060 <prvHeapInit+0x54>)
 801a036:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801a038:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a03a:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a03c:	1a99      	subs	r1, r3, r2
 801a03e:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a040:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a042:	4b08      	ldr	r3, [pc, #32]	@ (801a064 <prvHeapInit+0x58>)
 801a044:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a046:	4b08      	ldr	r3, [pc, #32]	@ (801a068 <prvHeapInit+0x5c>)
 801a048:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a04a:	4b08      	ldr	r3, [pc, #32]	@ (801a06c <prvHeapInit+0x60>)
 801a04c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801a050:	601a      	str	r2, [r3, #0]
}
 801a052:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a054:	4b06      	ldr	r3, [pc, #24]	@ (801a070 <prvHeapInit+0x64>)
 801a056:	e7e5      	b.n	801a024 <prvHeapInit+0x18>
 801a058:	200035a0 	.word	0x200035a0
 801a05c:	20003598 	.word	0x20003598
 801a060:	20003594 	.word	0x20003594
 801a064:	2000358c 	.word	0x2000358c
 801a068:	20003590 	.word	0x20003590
 801a06c:	20003580 	.word	0x20003580
 801a070:	000160f8 	.word	0x000160f8

0801a074 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a074:	4b16      	ldr	r3, [pc, #88]	@ (801a0d0 <prvInsertBlockIntoFreeList+0x5c>)
 801a076:	461a      	mov	r2, r3
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	4283      	cmp	r3, r0
 801a07c:	d3fb      	bcc.n	801a076 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a07e:	6851      	ldr	r1, [r2, #4]
 801a080:	eb02 0c01 	add.w	ip, r2, r1
 801a084:	4584      	cmp	ip, r0
 801a086:	d009      	beq.n	801a09c <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a088:	6841      	ldr	r1, [r0, #4]
 801a08a:	eb00 0c01 	add.w	ip, r0, r1
 801a08e:	4563      	cmp	r3, ip
 801a090:	d009      	beq.n	801a0a6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a092:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a094:	4290      	cmp	r0, r2
 801a096:	d019      	beq.n	801a0cc <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a098:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 801a09a:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a09c:	6840      	ldr	r0, [r0, #4]
 801a09e:	4401      	add	r1, r0
 801a0a0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801a0a2:	4610      	mov	r0, r2
 801a0a4:	e7f0      	b.n	801a088 <prvInsertBlockIntoFreeList+0x14>
{
 801a0a6:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a0a8:	4c0a      	ldr	r4, [pc, #40]	@ (801a0d4 <prvInsertBlockIntoFreeList+0x60>)
 801a0aa:	6824      	ldr	r4, [r4, #0]
 801a0ac:	42a3      	cmp	r3, r4
 801a0ae:	d00b      	beq.n	801a0c8 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a0b0:	685b      	ldr	r3, [r3, #4]
 801a0b2:	4419      	add	r1, r3
 801a0b4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a0b6:	6813      	ldr	r3, [r2, #0]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 801a0bc:	4290      	cmp	r0, r2
 801a0be:	d000      	beq.n	801a0c2 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a0c0:	6010      	str	r0, [r2, #0]
	}
}
 801a0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a0c6:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a0c8:	6004      	str	r4, [r0, #0]
 801a0ca:	e7f7      	b.n	801a0bc <prvInsertBlockIntoFreeList+0x48>
 801a0cc:	4770      	bx	lr
 801a0ce:	bf00      	nop
 801a0d0:	20003598 	.word	0x20003598
 801a0d4:	20003594 	.word	0x20003594

0801a0d8 <pvPortMalloc>:
{
 801a0d8:	b538      	push	{r3, r4, r5, lr}
 801a0da:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801a0dc:	f7ff f84e 	bl	801917c <vTaskSuspendAll>
		if( pxEnd == NULL )
 801a0e0:	4b38      	ldr	r3, [pc, #224]	@ (801a1c4 <pvPortMalloc+0xec>)
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	b1b3      	cbz	r3, 801a114 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a0e6:	4b38      	ldr	r3, [pc, #224]	@ (801a1c8 <pvPortMalloc+0xf0>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	421c      	tst	r4, r3
 801a0ec:	d150      	bne.n	801a190 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 801a0ee:	2c00      	cmp	r4, #0
 801a0f0:	d050      	beq.n	801a194 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 801a0f2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a0f6:	f014 0f07 	tst.w	r4, #7
 801a0fa:	d002      	beq.n	801a102 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a0fc:	f022 0207 	bic.w	r2, r2, #7
 801a100:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a102:	2a00      	cmp	r2, #0
 801a104:	d055      	beq.n	801a1b2 <pvPortMalloc+0xda>
 801a106:	4b31      	ldr	r3, [pc, #196]	@ (801a1cc <pvPortMalloc+0xf4>)
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	4293      	cmp	r3, r2
 801a10c:	d353      	bcc.n	801a1b6 <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 801a10e:	4930      	ldr	r1, [pc, #192]	@ (801a1d0 <pvPortMalloc+0xf8>)
 801a110:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a112:	e004      	b.n	801a11e <pvPortMalloc+0x46>
			prvHeapInit();
 801a114:	f7ff ff7a 	bl	801a00c <prvHeapInit>
 801a118:	e7e5      	b.n	801a0e6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 801a11a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801a11c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a11e:	6863      	ldr	r3, [r4, #4]
 801a120:	4293      	cmp	r3, r2
 801a122:	d202      	bcs.n	801a12a <pvPortMalloc+0x52>
 801a124:	6823      	ldr	r3, [r4, #0]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d1f7      	bne.n	801a11a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 801a12a:	4b26      	ldr	r3, [pc, #152]	@ (801a1c4 <pvPortMalloc+0xec>)
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	42a3      	cmp	r3, r4
 801a130:	d043      	beq.n	801a1ba <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a132:	680d      	ldr	r5, [r1, #0]
 801a134:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a136:	6823      	ldr	r3, [r4, #0]
 801a138:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a13a:	6863      	ldr	r3, [r4, #4]
 801a13c:	1a9b      	subs	r3, r3, r2
 801a13e:	2b10      	cmp	r3, #16
 801a140:	d910      	bls.n	801a164 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a142:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a144:	f010 0f07 	tst.w	r0, #7
 801a148:	d008      	beq.n	801a15c <pvPortMalloc+0x84>
 801a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a14e:	f383 8811 	msr	BASEPRI, r3
 801a152:	f3bf 8f6f 	isb	sy
 801a156:	f3bf 8f4f 	dsb	sy
 801a15a:	e7fe      	b.n	801a15a <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a15c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a15e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a160:	f7ff ff88 	bl	801a074 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a164:	6862      	ldr	r2, [r4, #4]
 801a166:	4919      	ldr	r1, [pc, #100]	@ (801a1cc <pvPortMalloc+0xf4>)
 801a168:	680b      	ldr	r3, [r1, #0]
 801a16a:	1a9b      	subs	r3, r3, r2
 801a16c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a16e:	4919      	ldr	r1, [pc, #100]	@ (801a1d4 <pvPortMalloc+0xfc>)
 801a170:	6809      	ldr	r1, [r1, #0]
 801a172:	428b      	cmp	r3, r1
 801a174:	d201      	bcs.n	801a17a <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a176:	4917      	ldr	r1, [pc, #92]	@ (801a1d4 <pvPortMalloc+0xfc>)
 801a178:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a17a:	4b13      	ldr	r3, [pc, #76]	@ (801a1c8 <pvPortMalloc+0xf0>)
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	4313      	orrs	r3, r2
 801a180:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a182:	2300      	movs	r3, #0
 801a184:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 801a186:	4a14      	ldr	r2, [pc, #80]	@ (801a1d8 <pvPortMalloc+0x100>)
 801a188:	6813      	ldr	r3, [r2, #0]
 801a18a:	3301      	adds	r3, #1
 801a18c:	6013      	str	r3, [r2, #0]
 801a18e:	e002      	b.n	801a196 <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 801a190:	2500      	movs	r5, #0
 801a192:	e000      	b.n	801a196 <pvPortMalloc+0xbe>
 801a194:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 801a196:	f7ff f88b 	bl	80192b0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a19a:	f015 0f07 	tst.w	r5, #7
 801a19e:	d00e      	beq.n	801a1be <pvPortMalloc+0xe6>
 801a1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1a4:	f383 8811 	msr	BASEPRI, r3
 801a1a8:	f3bf 8f6f 	isb	sy
 801a1ac:	f3bf 8f4f 	dsb	sy
 801a1b0:	e7fe      	b.n	801a1b0 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 801a1b2:	2500      	movs	r5, #0
 801a1b4:	e7ef      	b.n	801a196 <pvPortMalloc+0xbe>
 801a1b6:	2500      	movs	r5, #0
 801a1b8:	e7ed      	b.n	801a196 <pvPortMalloc+0xbe>
 801a1ba:	2500      	movs	r5, #0
 801a1bc:	e7eb      	b.n	801a196 <pvPortMalloc+0xbe>
}
 801a1be:	4628      	mov	r0, r5
 801a1c0:	bd38      	pop	{r3, r4, r5, pc}
 801a1c2:	bf00      	nop
 801a1c4:	20003594 	.word	0x20003594
 801a1c8:	20003580 	.word	0x20003580
 801a1cc:	20003590 	.word	0x20003590
 801a1d0:	20003598 	.word	0x20003598
 801a1d4:	2000358c 	.word	0x2000358c
 801a1d8:	20003588 	.word	0x20003588

0801a1dc <vPortFree>:
	if( pv != NULL )
 801a1dc:	2800      	cmp	r0, #0
 801a1de:	d034      	beq.n	801a24a <vPortFree+0x6e>
{
 801a1e0:	b538      	push	{r3, r4, r5, lr}
 801a1e2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801a1e4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a1e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a1ec:	4a17      	ldr	r2, [pc, #92]	@ (801a24c <vPortFree+0x70>)
 801a1ee:	6812      	ldr	r2, [r2, #0]
 801a1f0:	4213      	tst	r3, r2
 801a1f2:	d108      	bne.n	801a206 <vPortFree+0x2a>
 801a1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a1f8:	f383 8811 	msr	BASEPRI, r3
 801a1fc:	f3bf 8f6f 	isb	sy
 801a200:	f3bf 8f4f 	dsb	sy
 801a204:	e7fe      	b.n	801a204 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a206:	f850 1c08 	ldr.w	r1, [r0, #-8]
 801a20a:	b141      	cbz	r1, 801a21e <vPortFree+0x42>
 801a20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801a210:	f383 8811 	msr	BASEPRI, r3
 801a214:	f3bf 8f6f 	isb	sy
 801a218:	f3bf 8f4f 	dsb	sy
 801a21c:	e7fe      	b.n	801a21c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a21e:	ea23 0302 	bic.w	r3, r3, r2
 801a222:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801a226:	f7fe ffa9 	bl	801917c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a22a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801a22e:	4a08      	ldr	r2, [pc, #32]	@ (801a250 <vPortFree+0x74>)
 801a230:	6813      	ldr	r3, [r2, #0]
 801a232:	440b      	add	r3, r1
 801a234:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a236:	4628      	mov	r0, r5
 801a238:	f7ff ff1c 	bl	801a074 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a23c:	4a05      	ldr	r2, [pc, #20]	@ (801a254 <vPortFree+0x78>)
 801a23e:	6813      	ldr	r3, [r2, #0]
 801a240:	3301      	adds	r3, #1
 801a242:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801a244:	f7ff f834 	bl	80192b0 <xTaskResumeAll>
}
 801a248:	bd38      	pop	{r3, r4, r5, pc}
 801a24a:	4770      	bx	lr
 801a24c:	20003580 	.word	0x20003580
 801a250:	20003590 	.word	0x20003590
 801a254:	20003584 	.word	0x20003584

0801a258 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 801a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a25a:	4607      	mov	r7, r0
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */

	vTaskSuspendAll();
 801a25c:	f7fe ff8e 	bl	801917c <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 801a260:	4b17      	ldr	r3, [pc, #92]	@ (801a2c0 <vPortGetHeapStats+0x68>)
 801a262:	681b      	ldr	r3, [r3, #0]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 801a264:	b193      	cbz	r3, 801a28c <vPortGetHeapStats+0x34>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801a266:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a26a:	2500      	movs	r5, #0
 801a26c:	462c      	mov	r4, r5
 801a26e:	e004      	b.n	801a27a <vPortGetHeapStats+0x22>
					xMinSize = pxBlock->xBlockSize;
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 801a270:	681b      	ldr	r3, [r3, #0]
			} while( pxBlock != pxEnd );
 801a272:	4a14      	ldr	r2, [pc, #80]	@ (801a2c4 <vPortGetHeapStats+0x6c>)
 801a274:	6812      	ldr	r2, [r2, #0]
 801a276:	429a      	cmp	r2, r3
 801a278:	d00c      	beq.n	801a294 <vPortGetHeapStats+0x3c>
				xBlocks++;
 801a27a:	3401      	adds	r4, #1
				if( pxBlock->xBlockSize > xMaxSize )
 801a27c:	685a      	ldr	r2, [r3, #4]
 801a27e:	42aa      	cmp	r2, r5
 801a280:	d900      	bls.n	801a284 <vPortGetHeapStats+0x2c>
					xMaxSize = pxBlock->xBlockSize;
 801a282:	4615      	mov	r5, r2
				if( pxBlock->xBlockSize < xMinSize )
 801a284:	42b2      	cmp	r2, r6
 801a286:	d2f3      	bcs.n	801a270 <vPortGetHeapStats+0x18>
					xMinSize = pxBlock->xBlockSize;
 801a288:	4616      	mov	r6, r2
 801a28a:	e7f1      	b.n	801a270 <vPortGetHeapStats+0x18>
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 801a28c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a290:	2500      	movs	r5, #0
 801a292:	462c      	mov	r4, r5
		}
	}
	xTaskResumeAll();
 801a294:	f7ff f80c 	bl	80192b0 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 801a298:	607d      	str	r5, [r7, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 801a29a:	60be      	str	r6, [r7, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 801a29c:	60fc      	str	r4, [r7, #12]

	taskENTER_CRITICAL();
 801a29e:	f7ff fd61 	bl	8019d64 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 801a2a2:	4b09      	ldr	r3, [pc, #36]	@ (801a2c8 <vPortGetHeapStats+0x70>)
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	603b      	str	r3, [r7, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 801a2a8:	4b08      	ldr	r3, [pc, #32]	@ (801a2cc <vPortGetHeapStats+0x74>)
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	617b      	str	r3, [r7, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 801a2ae:	4b08      	ldr	r3, [pc, #32]	@ (801a2d0 <vPortGetHeapStats+0x78>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	61bb      	str	r3, [r7, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 801a2b4:	4b07      	ldr	r3, [pc, #28]	@ (801a2d4 <vPortGetHeapStats+0x7c>)
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801a2ba:	f7ff fd75 	bl	8019da8 <vPortExitCritical>
}
 801a2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2c0:	20003598 	.word	0x20003598
 801a2c4:	20003594 	.word	0x20003594
 801a2c8:	20003590 	.word	0x20003590
 801a2cc:	20003588 	.word	0x20003588
 801a2d0:	20003584 	.word	0x20003584
 801a2d4:	2000358c 	.word	0x2000358c

0801a2d8 <block_device_sync>:
	return 0;
}

int block_device_sync(const struct lfs_config *c){
	return 0;
}
 801a2d8:	2000      	movs	r0, #0
 801a2da:	4770      	bx	lr

0801a2dc <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 801a2dc:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 801a2de:	fb01 f400 	mul.w	r4, r1, r0
 801a2e2:	4620      	mov	r0, r4
 801a2e4:	f7ff fef8 	bl	801a0d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 801a2e8:	4605      	mov	r5, r0
 801a2ea:	b118      	cbz	r0, 801a2f4 <mg_calloc+0x18>
 801a2ec:	4622      	mov	r2, r4
 801a2ee:	2100      	movs	r1, #0
 801a2f0:	f011 fe7e 	bl	802bff0 <memset>
}
 801a2f4:	4628      	mov	r0, r5
 801a2f6:	bd38      	pop	{r3, r4, r5, pc}

0801a2f8 <block_device_read>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 801a2f8:	b508      	push	{r3, lr}
 801a2fa:	4684      	mov	ip, r0
 801a2fc:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801a2fe:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801a302:	428b      	cmp	r3, r1
 801a304:	d90a      	bls.n	801a31c <block_device_read+0x24>
 801a306:	4696      	mov	lr, r2
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801a308:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801a30c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a310:	fb01 e103 	mla	r1, r1, r3, lr
 801a314:	f7fb f98b 	bl	801562e <sFLASH_ReadBuffer>
}
 801a318:	2000      	movs	r0, #0
 801a31a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801a31c:	4b03      	ldr	r3, [pc, #12]	@ (801a32c <block_device_read+0x34>)
 801a31e:	4a04      	ldr	r2, [pc, #16]	@ (801a330 <block_device_read+0x38>)
 801a320:	f240 1119 	movw	r1, #281	@ 0x119
 801a324:	4803      	ldr	r0, [pc, #12]	@ (801a334 <block_device_read+0x3c>)
 801a326:	f00f f911 	bl	802954c <__assert_func>
 801a32a:	bf00      	nop
 801a32c:	08038130 	.word	0x08038130
 801a330:	080381ac 	.word	0x080381ac
 801a334:	08038148 	.word	0x08038148

0801a338 <block_device_erase>:
int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 801a338:	b508      	push	{r3, lr}
	assert(block < c->block_count);
 801a33a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a33c:	428b      	cmp	r3, r1
 801a33e:	d906      	bls.n	801a34e <block_device_erase+0x16>
	sFLASH_EraseSector(block * (c -> block_size));
 801a340:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801a342:	fb01 f000 	mul.w	r0, r1, r0
 801a346:	f7fb faaf 	bl	80158a8 <sFLASH_EraseSector>
}
 801a34a:	2000      	movs	r0, #0
 801a34c:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801a34e:	4b03      	ldr	r3, [pc, #12]	@ (801a35c <block_device_erase+0x24>)
 801a350:	4a03      	ldr	r2, [pc, #12]	@ (801a360 <block_device_erase+0x28>)
 801a352:	f240 1121 	movw	r1, #289	@ 0x121
 801a356:	4803      	ldr	r0, [pc, #12]	@ (801a364 <block_device_erase+0x2c>)
 801a358:	f00f f8f8 	bl	802954c <__assert_func>
 801a35c:	08038130 	.word	0x08038130
 801a360:	08038198 	.word	0x08038198
 801a364:	08038148 	.word	0x08038148

0801a368 <block_device_prog>:
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 801a368:	b508      	push	{r3, lr}
 801a36a:	4684      	mov	ip, r0
 801a36c:	4618      	mov	r0, r3
	assert(block < c->block_count);
 801a36e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 801a372:	428b      	cmp	r3, r1
 801a374:	d90a      	bls.n	801a38c <block_device_prog+0x24>
 801a376:	4696      	mov	lr, r2
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 801a378:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
 801a37c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a380:	fb01 e103 	mla	r1, r1, r3, lr
 801a384:	f7fb face 	bl	8015924 <sFLASH_WriteBuffer>
}
 801a388:	2000      	movs	r0, #0
 801a38a:	bd08      	pop	{r3, pc}
	assert(block < c->block_count);
 801a38c:	4b03      	ldr	r3, [pc, #12]	@ (801a39c <block_device_prog+0x34>)
 801a38e:	4a04      	ldr	r2, [pc, #16]	@ (801a3a0 <block_device_prog+0x38>)
 801a390:	f240 1129 	movw	r1, #297	@ 0x129
 801a394:	4803      	ldr	r0, [pc, #12]	@ (801a3a4 <block_device_prog+0x3c>)
 801a396:	f00f f8d9 	bl	802954c <__assert_func>
 801a39a:	bf00      	nop
 801a39c:	08038130 	.word	0x08038130
 801a3a0:	08038184 	.word	0x08038184
 801a3a4:	08038148 	.word	0x08038148

0801a3a8 <mg_fs_lfs_status>:
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 801a3a8:	b530      	push	{r4, r5, lr}
 801a3aa:	b0c3      	sub	sp, #268	@ 0x10c
 801a3ac:	460d      	mov	r5, r1
 801a3ae:	4614      	mov	r4, r2
    if (lfs_stat(&lfs, path, &info) == 0) {
 801a3b0:	466a      	mov	r2, sp
 801a3b2:	4601      	mov	r1, r0
 801a3b4:	480b      	ldr	r0, [pc, #44]	@ (801a3e4 <mg_fs_lfs_status+0x3c>)
 801a3b6:	f004 fd97 	bl	801eee8 <lfs_stat>
 801a3ba:	b110      	cbz	r0, 801a3c2 <mg_fs_lfs_status+0x1a>
    return 0;
 801a3bc:	2000      	movs	r0, #0
}
 801a3be:	b043      	add	sp, #268	@ 0x10c
 801a3c0:	bd30      	pop	{r4, r5, pc}
        if (size) *size = info.size;
 801a3c2:	b10d      	cbz	r5, 801a3c8 <mg_fs_lfs_status+0x20>
 801a3c4:	9b01      	ldr	r3, [sp, #4]
 801a3c6:	602b      	str	r3, [r5, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 801a3c8:	b11c      	cbz	r4, 801a3d2 <mg_fs_lfs_status+0x2a>
 801a3ca:	2200      	movs	r2, #0
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	e9c4 2300 	strd	r2, r3, [r4]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 801a3d2:	f89d 3000 	ldrb.w	r3, [sp]
 801a3d6:	2b02      	cmp	r3, #2
 801a3d8:	d001      	beq.n	801a3de <mg_fs_lfs_status+0x36>
 801a3da:	2001      	movs	r0, #1
 801a3dc:	e7ef      	b.n	801a3be <mg_fs_lfs_status+0x16>
 801a3de:	2004      	movs	r0, #4
 801a3e0:	e7ed      	b.n	801a3be <mg_fs_lfs_status+0x16>
 801a3e2:	bf00      	nop
 801a3e4:	200196f8 	.word	0x200196f8

0801a3e8 <mg_fs_lfs_list>:
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 801a3e8:	b530      	push	{r4, r5, lr}
 801a3ea:	b0d1      	sub	sp, #324	@ 0x144
 801a3ec:	460d      	mov	r5, r1
 801a3ee:	4614      	mov	r4, r2
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 801a3f0:	4602      	mov	r2, r0
 801a3f2:	a901      	add	r1, sp, #4
 801a3f4:	480a      	ldr	r0, [pc, #40]	@ (801a420 <mg_fs_lfs_list+0x38>)
 801a3f6:	f004 fe9d 	bl	801f134 <lfs_dir_open>
 801a3fa:	b120      	cbz	r0, 801a406 <mg_fs_lfs_list+0x1e>
}
 801a3fc:	b051      	add	sp, #324	@ 0x144
 801a3fe:	bd30      	pop	{r4, r5, pc}
            fn(info.name, userdata);
 801a400:	4621      	mov	r1, r4
 801a402:	a810      	add	r0, sp, #64	@ 0x40
 801a404:	47a8      	blx	r5
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 801a406:	aa0e      	add	r2, sp, #56	@ 0x38
 801a408:	a901      	add	r1, sp, #4
 801a40a:	4805      	ldr	r0, [pc, #20]	@ (801a420 <mg_fs_lfs_list+0x38>)
 801a40c:	f004 fecd 	bl	801f1aa <lfs_dir_read>
 801a410:	2800      	cmp	r0, #0
 801a412:	dcf5      	bgt.n	801a400 <mg_fs_lfs_list+0x18>
        lfs_dir_close(&lfs, &dir);
 801a414:	a901      	add	r1, sp, #4
 801a416:	4802      	ldr	r0, [pc, #8]	@ (801a420 <mg_fs_lfs_list+0x38>)
 801a418:	f004 feb4 	bl	801f184 <lfs_dir_close>
}
 801a41c:	e7ee      	b.n	801a3fc <mg_fs_lfs_list+0x14>
 801a41e:	bf00      	nop
 801a420:	200196f8 	.word	0x200196f8

0801a424 <mg_fs_lfs_open>:
void *mg_fs_lfs_open(const char *path, int flags) {
 801a424:	b570      	push	{r4, r5, r6, lr}
 801a426:	4605      	mov	r5, r0
 801a428:	460c      	mov	r4, r1
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 801a42a:	2054      	movs	r0, #84	@ 0x54
 801a42c:	f7ff fe54 	bl	801a0d8 <pvPortMalloc>
    if (fd == NULL) return NULL;
 801a430:	4606      	mov	r6, r0
 801a432:	b188      	cbz	r0, 801a458 <mg_fs_lfs_open+0x34>
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 801a434:	f014 0301 	ands.w	r3, r4, #1
 801a438:	d000      	beq.n	801a43c <mg_fs_lfs_open+0x18>
 801a43a:	2301      	movs	r3, #1
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 801a43c:	f014 0f02 	tst.w	r4, #2
 801a440:	d003      	beq.n	801a44a <mg_fs_lfs_open+0x26>
 801a442:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 801a446:	f043 0302 	orr.w	r3, r3, #2
    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 801a44a:	462a      	mov	r2, r5
 801a44c:	4631      	mov	r1, r6
 801a44e:	4806      	ldr	r0, [pc, #24]	@ (801a468 <mg_fs_lfs_open+0x44>)
 801a450:	f004 fd60 	bl	801ef14 <lfs_file_open>
 801a454:	2800      	cmp	r0, #0
 801a456:	db01      	blt.n	801a45c <mg_fs_lfs_open+0x38>
}
 801a458:	4630      	mov	r0, r6
 801a45a:	bd70      	pop	{r4, r5, r6, pc}
        free(fd);
 801a45c:	4630      	mov	r0, r6
 801a45e:	f7ff febd 	bl	801a1dc <vPortFree>
        return NULL;
 801a462:	2600      	movs	r6, #0
 801a464:	e7f8      	b.n	801a458 <mg_fs_lfs_open+0x34>
 801a466:	bf00      	nop
 801a468:	200196f8 	.word	0x200196f8

0801a46c <mg_fs_lfs_close>:
void mg_fs_lfs_close(void *fd) {
 801a46c:	b510      	push	{r4, lr}
 801a46e:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file->file);
 801a470:	4601      	mov	r1, r0
 801a472:	4803      	ldr	r0, [pc, #12]	@ (801a480 <mg_fs_lfs_close+0x14>)
 801a474:	f004 fd7a 	bl	801ef6c <lfs_file_close>
    free(file);
 801a478:	4620      	mov	r0, r4
 801a47a:	f7ff feaf 	bl	801a1dc <vPortFree>
}
 801a47e:	bd10      	pop	{r4, pc}
 801a480:	200196f8 	.word	0x200196f8

0801a484 <mg_fs_lfs_read>:
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 801a484:	b508      	push	{r3, lr}
 801a486:	4613      	mov	r3, r2
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 801a488:	460a      	mov	r2, r1
 801a48a:	4601      	mov	r1, r0
 801a48c:	4802      	ldr	r0, [pc, #8]	@ (801a498 <mg_fs_lfs_read+0x14>)
 801a48e:	f004 fd93 	bl	801efb8 <lfs_file_read>
}
 801a492:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801a496:	bd08      	pop	{r3, pc}
 801a498:	200196f8 	.word	0x200196f8

0801a49c <mg_fs_lfs_write>:
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 801a49c:	b508      	push	{r3, lr}
 801a49e:	4613      	mov	r3, r2
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 801a4a0:	460a      	mov	r2, r1
 801a4a2:	4601      	mov	r1, r0
 801a4a4:	4802      	ldr	r0, [pc, #8]	@ (801a4b0 <mg_fs_lfs_write+0x14>)
 801a4a6:	f004 fdb3 	bl	801f010 <lfs_file_write>
}
 801a4aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801a4ae:	bd08      	pop	{r3, pc}
 801a4b0:	200196f8 	.word	0x200196f8

0801a4b4 <mg_fs_lfs_seek>:
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 801a4b4:	b510      	push	{r4, lr}
 801a4b6:	4604      	mov	r4, r0
 801a4b8:	460a      	mov	r2, r1
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	4601      	mov	r1, r0
 801a4be:	4809      	ldr	r0, [pc, #36]	@ (801a4e4 <mg_fs_lfs_seek+0x30>)
 801a4c0:	f004 fdd2 	bl	801f068 <lfs_file_seek>
 801a4c4:	2800      	cmp	r0, #0
 801a4c6:	db06      	blt.n	801a4d6 <mg_fs_lfs_seek+0x22>
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 801a4c8:	4621      	mov	r1, r4
 801a4ca:	4806      	ldr	r0, [pc, #24]	@ (801a4e4 <mg_fs_lfs_seek+0x30>)
 801a4cc:	f004 fdf8 	bl	801f0c0 <lfs_file_tell>
     if (pos < 0) {
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	db03      	blt.n	801a4dc <mg_fs_lfs_seek+0x28>
}
 801a4d4:	bd10      	pop	{r4, pc}
        return (size_t)-1;  // Ошибка при перемещении
 801a4d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4da:	e7fb      	b.n	801a4d4 <mg_fs_lfs_seek+0x20>
         return (size_t)-1;  // Ошибка при получении позиции
 801a4dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4e0:	e7f8      	b.n	801a4d4 <mg_fs_lfs_seek+0x20>
 801a4e2:	bf00      	nop
 801a4e4:	200196f8 	.word	0x200196f8

0801a4e8 <mg_fs_lfs_rename>:
bool mg_fs_lfs_rename(const char *from, const char *to) {
 801a4e8:	b508      	push	{r3, lr}
 801a4ea:	460a      	mov	r2, r1
    return lfs_rename(&lfs, from, to) == 0;
 801a4ec:	4601      	mov	r1, r0
 801a4ee:	4803      	ldr	r0, [pc, #12]	@ (801a4fc <mg_fs_lfs_rename+0x14>)
 801a4f0:	f004 fce5 	bl	801eebe <lfs_rename>
}
 801a4f4:	fab0 f080 	clz	r0, r0
 801a4f8:	0940      	lsrs	r0, r0, #5
 801a4fa:	bd08      	pop	{r3, pc}
 801a4fc:	200196f8 	.word	0x200196f8

0801a500 <mg_fs_lfs_remove>:
bool mg_fs_lfs_remove(const char *path) {
 801a500:	b508      	push	{r3, lr}
 801a502:	4601      	mov	r1, r0
    return lfs_remove(&lfs, path) == 0;
 801a504:	4803      	ldr	r0, [pc, #12]	@ (801a514 <mg_fs_lfs_remove+0x14>)
 801a506:	f004 fcc7 	bl	801ee98 <lfs_remove>
}
 801a50a:	fab0 f080 	clz	r0, r0
 801a50e:	0940      	lsrs	r0, r0, #5
 801a510:	bd08      	pop	{r3, pc}
 801a512:	bf00      	nop
 801a514:	200196f8 	.word	0x200196f8

0801a518 <mg_fs_lfs_mkdir>:
bool mg_fs_lfs_mkdir(const char *path) {
 801a518:	b508      	push	{r3, lr}
 801a51a:	4601      	mov	r1, r0
    return lfs_mkdir(&lfs, path) == 0;
 801a51c:	4803      	ldr	r0, [pc, #12]	@ (801a52c <mg_fs_lfs_mkdir+0x14>)
 801a51e:	f004 fdf5 	bl	801f10c <lfs_mkdir>
}
 801a522:	fab0 f080 	clz	r0, r0
 801a526:	0940      	lsrs	r0, r0, #5
 801a528:	bd08      	pop	{r3, pc}
 801a52a:	bf00      	nop
 801a52c:	200196f8 	.word	0x200196f8

0801a530 <mg_fs_mounted>:
}
 801a530:	4b01      	ldr	r3, [pc, #4]	@ (801a538 <mg_fs_mounted+0x8>)
 801a532:	7818      	ldrb	r0, [r3, #0]
 801a534:	4770      	bx	lr
 801a536:	bf00      	nop
 801a538:	20019698 	.word	0x20019698

0801a53c <lfs_fs_ll_init>:
int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 801a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a540:	b090      	sub	sp, #64	@ 0x40
 801a542:	4680      	mov	r8, r0
 801a544:	460f      	mov	r7, r1
	flash_info = sFLASH_GetInfo();
 801a546:	4668      	mov	r0, sp
 801a548:	f7fb f8ca 	bl	80156e0 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 801a54c:	9b00      	ldr	r3, [sp, #0]
 801a54e:	2b00      	cmp	r3, #0
 801a550:	d054      	beq.n	801a5fc <lfs_fs_ll_init+0xc0>
	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 801a552:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801a556:	4621      	mov	r1, r4
 801a558:	2001      	movs	r0, #1
 801a55a:	f7ff febf 	bl	801a2dc <mg_calloc>
 801a55e:	4605      	mov	r5, r0
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 801a560:	4621      	mov	r1, r4
 801a562:	2001      	movs	r0, #1
 801a564:	f7ff feba 	bl	801a2dc <mg_calloc>
 801a568:	4606      	mov	r6, r0
	void * lookahead_buff = calloc(1, flash_info.page_size);
 801a56a:	4621      	mov	r1, r4
 801a56c:	2001      	movs	r0, #1
 801a56e:	f7ff feb5 	bl	801a2dc <mg_calloc>
	if (!(read_buff || write_buff || lookahead_buff)){
 801a572:	2d00      	cmp	r5, #0
 801a574:	d02b      	beq.n	801a5ce <lfs_fs_ll_init+0x92>
	cfg.read_size         = flash_info.read_size;
 801a576:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a57a:	4922      	ldr	r1, [pc, #136]	@ (801a604 <lfs_fs_ll_init+0xc8>)
 801a57c:	61cb      	str	r3, [r1, #28]
	cfg.prog_size         = flash_info.write_size;
 801a57e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a582:	620b      	str	r3, [r1, #32]
    cfg.block_size        = flash_info.erase_size;
 801a584:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a588:	624b      	str	r3, [r1, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 801a58a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801a58e:	628b      	str	r3, [r1, #40]	@ 0x28
    cfg.lookahead_size    = flash_info.page_size;
 801a590:	634c      	str	r4, [r1, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 801a592:	630c      	str	r4, [r1, #48]	@ 0x30
    cfg.read_buffer       = read_buff;
 801a594:	63cd      	str	r5, [r1, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 801a596:	640e      	str	r6, [r1, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 801a598:	6448      	str	r0, [r1, #68]	@ 0x44
    cfg.read   = block_device_read;
 801a59a:	4b1b      	ldr	r3, [pc, #108]	@ (801a608 <lfs_fs_ll_init+0xcc>)
 801a59c:	604b      	str	r3, [r1, #4]
    cfg.prog   = block_device_prog;
 801a59e:	4b1b      	ldr	r3, [pc, #108]	@ (801a60c <lfs_fs_ll_init+0xd0>)
 801a5a0:	608b      	str	r3, [r1, #8]
    cfg.erase  = block_device_erase;
 801a5a2:	4b1b      	ldr	r3, [pc, #108]	@ (801a610 <lfs_fs_ll_init+0xd4>)
 801a5a4:	60cb      	str	r3, [r1, #12]
    cfg.sync   = block_device_sync;
 801a5a6:	4b1b      	ldr	r3, [pc, #108]	@ (801a614 <lfs_fs_ll_init+0xd8>)
 801a5a8:	610b      	str	r3, [r1, #16]
    cfg.lock 	= lock;
 801a5aa:	f8c1 8014 	str.w	r8, [r1, #20]
	cfg.unlock	= unlock;
 801a5ae:	618f      	str	r7, [r1, #24]
    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 801a5b0:	f242 7310 	movw	r3, #10000	@ 0x2710
 801a5b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
    if (lfs_mount(&lfs, &cfg)< 0){
 801a5b6:	4818      	ldr	r0, [pc, #96]	@ (801a618 <lfs_fs_ll_init+0xdc>)
 801a5b8:	f004 fc5b 	bl	801ee72 <lfs_mount>
 801a5bc:	2800      	cmp	r0, #0
 801a5be:	db0d      	blt.n	801a5dc <lfs_fs_ll_init+0xa0>
    	fs_mounted = 1;
 801a5c0:	4b16      	ldr	r3, [pc, #88]	@ (801a61c <lfs_fs_ll_init+0xe0>)
 801a5c2:	2201      	movs	r2, #1
 801a5c4:	701a      	strb	r2, [r3, #0]
    	return 0;
 801a5c6:	2000      	movs	r0, #0
}
 801a5c8:	b010      	add	sp, #64	@ 0x40
 801a5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(read_buff || write_buff || lookahead_buff)){
 801a5ce:	2e00      	cmp	r6, #0
 801a5d0:	d1d1      	bne.n	801a576 <lfs_fs_ll_init+0x3a>
 801a5d2:	2800      	cmp	r0, #0
 801a5d4:	d1cf      	bne.n	801a576 <lfs_fs_ll_init+0x3a>
		return -2;
 801a5d6:	f06f 0001 	mvn.w	r0, #1
 801a5da:	e7f5      	b.n	801a5c8 <lfs_fs_ll_init+0x8c>
    	lfs_format(&lfs, &cfg);
 801a5dc:	4d09      	ldr	r5, [pc, #36]	@ (801a604 <lfs_fs_ll_init+0xc8>)
 801a5de:	4c0e      	ldr	r4, [pc, #56]	@ (801a618 <lfs_fs_ll_init+0xdc>)
 801a5e0:	4629      	mov	r1, r5
 801a5e2:	4620      	mov	r0, r4
 801a5e4:	f004 fc32 	bl	801ee4c <lfs_format>
    	if((err = lfs_mount(&lfs, &cfg)) == 0) fs_mounted = 1;
 801a5e8:	4629      	mov	r1, r5
 801a5ea:	4620      	mov	r0, r4
 801a5ec:	f004 fc41 	bl	801ee72 <lfs_mount>
 801a5f0:	2800      	cmp	r0, #0
 801a5f2:	d1e9      	bne.n	801a5c8 <lfs_fs_ll_init+0x8c>
 801a5f4:	4b09      	ldr	r3, [pc, #36]	@ (801a61c <lfs_fs_ll_init+0xe0>)
 801a5f6:	2201      	movs	r2, #1
 801a5f8:	701a      	strb	r2, [r3, #0]
    	return err;
 801a5fa:	e7e5      	b.n	801a5c8 <lfs_fs_ll_init+0x8c>
	if (flash_info.flash_id == 0x0) return -1;
 801a5fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a600:	e7e2      	b.n	801a5c8 <lfs_fs_ll_init+0x8c>
 801a602:	bf00      	nop
 801a604:	2001969c 	.word	0x2001969c
 801a608:	0801a2f9 	.word	0x0801a2f9
 801a60c:	0801a369 	.word	0x0801a369
 801a610:	0801a339 	.word	0x0801a339
 801a614:	0801a2d9 	.word	0x0801a2d9
 801a618:	200196f8 	.word	0x200196f8
 801a61c:	20019698 	.word	0x20019698

0801a620 <lfs_pair_issync>:
}

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a620:	6803      	ldr	r3, [r0, #0]
 801a622:	680a      	ldr	r2, [r1, #0]
 801a624:	4293      	cmp	r3, r2
 801a626:	d004      	beq.n	801a632 <lfs_pair_issync+0x12>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a628:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a62a:	428b      	cmp	r3, r1
 801a62c:	d015      	beq.n	801a65a <lfs_pair_issync+0x3a>
 801a62e:	2000      	movs	r0, #0
 801a630:	4770      	bx	lr
        const lfs_block_t pairb[2]) {
 801a632:	b430      	push	{r4, r5}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a634:	6844      	ldr	r4, [r0, #4]
 801a636:	684d      	ldr	r5, [r1, #4]
 801a638:	42ac      	cmp	r4, r5
 801a63a:	d00a      	beq.n	801a652 <lfs_pair_issync+0x32>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a63c:	6849      	ldr	r1, [r1, #4]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a63e:	428b      	cmp	r3, r1
 801a640:	d002      	beq.n	801a648 <lfs_pair_issync+0x28>
 801a642:	2000      	movs	r0, #0
}
 801a644:	bc30      	pop	{r4, r5}
 801a646:	4770      	bx	lr
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a648:	6843      	ldr	r3, [r0, #4]
 801a64a:	429a      	cmp	r2, r3
 801a64c:	d003      	beq.n	801a656 <lfs_pair_issync+0x36>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a64e:	2000      	movs	r0, #0
 801a650:	e7f8      	b.n	801a644 <lfs_pair_issync+0x24>
 801a652:	2001      	movs	r0, #1
 801a654:	e7f6      	b.n	801a644 <lfs_pair_issync+0x24>
 801a656:	2001      	movs	r0, #1
 801a658:	e7f4      	b.n	801a644 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 801a65a:	6843      	ldr	r3, [r0, #4]
 801a65c:	429a      	cmp	r2, r3
 801a65e:	d001      	beq.n	801a664 <lfs_pair_issync+0x44>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 801a660:	2000      	movs	r0, #0
 801a662:	4770      	bx	lr
 801a664:	2001      	movs	r0, #1
}
 801a666:	4770      	bx	lr

0801a668 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
    for (int i = 0; i < 3; i++) {
 801a668:	2300      	movs	r3, #0
 801a66a:	2b02      	cmp	r3, #2
 801a66c:	dc0d      	bgt.n	801a68a <lfs_gstate_xor+0x22>
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 801a66e:	b410      	push	{r4}
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 801a670:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801a674:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801a678:	4062      	eors	r2, r4
 801a67a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 801a67e:	3301      	adds	r3, #1
 801a680:	2b02      	cmp	r3, #2
 801a682:	ddf5      	ble.n	801a670 <lfs_gstate_xor+0x8>
    }
}
 801a684:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a688:	4770      	bx	lr
 801a68a:	4770      	bx	lr

0801a68c <lfs_gstate_hasmovehere>:
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a68c:	6803      	ldr	r3, [r0, #0]
    return (tag & 0x70000000) >> 20;
 801a68e:	0d1b      	lsrs	r3, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a690:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801a694:	d00f      	beq.n	801a6b6 <lfs_gstate_hasmovehere+0x2a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801a696:	6843      	ldr	r3, [r0, #4]
 801a698:	680a      	ldr	r2, [r1, #0]
 801a69a:	4293      	cmp	r3, r2
 801a69c:	d00d      	beq.n	801a6ba <lfs_gstate_hasmovehere+0x2e>
 801a69e:	6880      	ldr	r0, [r0, #8]
 801a6a0:	6849      	ldr	r1, [r1, #4]
 801a6a2:	4288      	cmp	r0, r1
 801a6a4:	d00b      	beq.n	801a6be <lfs_gstate_hasmovehere+0x32>
 801a6a6:	428b      	cmp	r3, r1
 801a6a8:	d00b      	beq.n	801a6c2 <lfs_gstate_hasmovehere+0x36>
 801a6aa:	4282      	cmp	r2, r0
 801a6ac:	d001      	beq.n	801a6b2 <lfs_gstate_hasmovehere+0x26>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a6ae:	2000      	movs	r0, #0
}
 801a6b0:	4770      	bx	lr
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 801a6b2:	2001      	movs	r0, #1
 801a6b4:	4770      	bx	lr
 801a6b6:	2000      	movs	r0, #0
 801a6b8:	4770      	bx	lr
 801a6ba:	2001      	movs	r0, #1
 801a6bc:	4770      	bx	lr
 801a6be:	2001      	movs	r0, #1
 801a6c0:	4770      	bx	lr
 801a6c2:	2001      	movs	r0, #1
 801a6c4:	4770      	bx	lr

0801a6c6 <lfs_mlist_isopen>:
}
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 801a6c6:	b082      	sub	sp, #8
 801a6c8:	9001      	str	r0, [sp, #4]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 801a6ca:	ab01      	add	r3, sp, #4
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	b11b      	cbz	r3, 801a6d8 <lfs_mlist_isopen+0x12>
        if (*p == (struct lfs_mlist*)node) {
 801a6d0:	428b      	cmp	r3, r1
 801a6d2:	d1fb      	bne.n	801a6cc <lfs_mlist_isopen+0x6>
            return true;
 801a6d4:	2001      	movs	r0, #1
 801a6d6:	e000      	b.n	801a6da <lfs_mlist_isopen+0x14>
        }
    }

    return false;
 801a6d8:	2000      	movs	r0, #0
}
 801a6da:	b002      	add	sp, #8
 801a6dc:	4770      	bx	lr

0801a6de <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 801a6de:	3028      	adds	r0, #40	@ 0x28
 801a6e0:	e000      	b.n	801a6e4 <lfs_mlist_remove+0x6>
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	6803      	ldr	r3, [r0, #0]
 801a6e6:	b123      	cbz	r3, 801a6f2 <lfs_mlist_remove+0x14>
        if (*p == mlist) {
 801a6e8:	428b      	cmp	r3, r1
 801a6ea:	d1fa      	bne.n	801a6e2 <lfs_mlist_remove+0x4>
            *p = (*p)->next;
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	6003      	str	r3, [r0, #0]
            break;
 801a6f0:	4770      	bx	lr
        }
    }
}
 801a6f2:	4770      	bx	lr

0801a6f4 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
    mlist->next = lfs->mlist;
 801a6f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a6f6:	600b      	str	r3, [r1, #0]
    lfs->mlist = mlist;
 801a6f8:	6281      	str	r1, [r0, #40]	@ 0x28
}
 801a6fa:	4770      	bx	lr

0801a6fc <lfs_fs_disk_version>:
    } else
#endif
    {
        return LFS_DISK_VERSION;
    }
}
 801a6fc:	4800      	ldr	r0, [pc, #0]	@ (801a700 <lfs_fs_disk_version+0x4>)
 801a6fe:	4770      	bx	lr
 801a700:	00020001 	.word	0x00020001

0801a704 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 801a704:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 801a706:	f7ff fff9 	bl	801a6fc <lfs_fs_disk_version>

}
 801a70a:	0c00      	lsrs	r0, r0, #16
 801a70c:	bd08      	pop	{r3, pc}

0801a70e <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 801a70e:	b508      	push	{r3, lr}
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 801a710:	f7ff fff4 	bl	801a6fc <lfs_fs_disk_version>
}
 801a714:	b280      	uxth	r0, r0
 801a716:	bd08      	pop	{r3, pc}

0801a718 <lfs_alloc_ckpoint>:
// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
    lfs->lookahead.ckpoint = lfs->block_count;
 801a718:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a71a:	6603      	str	r3, [r0, #96]	@ 0x60
}
 801a71c:	4770      	bx	lr

0801a71e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 801a71e:	b508      	push	{r3, lr}
    lfs->lookahead.size = 0;
 801a720:	2200      	movs	r2, #0
 801a722:	6582      	str	r2, [r0, #88]	@ 0x58
    lfs->lookahead.next = 0;
 801a724:	65c2      	str	r2, [r0, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 801a726:	f7ff fff7 	bl	801a718 <lfs_alloc_ckpoint>
}
 801a72a:	bd08      	pop	{r3, pc}

0801a72c <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
 801a72c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801a72e:	1ac9      	subs	r1, r1, r3
            + lfs->block_count) % lfs->block_count;
 801a730:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a732:	4419      	add	r1, r3
    lfs_block_t off = ((block - lfs->lookahead.start)
 801a734:	fbb1 f2f3 	udiv	r2, r1, r3
 801a738:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 801a73c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801a73e:	428b      	cmp	r3, r1
 801a740:	d90d      	bls.n	801a75e <lfs_alloc_lookahead+0x32>
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 801a742:	b410      	push	{r4}
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 801a744:	6e44      	ldr	r4, [r0, #100]	@ 0x64
 801a746:	08c8      	lsrs	r0, r1, #3
 801a748:	5c23      	ldrb	r3, [r4, r0]
 801a74a:	f001 0107 	and.w	r1, r1, #7
 801a74e:	2201      	movs	r2, #1
 801a750:	408a      	lsls	r2, r1
 801a752:	4313      	orrs	r3, r2
 801a754:	5423      	strb	r3, [r4, r0]
    }

    return 0;
}
 801a756:	2000      	movs	r0, #0
 801a758:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a75c:	4770      	bx	lr
 801a75e:	2000      	movs	r0, #0
 801a760:	4770      	bx	lr
	...

0801a764 <lfs_dir_traverse_filter>:
    return 0;
}

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 801a764:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801a766:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 801a76a:	d01c      	beq.n	801a7a6 <lfs_dir_traverse_filter+0x42>
 801a76c:	4a19      	ldr	r2, [pc, #100]	@ (801a7d4 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 801a76e:	6803      	ldr	r3, [r0, #0]
 801a770:	ea83 0401 	eor.w	r4, r3, r1
 801a774:	4214      	tst	r4, r2
 801a776:	d018      	beq.n	801a7aa <lfs_dir_traverse_filter+0x46>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a778:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 801a77c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801a780:	d013      	beq.n	801a7aa <lfs_dir_traverse_filter+0x46>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 801a782:	4c14      	ldr	r4, [pc, #80]	@ (801a7d4 <lfs_dir_traverse_filter+0x70>)
 801a784:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 801a786:	4a14      	ldr	r2, [pc, #80]	@ (801a7d8 <lfs_dir_traverse_filter+0x74>)
 801a788:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801a78a:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801a78e:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 801a792:	4294      	cmp	r4, r2
 801a794:	d009      	beq.n	801a7aa <lfs_dir_traverse_filter+0x46>
    return (tag & 0x70000000) >> 20;
 801a796:	0d0a      	lsrs	r2, r1, #20
 801a798:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801a79c:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 801a7a0:	d009      	beq.n	801a7b6 <lfs_dir_traverse_filter+0x52>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
 801a7a2:	2000      	movs	r0, #0
 801a7a4:	e004      	b.n	801a7b0 <lfs_dir_traverse_filter+0x4c>
            : LFS_MKTAG(0x700, 0x3ff, 0);
 801a7a6:	4a0d      	ldr	r2, [pc, #52]	@ (801a7dc <lfs_dir_traverse_filter+0x78>)
 801a7a8:	e7e1      	b.n	801a76e <lfs_dir_traverse_filter+0xa>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	6003      	str	r3, [r0, #0]
        return true;
 801a7ae:	2001      	movs	r0, #1
}
 801a7b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7b4:	4770      	bx	lr
    return (tag & 0x000ffc00) >> 10;
 801a7b6:	f3c1 2189 	ubfx	r1, r1, #10, #10
 801a7ba:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801a7be:	428c      	cmp	r4, r1
 801a7c0:	d305      	bcc.n	801a7ce <lfs_dir_traverse_filter+0x6a>
    return (int8_t)lfs_tag_chunk(tag);
 801a7c2:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801a7c4:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 801a7c8:	6003      	str	r3, [r0, #0]
    return false;
 801a7ca:	2000      	movs	r0, #0
 801a7cc:	e7f0      	b.n	801a7b0 <lfs_dir_traverse_filter+0x4c>
 801a7ce:	2000      	movs	r0, #0
 801a7d0:	e7ee      	b.n	801a7b0 <lfs_dir_traverse_filter+0x4c>
 801a7d2:	bf00      	nop
 801a7d4:	7ffffc00 	.word	0x7ffffc00
 801a7d8:	000ffc00 	.word	0x000ffc00
 801a7dc:	700ffc00 	.word	0x700ffc00

0801a7e0 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
 801a7e0:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a7e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801a7e8:	bf08      	it	eq
 801a7ea:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
 801a7ec:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801a7f0:	3104      	adds	r1, #4
#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 801a7f2:	6803      	ldr	r3, [r0, #0]
 801a7f4:	440b      	add	r3, r1
 801a7f6:	6003      	str	r3, [r0, #0]
    return 0;
}
 801a7f8:	2000      	movs	r0, #0
 801a7fa:	4770      	bx	lr

0801a7fc <lfs_dir_needsrelocation>:
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 801a7fc:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801a800:	2b00      	cmp	r3, #0
 801a802:	dd0b      	ble.n	801a81c <lfs_dir_needsrelocation+0x20>
 801a804:	688a      	ldr	r2, [r1, #8]
 801a806:	3201      	adds	r2, #1
 801a808:	3301      	adds	r3, #1
 801a80a:	f043 0301 	orr.w	r3, r3, #1
 801a80e:	fbb2 f1f3 	udiv	r1, r2, r3
 801a812:	fb03 2211 	mls	r2, r3, r1, r2
 801a816:	b11a      	cbz	r2, 801a820 <lfs_dir_needsrelocation+0x24>
 801a818:	2000      	movs	r0, #0
 801a81a:	4770      	bx	lr
 801a81c:	2000      	movs	r0, #0
 801a81e:	4770      	bx	lr
 801a820:	2001      	movs	r0, #1
}
 801a822:	4770      	bx	lr

0801a824 <lfs_dir_close_>:
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);

    return 0;
}

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 801a824:	b508      	push	{r3, lr}
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801a826:	f7ff ff5a 	bl	801a6de <lfs_mlist_remove>

    return 0;
}
 801a82a:	2000      	movs	r0, #0
 801a82c:	bd08      	pop	{r3, pc}

0801a82e <lfs_file_tell_>:
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;
    return file->pos;
}
 801a82e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801a830:	4770      	bx	lr

0801a832 <lfs_file_size_>:

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 801a832:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801a834:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801a838:	d101      	bne.n	801a83e <lfs_file_size_+0xc>
        return lfs_max(file->pos, file->ctz.size);
    }
#endif

    return file->ctz.size;
 801a83a:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
}
 801a83c:	4770      	bx	lr
        return lfs_max(file->pos, file->ctz.size);
 801a83e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801a840:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801a842:	4298      	cmp	r0, r3
 801a844:	bf38      	it	cc
 801a846:	4618      	movcc	r0, r3
 801a848:	4770      	bx	lr

0801a84a <lfs_fs_prepsuperblock>:
    return LFS_ERR_NOENT;
}
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801a84a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a84c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 801a850:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 801a854:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801a856:	4770      	bx	lr

0801a858 <lfs_fs_prepmove>:
}
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801a858:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801a85a:	4b13      	ldr	r3, [pc, #76]	@ (801a8a8 <lfs_fs_prepmove+0x50>)
 801a85c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801a85e:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801a860:	f240 3cff 	movw	ip, #1023	@ 0x3ff
 801a864:	4561      	cmp	r1, ip
 801a866:	d017      	beq.n	801a898 <lfs_fs_prepmove+0x40>
 801a868:	ea4f 2c81 	mov.w	ip, r1, lsl #10
 801a86c:	f04c 4c9f 	orr.w	ip, ip, #1333788672	@ 0x4f800000
 801a870:	f44c 0ce0 	orr.w	ip, ip, #7340032	@ 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801a874:	ea43 030c 	orr.w	r3, r3, ip
 801a878:	6303      	str	r3, [r0, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801a87a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801a87e:	4299      	cmp	r1, r3
 801a880:	d00d      	beq.n	801a89e <lfs_fs_prepmove+0x46>
 801a882:	6813      	ldr	r3, [r2, #0]
 801a884:	6343      	str	r3, [r0, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801a886:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801a88a:	4299      	cmp	r1, r3
 801a88c:	d009      	beq.n	801a8a2 <lfs_fs_prepmove+0x4a>
 801a88e:	6853      	ldr	r3, [r2, #4]
 801a890:	6383      	str	r3, [r0, #56]	@ 0x38
}
 801a892:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a896:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801a898:	f04f 0c00 	mov.w	ip, #0
 801a89c:	e7ea      	b.n	801a874 <lfs_fs_prepmove+0x1c>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801a89e:	2300      	movs	r3, #0
 801a8a0:	e7f0      	b.n	801a884 <lfs_fs_prepmove+0x2c>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	e7f4      	b.n	801a890 <lfs_fs_prepmove+0x38>
 801a8a6:	bf00      	nop
 801a8a8:	800003ff 	.word	0x800003ff

0801a8ac <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 801a8ac:	6803      	ldr	r3, [r0, #0]
 801a8ae:	3301      	adds	r3, #1
 801a8b0:	6003      	str	r3, [r0, #0]
    return 0;
}
 801a8b2:	2000      	movs	r0, #0
 801a8b4:	4770      	bx	lr
	...

0801a8b8 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 801a8b8:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 801a8ba:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a8bc:	428b      	cmp	r3, r1
 801a8be:	d905      	bls.n	801a8cc <lfs_bd_erase+0x14>
    int err = lfs->cfg->erase(lfs->cfg, block);
 801a8c0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801a8c2:	68c3      	ldr	r3, [r0, #12]
 801a8c4:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801a8c6:	2800      	cmp	r0, #0
 801a8c8:	dc07      	bgt.n	801a8da <lfs_bd_erase+0x22>
}
 801a8ca:	bd08      	pop	{r3, pc}
    LFS_ASSERT(block < lfs->block_count);
 801a8cc:	4b06      	ldr	r3, [pc, #24]	@ (801a8e8 <lfs_bd_erase+0x30>)
 801a8ce:	4a07      	ldr	r2, [pc, #28]	@ (801a8ec <lfs_bd_erase+0x34>)
 801a8d0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 801a8d4:	4806      	ldr	r0, [pc, #24]	@ (801a8f0 <lfs_bd_erase+0x38>)
 801a8d6:	f00e fe39 	bl	802954c <__assert_func>
    LFS_ASSERT(err <= 0);
 801a8da:	4b06      	ldr	r3, [pc, #24]	@ (801a8f4 <lfs_bd_erase+0x3c>)
 801a8dc:	4a03      	ldr	r2, [pc, #12]	@ (801a8ec <lfs_bd_erase+0x34>)
 801a8de:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801a8e2:	4803      	ldr	r0, [pc, #12]	@ (801a8f0 <lfs_bd_erase+0x38>)
 801a8e4:	f00e fe32 	bl	802954c <__assert_func>
 801a8e8:	080382ac 	.word	0x080382ac
 801a8ec:	08038f0c 	.word	0x08038f0c
 801a8f0:	080381c0 	.word	0x080381c0
 801a8f4:	080381f0 	.word	0x080381f0

0801a8f8 <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 801a8f8:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801a8fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801a8fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801a900:	b90a      	cbnz	r2, 801a906 <lfs_fs_preporphans+0xe>
 801a902:	2900      	cmp	r1, #0
 801a904:	db12      	blt.n	801a92c <lfs_fs_preporphans+0x34>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801a906:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 801a90a:	d901      	bls.n	801a910 <lfs_fs_preporphans+0x18>
 801a90c:	2900      	cmp	r1, #0
 801a90e:	dc14      	bgt.n	801a93a <lfs_fs_preporphans+0x42>
    lfs->gstate.tag += orphans;
 801a910:	4419      	add	r1, r3
 801a912:	6301      	str	r1, [r0, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801a914:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
    return tag & 0x000003ff;
 801a918:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
 801a91c:	3900      	subs	r1, #0
 801a91e:	bf18      	it	ne
 801a920:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801a922:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 801a926:	6303      	str	r3, [r0, #48]	@ 0x30
}
 801a928:	2000      	movs	r0, #0
 801a92a:	bd08      	pop	{r3, pc}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 801a92c:	4b06      	ldr	r3, [pc, #24]	@ (801a948 <lfs_fs_preporphans+0x50>)
 801a92e:	4a07      	ldr	r2, [pc, #28]	@ (801a94c <lfs_fs_preporphans+0x54>)
 801a930:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 801a934:	4806      	ldr	r0, [pc, #24]	@ (801a950 <lfs_fs_preporphans+0x58>)
 801a936:	f00e fe09 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 801a93a:	4b06      	ldr	r3, [pc, #24]	@ (801a954 <lfs_fs_preporphans+0x5c>)
 801a93c:	4a03      	ldr	r2, [pc, #12]	@ (801a94c <lfs_fs_preporphans+0x54>)
 801a93e:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 801a942:	4803      	ldr	r0, [pc, #12]	@ (801a950 <lfs_fs_preporphans+0x58>)
 801a944:	f00e fe02 	bl	802954c <__assert_func>
 801a948:	080381fc 	.word	0x080381fc
 801a94c:	08038edc 	.word	0x08038edc
 801a950:	080381c0 	.word	0x080381c0
 801a954:	08038234 	.word	0x08038234

0801a958 <lfs_cache_zero>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 801a958:	b510      	push	{r4, lr}
 801a95a:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 801a95c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a95e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a960:	21ff      	movs	r1, #255	@ 0xff
 801a962:	68e0      	ldr	r0, [r4, #12]
 801a964:	f011 fb44 	bl	802bff0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 801a968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a96c:	6023      	str	r3, [r4, #0]
}
 801a96e:	bd10      	pop	{r4, pc}

0801a970 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 801a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
 801a972:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 801a974:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a976:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 801a978:	3f08      	subs	r7, #8
    lfs_off_t i = size / b;
 801a97a:	fbb5 f0f7 	udiv	r0, r5, r7
    if (i == 0) {
 801a97e:	42bd      	cmp	r5, r7
 801a980:	d312      	bcc.n	801a9a8 <lfs_ctz_index+0x38>
 801a982:	460e      	mov	r6, r1
}

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 801a984:	3801      	subs	r0, #1
 801a986:	f7f6 f9ff 	bl	8010d88 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 801a98a:	1c84      	adds	r4, r0, #2
 801a98c:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 801a990:	fbb4 f4f7 	udiv	r4, r4, r7
    *off = size - b*i - 4*lfs_popc(i);
 801a994:	fb04 5517 	mls	r5, r4, r7, r5
 801a998:	4620      	mov	r0, r4
 801a99a:	f7f6 f9f5 	bl	8010d88 <__popcountsi2>
 801a99e:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 801a9a2:	6035      	str	r5, [r6, #0]
    return i;
 801a9a4:	4620      	mov	r0, r4
}
 801a9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801a9a8:	2000      	movs	r0, #0
 801a9aa:	e7fc      	b.n	801a9a6 <lfs_ctz_index+0x36>

0801a9ac <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 801a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b0:	b087      	sub	sp, #28
 801a9b2:	4615      	mov	r5, r2
 801a9b4:	469b      	mov	fp, r3
 801a9b6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a9b8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801a9ba:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 801a9be:	eb04 020a 	add.w	r2, r4, sl
 801a9c2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801a9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	f200 80d0 	bhi.w	801ab6c <lfs_bd_read+0x1c0>
 801a9cc:	4689      	mov	r9, r1
            || (lfs->block_count && block >= lfs->block_count)) {
 801a9ce:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	f000 80c7 	beq.w	801ab64 <lfs_bd_read+0x1b8>
 801a9d6:	42bb      	cmp	r3, r7
 801a9d8:	f240 80cb 	bls.w	801ab72 <lfs_bd_read+0x1c6>
 801a9dc:	9003      	str	r0, [sp, #12]
 801a9de:	e084      	b.n	801aaea <lfs_bd_read+0x13e>
                off < pcache->off + pcache->size) {
 801a9e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a9e4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801a9e8:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
 801a9ea:	42a1      	cmp	r1, r4
 801a9ec:	d91e      	bls.n	801aa2c <lfs_bd_read+0x80>
            if (off >= pcache->off) {
 801a9ee:	42a3      	cmp	r3, r4
 801a9f0:	d905      	bls.n	801a9fe <lfs_bd_read+0x52>
            diff = lfs_min(diff, pcache->off-off);
 801a9f2:	1b1b      	subs	r3, r3, r4
    return (a < b) ? a : b;
 801a9f4:	4553      	cmp	r3, sl
 801a9f6:	bf28      	it	cs
 801a9f8:	4653      	movcs	r3, sl
 801a9fa:	4698      	mov	r8, r3
 801a9fc:	e081      	b.n	801ab02 <lfs_bd_read+0x156>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801a9fe:	1b19      	subs	r1, r3, r4
 801aa00:	eb02 0801 	add.w	r8, r2, r1
 801aa04:	45d0      	cmp	r8, sl
 801aa06:	bf28      	it	cs
 801aa08:	46d0      	movcs	r8, sl
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801aa0a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 801aa0e:	1ae3      	subs	r3, r4, r3
 801aa10:	4642      	mov	r2, r8
 801aa12:	4419      	add	r1, r3
 801aa14:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801aa16:	f012 fd27 	bl	802d468 <memcpy>
                data += diff;
 801aa1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801aa1c:	4443      	add	r3, r8
 801aa1e:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801aa20:	4444      	add	r4, r8
                size -= diff;
 801aa22:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801aa26:	e060      	b.n	801aaea <lfs_bd_read+0x13e>
        lfs_size_t diff = size;
 801aa28:	46d0      	mov	r8, sl
 801aa2a:	e06a      	b.n	801ab02 <lfs_bd_read+0x156>
 801aa2c:	46d0      	mov	r8, sl
 801aa2e:	e068      	b.n	801ab02 <lfs_bd_read+0x156>
                off < rcache->off + rcache->size) {
 801aa30:	686b      	ldr	r3, [r5, #4]
 801aa32:	68aa      	ldr	r2, [r5, #8]
 801aa34:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
 801aa36:	42a1      	cmp	r1, r4
 801aa38:	d966      	bls.n	801ab08 <lfs_bd_read+0x15c>
            if (off >= rcache->off) {
 801aa3a:	42a3      	cmp	r3, r4
 801aa3c:	d904      	bls.n	801aa48 <lfs_bd_read+0x9c>
            diff = lfs_min(diff, rcache->off-off);
 801aa3e:	1b1b      	subs	r3, r3, r4
 801aa40:	4598      	cmp	r8, r3
 801aa42:	bf28      	it	cs
 801aa44:	4698      	movcs	r8, r3
 801aa46:	e05f      	b.n	801ab08 <lfs_bd_read+0x15c>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801aa48:	1b19      	subs	r1, r3, r4
 801aa4a:	440a      	add	r2, r1
 801aa4c:	4590      	cmp	r8, r2
 801aa4e:	bf28      	it	cs
 801aa50:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801aa52:	68e9      	ldr	r1, [r5, #12]
 801aa54:	1ae3      	subs	r3, r4, r3
 801aa56:	4642      	mov	r2, r8
 801aa58:	4419      	add	r1, r3
 801aa5a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801aa5c:	f012 fd04 	bl	802d468 <memcpy>
                data += diff;
 801aa60:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801aa62:	4443      	add	r3, r8
 801aa64:	9312      	str	r3, [sp, #72]	@ 0x48
                off += diff;
 801aa66:	4444      	add	r4, r8
                size -= diff;
 801aa68:	ebaa 0a08 	sub.w	sl, sl, r8
                continue;
 801aa6c:	e03d      	b.n	801aaea <lfs_bd_read+0x13e>
            data += diff;
 801aa6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aa70:	9b04      	ldr	r3, [sp, #16]
 801aa72:	441a      	add	r2, r3
 801aa74:	9212      	str	r2, [sp, #72]	@ 0x48
            off += diff;
 801aa76:	441c      	add	r4, r3
            size -= diff;
 801aa78:	9b05      	ldr	r3, [sp, #20]
 801aa7a:	eba3 0308 	sub.w	r3, r3, r8
 801aa7e:	449a      	add	sl, r3
            continue;
 801aa80:	e033      	b.n	801aaea <lfs_bd_read+0x13e>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801aa82:	9b03      	ldr	r3, [sp, #12]
 801aa84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa86:	b10b      	cbz	r3, 801aa8c <lfs_bd_read+0xe0>
 801aa88:	42bb      	cmp	r3, r7
 801aa8a:	d95f      	bls.n	801ab4c <lfs_bd_read+0x1a0>
        rcache->block = block;
 801aa8c:	602f      	str	r7, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801aa8e:	9e03      	ldr	r6, [sp, #12]
 801aa90:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801aa92:	69da      	ldr	r2, [r3, #28]
    return a - (a % alignment);
 801aa94:	fbb4 f3f2 	udiv	r3, r4, r2
 801aa98:	fb02 4313 	mls	r3, r2, r3, r4
 801aa9c:	1ae2      	subs	r2, r4, r3
 801aa9e:	606a      	str	r2, [r5, #4]
                lfs_min(
 801aaa0:	eb04 010b 	add.w	r1, r4, fp
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 801aaa4:	f8d6 c068 	ldr.w	ip, [r6, #104]	@ 0x68
 801aaa8:	f8dc 001c 	ldr.w	r0, [ip, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801aaac:	4401      	add	r1, r0
 801aaae:	3901      	subs	r1, #1
    return a - (a % alignment);
 801aab0:	fbb1 fef0 	udiv	lr, r1, r0
 801aab4:	fb00 101e 	mls	r0, r0, lr, r1
 801aab8:	1a09      	subs	r1, r1, r0
                    lfs->cfg->block_size)
 801aaba:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
        rcache->size = lfs_min(
 801aabe:	1b1b      	subs	r3, r3, r4
 801aac0:	4288      	cmp	r0, r1
 801aac2:	bf94      	ite	ls
 801aac4:	181b      	addls	r3, r3, r0
 801aac6:	185b      	addhi	r3, r3, r1
                lfs->cfg->cache_size);
 801aac8:	f8dc 1030 	ldr.w	r1, [ip, #48]	@ 0x30
    return (a < b) ? a : b;
 801aacc:	428b      	cmp	r3, r1
 801aace:	bf28      	it	cs
 801aad0:	460b      	movcs	r3, r1
        rcache->size = lfs_min(
 801aad2:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 801aad4:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 801aad6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801aada:	9300      	str	r3, [sp, #0]
 801aadc:	68eb      	ldr	r3, [r5, #12]
 801aade:	4639      	mov	r1, r7
 801aae0:	47c0      	blx	r8
        LFS_ASSERT(err <= 0);
 801aae2:	1e03      	subs	r3, r0, #0
 801aae4:	dc38      	bgt.n	801ab58 <lfs_bd_read+0x1ac>
        if (err) {
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d146      	bne.n	801ab78 <lfs_bd_read+0x1cc>
    while (size > 0) {
 801aaea:	f1ba 0f00 	cmp.w	sl, #0
 801aaee:	d03b      	beq.n	801ab68 <lfs_bd_read+0x1bc>
        if (pcache && block == pcache->block &&
 801aaf0:	f1b9 0f00 	cmp.w	r9, #0
 801aaf4:	d098      	beq.n	801aa28 <lfs_bd_read+0x7c>
 801aaf6:	f8d9 3000 	ldr.w	r3, [r9]
 801aafa:	42bb      	cmp	r3, r7
 801aafc:	f43f af70 	beq.w	801a9e0 <lfs_bd_read+0x34>
        lfs_size_t diff = size;
 801ab00:	46d0      	mov	r8, sl
        if (block == rcache->block &&
 801ab02:	682b      	ldr	r3, [r5, #0]
 801ab04:	42bb      	cmp	r3, r7
 801ab06:	d093      	beq.n	801aa30 <lfs_bd_read+0x84>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 801ab08:	45da      	cmp	sl, fp
 801ab0a:	d3ba      	bcc.n	801aa82 <lfs_bd_read+0xd6>
 801ab0c:	9b03      	ldr	r3, [sp, #12]
 801ab0e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801ab10:	69c2      	ldr	r2, [r0, #28]
 801ab12:	fbb4 f3f2 	udiv	r3, r4, r2
 801ab16:	fb02 4313 	mls	r3, r2, r3, r4
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d1b1      	bne.n	801aa82 <lfs_bd_read+0xd6>
 801ab1e:	4552      	cmp	r2, sl
 801ab20:	d8af      	bhi.n	801aa82 <lfs_bd_read+0xd6>
    return a - (a % alignment);
 801ab22:	fbb8 f3f2 	udiv	r3, r8, r2
 801ab26:	fb02 8313 	mls	r3, r2, r3, r8
 801ab2a:	9305      	str	r3, [sp, #20]
 801ab2c:	eba8 0203 	sub.w	r2, r8, r3
 801ab30:	4613      	mov	r3, r2
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 801ab32:	6842      	ldr	r2, [r0, #4]
 801ab34:	4616      	mov	r6, r2
 801ab36:	9304      	str	r3, [sp, #16]
 801ab38:	9300      	str	r3, [sp, #0]
 801ab3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ab3c:	4622      	mov	r2, r4
 801ab3e:	4639      	mov	r1, r7
 801ab40:	47b0      	blx	r6
            if (err) {
 801ab42:	2800      	cmp	r0, #0
 801ab44:	d093      	beq.n	801aa6e <lfs_bd_read+0xc2>
}
 801ab46:	b007      	add	sp, #28
 801ab48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 801ab4c:	4b0b      	ldr	r3, [pc, #44]	@ (801ab7c <lfs_bd_read+0x1d0>)
 801ab4e:	4a0c      	ldr	r2, [pc, #48]	@ (801ab80 <lfs_bd_read+0x1d4>)
 801ab50:	216b      	movs	r1, #107	@ 0x6b
 801ab52:	480c      	ldr	r0, [pc, #48]	@ (801ab84 <lfs_bd_read+0x1d8>)
 801ab54:	f00e fcfa 	bl	802954c <__assert_func>
        LFS_ASSERT(err <= 0);
 801ab58:	4b0b      	ldr	r3, [pc, #44]	@ (801ab88 <lfs_bd_read+0x1dc>)
 801ab5a:	4a09      	ldr	r2, [pc, #36]	@ (801ab80 <lfs_bd_read+0x1d4>)
 801ab5c:	2176      	movs	r1, #118	@ 0x76
 801ab5e:	4809      	ldr	r0, [pc, #36]	@ (801ab84 <lfs_bd_read+0x1d8>)
 801ab60:	f00e fcf4 	bl	802954c <__assert_func>
 801ab64:	9003      	str	r0, [sp, #12]
 801ab66:	e7c0      	b.n	801aaea <lfs_bd_read+0x13e>
    return 0;
 801ab68:	2000      	movs	r0, #0
 801ab6a:	e7ec      	b.n	801ab46 <lfs_bd_read+0x19a>
        return LFS_ERR_CORRUPT;
 801ab6c:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ab70:	e7e9      	b.n	801ab46 <lfs_bd_read+0x19a>
 801ab72:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801ab76:	e7e6      	b.n	801ab46 <lfs_bd_read+0x19a>
 801ab78:	4618      	mov	r0, r3
 801ab7a:	e7e4      	b.n	801ab46 <lfs_bd_read+0x19a>
 801ab7c:	0803826c 	.word	0x0803826c
 801ab80:	08038f34 	.word	0x08038f34
 801ab84:	080381c0 	.word	0x080381c0
 801ab88:	080381f0 	.word	0x080381f0

0801ab8c <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 801ab8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab90:	b089      	sub	sp, #36	@ 0x24
 801ab92:	4607      	mov	r7, r0
 801ab94:	468a      	mov	sl, r1
 801ab96:	4690      	mov	r8, r2
 801ab98:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
 801ab9a:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
 801ab9c:	690b      	ldr	r3, [r1, #16]
 801ab9e:	9307      	str	r3, [sp, #28]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801aba0:	303c      	adds	r0, #60	@ 0x3c
 801aba2:	f7ff fd73 	bl	801a68c <lfs_gstate_hasmovehere>
 801aba6:	2800      	cmp	r0, #0
 801aba8:	f000 808d 	beq.w	801acc6 <lfs_dir_getslice+0x13a>
    return (tag & 0x000ffc00) >> 10;
 801abac:	f3c8 2389 	ubfx	r3, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	f000 808a 	beq.w	801acca <lfs_dir_getslice+0x13e>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801abb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801abb8:	f3c2 238f 	ubfx	r3, r2, #10, #16
 801abbc:	f3c2 2289 	ubfx	r2, r2, #10, #10
 801abc0:	f3cb 218f 	ubfx	r1, fp, #10, #16
 801abc4:	f3cb 2089 	ubfx	r0, fp, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 801abc8:	404b      	eors	r3, r1
 801abca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801abce:	2b00      	cmp	r3, #0
 801abd0:	f000 8085 	beq.w	801acde <lfs_dir_getslice+0x152>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 801abd4:	4282      	cmp	r2, r0
 801abd6:	d37a      	bcc.n	801acce <lfs_dir_getslice+0x142>
    lfs_stag_t gdiff = 0;
 801abd8:	2600      	movs	r6, #0
 801abda:	e006      	b.n	801abea <lfs_dir_getslice+0x5e>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 801abdc:	9605      	str	r6, [sp, #20]
 801abde:	ebab 0306 	sub.w	r3, fp, r6
 801abe2:	4063      	eors	r3, r4
 801abe4:	ea13 0f08 	tst.w	r3, r8
 801abe8:	d048      	beq.n	801ac7c <lfs_dir_getslice+0xf0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801abea:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
 801abec:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801abf0:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801abf4:	bf14      	ite	ne
 801abf6:	4623      	movne	r3, r4
 801abf8:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
 801abfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801abfe:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 801ac00:	3308      	adds	r3, #8
 801ac02:	42ab      	cmp	r3, r5
 801ac04:	d865      	bhi.n	801acd2 <lfs_dir_getslice+0x146>
        off -= lfs_tag_dsize(ntag);
 801ac06:	1aad      	subs	r5, r5, r2
                dir->pair[0], off, &ntag, sizeof(ntag));
 801ac08:	f8da 2000 	ldr.w	r2, [sl]
        int err = lfs_bd_read(lfs,
 801ac0c:	2304      	movs	r3, #4
 801ac0e:	9303      	str	r3, [sp, #12]
 801ac10:	a907      	add	r1, sp, #28
 801ac12:	9102      	str	r1, [sp, #8]
 801ac14:	9501      	str	r5, [sp, #4]
 801ac16:	9200      	str	r2, [sp, #0]
 801ac18:	463a      	mov	r2, r7
 801ac1a:	2100      	movs	r1, #0
 801ac1c:	4638      	mov	r0, r7
 801ac1e:	f7ff fec5 	bl	801a9ac <lfs_bd_read>
        if (err) {
 801ac22:	4603      	mov	r3, r0
 801ac24:	2800      	cmp	r0, #0
 801ac26:	d156      	bne.n	801acd6 <lfs_dir_getslice+0x14a>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 801ac28:	9b07      	ldr	r3, [sp, #28]
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 801ac2a:	ba1b      	rev	r3, r3
 801ac2c:	4063      	eors	r3, r4
 801ac2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ac32:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
 801ac34:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d0cf      	beq.n	801abdc <lfs_dir_getslice+0x50>
    return (tag & 0x70000000) >> 20;
 801ac3c:	0d23      	lsrs	r3, r4, #20
 801ac3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
        if (lfs_tag_id(gmask) != 0 &&
 801ac42:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ac46:	d1c9      	bne.n	801abdc <lfs_dir_getslice+0x50>
    return (tag & 0x000ffc00) >> 10;
 801ac48:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 801ac4c:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
 801ac50:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 801ac54:	4584      	cmp	ip, r0
 801ac56:	d3c1      	bcc.n	801abdc <lfs_dir_getslice+0x50>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 801ac58:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801ac5c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801ac60:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801ac64:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 801ac68:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801ac6c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801ac70:	42a2      	cmp	r2, r4
 801ac72:	d037      	beq.n	801ace4 <lfs_dir_getslice+0x158>
    return (int8_t)lfs_tag_chunk(tag);
 801ac74:	b25b      	sxtb	r3, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801ac76:	eb06 2683 	add.w	r6, r6, r3, lsl #10
 801ac7a:	e7af      	b.n	801abdc <lfs_dir_getslice+0x50>
            if (lfs_tag_isdelete(tag)) {
 801ac7c:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 801ac80:	d033      	beq.n	801acea <lfs_dir_getslice+0x15e>
    return tag & 0x000003ff;
 801ac82:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
 801ac86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ac88:	429e      	cmp	r6, r3
 801ac8a:	bf28      	it	cs
 801ac8c:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 801ac8e:	f8da 2000 	ldr.w	r2, [sl]
 801ac92:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ac94:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
 801ac96:	9603      	str	r6, [sp, #12]
 801ac98:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ac9a:	9102      	str	r1, [sp, #8]
 801ac9c:	3304      	adds	r3, #4
 801ac9e:	9301      	str	r3, [sp, #4]
 801aca0:	9200      	str	r2, [sp, #0]
 801aca2:	4633      	mov	r3, r6
 801aca4:	463a      	mov	r2, r7
 801aca6:	2100      	movs	r1, #0
 801aca8:	4638      	mov	r0, r7
 801acaa:	f7ff fe7f 	bl	801a9ac <lfs_bd_read>
            if (err) {
 801acae:	4603      	mov	r3, r0
 801acb0:	b988      	cbnz	r0, 801acd6 <lfs_dir_getslice+0x14a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 801acb2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801acb4:	1b9a      	subs	r2, r3, r6
 801acb6:	2100      	movs	r1, #0
 801acb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801acba:	1998      	adds	r0, r3, r6
 801acbc:	f011 f998 	bl	802bff0 <memset>
            return tag + gdiff;
 801acc0:	9b05      	ldr	r3, [sp, #20]
 801acc2:	4423      	add	r3, r4
 801acc4:	e007      	b.n	801acd6 <lfs_dir_getslice+0x14a>
    lfs_stag_t gdiff = 0;
 801acc6:	2600      	movs	r6, #0
 801acc8:	e78f      	b.n	801abea <lfs_dir_getslice+0x5e>
 801acca:	2600      	movs	r6, #0
 801accc:	e78d      	b.n	801abea <lfs_dir_getslice+0x5e>
            gdiff -= LFS_MKTAG(0, 1, 0);
 801acce:	4e08      	ldr	r6, [pc, #32]	@ (801acf0 <lfs_dir_getslice+0x164>)
 801acd0:	e78b      	b.n	801abea <lfs_dir_getslice+0x5e>
    return LFS_ERR_NOENT;
 801acd2:	f06f 0301 	mvn.w	r3, #1
}
 801acd6:	4618      	mov	r0, r3
 801acd8:	b009      	add	sp, #36	@ 0x24
 801acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOENT;
 801acde:	f06f 0301 	mvn.w	r3, #1
 801ace2:	e7f8      	b.n	801acd6 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801ace4:	f06f 0301 	mvn.w	r3, #1
 801ace8:	e7f5      	b.n	801acd6 <lfs_dir_getslice+0x14a>
                return LFS_ERR_NOENT;
 801acea:	f06f 0301 	mvn.w	r3, #1
 801acee:	e7f2      	b.n	801acd6 <lfs_dir_getslice+0x14a>
 801acf0:	fffffc00 	.word	0xfffffc00

0801acf4 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 801acf4:	b510      	push	{r4, lr}
 801acf6:	b084      	sub	sp, #16
    return tag & 0x000003ff;
 801acf8:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 801acfc:	9402      	str	r4, [sp, #8]
 801acfe:	9c06      	ldr	r4, [sp, #24]
 801ad00:	9401      	str	r4, [sp, #4]
 801ad02:	2400      	movs	r4, #0
 801ad04:	9400      	str	r4, [sp, #0]
 801ad06:	f7ff ff41 	bl	801ab8c <lfs_dir_getslice>
}
 801ad0a:	b004      	add	sp, #16
 801ad0c:	bd10      	pop	{r4, pc}
	...

0801ad10 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 801ad10:	b510      	push	{r4, lr}
 801ad12:	b086      	sub	sp, #24
 801ad14:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 801ad16:	ab03      	add	r3, sp, #12
 801ad18:	9300      	str	r3, [sp, #0]
 801ad1a:	4b09      	ldr	r3, [pc, #36]	@ (801ad40 <lfs_dir_getgstate+0x30>)
 801ad1c:	4a09      	ldr	r2, [pc, #36]	@ (801ad44 <lfs_dir_getgstate+0x34>)
 801ad1e:	f7ff ffe9 	bl	801acf4 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 801ad22:	2800      	cmp	r0, #0
 801ad24:	da04      	bge.n	801ad30 <lfs_dir_getgstate+0x20>
 801ad26:	f110 0f02 	cmn.w	r0, #2
 801ad2a:	d106      	bne.n	801ad3a <lfs_dir_getgstate+0x2a>
    return 0;
 801ad2c:	2000      	movs	r0, #0
 801ad2e:	e004      	b.n	801ad3a <lfs_dir_getgstate+0x2a>
        lfs_gstate_xor(gstate, &temp);
 801ad30:	a903      	add	r1, sp, #12
 801ad32:	4620      	mov	r0, r4
 801ad34:	f7ff fc98 	bl	801a668 <lfs_gstate_xor>
    return 0;
 801ad38:	2000      	movs	r0, #0
}
 801ad3a:	b006      	add	sp, #24
 801ad3c:	bd10      	pop	{r4, pc}
 801ad3e:	bf00      	nop
 801ad40:	7ff0000c 	.word	0x7ff0000c
 801ad44:	7ff00000 	.word	0x7ff00000

0801ad48 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 801ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad4c:	b089      	sub	sp, #36	@ 0x24
 801ad4e:	461c      	mov	r4, r3
 801ad50:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ad52:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ad54:	9f14      	ldr	r7, [sp, #80]	@ 0x50
    if (size == 0) {
 801ad56:	b923      	cbnz	r3, 801ad62 <lfs_ctz_traverse+0x1a>
        return 0;
 801ad58:	2300      	movs	r3, #0
}
 801ad5a:	4618      	mov	r0, r3
 801ad5c:	b009      	add	sp, #36	@ 0x24
 801ad5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad62:	4680      	mov	r8, r0
 801ad64:	4689      	mov	r9, r1
 801ad66:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801ad68:	3b01      	subs	r3, #1
 801ad6a:	9307      	str	r3, [sp, #28]
 801ad6c:	a907      	add	r1, sp, #28
 801ad6e:	f7ff fdff 	bl	801a970 <lfs_ctz_index>
 801ad72:	4605      	mov	r5, r0
        int err = cb(data, head);
 801ad74:	4621      	mov	r1, r4
 801ad76:	4638      	mov	r0, r7
 801ad78:	47b0      	blx	r6
        if (err) {
 801ad7a:	4603      	mov	r3, r0
 801ad7c:	2800      	cmp	r0, #0
 801ad7e:	d1ec      	bne.n	801ad5a <lfs_ctz_traverse+0x12>
        if (index == 0) {
 801ad80:	2d00      	cmp	r5, #0
 801ad82:	d0ea      	beq.n	801ad5a <lfs_ctz_traverse+0x12>
        int count = 2 - (index & 1);
 801ad84:	f005 0b01 	and.w	fp, r5, #1
 801ad88:	f1cb 0302 	rsb	r3, fp, #2
                pcache, rcache, count*sizeof(head),
 801ad8c:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 801ad8e:	9303      	str	r3, [sp, #12]
 801ad90:	aa05      	add	r2, sp, #20
 801ad92:	9202      	str	r2, [sp, #8]
 801ad94:	2200      	movs	r2, #0
 801ad96:	9201      	str	r2, [sp, #4]
 801ad98:	9400      	str	r4, [sp, #0]
 801ad9a:	4652      	mov	r2, sl
 801ad9c:	4649      	mov	r1, r9
 801ad9e:	4640      	mov	r0, r8
 801ada0:	f7ff fe04 	bl	801a9ac <lfs_bd_read>
        if (err) {
 801ada4:	4604      	mov	r4, r0
 801ada6:	b9c8      	cbnz	r0, 801addc <lfs_ctz_traverse+0x94>
        for (int i = 0; i < count-1; i++) {
 801ada8:	43eb      	mvns	r3, r5
 801adaa:	f003 0301 	and.w	r3, r3, #1
 801adae:	42a3      	cmp	r3, r4
 801adb0:	dd0b      	ble.n	801adca <lfs_ctz_traverse+0x82>
            err = cb(data, heads[i]);
 801adb2:	ab08      	add	r3, sp, #32
 801adb4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801adb8:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 801adbc:	4638      	mov	r0, r7
 801adbe:	47b0      	blx	r6
            if (err) {
 801adc0:	4603      	mov	r3, r0
 801adc2:	2800      	cmp	r0, #0
 801adc4:	d1c9      	bne.n	801ad5a <lfs_ctz_traverse+0x12>
        for (int i = 0; i < count-1; i++) {
 801adc6:	3401      	adds	r4, #1
 801adc8:	e7ee      	b.n	801ada8 <lfs_ctz_traverse+0x60>
        head = heads[count-1];
 801adca:	aa08      	add	r2, sp, #32
 801adcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801add0:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
 801add4:	f1ab 0b02 	sub.w	fp, fp, #2
 801add8:	445d      	add	r5, fp
    while (true) {
 801adda:	e7cb      	b.n	801ad74 <lfs_ctz_traverse+0x2c>
            return err;
 801addc:	4603      	mov	r3, r0
 801adde:	e7bc      	b.n	801ad5a <lfs_ctz_traverse+0x12>

0801ade0 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 801ade0:	b530      	push	{r4, r5, lr}
 801ade2:	b087      	sub	sp, #28
 801ade4:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
 801ade6:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 801ade8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801adea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 801adec:	6811      	ldr	r1, [r2, #0]
 801adee:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 801adf0:	2508      	movs	r5, #8
 801adf2:	9503      	str	r5, [sp, #12]
 801adf4:	ad04      	add	r5, sp, #16
 801adf6:	9502      	str	r5, [sp, #8]
 801adf8:	9201      	str	r2, [sp, #4]
 801adfa:	9100      	str	r1, [sp, #0]
 801adfc:	4602      	mov	r2, r0
 801adfe:	f100 0110 	add.w	r1, r0, #16
 801ae02:	f7ff fdd3 	bl	801a9ac <lfs_bd_read>
    if (err) {
 801ae06:	4603      	mov	r3, r0
 801ae08:	b978      	cbnz	r0, 801ae2a <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801ae0a:	9a04      	ldr	r2, [sp, #16]
 801ae0c:	6861      	ldr	r1, [r4, #4]
 801ae0e:	4291      	cmp	r1, r2
 801ae10:	d008      	beq.n	801ae24 <lfs_fs_parent_match+0x44>
 801ae12:	9d05      	ldr	r5, [sp, #20]
 801ae14:	68a0      	ldr	r0, [r4, #8]
 801ae16:	4285      	cmp	r5, r0
 801ae18:	d004      	beq.n	801ae24 <lfs_fs_parent_match+0x44>
 801ae1a:	4282      	cmp	r2, r0
 801ae1c:	d002      	beq.n	801ae24 <lfs_fs_parent_match+0x44>
 801ae1e:	42a9      	cmp	r1, r5
 801ae20:	d000      	beq.n	801ae24 <lfs_fs_parent_match+0x44>
 801ae22:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801ae24:	3b00      	subs	r3, #0
 801ae26:	bf18      	it	ne
 801ae28:	2301      	movne	r3, #1
}
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	b007      	add	sp, #28
 801ae2e:	bd30      	pop	{r4, r5, pc}

0801ae30 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae34:	b0af      	sub	sp, #188	@ 0xbc
 801ae36:	9007      	str	r0, [sp, #28]
 801ae38:	460e      	mov	r6, r1
 801ae3a:	4617      	mov	r7, r2
 801ae3c:	461c      	mov	r4, r3
 801ae3e:	f8dd 80e0 	ldr.w	r8, [sp, #224]	@ 0xe0
 801ae42:	f8dd b0e4 	ldr.w	fp, [sp, #228]	@ 0xe4
 801ae46:	f8dd a0e8 	ldr.w	sl, [sp, #232]	@ 0xe8
 801ae4a:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 801ae4e:	9304      	str	r3, [sp, #16]
 801ae50:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801ae54:	9305      	str	r3, [sp, #20]
 801ae56:	f9bd 30f8 	ldrsh.w	r3, [sp, #248]	@ 0xf8
 801ae5a:	9306      	str	r3, [sp, #24]
    struct lfs_diskoff disk = {0};
 801ae5c:	2500      	movs	r5, #0
 801ae5e:	950d      	str	r5, [sp, #52]	@ 0x34
 801ae60:	950e      	str	r5, [sp, #56]	@ 0x38
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ae62:	f344 0309 	sbfx	r3, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ae66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ae6a:	bf14      	ite	ne
 801ae6c:	46a1      	movne	r9, r4
 801ae6e:	f104 0901 	addeq.w	r9, r4, #1
    return tag & 0x000003ff;
 801ae72:	f3c9 0909 	ubfx	r9, r9, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ae76:	f109 0904 	add.w	r9, r9, #4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 801ae7a:	44b9      	add	r9, r7
 801ae7c:	68f3      	ldr	r3, [r6, #12]
 801ae7e:	4599      	cmp	r9, r3
 801ae80:	d35e      	bcc.n	801af40 <lfs_dir_traverse+0x110>
            } else if (attrcount > 0) {
 801ae82:	f1bb 0f00 	cmp.w	fp, #0
 801ae86:	f340 80fa 	ble.w	801b07e <lfs_dir_traverse+0x24e>
                tag = attrs[0].tag;
 801ae8a:	f8d8 3000 	ldr.w	r3, [r8]
 801ae8e:	930f      	str	r3, [sp, #60]	@ 0x3c
                buffer = attrs[0].buffer;
 801ae90:	f8d8 9004 	ldr.w	r9, [r8, #4]
                attrs += 1;
 801ae94:	f108 0808 	add.w	r8, r8, #8
                attrcount -= 1;
 801ae98:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 801ae9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801ae9e:	4ba9      	ldr	r3, [pc, #676]	@ (801b144 <lfs_dir_traverse+0x314>)
 801aea0:	ea0a 0303 	and.w	r3, sl, r3
 801aea4:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801aea6:	404a      	eors	r2, r1
 801aea8:	401a      	ands	r2, r3
 801aeaa:	d1da      	bne.n	801ae62 <lfs_dir_traverse+0x32>
    return (tag & 0x000ffc00) >> 10;
 801aeac:	f3ca 2389 	ubfx	r3, sl, #10, #10
            if (lfs_tag_id(tmask) != 0) {
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	f000 8116 	beq.w	801b0e2 <lfs_dir_traverse+0x2b2>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801aeb6:	2d02      	cmp	r5, #2
 801aeb8:	d862      	bhi.n	801af80 <lfs_dir_traverse+0x150>
                stack[sp] = (struct lfs_dir_traverse){
 801aeba:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801aebe:	a82e      	add	r0, sp, #184	@ 0xb8
 801aec0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801aec4:	f843 6c78 	str.w	r6, [r3, #-120]
 801aec8:	f843 7c74 	str.w	r7, [r3, #-116]
 801aecc:	f843 4c70 	str.w	r4, [r3, #-112]
 801aed0:	f843 8c6c 	str.w	r8, [r3, #-108]
 801aed4:	f843 bc68 	str.w	fp, [r3, #-104]
 801aed8:	f843 ac64 	str.w	sl, [r3, #-100]
 801aedc:	983b      	ldr	r0, [sp, #236]	@ 0xec
 801aede:	f843 0c60 	str.w	r0, [r3, #-96]
 801aee2:	9804      	ldr	r0, [sp, #16]
 801aee4:	f823 0c5c 	strh.w	r0, [r3, #-92]
 801aee8:	9805      	ldr	r0, [sp, #20]
 801aeea:	f823 0c5a 	strh.w	r0, [r3, #-90]
 801aeee:	9806      	ldr	r0, [sp, #24]
 801aef0:	f823 0c58 	strh.w	r0, [r3, #-88]
 801aef4:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 801aef6:	f843 0c54 	str.w	r0, [r3, #-84]
 801aefa:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801aefc:	f843 0c50 	str.w	r0, [r3, #-80]
 801af00:	f843 1c4c 	str.w	r1, [r3, #-76]
 801af04:	f843 9c48 	str.w	r9, [r3, #-72]
 801af08:	3b44      	subs	r3, #68	@ 0x44
 801af0a:	a90d      	add	r1, sp, #52	@ 0x34
 801af0c:	c903      	ldmia	r1, {r0, r1}
 801af0e:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 801af12:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801af16:	009b      	lsls	r3, r3, #2
 801af18:	3328      	adds	r3, #40	@ 0x28
 801af1a:	a910      	add	r1, sp, #64	@ 0x40
 801af1c:	440b      	add	r3, r1
 801af1e:	3304      	adds	r3, #4
 801af20:	9340      	str	r3, [sp, #256]	@ 0x100
                sp += 1;
 801af22:	3501      	adds	r5, #1
                ttag = 0;
 801af24:	923b      	str	r2, [sp, #236]	@ 0xec
                tmask = 0;
 801af26:	4692      	mov	sl, r2
                cb = lfs_dir_traverse_filter;
 801af28:	4b87      	ldr	r3, [pc, #540]	@ (801b148 <lfs_dir_traverse+0x318>)
 801af2a:	933f      	str	r3, [sp, #252]	@ 0xfc
                diff = 0;
 801af2c:	2300      	movs	r3, #0
 801af2e:	9306      	str	r3, [sp, #24]
                end = 0;
 801af30:	9305      	str	r3, [sp, #20]
                begin = 0;
 801af32:	9304      	str	r3, [sp, #16]
 801af34:	e795      	b.n	801ae62 <lfs_dir_traverse+0x32>
 801af36:	9d08      	ldr	r5, [sp, #32]
 801af38:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801af3a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801af3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801af3e:	e790      	b.n	801ae62 <lfs_dir_traverse+0x32>
                        dir->pair[0], off, &tag, sizeof(tag));
 801af40:	6832      	ldr	r2, [r6, #0]
                int err = lfs_bd_read(lfs,
 801af42:	2304      	movs	r3, #4
 801af44:	9303      	str	r3, [sp, #12]
 801af46:	a90f      	add	r1, sp, #60	@ 0x3c
 801af48:	9102      	str	r1, [sp, #8]
 801af4a:	f8cd 9004 	str.w	r9, [sp, #4]
 801af4e:	9200      	str	r2, [sp, #0]
 801af50:	9a07      	ldr	r2, [sp, #28]
 801af52:	2100      	movs	r1, #0
 801af54:	4610      	mov	r0, r2
 801af56:	f7ff fd29 	bl	801a9ac <lfs_bd_read>
                if (err) {
 801af5a:	4603      	mov	r3, r0
 801af5c:	2800      	cmp	r0, #0
 801af5e:	f040 80ec 	bne.w	801b13a <lfs_dir_traverse+0x30a>
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 801af62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return __builtin_bswap32(a);
 801af64:	ba1b      	rev	r3, r3
 801af66:	4063      	eors	r3, r4
 801af68:	f043 4400 	orr.w	r4, r3, #2147483648	@ 0x80000000
 801af6c:	940f      	str	r4, [sp, #60]	@ 0x3c
                disk.block = dir->pair[0];
 801af6e:	6833      	ldr	r3, [r6, #0]
 801af70:	930d      	str	r3, [sp, #52]	@ 0x34
                disk.off = off+sizeof(lfs_tag_t);
 801af72:	f109 0304 	add.w	r3, r9, #4
 801af76:	930e      	str	r3, [sp, #56]	@ 0x38
                off += lfs_tag_dsize(ptag);
 801af78:	464f      	mov	r7, r9
                buffer = &disk;
 801af7a:	f10d 0934 	add.w	r9, sp, #52	@ 0x34
 801af7e:	e78d      	b.n	801ae9c <lfs_dir_traverse+0x6c>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 801af80:	4b72      	ldr	r3, [pc, #456]	@ (801b14c <lfs_dir_traverse+0x31c>)
 801af82:	4a73      	ldr	r2, [pc, #460]	@ (801b150 <lfs_dir_traverse+0x320>)
 801af84:	f240 31b6 	movw	r1, #950	@ 0x3b6
 801af88:	4872      	ldr	r0, [pc, #456]	@ (801b154 <lfs_dir_traverse+0x324>)
 801af8a:	f00e fadf 	bl	802954c <__assert_func>
            if (cb == lfs_dir_traverse_filter) {
 801af8e:	4b6e      	ldr	r3, [pc, #440]	@ (801b148 <lfs_dir_traverse+0x318>)
 801af90:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801af92:	429a      	cmp	r2, r3
 801af94:	f43f af65 	beq.w	801ae62 <lfs_dir_traverse+0x32>
            stack[sp] = (struct lfs_dir_traverse){
 801af98:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801af9c:	aa2e      	add	r2, sp, #184	@ 0xb8
 801af9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801afa2:	223c      	movs	r2, #60	@ 0x3c
 801afa4:	2100      	movs	r1, #0
 801afa6:	9309      	str	r3, [sp, #36]	@ 0x24
 801afa8:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 801afac:	f011 f820 	bl	802bff0 <memset>
 801afb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801afb2:	f843 6c78 	str.w	r6, [r3, #-120]
 801afb6:	f843 7c74 	str.w	r7, [r3, #-116]
 801afba:	f843 4c70 	str.w	r4, [r3, #-112]
 801afbe:	f843 8c6c 	str.w	r8, [r3, #-108]
 801afc2:	f843 bc68 	str.w	fp, [r3, #-104]
 801afc6:	f843 ac64 	str.w	sl, [r3, #-100]
 801afca:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 801afcc:	f843 2c60 	str.w	r2, [r3, #-96]
 801afd0:	9a04      	ldr	r2, [sp, #16]
 801afd2:	f823 2c5c 	strh.w	r2, [r3, #-92]
 801afd6:	9a05      	ldr	r2, [sp, #20]
 801afd8:	f823 2c5a 	strh.w	r2, [r3, #-90]
 801afdc:	9906      	ldr	r1, [sp, #24]
 801afde:	f823 1c58 	strh.w	r1, [r3, #-88]
 801afe2:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801afe4:	f843 2c54 	str.w	r2, [r3, #-84]
 801afe8:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801afea:	f843 2c50 	str.w	r2, [r3, #-80]
            sp += 1;
 801afee:	3501      	adds	r5, #1
            uint16_t fromid = lfs_tag_size(tag);
 801aff0:	9b08      	ldr	r3, [sp, #32]
 801aff2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801aff6:	9204      	str	r2, [sp, #16]
    return (tag & 0x000ffc00) >> 10;
 801aff8:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 801affc:	1c50      	adds	r0, r2, #1
 801affe:	9005      	str	r0, [sp, #20]
            diff = toid-fromid+diff;
 801b000:	1a9b      	subs	r3, r3, r2
 801b002:	fa11 f383 	uxtah	r3, r1, r3
 801b006:	b21b      	sxth	r3, r3
 801b008:	9306      	str	r3, [sp, #24]
            dir = buffer;
 801b00a:	464e      	mov	r6, r9
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 801b00c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801b010:	933b      	str	r3, [sp, #236]	@ 0xec
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 801b012:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b158 <lfs_dir_traverse+0x328>
            attrcount = 0;
 801b016:	f04f 0b00 	mov.w	fp, #0
            attrs = NULL;
 801b01a:	46d8      	mov	r8, fp
            ptag = 0xffffffff;
 801b01c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
            off = 0;
 801b020:	465f      	mov	r7, fp
 801b022:	e71e      	b.n	801ae62 <lfs_dir_traverse+0x32>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b024:	2300      	movs	r3, #0
 801b026:	9508      	str	r5, [sp, #32]
 801b028:	9609      	str	r6, [sp, #36]	@ 0x24
 801b02a:	970a      	str	r7, [sp, #40]	@ 0x28
 801b02c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b02e:	461c      	mov	r4, r3
 801b030:	9d06      	ldr	r5, [sp, #24]
 801b032:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 801b034:	9f40      	ldr	r7, [sp, #256]	@ 0x100
 801b036:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
    return tag & 0x000003ff;
 801b038:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b03c:	4294      	cmp	r4, r2
 801b03e:	d219      	bcs.n	801b074 <lfs_dir_traverse+0x244>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b040:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b044:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 801b048:	f819 1021 	ldrb.w	r1, [r9, r1, lsl #2]
 801b04c:	f501 7140 	add.w	r1, r1, #768	@ 0x300
    return (tag & 0x000ffc00) >> 10;
 801b050:	f3c3 2389 	ubfx	r3, r3, #10, #10
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 801b054:	442b      	add	r3, r5
 801b056:	029b      	lsls	r3, r3, #10
 801b058:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 801b05c:	6891      	ldr	r1, [r2, #8]
 801b05e:	6852      	ldr	r2, [r2, #4]
 801b060:	4319      	orrs	r1, r3
 801b062:	4638      	mov	r0, r7
 801b064:	47b0      	blx	r6
                if (res < 0) {
 801b066:	2800      	cmp	r0, #0
 801b068:	db66      	blt.n	801b138 <lfs_dir_traverse+0x308>
                if (res) {
 801b06a:	2800      	cmp	r0, #0
 801b06c:	f47f af63 	bne.w	801af36 <lfs_dir_traverse+0x106>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 801b070:	3401      	adds	r4, #1
 801b072:	e7e0      	b.n	801b036 <lfs_dir_traverse+0x206>
 801b074:	9d08      	ldr	r5, [sp, #32]
 801b076:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801b078:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b07a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b07c:	e6f1      	b.n	801ae62 <lfs_dir_traverse+0x32>
                res = 0;
 801b07e:	2300      	movs	r3, #0
    if (sp > 0) {
 801b080:	2d00      	cmp	r5, #0
 801b082:	d05a      	beq.n	801b13a <lfs_dir_traverse+0x30a>
        dir         = stack[sp-1].dir;
 801b084:	3d01      	subs	r5, #1
 801b086:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 801b08a:	aa2e      	add	r2, sp, #184	@ 0xb8
 801b08c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b090:	f853 6c78 	ldr.w	r6, [r3, #-120]
        off         = stack[sp-1].off;
 801b094:	f853 7c74 	ldr.w	r7, [r3, #-116]
        ptag        = stack[sp-1].ptag;
 801b098:	f853 4c70 	ldr.w	r4, [r3, #-112]
        attrs       = stack[sp-1].attrs;
 801b09c:	f853 8c6c 	ldr.w	r8, [r3, #-108]
        attrcount   = stack[sp-1].attrcount;
 801b0a0:	f853 bc68 	ldr.w	fp, [r3, #-104]
        tmask       = stack[sp-1].tmask;
 801b0a4:	f853 ac64 	ldr.w	sl, [r3, #-100]
        ttag        = stack[sp-1].ttag;
 801b0a8:	f853 2c60 	ldr.w	r2, [r3, #-96]
 801b0ac:	923b      	str	r2, [sp, #236]	@ 0xec
        begin       = stack[sp-1].begin;
 801b0ae:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 801b0b2:	9204      	str	r2, [sp, #16]
        end         = stack[sp-1].end;
 801b0b4:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 801b0b8:	9205      	str	r2, [sp, #20]
        diff        = stack[sp-1].diff;
 801b0ba:	f933 2c58 	ldrsh.w	r2, [r3, #-88]
 801b0be:	9206      	str	r2, [sp, #24]
        cb          = stack[sp-1].cb;
 801b0c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 801b0c4:	923f      	str	r2, [sp, #252]	@ 0xfc
        data        = stack[sp-1].data;
 801b0c6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 801b0ca:	9240      	str	r2, [sp, #256]	@ 0x100
        tag         = stack[sp-1].tag;
 801b0cc:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 801b0d0:	920f      	str	r2, [sp, #60]	@ 0x3c
        buffer      = stack[sp-1].buffer;
 801b0d2:	f853 9c48 	ldr.w	r9, [r3, #-72]
        disk        = stack[sp-1].disk;
 801b0d6:	aa0d      	add	r2, sp, #52	@ 0x34
 801b0d8:	3b44      	subs	r3, #68	@ 0x44
 801b0da:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b0de:	e882 0003 	stmia.w	r2, {r0, r1}
    return (tag & 0x000ffc00) >> 10;
 801b0e2:	f3ca 2389 	ubfx	r3, sl, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b0e6:	b153      	cbz	r3, 801b0fe <lfs_dir_traverse+0x2ce>
    return (tag & 0x000ffc00) >> 10;
 801b0e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b0ea:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 801b0ee:	9a04      	ldr	r2, [sp, #16]
 801b0f0:	429a      	cmp	r2, r3
 801b0f2:	f63f aeb6 	bhi.w	801ae62 <lfs_dir_traverse+0x32>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 801b0f6:	9a05      	ldr	r2, [sp, #20]
 801b0f8:	429a      	cmp	r2, r3
 801b0fa:	f67f aeb2 	bls.w	801ae62 <lfs_dir_traverse+0x32>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b0fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b100:	9308      	str	r3, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801b102:	f3c3 530a 	ubfx	r3, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 801b106:	2b00      	cmp	r3, #0
 801b108:	f43f aeab 	beq.w	801ae62 <lfs_dir_traverse+0x32>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 801b10c:	f240 1201 	movw	r2, #257	@ 0x101
 801b110:	4293      	cmp	r3, r2
 801b112:	f43f af3c 	beq.w	801af8e <lfs_dir_traverse+0x15e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 801b116:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 801b11a:	d083      	beq.n	801b024 <lfs_dir_traverse+0x1f4>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 801b11c:	464a      	mov	r2, r9
 801b11e:	9b08      	ldr	r3, [sp, #32]
 801b120:	9906      	ldr	r1, [sp, #24]
 801b122:	eb03 2181 	add.w	r1, r3, r1, lsl #10
 801b126:	9840      	ldr	r0, [sp, #256]	@ 0x100
 801b128:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801b12a:	4798      	blx	r3
            if (res < 0) {
 801b12c:	1e03      	subs	r3, r0, #0
 801b12e:	db04      	blt.n	801b13a <lfs_dir_traverse+0x30a>
            if (res) {
 801b130:	2b00      	cmp	r3, #0
 801b132:	f43f ae96 	beq.w	801ae62 <lfs_dir_traverse+0x32>
 801b136:	e7a3      	b.n	801b080 <lfs_dir_traverse+0x250>
 801b138:	4603      	mov	r3, r0
}
 801b13a:	4618      	mov	r0, r3
 801b13c:	b02f      	add	sp, #188	@ 0xbc
 801b13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b142:	bf00      	nop
 801b144:	7ff00000 	.word	0x7ff00000
 801b148:	0801a765 	.word	0x0801a765
 801b14c:	0803829c 	.word	0x0803829c
 801b150:	08038eac 	.word	0x08038eac
 801b154:	080381c0 	.word	0x080381c0
 801b158:	600ffc00 	.word	0x600ffc00

0801b15c <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
 801b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b160:	b087      	sub	sp, #28
 801b162:	4606      	mov	r6, r0
 801b164:	468a      	mov	sl, r1
 801b166:	4617      	mov	r7, r2
 801b168:	461c      	mov	r4, r3
 801b16a:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 801b16e:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 801b172:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b174:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
    if (off+size > lfs->cfg->block_size) {
 801b178:	eb05 0208 	add.w	r2, r5, r8
 801b17c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801b17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b180:	429a      	cmp	r2, r3
 801b182:	d94d      	bls.n	801b220 <lfs_dir_getread+0xc4>
        return LFS_ERR_CORRUPT;
 801b184:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801b188:	e076      	b.n	801b278 <lfs_dir_getread+0x11c>
                off < pcache->off + pcache->size) {
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	68ba      	ldr	r2, [r7, #8]
 801b18e:	1899      	adds	r1, r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801b190:	42a9      	cmp	r1, r5
 801b192:	d91c      	bls.n	801b1ce <lfs_dir_getread+0x72>
            if (off >= pcache->off) {
 801b194:	42ab      	cmp	r3, r5
 801b196:	d904      	bls.n	801b1a2 <lfs_dir_getread+0x46>
            diff = lfs_min(diff, pcache->off-off);
 801b198:	1b5b      	subs	r3, r3, r5
    return (a < b) ? a : b;
 801b19a:	4543      	cmp	r3, r8
 801b19c:	bf28      	it	cs
 801b19e:	4643      	movcs	r3, r8
 801b1a0:	e048      	b.n	801b234 <lfs_dir_getread+0xd8>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 801b1a2:	1b59      	subs	r1, r3, r5
 801b1a4:	440a      	add	r2, r1
 801b1a6:	4542      	cmp	r2, r8
 801b1a8:	bf28      	it	cs
 801b1aa:	4642      	movcs	r2, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 801b1ac:	68f9      	ldr	r1, [r7, #12]
 801b1ae:	1aeb      	subs	r3, r5, r3
 801b1b0:	9205      	str	r2, [sp, #20]
 801b1b2:	4419      	add	r1, r3
 801b1b4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b1b6:	f012 f957 	bl	802d468 <memcpy>
                data += diff;
 801b1ba:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801b1bc:	9b05      	ldr	r3, [sp, #20]
 801b1be:	4419      	add	r1, r3
 801b1c0:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801b1c2:	441d      	add	r5, r3
                size -= diff;
 801b1c4:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801b1c8:	e02a      	b.n	801b220 <lfs_dir_getread+0xc4>
        lfs_size_t diff = size;
 801b1ca:	4643      	mov	r3, r8
 801b1cc:	e032      	b.n	801b234 <lfs_dir_getread+0xd8>
 801b1ce:	4643      	mov	r3, r8
 801b1d0:	e030      	b.n	801b234 <lfs_dir_getread+0xd8>
        rcache->block = LFS_BLOCK_INLINE;
 801b1d2:	f06f 0301 	mvn.w	r3, #1
 801b1d6:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 801b1d8:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801b1da:	69db      	ldr	r3, [r3, #28]
    return a - (a % alignment);
 801b1dc:	fbb5 f2f3 	udiv	r2, r5, r3
 801b1e0:	fb03 5212 	mls	r2, r3, r2, r5
 801b1e4:	1aaa      	subs	r2, r5, r2
 801b1e6:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801b1e8:	eb05 030b 	add.w	r3, r5, fp
 801b1ec:	6eb1      	ldr	r1, [r6, #104]	@ 0x68
 801b1ee:	69c8      	ldr	r0, [r1, #28]
    return lfs_aligndown(a + alignment-1, alignment);
 801b1f0:	4403      	add	r3, r0
 801b1f2:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801b1f4:	fbb3 fcf0 	udiv	ip, r3, r0
 801b1f8:	fb00 301c 	mls	r0, r0, ip, r3
 801b1fc:	1a1b      	subs	r3, r3, r0
                lfs->cfg->cache_size);
 801b1fe:	6b09      	ldr	r1, [r1, #48]	@ 0x30
    return (a < b) ? a : b;
 801b200:	428b      	cmp	r3, r1
 801b202:	bf28      	it	cs
 801b204:	460b      	movcs	r3, r1
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 801b206:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
 801b208:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 801b20a:	9302      	str	r3, [sp, #8]
 801b20c:	9101      	str	r1, [sp, #4]
 801b20e:	9200      	str	r2, [sp, #0]
 801b210:	464b      	mov	r3, r9
 801b212:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b214:	4651      	mov	r1, sl
 801b216:	4630      	mov	r0, r6
 801b218:	f7ff fcb8 	bl	801ab8c <lfs_dir_getslice>
        if (err < 0) {
 801b21c:	2800      	cmp	r0, #0
 801b21e:	db2b      	blt.n	801b278 <lfs_dir_getread+0x11c>
    while (size > 0) {
 801b220:	f1b8 0f00 	cmp.w	r8, #0
 801b224:	d027      	beq.n	801b276 <lfs_dir_getread+0x11a>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 801b226:	2f00      	cmp	r7, #0
 801b228:	d0cf      	beq.n	801b1ca <lfs_dir_getread+0x6e>
 801b22a:	683b      	ldr	r3, [r7, #0]
 801b22c:	f113 0f02 	cmn.w	r3, #2
 801b230:	d0ab      	beq.n	801b18a <lfs_dir_getread+0x2e>
        lfs_size_t diff = size;
 801b232:	4643      	mov	r3, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
 801b234:	6822      	ldr	r2, [r4, #0]
 801b236:	f112 0f02 	cmn.w	r2, #2
 801b23a:	d1ca      	bne.n	801b1d2 <lfs_dir_getread+0x76>
                off < rcache->off + rcache->size) {
 801b23c:	6862      	ldr	r2, [r4, #4]
 801b23e:	68a1      	ldr	r1, [r4, #8]
 801b240:	1850      	adds	r0, r2, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 801b242:	42a8      	cmp	r0, r5
 801b244:	d9c5      	bls.n	801b1d2 <lfs_dir_getread+0x76>
            if (off >= rcache->off) {
 801b246:	42aa      	cmp	r2, r5
 801b248:	d8c3      	bhi.n	801b1d2 <lfs_dir_getread+0x76>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 801b24a:	1b50      	subs	r0, r2, r5
 801b24c:	4401      	add	r1, r0
 801b24e:	4608      	mov	r0, r1
 801b250:	4299      	cmp	r1, r3
 801b252:	bf28      	it	cs
 801b254:	4618      	movcs	r0, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 801b256:	68e3      	ldr	r3, [r4, #12]
 801b258:	1aa9      	subs	r1, r5, r2
 801b25a:	9005      	str	r0, [sp, #20]
 801b25c:	4602      	mov	r2, r0
 801b25e:	4419      	add	r1, r3
 801b260:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801b262:	f012 f901 	bl	802d468 <memcpy>
                data += diff;
 801b266:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801b268:	9b05      	ldr	r3, [sp, #20]
 801b26a:	4419      	add	r1, r3
 801b26c:	9114      	str	r1, [sp, #80]	@ 0x50
                off += diff;
 801b26e:	441d      	add	r5, r3
                size -= diff;
 801b270:	eba8 0803 	sub.w	r8, r8, r3
                continue;
 801b274:	e7d4      	b.n	801b220 <lfs_dir_getread+0xc4>
    return 0;
 801b276:	2000      	movs	r0, #0
}
 801b278:	b007      	add	sp, #28
 801b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b27e <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
 801b27e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b282:	b089      	sub	sp, #36	@ 0x24
 801b284:	4682      	mov	sl, r0
 801b286:	4689      	mov	r9, r1
 801b288:	9205      	str	r2, [sp, #20]
 801b28a:	461f      	mov	r7, r3
 801b28c:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 801b290:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
 801b294:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b296:	2400      	movs	r4, #0
 801b298:	e002      	b.n	801b2a0 <lfs_bd_cmp+0x22>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801b29a:	2301      	movs	r3, #1
 801b29c:	e023      	b.n	801b2e6 <lfs_bd_cmp+0x68>
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b29e:	442c      	add	r4, r5
 801b2a0:	42b4      	cmp	r4, r6
 801b2a2:	d21f      	bcs.n	801b2e4 <lfs_bd_cmp+0x66>
        diff = lfs_min(size-i, sizeof(dat));
 801b2a4:	1b35      	subs	r5, r6, r4
 801b2a6:	2d08      	cmp	r5, #8
 801b2a8:	bf28      	it	cs
 801b2aa:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801b2ac:	9503      	str	r5, [sp, #12]
 801b2ae:	ab06      	add	r3, sp, #24
 801b2b0:	9302      	str	r3, [sp, #8]
 801b2b2:	eb04 0308 	add.w	r3, r4, r8
 801b2b6:	9301      	str	r3, [sp, #4]
 801b2b8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b2ba:	9300      	str	r3, [sp, #0]
 801b2bc:	1b3b      	subs	r3, r7, r4
 801b2be:	9a05      	ldr	r2, [sp, #20]
 801b2c0:	4649      	mov	r1, r9
 801b2c2:	4650      	mov	r0, sl
 801b2c4:	f7ff fb72 	bl	801a9ac <lfs_bd_read>
        if (err) {
 801b2c8:	4603      	mov	r3, r0
 801b2ca:	b960      	cbnz	r0, 801b2e6 <lfs_bd_cmp+0x68>
        int res = memcmp(dat, data + i, diff);
 801b2cc:	462a      	mov	r2, r5
 801b2ce:	eb0b 0104 	add.w	r1, fp, r4
 801b2d2:	a806      	add	r0, sp, #24
 801b2d4:	f010 fdf8 	bl	802bec8 <memcmp>
        if (res) {
 801b2d8:	2800      	cmp	r0, #0
 801b2da:	d0e0      	beq.n	801b29e <lfs_bd_cmp+0x20>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 801b2dc:	2800      	cmp	r0, #0
 801b2de:	dbdc      	blt.n	801b29a <lfs_bd_cmp+0x1c>
 801b2e0:	2302      	movs	r3, #2
 801b2e2:	e000      	b.n	801b2e6 <lfs_bd_cmp+0x68>
    return LFS_CMP_EQ;
 801b2e4:	2300      	movs	r3, #0
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	b009      	add	sp, #36	@ 0x24
 801b2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b2f0 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801b2f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b2f4:	b085      	sub	sp, #20
 801b2f6:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 801b2f8:	6809      	ldr	r1, [r1, #0]
 801b2fa:	f111 0f03 	cmn.w	r1, #3
 801b2fe:	d83f      	bhi.n	801b380 <lfs_bd_flush+0x90>
 801b300:	4607      	mov	r7, r0
 801b302:	4691      	mov	r9, r2
 801b304:	4698      	mov	r8, r3
        LFS_ASSERT(pcache->block < lfs->block_count);
 801b306:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b308:	4299      	cmp	r1, r3
 801b30a:	d22d      	bcs.n	801b368 <lfs_bd_flush+0x78>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 801b30c:	68a5      	ldr	r5, [r4, #8]
 801b30e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801b310:	6a02      	ldr	r2, [r0, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801b312:	4415      	add	r5, r2
 801b314:	3d01      	subs	r5, #1
    return a - (a % alignment);
 801b316:	fbb5 f3f2 	udiv	r3, r5, r2
 801b31a:	fb02 5313 	mls	r3, r2, r3, r5
 801b31e:	1aee      	subs	r6, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 801b320:	6885      	ldr	r5, [r0, #8]
 801b322:	9600      	str	r6, [sp, #0]
 801b324:	68e3      	ldr	r3, [r4, #12]
 801b326:	6862      	ldr	r2, [r4, #4]
 801b328:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 801b32a:	1e05      	subs	r5, r0, #0
 801b32c:	dc22      	bgt.n	801b374 <lfs_bd_flush+0x84>
        if (err) {
 801b32e:	bb45      	cbnz	r5, 801b382 <lfs_bd_flush+0x92>
        if (validate) {
 801b330:	f1b8 0f00 	cmp.w	r8, #0
 801b334:	d013      	beq.n	801b35e <lfs_bd_flush+0x6e>
    rcache->block = LFS_BLOCK_NULL;
 801b336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b33a:	f8c9 3000 	str.w	r3, [r9]
                    pcache->block, pcache->off, pcache->buffer, diff);
 801b33e:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
 801b340:	9603      	str	r6, [sp, #12]
 801b342:	9302      	str	r3, [sp, #8]
 801b344:	6863      	ldr	r3, [r4, #4]
 801b346:	9301      	str	r3, [sp, #4]
 801b348:	6823      	ldr	r3, [r4, #0]
 801b34a:	9300      	str	r3, [sp, #0]
 801b34c:	4633      	mov	r3, r6
 801b34e:	464a      	mov	r2, r9
 801b350:	2100      	movs	r1, #0
 801b352:	4638      	mov	r0, r7
 801b354:	f7ff ff93 	bl	801b27e <lfs_bd_cmp>
            if (res < 0) {
 801b358:	2800      	cmp	r0, #0
 801b35a:	db16      	blt.n	801b38a <lfs_bd_flush+0x9a>
            if (res != LFS_CMP_EQ) {
 801b35c:	b9b8      	cbnz	r0, 801b38e <lfs_bd_flush+0x9e>
        lfs_cache_zero(lfs, pcache);
 801b35e:	4621      	mov	r1, r4
 801b360:	4638      	mov	r0, r7
 801b362:	f7ff faf9 	bl	801a958 <lfs_cache_zero>
 801b366:	e00c      	b.n	801b382 <lfs_bd_flush+0x92>
        LFS_ASSERT(pcache->block < lfs->block_count);
 801b368:	4b0a      	ldr	r3, [pc, #40]	@ (801b394 <lfs_bd_flush+0xa4>)
 801b36a:	4a0b      	ldr	r2, [pc, #44]	@ (801b398 <lfs_bd_flush+0xa8>)
 801b36c:	21b3      	movs	r1, #179	@ 0xb3
 801b36e:	480b      	ldr	r0, [pc, #44]	@ (801b39c <lfs_bd_flush+0xac>)
 801b370:	f00e f8ec 	bl	802954c <__assert_func>
        LFS_ASSERT(err <= 0);
 801b374:	4b0a      	ldr	r3, [pc, #40]	@ (801b3a0 <lfs_bd_flush+0xb0>)
 801b376:	4a08      	ldr	r2, [pc, #32]	@ (801b398 <lfs_bd_flush+0xa8>)
 801b378:	21b7      	movs	r1, #183	@ 0xb7
 801b37a:	4808      	ldr	r0, [pc, #32]	@ (801b39c <lfs_bd_flush+0xac>)
 801b37c:	f00e f8e6 	bl	802954c <__assert_func>
    return 0;
 801b380:	2500      	movs	r5, #0
}
 801b382:	4628      	mov	r0, r5
 801b384:	b005      	add	sp, #20
 801b386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
 801b38a:	4605      	mov	r5, r0
 801b38c:	e7f9      	b.n	801b382 <lfs_bd_flush+0x92>
                return LFS_ERR_CORRUPT;
 801b38e:	f06f 0553 	mvn.w	r5, #83	@ 0x53
 801b392:	e7f6      	b.n	801b382 <lfs_bd_flush+0x92>
 801b394:	080382a4 	.word	0x080382a4
 801b398:	08038ef0 	.word	0x08038ef0
 801b39c:	080381c0 	.word	0x080381c0
 801b3a0:	080381f0 	.word	0x080381f0

0801b3a4 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 801b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3a8:	b083      	sub	sp, #12
 801b3aa:	4607      	mov	r7, r0
 801b3ac:	460c      	mov	r4, r1
 801b3ae:	9201      	str	r2, [sp, #4]
 801b3b0:	469b      	mov	fp, r3
 801b3b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801b3b4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801b3b6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801b3ba:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801b3be:	f116 0f02 	cmn.w	r6, #2
 801b3c2:	d002      	beq.n	801b3ca <lfs_bd_prog+0x26>
 801b3c4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b3c6:	42b3      	cmp	r3, r6
 801b3c8:	d90b      	bls.n	801b3e2 <lfs_bd_prog+0x3e>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 801b3ca:	eb05 0308 	add.w	r3, r5, r8
 801b3ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b3d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801b3d2:	4293      	cmp	r3, r2
 801b3d4:	d919      	bls.n	801b40a <lfs_bd_prog+0x66>
 801b3d6:	4b2b      	ldr	r3, [pc, #172]	@ (801b484 <lfs_bd_prog+0xe0>)
 801b3d8:	4a2b      	ldr	r2, [pc, #172]	@ (801b488 <lfs_bd_prog+0xe4>)
 801b3da:	21e9      	movs	r1, #233	@ 0xe9
 801b3dc:	482b      	ldr	r0, [pc, #172]	@ (801b48c <lfs_bd_prog+0xe8>)
 801b3de:	f00e f8b5 	bl	802954c <__assert_func>
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 801b3e2:	4b2b      	ldr	r3, [pc, #172]	@ (801b490 <lfs_bd_prog+0xec>)
 801b3e4:	4a28      	ldr	r2, [pc, #160]	@ (801b488 <lfs_bd_prog+0xe4>)
 801b3e6:	21e8      	movs	r1, #232	@ 0xe8
 801b3e8:	4828      	ldr	r0, [pc, #160]	@ (801b48c <lfs_bd_prog+0xe8>)
 801b3ea:	f00e f8af 	bl	802954c <__assert_func>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b3f2:	d13c      	bne.n	801b46e <lfs_bd_prog+0xca>
        pcache->block = block;
 801b3f4:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 801b3f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b3f8:	6a1a      	ldr	r2, [r3, #32]
 801b3fa:	fbb5 f3f2 	udiv	r3, r5, r2
 801b3fe:	fb02 5313 	mls	r3, r2, r3, r5
 801b402:	1aeb      	subs	r3, r5, r3
 801b404:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
 801b406:	2300      	movs	r3, #0
 801b408:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
 801b40a:	f1b8 0f00 	cmp.w	r8, #0
 801b40e:	d035      	beq.n	801b47c <lfs_bd_prog+0xd8>
        if (block == pcache->block &&
 801b410:	6823      	ldr	r3, [r4, #0]
 801b412:	42b3      	cmp	r3, r6
 801b414:	d1eb      	bne.n	801b3ee <lfs_bd_prog+0x4a>
                off >= pcache->off &&
 801b416:	6862      	ldr	r2, [r4, #4]
        if (block == pcache->block &&
 801b418:	42aa      	cmp	r2, r5
 801b41a:	d8e8      	bhi.n	801b3ee <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 801b41c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801b41e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801b420:	1850      	adds	r0, r2, r1
                off >= pcache->off &&
 801b422:	42a8      	cmp	r0, r5
 801b424:	d9e3      	bls.n	801b3ee <lfs_bd_prog+0x4a>
                    lfs->cfg->cache_size - (off-pcache->off));
 801b426:	1b53      	subs	r3, r2, r5
            lfs_size_t diff = lfs_min(size,
 801b428:	eb01 0903 	add.w	r9, r1, r3
    return (a < b) ? a : b;
 801b42c:	45c1      	cmp	r9, r8
 801b42e:	bf28      	it	cs
 801b430:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 801b432:	68e3      	ldr	r3, [r4, #12]
 801b434:	1aa8      	subs	r0, r5, r2
 801b436:	464a      	mov	r2, r9
 801b438:	4651      	mov	r1, sl
 801b43a:	4418      	add	r0, r3
 801b43c:	f012 f814 	bl	802d468 <memcpy>
            data += diff;
 801b440:	44ca      	add	sl, r9
            off += diff;
 801b442:	444d      	add	r5, r9
            size -= diff;
 801b444:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 801b448:	68a2      	ldr	r2, [r4, #8]
 801b44a:	6863      	ldr	r3, [r4, #4]
 801b44c:	1aeb      	subs	r3, r5, r3
    return (a > b) ? a : b;
 801b44e:	4293      	cmp	r3, r2
 801b450:	bf38      	it	cc
 801b452:	4613      	movcc	r3, r2
 801b454:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 801b456:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b458:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801b45a:	429a      	cmp	r2, r3
 801b45c:	d1d5      	bne.n	801b40a <lfs_bd_prog+0x66>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801b45e:	465b      	mov	r3, fp
 801b460:	9a01      	ldr	r2, [sp, #4]
 801b462:	4621      	mov	r1, r4
 801b464:	4638      	mov	r0, r7
 801b466:	f7ff ff43 	bl	801b2f0 <lfs_bd_flush>
                if (err) {
 801b46a:	b940      	cbnz	r0, 801b47e <lfs_bd_prog+0xda>
 801b46c:	e7cd      	b.n	801b40a <lfs_bd_prog+0x66>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 801b46e:	4b09      	ldr	r3, [pc, #36]	@ (801b494 <lfs_bd_prog+0xf0>)
 801b470:	4a05      	ldr	r2, [pc, #20]	@ (801b488 <lfs_bd_prog+0xe4>)
 801b472:	f44f 7183 	mov.w	r1, #262	@ 0x106
 801b476:	4805      	ldr	r0, [pc, #20]	@ (801b48c <lfs_bd_prog+0xe8>)
 801b478:	f00e f868 	bl	802954c <__assert_func>
    return 0;
 801b47c:	2000      	movs	r0, #0
}
 801b47e:	b003      	add	sp, #12
 801b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b484:	08038300 	.word	0x08038300
 801b488:	08038f00 	.word	0x08038f00
 801b48c:	080381c0 	.word	0x080381c0
 801b490:	080382c8 	.word	0x080382c8
 801b494:	08038324 	.word	0x08038324

0801b498 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 801b498:	b538      	push	{r3, r4, r5, lr}
 801b49a:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
 801b49c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801b4a0:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 801b4a2:	f7ff ff25 	bl	801b2f0 <lfs_bd_flush>
    if (err) {
 801b4a6:	4603      	mov	r3, r0
 801b4a8:	b920      	cbnz	r0, 801b4b4 <lfs_bd_sync+0x1c>
    err = lfs->cfg->sync(lfs->cfg);
 801b4aa:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801b4ac:	6903      	ldr	r3, [r0, #16]
 801b4ae:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 801b4b0:	1e03      	subs	r3, r0, #0
 801b4b2:	dc01      	bgt.n	801b4b8 <lfs_bd_sync+0x20>
}
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	bd38      	pop	{r3, r4, r5, pc}
    LFS_ASSERT(err <= 0);
 801b4b8:	4b02      	ldr	r3, [pc, #8]	@ (801b4c4 <lfs_bd_sync+0x2c>)
 801b4ba:	4a03      	ldr	r2, [pc, #12]	@ (801b4c8 <lfs_bd_sync+0x30>)
 801b4bc:	21dd      	movs	r1, #221	@ 0xdd
 801b4be:	4803      	ldr	r0, [pc, #12]	@ (801b4cc <lfs_bd_sync+0x34>)
 801b4c0:	f00e f844 	bl	802954c <__assert_func>
 801b4c4:	080381f0 	.word	0x080381f0
 801b4c8:	08038ea0 	.word	0x08038ea0
 801b4cc:	080381c0 	.word	0x080381c0

0801b4d0 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 801b4d0:	b570      	push	{r4, r5, r6, lr}
 801b4d2:	b084      	sub	sp, #16
 801b4d4:	4604      	mov	r4, r0
 801b4d6:	4694      	mov	ip, r2
    lfs_t *lfs = name->lfs;
 801b4d8:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 801b4da:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
 801b4dc:	f3c1 0509 	ubfx	r5, r1, #0, #10
    return (a < b) ? a : b;
 801b4e0:	42ab      	cmp	r3, r5
 801b4e2:	bf28      	it	cs
 801b4e4:	462b      	movcs	r3, r5
            disk->block, disk->off, name->name, diff);
 801b4e6:	6812      	ldr	r2, [r2, #0]
 801b4e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
    int res = lfs_bd_cmp(lfs,
 801b4ec:	9303      	str	r3, [sp, #12]
 801b4ee:	6866      	ldr	r6, [r4, #4]
 801b4f0:	9602      	str	r6, [sp, #8]
 801b4f2:	9101      	str	r1, [sp, #4]
 801b4f4:	9200      	str	r2, [sp, #0]
 801b4f6:	4602      	mov	r2, r0
 801b4f8:	2100      	movs	r1, #0
 801b4fa:	f7ff fec0 	bl	801b27e <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
 801b4fe:	b920      	cbnz	r0, 801b50a <lfs_dir_find_match+0x3a>
    if (name->size != lfs_tag_size(tag)) {
 801b500:	68a3      	ldr	r3, [r4, #8]
 801b502:	42ab      	cmp	r3, r5
 801b504:	d001      	beq.n	801b50a <lfs_dir_find_match+0x3a>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801b506:	d202      	bcs.n	801b50e <lfs_dir_find_match+0x3e>
 801b508:	2001      	movs	r0, #1
}
 801b50a:	b004      	add	sp, #16
 801b50c:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 801b50e:	2002      	movs	r0, #2
 801b510:	e7fb      	b.n	801b50a <lfs_dir_find_match+0x3a>

0801b512 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 801b512:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b516:	b089      	sub	sp, #36	@ 0x24
 801b518:	9305      	str	r3, [sp, #20]
 801b51a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (size == 0) {
 801b51c:	b953      	cbnz	r3, 801b534 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
 801b51e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b522:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b524:	6013      	str	r3, [r2, #0]
        *off = 0;
 801b526:	2300      	movs	r3, #0
 801b528:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b52a:	6013      	str	r3, [r2, #0]
}
 801b52c:	4618      	mov	r0, r3
 801b52e:	b009      	add	sp, #36	@ 0x24
 801b530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b534:	4607      	mov	r7, r0
 801b536:	4688      	mov	r8, r1
 801b538:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801b53a:	3b01      	subs	r3, #1
 801b53c:	9307      	str	r3, [sp, #28]
 801b53e:	a907      	add	r1, sp, #28
 801b540:	f7ff fa16 	bl	801a970 <lfs_ctz_index>
 801b544:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 801b546:	a911      	add	r1, sp, #68	@ 0x44
 801b548:	4638      	mov	r0, r7
 801b54a:	f7ff fa11 	bl	801a970 <lfs_ctz_index>
 801b54e:	4606      	mov	r6, r0
    while (current > target) {
 801b550:	42b5      	cmp	r5, r6
 801b552:	d91f      	bls.n	801b594 <lfs_ctz_find+0x82>
                lfs_npw2(current-target+1) - 1,
 801b554:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
 801b556:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
 801b55a:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
 801b55e:	fa95 f3a5 	rbit	r3, r5
 801b562:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
 801b566:	429c      	cmp	r4, r3
 801b568:	bf28      	it	cs
 801b56a:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 801b56c:	2304      	movs	r3, #4
 801b56e:	9303      	str	r3, [sp, #12]
 801b570:	aa05      	add	r2, sp, #20
 801b572:	9202      	str	r2, [sp, #8]
 801b574:	00a2      	lsls	r2, r4, #2
 801b576:	9201      	str	r2, [sp, #4]
 801b578:	9a05      	ldr	r2, [sp, #20]
 801b57a:	9200      	str	r2, [sp, #0]
 801b57c:	464a      	mov	r2, r9
 801b57e:	4641      	mov	r1, r8
 801b580:	4638      	mov	r0, r7
 801b582:	f7ff fa13 	bl	801a9ac <lfs_bd_read>
        if (err) {
 801b586:	4603      	mov	r3, r0
 801b588:	2800      	cmp	r0, #0
 801b58a:	d1cf      	bne.n	801b52c <lfs_ctz_find+0x1a>
        current -= 1 << skip;
 801b58c:	2301      	movs	r3, #1
 801b58e:	40a3      	lsls	r3, r4
 801b590:	1aed      	subs	r5, r5, r3
 801b592:	e7dd      	b.n	801b550 <lfs_ctz_find+0x3e>
    *block = head;
 801b594:	9b05      	ldr	r3, [sp, #20]
 801b596:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b598:	6013      	str	r3, [r2, #0]
    *off = pos;
 801b59a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b59c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b59e:	6013      	str	r3, [r2, #0]
    return 0;
 801b5a0:	2300      	movs	r3, #0
 801b5a2:	e7c3      	b.n	801b52c <lfs_ctz_find+0x1a>

0801b5a4 <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 801b5a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b5a8:	b087      	sub	sp, #28
 801b5aa:	460c      	mov	r4, r1
 801b5ac:	4617      	mov	r7, r2
    if (file->pos >= file->ctz.size) {
 801b5ae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801b5b0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801b5b2:	4291      	cmp	r1, r2
 801b5b4:	d272      	bcs.n	801b69c <lfs_file_flushedread+0xf8>
 801b5b6:	4680      	mov	r8, r0
    size = lfs_min(size, file->ctz.size - file->pos);
 801b5b8:	eba2 0901 	sub.w	r9, r2, r1
 801b5bc:	4599      	cmp	r9, r3
 801b5be:	bf28      	it	cs
 801b5c0:	4699      	movcs	r9, r3
    nsize = size;
 801b5c2:	464e      	mov	r6, r9
    while (nsize > 0) {
 801b5c4:	e037      	b.n	801b636 <lfs_file_flushedread+0x92>
            if (!(file->flags & LFS_F_INLINE)) {
 801b5c6:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801b5ca:	d041      	beq.n	801b650 <lfs_file_flushedread+0xac>
                file->block = LFS_BLOCK_INLINE;
 801b5cc:	f06f 0301 	mvn.w	r3, #1
 801b5d0:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801b5d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b5d4:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_READING;
 801b5d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b5d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b5dc:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801b5de:	f8d8 3068 	ldr.w	r3, [r8, #104]	@ 0x68
 801b5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b5e4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801b5e6:	1a9d      	subs	r5, r3, r2
 801b5e8:	42b5      	cmp	r5, r6
 801b5ea:	bf28      	it	cs
 801b5ec:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
 801b5ee:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b5f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 801b5f4:	d041      	beq.n	801b67a <lfs_file_flushedread+0xd6>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801b5f6:	88a1      	ldrh	r1, [r4, #4]
 801b5f8:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
 801b5fa:	9505      	str	r5, [sp, #20]
 801b5fc:	9704      	str	r7, [sp, #16]
 801b5fe:	9203      	str	r2, [sp, #12]
 801b600:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801b604:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 801b608:	9102      	str	r1, [sp, #8]
 801b60a:	4a27      	ldr	r2, [pc, #156]	@ (801b6a8 <lfs_file_flushedread+0x104>)
 801b60c:	9201      	str	r2, [sp, #4]
 801b60e:	9300      	str	r3, [sp, #0]
 801b610:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801b614:	2200      	movs	r2, #0
 801b616:	f104 0108 	add.w	r1, r4, #8
 801b61a:	4640      	mov	r0, r8
 801b61c:	f7ff fd9e 	bl	801b15c <lfs_dir_getread>
            if (err) {
 801b620:	4603      	mov	r3, r0
 801b622:	2800      	cmp	r0, #0
 801b624:	d13b      	bne.n	801b69e <lfs_file_flushedread+0xfa>
        file->pos += diff;
 801b626:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b628:	442b      	add	r3, r5
 801b62a:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801b62c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b62e:	442b      	add	r3, r5
 801b630:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801b632:	442f      	add	r7, r5
        nsize -= diff;
 801b634:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
 801b636:	2e00      	cmp	r6, #0
 801b638:	d02e      	beq.n	801b698 <lfs_file_flushedread+0xf4>
        if (!(file->flags & LFS_F_READING) ||
 801b63a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b63c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801b640:	d0c1      	beq.n	801b5c6 <lfs_file_flushedread+0x22>
                file->off == lfs->cfg->block_size) {
 801b642:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801b644:	f8d8 2068 	ldr.w	r2, [r8, #104]	@ 0x68
 801b648:	6a52      	ldr	r2, [r2, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801b64a:	4291      	cmp	r1, r2
 801b64c:	d1c7      	bne.n	801b5de <lfs_file_flushedread+0x3a>
 801b64e:	e7ba      	b.n	801b5c6 <lfs_file_flushedread+0x22>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801b650:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801b654:	9303      	str	r3, [sp, #12]
 801b656:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801b65a:	9302      	str	r3, [sp, #8]
 801b65c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b65e:	9301      	str	r3, [sp, #4]
 801b660:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801b662:	9300      	str	r3, [sp, #0]
 801b664:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801b666:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801b66a:	2100      	movs	r1, #0
 801b66c:	4640      	mov	r0, r8
 801b66e:	f7ff ff50 	bl	801b512 <lfs_ctz_find>
                if (err) {
 801b672:	4603      	mov	r3, r0
 801b674:	2800      	cmp	r0, #0
 801b676:	d0ae      	beq.n	801b5d6 <lfs_file_flushedread+0x32>
 801b678:	e011      	b.n	801b69e <lfs_file_flushedread+0xfa>
            int err = lfs_bd_read(lfs,
 801b67a:	9503      	str	r5, [sp, #12]
 801b67c:	9702      	str	r7, [sp, #8]
 801b67e:	9201      	str	r2, [sp, #4]
 801b680:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801b682:	9200      	str	r2, [sp, #0]
 801b684:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801b688:	2100      	movs	r1, #0
 801b68a:	4640      	mov	r0, r8
 801b68c:	f7ff f98e 	bl	801a9ac <lfs_bd_read>
            if (err) {
 801b690:	4603      	mov	r3, r0
 801b692:	2800      	cmp	r0, #0
 801b694:	d0c7      	beq.n	801b626 <lfs_file_flushedread+0x82>
 801b696:	e002      	b.n	801b69e <lfs_file_flushedread+0xfa>
    return size;
 801b698:	464b      	mov	r3, r9
 801b69a:	e000      	b.n	801b69e <lfs_file_flushedread+0xfa>
        return 0;
 801b69c:	2300      	movs	r3, #0
}
 801b69e:	4618      	mov	r0, r3
 801b6a0:	b007      	add	sp, #28
 801b6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b6a6:	bf00      	nop
 801b6a8:	fff7fc00 	.word	0xfff7fc00

0801b6ac <lfs_bd_crc>:
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 801b6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6b0:	b089      	sub	sp, #36	@ 0x24
 801b6b2:	4683      	mov	fp, r0
 801b6b4:	468a      	mov	sl, r1
 801b6b6:	9205      	str	r2, [sp, #20]
 801b6b8:	4698      	mov	r8, r3
 801b6ba:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 801b6be:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b6c0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b6c2:	2400      	movs	r4, #0
 801b6c4:	e006      	b.n	801b6d4 <lfs_bd_crc+0x28>
        *crc = lfs_crc(*crc, &dat, diff);
 801b6c6:	462a      	mov	r2, r5
 801b6c8:	a906      	add	r1, sp, #24
 801b6ca:	6838      	ldr	r0, [r7, #0]
 801b6cc:	f003 fd82 	bl	801f1d4 <lfs_crc>
 801b6d0:	6038      	str	r0, [r7, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 801b6d2:	442c      	add	r4, r5
 801b6d4:	42b4      	cmp	r4, r6
 801b6d6:	d216      	bcs.n	801b706 <lfs_bd_crc+0x5a>
        diff = lfs_min(size-i, sizeof(dat));
 801b6d8:	1b35      	subs	r5, r6, r4
 801b6da:	2d08      	cmp	r5, #8
 801b6dc:	bf28      	it	cs
 801b6de:	2508      	movcs	r5, #8
        int err = lfs_bd_read(lfs,
 801b6e0:	9503      	str	r5, [sp, #12]
 801b6e2:	ab06      	add	r3, sp, #24
 801b6e4:	9302      	str	r3, [sp, #8]
 801b6e6:	eb04 0309 	add.w	r3, r4, r9
 801b6ea:	9301      	str	r3, [sp, #4]
 801b6ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b6ee:	9300      	str	r3, [sp, #0]
 801b6f0:	eba8 0304 	sub.w	r3, r8, r4
 801b6f4:	9a05      	ldr	r2, [sp, #20]
 801b6f6:	4651      	mov	r1, sl
 801b6f8:	4658      	mov	r0, fp
 801b6fa:	f7ff f957 	bl	801a9ac <lfs_bd_read>
        if (err) {
 801b6fe:	4603      	mov	r3, r0
 801b700:	2800      	cmp	r0, #0
 801b702:	d0e0      	beq.n	801b6c6 <lfs_bd_crc+0x1a>
 801b704:	e000      	b.n	801b708 <lfs_bd_crc+0x5c>
    return 0;
 801b706:	2300      	movs	r3, #0
}
 801b708:	4618      	mov	r0, r3
 801b70a:	b009      	add	sp, #36	@ 0x24
 801b70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b710 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 801b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b714:	b097      	sub	sp, #92	@ 0x5c
 801b716:	4605      	mov	r5, r0
 801b718:	460e      	mov	r6, r1
 801b71a:	4617      	mov	r7, r2
 801b71c:	9305      	str	r3, [sp, #20]
    if (lfs->block_count 
 801b71e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801b720:	b13b      	cbz	r3, 801b732 <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 801b722:	6812      	ldr	r2, [r2, #0]
 801b724:	4293      	cmp	r3, r2
 801b726:	f240 825a 	bls.w	801bbde <lfs_dir_fetchmatch+0x4ce>
 801b72a:	687a      	ldr	r2, [r7, #4]
 801b72c:	4293      	cmp	r3, r2
 801b72e:	f240 8259 	bls.w	801bbe4 <lfs_dir_fetchmatch+0x4d4>
    uint32_t revs[2] = {0, 0};
 801b732:	2400      	movs	r4, #0
 801b734:	9412      	str	r4, [sp, #72]	@ 0x48
 801b736:	9413      	str	r4, [sp, #76]	@ 0x4c
    for (int i = 0; i < 2; i++) {
 801b738:	46a0      	mov	r8, r4
 801b73a:	e010      	b.n	801b75e <lfs_dir_fetchmatch+0x4e>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 801b73c:	f118 0301 	adds.w	r3, r8, #1
 801b740:	f003 0301 	and.w	r3, r3, #1
 801b744:	bf48      	it	mi
 801b746:	425b      	negmi	r3, r3
 801b748:	a916      	add	r1, sp, #88	@ 0x58
 801b74a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b74e:	f853 3c10 	ldr.w	r3, [r3, #-16]
    return (int)(unsigned)(a - b);
 801b752:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
 801b754:	2a00      	cmp	r2, #0
 801b756:	dd00      	ble.n	801b75a <lfs_dir_fetchmatch+0x4a>
            r = i;
 801b758:	4644      	mov	r4, r8
    for (int i = 0; i < 2; i++) {
 801b75a:	f108 0801 	add.w	r8, r8, #1
 801b75e:	f1b8 0f01 	cmp.w	r8, #1
 801b762:	dc1d      	bgt.n	801b7a0 <lfs_dir_fetchmatch+0x90>
                pair[i], 0, &revs[i], sizeof(revs[i]));
 801b764:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801b768:	ab12      	add	r3, sp, #72	@ 0x48
 801b76a:	eb03 0288 	add.w	r2, r3, r8, lsl #2
        int err = lfs_bd_read(lfs,
 801b76e:	2304      	movs	r3, #4
 801b770:	9303      	str	r3, [sp, #12]
 801b772:	9202      	str	r2, [sp, #8]
 801b774:	2100      	movs	r1, #0
 801b776:	9101      	str	r1, [sp, #4]
 801b778:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 801b77c:	9200      	str	r2, [sp, #0]
 801b77e:	462a      	mov	r2, r5
 801b780:	4628      	mov	r0, r5
 801b782:	f7ff f913 	bl	801a9ac <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 801b786:	f109 0358 	add.w	r3, r9, #88	@ 0x58
 801b78a:	eb0d 0903 	add.w	r9, sp, r3
 801b78e:	f859 2c10 	ldr.w	r2, [r9, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
 801b792:	4683      	mov	fp, r0
 801b794:	2800      	cmp	r0, #0
 801b796:	d0d1      	beq.n	801b73c <lfs_dir_fetchmatch+0x2c>
 801b798:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b79c:	d0dd      	beq.n	801b75a <lfs_dir_fetchmatch+0x4a>
 801b79e:	e21a      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
    dir->pair[0] = pair[(r+0)%2];
 801b7a0:	2c00      	cmp	r4, #0
 801b7a2:	f004 0301 	and.w	r3, r4, #1
 801b7a6:	bfb8      	it	lt
 801b7a8:	425b      	neglt	r3, r3
 801b7aa:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 801b7ae:	6032      	str	r2, [r6, #0]
    dir->pair[1] = pair[(r+1)%2];
 801b7b0:	f114 0c01 	adds.w	ip, r4, #1
 801b7b4:	f00c 0c01 	and.w	ip, ip, #1
 801b7b8:	bf48      	it	mi
 801b7ba:	f1cc 0c00 	rsbmi	ip, ip, #0
 801b7be:	f857 202c 	ldr.w	r2, [r7, ip, lsl #2]
 801b7c2:	6072      	str	r2, [r6, #4]
    dir->rev = revs[(r+0)%2];
 801b7c4:	aa16      	add	r2, sp, #88	@ 0x58
 801b7c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b7ca:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801b7ce:	60b3      	str	r3, [r6, #8]
    dir->off = 0; // nonzero = found some commits
 801b7d0:	2400      	movs	r4, #0
 801b7d2:	60f4      	str	r4, [r6, #12]
    lfs_stag_t besttag = -1;
 801b7d4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801b7d8:	f8cd c01c 	str.w	ip, [sp, #28]
 801b7dc:	46a1      	mov	r9, r4
    for (int i = 0; i < 2; i++) {
 801b7de:	f1b9 0f01 	cmp.w	r9, #1
 801b7e2:	f300 81eb 	bgt.w	801bbbc <lfs_dir_fetchmatch+0x4ac>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801b7e6:	4a90      	ldr	r2, [pc, #576]	@ (801ba28 <lfs_dir_fetchmatch+0x318>)
 801b7e8:	ab0e      	add	r3, sp, #56	@ 0x38
 801b7ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b7ee:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 801b7f2:	2204      	movs	r2, #4
 801b7f4:	f106 0108 	add.w	r1, r6, #8
 801b7f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b7fc:	f003 fcea 	bl	801f1d4 <lfs_crc>
 801b800:	900b      	str	r0, [sp, #44]	@ 0x2c
        lfs_stag_t tempbesttag = besttag;
 801b802:	f8cd b018 	str.w	fp, [sp, #24]
        bool hasfcrc = false;
 801b806:	2300      	movs	r3, #0
 801b808:	461c      	mov	r4, r3
 801b80a:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
 801b80c:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_tag_t ptag = 0xffffffff;
 801b80e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
        lfs_off_t off = 0;
 801b812:	461f      	mov	r7, r3
 801b814:	e110      	b.n	801ba38 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801b816:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b81a:	d101      	bne.n	801b820 <lfs_dir_fetchmatch+0x110>
        bool maybeerased = false;
 801b81c:	2300      	movs	r3, #0
 801b81e:	e01e      	b.n	801b85e <lfs_dir_fetchmatch+0x14e>
                return err;
 801b820:	4683      	mov	fp, r0
 801b822:	e1d8      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x78000000) >> 20;
 801b824:	ea4f 5318 	mov.w	r3, r8, lsr #20
 801b828:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 801b82c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801b830:	bf14      	ite	ne
 801b832:	2300      	movne	r3, #0
 801b834:	2301      	moveq	r3, #1
                break;
 801b836:	e012      	b.n	801b85e <lfs_dir_fetchmatch+0x14e>
                err = lfs_bd_read(lfs,
 801b838:	2204      	movs	r2, #4
 801b83a:	9203      	str	r2, [sp, #12]
 801b83c:	aa0d      	add	r2, sp, #52	@ 0x34
 801b83e:	9202      	str	r2, [sp, #8]
 801b840:	1d22      	adds	r2, r4, #4
 801b842:	9201      	str	r2, [sp, #4]
 801b844:	6832      	ldr	r2, [r6, #0]
 801b846:	9200      	str	r2, [sp, #0]
 801b848:	462a      	mov	r2, r5
 801b84a:	2100      	movs	r1, #0
 801b84c:	4628      	mov	r0, r5
 801b84e:	f7ff f8ad 	bl	801a9ac <lfs_bd_read>
                if (err) {
 801b852:	bb80      	cbnz	r0, 801b8b6 <lfs_dir_fetchmatch+0x1a6>
                if (crc != dcrc) {
 801b854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b858:	429a      	cmp	r2, r3
 801b85a:	d031      	beq.n	801b8c0 <lfs_dir_fetchmatch+0x1b0>
        bool maybeerased = false;
 801b85c:	2300      	movs	r3, #0
        if (dir->off == 0) {
 801b85e:	68f2      	ldr	r2, [r6, #12]
 801b860:	2a00      	cmp	r2, #0
 801b862:	f000 8165 	beq.w	801bb30 <lfs_dir_fetchmatch+0x420>
        dir->erased = false;
 801b866:	2100      	movs	r1, #0
 801b868:	75b1      	strb	r1, [r6, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 801b86a:	b153      	cbz	r3, 801b882 <lfs_dir_fetchmatch+0x172>
 801b86c:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 801b86e:	6a01      	ldr	r1, [r0, #32]
 801b870:	fbb2 f3f1 	udiv	r3, r2, r1
 801b874:	fb01 2313 	mls	r3, r1, r3, r2
 801b878:	b91b      	cbnz	r3, 801b882 <lfs_dir_fetchmatch+0x172>
            if (hasfcrc) {
 801b87a:	9b08      	ldr	r3, [sp, #32]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	f040 8165 	bne.w	801bb4c <lfs_dir_fetchmatch+0x43c>
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 801b882:	4631      	mov	r1, r6
 801b884:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 801b888:	f7fe ff00 	bl	801a68c <lfs_gstate_hasmovehere>
 801b88c:	2800      	cmp	r0, #0
 801b88e:	f000 817d 	beq.w	801bb8c <lfs_dir_fetchmatch+0x47c>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801b892:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801b894:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801b898:	f3cb 2289 	ubfx	r2, fp, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 801b89c:	429a      	cmp	r2, r3
 801b89e:	f000 8173 	beq.w	801bb88 <lfs_dir_fetchmatch+0x478>
            } else if (besttag != -1 &&
 801b8a2:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 801b8a6:	f000 8171 	beq.w	801bb8c <lfs_dir_fetchmatch+0x47c>
 801b8aa:	429a      	cmp	r2, r3
 801b8ac:	f240 816e 	bls.w	801bb8c <lfs_dir_fetchmatch+0x47c>
                besttag -= LFS_MKTAG(0, 1, 0);
 801b8b0:	f5ab 6b80 	sub.w	fp, fp, #1024	@ 0x400
 801b8b4:	e16a      	b.n	801bb8c <lfs_dir_fetchmatch+0x47c>
                    if (err == LFS_ERR_CORRUPT) {
 801b8b6:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b8ba:	d0cf      	beq.n	801b85c <lfs_dir_fetchmatch+0x14c>
                    return err;
 801b8bc:	4683      	mov	fp, r0
 801b8be:	e18a      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 801b8c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b8c2:	f3c3 5307 	ubfx	r3, r3, #20, #8
 801b8c6:	ea8a 78c3 	eor.w	r8, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 801b8ca:	2204      	movs	r2, #4
 801b8cc:	a90b      	add	r1, sp, #44	@ 0x2c
 801b8ce:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801b8d0:	f003 fc80 	bl	801f1d4 <lfs_crc>
 801b8d4:	62e8      	str	r0, [r5, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 801b8d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
 801b8d8:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b8dc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b8e0:	bf08      	it	eq
 801b8e2:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
 801b8e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801b8e8:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
 801b8ea:	4423      	add	r3, r4
 801b8ec:	60f3      	str	r3, [r6, #12]
                dir->etag = ptag;
 801b8ee:	f8c6 8010 	str.w	r8, [r6, #16]
                dir->count = tempcount;
 801b8f2:	82b7      	strh	r7, [r6, #20]
                dir->tail[0] = temptail[0];
 801b8f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b8f6:	61b3      	str	r3, [r6, #24]
                dir->tail[1] = temptail[1];
 801b8f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b8fa:	61f3      	str	r3, [r6, #28]
                dir->split = tempsplit;
 801b8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8fe:	75f3      	strb	r3, [r6, #23]
                crc = 0xffffffff;
 801b900:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b904:	930b      	str	r3, [sp, #44]	@ 0x2c
                besttag = tempbesttag;
 801b906:	f8dd b018 	ldr.w	fp, [sp, #24]
 801b90a:	e095      	b.n	801ba38 <lfs_dir_fetchmatch+0x328>
                if (err == LFS_ERR_CORRUPT) {
 801b90c:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b910:	d101      	bne.n	801b916 <lfs_dir_fetchmatch+0x206>
        bool maybeerased = false;
 801b912:	2300      	movs	r3, #0
 801b914:	e7a3      	b.n	801b85e <lfs_dir_fetchmatch+0x14e>
                return err;
 801b916:	4683      	mov	fp, r0
 801b918:	e15d      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 801b91a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b91e:	d021      	beq.n	801b964 <lfs_dir_fetchmatch+0x254>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 801b920:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801b924:	d046      	beq.n	801b9b4 <lfs_dir_fetchmatch+0x2a4>
    return (tag & 0x7ff00000) >> 20;
 801b926:	f3c0 020a 	ubfx	r2, r0, #0, #11
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 801b92a:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 801b92e:	429a      	cmp	r2, r3
 801b930:	f040 80e3 	bne.w	801bafa <lfs_dir_fetchmatch+0x3ea>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801b934:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801b938:	2208      	movs	r2, #8
 801b93a:	9203      	str	r2, [sp, #12]
 801b93c:	aa10      	add	r2, sp, #64	@ 0x40
 801b93e:	9202      	str	r2, [sp, #8]
 801b940:	f8cd 8004 	str.w	r8, [sp, #4]
 801b944:	6832      	ldr	r2, [r6, #0]
 801b946:	9200      	str	r2, [sp, #0]
 801b948:	462a      	mov	r2, r5
 801b94a:	2100      	movs	r1, #0
 801b94c:	4628      	mov	r0, r5
 801b94e:	f7ff f82d 	bl	801a9ac <lfs_bd_read>
                if (err) {
 801b952:	2800      	cmp	r0, #0
 801b954:	d04a      	beq.n	801b9ec <lfs_dir_fetchmatch+0x2dc>
                    if (err == LFS_ERR_CORRUPT) {
 801b956:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b95a:	f000 80e7 	beq.w	801bb2c <lfs_dir_fetchmatch+0x41c>
                hasfcrc = true;
 801b95e:	2301      	movs	r3, #1
 801b960:	9308      	str	r3, [sp, #32]
 801b962:	e0ca      	b.n	801bafa <lfs_dir_fetchmatch+0x3ea>
    return (int8_t)lfs_tag_chunk(tag);
 801b964:	b240      	sxtb	r0, r0
                tempcount += lfs_tag_splice(tag);
 801b966:	fa17 f280 	uxtah	r2, r7, r0
 801b96a:	b297      	uxth	r7, r2
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 801b96c:	9a06      	ldr	r2, [sp, #24]
 801b96e:	4611      	mov	r1, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 801b970:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801b974:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 801b978:	f422 727f 	bic.w	r2, r2, #1020	@ 0x3fc
 801b97c:	f022 0203 	bic.w	r2, r2, #3
 801b980:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 801b984:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 801b988:	4293      	cmp	r3, r2
 801b98a:	d00f      	beq.n	801b9ac <lfs_dir_fetchmatch+0x29c>
                } else if (tempbesttag != -1 &&
 801b98c:	9a06      	ldr	r2, [sp, #24]
 801b98e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801b992:	f000 80b2 	beq.w	801bafa <lfs_dir_fetchmatch+0x3ea>
    return (tag & 0x000ffc00) >> 10;
 801b996:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801b99a:	f3c1 2289 	ubfx	r2, r1, #10, #10
                } else if (tempbesttag != -1 &&
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	f0c0 80ab 	bcc.w	801bafa <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 801b9a4:	eb01 2380 	add.w	r3, r1, r0, lsl #10
 801b9a8:	9306      	str	r3, [sp, #24]
 801b9aa:	e0a6      	b.n	801bafa <lfs_dir_fetchmatch+0x3ea>
                    tempbesttag |= 0x80000000;
 801b9ac:	f041 4300 	orr.w	r3, r1, #2147483648	@ 0x80000000
 801b9b0:	9306      	str	r3, [sp, #24]
 801b9b2:	e0a2      	b.n	801bafa <lfs_dir_fetchmatch+0x3ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 801b9b4:	f000 0301 	and.w	r3, r0, #1
 801b9b8:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801b9ba:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801b9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 801b9be:	2208      	movs	r2, #8
 801b9c0:	9203      	str	r2, [sp, #12]
 801b9c2:	aa0e      	add	r2, sp, #56	@ 0x38
 801b9c4:	9202      	str	r2, [sp, #8]
 801b9c6:	f8cd 8004 	str.w	r8, [sp, #4]
 801b9ca:	6832      	ldr	r2, [r6, #0]
 801b9cc:	9200      	str	r2, [sp, #0]
 801b9ce:	462a      	mov	r2, r5
 801b9d0:	2100      	movs	r1, #0
 801b9d2:	4628      	mov	r0, r5
 801b9d4:	f7fe ffea 	bl	801a9ac <lfs_bd_read>
                if (err) {
 801b9d8:	2800      	cmp	r0, #0
 801b9da:	f000 808e 	beq.w	801bafa <lfs_dir_fetchmatch+0x3ea>
                    if (err == LFS_ERR_CORRUPT) {
 801b9de:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b9e2:	d101      	bne.n	801b9e8 <lfs_dir_fetchmatch+0x2d8>
        bool maybeerased = false;
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	e73a      	b.n	801b85e <lfs_dir_fetchmatch+0x14e>
                    return err;
 801b9e8:	4683      	mov	fp, r0
 801b9ea:	e0f4      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
                hasfcrc = true;
 801b9ec:	2301      	movs	r3, #1
 801b9ee:	9308      	str	r3, [sp, #32]
 801b9f0:	e083      	b.n	801bafa <lfs_dir_fetchmatch+0x3ea>
                    if (res == LFS_ERR_CORRUPT) {
 801b9f2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801b9f6:	d101      	bne.n	801b9fc <lfs_dir_fetchmatch+0x2ec>
        bool maybeerased = false;
 801b9f8:	2300      	movs	r3, #0
 801b9fa:	e730      	b.n	801b85e <lfs_dir_fetchmatch+0x14e>
                    return res;
 801b9fc:	4683      	mov	fp, r0
 801b9fe:	e0ea      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 801ba00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ba02:	9b06      	ldr	r3, [sp, #24]
 801ba04:	469c      	mov	ip, r3
 801ba06:	ea82 0103 	eor.w	r1, r2, r3
 801ba0a:	4b08      	ldr	r3, [pc, #32]	@ (801ba2c <lfs_dir_fetchmatch+0x31c>)
 801ba0c:	400b      	ands	r3, r1
 801ba0e:	b17b      	cbz	r3, 801ba30 <lfs_dir_fetchmatch+0x320>
                } else if (res == LFS_CMP_GT &&
 801ba10:	2802      	cmp	r0, #2
 801ba12:	d110      	bne.n	801ba36 <lfs_dir_fetchmatch+0x326>
    return (tag & 0x000ffc00) >> 10;
 801ba14:	f3c2 2389 	ubfx	r3, r2, #10, #10
 801ba18:	f3cc 2c89 	ubfx	ip, ip, #10, #10
                } else if (res == LFS_CMP_GT &&
 801ba1c:	459c      	cmp	ip, r3
 801ba1e:	d30a      	bcc.n	801ba36 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag | 0x80000000;
 801ba20:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 801ba24:	9306      	str	r3, [sp, #24]
 801ba26:	e006      	b.n	801ba36 <lfs_dir_fetchmatch+0x326>
 801ba28:	08035334 	.word	0x08035334
 801ba2c:	7ffffc00 	.word	0x7ffffc00
                    tempbesttag = -1;
 801ba30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba34:	9306      	str	r3, [sp, #24]
            ptag = tag;
 801ba36:	46d0      	mov	r8, sl
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ba38:	f348 0209 	sbfx	r2, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ba3c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801ba40:	bf14      	ite	ne
 801ba42:	4643      	movne	r3, r8
 801ba44:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
 801ba48:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ba4c:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
 801ba4e:	441c      	add	r4, r3
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 801ba50:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801ba52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801ba54:	2204      	movs	r2, #4
 801ba56:	9203      	str	r2, [sp, #12]
 801ba58:	aa0c      	add	r2, sp, #48	@ 0x30
 801ba5a:	9202      	str	r2, [sp, #8]
 801ba5c:	9401      	str	r4, [sp, #4]
 801ba5e:	6832      	ldr	r2, [r6, #0]
 801ba60:	9200      	str	r2, [sp, #0]
 801ba62:	462a      	mov	r2, r5
 801ba64:	2100      	movs	r1, #0
 801ba66:	4628      	mov	r0, r5
 801ba68:	f7fe ffa0 	bl	801a9ac <lfs_bd_read>
            if (err) {
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	f47f aed2 	bne.w	801b816 <lfs_dir_fetchmatch+0x106>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 801ba72:	2204      	movs	r2, #4
 801ba74:	a90c      	add	r1, sp, #48	@ 0x30
 801ba76:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ba78:	f003 fbac 	bl	801f1d4 <lfs_crc>
 801ba7c:	900b      	str	r0, [sp, #44]	@ 0x2c
            tag = lfs_frombe32(tag) ^ ptag;
 801ba7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return __builtin_bswap32(a);
 801ba80:	ba1b      	rev	r3, r3
 801ba82:	ea88 0a03 	eor.w	sl, r8, r3
 801ba86:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            if (!lfs_tag_isvalid(tag)) {
 801ba8a:	f1ba 0f00 	cmp.w	sl, #0
 801ba8e:	f6ff aec9 	blt.w	801b824 <lfs_dir_fetchmatch+0x114>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801ba92:	f34a 0309 	sbfx	r3, sl, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801ba96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ba9a:	bf14      	ite	ne
 801ba9c:	4652      	movne	r2, sl
 801ba9e:	f10a 0201 	addeq.w	r2, sl, #1
    return tag & 0x000003ff;
 801baa2:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801baa6:	1d11      	adds	r1, r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 801baa8:	4421      	add	r1, r4
 801baaa:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801baac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801baae:	4299      	cmp	r1, r3
 801bab0:	d83a      	bhi.n	801bb28 <lfs_dir_fetchmatch+0x418>
    return (tag & 0x78000000) >> 20;
 801bab2:	ea4f 511a 	mov.w	r1, sl, lsr #20
 801bab6:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 801baba:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
 801babe:	f43f aebb 	beq.w	801b838 <lfs_dir_fetchmatch+0x128>
            err = lfs_bd_crc(lfs,
 801bac2:	f104 0804 	add.w	r8, r4, #4
 801bac6:	a90b      	add	r1, sp, #44	@ 0x2c
 801bac8:	9103      	str	r1, [sp, #12]
 801baca:	9202      	str	r2, [sp, #8]
 801bacc:	f8cd 8004 	str.w	r8, [sp, #4]
 801bad0:	6832      	ldr	r2, [r6, #0]
 801bad2:	9200      	str	r2, [sp, #0]
 801bad4:	462a      	mov	r2, r5
 801bad6:	2100      	movs	r1, #0
 801bad8:	4628      	mov	r0, r5
 801bada:	f7ff fde7 	bl	801b6ac <lfs_bd_crc>
            if (err) {
 801bade:	2800      	cmp	r0, #0
 801bae0:	f47f af14 	bne.w	801b90c <lfs_dir_fetchmatch+0x1fc>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801bae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801bae6:	0d18      	lsrs	r0, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 801bae8:	f410 61e0 	ands.w	r1, r0, #1792	@ 0x700
 801baec:	f47f af15 	bne.w	801b91a <lfs_dir_fetchmatch+0x20a>
    return (tag & 0x000ffc00) >> 10;
 801baf0:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 801baf4:	429f      	cmp	r7, r3
 801baf6:	d800      	bhi.n	801bafa <lfs_dir_fetchmatch+0x3ea>
                    tempcount = lfs_tag_id(tag) + 1;
 801baf8:	1c5f      	adds	r7, r3, #1
            if ((fmask & tag) == (fmask & ftag)) {
 801bafa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801bafc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801bafe:	404b      	eors	r3, r1
 801bb00:	9a05      	ldr	r2, [sp, #20]
 801bb02:	4213      	tst	r3, r2
 801bb04:	d197      	bne.n	801ba36 <lfs_dir_fetchmatch+0x326>
                        dir->pair[0], off+sizeof(tag)});
 801bb06:	6833      	ldr	r3, [r6, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 801bb08:	9314      	str	r3, [sp, #80]	@ 0x50
 801bb0a:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
 801bb0e:	aa14      	add	r2, sp, #80	@ 0x50
 801bb10:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801bb12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801bb14:	4798      	blx	r3
                if (res < 0) {
 801bb16:	2800      	cmp	r0, #0
 801bb18:	f6ff af6b 	blt.w	801b9f2 <lfs_dir_fetchmatch+0x2e2>
                if (res == LFS_CMP_EQ) {
 801bb1c:	2800      	cmp	r0, #0
 801bb1e:	f47f af6f 	bne.w	801ba00 <lfs_dir_fetchmatch+0x2f0>
                    tempbesttag = tag;
 801bb22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb24:	9306      	str	r3, [sp, #24]
 801bb26:	e786      	b.n	801ba36 <lfs_dir_fetchmatch+0x326>
        bool maybeerased = false;
 801bb28:	2300      	movs	r3, #0
 801bb2a:	e698      	b.n	801b85e <lfs_dir_fetchmatch+0x14e>
 801bb2c:	2300      	movs	r3, #0
 801bb2e:	e696      	b.n	801b85e <lfs_dir_fetchmatch+0x14e>
    lfs_block_t t = pair[0];
 801bb30:	6833      	ldr	r3, [r6, #0]
    pair[0] = pair[1];
 801bb32:	6872      	ldr	r2, [r6, #4]
 801bb34:	6032      	str	r2, [r6, #0]
    pair[1] = t;
 801bb36:	6073      	str	r3, [r6, #4]
            dir->rev = revs[(r+1)%2];
 801bb38:	aa16      	add	r2, sp, #88	@ 0x58
 801bb3a:	9b07      	ldr	r3, [sp, #28]
 801bb3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bb40:	f853 3c10 	ldr.w	r3, [r3, #-16]
 801bb44:	60b3      	str	r3, [r6, #8]
    for (int i = 0; i < 2; i++) {
 801bb46:	f109 0901 	add.w	r9, r9, #1
 801bb4a:	e648      	b.n	801b7de <lfs_dir_fetchmatch+0xce>
                uint32_t fcrc_ = 0xffffffff;
 801bb4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bb50:	930d      	str	r3, [sp, #52]	@ 0x34
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 801bb52:	6a43      	ldr	r3, [r0, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 801bb54:	a90d      	add	r1, sp, #52	@ 0x34
 801bb56:	9103      	str	r1, [sp, #12]
 801bb58:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801bb5a:	9102      	str	r1, [sp, #8]
 801bb5c:	9201      	str	r2, [sp, #4]
 801bb5e:	6832      	ldr	r2, [r6, #0]
 801bb60:	9200      	str	r2, [sp, #0]
 801bb62:	462a      	mov	r2, r5
 801bb64:	2100      	movs	r1, #0
 801bb66:	4628      	mov	r0, r5
 801bb68:	f7ff fda0 	bl	801b6ac <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801bb6c:	b120      	cbz	r0, 801bb78 <lfs_dir_fetchmatch+0x468>
 801bb6e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bb72:	d001      	beq.n	801bb78 <lfs_dir_fetchmatch+0x468>
                    return err;
 801bb74:	4683      	mov	fp, r0
 801bb76:	e02e      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
                dir->erased = (fcrc_ == fcrc.crc);
 801bb78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bb7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bb7c:	4293      	cmp	r3, r2
 801bb7e:	bf14      	ite	ne
 801bb80:	2300      	movne	r3, #0
 801bb82:	2301      	moveq	r3, #1
 801bb84:	75b3      	strb	r3, [r6, #22]
 801bb86:	e67c      	b.n	801b882 <lfs_dir_fetchmatch+0x172>
                besttag |= 0x80000000;
 801bb88:	f04b 4b00 	orr.w	fp, fp, #2147483648	@ 0x80000000
        if (id) {
 801bb8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801bb8e:	b13b      	cbz	r3, 801bba0 <lfs_dir_fetchmatch+0x490>
    return (tag & 0x000ffc00) >> 10;
 801bb90:	f3cb 2389 	ubfx	r3, fp, #10, #10
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 801bb94:	8ab2      	ldrh	r2, [r6, #20]
    return (a < b) ? a : b;
 801bb96:	4293      	cmp	r3, r2
 801bb98:	bf28      	it	cs
 801bb9a:	4613      	movcs	r3, r2
 801bb9c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801bb9e:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 801bba0:	f1bb 0f00 	cmp.w	fp, #0
 801bba4:	da17      	bge.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
    return (tag & 0x000ffc00) >> 10;
 801bba6:	f3cb 2389 	ubfx	r3, fp, #10, #10
        } else if (lfs_tag_id(besttag) < dir->count) {
 801bbaa:	8ab2      	ldrh	r2, [r6, #20]
 801bbac:	429a      	cmp	r2, r3
 801bbae:	d902      	bls.n	801bbb6 <lfs_dir_fetchmatch+0x4a6>
            return LFS_ERR_NOENT;
 801bbb0:	f06f 0b01 	mvn.w	fp, #1
 801bbb4:	e00f      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
            return 0;
 801bbb6:	f04f 0b00 	mov.w	fp, #0
 801bbba:	e00c      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 801bbbc:	4b0b      	ldr	r3, [pc, #44]	@ (801bbec <lfs_dir_fetchmatch+0x4dc>)
 801bbbe:	9301      	str	r3, [sp, #4]
 801bbc0:	6873      	ldr	r3, [r6, #4]
 801bbc2:	9300      	str	r3, [sp, #0]
 801bbc4:	6833      	ldr	r3, [r6, #0]
 801bbc6:	f240 5259 	movw	r2, #1369	@ 0x559
 801bbca:	4909      	ldr	r1, [pc, #36]	@ (801bbf0 <lfs_dir_fetchmatch+0x4e0>)
 801bbcc:	4809      	ldr	r0, [pc, #36]	@ (801bbf4 <lfs_dir_fetchmatch+0x4e4>)
 801bbce:	f00d fcf1 	bl	80295b4 <printf>
    return LFS_ERR_CORRUPT;
 801bbd2:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
}
 801bbd6:	4658      	mov	r0, fp
 801bbd8:	b017      	add	sp, #92	@ 0x5c
 801bbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801bbde:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801bbe2:	e7f8      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
 801bbe4:	f06f 0b53 	mvn.w	fp, #83	@ 0x53
 801bbe8:	e7f5      	b.n	801bbd6 <lfs_dir_fetchmatch+0x4c6>
 801bbea:	bf00      	nop
 801bbec:	0803606c 	.word	0x0803606c
 801bbf0:	080381c0 	.word	0x080381c0
 801bbf4:	08038348 	.word	0x08038348

0801bbf8 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 801bbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bbfc:	b08a      	sub	sp, #40	@ 0x28
 801bbfe:	4681      	mov	r9, r0
 801bc00:	4688      	mov	r8, r1
 801bc02:	4614      	mov	r4, r2
    parent->tail[0] = 0;
 801bc04:	2300      	movs	r3, #0
 801bc06:	6193      	str	r3, [r2, #24]
    parent->tail[1] = 1;
 801bc08:	2501      	movs	r5, #1
 801bc0a:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801bc0c:	4a29      	ldr	r2, [pc, #164]	@ (801bcb4 <lfs_fs_parent+0xbc>)
 801bc0e:	ab05      	add	r3, sp, #20
 801bc10:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bc14:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801bc18:	46aa      	mov	sl, r5
    while (!lfs_pair_isnull(parent->tail)) {
 801bc1a:	e03a      	b.n	801bc92 <lfs_fs_parent+0x9a>
            LFS_WARN("Cycle detected in tail list");
 801bc1c:	4b26      	ldr	r3, [pc, #152]	@ (801bcb8 <lfs_fs_parent+0xc0>)
 801bc1e:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 801bc22:	4926      	ldr	r1, [pc, #152]	@ (801bcbc <lfs_fs_parent+0xc4>)
 801bc24:	4826      	ldr	r0, [pc, #152]	@ (801bcc0 <lfs_fs_parent+0xc8>)
 801bc26:	f00d fcc5 	bl	80295b4 <printf>
            return LFS_ERR_CORRUPT;
 801bc2a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801bc2e:	e03c      	b.n	801bcaa <lfs_fs_parent+0xb2>
            tortoise[0] = parent->tail[0];
 801bc30:	9705      	str	r7, [sp, #20]
            tortoise[1] = parent->tail[1];
 801bc32:	69e3      	ldr	r3, [r4, #28]
 801bc34:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 801bc36:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801bc3a:	2500      	movs	r5, #0
 801bc3c:	e00d      	b.n	801bc5a <lfs_fs_parent+0x62>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bc3e:	2301      	movs	r3, #1
 801bc40:	e000      	b.n	801bc44 <lfs_fs_parent+0x4c>
 801bc42:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
 801bc44:	bb7b      	cbnz	r3, 801bca6 <lfs_fs_parent+0xae>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 801bc46:	f104 0618 	add.w	r6, r4, #24
 801bc4a:	a905      	add	r1, sp, #20
 801bc4c:	4630      	mov	r0, r6
 801bc4e:	f7fe fce7 	bl	801a620 <lfs_pair_issync>
 801bc52:	2800      	cmp	r0, #0
 801bc54:	d1e2      	bne.n	801bc1c <lfs_fs_parent+0x24>
        if (tortoise_i == tortoise_period) {
 801bc56:	4555      	cmp	r5, sl
 801bc58:	d0ea      	beq.n	801bc30 <lfs_fs_parent+0x38>
        tortoise_i += 1;
 801bc5a:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801bc5c:	f8cd 901c 	str.w	r9, [sp, #28]
                    lfs, {pair[0], pair[1]}});
 801bc60:	f8d8 3000 	ldr.w	r3, [r8]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801bc64:	9308      	str	r3, [sp, #32]
                    lfs, {pair[0], pair[1]}});
 801bc66:	f8d8 3004 	ldr.w	r3, [r8, #4]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801bc6a:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801bc6c:	ab07      	add	r3, sp, #28
 801bc6e:	9303      	str	r3, [sp, #12]
 801bc70:	4b14      	ldr	r3, [pc, #80]	@ (801bcc4 <lfs_fs_parent+0xcc>)
 801bc72:	9302      	str	r3, [sp, #8]
 801bc74:	2300      	movs	r3, #0
 801bc76:	9301      	str	r3, [sp, #4]
 801bc78:	4b13      	ldr	r3, [pc, #76]	@ (801bcc8 <lfs_fs_parent+0xd0>)
 801bc7a:	9300      	str	r3, [sp, #0]
 801bc7c:	4b13      	ldr	r3, [pc, #76]	@ (801bccc <lfs_fs_parent+0xd4>)
 801bc7e:	4632      	mov	r2, r6
 801bc80:	4621      	mov	r1, r4
 801bc82:	4648      	mov	r0, r9
 801bc84:	f7ff fd44 	bl	801b710 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 801bc88:	4603      	mov	r3, r0
 801bc8a:	b110      	cbz	r0, 801bc92 <lfs_fs_parent+0x9a>
 801bc8c:	f110 0f02 	cmn.w	r0, #2
 801bc90:	d10b      	bne.n	801bcaa <lfs_fs_parent+0xb2>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bc92:	69a7      	ldr	r7, [r4, #24]
 801bc94:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801bc98:	d0d3      	beq.n	801bc42 <lfs_fs_parent+0x4a>
 801bc9a:	69e3      	ldr	r3, [r4, #28]
 801bc9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bca0:	d0cd      	beq.n	801bc3e <lfs_fs_parent+0x46>
 801bca2:	2300      	movs	r3, #0
 801bca4:	e7ce      	b.n	801bc44 <lfs_fs_parent+0x4c>
    return LFS_ERR_NOENT;
 801bca6:	f06f 0301 	mvn.w	r3, #1
}
 801bcaa:	4618      	mov	r0, r3
 801bcac:	b00a      	add	sp, #40	@ 0x28
 801bcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcb2:	bf00      	nop
 801bcb4:	08035334 	.word	0x08035334
 801bcb8:	0803606c 	.word	0x0803606c
 801bcbc:	080381c0 	.word	0x080381c0
 801bcc0:	08038380 	.word	0x08038380
 801bcc4:	0801ade1 	.word	0x0801ade1
 801bcc8:	20000008 	.word	0x20000008
 801bccc:	7ff003ff 	.word	0x7ff003ff

0801bcd0 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 801bcd0:	b500      	push	{lr}
 801bcd2:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	9303      	str	r3, [sp, #12]
 801bcd8:	9302      	str	r3, [sp, #8]
 801bcda:	9301      	str	r3, [sp, #4]
 801bcdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bce0:	9300      	str	r3, [sp, #0]
 801bce2:	f7ff fd15 	bl	801b710 <lfs_dir_fetchmatch>
}
 801bce6:	b005      	add	sp, #20
 801bce8:	f85d fb04 	ldr.w	pc, [sp], #4

0801bcec <lfs_fs_traverse_>:
        bool includeorphans) {
 801bcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcf0:	b093      	sub	sp, #76	@ 0x4c
 801bcf2:	4606      	mov	r6, r0
 801bcf4:	460f      	mov	r7, r1
 801bcf6:	4690      	mov	r8, r2
 801bcf8:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
 801bcfa:	2220      	movs	r2, #32
 801bcfc:	2100      	movs	r1, #0
 801bcfe:	a80a      	add	r0, sp, #40	@ 0x28
 801bd00:	f010 f976 	bl	802bff0 <memset>
 801bd04:	2501      	movs	r5, #1
 801bd06:	9511      	str	r5, [sp, #68]	@ 0x44
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801bd08:	4a62      	ldr	r2, [pc, #392]	@ (801be94 <lfs_fs_traverse_+0x1a8>)
 801bd0a:	ab08      	add	r3, sp, #32
 801bd0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bd10:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801bd14:	46aa      	mov	sl, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801bd16:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bd18:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801bd1c:	f000 8081 	beq.w	801be22 <lfs_fs_traverse_+0x136>
 801bd20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bd22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bd26:	d07a      	beq.n	801be1e <lfs_fs_traverse_+0x132>
 801bd28:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d17b      	bne.n	801be26 <lfs_fs_traverse_+0x13a>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801bd2e:	a908      	add	r1, sp, #32
 801bd30:	a810      	add	r0, sp, #64	@ 0x40
 801bd32:	f7fe fc75 	bl	801a620 <lfs_pair_issync>
 801bd36:	b988      	cbnz	r0, 801bd5c <lfs_fs_traverse_+0x70>
        if (tortoise_i == tortoise_period) {
 801bd38:	4555      	cmp	r5, sl
 801bd3a:	d019      	beq.n	801bd70 <lfs_fs_traverse_+0x84>
        tortoise_i += 1;
 801bd3c:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
 801bd3e:	2400      	movs	r4, #0
 801bd40:	2c01      	cmp	r4, #1
 801bd42:	dc1c      	bgt.n	801bd7e <lfs_fs_traverse_+0x92>
            int err = cb(data, dir.tail[i]);
 801bd44:	1da3      	adds	r3, r4, #6
 801bd46:	aa12      	add	r2, sp, #72	@ 0x48
 801bd48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bd4c:	f853 1c20 	ldr.w	r1, [r3, #-32]
 801bd50:	4640      	mov	r0, r8
 801bd52:	47b8      	blx	r7
            if (err) {
 801bd54:	4603      	mov	r3, r0
 801bd56:	b9f8      	cbnz	r0, 801bd98 <lfs_fs_traverse_+0xac>
        for (int i = 0; i < 2; i++) {
 801bd58:	3401      	adds	r4, #1
 801bd5a:	e7f1      	b.n	801bd40 <lfs_fs_traverse_+0x54>
            LFS_WARN("Cycle detected in tail list");
 801bd5c:	4b4e      	ldr	r3, [pc, #312]	@ (801be98 <lfs_fs_traverse_+0x1ac>)
 801bd5e:	f241 2222 	movw	r2, #4642	@ 0x1222
 801bd62:	494e      	ldr	r1, [pc, #312]	@ (801be9c <lfs_fs_traverse_+0x1b0>)
 801bd64:	484e      	ldr	r0, [pc, #312]	@ (801bea0 <lfs_fs_traverse_+0x1b4>)
 801bd66:	f00d fc25 	bl	80295b4 <printf>
            return LFS_ERR_CORRUPT;
 801bd6a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801bd6e:	e013      	b.n	801bd98 <lfs_fs_traverse_+0xac>
            tortoise[0] = dir.tail[0];
 801bd70:	9408      	str	r4, [sp, #32]
            tortoise[1] = dir.tail[1];
 801bd72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801bd74:	9309      	str	r3, [sp, #36]	@ 0x24
            tortoise_period *= 2;
 801bd76:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
            tortoise_i = 0;
 801bd7a:	2500      	movs	r5, #0
 801bd7c:	e7de      	b.n	801bd3c <lfs_fs_traverse_+0x50>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 801bd7e:	aa10      	add	r2, sp, #64	@ 0x40
 801bd80:	a90a      	add	r1, sp, #40	@ 0x28
 801bd82:	4630      	mov	r0, r6
 801bd84:	f7ff ffa4 	bl	801bcd0 <lfs_dir_fetch>
        if (err) {
 801bd88:	9005      	str	r0, [sp, #20]
 801bd8a:	2800      	cmp	r0, #0
 801bd8c:	d17f      	bne.n	801be8e <lfs_fs_traverse_+0x1a2>
        for (uint16_t id = 0; id < dir.count; id++) {
 801bd8e:	2400      	movs	r4, #0
 801bd90:	e016      	b.n	801bdc0 <lfs_fs_traverse_+0xd4>
                if (tag == LFS_ERR_NOENT) {
 801bd92:	f113 0f02 	cmn.w	r3, #2
 801bd96:	d011      	beq.n	801bdbc <lfs_fs_traverse_+0xd0>
}
 801bd98:	4618      	mov	r0, r3
 801bd9a:	b013      	add	sp, #76	@ 0x4c
 801bd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 801bda0:	f8cd 8008 	str.w	r8, [sp, #8]
 801bda4:	9701      	str	r7, [sp, #4]
 801bda6:	9b07      	ldr	r3, [sp, #28]
 801bda8:	9300      	str	r3, [sp, #0]
 801bdaa:	9b06      	ldr	r3, [sp, #24]
 801bdac:	4632      	mov	r2, r6
 801bdae:	2100      	movs	r1, #0
 801bdb0:	4630      	mov	r0, r6
 801bdb2:	f7fe ffc9 	bl	801ad48 <lfs_ctz_traverse>
                if (err) {
 801bdb6:	4603      	mov	r3, r0
 801bdb8:	2800      	cmp	r0, #0
 801bdba:	d1ed      	bne.n	801bd98 <lfs_fs_traverse_+0xac>
        for (uint16_t id = 0; id < dir.count; id++) {
 801bdbc:	3401      	adds	r4, #1
 801bdbe:	b2a4      	uxth	r4, r4
 801bdc0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801bdc4:	42a3      	cmp	r3, r4
 801bdc6:	d9a6      	bls.n	801bd16 <lfs_fs_traverse_+0x2a>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 801bdc8:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801bdca:	aa06      	add	r2, sp, #24
 801bdcc:	9200      	str	r2, [sp, #0]
 801bdce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801bdd2:	f043 0308 	orr.w	r3, r3, #8
 801bdd6:	4a33      	ldr	r2, [pc, #204]	@ (801bea4 <lfs_fs_traverse_+0x1b8>)
 801bdd8:	a90a      	add	r1, sp, #40	@ 0x28
 801bdda:	4630      	mov	r0, r6
 801bddc:	f7fe ff8a 	bl	801acf4 <lfs_dir_get>
            if (tag < 0) {
 801bde0:	1e03      	subs	r3, r0, #0
 801bde2:	dbd6      	blt.n	801bd92 <lfs_fs_traverse_+0xa6>
    return (tag & 0x7ff00000) >> 20;
 801bde4:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801bde8:	f240 2202 	movw	r2, #514	@ 0x202
 801bdec:	4293      	cmp	r3, r2
 801bdee:	d0d7      	beq.n	801bda0 <lfs_fs_traverse_+0xb4>
            } else if (includeorphans &&
 801bdf0:	f1b9 0f00 	cmp.w	r9, #0
 801bdf4:	d0e2      	beq.n	801bdbc <lfs_fs_traverse_+0xd0>
 801bdf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bdfa:	d1df      	bne.n	801bdbc <lfs_fs_traverse_+0xd0>
                for (int i = 0; i < 2; i++) {
 801bdfc:	f8dd b014 	ldr.w	fp, [sp, #20]
 801be00:	e001      	b.n	801be06 <lfs_fs_traverse_+0x11a>
 801be02:	f10b 0b01 	add.w	fp, fp, #1
 801be06:	f1bb 0f01 	cmp.w	fp, #1
 801be0a:	dcd7      	bgt.n	801bdbc <lfs_fs_traverse_+0xd0>
                    err = cb(data, (&ctz.head)[i]);
 801be0c:	ab06      	add	r3, sp, #24
 801be0e:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 801be12:	4640      	mov	r0, r8
 801be14:	47b8      	blx	r7
                    if (err) {
 801be16:	4603      	mov	r3, r0
 801be18:	2800      	cmp	r0, #0
 801be1a:	d0f2      	beq.n	801be02 <lfs_fs_traverse_+0x116>
 801be1c:	e7bc      	b.n	801bd98 <lfs_fs_traverse_+0xac>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801be1e:	2301      	movs	r3, #1
 801be20:	e783      	b.n	801bd2a <lfs_fs_traverse_+0x3e>
 801be22:	2301      	movs	r3, #1
 801be24:	e781      	b.n	801bd2a <lfs_fs_traverse_+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801be26:	6ab4      	ldr	r4, [r6, #40]	@ 0x28
 801be28:	e00f      	b.n	801be4a <lfs_fs_traverse_+0x15e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801be2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801be2c:	f8cd 8008 	str.w	r8, [sp, #8]
 801be30:	9701      	str	r7, [sp, #4]
 801be32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801be34:	9200      	str	r2, [sp, #0]
 801be36:	4632      	mov	r2, r6
 801be38:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801be3c:	4630      	mov	r0, r6
 801be3e:	f7fe ff83 	bl	801ad48 <lfs_ctz_traverse>
            if (err) {
 801be42:	4603      	mov	r3, r0
 801be44:	b158      	cbz	r0, 801be5e <lfs_fs_traverse_+0x172>
 801be46:	e7a7      	b.n	801bd98 <lfs_fs_traverse_+0xac>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801be48:	6824      	ldr	r4, [r4, #0]
 801be4a:	b1f4      	cbz	r4, 801be8a <lfs_fs_traverse_+0x19e>
        if (f->type != LFS_TYPE_REG) {
 801be4c:	79a3      	ldrb	r3, [r4, #6]
 801be4e:	2b01      	cmp	r3, #1
 801be50:	d1fa      	bne.n	801be48 <lfs_fs_traverse_+0x15c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 801be52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801be54:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 801be58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801be5c:	d0e5      	beq.n	801be2a <lfs_fs_traverse_+0x13e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 801be5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801be60:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 801be64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801be68:	d1ee      	bne.n	801be48 <lfs_fs_traverse_+0x15c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801be6a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801be6c:	f8cd 8008 	str.w	r8, [sp, #8]
 801be70:	9701      	str	r7, [sp, #4]
 801be72:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801be74:	9200      	str	r2, [sp, #0]
 801be76:	4632      	mov	r2, r6
 801be78:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801be7c:	4630      	mov	r0, r6
 801be7e:	f7fe ff63 	bl	801ad48 <lfs_ctz_traverse>
            if (err) {
 801be82:	4603      	mov	r3, r0
 801be84:	2800      	cmp	r0, #0
 801be86:	d0df      	beq.n	801be48 <lfs_fs_traverse_+0x15c>
 801be88:	e786      	b.n	801bd98 <lfs_fs_traverse_+0xac>
    return 0;
 801be8a:	2300      	movs	r3, #0
 801be8c:	e784      	b.n	801bd98 <lfs_fs_traverse_+0xac>
            return err;
 801be8e:	9b05      	ldr	r3, [sp, #20]
 801be90:	e782      	b.n	801bd98 <lfs_fs_traverse_+0xac>
 801be92:	bf00      	nop
 801be94:	08035334 	.word	0x08035334
 801be98:	0803606c 	.word	0x0803606c
 801be9c:	080381c0 	.word	0x080381c0
 801bea0:	08038380 	.word	0x08038380
 801bea4:	700ffc00 	.word	0x700ffc00

0801bea8 <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 801bea8:	b538      	push	{r3, r4, r5, lr}
 801beaa:	4604      	mov	r4, r0
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801beac:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801beae:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 801beb0:	4413      	add	r3, r2
            % lfs->block_count;
 801beb2:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 801beb4:	fbb3 f1f2 	udiv	r1, r3, r2
 801beb8:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 801bebc:	6543      	str	r3, [r0, #84]	@ 0x54
    lfs->lookahead.next = 0;
 801bebe:	2100      	movs	r1, #0
 801bec0:	65c1      	str	r1, [r0, #92]	@ 0x5c
            8*lfs->cfg->lookahead_size,
 801bec2:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801bec4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 801bec6:	00db      	lsls	r3, r3, #3
 801bec8:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801beca:	4283      	cmp	r3, r0
 801becc:	bf28      	it	cs
 801bece:	4603      	movcs	r3, r0
 801bed0:	65a3      	str	r3, [r4, #88]	@ 0x58
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801bed2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801bed4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801bed6:	f010 f88b 	bl	802bff0 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 801beda:	2301      	movs	r3, #1
 801bedc:	4622      	mov	r2, r4
 801bede:	4906      	ldr	r1, [pc, #24]	@ (801bef8 <lfs_alloc_scan+0x50>)
 801bee0:	4620      	mov	r0, r4
 801bee2:	f7ff ff03 	bl	801bcec <lfs_fs_traverse_>
    if (err) {
 801bee6:	4605      	mov	r5, r0
 801bee8:	b908      	cbnz	r0, 801beee <lfs_alloc_scan+0x46>
}
 801beea:	4628      	mov	r0, r5
 801beec:	bd38      	pop	{r3, r4, r5, pc}
        lfs_alloc_drop(lfs);
 801beee:	4620      	mov	r0, r4
 801bef0:	f7fe fc15 	bl	801a71e <lfs_alloc_drop>
        return err;
 801bef4:	e7f9      	b.n	801beea <lfs_alloc_scan+0x42>
 801bef6:	bf00      	nop
 801bef8:	0801a72d 	.word	0x0801a72d

0801befc <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 801befc:	b530      	push	{r4, r5, lr}
 801befe:	b083      	sub	sp, #12
 801bf00:	4604      	mov	r4, r0
 801bf02:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 801bf04:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801bf06:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801bf08:	4293      	cmp	r3, r2
 801bf0a:	d22b      	bcs.n	801bf64 <lfs_alloc+0x68>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801bf0c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801bf0e:	08da      	lsrs	r2, r3, #3
 801bf10:	5c8a      	ldrb	r2, [r1, r2]
                    & (1U << (lfs->lookahead.next % 8)))) {
 801bf12:	f003 0107 	and.w	r1, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801bf16:	40ca      	lsrs	r2, r1
 801bf18:	f012 0f01 	tst.w	r2, #1
 801bf1c:	d005      	beq.n	801bf2a <lfs_alloc+0x2e>
            lfs->lookahead.next += 1;
 801bf1e:	3301      	adds	r3, #1
 801bf20:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 801bf22:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 801bf24:	3b01      	subs	r3, #1
 801bf26:	6623      	str	r3, [r4, #96]	@ 0x60
 801bf28:	e7ec      	b.n	801bf04 <lfs_alloc+0x8>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801bf2a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bf2c:	4413      	add	r3, r2
                        % lfs->block_count;
 801bf2e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801bf30:	fbb3 f1f2 	udiv	r1, r3, r2
 801bf34:	fb02 3311 	mls	r3, r2, r1, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 801bf38:	602b      	str	r3, [r5, #0]
                    lfs->lookahead.next += 1;
 801bf3a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 801bf3c:	3301      	adds	r3, #1
 801bf3e:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 801bf40:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801bf42:	3a01      	subs	r2, #1
 801bf44:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 801bf46:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 801bf48:	4293      	cmp	r3, r2
 801bf4a:	d225      	bcs.n	801bf98 <lfs_alloc+0x9c>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801bf4c:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 801bf4e:	08da      	lsrs	r2, r3, #3
 801bf50:	5c8a      	ldrb	r2, [r1, r2]
                                & (1U << (lfs->lookahead.next % 8)))) {
 801bf52:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 801bf56:	fa22 f303 	lsr.w	r3, r2, r3
 801bf5a:	f013 0f01 	tst.w	r3, #1
 801bf5e:	d1ec      	bne.n	801bf3a <lfs_alloc+0x3e>
                        return 0;
 801bf60:	2000      	movs	r0, #0
 801bf62:	e01a      	b.n	801bf9a <lfs_alloc+0x9e>
        if (lfs->lookahead.ckpoint <= 0) {
 801bf64:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 801bf66:	b12a      	cbz	r2, 801bf74 <lfs_alloc+0x78>
        int err = lfs_alloc_scan(lfs);
 801bf68:	4620      	mov	r0, r4
 801bf6a:	f7ff ff9d 	bl	801bea8 <lfs_alloc_scan>
        if(err) {
 801bf6e:	2800      	cmp	r0, #0
 801bf70:	d0c8      	beq.n	801bf04 <lfs_alloc+0x8>
 801bf72:	e012      	b.n	801bf9a <lfs_alloc+0x9e>
            LFS_ERROR("No more free space 0x%"PRIx32,
 801bf74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801bf76:	4413      	add	r3, r2
 801bf78:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801bf7a:	fbb3 f1f2 	udiv	r1, r3, r2
 801bf7e:	4808      	ldr	r0, [pc, #32]	@ (801bfa0 <lfs_alloc+0xa4>)
 801bf80:	9000      	str	r0, [sp, #0]
 801bf82:	fb02 3311 	mls	r3, r2, r1, r3
 801bf86:	f240 22b1 	movw	r2, #689	@ 0x2b1
 801bf8a:	4906      	ldr	r1, [pc, #24]	@ (801bfa4 <lfs_alloc+0xa8>)
 801bf8c:	4806      	ldr	r0, [pc, #24]	@ (801bfa8 <lfs_alloc+0xac>)
 801bf8e:	f00d fb11 	bl	80295b4 <printf>
            return LFS_ERR_NOSPC;
 801bf92:	f06f 001b 	mvn.w	r0, #27
 801bf96:	e000      	b.n	801bf9a <lfs_alloc+0x9e>
                        return 0;
 801bf98:	2000      	movs	r0, #0
}
 801bf9a:	b003      	add	sp, #12
 801bf9c:	bd30      	pop	{r4, r5, pc}
 801bf9e:	bf00      	nop
 801bfa0:	0803606c 	.word	0x0803606c
 801bfa4:	080381c0 	.word	0x080381c0
 801bfa8:	080383ac 	.word	0x080383ac

0801bfac <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 801bfac:	b570      	push	{r4, r5, r6, lr}
 801bfae:	b084      	sub	sp, #16
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
 801bfb4:	2500      	movs	r5, #0
 801bfb6:	2d01      	cmp	r5, #1
 801bfb8:	dc0d      	bgt.n	801bfd6 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 801bfba:	3501      	adds	r5, #1
 801bfbc:	f005 0101 	and.w	r1, r5, #1
 801bfc0:	bf48      	it	mi
 801bfc2:	4249      	negmi	r1, r1
 801bfc4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801bfc8:	4630      	mov	r0, r6
 801bfca:	f7ff ff97 	bl	801befc <lfs_alloc>
        if (err) {
 801bfce:	4603      	mov	r3, r0
 801bfd0:	2800      	cmp	r0, #0
 801bfd2:	d0f0      	beq.n	801bfb6 <lfs_dir_alloc+0xa>
 801bfd4:	e02d      	b.n	801c032 <lfs_dir_alloc+0x86>
    dir->rev = 0;
 801bfd6:	2100      	movs	r1, #0
 801bfd8:	4622      	mov	r2, r4
 801bfda:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
 801bfde:	2304      	movs	r3, #4
 801bfe0:	9303      	str	r3, [sp, #12]
 801bfe2:	9202      	str	r2, [sp, #8]
 801bfe4:	9101      	str	r1, [sp, #4]
 801bfe6:	6822      	ldr	r2, [r4, #0]
 801bfe8:	9200      	str	r2, [sp, #0]
 801bfea:	4632      	mov	r2, r6
 801bfec:	4630      	mov	r0, r6
 801bfee:	f7fe fcdd 	bl	801a9ac <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
 801bff2:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 801bff4:	4603      	mov	r3, r0
 801bff6:	b110      	cbz	r0, 801bffe <lfs_dir_alloc+0x52>
 801bff8:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801bffc:	d119      	bne.n	801c032 <lfs_dir_alloc+0x86>
    if (lfs->cfg->block_cycles > 0) {
 801bffe:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 801c000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c002:	2b00      	cmp	r3, #0
 801c004:	dd0a      	ble.n	801c01c <lfs_dir_alloc+0x70>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 801c006:	3301      	adds	r3, #1
 801c008:	f043 0101 	orr.w	r1, r3, #1
    return lfs_aligndown(a + alignment-1, alignment);
 801c00c:	1853      	adds	r3, r2, r1
 801c00e:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801c010:	fbb3 f2f1 	udiv	r2, r3, r1
 801c014:	fb01 3212 	mls	r2, r1, r2, r3
 801c018:	1a9b      	subs	r3, r3, r2
 801c01a:	60a3      	str	r3, [r4, #8]
    dir->off = sizeof(dir->rev);
 801c01c:	2304      	movs	r3, #4
 801c01e:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
 801c020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c024:	6122      	str	r2, [r4, #16]
    dir->count = 0;
 801c026:	2300      	movs	r3, #0
 801c028:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 801c02a:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 801c02c:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
 801c02e:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
 801c030:	75e3      	strb	r3, [r4, #23]
}
 801c032:	4618      	mov	r0, r3
 801c034:	b004      	add	sp, #16
 801c036:	bd70      	pop	{r4, r5, r6, pc}

0801c038 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 801c038:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c03a:	b089      	sub	sp, #36	@ 0x24
 801c03c:	4605      	mov	r5, r0
 801c03e:	460e      	mov	r6, r1
 801c040:	e053      	b.n	801c0ea <lfs_file_relocate+0xb2>
                err = lfs_bd_read(lfs,
 801c042:	2201      	movs	r2, #1
 801c044:	9203      	str	r2, [sp, #12]
 801c046:	f10d 021b 	add.w	r2, sp, #27
 801c04a:	9202      	str	r2, [sp, #8]
 801c04c:	9401      	str	r4, [sp, #4]
 801c04e:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
 801c050:	9200      	str	r2, [sp, #0]
 801c052:	1b1b      	subs	r3, r3, r4
 801c054:	462a      	mov	r2, r5
 801c056:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 801c05a:	4628      	mov	r0, r5
 801c05c:	f7fe fca6 	bl	801a9ac <lfs_bd_read>
                if (err) {
 801c060:	2800      	cmp	r0, #0
 801c062:	d152      	bne.n	801c10a <lfs_file_relocate+0xd2>
            err = lfs_bd_prog(lfs,
 801c064:	2301      	movs	r3, #1
 801c066:	9303      	str	r3, [sp, #12]
 801c068:	f10d 021b 	add.w	r2, sp, #27
 801c06c:	9202      	str	r2, [sp, #8]
 801c06e:	9401      	str	r4, [sp, #4]
 801c070:	9a07      	ldr	r2, [sp, #28]
 801c072:	9200      	str	r2, [sp, #0]
 801c074:	462a      	mov	r2, r5
 801c076:	f105 0110 	add.w	r1, r5, #16
 801c07a:	4628      	mov	r0, r5
 801c07c:	f7ff f992 	bl	801b3a4 <lfs_bd_prog>
            if (err) {
 801c080:	bb20      	cbnz	r0, 801c0cc <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c082:	3401      	adds	r4, #1
 801c084:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 801c086:	42a3      	cmp	r3, r4
 801c088:	d945      	bls.n	801c116 <lfs_file_relocate+0xde>
            if (file->flags & LFS_F_INLINE) {
 801c08a:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 801c08c:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
 801c090:	d0d7      	beq.n	801c042 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 801c092:	88b2      	ldrh	r2, [r6, #4]
 801c094:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
 801c096:	2101      	movs	r1, #1
 801c098:	9105      	str	r1, [sp, #20]
 801c09a:	f10d 011b 	add.w	r1, sp, #27
 801c09e:	9104      	str	r1, [sp, #16]
 801c0a0:	9403      	str	r4, [sp, #12]
 801c0a2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801c0a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801c0aa:	9202      	str	r2, [sp, #8]
 801c0ac:	4a27      	ldr	r2, [pc, #156]	@ (801c14c <lfs_file_relocate+0x114>)
 801c0ae:	9201      	str	r2, [sp, #4]
 801c0b0:	1b1b      	subs	r3, r3, r4
 801c0b2:	9300      	str	r3, [sp, #0]
 801c0b4:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 801c0b8:	2200      	movs	r2, #0
 801c0ba:	f106 0108 	add.w	r1, r6, #8
 801c0be:	4628      	mov	r0, r5
 801c0c0:	f7ff f84c 	bl	801b15c <lfs_dir_getread>
                if (err) {
 801c0c4:	2800      	cmp	r0, #0
 801c0c6:	d0cd      	beq.n	801c064 <lfs_file_relocate+0x2c>
                    return err;
 801c0c8:	4607      	mov	r7, r0
 801c0ca:	e03b      	b.n	801c144 <lfs_file_relocate+0x10c>
                if (err == LFS_ERR_CORRUPT) {
 801c0cc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c0d0:	d11d      	bne.n	801c10e <lfs_file_relocate+0xd6>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801c0d2:	4b1f      	ldr	r3, [pc, #124]	@ (801c150 <lfs_file_relocate+0x118>)
 801c0d4:	9300      	str	r3, [sp, #0]
 801c0d6:	9b07      	ldr	r3, [sp, #28]
 801c0d8:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 801c0dc:	491d      	ldr	r1, [pc, #116]	@ (801c154 <lfs_file_relocate+0x11c>)
 801c0de:	481e      	ldr	r0, [pc, #120]	@ (801c158 <lfs_file_relocate+0x120>)
 801c0e0:	f00d fa68 	bl	80295b4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801c0e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c0e8:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
 801c0ea:	a907      	add	r1, sp, #28
 801c0ec:	4628      	mov	r0, r5
 801c0ee:	f7ff ff05 	bl	801befc <lfs_alloc>
        if (err) {
 801c0f2:	4607      	mov	r7, r0
 801c0f4:	bb30      	cbnz	r0, 801c144 <lfs_file_relocate+0x10c>
        err = lfs_bd_erase(lfs, nblock);
 801c0f6:	9907      	ldr	r1, [sp, #28]
 801c0f8:	4628      	mov	r0, r5
 801c0fa:	f7fe fbdd 	bl	801a8b8 <lfs_bd_erase>
        if (err) {
 801c0fe:	4607      	mov	r7, r0
 801c100:	b138      	cbz	r0, 801c112 <lfs_file_relocate+0xda>
            if (err == LFS_ERR_CORRUPT) {
 801c102:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c106:	d0e4      	beq.n	801c0d2 <lfs_file_relocate+0x9a>
 801c108:	e01c      	b.n	801c144 <lfs_file_relocate+0x10c>
                    return err;
 801c10a:	4607      	mov	r7, r0
 801c10c:	e01a      	b.n	801c144 <lfs_file_relocate+0x10c>
                return err;
 801c10e:	4607      	mov	r7, r0
 801c110:	e018      	b.n	801c144 <lfs_file_relocate+0x10c>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801c112:	2400      	movs	r4, #0
 801c114:	e7b6      	b.n	801c084 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801c116:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c11a:	69e9      	ldr	r1, [r5, #28]
 801c11c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801c11e:	f011 f9a3 	bl	802d468 <memcpy>
        file->cache.block = lfs->pcache.block;
 801c122:	692b      	ldr	r3, [r5, #16]
 801c124:	6433      	str	r3, [r6, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 801c126:	696b      	ldr	r3, [r5, #20]
 801c128:	6473      	str	r3, [r6, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801c12a:	69ab      	ldr	r3, [r5, #24]
 801c12c:	64b3      	str	r3, [r6, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801c12e:	f105 0110 	add.w	r1, r5, #16
 801c132:	4628      	mov	r0, r5
 801c134:	f7fe fc10 	bl	801a958 <lfs_cache_zero>
        file->block = nblock;
 801c138:	9b07      	ldr	r3, [sp, #28]
 801c13a:	63b3      	str	r3, [r6, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 801c13c:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 801c13e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c142:	6333      	str	r3, [r6, #48]	@ 0x30
}
 801c144:	4638      	mov	r0, r7
 801c146:	b009      	add	sp, #36	@ 0x24
 801c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c14a:	bf00      	nop
 801c14c:	fff7fc00 	.word	0xfff7fc00
 801c150:	0803606c 	.word	0x0803606c
 801c154:	080381c0 	.word	0x080381c0
 801c158:	080383d8 	.word	0x080383d8

0801c15c <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 801c15c:	b538      	push	{r3, r4, r5, lr}
 801c15e:	4605      	mov	r5, r0
 801c160:	460c      	mov	r4, r1
    file->off = file->pos;
 801c162:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c164:	63cb      	str	r3, [r1, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 801c166:	f7fe fad7 	bl	801a718 <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 801c16a:	4621      	mov	r1, r4
 801c16c:	4628      	mov	r0, r5
 801c16e:	f7ff ff63 	bl	801c038 <lfs_file_relocate>
    if (err) {
 801c172:	b918      	cbnz	r0, 801c17c <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
 801c174:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c176:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c17a:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801c17c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c180 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
 801c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c184:	b08b      	sub	sp, #44	@ 0x2c
 801c186:	4605      	mov	r5, r0
 801c188:	460f      	mov	r7, r1
 801c18a:	4616      	mov	r6, r2
 801c18c:	9305      	str	r3, [sp, #20]
 801c18e:	e04d      	b.n	801c22c <lfs_ctz_extend+0xac>
            if (size == 0) {
 801c190:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c192:	2b00      	cmp	r3, #0
 801c194:	d032      	beq.n	801c1fc <lfs_ctz_extend+0x7c>
            lfs_size_t noff = size - 1;
 801c196:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c198:	3b01      	subs	r3, #1
 801c19a:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 801c19c:	a908      	add	r1, sp, #32
 801c19e:	4628      	mov	r0, r5
 801c1a0:	f7fe fbe6 	bl	801a970 <lfs_ctz_index>
            noff = noff + 1;
 801c1a4:	9b08      	ldr	r3, [sp, #32]
 801c1a6:	3301      	adds	r3, #1
 801c1a8:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
 801c1aa:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801c1ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801c1ae:	4293      	cmp	r3, r2
 801c1b0:	d05b      	beq.n	801c26a <lfs_ctz_extend+0xea>
                for (lfs_off_t i = 0; i < noff; i++) {
 801c1b2:	2400      	movs	r4, #0
 801c1b4:	46b9      	mov	r9, r7
 801c1b6:	9f05      	ldr	r7, [sp, #20]
 801c1b8:	9b08      	ldr	r3, [sp, #32]
 801c1ba:	42a3      	cmp	r3, r4
 801c1bc:	d94a      	bls.n	801c254 <lfs_ctz_extend+0xd4>
                    err = lfs_bd_read(lfs,
 801c1be:	2201      	movs	r2, #1
 801c1c0:	9203      	str	r2, [sp, #12]
 801c1c2:	aa09      	add	r2, sp, #36	@ 0x24
 801c1c4:	9202      	str	r2, [sp, #8]
 801c1c6:	9401      	str	r4, [sp, #4]
 801c1c8:	9700      	str	r7, [sp, #0]
 801c1ca:	1b1b      	subs	r3, r3, r4
 801c1cc:	4632      	mov	r2, r6
 801c1ce:	2100      	movs	r1, #0
 801c1d0:	4628      	mov	r0, r5
 801c1d2:	f7fe fbeb 	bl	801a9ac <lfs_bd_read>
                    if (err) {
 801c1d6:	4603      	mov	r3, r0
 801c1d8:	2800      	cmp	r0, #0
 801c1da:	d139      	bne.n	801c250 <lfs_ctz_extend+0xd0>
                    err = lfs_bd_prog(lfs,
 801c1dc:	2301      	movs	r3, #1
 801c1de:	9303      	str	r3, [sp, #12]
 801c1e0:	aa09      	add	r2, sp, #36	@ 0x24
 801c1e2:	9202      	str	r2, [sp, #8]
 801c1e4:	9401      	str	r4, [sp, #4]
 801c1e6:	9a07      	ldr	r2, [sp, #28]
 801c1e8:	9200      	str	r2, [sp, #0]
 801c1ea:	4632      	mov	r2, r6
 801c1ec:	4649      	mov	r1, r9
 801c1ee:	4628      	mov	r0, r5
 801c1f0:	f7ff f8d8 	bl	801b3a4 <lfs_bd_prog>
                    if (err) {
 801c1f4:	4603      	mov	r3, r0
 801c1f6:	b948      	cbnz	r0, 801c20c <lfs_ctz_extend+0x8c>
                for (lfs_off_t i = 0; i < noff; i++) {
 801c1f8:	3401      	adds	r4, #1
 801c1fa:	e7dd      	b.n	801c1b8 <lfs_ctz_extend+0x38>
                *block = nblock;
 801c1fc:	4682      	mov	sl, r0
 801c1fe:	9b07      	ldr	r3, [sp, #28]
 801c200:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c202:	6013      	str	r3, [r2, #0]
                *off = 0;
 801c204:	2300      	movs	r3, #0
 801c206:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c208:	6013      	str	r3, [r2, #0]
                return 0;
 801c20a:	e02a      	b.n	801c262 <lfs_ctz_extend+0xe2>
                        if (err == LFS_ERR_CORRUPT) {
 801c20c:	464f      	mov	r7, r9
 801c20e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c212:	d11d      	bne.n	801c250 <lfs_ctz_extend+0xd0>
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801c214:	4b36      	ldr	r3, [pc, #216]	@ (801c2f0 <lfs_ctz_extend+0x170>)
 801c216:	9300      	str	r3, [sp, #0]
 801c218:	9b07      	ldr	r3, [sp, #28]
 801c21a:	f640 32a6 	movw	r2, #2982	@ 0xba6
 801c21e:	4935      	ldr	r1, [pc, #212]	@ (801c2f4 <lfs_ctz_extend+0x174>)
 801c220:	4835      	ldr	r0, [pc, #212]	@ (801c2f8 <lfs_ctz_extend+0x178>)
 801c222:	f00d f9c7 	bl	80295b4 <printf>
    rcache->block = LFS_BLOCK_NULL;
 801c226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c22a:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
 801c22c:	a907      	add	r1, sp, #28
 801c22e:	4628      	mov	r0, r5
 801c230:	f7ff fe64 	bl	801befc <lfs_alloc>
        if (err) {
 801c234:	2800      	cmp	r0, #0
 801c236:	d159      	bne.n	801c2ec <lfs_ctz_extend+0x16c>
            err = lfs_bd_erase(lfs, nblock);
 801c238:	9907      	ldr	r1, [sp, #28]
 801c23a:	4628      	mov	r0, r5
 801c23c:	f7fe fb3c 	bl	801a8b8 <lfs_bd_erase>
            if (err) {
 801c240:	4680      	mov	r8, r0
 801c242:	2800      	cmp	r0, #0
 801c244:	d0a4      	beq.n	801c190 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
 801c246:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c24a:	d0e3      	beq.n	801c214 <lfs_ctz_extend+0x94>
 801c24c:	4682      	mov	sl, r0
 801c24e:	e008      	b.n	801c262 <lfs_ctz_extend+0xe2>
                        return err;
 801c250:	469a      	mov	sl, r3
 801c252:	e006      	b.n	801c262 <lfs_ctz_extend+0xe2>
                *block = nblock;
 801c254:	46c2      	mov	sl, r8
 801c256:	9b07      	ldr	r3, [sp, #28]
 801c258:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c25a:	6013      	str	r3, [r2, #0]
                *off = noff;
 801c25c:	9b08      	ldr	r3, [sp, #32]
 801c25e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c260:	6013      	str	r3, [r2, #0]
}
 801c262:	4650      	mov	r0, sl
 801c264:	b00b      	add	sp, #44	@ 0x2c
 801c266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
 801c26a:	3001      	adds	r0, #1
    return __builtin_ctz(a);
 801c26c:	fa90 f9a0 	rbit	r9, r0
 801c270:	fab9 f989 	clz	r9, r9
            lfs_size_t skips = lfs_ctz(index) + 1;
 801c274:	f109 0a01 	add.w	sl, r9, #1
            lfs_block_t nhead = head;
 801c278:	9b05      	ldr	r3, [sp, #20]
 801c27a:	9309      	str	r3, [sp, #36]	@ 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
 801c27c:	2400      	movs	r4, #0
 801c27e:	46ab      	mov	fp, r5
 801c280:	e006      	b.n	801c290 <lfs_ctz_extend+0x110>
                    if (err == LFS_ERR_CORRUPT) {
 801c282:	465d      	mov	r5, fp
 801c284:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c288:	d0c4      	beq.n	801c214 <lfs_ctz_extend+0x94>
                    return err;
 801c28a:	4682      	mov	sl, r0
 801c28c:	e7e9      	b.n	801c262 <lfs_ctz_extend+0xe2>
            for (lfs_off_t i = 0; i < skips; i++) {
 801c28e:	3401      	adds	r4, #1
 801c290:	4554      	cmp	r4, sl
 801c292:	d221      	bcs.n	801c2d8 <lfs_ctz_extend+0x158>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 801c294:	00a5      	lsls	r5, r4, #2
 801c296:	2304      	movs	r3, #4
 801c298:	9303      	str	r3, [sp, #12]
 801c29a:	ab09      	add	r3, sp, #36	@ 0x24
 801c29c:	9302      	str	r3, [sp, #8]
 801c29e:	9501      	str	r5, [sp, #4]
 801c2a0:	9b07      	ldr	r3, [sp, #28]
 801c2a2:	9300      	str	r3, [sp, #0]
 801c2a4:	2301      	movs	r3, #1
 801c2a6:	4632      	mov	r2, r6
 801c2a8:	4639      	mov	r1, r7
 801c2aa:	4658      	mov	r0, fp
 801c2ac:	f7ff f87a 	bl	801b3a4 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 801c2b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
                if (err) {
 801c2b2:	2800      	cmp	r0, #0
 801c2b4:	d1e5      	bne.n	801c282 <lfs_ctz_extend+0x102>
                if (i != skips-1) {
 801c2b6:	454c      	cmp	r4, r9
 801c2b8:	d0e9      	beq.n	801c28e <lfs_ctz_extend+0x10e>
                    err = lfs_bd_read(lfs,
 801c2ba:	2304      	movs	r3, #4
 801c2bc:	9303      	str	r3, [sp, #12]
 801c2be:	a909      	add	r1, sp, #36	@ 0x24
 801c2c0:	9102      	str	r1, [sp, #8]
 801c2c2:	9501      	str	r5, [sp, #4]
 801c2c4:	9200      	str	r2, [sp, #0]
 801c2c6:	4632      	mov	r2, r6
 801c2c8:	2100      	movs	r1, #0
 801c2ca:	4658      	mov	r0, fp
 801c2cc:	f7fe fb6e 	bl	801a9ac <lfs_bd_read>
                    if (err) {
 801c2d0:	2800      	cmp	r0, #0
 801c2d2:	d0dc      	beq.n	801c28e <lfs_ctz_extend+0x10e>
                        return err;
 801c2d4:	4682      	mov	sl, r0
 801c2d6:	e7c4      	b.n	801c262 <lfs_ctz_extend+0xe2>
            *block = nblock;
 801c2d8:	46d1      	mov	r9, sl
 801c2da:	46c2      	mov	sl, r8
 801c2dc:	9b07      	ldr	r3, [sp, #28]
 801c2de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c2e0:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
 801c2e2:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801c2e6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c2e8:	6019      	str	r1, [r3, #0]
            return 0;
 801c2ea:	e7ba      	b.n	801c262 <lfs_ctz_extend+0xe2>
 801c2ec:	4682      	mov	sl, r0
 801c2ee:	e7b8      	b.n	801c262 <lfs_ctz_extend+0xe2>
 801c2f0:	0803606c 	.word	0x0803606c
 801c2f4:	080381c0 	.word	0x080381c0
 801c2f8:	080383d8 	.word	0x080383d8

0801c2fc <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 801c2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c300:	b087      	sub	sp, #28
 801c302:	4605      	mov	r5, r0
 801c304:	460c      	mov	r4, r1
 801c306:	4617      	mov	r7, r2
 801c308:	4699      	mov	r9, r3
    if ((file->flags & LFS_F_INLINE) &&
 801c30a:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c30c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c310:	d008      	beq.n	801c324 <lfs_file_flushedwrite+0x28>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 801c312:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801c314:	444b      	add	r3, r9
 801c316:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
    return (a > b) ? a : b;
 801c318:	4293      	cmp	r3, r2
 801c31a:	bf38      	it	cc
 801c31c:	4613      	movcc	r3, r2
 801c31e:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 801c320:	429a      	cmp	r2, r3
 801c322:	d32d      	bcc.n	801c380 <lfs_file_flushedwrite+0x84>
        const void *buffer, lfs_size_t size) {
 801c324:	46c8      	mov	r8, r9
    while (nsize > 0) {
 801c326:	f1b8 0f00 	cmp.w	r8, #0
 801c32a:	f000 8094 	beq.w	801c456 <lfs_file_flushedwrite+0x15a>
        if (!(file->flags & LFS_F_WRITING) ||
 801c32e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c330:	f413 3200 	ands.w	r2, r3, #131072	@ 0x20000
 801c334:	d004      	beq.n	801c340 <lfs_file_flushedwrite+0x44>
                file->off == lfs->cfg->block_size) {
 801c336:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801c338:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 801c33a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 801c33c:	4288      	cmp	r0, r1
 801c33e:	d150      	bne.n	801c3e2 <lfs_file_flushedwrite+0xe6>
            if (!(file->flags & LFS_F_INLINE)) {
 801c340:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c344:	d144      	bne.n	801c3d0 <lfs_file_flushedwrite+0xd4>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 801c346:	b90a      	cbnz	r2, 801c34c <lfs_file_flushedwrite+0x50>
 801c348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c34a:	bb1b      	cbnz	r3, 801c394 <lfs_file_flushedwrite+0x98>
                lfs_alloc_ckpoint(lfs);
 801c34c:	4628      	mov	r0, r5
 801c34e:	f7fe f9e3 	bl	801a718 <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 801c352:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801c356:	9302      	str	r3, [sp, #8]
 801c358:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801c35c:	9301      	str	r3, [sp, #4]
 801c35e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c360:	9300      	str	r3, [sp, #0]
 801c362:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c364:	462a      	mov	r2, r5
 801c366:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c36a:	4628      	mov	r0, r5
 801c36c:	f7ff ff08 	bl	801c180 <lfs_ctz_extend>
                if (err) {
 801c370:	4601      	mov	r1, r0
 801c372:	2800      	cmp	r0, #0
 801c374:	d031      	beq.n	801c3da <lfs_file_flushedwrite+0xde>
                    file->flags |= LFS_F_ERRED;
 801c376:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c378:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c37c:	6323      	str	r3, [r4, #48]	@ 0x30
                    return err;
 801c37e:	e059      	b.n	801c434 <lfs_file_flushedwrite+0x138>
        int err = lfs_file_outline(lfs, file);
 801c380:	f7ff feec 	bl	801c15c <lfs_file_outline>
        if (err) {
 801c384:	4601      	mov	r1, r0
 801c386:	2800      	cmp	r0, #0
 801c388:	d0cc      	beq.n	801c324 <lfs_file_flushedwrite+0x28>
            file->flags |= LFS_F_ERRED;
 801c38a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c38c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c390:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801c392:	e04f      	b.n	801c434 <lfs_file_flushedwrite+0x138>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801c394:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 801c398:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                            file->pos-1, &file->block, &(lfs_off_t){0});
 801c39a:	2100      	movs	r1, #0
 801c39c:	9105      	str	r1, [sp, #20]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801c39e:	a805      	add	r0, sp, #20
 801c3a0:	9003      	str	r0, [sp, #12]
 801c3a2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801c3a6:	9002      	str	r0, [sp, #8]
 801c3a8:	3b01      	subs	r3, #1
 801c3aa:	9301      	str	r3, [sp, #4]
 801c3ac:	9200      	str	r2, [sp, #0]
 801c3ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801c3b0:	4632      	mov	r2, r6
 801c3b2:	4628      	mov	r0, r5
 801c3b4:	f7ff f8ad 	bl	801b512 <lfs_ctz_find>
                    if (err) {
 801c3b8:	4601      	mov	r1, r0
 801c3ba:	b920      	cbnz	r0, 801c3c6 <lfs_file_flushedwrite+0xca>
                    lfs_cache_zero(lfs, &file->cache);
 801c3bc:	4631      	mov	r1, r6
 801c3be:	4628      	mov	r0, r5
 801c3c0:	f7fe faca 	bl	801a958 <lfs_cache_zero>
 801c3c4:	e7c2      	b.n	801c34c <lfs_file_flushedwrite+0x50>
                        file->flags |= LFS_F_ERRED;
 801c3c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c3c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c3cc:	6323      	str	r3, [r4, #48]	@ 0x30
                        return err;
 801c3ce:	e031      	b.n	801c434 <lfs_file_flushedwrite+0x138>
                file->block = LFS_BLOCK_INLINE;
 801c3d0:	f06f 0301 	mvn.w	r3, #1
 801c3d4:	63a3      	str	r3, [r4, #56]	@ 0x38
                file->off = file->pos;
 801c3d6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c3d8:	63e3      	str	r3, [r4, #60]	@ 0x3c
            file->flags |= LFS_F_WRITING;
 801c3da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c3dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c3e0:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 801c3e2:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801c3e4:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 801c3e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c3e8:	1af6      	subs	r6, r6, r3
    return (a < b) ? a : b;
 801c3ea:	4546      	cmp	r6, r8
 801c3ec:	bf28      	it	cs
 801c3ee:	4646      	movcs	r6, r8
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 801c3f0:	9603      	str	r6, [sp, #12]
 801c3f2:	9702      	str	r7, [sp, #8]
 801c3f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c3f6:	9301      	str	r3, [sp, #4]
 801c3f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c3fa:	9300      	str	r3, [sp, #0]
 801c3fc:	2301      	movs	r3, #1
 801c3fe:	462a      	mov	r2, r5
 801c400:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c404:	4628      	mov	r0, r5
 801c406:	f7fe ffcd 	bl	801b3a4 <lfs_bd_prog>
            if (err) {
 801c40a:	4601      	mov	r1, r0
 801c40c:	b1b0      	cbz	r0, 801c43c <lfs_file_flushedwrite+0x140>
                if (err == LFS_ERR_CORRUPT) {
 801c40e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c412:	d10b      	bne.n	801c42c <lfs_file_flushedwrite+0x130>
            err = lfs_file_relocate(lfs, file);
 801c414:	4621      	mov	r1, r4
 801c416:	4628      	mov	r0, r5
 801c418:	f7ff fe0e 	bl	801c038 <lfs_file_relocate>
            if (err) {
 801c41c:	4601      	mov	r1, r0
 801c41e:	2800      	cmp	r0, #0
 801c420:	d0e6      	beq.n	801c3f0 <lfs_file_flushedwrite+0xf4>
                file->flags |= LFS_F_ERRED;
 801c422:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c424:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c428:	6323      	str	r3, [r4, #48]	@ 0x30
                return err;
 801c42a:	e003      	b.n	801c434 <lfs_file_flushedwrite+0x138>
                file->flags |= LFS_F_ERRED;
 801c42c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c42e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801c432:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801c434:	4608      	mov	r0, r1
 801c436:	b007      	add	sp, #28
 801c438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
 801c43c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c43e:	4433      	add	r3, r6
 801c440:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 801c442:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801c444:	4433      	add	r3, r6
 801c446:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 801c448:	4437      	add	r7, r6
        nsize -= diff;
 801c44a:	eba8 0806 	sub.w	r8, r8, r6
        lfs_alloc_ckpoint(lfs);
 801c44e:	4628      	mov	r0, r5
 801c450:	f7fe f962 	bl	801a718 <lfs_alloc_ckpoint>
 801c454:	e767      	b.n	801c326 <lfs_file_flushedwrite+0x2a>
    return size;
 801c456:	4649      	mov	r1, r9
 801c458:	e7ec      	b.n	801c434 <lfs_file_flushedwrite+0x138>
	...

0801c45c <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801c45c:	b570      	push	{r4, r5, r6, lr}
 801c45e:	b098      	sub	sp, #96	@ 0x60
 801c460:	4605      	mov	r5, r0
 801c462:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 801c464:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c466:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c46a:	d008      	beq.n	801c47e <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
 801c46c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c470:	d102      	bne.n	801c478 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
 801c472:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c476:	640a      	str	r2, [r1, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 801c478:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c47c:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 801c47e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c480:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c484:	d068      	beq.n	801c558 <lfs_file_flush+0xfc>
        lfs_off_t pos = file->pos;
 801c486:	6b66      	ldr	r6, [r4, #52]	@ 0x34
        if (!(file->flags & LFS_F_INLINE)) {
 801c488:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801c48c:	d151      	bne.n	801c532 <lfs_file_flush+0xd6>
            lfs_file_t orig = {
 801c48e:	2254      	movs	r2, #84	@ 0x54
 801c490:	2100      	movs	r1, #0
 801c492:	a803      	add	r0, sp, #12
 801c494:	f00f fdac 	bl	802bff0 <memset>
                .ctz.head = file->ctz.head,
 801c498:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            lfs_file_t orig = {
 801c49a:	930d      	str	r3, [sp, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801c49c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            lfs_file_t orig = {
 801c49e:	930e      	str	r3, [sp, #56]	@ 0x38
 801c4a0:	2301      	movs	r3, #1
 801c4a2:	930f      	str	r3, [sp, #60]	@ 0x3c
                .pos = file->pos,
 801c4a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            lfs_file_t orig = {
 801c4a6:	9310      	str	r3, [sp, #64]	@ 0x40
 801c4a8:	f10d 0c4c 	add.w	ip, sp, #76	@ 0x4c
 801c4ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c4b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 801c4b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c4b8:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
 801c4ba:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c4bc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c4be:	429a      	cmp	r2, r3
 801c4c0:	d21a      	bcs.n	801c4f8 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 801c4c2:	2301      	movs	r3, #1
 801c4c4:	f10d 020b 	add.w	r2, sp, #11
 801c4c8:	a903      	add	r1, sp, #12
 801c4ca:	4628      	mov	r0, r5
 801c4cc:	f7ff f86a 	bl	801b5a4 <lfs_file_flushedread>
                if (res < 0) {
 801c4d0:	1e03      	subs	r3, r0, #0
 801c4d2:	db42      	blt.n	801c55a <lfs_file_flush+0xfe>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 801c4d4:	2301      	movs	r3, #1
 801c4d6:	f10d 020b 	add.w	r2, sp, #11
 801c4da:	4621      	mov	r1, r4
 801c4dc:	4628      	mov	r0, r5
 801c4de:	f7ff ff0d 	bl	801c2fc <lfs_file_flushedwrite>
                if (res < 0) {
 801c4e2:	1e03      	subs	r3, r0, #0
 801c4e4:	db39      	blt.n	801c55a <lfs_file_flush+0xfe>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 801c4e6:	682b      	ldr	r3, [r5, #0]
 801c4e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c4ec:	d0e5      	beq.n	801c4ba <lfs_file_flush+0x5e>
    rcache->block = LFS_BLOCK_NULL;
 801c4ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c4f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c4f4:	602b      	str	r3, [r5, #0]
}
 801c4f6:	e7e0      	b.n	801c4ba <lfs_file_flush+0x5e>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 801c4f8:	2301      	movs	r3, #1
 801c4fa:	462a      	mov	r2, r5
 801c4fc:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801c500:	4628      	mov	r0, r5
 801c502:	f7fe fef5 	bl	801b2f0 <lfs_bd_flush>
                if (err) {
 801c506:	4603      	mov	r3, r0
 801c508:	b1c0      	cbz	r0, 801c53c <lfs_file_flush+0xe0>
                    if (err == LFS_ERR_CORRUPT) {
 801c50a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c50e:	d124      	bne.n	801c55a <lfs_file_flush+0xfe>
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801c510:	4b13      	ldr	r3, [pc, #76]	@ (801c560 <lfs_file_flush+0x104>)
 801c512:	9300      	str	r3, [sp, #0]
 801c514:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c516:	f640 522b 	movw	r2, #3371	@ 0xd2b
 801c51a:	4912      	ldr	r1, [pc, #72]	@ (801c564 <lfs_file_flush+0x108>)
 801c51c:	4812      	ldr	r0, [pc, #72]	@ (801c568 <lfs_file_flush+0x10c>)
 801c51e:	f00d f849 	bl	80295b4 <printf>
                err = lfs_file_relocate(lfs, file);
 801c522:	4621      	mov	r1, r4
 801c524:	4628      	mov	r0, r5
 801c526:	f7ff fd87 	bl	801c038 <lfs_file_relocate>
                if (err) {
 801c52a:	4603      	mov	r3, r0
 801c52c:	2800      	cmp	r0, #0
 801c52e:	d0e3      	beq.n	801c4f8 <lfs_file_flush+0x9c>
 801c530:	e013      	b.n	801c55a <lfs_file_flush+0xfe>
            file->pos = lfs_max(file->pos, file->ctz.size);
 801c532:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    return (a > b) ? a : b;
 801c534:	42b3      	cmp	r3, r6
 801c536:	bf38      	it	cc
 801c538:	4633      	movcc	r3, r6
 801c53a:	6363      	str	r3, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 801c53c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801c53e:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 801c540:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c542:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801c544:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c546:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801c54a:	6323      	str	r3, [r4, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801c54c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c550:	6323      	str	r3, [r4, #48]	@ 0x30
        file->pos = pos;
 801c552:	6366      	str	r6, [r4, #52]	@ 0x34
    return 0;
 801c554:	2300      	movs	r3, #0
 801c556:	e000      	b.n	801c55a <lfs_file_flush+0xfe>
 801c558:	2300      	movs	r3, #0
}
 801c55a:	4618      	mov	r0, r3
 801c55c:	b018      	add	sp, #96	@ 0x60
 801c55e:	bd70      	pop	{r4, r5, r6, pc}
 801c560:	0803606c 	.word	0x0803606c
 801c564:	080381c0 	.word	0x080381c0
 801c568:	080383d8 	.word	0x080383d8

0801c56c <lfs_file_read_>:
        void *buffer, lfs_size_t size) {
 801c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c56e:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801c570:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c572:	f013 0f01 	tst.w	r3, #1
 801c576:	d00f      	beq.n	801c598 <lfs_file_read_+0x2c>
 801c578:	4605      	mov	r5, r0
 801c57a:	460c      	mov	r4, r1
 801c57c:	4616      	mov	r6, r2
    if (file->flags & LFS_F_WRITING) {
 801c57e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c582:	d002      	beq.n	801c58a <lfs_file_read_+0x1e>
        int err = lfs_file_flush(lfs, file);
 801c584:	f7ff ff6a 	bl	801c45c <lfs_file_flush>
        if (err) {
 801c588:	b928      	cbnz	r0, 801c596 <lfs_file_read_+0x2a>
    return lfs_file_flushedread(lfs, file, buffer, size);
 801c58a:	463b      	mov	r3, r7
 801c58c:	4632      	mov	r2, r6
 801c58e:	4621      	mov	r1, r4
 801c590:	4628      	mov	r0, r5
 801c592:	f7ff f807 	bl	801b5a4 <lfs_file_flushedread>
}
 801c596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 801c598:	4b03      	ldr	r3, [pc, #12]	@ (801c5a8 <lfs_file_read_+0x3c>)
 801c59a:	4a04      	ldr	r2, [pc, #16]	@ (801c5ac <lfs_file_read_+0x40>)
 801c59c:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 801c5a0:	4803      	ldr	r0, [pc, #12]	@ (801c5b0 <lfs_file_read_+0x44>)
 801c5a2:	f00c ffd3 	bl	802954c <__assert_func>
 801c5a6:	bf00      	nop
 801c5a8:	080383fc 	.word	0x080383fc
 801c5ac:	08038e34 	.word	0x08038e34
 801c5b0:	080381c0 	.word	0x080381c0

0801c5b4 <lfs_file_seek_>:
        lfs_soff_t off, int whence) {
 801c5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5b6:	b083      	sub	sp, #12
 801c5b8:	4606      	mov	r6, r0
 801c5ba:	460d      	mov	r5, r1
 801c5bc:	4614      	mov	r4, r2
    lfs_off_t npos = file->pos;
 801c5be:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
    if (whence == LFS_SEEK_SET) {
 801c5c0:	b123      	cbz	r3, 801c5cc <lfs_file_seek_+0x18>
    } else if (whence == LFS_SEEK_CUR) {
 801c5c2:	2b01      	cmp	r3, #1
 801c5c4:	d021      	beq.n	801c60a <lfs_file_seek_+0x56>
    } else if (whence == LFS_SEEK_END) {
 801c5c6:	2b02      	cmp	r3, #2
 801c5c8:	d023      	beq.n	801c612 <lfs_file_seek_+0x5e>
    lfs_off_t npos = file->pos;
 801c5ca:	463c      	mov	r4, r7
    if (npos > lfs->file_max) {
 801c5cc:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 801c5ce:	42a3      	cmp	r3, r4
 801c5d0:	d339      	bcc.n	801c646 <lfs_file_seek_+0x92>
    if (file->pos == npos) {
 801c5d2:	42bc      	cmp	r4, r7
 801c5d4:	d023      	beq.n	801c61e <lfs_file_seek_+0x6a>
        !(file->flags & LFS_F_WRITING)
 801c5d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    if (
 801c5d8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c5dc:	d10c      	bne.n	801c5f8 <lfs_file_seek_+0x44>
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 801c5de:	9701      	str	r7, [sp, #4]
 801c5e0:	a901      	add	r1, sp, #4
 801c5e2:	4630      	mov	r0, r6
 801c5e4:	f7fe f9c4 	bl	801a970 <lfs_ctz_index>
 801c5e8:	4607      	mov	r7, r0
        lfs_off_t noff = npos;
 801c5ea:	9400      	str	r4, [sp, #0]
        int nindex = lfs_ctz_index(lfs, &noff);
 801c5ec:	4669      	mov	r1, sp
 801c5ee:	4630      	mov	r0, r6
 801c5f0:	f7fe f9be 	bl	801a970 <lfs_ctz_index>
        if (oindex == nindex
 801c5f4:	4287      	cmp	r7, r0
 801c5f6:	d014      	beq.n	801c622 <lfs_file_seek_+0x6e>
    int err = lfs_file_flush(lfs, file);
 801c5f8:	4629      	mov	r1, r5
 801c5fa:	4630      	mov	r0, r6
 801c5fc:	f7ff ff2e 	bl	801c45c <lfs_file_flush>
    if (err) {
 801c600:	b908      	cbnz	r0, 801c606 <lfs_file_seek_+0x52>
    file->pos = npos;
 801c602:	636c      	str	r4, [r5, #52]	@ 0x34
    return npos;
 801c604:	4620      	mov	r0, r4
}
 801c606:	b003      	add	sp, #12
 801c608:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((lfs_soff_t)file->pos + off < 0) {
 801c60a:	42e7      	cmn	r7, r4
 801c60c:	d415      	bmi.n	801c63a <lfs_file_seek_+0x86>
            npos = file->pos + off;
 801c60e:	443c      	add	r4, r7
 801c610:	e7dc      	b.n	801c5cc <lfs_file_seek_+0x18>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 801c612:	f7fe f90e 	bl	801a832 <lfs_file_size_>
        if (res < 0) {
 801c616:	1900      	adds	r0, r0, r4
 801c618:	d412      	bmi.n	801c640 <lfs_file_seek_+0x8c>
            npos = res;
 801c61a:	4604      	mov	r4, r0
 801c61c:	e7d6      	b.n	801c5cc <lfs_file_seek_+0x18>
        return npos;
 801c61e:	4620      	mov	r0, r4
 801c620:	e7f1      	b.n	801c606 <lfs_file_seek_+0x52>
                && noff >= file->cache.off
 801c622:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801c624:	9a00      	ldr	r2, [sp, #0]
 801c626:	4293      	cmp	r3, r2
 801c628:	d8e6      	bhi.n	801c5f8 <lfs_file_seek_+0x44>
                && noff < file->cache.off + file->cache.size) {
 801c62a:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 801c62c:	440b      	add	r3, r1
 801c62e:	429a      	cmp	r2, r3
 801c630:	d2e2      	bcs.n	801c5f8 <lfs_file_seek_+0x44>
            file->pos = npos;
 801c632:	636c      	str	r4, [r5, #52]	@ 0x34
            file->off = noff;
 801c634:	63ea      	str	r2, [r5, #60]	@ 0x3c
            return npos;
 801c636:	4620      	mov	r0, r4
 801c638:	e7e5      	b.n	801c606 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801c63a:	f06f 0015 	mvn.w	r0, #21
 801c63e:	e7e2      	b.n	801c606 <lfs_file_seek_+0x52>
            return LFS_ERR_INVAL;
 801c640:	f06f 0015 	mvn.w	r0, #21
 801c644:	e7df      	b.n	801c606 <lfs_file_seek_+0x52>
        return LFS_ERR_INVAL;
 801c646:	f06f 0015 	mvn.w	r0, #21
 801c64a:	e7dc      	b.n	801c606 <lfs_file_seek_+0x52>

0801c64c <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 801c64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c650:	b082      	sub	sp, #8
 801c652:	461f      	mov	r7, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801c654:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801c656:	f013 0f02 	tst.w	r3, #2
 801c65a:	d02a      	beq.n	801c6b2 <lfs_file_write_+0x66>
 801c65c:	4605      	mov	r5, r0
 801c65e:	460c      	mov	r4, r1
 801c660:	4690      	mov	r8, r2
    if (file->flags & LFS_F_READING) {
 801c662:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c666:	d12b      	bne.n	801c6c0 <lfs_file_write_+0x74>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801c668:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c66a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 801c66e:	d004      	beq.n	801c67a <lfs_file_write_+0x2e>
 801c670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c672:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801c674:	4291      	cmp	r1, r2
 801c676:	d200      	bcs.n	801c67a <lfs_file_write_+0x2e>
        file->pos = file->ctz.size;
 801c678:	6362      	str	r2, [r4, #52]	@ 0x34
    if (file->pos + size > lfs->file_max) {
 801c67a:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801c67c:	19f1      	adds	r1, r6, r7
 801c67e:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 801c680:	4291      	cmp	r1, r2
 801c682:	d831      	bhi.n	801c6e8 <lfs_file_write_+0x9c>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801c684:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801c688:	d11f      	bne.n	801c6ca <lfs_file_write_+0x7e>
 801c68a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801c68c:	429e      	cmp	r6, r3
 801c68e:	d91c      	bls.n	801c6ca <lfs_file_write_+0x7e>
        file->pos = file->ctz.size;
 801c690:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 801c692:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c694:	428e      	cmp	r6, r1
 801c696:	d918      	bls.n	801c6ca <lfs_file_write_+0x7e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 801c698:	2300      	movs	r3, #0
 801c69a:	f88d 3007 	strb.w	r3, [sp, #7]
 801c69e:	2301      	movs	r3, #1
 801c6a0:	f10d 0207 	add.w	r2, sp, #7
 801c6a4:	4621      	mov	r1, r4
 801c6a6:	4628      	mov	r0, r5
 801c6a8:	f7ff fe28 	bl	801c2fc <lfs_file_flushedwrite>
            if (res < 0) {
 801c6ac:	2800      	cmp	r0, #0
 801c6ae:	daf0      	bge.n	801c692 <lfs_file_write_+0x46>
 801c6b0:	e017      	b.n	801c6e2 <lfs_file_write_+0x96>
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 801c6b2:	4b0f      	ldr	r3, [pc, #60]	@ (801c6f0 <lfs_file_write_+0xa4>)
 801c6b4:	4a0f      	ldr	r2, [pc, #60]	@ (801c6f4 <lfs_file_write_+0xa8>)
 801c6b6:	f640 6126 	movw	r1, #3622	@ 0xe26
 801c6ba:	480f      	ldr	r0, [pc, #60]	@ (801c6f8 <lfs_file_write_+0xac>)
 801c6bc:	f00c ff46 	bl	802954c <__assert_func>
        int err = lfs_file_flush(lfs, file);
 801c6c0:	f7ff fecc 	bl	801c45c <lfs_file_flush>
        if (err) {
 801c6c4:	2800      	cmp	r0, #0
 801c6c6:	d0cf      	beq.n	801c668 <lfs_file_write_+0x1c>
 801c6c8:	e00b      	b.n	801c6e2 <lfs_file_write_+0x96>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 801c6ca:	463b      	mov	r3, r7
 801c6cc:	4642      	mov	r2, r8
 801c6ce:	4621      	mov	r1, r4
 801c6d0:	4628      	mov	r0, r5
 801c6d2:	f7ff fe13 	bl	801c2fc <lfs_file_flushedwrite>
    if (nsize < 0) {
 801c6d6:	2800      	cmp	r0, #0
 801c6d8:	db03      	blt.n	801c6e2 <lfs_file_write_+0x96>
    file->flags &= ~LFS_F_ERRED;
 801c6da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c6dc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801c6e0:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801c6e2:	b002      	add	sp, #8
 801c6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LFS_ERR_FBIG;
 801c6e8:	f06f 001a 	mvn.w	r0, #26
 801c6ec:	e7f9      	b.n	801c6e2 <lfs_file_write_+0x96>
 801c6ee:	bf00      	nop
 801c6f0:	0803842c 	.word	0x0803842c
 801c6f4:	08038e14 	.word	0x08038e14
 801c6f8:	080381c0 	.word	0x080381c0

0801c6fc <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 801c6fc:	b500      	push	{lr}
 801c6fe:	b083      	sub	sp, #12
    lfs_size_t size = 0;
 801c700:	2300      	movs	r3, #0
 801c702:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801c704:	aa01      	add	r2, sp, #4
 801c706:	4904      	ldr	r1, [pc, #16]	@ (801c718 <lfs_fs_size_+0x1c>)
 801c708:	f7ff faf0 	bl	801bcec <lfs_fs_traverse_>
    if (err) {
 801c70c:	b900      	cbnz	r0, 801c710 <lfs_fs_size_+0x14>
        return err;
    }

    return size;
 801c70e:	9801      	ldr	r0, [sp, #4]
}
 801c710:	b003      	add	sp, #12
 801c712:	f85d fb04 	ldr.w	pc, [sp], #4
 801c716:	bf00      	nop
 801c718:	0801a8ad 	.word	0x0801a8ad

0801c71c <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 801c71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c720:	b082      	sub	sp, #8
 801c722:	4680      	mov	r8, r0
 801c724:	460e      	mov	r6, r1
 801c726:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
 801c728:	2300      	movs	r3, #0
 801c72a:	6193      	str	r3, [r2, #24]
    pdir->tail[1] = 1;
 801c72c:	2501      	movs	r5, #1
 801c72e:	61d5      	str	r5, [r2, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801c730:	4b27      	ldr	r3, [pc, #156]	@ (801c7d0 <lfs_fs_pred+0xb4>)
 801c732:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c736:	ab02      	add	r3, sp, #8
 801c738:	e903 0003 	stmdb	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801c73c:	46a9      	mov	r9, r5
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c73e:	69a7      	ldr	r7, [r4, #24]
 801c740:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801c744:	d035      	beq.n	801c7b2 <lfs_fs_pred+0x96>
 801c746:	69e3      	ldr	r3, [r4, #28]
 801c748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c74c:	d02f      	beq.n	801c7ae <lfs_fs_pred+0x92>
 801c74e:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(pdir->tail)) {
 801c750:	bb8b      	cbnz	r3, 801c7b6 <lfs_fs_pred+0x9a>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 801c752:	f104 0a18 	add.w	sl, r4, #24
 801c756:	4669      	mov	r1, sp
 801c758:	4650      	mov	r0, sl
 801c75a:	f7fd ff61 	bl	801a620 <lfs_pair_issync>
 801c75e:	b9a8      	cbnz	r0, 801c78c <lfs_fs_pred+0x70>
        if (tortoise_i == tortoise_period) {
 801c760:	454d      	cmp	r5, r9
 801c762:	d01d      	beq.n	801c7a0 <lfs_fs_pred+0x84>
        tortoise_i += 1;
 801c764:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801c766:	6833      	ldr	r3, [r6, #0]
 801c768:	42bb      	cmp	r3, r7
 801c76a:	d027      	beq.n	801c7bc <lfs_fs_pred+0xa0>
 801c76c:	69e1      	ldr	r1, [r4, #28]
 801c76e:	6872      	ldr	r2, [r6, #4]
 801c770:	4291      	cmp	r1, r2
 801c772:	d027      	beq.n	801c7c4 <lfs_fs_pred+0xa8>
 801c774:	42ba      	cmp	r2, r7
 801c776:	d027      	beq.n	801c7c8 <lfs_fs_pred+0xac>
 801c778:	4299      	cmp	r1, r3
 801c77a:	d027      	beq.n	801c7cc <lfs_fs_pred+0xb0>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801c77c:	4652      	mov	r2, sl
 801c77e:	4621      	mov	r1, r4
 801c780:	4640      	mov	r0, r8
 801c782:	f7ff faa5 	bl	801bcd0 <lfs_dir_fetch>
        if (err) {
 801c786:	2800      	cmp	r0, #0
 801c788:	d0d9      	beq.n	801c73e <lfs_fs_pred+0x22>
 801c78a:	e018      	b.n	801c7be <lfs_fs_pred+0xa2>
            LFS_WARN("Cycle detected in tail list");
 801c78c:	4b11      	ldr	r3, [pc, #68]	@ (801c7d4 <lfs_fs_pred+0xb8>)
 801c78e:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 801c792:	4911      	ldr	r1, [pc, #68]	@ (801c7d8 <lfs_fs_pred+0xbc>)
 801c794:	4811      	ldr	r0, [pc, #68]	@ (801c7dc <lfs_fs_pred+0xc0>)
 801c796:	f00c ff0d 	bl	80295b4 <printf>
            return LFS_ERR_CORRUPT;
 801c79a:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 801c79e:	e00e      	b.n	801c7be <lfs_fs_pred+0xa2>
            tortoise[0] = pdir->tail[0];
 801c7a0:	9700      	str	r7, [sp, #0]
            tortoise[1] = pdir->tail[1];
 801c7a2:	69e3      	ldr	r3, [r4, #28]
 801c7a4:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 801c7a6:	ea4f 0949 	mov.w	r9, r9, lsl #1
            tortoise_i = 0;
 801c7aa:	2500      	movs	r5, #0
 801c7ac:	e7da      	b.n	801c764 <lfs_fs_pred+0x48>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801c7ae:	2301      	movs	r3, #1
 801c7b0:	e7ce      	b.n	801c750 <lfs_fs_pred+0x34>
 801c7b2:	2301      	movs	r3, #1
 801c7b4:	e7cc      	b.n	801c750 <lfs_fs_pred+0x34>
    return LFS_ERR_NOENT;
 801c7b6:	f06f 0001 	mvn.w	r0, #1
 801c7ba:	e000      	b.n	801c7be <lfs_fs_pred+0xa2>
            return 0;
 801c7bc:	2000      	movs	r0, #0
}
 801c7be:	b002      	add	sp, #8
 801c7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return 0;
 801c7c4:	2000      	movs	r0, #0
 801c7c6:	e7fa      	b.n	801c7be <lfs_fs_pred+0xa2>
 801c7c8:	2000      	movs	r0, #0
 801c7ca:	e7f8      	b.n	801c7be <lfs_fs_pred+0xa2>
 801c7cc:	2000      	movs	r0, #0
 801c7ce:	e7f6      	b.n	801c7be <lfs_fs_pred+0xa2>
 801c7d0:	08035334 	.word	0x08035334
 801c7d4:	0803606c 	.word	0x0803606c
 801c7d8:	080381c0 	.word	0x080381c0
 801c7dc:	08038380 	.word	0x08038380

0801c7e0 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 801c7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7e2:	b085      	sub	sp, #20
 801c7e4:	460c      	mov	r4, r1
 801c7e6:	4616      	mov	r6, r2
 801c7e8:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 801c7ea:	9303      	str	r3, [sp, #12]
 801c7ec:	9202      	str	r2, [sp, #8]
 801c7ee:	684b      	ldr	r3, [r1, #4]
 801c7f0:	9301      	str	r3, [sp, #4]
 801c7f2:	680b      	ldr	r3, [r1, #0]
 801c7f4:	9300      	str	r3, [sp, #0]
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	4602      	mov	r2, r0
 801c7fa:	f100 0110 	add.w	r1, r0, #16
 801c7fe:	f7fe fdd1 	bl	801b3a4 <lfs_bd_prog>
    if (err) {
 801c802:	4607      	mov	r7, r0
 801c804:	b110      	cbz	r0, 801c80c <lfs_dir_commitprog+0x2c>
}
 801c806:	4638      	mov	r0, r7
 801c808:	b005      	add	sp, #20
 801c80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
 801c80c:	462a      	mov	r2, r5
 801c80e:	4631      	mov	r1, r6
 801c810:	68e0      	ldr	r0, [r4, #12]
 801c812:	f002 fcdf 	bl	801f1d4 <lfs_crc>
 801c816:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 801c818:	6863      	ldr	r3, [r4, #4]
 801c81a:	442b      	add	r3, r5
 801c81c:	6063      	str	r3, [r4, #4]
    return 0;
 801c81e:	e7f2      	b.n	801c806 <lfs_dir_commitprog+0x26>

0801c820 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 801c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c824:	b087      	sub	sp, #28
 801c826:	4614      	mov	r4, r2
 801c828:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
 801c82a:	f342 0309 	sbfx	r3, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c82e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c832:	bf14      	ite	ne
 801c834:	4690      	movne	r8, r2
 801c836:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
 801c83a:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 801c83e:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
 801c842:	684b      	ldr	r3, [r1, #4]
 801c844:	444b      	add	r3, r9
 801c846:	694a      	ldr	r2, [r1, #20]
 801c848:	4293      	cmp	r3, r2
 801c84a:	d841      	bhi.n	801c8d0 <lfs_dir_commitattr+0xb0>
 801c84c:	4605      	mov	r5, r0
 801c84e:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 801c850:	f024 4b00 	bic.w	fp, r4, #2147483648	@ 0x80000000
 801c854:	688b      	ldr	r3, [r1, #8]
 801c856:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
 801c85a:	ba1b      	rev	r3, r3
 801c85c:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 801c85e:	2304      	movs	r3, #4
 801c860:	aa05      	add	r2, sp, #20
 801c862:	f7ff ffbd 	bl	801c7e0 <lfs_dir_commitprog>
    if (err) {
 801c866:	4682      	mov	sl, r0
 801c868:	bb60      	cbnz	r0, 801c8c4 <lfs_dir_commitattr+0xa4>
    if (!(tag & 0x80000000)) {
 801c86a:	2c00      	cmp	r4, #0
 801c86c:	da21      	bge.n	801c8b2 <lfs_dir_commitattr+0x92>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801c86e:	2400      	movs	r4, #0
 801c870:	4544      	cmp	r4, r8
 801c872:	d225      	bcs.n	801c8c0 <lfs_dir_commitattr+0xa0>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 801c874:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
 801c878:	6839      	ldr	r1, [r7, #0]
 801c87a:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
 801c87c:	2001      	movs	r0, #1
 801c87e:	9003      	str	r0, [sp, #12]
 801c880:	f10d 0013 	add.w	r0, sp, #19
 801c884:	9002      	str	r0, [sp, #8]
 801c886:	4422      	add	r2, r4
 801c888:	9201      	str	r2, [sp, #4]
 801c88a:	9100      	str	r1, [sp, #0]
 801c88c:	3b04      	subs	r3, #4
 801c88e:	462a      	mov	r2, r5
 801c890:	2100      	movs	r1, #0
 801c892:	4628      	mov	r0, r5
 801c894:	f7fe f88a 	bl	801a9ac <lfs_bd_read>
            if (err) {
 801c898:	4603      	mov	r3, r0
 801c89a:	b9b8      	cbnz	r0, 801c8cc <lfs_dir_commitattr+0xac>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 801c89c:	2301      	movs	r3, #1
 801c89e:	f10d 0213 	add.w	r2, sp, #19
 801c8a2:	4631      	mov	r1, r6
 801c8a4:	4628      	mov	r0, r5
 801c8a6:	f7ff ff9b 	bl	801c7e0 <lfs_dir_commitprog>
            if (err) {
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	b970      	cbnz	r0, 801c8cc <lfs_dir_commitattr+0xac>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 801c8ae:	3401      	adds	r4, #1
 801c8b0:	e7de      	b.n	801c870 <lfs_dir_commitattr+0x50>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 801c8b2:	4643      	mov	r3, r8
 801c8b4:	463a      	mov	r2, r7
 801c8b6:	4631      	mov	r1, r6
 801c8b8:	4628      	mov	r0, r5
 801c8ba:	f7ff ff91 	bl	801c7e0 <lfs_dir_commitprog>
        if (err) {
 801c8be:	b950      	cbnz	r0, 801c8d6 <lfs_dir_commitattr+0xb6>
    commit->ptag = tag & 0x7fffffff;
 801c8c0:	f8c6 b008 	str.w	fp, [r6, #8]
}
 801c8c4:	4650      	mov	r0, sl
 801c8c6:	b007      	add	sp, #28
 801c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return err;
 801c8cc:	469a      	mov	sl, r3
 801c8ce:	e7f9      	b.n	801c8c4 <lfs_dir_commitattr+0xa4>
        return LFS_ERR_NOSPC;
 801c8d0:	f06f 0a1b 	mvn.w	sl, #27
 801c8d4:	e7f6      	b.n	801c8c4 <lfs_dir_commitattr+0xa4>
            return err;
 801c8d6:	4682      	mov	sl, r0
 801c8d8:	e7f4      	b.n	801c8c4 <lfs_dir_commitattr+0xa4>

0801c8da <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 801c8da:	b508      	push	{r3, lr}
 801c8dc:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 801c8de:	460a      	mov	r2, r1
 801c8e0:	6841      	ldr	r1, [r0, #4]
 801c8e2:	6800      	ldr	r0, [r0, #0]
 801c8e4:	f7ff ff9c 	bl	801c820 <lfs_dir_commitattr>
}
 801c8e8:	bd08      	pop	{r3, pc}
	...

0801c8ec <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 801c8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8f0:	b08b      	sub	sp, #44	@ 0x2c
 801c8f2:	4607      	mov	r7, r0
 801c8f4:	460e      	mov	r6, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801c8f6:	684b      	ldr	r3, [r1, #4]
    const lfs_off_t end = lfs_alignup(
 801c8f8:	3314      	adds	r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 801c8fa:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 801c8fc:	6a51      	ldr	r1, [r2, #36]	@ 0x24
            lfs->cfg->prog_size);
 801c8fe:	6a12      	ldr	r2, [r2, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801c900:	428b      	cmp	r3, r1
 801c902:	bf94      	ite	ls
 801c904:	eb02 0803 	addls.w	r8, r2, r3
 801c908:	eb02 0801 	addhi.w	r8, r2, r1
 801c90c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    return a - (a % alignment);
 801c910:	fbb8 f3f2 	udiv	r3, r8, r2
 801c914:	fb02 8313 	mls	r3, r2, r3, r8
 801c918:	eba8 0803 	sub.w	r8, r8, r3
    uint32_t crc1 = 0;
 801c91c:	2300      	movs	r3, #0
 801c91e:	9305      	str	r3, [sp, #20]
    lfs_off_t off1 = 0;
 801c920:	469b      	mov	fp, r3
    while (commit->off < end) {
 801c922:	e03c      	b.n	801c99e <lfs_dir_commitcrc+0xb2>
            int err = lfs_bd_read(lfs,
 801c924:	2201      	movs	r2, #1
 801c926:	9203      	str	r2, [sp, #12]
 801c928:	f10d 021b 	add.w	r2, sp, #27
 801c92c:	9202      	str	r2, [sp, #8]
 801c92e:	9401      	str	r4, [sp, #4]
 801c930:	6832      	ldr	r2, [r6, #0]
 801c932:	9200      	str	r2, [sp, #0]
 801c934:	463a      	mov	r2, r7
 801c936:	2100      	movs	r1, #0
 801c938:	4638      	mov	r0, r7
 801c93a:	f7fe f837 	bl	801a9ac <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 801c93e:	4603      	mov	r3, r0
 801c940:	b118      	cbz	r0, 801c94a <lfs_dir_commitcrc+0x5e>
 801c942:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c946:	f040 80c0 	bne.w	801caca <lfs_dir_commitcrc+0x1de>
                    .size = lfs->cfg->prog_size,
 801c94a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c94c:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 801c94e:	9307      	str	r3, [sp, #28]
 801c950:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c954:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 801c956:	aa08      	add	r2, sp, #32
 801c958:	9203      	str	r2, [sp, #12]
 801c95a:	9302      	str	r3, [sp, #8]
 801c95c:	9401      	str	r4, [sp, #4]
 801c95e:	6832      	ldr	r2, [r6, #0]
 801c960:	9200      	str	r2, [sp, #0]
 801c962:	463a      	mov	r2, r7
 801c964:	2100      	movs	r1, #0
 801c966:	4638      	mov	r0, r7
 801c968:	f7fe fea0 	bl	801b6ac <lfs_bd_crc>
                if (err && err != LFS_ERR_CORRUPT) {
 801c96c:	4603      	mov	r3, r0
 801c96e:	b118      	cbz	r0, 801c978 <lfs_dir_commitcrc+0x8c>
 801c970:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801c974:	f040 80a9 	bne.w	801caca <lfs_dir_commitcrc+0x1de>
                err = lfs_dir_commitattr(lfs, commit,
 801c978:	ab07      	add	r3, sp, #28
 801c97a:	4a59      	ldr	r2, [pc, #356]	@ (801cae0 <lfs_dir_commitcrc+0x1f4>)
 801c97c:	4631      	mov	r1, r6
 801c97e:	4638      	mov	r0, r7
 801c980:	f7ff ff4e 	bl	801c820 <lfs_dir_commitattr>
                if (err) {
 801c984:	4603      	mov	r3, r0
 801c986:	b348      	cbz	r0, 801c9dc <lfs_dir_commitcrc+0xf0>
 801c988:	e09f      	b.n	801caca <lfs_dir_commitcrc+0x1de>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801c98a:	2300      	movs	r3, #0
 801c98c:	463a      	mov	r2, r7
 801c98e:	4651      	mov	r1, sl
 801c990:	4638      	mov	r0, r7
 801c992:	f7fe fd81 	bl	801b498 <lfs_bd_sync>
            if (err) {
 801c996:	4603      	mov	r3, r0
 801c998:	2800      	cmp	r0, #0
 801c99a:	f040 8096 	bne.w	801caca <lfs_dir_commitcrc+0x1de>
    while (commit->off < end) {
 801c99e:	6874      	ldr	r4, [r6, #4]
 801c9a0:	4544      	cmp	r4, r8
 801c9a2:	d268      	bcs.n	801ca76 <lfs_dir_commitcrc+0x18a>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 801c9a4:	eba8 0304 	sub.w	r3, r8, r4
 801c9a8:	3b04      	subs	r3, #4
                + (commit->off+sizeof(lfs_tag_t)));
 801c9aa:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801c9ae:	4293      	cmp	r3, r2
 801c9b0:	bf94      	ite	ls
 801c9b2:	18e4      	addls	r4, r4, r3
 801c9b4:	18a4      	addhi	r4, r4, r2
        lfs_off_t noff = (
 801c9b6:	3404      	adds	r4, #4
        if (noff < end) {
 801c9b8:	4544      	cmp	r4, r8
 801c9ba:	d204      	bcs.n	801c9c6 <lfs_dir_commitcrc+0xda>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 801c9bc:	f1a8 0314 	sub.w	r3, r8, #20
    return (a < b) ? a : b;
 801c9c0:	429c      	cmp	r4, r3
 801c9c2:	bf28      	it	cs
 801c9c4:	461c      	movcs	r4, r3
        uint8_t eperturb = (uint8_t)-1;
 801c9c6:	23ff      	movs	r3, #255	@ 0xff
 801c9c8:	f88d 301b 	strb.w	r3, [sp, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 801c9cc:	4544      	cmp	r4, r8
 801c9ce:	d305      	bcc.n	801c9dc <lfs_dir_commitcrc+0xf0>
 801c9d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c9d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c9d4:	6a1b      	ldr	r3, [r3, #32]
 801c9d6:	1ad2      	subs	r2, r2, r3
 801c9d8:	42a2      	cmp	r2, r4
 801c9da:	d2a3      	bcs.n	801c924 <lfs_dir_commitcrc+0x38>
        lfs_tag_t ntag = LFS_MKTAG(
 801c9dc:	f89d 201b 	ldrb.w	r2, [sp, #27]
 801c9e0:	43d2      	mvns	r2, r2
 801c9e2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 801c9e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801c9ea:	6873      	ldr	r3, [r6, #4]
 801c9ec:	1ae5      	subs	r5, r4, r3
 801c9ee:	3d04      	subs	r5, #4
 801c9f0:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 801c9f4:	f445 257f 	orr.w	r5, r5, #1044480	@ 0xff000
 801c9f8:	f445 6540 	orr.w	r5, r5, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 801c9fc:	68b3      	ldr	r3, [r6, #8]
 801c9fe:	406b      	eors	r3, r5
    return __builtin_bswap32(a);
 801ca00:	ba1b      	rev	r3, r3
 801ca02:	9307      	str	r3, [sp, #28]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 801ca04:	f10d 091c 	add.w	r9, sp, #28
 801ca08:	2204      	movs	r2, #4
 801ca0a:	4649      	mov	r1, r9
 801ca0c:	68f0      	ldr	r0, [r6, #12]
 801ca0e:	f002 fbe1 	bl	801f1d4 <lfs_crc>
 801ca12:	60f0      	str	r0, [r6, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 801ca14:	9008      	str	r0, [sp, #32]
        int err = lfs_bd_prog(lfs,
 801ca16:	f107 0a10 	add.w	sl, r7, #16
 801ca1a:	2308      	movs	r3, #8
 801ca1c:	9303      	str	r3, [sp, #12]
 801ca1e:	f8cd 9008 	str.w	r9, [sp, #8]
 801ca22:	6873      	ldr	r3, [r6, #4]
 801ca24:	9301      	str	r3, [sp, #4]
 801ca26:	6833      	ldr	r3, [r6, #0]
 801ca28:	9300      	str	r3, [sp, #0]
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	463a      	mov	r2, r7
 801ca2e:	4651      	mov	r1, sl
 801ca30:	4638      	mov	r0, r7
 801ca32:	f7fe fcb7 	bl	801b3a4 <lfs_bd_prog>
        if (err) {
 801ca36:	4603      	mov	r3, r0
 801ca38:	2800      	cmp	r0, #0
 801ca3a:	d146      	bne.n	801caca <lfs_dir_commitcrc+0x1de>
        if (off1 == 0) {
 801ca3c:	f1bb 0f00 	cmp.w	fp, #0
 801ca40:	d104      	bne.n	801ca4c <lfs_dir_commitcrc+0x160>
            off1 = commit->off + sizeof(lfs_tag_t);
 801ca42:	6873      	ldr	r3, [r6, #4]
 801ca44:	f103 0b04 	add.w	fp, r3, #4
            crc1 = commit->crc;
 801ca48:	68f3      	ldr	r3, [r6, #12]
 801ca4a:	9305      	str	r3, [sp, #20]
        commit->off = noff;
 801ca4c:	6074      	str	r4, [r6, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 801ca4e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ca52:	43db      	mvns	r3, r3
 801ca54:	061b      	lsls	r3, r3, #24
 801ca56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801ca5a:	406b      	eors	r3, r5
 801ca5c:	60b3      	str	r3, [r6, #8]
        commit->crc = 0xffffffff;
 801ca5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ca62:	60f3      	str	r3, [r6, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 801ca64:	4544      	cmp	r4, r8
 801ca66:	d290      	bcs.n	801c98a <lfs_dir_commitcrc+0x9e>
 801ca68:	697b      	ldr	r3, [r7, #20]
 801ca6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ca6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801ca6e:	4413      	add	r3, r2
 801ca70:	42a3      	cmp	r3, r4
 801ca72:	d894      	bhi.n	801c99e <lfs_dir_commitcrc+0xb2>
 801ca74:	e789      	b.n	801c98a <lfs_dir_commitcrc+0x9e>
    lfs_off_t off = commit->begin;
 801ca76:	6933      	ldr	r3, [r6, #16]
    uint32_t crc = 0xffffffff;
 801ca78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ca7c:	9209      	str	r2, [sp, #36]	@ 0x24
    int err = lfs_bd_crc(lfs,
 801ca7e:	aa09      	add	r2, sp, #36	@ 0x24
 801ca80:	9203      	str	r2, [sp, #12]
 801ca82:	ebab 0203 	sub.w	r2, fp, r3
 801ca86:	9202      	str	r2, [sp, #8]
 801ca88:	9301      	str	r3, [sp, #4]
 801ca8a:	6833      	ldr	r3, [r6, #0]
 801ca8c:	9300      	str	r3, [sp, #0]
 801ca8e:	f10b 0304 	add.w	r3, fp, #4
 801ca92:	463a      	mov	r2, r7
 801ca94:	2100      	movs	r1, #0
 801ca96:	4638      	mov	r0, r7
 801ca98:	f7fe fe08 	bl	801b6ac <lfs_bd_crc>
    if (err) {
 801ca9c:	4603      	mov	r3, r0
 801ca9e:	b9a0      	cbnz	r0, 801caca <lfs_dir_commitcrc+0x1de>
    if (crc != crc1) {
 801caa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caa2:	9a05      	ldr	r2, [sp, #20]
 801caa4:	4293      	cmp	r3, r2
 801caa6:	d114      	bne.n	801cad2 <lfs_dir_commitcrc+0x1e6>
    err = lfs_bd_crc(lfs,
 801caa8:	ab09      	add	r3, sp, #36	@ 0x24
 801caaa:	9303      	str	r3, [sp, #12]
 801caac:	2304      	movs	r3, #4
 801caae:	9302      	str	r3, [sp, #8]
 801cab0:	f8cd b004 	str.w	fp, [sp, #4]
 801cab4:	6832      	ldr	r2, [r6, #0]
 801cab6:	9200      	str	r2, [sp, #0]
 801cab8:	463a      	mov	r2, r7
 801caba:	2100      	movs	r1, #0
 801cabc:	4638      	mov	r0, r7
 801cabe:	f7fe fdf5 	bl	801b6ac <lfs_bd_crc>
    if (err) {
 801cac2:	4603      	mov	r3, r0
 801cac4:	b908      	cbnz	r0, 801caca <lfs_dir_commitcrc+0x1de>
    if (crc != 0) {
 801cac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cac8:	b932      	cbnz	r2, 801cad8 <lfs_dir_commitcrc+0x1ec>
}
 801caca:	4618      	mov	r0, r3
 801cacc:	b00b      	add	sp, #44	@ 0x2c
 801cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
 801cad2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cad6:	e7f8      	b.n	801caca <lfs_dir_commitcrc+0x1de>
        return LFS_ERR_CORRUPT;
 801cad8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801cadc:	e7f5      	b.n	801caca <lfs_dir_commitcrc+0x1de>
 801cade:	bf00      	nop
 801cae0:	5ffffc08 	.word	0x5ffffc08

0801cae4 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801cae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cae8:	b09b      	sub	sp, #108	@ 0x6c
 801caea:	4605      	mov	r5, r0
 801caec:	460c      	mov	r4, r1
 801caee:	4616      	mov	r6, r2
 801caf0:	461f      	mov	r7, r3
 801caf2:	f8bd 8094 	ldrh.w	r8, [sp, #148]	@ 0x94
 801caf6:	f8bd a098 	ldrh.w	sl, [sp, #152]	@ 0x98
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 801cafa:	f7fd fe7f 	bl	801a7fc <lfs_dir_needsrelocation>
    dir->rev += 1;
 801cafe:	68a3      	ldr	r3, [r4, #8]
 801cb00:	3301      	adds	r3, #1
 801cb02:	60a3      	str	r3, [r4, #8]
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 801cb04:	4681      	mov	r9, r0
 801cb06:	2800      	cmp	r0, #0
 801cb08:	d034      	beq.n	801cb74 <lfs_dir_compact+0x90>
 801cb0a:	2300      	movs	r3, #0
 801cb0c:	9314      	str	r3, [sp, #80]	@ 0x50
 801cb0e:	2301      	movs	r3, #1
 801cb10:	9315      	str	r3, [sp, #84]	@ 0x54
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cb12:	6823      	ldr	r3, [r4, #0]
 801cb14:	b373      	cbz	r3, 801cb74 <lfs_dir_compact+0x90>
 801cb16:	6862      	ldr	r2, [r4, #4]
 801cb18:	2a01      	cmp	r2, #1
 801cb1a:	d02b      	beq.n	801cb74 <lfs_dir_compact+0x90>
 801cb1c:	2b01      	cmp	r3, #1
 801cb1e:	d029      	beq.n	801cb74 <lfs_dir_compact+0x90>
 801cb20:	b342      	cbz	r2, 801cb74 <lfs_dir_compact+0x90>
    rcache->block = LFS_BLOCK_NULL;
 801cb22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cb26:	612b      	str	r3, [r5, #16]
        if (!tired) {
 801cb28:	f1b9 0f00 	cmp.w	r9, #0
 801cb2c:	f000 810d 	beq.w	801cd4a <lfs_dir_compact+0x266>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801cb30:	2300      	movs	r3, #0
 801cb32:	9318      	str	r3, [sp, #96]	@ 0x60
 801cb34:	2301      	movs	r3, #1
 801cb36:	9319      	str	r3, [sp, #100]	@ 0x64
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cb38:	6823      	ldr	r3, [r4, #0]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f000 810f 	beq.w	801cd5e <lfs_dir_compact+0x27a>
 801cb40:	6862      	ldr	r2, [r4, #4]
 801cb42:	2a01      	cmp	r2, #1
 801cb44:	f000 810b 	beq.w	801cd5e <lfs_dir_compact+0x27a>
 801cb48:	2b01      	cmp	r3, #1
 801cb4a:	f000 8108 	beq.w	801cd5e <lfs_dir_compact+0x27a>
 801cb4e:	2a00      	cmp	r2, #0
 801cb50:	f000 8105 	beq.w	801cd5e <lfs_dir_compact+0x27a>
        int err = lfs_alloc(lfs, &dir->pair[1]);
 801cb54:	1d21      	adds	r1, r4, #4
 801cb56:	4628      	mov	r0, r5
 801cb58:	f7ff f9d0 	bl	801befc <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 801cb5c:	4603      	mov	r3, r0
 801cb5e:	b330      	cbz	r0, 801cbae <lfs_dir_compact+0xca>
 801cb60:	f110 0f1c 	cmn.w	r0, #28
 801cb64:	d11f      	bne.n	801cba6 <lfs_dir_compact+0xc2>
 801cb66:	f1b9 0f00 	cmp.w	r9, #0
 801cb6a:	d01c      	beq.n	801cba6 <lfs_dir_compact+0xc2>
        relocated = true;
 801cb6c:	46cb      	mov	fp, r9
        tired = false;
 801cb6e:	f04f 0900 	mov.w	r9, #0
 801cb72:	e001      	b.n	801cb78 <lfs_dir_compact+0x94>
    bool relocated = false;
 801cb74:	f04f 0b00 	mov.w	fp, #0
                .block = dir->pair[1],
 801cb78:	6863      	ldr	r3, [r4, #4]
            struct lfs_commit commit = {
 801cb7a:	930e      	str	r3, [sp, #56]	@ 0x38
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cb80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cb84:	9210      	str	r2, [sp, #64]	@ 0x40
 801cb86:	9211      	str	r2, [sp, #68]	@ 0x44
 801cb88:	9312      	str	r3, [sp, #72]	@ 0x48
                .end = (lfs->cfg->metadata_max ?
 801cb8a:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801cb8c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801cb8e:	b19b      	cbz	r3, 801cbb8 <lfs_dir_compact+0xd4>
 801cb90:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 801cb92:	9313      	str	r3, [sp, #76]	@ 0x4c
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 801cb94:	6861      	ldr	r1, [r4, #4]
 801cb96:	4628      	mov	r0, r5
 801cb98:	f7fd fe8e 	bl	801a8b8 <lfs_bd_erase>
            if (err) {
 801cb9c:	4603      	mov	r3, r0
 801cb9e:	b170      	cbz	r0, 801cbbe <lfs_dir_compact+0xda>
                if (err == LFS_ERR_CORRUPT) {
 801cba0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cba4:	d0bd      	beq.n	801cb22 <lfs_dir_compact+0x3e>
}
 801cba6:	4618      	mov	r0, r3
 801cba8:	b01b      	add	sp, #108	@ 0x6c
 801cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tired = false;
 801cbae:	f04f 0900 	mov.w	r9, #0
        relocated = true;
 801cbb2:	f04f 0b01 	mov.w	fp, #1
 801cbb6:	e7df      	b.n	801cb78 <lfs_dir_compact+0x94>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801cbb8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801cbba:	3b08      	subs	r3, #8
 801cbbc:	e7e9      	b.n	801cb92 <lfs_dir_compact+0xae>
            err = lfs_dir_commitprog(lfs, &commit,
 801cbbe:	2304      	movs	r3, #4
 801cbc0:	f104 0208 	add.w	r2, r4, #8
 801cbc4:	a90e      	add	r1, sp, #56	@ 0x38
 801cbc6:	4628      	mov	r0, r5
 801cbc8:	f7ff fe0a 	bl	801c7e0 <lfs_dir_commitprog>
            if (err) {
 801cbcc:	4603      	mov	r3, r0
 801cbce:	b118      	cbz	r0, 801cbd8 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 801cbd0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cbd4:	d1e7      	bne.n	801cba6 <lfs_dir_compact+0xc2>
 801cbd6:	e7a4      	b.n	801cb22 <lfs_dir_compact+0x3e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801cbd8:	9516      	str	r5, [sp, #88]	@ 0x58
 801cbda:	ab0e      	add	r3, sp, #56	@ 0x38
 801cbdc:	9317      	str	r3, [sp, #92]	@ 0x5c
            err = lfs_dir_traverse(lfs,
 801cbde:	ab16      	add	r3, sp, #88	@ 0x58
 801cbe0:	9308      	str	r3, [sp, #32]
 801cbe2:	4b65      	ldr	r3, [pc, #404]	@ (801cd78 <lfs_dir_compact+0x294>)
 801cbe4:	9307      	str	r3, [sp, #28]
 801cbe6:	f1c8 0300 	rsb	r3, r8, #0
 801cbea:	b21b      	sxth	r3, r3
 801cbec:	9306      	str	r3, [sp, #24]
 801cbee:	f8cd a014 	str.w	sl, [sp, #20]
 801cbf2:	f8cd 8010 	str.w	r8, [sp, #16]
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	9203      	str	r2, [sp, #12]
 801cbfa:	4b60      	ldr	r3, [pc, #384]	@ (801cd7c <lfs_dir_compact+0x298>)
 801cbfc:	9302      	str	r3, [sp, #8]
 801cbfe:	9701      	str	r7, [sp, #4]
 801cc00:	9600      	str	r6, [sp, #0]
 801cc02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cc06:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801cc08:	4628      	mov	r0, r5
 801cc0a:	f7fe f911 	bl	801ae30 <lfs_dir_traverse>
            if (err) {
 801cc0e:	4603      	mov	r3, r0
 801cc10:	b118      	cbz	r0, 801cc1a <lfs_dir_compact+0x136>
                if (err == LFS_ERR_CORRUPT) {
 801cc12:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cc16:	d1c6      	bne.n	801cba6 <lfs_dir_compact+0xc2>
 801cc18:	e783      	b.n	801cb22 <lfs_dir_compact+0x3e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cc1a:	69a2      	ldr	r2, [r4, #24]
 801cc1c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801cc20:	d02c      	beq.n	801cc7c <lfs_dir_compact+0x198>
 801cc22:	69e2      	ldr	r2, [r4, #28]
 801cc24:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801cc28:	d026      	beq.n	801cc78 <lfs_dir_compact+0x194>
            if (!lfs_pair_isnull(dir->tail)) {
 801cc2a:	f013 0f01 	tst.w	r3, #1
 801cc2e:	d027      	beq.n	801cc80 <lfs_dir_compact+0x19c>
            lfs_gstate_t delta = {0};
 801cc30:	2300      	movs	r3, #0
 801cc32:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cc34:	930c      	str	r3, [sp, #48]	@ 0x30
 801cc36:	930d      	str	r3, [sp, #52]	@ 0x34
            if (!relocated) {
 801cc38:	f1bb 0f00 	cmp.w	fp, #0
 801cc3c:	d033      	beq.n	801cca6 <lfs_dir_compact+0x1c2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801cc3e:	f105 0148 	add.w	r1, r5, #72	@ 0x48
 801cc42:	a80b      	add	r0, sp, #44	@ 0x2c
 801cc44:	f7fd fd10 	bl	801a668 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801cc48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cc4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801cc4e:	f023 0303 	bic.w	r3, r3, #3
 801cc52:	930b      	str	r3, [sp, #44]	@ 0x2c
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801cc54:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cc56:	4621      	mov	r1, r4
 801cc58:	4628      	mov	r0, r5
 801cc5a:	f7fe f859 	bl	801ad10 <lfs_dir_getgstate>
            if (err) {
 801cc5e:	4603      	mov	r3, r0
 801cc60:	2800      	cmp	r0, #0
 801cc62:	d1a0      	bne.n	801cba6 <lfs_dir_compact+0xc2>
    for (int i = 0; i < 3; i++) {
 801cc64:	2b02      	cmp	r3, #2
 801cc66:	dc29      	bgt.n	801ccbc <lfs_dir_compact+0x1d8>
        if (((uint32_t*)a)[i] != 0) {
 801cc68:	aa1a      	add	r2, sp, #104	@ 0x68
 801cc6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801cc6e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 801cc72:	bb92      	cbnz	r2, 801ccda <lfs_dir_compact+0x1f6>
    for (int i = 0; i < 3; i++) {
 801cc74:	3301      	adds	r3, #1
 801cc76:	e7f5      	b.n	801cc64 <lfs_dir_compact+0x180>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801cc78:	2301      	movs	r3, #1
 801cc7a:	e7d6      	b.n	801cc2a <lfs_dir_compact+0x146>
 801cc7c:	2301      	movs	r3, #1
 801cc7e:	e7d4      	b.n	801cc2a <lfs_dir_compact+0x146>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 801cc80:	7de2      	ldrb	r2, [r4, #23]
 801cc82:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 801cc86:	f104 0318 	add.w	r3, r4, #24
 801cc8a:	493d      	ldr	r1, [pc, #244]	@ (801cd80 <lfs_dir_compact+0x29c>)
 801cc8c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 801cc90:	a90e      	add	r1, sp, #56	@ 0x38
 801cc92:	4628      	mov	r0, r5
 801cc94:	f7ff fdc4 	bl	801c820 <lfs_dir_commitattr>
                if (err) {
 801cc98:	4603      	mov	r3, r0
 801cc9a:	2800      	cmp	r0, #0
 801cc9c:	d0c8      	beq.n	801cc30 <lfs_dir_compact+0x14c>
                    if (err == LFS_ERR_CORRUPT) {
 801cc9e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801cca2:	d180      	bne.n	801cba6 <lfs_dir_compact+0xc2>
 801cca4:	e73d      	b.n	801cb22 <lfs_dir_compact+0x3e>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 801cca6:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 801ccaa:	a80b      	add	r0, sp, #44	@ 0x2c
 801ccac:	f7fd fcdc 	bl	801a668 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801ccb0:	f105 0130 	add.w	r1, r5, #48	@ 0x30
 801ccb4:	a80b      	add	r0, sp, #44	@ 0x2c
 801ccb6:	f7fd fcd7 	bl	801a668 <lfs_gstate_xor>
 801ccba:	e7c0      	b.n	801cc3e <lfs_dir_compact+0x15a>
    return true;
 801ccbc:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
 801ccbe:	b973      	cbnz	r3, 801ccde <lfs_dir_compact+0x1fa>
                err = lfs_dir_commitattr(lfs, &commit,
 801ccc0:	ab0b      	add	r3, sp, #44	@ 0x2c
 801ccc2:	4a30      	ldr	r2, [pc, #192]	@ (801cd84 <lfs_dir_compact+0x2a0>)
 801ccc4:	a90e      	add	r1, sp, #56	@ 0x38
 801ccc6:	4628      	mov	r0, r5
 801ccc8:	f7ff fdaa 	bl	801c820 <lfs_dir_commitattr>
                if (err) {
 801cccc:	4603      	mov	r3, r0
 801ccce:	b130      	cbz	r0, 801ccde <lfs_dir_compact+0x1fa>
                    if (err == LFS_ERR_CORRUPT) {
 801ccd0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ccd4:	f47f af67 	bne.w	801cba6 <lfs_dir_compact+0xc2>
 801ccd8:	e723      	b.n	801cb22 <lfs_dir_compact+0x3e>
            return false;
 801ccda:	2300      	movs	r3, #0
 801ccdc:	e7ef      	b.n	801ccbe <lfs_dir_compact+0x1da>
            err = lfs_dir_commitcrc(lfs, &commit);
 801ccde:	a90e      	add	r1, sp, #56	@ 0x38
 801cce0:	4628      	mov	r0, r5
 801cce2:	f7ff fe03 	bl	801c8ec <lfs_dir_commitcrc>
            if (err) {
 801cce6:	4603      	mov	r3, r0
 801cce8:	b120      	cbz	r0, 801ccf4 <lfs_dir_compact+0x210>
                if (err == LFS_ERR_CORRUPT) {
 801ccea:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801ccee:	f47f af5a 	bne.w	801cba6 <lfs_dir_compact+0xc2>
 801ccf2:	e716      	b.n	801cb22 <lfs_dir_compact+0x3e>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801ccf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ccf6:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 801ccf8:	6a12      	ldr	r2, [r2, #32]
 801ccfa:	fbb3 f1f2 	udiv	r1, r3, r2
 801ccfe:	fb02 3311 	mls	r3, r2, r1, r3
 801cd02:	b9db      	cbnz	r3, 801cd3c <lfs_dir_compact+0x258>
    lfs_block_t t = pair[0];
 801cd04:	6823      	ldr	r3, [r4, #0]
    pair[0] = pair[1];
 801cd06:	6862      	ldr	r2, [r4, #4]
 801cd08:	6022      	str	r2, [r4, #0]
    pair[1] = t;
 801cd0a:	6063      	str	r3, [r4, #4]
            dir->count = end - begin;
 801cd0c:	ebaa 0808 	sub.w	r8, sl, r8
 801cd10:	f8a4 8014 	strh.w	r8, [r4, #20]
            dir->off = commit.off;
 801cd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cd16:	60e3      	str	r3, [r4, #12]
            dir->etag = commit.ptag;
 801cd18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cd1a:	6123      	str	r3, [r4, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 801cd1c:	2200      	movs	r2, #0
 801cd1e:	64aa      	str	r2, [r5, #72]	@ 0x48
 801cd20:	64ea      	str	r2, [r5, #76]	@ 0x4c
 801cd22:	652a      	str	r2, [r5, #80]	@ 0x50
            if (!relocated) {
 801cd24:	f1bb 0f00 	cmp.w	fp, #0
 801cd28:	d106      	bne.n	801cd38 <lfs_dir_compact+0x254>
                lfs->gdisk = lfs->gstate;
 801cd2a:	f105 033c 	add.w	r3, r5, #60	@ 0x3c
 801cd2e:	3530      	adds	r5, #48	@ 0x30
 801cd30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801cd34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 801cd38:	465b      	mov	r3, fp
 801cd3a:	e734      	b.n	801cba6 <lfs_dir_compact+0xc2>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801cd3c:	4b12      	ldr	r3, [pc, #72]	@ (801cd88 <lfs_dir_compact+0x2a4>)
 801cd3e:	4a13      	ldr	r2, [pc, #76]	@ (801cd8c <lfs_dir_compact+0x2a8>)
 801cd40:	f640 0106 	movw	r1, #2054	@ 0x806
 801cd44:	4812      	ldr	r0, [pc, #72]	@ (801cd90 <lfs_dir_compact+0x2ac>)
 801cd46:	f00c fc01 	bl	802954c <__assert_func>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 801cd4a:	4b12      	ldr	r3, [pc, #72]	@ (801cd94 <lfs_dir_compact+0x2b0>)
 801cd4c:	9300      	str	r3, [sp, #0]
 801cd4e:	6863      	ldr	r3, [r4, #4]
 801cd50:	f640 0218 	movw	r2, #2072	@ 0x818
 801cd54:	490e      	ldr	r1, [pc, #56]	@ (801cd90 <lfs_dir_compact+0x2ac>)
 801cd56:	4810      	ldr	r0, [pc, #64]	@ (801cd98 <lfs_dir_compact+0x2b4>)
 801cd58:	f00c fc2c 	bl	80295b4 <printf>
 801cd5c:	e6e8      	b.n	801cb30 <lfs_dir_compact+0x4c>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 801cd5e:	4b0d      	ldr	r3, [pc, #52]	@ (801cd94 <lfs_dir_compact+0x2b0>)
 801cd60:	9300      	str	r3, [sp, #0]
 801cd62:	6863      	ldr	r3, [r4, #4]
 801cd64:	f640 021d 	movw	r2, #2077	@ 0x81d
 801cd68:	4909      	ldr	r1, [pc, #36]	@ (801cd90 <lfs_dir_compact+0x2ac>)
 801cd6a:	480c      	ldr	r0, [pc, #48]	@ (801cd9c <lfs_dir_compact+0x2b8>)
 801cd6c:	f00c fc22 	bl	80295b4 <printf>
            return LFS_ERR_NOSPC;
 801cd70:	f06f 031b 	mvn.w	r3, #27
 801cd74:	e717      	b.n	801cba6 <lfs_dir_compact+0xc2>
 801cd76:	bf00      	nop
 801cd78:	0801c8db 	.word	0x0801c8db
 801cd7c:	400ffc00 	.word	0x400ffc00
 801cd80:	000ffc08 	.word	0x000ffc08
 801cd84:	7ffffc0c 	.word	0x7ffffc0c
 801cd88:	0803845c 	.word	0x0803845c
 801cd8c:	08038e90 	.word	0x08038e90
 801cd90:	080381c0 	.word	0x080381c0
 801cd94:	0803606c 	.word	0x0803606c
 801cd98:	080383d8 	.word	0x080383d8
 801cd9c:	08038484 	.word	0x08038484

0801cda0 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 801cda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cda4:	b08d      	sub	sp, #52	@ 0x34
 801cda6:	4605      	mov	r5, r0
 801cda8:	460c      	mov	r4, r1
 801cdaa:	4691      	mov	r9, r2
 801cdac:	461e      	mov	r6, r3
 801cdae:	f8bd 8054 	ldrh.w	r8, [sp, #84]	@ 0x54
    int err = lfs_dir_alloc(lfs, &tail);
 801cdb2:	a904      	add	r1, sp, #16
 801cdb4:	f7ff f8fa 	bl	801bfac <lfs_dir_alloc>
    if (err) {
 801cdb8:	4607      	mov	r7, r0
 801cdba:	b118      	cbz	r0, 801cdc4 <lfs_dir_split+0x24>
}
 801cdbc:	4638      	mov	r0, r7
 801cdbe:	b00d      	add	sp, #52	@ 0x34
 801cdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tail.split = dir->split;
 801cdc4:	7de3      	ldrb	r3, [r4, #23]
 801cdc6:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 801cdca:	69a3      	ldr	r3, [r4, #24]
 801cdcc:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 801cdce:	69e3      	ldr	r3, [r4, #28]
 801cdd0:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 801cdd2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801cdd6:	9302      	str	r3, [sp, #8]
 801cdd8:	f8cd 8004 	str.w	r8, [sp, #4]
 801cddc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cdde:	9300      	str	r3, [sp, #0]
 801cde0:	4633      	mov	r3, r6
 801cde2:	464a      	mov	r2, r9
 801cde4:	a904      	add	r1, sp, #16
 801cde6:	4628      	mov	r0, r5
 801cde8:	f7ff fe7c 	bl	801cae4 <lfs_dir_compact>
    if (res < 0) {
 801cdec:	2800      	cmp	r0, #0
 801cdee:	db17      	blt.n	801ce20 <lfs_dir_split+0x80>
    dir->tail[0] = tail.pair[0];
 801cdf0:	9904      	ldr	r1, [sp, #16]
 801cdf2:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
 801cdf4:	9a05      	ldr	r2, [sp, #20]
 801cdf6:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 801cdf8:	2301      	movs	r3, #1
 801cdfa:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cdfc:	6823      	ldr	r3, [r4, #0]
 801cdfe:	6a28      	ldr	r0, [r5, #32]
 801ce00:	4283      	cmp	r3, r0
 801ce02:	d007      	beq.n	801ce14 <lfs_dir_split+0x74>
 801ce04:	6866      	ldr	r6, [r4, #4]
 801ce06:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801ce08:	42a6      	cmp	r6, r4
 801ce0a:	d003      	beq.n	801ce14 <lfs_dir_split+0x74>
 801ce0c:	42a3      	cmp	r3, r4
 801ce0e:	d001      	beq.n	801ce14 <lfs_dir_split+0x74>
 801ce10:	42b0      	cmp	r0, r6
 801ce12:	d1d3      	bne.n	801cdbc <lfs_dir_split+0x1c>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 801ce14:	f1b8 0f00 	cmp.w	r8, #0
 801ce18:	d1d0      	bne.n	801cdbc <lfs_dir_split+0x1c>
        lfs->root[0] = tail.pair[0];
 801ce1a:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
 801ce1c:	626a      	str	r2, [r5, #36]	@ 0x24
 801ce1e:	e7cd      	b.n	801cdbc <lfs_dir_split+0x1c>
        return res;
 801ce20:	4607      	mov	r7, r0
 801ce22:	e7cb      	b.n	801cdbc <lfs_dir_split+0x1c>

0801ce24 <lfs_dir_splittingcompact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce28:	b091      	sub	sp, #68	@ 0x44
 801ce2a:	4607      	mov	r7, r0
 801ce2c:	4615      	mov	r5, r2
 801ce2e:	4699      	mov	r9, r3
 801ce30:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
 801ce34:	f8bd b06c 	ldrh.w	fp, [sp, #108]	@ 0x6c
 801ce38:	f8bd 6070 	ldrh.w	r6, [sp, #112]	@ 0x70
 801ce3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ce3e:	e04c      	b.n	801ceda <lfs_dir_splittingcompact+0xb6>
                    && size <= lfs_min(
 801ce40:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 801ce42:	6a08      	ldr	r0, [r1, #32]
    return lfs_aligndown(a + alignment-1, alignment);
 801ce44:	4403      	add	r3, r0
 801ce46:	3b01      	subs	r3, #1
    return a - (a % alignment);
 801ce48:	fbb3 f1f0 	udiv	r1, r3, r0
 801ce4c:	fb00 3111 	mls	r1, r0, r1, r3
 801ce50:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 801ce52:	4293      	cmp	r3, r2
 801ce54:	bf28      	it	cs
 801ce56:	4613      	movcs	r3, r2
                    && size <= lfs_min(
 801ce58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ce5a:	429a      	cmp	r2, r3
 801ce5c:	d92d      	bls.n	801ceba <lfs_dir_splittingcompact+0x96>
            split = split + ((end - split) / 2);
 801ce5e:	eb04 0458 	add.w	r4, r4, r8, lsr #1
        while (end - split > 1) {
 801ce62:	eba6 0804 	sub.w	r8, r6, r4
 801ce66:	f1b8 0f01 	cmp.w	r8, #1
 801ce6a:	d926      	bls.n	801ceba <lfs_dir_splittingcompact+0x96>
            lfs_size_t size = 0;
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	920d      	str	r2, [sp, #52]	@ 0x34
            int err = lfs_dir_traverse(lfs,
 801ce70:	b2a1      	uxth	r1, r4
 801ce72:	ab0d      	add	r3, sp, #52	@ 0x34
 801ce74:	9308      	str	r3, [sp, #32]
 801ce76:	4b4d      	ldr	r3, [pc, #308]	@ (801cfac <lfs_dir_splittingcompact+0x188>)
 801ce78:	9307      	str	r3, [sp, #28]
 801ce7a:	424b      	negs	r3, r1
 801ce7c:	b21b      	sxth	r3, r3
 801ce7e:	9306      	str	r3, [sp, #24]
 801ce80:	9605      	str	r6, [sp, #20]
 801ce82:	9104      	str	r1, [sp, #16]
 801ce84:	9203      	str	r2, [sp, #12]
 801ce86:	4b4a      	ldr	r3, [pc, #296]	@ (801cfb0 <lfs_dir_splittingcompact+0x18c>)
 801ce88:	9302      	str	r3, [sp, #8]
 801ce8a:	f8cd 9004 	str.w	r9, [sp, #4]
 801ce8e:	9500      	str	r5, [sp, #0]
 801ce90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ce94:	4651      	mov	r1, sl
 801ce96:	4638      	mov	r0, r7
 801ce98:	f7fd ffca 	bl	801ae30 <lfs_dir_traverse>
            if (err) {
 801ce9c:	4603      	mov	r3, r0
 801ce9e:	2800      	cmp	r0, #0
 801cea0:	d15b      	bne.n	801cf5a <lfs_dir_splittingcompact+0x136>
            if (end - split < 0xff
 801cea2:	f1b8 0ffe 	cmp.w	r8, #254	@ 0xfe
 801cea6:	d8da      	bhi.n	801ce5e <lfs_dir_splittingcompact+0x3a>
                        lfs->cfg->block_size - 40,
 801cea8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801ceaa:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
                    && size <= lfs_min(
 801ceac:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
                            (lfs->cfg->metadata_max
 801ceb0:	6d48      	ldr	r0, [r1, #84]	@ 0x54
                    && size <= lfs_min(
 801ceb2:	2800      	cmp	r0, #0
 801ceb4:	d0c4      	beq.n	801ce40 <lfs_dir_splittingcompact+0x1c>
 801ceb6:	0843      	lsrs	r3, r0, #1
 801ceb8:	e7c3      	b.n	801ce42 <lfs_dir_splittingcompact+0x1e>
        if (split == begin) {
 801ceba:	455c      	cmp	r4, fp
 801cebc:	d022      	beq.n	801cf04 <lfs_dir_splittingcompact+0xe0>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801cebe:	b2a4      	uxth	r4, r4
 801cec0:	9602      	str	r6, [sp, #8]
 801cec2:	9401      	str	r4, [sp, #4]
 801cec4:	f8cd a000 	str.w	sl, [sp]
 801cec8:	464b      	mov	r3, r9
 801ceca:	462a      	mov	r2, r5
 801cecc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cece:	4638      	mov	r0, r7
 801ced0:	f7ff ff66 	bl	801cda0 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 801ced4:	4603      	mov	r3, r0
 801ced6:	b910      	cbnz	r0, 801cede <lfs_dir_splittingcompact+0xba>
            end = split;
 801ced8:	4626      	mov	r6, r4
        lfs_size_t split = begin;
 801ceda:	465c      	mov	r4, fp
        while (end - split > 1) {
 801cedc:	e7c1      	b.n	801ce62 <lfs_dir_splittingcompact+0x3e>
        if (err && err != LFS_ERR_NOSPC) {
 801cede:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 801cee2:	f110 0f1c 	cmn.w	r0, #28
 801cee6:	d138      	bne.n	801cf5a <lfs_dir_splittingcompact+0x136>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 801cee8:	4b32      	ldr	r3, [pc, #200]	@ (801cfb4 <lfs_dir_splittingcompact+0x190>)
 801ceea:	9301      	str	r3, [sp, #4]
 801ceec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cef0:	9300      	str	r3, [sp, #0]
 801cef2:	f8d8 3000 	ldr.w	r3, [r8]
 801cef6:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 801cefa:	492f      	ldr	r1, [pc, #188]	@ (801cfb8 <lfs_dir_splittingcompact+0x194>)
 801cefc:	482f      	ldr	r0, [pc, #188]	@ (801cfbc <lfs_dir_splittingcompact+0x198>)
 801cefe:	f00c fb59 	bl	80295b4 <printf>
            break;
 801cf02:	e001      	b.n	801cf08 <lfs_dir_splittingcompact+0xe4>
 801cf04:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
    if (lfs_dir_needsrelocation(lfs, dir)
 801cf08:	4641      	mov	r1, r8
 801cf0a:	4638      	mov	r0, r7
 801cf0c:	f7fd fc76 	bl	801a7fc <lfs_dir_needsrelocation>
 801cf10:	b1b8      	cbz	r0, 801cf42 <lfs_dir_splittingcompact+0x11e>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801cf12:	2300      	movs	r3, #0
 801cf14:	930e      	str	r3, [sp, #56]	@ 0x38
 801cf16:	2301      	movs	r3, #1
 801cf18:	930f      	str	r3, [sp, #60]	@ 0x3c
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801cf1a:	f8d8 2000 	ldr.w	r2, [r8]
 801cf1e:	b132      	cbz	r2, 801cf2e <lfs_dir_splittingcompact+0x10a>
 801cf20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cf24:	2b01      	cmp	r3, #1
 801cf26:	d002      	beq.n	801cf2e <lfs_dir_splittingcompact+0x10a>
 801cf28:	2a01      	cmp	r2, #1
 801cf2a:	d000      	beq.n	801cf2e <lfs_dir_splittingcompact+0x10a>
 801cf2c:	b94b      	cbnz	r3, 801cf42 <lfs_dir_splittingcompact+0x11e>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 801cf2e:	4638      	mov	r0, r7
 801cf30:	f7ff fbe4 	bl	801c6fc <lfs_fs_size_>
        if (size < 0) {
 801cf34:	1e03      	subs	r3, r0, #0
 801cf36:	db10      	blt.n	801cf5a <lfs_dir_splittingcompact+0x136>
        if (lfs->block_count - size > lfs->block_count/8) {
 801cf38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801cf3a:	1ad3      	subs	r3, r2, r3
 801cf3c:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 801cf40:	d80f      	bhi.n	801cf62 <lfs_dir_splittingcompact+0x13e>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801cf42:	9602      	str	r6, [sp, #8]
 801cf44:	f8cd b004 	str.w	fp, [sp, #4]
 801cf48:	f8cd a000 	str.w	sl, [sp]
 801cf4c:	464b      	mov	r3, r9
 801cf4e:	462a      	mov	r2, r5
 801cf50:	4641      	mov	r1, r8
 801cf52:	4638      	mov	r0, r7
 801cf54:	f7ff fdc6 	bl	801cae4 <lfs_dir_compact>
 801cf58:	4603      	mov	r3, r0
}
 801cf5a:	4618      	mov	r0, r3
 801cf5c:	b011      	add	sp, #68	@ 0x44
 801cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801cf62:	4b14      	ldr	r3, [pc, #80]	@ (801cfb4 <lfs_dir_splittingcompact+0x190>)
 801cf64:	9300      	str	r3, [sp, #0]
 801cf66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cf6a:	f640 0286 	movw	r2, #2182	@ 0x886
 801cf6e:	4912      	ldr	r1, [pc, #72]	@ (801cfb8 <lfs_dir_splittingcompact+0x194>)
 801cf70:	4813      	ldr	r0, [pc, #76]	@ (801cfc0 <lfs_dir_splittingcompact+0x19c>)
 801cf72:	f00c fb1f 	bl	80295b4 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801cf76:	9602      	str	r6, [sp, #8]
 801cf78:	f8cd b004 	str.w	fp, [sp, #4]
 801cf7c:	f8cd a000 	str.w	sl, [sp]
 801cf80:	464b      	mov	r3, r9
 801cf82:	462a      	mov	r2, r5
 801cf84:	4641      	mov	r1, r8
 801cf86:	4638      	mov	r0, r7
 801cf88:	f7ff ff0a 	bl	801cda0 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 801cf8c:	4603      	mov	r3, r0
 801cf8e:	b150      	cbz	r0, 801cfa6 <lfs_dir_splittingcompact+0x182>
 801cf90:	f110 0f1c 	cmn.w	r0, #28
 801cf94:	d1e1      	bne.n	801cf5a <lfs_dir_splittingcompact+0x136>
                LFS_WARN("Unable to expand superblock");
 801cf96:	4b07      	ldr	r3, [pc, #28]	@ (801cfb4 <lfs_dir_splittingcompact+0x190>)
 801cf98:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801cf9c:	4906      	ldr	r1, [pc, #24]	@ (801cfb8 <lfs_dir_splittingcompact+0x194>)
 801cf9e:	4809      	ldr	r0, [pc, #36]	@ (801cfc4 <lfs_dir_splittingcompact+0x1a0>)
 801cfa0:	f00c fb08 	bl	80295b4 <printf>
 801cfa4:	e7cd      	b.n	801cf42 <lfs_dir_splittingcompact+0x11e>
                end = 1;
 801cfa6:	2601      	movs	r6, #1
 801cfa8:	e7cb      	b.n	801cf42 <lfs_dir_splittingcompact+0x11e>
 801cfaa:	bf00      	nop
 801cfac:	0801a7e1 	.word	0x0801a7e1
 801cfb0:	400ffc00 	.word	0x400ffc00
 801cfb4:	0803606c 	.word	0x0803606c
 801cfb8:	080381c0 	.word	0x080381c0
 801cfbc:	080384bc 	.word	0x080384bc
 801cfc0:	080384ec 	.word	0x080384ec
 801cfc4:	0803851c 	.word	0x0803851c

0801cfc8 <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 801cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfcc:	b09b      	sub	sp, #108	@ 0x6c
 801cfce:	4607      	mov	r7, r0
 801cfd0:	460e      	mov	r6, r1
 801cfd2:	4691      	mov	r9, r2
 801cfd4:	461d      	mov	r5, r3
 801cfd6:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
    for (int i = 0; i < attrcount; i++) {
 801cfda:	2300      	movs	r3, #0
    bool hasdelete = false;
 801cfdc:	469c      	mov	ip, r3
    for (int i = 0; i < attrcount; i++) {
 801cfde:	e003      	b.n	801cfe8 <lfs_dir_relocatingcommit+0x20>
            dir->count += 1;
 801cfe0:	8ab2      	ldrh	r2, [r6, #20]
 801cfe2:	3201      	adds	r2, #1
 801cfe4:	82b2      	strh	r2, [r6, #20]
    for (int i = 0; i < attrcount; i++) {
 801cfe6:	3301      	adds	r3, #1
 801cfe8:	4543      	cmp	r3, r8
 801cfea:	da2d      	bge.n	801d048 <lfs_dir_relocatingcommit+0x80>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801cfec:	00d8      	lsls	r0, r3, #3
 801cfee:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801cff2:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801cff6:	0d11      	lsrs	r1, r2, #20
 801cff8:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801cffc:	f240 4e01 	movw	lr, #1025	@ 0x401
 801d000:	4572      	cmp	r2, lr
 801d002:	d0ed      	beq.n	801cfe0 <lfs_dir_relocatingcommit+0x18>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 801d004:	f240 4eff 	movw	lr, #1279	@ 0x4ff
 801d008:	4572      	cmp	r2, lr
 801d00a:	d00f      	beq.n	801d02c <lfs_dir_relocatingcommit+0x64>
    return (tag & 0x70000000) >> 20;
 801d00c:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 801d010:	f5b1 6fc0 	cmp.w	r1, #1536	@ 0x600
 801d014:	d1e7      	bne.n	801cfe6 <lfs_dir_relocatingcommit+0x1e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 801d016:	6862      	ldr	r2, [r4, #4]
 801d018:	6812      	ldr	r2, [r2, #0]
 801d01a:	61b2      	str	r2, [r6, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801d01c:	6862      	ldr	r2, [r4, #4]
 801d01e:	6852      	ldr	r2, [r2, #4]
 801d020:	61f2      	str	r2, [r6, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801d022:	582a      	ldr	r2, [r5, r0]
 801d024:	f3c2 5200 	ubfx	r2, r2, #20, #1
 801d028:	75f2      	strb	r2, [r6, #23]
            lfs_pair_fromle32(dir->tail);
 801d02a:	e7dc      	b.n	801cfe6 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d02c:	8ab2      	ldrh	r2, [r6, #20]
 801d02e:	b122      	cbz	r2, 801d03a <lfs_dir_relocatingcommit+0x72>
            dir->count -= 1;
 801d030:	3a01      	subs	r2, #1
 801d032:	82b2      	strh	r2, [r6, #20]
            hasdelete = true;
 801d034:	f04f 0c01 	mov.w	ip, #1
 801d038:	e7d5      	b.n	801cfe6 <lfs_dir_relocatingcommit+0x1e>
            LFS_ASSERT(dir->count > 0);
 801d03a:	4ba0      	ldr	r3, [pc, #640]	@ (801d2bc <lfs_dir_relocatingcommit+0x2f4>)
 801d03c:	4aa0      	ldr	r2, [pc, #640]	@ (801d2c0 <lfs_dir_relocatingcommit+0x2f8>)
 801d03e:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 801d042:	48a0      	ldr	r0, [pc, #640]	@ (801d2c4 <lfs_dir_relocatingcommit+0x2fc>)
 801d044:	f00c fa82 	bl	802954c <__assert_func>
    if (hasdelete && dir->count == 0) {
 801d048:	f1bc 0f00 	cmp.w	ip, #0
 801d04c:	d01b      	beq.n	801d086 <lfs_dir_relocatingcommit+0xbe>
 801d04e:	8ab3      	ldrh	r3, [r6, #20]
 801d050:	b9cb      	cbnz	r3, 801d086 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d052:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d054:	b15b      	cbz	r3, 801d06e <lfs_dir_relocatingcommit+0xa6>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 801d056:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d058:	4631      	mov	r1, r6
 801d05a:	4638      	mov	r0, r7
 801d05c:	f7ff fb5e 	bl	801c71c <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801d060:	4682      	mov	sl, r0
 801d062:	b158      	cbz	r0, 801d07c <lfs_dir_relocatingcommit+0xb4>
 801d064:	f110 0f02 	cmn.w	r0, #2
 801d068:	f040 8159 	bne.w	801d31e <lfs_dir_relocatingcommit+0x356>
 801d06c:	e00b      	b.n	801d086 <lfs_dir_relocatingcommit+0xbe>
        LFS_ASSERT(pdir);
 801d06e:	4b96      	ldr	r3, [pc, #600]	@ (801d2c8 <lfs_dir_relocatingcommit+0x300>)
 801d070:	4a93      	ldr	r2, [pc, #588]	@ (801d2c0 <lfs_dir_relocatingcommit+0x2f8>)
 801d072:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 801d076:	4893      	ldr	r0, [pc, #588]	@ (801d2c4 <lfs_dir_relocatingcommit+0x2fc>)
 801d078:	f00c fa68 	bl	802954c <__assert_func>
        if (err != LFS_ERR_NOENT && pdir->split) {
 801d07c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d07e:	7ddb      	ldrb	r3, [r3, #23]
 801d080:	2b00      	cmp	r3, #0
 801d082:	f040 80bf 	bne.w	801d204 <lfs_dir_relocatingcommit+0x23c>
    if (dir->erased) {
 801d086:	7db4      	ldrb	r4, [r6, #22]
 801d088:	2c00      	cmp	r4, #0
 801d08a:	d02e      	beq.n	801d0ea <lfs_dir_relocatingcommit+0x122>
            .block = dir->pair[0],
 801d08c:	6833      	ldr	r3, [r6, #0]
        struct lfs_commit commit = {
 801d08e:	9310      	str	r3, [sp, #64]	@ 0x40
            .off = dir->off,
 801d090:	68f3      	ldr	r3, [r6, #12]
        struct lfs_commit commit = {
 801d092:	9311      	str	r3, [sp, #68]	@ 0x44
            .ptag = dir->etag,
 801d094:	6932      	ldr	r2, [r6, #16]
        struct lfs_commit commit = {
 801d096:	9212      	str	r2, [sp, #72]	@ 0x48
 801d098:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d09c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d09e:	9314      	str	r3, [sp, #80]	@ 0x50
            .end = (lfs->cfg->metadata_max ?
 801d0a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d0a2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	d03c      	beq.n	801d122 <lfs_dir_relocatingcommit+0x15a>
 801d0a8:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 801d0aa:	9315      	str	r3, [sp, #84]	@ 0x54
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801d0ac:	9718      	str	r7, [sp, #96]	@ 0x60
 801d0ae:	ab10      	add	r3, sp, #64	@ 0x40
 801d0b0:	9319      	str	r3, [sp, #100]	@ 0x64
        int err = lfs_dir_traverse(lfs,
 801d0b2:	ab18      	add	r3, sp, #96	@ 0x60
 801d0b4:	9308      	str	r3, [sp, #32]
 801d0b6:	4b85      	ldr	r3, [pc, #532]	@ (801d2cc <lfs_dir_relocatingcommit+0x304>)
 801d0b8:	9307      	str	r3, [sp, #28]
 801d0ba:	2300      	movs	r3, #0
 801d0bc:	9306      	str	r3, [sp, #24]
 801d0be:	9305      	str	r3, [sp, #20]
 801d0c0:	9304      	str	r3, [sp, #16]
 801d0c2:	9303      	str	r3, [sp, #12]
 801d0c4:	9302      	str	r3, [sp, #8]
 801d0c6:	f8cd 8004 	str.w	r8, [sp, #4]
 801d0ca:	9500      	str	r5, [sp, #0]
 801d0cc:	6933      	ldr	r3, [r6, #16]
 801d0ce:	68f2      	ldr	r2, [r6, #12]
 801d0d0:	4631      	mov	r1, r6
 801d0d2:	4638      	mov	r0, r7
 801d0d4:	f7fd feac 	bl	801ae30 <lfs_dir_traverse>
        if (err) {
 801d0d8:	4682      	mov	sl, r0
 801d0da:	b328      	cbz	r0, 801d128 <lfs_dir_relocatingcommit+0x160>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d0dc:	f110 0f1c 	cmn.w	r0, #28
 801d0e0:	d003      	beq.n	801d0ea <lfs_dir_relocatingcommit+0x122>
 801d0e2:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d0e6:	f040 811a 	bne.w	801d31e <lfs_dir_relocatingcommit+0x356>
    rcache->block = LFS_BLOCK_NULL;
 801d0ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d0ee:	613b      	str	r3, [r7, #16]
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 801d0f0:	8ab3      	ldrh	r3, [r6, #20]
 801d0f2:	9302      	str	r3, [sp, #8]
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	9301      	str	r3, [sp, #4]
 801d0f8:	9600      	str	r6, [sp, #0]
 801d0fa:	4643      	mov	r3, r8
 801d0fc:	462a      	mov	r2, r5
 801d0fe:	4631      	mov	r1, r6
 801d100:	4638      	mov	r0, r7
 801d102:	f7ff fe8f 	bl	801ce24 <lfs_dir_splittingcompact>
    if (state < 0) {
 801d106:	1e01      	subs	r1, r0, #0
 801d108:	f2c0 8106 	blt.w	801d318 <lfs_dir_relocatingcommit+0x350>
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 801d10c:	f8d9 b000 	ldr.w	fp, [r9]
 801d110:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 801d114:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801d118:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d11a:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801d11c:	4692      	mov	sl, r2
 801d11e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d120:	e0db      	b.n	801d2da <lfs_dir_relocatingcommit+0x312>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801d122:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801d124:	3b08      	subs	r3, #8
 801d126:	e7c0      	b.n	801d0aa <lfs_dir_relocatingcommit+0xe2>
        lfs_gstate_t delta = {0};
 801d128:	2300      	movs	r3, #0
 801d12a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d12c:	930e      	str	r3, [sp, #56]	@ 0x38
 801d12e:	930f      	str	r3, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 801d130:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d134:	a80d      	add	r0, sp, #52	@ 0x34
 801d136:	f7fd fa97 	bl	801a668 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 801d13a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801d13e:	a80d      	add	r0, sp, #52	@ 0x34
 801d140:	f7fd fa92 	bl	801a668 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 801d144:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801d148:	a80d      	add	r0, sp, #52	@ 0x34
 801d14a:	f7fd fa8d 	bl	801a668 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801d14e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d150:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 801d154:	f023 0303 	bic.w	r3, r3, #3
 801d158:	930d      	str	r3, [sp, #52]	@ 0x34
    for (int i = 0; i < 3; i++) {
 801d15a:	e001      	b.n	801d160 <lfs_dir_relocatingcommit+0x198>
 801d15c:	f10a 0a01 	add.w	sl, sl, #1
 801d160:	f1ba 0f02 	cmp.w	sl, #2
 801d164:	dc07      	bgt.n	801d176 <lfs_dir_relocatingcommit+0x1ae>
        if (((uint32_t*)a)[i] != 0) {
 801d166:	ab1a      	add	r3, sp, #104	@ 0x68
 801d168:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801d16c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 801d170:	2b00      	cmp	r3, #0
 801d172:	d0f3      	beq.n	801d15c <lfs_dir_relocatingcommit+0x194>
            return false;
 801d174:	2400      	movs	r4, #0
        if (!lfs_gstate_iszero(&delta)) {
 801d176:	b9c4      	cbnz	r4, 801d1aa <lfs_dir_relocatingcommit+0x1e2>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801d178:	aa0d      	add	r2, sp, #52	@ 0x34
 801d17a:	4631      	mov	r1, r6
 801d17c:	4638      	mov	r0, r7
 801d17e:	f7fd fdc7 	bl	801ad10 <lfs_dir_getgstate>
            if (err) {
 801d182:	4682      	mov	sl, r0
 801d184:	2800      	cmp	r0, #0
 801d186:	f040 80ca 	bne.w	801d31e <lfs_dir_relocatingcommit+0x356>
            err = lfs_dir_commitattr(lfs, &commit,
 801d18a:	ab0d      	add	r3, sp, #52	@ 0x34
 801d18c:	4a50      	ldr	r2, [pc, #320]	@ (801d2d0 <lfs_dir_relocatingcommit+0x308>)
 801d18e:	a910      	add	r1, sp, #64	@ 0x40
 801d190:	4638      	mov	r0, r7
 801d192:	f7ff fb45 	bl	801c820 <lfs_dir_commitattr>
            if (err) {
 801d196:	4682      	mov	sl, r0
 801d198:	b138      	cbz	r0, 801d1aa <lfs_dir_relocatingcommit+0x1e2>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d19a:	f110 0f1c 	cmn.w	r0, #28
 801d19e:	d0a4      	beq.n	801d0ea <lfs_dir_relocatingcommit+0x122>
 801d1a0:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1a4:	f040 80bb 	bne.w	801d31e <lfs_dir_relocatingcommit+0x356>
 801d1a8:	e79f      	b.n	801d0ea <lfs_dir_relocatingcommit+0x122>
        err = lfs_dir_commitcrc(lfs, &commit);
 801d1aa:	a910      	add	r1, sp, #64	@ 0x40
 801d1ac:	4638      	mov	r0, r7
 801d1ae:	f7ff fb9d 	bl	801c8ec <lfs_dir_commitcrc>
        if (err) {
 801d1b2:	4682      	mov	sl, r0
 801d1b4:	b138      	cbz	r0, 801d1c6 <lfs_dir_relocatingcommit+0x1fe>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801d1b6:	f110 0f1c 	cmn.w	r0, #28
 801d1ba:	d096      	beq.n	801d0ea <lfs_dir_relocatingcommit+0x122>
 801d1bc:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 801d1c0:	f040 80ad 	bne.w	801d31e <lfs_dir_relocatingcommit+0x356>
 801d1c4:	e791      	b.n	801d0ea <lfs_dir_relocatingcommit+0x122>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d1c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d1c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801d1ca:	6a11      	ldr	r1, [r2, #32]
 801d1cc:	fbb3 f2f1 	udiv	r2, r3, r1
 801d1d0:	fb01 3212 	mls	r2, r1, r2, r3
 801d1d4:	b97a      	cbnz	r2, 801d1f6 <lfs_dir_relocatingcommit+0x22e>
        dir->off = commit.off;
 801d1d6:	60f3      	str	r3, [r6, #12]
        dir->etag = commit.ptag;
 801d1d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d1da:	6133      	str	r3, [r6, #16]
        lfs->gdisk = lfs->gstate;
 801d1dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801d1e0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d1e4:	ca07      	ldmia	r2, {r0, r1, r2}
 801d1e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 801d1ea:	2200      	movs	r2, #0
 801d1ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 801d1ee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801d1f0:	653a      	str	r2, [r7, #80]	@ 0x50
    int state = 0;
 801d1f2:	4651      	mov	r1, sl
 801d1f4:	e78a      	b.n	801d10c <lfs_dir_relocatingcommit+0x144>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801d1f6:	4b37      	ldr	r3, [pc, #220]	@ (801d2d4 <lfs_dir_relocatingcommit+0x30c>)
 801d1f8:	4a31      	ldr	r2, [pc, #196]	@ (801d2c0 <lfs_dir_relocatingcommit+0x2f8>)
 801d1fa:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 801d1fe:	4831      	ldr	r0, [pc, #196]	@ (801d2c4 <lfs_dir_relocatingcommit+0x2fc>)
 801d200:	f00c f9a4 	bl	802954c <__assert_func>
            state = LFS_OK_DROPPED;
 801d204:	2102      	movs	r1, #2
 801d206:	e781      	b.n	801d10c <lfs_dir_relocatingcommit+0x144>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 801d208:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d20c:	f3c1 2089 	ubfx	r0, r1, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d210:	4584      	cmp	ip, r0
 801d212:	d10e      	bne.n	801d232 <lfs_dir_relocatingcommit+0x26a>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 801d214:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d218:	60a2      	str	r2, [r4, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 801d21a:	60e2      	str	r2, [r4, #12]
                for (int i = 0; i < attrcount; i++) {
 801d21c:	3301      	adds	r3, #1
 801d21e:	4543      	cmp	r3, r8
 801d220:	da34      	bge.n	801d28c <lfs_dir_relocatingcommit+0x2c4>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d222:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 801d226:	f3c1 520a 	ubfx	r2, r1, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d22a:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801d22e:	4282      	cmp	r2, r0
 801d230:	d0ea      	beq.n	801d208 <lfs_dir_relocatingcommit+0x240>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d232:	f240 40ff 	movw	r0, #1279	@ 0x4ff
 801d236:	4282      	cmp	r2, r0
 801d238:	d011      	beq.n	801d25e <lfs_dir_relocatingcommit+0x296>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801d23a:	f240 4001 	movw	r0, #1025	@ 0x401
 801d23e:	4282      	cmp	r2, r0
 801d240:	d1ec      	bne.n	801d21c <lfs_dir_relocatingcommit+0x254>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 801d242:	88a2      	ldrh	r2, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d244:	f3c1 2189 	ubfx	r1, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 801d248:	428a      	cmp	r2, r1
 801d24a:	d3e7      	bcc.n	801d21c <lfs_dir_relocatingcommit+0x254>
                        d->id += 1;
 801d24c:	3201      	adds	r2, #1
 801d24e:	80a2      	strh	r2, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801d250:	79a2      	ldrb	r2, [r4, #6]
 801d252:	2a02      	cmp	r2, #2
 801d254:	d1e2      	bne.n	801d21c <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos += 1;
 801d256:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801d258:	3201      	adds	r2, #1
 801d25a:	62a2      	str	r2, [r4, #40]	@ 0x28
 801d25c:	e7de      	b.n	801d21c <lfs_dir_relocatingcommit+0x254>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 801d25e:	88a0      	ldrh	r0, [r4, #4]
    return (tag & 0x000ffc00) >> 10;
 801d260:	f3c1 2c89 	ubfx	ip, r1, #10, #10
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801d264:	4560      	cmp	r0, ip
 801d266:	d9e8      	bls.n	801d23a <lfs_dir_relocatingcommit+0x272>
                        d->id -= 1;
 801d268:	3801      	subs	r0, #1
 801d26a:	80a0      	strh	r0, [r4, #4]
                        if (d->type == LFS_TYPE_DIR) {
 801d26c:	79a2      	ldrb	r2, [r4, #6]
 801d26e:	2a02      	cmp	r2, #2
 801d270:	d1d4      	bne.n	801d21c <lfs_dir_relocatingcommit+0x254>
                            ((lfs_dir_t*)d)->pos -= 1;
 801d272:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801d274:	3a01      	subs	r2, #1
 801d276:	62a2      	str	r2, [r4, #40]	@ 0x28
 801d278:	e7d0      	b.n	801d21c <lfs_dir_relocatingcommit+0x254>
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 801d27a:	f104 0220 	add.w	r2, r4, #32
 801d27e:	f104 0108 	add.w	r1, r4, #8
 801d282:	4638      	mov	r0, r7
 801d284:	f7fe fd24 	bl	801bcd0 <lfs_dir_fetch>
                if (err) {
 801d288:	2800      	cmp	r0, #0
 801d28a:	d147      	bne.n	801d31c <lfs_dir_relocatingcommit+0x354>
            while (d->id >= d->m.count && d->m.split) {
 801d28c:	88a3      	ldrh	r3, [r4, #4]
 801d28e:	8ba1      	ldrh	r1, [r4, #28]
 801d290:	428b      	cmp	r3, r1
 801d292:	d321      	bcc.n	801d2d8 <lfs_dir_relocatingcommit+0x310>
 801d294:	7fe2      	ldrb	r2, [r4, #31]
 801d296:	b1fa      	cbz	r2, 801d2d8 <lfs_dir_relocatingcommit+0x310>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d298:	6a22      	ldr	r2, [r4, #32]
 801d29a:	6a38      	ldr	r0, [r7, #32]
 801d29c:	4282      	cmp	r2, r0
 801d29e:	d0ec      	beq.n	801d27a <lfs_dir_relocatingcommit+0x2b2>
 801d2a0:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 801d2a4:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 801d2a8:	45e6      	cmp	lr, ip
 801d2aa:	d0e6      	beq.n	801d27a <lfs_dir_relocatingcommit+0x2b2>
 801d2ac:	4562      	cmp	r2, ip
 801d2ae:	d0e4      	beq.n	801d27a <lfs_dir_relocatingcommit+0x2b2>
 801d2b0:	4570      	cmp	r0, lr
 801d2b2:	d0e2      	beq.n	801d27a <lfs_dir_relocatingcommit+0x2b2>
                    d->id -= d->m.count;
 801d2b4:	1a5b      	subs	r3, r3, r1
 801d2b6:	80a3      	strh	r3, [r4, #4]
 801d2b8:	e7df      	b.n	801d27a <lfs_dir_relocatingcommit+0x2b2>
 801d2ba:	bf00      	nop
 801d2bc:	08038548 	.word	0x08038548
 801d2c0:	08038ec0 	.word	0x08038ec0
 801d2c4:	080381c0 	.word	0x080381c0
 801d2c8:	08038558 	.word	0x08038558
 801d2cc:	0801c8db 	.word	0x0801c8db
 801d2d0:	7ffffc0c 	.word	0x7ffffc0c
 801d2d4:	0803845c 	.word	0x0803845c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d2d8:	6824      	ldr	r4, [r4, #0]
 801d2da:	b1d4      	cbz	r4, 801d312 <lfs_dir_relocatingcommit+0x34a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d2dc:	68a3      	ldr	r3, [r4, #8]
 801d2de:	459b      	cmp	fp, r3
 801d2e0:	d006      	beq.n	801d2f0 <lfs_dir_relocatingcommit+0x328>
 801d2e2:	68e2      	ldr	r2, [r4, #12]
 801d2e4:	4592      	cmp	sl, r2
 801d2e6:	d003      	beq.n	801d2f0 <lfs_dir_relocatingcommit+0x328>
 801d2e8:	459a      	cmp	sl, r3
 801d2ea:	d001      	beq.n	801d2f0 <lfs_dir_relocatingcommit+0x328>
 801d2ec:	4593      	cmp	fp, r2
 801d2ee:	d1f3      	bne.n	801d2d8 <lfs_dir_relocatingcommit+0x310>
            d->m = *dir;
 801d2f0:	f104 0c08 	add.w	ip, r4, #8
 801d2f4:	46b6      	mov	lr, r6
 801d2f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d2fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d2fe:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801d302:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 801d306:	f104 0308 	add.w	r3, r4, #8
 801d30a:	454b      	cmp	r3, r9
 801d30c:	d0be      	beq.n	801d28c <lfs_dir_relocatingcommit+0x2c4>
                for (int i = 0; i < attrcount; i++) {
 801d30e:	2300      	movs	r3, #0
 801d310:	e785      	b.n	801d21e <lfs_dir_relocatingcommit+0x256>
    return state;
 801d312:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d314:	468a      	mov	sl, r1
 801d316:	e002      	b.n	801d31e <lfs_dir_relocatingcommit+0x356>
        return state;
 801d318:	468a      	mov	sl, r1
 801d31a:	e000      	b.n	801d31e <lfs_dir_relocatingcommit+0x356>
 801d31c:	4682      	mov	sl, r0
}
 801d31e:	4650      	mov	r0, sl
 801d320:	b01b      	add	sp, #108	@ 0x6c
 801d322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d326:	bf00      	nop

0801d328 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801d328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d32c:	b0a3      	sub	sp, #140	@ 0x8c
 801d32e:	4605      	mov	r5, r0
 801d330:	460e      	mov	r6, r1
 801d332:	4690      	mov	r8, r2
 801d334:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801d336:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801d338:	e003      	b.n	801d342 <lfs_dir_orphaningcommit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801d33a:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801d33c:	2b01      	cmp	r3, #1
 801d33e:	d012      	beq.n	801d366 <lfs_dir_orphaningcommit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 801d340:	6824      	ldr	r4, [r4, #0]
 801d342:	b34c      	cbz	r4, 801d398 <lfs_dir_orphaningcommit+0x70>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 801d344:	f104 0108 	add.w	r1, r4, #8
 801d348:	42b1      	cmp	r1, r6
 801d34a:	d0f9      	beq.n	801d340 <lfs_dir_orphaningcommit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d34c:	68a1      	ldr	r1, [r4, #8]
 801d34e:	6833      	ldr	r3, [r6, #0]
 801d350:	428b      	cmp	r3, r1
 801d352:	d0f2      	beq.n	801d33a <lfs_dir_orphaningcommit+0x12>
 801d354:	68e0      	ldr	r0, [r4, #12]
 801d356:	6872      	ldr	r2, [r6, #4]
 801d358:	4282      	cmp	r2, r0
 801d35a:	d0ee      	beq.n	801d33a <lfs_dir_orphaningcommit+0x12>
 801d35c:	428a      	cmp	r2, r1
 801d35e:	d0ec      	beq.n	801d33a <lfs_dir_orphaningcommit+0x12>
 801d360:	4298      	cmp	r0, r3
 801d362:	d1ed      	bne.n	801d340 <lfs_dir_orphaningcommit+0x18>
 801d364:	e7e9      	b.n	801d33a <lfs_dir_orphaningcommit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801d366:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d368:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801d36c:	d0e8      	beq.n	801d340 <lfs_dir_orphaningcommit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
 801d36e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801d370:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 801d372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 801d374:	429a      	cmp	r2, r3
 801d376:	d9e3      	bls.n	801d340 <lfs_dir_orphaningcommit+0x18>
            int err = lfs_file_outline(lfs, f);
 801d378:	4621      	mov	r1, r4
 801d37a:	4628      	mov	r0, r5
 801d37c:	f7fe feee 	bl	801c15c <lfs_file_outline>
            if (err) {
 801d380:	4607      	mov	r7, r0
 801d382:	2800      	cmp	r0, #0
 801d384:	f040 81bc 	bne.w	801d700 <lfs_dir_orphaningcommit+0x3d8>
            err = lfs_file_flush(lfs, f);
 801d388:	4621      	mov	r1, r4
 801d38a:	4628      	mov	r0, r5
 801d38c:	f7ff f866 	bl	801c45c <lfs_file_flush>
            if (err) {
 801d390:	4607      	mov	r7, r0
 801d392:	2800      	cmp	r0, #0
 801d394:	d0d4      	beq.n	801d340 <lfs_dir_orphaningcommit+0x18>
 801d396:	e1b3      	b.n	801d700 <lfs_dir_orphaningcommit+0x3d8>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 801d398:	6833      	ldr	r3, [r6, #0]
 801d39a:	9316      	str	r3, [sp, #88]	@ 0x58
 801d39c:	6873      	ldr	r3, [r6, #4]
 801d39e:	9317      	str	r3, [sp, #92]	@ 0x5c
    lfs_mdir_t ldir = *dir;
 801d3a0:	ac0e      	add	r4, sp, #56	@ 0x38
 801d3a2:	4637      	mov	r7, r6
 801d3a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801d3a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d3a8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801d3ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 801d3b0:	ab06      	add	r3, sp, #24
 801d3b2:	9301      	str	r3, [sp, #4]
 801d3b4:	f8cd 9000 	str.w	r9, [sp]
 801d3b8:	4643      	mov	r3, r8
 801d3ba:	4632      	mov	r2, r6
 801d3bc:	a90e      	add	r1, sp, #56	@ 0x38
 801d3be:	4628      	mov	r0, r5
 801d3c0:	f7ff fe02 	bl	801cfc8 <lfs_dir_relocatingcommit>
    if (state < 0) {
 801d3c4:	1e07      	subs	r7, r0, #0
 801d3c6:	f2c0 819b 	blt.w	801d700 <lfs_dir_orphaningcommit+0x3d8>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d3ca:	6833      	ldr	r3, [r6, #0]
 801d3cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d3ce:	429a      	cmp	r2, r3
 801d3d0:	d007      	beq.n	801d3e2 <lfs_dir_orphaningcommit+0xba>
 801d3d2:	6870      	ldr	r0, [r6, #4]
 801d3d4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d3d6:	4281      	cmp	r1, r0
 801d3d8:	d003      	beq.n	801d3e2 <lfs_dir_orphaningcommit+0xba>
 801d3da:	4299      	cmp	r1, r3
 801d3dc:	d001      	beq.n	801d3e2 <lfs_dir_orphaningcommit+0xba>
 801d3de:	4290      	cmp	r0, r2
 801d3e0:	d109      	bne.n	801d3f6 <lfs_dir_orphaningcommit+0xce>
        *dir = ldir;
 801d3e2:	4634      	mov	r4, r6
 801d3e4:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801d3e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d3ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d3ee:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801d3f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 801d3f6:	2f02      	cmp	r7, #2
 801d3f8:	d001      	beq.n	801d3fe <lfs_dir_orphaningcommit+0xd6>
                orphans = true;
 801d3fa:	2600      	movs	r6, #0
 801d3fc:	e0b8      	b.n	801d570 <lfs_dir_orphaningcommit+0x248>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 801d3fe:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801d402:	4631      	mov	r1, r6
 801d404:	4628      	mov	r0, r5
 801d406:	f7fd fc83 	bl	801ad10 <lfs_dir_getgstate>
        if (err) {
 801d40a:	4607      	mov	r7, r0
 801d40c:	2800      	cmp	r0, #0
 801d40e:	f040 8177 	bne.w	801d700 <lfs_dir_orphaningcommit+0x3d8>
        lpair[0] = pdir.pair[0];
 801d412:	9b06      	ldr	r3, [sp, #24]
 801d414:	9316      	str	r3, [sp, #88]	@ 0x58
        lpair[1] = pdir.pair[1];
 801d416:	9b07      	ldr	r3, [sp, #28]
 801d418:	9317      	str	r3, [sp, #92]	@ 0x5c
        lfs_pair_tole32(dir->tail);
 801d41a:	f106 0118 	add.w	r1, r6, #24
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801d41e:	7df2      	ldrb	r2, [r6, #23]
 801d420:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801d424:	4ba2      	ldr	r3, [pc, #648]	@ (801d6b0 <lfs_dir_orphaningcommit+0x388>)
 801d426:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801d42a:	9318      	str	r3, [sp, #96]	@ 0x60
 801d42c:	9119      	str	r1, [sp, #100]	@ 0x64
 801d42e:	2300      	movs	r3, #0
 801d430:	9301      	str	r3, [sp, #4]
 801d432:	2301      	movs	r3, #1
 801d434:	9300      	str	r3, [sp, #0]
 801d436:	ab18      	add	r3, sp, #96	@ 0x60
 801d438:	aa16      	add	r2, sp, #88	@ 0x58
 801d43a:	a906      	add	r1, sp, #24
 801d43c:	4628      	mov	r0, r5
 801d43e:	f7ff fdc3 	bl	801cfc8 <lfs_dir_relocatingcommit>
        if (state < 0) {
 801d442:	1e07      	subs	r7, r0, #0
 801d444:	f2c0 815c 	blt.w	801d700 <lfs_dir_orphaningcommit+0x3d8>
        ldir = pdir;
 801d448:	ac0e      	add	r4, sp, #56	@ 0x38
 801d44a:	ae06      	add	r6, sp, #24
 801d44c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d44e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d450:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801d454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801d458:	e7cf      	b.n	801d3fa <lfs_dir_orphaningcommit+0xd2>
                d->m.pair[0] = ldir.pair[0];
 801d45a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d45c:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 801d45e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d460:	60da      	str	r2, [r3, #12]
            if (d->type == LFS_TYPE_DIR &&
 801d462:	799a      	ldrb	r2, [r3, #6]
 801d464:	2a02      	cmp	r2, #2
 801d466:	d00d      	beq.n	801d484 <lfs_dir_orphaningcommit+0x15c>
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	b1db      	cbz	r3, 801d4a4 <lfs_dir_orphaningcommit+0x17c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d46c:	689a      	ldr	r2, [r3, #8]
 801d46e:	4291      	cmp	r1, r2
 801d470:	d0f3      	beq.n	801d45a <lfs_dir_orphaningcommit+0x132>
 801d472:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801d474:	68dc      	ldr	r4, [r3, #12]
 801d476:	4284      	cmp	r4, r0
 801d478:	d0ef      	beq.n	801d45a <lfs_dir_orphaningcommit+0x132>
 801d47a:	428c      	cmp	r4, r1
 801d47c:	d0ed      	beq.n	801d45a <lfs_dir_orphaningcommit+0x132>
 801d47e:	4290      	cmp	r0, r2
 801d480:	d1ef      	bne.n	801d462 <lfs_dir_orphaningcommit+0x13a>
 801d482:	e7ea      	b.n	801d45a <lfs_dir_orphaningcommit+0x132>
 801d484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d486:	428a      	cmp	r2, r1
 801d488:	d007      	beq.n	801d49a <lfs_dir_orphaningcommit+0x172>
 801d48a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d48c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801d48e:	42a0      	cmp	r0, r4
 801d490:	d003      	beq.n	801d49a <lfs_dir_orphaningcommit+0x172>
 801d492:	4288      	cmp	r0, r1
 801d494:	d001      	beq.n	801d49a <lfs_dir_orphaningcommit+0x172>
 801d496:	4294      	cmp	r4, r2
 801d498:	d1e6      	bne.n	801d468 <lfs_dir_orphaningcommit+0x140>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 801d49a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d49c:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 801d49e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d4a0:	631a      	str	r2, [r3, #48]	@ 0x30
 801d4a2:	e7e1      	b.n	801d468 <lfs_dir_orphaningcommit+0x140>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801d4a4:	aa06      	add	r2, sp, #24
 801d4a6:	a916      	add	r1, sp, #88	@ 0x58
 801d4a8:	4628      	mov	r0, r5
 801d4aa:	f7fe fba5 	bl	801bbf8 <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 801d4ae:	1e04      	subs	r4, r0, #0
 801d4b0:	f280 8082 	bge.w	801d5b8 <lfs_dir_orphaningcommit+0x290>
 801d4b4:	f114 0f02 	cmn.w	r4, #2
 801d4b8:	f040 8128 	bne.w	801d70c <lfs_dir_orphaningcommit+0x3e4>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801d4bc:	f114 0802 	adds.w	r8, r4, #2
 801d4c0:	bf18      	it	ne
 801d4c2:	f04f 0801 	movne.w	r8, #1
        state = 0;
 801d4c6:	2700      	movs	r7, #0
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 801d4c8:	aa06      	add	r2, sp, #24
 801d4ca:	a916      	add	r1, sp, #88	@ 0x58
 801d4cc:	4628      	mov	r0, r5
 801d4ce:	f7ff f925 	bl	801c71c <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 801d4d2:	4603      	mov	r3, r0
 801d4d4:	b118      	cbz	r0, 801d4de <lfs_dir_orphaningcommit+0x1b6>
 801d4d6:	f110 0f02 	cmn.w	r0, #2
 801d4da:	f040 8119 	bne.w	801d710 <lfs_dir_orphaningcommit+0x3e8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801d4de:	f114 0f02 	cmn.w	r4, #2
 801d4e2:	f000 80d6 	beq.w	801d692 <lfs_dir_orphaningcommit+0x36a>
 801d4e6:	f113 0f02 	cmn.w	r3, #2
 801d4ea:	f000 80cb 	beq.w	801d684 <lfs_dir_orphaningcommit+0x35c>
    return lfs_tag_size(a->tag);
 801d4ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    return tag & 0x000003ff;
 801d4f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	f040 80d1 	bne.w	801d69c <lfs_dir_orphaningcommit+0x374>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801d4fa:	a906      	add	r1, sp, #24
 801d4fc:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801d500:	f7fd f8c4 	bl	801a68c <lfs_gstate_hasmovehere>
 801d504:	2800      	cmp	r0, #0
 801d506:	f040 80e1 	bne.w	801d6cc <lfs_dir_orphaningcommit+0x3a4>
            uint16_t moveid = 0x3ff;
 801d50a:	f240 34ff 	movw	r4, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 801d50e:	9b06      	ldr	r3, [sp, #24]
 801d510:	9316      	str	r3, [sp, #88]	@ 0x58
            lpair[1] = pdir.pair[1];
 801d512:	9b07      	ldr	r3, [sp, #28]
 801d514:	9317      	str	r3, [sp, #92]	@ 0x5c
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801d516:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d51a:	429c      	cmp	r4, r3
 801d51c:	f000 80ec 	beq.w	801d6f8 <lfs_dir_orphaningcommit+0x3d0>
 801d520:	02a3      	lsls	r3, r4, #10
 801d522:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d526:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d52a:	931e      	str	r3, [sp, #120]	@ 0x78
 801d52c:	2100      	movs	r1, #0
 801d52e:	911f      	str	r1, [sp, #124]	@ 0x7c
 801d530:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 801d534:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801d538:	4b5d      	ldr	r3, [pc, #372]	@ (801d6b0 <lfs_dir_orphaningcommit+0x388>)
 801d53a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801d53e:	9320      	str	r3, [sp, #128]	@ 0x80
 801d540:	ab0e      	add	r3, sp, #56	@ 0x38
 801d542:	9321      	str	r3, [sp, #132]	@ 0x84
 801d544:	9101      	str	r1, [sp, #4]
 801d546:	2302      	movs	r3, #2
 801d548:	9300      	str	r3, [sp, #0]
 801d54a:	ab1e      	add	r3, sp, #120	@ 0x78
 801d54c:	aa16      	add	r2, sp, #88	@ 0x58
 801d54e:	a906      	add	r1, sp, #24
 801d550:	4628      	mov	r0, r5
 801d552:	f7ff fd39 	bl	801cfc8 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801d556:	1e07      	subs	r7, r0, #0
 801d558:	f2c0 80d2 	blt.w	801d700 <lfs_dir_orphaningcommit+0x3d8>
            ldir = pdir;
 801d55c:	ac0e      	add	r4, sp, #56	@ 0x38
 801d55e:	f10d 0c18 	add.w	ip, sp, #24
 801d562:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801d566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d568:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801d56c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 801d570:	2f01      	cmp	r7, #1
 801d572:	f040 80c3 	bne.w	801d6fc <lfs_dir_orphaningcommit+0x3d4>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 801d576:	4b4f      	ldr	r3, [pc, #316]	@ (801d6b4 <lfs_dir_orphaningcommit+0x38c>)
 801d578:	9303      	str	r3, [sp, #12]
 801d57a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d57c:	9302      	str	r3, [sp, #8]
 801d57e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d580:	9301      	str	r3, [sp, #4]
 801d582:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d584:	9300      	str	r3, [sp, #0]
 801d586:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d588:	f640 128c 	movw	r2, #2444	@ 0x98c
 801d58c:	494a      	ldr	r1, [pc, #296]	@ (801d6b8 <lfs_dir_orphaningcommit+0x390>)
 801d58e:	484b      	ldr	r0, [pc, #300]	@ (801d6bc <lfs_dir_orphaningcommit+0x394>)
 801d590:	f00c f810 	bl	80295b4 <printf>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801d594:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801d596:	6a2b      	ldr	r3, [r5, #32]
 801d598:	428b      	cmp	r3, r1
 801d59a:	d007      	beq.n	801d5ac <lfs_dir_orphaningcommit+0x284>
 801d59c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801d59e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801d5a0:	4282      	cmp	r2, r0
 801d5a2:	d003      	beq.n	801d5ac <lfs_dir_orphaningcommit+0x284>
 801d5a4:	428a      	cmp	r2, r1
 801d5a6:	d001      	beq.n	801d5ac <lfs_dir_orphaningcommit+0x284>
 801d5a8:	4298      	cmp	r0, r3
 801d5aa:	d103      	bne.n	801d5b4 <lfs_dir_orphaningcommit+0x28c>
            lfs->root[0] = ldir.pair[0];
 801d5ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5ae:	622b      	str	r3, [r5, #32]
            lfs->root[1] = ldir.pair[1];
 801d5b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d5b2:	626b      	str	r3, [r5, #36]	@ 0x24
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801d5b4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801d5b6:	e758      	b.n	801d46a <lfs_dir_orphaningcommit+0x142>
        bool hasparent = (tag != LFS_ERR_NOENT);
 801d5b8:	f114 0802 	adds.w	r8, r4, #2
 801d5bc:	bf18      	it	ne
 801d5be:	f04f 0801 	movne.w	r8, #1
            int err = lfs_fs_preporphans(lfs, +1);
 801d5c2:	2101      	movs	r1, #1
 801d5c4:	4628      	mov	r0, r5
 801d5c6:	f7fd f997 	bl	801a8f8 <lfs_fs_preporphans>
            if (err) {
 801d5ca:	4607      	mov	r7, r0
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	f040 8097 	bne.w	801d700 <lfs_dir_orphaningcommit+0x3d8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801d5d2:	a906      	add	r1, sp, #24
 801d5d4:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801d5d8:	f7fd f858 	bl	801a68c <lfs_gstate_hasmovehere>
 801d5dc:	2800      	cmp	r0, #0
 801d5de:	d131      	bne.n	801d644 <lfs_dir_orphaningcommit+0x31c>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801d5e0:	4622      	mov	r2, r4
            uint16_t moveid = 0x3ff;
 801d5e2:	f240 37ff 	movw	r7, #1023	@ 0x3ff
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 801d5e6:	9b06      	ldr	r3, [sp, #24]
 801d5e8:	9304      	str	r3, [sp, #16]
 801d5ea:	9b07      	ldr	r3, [sp, #28]
 801d5ec:	9305      	str	r3, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801d5ee:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d5f2:	429f      	cmp	r7, r3
 801d5f4:	d044      	beq.n	801d680 <lfs_dir_orphaningcommit+0x358>
 801d5f6:	02bb      	lsls	r3, r7, #10
 801d5f8:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d5fc:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d600:	931a      	str	r3, [sp, #104]	@ 0x68
 801d602:	2300      	movs	r3, #0
 801d604:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d606:	921c      	str	r2, [sp, #112]	@ 0x70
 801d608:	aa0e      	add	r2, sp, #56	@ 0x38
 801d60a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d60c:	9301      	str	r3, [sp, #4]
 801d60e:	2302      	movs	r3, #2
 801d610:	9300      	str	r3, [sp, #0]
 801d612:	ab1a      	add	r3, sp, #104	@ 0x68
 801d614:	aa04      	add	r2, sp, #16
 801d616:	a906      	add	r1, sp, #24
 801d618:	4628      	mov	r0, r5
 801d61a:	f7ff fcd5 	bl	801cfc8 <lfs_dir_relocatingcommit>
            if (state < 0) {
 801d61e:	1e07      	subs	r7, r0, #0
 801d620:	db6e      	blt.n	801d700 <lfs_dir_orphaningcommit+0x3d8>
            if (state == LFS_OK_RELOCATED) {
 801d622:	2f01      	cmp	r7, #1
 801d624:	f47f af50 	bne.w	801d4c8 <lfs_dir_orphaningcommit+0x1a0>
                lpair[0] = ppair[0];
 801d628:	9b04      	ldr	r3, [sp, #16]
 801d62a:	9316      	str	r3, [sp, #88]	@ 0x58
                lpair[1] = ppair[1];
 801d62c:	9b05      	ldr	r3, [sp, #20]
 801d62e:	9317      	str	r3, [sp, #92]	@ 0x5c
                ldir = pdir;
 801d630:	ac0e      	add	r4, sp, #56	@ 0x38
 801d632:	ae06      	add	r6, sp, #24
 801d634:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801d636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801d638:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801d63c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801d640:	2601      	movs	r6, #1
 801d642:	e795      	b.n	801d570 <lfs_dir_orphaningcommit+0x248>
                moveid = lfs_tag_id(lfs->gstate.tag);
 801d644:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801d646:	f3c7 2789 	ubfx	r7, r7, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801d64a:	4b1a      	ldr	r3, [pc, #104]	@ (801d6b4 <lfs_dir_orphaningcommit+0x38c>)
 801d64c:	9302      	str	r3, [sp, #8]
 801d64e:	9701      	str	r7, [sp, #4]
 801d650:	9b07      	ldr	r3, [sp, #28]
 801d652:	9300      	str	r3, [sp, #0]
 801d654:	9b06      	ldr	r3, [sp, #24]
 801d656:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 801d65a:	4917      	ldr	r1, [pc, #92]	@ (801d6b8 <lfs_dir_orphaningcommit+0x390>)
 801d65c:	4818      	ldr	r0, [pc, #96]	@ (801d6c0 <lfs_dir_orphaningcommit+0x398>)
 801d65e:	f00b ffa9 	bl	80295b4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d662:	2200      	movs	r2, #0
 801d664:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d668:	4628      	mov	r0, r5
 801d66a:	f7fd f8f5 	bl	801a858 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
 801d66e:	f3c4 2389 	ubfx	r3, r4, #10, #10
                if (moveid < lfs_tag_id(tag)) {
 801d672:	42bb      	cmp	r3, r7
 801d674:	d902      	bls.n	801d67c <lfs_dir_orphaningcommit+0x354>
                    tag -= LFS_MKTAG(0, 1, 0);
 801d676:	f5a4 6280 	sub.w	r2, r4, #1024	@ 0x400
 801d67a:	e7b4      	b.n	801d5e6 <lfs_dir_orphaningcommit+0x2be>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 801d67c:	4622      	mov	r2, r4
 801d67e:	e7b2      	b.n	801d5e6 <lfs_dir_orphaningcommit+0x2be>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 801d680:	2300      	movs	r3, #0
 801d682:	e7bd      	b.n	801d600 <lfs_dir_orphaningcommit+0x2d8>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 801d684:	4b0f      	ldr	r3, [pc, #60]	@ (801d6c4 <lfs_dir_orphaningcommit+0x39c>)
 801d686:	4a10      	ldr	r2, [pc, #64]	@ (801d6c8 <lfs_dir_orphaningcommit+0x3a0>)
 801d688:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801d68c:	480a      	ldr	r0, [pc, #40]	@ (801d6b8 <lfs_dir_orphaningcommit+0x390>)
 801d68e:	f00b ff5d 	bl	802954c <__assert_func>
        if (err != LFS_ERR_NOENT) {
 801d692:	f113 0f02 	cmn.w	r3, #2
 801d696:	f47f af2a 	bne.w	801d4ee <lfs_dir_orphaningcommit+0x1c6>
 801d69a:	e769      	b.n	801d570 <lfs_dir_orphaningcommit+0x248>
                err = lfs_fs_preporphans(lfs, -hasparent);
 801d69c:	f1c8 0100 	rsb	r1, r8, #0
 801d6a0:	4628      	mov	r0, r5
 801d6a2:	f7fd f929 	bl	801a8f8 <lfs_fs_preporphans>
                if (err) {
 801d6a6:	4607      	mov	r7, r0
 801d6a8:	2800      	cmp	r0, #0
 801d6aa:	f43f af26 	beq.w	801d4fa <lfs_dir_orphaningcommit+0x1d2>
 801d6ae:	e027      	b.n	801d700 <lfs_dir_orphaningcommit+0x3d8>
 801d6b0:	000ffc08 	.word	0x000ffc08
 801d6b4:	0803606c 	.word	0x0803606c
 801d6b8:	080381c0 	.word	0x080381c0
 801d6bc:	08038560 	.word	0x08038560
 801d6c0:	0803859c 	.word	0x0803859c
 801d6c4:	080385e0 	.word	0x080385e0
 801d6c8:	08038f1c 	.word	0x08038f1c
                moveid = lfs_tag_id(lfs->gstate.tag);
 801d6cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801d6ce:	f3c4 2489 	ubfx	r4, r4, #10, #10
                LFS_DEBUG("Fixing move while relocating "
 801d6d2:	4b10      	ldr	r3, [pc, #64]	@ (801d714 <lfs_dir_orphaningcommit+0x3ec>)
 801d6d4:	9302      	str	r3, [sp, #8]
 801d6d6:	9401      	str	r4, [sp, #4]
 801d6d8:	9b07      	ldr	r3, [sp, #28]
 801d6da:	9300      	str	r3, [sp, #0]
 801d6dc:	9b06      	ldr	r3, [sp, #24]
 801d6de:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 801d6e2:	490d      	ldr	r1, [pc, #52]	@ (801d718 <lfs_dir_orphaningcommit+0x3f0>)
 801d6e4:	480d      	ldr	r0, [pc, #52]	@ (801d71c <lfs_dir_orphaningcommit+0x3f4>)
 801d6e6:	f00b ff65 	bl	80295b4 <printf>
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d6ea:	2200      	movs	r2, #0
 801d6ec:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d6f0:	4628      	mov	r0, r5
 801d6f2:	f7fd f8b1 	bl	801a858 <lfs_fs_prepmove>
 801d6f6:	e70a      	b.n	801d50e <lfs_dir_orphaningcommit+0x1e6>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	e716      	b.n	801d52a <lfs_dir_orphaningcommit+0x202>
    return orphans ? LFS_OK_ORPHANED : 0;
 801d6fc:	b926      	cbnz	r6, 801d708 <lfs_dir_orphaningcommit+0x3e0>
 801d6fe:	2700      	movs	r7, #0
}
 801d700:	4638      	mov	r0, r7
 801d702:	b023      	add	sp, #140	@ 0x8c
 801d704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return orphans ? LFS_OK_ORPHANED : 0;
 801d708:	2703      	movs	r7, #3
 801d70a:	e7f9      	b.n	801d700 <lfs_dir_orphaningcommit+0x3d8>
            return tag;
 801d70c:	4627      	mov	r7, r4
 801d70e:	e7f7      	b.n	801d700 <lfs_dir_orphaningcommit+0x3d8>
            return err;
 801d710:	4607      	mov	r7, r0
 801d712:	e7f5      	b.n	801d700 <lfs_dir_orphaningcommit+0x3d8>
 801d714:	0803606c 	.word	0x0803606c
 801d718:	080381c0 	.word	0x080381c0
 801d71c:	0803859c 	.word	0x0803859c

0801d720 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 801d720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d724:	b0a4      	sub	sp, #144	@ 0x90
    return lfs_tag_size(a->tag);
 801d726:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 801d728:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	f000 80ea 	beq.w	801d906 <lfs_fs_deorphan+0x1e6>
 801d732:	4605      	mov	r5, r0
 801d734:	460f      	mov	r7, r1
    int pass = 0;
 801d736:	2600      	movs	r6, #0
    while (pass < 2) {
 801d738:	2e01      	cmp	r6, #1
 801d73a:	f300 80db 	bgt.w	801d8f4 <lfs_fs_deorphan+0x1d4>
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 801d73e:	2220      	movs	r2, #32
 801d740:	2100      	movs	r1, #0
 801d742:	a806      	add	r0, sp, #24
 801d744:	f00e fc54 	bl	802bff0 <memset>
 801d748:	2301      	movs	r3, #1
 801d74a:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
 801d74e:	930d      	str	r3, [sp, #52]	@ 0x34
        bool moreorphans = false;
 801d750:	f04f 0800 	mov.w	r8, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 801d754:	e0bd      	b.n	801d8d2 <lfs_fs_deorphan+0x1b2>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 801d756:	aa16      	add	r2, sp, #88	@ 0x58
 801d758:	a90c      	add	r1, sp, #48	@ 0x30
 801d75a:	4628      	mov	r0, r5
 801d75c:	f7fe fa4c 	bl	801bbf8 <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801d760:	1e04      	subs	r4, r0, #0
 801d762:	db39      	blt.n	801d7d8 <lfs_fs_deorphan+0xb8>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801d764:	b916      	cbnz	r6, 801d76c <lfs_fs_deorphan+0x4c>
 801d766:	f114 0f02 	cmn.w	r4, #2
 801d76a:	d139      	bne.n	801d7e0 <lfs_fs_deorphan+0xc0>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 801d76c:	2e01      	cmp	r6, #1
 801d76e:	f040 80a4 	bne.w	801d8ba <lfs_fs_deorphan+0x19a>
 801d772:	f114 0f02 	cmn.w	r4, #2
 801d776:	f040 80a0 	bne.w	801d8ba <lfs_fs_deorphan+0x19a>
 801d77a:	2f00      	cmp	r7, #0
 801d77c:	f000 809d 	beq.w	801d8ba <lfs_fs_deorphan+0x19a>
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 801d780:	4b63      	ldr	r3, [pc, #396]	@ (801d910 <lfs_fs_deorphan+0x1f0>)
 801d782:	9301      	str	r3, [sp, #4]
 801d784:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d786:	9300      	str	r3, [sp, #0]
 801d788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d78a:	f241 329c 	movw	r2, #5020	@ 0x139c
 801d78e:	4961      	ldr	r1, [pc, #388]	@ (801d914 <lfs_fs_deorphan+0x1f4>)
 801d790:	4861      	ldr	r0, [pc, #388]	@ (801d918 <lfs_fs_deorphan+0x1f8>)
 801d792:	f00b ff0f 	bl	80295b4 <printf>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 801d796:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 801d79a:	a90e      	add	r1, sp, #56	@ 0x38
 801d79c:	4628      	mov	r0, r5
 801d79e:	f7fd fab7 	bl	801ad10 <lfs_dir_getgstate>
                    if (err) {
 801d7a2:	4604      	mov	r4, r0
 801d7a4:	2800      	cmp	r0, #0
 801d7a6:	f040 80af 	bne.w	801d908 <lfs_fs_deorphan+0x1e8>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801d7aa:	f89d 204f 	ldrb.w	r2, [sp, #79]	@ 0x4f
 801d7ae:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801d7b2:	4b5a      	ldr	r3, [pc, #360]	@ (801d91c <lfs_fs_deorphan+0x1fc>)
 801d7b4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801d7b8:	9322      	str	r3, [sp, #136]	@ 0x88
 801d7ba:	ab14      	add	r3, sp, #80	@ 0x50
 801d7bc:	9323      	str	r3, [sp, #140]	@ 0x8c
 801d7be:	2301      	movs	r3, #1
 801d7c0:	aa22      	add	r2, sp, #136	@ 0x88
 801d7c2:	a906      	add	r1, sp, #24
 801d7c4:	4628      	mov	r0, r5
 801d7c6:	f7ff fdaf 	bl	801d328 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 801d7ca:	1e04      	subs	r4, r0, #0
 801d7cc:	f2c0 809c 	blt.w	801d908 <lfs_fs_deorphan+0x1e8>
                    if (state == LFS_OK_ORPHANED) {
 801d7d0:	2c03      	cmp	r4, #3
 801d7d2:	d17e      	bne.n	801d8d2 <lfs_fs_deorphan+0x1b2>
                        moreorphans = true;
 801d7d4:	46b8      	mov	r8, r7
                    continue;
 801d7d6:	e07c      	b.n	801d8d2 <lfs_fs_deorphan+0x1b2>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 801d7d8:	f114 0f02 	cmn.w	r4, #2
 801d7dc:	d0c2      	beq.n	801d764 <lfs_fs_deorphan+0x44>
 801d7de:	e093      	b.n	801d908 <lfs_fs_deorphan+0x1e8>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 801d7e0:	ab04      	add	r3, sp, #16
 801d7e2:	9300      	str	r3, [sp, #0]
 801d7e4:	4623      	mov	r3, r4
 801d7e6:	4a4e      	ldr	r2, [pc, #312]	@ (801d920 <lfs_fs_deorphan+0x200>)
 801d7e8:	a916      	add	r1, sp, #88	@ 0x58
 801d7ea:	4628      	mov	r0, r5
 801d7ec:	f7fd fa82 	bl	801acf4 <lfs_dir_get>
                    if (state < 0) {
 801d7f0:	2800      	cmp	r0, #0
 801d7f2:	db50      	blt.n	801d896 <lfs_fs_deorphan+0x176>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 801d7f4:	a90c      	add	r1, sp, #48	@ 0x30
 801d7f6:	a804      	add	r0, sp, #16
 801d7f8:	f7fc ff12 	bl	801a620 <lfs_pair_issync>
 801d7fc:	2800      	cmp	r0, #0
 801d7fe:	d1b5      	bne.n	801d76c <lfs_fs_deorphan+0x4c>
                        LFS_DEBUG("Fixing half-orphan "
 801d800:	4b43      	ldr	r3, [pc, #268]	@ (801d910 <lfs_fs_deorphan+0x1f0>)
 801d802:	9303      	str	r3, [sp, #12]
 801d804:	9b05      	ldr	r3, [sp, #20]
 801d806:	9302      	str	r3, [sp, #8]
 801d808:	9b04      	ldr	r3, [sp, #16]
 801d80a:	9301      	str	r3, [sp, #4]
 801d80c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d80e:	9300      	str	r3, [sp, #0]
 801d810:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d812:	f241 3271 	movw	r2, #4977	@ 0x1371
 801d816:	493f      	ldr	r1, [pc, #252]	@ (801d914 <lfs_fs_deorphan+0x1f4>)
 801d818:	4842      	ldr	r0, [pc, #264]	@ (801d924 <lfs_fs_deorphan+0x204>)
 801d81a:	f00b fecb 	bl	80295b4 <printf>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 801d81e:	a906      	add	r1, sp, #24
 801d820:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 801d824:	f7fc ff32 	bl	801a68c <lfs_gstate_hasmovehere>
 801d828:	b9a0      	cbnz	r0, 801d854 <lfs_fs_deorphan+0x134>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801d82a:	2300      	movs	r3, #0
 801d82c:	931e      	str	r3, [sp, #120]	@ 0x78
 801d82e:	2300      	movs	r3, #0
 801d830:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d832:	4b3d      	ldr	r3, [pc, #244]	@ (801d928 <lfs_fs_deorphan+0x208>)
 801d834:	9320      	str	r3, [sp, #128]	@ 0x80
 801d836:	ab04      	add	r3, sp, #16
 801d838:	9321      	str	r3, [sp, #132]	@ 0x84
 801d83a:	2302      	movs	r3, #2
 801d83c:	aa1e      	add	r2, sp, #120	@ 0x78
 801d83e:	a906      	add	r1, sp, #24
 801d840:	4628      	mov	r0, r5
 801d842:	f7ff fd71 	bl	801d328 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 801d846:	1e04      	subs	r4, r0, #0
 801d848:	db5e      	blt.n	801d908 <lfs_fs_deorphan+0x1e8>
                        if (state == LFS_OK_ORPHANED) {
 801d84a:	2c03      	cmp	r4, #3
 801d84c:	d141      	bne.n	801d8d2 <lfs_fs_deorphan+0x1b2>
                            moreorphans = true;
 801d84e:	f04f 0801 	mov.w	r8, #1
                        continue;
 801d852:	e03e      	b.n	801d8d2 <lfs_fs_deorphan+0x1b2>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801d854:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 801d856:	f3c4 2489 	ubfx	r4, r4, #10, #10
                            LFS_DEBUG("Fixing move while fixing orphans "
 801d85a:	4b2d      	ldr	r3, [pc, #180]	@ (801d910 <lfs_fs_deorphan+0x1f0>)
 801d85c:	9302      	str	r3, [sp, #8]
 801d85e:	9401      	str	r4, [sp, #4]
 801d860:	9b07      	ldr	r3, [sp, #28]
 801d862:	9300      	str	r3, [sp, #0]
 801d864:	9b06      	ldr	r3, [sp, #24]
 801d866:	f241 327c 	movw	r2, #4988	@ 0x137c
 801d86a:	492a      	ldr	r1, [pc, #168]	@ (801d914 <lfs_fs_deorphan+0x1f4>)
 801d86c:	482f      	ldr	r0, [pc, #188]	@ (801d92c <lfs_fs_deorphan+0x20c>)
 801d86e:	f00b fea1 	bl	80295b4 <printf>
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801d872:	2200      	movs	r2, #0
 801d874:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801d878:	4628      	mov	r0, r5
 801d87a:	f7fc ffed 	bl	801a858 <lfs_fs_prepmove>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801d87e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801d882:	429c      	cmp	r4, r3
 801d884:	d005      	beq.n	801d892 <lfs_fs_deorphan+0x172>
 801d886:	02a3      	lsls	r3, r4, #10
 801d888:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801d88c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801d890:	e7cc      	b.n	801d82c <lfs_fs_deorphan+0x10c>
 801d892:	2300      	movs	r3, #0
 801d894:	e7ca      	b.n	801d82c <lfs_fs_deorphan+0x10c>
                        return state;
 801d896:	4604      	mov	r4, r0
 801d898:	e036      	b.n	801d908 <lfs_fs_deorphan+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d89a:	2301      	movs	r3, #1
 801d89c:	e000      	b.n	801d8a0 <lfs_fs_deorphan+0x180>
 801d89e:	2301      	movs	r3, #1
        while (!lfs_pair_isnull(pdir.tail)) {
 801d8a0:	bb0b      	cbnz	r3, 801d8e6 <lfs_fs_deorphan+0x1c6>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 801d8a2:	aa0c      	add	r2, sp, #48	@ 0x30
 801d8a4:	a90e      	add	r1, sp, #56	@ 0x38
 801d8a6:	4628      	mov	r0, r5
 801d8a8:	f7fe fa12 	bl	801bcd0 <lfs_dir_fetch>
            if (err) {
 801d8ac:	4604      	mov	r4, r0
 801d8ae:	bb58      	cbnz	r0, 801d908 <lfs_fs_deorphan+0x1e8>
            if (!pdir.split) {
 801d8b0:	f89d 302f 	ldrb.w	r3, [sp, #47]	@ 0x2f
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	f43f af4e 	beq.w	801d756 <lfs_fs_deorphan+0x36>
            pdir = dir;
 801d8ba:	f10d 0c18 	add.w	ip, sp, #24
 801d8be:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801d8c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d8c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d8ca:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801d8ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801d8d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d8d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d8d8:	d0e1      	beq.n	801d89e <lfs_fs_deorphan+0x17e>
 801d8da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d8dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d8e0:	d0db      	beq.n	801d89a <lfs_fs_deorphan+0x17a>
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	e7dc      	b.n	801d8a0 <lfs_fs_deorphan+0x180>
        pass = moreorphans ? 0 : pass+1;
 801d8e6:	f1b8 0f00 	cmp.w	r8, #0
 801d8ea:	d101      	bne.n	801d8f0 <lfs_fs_deorphan+0x1d0>
 801d8ec:	3601      	adds	r6, #1
 801d8ee:	e723      	b.n	801d738 <lfs_fs_deorphan+0x18>
 801d8f0:	2600      	movs	r6, #0
 801d8f2:	e721      	b.n	801d738 <lfs_fs_deorphan+0x18>
    return lfs_tag_size(a->tag) & 0x1ff;
 801d8f4:	f895 1030 	ldrb.w	r1, [r5, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 801d8f8:	4249      	negs	r1, r1
 801d8fa:	b249      	sxtb	r1, r1
 801d8fc:	4628      	mov	r0, r5
 801d8fe:	f7fc fffb 	bl	801a8f8 <lfs_fs_preporphans>
 801d902:	4604      	mov	r4, r0
 801d904:	e000      	b.n	801d908 <lfs_fs_deorphan+0x1e8>
        return 0;
 801d906:	2400      	movs	r4, #0
}
 801d908:	4620      	mov	r0, r4
 801d90a:	b024      	add	sp, #144	@ 0x90
 801d90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d910:	0803606c 	.word	0x0803606c
 801d914:	080381c0 	.word	0x080381c0
 801d918:	08038694 	.word	0x08038694
 801d91c:	000ffc08 	.word	0x000ffc08
 801d920:	7ffffc00 	.word	0x7ffffc00
 801d924:	08038608 	.word	0x08038608
 801d928:	600ffc08 	.word	0x600ffc08
 801d92c:	0803864c 	.word	0x0803864c

0801d930 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 801d930:	b510      	push	{r4, lr}
 801d932:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 801d934:	f7ff fcf8 	bl	801d328 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 801d938:	2800      	cmp	r0, #0
 801d93a:	db00      	blt.n	801d93e <lfs_dir_commit+0xe>
    if (orphans) {
 801d93c:	b900      	cbnz	r0, 801d940 <lfs_dir_commit+0x10>
}
 801d93e:	bd10      	pop	{r4, pc}
        int err = lfs_fs_deorphan(lfs, false);
 801d940:	2100      	movs	r1, #0
 801d942:	4620      	mov	r0, r4
 801d944:	f7ff feec 	bl	801d720 <lfs_fs_deorphan>
        if (err) {
 801d948:	e7f9      	b.n	801d93e <lfs_dir_commit+0xe>
	...

0801d94c <lfs_fs_desuperblock>:
static int lfs_fs_desuperblock(lfs_t *lfs) {
 801d94c:	b530      	push	{r4, r5, lr}
 801d94e:	b093      	sub	sp, #76	@ 0x4c
    return lfs_tag_size(a->tag) >> 9;
 801d950:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 801d952:	f413 7f00 	tst.w	r3, #512	@ 0x200
 801d956:	d103      	bne.n	801d960 <lfs_fs_desuperblock+0x14>
        return 0;
 801d958:	2500      	movs	r5, #0
}
 801d95a:	4628      	mov	r0, r5
 801d95c:	b013      	add	sp, #76	@ 0x4c
 801d95e:	bd30      	pop	{r4, r5, pc}
 801d960:	4604      	mov	r4, r0
    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 801d962:	4b1a      	ldr	r3, [pc, #104]	@ (801d9cc <lfs_fs_desuperblock+0x80>)
 801d964:	9301      	str	r3, [sp, #4]
 801d966:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801d968:	9300      	str	r3, [sp, #0]
 801d96a:	6a03      	ldr	r3, [r0, #32]
 801d96c:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 801d970:	4917      	ldr	r1, [pc, #92]	@ (801d9d0 <lfs_fs_desuperblock+0x84>)
 801d972:	4818      	ldr	r0, [pc, #96]	@ (801d9d4 <lfs_fs_desuperblock+0x88>)
 801d974:	f00b fe1e 	bl	80295b4 <printf>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801d978:	f104 0220 	add.w	r2, r4, #32
 801d97c:	a908      	add	r1, sp, #32
 801d97e:	4620      	mov	r0, r4
 801d980:	f7fe f9a6 	bl	801bcd0 <lfs_dir_fetch>
    if (err) {
 801d984:	4605      	mov	r5, r0
 801d986:	2800      	cmp	r0, #0
 801d988:	d1e7      	bne.n	801d95a <lfs_fs_desuperblock+0xe>
        .version     = lfs_fs_disk_version(lfs),
 801d98a:	4620      	mov	r0, r4
 801d98c:	f7fc feb6 	bl	801a6fc <lfs_fs_disk_version>
    lfs_superblock_t superblock = {
 801d990:	9002      	str	r0, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 801d992:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801d994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801d996:	9303      	str	r3, [sp, #12]
        .block_count = lfs->block_count,
 801d998:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 801d99a:	9304      	str	r3, [sp, #16]
        .name_max    = lfs->name_max,
 801d99c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    lfs_superblock_t superblock = {
 801d99e:	9305      	str	r3, [sp, #20]
        .file_max    = lfs->file_max,
 801d9a0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801d9a2:	9306      	str	r3, [sp, #24]
        .attr_max    = lfs->attr_max,
 801d9a4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    lfs_superblock_t superblock = {
 801d9a6:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801d9a8:	4b0b      	ldr	r3, [pc, #44]	@ (801d9d8 <lfs_fs_desuperblock+0x8c>)
 801d9aa:	9310      	str	r3, [sp, #64]	@ 0x40
 801d9ac:	ab02      	add	r3, sp, #8
 801d9ae:	9311      	str	r3, [sp, #68]	@ 0x44
 801d9b0:	2301      	movs	r3, #1
 801d9b2:	aa10      	add	r2, sp, #64	@ 0x40
 801d9b4:	a908      	add	r1, sp, #32
 801d9b6:	4620      	mov	r0, r4
 801d9b8:	f7ff ffba 	bl	801d930 <lfs_dir_commit>
    if (err) {
 801d9bc:	4605      	mov	r5, r0
 801d9be:	2800      	cmp	r0, #0
 801d9c0:	d1cb      	bne.n	801d95a <lfs_fs_desuperblock+0xe>
    lfs_fs_prepsuperblock(lfs, false);
 801d9c2:	2100      	movs	r1, #0
 801d9c4:	4620      	mov	r0, r4
 801d9c6:	f7fc ff40 	bl	801a84a <lfs_fs_prepsuperblock>
    return 0;
 801d9ca:	e7c6      	b.n	801d95a <lfs_fs_desuperblock+0xe>
 801d9cc:	0803606c 	.word	0x0803606c
 801d9d0:	080381c0 	.word	0x080381c0
 801d9d4:	080386c4 	.word	0x080386c4
 801d9d8:	20100018 	.word	0x20100018

0801d9dc <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
 801d9dc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    return (tag & 0x70000000) >> 20;
 801d9de:	0d1a      	lsrs	r2, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 801d9e0:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801d9e4:	d101      	bne.n	801d9ea <lfs_fs_demove+0xe>
        return 0;
 801d9e6:	2000      	movs	r0, #0
}
 801d9e8:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
 801d9ea:	b530      	push	{r4, r5, lr}
 801d9ec:	b08f      	sub	sp, #60	@ 0x3c
 801d9ee:	4604      	mov	r4, r0
    return (tag & 0x000ffc00) >> 10;
 801d9f0:	f3c3 2389 	ubfx	r3, r3, #10, #10
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 801d9f4:	4a1d      	ldr	r2, [pc, #116]	@ (801da6c <lfs_fs_demove+0x90>)
 801d9f6:	9202      	str	r2, [sp, #8]
 801d9f8:	9301      	str	r3, [sp, #4]
 801d9fa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801d9fc:	9300      	str	r3, [sp, #0]
 801d9fe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801da00:	f241 3224 	movw	r2, #4900	@ 0x1324
 801da04:	491a      	ldr	r1, [pc, #104]	@ (801da70 <lfs_fs_demove+0x94>)
 801da06:	481b      	ldr	r0, [pc, #108]	@ (801da74 <lfs_fs_demove+0x98>)
 801da08:	f00b fdd4 	bl	80295b4 <printf>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801da0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    return (tag & 0x7ff00000) >> 20;
 801da0e:	f3c3 530a 	ubfx	r3, r3, #20, #11
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801da12:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 801da16:	4293      	cmp	r3, r2
 801da18:	d108      	bne.n	801da2c <lfs_fs_demove+0x50>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801da1a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 801da1e:	a904      	add	r1, sp, #16
 801da20:	4620      	mov	r0, r4
 801da22:	f7fe f955 	bl	801bcd0 <lfs_dir_fetch>
    if (err) {
 801da26:	b140      	cbz	r0, 801da3a <lfs_fs_demove+0x5e>
}
 801da28:	b00f      	add	sp, #60	@ 0x3c
 801da2a:	bd30      	pop	{r4, r5, pc}
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 801da2c:	4b12      	ldr	r3, [pc, #72]	@ (801da78 <lfs_fs_demove+0x9c>)
 801da2e:	4a13      	ldr	r2, [pc, #76]	@ (801da7c <lfs_fs_demove+0xa0>)
 801da30:	f241 312b 	movw	r1, #4907	@ 0x132b
 801da34:	480e      	ldr	r0, [pc, #56]	@ (801da70 <lfs_fs_demove+0x94>)
 801da36:	f00b fd89 	bl	802954c <__assert_func>
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 801da3a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
    return (tag & 0x000ffc00) >> 10;
 801da3c:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801da40:	2200      	movs	r2, #0
 801da42:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801da46:	4620      	mov	r0, r4
 801da48:	f7fc ff06 	bl	801a858 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801da4c:	02ab      	lsls	r3, r5, #10
 801da4e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801da52:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801da56:	930c      	str	r3, [sp, #48]	@ 0x30
 801da58:	2300      	movs	r3, #0
 801da5a:	930d      	str	r3, [sp, #52]	@ 0x34
 801da5c:	2301      	movs	r3, #1
 801da5e:	aa0c      	add	r2, sp, #48	@ 0x30
 801da60:	a904      	add	r1, sp, #16
 801da62:	4620      	mov	r0, r4
 801da64:	f7ff ff64 	bl	801d930 <lfs_dir_commit>
    if (err) {
 801da68:	e7de      	b.n	801da28 <lfs_fs_demove+0x4c>
 801da6a:	bf00      	nop
 801da6c:	0803606c 	.word	0x0803606c
 801da70:	080381c0 	.word	0x080381c0
 801da74:	080386f8 	.word	0x080386f8
 801da78:	0803872c 	.word	0x0803872c
 801da7c:	08038e80 	.word	0x08038e80

0801da80 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 801da80:	b510      	push	{r4, lr}
 801da82:	4604      	mov	r4, r0
    int err = lfs_fs_desuperblock(lfs);
 801da84:	f7ff ff62 	bl	801d94c <lfs_fs_desuperblock>
    if (err) {
 801da88:	4603      	mov	r3, r0
 801da8a:	b108      	cbz	r0, 801da90 <lfs_fs_forceconsistency+0x10>
}
 801da8c:	4618      	mov	r0, r3
 801da8e:	bd10      	pop	{r4, pc}
    err = lfs_fs_demove(lfs);
 801da90:	4620      	mov	r0, r4
 801da92:	f7ff ffa3 	bl	801d9dc <lfs_fs_demove>
    if (err) {
 801da96:	4603      	mov	r3, r0
 801da98:	2800      	cmp	r0, #0
 801da9a:	d1f7      	bne.n	801da8c <lfs_fs_forceconsistency+0xc>
    err = lfs_fs_deorphan(lfs, true);
 801da9c:	2101      	movs	r1, #1
 801da9e:	4620      	mov	r0, r4
 801daa0:	f7ff fe3e 	bl	801d720 <lfs_fs_deorphan>
 801daa4:	4603      	mov	r3, r0
    if (err) {
 801daa6:	e7f1      	b.n	801da8c <lfs_fs_forceconsistency+0xc>

0801daa8 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 801daa8:	b570      	push	{r4, r5, r6, lr}
 801daaa:	b082      	sub	sp, #8
 801daac:	4605      	mov	r5, r0
 801daae:	460e      	mov	r6, r1
 801dab0:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 801dab2:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 801dab6:	4621      	mov	r1, r4
 801dab8:	f7fd f92a 	bl	801ad10 <lfs_dir_getgstate>
    if (err) {
 801dabc:	b108      	cbz	r0, 801dac2 <lfs_dir_drop+0x1a>
}
 801dabe:	b002      	add	sp, #8
 801dac0:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
 801dac2:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 801dac6:	7de2      	ldrb	r2, [r4, #23]
 801dac8:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 801dacc:	4b05      	ldr	r3, [pc, #20]	@ (801dae4 <lfs_dir_drop+0x3c>)
 801dace:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801dad2:	9300      	str	r3, [sp, #0]
 801dad4:	9101      	str	r1, [sp, #4]
 801dad6:	2301      	movs	r3, #1
 801dad8:	466a      	mov	r2, sp
 801dada:	4631      	mov	r1, r6
 801dadc:	4628      	mov	r0, r5
 801dade:	f7ff ff27 	bl	801d930 <lfs_dir_commit>
    if (err) {
 801dae2:	e7ec      	b.n	801dabe <lfs_dir_drop+0x16>
 801dae4:	000ffc08 	.word	0x000ffc08

0801dae8 <lfs_file_sync_>:
    if (file->flags & LFS_F_ERRED) {
 801dae8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 801daea:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 801daee:	d001      	beq.n	801daf4 <lfs_file_sync_+0xc>
        return 0;
 801daf0:	2000      	movs	r0, #0
}
 801daf2:	4770      	bx	lr
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 801daf4:	b530      	push	{r4, r5, lr}
 801daf6:	b087      	sub	sp, #28
 801daf8:	4605      	mov	r5, r0
 801dafa:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
 801dafc:	f7fe fcae 	bl	801c45c <lfs_file_flush>
    if (err) {
 801db00:	2800      	cmp	r0, #0
 801db02:	d136      	bne.n	801db72 <lfs_file_sync_+0x8a>
    if ((file->flags & LFS_F_DIRTY) &&
 801db04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db06:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801db0a:	d036      	beq.n	801db7a <lfs_file_sync_+0x92>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801db0c:	68a2      	ldr	r2, [r4, #8]
 801db0e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801db12:	d036      	beq.n	801db82 <lfs_file_sync_+0x9a>
 801db14:	68e2      	ldr	r2, [r4, #12]
 801db16:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801db1a:	d030      	beq.n	801db7e <lfs_file_sync_+0x96>
 801db1c:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
 801db1e:	f012 0f01 	tst.w	r2, #1
 801db22:	d12a      	bne.n	801db7a <lfs_file_sync_+0x92>
        if (!(file->flags & LFS_F_INLINE)) {
 801db24:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801db28:	d02d      	beq.n	801db86 <lfs_file_sync_+0x9e>
        if (file->flags & LFS_F_INLINE) {
 801db2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db2c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 801db30:	d033      	beq.n	801db9a <lfs_file_sync_+0xb2>
            buffer = file->cache.buffer;
 801db32:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 801db34:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 801db36:	f240 2201 	movw	r2, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801db3a:	88a3      	ldrh	r3, [r4, #4]
 801db3c:	029b      	lsls	r3, r3, #10
 801db3e:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
 801db42:	4302      	orrs	r2, r0
 801db44:	9202      	str	r2, [sp, #8]
 801db46:	9103      	str	r1, [sp, #12]
 801db48:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801db4a:	6891      	ldr	r1, [r2, #8]
 801db4c:	430b      	orrs	r3, r1
 801db4e:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 801db52:	9304      	str	r3, [sp, #16]
 801db54:	6853      	ldr	r3, [r2, #4]
 801db56:	9305      	str	r3, [sp, #20]
 801db58:	2302      	movs	r3, #2
 801db5a:	aa02      	add	r2, sp, #8
 801db5c:	f104 0108 	add.w	r1, r4, #8
 801db60:	4628      	mov	r0, r5
 801db62:	f7ff fee5 	bl	801d930 <lfs_dir_commit>
        if (err) {
 801db66:	bb20      	cbnz	r0, 801dbb2 <lfs_file_sync_+0xca>
        file->flags &= ~LFS_F_DIRTY;
 801db68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801db6e:	6323      	str	r3, [r4, #48]	@ 0x30
 801db70:	e003      	b.n	801db7a <lfs_file_sync_+0x92>
        file->flags |= LFS_F_ERRED;
 801db72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801db74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801db78:	6323      	str	r3, [r4, #48]	@ 0x30
}
 801db7a:	b007      	add	sp, #28
 801db7c:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801db7e:	2201      	movs	r2, #1
 801db80:	e7cd      	b.n	801db1e <lfs_file_sync_+0x36>
 801db82:	2201      	movs	r2, #1
 801db84:	e7cb      	b.n	801db1e <lfs_file_sync_+0x36>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801db86:	2300      	movs	r3, #0
 801db88:	462a      	mov	r2, r5
 801db8a:	f105 0110 	add.w	r1, r5, #16
 801db8e:	4628      	mov	r0, r5
 801db90:	f7fd fc82 	bl	801b498 <lfs_bd_sync>
            if (err) {
 801db94:	2800      	cmp	r0, #0
 801db96:	d0c8      	beq.n	801db2a <lfs_file_sync_+0x42>
 801db98:	e7ef      	b.n	801db7a <lfs_file_sync_+0x92>
            ctz = file->ctz;
 801db9a:	466b      	mov	r3, sp
 801db9c:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 801dba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dba4:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 801dba8:	2008      	movs	r0, #8
            buffer = &ctz;
 801dbaa:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
 801dbac:	f240 2202 	movw	r2, #514	@ 0x202
 801dbb0:	e7c3      	b.n	801db3a <lfs_file_sync_+0x52>
            file->flags |= LFS_F_ERRED;
 801dbb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dbb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801dbb8:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 801dbba:	e7de      	b.n	801db7a <lfs_file_sync_+0x92>

0801dbbc <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
 801dbbc:	b510      	push	{r4, lr}
 801dbbe:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 801dbc0:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801dbc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801dbc4:	b13b      	cbz	r3, 801dbd6 <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
 801dbc6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801dbc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dbca:	b143      	cbz	r3, 801dbde <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
 801dbcc:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801dbce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dbd0:	b14b      	cbz	r3, 801dbe6 <lfs_deinit+0x2a>
}
 801dbd2:	2000      	movs	r0, #0
 801dbd4:	bd10      	pop	{r4, pc}
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 801dbd6:	68c0      	ldr	r0, [r0, #12]
 801dbd8:	f7fc fb00 	bl	801a1dc <vPortFree>
#else
    (void)p;
#endif
}
 801dbdc:	e7f3      	b.n	801dbc6 <lfs_deinit+0xa>
    free(p);
 801dbde:	69e0      	ldr	r0, [r4, #28]
 801dbe0:	f7fc fafc 	bl	801a1dc <vPortFree>
}
 801dbe4:	e7f2      	b.n	801dbcc <lfs_deinit+0x10>
    free(p);
 801dbe6:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801dbe8:	f7fc faf8 	bl	801a1dc <vPortFree>
}
 801dbec:	e7f1      	b.n	801dbd2 <lfs_deinit+0x16>
	...

0801dbf0 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 801dbf0:	b538      	push	{r3, r4, r5, lr}
    lfs->cfg = cfg;
 801dbf2:	6681      	str	r1, [r0, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 801dbf4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801dbf6:	66c3      	str	r3, [r0, #108]	@ 0x6c
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801dbf8:	69cb      	ldr	r3, [r1, #28]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	f000 80b1 	beq.w	801dd62 <lfs_init+0x172>
 801dc00:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801dc02:	6a0a      	ldr	r2, [r1, #32]
 801dc04:	2a00      	cmp	r2, #0
 801dc06:	f000 80b3 	beq.w	801dd70 <lfs_init+0x180>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801dc0a:	6b08      	ldr	r0, [r1, #48]	@ 0x30
 801dc0c:	2800      	cmp	r0, #0
 801dc0e:	f000 80b6 	beq.w	801dd7e <lfs_init+0x18e>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801dc12:	fbb0 fcf3 	udiv	ip, r0, r3
 801dc16:	fb03 031c 	mls	r3, r3, ip, r0
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	f040 80b6 	bne.w	801dd8c <lfs_init+0x19c>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801dc20:	fbb0 f3f2 	udiv	r3, r0, r2
 801dc24:	fb02 0313 	mls	r3, r2, r3, r0
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	f040 80b6 	bne.w	801dd9a <lfs_init+0x1aa>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801dc2e:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801dc30:	fbb2 f3f0 	udiv	r3, r2, r0
 801dc34:	fb00 2313 	mls	r3, r0, r3, r2
 801dc38:	2b00      	cmp	r3, #0
 801dc3a:	f040 80b5 	bne.w	801dda8 <lfs_init+0x1b8>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801dc3e:	2a7f      	cmp	r2, #127	@ 0x7f
 801dc40:	f240 80b9 	bls.w	801ddb6 <lfs_init+0x1c6>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801dc44:	f1a2 0c08 	sub.w	ip, r2, #8
 801dc48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dc4c:	fbb3 f3fc 	udiv	r3, r3, ip
    return 32 - __builtin_clz(a-1);
 801dc50:	3b01      	subs	r3, #1
 801dc52:	fab3 f383 	clz	r3, r3
 801dc56:	f1c3 0320 	rsb	r3, r3, #32
 801dc5a:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 801dc5e:	f0c0 80b1 	bcc.w	801ddc4 <lfs_init+0x1d4>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801dc62:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	f000 80b4 	beq.w	801ddd2 <lfs_init+0x1e2>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801dc6a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 801dc6c:	b11b      	cbz	r3, 801dc76 <lfs_init+0x86>
 801dc6e:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 801dc72:	f0c0 80b5 	bcc.w	801dde0 <lfs_init+0x1f0>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801dc76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dc7a:	d002      	beq.n	801dc82 <lfs_init+0x92>
 801dc7c:	429a      	cmp	r2, r3
 801dc7e:	f0c0 80b6 	bcc.w	801ddee <lfs_init+0x1fe>
    if (lfs->cfg->read_buffer) {
 801dc82:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	f000 80b9 	beq.w	801ddfc <lfs_init+0x20c>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 801dc8a:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 801dc8c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801dc8e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	f000 80bf 	beq.w	801de14 <lfs_init+0x224>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801dc96:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 801dc98:	4621      	mov	r1, r4
 801dc9a:	4620      	mov	r0, r4
 801dc9c:	f7fc fe5c 	bl	801a958 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 801dca0:	f104 0110 	add.w	r1, r4, #16
 801dca4:	4620      	mov	r0, r4
 801dca6:	f7fc fe57 	bl	801a958 <lfs_cache_zero>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801dcaa:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801dcac:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801dcae:	2800      	cmp	r0, #0
 801dcb0:	f000 80b8 	beq.w	801de24 <lfs_init+0x234>
    if (lfs->cfg->lookahead_buffer) {
 801dcb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dcb6:	2b00      	cmp	r3, #0
 801dcb8:	f000 80bb 	beq.w	801de32 <lfs_init+0x242>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 801dcbc:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801dcbe:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801dcc0:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801dcc2:	2bff      	cmp	r3, #255	@ 0xff
 801dcc4:	f200 80bc 	bhi.w	801de40 <lfs_init+0x250>
    lfs->name_max = lfs->cfg->name_max;
 801dcc8:	6723      	str	r3, [r4, #112]	@ 0x70
    if (!lfs->name_max) {
 801dcca:	b90b      	cbnz	r3, 801dcd0 <lfs_init+0xe0>
        lfs->name_max = LFS_NAME_MAX;
 801dccc:	23ff      	movs	r3, #255	@ 0xff
 801dcce:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801dcd0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	f2c0 80bb 	blt.w	801de4e <lfs_init+0x25e>
    lfs->file_max = lfs->cfg->file_max;
 801dcd8:	6763      	str	r3, [r4, #116]	@ 0x74
    if (!lfs->file_max) {
 801dcda:	b913      	cbnz	r3, 801dce2 <lfs_init+0xf2>
        lfs->file_max = LFS_FILE_MAX;
 801dcdc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801dce0:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801dce2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 801dce4:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 801dce8:	428b      	cmp	r3, r1
 801dcea:	f200 80b7 	bhi.w	801de5c <lfs_init+0x26c>
    lfs->attr_max = lfs->cfg->attr_max;
 801dcee:	67a3      	str	r3, [r4, #120]	@ 0x78
    if (!lfs->attr_max) {
 801dcf0:	b913      	cbnz	r3, 801dcf8 <lfs_init+0x108>
        lfs->attr_max = LFS_ATTR_MAX;
 801dcf2:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801dcf6:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801dcf8:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 801dcfa:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 801dcfc:	4288      	cmp	r0, r1
 801dcfe:	f200 80b4 	bhi.w	801de6a <lfs_init+0x27a>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801dd02:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801dd04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dd08:	d003      	beq.n	801dd12 <lfs_init+0x122>
 801dd0a:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801dd0c:	42ab      	cmp	r3, r5
 801dd0e:	f200 80b3 	bhi.w	801de78 <lfs_init+0x288>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801dd12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dd16:	d003      	beq.n	801dd20 <lfs_init+0x130>
 801dd18:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
 801dd1a:	42ab      	cmp	r3, r5
 801dd1c:	f200 80b3 	bhi.w	801de86 <lfs_init+0x296>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801dd20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dd24:	d006      	beq.n	801dd34 <lfs_init+0x144>
 801dd26:	2800      	cmp	r0, #0
 801dd28:	f000 80b4 	beq.w	801de94 <lfs_init+0x2a4>
 801dd2c:	08c1      	lsrs	r1, r0, #3
 801dd2e:	428b      	cmp	r3, r1
 801dd30:	f200 80b2 	bhi.w	801de98 <lfs_init+0x2a8>
    lfs->inline_max = lfs->cfg->inline_max;
 801dd34:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 801dd36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801dd3a:	f000 80b4 	beq.w	801dea6 <lfs_init+0x2b6>
    } else if (lfs->inline_max == 0) {
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	f040 80b3 	bne.w	801deaa <lfs_init+0x2ba>
                lfs->cfg->cache_size,
 801dd44:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 801dd46:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
                    ((lfs->cfg->metadata_max)
 801dd48:	6d53      	ldr	r3, [r2, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	f000 80be 	beq.w	801decc <lfs_init+0x2dc>
 801dd50:	08db      	lsrs	r3, r3, #3
    return (a < b) ? a : b;
 801dd52:	4283      	cmp	r3, r0
 801dd54:	bf28      	it	cs
 801dd56:	4603      	movcs	r3, r0
 801dd58:	428b      	cmp	r3, r1
 801dd5a:	bf28      	it	cs
 801dd5c:	460b      	movcs	r3, r1
 801dd5e:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801dd60:	e0a3      	b.n	801deaa <lfs_init+0x2ba>
    LFS_ASSERT(lfs->cfg->read_size != 0);
 801dd62:	4b5c      	ldr	r3, [pc, #368]	@ (801ded4 <lfs_init+0x2e4>)
 801dd64:	4a5c      	ldr	r2, [pc, #368]	@ (801ded8 <lfs_init+0x2e8>)
 801dd66:	f241 0152 	movw	r1, #4178	@ 0x1052
 801dd6a:	485c      	ldr	r0, [pc, #368]	@ (801dedc <lfs_init+0x2ec>)
 801dd6c:	f00b fbee 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 801dd70:	4b5b      	ldr	r3, [pc, #364]	@ (801dee0 <lfs_init+0x2f0>)
 801dd72:	4a59      	ldr	r2, [pc, #356]	@ (801ded8 <lfs_init+0x2e8>)
 801dd74:	f241 0153 	movw	r1, #4179	@ 0x1053
 801dd78:	4858      	ldr	r0, [pc, #352]	@ (801dedc <lfs_init+0x2ec>)
 801dd7a:	f00b fbe7 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 801dd7e:	4b59      	ldr	r3, [pc, #356]	@ (801dee4 <lfs_init+0x2f4>)
 801dd80:	4a55      	ldr	r2, [pc, #340]	@ (801ded8 <lfs_init+0x2e8>)
 801dd82:	f241 0154 	movw	r1, #4180	@ 0x1054
 801dd86:	4855      	ldr	r0, [pc, #340]	@ (801dedc <lfs_init+0x2ec>)
 801dd88:	f00b fbe0 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801dd8c:	4b56      	ldr	r3, [pc, #344]	@ (801dee8 <lfs_init+0x2f8>)
 801dd8e:	4a52      	ldr	r2, [pc, #328]	@ (801ded8 <lfs_init+0x2e8>)
 801dd90:	f241 0158 	movw	r1, #4184	@ 0x1058
 801dd94:	4851      	ldr	r0, [pc, #324]	@ (801dedc <lfs_init+0x2ec>)
 801dd96:	f00b fbd9 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 801dd9a:	4b54      	ldr	r3, [pc, #336]	@ (801deec <lfs_init+0x2fc>)
 801dd9c:	4a4e      	ldr	r2, [pc, #312]	@ (801ded8 <lfs_init+0x2e8>)
 801dd9e:	f241 0159 	movw	r1, #4185	@ 0x1059
 801dda2:	484e      	ldr	r0, [pc, #312]	@ (801dedc <lfs_init+0x2ec>)
 801dda4:	f00b fbd2 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801dda8:	4b51      	ldr	r3, [pc, #324]	@ (801def0 <lfs_init+0x300>)
 801ddaa:	4a4b      	ldr	r2, [pc, #300]	@ (801ded8 <lfs_init+0x2e8>)
 801ddac:	f241 015a 	movw	r1, #4186	@ 0x105a
 801ddb0:	484a      	ldr	r0, [pc, #296]	@ (801dedc <lfs_init+0x2ec>)
 801ddb2:	f00b fbcb 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 801ddb6:	4b4f      	ldr	r3, [pc, #316]	@ (801def4 <lfs_init+0x304>)
 801ddb8:	4a47      	ldr	r2, [pc, #284]	@ (801ded8 <lfs_init+0x2e8>)
 801ddba:	f241 015d 	movw	r1, #4189	@ 0x105d
 801ddbe:	4847      	ldr	r0, [pc, #284]	@ (801dedc <lfs_init+0x2ec>)
 801ddc0:	f00b fbc4 	bl	802954c <__assert_func>
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 801ddc4:	4b4c      	ldr	r3, [pc, #304]	@ (801def8 <lfs_init+0x308>)
 801ddc6:	4a44      	ldr	r2, [pc, #272]	@ (801ded8 <lfs_init+0x2e8>)
 801ddc8:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 801ddcc:	4843      	ldr	r0, [pc, #268]	@ (801dedc <lfs_init+0x2ec>)
 801ddce:	f00b fbbd 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 801ddd2:	4b4a      	ldr	r3, [pc, #296]	@ (801defc <lfs_init+0x30c>)
 801ddd4:	4a40      	ldr	r2, [pc, #256]	@ (801ded8 <lfs_init+0x2e8>)
 801ddd6:	f241 0169 	movw	r1, #4201	@ 0x1069
 801ddda:	4840      	ldr	r0, [pc, #256]	@ (801dedc <lfs_init+0x2ec>)
 801dddc:	f00b fbb6 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 801dde0:	4b47      	ldr	r3, [pc, #284]	@ (801df00 <lfs_init+0x310>)
 801dde2:	4a3d      	ldr	r2, [pc, #244]	@ (801ded8 <lfs_init+0x2e8>)
 801dde4:	f241 016f 	movw	r1, #4207	@ 0x106f
 801dde8:	483c      	ldr	r0, [pc, #240]	@ (801dedc <lfs_init+0x2ec>)
 801ddea:	f00b fbaf 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 801ddee:	4b45      	ldr	r3, [pc, #276]	@ (801df04 <lfs_init+0x314>)
 801ddf0:	4a39      	ldr	r2, [pc, #228]	@ (801ded8 <lfs_init+0x2e8>)
 801ddf2:	f241 0171 	movw	r1, #4209	@ 0x1071
 801ddf6:	4839      	ldr	r0, [pc, #228]	@ (801dedc <lfs_init+0x2ec>)
 801ddf8:	f00b fba8 	bl	802954c <__assert_func>
    return malloc(size);
 801ddfc:	f7fc f96c 	bl	801a0d8 <pvPortMalloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801de00:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 801de02:	2800      	cmp	r0, #0
 801de04:	f47f af42 	bne.w	801dc8c <lfs_init+0x9c>
    lfs_deinit(lfs);
 801de08:	4620      	mov	r0, r4
 801de0a:	f7ff fed7 	bl	801dbbc <lfs_deinit>
    return err;
 801de0e:	f06f 000b 	mvn.w	r0, #11
 801de12:	e05a      	b.n	801deca <lfs_init+0x2da>
 801de14:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 801de16:	f7fc f95f 	bl	801a0d8 <pvPortMalloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801de1a:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 801de1c:	2800      	cmp	r0, #0
 801de1e:	f47f af3b 	bne.w	801dc98 <lfs_init+0xa8>
 801de22:	e7f1      	b.n	801de08 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 801de24:	4b38      	ldr	r3, [pc, #224]	@ (801df08 <lfs_init+0x318>)
 801de26:	4a2c      	ldr	r2, [pc, #176]	@ (801ded8 <lfs_init+0x2e8>)
 801de28:	f241 0190 	movw	r1, #4240	@ 0x1090
 801de2c:	482b      	ldr	r0, [pc, #172]	@ (801dedc <lfs_init+0x2ec>)
 801de2e:	f00b fb8d 	bl	802954c <__assert_func>
 801de32:	f7fc f951 	bl	801a0d8 <pvPortMalloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801de36:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 801de38:	2800      	cmp	r0, #0
 801de3a:	f47f af40 	bne.w	801dcbe <lfs_init+0xce>
 801de3e:	e7e3      	b.n	801de08 <lfs_init+0x218>
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 801de40:	4b32      	ldr	r3, [pc, #200]	@ (801df0c <lfs_init+0x31c>)
 801de42:	4a25      	ldr	r2, [pc, #148]	@ (801ded8 <lfs_init+0x2e8>)
 801de44:	f241 019c 	movw	r1, #4252	@ 0x109c
 801de48:	4824      	ldr	r0, [pc, #144]	@ (801dedc <lfs_init+0x2ec>)
 801de4a:	f00b fb7f 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801de4e:	4b30      	ldr	r3, [pc, #192]	@ (801df10 <lfs_init+0x320>)
 801de50:	4a21      	ldr	r2, [pc, #132]	@ (801ded8 <lfs_init+0x2e8>)
 801de52:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 801de56:	4821      	ldr	r0, [pc, #132]	@ (801dedc <lfs_init+0x2ec>)
 801de58:	f00b fb78 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 801de5c:	4b2d      	ldr	r3, [pc, #180]	@ (801df14 <lfs_init+0x324>)
 801de5e:	4a1e      	ldr	r2, [pc, #120]	@ (801ded8 <lfs_init+0x2e8>)
 801de60:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 801de64:	481d      	ldr	r0, [pc, #116]	@ (801dedc <lfs_init+0x2ec>)
 801de66:	f00b fb71 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 801de6a:	4b2b      	ldr	r3, [pc, #172]	@ (801df18 <lfs_init+0x328>)
 801de6c:	4a1a      	ldr	r2, [pc, #104]	@ (801ded8 <lfs_init+0x2e8>)
 801de6e:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801de72:	481a      	ldr	r0, [pc, #104]	@ (801dedc <lfs_init+0x2ec>)
 801de74:	f00b fb6a 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801de78:	4b28      	ldr	r3, [pc, #160]	@ (801df1c <lfs_init+0x32c>)
 801de7a:	4a17      	ldr	r2, [pc, #92]	@ (801ded8 <lfs_init+0x2e8>)
 801de7c:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 801de80:	4816      	ldr	r0, [pc, #88]	@ (801dedc <lfs_init+0x2ec>)
 801de82:	f00b fb63 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801de86:	4b26      	ldr	r3, [pc, #152]	@ (801df20 <lfs_init+0x330>)
 801de88:	4a13      	ldr	r2, [pc, #76]	@ (801ded8 <lfs_init+0x2e8>)
 801de8a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801de8e:	4813      	ldr	r0, [pc, #76]	@ (801dedc <lfs_init+0x2ec>)
 801de90:	f00b fb5c 	bl	802954c <__assert_func>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801de94:	08c9      	lsrs	r1, r1, #3
 801de96:	e74a      	b.n	801dd2e <lfs_init+0x13e>
 801de98:	4b22      	ldr	r3, [pc, #136]	@ (801df24 <lfs_init+0x334>)
 801de9a:	4a0f      	ldr	r2, [pc, #60]	@ (801ded8 <lfs_init+0x2e8>)
 801de9c:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 801dea0:	480e      	ldr	r0, [pc, #56]	@ (801dedc <lfs_init+0x2ec>)
 801dea2:	f00b fb53 	bl	802954c <__assert_func>
        lfs->inline_max = 0;
 801dea6:	2300      	movs	r3, #0
 801dea8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    lfs->root[0] = LFS_BLOCK_NULL;
 801deaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801deae:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801deb0:	6263      	str	r3, [r4, #36]	@ 0x24
    lfs->mlist = NULL;
 801deb2:	2000      	movs	r0, #0
 801deb4:	62a0      	str	r0, [r4, #40]	@ 0x28
    lfs->seed = 0;
 801deb6:	62e0      	str	r0, [r4, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 801deb8:	63e0      	str	r0, [r4, #60]	@ 0x3c
 801deba:	6420      	str	r0, [r4, #64]	@ 0x40
 801debc:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 801debe:	6320      	str	r0, [r4, #48]	@ 0x30
 801dec0:	6360      	str	r0, [r4, #52]	@ 0x34
 801dec2:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 801dec4:	64a0      	str	r0, [r4, #72]	@ 0x48
 801dec6:	64e0      	str	r0, [r4, #76]	@ 0x4c
 801dec8:	6520      	str	r0, [r4, #80]	@ 0x50
}
 801deca:	bd38      	pop	{r3, r4, r5, pc}
                        : lfs->cfg->block_size)/8));
 801decc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 801dece:	08db      	lsrs	r3, r3, #3
 801ded0:	e73f      	b.n	801dd52 <lfs_init+0x162>
 801ded2:	bf00      	nop
 801ded4:	08038760 	.word	0x08038760
 801ded8:	08038f40 	.word	0x08038f40
 801dedc:	080381c0 	.word	0x080381c0
 801dee0:	0803877c 	.word	0x0803877c
 801dee4:	08038798 	.word	0x08038798
 801dee8:	080387b4 	.word	0x080387b4
 801deec:	080387e4 	.word	0x080387e4
 801def0:	08038814 	.word	0x08038814
 801def4:	08038848 	.word	0x08038848
 801def8:	08038864 	.word	0x08038864
 801defc:	080388b0 	.word	0x080388b0
 801df00:	080388cc 	.word	0x080388cc
 801df04:	08038920 	.word	0x08038920
 801df08:	08038980 	.word	0x08038980
 801df0c:	080389a0 	.word	0x080389a0
 801df10:	080389bc 	.word	0x080389bc
 801df14:	080389e0 	.word	0x080389e0
 801df18:	080389fc 	.word	0x080389fc
 801df1c:	08038a2c 	.word	0x08038a2c
 801df20:	08038a84 	.word	0x08038a84
 801df24:	08038ad4 	.word	0x08038ad4

0801df28 <lfs_format_>:
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 801df28:	b570      	push	{r4, r5, r6, lr}
 801df2a:	b096      	sub	sp, #88	@ 0x58
 801df2c:	4604      	mov	r4, r0
 801df2e:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 801df30:	f7ff fe5e 	bl	801dbf0 <lfs_init>
        if (err) {
 801df34:	4606      	mov	r6, r0
 801df36:	b9f0      	cbnz	r0, 801df76 <lfs_format_+0x4e>
        LFS_ASSERT(cfg->block_count != 0);
 801df38:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801df3a:	b1fb      	cbz	r3, 801df7c <lfs_format_+0x54>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 801df3c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801df3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801df40:	2100      	movs	r1, #0
 801df42:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801df44:	f00e f854 	bl	802bff0 <memset>
        lfs->lookahead.start = 0;
 801df48:	2200      	movs	r2, #0
 801df4a:	6562      	str	r2, [r4, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801df4c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801df4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801df50:	00db      	lsls	r3, r3, #3
 801df52:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
    return (a < b) ? a : b;
 801df54:	428b      	cmp	r3, r1
 801df56:	bf28      	it	cs
 801df58:	460b      	movcs	r3, r1
 801df5a:	65a3      	str	r3, [r4, #88]	@ 0x58
        lfs->lookahead.next = 0;
 801df5c:	65e2      	str	r2, [r4, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801df5e:	4620      	mov	r0, r4
 801df60:	f7fc fbda 	bl	801a718 <lfs_alloc_ckpoint>
        err = lfs_dir_alloc(lfs, &root);
 801df64:	a906      	add	r1, sp, #24
 801df66:	4620      	mov	r0, r4
 801df68:	f7fe f820 	bl	801bfac <lfs_dir_alloc>
        if (err) {
 801df6c:	4606      	mov	r6, r0
 801df6e:	b160      	cbz	r0, 801df8a <lfs_format_+0x62>
    lfs_deinit(lfs);
 801df70:	4620      	mov	r0, r4
 801df72:	f7ff fe23 	bl	801dbbc <lfs_deinit>
}
 801df76:	4630      	mov	r0, r6
 801df78:	b016      	add	sp, #88	@ 0x58
 801df7a:	bd70      	pop	{r4, r5, r6, pc}
        LFS_ASSERT(cfg->block_count != 0);
 801df7c:	4b20      	ldr	r3, [pc, #128]	@ (801e000 <lfs_format_+0xd8>)
 801df7e:	4a21      	ldr	r2, [pc, #132]	@ (801e004 <lfs_format_+0xdc>)
 801df80:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801df84:	4820      	ldr	r0, [pc, #128]	@ (801e008 <lfs_format_+0xe0>)
 801df86:	f00b fae1 	bl	802954c <__assert_func>
            .version     = lfs_fs_disk_version(lfs),
 801df8a:	4620      	mov	r0, r4
 801df8c:	f7fc fbb6 	bl	801a6fc <lfs_fs_disk_version>
        lfs_superblock_t superblock = {
 801df90:	9000      	str	r0, [sp, #0]
            .block_size  = lfs->cfg->block_size,
 801df92:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 801df94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 801df96:	9301      	str	r3, [sp, #4]
            .block_count = lfs->block_count,
 801df98:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801df9a:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
 801df9c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        lfs_superblock_t superblock = {
 801df9e:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
 801dfa0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
        lfs_superblock_t superblock = {
 801dfa2:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
 801dfa4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801dfa6:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801dfa8:	4b18      	ldr	r3, [pc, #96]	@ (801e00c <lfs_format_+0xe4>)
 801dfaa:	930e      	str	r3, [sp, #56]	@ 0x38
 801dfac:	2300      	movs	r3, #0
 801dfae:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dfb0:	4b17      	ldr	r3, [pc, #92]	@ (801e010 <lfs_format_+0xe8>)
 801dfb2:	9310      	str	r3, [sp, #64]	@ 0x40
 801dfb4:	4b17      	ldr	r3, [pc, #92]	@ (801e014 <lfs_format_+0xec>)
 801dfb6:	9311      	str	r3, [sp, #68]	@ 0x44
 801dfb8:	4b17      	ldr	r3, [pc, #92]	@ (801e018 <lfs_format_+0xf0>)
 801dfba:	9312      	str	r3, [sp, #72]	@ 0x48
 801dfbc:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
 801dfc0:	2303      	movs	r3, #3
 801dfc2:	aa0e      	add	r2, sp, #56	@ 0x38
 801dfc4:	a906      	add	r1, sp, #24
 801dfc6:	4620      	mov	r0, r4
 801dfc8:	f7ff fcb2 	bl	801d930 <lfs_dir_commit>
        if (err) {
 801dfcc:	4606      	mov	r6, r0
 801dfce:	2800      	cmp	r0, #0
 801dfd0:	d1ce      	bne.n	801df70 <lfs_format_+0x48>
        root.erased = false;
 801dfd2:	2200      	movs	r2, #0
 801dfd4:	f88d 202e 	strb.w	r2, [sp, #46]	@ 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 801dfd8:	4613      	mov	r3, r2
 801dfda:	a906      	add	r1, sp, #24
 801dfdc:	4620      	mov	r0, r4
 801dfde:	f7ff fca7 	bl	801d930 <lfs_dir_commit>
        if (err) {
 801dfe2:	4606      	mov	r6, r0
 801dfe4:	2800      	cmp	r0, #0
 801dfe6:	d1c3      	bne.n	801df70 <lfs_format_+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 801dfe8:	2300      	movs	r3, #0
 801dfea:	9314      	str	r3, [sp, #80]	@ 0x50
 801dfec:	2301      	movs	r3, #1
 801dfee:	9315      	str	r3, [sp, #84]	@ 0x54
 801dff0:	aa14      	add	r2, sp, #80	@ 0x50
 801dff2:	a906      	add	r1, sp, #24
 801dff4:	4620      	mov	r0, r4
 801dff6:	f7fd fe6b 	bl	801bcd0 <lfs_dir_fetch>
 801dffa:	4606      	mov	r6, r0
        if (err) {
 801dffc:	e7b8      	b.n	801df70 <lfs_format_+0x48>
 801dffe:	bf00      	nop
 801e000:	08038b64 	.word	0x08038b64
 801e004:	08038f4c 	.word	0x08038f4c
 801e008:	080381c0 	.word	0x080381c0
 801e00c:	40100000 	.word	0x40100000
 801e010:	0ff00008 	.word	0x0ff00008
 801e014:	08038b7c 	.word	0x08038b7c
 801e018:	20100018 	.word	0x20100018

0801e01c <lfs_unmount_>:
static int lfs_unmount_(lfs_t *lfs) {
 801e01c:	b508      	push	{r3, lr}
    return lfs_deinit(lfs);
 801e01e:	f7ff fdcd 	bl	801dbbc <lfs_deinit>
}
 801e022:	bd08      	pop	{r3, pc}

0801e024 <lfs_mount_>:
static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 801e024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e028:	b09b      	sub	sp, #108	@ 0x6c
 801e02a:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 801e02c:	f7ff fde0 	bl	801dbf0 <lfs_init>
    if (err) {
 801e030:	9005      	str	r0, [sp, #20]
 801e032:	b9d8      	cbnz	r0, 801e06c <lfs_mount_+0x48>
    lfs_mdir_t dir = {.tail = {0, 1}};
 801e034:	2220      	movs	r2, #32
 801e036:	2100      	movs	r1, #0
 801e038:	a80f      	add	r0, sp, #60	@ 0x3c
 801e03a:	f00d ffd9 	bl	802bff0 <memset>
 801e03e:	2501      	movs	r5, #1
 801e040:	9516      	str	r5, [sp, #88]	@ 0x58
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 801e042:	4aa1      	ldr	r2, [pc, #644]	@ (801e2c8 <lfs_mount_+0x2a4>)
 801e044:	ab0d      	add	r3, sp, #52	@ 0x34
 801e046:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e04a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_period = 1;
 801e04e:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(dir.tail)) {
 801e050:	e073      	b.n	801e13a <lfs_mount_+0x116>
            LFS_WARN("Cycle detected in tail list");
 801e052:	4b9e      	ldr	r3, [pc, #632]	@ (801e2cc <lfs_mount_+0x2a8>)
 801e054:	f241 123d 	movw	r2, #4413	@ 0x113d
 801e058:	499d      	ldr	r1, [pc, #628]	@ (801e2d0 <lfs_mount_+0x2ac>)
 801e05a:	489e      	ldr	r0, [pc, #632]	@ (801e2d4 <lfs_mount_+0x2b0>)
 801e05c:	f00b faaa 	bl	80295b4 <printf>
            err = LFS_ERR_CORRUPT;
 801e060:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 801e064:	9305      	str	r3, [sp, #20]
    lfs_unmount_(lfs);
 801e066:	4620      	mov	r0, r4
 801e068:	f7ff ffd8 	bl	801e01c <lfs_unmount_>
}
 801e06c:	9805      	ldr	r0, [sp, #20]
 801e06e:	b01b      	add	sp, #108	@ 0x6c
 801e070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tortoise[0] = dir.tail[0];
 801e074:	970d      	str	r7, [sp, #52]	@ 0x34
            tortoise[1] = dir.tail[1];
 801e076:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e078:	930e      	str	r3, [sp, #56]	@ 0x38
            tortoise_period *= 2;
 801e07a:	0076      	lsls	r6, r6, #1
            tortoise_i = 0;
 801e07c:	2500      	movs	r5, #0
 801e07e:	e075      	b.n	801e16c <lfs_mount_+0x148>
                LFS_ERROR("Invalid version "
 801e080:	4620      	mov	r0, r4
 801e082:	f7fc fb44 	bl	801a70e <lfs_fs_disk_version_minor>
 801e086:	4b91      	ldr	r3, [pc, #580]	@ (801e2cc <lfs_mount_+0x2a8>)
 801e088:	9303      	str	r3, [sp, #12]
 801e08a:	9002      	str	r0, [sp, #8]
 801e08c:	f8cd 9004 	str.w	r9, [sp, #4]
 801e090:	b2bf      	uxth	r7, r7
 801e092:	9700      	str	r7, [sp, #0]
 801e094:	4643      	mov	r3, r8
 801e096:	f241 126b 	movw	r2, #4459	@ 0x116b
 801e09a:	498d      	ldr	r1, [pc, #564]	@ (801e2d0 <lfs_mount_+0x2ac>)
 801e09c:	488e      	ldr	r0, [pc, #568]	@ (801e2d8 <lfs_mount_+0x2b4>)
 801e09e:	f00b fa89 	bl	80295b4 <printf>
                err = LFS_ERR_INVAL;
 801e0a2:	f06f 0315 	mvn.w	r3, #21
 801e0a6:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e0a8:	e7dd      	b.n	801e066 <lfs_mount_+0x42>
                LFS_DEBUG("Found older minor version "
 801e0aa:	4b88      	ldr	r3, [pc, #544]	@ (801e2cc <lfs_mount_+0x2a8>)
 801e0ac:	9303      	str	r3, [sp, #12]
 801e0ae:	9002      	str	r0, [sp, #8]
 801e0b0:	f8cd 9004 	str.w	r9, [sp, #4]
 801e0b4:	b2bf      	uxth	r7, r7
 801e0b6:	9700      	str	r7, [sp, #0]
 801e0b8:	4643      	mov	r3, r8
 801e0ba:	f241 127a 	movw	r2, #4474	@ 0x117a
 801e0be:	4984      	ldr	r1, [pc, #528]	@ (801e2d0 <lfs_mount_+0x2ac>)
 801e0c0:	4886      	ldr	r0, [pc, #536]	@ (801e2dc <lfs_mount_+0x2b8>)
 801e0c2:	f00b fa77 	bl	80295b4 <printf>
                needssuperblock = true;
 801e0c6:	2301      	movs	r3, #1
 801e0c8:	9304      	str	r3, [sp, #16]
 801e0ca:	e08f      	b.n	801e1ec <lfs_mount_+0x1c8>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801e0cc:	497f      	ldr	r1, [pc, #508]	@ (801e2cc <lfs_mount_+0x2a8>)
 801e0ce:	9101      	str	r1, [sp, #4]
 801e0d0:	9200      	str	r2, [sp, #0]
 801e0d2:	f241 1289 	movw	r2, #4489	@ 0x1189
 801e0d6:	497e      	ldr	r1, [pc, #504]	@ (801e2d0 <lfs_mount_+0x2ac>)
 801e0d8:	4881      	ldr	r0, [pc, #516]	@ (801e2e0 <lfs_mount_+0x2bc>)
 801e0da:	f00b fa6b 	bl	80295b4 <printf>
                    err = LFS_ERR_INVAL;
 801e0de:	f06f 0315 	mvn.w	r3, #21
 801e0e2:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e0e4:	e7bf      	b.n	801e066 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 801e0e6:	4979      	ldr	r1, [pc, #484]	@ (801e2cc <lfs_mount_+0x2a8>)
 801e0e8:	9101      	str	r1, [sp, #4]
 801e0ea:	9200      	str	r2, [sp, #0]
 801e0ec:	f241 1294 	movw	r2, #4500	@ 0x1194
 801e0f0:	4977      	ldr	r1, [pc, #476]	@ (801e2d0 <lfs_mount_+0x2ac>)
 801e0f2:	487c      	ldr	r0, [pc, #496]	@ (801e2e4 <lfs_mount_+0x2c0>)
 801e0f4:	f00b fa5e 	bl	80295b4 <printf>
                    err = LFS_ERR_INVAL;
 801e0f8:	f06f 0315 	mvn.w	r3, #21
 801e0fc:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e0fe:	e7b2      	b.n	801e066 <lfs_mount_+0x42>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801e100:	4972      	ldr	r1, [pc, #456]	@ (801e2cc <lfs_mount_+0x2a8>)
 801e102:	9101      	str	r1, [sp, #4]
 801e104:	9200      	str	r2, [sp, #0]
 801e106:	f241 129f 	movw	r2, #4511	@ 0x119f
 801e10a:	4971      	ldr	r1, [pc, #452]	@ (801e2d0 <lfs_mount_+0x2ac>)
 801e10c:	4876      	ldr	r0, [pc, #472]	@ (801e2e8 <lfs_mount_+0x2c4>)
 801e10e:	f00b fa51 	bl	80295b4 <printf>
                    err = LFS_ERR_INVAL;
 801e112:	f06f 0315 	mvn.w	r3, #21
 801e116:	9305      	str	r3, [sp, #20]
                    goto cleanup;
 801e118:	e7a5      	b.n	801e066 <lfs_mount_+0x42>
            lfs->block_count = superblock.block_count;
 801e11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e11c:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 801e11e:	9b08      	ldr	r3, [sp, #32]
 801e120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801e122:	4293      	cmp	r3, r2
 801e124:	f040 8096 	bne.w	801e254 <lfs_mount_+0x230>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801e128:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801e12c:	a90f      	add	r1, sp, #60	@ 0x3c
 801e12e:	4620      	mov	r0, r4
 801e130:	f7fc fdee 	bl	801ad10 <lfs_dir_getgstate>
        if (err) {
 801e134:	2800      	cmp	r0, #0
 801e136:	f040 809e 	bne.w	801e276 <lfs_mount_+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e13a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e13c:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 801e140:	f000 809d 	beq.w	801e27e <lfs_mount_+0x25a>
 801e144:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e14a:	f000 8096 	beq.w	801e27a <lfs_mount_+0x256>
 801e14e:	9b05      	ldr	r3, [sp, #20]
    while (!lfs_pair_isnull(dir.tail)) {
 801e150:	f013 0301 	ands.w	r3, r3, #1
 801e154:	f040 8095 	bne.w	801e282 <lfs_mount_+0x25e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 801e158:	a90d      	add	r1, sp, #52	@ 0x34
 801e15a:	a815      	add	r0, sp, #84	@ 0x54
 801e15c:	f7fc fa60 	bl	801a620 <lfs_pair_issync>
 801e160:	9004      	str	r0, [sp, #16]
 801e162:	2800      	cmp	r0, #0
 801e164:	f47f af75 	bne.w	801e052 <lfs_mount_+0x2e>
        if (tortoise_i == tortoise_period) {
 801e168:	42b5      	cmp	r5, r6
 801e16a:	d083      	beq.n	801e074 <lfs_mount_+0x50>
        tortoise_i += 1;
 801e16c:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 801e16e:	9417      	str	r4, [sp, #92]	@ 0x5c
 801e170:	4b5e      	ldr	r3, [pc, #376]	@ (801e2ec <lfs_mount_+0x2c8>)
 801e172:	9318      	str	r3, [sp, #96]	@ 0x60
 801e174:	2308      	movs	r3, #8
 801e176:	9319      	str	r3, [sp, #100]	@ 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801e178:	ab17      	add	r3, sp, #92	@ 0x5c
 801e17a:	9303      	str	r3, [sp, #12]
 801e17c:	4b5c      	ldr	r3, [pc, #368]	@ (801e2f0 <lfs_mount_+0x2cc>)
 801e17e:	9302      	str	r3, [sp, #8]
 801e180:	2300      	movs	r3, #0
 801e182:	9301      	str	r3, [sp, #4]
 801e184:	4b5b      	ldr	r3, [pc, #364]	@ (801e2f4 <lfs_mount_+0x2d0>)
 801e186:	9300      	str	r3, [sp, #0]
 801e188:	4b5b      	ldr	r3, [pc, #364]	@ (801e2f8 <lfs_mount_+0x2d4>)
 801e18a:	aa15      	add	r2, sp, #84	@ 0x54
 801e18c:	a90f      	add	r1, sp, #60	@ 0x3c
 801e18e:	4620      	mov	r0, r4
 801e190:	f7fd fabe 	bl	801b710 <lfs_dir_fetchmatch>
        if (tag < 0) {
 801e194:	2800      	cmp	r0, #0
 801e196:	db6c      	blt.n	801e272 <lfs_mount_+0x24e>
        if (tag && !lfs_tag_isdelete(tag)) {
 801e198:	2800      	cmp	r0, #0
 801e19a:	d0c5      	beq.n	801e128 <lfs_mount_+0x104>
    return ((int32_t)(tag << 22) >> 22) == -1;
 801e19c:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 801e1a0:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801e1a4:	d0c0      	beq.n	801e128 <lfs_mount_+0x104>
            lfs->root[0] = dir.pair[0];
 801e1a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e1a8:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 801e1aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e1ac:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801e1ae:	ab07      	add	r3, sp, #28
 801e1b0:	9300      	str	r3, [sp, #0]
 801e1b2:	4b52      	ldr	r3, [pc, #328]	@ (801e2fc <lfs_mount_+0x2d8>)
 801e1b4:	4a50      	ldr	r2, [pc, #320]	@ (801e2f8 <lfs_mount_+0x2d4>)
 801e1b6:	a90f      	add	r1, sp, #60	@ 0x3c
 801e1b8:	4620      	mov	r0, r4
 801e1ba:	f7fc fd9b 	bl	801acf4 <lfs_dir_get>
            if (tag < 0) {
 801e1be:	2800      	cmp	r0, #0
 801e1c0:	db55      	blt.n	801e26e <lfs_mount_+0x24a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801e1c2:	9f07      	ldr	r7, [sp, #28]
 801e1c4:	ea4f 4817 	mov.w	r8, r7, lsr #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 801e1c8:	fa1f fa87 	uxth.w	sl, r7
            if (major_version != lfs_fs_disk_version_major(lfs)
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f7fc fa99 	bl	801a704 <lfs_fs_disk_version_major>
 801e1d2:	4681      	mov	r9, r0
 801e1d4:	4540      	cmp	r0, r8
 801e1d6:	f47f af53 	bne.w	801e080 <lfs_mount_+0x5c>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801e1da:	4620      	mov	r0, r4
 801e1dc:	f7fc fa97 	bl	801a70e <lfs_fs_disk_version_minor>
 801e1e0:	4550      	cmp	r0, sl
 801e1e2:	f4ff af4d 	bcc.w	801e080 <lfs_mount_+0x5c>
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 801e1e6:	4550      	cmp	r0, sl
 801e1e8:	f63f af5f 	bhi.w	801e0aa <lfs_mount_+0x86>
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801e1ec:	9904      	ldr	r1, [sp, #16]
 801e1ee:	4620      	mov	r0, r4
 801e1f0:	f7fc fb2b 	bl	801a84a <lfs_fs_prepsuperblock>
            if (superblock.name_max) {
 801e1f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e1f6:	b123      	cbz	r3, 801e202 <lfs_mount_+0x1de>
                if (superblock.name_max > lfs->name_max) {
 801e1f8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801e1fa:	4293      	cmp	r3, r2
 801e1fc:	f63f af66 	bhi.w	801e0cc <lfs_mount_+0xa8>
                lfs->name_max = superblock.name_max;
 801e200:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 801e202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e204:	b123      	cbz	r3, 801e210 <lfs_mount_+0x1ec>
                if (superblock.file_max > lfs->file_max) {
 801e206:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 801e208:	4293      	cmp	r3, r2
 801e20a:	f63f af6c 	bhi.w	801e0e6 <lfs_mount_+0xc2>
                lfs->file_max = superblock.file_max;
 801e20e:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 801e210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e212:	b14b      	cbz	r3, 801e228 <lfs_mount_+0x204>
                if (superblock.attr_max > lfs->attr_max) {
 801e214:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801e216:	4293      	cmp	r3, r2
 801e218:	f63f af72 	bhi.w	801e100 <lfs_mount_+0xdc>
                lfs->attr_max = superblock.attr_max;
 801e21c:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 801e21e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801e220:	4293      	cmp	r3, r2
 801e222:	bf28      	it	cs
 801e224:	4613      	movcs	r3, r2
 801e226:	67e3      	str	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 801e228:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 801e22a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801e22c:	2900      	cmp	r1, #0
 801e22e:	f43f af74 	beq.w	801e11a <lfs_mount_+0xf6>
                    && superblock.block_count != lfs->cfg->block_count) {
 801e232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e234:	4299      	cmp	r1, r3
 801e236:	f43f af70 	beq.w	801e11a <lfs_mount_+0xf6>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 801e23a:	4a24      	ldr	r2, [pc, #144]	@ (801e2cc <lfs_mount_+0x2a8>)
 801e23c:	9201      	str	r2, [sp, #4]
 801e23e:	9100      	str	r1, [sp, #0]
 801e240:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 801e244:	4922      	ldr	r1, [pc, #136]	@ (801e2d0 <lfs_mount_+0x2ac>)
 801e246:	482e      	ldr	r0, [pc, #184]	@ (801e300 <lfs_mount_+0x2dc>)
 801e248:	f00b f9b4 	bl	80295b4 <printf>
                err = LFS_ERR_INVAL;
 801e24c:	f06f 0315 	mvn.w	r3, #21
 801e250:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e252:	e708      	b.n	801e066 <lfs_mount_+0x42>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 801e254:	491d      	ldr	r1, [pc, #116]	@ (801e2cc <lfs_mount_+0x2a8>)
 801e256:	9101      	str	r1, [sp, #4]
 801e258:	9200      	str	r2, [sp, #0]
 801e25a:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 801e25e:	491c      	ldr	r1, [pc, #112]	@ (801e2d0 <lfs_mount_+0x2ac>)
 801e260:	4828      	ldr	r0, [pc, #160]	@ (801e304 <lfs_mount_+0x2e0>)
 801e262:	f00b f9a7 	bl	80295b4 <printf>
                err = LFS_ERR_INVAL;
 801e266:	f06f 0315 	mvn.w	r3, #21
 801e26a:	9305      	str	r3, [sp, #20]
                goto cleanup;
 801e26c:	e6fb      	b.n	801e066 <lfs_mount_+0x42>
                err = tag;
 801e26e:	9005      	str	r0, [sp, #20]
 801e270:	e6f9      	b.n	801e066 <lfs_mount_+0x42>
            err = tag;
 801e272:	9005      	str	r0, [sp, #20]
 801e274:	e6f7      	b.n	801e066 <lfs_mount_+0x42>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 801e276:	9005      	str	r0, [sp, #20]
 801e278:	e6f5      	b.n	801e066 <lfs_mount_+0x42>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 801e27a:	2301      	movs	r3, #1
 801e27c:	e768      	b.n	801e150 <lfs_mount_+0x12c>
 801e27e:	2301      	movs	r3, #1
 801e280:	e766      	b.n	801e150 <lfs_mount_+0x12c>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801e282:	f104 0030 	add.w	r0, r4, #48	@ 0x30
    for (int i = 0; i < 3; i++) {
 801e286:	9a05      	ldr	r2, [sp, #20]
 801e288:	2a02      	cmp	r2, #2
 801e28a:	dc05      	bgt.n	801e298 <lfs_mount_+0x274>
        if (((uint32_t*)a)[i] != 0) {
 801e28c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801e290:	b909      	cbnz	r1, 801e296 <lfs_mount_+0x272>
    for (int i = 0; i < 3; i++) {
 801e292:	3201      	adds	r2, #1
 801e294:	e7f8      	b.n	801e288 <lfs_mount_+0x264>
            return false;
 801e296:	2300      	movs	r3, #0
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 801e298:	b3b3      	cbz	r3, 801e308 <lfs_mount_+0x2e4>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801e29a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e29c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801e2a0:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 801e2a2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 801e2a6:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 801e2aa:	ca07      	ldmia	r2, {r0, r1, r2}
 801e2ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 801e2b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801e2b2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801e2b4:	fbb3 f1f2 	udiv	r1, r3, r2
 801e2b8:	fb02 3311 	mls	r3, r2, r1, r3
 801e2bc:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 801e2be:	4620      	mov	r0, r4
 801e2c0:	f7fc fa2d 	bl	801a71e <lfs_alloc_drop>
    return 0;
 801e2c4:	e6d2      	b.n	801e06c <lfs_mount_+0x48>
 801e2c6:	bf00      	nop
 801e2c8:	08035334 	.word	0x08035334
 801e2cc:	0803606c 	.word	0x0803606c
 801e2d0:	080381c0 	.word	0x080381c0
 801e2d4:	08038380 	.word	0x08038380
 801e2d8:	08038b88 	.word	0x08038b88
 801e2dc:	08038bc0 	.word	0x08038bc0
 801e2e0:	08038c00 	.word	0x08038c00
 801e2e4:	08038c34 	.word	0x08038c34
 801e2e8:	08038c68 	.word	0x08038c68
 801e2ec:	08038b7c 	.word	0x08038b7c
 801e2f0:	0801b4d1 	.word	0x0801b4d1
 801e2f4:	0ff00008 	.word	0x0ff00008
 801e2f8:	7ffffc00 	.word	0x7ffffc00
 801e2fc:	20100018 	.word	0x20100018
 801e300:	08038c9c 	.word	0x08038c9c
 801e304:	08038cd0 	.word	0x08038cd0
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 801e308:	4b06      	ldr	r3, [pc, #24]	@ (801e324 <lfs_mount_+0x300>)
 801e30a:	9302      	str	r3, [sp, #8]
 801e30c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e30e:	9301      	str	r3, [sp, #4]
 801e310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e312:	9300      	str	r3, [sp, #0]
 801e314:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e316:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 801e31a:	4903      	ldr	r1, [pc, #12]	@ (801e328 <lfs_mount_+0x304>)
 801e31c:	4803      	ldr	r0, [pc, #12]	@ (801e32c <lfs_mount_+0x308>)
 801e31e:	f00b f949 	bl	80295b4 <printf>
 801e322:	e7ba      	b.n	801e29a <lfs_mount_+0x276>
 801e324:	0803606c 	.word	0x0803606c
 801e328:	080381c0 	.word	0x080381c0
 801e32c:	08038d00 	.word	0x08038d00

0801e330 <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 801e330:	b570      	push	{r4, r5, r6, lr}
 801e332:	4606      	mov	r6, r0
 801e334:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 801e336:	f7ff fbd7 	bl	801dae8 <lfs_file_sync_>
 801e33a:	4605      	mov	r5, r0
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 801e33c:	4621      	mov	r1, r4
 801e33e:	4630      	mov	r0, r6
 801e340:	f7fc f9cd 	bl	801a6de <lfs_mlist_remove>
    if (!file->cfg->buffer) {
 801e344:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	b10b      	cbz	r3, 801e34e <lfs_file_close_+0x1e>
}
 801e34a:	4628      	mov	r0, r5
 801e34c:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
 801e34e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801e350:	f7fb ff44 	bl	801a1dc <vPortFree>
    return err;
 801e354:	e7f9      	b.n	801e34a <lfs_file_close_+0x1a>
	...

0801e358 <lfs_dir_find>:
        const char **path, uint16_t *id) {
 801e358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e35c:	b08d      	sub	sp, #52	@ 0x34
 801e35e:	4682      	mov	sl, r0
 801e360:	4688      	mov	r8, r1
 801e362:	9207      	str	r2, [sp, #28]
    const char *name = *path;
 801e364:	6812      	ldr	r2, [r2, #0]
 801e366:	9205      	str	r2, [sp, #20]
    if (id) {
 801e368:	9306      	str	r3, [sp, #24]
 801e36a:	b11b      	cbz	r3, 801e374 <lfs_dir_find+0x1c>
 801e36c:	461a      	mov	r2, r3
        *id = 0x3ff;
 801e36e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e372:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 801e374:	f8da 3020 	ldr.w	r3, [sl, #32]
 801e378:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
 801e37c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 801e380:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 801e384:	4e4d      	ldr	r6, [pc, #308]	@ (801e4bc <lfs_dir_find+0x164>)
        name += strspn(name, "/");
 801e386:	4d4e      	ldr	r5, [pc, #312]	@ (801e4c0 <lfs_dir_find+0x168>)
 801e388:	4629      	mov	r1, r5
 801e38a:	9f05      	ldr	r7, [sp, #20]
 801e38c:	4638      	mov	r0, r7
 801e38e:	f00d fe9f 	bl	802c0d0 <strspn>
 801e392:	4604      	mov	r4, r0
 801e394:	eb07 0900 	add.w	r9, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 801e398:	4629      	mov	r1, r5
 801e39a:	4648      	mov	r0, r9
 801e39c:	f00d fe4c 	bl	802c038 <strcspn>
 801e3a0:	4605      	mov	r5, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801e3a2:	2801      	cmp	r0, #1
 801e3a4:	d00a      	beq.n	801e3bc <lfs_dir_find+0x64>
 801e3a6:	2d02      	cmp	r5, #2
 801e3a8:	d00c      	beq.n	801e3c4 <lfs_dir_find+0x6c>
        const char *suffix = name + namelen;
 801e3aa:	eb09 0305 	add.w	r3, r9, r5
 801e3ae:	9305      	str	r3, [sp, #20]
 801e3b0:	469b      	mov	fp, r3
        int depth = 1;
 801e3b2:	2701      	movs	r7, #1
 801e3b4:	e013      	b.n	801e3de <lfs_dir_find+0x86>
 801e3b6:	46b2      	mov	sl, r6
 801e3b8:	4606      	mov	r6, r0
 801e3ba:	e7e4      	b.n	801e386 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 801e3bc:	5d3b      	ldrb	r3, [r7, r4]
 801e3be:	2b2e      	cmp	r3, #46	@ 0x2e
 801e3c0:	d1f1      	bne.n	801e3a6 <lfs_dir_find+0x4e>
 801e3c2:	e006      	b.n	801e3d2 <lfs_dir_find+0x7a>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 801e3c4:	2202      	movs	r2, #2
 801e3c6:	493f      	ldr	r1, [pc, #252]	@ (801e4c4 <lfs_dir_find+0x16c>)
 801e3c8:	4648      	mov	r0, r9
 801e3ca:	f00d fd7d 	bl	802bec8 <memcmp>
 801e3ce:	2800      	cmp	r0, #0
 801e3d0:	d1eb      	bne.n	801e3aa <lfs_dir_find+0x52>
            name += namelen;
 801e3d2:	eb09 0305 	add.w	r3, r9, r5
 801e3d6:	9305      	str	r3, [sp, #20]
            goto nextname;
 801e3d8:	e7d5      	b.n	801e386 <lfs_dir_find+0x2e>
                depth += 1;
 801e3da:	3701      	adds	r7, #1
            suffix += sufflen;
 801e3dc:	44a3      	add	fp, r4
            suffix += strspn(suffix, "/");
 801e3de:	4c38      	ldr	r4, [pc, #224]	@ (801e4c0 <lfs_dir_find+0x168>)
 801e3e0:	4621      	mov	r1, r4
 801e3e2:	4658      	mov	r0, fp
 801e3e4:	f00d fe74 	bl	802c0d0 <strspn>
 801e3e8:	4483      	add	fp, r0
            sufflen = strcspn(suffix, "/");
 801e3ea:	4621      	mov	r1, r4
 801e3ec:	4658      	mov	r0, fp
 801e3ee:	f00d fe23 	bl	802c038 <strcspn>
            if (sufflen == 0) {
 801e3f2:	4604      	mov	r4, r0
 801e3f4:	b170      	cbz	r0, 801e414 <lfs_dir_find+0xbc>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 801e3f6:	2802      	cmp	r0, #2
 801e3f8:	d1ef      	bne.n	801e3da <lfs_dir_find+0x82>
 801e3fa:	2202      	movs	r2, #2
 801e3fc:	4931      	ldr	r1, [pc, #196]	@ (801e4c4 <lfs_dir_find+0x16c>)
 801e3fe:	4658      	mov	r0, fp
 801e400:	f00d fd62 	bl	802bec8 <memcmp>
 801e404:	2800      	cmp	r0, #0
 801e406:	d1e8      	bne.n	801e3da <lfs_dir_find+0x82>
                if (depth == 0) {
 801e408:	3f01      	subs	r7, #1
 801e40a:	d1e7      	bne.n	801e3dc <lfs_dir_find+0x84>
                    name = suffix + sufflen;
 801e40c:	eb0b 0304 	add.w	r3, fp, r4
 801e410:	9305      	str	r3, [sp, #20]
                    goto nextname;
 801e412:	e7b8      	b.n	801e386 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
 801e414:	f899 3000 	ldrb.w	r3, [r9]
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d04a      	beq.n	801e4b2 <lfs_dir_find+0x15a>
        *path = name;
 801e41c:	9b07      	ldr	r3, [sp, #28]
 801e41e:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
 801e422:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801e426:	2b02      	cmp	r3, #2
 801e428:	d13f      	bne.n	801e4aa <lfs_dir_find+0x152>
    return (tag & 0x000ffc00) >> 10;
 801e42a:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 801e42e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e432:	429e      	cmp	r6, r3
 801e434:	d102      	bne.n	801e43c <lfs_dir_find+0xe4>
 801e436:	464c      	mov	r4, r9
 801e438:	4656      	mov	r6, sl
 801e43a:	e029      	b.n	801e490 <lfs_dir_find+0x138>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 801e43c:	02b6      	lsls	r6, r6, #10
 801e43e:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801e442:	9300      	str	r3, [sp, #0]
 801e444:	f046 5300 	orr.w	r3, r6, #536870912	@ 0x20000000
 801e448:	f043 0308 	orr.w	r3, r3, #8
 801e44c:	4a1e      	ldr	r2, [pc, #120]	@ (801e4c8 <lfs_dir_find+0x170>)
 801e44e:	4641      	mov	r1, r8
 801e450:	4650      	mov	r0, sl
 801e452:	f7fc fc4f 	bl	801acf4 <lfs_dir_get>
            if (res < 0) {
 801e456:	1e06      	subs	r6, r0, #0
 801e458:	db2b      	blt.n	801e4b2 <lfs_dir_find+0x15a>
 801e45a:	464c      	mov	r4, r9
 801e45c:	4656      	mov	r6, sl
 801e45e:	e017      	b.n	801e490 <lfs_dir_find+0x138>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801e460:	9b06      	ldr	r3, [sp, #24]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 801e462:	9609      	str	r6, [sp, #36]	@ 0x24
 801e464:	940a      	str	r4, [sp, #40]	@ 0x28
 801e466:	950b      	str	r5, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801e468:	aa09      	add	r2, sp, #36	@ 0x24
 801e46a:	9203      	str	r2, [sp, #12]
 801e46c:	4a17      	ldr	r2, [pc, #92]	@ (801e4cc <lfs_dir_find+0x174>)
 801e46e:	9202      	str	r2, [sp, #8]
 801e470:	9301      	str	r3, [sp, #4]
 801e472:	9500      	str	r5, [sp, #0]
 801e474:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 801e478:	463a      	mov	r2, r7
 801e47a:	4641      	mov	r1, r8
 801e47c:	4630      	mov	r0, r6
 801e47e:	f7fd f947 	bl	801b710 <lfs_dir_fetchmatch>
            if (tag < 0) {
 801e482:	2800      	cmp	r0, #0
 801e484:	db14      	blt.n	801e4b0 <lfs_dir_find+0x158>
            if (tag) {
 801e486:	2800      	cmp	r0, #0
 801e488:	d195      	bne.n	801e3b6 <lfs_dir_find+0x5e>
            if (!dir->split) {
 801e48a:	f898 3017 	ldrb.w	r3, [r8, #23]
 801e48e:	b14b      	cbz	r3, 801e4a4 <lfs_dir_find+0x14c>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801e490:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
 801e494:	212f      	movs	r1, #47	@ 0x2f
 801e496:	4620      	mov	r0, r4
 801e498:	f00d fdc1 	bl	802c01e <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 801e49c:	2800      	cmp	r0, #0
 801e49e:	d0df      	beq.n	801e460 <lfs_dir_find+0x108>
 801e4a0:	2300      	movs	r3, #0
 801e4a2:	e7de      	b.n	801e462 <lfs_dir_find+0x10a>
                return LFS_ERR_NOENT;
 801e4a4:	f06f 0601 	mvn.w	r6, #1
 801e4a8:	e003      	b.n	801e4b2 <lfs_dir_find+0x15a>
            return LFS_ERR_NOTDIR;
 801e4aa:	f06f 0613 	mvn.w	r6, #19
 801e4ae:	e000      	b.n	801e4b2 <lfs_dir_find+0x15a>
 801e4b0:	4606      	mov	r6, r0
}
 801e4b2:	4630      	mov	r0, r6
 801e4b4:	b00d      	add	sp, #52	@ 0x34
 801e4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4ba:	bf00      	nop
 801e4bc:	002ffc00 	.word	0x002ffc00
 801e4c0:	08039554 	.word	0x08039554
 801e4c4:	08038d38 	.word	0x08038d38
 801e4c8:	700ffc00 	.word	0x700ffc00
 801e4cc:	0801b4d1 	.word	0x0801b4d1

0801e4d0 <lfs_remove_>:
static int lfs_remove_(lfs_t *lfs, const char *path) {
 801e4d0:	b570      	push	{r4, r5, r6, lr}
 801e4d2:	b09a      	sub	sp, #104	@ 0x68
 801e4d4:	4604      	mov	r4, r0
 801e4d6:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
 801e4d8:	f7ff fad2 	bl	801da80 <lfs_fs_forceconsistency>
    if (err) {
 801e4dc:	4603      	mov	r3, r0
 801e4de:	b110      	cbz	r0, 801e4e6 <lfs_remove_+0x16>
}
 801e4e0:	4618      	mov	r0, r3
 801e4e2:	b01a      	add	sp, #104	@ 0x68
 801e4e4:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801e4e6:	2300      	movs	r3, #0
 801e4e8:	aa03      	add	r2, sp, #12
 801e4ea:	a910      	add	r1, sp, #64	@ 0x40
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f7ff ff33 	bl	801e358 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801e4f2:	1e03      	subs	r3, r0, #0
 801e4f4:	dbf4      	blt.n	801e4e0 <lfs_remove_+0x10>
    return (tag & 0x000ffc00) >> 10;
 801e4f6:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 801e4fa:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801e4fe:	4295      	cmp	r5, r2
 801e500:	d031      	beq.n	801e566 <lfs_remove_+0x96>
    dir.next = lfs->mlist;
 801e502:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801e504:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
 801e506:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801e50a:	2e02      	cmp	r6, #2
 801e50c:	d02e      	beq.n	801e56c <lfs_remove_+0x9c>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 801e50e:	02ad      	lsls	r5, r5, #10
 801e510:	f045 459f 	orr.w	r5, r5, #1333788672	@ 0x4f800000
 801e514:	f445 05e0 	orr.w	r5, r5, #7340032	@ 0x700000
 801e518:	9518      	str	r5, [sp, #96]	@ 0x60
 801e51a:	2300      	movs	r3, #0
 801e51c:	9319      	str	r3, [sp, #100]	@ 0x64
 801e51e:	2301      	movs	r3, #1
 801e520:	aa18      	add	r2, sp, #96	@ 0x60
 801e522:	a910      	add	r1, sp, #64	@ 0x40
 801e524:	4620      	mov	r0, r4
 801e526:	f7ff fa03 	bl	801d930 <lfs_dir_commit>
    if (err) {
 801e52a:	4603      	mov	r3, r0
 801e52c:	2800      	cmp	r0, #0
 801e52e:	d142      	bne.n	801e5b6 <lfs_remove_+0xe6>
    lfs->mlist = dir.next;
 801e530:	9a06      	ldr	r2, [sp, #24]
 801e532:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 801e534:	2e02      	cmp	r6, #2
 801e536:	d1d3      	bne.n	801e4e0 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, -1);
 801e538:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e53c:	4620      	mov	r0, r4
 801e53e:	f7fc f9db 	bl	801a8f8 <lfs_fs_preporphans>
        if (err) {
 801e542:	4603      	mov	r3, r0
 801e544:	2800      	cmp	r0, #0
 801e546:	d1cb      	bne.n	801e4e0 <lfs_remove_+0x10>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 801e548:	aa10      	add	r2, sp, #64	@ 0x40
 801e54a:	a908      	add	r1, sp, #32
 801e54c:	4620      	mov	r0, r4
 801e54e:	f7fe f8e5 	bl	801c71c <lfs_fs_pred>
        if (err) {
 801e552:	4603      	mov	r3, r0
 801e554:	2800      	cmp	r0, #0
 801e556:	d1c3      	bne.n	801e4e0 <lfs_remove_+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 801e558:	aa08      	add	r2, sp, #32
 801e55a:	a910      	add	r1, sp, #64	@ 0x40
 801e55c:	4620      	mov	r0, r4
 801e55e:	f7ff faa3 	bl	801daa8 <lfs_dir_drop>
 801e562:	4603      	mov	r3, r0
        if (err) {
 801e564:	e7bc      	b.n	801e4e0 <lfs_remove_+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 801e566:	f06f 0315 	mvn.w	r3, #21
 801e56a:	e7b9      	b.n	801e4e0 <lfs_remove_+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801e56c:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801e56e:	aa04      	add	r2, sp, #16
 801e570:	9200      	str	r2, [sp, #0]
 801e572:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e576:	f043 0308 	orr.w	r3, r3, #8
 801e57a:	4a10      	ldr	r2, [pc, #64]	@ (801e5bc <lfs_remove_+0xec>)
 801e57c:	a910      	add	r1, sp, #64	@ 0x40
 801e57e:	4620      	mov	r0, r4
 801e580:	f7fc fbb8 	bl	801acf4 <lfs_dir_get>
        if (res < 0) {
 801e584:	1e03      	subs	r3, r0, #0
 801e586:	dbab      	blt.n	801e4e0 <lfs_remove_+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
 801e588:	aa04      	add	r2, sp, #16
 801e58a:	a908      	add	r1, sp, #32
 801e58c:	4620      	mov	r0, r4
 801e58e:	f7fd fb9f 	bl	801bcd0 <lfs_dir_fetch>
        if (err) {
 801e592:	4603      	mov	r3, r0
 801e594:	2800      	cmp	r0, #0
 801e596:	d1a3      	bne.n	801e4e0 <lfs_remove_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801e598:	2101      	movs	r1, #1
 801e59a:	4620      	mov	r0, r4
 801e59c:	f7fc f9ac 	bl	801a8f8 <lfs_fs_preporphans>
        if (err) {
 801e5a0:	4603      	mov	r3, r0
 801e5a2:	2800      	cmp	r0, #0
 801e5a4:	d19c      	bne.n	801e4e0 <lfs_remove_+0x10>
        dir.type = 0;
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
 801e5ac:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
 801e5b0:	ab06      	add	r3, sp, #24
 801e5b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e5b4:	e7ab      	b.n	801e50e <lfs_remove_+0x3e>
        lfs->mlist = dir.next;
 801e5b6:	9a06      	ldr	r2, [sp, #24]
 801e5b8:	62a2      	str	r2, [r4, #40]	@ 0x28
        return err;
 801e5ba:	e791      	b.n	801e4e0 <lfs_remove_+0x10>
 801e5bc:	700ffc00 	.word	0x700ffc00

0801e5c0 <lfs_dir_open_>:
static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801e5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5c2:	b087      	sub	sp, #28
 801e5c4:	4607      	mov	r7, r0
 801e5c6:	460d      	mov	r5, r1
 801e5c8:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801e5ca:	f101 0608 	add.w	r6, r1, #8
 801e5ce:	2300      	movs	r3, #0
 801e5d0:	aa03      	add	r2, sp, #12
 801e5d2:	4631      	mov	r1, r6
 801e5d4:	f7ff fec0 	bl	801e358 <lfs_dir_find>
    if (tag < 0) {
 801e5d8:	1e04      	subs	r4, r0, #0
 801e5da:	db14      	blt.n	801e606 <lfs_dir_open_+0x46>
    return (tag & 0x7ff00000) >> 20;
 801e5dc:	f3c4 530a 	ubfx	r3, r4, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 801e5e0:	2b02      	cmp	r3, #2
 801e5e2:	d130      	bne.n	801e646 <lfs_dir_open_+0x86>
    return (tag & 0x000ffc00) >> 10;
 801e5e4:	f3c4 2489 	ubfx	r4, r4, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
 801e5e8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e5ec:	429c      	cmp	r4, r3
 801e5ee:	d10d      	bne.n	801e60c <lfs_dir_open_+0x4c>
        pair[0] = lfs->root[0];
 801e5f0:	6a3b      	ldr	r3, [r7, #32]
 801e5f2:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
 801e5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e5f6:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801e5f8:	aa04      	add	r2, sp, #16
 801e5fa:	4631      	mov	r1, r6
 801e5fc:	4638      	mov	r0, r7
 801e5fe:	f7fd fb67 	bl	801bcd0 <lfs_dir_fetch>
    if (err) {
 801e602:	4604      	mov	r4, r0
 801e604:	b188      	cbz	r0, 801e62a <lfs_dir_open_+0x6a>
}
 801e606:	4620      	mov	r0, r4
 801e608:	b007      	add	sp, #28
 801e60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 801e60c:	02a4      	lsls	r4, r4, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801e60e:	ab04      	add	r3, sp, #16
 801e610:	9300      	str	r3, [sp, #0]
 801e612:	f044 5300 	orr.w	r3, r4, #536870912	@ 0x20000000
 801e616:	f043 0308 	orr.w	r3, r3, #8
 801e61a:	4a0c      	ldr	r2, [pc, #48]	@ (801e64c <lfs_dir_open_+0x8c>)
 801e61c:	4631      	mov	r1, r6
 801e61e:	4638      	mov	r0, r7
 801e620:	f7fc fb68 	bl	801acf4 <lfs_dir_get>
        if (res < 0) {
 801e624:	1e04      	subs	r4, r0, #0
 801e626:	dae7      	bge.n	801e5f8 <lfs_dir_open_+0x38>
 801e628:	e7ed      	b.n	801e606 <lfs_dir_open_+0x46>
    dir->head[0] = dir->m.pair[0];
 801e62a:	68ab      	ldr	r3, [r5, #8]
 801e62c:	62eb      	str	r3, [r5, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 801e62e:	68eb      	ldr	r3, [r5, #12]
 801e630:	632b      	str	r3, [r5, #48]	@ 0x30
    dir->id = 0;
 801e632:	2300      	movs	r3, #0
 801e634:	80ab      	strh	r3, [r5, #4]
    dir->pos = 0;
 801e636:	62ab      	str	r3, [r5, #40]	@ 0x28
    dir->type = LFS_TYPE_DIR;
 801e638:	2302      	movs	r3, #2
 801e63a:	71ab      	strb	r3, [r5, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801e63c:	4629      	mov	r1, r5
 801e63e:	4638      	mov	r0, r7
 801e640:	f7fc f858 	bl	801a6f4 <lfs_mlist_append>
    return 0;
 801e644:	e7df      	b.n	801e606 <lfs_dir_open_+0x46>
        return LFS_ERR_NOTDIR;
 801e646:	f06f 0413 	mvn.w	r4, #19
 801e64a:	e7dc      	b.n	801e606 <lfs_dir_open_+0x46>
 801e64c:	700ffc00 	.word	0x700ffc00

0801e650 <lfs_rename_>:
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e654:	b0ad      	sub	sp, #180	@ 0xb4
 801e656:	4604      	mov	r4, r0
 801e658:	9103      	str	r1, [sp, #12]
 801e65a:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
 801e65c:	f7ff fa10 	bl	801da80 <lfs_fs_forceconsistency>
    if (err) {
 801e660:	4606      	mov	r6, r0
 801e662:	b118      	cbz	r0, 801e66c <lfs_rename_+0x1c>
}
 801e664:	4630      	mov	r0, r6
 801e666:	b02d      	add	sp, #180	@ 0xb4
 801e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 801e66c:	2300      	movs	r3, #0
 801e66e:	aa03      	add	r2, sp, #12
 801e670:	a922      	add	r1, sp, #136	@ 0x88
 801e672:	4620      	mov	r0, r4
 801e674:	f7ff fe70 	bl	801e358 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801e678:	2800      	cmp	r0, #0
 801e67a:	f2c0 809e 	blt.w	801e7ba <lfs_rename_+0x16a>
 801e67e:	4680      	mov	r8, r0
    return (tag & 0x000ffc00) >> 10;
 801e680:	f3c0 2589 	ubfx	r5, r0, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 801e684:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e688:	429d      	cmp	r5, r3
 801e68a:	f000 8094 	beq.w	801e7b6 <lfs_rename_+0x166>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 801e68e:	f10d 0366 	add.w	r3, sp, #102	@ 0x66
 801e692:	aa02      	add	r2, sp, #8
 801e694:	a91a      	add	r1, sp, #104	@ 0x68
 801e696:	4620      	mov	r0, r4
 801e698:	f7ff fe5e 	bl	801e358 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801e69c:	f1b0 0900 	subs.w	r9, r0, #0
 801e6a0:	f2c0 808d 	blt.w	801e7be <lfs_rename_+0x16e>
    return (tag & 0x000ffc00) >> 10;
 801e6a4:	f3c9 2289 	ubfx	r2, r9, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801e6a8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e6ac:	429a      	cmp	r2, r3
 801e6ae:	f000 8086 	beq.w	801e7be <lfs_rename_+0x16e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 801e6b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e6b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e6b6:	429a      	cmp	r2, r3
 801e6b8:	d008      	beq.n	801e6cc <lfs_rename_+0x7c>
 801e6ba:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801e6bc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801e6be:	4281      	cmp	r1, r0
 801e6c0:	d004      	beq.n	801e6cc <lfs_rename_+0x7c>
 801e6c2:	4299      	cmp	r1, r3
 801e6c4:	d002      	beq.n	801e6cc <lfs_rename_+0x7c>
 801e6c6:	4290      	cmp	r0, r2
 801e6c8:	d000      	beq.n	801e6cc <lfs_rename_+0x7c>
 801e6ca:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
 801e6cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e6ce:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (prevtag == LFS_ERR_NOENT) {
 801e6d0:	f119 0f02 	cmn.w	r9, #2
 801e6d4:	f000 8085 	beq.w	801e7e2 <lfs_rename_+0x192>
    return (tag & 0x7ff00000) >> 20;
 801e6d8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801e6dc:	ea4f 5318 	mov.w	r3, r8, lsr #20
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 801e6e0:	ea83 5319 	eor.w	r3, r3, r9, lsr #20
 801e6e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e6e8:	2b00      	cmp	r3, #0
 801e6ea:	f040 808a 	bne.w	801e802 <lfs_rename_+0x1b2>
    } else if (samepair && newid == newoldid) {
 801e6ee:	b91e      	cbnz	r6, 801e6f8 <lfs_rename_+0xa8>
 801e6f0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e6f4:	42ab      	cmp	r3, r5
 801e6f6:	d0b5      	beq.n	801e664 <lfs_rename_+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801e6f8:	2a02      	cmp	r2, #2
 801e6fa:	f000 808a 	beq.w	801e812 <lfs_rename_+0x1c2>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801e6fe:	46aa      	mov	sl, r5
    if (!samepair) {
 801e700:	b126      	cbz	r6, 801e70c <lfs_rename_+0xbc>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 801e702:	aa22      	add	r2, sp, #136	@ 0x88
 801e704:	4651      	mov	r1, sl
 801e706:	4620      	mov	r0, r4
 801e708:	f7fc f8a6 	bl	801a858 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801e70c:	f119 0f02 	cmn.w	r9, #2
 801e710:	f000 80b4 	beq.w	801e87c <lfs_rename_+0x22c>
 801e714:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e718:	029b      	lsls	r3, r3, #10
 801e71a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e71e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e722:	9305      	str	r3, [sp, #20]
 801e724:	2200      	movs	r2, #0
 801e726:	9206      	str	r2, [sp, #24]
 801e728:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 801e72c:	02bf      	lsls	r7, r7, #10
 801e72e:	f047 4380 	orr.w	r3, r7, #1073741824	@ 0x40000000
 801e732:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e736:	9307      	str	r3, [sp, #28]
 801e738:	9208      	str	r2, [sp, #32]
    return (tag & 0x7ff00000) >> 20;
 801e73a:	f3c8 580a 	ubfx	r8, r8, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801e73e:	ea47 5808 	orr.w	r8, r7, r8, lsl #20
 801e742:	f8dd b008 	ldr.w	fp, [sp, #8]
 801e746:	4658      	mov	r0, fp
 801e748:	f7f1 fdaa 	bl	80102a0 <strlen>
 801e74c:	ea48 0000 	orr.w	r0, r8, r0
 801e750:	9009      	str	r0, [sp, #36]	@ 0x24
 801e752:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801e756:	432f      	orrs	r7, r5
 801e758:	f047 5780 	orr.w	r7, r7, #268435456	@ 0x10000000
 801e75c:	f447 1780 	orr.w	r7, r7, #1048576	@ 0x100000
 801e760:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e762:	ab22      	add	r3, sp, #136	@ 0x88
 801e764:	930c      	str	r3, [sp, #48]	@ 0x30
 801e766:	2e00      	cmp	r6, #0
 801e768:	f040 808a 	bne.w	801e880 <lfs_rename_+0x230>
 801e76c:	ea4f 2a8a 	mov.w	sl, sl, lsl #10
 801e770:	f04a 439f 	orr.w	r3, sl, #1333788672	@ 0x4f800000
 801e774:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e778:	930d      	str	r3, [sp, #52]	@ 0x34
 801e77a:	2300      	movs	r3, #0
 801e77c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e77e:	2305      	movs	r3, #5
 801e780:	aa05      	add	r2, sp, #20
 801e782:	a91a      	add	r1, sp, #104	@ 0x68
 801e784:	4620      	mov	r0, r4
 801e786:	f7ff f8d3 	bl	801d930 <lfs_dir_commit>
    if (err) {
 801e78a:	4607      	mov	r7, r0
 801e78c:	2800      	cmp	r0, #0
 801e78e:	d179      	bne.n	801e884 <lfs_rename_+0x234>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801e790:	b126      	cbz	r6, 801e79c <lfs_rename_+0x14c>
    return lfs_tag_type1(a->tag);
 801e792:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 801e794:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 801e796:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801e79a:	d177      	bne.n	801e88c <lfs_rename_+0x23c>
    lfs->mlist = prevdir.next;
 801e79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e79e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 801e7a0:	f119 0f02 	cmn.w	r9, #2
 801e7a4:	f000 80a9 	beq.w	801e8fa <lfs_rename_+0x2aa>
    return (tag & 0x7ff00000) >> 20;
 801e7a8:	f3c9 500a 	ubfx	r0, r9, #20, #11
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 801e7ac:	2802      	cmp	r0, #2
 801e7ae:	f000 8088 	beq.w	801e8c2 <lfs_rename_+0x272>
    return 0;
 801e7b2:	463e      	mov	r6, r7
 801e7b4:	e756      	b.n	801e664 <lfs_rename_+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 801e7b6:	f06f 0015 	mvn.w	r0, #21
 801e7ba:	4606      	mov	r6, r0
 801e7bc:	e752      	b.n	801e664 <lfs_rename_+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 801e7be:	f119 0f02 	cmn.w	r9, #2
 801e7c2:	d106      	bne.n	801e7d2 <lfs_rename_+0x182>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 801e7c4:	f8bd 2066 	ldrh.w	r2, [sp, #102]	@ 0x66
 801e7c8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e7cc:	429a      	cmp	r2, r3
 801e7ce:	f47f af70 	bne.w	801e6b2 <lfs_rename_+0x62>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 801e7d2:	f1b9 0f00 	cmp.w	r9, #0
 801e7d6:	db02      	blt.n	801e7de <lfs_rename_+0x18e>
 801e7d8:	f06f 0615 	mvn.w	r6, #21
 801e7dc:	e742      	b.n	801e664 <lfs_rename_+0x14>
 801e7de:	464e      	mov	r6, r9
 801e7e0:	e740      	b.n	801e664 <lfs_rename_+0x14>
        lfs_size_t nlen = strlen(newpath);
 801e7e2:	9802      	ldr	r0, [sp, #8]
 801e7e4:	f7f1 fd5c 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801e7e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801e7ea:	4283      	cmp	r3, r0
 801e7ec:	f0c0 8082 	bcc.w	801e8f4 <lfs_rename_+0x2a4>
        if (samepair && newid <= newoldid) {
 801e7f0:	2e00      	cmp	r6, #0
 801e7f2:	d141      	bne.n	801e878 <lfs_rename_+0x228>
 801e7f4:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e7f8:	42ab      	cmp	r3, r5
 801e7fa:	d83b      	bhi.n	801e874 <lfs_rename_+0x224>
            newoldid += 1;
 801e7fc:	f105 0a01 	add.w	sl, r5, #1
 801e800:	e77e      	b.n	801e700 <lfs_rename_+0xb0>
                : LFS_ERR_NOTDIR;
 801e802:	2a02      	cmp	r2, #2
 801e804:	d002      	beq.n	801e80c <lfs_rename_+0x1bc>
 801e806:	f06f 0613 	mvn.w	r6, #19
 801e80a:	e72b      	b.n	801e664 <lfs_rename_+0x14>
 801e80c:	f06f 0614 	mvn.w	r6, #20
 801e810:	e728      	b.n	801e664 <lfs_rename_+0x14>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 801e812:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801e816:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 801e818:	aa05      	add	r2, sp, #20
 801e81a:	9200      	str	r2, [sp, #0]
 801e81c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e820:	f043 0308 	orr.w	r3, r3, #8
 801e824:	4a36      	ldr	r2, [pc, #216]	@ (801e900 <lfs_rename_+0x2b0>)
 801e826:	a91a      	add	r1, sp, #104	@ 0x68
 801e828:	4620      	mov	r0, r4
 801e82a:	f7fc fa63 	bl	801acf4 <lfs_dir_get>
        if (res < 0) {
 801e82e:	2800      	cmp	r0, #0
 801e830:	db1a      	blt.n	801e868 <lfs_rename_+0x218>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 801e832:	aa05      	add	r2, sp, #20
 801e834:	a911      	add	r1, sp, #68	@ 0x44
 801e836:	4620      	mov	r0, r4
 801e838:	f7fd fa4a 	bl	801bcd0 <lfs_dir_fetch>
        if (err) {
 801e83c:	b9b0      	cbnz	r0, 801e86c <lfs_rename_+0x21c>
        if (prevdir.m.count > 0 || prevdir.m.split) {
 801e83e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e840:	f433 037f 	bics.w	r3, r3, #16711680	@ 0xff0000
 801e844:	d002      	beq.n	801e84c <lfs_rename_+0x1fc>
            return LFS_ERR_NOTEMPTY;
 801e846:	f06f 0626 	mvn.w	r6, #38	@ 0x26
 801e84a:	e70b      	b.n	801e664 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, +1);
 801e84c:	2101      	movs	r1, #1
 801e84e:	4620      	mov	r0, r4
 801e850:	f7fc f852 	bl	801a8f8 <lfs_fs_preporphans>
        if (err) {
 801e854:	b960      	cbnz	r0, 801e870 <lfs_rename_+0x220>
        prevdir.type = 0;
 801e856:	2300      	movs	r3, #0
 801e858:	f88d 3042 	strb.w	r3, [sp, #66]	@ 0x42
        prevdir.id = 0;
 801e85c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
        lfs->mlist = &prevdir;
 801e860:	ab0f      	add	r3, sp, #60	@ 0x3c
 801e862:	62a3      	str	r3, [r4, #40]	@ 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
 801e864:	46aa      	mov	sl, r5
 801e866:	e74b      	b.n	801e700 <lfs_rename_+0xb0>
            return (int)res;
 801e868:	4606      	mov	r6, r0
 801e86a:	e6fb      	b.n	801e664 <lfs_rename_+0x14>
            return err;
 801e86c:	4606      	mov	r6, r0
 801e86e:	e6f9      	b.n	801e664 <lfs_rename_+0x14>
            return err;
 801e870:	4606      	mov	r6, r0
 801e872:	e6f7      	b.n	801e664 <lfs_rename_+0x14>
    uint16_t newoldid = lfs_tag_id(oldtag);
 801e874:	46aa      	mov	sl, r5
 801e876:	e743      	b.n	801e700 <lfs_rename_+0xb0>
 801e878:	46aa      	mov	sl, r5
 801e87a:	e742      	b.n	801e702 <lfs_rename_+0xb2>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 801e87c:	2300      	movs	r3, #0
 801e87e:	e750      	b.n	801e722 <lfs_rename_+0xd2>
 801e880:	2300      	movs	r3, #0
 801e882:	e779      	b.n	801e778 <lfs_rename_+0x128>
        lfs->mlist = prevdir.next;
 801e884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e886:	62a3      	str	r3, [r4, #40]	@ 0x28
        return err;
 801e888:	4606      	mov	r6, r0
 801e88a:	e6eb      	b.n	801e664 <lfs_rename_+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801e88c:	2200      	movs	r2, #0
 801e88e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801e892:	4620      	mov	r0, r4
 801e894:	f7fb ffe0 	bl	801a858 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 801e898:	02ab      	lsls	r3, r5, #10
 801e89a:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801e89e:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801e8a2:	932a      	str	r3, [sp, #168]	@ 0xa8
 801e8a4:	2300      	movs	r3, #0
 801e8a6:	932b      	str	r3, [sp, #172]	@ 0xac
 801e8a8:	2301      	movs	r3, #1
 801e8aa:	aa2a      	add	r2, sp, #168	@ 0xa8
 801e8ac:	a922      	add	r1, sp, #136	@ 0x88
 801e8ae:	4620      	mov	r0, r4
 801e8b0:	f7ff f83e 	bl	801d930 <lfs_dir_commit>
        if (err) {
 801e8b4:	4606      	mov	r6, r0
 801e8b6:	2800      	cmp	r0, #0
 801e8b8:	f43f af70 	beq.w	801e79c <lfs_rename_+0x14c>
            lfs->mlist = prevdir.next;
 801e8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e8be:	62a3      	str	r3, [r4, #40]	@ 0x28
            return err;
 801e8c0:	e6d0      	b.n	801e664 <lfs_rename_+0x14>
        err = lfs_fs_preporphans(lfs, -1);
 801e8c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e8c6:	4620      	mov	r0, r4
 801e8c8:	f7fc f816 	bl	801a8f8 <lfs_fs_preporphans>
        if (err) {
 801e8cc:	4606      	mov	r6, r0
 801e8ce:	2800      	cmp	r0, #0
 801e8d0:	f47f aec8 	bne.w	801e664 <lfs_rename_+0x14>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801e8d4:	aa1a      	add	r2, sp, #104	@ 0x68
 801e8d6:	a911      	add	r1, sp, #68	@ 0x44
 801e8d8:	4620      	mov	r0, r4
 801e8da:	f7fd ff1f 	bl	801c71c <lfs_fs_pred>
        if (err) {
 801e8de:	4606      	mov	r6, r0
 801e8e0:	2800      	cmp	r0, #0
 801e8e2:	f47f aebf 	bne.w	801e664 <lfs_rename_+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 801e8e6:	aa11      	add	r2, sp, #68	@ 0x44
 801e8e8:	a91a      	add	r1, sp, #104	@ 0x68
 801e8ea:	4620      	mov	r0, r4
 801e8ec:	f7ff f8dc 	bl	801daa8 <lfs_dir_drop>
 801e8f0:	4606      	mov	r6, r0
        if (err) {
 801e8f2:	e6b7      	b.n	801e664 <lfs_rename_+0x14>
            return LFS_ERR_NAMETOOLONG;
 801e8f4:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801e8f8:	e6b4      	b.n	801e664 <lfs_rename_+0x14>
    return 0;
 801e8fa:	463e      	mov	r6, r7
 801e8fc:	e6b2      	b.n	801e664 <lfs_rename_+0x14>
 801e8fe:	bf00      	nop
 801e900:	700ffc00 	.word	0x700ffc00

0801e904 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 801e904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e908:	b08b      	sub	sp, #44	@ 0x2c
 801e90a:	4607      	mov	r7, r0
 801e90c:	460c      	mov	r4, r1
 801e90e:	9203      	str	r2, [sp, #12]
 801e910:	461d      	mov	r5, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801e912:	f013 0f02 	tst.w	r3, #2
 801e916:	d005      	beq.n	801e924 <lfs_file_opencfg_+0x20>
        int err = lfs_fs_forceconsistency(lfs);
 801e918:	f7ff f8b2 	bl	801da80 <lfs_fs_forceconsistency>
        if (err) {
 801e91c:	4606      	mov	r6, r0
 801e91e:	2800      	cmp	r0, #0
 801e920:	f040 8109 	bne.w	801eb36 <lfs_file_opencfg_+0x232>
    file->cfg = cfg;
 801e924:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e926:	6523      	str	r3, [r4, #80]	@ 0x50
    file->flags = flags;
 801e928:	6325      	str	r5, [r4, #48]	@ 0x30
    file->pos = 0;
 801e92a:	2300      	movs	r3, #0
 801e92c:	6363      	str	r3, [r4, #52]	@ 0x34
    file->off = 0;
 801e92e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    file->cache.buffer = NULL;
 801e930:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 801e932:	f104 0808 	add.w	r8, r4, #8
 801e936:	1d23      	adds	r3, r4, #4
 801e938:	aa03      	add	r2, sp, #12
 801e93a:	4641      	mov	r1, r8
 801e93c:	4638      	mov	r0, r7
 801e93e:	f7ff fd0b 	bl	801e358 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 801e942:	1e06      	subs	r6, r0, #0
 801e944:	da09      	bge.n	801e95a <lfs_file_opencfg_+0x56>
 801e946:	f116 0f02 	cmn.w	r6, #2
 801e94a:	f040 80ec 	bne.w	801eb26 <lfs_file_opencfg_+0x222>
 801e94e:	88a2      	ldrh	r2, [r4, #4]
 801e950:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801e954:	429a      	cmp	r2, r3
 801e956:	f000 80e6 	beq.w	801eb26 <lfs_file_opencfg_+0x222>
    file->type = LFS_TYPE_REG;
 801e95a:	2301      	movs	r3, #1
 801e95c:	71a3      	strb	r3, [r4, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801e95e:	4621      	mov	r1, r4
 801e960:	4638      	mov	r0, r7
 801e962:	f7fb fec7 	bl	801a6f4 <lfs_mlist_append>
    if (tag == LFS_ERR_NOENT) {
 801e966:	f116 0f02 	cmn.w	r6, #2
 801e96a:	d019      	beq.n	801e9a0 <lfs_file_opencfg_+0x9c>
    } else if (flags & LFS_O_EXCL) {
 801e96c:	f415 7f00 	tst.w	r5, #512	@ 0x200
 801e970:	f040 80d7 	bne.w	801eb22 <lfs_file_opencfg_+0x21e>
    return (tag & 0x7ff00000) >> 20;
 801e974:	f3c6 560a 	ubfx	r6, r6, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801e978:	2e01      	cmp	r6, #1
 801e97a:	f040 80e0 	bne.w	801eb3e <lfs_file_opencfg_+0x23a>
    } else if (flags & LFS_O_TRUNC) {
 801e97e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 801e982:	d042      	beq.n	801ea0a <lfs_file_opencfg_+0x106>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801e984:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 801e988:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801e98c:	f049 5900 	orr.w	r9, r9, #536870912	@ 0x20000000
 801e990:	f449 1980 	orr.w	r9, r9, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 801e994:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e99a:	6323      	str	r3, [r4, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801e99c:	2500      	movs	r5, #0
 801e99e:	e064      	b.n	801ea6a <lfs_file_opencfg_+0x166>
        if (!(flags & LFS_O_CREAT)) {
 801e9a0:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801e9a4:	f000 80bf 	beq.w	801eb26 <lfs_file_opencfg_+0x222>
        lfs_size_t nlen = strlen(path);
 801e9a8:	9d03      	ldr	r5, [sp, #12]
 801e9aa:	4628      	mov	r0, r5
 801e9ac:	f7f1 fc78 	bl	80102a0 <strlen>
        if (nlen > lfs->name_max) {
 801e9b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801e9b2:	4283      	cmp	r3, r0
 801e9b4:	d202      	bcs.n	801e9bc <lfs_file_opencfg_+0xb8>
            err = LFS_ERR_NAMETOOLONG;
 801e9b6:	f06f 0623 	mvn.w	r6, #35	@ 0x23
 801e9ba:	e0b4      	b.n	801eb26 <lfs_file_opencfg_+0x222>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801e9bc:	88a3      	ldrh	r3, [r4, #4]
 801e9be:	029b      	lsls	r3, r3, #10
 801e9c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801e9c4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801e9c8:	9204      	str	r2, [sp, #16]
 801e9ca:	2200      	movs	r2, #0
 801e9cc:	9205      	str	r2, [sp, #20]
 801e9ce:	4318      	orrs	r0, r3
 801e9d0:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 801e9d4:	9006      	str	r0, [sp, #24]
 801e9d6:	9507      	str	r5, [sp, #28]
 801e9d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e9dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e9e0:	9308      	str	r3, [sp, #32]
 801e9e2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e9e4:	2303      	movs	r3, #3
 801e9e6:	aa04      	add	r2, sp, #16
 801e9e8:	4641      	mov	r1, r8
 801e9ea:	4638      	mov	r0, r7
 801e9ec:	f7fe ffa0 	bl	801d930 <lfs_dir_commit>
 801e9f0:	4606      	mov	r6, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801e9f2:	f110 0f1c 	cmn.w	r0, #28
 801e9f6:	d005      	beq.n	801ea04 <lfs_file_opencfg_+0x100>
        if (err) {
 801e9f8:	2800      	cmp	r0, #0
 801e9fa:	f040 8094 	bne.w	801eb26 <lfs_file_opencfg_+0x222>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 801e9fe:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 801eb54 <lfs_file_opencfg_+0x250>
 801ea02:	e7cb      	b.n	801e99c <lfs_file_opencfg_+0x98>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 801ea04:	f06f 0623 	mvn.w	r6, #35	@ 0x23
            goto cleanup;
 801ea08:	e08d      	b.n	801eb26 <lfs_file_opencfg_+0x222>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 801ea0a:	88a3      	ldrh	r3, [r4, #4]
 801ea0c:	029b      	lsls	r3, r3, #10
 801ea0e:	f104 0228 	add.w	r2, r4, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801ea12:	9200      	str	r2, [sp, #0]
 801ea14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ea18:	f043 0308 	orr.w	r3, r3, #8
 801ea1c:	4a4b      	ldr	r2, [pc, #300]	@ (801eb4c <lfs_file_opencfg_+0x248>)
 801ea1e:	4641      	mov	r1, r8
 801ea20:	4638      	mov	r0, r7
 801ea22:	f7fc f967 	bl	801acf4 <lfs_dir_get>
        if (tag < 0) {
 801ea26:	f1b0 0900 	subs.w	r9, r0, #0
 801ea2a:	dab7      	bge.n	801e99c <lfs_file_opencfg_+0x98>
            err = tag;
 801ea2c:	464e      	mov	r6, r9
 801ea2e:	e07a      	b.n	801eb26 <lfs_file_opencfg_+0x222>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 801ea30:	685b      	ldr	r3, [r3, #4]
 801ea32:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ea36:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 801ea3a:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 801ea3e:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 801ea42:	88a3      	ldrh	r3, [r4, #4]
 801ea44:	029b      	lsls	r3, r3, #10
 801ea46:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 801ea4a:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801ea4c:	6849      	ldr	r1, [r1, #4]
 801ea4e:	9100      	str	r1, [sp, #0]
 801ea50:	4313      	orrs	r3, r2
 801ea52:	4a3f      	ldr	r2, [pc, #252]	@ (801eb50 <lfs_file_opencfg_+0x24c>)
 801ea54:	4641      	mov	r1, r8
 801ea56:	4638      	mov	r0, r7
 801ea58:	f7fc f94c 	bl	801acf4 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 801ea5c:	1e06      	subs	r6, r0, #0
 801ea5e:	da0c      	bge.n	801ea7a <lfs_file_opencfg_+0x176>
 801ea60:	f116 0f02 	cmn.w	r6, #2
 801ea64:	d009      	beq.n	801ea7a <lfs_file_opencfg_+0x176>
 801ea66:	e05e      	b.n	801eb26 <lfs_file_opencfg_+0x222>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801ea68:	3501      	adds	r5, #1
 801ea6a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801ea6c:	689a      	ldr	r2, [r3, #8]
 801ea6e:	42aa      	cmp	r2, r5
 801ea70:	d915      	bls.n	801ea9e <lfs_file_opencfg_+0x19a>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801ea72:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801ea74:	f012 0f01 	tst.w	r2, #1
 801ea78:	d1da      	bne.n	801ea30 <lfs_file_opencfg_+0x12c>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 801ea7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ea7c:	f013 0f02 	tst.w	r3, #2
 801ea80:	d0f2      	beq.n	801ea68 <lfs_file_opencfg_+0x164>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801ea82:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801ea84:	6852      	ldr	r2, [r2, #4]
 801ea86:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801ea8a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ea8e:	6891      	ldr	r1, [r2, #8]
 801ea90:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801ea92:	4291      	cmp	r1, r2
 801ea94:	d856      	bhi.n	801eb44 <lfs_file_opencfg_+0x240>
            file->flags |= LFS_F_DIRTY;
 801ea96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ea9a:	6323      	str	r3, [r4, #48]	@ 0x30
 801ea9c:	e7e4      	b.n	801ea68 <lfs_file_opencfg_+0x164>
    if (file->cfg->buffer) {
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	b16b      	cbz	r3, 801eabe <lfs_file_opencfg_+0x1ba>
        file->cache.buffer = file->cfg->buffer;
 801eaa2:	64e3      	str	r3, [r4, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 801eaa4:	f104 0140 	add.w	r1, r4, #64	@ 0x40
 801eaa8:	4638      	mov	r0, r7
 801eaaa:	f7fb ff55 	bl	801a958 <lfs_cache_zero>
    return (tag & 0x7ff00000) >> 20;
 801eaae:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801eab2:	f240 2301 	movw	r3, #513	@ 0x201
 801eab6:	429a      	cmp	r2, r3
 801eab8:	d00b      	beq.n	801ead2 <lfs_file_opencfg_+0x1ce>
    return 0;
 801eaba:	2600      	movs	r6, #0
 801eabc:	e03b      	b.n	801eb36 <lfs_file_opencfg_+0x232>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 801eabe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    return malloc(size);
 801eac0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801eac2:	f7fb fb09 	bl	801a0d8 <pvPortMalloc>
 801eac6:	64e0      	str	r0, [r4, #76]	@ 0x4c
        if (!file->cache.buffer) {
 801eac8:	2800      	cmp	r0, #0
 801eaca:	d1eb      	bne.n	801eaa4 <lfs_file_opencfg_+0x1a0>
            err = LFS_ERR_NOMEM;
 801eacc:	f06f 060b 	mvn.w	r6, #11
 801ead0:	e029      	b.n	801eb26 <lfs_file_opencfg_+0x222>
        file->ctz.head = LFS_BLOCK_INLINE;
 801ead2:	f06f 0101 	mvn.w	r1, #1
 801ead6:	62a1      	str	r1, [r4, #40]	@ 0x28
    return tag & 0x000003ff;
 801ead8:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
 801eadc:	62e2      	str	r2, [r4, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 801eade:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eae0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801eae4:	6323      	str	r3, [r4, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 801eae6:	6421      	str	r1, [r4, #64]	@ 0x40
        file->cache.off = 0;
 801eae8:	2300      	movs	r3, #0
 801eaea:	6463      	str	r3, [r4, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 801eaec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801eaee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801eaf0:	64a3      	str	r3, [r4, #72]	@ 0x48
        if (file->ctz.size > 0) {
 801eaf2:	b90a      	cbnz	r2, 801eaf8 <lfs_file_opencfg_+0x1f4>
    return 0;
 801eaf4:	2600      	movs	r6, #0
 801eaf6:	e01e      	b.n	801eb36 <lfs_file_opencfg_+0x232>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 801eaf8:	88a1      	ldrh	r1, [r4, #4]
    return (a < b) ? a : b;
 801eafa:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 801eafe:	4293      	cmp	r3, r2
 801eb00:	bf28      	it	cs
 801eb02:	4613      	movcs	r3, r2
 801eb04:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
                    file->cache.buffer);
 801eb08:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801eb0a:	9200      	str	r2, [sp, #0]
 801eb0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801eb10:	4a0e      	ldr	r2, [pc, #56]	@ (801eb4c <lfs_file_opencfg_+0x248>)
 801eb12:	4641      	mov	r1, r8
 801eb14:	4638      	mov	r0, r7
 801eb16:	f7fc f8ed 	bl	801acf4 <lfs_dir_get>
            if (res < 0) {
 801eb1a:	1e06      	subs	r6, r0, #0
 801eb1c:	db03      	blt.n	801eb26 <lfs_file_opencfg_+0x222>
    return 0;
 801eb1e:	2600      	movs	r6, #0
 801eb20:	e009      	b.n	801eb36 <lfs_file_opencfg_+0x232>
        err = LFS_ERR_EXIST;
 801eb22:	f06f 0610 	mvn.w	r6, #16
    file->flags |= LFS_F_ERRED;
 801eb26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801eb2c:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 801eb2e:	4621      	mov	r1, r4
 801eb30:	4638      	mov	r0, r7
 801eb32:	f7ff fbfd 	bl	801e330 <lfs_file_close_>
}
 801eb36:	4630      	mov	r0, r6
 801eb38:	b00b      	add	sp, #44	@ 0x2c
 801eb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
 801eb3e:	f06f 0614 	mvn.w	r6, #20
 801eb42:	e7f0      	b.n	801eb26 <lfs_file_opencfg_+0x222>
                err = LFS_ERR_NOSPC;
 801eb44:	f06f 061b 	mvn.w	r6, #27
 801eb48:	e7ed      	b.n	801eb26 <lfs_file_opencfg_+0x222>
 801eb4a:	bf00      	nop
 801eb4c:	700ffc00 	.word	0x700ffc00
 801eb50:	7ffffc00 	.word	0x7ffffc00
 801eb54:	20100000 	.word	0x20100000

0801eb58 <lfs_file_open_>:
        const char *path, int flags) {
 801eb58:	b510      	push	{r4, lr}
 801eb5a:	b082      	sub	sp, #8
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 801eb5c:	4c02      	ldr	r4, [pc, #8]	@ (801eb68 <lfs_file_open_+0x10>)
 801eb5e:	9400      	str	r4, [sp, #0]
 801eb60:	f7ff fed0 	bl	801e904 <lfs_file_opencfg_>
}
 801eb64:	b002      	add	sp, #8
 801eb66:	bd10      	pop	{r4, pc}
 801eb68:	08038e64 	.word	0x08038e64

0801eb6c <lfs_mkdir_>:
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 801eb6c:	b530      	push	{r4, r5, lr}
 801eb6e:	b0ab      	sub	sp, #172	@ 0xac
 801eb70:	4604      	mov	r4, r0
 801eb72:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
 801eb74:	f7fe ff84 	bl	801da80 <lfs_fs_forceconsistency>
    if (err) {
 801eb78:	4603      	mov	r3, r0
 801eb7a:	b110      	cbz	r0, 801eb82 <lfs_mkdir_+0x16>
}
 801eb7c:	4618      	mov	r0, r3
 801eb7e:	b02b      	add	sp, #172	@ 0xac
 801eb80:	bd30      	pop	{r4, r5, pc}
    cwd.next = lfs->mlist;
 801eb82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801eb84:	931c      	str	r3, [sp, #112]	@ 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801eb86:	f10d 036e 	add.w	r3, sp, #110	@ 0x6e
 801eb8a:	aa01      	add	r2, sp, #4
 801eb8c:	a91e      	add	r1, sp, #120	@ 0x78
 801eb8e:	4620      	mov	r0, r4
 801eb90:	f7ff fbe2 	bl	801e358 <lfs_dir_find>
 801eb94:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 801eb96:	f110 0f02 	cmn.w	r0, #2
 801eb9a:	d12f      	bne.n	801ebfc <lfs_mkdir_+0x90>
 801eb9c:	f8bd 106e 	ldrh.w	r1, [sp, #110]	@ 0x6e
 801eba0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 801eba4:	4291      	cmp	r1, r2
 801eba6:	d029      	beq.n	801ebfc <lfs_mkdir_+0x90>
    lfs_size_t nlen = strlen(path);
 801eba8:	9801      	ldr	r0, [sp, #4]
 801ebaa:	f7f1 fb79 	bl	80102a0 <strlen>
 801ebae:	4605      	mov	r5, r0
    if (nlen > lfs->name_max) {
 801ebb0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801ebb2:	4283      	cmp	r3, r0
 801ebb4:	f0c0 8089 	bcc.w	801ecca <lfs_mkdir_+0x15e>
    lfs_alloc_ckpoint(lfs);
 801ebb8:	4620      	mov	r0, r4
 801ebba:	f7fb fdad 	bl	801a718 <lfs_alloc_ckpoint>
    err = lfs_dir_alloc(lfs, &dir);
 801ebbe:	a913      	add	r1, sp, #76	@ 0x4c
 801ebc0:	4620      	mov	r0, r4
 801ebc2:	f7fd f9f3 	bl	801bfac <lfs_dir_alloc>
    if (err) {
 801ebc6:	4603      	mov	r3, r0
 801ebc8:	2800      	cmp	r0, #0
 801ebca:	d1d7      	bne.n	801eb7c <lfs_mkdir_+0x10>
    lfs_mdir_t pred = cwd.m;
 801ebcc:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801ebd0:	f10d 0e78 	add.w	lr, sp, #120	@ 0x78
 801ebd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ebd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ebdc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801ebe0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    while (pred.split) {
 801ebe4:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 801ebe8:	b16b      	cbz	r3, 801ec06 <lfs_mkdir_+0x9a>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 801ebea:	aa11      	add	r2, sp, #68	@ 0x44
 801ebec:	a90b      	add	r1, sp, #44	@ 0x2c
 801ebee:	4620      	mov	r0, r4
 801ebf0:	f7fd f86e 	bl	801bcd0 <lfs_dir_fetch>
        if (err) {
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	2800      	cmp	r0, #0
 801ebf8:	d0f4      	beq.n	801ebe4 <lfs_mkdir_+0x78>
 801ebfa:	e7bf      	b.n	801eb7c <lfs_mkdir_+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	dbbd      	blt.n	801eb7c <lfs_mkdir_+0x10>
 801ec00:	f06f 0310 	mvn.w	r3, #16
 801ec04:	e7ba      	b.n	801eb7c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 801ec06:	4b32      	ldr	r3, [pc, #200]	@ (801ecd0 <lfs_mkdir_+0x164>)
 801ec08:	9326      	str	r3, [sp, #152]	@ 0x98
 801ec0a:	ab11      	add	r3, sp, #68	@ 0x44
 801ec0c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ec0e:	2301      	movs	r3, #1
 801ec10:	aa26      	add	r2, sp, #152	@ 0x98
 801ec12:	a913      	add	r1, sp, #76	@ 0x4c
 801ec14:	4620      	mov	r0, r4
 801ec16:	f7fe fe8b 	bl	801d930 <lfs_dir_commit>
    if (err) {
 801ec1a:	4603      	mov	r3, r0
 801ec1c:	2800      	cmp	r0, #0
 801ec1e:	d1ad      	bne.n	801eb7c <lfs_mkdir_+0x10>
    if (cwd.m.split) {
 801ec20:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801ec24:	bb33      	cbnz	r3, 801ec74 <lfs_mkdir_+0x108>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801ec26:	f8bd 306e 	ldrh.w	r3, [sp, #110]	@ 0x6e
 801ec2a:	029b      	lsls	r3, r3, #10
 801ec2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801ec30:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801ec34:	9203      	str	r2, [sp, #12]
 801ec36:	2200      	movs	r2, #0
 801ec38:	9204      	str	r2, [sp, #16]
 801ec3a:	431d      	orrs	r5, r3
 801ec3c:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801ec40:	9505      	str	r5, [sp, #20]
 801ec42:	9a01      	ldr	r2, [sp, #4]
 801ec44:	9206      	str	r2, [sp, #24]
 801ec46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801ec4a:	f043 0308 	orr.w	r3, r3, #8
 801ec4e:	9307      	str	r3, [sp, #28]
 801ec50:	ab13      	add	r3, sp, #76	@ 0x4c
 801ec52:	9308      	str	r3, [sp, #32]
 801ec54:	f89d 308f 	ldrb.w	r3, [sp, #143]	@ 0x8f
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d134      	bne.n	801ecc6 <lfs_mkdir_+0x15a>
 801ec5c:	4b1c      	ldr	r3, [pc, #112]	@ (801ecd0 <lfs_mkdir_+0x164>)
 801ec5e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec60:	ab13      	add	r3, sp, #76	@ 0x4c
 801ec62:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec64:	2304      	movs	r3, #4
 801ec66:	aa03      	add	r2, sp, #12
 801ec68:	a91e      	add	r1, sp, #120	@ 0x78
 801ec6a:	4620      	mov	r0, r4
 801ec6c:	f7fe fe60 	bl	801d930 <lfs_dir_commit>
 801ec70:	4603      	mov	r3, r0
    if (err) {
 801ec72:	e783      	b.n	801eb7c <lfs_mkdir_+0x10>
        err = lfs_fs_preporphans(lfs, +1);
 801ec74:	2101      	movs	r1, #1
 801ec76:	4620      	mov	r0, r4
 801ec78:	f7fb fe3e 	bl	801a8f8 <lfs_fs_preporphans>
        if (err) {
 801ec7c:	4603      	mov	r3, r0
 801ec7e:	2800      	cmp	r0, #0
 801ec80:	f47f af7c 	bne.w	801eb7c <lfs_mkdir_+0x10>
        cwd.type = 0;
 801ec84:	2300      	movs	r3, #0
 801ec86:	f88d 3076 	strb.w	r3, [sp, #118]	@ 0x76
        cwd.id = 0;
 801ec8a:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        lfs->mlist = &cwd;
 801ec8e:	ab1c      	add	r3, sp, #112	@ 0x70
 801ec90:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801ec92:	4b0f      	ldr	r3, [pc, #60]	@ (801ecd0 <lfs_mkdir_+0x164>)
 801ec94:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ec96:	ab13      	add	r3, sp, #76	@ 0x4c
 801ec98:	9329      	str	r3, [sp, #164]	@ 0xa4
 801ec9a:	2301      	movs	r3, #1
 801ec9c:	aa28      	add	r2, sp, #160	@ 0xa0
 801ec9e:	a90b      	add	r1, sp, #44	@ 0x2c
 801eca0:	4620      	mov	r0, r4
 801eca2:	f7fe fe45 	bl	801d930 <lfs_dir_commit>
        if (err) {
 801eca6:	4603      	mov	r3, r0
 801eca8:	b110      	cbz	r0, 801ecb0 <lfs_mkdir_+0x144>
            lfs->mlist = cwd.next;
 801ecaa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801ecac:	62a2      	str	r2, [r4, #40]	@ 0x28
            return err;
 801ecae:	e765      	b.n	801eb7c <lfs_mkdir_+0x10>
        lfs->mlist = cwd.next;
 801ecb0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ecb2:	62a3      	str	r3, [r4, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 801ecb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ecb8:	4620      	mov	r0, r4
 801ecba:	f7fb fe1d 	bl	801a8f8 <lfs_fs_preporphans>
        if (err) {
 801ecbe:	4603      	mov	r3, r0
 801ecc0:	2800      	cmp	r0, #0
 801ecc2:	d0b0      	beq.n	801ec26 <lfs_mkdir_+0xba>
 801ecc4:	e75a      	b.n	801eb7c <lfs_mkdir_+0x10>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	e7c9      	b.n	801ec5e <lfs_mkdir_+0xf2>
        return LFS_ERR_NAMETOOLONG;
 801ecca:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 801ecce:	e755      	b.n	801eb7c <lfs_mkdir_+0x10>
 801ecd0:	600ffc08 	.word	0x600ffc08

0801ecd4 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 801ecd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ecd6:	b085      	sub	sp, #20
 801ecd8:	461d      	mov	r5, r3
    if (id == 0x3ff) {
 801ecda:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 801ecde:	429a      	cmp	r2, r3
 801ece0:	d02b      	beq.n	801ed3a <lfs_dir_getinfo+0x66>
 801ece2:	4604      	mov	r4, r0
 801ece4:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 801ece6:	0297      	lsls	r7, r2, #10
 801ece8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801ecea:	3301      	adds	r3, #1
 801ecec:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 801ecf0:	9100      	str	r1, [sp, #0]
 801ecf2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801ecf6:	4a19      	ldr	r2, [pc, #100]	@ (801ed5c <lfs_dir_getinfo+0x88>)
 801ecf8:	4631      	mov	r1, r6
 801ecfa:	f7fb fffb 	bl	801acf4 <lfs_dir_get>
    if (tag < 0) {
 801ecfe:	2800      	cmp	r0, #0
 801ed00:	db21      	blt.n	801ed46 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801ed02:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
 801ed06:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 801ed08:	ab02      	add	r3, sp, #8
 801ed0a:	9300      	str	r3, [sp, #0]
 801ed0c:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 801ed10:	f043 0308 	orr.w	r3, r3, #8
 801ed14:	4a12      	ldr	r2, [pc, #72]	@ (801ed60 <lfs_dir_getinfo+0x8c>)
 801ed16:	4631      	mov	r1, r6
 801ed18:	4620      	mov	r0, r4
 801ed1a:	f7fb ffeb 	bl	801acf4 <lfs_dir_get>
    if (tag < 0) {
 801ed1e:	2800      	cmp	r0, #0
 801ed20:	db11      	blt.n	801ed46 <lfs_dir_getinfo+0x72>
    return (tag & 0x7ff00000) >> 20;
 801ed22:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 801ed26:	f240 2202 	movw	r2, #514	@ 0x202
 801ed2a:	4293      	cmp	r3, r2
 801ed2c:	d00d      	beq.n	801ed4a <lfs_dir_getinfo+0x76>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 801ed2e:	f240 2201 	movw	r2, #513	@ 0x201
 801ed32:	4293      	cmp	r3, r2
 801ed34:	d00d      	beq.n	801ed52 <lfs_dir_getinfo+0x7e>
    return 0;
 801ed36:	2000      	movs	r0, #0
 801ed38:	e005      	b.n	801ed46 <lfs_dir_getinfo+0x72>
        strcpy(info->name, "/");
 801ed3a:	4b0a      	ldr	r3, [pc, #40]	@ (801ed64 <lfs_dir_getinfo+0x90>)
 801ed3c:	881b      	ldrh	r3, [r3, #0]
 801ed3e:	812b      	strh	r3, [r5, #8]
        info->type = LFS_TYPE_DIR;
 801ed40:	2302      	movs	r3, #2
 801ed42:	702b      	strb	r3, [r5, #0]
        return 0;
 801ed44:	2000      	movs	r0, #0
}
 801ed46:	b005      	add	sp, #20
 801ed48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
 801ed4a:	9b03      	ldr	r3, [sp, #12]
 801ed4c:	606b      	str	r3, [r5, #4]
    return 0;
 801ed4e:	2000      	movs	r0, #0
 801ed50:	e7f9      	b.n	801ed46 <lfs_dir_getinfo+0x72>
    return tag & 0x000003ff;
 801ed52:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 801ed56:	6068      	str	r0, [r5, #4]
    return 0;
 801ed58:	2000      	movs	r0, #0
 801ed5a:	e7f4      	b.n	801ed46 <lfs_dir_getinfo+0x72>
 801ed5c:	780ffc00 	.word	0x780ffc00
 801ed60:	700ffc00 	.word	0x700ffc00
 801ed64:	08039554 	.word	0x08039554

0801ed68 <lfs_stat_>:
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801ed68:	b530      	push	{r4, r5, lr}
 801ed6a:	b08b      	sub	sp, #44	@ 0x2c
 801ed6c:	4604      	mov	r4, r0
 801ed6e:	9101      	str	r1, [sp, #4]
 801ed70:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801ed72:	2300      	movs	r3, #0
 801ed74:	aa01      	add	r2, sp, #4
 801ed76:	a902      	add	r1, sp, #8
 801ed78:	f7ff faee 	bl	801e358 <lfs_dir_find>
    if (tag < 0) {
 801ed7c:	2800      	cmp	r0, #0
 801ed7e:	db06      	blt.n	801ed8e <lfs_stat_+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 801ed80:	462b      	mov	r3, r5
 801ed82:	f3c0 2289 	ubfx	r2, r0, #10, #10
 801ed86:	a902      	add	r1, sp, #8
 801ed88:	4620      	mov	r0, r4
 801ed8a:	f7ff ffa3 	bl	801ecd4 <lfs_dir_getinfo>
}
 801ed8e:	b00b      	add	sp, #44	@ 0x2c
 801ed90:	bd30      	pop	{r4, r5, pc}
	...

0801ed94 <lfs_dir_read_>:
static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801ed94:	b570      	push	{r4, r5, r6, lr}
 801ed96:	4605      	mov	r5, r0
 801ed98:	460c      	mov	r4, r1
 801ed9a:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
 801ed9c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 801eda0:	2100      	movs	r1, #0
 801eda2:	4630      	mov	r0, r6
 801eda4:	f00d f924 	bl	802bff0 <memset>
    if (dir->pos == 0) {
 801eda8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801edaa:	b183      	cbz	r3, 801edce <lfs_dir_read_+0x3a>
    } else if (dir->pos == 1) {
 801edac:	2b01      	cmp	r3, #1
 801edae:	d11f      	bne.n	801edf0 <lfs_dir_read_+0x5c>
        info->type = LFS_TYPE_DIR;
 801edb0:	4633      	mov	r3, r6
 801edb2:	2202      	movs	r2, #2
 801edb4:	f803 2b08 	strb.w	r2, [r3], #8
        strcpy(info->name, "..");
 801edb8:	4a22      	ldr	r2, [pc, #136]	@ (801ee44 <lfs_dir_read_+0xb0>)
 801edba:	8811      	ldrh	r1, [r2, #0]
 801edbc:	7892      	ldrb	r2, [r2, #2]
 801edbe:	8131      	strh	r1, [r6, #8]
 801edc0:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801edc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801edc4:	3301      	adds	r3, #1
 801edc6:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801edc8:	f04f 0c01 	mov.w	ip, #1
 801edcc:	e034      	b.n	801ee38 <lfs_dir_read_+0xa4>
        info->type = LFS_TYPE_DIR;
 801edce:	2302      	movs	r3, #2
 801edd0:	7033      	strb	r3, [r6, #0]
        strcpy(info->name, ".");
 801edd2:	4b1d      	ldr	r3, [pc, #116]	@ (801ee48 <lfs_dir_read_+0xb4>)
 801edd4:	881b      	ldrh	r3, [r3, #0]
 801edd6:	8133      	strh	r3, [r6, #8]
        dir->pos += 1;
 801edd8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801edda:	3301      	adds	r3, #1
 801eddc:	62a3      	str	r3, [r4, #40]	@ 0x28
        return true;
 801edde:	f04f 0c01 	mov.w	ip, #1
 801ede2:	e029      	b.n	801ee38 <lfs_dir_read_+0xa4>
        dir->id += 1;
 801ede4:	88a1      	ldrh	r1, [r4, #4]
 801ede6:	3101      	adds	r1, #1
 801ede8:	80a1      	strh	r1, [r4, #4]
        if (err != LFS_ERR_NOENT) {
 801edea:	f11c 0f02 	cmn.w	ip, #2
 801edee:	d11e      	bne.n	801ee2e <lfs_dir_read_+0x9a>
        if (dir->id == dir->m.count) {
 801edf0:	88a3      	ldrh	r3, [r4, #4]
 801edf2:	8ba1      	ldrh	r1, [r4, #28]
 801edf4:	428b      	cmp	r3, r1
 801edf6:	d10c      	bne.n	801ee12 <lfs_dir_read_+0x7e>
            if (!dir->m.split) {
 801edf8:	7fe3      	ldrb	r3, [r4, #31]
 801edfa:	b1fb      	cbz	r3, 801ee3c <lfs_dir_read_+0xa8>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801edfc:	f104 0220 	add.w	r2, r4, #32
 801ee00:	f104 0108 	add.w	r1, r4, #8
 801ee04:	4628      	mov	r0, r5
 801ee06:	f7fc ff63 	bl	801bcd0 <lfs_dir_fetch>
            if (err) {
 801ee0a:	4684      	mov	ip, r0
 801ee0c:	b9a0      	cbnz	r0, 801ee38 <lfs_dir_read_+0xa4>
            dir->id = 0;
 801ee0e:	2300      	movs	r3, #0
 801ee10:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801ee12:	4633      	mov	r3, r6
 801ee14:	88a2      	ldrh	r2, [r4, #4]
 801ee16:	f104 0108 	add.w	r1, r4, #8
 801ee1a:	4628      	mov	r0, r5
 801ee1c:	f7ff ff5a 	bl	801ecd4 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
 801ee20:	4684      	mov	ip, r0
 801ee22:	2800      	cmp	r0, #0
 801ee24:	d0de      	beq.n	801ede4 <lfs_dir_read_+0x50>
 801ee26:	f110 0f02 	cmn.w	r0, #2
 801ee2a:	d0db      	beq.n	801ede4 <lfs_dir_read_+0x50>
 801ee2c:	e004      	b.n	801ee38 <lfs_dir_read_+0xa4>
    dir->pos += 1;
 801ee2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ee30:	3301      	adds	r3, #1
 801ee32:	62a3      	str	r3, [r4, #40]	@ 0x28
    return true;
 801ee34:	f04f 0c01 	mov.w	ip, #1
}
 801ee38:	4660      	mov	r0, ip
 801ee3a:	bd70      	pop	{r4, r5, r6, pc}
                return false;
 801ee3c:	f04f 0c00 	mov.w	ip, #0
 801ee40:	e7fa      	b.n	801ee38 <lfs_dir_read_+0xa4>
 801ee42:	bf00      	nop
 801ee44:	08038d38 	.word	0x08038d38
 801ee48:	080356e8 	.word	0x080356e8

0801ee4c <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801ee4c:	b570      	push	{r4, r5, r6, lr}
 801ee4e:	4605      	mov	r5, r0
 801ee50:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801ee52:	694b      	ldr	r3, [r1, #20]
 801ee54:	4608      	mov	r0, r1
 801ee56:	4798      	blx	r3
    if (err) {
 801ee58:	4606      	mov	r6, r0
 801ee5a:	b108      	cbz	r0, 801ee60 <lfs_format+0x14>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801ee5c:	4630      	mov	r0, r6
 801ee5e:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_format_(lfs, cfg);
 801ee60:	4621      	mov	r1, r4
 801ee62:	4628      	mov	r0, r5
 801ee64:	f7ff f860 	bl	801df28 <lfs_format_>
 801ee68:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801ee6a:	69a3      	ldr	r3, [r4, #24]
 801ee6c:	4620      	mov	r0, r4
 801ee6e:	4798      	blx	r3
    return err;
 801ee70:	e7f4      	b.n	801ee5c <lfs_format+0x10>

0801ee72 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 801ee72:	b570      	push	{r4, r5, r6, lr}
 801ee74:	4605      	mov	r5, r0
 801ee76:	460c      	mov	r4, r1
    int err = LFS_LOCK(cfg);
 801ee78:	694b      	ldr	r3, [r1, #20]
 801ee7a:	4608      	mov	r0, r1
 801ee7c:	4798      	blx	r3
    if (err) {
 801ee7e:	4606      	mov	r6, r0
 801ee80:	b108      	cbz	r0, 801ee86 <lfs_mount+0x14>
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 801ee82:	4630      	mov	r0, r6
 801ee84:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mount_(lfs, cfg);
 801ee86:	4621      	mov	r1, r4
 801ee88:	4628      	mov	r0, r5
 801ee8a:	f7ff f8cb 	bl	801e024 <lfs_mount_>
 801ee8e:	4606      	mov	r6, r0
    LFS_UNLOCK(cfg);
 801ee90:	69a3      	ldr	r3, [r4, #24]
 801ee92:	4620      	mov	r0, r4
 801ee94:	4798      	blx	r3
    return err;
 801ee96:	e7f4      	b.n	801ee82 <lfs_mount+0x10>

0801ee98 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 801ee98:	b570      	push	{r4, r5, r6, lr}
 801ee9a:	4604      	mov	r4, r0
 801ee9c:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801ee9e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eea0:	6943      	ldr	r3, [r0, #20]
 801eea2:	4798      	blx	r3
    if (err) {
 801eea4:	4606      	mov	r6, r0
 801eea6:	b108      	cbz	r0, 801eeac <lfs_remove+0x14>
    err = lfs_remove_(lfs, path);

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801eea8:	4630      	mov	r0, r6
 801eeaa:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_remove_(lfs, path);
 801eeac:	4629      	mov	r1, r5
 801eeae:	4620      	mov	r0, r4
 801eeb0:	f7ff fb0e 	bl	801e4d0 <lfs_remove_>
 801eeb4:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801eeb6:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801eeb8:	6983      	ldr	r3, [r0, #24]
 801eeba:	4798      	blx	r3
    return err;
 801eebc:	e7f4      	b.n	801eea8 <lfs_remove+0x10>

0801eebe <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801eebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eec0:	4604      	mov	r4, r0
 801eec2:	460d      	mov	r5, r1
 801eec4:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801eec6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eec8:	6943      	ldr	r3, [r0, #20]
 801eeca:	4798      	blx	r3
    if (err) {
 801eecc:	4607      	mov	r7, r0
 801eece:	b108      	cbz	r0, 801eed4 <lfs_rename+0x16>
    err = lfs_rename_(lfs, oldpath, newpath);

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801eed0:	4638      	mov	r0, r7
 801eed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_rename_(lfs, oldpath, newpath);
 801eed4:	4632      	mov	r2, r6
 801eed6:	4629      	mov	r1, r5
 801eed8:	4620      	mov	r0, r4
 801eeda:	f7ff fbb9 	bl	801e650 <lfs_rename_>
 801eede:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801eee0:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801eee2:	6983      	ldr	r3, [r0, #24]
 801eee4:	4798      	blx	r3
    return err;
 801eee6:	e7f3      	b.n	801eed0 <lfs_rename+0x12>

0801eee8 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeea:	4604      	mov	r4, r0
 801eeec:	460d      	mov	r5, r1
 801eeee:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801eef0:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801eef2:	6943      	ldr	r3, [r0, #20]
 801eef4:	4798      	blx	r3
    if (err) {
 801eef6:	4607      	mov	r7, r0
 801eef8:	b108      	cbz	r0, 801eefe <lfs_stat+0x16>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801eefa:	4638      	mov	r0, r7
 801eefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_stat_(lfs, path, info);
 801eefe:	4632      	mov	r2, r6
 801ef00:	4629      	mov	r1, r5
 801ef02:	4620      	mov	r0, r4
 801ef04:	f7ff ff30 	bl	801ed68 <lfs_stat_>
 801ef08:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801ef0a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ef0c:	6983      	ldr	r3, [r0, #24]
 801ef0e:	4798      	blx	r3
    return err;
 801ef10:	e7f3      	b.n	801eefa <lfs_stat+0x12>
	...

0801ef14 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801ef14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef18:	4604      	mov	r4, r0
 801ef1a:	460d      	mov	r5, r1
 801ef1c:	4616      	mov	r6, r2
 801ef1e:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801ef20:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ef22:	6942      	ldr	r2, [r0, #20]
 801ef24:	4790      	blx	r2
    if (err) {
 801ef26:	4607      	mov	r7, r0
 801ef28:	b110      	cbz	r0, 801ef30 <lfs_file_open+0x1c>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801ef2a:	4638      	mov	r0, r7
 801ef2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ef30:	4629      	mov	r1, r5
 801ef32:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ef34:	f7fb fbc7 	bl	801a6c6 <lfs_mlist_isopen>
 801ef38:	b950      	cbnz	r0, 801ef50 <lfs_file_open+0x3c>
    err = lfs_file_open_(lfs, file, path, flags);
 801ef3a:	4643      	mov	r3, r8
 801ef3c:	4632      	mov	r2, r6
 801ef3e:	4629      	mov	r1, r5
 801ef40:	4620      	mov	r0, r4
 801ef42:	f7ff fe09 	bl	801eb58 <lfs_file_open_>
 801ef46:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801ef48:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ef4a:	6983      	ldr	r3, [r0, #24]
 801ef4c:	4798      	blx	r3
    return err;
 801ef4e:	e7ec      	b.n	801ef2a <lfs_file_open+0x16>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ef50:	4b03      	ldr	r3, [pc, #12]	@ (801ef60 <lfs_file_open+0x4c>)
 801ef52:	4a04      	ldr	r2, [pc, #16]	@ (801ef64 <lfs_file_open+0x50>)
 801ef54:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801ef58:	4803      	ldr	r0, [pc, #12]	@ (801ef68 <lfs_file_open+0x54>)
 801ef5a:	f00a faf7 	bl	802954c <__assert_func>
 801ef5e:	bf00      	nop
 801ef60:	08038d3c 	.word	0x08038d3c
 801ef64:	08038e70 	.word	0x08038e70
 801ef68:	080381c0 	.word	0x080381c0

0801ef6c <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 801ef6c:	b570      	push	{r4, r5, r6, lr}
 801ef6e:	4604      	mov	r4, r0
 801ef70:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801ef72:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801ef74:	6943      	ldr	r3, [r0, #20]
 801ef76:	4798      	blx	r3
    if (err) {
 801ef78:	4606      	mov	r6, r0
 801ef7a:	b108      	cbz	r0, 801ef80 <lfs_file_close+0x14>
    err = lfs_file_close_(lfs, file);

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801ef7c:	4630      	mov	r0, r6
 801ef7e:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ef80:	4629      	mov	r1, r5
 801ef82:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801ef84:	f7fb fb9f 	bl	801a6c6 <lfs_mlist_isopen>
 801ef88:	b140      	cbz	r0, 801ef9c <lfs_file_close+0x30>
    err = lfs_file_close_(lfs, file);
 801ef8a:	4629      	mov	r1, r5
 801ef8c:	4620      	mov	r0, r4
 801ef8e:	f7ff f9cf 	bl	801e330 <lfs_file_close_>
 801ef92:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801ef94:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801ef96:	6983      	ldr	r3, [r0, #24]
 801ef98:	4798      	blx	r3
    return err;
 801ef9a:	e7ef      	b.n	801ef7c <lfs_file_close+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801ef9c:	4b03      	ldr	r3, [pc, #12]	@ (801efac <lfs_file_close+0x40>)
 801ef9e:	4a04      	ldr	r2, [pc, #16]	@ (801efb0 <lfs_file_close+0x44>)
 801efa0:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 801efa4:	4803      	ldr	r0, [pc, #12]	@ (801efb4 <lfs_file_close+0x48>)
 801efa6:	f00a fad1 	bl	802954c <__assert_func>
 801efaa:	bf00      	nop
 801efac:	08038d74 	.word	0x08038d74
 801efb0:	08038e54 	.word	0x08038e54
 801efb4:	080381c0 	.word	0x080381c0

0801efb8 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801efb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801efbc:	4604      	mov	r4, r0
 801efbe:	460d      	mov	r5, r1
 801efc0:	4616      	mov	r6, r2
 801efc2:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801efc4:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801efc6:	6942      	ldr	r2, [r0, #20]
 801efc8:	4790      	blx	r2
    if (err) {
 801efca:	4607      	mov	r7, r0
 801efcc:	b110      	cbz	r0, 801efd4 <lfs_file_read+0x1c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801efce:	4638      	mov	r0, r7
 801efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801efd4:	4629      	mov	r1, r5
 801efd6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801efd8:	f7fb fb75 	bl	801a6c6 <lfs_mlist_isopen>
 801efdc:	b150      	cbz	r0, 801eff4 <lfs_file_read+0x3c>
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 801efde:	4643      	mov	r3, r8
 801efe0:	4632      	mov	r2, r6
 801efe2:	4629      	mov	r1, r5
 801efe4:	4620      	mov	r0, r4
 801efe6:	f7fd fac1 	bl	801c56c <lfs_file_read_>
 801efea:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801efec:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801efee:	6983      	ldr	r3, [r0, #24]
 801eff0:	4798      	blx	r3
    return res;
 801eff2:	e7ec      	b.n	801efce <lfs_file_read+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801eff4:	4b03      	ldr	r3, [pc, #12]	@ (801f004 <lfs_file_read+0x4c>)
 801eff6:	4a04      	ldr	r2, [pc, #16]	@ (801f008 <lfs_file_read+0x50>)
 801eff8:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 801effc:	4803      	ldr	r0, [pc, #12]	@ (801f00c <lfs_file_read+0x54>)
 801effe:	f00a faa5 	bl	802954c <__assert_func>
 801f002:	bf00      	nop
 801f004:	08038d74 	.word	0x08038d74
 801f008:	08038e44 	.word	0x08038e44
 801f00c:	080381c0 	.word	0x080381c0

0801f010 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 801f010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f014:	4604      	mov	r4, r0
 801f016:	460d      	mov	r5, r1
 801f018:	4616      	mov	r6, r2
 801f01a:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f01c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f01e:	6942      	ldr	r2, [r0, #20]
 801f020:	4790      	blx	r2
    if (err) {
 801f022:	4607      	mov	r7, r0
 801f024:	b110      	cbz	r0, 801f02c <lfs_file_write+0x1c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f026:	4638      	mov	r0, r7
 801f028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f02c:	4629      	mov	r1, r5
 801f02e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f030:	f7fb fb49 	bl	801a6c6 <lfs_mlist_isopen>
 801f034:	b150      	cbz	r0, 801f04c <lfs_file_write+0x3c>
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 801f036:	4643      	mov	r3, r8
 801f038:	4632      	mov	r2, r6
 801f03a:	4629      	mov	r1, r5
 801f03c:	4620      	mov	r0, r4
 801f03e:	f7fd fb05 	bl	801c64c <lfs_file_write_>
 801f042:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f044:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f046:	6983      	ldr	r3, [r0, #24]
 801f048:	4798      	blx	r3
    return res;
 801f04a:	e7ec      	b.n	801f026 <lfs_file_write+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f04c:	4b03      	ldr	r3, [pc, #12]	@ (801f05c <lfs_file_write+0x4c>)
 801f04e:	4a04      	ldr	r2, [pc, #16]	@ (801f060 <lfs_file_write+0x50>)
 801f050:	f641 0105 	movw	r1, #6149	@ 0x1805
 801f054:	4803      	ldr	r0, [pc, #12]	@ (801f064 <lfs_file_write+0x54>)
 801f056:	f00a fa79 	bl	802954c <__assert_func>
 801f05a:	bf00      	nop
 801f05c:	08038d74 	.word	0x08038d74
 801f060:	08038e24 	.word	0x08038e24
 801f064:	080381c0 	.word	0x080381c0

0801f068 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801f068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f06c:	4604      	mov	r4, r0
 801f06e:	460d      	mov	r5, r1
 801f070:	4616      	mov	r6, r2
 801f072:	4698      	mov	r8, r3
    int err = LFS_LOCK(lfs->cfg);
 801f074:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f076:	6942      	ldr	r2, [r0, #20]
 801f078:	4790      	blx	r2
    if (err) {
 801f07a:	4607      	mov	r7, r0
 801f07c:	b110      	cbz	r0, 801f084 <lfs_file_seek+0x1c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f07e:	4638      	mov	r0, r7
 801f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f084:	4629      	mov	r1, r5
 801f086:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f088:	f7fb fb1d 	bl	801a6c6 <lfs_mlist_isopen>
 801f08c:	b150      	cbz	r0, 801f0a4 <lfs_file_seek+0x3c>
    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 801f08e:	4643      	mov	r3, r8
 801f090:	4632      	mov	r2, r6
 801f092:	4629      	mov	r1, r5
 801f094:	4620      	mov	r0, r4
 801f096:	f7fd fa8d 	bl	801c5b4 <lfs_file_seek_>
 801f09a:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f09c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f09e:	6983      	ldr	r3, [r0, #24]
 801f0a0:	4798      	blx	r3
    return res;
 801f0a2:	e7ec      	b.n	801f07e <lfs_file_seek+0x16>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f0a4:	4b03      	ldr	r3, [pc, #12]	@ (801f0b4 <lfs_file_seek+0x4c>)
 801f0a6:	4a04      	ldr	r2, [pc, #16]	@ (801f0b8 <lfs_file_seek+0x50>)
 801f0a8:	f641 0117 	movw	r1, #6167	@ 0x1817
 801f0ac:	4803      	ldr	r0, [pc, #12]	@ (801f0bc <lfs_file_seek+0x54>)
 801f0ae:	f00a fa4d 	bl	802954c <__assert_func>
 801f0b2:	bf00      	nop
 801f0b4:	08038d74 	.word	0x08038d74
 801f0b8:	08038e04 	.word	0x08038e04
 801f0bc:	080381c0 	.word	0x080381c0

0801f0c0 <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 801f0c0:	b570      	push	{r4, r5, r6, lr}
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f0c6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f0c8:	6943      	ldr	r3, [r0, #20]
 801f0ca:	4798      	blx	r3
    if (err) {
 801f0cc:	4606      	mov	r6, r0
 801f0ce:	b108      	cbz	r0, 801f0d4 <lfs_file_tell+0x14>
    lfs_soff_t res = lfs_file_tell_(lfs, file);

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 801f0d0:	4630      	mov	r0, r6
 801f0d2:	bd70      	pop	{r4, r5, r6, pc}
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f0d4:	4629      	mov	r1, r5
 801f0d6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f0d8:	f7fb faf5 	bl	801a6c6 <lfs_mlist_isopen>
 801f0dc:	b140      	cbz	r0, 801f0f0 <lfs_file_tell+0x30>
    lfs_soff_t res = lfs_file_tell_(lfs, file);
 801f0de:	4629      	mov	r1, r5
 801f0e0:	4620      	mov	r0, r4
 801f0e2:	f7fb fba4 	bl	801a82e <lfs_file_tell_>
 801f0e6:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f0e8:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f0ea:	6983      	ldr	r3, [r0, #24]
 801f0ec:	4798      	blx	r3
    return res;
 801f0ee:	e7ef      	b.n	801f0d0 <lfs_file_tell+0x10>
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801f0f0:	4b03      	ldr	r3, [pc, #12]	@ (801f100 <lfs_file_tell+0x40>)
 801f0f2:	4a04      	ldr	r2, [pc, #16]	@ (801f104 <lfs_file_tell+0x44>)
 801f0f4:	f641 0138 	movw	r1, #6200	@ 0x1838
 801f0f8:	4803      	ldr	r0, [pc, #12]	@ (801f108 <lfs_file_tell+0x48>)
 801f0fa:	f00a fa27 	bl	802954c <__assert_func>
 801f0fe:	bf00      	nop
 801f100:	08038d74 	.word	0x08038d74
 801f104:	08038df4 	.word	0x08038df4
 801f108:	080381c0 	.word	0x080381c0

0801f10c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801f10c:	b570      	push	{r4, r5, r6, lr}
 801f10e:	4604      	mov	r4, r0
 801f110:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f112:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f114:	6943      	ldr	r3, [r0, #20]
 801f116:	4798      	blx	r3
    if (err) {
 801f118:	4606      	mov	r6, r0
 801f11a:	b108      	cbz	r0, 801f120 <lfs_mkdir+0x14>
    err = lfs_mkdir_(lfs, path);

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f11c:	4630      	mov	r0, r6
 801f11e:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_mkdir_(lfs, path);
 801f120:	4629      	mov	r1, r5
 801f122:	4620      	mov	r0, r4
 801f124:	f7ff fd22 	bl	801eb6c <lfs_mkdir_>
 801f128:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f12a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f12c:	6983      	ldr	r3, [r0, #24]
 801f12e:	4798      	blx	r3
    return err;
 801f130:	e7f4      	b.n	801f11c <lfs_mkdir+0x10>
	...

0801f134 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 801f134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f136:	4604      	mov	r4, r0
 801f138:	460f      	mov	r7, r1
 801f13a:	4615      	mov	r5, r2
    int err = LFS_LOCK(lfs->cfg);
 801f13c:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f13e:	6943      	ldr	r3, [r0, #20]
 801f140:	4798      	blx	r3
    if (err) {
 801f142:	4606      	mov	r6, r0
 801f144:	b108      	cbz	r0, 801f14a <lfs_dir_open+0x16>
    err = lfs_dir_open_(lfs, dir, path);

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f146:	4630      	mov	r0, r6
 801f148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f14a:	4639      	mov	r1, r7
 801f14c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801f14e:	f7fb faba 	bl	801a6c6 <lfs_mlist_isopen>
 801f152:	b948      	cbnz	r0, 801f168 <lfs_dir_open+0x34>
    err = lfs_dir_open_(lfs, dir, path);
 801f154:	462a      	mov	r2, r5
 801f156:	4639      	mov	r1, r7
 801f158:	4620      	mov	r0, r4
 801f15a:	f7ff fa31 	bl	801e5c0 <lfs_dir_open_>
 801f15e:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f160:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f162:	6983      	ldr	r3, [r0, #24]
 801f164:	4798      	blx	r3
    return err;
 801f166:	e7ee      	b.n	801f146 <lfs_dir_open+0x12>
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 801f168:	4b03      	ldr	r3, [pc, #12]	@ (801f178 <lfs_dir_open+0x44>)
 801f16a:	4a04      	ldr	r2, [pc, #16]	@ (801f17c <lfs_dir_open+0x48>)
 801f16c:	f641 0174 	movw	r1, #6260	@ 0x1874
 801f170:	4803      	ldr	r0, [pc, #12]	@ (801f180 <lfs_dir_open+0x4c>)
 801f172:	f00a f9eb 	bl	802954c <__assert_func>
 801f176:	bf00      	nop
 801f178:	08038dac 	.word	0x08038dac
 801f17c:	08038de4 	.word	0x08038de4
 801f180:	080381c0 	.word	0x080381c0

0801f184 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801f184:	b570      	push	{r4, r5, r6, lr}
 801f186:	4604      	mov	r4, r0
 801f188:	460d      	mov	r5, r1
    int err = LFS_LOCK(lfs->cfg);
 801f18a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f18c:	6943      	ldr	r3, [r0, #20]
 801f18e:	4798      	blx	r3
    if (err) {
 801f190:	4606      	mov	r6, r0
 801f192:	b108      	cbz	r0, 801f198 <lfs_dir_close+0x14>
    err = lfs_dir_close_(lfs, dir);

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f194:	4630      	mov	r0, r6
 801f196:	bd70      	pop	{r4, r5, r6, pc}
    err = lfs_dir_close_(lfs, dir);
 801f198:	4629      	mov	r1, r5
 801f19a:	4620      	mov	r0, r4
 801f19c:	f7fb fb42 	bl	801a824 <lfs_dir_close_>
 801f1a0:	4606      	mov	r6, r0
    LFS_UNLOCK(lfs->cfg);
 801f1a2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f1a4:	6983      	ldr	r3, [r0, #24]
 801f1a6:	4798      	blx	r3
    return err;
 801f1a8:	e7f4      	b.n	801f194 <lfs_dir_close+0x10>

0801f1aa <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 801f1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1ac:	4604      	mov	r4, r0
 801f1ae:	460d      	mov	r5, r1
 801f1b0:	4616      	mov	r6, r2
    int err = LFS_LOCK(lfs->cfg);
 801f1b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f1b4:	6943      	ldr	r3, [r0, #20]
 801f1b6:	4798      	blx	r3
    if (err) {
 801f1b8:	4607      	mov	r7, r0
 801f1ba:	b108      	cbz	r0, 801f1c0 <lfs_dir_read+0x16>
    err = lfs_dir_read_(lfs, dir, info);

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 801f1bc:	4638      	mov	r0, r7
 801f1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = lfs_dir_read_(lfs, dir, info);
 801f1c0:	4632      	mov	r2, r6
 801f1c2:	4629      	mov	r1, r5
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	f7ff fde5 	bl	801ed94 <lfs_dir_read_>
 801f1ca:	4607      	mov	r7, r0
    LFS_UNLOCK(lfs->cfg);
 801f1cc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801f1ce:	6983      	ldr	r3, [r0, #24]
 801f1d0:	4798      	blx	r3
    return err;
 801f1d2:	e7f3      	b.n	801f1bc <lfs_dir_read+0x12>

0801f1d4 <lfs_crc>:
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
 801f1d4:	f04f 0c00 	mov.w	ip, #0
 801f1d8:	4594      	cmp	ip, r2
 801f1da:	d218      	bcs.n	801f20e <lfs_crc+0x3a>
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801f1dc:	b530      	push	{r4, r5, lr}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801f1de:	f811 300c 	ldrb.w	r3, [r1, ip]
 801f1e2:	ea83 0e00 	eor.w	lr, r3, r0
 801f1e6:	f00e 0e0f 	and.w	lr, lr, #15
 801f1ea:	4c09      	ldr	r4, [pc, #36]	@ (801f210 <lfs_crc+0x3c>)
 801f1ec:	f854 502e 	ldr.w	r5, [r4, lr, lsl #2]
 801f1f0:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801f1f4:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 801f1f8:	f003 030f 	and.w	r3, r3, #15
 801f1fc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f200:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 801f204:	f10c 0c01 	add.w	ip, ip, #1
 801f208:	4594      	cmp	ip, r2
 801f20a:	d3e8      	bcc.n	801f1de <lfs_crc+0xa>
    }

    return crc;
}
 801f20c:	bd30      	pop	{r4, r5, pc}
 801f20e:	4770      	bx	lr
 801f210:	08038f58 	.word	0x08038f58

0801f214 <mg_base64_decode_single>:
    return c == 62 ? '+' : '/';
  }
}

static int mg_base64_decode_single(int c) {
  if (c >= 'A' && c <= 'Z') {
 801f214:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801f218:	2b19      	cmp	r3, #25
 801f21a:	d913      	bls.n	801f244 <mg_base64_decode_single+0x30>
    return c - 'A';
  } else if (c >= 'a' && c <= 'z') {
 801f21c:	283d      	cmp	r0, #61	@ 0x3d
 801f21e:	dc18      	bgt.n	801f252 <mg_base64_decode_single+0x3e>
 801f220:	282b      	cmp	r0, #43	@ 0x2b
 801f222:	db20      	blt.n	801f266 <mg_base64_decode_single+0x52>
 801f224:	f1a0 032b 	sub.w	r3, r0, #43	@ 0x2b
 801f228:	2b12      	cmp	r3, #18
 801f22a:	d80f      	bhi.n	801f24c <mg_base64_decode_single+0x38>
 801f22c:	e8df f003 	tbb	[pc, r3]
 801f230:	0e0e0e0c 	.word	0x0e0e0e0c
 801f234:	1717171e 	.word	0x1717171e
 801f238:	17171717 	.word	0x17171717
 801f23c:	0e171717 	.word	0x0e171717
 801f240:	0e0e      	.short	0x0e0e
 801f242:	19          	.byte	0x19
 801f243:	00          	.byte	0x00
    return c - 'A';
 801f244:	4618      	mov	r0, r3
 801f246:	4770      	bx	lr
  if (c >= 'A' && c <= 'Z') {
 801f248:	203e      	movs	r0, #62	@ 0x3e
 801f24a:	4770      	bx	lr
  } else if (c == '/') {
    return 63;
  } else if (c == '=') {
    return 64;
  } else {
    return -1;
 801f24c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f250:	4770      	bx	lr
 801f252:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f256:	2b19      	cmp	r3, #25
 801f258:	d80a      	bhi.n	801f270 <mg_base64_decode_single+0x5c>
    return c + 26 - 'a';
 801f25a:	3847      	subs	r0, #71	@ 0x47
 801f25c:	4770      	bx	lr
    return c + 52 - '0';
 801f25e:	3004      	adds	r0, #4
 801f260:	4770      	bx	lr
    return 64;
 801f262:	2040      	movs	r0, #64	@ 0x40
 801f264:	4770      	bx	lr
    return -1;
 801f266:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f26a:	4770      	bx	lr
    return 63;
 801f26c:	203f      	movs	r0, #63	@ 0x3f
 801f26e:	4770      	bx	lr
    return -1;
 801f270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  }
}
 801f274:	4770      	bx	lr

0801f276 <is_digit>:




static bool is_digit(int c) {
  return c >= '0' && c <= '9';
 801f276:	3830      	subs	r0, #48	@ 0x30
}
 801f278:	2809      	cmp	r0, #9
 801f27a:	bf8c      	ite	hi
 801f27c:	2000      	movhi	r0, #0
 801f27e:	2001      	movls	r0, #1
 801f280:	4770      	bx	lr
	...

0801f284 <addexp>:

static int addexp(char *buf, int e, int sign) {
 801f284:	4684      	mov	ip, r0
  int n = 0;
  buf[n++] = 'e';
 801f286:	2365      	movs	r3, #101	@ 0x65
 801f288:	7003      	strb	r3, [r0, #0]
  buf[n++] = (char) sign;
 801f28a:	7042      	strb	r2, [r0, #1]
  if (e > 400) return 0;
 801f28c:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 801f290:	dc2c      	bgt.n	801f2ec <addexp+0x68>
  if (e < 10) buf[n++] = '0';
 801f292:	2909      	cmp	r1, #9
 801f294:	dc03      	bgt.n	801f29e <addexp+0x1a>
 801f296:	2330      	movs	r3, #48	@ 0x30
 801f298:	7083      	strb	r3, [r0, #2]
 801f29a:	2303      	movs	r3, #3
 801f29c:	e000      	b.n	801f2a0 <addexp+0x1c>
  buf[n++] = (char) sign;
 801f29e:	2302      	movs	r3, #2
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 801f2a0:	2963      	cmp	r1, #99	@ 0x63
 801f2a2:	dd0d      	ble.n	801f2c0 <addexp+0x3c>
 801f2a4:	4812      	ldr	r0, [pc, #72]	@ (801f2f0 <addexp+0x6c>)
 801f2a6:	fb80 2001 	smull	r2, r0, r0, r1
 801f2aa:	17ca      	asrs	r2, r1, #31
 801f2ac:	ebc2 1260 	rsb	r2, r2, r0, asr #5
 801f2b0:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801f2b4:	f80c 0003 	strb.w	r0, [ip, r3]
 801f2b8:	2064      	movs	r0, #100	@ 0x64
 801f2ba:	fb00 1112 	mls	r1, r0, r2, r1
 801f2be:	3301      	adds	r3, #1
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 801f2c0:	2909      	cmp	r1, #9
 801f2c2:	dd0e      	ble.n	801f2e2 <addexp+0x5e>
 801f2c4:	480b      	ldr	r0, [pc, #44]	@ (801f2f4 <addexp+0x70>)
 801f2c6:	fb80 2001 	smull	r2, r0, r0, r1
 801f2ca:	17ca      	asrs	r2, r1, #31
 801f2cc:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 801f2d0:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 801f2d4:	f80c 0003 	strb.w	r0, [ip, r3]
 801f2d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801f2dc:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
 801f2e0:	3301      	adds	r3, #1
  buf[n++] = (char) (e + '0');
 801f2e2:	1c58      	adds	r0, r3, #1
 801f2e4:	3130      	adds	r1, #48	@ 0x30
 801f2e6:	f80c 1003 	strb.w	r1, [ip, r3]
  return n;
 801f2ea:	4770      	bx	lr
  if (e > 400) return 0;
 801f2ec:	2000      	movs	r0, #0
}
 801f2ee:	4770      	bx	lr
 801f2f0:	51eb851f 	.word	0x51eb851f
 801f2f4:	66666667 	.word	0x66666667

0801f2f8 <xisinf>:

static int xisinf(double x) {
 801f2f8:	ec53 2b10 	vmov	r2, r3, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 801f2fc:	4611      	mov	r1, r2
 801f2fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f302:	4a05      	ldr	r2, [pc, #20]	@ (801f318 <xisinf+0x20>)
 801f304:	4293      	cmp	r3, r2
 801f306:	d001      	beq.n	801f30c <xisinf+0x14>
 801f308:	2000      	movs	r0, #0
 801f30a:	4770      	bx	lr
 801f30c:	b109      	cbz	r1, 801f312 <xisinf+0x1a>
 801f30e:	2000      	movs	r0, #0
 801f310:	4770      	bx	lr
 801f312:	2001      	movs	r0, #1
         ((unsigned) ieee754.u == 0);
}
 801f314:	4770      	bx	lr
 801f316:	bf00      	nop
 801f318:	7ff00000 	.word	0x7ff00000

0801f31c <xisnan>:

static int xisnan(double x) {
 801f31c:	ec51 0b10 	vmov	r0, r1, d0
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 801f320:	4602      	mov	r2, r0
 801f322:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 801f326:	2a00      	cmp	r2, #0
 801f328:	bf18      	it	ne
 801f32a:	3001      	addne	r0, #1
             ((unsigned) ieee754.u != 0) >
         0x7ff00000;
}
 801f32c:	4b02      	ldr	r3, [pc, #8]	@ (801f338 <xisnan+0x1c>)
 801f32e:	4298      	cmp	r0, r3
 801f330:	bf94      	ite	ls
 801f332:	2000      	movls	r0, #0
 801f334:	2001      	movhi	r0, #1
 801f336:	4770      	bx	lr
 801f338:	7ff00000 	.word	0x7ff00000

0801f33c <mg_lld>:
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
  buf[n] = '\0';
  return mg_snprintf(dst, dstlen, "%s", buf);
}

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 801f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f340:	f89d 4018 	ldrb.w	r4, [sp, #24]
 801f344:	f89d 101c 	ldrb.w	r1, [sp, #28]
  const char *letters = "0123456789abcdef";
  uint64_t v = (uint64_t) val;
 801f348:	4694      	mov	ip, r2
 801f34a:	469e      	mov	lr, r3
  size_t s = 0, n, i;
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801f34c:	b15c      	cbz	r4, 801f366 <mg_lld+0x2a>
 801f34e:	2b00      	cmp	r3, #0
 801f350:	db01      	blt.n	801f356 <mg_lld+0x1a>
  size_t s = 0, n, i;
 801f352:	2500      	movs	r5, #0
 801f354:	e008      	b.n	801f368 <mg_lld+0x2c>
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 801f356:	242d      	movs	r4, #45	@ 0x2d
 801f358:	7004      	strb	r4, [r0, #0]
 801f35a:	f1d2 0c00 	rsbs	ip, r2, #0
 801f35e:	eb63 0e43 	sbc.w	lr, r3, r3, lsl #1
 801f362:	2501      	movs	r5, #1
 801f364:	e000      	b.n	801f368 <mg_lld+0x2c>
  size_t s = 0, n, i;
 801f366:	2500      	movs	r5, #0
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 801f368:	b909      	cbnz	r1, 801f36e <mg_lld+0x32>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801f36a:	2400      	movs	r4, #0
 801f36c:	e02f      	b.n	801f3ce <mg_lld+0x92>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801f36e:	2400      	movs	r4, #0
 801f370:	ea5c 010e 	orrs.w	r1, ip, lr
 801f374:	d05a      	beq.n	801f42c <mg_lld+0xf0>
 801f376:	f00c 060f 	and.w	r6, ip, #15
 801f37a:	1929      	adds	r1, r5, r4
 801f37c:	4f38      	ldr	r7, [pc, #224]	@ (801f460 <mg_lld+0x124>)
 801f37e:	5dbe      	ldrb	r6, [r7, r6]
 801f380:	5446      	strb	r6, [r0, r1]
 801f382:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801f386:	ea4c 7c0e 	orr.w	ip, ip, lr, lsl #28
 801f38a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801f38e:	3401      	adds	r4, #1
 801f390:	e7ee      	b.n	801f370 <mg_lld+0x34>
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801f392:	2601      	movs	r6, #1
 801f394:	e022      	b.n	801f3dc <mg_lld+0xa0>
 801f396:	4421      	add	r1, r4
 801f398:	4f32      	ldr	r7, [pc, #200]	@ (801f464 <mg_lld+0x128>)
 801f39a:	fba7 4801 	umull	r4, r8, r7, r1
 801f39e:	f028 0403 	bic.w	r4, r8, #3
 801f3a2:	eb04 0498 	add.w	r4, r4, r8, lsr #2
 801f3a6:	1b09      	subs	r1, r1, r4
 801f3a8:	ebbc 0101 	subs.w	r1, ip, r1
 801f3ac:	f16e 0e00 	sbc.w	lr, lr, #0
 801f3b0:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
 801f3b4:	fb01 f404 	mul.w	r4, r1, r4
 801f3b8:	fb07 440e 	mla	r4, r7, lr, r4
 801f3bc:	fba1 1707 	umull	r1, r7, r1, r7
 801f3c0:	443c      	add	r4, r7
 801f3c2:	0849      	lsrs	r1, r1, #1
 801f3c4:	ea41 7cc4 	orr.w	ip, r1, r4, lsl #31
 801f3c8:	ea4f 0e54 	mov.w	lr, r4, lsr #1
 801f3cc:	4634      	mov	r4, r6
 801f3ce:	ea5c 010e 	orrs.w	r1, ip, lr
 801f3d2:	d02b      	beq.n	801f42c <mg_lld+0xf0>
 801f3d4:	2600      	movs	r6, #0
 801f3d6:	eb1c 010e 	adds.w	r1, ip, lr
 801f3da:	d2da      	bcs.n	801f392 <mg_lld+0x56>
 801f3dc:	4431      	add	r1, r6
 801f3de:	4f21      	ldr	r7, [pc, #132]	@ (801f464 <mg_lld+0x128>)
 801f3e0:	fba7 6801 	umull	r6, r8, r7, r1
 801f3e4:	f028 0603 	bic.w	r6, r8, #3
 801f3e8:	eb06 0698 	add.w	r6, r6, r8, lsr #2
 801f3ec:	1b89      	subs	r1, r1, r6
 801f3ee:	ebbc 0101 	subs.w	r1, ip, r1
 801f3f2:	f16e 0800 	sbc.w	r8, lr, #0
 801f3f6:	f04f 36cc 	mov.w	r6, #3435973836	@ 0xcccccccc
 801f3fa:	fb01 f606 	mul.w	r6, r1, r6
 801f3fe:	fb07 6608 	mla	r6, r7, r8, r6
 801f402:	fba1 1707 	umull	r1, r7, r1, r7
 801f406:	443e      	add	r6, r7
 801f408:	0849      	lsrs	r1, r1, #1
 801f40a:	ea41 71c6 	orr.w	r1, r1, r6, lsl #31
 801f40e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801f412:	ebac 0141 	sub.w	r1, ip, r1, lsl #1
 801f416:	1c66      	adds	r6, r4, #1
 801f418:	442c      	add	r4, r5
 801f41a:	4f11      	ldr	r7, [pc, #68]	@ (801f460 <mg_lld+0x124>)
 801f41c:	5c79      	ldrb	r1, [r7, r1]
 801f41e:	5501      	strb	r1, [r0, r4]
 801f420:	2400      	movs	r4, #0
 801f422:	eb1c 010e 	adds.w	r1, ip, lr
 801f426:	d3b6      	bcc.n	801f396 <mg_lld+0x5a>
 801f428:	2401      	movs	r4, #1
 801f42a:	e7b4      	b.n	801f396 <mg_lld+0x5a>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 801f42c:	2600      	movs	r6, #0
 801f42e:	e00c      	b.n	801f44a <mg_lld+0x10e>
    char t = buf[s + i];
 801f430:	19af      	adds	r7, r5, r6
 801f432:	f810 c007 	ldrb.w	ip, [r0, r7]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 801f436:	1929      	adds	r1, r5, r4
 801f438:	1b89      	subs	r1, r1, r6
 801f43a:	3901      	subs	r1, #1
 801f43c:	f810 e001 	ldrb.w	lr, [r0, r1]
 801f440:	f800 e007 	strb.w	lr, [r0, r7]
 801f444:	f800 c001 	strb.w	ip, [r0, r1]
  for (i = 0; i < n / 2; i++) {
 801f448:	3601      	adds	r6, #1
 801f44a:	ebb6 0f54 	cmp.w	r6, r4, lsr #1
 801f44e:	d3ef      	bcc.n	801f430 <mg_lld+0xf4>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 801f450:	4313      	orrs	r3, r2
 801f452:	d102      	bne.n	801f45a <mg_lld+0x11e>
 801f454:	2330      	movs	r3, #48	@ 0x30
 801f456:	5503      	strb	r3, [r0, r4]
 801f458:	3401      	adds	r4, #1
  return n + s;
}
 801f45a:	1928      	adds	r0, r5, r4
 801f45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f460:	08038f98 	.word	0x08038f98
 801f464:	cccccccd 	.word	0xcccccccd

0801f468 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 801f468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f46c:	4680      	mov	r8, r0
 801f46e:	460f      	mov	r7, r1
 801f470:	4616      	mov	r6, r2
 801f472:	461d      	mov	r5, r3
  size_t i = 0;
 801f474:	2400      	movs	r4, #0
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801f476:	e002      	b.n	801f47e <scpy+0x16>
 801f478:	3401      	adds	r4, #1
 801f47a:	4639      	mov	r1, r7
 801f47c:	47c0      	blx	r8
 801f47e:	42ac      	cmp	r4, r5
 801f480:	d202      	bcs.n	801f488 <scpy+0x20>
 801f482:	5d30      	ldrb	r0, [r6, r4]
 801f484:	2800      	cmp	r0, #0
 801f486:	d1f7      	bne.n	801f478 <scpy+0x10>
  return i;
}
 801f488:	4620      	mov	r0, r4
 801f48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f48e <p_stat>:
#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
  (void) path, (void) size, (void) mtime;
  return 0;
}
 801f48e:	2000      	movs	r0, #0
 801f490:	4770      	bx	lr

0801f492 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
  (void) path, (void) fn, (void) userdata;
}
 801f492:	4770      	bx	lr

0801f494 <p_open>:
static void *p_open(const char *path, int flags) {
  (void) path, (void) flags;
  return NULL;
}
 801f494:	2000      	movs	r0, #0
 801f496:	4770      	bx	lr

0801f498 <p_close>:
static void p_close(void *fp) {
  (void) fp;
}
 801f498:	4770      	bx	lr

0801f49a <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801f49a:	2000      	movs	r0, #0
 801f49c:	4770      	bx	lr

0801f49e <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
  (void) fd, (void) buf, (void) len;
  return 0;
}
 801f49e:	2000      	movs	r0, #0
 801f4a0:	4770      	bx	lr

0801f4a2 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
  (void) fd, (void) offset;
  return (size_t) ~0;
}
 801f4a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f4a6:	4770      	bx	lr

0801f4a8 <p_rename>:
static bool p_rename(const char *from, const char *to) {
  (void) from, (void) to;
  return false;
}
 801f4a8:	2000      	movs	r0, #0
 801f4aa:	4770      	bx	lr

0801f4ac <p_remove>:
static bool p_remove(const char *path) {
  (void) path;
  return false;
}
 801f4ac:	2000      	movs	r0, #0
 801f4ae:	4770      	bx	lr

0801f4b0 <p_mkdir>:
static bool p_mkdir(const char *path) {
  (void) path;
  return false;
}
 801f4b0:	2000      	movs	r0, #0
 801f4b2:	4770      	bx	lr

0801f4b4 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 801f4b4:	b530      	push	{r4, r5, lr}
 801f4b6:	4686      	mov	lr, r0
  int diff = 0;
  if (len > 0) do {
 801f4b8:	4614      	mov	r4, r2
 801f4ba:	b94a      	cbnz	r2, 801f4d0 <mg_ncasecmp+0x1c>
  int diff = 0;
 801f4bc:	2000      	movs	r0, #0
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
      diff = c - d;
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
  return diff;
}
 801f4be:	bd30      	pop	{r4, r5, pc}
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801f4c0:	f10c 0020 	add.w	r0, ip, #32
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 801f4c4:	1a18      	subs	r0, r3, r0
 801f4c6:	d1fa      	bne.n	801f4be <mg_ncasecmp+0xa>
 801f4c8:	2a00      	cmp	r2, #0
 801f4ca:	d0f8      	beq.n	801f4be <mg_ncasecmp+0xa>
 801f4cc:	3c01      	subs	r4, #1
 801f4ce:	d0f6      	beq.n	801f4be <mg_ncasecmp+0xa>
      int c = *s1++, d = *s2++;
 801f4d0:	f89e 2000 	ldrb.w	r2, [lr]
 801f4d4:	f10e 0e01 	add.w	lr, lr, #1
 801f4d8:	4613      	mov	r3, r2
 801f4da:	f891 c000 	ldrb.w	ip, [r1]
 801f4de:	3101      	adds	r1, #1
 801f4e0:	4660      	mov	r0, ip
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 801f4e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801f4e6:	2d19      	cmp	r5, #25
 801f4e8:	d801      	bhi.n	801f4ee <mg_ncasecmp+0x3a>
 801f4ea:	f102 0320 	add.w	r3, r2, #32
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 801f4ee:	f1ac 0541 	sub.w	r5, ip, #65	@ 0x41
 801f4f2:	2d19      	cmp	r5, #25
 801f4f4:	d8e6      	bhi.n	801f4c4 <mg_ncasecmp+0x10>
 801f4f6:	e7e3      	b.n	801f4c0 <mg_ncasecmp+0xc>

0801f4f8 <isx>:
  }
  return len;
}

static bool isx(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801f4f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801f4fc:	2b09      	cmp	r3, #9
 801f4fe:	d908      	bls.n	801f512 <isx+0x1a>
 801f500:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801f504:	2b05      	cmp	r3, #5
 801f506:	d906      	bls.n	801f516 <isx+0x1e>
         (c >= 'A' && c <= 'F');
 801f508:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801f50a:	2805      	cmp	r0, #5
 801f50c:	d805      	bhi.n	801f51a <isx+0x22>
 801f50e:	2001      	movs	r0, #1
 801f510:	4770      	bx	lr
 801f512:	2001      	movs	r0, #1
 801f514:	4770      	bx	lr
 801f516:	2001      	movs	r0, #1
 801f518:	4770      	bx	lr
 801f51a:	2000      	movs	r0, #0
}
 801f51c:	4770      	bx	lr

0801f51e <isok>:
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
  return i >= src_len && j < dst_len ? (int) j : -1;
}

static bool isok(uint8_t c) {
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 801f51e:	280a      	cmp	r0, #10
 801f520:	d007      	beq.n	801f532 <isok+0x14>
 801f522:	280d      	cmp	r0, #13
 801f524:	d007      	beq.n	801f536 <isok+0x18>
 801f526:	2809      	cmp	r0, #9
 801f528:	d007      	beq.n	801f53a <isok+0x1c>
 801f52a:	281f      	cmp	r0, #31
 801f52c:	d907      	bls.n	801f53e <isok+0x20>
 801f52e:	2001      	movs	r0, #1
 801f530:	4770      	bx	lr
 801f532:	2001      	movs	r0, #1
 801f534:	4770      	bx	lr
 801f536:	2001      	movs	r0, #1
 801f538:	4770      	bx	lr
 801f53a:	2001      	movs	r0, #1
 801f53c:	4770      	bx	lr
 801f53e:	2000      	movs	r0, #0
}
 801f540:	4770      	bx	lr

0801f542 <vcb>:
  return NULL;
}

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
  return (c & 0xc0) == 0x80;
 801f542:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
}
 801f546:	2880      	cmp	r0, #128	@ 0x80
 801f548:	bf14      	ite	ne
 801f54a:	2000      	movne	r0, #0
 801f54c:	2001      	moveq	r0, #1
 801f54e:	4770      	bx	lr

0801f550 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 801f550:	b570      	push	{r4, r5, r6, lr}
  const unsigned char *u = (unsigned char *) s, c = *u;
 801f552:	7805      	ldrb	r5, [r0, #0]
  long n = (long) (end - s);
 801f554:	1a0e      	subs	r6, r1, r0
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801f556:	f1a5 0321 	sub.w	r3, r5, #33	@ 0x21
 801f55a:	b2db      	uxtb	r3, r3
 801f55c:	2b5c      	cmp	r3, #92	@ 0x5c
 801f55e:	d936      	bls.n	801f5ce <clen+0x7e>
 801f560:	4604      	mov	r4, r0
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801f562:	f005 03e0 	and.w	r3, r5, #224	@ 0xe0
 801f566:	2bc0      	cmp	r3, #192	@ 0xc0
 801f568:	d009      	beq.n	801f57e <clen+0x2e>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801f56a:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 801f56e:	2be0      	cmp	r3, #224	@ 0xe0
 801f570:	d00e      	beq.n	801f590 <clen+0x40>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801f572:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 801f576:	2df0      	cmp	r5, #240	@ 0xf0
 801f578:	d018      	beq.n	801f5ac <clen+0x5c>
    return 4;
  return 0;
 801f57a:	2000      	movs	r0, #0
}
 801f57c:	bd70      	pop	{r4, r5, r6, pc}
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 801f57e:	2e01      	cmp	r6, #1
 801f580:	ddf3      	ble.n	801f56a <clen+0x1a>
 801f582:	7840      	ldrb	r0, [r0, #1]
 801f584:	f7ff ffdd 	bl	801f542 <vcb>
 801f588:	2800      	cmp	r0, #0
 801f58a:	d0ee      	beq.n	801f56a <clen+0x1a>
 801f58c:	2002      	movs	r0, #2
 801f58e:	e7f5      	b.n	801f57c <clen+0x2c>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 801f590:	2e02      	cmp	r6, #2
 801f592:	ddee      	ble.n	801f572 <clen+0x22>
 801f594:	7860      	ldrb	r0, [r4, #1]
 801f596:	f7ff ffd4 	bl	801f542 <vcb>
 801f59a:	2800      	cmp	r0, #0
 801f59c:	d0e9      	beq.n	801f572 <clen+0x22>
 801f59e:	78a0      	ldrb	r0, [r4, #2]
 801f5a0:	f7ff ffcf 	bl	801f542 <vcb>
 801f5a4:	2800      	cmp	r0, #0
 801f5a6:	d0e4      	beq.n	801f572 <clen+0x22>
 801f5a8:	2003      	movs	r0, #3
 801f5aa:	e7e7      	b.n	801f57c <clen+0x2c>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 801f5ac:	2e03      	cmp	r6, #3
 801f5ae:	dd10      	ble.n	801f5d2 <clen+0x82>
 801f5b0:	7860      	ldrb	r0, [r4, #1]
 801f5b2:	f7ff ffc6 	bl	801f542 <vcb>
 801f5b6:	b170      	cbz	r0, 801f5d6 <clen+0x86>
 801f5b8:	78a0      	ldrb	r0, [r4, #2]
 801f5ba:	f7ff ffc2 	bl	801f542 <vcb>
 801f5be:	b160      	cbz	r0, 801f5da <clen+0x8a>
 801f5c0:	78e0      	ldrb	r0, [r4, #3]
 801f5c2:	f7ff ffbe 	bl	801f542 <vcb>
 801f5c6:	2800      	cmp	r0, #0
 801f5c8:	d0d8      	beq.n	801f57c <clen+0x2c>
    return 4;
 801f5ca:	2004      	movs	r0, #4
 801f5cc:	e7d6      	b.n	801f57c <clen+0x2c>
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 801f5ce:	2001      	movs	r0, #1
 801f5d0:	e7d4      	b.n	801f57c <clen+0x2c>
  return 0;
 801f5d2:	2000      	movs	r0, #0
 801f5d4:	e7d2      	b.n	801f57c <clen+0x2c>
 801f5d6:	2000      	movs	r0, #0
 801f5d8:	e7d0      	b.n	801f57c <clen+0x2c>
 801f5da:	2000      	movs	r0, #0
 801f5dc:	e7ce      	b.n	801f57c <clen+0x2c>

0801f5de <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
  v->buf = (char *) s;
 801f5de:	6010      	str	r0, [r2, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 801f5e0:	e003      	b.n	801f5ea <skiptorn+0xc>
 801f5e2:	3001      	adds	r0, #1
 801f5e4:	6853      	ldr	r3, [r2, #4]
 801f5e6:	3301      	adds	r3, #1
 801f5e8:	6053      	str	r3, [r2, #4]
 801f5ea:	4288      	cmp	r0, r1
 801f5ec:	d204      	bcs.n	801f5f8 <skiptorn+0x1a>
 801f5ee:	7803      	ldrb	r3, [r0, #0]
 801f5f0:	2b0a      	cmp	r3, #10
 801f5f2:	d001      	beq.n	801f5f8 <skiptorn+0x1a>
 801f5f4:	2b0d      	cmp	r3, #13
 801f5f6:	d1f4      	bne.n	801f5e2 <skiptorn+0x4>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f5f8:	4288      	cmp	r0, r1
 801f5fa:	d212      	bcs.n	801f622 <skiptorn+0x44>
 801f5fc:	7803      	ldrb	r3, [r0, #0]
 801f5fe:	2b0d      	cmp	r3, #13
 801f600:	d008      	beq.n	801f614 <skiptorn+0x36>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801f602:	2b0d      	cmp	r3, #13
 801f604:	d00b      	beq.n	801f61e <skiptorn+0x40>
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801f606:	4288      	cmp	r0, r1
 801f608:	d20d      	bcs.n	801f626 <skiptorn+0x48>
 801f60a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f60e:	2b0a      	cmp	r3, #10
 801f610:	d10b      	bne.n	801f62a <skiptorn+0x4c>
  return s;
}
 801f612:	4770      	bx	lr
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f614:	7842      	ldrb	r2, [r0, #1]
 801f616:	2a0a      	cmp	r2, #10
 801f618:	d0f3      	beq.n	801f602 <skiptorn+0x24>
 801f61a:	2000      	movs	r0, #0
 801f61c:	4770      	bx	lr
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801f61e:	3001      	adds	r0, #1
 801f620:	e7f1      	b.n	801f606 <skiptorn+0x28>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 801f622:	2000      	movs	r0, #0
 801f624:	4770      	bx	lr
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 801f626:	2000      	movs	r0, #0
 801f628:	4770      	bx	lr
 801f62a:	2000      	movs	r0, #0
 801f62c:	e7f1      	b.n	801f612 <skiptorn+0x34>

0801f62e <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 801f62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f632:	b084      	sub	sp, #16
 801f634:	4604      	mov	r4, r0
 801f636:	460d      	mov	r5, r1
 801f638:	4690      	mov	r8, r2
 801f63a:	461f      	mov	r7, r3
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 801f63c:	2600      	movs	r6, #0
 801f63e:	e04d      	b.n	801f6dc <mg_http_parse_headers+0xae>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
    if (s >= end) return false;
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801f640:	7863      	ldrb	r3, [r4, #1]
 801f642:	2b0a      	cmp	r3, #10
 801f644:	d158      	bne.n	801f6f8 <mg_http_parse_headers+0xca>
      v.len--;  // Trim spaces
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
  }
  return true;
 801f646:	2001      	movs	r0, #1
 801f648:	e01e      	b.n	801f688 <mg_http_parse_headers+0x5a>
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801f64a:	4414      	add	r4, r2
 801f64c:	9b01      	ldr	r3, [sp, #4]
 801f64e:	4413      	add	r3, r2
 801f650:	9301      	str	r3, [sp, #4]
 801f652:	42ac      	cmp	r4, r5
 801f654:	d209      	bcs.n	801f66a <mg_http_parse_headers+0x3c>
 801f656:	7823      	ldrb	r3, [r4, #0]
 801f658:	2b3a      	cmp	r3, #58	@ 0x3a
 801f65a:	d006      	beq.n	801f66a <mg_http_parse_headers+0x3c>
 801f65c:	4629      	mov	r1, r5
 801f65e:	4620      	mov	r0, r4
 801f660:	f7ff ff76 	bl	801f550 <clen>
 801f664:	4602      	mov	r2, r0
 801f666:	2800      	cmp	r0, #0
 801f668:	d1ef      	bne.n	801f64a <mg_http_parse_headers+0x1c>
    if (k.len == 0) return false;                     // Empty name
 801f66a:	9b01      	ldr	r3, [sp, #4]
 801f66c:	b15b      	cbz	r3, 801f686 <mg_http_parse_headers+0x58>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 801f66e:	42ac      	cmp	r4, r5
 801f670:	d209      	bcs.n	801f686 <mg_http_parse_headers+0x58>
 801f672:	4629      	mov	r1, r5
 801f674:	4620      	mov	r0, r4
 801f676:	f7ff ff6b 	bl	801f550 <clen>
 801f67a:	b120      	cbz	r0, 801f686 <mg_http_parse_headers+0x58>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 801f67c:	4620      	mov	r0, r4
 801f67e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f682:	2b3a      	cmp	r3, #58	@ 0x3a
 801f684:	d004      	beq.n	801f690 <mg_http_parse_headers+0x62>
    if (s >= end) return false;
 801f686:	2000      	movs	r0, #0
}
 801f688:	b004      	add	sp, #16
 801f68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 801f68e:	3001      	adds	r0, #1
 801f690:	42a8      	cmp	r0, r5
 801f692:	d204      	bcs.n	801f69e <mg_http_parse_headers+0x70>
 801f694:	7803      	ldrb	r3, [r0, #0]
 801f696:	2b20      	cmp	r3, #32
 801f698:	d0f9      	beq.n	801f68e <mg_http_parse_headers+0x60>
 801f69a:	2b09      	cmp	r3, #9
 801f69c:	d0f7      	beq.n	801f68e <mg_http_parse_headers+0x60>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 801f69e:	aa02      	add	r2, sp, #8
 801f6a0:	4629      	mov	r1, r5
 801f6a2:	f7ff ff9c 	bl	801f5de <skiptorn>
 801f6a6:	4604      	mov	r4, r0
 801f6a8:	b908      	cbnz	r0, 801f6ae <mg_http_parse_headers+0x80>
 801f6aa:	e7ec      	b.n	801f686 <mg_http_parse_headers+0x58>
      v.len--;  // Trim spaces
 801f6ac:	9003      	str	r0, [sp, #12]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 801f6ae:	9803      	ldr	r0, [sp, #12]
 801f6b0:	b130      	cbz	r0, 801f6c0 <mg_http_parse_headers+0x92>
 801f6b2:	3801      	subs	r0, #1
 801f6b4:	9b02      	ldr	r3, [sp, #8]
 801f6b6:	5c1b      	ldrb	r3, [r3, r0]
 801f6b8:	2b20      	cmp	r3, #32
 801f6ba:	d0f7      	beq.n	801f6ac <mg_http_parse_headers+0x7e>
 801f6bc:	2b09      	cmp	r3, #9
 801f6be:	d0f5      	beq.n	801f6ac <mg_http_parse_headers+0x7e>
    h[i].name = k, h[i].value = v;  // Success. Assign values
 801f6c0:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 801f6c4:	466a      	mov	r2, sp
 801f6c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f6ca:	e883 0003 	stmia.w	r3, {r0, r1}
 801f6ce:	3308      	adds	r3, #8
 801f6d0:	aa04      	add	r2, sp, #16
 801f6d2:	e912 0003 	ldmdb	r2, {r0, r1}
 801f6d6:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 801f6da:	3601      	adds	r6, #1
 801f6dc:	42be      	cmp	r6, r7
 801f6de:	d20d      	bcs.n	801f6fc <mg_http_parse_headers+0xce>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 801f6e0:	2300      	movs	r3, #0
 801f6e2:	9300      	str	r3, [sp, #0]
 801f6e4:	9301      	str	r3, [sp, #4]
 801f6e6:	9302      	str	r3, [sp, #8]
 801f6e8:	9303      	str	r3, [sp, #12]
    if (s >= end) return false;
 801f6ea:	42ac      	cmp	r4, r5
 801f6ec:	d2cb      	bcs.n	801f686 <mg_http_parse_headers+0x58>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 801f6ee:	7823      	ldrb	r3, [r4, #0]
 801f6f0:	2b0a      	cmp	r3, #10
 801f6f2:	d0a8      	beq.n	801f646 <mg_http_parse_headers+0x18>
 801f6f4:	2b0d      	cmp	r3, #13
 801f6f6:	d0a3      	beq.n	801f640 <mg_http_parse_headers+0x12>
    k.buf = (char *) s;
 801f6f8:	9400      	str	r4, [sp, #0]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801f6fa:	e7aa      	b.n	801f652 <mg_http_parse_headers+0x24>
  return true;
 801f6fc:	2001      	movs	r0, #1
 801f6fe:	e7c3      	b.n	801f688 <mg_http_parse_headers+0x5a>

0801f700 <mg_http_status_code_str>:
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
  switch (status_code) {
 801f700:	3864      	subs	r0, #100	@ 0x64
 801f702:	f240 13f3 	movw	r3, #499	@ 0x1f3
 801f706:	4298      	cmp	r0, r3
 801f708:	f200 8272 	bhi.w	801fbf0 <mg_http_status_code_str+0x4f0>
 801f70c:	e8df f010 	tbh	[pc, r0, lsl #1]
 801f710:	027201f4 	.word	0x027201f4
 801f714:	027001f6 	.word	0x027001f6
 801f718:	02700270 	.word	0x02700270
 801f71c:	02700270 	.word	0x02700270
 801f720:	02700270 	.word	0x02700270
 801f724:	02700270 	.word	0x02700270
 801f728:	02700270 	.word	0x02700270
 801f72c:	02700270 	.word	0x02700270
 801f730:	02700270 	.word	0x02700270
 801f734:	02700270 	.word	0x02700270
 801f738:	02700270 	.word	0x02700270
 801f73c:	02700270 	.word	0x02700270
 801f740:	02700270 	.word	0x02700270
 801f744:	02700270 	.word	0x02700270
 801f748:	02700270 	.word	0x02700270
 801f74c:	02700270 	.word	0x02700270
 801f750:	02700270 	.word	0x02700270
 801f754:	02700270 	.word	0x02700270
 801f758:	02700270 	.word	0x02700270
 801f75c:	02700270 	.word	0x02700270
 801f760:	02700270 	.word	0x02700270
 801f764:	02700270 	.word	0x02700270
 801f768:	02700270 	.word	0x02700270
 801f76c:	02700270 	.word	0x02700270
 801f770:	02700270 	.word	0x02700270
 801f774:	02700270 	.word	0x02700270
 801f778:	02700270 	.word	0x02700270
 801f77c:	02700270 	.word	0x02700270
 801f780:	02700270 	.word	0x02700270
 801f784:	02700270 	.word	0x02700270
 801f788:	02700270 	.word	0x02700270
 801f78c:	02700270 	.word	0x02700270
 801f790:	02700270 	.word	0x02700270
 801f794:	02700270 	.word	0x02700270
 801f798:	02700270 	.word	0x02700270
 801f79c:	02700270 	.word	0x02700270
 801f7a0:	02700270 	.word	0x02700270
 801f7a4:	02700270 	.word	0x02700270
 801f7a8:	02700270 	.word	0x02700270
 801f7ac:	02700270 	.word	0x02700270
 801f7b0:	02700270 	.word	0x02700270
 801f7b4:	02700270 	.word	0x02700270
 801f7b8:	02700270 	.word	0x02700270
 801f7bc:	02700270 	.word	0x02700270
 801f7c0:	02700270 	.word	0x02700270
 801f7c4:	02700270 	.word	0x02700270
 801f7c8:	02700270 	.word	0x02700270
 801f7cc:	02700270 	.word	0x02700270
 801f7d0:	02700270 	.word	0x02700270
 801f7d4:	02700270 	.word	0x02700270
 801f7d8:	01fa01f8 	.word	0x01fa01f8
 801f7dc:	01fe01fc 	.word	0x01fe01fc
 801f7e0:	02020200 	.word	0x02020200
 801f7e4:	02060204 	.word	0x02060204
 801f7e8:	02700208 	.word	0x02700208
 801f7ec:	02700270 	.word	0x02700270
 801f7f0:	02700270 	.word	0x02700270
 801f7f4:	02700270 	.word	0x02700270
 801f7f8:	02700270 	.word	0x02700270
 801f7fc:	02700270 	.word	0x02700270
 801f800:	02700270 	.word	0x02700270
 801f804:	02700270 	.word	0x02700270
 801f808:	02700270 	.word	0x02700270
 801f80c:	0270020a 	.word	0x0270020a
 801f810:	02700270 	.word	0x02700270
 801f814:	02700270 	.word	0x02700270
 801f818:	02700270 	.word	0x02700270
 801f81c:	02700270 	.word	0x02700270
 801f820:	02700270 	.word	0x02700270
 801f824:	02700270 	.word	0x02700270
 801f828:	02700270 	.word	0x02700270
 801f82c:	02700270 	.word	0x02700270
 801f830:	02700270 	.word	0x02700270
 801f834:	02700270 	.word	0x02700270
 801f838:	02700270 	.word	0x02700270
 801f83c:	02700270 	.word	0x02700270
 801f840:	02700270 	.word	0x02700270
 801f844:	02700270 	.word	0x02700270
 801f848:	02700270 	.word	0x02700270
 801f84c:	02700270 	.word	0x02700270
 801f850:	02700270 	.word	0x02700270
 801f854:	02700270 	.word	0x02700270
 801f858:	02700270 	.word	0x02700270
 801f85c:	02700270 	.word	0x02700270
 801f860:	02700270 	.word	0x02700270
 801f864:	02700270 	.word	0x02700270
 801f868:	02700270 	.word	0x02700270
 801f86c:	02700270 	.word	0x02700270
 801f870:	02700270 	.word	0x02700270
 801f874:	02700270 	.word	0x02700270
 801f878:	02700270 	.word	0x02700270
 801f87c:	02700270 	.word	0x02700270
 801f880:	02700270 	.word	0x02700270
 801f884:	02700270 	.word	0x02700270
 801f888:	02700270 	.word	0x02700270
 801f88c:	02700270 	.word	0x02700270
 801f890:	02700270 	.word	0x02700270
 801f894:	02700270 	.word	0x02700270
 801f898:	02700270 	.word	0x02700270
 801f89c:	02700270 	.word	0x02700270
 801f8a0:	020e020c 	.word	0x020e020c
 801f8a4:	02120210 	.word	0x02120210
 801f8a8:	02160214 	.word	0x02160214
 801f8ac:	02180270 	.word	0x02180270
 801f8b0:	0270021a 	.word	0x0270021a
 801f8b4:	02700270 	.word	0x02700270
 801f8b8:	02700270 	.word	0x02700270
 801f8bc:	02700270 	.word	0x02700270
 801f8c0:	02700270 	.word	0x02700270
 801f8c4:	02700270 	.word	0x02700270
 801f8c8:	02700270 	.word	0x02700270
 801f8cc:	02700270 	.word	0x02700270
 801f8d0:	02700270 	.word	0x02700270
 801f8d4:	02700270 	.word	0x02700270
 801f8d8:	02700270 	.word	0x02700270
 801f8dc:	02700270 	.word	0x02700270
 801f8e0:	02700270 	.word	0x02700270
 801f8e4:	02700270 	.word	0x02700270
 801f8e8:	02700270 	.word	0x02700270
 801f8ec:	02700270 	.word	0x02700270
 801f8f0:	02700270 	.word	0x02700270
 801f8f4:	02700270 	.word	0x02700270
 801f8f8:	02700270 	.word	0x02700270
 801f8fc:	02700270 	.word	0x02700270
 801f900:	02700270 	.word	0x02700270
 801f904:	02700270 	.word	0x02700270
 801f908:	02700270 	.word	0x02700270
 801f90c:	02700270 	.word	0x02700270
 801f910:	02700270 	.word	0x02700270
 801f914:	02700270 	.word	0x02700270
 801f918:	02700270 	.word	0x02700270
 801f91c:	02700270 	.word	0x02700270
 801f920:	02700270 	.word	0x02700270
 801f924:	02700270 	.word	0x02700270
 801f928:	02700270 	.word	0x02700270
 801f92c:	02700270 	.word	0x02700270
 801f930:	02700270 	.word	0x02700270
 801f934:	02700270 	.word	0x02700270
 801f938:	02700270 	.word	0x02700270
 801f93c:	02700270 	.word	0x02700270
 801f940:	02700270 	.word	0x02700270
 801f944:	02700270 	.word	0x02700270
 801f948:	02700270 	.word	0x02700270
 801f94c:	02700270 	.word	0x02700270
 801f950:	02700270 	.word	0x02700270
 801f954:	02700270 	.word	0x02700270
 801f958:	02700270 	.word	0x02700270
 801f95c:	02700270 	.word	0x02700270
 801f960:	02700270 	.word	0x02700270
 801f964:	02700270 	.word	0x02700270
 801f968:	021e021c 	.word	0x021e021c
 801f96c:	02220220 	.word	0x02220220
 801f970:	02260224 	.word	0x02260224
 801f974:	022a0228 	.word	0x022a0228
 801f978:	022e022c 	.word	0x022e022c
 801f97c:	02320230 	.word	0x02320230
 801f980:	02360234 	.word	0x02360234
 801f984:	023a0238 	.word	0x023a0238
 801f988:	023e023c 	.word	0x023e023c
 801f98c:	02700240 	.word	0x02700240
 801f990:	02420270 	.word	0x02420270
 801f994:	02460244 	.word	0x02460244
 801f998:	02700248 	.word	0x02700248
 801f99c:	0270024a 	.word	0x0270024a
 801f9a0:	024e024c 	.word	0x024e024c
 801f9a4:	02500270 	.word	0x02500270
 801f9a8:	02700270 	.word	0x02700270
 801f9ac:	02700270 	.word	0x02700270
 801f9b0:	02700270 	.word	0x02700270
 801f9b4:	02700270 	.word	0x02700270
 801f9b8:	02700270 	.word	0x02700270
 801f9bc:	02700270 	.word	0x02700270
 801f9c0:	02700252 	.word	0x02700252
 801f9c4:	02700270 	.word	0x02700270
 801f9c8:	02700270 	.word	0x02700270
 801f9cc:	02540270 	.word	0x02540270
 801f9d0:	02700270 	.word	0x02700270
 801f9d4:	02700270 	.word	0x02700270
 801f9d8:	02700270 	.word	0x02700270
 801f9dc:	02700270 	.word	0x02700270
 801f9e0:	02700270 	.word	0x02700270
 801f9e4:	02700270 	.word	0x02700270
 801f9e8:	02700270 	.word	0x02700270
 801f9ec:	02700270 	.word	0x02700270
 801f9f0:	02700270 	.word	0x02700270
 801f9f4:	02700270 	.word	0x02700270
 801f9f8:	02700270 	.word	0x02700270
 801f9fc:	02700270 	.word	0x02700270
 801fa00:	02700270 	.word	0x02700270
 801fa04:	02700270 	.word	0x02700270
 801fa08:	02700270 	.word	0x02700270
 801fa0c:	02700270 	.word	0x02700270
 801fa10:	02700270 	.word	0x02700270
 801fa14:	02700270 	.word	0x02700270
 801fa18:	02700270 	.word	0x02700270
 801fa1c:	02700270 	.word	0x02700270
 801fa20:	02700270 	.word	0x02700270
 801fa24:	02700270 	.word	0x02700270
 801fa28:	02700270 	.word	0x02700270
 801fa2c:	02560270 	.word	0x02560270
 801fa30:	025a0258 	.word	0x025a0258
 801fa34:	025e025c 	.word	0x025e025c
 801fa38:	02620260 	.word	0x02620260
 801fa3c:	02660264 	.word	0x02660264
 801fa40:	02700268 	.word	0x02700268
 801fa44:	026c026a 	.word	0x026c026a
 801fa48:	02700270 	.word	0x02700270
 801fa4c:	02700270 	.word	0x02700270
 801fa50:	02700270 	.word	0x02700270
 801fa54:	02700270 	.word	0x02700270
 801fa58:	02700270 	.word	0x02700270
 801fa5c:	02700270 	.word	0x02700270
 801fa60:	02700270 	.word	0x02700270
 801fa64:	02700270 	.word	0x02700270
 801fa68:	02700270 	.word	0x02700270
 801fa6c:	02700270 	.word	0x02700270
 801fa70:	02700270 	.word	0x02700270
 801fa74:	02700270 	.word	0x02700270
 801fa78:	02700270 	.word	0x02700270
 801fa7c:	02700270 	.word	0x02700270
 801fa80:	02700270 	.word	0x02700270
 801fa84:	02700270 	.word	0x02700270
 801fa88:	02700270 	.word	0x02700270
 801fa8c:	02700270 	.word	0x02700270
 801fa90:	02700270 	.word	0x02700270
 801fa94:	02700270 	.word	0x02700270
 801fa98:	02700270 	.word	0x02700270
 801fa9c:	02700270 	.word	0x02700270
 801faa0:	02700270 	.word	0x02700270
 801faa4:	02700270 	.word	0x02700270
 801faa8:	02700270 	.word	0x02700270
 801faac:	02700270 	.word	0x02700270
 801fab0:	02700270 	.word	0x02700270
 801fab4:	02700270 	.word	0x02700270
 801fab8:	02700270 	.word	0x02700270
 801fabc:	02700270 	.word	0x02700270
 801fac0:	02700270 	.word	0x02700270
 801fac4:	02700270 	.word	0x02700270
 801fac8:	02700270 	.word	0x02700270
 801facc:	02700270 	.word	0x02700270
 801fad0:	02700270 	.word	0x02700270
 801fad4:	02700270 	.word	0x02700270
 801fad8:	02700270 	.word	0x02700270
 801fadc:	02700270 	.word	0x02700270
 801fae0:	02700270 	.word	0x02700270
 801fae4:	02700270 	.word	0x02700270
 801fae8:	02700270 	.word	0x02700270
 801faec:	02700270 	.word	0x02700270
 801faf0:	02700270 	.word	0x02700270
 801faf4:	026e0270 	.word	0x026e0270
 801faf8:	483f      	ldr	r0, [pc, #252]	@ (801fbf8 <mg_http_status_code_str+0x4f8>)
 801fafa:	4770      	bx	lr
    case 100: return "Continue";
    case 101: return "Switching Protocols";
    case 102: return "Processing";
 801fafc:	483f      	ldr	r0, [pc, #252]	@ (801fbfc <mg_http_status_code_str+0x4fc>)
 801fafe:	4770      	bx	lr
    case 200: return "OK";
 801fb00:	483f      	ldr	r0, [pc, #252]	@ (801fc00 <mg_http_status_code_str+0x500>)
 801fb02:	4770      	bx	lr
    case 201: return "Created";
 801fb04:	483f      	ldr	r0, [pc, #252]	@ (801fc04 <mg_http_status_code_str+0x504>)
 801fb06:	4770      	bx	lr
    case 202: return "Accepted";
 801fb08:	483f      	ldr	r0, [pc, #252]	@ (801fc08 <mg_http_status_code_str+0x508>)
 801fb0a:	4770      	bx	lr
    case 203: return "Non-authoritative Information";
 801fb0c:	483f      	ldr	r0, [pc, #252]	@ (801fc0c <mg_http_status_code_str+0x50c>)
 801fb0e:	4770      	bx	lr
    case 204: return "No Content";
 801fb10:	483f      	ldr	r0, [pc, #252]	@ (801fc10 <mg_http_status_code_str+0x510>)
 801fb12:	4770      	bx	lr
    case 205: return "Reset Content";
 801fb14:	483f      	ldr	r0, [pc, #252]	@ (801fc14 <mg_http_status_code_str+0x514>)
 801fb16:	4770      	bx	lr
    case 206: return "Partial Content";
 801fb18:	483f      	ldr	r0, [pc, #252]	@ (801fc18 <mg_http_status_code_str+0x518>)
 801fb1a:	4770      	bx	lr
    case 207: return "Multi-Status";
 801fb1c:	483f      	ldr	r0, [pc, #252]	@ (801fc1c <mg_http_status_code_str+0x51c>)
 801fb1e:	4770      	bx	lr
    case 208: return "Already Reported";
 801fb20:	483f      	ldr	r0, [pc, #252]	@ (801fc20 <mg_http_status_code_str+0x520>)
 801fb22:	4770      	bx	lr
    case 226: return "IM Used";
 801fb24:	483f      	ldr	r0, [pc, #252]	@ (801fc24 <mg_http_status_code_str+0x524>)
 801fb26:	4770      	bx	lr
    case 300: return "Multiple Choices";
 801fb28:	483f      	ldr	r0, [pc, #252]	@ (801fc28 <mg_http_status_code_str+0x528>)
 801fb2a:	4770      	bx	lr
    case 301: return "Moved Permanently";
 801fb2c:	483f      	ldr	r0, [pc, #252]	@ (801fc2c <mg_http_status_code_str+0x52c>)
 801fb2e:	4770      	bx	lr
    case 302: return "Found";
 801fb30:	483f      	ldr	r0, [pc, #252]	@ (801fc30 <mg_http_status_code_str+0x530>)
 801fb32:	4770      	bx	lr
    case 303: return "See Other";
 801fb34:	483f      	ldr	r0, [pc, #252]	@ (801fc34 <mg_http_status_code_str+0x534>)
 801fb36:	4770      	bx	lr
    case 304: return "Not Modified";
 801fb38:	483f      	ldr	r0, [pc, #252]	@ (801fc38 <mg_http_status_code_str+0x538>)
 801fb3a:	4770      	bx	lr
    case 305: return "Use Proxy";
 801fb3c:	483f      	ldr	r0, [pc, #252]	@ (801fc3c <mg_http_status_code_str+0x53c>)
 801fb3e:	4770      	bx	lr
    case 307: return "Temporary Redirect";
 801fb40:	483f      	ldr	r0, [pc, #252]	@ (801fc40 <mg_http_status_code_str+0x540>)
 801fb42:	4770      	bx	lr
    case 308: return "Permanent Redirect";
 801fb44:	483f      	ldr	r0, [pc, #252]	@ (801fc44 <mg_http_status_code_str+0x544>)
 801fb46:	4770      	bx	lr
    case 400: return "Bad Request";
 801fb48:	483f      	ldr	r0, [pc, #252]	@ (801fc48 <mg_http_status_code_str+0x548>)
 801fb4a:	4770      	bx	lr
    case 401: return "Unauthorized";
 801fb4c:	483f      	ldr	r0, [pc, #252]	@ (801fc4c <mg_http_status_code_str+0x54c>)
 801fb4e:	4770      	bx	lr
    case 402: return "Payment Required";
 801fb50:	483f      	ldr	r0, [pc, #252]	@ (801fc50 <mg_http_status_code_str+0x550>)
 801fb52:	4770      	bx	lr
    case 403: return "Forbidden";
 801fb54:	483f      	ldr	r0, [pc, #252]	@ (801fc54 <mg_http_status_code_str+0x554>)
 801fb56:	4770      	bx	lr
    case 404: return "Not Found";
 801fb58:	483f      	ldr	r0, [pc, #252]	@ (801fc58 <mg_http_status_code_str+0x558>)
 801fb5a:	4770      	bx	lr
    case 405: return "Method Not Allowed";
 801fb5c:	483f      	ldr	r0, [pc, #252]	@ (801fc5c <mg_http_status_code_str+0x55c>)
 801fb5e:	4770      	bx	lr
    case 406: return "Not Acceptable";
 801fb60:	483f      	ldr	r0, [pc, #252]	@ (801fc60 <mg_http_status_code_str+0x560>)
 801fb62:	4770      	bx	lr
    case 407: return "Proxy Authentication Required";
 801fb64:	483f      	ldr	r0, [pc, #252]	@ (801fc64 <mg_http_status_code_str+0x564>)
 801fb66:	4770      	bx	lr
    case 408: return "Request Timeout";
 801fb68:	483f      	ldr	r0, [pc, #252]	@ (801fc68 <mg_http_status_code_str+0x568>)
 801fb6a:	4770      	bx	lr
    case 409: return "Conflict";
 801fb6c:	483f      	ldr	r0, [pc, #252]	@ (801fc6c <mg_http_status_code_str+0x56c>)
 801fb6e:	4770      	bx	lr
    case 410: return "Gone";
 801fb70:	483f      	ldr	r0, [pc, #252]	@ (801fc70 <mg_http_status_code_str+0x570>)
 801fb72:	4770      	bx	lr
    case 411: return "Length Required";
 801fb74:	483f      	ldr	r0, [pc, #252]	@ (801fc74 <mg_http_status_code_str+0x574>)
 801fb76:	4770      	bx	lr
    case 412: return "Precondition Failed";
 801fb78:	483f      	ldr	r0, [pc, #252]	@ (801fc78 <mg_http_status_code_str+0x578>)
 801fb7a:	4770      	bx	lr
    case 413: return "Payload Too Large";
 801fb7c:	483f      	ldr	r0, [pc, #252]	@ (801fc7c <mg_http_status_code_str+0x57c>)
 801fb7e:	4770      	bx	lr
    case 414: return "Request-URI Too Long";
 801fb80:	483f      	ldr	r0, [pc, #252]	@ (801fc80 <mg_http_status_code_str+0x580>)
 801fb82:	4770      	bx	lr
    case 415: return "Unsupported Media Type";
 801fb84:	483f      	ldr	r0, [pc, #252]	@ (801fc84 <mg_http_status_code_str+0x584>)
 801fb86:	4770      	bx	lr
    case 416: return "Requested Range Not Satisfiable";
 801fb88:	483f      	ldr	r0, [pc, #252]	@ (801fc88 <mg_http_status_code_str+0x588>)
 801fb8a:	4770      	bx	lr
    case 417: return "Expectation Failed";
 801fb8c:	483f      	ldr	r0, [pc, #252]	@ (801fc8c <mg_http_status_code_str+0x58c>)
 801fb8e:	4770      	bx	lr
    case 418: return "I'm a teapot";
 801fb90:	483f      	ldr	r0, [pc, #252]	@ (801fc90 <mg_http_status_code_str+0x590>)
 801fb92:	4770      	bx	lr
    case 421: return "Misdirected Request";
 801fb94:	483f      	ldr	r0, [pc, #252]	@ (801fc94 <mg_http_status_code_str+0x594>)
 801fb96:	4770      	bx	lr
    case 422: return "Unprocessable Entity";
 801fb98:	483f      	ldr	r0, [pc, #252]	@ (801fc98 <mg_http_status_code_str+0x598>)
 801fb9a:	4770      	bx	lr
    case 423: return "Locked";
 801fb9c:	483f      	ldr	r0, [pc, #252]	@ (801fc9c <mg_http_status_code_str+0x59c>)
 801fb9e:	4770      	bx	lr
    case 424: return "Failed Dependency";
 801fba0:	483f      	ldr	r0, [pc, #252]	@ (801fca0 <mg_http_status_code_str+0x5a0>)
 801fba2:	4770      	bx	lr
    case 426: return "Upgrade Required";
 801fba4:	483f      	ldr	r0, [pc, #252]	@ (801fca4 <mg_http_status_code_str+0x5a4>)
 801fba6:	4770      	bx	lr
    case 428: return "Precondition Required";
 801fba8:	483f      	ldr	r0, [pc, #252]	@ (801fca8 <mg_http_status_code_str+0x5a8>)
 801fbaa:	4770      	bx	lr
    case 429: return "Too Many Requests";
 801fbac:	483f      	ldr	r0, [pc, #252]	@ (801fcac <mg_http_status_code_str+0x5ac>)
 801fbae:	4770      	bx	lr
    case 431: return "Request Header Fields Too Large";
 801fbb0:	483f      	ldr	r0, [pc, #252]	@ (801fcb0 <mg_http_status_code_str+0x5b0>)
 801fbb2:	4770      	bx	lr
    case 444: return "Connection Closed Without Response";
 801fbb4:	483f      	ldr	r0, [pc, #252]	@ (801fcb4 <mg_http_status_code_str+0x5b4>)
 801fbb6:	4770      	bx	lr
    case 451: return "Unavailable For Legal Reasons";
 801fbb8:	483f      	ldr	r0, [pc, #252]	@ (801fcb8 <mg_http_status_code_str+0x5b8>)
 801fbba:	4770      	bx	lr
    case 499: return "Client Closed Request";
 801fbbc:	483f      	ldr	r0, [pc, #252]	@ (801fcbc <mg_http_status_code_str+0x5bc>)
 801fbbe:	4770      	bx	lr
    case 500: return "Internal Server Error";
 801fbc0:	483f      	ldr	r0, [pc, #252]	@ (801fcc0 <mg_http_status_code_str+0x5c0>)
 801fbc2:	4770      	bx	lr
    case 501: return "Not Implemented";
 801fbc4:	483f      	ldr	r0, [pc, #252]	@ (801fcc4 <mg_http_status_code_str+0x5c4>)
 801fbc6:	4770      	bx	lr
    case 502: return "Bad Gateway";
 801fbc8:	483f      	ldr	r0, [pc, #252]	@ (801fcc8 <mg_http_status_code_str+0x5c8>)
 801fbca:	4770      	bx	lr
    case 503: return "Service Unavailable";
 801fbcc:	483f      	ldr	r0, [pc, #252]	@ (801fccc <mg_http_status_code_str+0x5cc>)
 801fbce:	4770      	bx	lr
    case 504: return "Gateway Timeout";
 801fbd0:	483f      	ldr	r0, [pc, #252]	@ (801fcd0 <mg_http_status_code_str+0x5d0>)
 801fbd2:	4770      	bx	lr
    case 505: return "HTTP Version Not Supported";
 801fbd4:	483f      	ldr	r0, [pc, #252]	@ (801fcd4 <mg_http_status_code_str+0x5d4>)
 801fbd6:	4770      	bx	lr
    case 506: return "Variant Also Negotiates";
 801fbd8:	483f      	ldr	r0, [pc, #252]	@ (801fcd8 <mg_http_status_code_str+0x5d8>)
 801fbda:	4770      	bx	lr
    case 507: return "Insufficient Storage";
 801fbdc:	483f      	ldr	r0, [pc, #252]	@ (801fcdc <mg_http_status_code_str+0x5dc>)
 801fbde:	4770      	bx	lr
    case 508: return "Loop Detected";
 801fbe0:	483f      	ldr	r0, [pc, #252]	@ (801fce0 <mg_http_status_code_str+0x5e0>)
 801fbe2:	4770      	bx	lr
    case 510: return "Not Extended";
 801fbe4:	483f      	ldr	r0, [pc, #252]	@ (801fce4 <mg_http_status_code_str+0x5e4>)
 801fbe6:	4770      	bx	lr
    case 511: return "Network Authentication Required";
 801fbe8:	483f      	ldr	r0, [pc, #252]	@ (801fce8 <mg_http_status_code_str+0x5e8>)
 801fbea:	4770      	bx	lr
    case 599: return "Network Connect Timeout Error";
 801fbec:	483f      	ldr	r0, [pc, #252]	@ (801fcec <mg_http_status_code_str+0x5ec>)
 801fbee:	4770      	bx	lr
    default: return "";
 801fbf0:	483f      	ldr	r0, [pc, #252]	@ (801fcf0 <mg_http_status_code_str+0x5f0>)
 801fbf2:	4770      	bx	lr
    case 101: return "Switching Protocols";
 801fbf4:	483f      	ldr	r0, [pc, #252]	@ (801fcf4 <mg_http_status_code_str+0x5f4>)
  }
}
 801fbf6:	4770      	bx	lr
 801fbf8:	08038fac 	.word	0x08038fac
 801fbfc:	08038fcc 	.word	0x08038fcc
 801fc00:	08038fd8 	.word	0x08038fd8
 801fc04:	08038fdc 	.word	0x08038fdc
 801fc08:	08038fe4 	.word	0x08038fe4
 801fc0c:	08038ff0 	.word	0x08038ff0
 801fc10:	08039010 	.word	0x08039010
 801fc14:	0803901c 	.word	0x0803901c
 801fc18:	0803902c 	.word	0x0803902c
 801fc1c:	0803903c 	.word	0x0803903c
 801fc20:	0803904c 	.word	0x0803904c
 801fc24:	08039060 	.word	0x08039060
 801fc28:	08039068 	.word	0x08039068
 801fc2c:	0803907c 	.word	0x0803907c
 801fc30:	08039120 	.word	0x08039120
 801fc34:	08039090 	.word	0x08039090
 801fc38:	0803909c 	.word	0x0803909c
 801fc3c:	080390ac 	.word	0x080390ac
 801fc40:	080390b8 	.word	0x080390b8
 801fc44:	080390cc 	.word	0x080390cc
 801fc48:	080390e0 	.word	0x080390e0
 801fc4c:	080390ec 	.word	0x080390ec
 801fc50:	080390fc 	.word	0x080390fc
 801fc54:	08039110 	.word	0x08039110
 801fc58:	0803911c 	.word	0x0803911c
 801fc5c:	08039128 	.word	0x08039128
 801fc60:	0803913c 	.word	0x0803913c
 801fc64:	0803914c 	.word	0x0803914c
 801fc68:	0803916c 	.word	0x0803916c
 801fc6c:	0803917c 	.word	0x0803917c
 801fc70:	08039188 	.word	0x08039188
 801fc74:	08039190 	.word	0x08039190
 801fc78:	080391a0 	.word	0x080391a0
 801fc7c:	080391b4 	.word	0x080391b4
 801fc80:	080391c8 	.word	0x080391c8
 801fc84:	080391e0 	.word	0x080391e0
 801fc88:	080391f8 	.word	0x080391f8
 801fc8c:	08039218 	.word	0x08039218
 801fc90:	0803922c 	.word	0x0803922c
 801fc94:	0803923c 	.word	0x0803923c
 801fc98:	08039250 	.word	0x08039250
 801fc9c:	08039268 	.word	0x08039268
 801fca0:	08039270 	.word	0x08039270
 801fca4:	08039284 	.word	0x08039284
 801fca8:	08039298 	.word	0x08039298
 801fcac:	080392b0 	.word	0x080392b0
 801fcb0:	080392c4 	.word	0x080392c4
 801fcb4:	080392e4 	.word	0x080392e4
 801fcb8:	08039308 	.word	0x08039308
 801fcbc:	08039328 	.word	0x08039328
 801fcc0:	08039340 	.word	0x08039340
 801fcc4:	08039358 	.word	0x08039358
 801fcc8:	08039368 	.word	0x08039368
 801fccc:	08039374 	.word	0x08039374
 801fcd0:	08039388 	.word	0x08039388
 801fcd4:	08039398 	.word	0x08039398
 801fcd8:	080393b4 	.word	0x080393b4
 801fcdc:	080393cc 	.word	0x080393cc
 801fce0:	080393e4 	.word	0x080393e4
 801fce4:	080393f4 	.word	0x080393f4
 801fce8:	08039404 	.word	0x08039404
 801fcec:	08039424 	.word	0x08039424
 801fcf0:	0803606c 	.word	0x0803606c
 801fcf4:	08038fb8 	.word	0x08038fb8

0801fcf8 <mg_is_url_safe>:
    mg_http_serve_file(c, hm, path, opts);
  }
}

static bool mg_is_url_safe(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 801fcf8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801fcfc:	2b09      	cmp	r3, #9
 801fcfe:	d91c      	bls.n	801fd3a <mg_is_url_safe+0x42>
 801fd00:	285f      	cmp	r0, #95	@ 0x5f
 801fd02:	d01c      	beq.n	801fd3e <mg_is_url_safe+0x46>
 801fd04:	dc0d      	bgt.n	801fd22 <mg_is_url_safe+0x2a>
 801fd06:	282e      	cmp	r0, #46	@ 0x2e
 801fd08:	d01b      	beq.n	801fd42 <mg_is_url_safe+0x4a>
 801fd0a:	dd04      	ble.n	801fd16 <mg_is_url_safe+0x1e>
 801fd0c:	3841      	subs	r0, #65	@ 0x41
 801fd0e:	2819      	cmp	r0, #25
 801fd10:	d805      	bhi.n	801fd1e <mg_is_url_safe+0x26>
 801fd12:	2001      	movs	r0, #1
 801fd14:	4770      	bx	lr
 801fd16:	282d      	cmp	r0, #45	@ 0x2d
 801fd18:	d115      	bne.n	801fd46 <mg_is_url_safe+0x4e>
 801fd1a:	2001      	movs	r0, #1
 801fd1c:	4770      	bx	lr
 801fd1e:	2000      	movs	r0, #0
 801fd20:	4770      	bx	lr
 801fd22:	287a      	cmp	r0, #122	@ 0x7a
 801fd24:	dd03      	ble.n	801fd2e <mg_is_url_safe+0x36>
 801fd26:	287e      	cmp	r0, #126	@ 0x7e
 801fd28:	d10f      	bne.n	801fd4a <mg_is_url_safe+0x52>
 801fd2a:	2001      	movs	r0, #1
 801fd2c:	4770      	bx	lr
 801fd2e:	2861      	cmp	r0, #97	@ 0x61
 801fd30:	da01      	bge.n	801fd36 <mg_is_url_safe+0x3e>
 801fd32:	2000      	movs	r0, #0
 801fd34:	4770      	bx	lr
 801fd36:	2001      	movs	r0, #1
 801fd38:	4770      	bx	lr
 801fd3a:	2001      	movs	r0, #1
 801fd3c:	4770      	bx	lr
 801fd3e:	2001      	movs	r0, #1
 801fd40:	4770      	bx	lr
 801fd42:	2001      	movs	r0, #1
 801fd44:	4770      	bx	lr
 801fd46:	2000      	movs	r0, #0
 801fd48:	4770      	bx	lr
 801fd4a:	2000      	movs	r0, #0
}
 801fd4c:	4770      	bx	lr

0801fd4e <is_hex_digit>:
int mg_http_status(const struct mg_http_message *hm) {
  return atoi(hm->uri.buf);
}

static bool is_hex_digit(int c) {
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fd4e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801fd52:	2b09      	cmp	r3, #9
 801fd54:	d908      	bls.n	801fd68 <is_hex_digit+0x1a>
 801fd56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801fd5a:	2b05      	cmp	r3, #5
 801fd5c:	d906      	bls.n	801fd6c <is_hex_digit+0x1e>
         (c >= 'A' && c <= 'F');
 801fd5e:	3841      	subs	r0, #65	@ 0x41
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 801fd60:	2805      	cmp	r0, #5
 801fd62:	d805      	bhi.n	801fd70 <is_hex_digit+0x22>
 801fd64:	2001      	movs	r0, #1
 801fd66:	4770      	bx	lr
 801fd68:	2001      	movs	r0, #1
 801fd6a:	4770      	bx	lr
 801fd6c:	2001      	movs	r0, #1
 801fd6e:	4770      	bx	lr
 801fd70:	2000      	movs	r0, #0
}
 801fd72:	4770      	bx	lr

0801fd74 <roundup>:




static size_t roundup(size_t size, size_t align) {
  return align == 0 ? size : (size + align - 1) / align * align;
 801fd74:	b129      	cbz	r1, 801fd82 <roundup+0xe>
 801fd76:	4408      	add	r0, r1
 801fd78:	3801      	subs	r0, #1
 801fd7a:	fbb0 f0f1 	udiv	r0, r0, r1
 801fd7e:	fb01 f000 	mul.w	r0, r1, r0
}
 801fd82:	4770      	bx	lr

0801fd84 <escapeseq>:




static const char *escapeseq(int esc) {
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 801fd84:	b108      	cbz	r0, 801fd8a <escapeseq+0x6>
 801fd86:	4802      	ldr	r0, [pc, #8]	@ (801fd90 <escapeseq+0xc>)
 801fd88:	4770      	bx	lr
 801fd8a:	4802      	ldr	r0, [pc, #8]	@ (801fd94 <escapeseq+0x10>)
}
 801fd8c:	4770      	bx	lr
 801fd8e:	bf00      	nop
 801fd90:	08039444 	.word	0x08039444
 801fd94:	0803944c 	.word	0x0803944c

0801fd98 <json_esc>:

static char json_esc(int c, int esc) {
 801fd98:	b570      	push	{r4, r5, r6, lr}
 801fd9a:	4604      	mov	r4, r0
 801fd9c:	460d      	mov	r5, r1
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 801fd9e:	4608      	mov	r0, r1
 801fda0:	f7ff fff0 	bl	801fd84 <escapeseq>
 801fda4:	4606      	mov	r6, r0
 801fda6:	fab5 f085 	clz	r0, r5
 801fdaa:	0940      	lsrs	r0, r0, #5
 801fdac:	f7ff ffea 	bl	801fd84 <escapeseq>
 801fdb0:	4602      	mov	r2, r0
  for (p = esc1; *p != '\0'; p++) {
 801fdb2:	4633      	mov	r3, r6
 801fdb4:	e000      	b.n	801fdb8 <json_esc+0x20>
 801fdb6:	3301      	adds	r3, #1
 801fdb8:	7818      	ldrb	r0, [r3, #0]
 801fdba:	b118      	cbz	r0, 801fdc4 <json_esc+0x2c>
    if (*p == c) return esc2[p - esc1];
 801fdbc:	42a0      	cmp	r0, r4
 801fdbe:	d1fa      	bne.n	801fdb6 <json_esc+0x1e>
 801fdc0:	1b9b      	subs	r3, r3, r6
 801fdc2:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 801fdc4:	bd70      	pop	{r4, r5, r6, pc}

0801fdc6 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 801fdc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdca:	4607      	mov	r7, r0
 801fdcc:	460e      	mov	r6, r1
  int i;
  for (i = 0; i < len; i++) {
 801fdce:	2400      	movs	r4, #0
 801fdd0:	e003      	b.n	801fdda <mg_pass_string+0x14>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
      i++;
    } else if (s[i] == '\0') {
 801fdd2:	b1d5      	cbz	r5, 801fe0a <mg_pass_string+0x44>
      return MG_JSON_INVALID;
    } else if (s[i] == '"') {
 801fdd4:	2d22      	cmp	r5, #34	@ 0x22
 801fdd6:	d015      	beq.n	801fe04 <mg_pass_string+0x3e>
  for (i = 0; i < len; i++) {
 801fdd8:	3401      	adds	r4, #1
 801fdda:	42b4      	cmp	r4, r6
 801fddc:	da10      	bge.n	801fe00 <mg_pass_string+0x3a>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 801fdde:	4623      	mov	r3, r4
 801fde0:	5d3d      	ldrb	r5, [r7, r4]
 801fde2:	2d5c      	cmp	r5, #92	@ 0x5c
 801fde4:	d1f5      	bne.n	801fdd2 <mg_pass_string+0xc>
 801fde6:	f104 0801 	add.w	r8, r4, #1
 801fdea:	45b0      	cmp	r8, r6
 801fdec:	daf1      	bge.n	801fdd2 <mg_pass_string+0xc>
 801fdee:	443b      	add	r3, r7
 801fdf0:	2101      	movs	r1, #1
 801fdf2:	7858      	ldrb	r0, [r3, #1]
 801fdf4:	f7ff ffd0 	bl	801fd98 <json_esc>
 801fdf8:	2800      	cmp	r0, #0
 801fdfa:	d0ea      	beq.n	801fdd2 <mg_pass_string+0xc>
      i++;
 801fdfc:	4644      	mov	r4, r8
 801fdfe:	e7eb      	b.n	801fdd8 <mg_pass_string+0x12>
      return i;
    }
  }
  return MG_JSON_INVALID;
 801fe00:	f06f 0401 	mvn.w	r4, #1
}
 801fe04:	4620      	mov	r0, r4
 801fe06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MG_JSON_INVALID;
 801fe0a:	f06f 0401 	mvn.w	r4, #1
 801fe0e:	e7f9      	b.n	801fe04 <mg_pass_string+0x3e>

0801fe10 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 801fe10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe14:	ed2d 8b02 	vpush	{d8}
 801fe18:	b085      	sub	sp, #20
 801fe1a:	4681      	mov	r9, r0
 801fe1c:	9201      	str	r2, [sp, #4]
  double d = 0.0;
  int i = 0, sign = 1;

  // Sign
  if (i < len && *p == '-') {
 801fe1e:	f1b1 0800 	subs.w	r8, r1, #0
 801fe22:	dd49      	ble.n	801feb8 <mg_atod+0xa8>
 801fe24:	7803      	ldrb	r3, [r0, #0]
 801fe26:	2b2d      	cmp	r3, #45	@ 0x2d
 801fe28:	d04c      	beq.n	801fec4 <mg_atod+0xb4>
    sign = -1, i++;
  } else if (i < len && *p == '+') {
 801fe2a:	2b2b      	cmp	r3, #43	@ 0x2b
 801fe2c:	d04e      	beq.n	801fecc <mg_atod+0xbc>
  int i = 0, sign = 1;
 801fe2e:	f04f 0a01 	mov.w	sl, #1
 801fe32:	2400      	movs	r4, #0
 801fe34:	e043      	b.n	801febe <mg_atod+0xae>
    i++;
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
    d *= 10.0;
 801fe36:	2200      	movs	r2, #0
 801fe38:	4b71      	ldr	r3, [pc, #452]	@ (8020000 <mg_atod+0x1f0>)
 801fe3a:	4630      	mov	r0, r6
 801fe3c:	4639      	mov	r1, r7
 801fe3e:	f7f0 fbf3 	bl	8010628 <__aeabi_dmul>
 801fe42:	4606      	mov	r6, r0
 801fe44:	460f      	mov	r7, r1
    d += p[i] - '0';
 801fe46:	f1a5 0030 	sub.w	r0, r5, #48	@ 0x30
 801fe4a:	f7f0 fb83 	bl	8010554 <__aeabi_i2d>
 801fe4e:	4632      	mov	r2, r6
 801fe50:	463b      	mov	r3, r7
 801fe52:	f7f0 fa33 	bl	80102bc <__adddf3>
 801fe56:	4606      	mov	r6, r0
 801fe58:	460f      	mov	r7, r1
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801fe5a:	3401      	adds	r4, #1
 801fe5c:	4544      	cmp	r4, r8
 801fe5e:	da05      	bge.n	801fe6c <mg_atod+0x5c>
 801fe60:	f819 5004 	ldrb.w	r5, [r9, r4]
 801fe64:	2d2f      	cmp	r5, #47	@ 0x2f
 801fe66:	d901      	bls.n	801fe6c <mg_atod+0x5c>
 801fe68:	2d39      	cmp	r5, #57	@ 0x39
 801fe6a:	d9e4      	bls.n	801fe36 <mg_atod+0x26>
  }
  d *= sign;
 801fe6c:	4650      	mov	r0, sl
 801fe6e:	f7f0 fb71 	bl	8010554 <__aeabi_i2d>
 801fe72:	4602      	mov	r2, r0
 801fe74:	460b      	mov	r3, r1
 801fe76:	ec43 2b18 	vmov	d8, r2, r3
 801fe7a:	4632      	mov	r2, r6
 801fe7c:	463b      	mov	r3, r7
 801fe7e:	f7f0 fbd3 	bl	8010628 <__aeabi_dmul>
 801fe82:	4606      	mov	r6, r0
 801fe84:	460f      	mov	r7, r1

  // Fractional
  if (i < len && p[i] == '.') {
 801fe86:	4544      	cmp	r4, r8
 801fe88:	da03      	bge.n	801fe92 <mg_atod+0x82>
 801fe8a:	f819 3004 	ldrb.w	r3, [r9, r4]
 801fe8e:	2b2e      	cmp	r3, #46	@ 0x2e
 801fe90:	d020      	beq.n	801fed4 <mg_atod+0xc4>
    }
    d += frac * sign;
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 801fe92:	4544      	cmp	r4, r8
 801fe94:	f280 80a1 	bge.w	801ffda <mg_atod+0x1ca>
 801fe98:	f819 3004 	ldrb.w	r3, [r9, r4]
 801fe9c:	2b65      	cmp	r3, #101	@ 0x65
 801fe9e:	d002      	beq.n	801fea6 <mg_atod+0x96>
 801fea0:	2b45      	cmp	r3, #69	@ 0x45
 801fea2:	f040 809a 	bne.w	801ffda <mg_atod+0x1ca>
    int j, exp = 0, minus = 0;
    i++;
 801fea6:	1c63      	adds	r3, r4, #1
    if (i < len && p[i] == '-') minus = 1, i++;
 801fea8:	4598      	cmp	r8, r3
 801feaa:	dd58      	ble.n	801ff5e <mg_atod+0x14e>
 801feac:	f819 2003 	ldrb.w	r2, [r9, r3]
 801feb0:	2a2d      	cmp	r2, #45	@ 0x2d
 801feb2:	d051      	beq.n	801ff58 <mg_atod+0x148>
    int j, exp = 0, minus = 0;
 801feb4:	2200      	movs	r2, #0
 801feb6:	e053      	b.n	801ff60 <mg_atod+0x150>
  int i = 0, sign = 1;
 801feb8:	f04f 0a01 	mov.w	sl, #1
 801febc:	2400      	movs	r4, #0
    i++;
 801febe:	2600      	movs	r6, #0
 801fec0:	2700      	movs	r7, #0
 801fec2:	e7cb      	b.n	801fe5c <mg_atod+0x4c>
    sign = -1, i++;
 801fec4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801fec8:	2401      	movs	r4, #1
 801feca:	e7f8      	b.n	801febe <mg_atod+0xae>
  int i = 0, sign = 1;
 801fecc:	f04f 0a01 	mov.w	sl, #1
    i++;
 801fed0:	4654      	mov	r4, sl
 801fed2:	e7f4      	b.n	801febe <mg_atod+0xae>
    i++;
 801fed4:	3401      	adds	r4, #1
    double frac = 0.0, base = 0.1;
 801fed6:	f20f 1b18 	addw	fp, pc, #280	@ 0x118
 801feda:	e9db ab00 	ldrd	sl, fp, [fp]
 801fede:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 801fff8 <mg_atod+0x1e8>
 801fee2:	ec53 2b17 	vmov	r2, r3, d7
 801fee6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801feea:	464f      	mov	r7, r9
 801feec:	4645      	mov	r5, r8
 801feee:	4690      	mov	r8, r2
 801fef0:	4699      	mov	r9, r3
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801fef2:	e017      	b.n	801ff24 <mg_atod+0x114>
      frac += base * (p[i] - '0');
 801fef4:	3830      	subs	r0, #48	@ 0x30
 801fef6:	f7f0 fb2d 	bl	8010554 <__aeabi_i2d>
 801fefa:	4652      	mov	r2, sl
 801fefc:	465b      	mov	r3, fp
 801fefe:	f7f0 fb93 	bl	8010628 <__aeabi_dmul>
 801ff02:	4602      	mov	r2, r0
 801ff04:	460b      	mov	r3, r1
 801ff06:	4640      	mov	r0, r8
 801ff08:	4649      	mov	r1, r9
 801ff0a:	f7f0 f9d7 	bl	80102bc <__adddf3>
 801ff0e:	4680      	mov	r8, r0
 801ff10:	4689      	mov	r9, r1
      base /= 10.0;
 801ff12:	2200      	movs	r2, #0
 801ff14:	4b3a      	ldr	r3, [pc, #232]	@ (8020000 <mg_atod+0x1f0>)
 801ff16:	4650      	mov	r0, sl
 801ff18:	4659      	mov	r1, fp
 801ff1a:	f7f0 fcaf 	bl	801087c <__aeabi_ddiv>
 801ff1e:	4682      	mov	sl, r0
 801ff20:	468b      	mov	fp, r1
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801ff22:	3401      	adds	r4, #1
 801ff24:	42ac      	cmp	r4, r5
 801ff26:	da04      	bge.n	801ff32 <mg_atod+0x122>
 801ff28:	5d38      	ldrb	r0, [r7, r4]
 801ff2a:	282f      	cmp	r0, #47	@ 0x2f
 801ff2c:	d901      	bls.n	801ff32 <mg_atod+0x122>
 801ff2e:	2839      	cmp	r0, #57	@ 0x39
 801ff30:	d9e0      	bls.n	801fef4 <mg_atod+0xe4>
    d += frac * sign;
 801ff32:	4642      	mov	r2, r8
 801ff34:	464b      	mov	r3, r9
 801ff36:	46b9      	mov	r9, r7
 801ff38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ff3c:	46a8      	mov	r8, r5
 801ff3e:	ec51 0b18 	vmov	r0, r1, d8
 801ff42:	f7f0 fb71 	bl	8010628 <__aeabi_dmul>
 801ff46:	4602      	mov	r2, r0
 801ff48:	460b      	mov	r3, r1
 801ff4a:	4630      	mov	r0, r6
 801ff4c:	4639      	mov	r1, r7
 801ff4e:	f7f0 f9b5 	bl	80102bc <__adddf3>
 801ff52:	4606      	mov	r6, r0
 801ff54:	460f      	mov	r7, r1
 801ff56:	e79c      	b.n	801fe92 <mg_atod+0x82>
    if (i < len && p[i] == '-') minus = 1, i++;
 801ff58:	1ca3      	adds	r3, r4, #2
 801ff5a:	2201      	movs	r2, #1
 801ff5c:	e000      	b.n	801ff60 <mg_atod+0x150>
    int j, exp = 0, minus = 0;
 801ff5e:	2200      	movs	r2, #0
    if (i < len && p[i] == '+') i++;
 801ff60:	4543      	cmp	r3, r8
 801ff62:	da03      	bge.n	801ff6c <mg_atod+0x15c>
 801ff64:	f819 1003 	ldrb.w	r1, [r9, r3]
 801ff68:	292b      	cmp	r1, #43	@ 0x2b
 801ff6a:	d013      	beq.n	801ff94 <mg_atod+0x184>
    if (i < len && p[i] == '-') minus = 1, i++;
 801ff6c:	461c      	mov	r4, r3
 801ff6e:	2500      	movs	r5, #0
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801ff70:	4544      	cmp	r4, r8
 801ff72:	da11      	bge.n	801ff98 <mg_atod+0x188>
 801ff74:	f819 3004 	ldrb.w	r3, [r9, r4]
 801ff78:	2b2f      	cmp	r3, #47	@ 0x2f
 801ff7a:	d90d      	bls.n	801ff98 <mg_atod+0x188>
 801ff7c:	2b39      	cmp	r3, #57	@ 0x39
 801ff7e:	d80b      	bhi.n	801ff98 <mg_atod+0x188>
 801ff80:	f5b5 7f9a 	cmp.w	r5, #308	@ 0x134
 801ff84:	da08      	bge.n	801ff98 <mg_atod+0x188>
      exp = exp * 10 + (p[i++] - '0');
 801ff86:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801ff8a:	3401      	adds	r4, #1
 801ff8c:	3b30      	subs	r3, #48	@ 0x30
 801ff8e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801ff92:	e7ed      	b.n	801ff70 <mg_atod+0x160>
    if (i < len && p[i] == '+') i++;
 801ff94:	3301      	adds	r3, #1
 801ff96:	e7e9      	b.n	801ff6c <mg_atod+0x15c>
    if (minus) exp = -exp;
 801ff98:	b102      	cbz	r2, 801ff9c <mg_atod+0x18c>
 801ff9a:	426d      	negs	r5, r5
    for (j = 0; j < exp; j++) d *= 10.0;
 801ff9c:	f04f 0800 	mov.w	r8, #0
 801ffa0:	e009      	b.n	801ffb6 <mg_atod+0x1a6>
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	4b16      	ldr	r3, [pc, #88]	@ (8020000 <mg_atod+0x1f0>)
 801ffa6:	4630      	mov	r0, r6
 801ffa8:	4639      	mov	r1, r7
 801ffaa:	f7f0 fb3d 	bl	8010628 <__aeabi_dmul>
 801ffae:	4606      	mov	r6, r0
 801ffb0:	460f      	mov	r7, r1
 801ffb2:	f108 0801 	add.w	r8, r8, #1
 801ffb6:	45a8      	cmp	r8, r5
 801ffb8:	dbf3      	blt.n	801ffa2 <mg_atod+0x192>
    for (j = 0; j < -exp; j++) d /= 10.0;
 801ffba:	f04f 0800 	mov.w	r8, #0
 801ffbe:	e009      	b.n	801ffd4 <mg_atod+0x1c4>
 801ffc0:	2200      	movs	r2, #0
 801ffc2:	4b0f      	ldr	r3, [pc, #60]	@ (8020000 <mg_atod+0x1f0>)
 801ffc4:	4630      	mov	r0, r6
 801ffc6:	4639      	mov	r1, r7
 801ffc8:	f7f0 fc58 	bl	801087c <__aeabi_ddiv>
 801ffcc:	4606      	mov	r6, r0
 801ffce:	460f      	mov	r7, r1
 801ffd0:	f108 0801 	add.w	r8, r8, #1
 801ffd4:	426b      	negs	r3, r5
 801ffd6:	4543      	cmp	r3, r8
 801ffd8:	dcf2      	bgt.n	801ffc0 <mg_atod+0x1b0>
  }

  if (numlen != NULL) *numlen = i;
 801ffda:	9b01      	ldr	r3, [sp, #4]
 801ffdc:	b103      	cbz	r3, 801ffe0 <mg_atod+0x1d0>
 801ffde:	601c      	str	r4, [r3, #0]
  return d;
}
 801ffe0:	ec47 6b10 	vmov	d0, r6, r7
 801ffe4:	b005      	add	sp, #20
 801ffe6:	ecbd 8b02 	vpop	{d8}
 801ffea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffee:	bf00      	nop
 801fff0:	9999999a 	.word	0x9999999a
 801fff4:	3fb99999 	.word	0x3fb99999
	...
 8020000:	40240000 	.word	0x40240000

08020004 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8020004:	b508      	push	{r3, lr}
  s_log_func((char) c, s_log_func_param);
 8020006:	4b03      	ldr	r3, [pc, #12]	@ (8020014 <logc+0x10>)
 8020008:	681b      	ldr	r3, [r3, #0]
 802000a:	4a03      	ldr	r2, [pc, #12]	@ (8020018 <logc+0x14>)
 802000c:	6811      	ldr	r1, [r2, #0]
 802000e:	4798      	blx	r3
}
 8020010:	bd08      	pop	{r3, pc}
 8020012:	bf00      	nop
 8020014:	20000128 	.word	0x20000128
 8020018:	20019780 	.word	0x20019780

0802001c <logs>:

static void logs(const char *buf, size_t len) {
 802001c:	b570      	push	{r4, r5, r6, lr}
 802001e:	4606      	mov	r6, r0
 8020020:	460d      	mov	r5, r1
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8020022:	2400      	movs	r4, #0
 8020024:	e003      	b.n	802002e <logs+0x12>
 8020026:	5d30      	ldrb	r0, [r6, r4]
 8020028:	f7ff ffec 	bl	8020004 <logc>
 802002c:	3401      	adds	r4, #1
 802002e:	42ac      	cmp	r4, r5
 8020030:	d3f9      	bcc.n	8020026 <logs+0xa>
}
 8020032:	bd70      	pop	{r4, r5, r6, pc}

08020034 <nibble>:
  logs("\r\n", 2);
}
#endif

static unsigned char nibble(unsigned c) {
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 8020034:	2809      	cmp	r0, #9
 8020036:	d803      	bhi.n	8020040 <nibble+0xc>
 8020038:	b2c0      	uxtb	r0, r0
 802003a:	3030      	adds	r0, #48	@ 0x30
 802003c:	b2c0      	uxtb	r0, r0
 802003e:	4770      	bx	lr
 8020040:	b2c0      	uxtb	r0, r0
 8020042:	3057      	adds	r0, #87	@ 0x57
 8020044:	b2c0      	uxtb	r0, r0
}
 8020046:	4770      	bx	lr

08020048 <mg_md5_transform>:

  ctx->bits[0] = 0;
  ctx->bits[1] = 0;
}

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 8020048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802004c:	b08d      	sub	sp, #52	@ 0x34
  uint32_t a, b, c, d;

  a = buf[0];
  b = buf[1];
 802004e:	6846      	ldr	r6, [r0, #4]
  c = buf[2];
  d = buf[3];

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 8020050:	6883      	ldr	r3, [r0, #8]
 8020052:	68c2      	ldr	r2, [r0, #12]
 8020054:	4053      	eors	r3, r2
 8020056:	4033      	ands	r3, r6
 8020058:	4053      	eors	r3, r2
 802005a:	f8d1 a000 	ldr.w	sl, [r1]
 802005e:	4453      	add	r3, sl
 8020060:	6802      	ldr	r2, [r0, #0]
 8020062:	4413      	add	r3, r2
 8020064:	4ae0      	ldr	r2, [pc, #896]	@ (80203e8 <mg_md5_transform+0x3a0>)
 8020066:	441a      	add	r2, r3
 8020068:	eb06 6272 	add.w	r2, r6, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 802006c:	6883      	ldr	r3, [r0, #8]
 802006e:	ea86 0503 	eor.w	r5, r6, r3
 8020072:	4015      	ands	r5, r2
 8020074:	405d      	eors	r5, r3
 8020076:	684b      	ldr	r3, [r1, #4]
 8020078:	9301      	str	r3, [sp, #4]
 802007a:	441d      	add	r5, r3
 802007c:	68c4      	ldr	r4, [r0, #12]
 802007e:	4425      	add	r5, r4
 8020080:	4bda      	ldr	r3, [pc, #872]	@ (80203ec <mg_md5_transform+0x3a4>)
 8020082:	442b      	add	r3, r5
 8020084:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 8020088:	ea86 0502 	eor.w	r5, r6, r2
 802008c:	401d      	ands	r5, r3
 802008e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8020090:	4075      	eors	r5, r6
 8020092:	688c      	ldr	r4, [r1, #8]
 8020094:	4425      	add	r5, r4
 8020096:	6886      	ldr	r6, [r0, #8]
 8020098:	4435      	add	r5, r6
 802009a:	4ed5      	ldr	r6, [pc, #852]	@ (80203f0 <mg_md5_transform+0x3a8>)
 802009c:	442e      	add	r6, r5
 802009e:	eb03 3cf6 	add.w	ip, r3, r6, ror #15
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 80200a2:	ea82 0703 	eor.w	r7, r2, r3
 80200a6:	ea07 070c 	and.w	r7, r7, ip
 80200aa:	4057      	eors	r7, r2
 80200ac:	68cd      	ldr	r5, [r1, #12]
 80200ae:	950a      	str	r5, [sp, #40]	@ 0x28
 80200b0:	442f      	add	r7, r5
 80200b2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80200b4:	4437      	add	r7, r6
 80200b6:	4dcf      	ldr	r5, [pc, #828]	@ (80203f4 <mg_md5_transform+0x3ac>)
 80200b8:	443d      	add	r5, r7
 80200ba:	eb0c 25b5 	add.w	r5, ip, r5, ror #10
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 80200be:	ea83 070c 	eor.w	r7, r3, ip
 80200c2:	402f      	ands	r7, r5
 80200c4:	405f      	eors	r7, r3
 80200c6:	690e      	ldr	r6, [r1, #16]
 80200c8:	9602      	str	r6, [sp, #8]
 80200ca:	4437      	add	r7, r6
 80200cc:	4417      	add	r7, r2
 80200ce:	4aca      	ldr	r2, [pc, #808]	@ (80203f8 <mg_md5_transform+0x3b0>)
 80200d0:	443a      	add	r2, r7
 80200d2:	eb05 6272 	add.w	r2, r5, r2, ror #25
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 80200d6:	ea8c 0705 	eor.w	r7, ip, r5
 80200da:	4017      	ands	r7, r2
 80200dc:	ea87 070c 	eor.w	r7, r7, ip
 80200e0:	694e      	ldr	r6, [r1, #20]
 80200e2:	9603      	str	r6, [sp, #12]
 80200e4:	4437      	add	r7, r6
 80200e6:	441f      	add	r7, r3
 80200e8:	4bc4      	ldr	r3, [pc, #784]	@ (80203fc <mg_md5_transform+0x3b4>)
 80200ea:	443b      	add	r3, r7
 80200ec:	eb02 5333 	add.w	r3, r2, r3, ror #20
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 80200f0:	ea85 0702 	eor.w	r7, r5, r2
 80200f4:	401f      	ands	r7, r3
 80200f6:	406f      	eors	r7, r5
 80200f8:	698e      	ldr	r6, [r1, #24]
 80200fa:	9604      	str	r6, [sp, #16]
 80200fc:	4437      	add	r7, r6
 80200fe:	eb0c 0607 	add.w	r6, ip, r7
 8020102:	4fbf      	ldr	r7, [pc, #764]	@ (8020400 <mg_md5_transform+0x3b8>)
 8020104:	4437      	add	r7, r6
 8020106:	eb03 3cf7 	add.w	ip, r3, r7, ror #15
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 802010a:	ea82 0603 	eor.w	r6, r2, r3
 802010e:	ea06 060c 	and.w	r6, r6, ip
 8020112:	4056      	eors	r6, r2
 8020114:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8020118:	444e      	add	r6, r9
 802011a:	4435      	add	r5, r6
 802011c:	4fb9      	ldr	r7, [pc, #740]	@ (8020404 <mg_md5_transform+0x3bc>)
 802011e:	442f      	add	r7, r5
 8020120:	eb0c 27b7 	add.w	r7, ip, r7, ror #10
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 8020124:	ea83 050c 	eor.w	r5, r3, ip
 8020128:	403d      	ands	r5, r7
 802012a:	405d      	eors	r5, r3
 802012c:	6a0e      	ldr	r6, [r1, #32]
 802012e:	9605      	str	r6, [sp, #20]
 8020130:	4435      	add	r5, r6
 8020132:	442a      	add	r2, r5
 8020134:	4eb4      	ldr	r6, [pc, #720]	@ (8020408 <mg_md5_transform+0x3c0>)
 8020136:	4416      	add	r6, r2
 8020138:	eb07 6676 	add.w	r6, r7, r6, ror #25
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 802013c:	ea8c 0207 	eor.w	r2, ip, r7
 8020140:	4032      	ands	r2, r6
 8020142:	ea82 020c 	eor.w	r2, r2, ip
 8020146:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8020148:	9506      	str	r5, [sp, #24]
 802014a:	442a      	add	r2, r5
 802014c:	4413      	add	r3, r2
 802014e:	4daf      	ldr	r5, [pc, #700]	@ (802040c <mg_md5_transform+0x3c4>)
 8020150:	441d      	add	r5, r3
 8020152:	eb06 5535 	add.w	r5, r6, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 8020156:	ea87 0306 	eor.w	r3, r7, r6
 802015a:	402b      	ands	r3, r5
 802015c:	407b      	eors	r3, r7
 802015e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8020160:	9207      	str	r2, [sp, #28]
 8020162:	4413      	add	r3, r2
 8020164:	4463      	add	r3, ip
 8020166:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 802016a:	3b4f      	subs	r3, #79	@ 0x4f
 802016c:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 8020170:	ea86 0c05 	eor.w	ip, r6, r5
 8020174:	ea0c 0c03 	and.w	ip, ip, r3
 8020178:	ea8c 0c06 	eor.w	ip, ip, r6
 802017c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 802017e:	9208      	str	r2, [sp, #32]
 8020180:	4494      	add	ip, r2
 8020182:	4467      	add	r7, ip
 8020184:	f8df e2a8 	ldr.w	lr, [pc, #680]	@ 8020430 <mg_md5_transform+0x3e8>
 8020188:	44be      	add	lr, r7
 802018a:	eb03 2ebe 	add.w	lr, r3, lr, ror #10
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 802018e:	ea85 0c03 	eor.w	ip, r5, r3
 8020192:	ea0c 0c0e 	and.w	ip, ip, lr
 8020196:	ea8c 0c05 	eor.w	ip, ip, r5
 802019a:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 802019c:	44bc      	add	ip, r7
 802019e:	4466      	add	r6, ip
 80201a0:	f8df c290 	ldr.w	ip, [pc, #656]	@ 8020434 <mg_md5_transform+0x3ec>
 80201a4:	44b4      	add	ip, r6
 80201a6:	eb0e 6c7c 	add.w	ip, lr, ip, ror #25
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 80201aa:	ea83 080e 	eor.w	r8, r3, lr
 80201ae:	ea08 080c 	and.w	r8, r8, ip
 80201b2:	ea88 0803 	eor.w	r8, r8, r3
 80201b6:	6b4e      	ldr	r6, [r1, #52]	@ 0x34
 80201b8:	44b0      	add	r8, r6
 80201ba:	44a8      	add	r8, r5
 80201bc:	4d94      	ldr	r5, [pc, #592]	@ (8020410 <mg_md5_transform+0x3c8>)
 80201be:	4445      	add	r5, r8
 80201c0:	eb0c 5535 	add.w	r5, ip, r5, ror #20
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 80201c4:	ea8e 0b0c 	eor.w	fp, lr, ip
 80201c8:	ea0b 0b05 	and.w	fp, fp, r5
 80201cc:	ea8b 0b0e 	eor.w	fp, fp, lr
 80201d0:	f8d1 8038 	ldr.w	r8, [r1, #56]	@ 0x38
 80201d4:	44c3      	add	fp, r8
 80201d6:	449b      	add	fp, r3
 80201d8:	4b8e      	ldr	r3, [pc, #568]	@ (8020414 <mg_md5_transform+0x3cc>)
 80201da:	445b      	add	r3, fp
 80201dc:	eb05 33f3 	add.w	r3, r5, r3, ror #15
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 80201e0:	ea8c 0b05 	eor.w	fp, ip, r5
 80201e4:	ea0b 0b03 	and.w	fp, fp, r3
 80201e8:	ea8b 0b0c 	eor.w	fp, fp, ip
 80201ec:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 80201ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80201f0:	448b      	add	fp, r1
 80201f2:	44f3      	add	fp, lr
 80201f4:	f8df e240 	ldr.w	lr, [pc, #576]	@ 8020438 <mg_md5_transform+0x3f0>
 80201f8:	44de      	add	lr, fp
 80201fa:	eb03 2ebe 	add.w	lr, r3, lr, ror #10

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 80201fe:	ea83 0b0e 	eor.w	fp, r3, lr
 8020202:	ea0b 0b05 	and.w	fp, fp, r5
 8020206:	ea8b 0b03 	eor.w	fp, fp, r3
 802020a:	9a01      	ldr	r2, [sp, #4]
 802020c:	4493      	add	fp, r2
 802020e:	44e3      	add	fp, ip
 8020210:	f8df c228 	ldr.w	ip, [pc, #552]	@ 802043c <mg_md5_transform+0x3f4>
 8020214:	44dc      	add	ip, fp
 8020216:	eb0e 6cfc 	add.w	ip, lr, ip, ror #27
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 802021a:	ea8e 0b0c 	eor.w	fp, lr, ip
 802021e:	ea0b 0b03 	and.w	fp, fp, r3
 8020222:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020226:	9a04      	ldr	r2, [sp, #16]
 8020228:	4493      	add	fp, r2
 802022a:	44ab      	add	fp, r5
 802022c:	4d7a      	ldr	r5, [pc, #488]	@ (8020418 <mg_md5_transform+0x3d0>)
 802022e:	445d      	add	r5, fp
 8020230:	eb0c 55f5 	add.w	r5, ip, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 8020234:	ea8c 0b05 	eor.w	fp, ip, r5
 8020238:	ea0b 0b0e 	and.w	fp, fp, lr
 802023c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020240:	9908      	ldr	r1, [sp, #32]
 8020242:	448b      	add	fp, r1
 8020244:	445b      	add	r3, fp
 8020246:	f8df b1f8 	ldr.w	fp, [pc, #504]	@ 8020440 <mg_md5_transform+0x3f8>
 802024a:	449b      	add	fp, r3
 802024c:	eb05 4bbb 	add.w	fp, r5, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 8020250:	ea85 030b 	eor.w	r3, r5, fp
 8020254:	ea03 030c 	and.w	r3, r3, ip
 8020258:	406b      	eors	r3, r5
 802025a:	4453      	add	r3, sl
 802025c:	4473      	add	r3, lr
 802025e:	f8df e1e4 	ldr.w	lr, [pc, #484]	@ 8020444 <mg_md5_transform+0x3fc>
 8020262:	449e      	add	lr, r3
 8020264:	eb0b 3e3e 	add.w	lr, fp, lr, ror #12
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 8020268:	ea8b 030e 	eor.w	r3, fp, lr
 802026c:	402b      	ands	r3, r5
 802026e:	ea83 030b 	eor.w	r3, r3, fp
 8020272:	9a03      	ldr	r2, [sp, #12]
 8020274:	4413      	add	r3, r2
 8020276:	449c      	add	ip, r3
 8020278:	4b68      	ldr	r3, [pc, #416]	@ (802041c <mg_md5_transform+0x3d4>)
 802027a:	4463      	add	r3, ip
 802027c:	eb0e 63f3 	add.w	r3, lr, r3, ror #27
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 8020280:	ea8e 0c03 	eor.w	ip, lr, r3
 8020284:	ea0c 0c0b 	and.w	ip, ip, fp
 8020288:	ea8c 0c0e 	eor.w	ip, ip, lr
 802028c:	9a07      	ldr	r2, [sp, #28]
 802028e:	4494      	add	ip, r2
 8020290:	4465      	add	r5, ip
 8020292:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020448 <mg_md5_transform+0x400>
 8020296:	44ac      	add	ip, r5
 8020298:	eb03 5cfc 	add.w	ip, r3, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 802029c:	ea83 050c 	eor.w	r5, r3, ip
 80202a0:	ea05 050e 	and.w	r5, r5, lr
 80202a4:	405d      	eors	r5, r3
 80202a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80202a8:	440d      	add	r5, r1
 80202aa:	445d      	add	r5, fp
 80202ac:	f8df b19c 	ldr.w	fp, [pc, #412]	@ 802044c <mg_md5_transform+0x404>
 80202b0:	44ab      	add	fp, r5
 80202b2:	eb0c 4bbb 	add.w	fp, ip, fp, ror #18
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 80202b6:	ea8c 050b 	eor.w	r5, ip, fp
 80202ba:	401d      	ands	r5, r3
 80202bc:	ea85 050c 	eor.w	r5, r5, ip
 80202c0:	9a02      	ldr	r2, [sp, #8]
 80202c2:	4415      	add	r5, r2
 80202c4:	44ae      	add	lr, r5
 80202c6:	4d56      	ldr	r5, [pc, #344]	@ (8020420 <mg_md5_transform+0x3d8>)
 80202c8:	4475      	add	r5, lr
 80202ca:	eb0b 3535 	add.w	r5, fp, r5, ror #12
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 80202ce:	ea8b 0e05 	eor.w	lr, fp, r5
 80202d2:	ea0e 0e0c 	and.w	lr, lr, ip
 80202d6:	ea8e 0e0b 	eor.w	lr, lr, fp
 80202da:	9906      	ldr	r1, [sp, #24]
 80202dc:	448e      	add	lr, r1
 80202de:	4473      	add	r3, lr
 80202e0:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 8020450 <mg_md5_transform+0x408>
 80202e4:	449e      	add	lr, r3
 80202e6:	eb05 6efe 	add.w	lr, r5, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 80202ea:	ea85 030e 	eor.w	r3, r5, lr
 80202ee:	ea03 030b 	and.w	r3, r3, fp
 80202f2:	406b      	eors	r3, r5
 80202f4:	4443      	add	r3, r8
 80202f6:	4463      	add	r3, ip
 80202f8:	f8df c158 	ldr.w	ip, [pc, #344]	@ 8020454 <mg_md5_transform+0x40c>
 80202fc:	449c      	add	ip, r3
 80202fe:	eb0e 5cfc 	add.w	ip, lr, ip, ror #23
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 8020302:	ea8e 030c 	eor.w	r3, lr, ip
 8020306:	402b      	ands	r3, r5
 8020308:	ea83 030e 	eor.w	r3, r3, lr
 802030c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802030e:	4413      	add	r3, r2
 8020310:	449b      	add	fp, r3
 8020312:	4b44      	ldr	r3, [pc, #272]	@ (8020424 <mg_md5_transform+0x3dc>)
 8020314:	445b      	add	r3, fp
 8020316:	eb0c 43b3 	add.w	r3, ip, r3, ror #18
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 802031a:	ea8c 0b03 	eor.w	fp, ip, r3
 802031e:	ea0b 0b0e 	and.w	fp, fp, lr
 8020322:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020326:	9905      	ldr	r1, [sp, #20]
 8020328:	448b      	add	fp, r1
 802032a:	445d      	add	r5, fp
 802032c:	f8df b128 	ldr.w	fp, [pc, #296]	@ 8020458 <mg_md5_transform+0x410>
 8020330:	44ab      	add	fp, r5
 8020332:	eb03 3b3b 	add.w	fp, r3, fp, ror #12
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 8020336:	ea83 050b 	eor.w	r5, r3, fp
 802033a:	ea05 050c 	and.w	r5, r5, ip
 802033e:	405d      	eors	r5, r3
 8020340:	4435      	add	r5, r6
 8020342:	4475      	add	r5, lr
 8020344:	f8df e114 	ldr.w	lr, [pc, #276]	@ 802045c <mg_md5_transform+0x414>
 8020348:	44ae      	add	lr, r5
 802034a:	eb0b 6efe 	add.w	lr, fp, lr, ror #27
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 802034e:	ea8b 050e 	eor.w	r5, fp, lr
 8020352:	401d      	ands	r5, r3
 8020354:	ea85 050b 	eor.w	r5, r5, fp
 8020358:	4425      	add	r5, r4
 802035a:	44ac      	add	ip, r5
 802035c:	4d32      	ldr	r5, [pc, #200]	@ (8020428 <mg_md5_transform+0x3e0>)
 802035e:	4465      	add	r5, ip
 8020360:	eb0e 55f5 	add.w	r5, lr, r5, ror #23
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 8020364:	ea8e 0c05 	eor.w	ip, lr, r5
 8020368:	ea0c 0c0b 	and.w	ip, ip, fp
 802036c:	ea8c 0c0e 	eor.w	ip, ip, lr
 8020370:	44cc      	add	ip, r9
 8020372:	4463      	add	r3, ip
 8020374:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 8020460 <mg_md5_transform+0x418>
 8020378:	449c      	add	ip, r3
 802037a:	eb05 4cbc 	add.w	ip, r5, ip, ror #18
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 802037e:	ea85 030c 	eor.w	r3, r5, ip
 8020382:	ea03 030e 	and.w	r3, r3, lr
 8020386:	406b      	eors	r3, r5
 8020388:	443b      	add	r3, r7
 802038a:	445b      	add	r3, fp
 802038c:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8020464 <mg_md5_transform+0x41c>
 8020390:	449b      	add	fp, r3
 8020392:	eb0c 3b3b 	add.w	fp, ip, fp, ror #12

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 8020396:	ea8c 030b 	eor.w	r3, ip, fp
 802039a:	406b      	eors	r3, r5
 802039c:	9a03      	ldr	r2, [sp, #12]
 802039e:	4413      	add	r3, r2
 80203a0:	4473      	add	r3, lr
 80203a2:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 80203a6:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 80203aa:	eb0b 7333 	add.w	r3, fp, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 80203ae:	ea8b 0e03 	eor.w	lr, fp, r3
 80203b2:	ea8e 0e0c 	eor.w	lr, lr, ip
 80203b6:	448e      	add	lr, r1
 80203b8:	44ae      	add	lr, r5
 80203ba:	4d1c      	ldr	r5, [pc, #112]	@ (802042c <mg_md5_transform+0x3e4>)
 80203bc:	4475      	add	r5, lr
 80203be:	eb03 5575 	add.w	r5, r3, r5, ror #21
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 80203c2:	ea83 0e05 	eor.w	lr, r3, r5
 80203c6:	ea8e 0e0b 	eor.w	lr, lr, fp
 80203ca:	9908      	ldr	r1, [sp, #32]
 80203cc:	448e      	add	lr, r1
 80203ce:	44f4      	add	ip, lr
 80203d0:	f8df e094 	ldr.w	lr, [pc, #148]	@ 8020468 <mg_md5_transform+0x420>
 80203d4:	44e6      	add	lr, ip
 80203d6:	eb05 4e3e 	add.w	lr, r5, lr, ror #16
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 80203da:	ea85 0c0e 	eor.w	ip, r5, lr
 80203de:	ea8c 0c03 	eor.w	ip, ip, r3
 80203e2:	44c4      	add	ip, r8
 80203e4:	44e3      	add	fp, ip
 80203e6:	e041      	b.n	802046c <mg_md5_transform+0x424>
 80203e8:	d76aa478 	.word	0xd76aa478
 80203ec:	e8c7b756 	.word	0xe8c7b756
 80203f0:	242070db 	.word	0x242070db
 80203f4:	c1bdceee 	.word	0xc1bdceee
 80203f8:	f57c0faf 	.word	0xf57c0faf
 80203fc:	4787c62a 	.word	0x4787c62a
 8020400:	a8304613 	.word	0xa8304613
 8020404:	fd469501 	.word	0xfd469501
 8020408:	698098d8 	.word	0x698098d8
 802040c:	8b44f7af 	.word	0x8b44f7af
 8020410:	fd987193 	.word	0xfd987193
 8020414:	a679438e 	.word	0xa679438e
 8020418:	c040b340 	.word	0xc040b340
 802041c:	d62f105d 	.word	0xd62f105d
 8020420:	e7d3fbc8 	.word	0xe7d3fbc8
 8020424:	f4d50d87 	.word	0xf4d50d87
 8020428:	fcefa3f8 	.word	0xfcefa3f8
 802042c:	8771f681 	.word	0x8771f681
 8020430:	895cd7be 	.word	0x895cd7be
 8020434:	6b901122 	.word	0x6b901122
 8020438:	49b40821 	.word	0x49b40821
 802043c:	f61e2562 	.word	0xf61e2562
 8020440:	265e5a51 	.word	0x265e5a51
 8020444:	e9b6c7aa 	.word	0xe9b6c7aa
 8020448:	02441453 	.word	0x02441453
 802044c:	d8a1e681 	.word	0xd8a1e681
 8020450:	21e1cde6 	.word	0x21e1cde6
 8020454:	c33707d6 	.word	0xc33707d6
 8020458:	455a14ed 	.word	0x455a14ed
 802045c:	a9e3e905 	.word	0xa9e3e905
 8020460:	676f02d9 	.word	0x676f02d9
 8020464:	8d2a4c8a 	.word	0x8d2a4c8a
 8020468:	6d9d6122 	.word	0x6d9d6122
 802046c:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8020734 <mg_md5_transform+0x6ec>
 8020470:	44dc      	add	ip, fp
 8020472:	eb0e 2c7c 	add.w	ip, lr, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 8020476:	ea8e 0b0c 	eor.w	fp, lr, ip
 802047a:	ea8b 0b05 	eor.w	fp, fp, r5
 802047e:	9a01      	ldr	r2, [sp, #4]
 8020480:	4493      	add	fp, r2
 8020482:	449b      	add	fp, r3
 8020484:	4b99      	ldr	r3, [pc, #612]	@ (80206ec <mg_md5_transform+0x6a4>)
 8020486:	445b      	add	r3, fp
 8020488:	eb0c 7333 	add.w	r3, ip, r3, ror #28
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 802048c:	ea8c 0b03 	eor.w	fp, ip, r3
 8020490:	ea8b 0b0e 	eor.w	fp, fp, lr
 8020494:	9a02      	ldr	r2, [sp, #8]
 8020496:	4493      	add	fp, r2
 8020498:	445d      	add	r5, fp
 802049a:	f8df b29c 	ldr.w	fp, [pc, #668]	@ 8020738 <mg_md5_transform+0x6f0>
 802049e:	44ab      	add	fp, r5
 80204a0:	eb03 5b7b 	add.w	fp, r3, fp, ror #21
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 80204a4:	ea83 050b 	eor.w	r5, r3, fp
 80204a8:	ea85 050c 	eor.w	r5, r5, ip
 80204ac:	444d      	add	r5, r9
 80204ae:	44ae      	add	lr, r5
 80204b0:	4d8f      	ldr	r5, [pc, #572]	@ (80206f0 <mg_md5_transform+0x6a8>)
 80204b2:	4475      	add	r5, lr
 80204b4:	eb0b 4535 	add.w	r5, fp, r5, ror #16
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 80204b8:	ea8b 0e05 	eor.w	lr, fp, r5
 80204bc:	ea8e 0e03 	eor.w	lr, lr, r3
 80204c0:	9a07      	ldr	r2, [sp, #28]
 80204c2:	4496      	add	lr, r2
 80204c4:	44e6      	add	lr, ip
 80204c6:	f8df c274 	ldr.w	ip, [pc, #628]	@ 802073c <mg_md5_transform+0x6f4>
 80204ca:	44f4      	add	ip, lr
 80204cc:	eb05 2c7c 	add.w	ip, r5, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 80204d0:	ea85 0e0c 	eor.w	lr, r5, ip
 80204d4:	ea8e 0e0b 	eor.w	lr, lr, fp
 80204d8:	44b6      	add	lr, r6
 80204da:	4473      	add	r3, lr
 80204dc:	f8df e260 	ldr.w	lr, [pc, #608]	@ 8020740 <mg_md5_transform+0x6f8>
 80204e0:	449e      	add	lr, r3
 80204e2:	eb0c 7e3e 	add.w	lr, ip, lr, ror #28
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 80204e6:	ea8c 030e 	eor.w	r3, ip, lr
 80204ea:	406b      	eors	r3, r5
 80204ec:	4453      	add	r3, sl
 80204ee:	449b      	add	fp, r3
 80204f0:	4b80      	ldr	r3, [pc, #512]	@ (80206f4 <mg_md5_transform+0x6ac>)
 80204f2:	445b      	add	r3, fp
 80204f4:	eb0e 5373 	add.w	r3, lr, r3, ror #21
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 80204f8:	ea8e 0b03 	eor.w	fp, lr, r3
 80204fc:	ea8b 0b0c 	eor.w	fp, fp, ip
 8020500:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020502:	4493      	add	fp, r2
 8020504:	445d      	add	r5, fp
 8020506:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 8020744 <mg_md5_transform+0x6fc>
 802050a:	44ab      	add	fp, r5
 802050c:	eb03 4b3b 	add.w	fp, r3, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 8020510:	ea83 050b 	eor.w	r5, r3, fp
 8020514:	ea85 050e 	eor.w	r5, r5, lr
 8020518:	9904      	ldr	r1, [sp, #16]
 802051a:	440d      	add	r5, r1
 802051c:	4465      	add	r5, ip
 802051e:	f8df c228 	ldr.w	ip, [pc, #552]	@ 8020748 <mg_md5_transform+0x700>
 8020522:	44ac      	add	ip, r5
 8020524:	eb0b 2c7c 	add.w	ip, fp, ip, ror #9
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 8020528:	ea8b 050c 	eor.w	r5, fp, ip
 802052c:	405d      	eors	r5, r3
 802052e:	9906      	ldr	r1, [sp, #24]
 8020530:	440d      	add	r5, r1
 8020532:	44ae      	add	lr, r5
 8020534:	4d70      	ldr	r5, [pc, #448]	@ (80206f8 <mg_md5_transform+0x6b0>)
 8020536:	4475      	add	r5, lr
 8020538:	eb0c 7535 	add.w	r5, ip, r5, ror #28
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 802053c:	ea8c 0e05 	eor.w	lr, ip, r5
 8020540:	ea8e 0e0b 	eor.w	lr, lr, fp
 8020544:	44be      	add	lr, r7
 8020546:	4473      	add	r3, lr
 8020548:	f8df e200 	ldr.w	lr, [pc, #512]	@ 802074c <mg_md5_transform+0x704>
 802054c:	449e      	add	lr, r3
 802054e:	eb05 5e7e 	add.w	lr, r5, lr, ror #21
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 8020552:	ea85 030e 	eor.w	r3, r5, lr
 8020556:	ea83 030c 	eor.w	r3, r3, ip
 802055a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802055c:	440b      	add	r3, r1
 802055e:	445b      	add	r3, fp
 8020560:	f8df b1ec 	ldr.w	fp, [pc, #492]	@ 8020750 <mg_md5_transform+0x708>
 8020564:	449b      	add	fp, r3
 8020566:	eb0e 4b3b 	add.w	fp, lr, fp, ror #16
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 802056a:	ea8e 030b 	eor.w	r3, lr, fp
 802056e:	406b      	eors	r3, r5
 8020570:	940a      	str	r4, [sp, #40]	@ 0x28
 8020572:	4423      	add	r3, r4
 8020574:	449c      	add	ip, r3
 8020576:	4b61      	ldr	r3, [pc, #388]	@ (80206fc <mg_md5_transform+0x6b4>)
 8020578:	4463      	add	r3, ip
 802057a:	eb0b 2373 	add.w	r3, fp, r3, ror #9

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 802057e:	ea63 0c0e 	orn	ip, r3, lr
 8020582:	ea8c 0c0b 	eor.w	ip, ip, fp
 8020586:	44e2      	add	sl, ip
 8020588:	44aa      	add	sl, r5
 802058a:	4d5d      	ldr	r5, [pc, #372]	@ (8020700 <mg_md5_transform+0x6b8>)
 802058c:	4455      	add	r5, sl
 802058e:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 8020592:	ea65 0c0b 	orn	ip, r5, fp
 8020596:	ea8c 0c03 	eor.w	ip, ip, r3
 802059a:	44e1      	add	r9, ip
 802059c:	44f1      	add	r9, lr
 802059e:	f8df c1b4 	ldr.w	ip, [pc, #436]	@ 8020754 <mg_md5_transform+0x70c>
 80205a2:	44cc      	add	ip, r9
 80205a4:	eb05 5cbc 	add.w	ip, r5, ip, ror #22
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 80205a8:	ea6c 0e03 	orn	lr, ip, r3
 80205ac:	ea8e 0e05 	eor.w	lr, lr, r5
 80205b0:	44f0      	add	r8, lr
 80205b2:	44d8      	add	r8, fp
 80205b4:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8020758 <mg_md5_transform+0x710>
 80205b8:	44c6      	add	lr, r8
 80205ba:	eb0c 4e7e 	add.w	lr, ip, lr, ror #17
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 80205be:	ea6e 0805 	orn	r8, lr, r5
 80205c2:	ea88 080c 	eor.w	r8, r8, ip
 80205c6:	9c03      	ldr	r4, [sp, #12]
 80205c8:	44a0      	add	r8, r4
 80205ca:	4498      	add	r8, r3
 80205cc:	4b4d      	ldr	r3, [pc, #308]	@ (8020704 <mg_md5_transform+0x6bc>)
 80205ce:	4443      	add	r3, r8
 80205d0:	eb0e 23f3 	add.w	r3, lr, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 80205d4:	ea63 080c 	orn	r8, r3, ip
 80205d8:	ea88 080e 	eor.w	r8, r8, lr
 80205dc:	4447      	add	r7, r8
 80205de:	442f      	add	r7, r5
 80205e0:	4d49      	ldr	r5, [pc, #292]	@ (8020708 <mg_md5_transform+0x6c0>)
 80205e2:	443d      	add	r5, r7
 80205e4:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 80205e8:	ea65 070e 	orn	r7, r5, lr
 80205ec:	405f      	eors	r7, r3
 80205ee:	4417      	add	r7, r2
 80205f0:	44bc      	add	ip, r7
 80205f2:	4f46      	ldr	r7, [pc, #280]	@ (802070c <mg_md5_transform+0x6c4>)
 80205f4:	4467      	add	r7, ip
 80205f6:	eb05 57b7 	add.w	r7, r5, r7, ror #22
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 80205fa:	ea67 0c03 	orn	ip, r7, r3
 80205fe:	ea8c 0c05 	eor.w	ip, ip, r5
 8020602:	9a07      	ldr	r2, [sp, #28]
 8020604:	4462      	add	r2, ip
 8020606:	4472      	add	r2, lr
 8020608:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 802060c:	f6a2 3283 	subw	r2, r2, #2947	@ 0xb83
 8020610:	eb07 4272 	add.w	r2, r7, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 8020614:	ea62 0c05 	orn	ip, r2, r5
 8020618:	ea8c 0c07 	eor.w	ip, ip, r7
 802061c:	9c01      	ldr	r4, [sp, #4]
 802061e:	44a4      	add	ip, r4
 8020620:	449c      	add	ip, r3
 8020622:	4b3b      	ldr	r3, [pc, #236]	@ (8020710 <mg_md5_transform+0x6c8>)
 8020624:	4463      	add	r3, ip
 8020626:	eb02 23f3 	add.w	r3, r2, r3, ror #11
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 802062a:	ea63 0c07 	orn	ip, r3, r7
 802062e:	ea8c 0c02 	eor.w	ip, ip, r2
 8020632:	9905      	ldr	r1, [sp, #20]
 8020634:	448c      	add	ip, r1
 8020636:	44ac      	add	ip, r5
 8020638:	4d36      	ldr	r5, [pc, #216]	@ (8020714 <mg_md5_transform+0x6cc>)
 802063a:	4465      	add	r5, ip
 802063c:	eb03 65b5 	add.w	r5, r3, r5, ror #26
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 8020640:	ea65 0c02 	orn	ip, r5, r2
 8020644:	ea8c 0c03 	eor.w	ip, ip, r3
 8020648:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802064a:	4461      	add	r1, ip
 802064c:	440f      	add	r7, r1
 802064e:	4932      	ldr	r1, [pc, #200]	@ (8020718 <mg_md5_transform+0x6d0>)
 8020650:	4439      	add	r1, r7
 8020652:	eb05 51b1 	add.w	r1, r5, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 8020656:	ea61 0703 	orn	r7, r1, r3
 802065a:	406f      	eors	r7, r5
 802065c:	9c04      	ldr	r4, [sp, #16]
 802065e:	4427      	add	r7, r4
 8020660:	4417      	add	r7, r2
 8020662:	4a2e      	ldr	r2, [pc, #184]	@ (802071c <mg_md5_transform+0x6d4>)
 8020664:	443a      	add	r2, r7
 8020666:	eb01 4272 	add.w	r2, r1, r2, ror #17
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 802066a:	ea62 0705 	orn	r7, r2, r5
 802066e:	404f      	eors	r7, r1
 8020670:	443e      	add	r6, r7
 8020672:	4433      	add	r3, r6
 8020674:	4e2a      	ldr	r6, [pc, #168]	@ (8020720 <mg_md5_transform+0x6d8>)
 8020676:	441e      	add	r6, r3
 8020678:	eb02 26f6 	add.w	r6, r2, r6, ror #11
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 802067c:	ea66 0301 	orn	r3, r6, r1
 8020680:	4053      	eors	r3, r2
 8020682:	9f02      	ldr	r7, [sp, #8]
 8020684:	443b      	add	r3, r7
 8020686:	441d      	add	r5, r3
 8020688:	4b26      	ldr	r3, [pc, #152]	@ (8020724 <mg_md5_transform+0x6dc>)
 802068a:	442b      	add	r3, r5
 802068c:	eb06 63b3 	add.w	r3, r6, r3, ror #26
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 8020690:	ea63 0502 	orn	r5, r3, r2
 8020694:	4075      	eors	r5, r6
 8020696:	9f08      	ldr	r7, [sp, #32]
 8020698:	443d      	add	r5, r7
 802069a:	440d      	add	r5, r1
 802069c:	4922      	ldr	r1, [pc, #136]	@ (8020728 <mg_md5_transform+0x6e0>)
 802069e:	4429      	add	r1, r5
 80206a0:	eb03 51b1 	add.w	r1, r3, r1, ror #22
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 80206a4:	ea61 0506 	orn	r5, r1, r6
 80206a8:	405d      	eors	r5, r3
 80206aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80206ac:	4425      	add	r5, r4
 80206ae:	442a      	add	r2, r5
 80206b0:	4d1e      	ldr	r5, [pc, #120]	@ (802072c <mg_md5_transform+0x6e4>)
 80206b2:	4415      	add	r5, r2
 80206b4:	eb01 4575 	add.w	r5, r1, r5, ror #17
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 80206b8:	ea65 0203 	orn	r2, r5, r3
 80206bc:	404a      	eors	r2, r1
 80206be:	9c06      	ldr	r4, [sp, #24]
 80206c0:	4422      	add	r2, r4
 80206c2:	4432      	add	r2, r6
 80206c4:	4e1a      	ldr	r6, [pc, #104]	@ (8020730 <mg_md5_transform+0x6e8>)
 80206c6:	4416      	add	r6, r2
 80206c8:	eb05 26f6 	add.w	r6, r5, r6, ror #11

  buf[0] += a;
 80206cc:	6802      	ldr	r2, [r0, #0]
 80206ce:	4413      	add	r3, r2
 80206d0:	6003      	str	r3, [r0, #0]
  buf[1] += b;
 80206d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80206d4:	4434      	add	r4, r6
 80206d6:	6044      	str	r4, [r0, #4]
  buf[2] += c;
 80206d8:	6883      	ldr	r3, [r0, #8]
 80206da:	441d      	add	r5, r3
 80206dc:	6085      	str	r5, [r0, #8]
  buf[3] += d;
 80206de:	68c3      	ldr	r3, [r0, #12]
 80206e0:	4419      	add	r1, r3
 80206e2:	60c1      	str	r1, [r0, #12]
}
 80206e4:	b00d      	add	sp, #52	@ 0x34
 80206e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206ea:	bf00      	nop
 80206ec:	a4beea44 	.word	0xa4beea44
 80206f0:	f6bb4b60 	.word	0xf6bb4b60
 80206f4:	eaa127fa 	.word	0xeaa127fa
 80206f8:	d9d4d039 	.word	0xd9d4d039
 80206fc:	c4ac5665 	.word	0xc4ac5665
 8020700:	f4292244 	.word	0xf4292244
 8020704:	fc93a039 	.word	0xfc93a039
 8020708:	655b59c3 	.word	0x655b59c3
 802070c:	8f0ccc92 	.word	0x8f0ccc92
 8020710:	85845dd1 	.word	0x85845dd1
 8020714:	6fa87e4f 	.word	0x6fa87e4f
 8020718:	fe2ce6e0 	.word	0xfe2ce6e0
 802071c:	a3014314 	.word	0xa3014314
 8020720:	4e0811a1 	.word	0x4e0811a1
 8020724:	f7537e82 	.word	0xf7537e82
 8020728:	bd3af235 	.word	0xbd3af235
 802072c:	2ad7d2bb 	.word	0x2ad7d2bb
 8020730:	eb86d391 	.word	0xeb86d391
 8020734:	fde5380c 	.word	0xfde5380c
 8020738:	4bdecfa9 	.word	0x4bdecfa9
 802073c:	bebfbc70 	.word	0xbebfbc70
 8020740:	289b7ec6 	.word	0x289b7ec6
 8020744:	d4ef3085 	.word	0xd4ef3085
 8020748:	04881d05 	.word	0x04881d05
 802074c:	e6db99e5 	.word	0xe6db99e5
 8020750:	1fa27cf8 	.word	0x1fa27cf8
 8020754:	432aff97 	.word	0x432aff97
 8020758:	ab9423a7 	.word	0xab9423a7

0802075c <varint_size>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
  mg_send(c, &value, sizeof(value));
}

static uint8_t varint_size(size_t length) {
 802075c:	4602      	mov	r2, r0
  uint8_t bytes_needed = 0;
 802075e:	2000      	movs	r0, #0
  do {
    bytes_needed++;
 8020760:	3001      	adds	r0, #1
 8020762:	b2c0      	uxtb	r0, r0
    length /= 0x80;
  } while (length > 0);
 8020764:	2a7f      	cmp	r2, #127	@ 0x7f
 8020766:	ea4f 12d2 	mov.w	r2, r2, lsr #7
 802076a:	d8f9      	bhi.n	8020760 <varint_size+0x4>
  return bytes_needed;
}
 802076c:	4770      	bx	lr

0802076e <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 802076e:	b500      	push	{lr}
 8020770:	4686      	mov	lr, r0
  size_t len = 0;
 8020772:	2300      	movs	r3, #0
 8020774:	e007      	b.n	8020786 <encode_varint+0x18>

  do {
    uint8_t b = (uint8_t) (value % 128);
    value /= 128;
    if (value > 0) b |= 0x80;
 8020776:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
    buf[len++] = b;
 802077a:	1c58      	adds	r0, r3, #1
 802077c:	f80e c003 	strb.w	ip, [lr, r3]
  } while (value > 0);
 8020780:	2a7f      	cmp	r2, #127	@ 0x7f
 8020782:	d907      	bls.n	8020794 <encode_varint+0x26>
    buf[len++] = b;
 8020784:	4603      	mov	r3, r0
    uint8_t b = (uint8_t) (value % 128);
 8020786:	f001 0c7f 	and.w	ip, r1, #127	@ 0x7f
    value /= 128;
 802078a:	460a      	mov	r2, r1
 802078c:	09c9      	lsrs	r1, r1, #7
    if (value > 0) b |= 0x80;
 802078e:	2a7f      	cmp	r2, #127	@ 0x7f
 8020790:	d9f3      	bls.n	802077a <encode_varint+0xc>
 8020792:	e7f0      	b.n	8020776 <encode_varint+0x8>

  return len;
}
 8020794:	f85d fb04 	ldr.w	pc, [sp], #4

08020798 <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
  size_t multiplier = 1, offset;
  *value = 0;
 8020798:	2300      	movs	r3, #0
 802079a:	6013      	str	r3, [r2, #0]
  size_t multiplier = 1, offset;
 802079c:	f04f 0c01 	mov.w	ip, #1

  for (offset = 0; offset < 4 && offset < len; offset++) {
 80207a0:	2b03      	cmp	r3, #3
 80207a2:	d81d      	bhi.n	80207e0 <decode_varint+0x48>
 80207a4:	428b      	cmp	r3, r1
 80207a6:	d219      	bcs.n	80207dc <decode_varint+0x44>
static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80207a8:	b530      	push	{r4, r5, lr}
 80207aa:	e003      	b.n	80207b4 <decode_varint+0x1c>
    uint8_t encoded_byte = buf[offset];
    *value += (encoded_byte & 0x7f) * multiplier;
    multiplier *= 128;

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80207ac:	1c58      	adds	r0, r3, #1
 80207ae:	e012      	b.n	80207d6 <decode_varint+0x3e>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80207b0:	428b      	cmp	r3, r1
 80207b2:	d211      	bcs.n	80207d8 <decode_varint+0x40>
    uint8_t encoded_byte = buf[offset];
 80207b4:	f810 e003 	ldrb.w	lr, [r0, r3]
    *value += (encoded_byte & 0x7f) * multiplier;
 80207b8:	f00e 047f 	and.w	r4, lr, #127	@ 0x7f
 80207bc:	6815      	ldr	r5, [r2, #0]
 80207be:	fb0c 5404 	mla	r4, ip, r4, r5
 80207c2:	6014      	str	r4, [r2, #0]
    multiplier *= 128;
 80207c4:	ea4f 1ccc 	mov.w	ip, ip, lsl #7
    if ((encoded_byte & 0x80) == 0) return offset + 1;
 80207c8:	f01e 0f80 	tst.w	lr, #128	@ 0x80
 80207cc:	d0ee      	beq.n	80207ac <decode_varint+0x14>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 80207ce:	3301      	adds	r3, #1
 80207d0:	2b03      	cmp	r3, #3
 80207d2:	d9ed      	bls.n	80207b0 <decode_varint+0x18>
  }

  return 0;
 80207d4:	2000      	movs	r0, #0
}
 80207d6:	bd30      	pop	{r4, r5, pc}
  return 0;
 80207d8:	2000      	movs	r0, #0
 80207da:	e7fc      	b.n	80207d6 <decode_varint+0x3e>
 80207dc:	2000      	movs	r0, #0
 80207de:	4770      	bx	lr
 80207e0:	2000      	movs	r0, #0
}
 80207e2:	4770      	bx	lr

080207e4 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
  for (i = 0; i < num_properties; ++i) {
 80207e4:	2300      	movs	r3, #0
 80207e6:	2b1a      	cmp	r3, #26
 80207e8:	d80b      	bhi.n	8020802 <mqtt_prop_type_by_id+0x1e>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 80207ea:	4a07      	ldr	r2, [pc, #28]	@ (8020808 <mqtt_prop_type_by_id+0x24>)
 80207ec:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80207f0:	4282      	cmp	r2, r0
 80207f2:	d001      	beq.n	80207f8 <mqtt_prop_type_by_id+0x14>
  for (i = 0; i < num_properties; ++i) {
 80207f4:	3301      	adds	r3, #1
 80207f6:	e7f6      	b.n	80207e6 <mqtt_prop_type_by_id+0x2>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 80207f8:	4a03      	ldr	r2, [pc, #12]	@ (8020808 <mqtt_prop_type_by_id+0x24>)
 80207fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80207fe:	7858      	ldrb	r0, [r3, #1]
 8020800:	4770      	bx	lr
  }
  return -1;  // Property ID not found
 8020802:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8020806:	4770      	bx	lr
 8020808:	0803a7e8 	.word	0x0803a7e8

0802080c <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 802080c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020810:	4606      	mov	r6, r0
 8020812:	4688      	mov	r8, r1
  size_t i, size = 0;
 8020814:	2500      	movs	r5, #0
  for (i = 0; i < count; i++) {
 8020816:	462c      	mov	r4, r5
 8020818:	e005      	b.n	8020826 <get_properties_length+0x1a>
    size++;  // identifier
    switch (mqtt_prop_type_by_id(props[i].id)) {
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 802081a:	697d      	ldr	r5, [r7, #20]
 802081c:	68fb      	ldr	r3, [r7, #12]
 802081e:	441d      	add	r5, r3
 8020820:	444d      	add	r5, r9
 8020822:	3504      	adds	r5, #4
  for (i = 0; i < count; i++) {
 8020824:	3401      	adds	r4, #1
 8020826:	4544      	cmp	r4, r8
 8020828:	d231      	bcs.n	802088e <get_properties_length+0x82>
    size++;  // identifier
 802082a:	f105 0901 	add.w	r9, r5, #1
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802082e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8020832:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 8020836:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
 802083a:	f7ff ffd3 	bl	80207e4 <mqtt_prop_type_by_id>
 802083e:	2806      	cmp	r0, #6
 8020840:	d824      	bhi.n	802088c <get_properties_length+0x80>
 8020842:	a301      	add	r3, pc, #4	@ (adr r3, 8020848 <get_properties_length+0x3c>)
 8020844:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8020848:	08020889 	.word	0x08020889
 802084c:	08020865 	.word	0x08020865
 8020850:	0802081b 	.word	0x0802081b
 8020854:	0802086d 	.word	0x0802086d
 8020858:	08020875 	.word	0x08020875
 802085c:	08020881 	.word	0x08020881
 8020860:	08020885 	.word	0x08020885
                            2 * sizeof(uint16_t));
        break;
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8020864:	697d      	ldr	r5, [r7, #20]
 8020866:	444d      	add	r5, r9
 8020868:	3502      	adds	r5, #2
        break;
 802086a:	e7db      	b.n	8020824 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 802086c:	697d      	ldr	r5, [r7, #20]
 802086e:	444d      	add	r5, r9
 8020870:	3502      	adds	r5, #2
        break;
 8020872:	e7d7      	b.n	8020824 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 8020874:	6878      	ldr	r0, [r7, #4]
 8020876:	f7ff ff71 	bl	802075c <varint_size>
 802087a:	eb00 0509 	add.w	r5, r0, r9
        break;
 802087e:	e7d1      	b.n	8020824 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8020880:	3505      	adds	r5, #5
        break;
 8020882:	e7cf      	b.n	8020824 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8020884:	3503      	adds	r5, #3
        break;
 8020886:	e7cd      	b.n	8020824 <get_properties_length+0x18>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8020888:	3502      	adds	r5, #2
        break;
 802088a:	e7cb      	b.n	8020824 <get_properties_length+0x18>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 802088c:	464d      	mov	r5, r9
        return size;  // cannot parse further down
    }
  }

  return size;
}
 802088e:	4628      	mov	r0, r5
 8020890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020894 <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 8020894:	b510      	push	{r4, lr}
  size_t size = get_properties_length(props, count);
 8020896:	f7ff ffb9 	bl	802080c <get_properties_length>
 802089a:	4604      	mov	r4, r0
  size += varint_size(size);
 802089c:	f7ff ff5e 	bl	802075c <varint_size>
  return size;
}
 80208a0:	4420      	add	r0, r4
 80208a2:	bd10      	pop	{r4, pc}

080208a4 <mg_aton4>:
  memset(addr->ip, 0, sizeof(addr->ip));
  addr->is_ip6 = false;
  return true;
}

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 80208a4:	b410      	push	{r4}
 80208a6:	b085      	sub	sp, #20
 80208a8:	466b      	mov	r3, sp
 80208aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t data[4] = {0, 0, 0, 0};
 80208ae:	2300      	movs	r3, #0
 80208b0:	9303      	str	r3, [sp, #12]
  size_t i, num_dots = 0;
 80208b2:	469c      	mov	ip, r3
  for (i = 0; i < str.len; i++) {
 80208b4:	9901      	ldr	r1, [sp, #4]
 80208b6:	4299      	cmp	r1, r3
 80208b8:	d92c      	bls.n	8020914 <mg_aton4+0x70>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 80208ba:	9c00      	ldr	r4, [sp, #0]
 80208bc:	5ce1      	ldrb	r1, [r4, r3]
 80208be:	f1a1 0030 	sub.w	r0, r1, #48	@ 0x30
 80208c2:	b2c0      	uxtb	r0, r0
 80208c4:	2809      	cmp	r0, #9
 80208c6:	d812      	bhi.n	80208ee <mg_aton4+0x4a>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 80208c8:	f10c 0010 	add.w	r0, ip, #16
 80208cc:	4468      	add	r0, sp
 80208ce:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 80208d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80208d6:	3930      	subs	r1, #48	@ 0x30
 80208d8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      if (octet > 255) return false;
 80208dc:	29ff      	cmp	r1, #255	@ 0xff
 80208de:	dc28      	bgt.n	8020932 <mg_aton4+0x8e>
      data[num_dots] = (uint8_t) octet;
 80208e0:	f10c 0010 	add.w	r0, ip, #16
 80208e4:	4468      	add	r0, sp
 80208e6:	f800 1c04 	strb.w	r1, [r0, #-4]
  for (i = 0; i < str.len; i++) {
 80208ea:	3301      	adds	r3, #1
 80208ec:	e7e2      	b.n	80208b4 <mg_aton4+0x10>
    } else if (str.buf[i] == '.') {
 80208ee:	292e      	cmp	r1, #46	@ 0x2e
 80208f0:	d121      	bne.n	8020936 <mg_aton4+0x92>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 80208f2:	f1bc 0f02 	cmp.w	ip, #2
 80208f6:	d820      	bhi.n	802093a <mg_aton4+0x96>
 80208f8:	b923      	cbnz	r3, 8020904 <mg_aton4+0x60>
 80208fa:	2000      	movs	r0, #0
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
  memcpy(&addr->ip, data, sizeof(data));
  addr->is_ip6 = false;
  return true;
}
 80208fc:	b005      	add	sp, #20
 80208fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020902:	4770      	bx	lr
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 8020904:	441c      	add	r4, r3
 8020906:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802090a:	292e      	cmp	r1, #46	@ 0x2e
 802090c:	d017      	beq.n	802093e <mg_aton4+0x9a>
      num_dots++;
 802090e:	f10c 0c01 	add.w	ip, ip, #1
 8020912:	e7ea      	b.n	80208ea <mg_aton4+0x46>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8020914:	f1bc 0f03 	cmp.w	ip, #3
 8020918:	d113      	bne.n	8020942 <mg_aton4+0x9e>
 802091a:	9900      	ldr	r1, [sp, #0]
 802091c:	4419      	add	r1, r3
 802091e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8020922:	2b2e      	cmp	r3, #46	@ 0x2e
 8020924:	d00f      	beq.n	8020946 <mg_aton4+0xa2>
  memcpy(&addr->ip, data, sizeof(data));
 8020926:	9b03      	ldr	r3, [sp, #12]
 8020928:	6013      	str	r3, [r2, #0]
  addr->is_ip6 = false;
 802092a:	2300      	movs	r3, #0
 802092c:	74d3      	strb	r3, [r2, #19]
  return true;
 802092e:	2001      	movs	r0, #1
 8020930:	e7e4      	b.n	80208fc <mg_aton4+0x58>
      if (octet > 255) return false;
 8020932:	2000      	movs	r0, #0
 8020934:	e7e2      	b.n	80208fc <mg_aton4+0x58>
      return false;
 8020936:	2000      	movs	r0, #0
 8020938:	e7e0      	b.n	80208fc <mg_aton4+0x58>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 802093a:	2000      	movs	r0, #0
 802093c:	e7de      	b.n	80208fc <mg_aton4+0x58>
 802093e:	2000      	movs	r0, #0
 8020940:	e7dc      	b.n	80208fc <mg_aton4+0x58>
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 8020942:	2000      	movs	r0, #0
 8020944:	e7da      	b.n	80208fc <mg_aton4+0x58>
 8020946:	2000      	movs	r0, #0
 8020948:	e7d8      	b.n	80208fc <mg_aton4+0x58>

0802094a <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 802094a:	b508      	push	{r3, lr}
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 802094c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 802094e:	b103      	cbz	r3, 8020952 <mg_tcpip_call+0x8>
 8020950:	4798      	blx	r3
}
 8020952:	bd08      	pop	{r3, pc}

08020954 <csumup>:
}

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 8020954:	2300      	movs	r3, #0
 8020956:	e005      	b.n	8020964 <csumup+0x10>
 8020958:	f811 c003 	ldrb.w	ip, [r1, r3]
 802095c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8020960:	4460      	add	r0, ip
 8020962:	3301      	adds	r3, #1
 8020964:	4293      	cmp	r3, r2
 8020966:	d205      	bcs.n	8020974 <csumup+0x20>
 8020968:	f013 0f01 	tst.w	r3, #1
 802096c:	d0f4      	beq.n	8020958 <csumup+0x4>
 802096e:	f811 c003 	ldrb.w	ip, [r1, r3]
 8020972:	e7f5      	b.n	8020960 <csumup+0xc>
  return sum;
}
 8020974:	4770      	bx	lr

08020976 <ether_output>:
  s->timer = ifp->now + n;
  s->ttype = type;
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
}

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 8020976:	b538      	push	{r3, r4, r5, lr}
 8020978:	4604      	mov	r4, r0
 802097a:	460d      	mov	r5, r1
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 802097c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 802097e:	685b      	ldr	r3, [r3, #4]
 8020980:	4602      	mov	r2, r0
 8020982:	6940      	ldr	r0, [r0, #20]
 8020984:	4798      	blx	r3
  if (n == len) ifp->nsent++;
 8020986:	4285      	cmp	r5, r0
 8020988:	d000      	beq.n	802098c <ether_output+0x16>
  return n;
}
 802098a:	bd38      	pop	{r3, r4, r5, pc}
  if (n == len) ifp->nsent++;
 802098c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 802098e:	3301      	adds	r3, #1
 8020990:	6763      	str	r3, [r4, #116]	@ 0x74
  return n;
 8020992:	e7fa      	b.n	802098a <ether_output+0x14>

08020994 <can_write>:
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
  mg_close_conn(c);
}

static bool can_write(struct mg_connection *c) {
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020994:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020998:	f013 0f28 	tst.w	r3, #40	@ 0x28
 802099c:	d106      	bne.n	80209ac <can_write+0x18>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 802099e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80209a0:	b132      	cbz	r2, 80209b0 <can_write+0x1c>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 80209a2:	f013 0f90 	tst.w	r3, #144	@ 0x90
 80209a6:	d005      	beq.n	80209b4 <can_write+0x20>
 80209a8:	2000      	movs	r0, #0
 80209aa:	4770      	bx	lr
 80209ac:	2000      	movs	r0, #0
 80209ae:	4770      	bx	lr
 80209b0:	2000      	movs	r0, #0
 80209b2:	4770      	bx	lr
 80209b4:	2001      	movs	r0, #1
}
 80209b6:	4770      	bx	lr

080209b8 <mg_esc>:
  uint8_t *p = va_arg(*ap, uint8_t *);
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
                    p[3], p[4], p[5]);
}

static char mg_esc(int c, bool esc) {
 80209b8:	b410      	push	{r4}
 80209ba:	4602      	mov	r2, r0
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80209bc:	460c      	mov	r4, r1
 80209be:	b109      	cbz	r1, 80209c4 <mg_esc+0xc>
 80209c0:	4b0b      	ldr	r3, [pc, #44]	@ (80209f0 <mg_esc+0x38>)
 80209c2:	e007      	b.n	80209d4 <mg_esc+0x1c>
 80209c4:	4b0b      	ldr	r3, [pc, #44]	@ (80209f4 <mg_esc+0x3c>)
 80209c6:	e005      	b.n	80209d4 <mg_esc+0x1c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80209c8:	4a0a      	ldr	r2, [pc, #40]	@ (80209f4 <mg_esc+0x3c>)
 80209ca:	1a9b      	subs	r3, r3, r2
 80209cc:	4a08      	ldr	r2, [pc, #32]	@ (80209f0 <mg_esc+0x38>)
 80209ce:	5cd0      	ldrb	r0, [r2, r3]
 80209d0:	e00a      	b.n	80209e8 <mg_esc+0x30>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80209d2:	3301      	adds	r3, #1
 80209d4:	7818      	ldrb	r0, [r3, #0]
 80209d6:	b138      	cbz	r0, 80209e8 <mg_esc+0x30>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80209d8:	4290      	cmp	r0, r2
 80209da:	d1fa      	bne.n	80209d2 <mg_esc+0x1a>
 80209dc:	2c00      	cmp	r4, #0
 80209de:	d0f3      	beq.n	80209c8 <mg_esc+0x10>
 80209e0:	4a03      	ldr	r2, [pc, #12]	@ (80209f0 <mg_esc+0x38>)
 80209e2:	1a9b      	subs	r3, r3, r2
 80209e4:	4a03      	ldr	r2, [pc, #12]	@ (80209f4 <mg_esc+0x3c>)
 80209e6:	5cd0      	ldrb	r0, [r2, r3]
  }
  return 0;
}
 80209e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80209ec:	4770      	bx	lr
 80209ee:	bf00      	nop
 80209f0:	08039444 	.word	0x08039444
 80209f4:	0803944c 	.word	0x0803944c

080209f8 <mg_escape>:

static char mg_escape(int c) {
 80209f8:	b508      	push	{r3, lr}
  return mg_esc(c, true);
 80209fa:	2101      	movs	r1, #1
 80209fc:	f7ff ffdc 	bl	80209b8 <mg_esc>
}
 8020a00:	bd08      	pop	{r3, pc}

08020a02 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8020a02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a06:	4607      	mov	r7, r0
 8020a08:	460e      	mov	r6, r1
 8020a0a:	4692      	mov	sl, r2
 8020a0c:	4699      	mov	r9, r3
  size_t i = 0, extra = 0;
 8020a0e:	f04f 0b00 	mov.w	fp, #0
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8020a12:	465c      	mov	r4, fp
 8020a14:	e003      	b.n	8020a1e <qcpy+0x1c>
    char c = mg_escape(buf[i]);
    if (c) {
      out('\\', ptr), out(c, ptr), extra++;
    } else {
      out(buf[i], ptr);
 8020a16:	4631      	mov	r1, r6
 8020a18:	4628      	mov	r0, r5
 8020a1a:	47b8      	blx	r7
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8020a1c:	3401      	adds	r4, #1
 8020a1e:	454c      	cmp	r4, r9
 8020a20:	d211      	bcs.n	8020a46 <qcpy+0x44>
 8020a22:	f81a 5004 	ldrb.w	r5, [sl, r4]
 8020a26:	b175      	cbz	r5, 8020a46 <qcpy+0x44>
    char c = mg_escape(buf[i]);
 8020a28:	4628      	mov	r0, r5
 8020a2a:	f7ff ffe5 	bl	80209f8 <mg_escape>
    if (c) {
 8020a2e:	4680      	mov	r8, r0
 8020a30:	2800      	cmp	r0, #0
 8020a32:	d0f0      	beq.n	8020a16 <qcpy+0x14>
      out('\\', ptr), out(c, ptr), extra++;
 8020a34:	4631      	mov	r1, r6
 8020a36:	205c      	movs	r0, #92	@ 0x5c
 8020a38:	47b8      	blx	r7
 8020a3a:	4631      	mov	r1, r6
 8020a3c:	4640      	mov	r0, r8
 8020a3e:	47b8      	blx	r7
 8020a40:	f10b 0b01 	add.w	fp, fp, #1
 8020a44:	e7ea      	b.n	8020a1c <qcpy+0x1a>
    }
  }
  return i + extra;
}
 8020a46:	eb04 000b 	add.w	r0, r4, fp
 8020a4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020a50 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8020a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020a54:	4607      	mov	r7, r0
 8020a56:	460e      	mov	r6, r1
  size_t bl = (size_t) va_arg(*ap, int);
 8020a58:	6811      	ldr	r1, [r2, #0]
 8020a5a:	1d0b      	adds	r3, r1, #4
 8020a5c:	6013      	str	r3, [r2, #0]
 8020a5e:	f8d1 9000 	ldr.w	r9, [r1]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8020a62:	f101 0308 	add.w	r3, r1, #8
 8020a66:	6013      	str	r3, [r2, #0]
 8020a68:	f8d1 8004 	ldr.w	r8, [r1, #4]
  const char *hex = "0123456789abcdef";
  size_t j;
  for (j = 0; j < bl; j++) {
 8020a6c:	2400      	movs	r4, #0
 8020a6e:	e00e      	b.n	8020a8e <mg_print_hex+0x3e>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8020a70:	f818 3004 	ldrb.w	r3, [r8, r4]
 8020a74:	091b      	lsrs	r3, r3, #4
 8020a76:	4d09      	ldr	r5, [pc, #36]	@ (8020a9c <mg_print_hex+0x4c>)
 8020a78:	4631      	mov	r1, r6
 8020a7a:	5ce8      	ldrb	r0, [r5, r3]
 8020a7c:	47b8      	blx	r7
    out(hex[p[j] & 0x0F], arg);
 8020a7e:	f818 3004 	ldrb.w	r3, [r8, r4]
 8020a82:	f003 030f 	and.w	r3, r3, #15
 8020a86:	4631      	mov	r1, r6
 8020a88:	5ce8      	ldrb	r0, [r5, r3]
 8020a8a:	47b8      	blx	r7
  for (j = 0; j < bl; j++) {
 8020a8c:	3401      	adds	r4, #1
 8020a8e:	454c      	cmp	r4, r9
 8020a90:	d3ee      	bcc.n	8020a70 <mg_print_hex+0x20>
  }
  return 2 * bl;
}
 8020a92:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8020a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a9a:	bf00      	nop
 8020a9c:	08038f98 	.word	0x08038f98

08020aa0 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8020aa0:	4684      	mov	ip, r0
  if (MG_BIG_ENDIAN) {
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8020aa2:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8020aa6:	ea4f 2332 	mov.w	r3, r2, ror #8
 8020aaa:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 8020aae:	ea4f 6232 	mov.w	r2, r2, ror #24
 8020ab2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8020ab6:	ea43 0002 	orr.w	r0, r3, r2
 8020aba:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
  }
  return block->l[i];
}
 8020abe:	4770      	bx	lr

08020ac0 <mg_tolc>:
  struct mg_str str = {(char *) s, n};
  return str;
}

static int mg_tolc(char c) {
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8020ac0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8020ac4:	b2db      	uxtb	r3, r3
 8020ac6:	2b19      	cmp	r3, #25
 8020ac8:	d800      	bhi.n	8020acc <mg_tolc+0xc>
 8020aca:	3020      	adds	r0, #32
}
 8020acc:	4770      	bx	lr

08020ace <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8020ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ad2:	b082      	sub	sp, #8
 8020ad4:	4605      	mov	r5, r0
 8020ad6:	9e08      	ldr	r6, [sp, #32]
 8020ad8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  size_t i;
  uint8_t *p = (uint8_t *) buf;
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8020ada:	0a10      	lsrs	r0, r2, #8
 8020adc:	f88d 0004 	strb.w	r0, [sp, #4]
 8020ae0:	f88d 2005 	strb.w	r2, [sp, #5]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8020ae4:	00c9      	lsls	r1, r1, #3
 8020ae6:	b249      	sxtb	r1, r1
 8020ae8:	4698      	mov	r8, r3
 8020aea:	b143      	cbz	r3, 8020afe <w5500_txn+0x30>
 8020aec:	2304      	movs	r3, #4
 8020aee:	4319      	orrs	r1, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8020af0:	f88d 1006 	strb.w	r1, [sp, #6]
  s->begin(s->spi);
 8020af4:	686b      	ldr	r3, [r5, #4]
 8020af6:	6828      	ldr	r0, [r5, #0]
 8020af8:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8020afa:	2400      	movs	r4, #0
 8020afc:	e00a      	b.n	8020b14 <w5500_txn+0x46>
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8020afe:	2300      	movs	r3, #0
 8020b00:	e7f5      	b.n	8020aee <w5500_txn+0x20>
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8020b02:	68eb      	ldr	r3, [r5, #12]
 8020b04:	f104 0208 	add.w	r2, r4, #8
 8020b08:	446a      	add	r2, sp
 8020b0a:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8020b0e:	6828      	ldr	r0, [r5, #0]
 8020b10:	4798      	blx	r3
 8020b12:	3401      	adds	r4, #1
 8020b14:	2c02      	cmp	r4, #2
 8020b16:	d9f4      	bls.n	8020b02 <w5500_txn+0x34>
  for (i = 0; i < len; i++) {
 8020b18:	2400      	movs	r4, #0
 8020b1a:	e000      	b.n	8020b1e <w5500_txn+0x50>
 8020b1c:	3401      	adds	r4, #1
 8020b1e:	42bc      	cmp	r4, r7
 8020b20:	d208      	bcs.n	8020b34 <w5500_txn+0x66>
    uint8_t r = s->txn(s->spi, p[i]);
 8020b22:	68eb      	ldr	r3, [r5, #12]
 8020b24:	5d31      	ldrb	r1, [r6, r4]
 8020b26:	6828      	ldr	r0, [r5, #0]
 8020b28:	4798      	blx	r3
    if (!wr) p[i] = r;
 8020b2a:	f1b8 0f00 	cmp.w	r8, #0
 8020b2e:	d1f5      	bne.n	8020b1c <w5500_txn+0x4e>
 8020b30:	5530      	strb	r0, [r6, r4]
 8020b32:	e7f3      	b.n	8020b1c <w5500_txn+0x4e>
  }
  s->end(s->spi);
 8020b34:	68ab      	ldr	r3, [r5, #8]
 8020b36:	6828      	ldr	r0, [r5, #0]
 8020b38:	4798      	blx	r3
}
 8020b3a:	b002      	add	sp, #8
 8020b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020b40 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8020b40:	b510      	push	{r4, lr}
 8020b42:	b082      	sub	sp, #8
 8020b44:	9c04      	ldr	r4, [sp, #16]
 8020b46:	9401      	str	r4, [sp, #4]
 8020b48:	9300      	str	r3, [sp, #0]
 8020b4a:	2301      	movs	r3, #1
 8020b4c:	f7ff ffbf 	bl	8020ace <w5500_txn>
 8020b50:	b002      	add	sp, #8
 8020b52:	bd10      	pop	{r4, pc}

08020b54 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8020b54:	b500      	push	{lr}
 8020b56:	b085      	sub	sp, #20
 8020b58:	f88d 300f 	strb.w	r3, [sp, #15]
 8020b5c:	2301      	movs	r3, #1
 8020b5e:	9300      	str	r3, [sp, #0]
 8020b60:	f10d 030f 	add.w	r3, sp, #15
 8020b64:	f7ff ffec 	bl	8020b40 <w5500_wn>
 8020b68:	b005      	add	sp, #20
 8020b6a:	f85d fb04 	ldr.w	pc, [sp], #4

08020b6e <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8020b6e:	b500      	push	{lr}
 8020b70:	b085      	sub	sp, #20
 8020b72:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 8020b76:	f88d c00c 	strb.w	ip, [sp, #12]
 8020b7a:	f88d 300d 	strb.w	r3, [sp, #13]
 8020b7e:	2302      	movs	r3, #2
 8020b80:	9300      	str	r3, [sp, #0]
 8020b82:	ab03      	add	r3, sp, #12
 8020b84:	f7ff ffdc 	bl	8020b40 <w5500_wn>
 8020b88:	b005      	add	sp, #20
 8020b8a:	f85d fb04 	ldr.w	pc, [sp], #4

08020b8e <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8020b8e:	b510      	push	{r4, lr}
 8020b90:	b082      	sub	sp, #8
 8020b92:	9c04      	ldr	r4, [sp, #16]
 8020b94:	9401      	str	r4, [sp, #4]
 8020b96:	9300      	str	r3, [sp, #0]
 8020b98:	2300      	movs	r3, #0
 8020b9a:	f7ff ff98 	bl	8020ace <w5500_txn>
 8020b9e:	b002      	add	sp, #8
 8020ba0:	bd10      	pop	{r4, pc}

08020ba2 <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8020ba2:	b500      	push	{lr}
 8020ba4:	b085      	sub	sp, #20
 8020ba6:	2300      	movs	r3, #0
 8020ba8:	f88d 300f 	strb.w	r3, [sp, #15]
 8020bac:	2301      	movs	r3, #1
 8020bae:	9300      	str	r3, [sp, #0]
 8020bb0:	f10d 030f 	add.w	r3, sp, #15
 8020bb4:	f7ff ffeb 	bl	8020b8e <w5500_rn>
 8020bb8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8020bbc:	b005      	add	sp, #20
 8020bbe:	f85d fb04 	ldr.w	pc, [sp], #4

08020bc2 <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8020bc2:	b500      	push	{lr}
 8020bc4:	b085      	sub	sp, #20
 8020bc6:	2300      	movs	r3, #0
 8020bc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020bcc:	2302      	movs	r3, #2
 8020bce:	9300      	str	r3, [sp, #0]
 8020bd0:	ab03      	add	r3, sp, #12
 8020bd2:	f7ff ffdc 	bl	8020b8e <w5500_rn>
 8020bd6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8020bda:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8020bde:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8020be2:	b005      	add	sp, #20
 8020be4:	f85d fb04 	ldr.w	pc, [sp], #4

08020be8 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8020be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020bec:	b083      	sub	sp, #12
 8020bee:	4606      	mov	r6, r0
 8020bf0:	4688      	mov	r8, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020bf2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020bf4:	2000      	movs	r0, #0
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8020bf6:	4604      	mov	r4, r0
 8020bf8:	2226      	movs	r2, #38	@ 0x26
 8020bfa:	2101      	movs	r1, #1
 8020bfc:	4628      	mov	r0, r5
 8020bfe:	f7ff ffe0 	bl	8020bc2 <w5500_r2>
 8020c02:	4284      	cmp	r4, r0
 8020c04:	d3f7      	bcc.n	8020bf6 <w5500_rx+0xe>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8020c06:	b91c      	cbnz	r4, 8020c10 <w5500_rx+0x28>
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
}
 8020c08:	4620      	mov	r0, r4
 8020c0a:	b003      	add	sp, #12
 8020c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8020c10:	2228      	movs	r2, #40	@ 0x28
 8020c12:	2101      	movs	r1, #1
 8020c14:	4628      	mov	r0, r5
 8020c16:	f7ff ffd4 	bl	8020bc2 <w5500_r2>
 8020c1a:	4607      	mov	r7, r0
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8020c1c:	4602      	mov	r2, r0
 8020c1e:	2103      	movs	r1, #3
 8020c20:	4628      	mov	r0, r5
 8020c22:	f7ff ffce 	bl	8020bc2 <w5500_r2>
 8020c26:	4681      	mov	r9, r0
    if (n <= len + 2 && n > 1) {
 8020c28:	fa1f f188 	uxth.w	r1, r8
 8020c2c:	3102      	adds	r1, #2
 8020c2e:	4288      	cmp	r0, r1
 8020c30:	dc0e      	bgt.n	8020c50 <w5500_rx+0x68>
 8020c32:	2801      	cmp	r0, #1
 8020c34:	d801      	bhi.n	8020c3a <w5500_rx+0x52>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020c36:	2400      	movs	r4, #0
 8020c38:	e00b      	b.n	8020c52 <w5500_rx+0x6a>
      r = (uint16_t) (n - 2);
 8020c3a:	1e84      	subs	r4, r0, #2
 8020c3c:	b2a4      	uxth	r4, r4
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8020c3e:	1cba      	adds	r2, r7, #2
 8020c40:	9400      	str	r4, [sp, #0]
 8020c42:	4633      	mov	r3, r6
 8020c44:	b292      	uxth	r2, r2
 8020c46:	2103      	movs	r1, #3
 8020c48:	4628      	mov	r0, r5
 8020c4a:	f7ff ffa0 	bl	8020b8e <w5500_rn>
 8020c4e:	e000      	b.n	8020c52 <w5500_rx+0x6a>
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8020c50:	2400      	movs	r4, #0
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8020c52:	eb07 0309 	add.w	r3, r7, r9
 8020c56:	b29b      	uxth	r3, r3
 8020c58:	2228      	movs	r2, #40	@ 0x28
 8020c5a:	2101      	movs	r1, #1
 8020c5c:	4628      	mov	r0, r5
 8020c5e:	f7ff ff86 	bl	8020b6e <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8020c62:	2340      	movs	r3, #64	@ 0x40
 8020c64:	2201      	movs	r2, #1
 8020c66:	4611      	mov	r1, r2
 8020c68:	4628      	mov	r0, r5
 8020c6a:	f7ff ff73 	bl	8020b54 <w5500_w1>
 8020c6e:	e7cb      	b.n	8020c08 <w5500_rx+0x20>

08020c70 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8020c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020c74:	b082      	sub	sp, #8
 8020c76:	4680      	mov	r8, r0
 8020c78:	460d      	mov	r5, r1
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020c7a:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8020c7c:	b28f      	uxth	r7, r1
 8020c7e:	2000      	movs	r0, #0
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8020c80:	e004      	b.n	8020c8c <w5500_tx+0x1c>
 8020c82:	2220      	movs	r2, #32
 8020c84:	2101      	movs	r1, #1
 8020c86:	4630      	mov	r0, r6
 8020c88:	f7ff ff9b 	bl	8020bc2 <w5500_r2>
 8020c8c:	42b8      	cmp	r0, r7
 8020c8e:	d3f8      	bcc.n	8020c82 <w5500_tx+0x12>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8020c90:	2224      	movs	r2, #36	@ 0x24
 8020c92:	2101      	movs	r1, #1
 8020c94:	4630      	mov	r0, r6
 8020c96:	f7ff ff94 	bl	8020bc2 <w5500_r2>
 8020c9a:	4604      	mov	r4, r0
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8020c9c:	b2ad      	uxth	r5, r5
 8020c9e:	9500      	str	r5, [sp, #0]
 8020ca0:	4643      	mov	r3, r8
 8020ca2:	4602      	mov	r2, r0
 8020ca4:	2102      	movs	r1, #2
 8020ca6:	4630      	mov	r0, r6
 8020ca8:	f7ff ff4a 	bl	8020b40 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8020cac:	193b      	adds	r3, r7, r4
 8020cae:	b29b      	uxth	r3, r3
 8020cb0:	2224      	movs	r2, #36	@ 0x24
 8020cb2:	2101      	movs	r1, #1
 8020cb4:	4630      	mov	r0, r6
 8020cb6:	f7ff ff5a 	bl	8020b6e <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8020cba:	2320      	movs	r3, #32
 8020cbc:	2201      	movs	r2, #1
 8020cbe:	4611      	mov	r1, r2
 8020cc0:	4630      	mov	r0, r6
 8020cc2:	f7ff ff47 	bl	8020b54 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8020cc6:	2400      	movs	r4, #0
 8020cc8:	e004      	b.n	8020cd4 <w5500_tx+0x64>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
    if (ir == 0) continue;
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
    if (ir & 8) len = 0;           // Timeout. Report error
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8020cca:	f015 0f18 	tst.w	r5, #24
 8020cce:	d116      	bne.n	8020cfe <w5500_tx+0x8e>
  for (i = 0; i < 40; i++) {
 8020cd0:	3401      	adds	r4, #1
 8020cd2:	b2a4      	uxth	r4, r4
 8020cd4:	2c27      	cmp	r4, #39	@ 0x27
 8020cd6:	d812      	bhi.n	8020cfe <w5500_tx+0x8e>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8020cd8:	2202      	movs	r2, #2
 8020cda:	2101      	movs	r1, #1
 8020cdc:	4630      	mov	r0, r6
 8020cde:	f7ff ff60 	bl	8020ba2 <w5500_r1>
    if (ir == 0) continue;
 8020ce2:	4605      	mov	r5, r0
 8020ce4:	2800      	cmp	r0, #0
 8020ce6:	d0f3      	beq.n	8020cd0 <w5500_tx+0x60>
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8020ce8:	4603      	mov	r3, r0
 8020cea:	2202      	movs	r2, #2
 8020cec:	2101      	movs	r1, #1
 8020cee:	4630      	mov	r0, r6
 8020cf0:	f7ff ff30 	bl	8020b54 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8020cf4:	f015 0f08 	tst.w	r5, #8
 8020cf8:	d0e7      	beq.n	8020cca <w5500_tx+0x5a>
 8020cfa:	2700      	movs	r7, #0
 8020cfc:	e7e5      	b.n	8020cca <w5500_tx+0x5a>
  }
  return len;
}
 8020cfe:	4638      	mov	r0, r7
 8020d00:	b002      	add	sp, #8
 8020d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020d06 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8020d06:	b510      	push	{r4, lr}
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8020d08:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  s->end(s->spi);
 8020d0a:	68a3      	ldr	r3, [r4, #8]
 8020d0c:	6820      	ldr	r0, [r4, #0]
 8020d0e:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8020d10:	2380      	movs	r3, #128	@ 0x80
 8020d12:	2200      	movs	r2, #0
 8020d14:	4611      	mov	r1, r2
 8020d16:	4620      	mov	r0, r4
 8020d18:	f7ff ff1c 	bl	8020b54 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8020d1c:	2300      	movs	r3, #0
 8020d1e:	222e      	movs	r2, #46	@ 0x2e
 8020d20:	4619      	mov	r1, r3
 8020d22:	4620      	mov	r0, r4
 8020d24:	f7ff ff16 	bl	8020b54 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8020d28:	23f8      	movs	r3, #248	@ 0xf8
 8020d2a:	222e      	movs	r2, #46	@ 0x2e
 8020d2c:	2100      	movs	r1, #0
 8020d2e:	4620      	mov	r0, r4
 8020d30:	f7ff ff10 	bl	8020b54 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8020d34:	2310      	movs	r3, #16
 8020d36:	221e      	movs	r2, #30
 8020d38:	2101      	movs	r1, #1
 8020d3a:	4620      	mov	r0, r4
 8020d3c:	f7ff ff0a 	bl	8020b54 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8020d40:	2310      	movs	r3, #16
 8020d42:	221f      	movs	r2, #31
 8020d44:	2101      	movs	r1, #1
 8020d46:	4620      	mov	r0, r4
 8020d48:	f7ff ff04 	bl	8020b54 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8020d4c:	2304      	movs	r3, #4
 8020d4e:	2200      	movs	r2, #0
 8020d50:	2101      	movs	r1, #1
 8020d52:	4620      	mov	r0, r4
 8020d54:	f7ff fefe 	bl	8020b54 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8020d58:	2301      	movs	r3, #1
 8020d5a:	461a      	mov	r2, r3
 8020d5c:	4619      	mov	r1, r3
 8020d5e:	4620      	mov	r0, r4
 8020d60:	f7ff fef8 	bl	8020b54 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8020d64:	2203      	movs	r2, #3
 8020d66:	2101      	movs	r1, #1
 8020d68:	4620      	mov	r0, r4
 8020d6a:	f7ff ff1a 	bl	8020ba2 <w5500_r1>
}
 8020d6e:	2842      	cmp	r0, #66	@ 0x42
 8020d70:	bf14      	ite	ne
 8020d72:	2000      	movne	r0, #0
 8020d74:	2001      	moveq	r0, #1
 8020d76:	bd10      	pop	{r4, pc}

08020d78 <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8020d78:	b508      	push	{r3, lr}
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8020d7a:	222e      	movs	r2, #46	@ 0x2e
 8020d7c:	2100      	movs	r1, #0
 8020d7e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8020d80:	f7ff ff0f 	bl	8020ba2 <w5500_r1>
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
}
 8020d84:	f000 0001 	and.w	r0, r0, #1
 8020d88:	bd08      	pop	{r3, pc}

08020d8a <mg_dns_free>:
static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8020d8a:	b508      	push	{r3, lr}
 8020d8c:	4602      	mov	r2, r0
 8020d8e:	4608      	mov	r0, r1
  LIST_DELETE(struct dns_data, head, d);
 8020d90:	e000      	b.n	8020d94 <mg_dns_free+0xa>
 8020d92:	461a      	mov	r2, r3
 8020d94:	6813      	ldr	r3, [r2, #0]
 8020d96:	4283      	cmp	r3, r0
 8020d98:	d1fb      	bne.n	8020d92 <mg_dns_free+0x8>
 8020d9a:	6803      	ldr	r3, [r0, #0]
 8020d9c:	6013      	str	r3, [r2, #0]
  free(d);
 8020d9e:	f7f9 fa1d 	bl	801a1dc <vPortFree>
}
 8020da2:	bd08      	pop	{r3, pc}

08020da4 <mg_atone>:
static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 8020da4:	b082      	sub	sp, #8
 8020da6:	ab02      	add	r3, sp, #8
 8020da8:	e903 0003 	stmdb	r3, {r0, r1}
  if (str.len > 0) return false;
 8020dac:	b111      	cbz	r1, 8020db4 <mg_atone+0x10>
 8020dae:	2000      	movs	r0, #0
}
 8020db0:	b002      	add	sp, #8
 8020db2:	4770      	bx	lr
  memset(addr->ip, 0, sizeof(addr->ip));
 8020db4:	6011      	str	r1, [r2, #0]
 8020db6:	6051      	str	r1, [r2, #4]
 8020db8:	6091      	str	r1, [r2, #8]
 8020dba:	60d1      	str	r1, [r2, #12]
  addr->is_ip6 = false;
 8020dbc:	74d1      	strb	r1, [r2, #19]
  return true;
 8020dbe:	2001      	movs	r0, #1
 8020dc0:	e7f6      	b.n	8020db0 <mg_atone+0xc>

08020dc2 <urlparse>:
static struct url urlparse(const char *url) {
 8020dc2:	b510      	push	{r4, lr}
 8020dc4:	b088      	sub	sp, #32
 8020dc6:	4604      	mov	r4, r0
  memset(&u, 0, sizeof(u));
 8020dc8:	2200      	movs	r2, #0
 8020dca:	9201      	str	r2, [sp, #4]
 8020dcc:	9202      	str	r2, [sp, #8]
 8020dce:	9203      	str	r2, [sp, #12]
 8020dd0:	9204      	str	r2, [sp, #16]
 8020dd2:	9205      	str	r2, [sp, #20]
 8020dd4:	9206      	str	r2, [sp, #24]
 8020dd6:	9207      	str	r2, [sp, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8020dd8:	e00f      	b.n	8020dfa <urlparse+0x38>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8020dda:	b19a      	cbz	r2, 8020e04 <urlparse+0x42>
 8020ddc:	9804      	ldr	r0, [sp, #16]
 8020dde:	b988      	cbnz	r0, 8020e04 <urlparse+0x42>
 8020de0:	1888      	adds	r0, r1, r2
 8020de2:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8020de6:	282f      	cmp	r0, #47	@ 0x2f
 8020de8:	d10c      	bne.n	8020e04 <urlparse+0x42>
      u.host = i + 1;
 8020dea:	1c53      	adds	r3, r2, #1
 8020dec:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8020dee:	2300      	movs	r3, #0
 8020df0:	9305      	str	r3, [sp, #20]
 8020df2:	e001      	b.n	8020df8 <urlparse+0x36>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8020df4:	2300      	movs	r3, #0
 8020df6:	9305      	str	r3, [sp, #20]
  for (i = 0; url[i] != '\0'; i++) {
 8020df8:	3201      	adds	r2, #1
 8020dfa:	5c8b      	ldrb	r3, [r1, r2]
 8020dfc:	2b00      	cmp	r3, #0
 8020dfe:	d02c      	beq.n	8020e5a <urlparse+0x98>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8020e00:	2b2f      	cmp	r3, #47	@ 0x2f
 8020e02:	d0ea      	beq.n	8020dda <urlparse+0x18>
    } else if (url[i] == ']') {
 8020e04:	2b5d      	cmp	r3, #93	@ 0x5d
 8020e06:	d0f5      	beq.n	8020df4 <urlparse+0x32>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8020e08:	2b3a      	cmp	r3, #58	@ 0x3a
 8020e0a:	d00b      	beq.n	8020e24 <urlparse+0x62>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8020e0c:	2b40      	cmp	r3, #64	@ 0x40
 8020e0e:	d012      	beq.n	8020e36 <urlparse+0x74>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8020e10:	2b2f      	cmp	r3, #47	@ 0x2f
 8020e12:	d1f1      	bne.n	8020df8 <urlparse+0x36>
 8020e14:	9b04      	ldr	r3, [sp, #16]
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d0ee      	beq.n	8020df8 <urlparse+0x36>
 8020e1a:	9b06      	ldr	r3, [sp, #24]
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	d1eb      	bne.n	8020df8 <urlparse+0x36>
      u.uri = i;
 8020e20:	9206      	str	r2, [sp, #24]
 8020e22:	e7e9      	b.n	8020df8 <urlparse+0x36>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8020e24:	9805      	ldr	r0, [sp, #20]
 8020e26:	2800      	cmp	r0, #0
 8020e28:	d1f0      	bne.n	8020e0c <urlparse+0x4a>
 8020e2a:	9806      	ldr	r0, [sp, #24]
 8020e2c:	2800      	cmp	r0, #0
 8020e2e:	d1ed      	bne.n	8020e0c <urlparse+0x4a>
      u.port = i + 1;
 8020e30:	1c53      	adds	r3, r2, #1
 8020e32:	9305      	str	r3, [sp, #20]
 8020e34:	e7e0      	b.n	8020df8 <urlparse+0x36>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8020e36:	9802      	ldr	r0, [sp, #8]
 8020e38:	2800      	cmp	r0, #0
 8020e3a:	d1e9      	bne.n	8020e10 <urlparse+0x4e>
 8020e3c:	9803      	ldr	r0, [sp, #12]
 8020e3e:	2800      	cmp	r0, #0
 8020e40:	d1e6      	bne.n	8020e10 <urlparse+0x4e>
 8020e42:	9806      	ldr	r0, [sp, #24]
 8020e44:	2800      	cmp	r0, #0
 8020e46:	d1e3      	bne.n	8020e10 <urlparse+0x4e>
      u.user = u.host;
 8020e48:	9b04      	ldr	r3, [sp, #16]
 8020e4a:	9302      	str	r3, [sp, #8]
      u.pass = u.port;
 8020e4c:	9b05      	ldr	r3, [sp, #20]
 8020e4e:	9303      	str	r3, [sp, #12]
      u.host = i + 1;
 8020e50:	1c53      	adds	r3, r2, #1
 8020e52:	9304      	str	r3, [sp, #16]
      u.port = 0;
 8020e54:	2300      	movs	r3, #0
 8020e56:	9305      	str	r3, [sp, #20]
 8020e58:	e7ce      	b.n	8020df8 <urlparse+0x36>
  u.end = i;
 8020e5a:	9207      	str	r2, [sp, #28]
  return u;
 8020e5c:	46a4      	mov	ip, r4
 8020e5e:	f10d 0e04 	add.w	lr, sp, #4
 8020e62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8020e66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8020e6a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8020e6e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 8020e72:	4620      	mov	r0, r4
 8020e74:	b008      	add	sp, #32
 8020e76:	bd10      	pop	{r4, pc}

08020e78 <mg_dns_parse_name_depth>:
                                      int depth) {
 8020e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e7c:	b085      	sub	sp, #20
 8020e7e:	4681      	mov	r9, r0
 8020e80:	4688      	mov	r8, r1
 8020e82:	4693      	mov	fp, r2
 8020e84:	469a      	mov	sl, r3
 8020e86:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8020e88:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8020e8a:	b11f      	cbz	r7, 8020e94 <mg_dns_parse_name_depth+0x1c>
 8020e8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e8e:	b90b      	cbnz	r3, 8020e94 <mg_dns_parse_name_depth+0x1c>
 8020e90:	f88a 3000 	strb.w	r3, [sl]
  if (depth > 5) return 0;
 8020e94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e96:	2b05      	cmp	r3, #5
 8020e98:	dc4f      	bgt.n	8020f3a <mg_dns_parse_name_depth+0xc2>
  size_t i = 0;
 8020e9a:	2600      	movs	r6, #0
 8020e9c:	e02f      	b.n	8020efe <mg_dns_parse_name_depth+0x86>
      i++;
 8020e9e:	3601      	adds	r6, #1
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8020ea0:	2f00      	cmp	r7, #0
 8020ea2:	d04b      	beq.n	8020f3c <mg_dns_parse_name_depth+0xc4>
 8020ea4:	3f01      	subs	r7, #1
 8020ea6:	2300      	movs	r3, #0
 8020ea8:	f80a 3007 	strb.w	r3, [sl, r7]
 8020eac:	e046      	b.n	8020f3c <mg_dns_parse_name_depth+0xc4>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8020eae:	0222      	lsls	r2, r4, #8
 8020eb0:	f402 527c 	and.w	r2, r2, #16128	@ 0x3f00
 8020eb4:	f819 3001 	ldrb.w	r3, [r9, r1]
 8020eb8:	431a      	orrs	r2, r3
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8020eba:	1c53      	adds	r3, r2, #1
 8020ebc:	4543      	cmp	r3, r8
 8020ebe:	d203      	bcs.n	8020ec8 <mg_dns_parse_name_depth+0x50>
 8020ec0:	f819 3002 	ldrb.w	r3, [r9, r2]
 8020ec4:	2b3f      	cmp	r3, #63	@ 0x3f
 8020ec6:	d901      	bls.n	8020ecc <mg_dns_parse_name_depth+0x54>
      i += 2;
 8020ec8:	3602      	adds	r6, #2
      break;
 8020eca:	e7e9      	b.n	8020ea0 <mg_dns_parse_name_depth+0x28>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8020ecc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ece:	3301      	adds	r3, #1
 8020ed0:	9302      	str	r3, [sp, #8]
 8020ed2:	9501      	str	r5, [sp, #4]
 8020ed4:	9700      	str	r7, [sp, #0]
 8020ed6:	4653      	mov	r3, sl
 8020ed8:	4641      	mov	r1, r8
 8020eda:	4648      	mov	r0, r9
 8020edc:	f7ff ffcc 	bl	8020e78 <mg_dns_parse_name_depth>
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8020ee0:	2800      	cmp	r0, #0
 8020ee2:	d1f1      	bne.n	8020ec8 <mg_dns_parse_name_depth+0x50>
        return 0;
 8020ee4:	4606      	mov	r6, r0
 8020ee6:	e029      	b.n	8020f3c <mg_dns_parse_name_depth+0xc4>
 8020ee8:	4628      	mov	r0, r5
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8020eea:	1905      	adds	r5, r0, r4
 8020eec:	42bd      	cmp	r5, r7
 8020eee:	d31e      	bcc.n	8020f2e <mg_dns_parse_name_depth+0xb6>
    i += n + 1;
 8020ef0:	4426      	add	r6, r4
 8020ef2:	3601      	adds	r6, #1
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8020ef4:	42bd      	cmp	r5, r7
 8020ef6:	d202      	bcs.n	8020efe <mg_dns_parse_name_depth+0x86>
 8020ef8:	2300      	movs	r3, #0
 8020efa:	f80a 3005 	strb.w	r3, [sl, r5]
  while (ofs + i + 1 < len) {
 8020efe:	eb06 030b 	add.w	r3, r6, fp
 8020f02:	1c59      	adds	r1, r3, #1
 8020f04:	4541      	cmp	r1, r8
 8020f06:	d2cb      	bcs.n	8020ea0 <mg_dns_parse_name_depth+0x28>
    size_t n = s[ofs + i];
 8020f08:	f819 4003 	ldrb.w	r4, [r9, r3]
    if (n == 0) {
 8020f0c:	2c00      	cmp	r4, #0
 8020f0e:	d0c6      	beq.n	8020e9e <mg_dns_parse_name_depth+0x26>
    if (n & 0xc0) {
 8020f10:	2c3f      	cmp	r4, #63	@ 0x3f
 8020f12:	d8cc      	bhi.n	8020eae <mg_dns_parse_name_depth+0x36>
    if (ofs + i + n + 1 >= len) return 0;
 8020f14:	4423      	add	r3, r4
 8020f16:	3301      	adds	r3, #1
 8020f18:	4543      	cmp	r3, r8
 8020f1a:	d213      	bcs.n	8020f44 <mg_dns_parse_name_depth+0xcc>
    if (j > 0) {
 8020f1c:	2d00      	cmp	r5, #0
 8020f1e:	d0e3      	beq.n	8020ee8 <mg_dns_parse_name_depth+0x70>
      if (j < tolen) to[j] = '.';
 8020f20:	42bd      	cmp	r5, r7
 8020f22:	d202      	bcs.n	8020f2a <mg_dns_parse_name_depth+0xb2>
 8020f24:	232e      	movs	r3, #46	@ 0x2e
 8020f26:	f80a 3005 	strb.w	r3, [sl, r5]
      j++;
 8020f2a:	1c68      	adds	r0, r5, #1
 8020f2c:	e7dd      	b.n	8020eea <mg_dns_parse_name_depth+0x72>
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8020f2e:	4622      	mov	r2, r4
 8020f30:	4449      	add	r1, r9
 8020f32:	4450      	add	r0, sl
 8020f34:	f00c fa98 	bl	802d468 <memcpy>
 8020f38:	e7da      	b.n	8020ef0 <mg_dns_parse_name_depth+0x78>
  if (depth > 5) return 0;
 8020f3a:	2600      	movs	r6, #0
}
 8020f3c:	4630      	mov	r0, r6
 8020f3e:	b005      	add	sp, #20
 8020f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ofs + i + n + 1 >= len) return 0;
 8020f44:	2600      	movs	r6, #0
 8020f46:	e7f9      	b.n	8020f3c <mg_dns_parse_name_depth+0xc4>

08020f48 <mg_dns_parse_name>:
                                char *dst, size_t dstlen) {
 8020f48:	b510      	push	{r4, lr}
 8020f4a:	b084      	sub	sp, #16
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8020f4c:	2400      	movs	r4, #0
 8020f4e:	9402      	str	r4, [sp, #8]
 8020f50:	9401      	str	r4, [sp, #4]
 8020f52:	9c06      	ldr	r4, [sp, #24]
 8020f54:	9400      	str	r4, [sp, #0]
 8020f56:	f7ff ff8f 	bl	8020e78 <mg_dns_parse_name_depth>
}
 8020f5a:	b004      	add	sp, #16
 8020f5c:	bd10      	pop	{r4, pc}
	...

08020f60 <mg_sha1_transform>:
                              const unsigned char *buffer) {
 8020f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f64:	b09f      	sub	sp, #124	@ 0x7c
 8020f66:	900d      	str	r0, [sp, #52]	@ 0x34
  memcpy(block, buffer, 64);
 8020f68:	460c      	mov	r4, r1
 8020f6a:	af0e      	add	r7, sp, #56	@ 0x38
 8020f6c:	f101 0540 	add.w	r5, r1, #64	@ 0x40
 8020f70:	463e      	mov	r6, r7
 8020f72:	6820      	ldr	r0, [r4, #0]
 8020f74:	6861      	ldr	r1, [r4, #4]
 8020f76:	68a2      	ldr	r2, [r4, #8]
 8020f78:	68e3      	ldr	r3, [r4, #12]
 8020f7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8020f7c:	3410      	adds	r4, #16
 8020f7e:	4637      	mov	r7, r6
 8020f80:	42ac      	cmp	r4, r5
 8020f82:	d1f5      	bne.n	8020f70 <mg_sha1_transform+0x10>
  a = state[0];
 8020f84:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020f86:	6805      	ldr	r5, [r0, #0]
  b = state[1];
 8020f88:	6847      	ldr	r7, [r0, #4]
  c = state[2];
 8020f8a:	6884      	ldr	r4, [r0, #8]
  d = state[3];
 8020f8c:	f8d0 800c 	ldr.w	r8, [r0, #12]
  e = state[4];
 8020f90:	f8d0 9010 	ldr.w	r9, [r0, #16]
  R0(a, b, c, d, e, 0);
 8020f94:	ea84 0608 	eor.w	r6, r4, r8
 8020f98:	403e      	ands	r6, r7
 8020f9a:	ea86 0608 	eor.w	r6, r6, r8
 8020f9e:	2100      	movs	r1, #0
 8020fa0:	a80e      	add	r0, sp, #56	@ 0x38
 8020fa2:	f7ff fd7d 	bl	8020aa0 <blk0>
 8020fa6:	1833      	adds	r3, r6, r0
 8020fa8:	eb03 63f5 	add.w	r3, r3, r5, ror #27
 8020fac:	4ee4      	ldr	r6, [pc, #912]	@ (8021340 <mg_sha1_transform+0x3e0>)
 8020fae:	4433      	add	r3, r6
 8020fb0:	4499      	add	r9, r3
 8020fb2:	ea4f 0ab7 	mov.w	sl, r7, ror #2
  R0(e, a, b, c, d, 1);
 8020fb6:	ea84 07b7 	eor.w	r7, r4, r7, ror #2
 8020fba:	402f      	ands	r7, r5
 8020fbc:	4067      	eors	r7, r4
 8020fbe:	2101      	movs	r1, #1
 8020fc0:	a80e      	add	r0, sp, #56	@ 0x38
 8020fc2:	f7ff fd6d 	bl	8020aa0 <blk0>
 8020fc6:	4407      	add	r7, r0
 8020fc8:	eb07 67f9 	add.w	r7, r7, r9, ror #27
 8020fcc:	4437      	add	r7, r6
 8020fce:	4447      	add	r7, r8
 8020fd0:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(d, e, a, b, c, 2);
 8020fd4:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8020fd8:	ea05 0509 	and.w	r5, r5, r9
 8020fdc:	ea85 050a 	eor.w	r5, r5, sl
 8020fe0:	2102      	movs	r1, #2
 8020fe2:	a80e      	add	r0, sp, #56	@ 0x38
 8020fe4:	f7ff fd5c 	bl	8020aa0 <blk0>
 8020fe8:	4405      	add	r5, r0
 8020fea:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 8020fee:	4435      	add	r5, r6
 8020ff0:	442c      	add	r4, r5
 8020ff2:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(c, d, e, a, b, 3);
 8020ff6:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 8020ffa:	ea09 0907 	and.w	r9, r9, r7
 8020ffe:	ea89 0908 	eor.w	r9, r9, r8
 8021002:	2103      	movs	r1, #3
 8021004:	a80e      	add	r0, sp, #56	@ 0x38
 8021006:	f7ff fd4b 	bl	8020aa0 <blk0>
 802100a:	4481      	add	r9, r0
 802100c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 8021010:	44b1      	add	r9, r6
 8021012:	44ca      	add	sl, r9
 8021014:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(b, c, d, e, a, 4);
 8021018:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 802101c:	4027      	ands	r7, r4
 802101e:	406f      	eors	r7, r5
 8021020:	2104      	movs	r1, #4
 8021022:	a80e      	add	r0, sp, #56	@ 0x38
 8021024:	f7ff fd3c 	bl	8020aa0 <blk0>
 8021028:	4407      	add	r7, r0
 802102a:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 802102e:	4437      	add	r7, r6
 8021030:	44b8      	add	r8, r7
 8021032:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(a, b, c, d, e, 5);
 8021036:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 802103a:	ea04 040a 	and.w	r4, r4, sl
 802103e:	ea84 0409 	eor.w	r4, r4, r9
 8021042:	2105      	movs	r1, #5
 8021044:	a80e      	add	r0, sp, #56	@ 0x38
 8021046:	f7ff fd2b 	bl	8020aa0 <blk0>
 802104a:	4404      	add	r4, r0
 802104c:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8021050:	4434      	add	r4, r6
 8021052:	4425      	add	r5, r4
 8021054:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(e, a, b, c, d, 6);
 8021058:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 802105c:	ea0a 0a08 	and.w	sl, sl, r8
 8021060:	ea8a 0a07 	eor.w	sl, sl, r7
 8021064:	2106      	movs	r1, #6
 8021066:	a80e      	add	r0, sp, #56	@ 0x38
 8021068:	f7ff fd1a 	bl	8020aa0 <blk0>
 802106c:	4482      	add	sl, r0
 802106e:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 8021072:	44b2      	add	sl, r6
 8021074:	44d1      	add	r9, sl
 8021076:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(d, e, a, b, c, 7);
 802107a:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 802107e:	ea08 0805 	and.w	r8, r8, r5
 8021082:	ea88 0804 	eor.w	r8, r8, r4
 8021086:	2107      	movs	r1, #7
 8021088:	a80e      	add	r0, sp, #56	@ 0x38
 802108a:	f7ff fd09 	bl	8020aa0 <blk0>
 802108e:	4480      	add	r8, r0
 8021090:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 8021094:	44b0      	add	r8, r6
 8021096:	4447      	add	r7, r8
 8021098:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(c, d, e, a, b, 8);
 802109c:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 80210a0:	ea05 0509 	and.w	r5, r5, r9
 80210a4:	ea85 050a 	eor.w	r5, r5, sl
 80210a8:	2108      	movs	r1, #8
 80210aa:	a80e      	add	r0, sp, #56	@ 0x38
 80210ac:	f7ff fcf8 	bl	8020aa0 <blk0>
 80210b0:	4405      	add	r5, r0
 80210b2:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 80210b6:	4435      	add	r5, r6
 80210b8:	442c      	add	r4, r5
 80210ba:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(b, c, d, e, a, 9);
 80210be:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 80210c2:	ea09 0907 	and.w	r9, r9, r7
 80210c6:	ea89 0908 	eor.w	r9, r9, r8
 80210ca:	2109      	movs	r1, #9
 80210cc:	a80e      	add	r0, sp, #56	@ 0x38
 80210ce:	f7ff fce7 	bl	8020aa0 <blk0>
 80210d2:	4481      	add	r9, r0
 80210d4:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80210d8:	44b1      	add	r9, r6
 80210da:	44ca      	add	sl, r9
 80210dc:	ea4f 09b7 	mov.w	r9, r7, ror #2
  R0(a, b, c, d, e, 10);
 80210e0:	ea85 07b7 	eor.w	r7, r5, r7, ror #2
 80210e4:	4027      	ands	r7, r4
 80210e6:	406f      	eors	r7, r5
 80210e8:	210a      	movs	r1, #10
 80210ea:	a80e      	add	r0, sp, #56	@ 0x38
 80210ec:	f7ff fcd8 	bl	8020aa0 <blk0>
 80210f0:	4407      	add	r7, r0
 80210f2:	eb07 67fa 	add.w	r7, r7, sl, ror #27
 80210f6:	4437      	add	r7, r6
 80210f8:	44b8      	add	r8, r7
 80210fa:	ea4f 07b4 	mov.w	r7, r4, ror #2
  R0(e, a, b, c, d, 11);
 80210fe:	ea89 04b4 	eor.w	r4, r9, r4, ror #2
 8021102:	ea04 040a 	and.w	r4, r4, sl
 8021106:	ea84 0409 	eor.w	r4, r4, r9
 802110a:	210b      	movs	r1, #11
 802110c:	a80e      	add	r0, sp, #56	@ 0x38
 802110e:	f7ff fcc7 	bl	8020aa0 <blk0>
 8021112:	4404      	add	r4, r0
 8021114:	eb04 64f8 	add.w	r4, r4, r8, ror #27
 8021118:	4434      	add	r4, r6
 802111a:	4425      	add	r5, r4
 802111c:	ea4f 04ba 	mov.w	r4, sl, ror #2
  R0(d, e, a, b, c, 12);
 8021120:	ea87 0aba 	eor.w	sl, r7, sl, ror #2
 8021124:	ea0a 0a08 	and.w	sl, sl, r8
 8021128:	ea8a 0a07 	eor.w	sl, sl, r7
 802112c:	210c      	movs	r1, #12
 802112e:	a80e      	add	r0, sp, #56	@ 0x38
 8021130:	f7ff fcb6 	bl	8020aa0 <blk0>
 8021134:	4482      	add	sl, r0
 8021136:	eb0a 6af5 	add.w	sl, sl, r5, ror #27
 802113a:	44b2      	add	sl, r6
 802113c:	44d1      	add	r9, sl
 802113e:	ea4f 0ab8 	mov.w	sl, r8, ror #2
  R0(c, d, e, a, b, 13);
 8021142:	ea84 08b8 	eor.w	r8, r4, r8, ror #2
 8021146:	ea08 0805 	and.w	r8, r8, r5
 802114a:	ea88 0804 	eor.w	r8, r8, r4
 802114e:	210d      	movs	r1, #13
 8021150:	a80e      	add	r0, sp, #56	@ 0x38
 8021152:	f7ff fca5 	bl	8020aa0 <blk0>
 8021156:	4480      	add	r8, r0
 8021158:	eb08 68f9 	add.w	r8, r8, r9, ror #27
 802115c:	44b0      	add	r8, r6
 802115e:	4447      	add	r7, r8
 8021160:	ea4f 08b5 	mov.w	r8, r5, ror #2
  R0(b, c, d, e, a, 14);
 8021164:	ea8a 05b5 	eor.w	r5, sl, r5, ror #2
 8021168:	ea05 0509 	and.w	r5, r5, r9
 802116c:	ea85 050a 	eor.w	r5, r5, sl
 8021170:	210e      	movs	r1, #14
 8021172:	a80e      	add	r0, sp, #56	@ 0x38
 8021174:	f7ff fc94 	bl	8020aa0 <blk0>
 8021178:	4405      	add	r5, r0
 802117a:	eb05 65f7 	add.w	r5, r5, r7, ror #27
 802117e:	4435      	add	r5, r6
 8021180:	442c      	add	r4, r5
 8021182:	ea4f 05b9 	mov.w	r5, r9, ror #2
  R0(a, b, c, d, e, 15);
 8021186:	ea88 09b9 	eor.w	r9, r8, r9, ror #2
 802118a:	ea09 0907 	and.w	r9, r9, r7
 802118e:	ea89 0908 	eor.w	r9, r9, r8
 8021192:	210f      	movs	r1, #15
 8021194:	a80e      	add	r0, sp, #56	@ 0x38
 8021196:	f7ff fc83 	bl	8020aa0 <blk0>
 802119a:	4481      	add	r9, r0
 802119c:	eb09 69f4 	add.w	r9, r9, r4, ror #27
 80211a0:	44b1      	add	r9, r6
 80211a2:	eb0a 0109 	add.w	r1, sl, r9
  R1(e, a, b, c, d, 16);
 80211a6:	ea85 03b7 	eor.w	r3, r5, r7, ror #2
 80211aa:	4023      	ands	r3, r4
 80211ac:	ea83 0205 	eor.w	r2, r3, r5
 80211b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80211b2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80211b4:	4043      	eors	r3, r0
 80211b6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80211b8:	ea83 0c00 	eor.w	ip, r3, r0
 80211bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80211be:	ea8c 0303 	eor.w	r3, ip, r3
 80211c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80211c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80211c8:	9300      	str	r3, [sp, #0]
 80211ca:	18d3      	adds	r3, r2, r3
 80211cc:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80211d0:	4433      	add	r3, r6
 80211d2:	eb08 0203 	add.w	r2, r8, r3
 80211d6:	ea4f 08b4 	mov.w	r8, r4, ror #2
  R1(d, e, a, b, c, 17);
 80211da:	ea88 0cb7 	eor.w	ip, r8, r7, ror #2
 80211de:	ea0c 0c01 	and.w	ip, ip, r1
 80211e2:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80211e6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80211e8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80211ea:	ea83 0e04 	eor.w	lr, r3, r4
 80211ee:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 80211f2:	ea8e 0e09 	eor.w	lr, lr, r9
 80211f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80211f8:	ea8e 0e03 	eor.w	lr, lr, r3
 80211fc:	ea4f 74fe 	mov.w	r4, lr, ror #31
 8021200:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021202:	9401      	str	r4, [sp, #4]
 8021204:	44a4      	add	ip, r4
 8021206:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
 802120a:	44b4      	add	ip, r6
 802120c:	44ac      	add	ip, r5
  R1(c, d, e, a, b, 18);
 802120e:	ea88 05b1 	eor.w	r5, r8, r1, ror #2
 8021212:	4015      	ands	r5, r2
 8021214:	ea85 0508 	eor.w	r5, r5, r8
 8021218:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 802121a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802121c:	ea84 0e03 	eor.w	lr, r4, r3
 8021220:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021222:	ea8e 0e03 	eor.w	lr, lr, r3
 8021226:	ea80 000e 	eor.w	r0, r0, lr
 802122a:	ea4f 70f0 	mov.w	r0, r0, ror #31
 802122e:	9010      	str	r0, [sp, #64]	@ 0x40
 8021230:	9002      	str	r0, [sp, #8]
 8021232:	4405      	add	r5, r0
 8021234:	eb05 65fc 	add.w	r5, r5, ip, ror #27
 8021238:	4435      	add	r5, r6
 802123a:	eb05 05b7 	add.w	r5, r5, r7, ror #2
 802123e:	ea4f 02b2 	mov.w	r2, r2, ror #2
  R1(b, c, d, e, a, 19);
 8021242:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8021246:	ea00 000c 	and.w	r0, r0, ip
 802124a:	ea80 00b1 	eor.w	r0, r0, r1, ror #2
 802124e:	9f00      	ldr	r7, [sp, #0]
 8021250:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8021252:	4067      	eors	r7, r4
 8021254:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8021258:	ea87 070e 	eor.w	r7, r7, lr
 802125c:	ea89 0907 	eor.w	r9, r9, r7
 8021260:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8021264:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8021268:	4448      	add	r0, r9
 802126a:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 802126e:	4430      	add	r0, r6
 8021270:	eb08 0400 	add.w	r4, r8, r0
  R2(a, b, c, d, e, 20);
 8021274:	ea85 00bc 	eor.w	r0, r5, ip, ror #2
 8021278:	4050      	eors	r0, r2
 802127a:	9e01      	ldr	r6, [sp, #4]
 802127c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 802127e:	ea86 0807 	eor.w	r8, r6, r7
 8021282:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8021286:	ea88 080a 	eor.w	r8, r8, sl
 802128a:	ea83 0808 	eor.w	r8, r3, r8
 802128e:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8021292:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021296:	4440      	add	r0, r8
 8021298:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 802129c:	4b29      	ldr	r3, [pc, #164]	@ (8021344 <mg_sha1_transform+0x3e4>)
 802129e:	4418      	add	r0, r3
 80212a0:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(e, a, b, c, d, 21);
 80212a4:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 80212a8:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 80212ac:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 80212ae:	9f02      	ldr	r7, [sp, #8]
 80212b0:	4077      	eors	r7, r6
 80212b2:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80212b4:	4077      	eors	r7, r6
 80212b6:	ea8e 0707 	eor.w	r7, lr, r7
 80212ba:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80212be:	9713      	str	r7, [sp, #76]	@ 0x4c
 80212c0:	9703      	str	r7, [sp, #12]
 80212c2:	4439      	add	r1, r7
 80212c4:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80212c8:	4419      	add	r1, r3
 80212ca:	440a      	add	r2, r1
  R2(d, e, a, b, c, 22);
 80212cc:	ea80 01b4 	eor.w	r1, r0, r4, ror #2
 80212d0:	ea81 01b5 	eor.w	r1, r1, r5, ror #2
 80212d4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80212d6:	ea87 0e09 	eor.w	lr, r7, r9
 80212da:	9f16      	ldr	r7, [sp, #88]	@ 0x58
 80212dc:	ea87 0e0e 	eor.w	lr, r7, lr
 80212e0:	ea8a 0e0e 	eor.w	lr, sl, lr
 80212e4:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80212e8:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 80212ec:	4471      	add	r1, lr
 80212ee:	eb01 61f2 	add.w	r1, r1, r2, ror #27
 80212f2:	4419      	add	r1, r3
 80212f4:	eb01 01bc 	add.w	r1, r1, ip, ror #2
  R2(c, d, e, a, b, 23);
 80212f8:	ea82 0bb0 	eor.w	fp, r2, r0, ror #2
 80212fc:	ea8b 0bb4 	eor.w	fp, fp, r4, ror #2
 8021300:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021302:	ea87 0c08 	eor.w	ip, r7, r8
 8021306:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021308:	ea87 0c0c 	eor.w	ip, r7, ip
 802130c:	ea86 0c0c 	eor.w	ip, r6, ip
 8021310:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8021314:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021318:	44e3      	add	fp, ip
 802131a:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
 802131e:	449b      	add	fp, r3
 8021320:	eb0b 0bb5 	add.w	fp, fp, r5, ror #2
  R2(b, c, d, e, a, 24);
 8021324:	ea81 0ab2 	eor.w	sl, r1, r2, ror #2
 8021328:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
 802132c:	9d00      	ldr	r5, [sp, #0]
 802132e:	9e03      	ldr	r6, [sp, #12]
 8021330:	406e      	eors	r6, r5
 8021332:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8021334:	406e      	eors	r6, r5
 8021336:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8021338:	406e      	eors	r6, r5
 802133a:	ea4f 77f6 	mov.w	r7, r6, ror #31
 802133e:	e003      	b.n	8021348 <mg_sha1_transform+0x3e8>
 8021340:	5a827999 	.word	0x5a827999
 8021344:	6ed9eba1 	.word	0x6ed9eba1
 8021348:	9716      	str	r7, [sp, #88]	@ 0x58
 802134a:	9704      	str	r7, [sp, #16]
 802134c:	44ba      	add	sl, r7
 802134e:	eb0a 6afb 	add.w	sl, sl, fp, ror #27
 8021352:	449a      	add	sl, r3
 8021354:	eb0a 0ab4 	add.w	sl, sl, r4, ror #2
  R2(a, b, c, d, e, 25);
 8021358:	ea8b 05b1 	eor.w	r5, fp, r1, ror #2
 802135c:	ea85 05b2 	eor.w	r5, r5, r2, ror #2
 8021360:	9e01      	ldr	r6, [sp, #4]
 8021362:	ea86 040e 	eor.w	r4, r6, lr
 8021366:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8021368:	407c      	eors	r4, r7
 802136a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 802136c:	407c      	eors	r4, r7
 802136e:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021372:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021374:	9405      	str	r4, [sp, #20]
 8021376:	4425      	add	r5, r4
 8021378:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 802137c:	441d      	add	r5, r3
 802137e:	eb05 05b0 	add.w	r5, r5, r0, ror #2
  R2(e, a, b, c, d, 26);
 8021382:	ea8a 04bb 	eor.w	r4, sl, fp, ror #2
 8021386:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 802138a:	9e02      	ldr	r6, [sp, #8]
 802138c:	ea86 000c 	eor.w	r0, r6, ip
 8021390:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8021392:	4078      	eors	r0, r7
 8021394:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021396:	4078      	eors	r0, r7
 8021398:	ea4f 70f0 	mov.w	r0, r0, ror #31
 802139c:	4606      	mov	r6, r0
 802139e:	9018      	str	r0, [sp, #96]	@ 0x60
 80213a0:	4404      	add	r4, r0
 80213a2:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80213a6:	441c      	add	r4, r3
 80213a8:	eb04 04b2 	add.w	r4, r4, r2, ror #2
  R2(d, e, a, b, c, 27);
 80213ac:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 80213b0:	ea80 00bb 	eor.w	r0, r0, fp, ror #2
 80213b4:	9f04      	ldr	r7, [sp, #16]
 80213b6:	ea89 0207 	eor.w	r2, r9, r7
 80213ba:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 80213bc:	407a      	eors	r2, r7
 80213be:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80213c0:	407a      	eors	r2, r7
 80213c2:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80213c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80213c8:	9206      	str	r2, [sp, #24]
 80213ca:	4410      	add	r0, r2
 80213cc:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80213d0:	4418      	add	r0, r3
 80213d2:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(c, d, e, a, b, 28);
 80213d6:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 80213da:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 80213de:	9a05      	ldr	r2, [sp, #20]
 80213e0:	ea88 0202 	eor.w	r2, r8, r2
 80213e4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80213e6:	407a      	eors	r2, r7
 80213e8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80213ea:	407a      	eors	r2, r7
 80213ec:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80213f0:	921a      	str	r2, [sp, #104]	@ 0x68
 80213f2:	9207      	str	r2, [sp, #28]
 80213f4:	4411      	add	r1, r2
 80213f6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80213fa:	4419      	add	r1, r3
 80213fc:	eb01 01bb 	add.w	r1, r1, fp, ror #2
  R2(b, c, d, e, a, 29);
 8021400:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021404:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021408:	960b      	str	r6, [sp, #44]	@ 0x2c
 802140a:	9f03      	ldr	r7, [sp, #12]
 802140c:	ea87 0b06 	eor.w	fp, r7, r6
 8021410:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8021412:	ea87 0b0b 	eor.w	fp, r7, fp
 8021416:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8021418:	ea87 0b0b 	eor.w	fp, r7, fp
 802141c:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021420:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
 8021424:	f8cd b020 	str.w	fp, [sp, #32]
 8021428:	445a      	add	r2, fp
 802142a:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802142e:	441a      	add	r2, r3
 8021430:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(a, b, c, d, e, 30);
 8021434:	ea81 0ab0 	eor.w	sl, r1, r0, ror #2
 8021438:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
 802143c:	9e06      	ldr	r6, [sp, #24]
 802143e:	ea8e 0b06 	eor.w	fp, lr, r6
 8021442:	9e00      	ldr	r6, [sp, #0]
 8021444:	ea86 0b0b 	eor.w	fp, r6, fp
 8021448:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 802144a:	ea87 0b0b 	eor.w	fp, r7, fp
 802144e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021452:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8021456:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 802145a:	44da      	add	sl, fp
 802145c:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8021460:	449a      	add	sl, r3
 8021462:	eb0a 0ab5 	add.w	sl, sl, r5, ror #2
  R2(e, a, b, c, d, 31);
 8021466:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 802146a:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 802146e:	9e07      	ldr	r6, [sp, #28]
 8021470:	ea8c 0b06 	eor.w	fp, ip, r6
 8021474:	9e01      	ldr	r6, [sp, #4]
 8021476:	ea86 0b0b 	eor.w	fp, r6, fp
 802147a:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802147c:	ea87 0b0b 	eor.w	fp, r7, fp
 8021480:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021484:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
 8021488:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 802148c:	445d      	add	r5, fp
 802148e:	eb05 65fa 	add.w	r5, r5, sl, ror #27
 8021492:	441d      	add	r5, r3
 8021494:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(d, e, a, b, c, 32);
 8021498:	ea8a 04b2 	eor.w	r4, sl, r2, ror #2
 802149c:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80214a0:	9e08      	ldr	r6, [sp, #32]
 80214a2:	9f04      	ldr	r7, [sp, #16]
 80214a4:	ea87 0b06 	eor.w	fp, r7, r6
 80214a8:	9e02      	ldr	r6, [sp, #8]
 80214aa:	ea86 0b0b 	eor.w	fp, r6, fp
 80214ae:	9e00      	ldr	r6, [sp, #0]
 80214b0:	ea86 0b0b 	eor.w	fp, r6, fp
 80214b4:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80214b8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80214bc:	f8cd b000 	str.w	fp, [sp]
 80214c0:	445c      	add	r4, fp
 80214c2:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80214c6:	441c      	add	r4, r3
 80214c8:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(c, d, e, a, b, 33);
 80214cc:	ea85 00ba 	eor.w	r0, r5, sl, ror #2
 80214d0:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 80214d4:	9e05      	ldr	r6, [sp, #20]
 80214d6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80214d8:	ea86 0b07 	eor.w	fp, r6, r7
 80214dc:	ea89 0b0b 	eor.w	fp, r9, fp
 80214e0:	9e01      	ldr	r6, [sp, #4]
 80214e2:	ea86 0b0b 	eor.w	fp, r6, fp
 80214e6:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80214ea:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 80214ee:	f8cd b004 	str.w	fp, [sp, #4]
 80214f2:	4458      	add	r0, fp
 80214f4:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 80214f8:	4418      	add	r0, r3
 80214fa:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R2(b, c, d, e, a, 34);
 80214fe:	ea84 01b5 	eor.w	r1, r4, r5, ror #2
 8021502:	ea81 01ba 	eor.w	r1, r1, sl, ror #2
 8021506:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021508:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802150a:	ea86 0b07 	eor.w	fp, r6, r7
 802150e:	ea88 0b0b 	eor.w	fp, r8, fp
 8021512:	9e02      	ldr	r6, [sp, #8]
 8021514:	ea86 0b0b 	eor.w	fp, r6, fp
 8021518:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 802151c:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8021520:	f8cd b008 	str.w	fp, [sp, #8]
 8021524:	4459      	add	r1, fp
 8021526:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 802152a:	4419      	add	r1, r3
 802152c:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R2(a, b, c, d, e, 35);
 8021530:	ea80 02b4 	eor.w	r2, r0, r4, ror #2
 8021534:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
 8021538:	9e06      	ldr	r6, [sp, #24]
 802153a:	9f00      	ldr	r7, [sp, #0]
 802153c:	ea86 0b07 	eor.w	fp, r6, r7
 8021540:	9e03      	ldr	r6, [sp, #12]
 8021542:	ea86 0b0b 	eor.w	fp, r6, fp
 8021546:	ea89 090b 	eor.w	r9, r9, fp
 802154a:	ea4f 7bf9 	mov.w	fp, r9, ror #31
 802154e:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8021552:	445a      	add	r2, fp
 8021554:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021558:	441a      	add	r2, r3
 802155a:	eb02 02ba 	add.w	r2, r2, sl, ror #2
  R2(e, a, b, c, d, 36);
 802155e:	ea81 09b0 	eor.w	r9, r1, r0, ror #2
 8021562:	ea89 09b4 	eor.w	r9, r9, r4, ror #2
 8021566:	9e07      	ldr	r6, [sp, #28]
 8021568:	9f01      	ldr	r7, [sp, #4]
 802156a:	ea86 0a07 	eor.w	sl, r6, r7
 802156e:	ea8e 0a0a 	eor.w	sl, lr, sl
 8021572:	ea88 080a 	eor.w	r8, r8, sl
 8021576:	ea4f 7af8 	mov.w	sl, r8, ror #31
 802157a:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
 802157e:	44d1      	add	r9, sl
 8021580:	eb09 69f2 	add.w	r9, r9, r2, ror #27
 8021584:	4499      	add	r9, r3
 8021586:	eb09 08b5 	add.w	r8, r9, r5, ror #2
  R2(d, e, a, b, c, 37);
 802158a:	ea82 05b1 	eor.w	r5, r2, r1, ror #2
 802158e:	ea85 05b0 	eor.w	r5, r5, r0, ror #2
 8021592:	9e08      	ldr	r6, [sp, #32]
 8021594:	9f02      	ldr	r7, [sp, #8]
 8021596:	ea86 0907 	eor.w	r9, r6, r7
 802159a:	ea8c 0909 	eor.w	r9, ip, r9
 802159e:	9e03      	ldr	r6, [sp, #12]
 80215a0:	ea86 0709 	eor.w	r7, r6, r9
 80215a4:	ea4f 79f7 	mov.w	r9, r7, ror #31
 80215a8:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 80215ac:	444d      	add	r5, r9
 80215ae:	eb05 65f8 	add.w	r5, r5, r8, ror #27
 80215b2:	441d      	add	r5, r3
 80215b4:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R2(c, d, e, a, b, 38);
 80215b8:	ea88 04b2 	eor.w	r4, r8, r2, ror #2
 80215bc:	ea84 04b1 	eor.w	r4, r4, r1, ror #2
 80215c0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80215c2:	ea87 070b 	eor.w	r7, r7, fp
 80215c6:	9e04      	ldr	r6, [sp, #16]
 80215c8:	4077      	eors	r7, r6
 80215ca:	ea8e 0e07 	eor.w	lr, lr, r7
 80215ce:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80215d2:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
 80215d6:	4474      	add	r4, lr
 80215d8:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80215dc:	441c      	add	r4, r3
 80215de:	eb04 04b0 	add.w	r4, r4, r0, ror #2
  R2(b, c, d, e, a, 39);
 80215e2:	ea85 00b8 	eor.w	r0, r5, r8, ror #2
 80215e6:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 80215ea:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80215ec:	ea87 070a 	eor.w	r7, r7, sl
 80215f0:	9e05      	ldr	r6, [sp, #20]
 80215f2:	4077      	eors	r7, r6
 80215f4:	ea8c 0c07 	eor.w	ip, ip, r7
 80215f8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80215fc:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8021600:	f8cd c00c 	str.w	ip, [sp, #12]
 8021604:	4460      	add	r0, ip
 8021606:	eb00 60f4 	add.w	r0, r0, r4, ror #27
 802160a:	4418      	add	r0, r3
 802160c:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(a, b, c, d, e, 40);
 8021610:	ea44 01b5 	orr.w	r1, r4, r5, ror #2
 8021614:	ea01 01b8 	and.w	r1, r1, r8, ror #2
 8021618:	ea04 03b5 	and.w	r3, r4, r5, ror #2
 802161c:	4319      	orrs	r1, r3
 802161e:	9b00      	ldr	r3, [sp, #0]
 8021620:	ea83 0309 	eor.w	r3, r3, r9
 8021624:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021626:	4073      	eors	r3, r6
 8021628:	9e04      	ldr	r6, [sp, #16]
 802162a:	405e      	eors	r6, r3
 802162c:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021630:	9316      	str	r3, [sp, #88]	@ 0x58
 8021632:	9304      	str	r3, [sp, #16]
 8021634:	4419      	add	r1, r3
 8021636:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 802163a:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 802163e:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021642:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021646:	311c      	adds	r1, #28
 8021648:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(e, a, b, c, d, 41);
 802164c:	ea40 02b4 	orr.w	r2, r0, r4, ror #2
 8021650:	ea02 02b5 	and.w	r2, r2, r5, ror #2
 8021654:	ea00 06b4 	and.w	r6, r0, r4, ror #2
 8021658:	4332      	orrs	r2, r6
 802165a:	9b01      	ldr	r3, [sp, #4]
 802165c:	ea83 060e 	eor.w	r6, r3, lr
 8021660:	9b06      	ldr	r3, [sp, #24]
 8021662:	405e      	eors	r6, r3
 8021664:	9f05      	ldr	r7, [sp, #20]
 8021666:	407e      	eors	r6, r7
 8021668:	ea4f 77f6 	mov.w	r7, r6, ror #31
 802166c:	9717      	str	r7, [sp, #92]	@ 0x5c
 802166e:	9705      	str	r7, [sp, #20]
 8021670:	443a      	add	r2, r7
 8021672:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021676:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802167a:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 802167e:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021682:	321c      	adds	r2, #28
 8021684:	eb02 02b8 	add.w	r2, r2, r8, ror #2
  R3(d, e, a, b, c, 42);
 8021688:	ea41 06b0 	orr.w	r6, r1, r0, ror #2
 802168c:	ea06 06b4 	and.w	r6, r6, r4, ror #2
 8021690:	ea01 07b0 	and.w	r7, r1, r0, ror #2
 8021694:	433e      	orrs	r6, r7
 8021696:	9f02      	ldr	r7, [sp, #8]
 8021698:	4663      	mov	r3, ip
 802169a:	405f      	eors	r7, r3
 802169c:	9b07      	ldr	r3, [sp, #28]
 802169e:	405f      	eors	r7, r3
 80216a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80216a2:	405f      	eors	r7, r3
 80216a4:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80216a8:	9718      	str	r7, [sp, #96]	@ 0x60
 80216aa:	970b      	str	r7, [sp, #44]	@ 0x2c
 80216ac:	443e      	add	r6, r7
 80216ae:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 80216b2:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 80216b6:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 80216ba:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80216be:	361c      	adds	r6, #28
 80216c0:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R3(c, d, e, a, b, 43);
 80216c4:	ea42 07b1 	orr.w	r7, r2, r1, ror #2
 80216c8:	ea07 07b0 	and.w	r7, r7, r0, ror #2
 80216cc:	ea02 05b1 	and.w	r5, r2, r1, ror #2
 80216d0:	432f      	orrs	r7, r5
 80216d2:	9d04      	ldr	r5, [sp, #16]
 80216d4:	ea8b 0505 	eor.w	r5, fp, r5
 80216d8:	9b08      	ldr	r3, [sp, #32]
 80216da:	405d      	eors	r5, r3
 80216dc:	9b06      	ldr	r3, [sp, #24]
 80216de:	405d      	eors	r5, r3
 80216e0:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80216e4:	9519      	str	r5, [sp, #100]	@ 0x64
 80216e6:	9506      	str	r5, [sp, #24]
 80216e8:	442f      	add	r7, r5
 80216ea:	eb07 67f6 	add.w	r7, r7, r6, ror #27
 80216ee:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 80216f2:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 80216f6:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 80216fa:	371c      	adds	r7, #28
 80216fc:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R3(b, c, d, e, a, 44);
 8021700:	ea46 0cb2 	orr.w	ip, r6, r2, ror #2
 8021704:	ea0c 0cb1 	and.w	ip, ip, r1, ror #2
 8021708:	ea06 04b2 	and.w	r4, r6, r2, ror #2
 802170c:	ea4c 0c04 	orr.w	ip, ip, r4
 8021710:	9c05      	ldr	r4, [sp, #20]
 8021712:	ea8a 0404 	eor.w	r4, sl, r4
 8021716:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021718:	406c      	eors	r4, r5
 802171a:	9b07      	ldr	r3, [sp, #28]
 802171c:	405c      	eors	r4, r3
 802171e:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021722:	941a      	str	r4, [sp, #104]	@ 0x68
 8021724:	9407      	str	r4, [sp, #28]
 8021726:	44a4      	add	ip, r4
 8021728:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
 802172c:	f10c 4c0f 	add.w	ip, ip, #2399141888	@ 0x8f000000
 8021730:	f50c 1cdd 	add.w	ip, ip, #1810432	@ 0x1ba000
 8021734:	f50c 5ce6 	add.w	ip, ip, #7360	@ 0x1cc0
 8021738:	f10c 0c1c 	add.w	ip, ip, #28
 802173c:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R3(a, b, c, d, e, 45);
 8021740:	ea47 00b6 	orr.w	r0, r7, r6, ror #2
 8021744:	ea00 00b2 	and.w	r0, r0, r2, ror #2
 8021748:	ea07 04b6 	and.w	r4, r7, r6, ror #2
 802174c:	4320      	orrs	r0, r4
 802174e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021750:	ea89 0404 	eor.w	r4, r9, r4
 8021754:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021756:	406c      	eors	r4, r5
 8021758:	9b08      	ldr	r3, [sp, #32]
 802175a:	405c      	eors	r4, r3
 802175c:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021760:	941b      	str	r4, [sp, #108]	@ 0x6c
 8021762:	9408      	str	r4, [sp, #32]
 8021764:	4420      	add	r0, r4
 8021766:	eb00 60fc 	add.w	r0, r0, ip, ror #27
 802176a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 802176e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8021772:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8021776:	301c      	adds	r0, #28
 8021778:	eb00 00b1 	add.w	r0, r0, r1, ror #2
  R3(e, a, b, c, d, 46);
 802177c:	ea4c 05b7 	orr.w	r5, ip, r7, ror #2
 8021780:	ea05 05b6 	and.w	r5, r5, r6, ror #2
 8021784:	ea0c 01b7 	and.w	r1, ip, r7, ror #2
 8021788:	430d      	orrs	r5, r1
 802178a:	9906      	ldr	r1, [sp, #24]
 802178c:	ea8e 0101 	eor.w	r1, lr, r1
 8021790:	9c00      	ldr	r4, [sp, #0]
 8021792:	4061      	eors	r1, r4
 8021794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021796:	4059      	eors	r1, r3
 8021798:	ea4f 71f1 	mov.w	r1, r1, ror #31
 802179c:	911c      	str	r1, [sp, #112]	@ 0x70
 802179e:	9109      	str	r1, [sp, #36]	@ 0x24
 80217a0:	440d      	add	r5, r1
 80217a2:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 80217a6:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 80217aa:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 80217ae:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 80217b2:	351c      	adds	r5, #28
 80217b4:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R3(d, e, a, b, c, 47);
 80217b8:	ea40 04bc 	orr.w	r4, r0, ip, ror #2
 80217bc:	ea04 04b7 	and.w	r4, r4, r7, ror #2
 80217c0:	ea00 02bc 	and.w	r2, r0, ip, ror #2
 80217c4:	4314      	orrs	r4, r2
 80217c6:	9903      	ldr	r1, [sp, #12]
 80217c8:	9a07      	ldr	r2, [sp, #28]
 80217ca:	404a      	eors	r2, r1
 80217cc:	9901      	ldr	r1, [sp, #4]
 80217ce:	404a      	eors	r2, r1
 80217d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80217d2:	405a      	eors	r2, r3
 80217d4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80217d8:	921d      	str	r2, [sp, #116]	@ 0x74
 80217da:	920a      	str	r2, [sp, #40]	@ 0x28
 80217dc:	4414      	add	r4, r2
 80217de:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 80217e2:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 80217e6:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 80217ea:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 80217ee:	341c      	adds	r4, #28
 80217f0:	eb04 04b6 	add.w	r4, r4, r6, ror #2
  R3(c, d, e, a, b, 48);
 80217f4:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 80217f8:	ea01 01bc 	and.w	r1, r1, ip, ror #2
 80217fc:	ea05 02b0 	and.w	r2, r5, r0, ror #2
 8021800:	4311      	orrs	r1, r2
 8021802:	9a04      	ldr	r2, [sp, #16]
 8021804:	9e08      	ldr	r6, [sp, #32]
 8021806:	4072      	eors	r2, r6
 8021808:	9e02      	ldr	r6, [sp, #8]
 802180a:	4072      	eors	r2, r6
 802180c:	9b00      	ldr	r3, [sp, #0]
 802180e:	405a      	eors	r2, r3
 8021810:	ea4f 76f2 	mov.w	r6, r2, ror #31
 8021814:	960e      	str	r6, [sp, #56]	@ 0x38
 8021816:	9600      	str	r6, [sp, #0]
 8021818:	4431      	add	r1, r6
 802181a:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 802181e:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 8021822:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 8021826:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 802182a:	311c      	adds	r1, #28
 802182c:	eb01 01b7 	add.w	r1, r1, r7, ror #2
  R3(b, c, d, e, a, 49);
 8021830:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 8021834:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 8021838:	ea04 06b5 	and.w	r6, r4, r5, ror #2
 802183c:	4332      	orrs	r2, r6
 802183e:	9f05      	ldr	r7, [sp, #20]
 8021840:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021842:	407e      	eors	r6, r7
 8021844:	ea8b 0606 	eor.w	r6, fp, r6
 8021848:	9b01      	ldr	r3, [sp, #4]
 802184a:	405e      	eors	r6, r3
 802184c:	ea4f 73f6 	mov.w	r3, r6, ror #31
 8021850:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021852:	9301      	str	r3, [sp, #4]
 8021854:	441a      	add	r2, r3
 8021856:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 802185a:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 802185e:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 8021862:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 8021866:	321c      	adds	r2, #28
 8021868:	eb02 02bc 	add.w	r2, r2, ip, ror #2
  R3(a, b, c, d, e, 50);
 802186c:	ea41 06b4 	orr.w	r6, r1, r4, ror #2
 8021870:	ea06 06b5 	and.w	r6, r6, r5, ror #2
 8021874:	ea01 07b4 	and.w	r7, r1, r4, ror #2
 8021878:	433e      	orrs	r6, r7
 802187a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802187c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802187e:	405f      	eors	r7, r3
 8021880:	ea8a 0707 	eor.w	r7, sl, r7
 8021884:	9b02      	ldr	r3, [sp, #8]
 8021886:	405f      	eors	r7, r3
 8021888:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802188c:	9710      	str	r7, [sp, #64]	@ 0x40
 802188e:	9702      	str	r7, [sp, #8]
 8021890:	443e      	add	r6, r7
 8021892:	eb06 66f2 	add.w	r6, r6, r2, ror #27
 8021896:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 802189a:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 802189e:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 80218a2:	361c      	adds	r6, #28
 80218a4:	eb06 06b0 	add.w	r6, r6, r0, ror #2
  R3(e, a, b, c, d, 51);
 80218a8:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 80218ac:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 80218b0:	ea02 07b1 	and.w	r7, r2, r1, ror #2
 80218b4:	4338      	orrs	r0, r7
 80218b6:	9b06      	ldr	r3, [sp, #24]
 80218b8:	9f00      	ldr	r7, [sp, #0]
 80218ba:	405f      	eors	r7, r3
 80218bc:	ea89 0707 	eor.w	r7, r9, r7
 80218c0:	ea8b 0b07 	eor.w	fp, fp, r7
 80218c4:	ea4f 7cfb 	mov.w	ip, fp, ror #31
 80218c8:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 80218cc:	4460      	add	r0, ip
 80218ce:	eb00 60f6 	add.w	r0, r0, r6, ror #27
 80218d2:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 80218d6:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 80218da:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 80218de:	301c      	adds	r0, #28
 80218e0:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(d, e, a, b, c, 52);
 80218e4:	ea46 05b2 	orr.w	r5, r6, r2, ror #2
 80218e8:	ea05 05b1 	and.w	r5, r5, r1, ror #2
 80218ec:	ea06 07b2 	and.w	r7, r6, r2, ror #2
 80218f0:	433d      	orrs	r5, r7
 80218f2:	9f07      	ldr	r7, [sp, #28]
 80218f4:	9b01      	ldr	r3, [sp, #4]
 80218f6:	405f      	eors	r7, r3
 80218f8:	ea8e 0707 	eor.w	r7, lr, r7
 80218fc:	ea8a 0a07 	eor.w	sl, sl, r7
 8021900:	ea4f 78fa 	mov.w	r8, sl, ror #31
 8021904:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8021908:	4445      	add	r5, r8
 802190a:	eb05 65f0 	add.w	r5, r5, r0, ror #27
 802190e:	f105 450f 	add.w	r5, r5, #2399141888	@ 0x8f000000
 8021912:	f505 15dd 	add.w	r5, r5, #1810432	@ 0x1ba000
 8021916:	f505 55e6 	add.w	r5, r5, #7360	@ 0x1cc0
 802191a:	351c      	adds	r5, #28
 802191c:	eb05 05b4 	add.w	r5, r5, r4, ror #2
  R3(c, d, e, a, b, 53);
 8021920:	ea40 04b6 	orr.w	r4, r0, r6, ror #2
 8021924:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8021928:	ea00 07b6 	and.w	r7, r0, r6, ror #2
 802192c:	433c      	orrs	r4, r7
 802192e:	9b08      	ldr	r3, [sp, #32]
 8021930:	9f02      	ldr	r7, [sp, #8]
 8021932:	405f      	eors	r7, r3
 8021934:	9b03      	ldr	r3, [sp, #12]
 8021936:	405f      	eors	r7, r3
 8021938:	ea89 0707 	eor.w	r7, r9, r7
 802193c:	ea4f 79f7 	mov.w	r9, r7, ror #31
 8021940:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 8021944:	444c      	add	r4, r9
 8021946:	eb04 64f5 	add.w	r4, r4, r5, ror #27
 802194a:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 802194e:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8021952:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8021956:	341c      	adds	r4, #28
 8021958:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R3(b, c, d, e, a, 54);
 802195c:	ea45 01b0 	orr.w	r1, r5, r0, ror #2
 8021960:	ea01 01b6 	and.w	r1, r1, r6, ror #2
 8021964:	ea05 07b0 	and.w	r7, r5, r0, ror #2
 8021968:	4339      	orrs	r1, r7
 802196a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802196c:	ea83 070c 	eor.w	r7, r3, ip
 8021970:	9b04      	ldr	r3, [sp, #16]
 8021972:	405f      	eors	r7, r3
 8021974:	ea8e 0707 	eor.w	r7, lr, r7
 8021978:	ea4f 77f7 	mov.w	r7, r7, ror #31
 802197c:	9714      	str	r7, [sp, #80]	@ 0x50
 802197e:	970c      	str	r7, [sp, #48]	@ 0x30
 8021980:	4439      	add	r1, r7
 8021982:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8021986:	f101 410f 	add.w	r1, r1, #2399141888	@ 0x8f000000
 802198a:	f501 11dd 	add.w	r1, r1, #1810432	@ 0x1ba000
 802198e:	f501 51e6 	add.w	r1, r1, #7360	@ 0x1cc0
 8021992:	311c      	adds	r1, #28
 8021994:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R3(a, b, c, d, e, 55);
 8021998:	ea44 02b5 	orr.w	r2, r4, r5, ror #2
 802199c:	ea02 02b0 	and.w	r2, r2, r0, ror #2
 80219a0:	ea04 07b5 	and.w	r7, r4, r5, ror #2
 80219a4:	433a      	orrs	r2, r7
 80219a6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80219a8:	ea87 0708 	eor.w	r7, r7, r8
 80219ac:	9b05      	ldr	r3, [sp, #20]
 80219ae:	405f      	eors	r7, r3
 80219b0:	9b03      	ldr	r3, [sp, #12]
 80219b2:	405f      	eors	r7, r3
 80219b4:	ea4f 7bf7 	mov.w	fp, r7, ror #31
 80219b8:	f8cd b054 	str.w	fp, [sp, #84]	@ 0x54
 80219bc:	445a      	add	r2, fp
 80219be:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80219c2:	f102 420f 	add.w	r2, r2, #2399141888	@ 0x8f000000
 80219c6:	f502 12dd 	add.w	r2, r2, #1810432	@ 0x1ba000
 80219ca:	f502 52e6 	add.w	r2, r2, #7360	@ 0x1cc0
 80219ce:	321c      	adds	r2, #28
 80219d0:	eb02 02b6 	add.w	r2, r2, r6, ror #2
  R3(e, a, b, c, d, 56);
 80219d4:	ea41 07b4 	orr.w	r7, r1, r4, ror #2
 80219d8:	ea07 07b5 	and.w	r7, r7, r5, ror #2
 80219dc:	ea01 06b4 	and.w	r6, r1, r4, ror #2
 80219e0:	4337      	orrs	r7, r6
 80219e2:	9e00      	ldr	r6, [sp, #0]
 80219e4:	ea86 0609 	eor.w	r6, r6, r9
 80219e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80219ea:	405e      	eors	r6, r3
 80219ec:	9b04      	ldr	r3, [sp, #16]
 80219ee:	405e      	eors	r6, r3
 80219f0:	ea4f 7af6 	mov.w	sl, r6, ror #31
 80219f4:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 80219f8:	4457      	add	r7, sl
 80219fa:	eb07 67f2 	add.w	r7, r7, r2, ror #27
 80219fe:	f107 470f 	add.w	r7, r7, #2399141888	@ 0x8f000000
 8021a02:	f507 17dd 	add.w	r7, r7, #1810432	@ 0x1ba000
 8021a06:	f507 57e6 	add.w	r7, r7, #7360	@ 0x1cc0
 8021a0a:	371c      	adds	r7, #28
 8021a0c:	eb07 07b0 	add.w	r7, r7, r0, ror #2
  R3(d, e, a, b, c, 57);
 8021a10:	ea42 00b1 	orr.w	r0, r2, r1, ror #2
 8021a14:	ea00 00b4 	and.w	r0, r0, r4, ror #2
 8021a18:	ea02 06b1 	and.w	r6, r2, r1, ror #2
 8021a1c:	4330      	orrs	r0, r6
 8021a1e:	9e01      	ldr	r6, [sp, #4]
 8021a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021a22:	405e      	eors	r6, r3
 8021a24:	9b06      	ldr	r3, [sp, #24]
 8021a26:	405e      	eors	r6, r3
 8021a28:	9b05      	ldr	r3, [sp, #20]
 8021a2a:	405e      	eors	r6, r3
 8021a2c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8021a30:	9617      	str	r6, [sp, #92]	@ 0x5c
 8021a32:	9603      	str	r6, [sp, #12]
 8021a34:	4430      	add	r0, r6
 8021a36:	eb00 60f7 	add.w	r0, r0, r7, ror #27
 8021a3a:	f100 400f 	add.w	r0, r0, #2399141888	@ 0x8f000000
 8021a3e:	f500 10dd 	add.w	r0, r0, #1810432	@ 0x1ba000
 8021a42:	f500 50e6 	add.w	r0, r0, #7360	@ 0x1cc0
 8021a46:	301c      	adds	r0, #28
 8021a48:	eb00 00b5 	add.w	r0, r0, r5, ror #2
  R3(c, d, e, a, b, 58);
 8021a4c:	ea47 06b2 	orr.w	r6, r7, r2, ror #2
 8021a50:	ea06 06b1 	and.w	r6, r6, r1, ror #2
 8021a54:	ea07 05b2 	and.w	r5, r7, r2, ror #2
 8021a58:	432e      	orrs	r6, r5
 8021a5a:	9d02      	ldr	r5, [sp, #8]
 8021a5c:	ea85 050b 	eor.w	r5, r5, fp
 8021a60:	9b07      	ldr	r3, [sp, #28]
 8021a62:	405d      	eors	r5, r3
 8021a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021a66:	405d      	eors	r5, r3
 8021a68:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8021a6c:	9518      	str	r5, [sp, #96]	@ 0x60
 8021a6e:	9504      	str	r5, [sp, #16]
 8021a70:	442e      	add	r6, r5
 8021a72:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8021a76:	f106 460f 	add.w	r6, r6, #2399141888	@ 0x8f000000
 8021a7a:	f506 16dd 	add.w	r6, r6, #1810432	@ 0x1ba000
 8021a7e:	f506 56e6 	add.w	r6, r6, #7360	@ 0x1cc0
 8021a82:	361c      	adds	r6, #28
 8021a84:	eb06 06b4 	add.w	r6, r6, r4, ror #2
  R3(b, c, d, e, a, 59);
 8021a88:	ea40 04b7 	orr.w	r4, r0, r7, ror #2
 8021a8c:	ea04 04b2 	and.w	r4, r4, r2, ror #2
 8021a90:	ea00 05b7 	and.w	r5, r0, r7, ror #2
 8021a94:	432c      	orrs	r4, r5
 8021a96:	ea8c 050a 	eor.w	r5, ip, sl
 8021a9a:	9b08      	ldr	r3, [sp, #32]
 8021a9c:	405d      	eors	r5, r3
 8021a9e:	9b06      	ldr	r3, [sp, #24]
 8021aa0:	405d      	eors	r5, r3
 8021aa2:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8021aa6:	9519      	str	r5, [sp, #100]	@ 0x64
 8021aa8:	9505      	str	r5, [sp, #20]
 8021aaa:	442c      	add	r4, r5
 8021aac:	eb04 64f6 	add.w	r4, r4, r6, ror #27
 8021ab0:	f104 440f 	add.w	r4, r4, #2399141888	@ 0x8f000000
 8021ab4:	f504 14dd 	add.w	r4, r4, #1810432	@ 0x1ba000
 8021ab8:	f504 54e6 	add.w	r4, r4, #7360	@ 0x1cc0
 8021abc:	341c      	adds	r4, #28
 8021abe:	eb04 04b1 	add.w	r4, r4, r1, ror #2
  R4(a, b, c, d, e, 60);
 8021ac2:	ea86 01b0 	eor.w	r1, r6, r0, ror #2
 8021ac6:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8021aca:	9d03      	ldr	r5, [sp, #12]
 8021acc:	ea88 0305 	eor.w	r3, r8, r5
 8021ad0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021ad2:	406b      	eors	r3, r5
 8021ad4:	9d07      	ldr	r5, [sp, #28]
 8021ad6:	406b      	eors	r3, r5
 8021ad8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021adc:	931a      	str	r3, [sp, #104]	@ 0x68
 8021ade:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021ae0:	4419      	add	r1, r3
 8021ae2:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8021ae6:	f8df e3fc 	ldr.w	lr, [pc, #1020]	@ 8021ee4 <mg_sha1_transform+0xf84>
 8021aea:	4471      	add	r1, lr
 8021aec:	eb01 01b2 	add.w	r1, r1, r2, ror #2
  R4(e, a, b, c, d, 61);
 8021af0:	ea84 02b6 	eor.w	r2, r4, r6, ror #2
 8021af4:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 8021af8:	9b04      	ldr	r3, [sp, #16]
 8021afa:	ea89 0303 	eor.w	r3, r9, r3
 8021afe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021b00:	406b      	eors	r3, r5
 8021b02:	9d08      	ldr	r5, [sp, #32]
 8021b04:	406b      	eors	r3, r5
 8021b06:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021b0a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021b0c:	9306      	str	r3, [sp, #24]
 8021b0e:	441a      	add	r2, r3
 8021b10:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8021b14:	4472      	add	r2, lr
 8021b16:	eb02 02b7 	add.w	r2, r2, r7, ror #2
  R4(d, e, a, b, c, 62);
 8021b1a:	ea81 03b4 	eor.w	r3, r1, r4, ror #2
 8021b1e:	ea83 03b6 	eor.w	r3, r3, r6, ror #2
 8021b22:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021b24:	9d05      	ldr	r5, [sp, #20]
 8021b26:	406f      	eors	r7, r5
 8021b28:	9d00      	ldr	r5, [sp, #0]
 8021b2a:	406f      	eors	r7, r5
 8021b2c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021b2e:	406f      	eors	r7, r5
 8021b30:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021b34:	971c      	str	r7, [sp, #112]	@ 0x70
 8021b36:	9707      	str	r7, [sp, #28]
 8021b38:	443b      	add	r3, r7
 8021b3a:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8021b3e:	4473      	add	r3, lr
 8021b40:	eb03 03b0 	add.w	r3, r3, r0, ror #2
  R4(c, d, e, a, b, 63);
 8021b44:	ea82 00b1 	eor.w	r0, r2, r1, ror #2
 8021b48:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8021b4c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021b4e:	ea8b 0707 	eor.w	r7, fp, r7
 8021b52:	9d01      	ldr	r5, [sp, #4]
 8021b54:	406f      	eors	r7, r5
 8021b56:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8021b58:	406f      	eors	r7, r5
 8021b5a:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8021b5e:	971d      	str	r7, [sp, #116]	@ 0x74
 8021b60:	9708      	str	r7, [sp, #32]
 8021b62:	4438      	add	r0, r7
 8021b64:	eb00 60f3 	add.w	r0, r0, r3, ror #27
 8021b68:	4470      	add	r0, lr
 8021b6a:	eb00 00b6 	add.w	r0, r0, r6, ror #2
  R4(b, c, d, e, a, 64);
 8021b6e:	ea83 07b2 	eor.w	r7, r3, r2, ror #2
 8021b72:	ea87 07b1 	eor.w	r7, r7, r1, ror #2
 8021b76:	9e06      	ldr	r6, [sp, #24]
 8021b78:	ea8a 0606 	eor.w	r6, sl, r6
 8021b7c:	9d02      	ldr	r5, [sp, #8]
 8021b7e:	406e      	eors	r6, r5
 8021b80:	9d00      	ldr	r5, [sp, #0]
 8021b82:	406e      	eors	r6, r5
 8021b84:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8021b88:	960e      	str	r6, [sp, #56]	@ 0x38
 8021b8a:	9600      	str	r6, [sp, #0]
 8021b8c:	4437      	add	r7, r6
 8021b8e:	eb07 67f0 	add.w	r7, r7, r0, ror #27
 8021b92:	4477      	add	r7, lr
 8021b94:	eb07 07b4 	add.w	r7, r7, r4, ror #2
  R4(a, b, c, d, e, 65);
 8021b98:	ea80 06b3 	eor.w	r6, r0, r3, ror #2
 8021b9c:	ea86 06b2 	eor.w	r6, r6, r2, ror #2
 8021ba0:	9c03      	ldr	r4, [sp, #12]
 8021ba2:	9d07      	ldr	r5, [sp, #28]
 8021ba4:	406c      	eors	r4, r5
 8021ba6:	ea8c 0404 	eor.w	r4, ip, r4
 8021baa:	9d01      	ldr	r5, [sp, #4]
 8021bac:	406c      	eors	r4, r5
 8021bae:	ea4f 74f4 	mov.w	r4, r4, ror #31
 8021bb2:	940f      	str	r4, [sp, #60]	@ 0x3c
 8021bb4:	9401      	str	r4, [sp, #4]
 8021bb6:	4426      	add	r6, r4
 8021bb8:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8021bbc:	4476      	add	r6, lr
 8021bbe:	eb06 06b1 	add.w	r6, r6, r1, ror #2
  R4(e, a, b, c, d, 66);
 8021bc2:	ea87 05b0 	eor.w	r5, r7, r0, ror #2
 8021bc6:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
 8021bca:	9904      	ldr	r1, [sp, #16]
 8021bcc:	9c08      	ldr	r4, [sp, #32]
 8021bce:	4061      	eors	r1, r4
 8021bd0:	ea88 0101 	eor.w	r1, r8, r1
 8021bd4:	9c02      	ldr	r4, [sp, #8]
 8021bd6:	4061      	eors	r1, r4
 8021bd8:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8021bdc:	9110      	str	r1, [sp, #64]	@ 0x40
 8021bde:	440d      	add	r5, r1
 8021be0:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8021be4:	4475      	add	r5, lr
 8021be6:	eb05 05b2 	add.w	r5, r5, r2, ror #2
  R4(d, e, a, b, c, 67);
 8021bea:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8021bee:	ea8e 0eb0 	eor.w	lr, lr, r0, ror #2
 8021bf2:	9a05      	ldr	r2, [sp, #20]
 8021bf4:	9c00      	ldr	r4, [sp, #0]
 8021bf6:	4062      	eors	r2, r4
 8021bf8:	ea89 0202 	eor.w	r2, r9, r2
 8021bfc:	ea8c 0202 	eor.w	r2, ip, r2
 8021c00:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021c04:	9211      	str	r2, [sp, #68]	@ 0x44
 8021c06:	4496      	add	lr, r2
 8021c08:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8021c0c:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8021c10:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8021c14:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8021c18:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8021c1c:	eb0e 0eb3 	add.w	lr, lr, r3, ror #2
  R4(c, d, e, a, b, 68);
 8021c20:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8021c24:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021c2a:	9c01      	ldr	r4, [sp, #4]
 8021c2c:	4063      	eors	r3, r4
 8021c2e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021c30:	4063      	eors	r3, r4
 8021c32:	ea88 0303 	eor.w	r3, r8, r3
 8021c36:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021c3a:	9312      	str	r3, [sp, #72]	@ 0x48
 8021c3c:	449c      	add	ip, r3
 8021c3e:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8021c42:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8021c46:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8021c4a:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8021c4e:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8021c52:	eb0c 0cb0 	add.w	ip, ip, r0, ror #2
  R4(b, c, d, e, a, 69);
 8021c56:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8021c5a:	ea88 08b6 	eor.w	r8, r8, r6, ror #2
 8021c5e:	9806      	ldr	r0, [sp, #24]
 8021c60:	4048      	eors	r0, r1
 8021c62:	ea8b 0000 	eor.w	r0, fp, r0
 8021c66:	ea89 0000 	eor.w	r0, r9, r0
 8021c6a:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021c6e:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021c70:	4480      	add	r8, r0
 8021c72:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8021c76:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8021c7a:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8021c7e:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8021c82:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8021c86:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(a, b, c, d, e, 70);
 8021c8a:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8021c8e:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8021c92:	9702      	str	r7, [sp, #8]
 8021c94:	9f07      	ldr	r7, [sp, #28]
 8021c96:	ea87 0902 	eor.w	r9, r7, r2
 8021c9a:	ea8a 0909 	eor.w	r9, sl, r9
 8021c9e:	ea84 0909 	eor.w	r9, r4, r9
 8021ca2:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8021ca6:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8021caa:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8021cae:	9c02      	ldr	r4, [sp, #8]
 8021cb0:	444c      	add	r4, r9
 8021cb2:	eb04 67f8 	add.w	r7, r4, r8, ror #27
 8021cb6:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8021cba:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8021cbe:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8021cc2:	3756      	adds	r7, #86	@ 0x56
 8021cc4:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(e, a, b, c, d, 71);
 8021cc8:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8021ccc:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8021cd0:	9c08      	ldr	r4, [sp, #32]
 8021cd2:	ea84 0903 	eor.w	r9, r4, r3
 8021cd6:	9c03      	ldr	r4, [sp, #12]
 8021cd8:	ea84 0909 	eor.w	r9, r4, r9
 8021cdc:	ea8b 0909 	eor.w	r9, fp, r9
 8021ce0:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8021ce4:	f8cd 9054 	str.w	r9, [sp, #84]	@ 0x54
 8021ce8:	444e      	add	r6, r9
 8021cea:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8021cee:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8021cf2:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8021cf6:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8021cfa:	3656      	adds	r6, #86	@ 0x56
 8021cfc:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(d, e, a, b, c, 72);
 8021d00:	ea87 05b8 	eor.w	r5, r7, r8, ror #2
 8021d04:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8021d08:	9c00      	ldr	r4, [sp, #0]
 8021d0a:	ea84 0b00 	eor.w	fp, r4, r0
 8021d0e:	9c04      	ldr	r4, [sp, #16]
 8021d10:	ea84 0b0b 	eor.w	fp, r4, fp
 8021d14:	ea8a 0b0b 	eor.w	fp, sl, fp
 8021d18:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8021d1c:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
 8021d20:	445d      	add	r5, fp
 8021d22:	eb05 65f6 	add.w	r5, r5, r6, ror #27
 8021d26:	f105 454a 	add.w	r5, r5, #3388997632	@ 0xca000000
 8021d2a:	f505 05c5 	add.w	r5, r5, #6455296	@ 0x628000
 8021d2e:	f505 4583 	add.w	r5, r5, #16768	@ 0x4180
 8021d32:	3556      	adds	r5, #86	@ 0x56
 8021d34:	eb05 05be 	add.w	r5, r5, lr, ror #2
  R4(c, d, e, a, b, 73);
 8021d38:	9602      	str	r6, [sp, #8]
 8021d3a:	ea86 0eb7 	eor.w	lr, r6, r7, ror #2
 8021d3e:	ea8e 0eb8 	eor.w	lr, lr, r8, ror #2
 8021d42:	9c01      	ldr	r4, [sp, #4]
 8021d44:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8021d46:	ea84 0a06 	eor.w	sl, r4, r6
 8021d4a:	9c05      	ldr	r4, [sp, #20]
 8021d4c:	ea84 0a0a 	eor.w	sl, r4, sl
 8021d50:	9c03      	ldr	r4, [sp, #12]
 8021d52:	ea84 0a0a 	eor.w	sl, r4, sl
 8021d56:	ea4f 7afa 	mov.w	sl, sl, ror #31
 8021d5a:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
 8021d5e:	44d6      	add	lr, sl
 8021d60:	eb0e 6ef5 	add.w	lr, lr, r5, ror #27
 8021d64:	f10e 4e4a 	add.w	lr, lr, #3388997632	@ 0xca000000
 8021d68:	f50e 0ec5 	add.w	lr, lr, #6455296	@ 0x628000
 8021d6c:	f50e 4e83 	add.w	lr, lr, #16768	@ 0x4180
 8021d70:	f10e 0e56 	add.w	lr, lr, #86	@ 0x56
 8021d74:	eb0e 0ebc 	add.w	lr, lr, ip, ror #2
  R4(b, c, d, e, a, 74);
 8021d78:	9e02      	ldr	r6, [sp, #8]
 8021d7a:	ea85 0cb6 	eor.w	ip, r5, r6, ror #2
 8021d7e:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8021d82:	ea81 0109 	eor.w	r1, r1, r9
 8021d86:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8021d88:	4071      	eors	r1, r6
 8021d8a:	9c04      	ldr	r4, [sp, #16]
 8021d8c:	4061      	eors	r1, r4
 8021d8e:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8021d92:	9118      	str	r1, [sp, #96]	@ 0x60
 8021d94:	448c      	add	ip, r1
 8021d96:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
 8021d9a:	f10c 4c4a 	add.w	ip, ip, #3388997632	@ 0xca000000
 8021d9e:	f50c 0cc5 	add.w	ip, ip, #6455296	@ 0x628000
 8021da2:	f50c 4c83 	add.w	ip, ip, #16768	@ 0x4180
 8021da6:	f10c 0c56 	add.w	ip, ip, #86	@ 0x56
 8021daa:	eb0c 0cb8 	add.w	ip, ip, r8, ror #2
  R4(a, b, c, d, e, 75);
 8021dae:	ea8e 08b5 	eor.w	r8, lr, r5, ror #2
 8021db2:	9c02      	ldr	r4, [sp, #8]
 8021db4:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8021db8:	ea82 020b 	eor.w	r2, r2, fp
 8021dbc:	9c06      	ldr	r4, [sp, #24]
 8021dbe:	4062      	eors	r2, r4
 8021dc0:	9c05      	ldr	r4, [sp, #20]
 8021dc2:	4062      	eors	r2, r4
 8021dc4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021dc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8021dca:	4490      	add	r8, r2
 8021dcc:	eb08 68fc 	add.w	r8, r8, ip, ror #27
 8021dd0:	f108 484a 	add.w	r8, r8, #3388997632	@ 0xca000000
 8021dd4:	f508 08c5 	add.w	r8, r8, #6455296	@ 0x628000
 8021dd8:	f508 4883 	add.w	r8, r8, #16768	@ 0x4180
 8021ddc:	f108 0856 	add.w	r8, r8, #86	@ 0x56
 8021de0:	eb08 08b7 	add.w	r8, r8, r7, ror #2
  R4(e, a, b, c, d, 76);
 8021de4:	ea8c 07be 	eor.w	r7, ip, lr, ror #2
 8021de8:	ea87 07b5 	eor.w	r7, r7, r5, ror #2
 8021dec:	ea83 030a 	eor.w	r3, r3, sl
 8021df0:	9c07      	ldr	r4, [sp, #28]
 8021df2:	4063      	eors	r3, r4
 8021df4:	4073      	eors	r3, r6
 8021df6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021dfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8021dfc:	441f      	add	r7, r3
 8021dfe:	eb07 67f8 	add.w	r7, r7, r8, ror #27
 8021e02:	f107 474a 	add.w	r7, r7, #3388997632	@ 0xca000000
 8021e06:	f507 07c5 	add.w	r7, r7, #6455296	@ 0x628000
 8021e0a:	f507 4783 	add.w	r7, r7, #16768	@ 0x4180
 8021e0e:	3756      	adds	r7, #86	@ 0x56
 8021e10:	9e02      	ldr	r6, [sp, #8]
 8021e12:	eb07 07b6 	add.w	r7, r7, r6, ror #2
  R4(d, e, a, b, c, 77);
 8021e16:	ea88 06bc 	eor.w	r6, r8, ip, ror #2
 8021e1a:	ea86 06be 	eor.w	r6, r6, lr, ror #2
 8021e1e:	4048      	eors	r0, r1
 8021e20:	9908      	ldr	r1, [sp, #32]
 8021e22:	4048      	eors	r0, r1
 8021e24:	9c06      	ldr	r4, [sp, #24]
 8021e26:	4060      	eors	r0, r4
 8021e28:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8021e2c:	901b      	str	r0, [sp, #108]	@ 0x6c
 8021e2e:	4406      	add	r6, r0
 8021e30:	eb06 66f7 	add.w	r6, r6, r7, ror #27
 8021e34:	f106 464a 	add.w	r6, r6, #3388997632	@ 0xca000000
 8021e38:	f506 06c5 	add.w	r6, r6, #6455296	@ 0x628000
 8021e3c:	f506 4683 	add.w	r6, r6, #16768	@ 0x4180
 8021e40:	3656      	adds	r6, #86	@ 0x56
 8021e42:	eb06 06b5 	add.w	r6, r6, r5, ror #2
  R4(c, d, e, a, b, 78);
 8021e46:	ea87 01b8 	eor.w	r1, r7, r8, ror #2
 8021e4a:	ea81 01bc 	eor.w	r1, r1, ip, ror #2
 8021e4e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8021e50:	406a      	eors	r2, r5
 8021e52:	9d00      	ldr	r5, [sp, #0]
 8021e54:	406a      	eors	r2, r5
 8021e56:	9c07      	ldr	r4, [sp, #28]
 8021e58:	4062      	eors	r2, r4
 8021e5a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8021e5e:	921c      	str	r2, [sp, #112]	@ 0x70
 8021e60:	4411      	add	r1, r2
 8021e62:	eb01 61f6 	add.w	r1, r1, r6, ror #27
 8021e66:	f101 414a 	add.w	r1, r1, #3388997632	@ 0xca000000
 8021e6a:	f501 01c5 	add.w	r1, r1, #6455296	@ 0x628000
 8021e6e:	f501 4183 	add.w	r1, r1, #16768	@ 0x4180
 8021e72:	3156      	adds	r1, #86	@ 0x56
 8021e74:	eb01 01be 	add.w	r1, r1, lr, ror #2
  R4(b, c, d, e, a, 79);
 8021e78:	ea86 02b7 	eor.w	r2, r6, r7, ror #2
 8021e7c:	ea82 02b8 	eor.w	r2, r2, r8, ror #2
 8021e80:	ea89 0903 	eor.w	r9, r9, r3
 8021e84:	9b01      	ldr	r3, [sp, #4]
 8021e86:	ea83 0909 	eor.w	r9, r3, r9
 8021e8a:	9c08      	ldr	r4, [sp, #32]
 8021e8c:	ea84 0309 	eor.w	r3, r4, r9
 8021e90:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8021e94:	931d      	str	r3, [sp, #116]	@ 0x74
 8021e96:	4413      	add	r3, r2
 8021e98:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8021e9c:	f103 434a 	add.w	r3, r3, #3388997632	@ 0xca000000
 8021ea0:	f503 03c5 	add.w	r3, r3, #6455296	@ 0x628000
 8021ea4:	f503 4383 	add.w	r3, r3, #16768	@ 0x4180
 8021ea8:	3356      	adds	r3, #86	@ 0x56
 8021eaa:	eb03 03bc 	add.w	r3, r3, ip, ror #2
  state[0] += a;
 8021eae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021eb0:	6802      	ldr	r2, [r0, #0]
 8021eb2:	441a      	add	r2, r3
 8021eb4:	6002      	str	r2, [r0, #0]
  state[1] += b;
 8021eb6:	6843      	ldr	r3, [r0, #4]
 8021eb8:	440b      	add	r3, r1
 8021eba:	6043      	str	r3, [r0, #4]
  state[2] += c;
 8021ebc:	6883      	ldr	r3, [r0, #8]
 8021ebe:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 8021ec2:	6083      	str	r3, [r0, #8]
  state[3] += d;
 8021ec4:	68c3      	ldr	r3, [r0, #12]
 8021ec6:	eb03 03b7 	add.w	r3, r3, r7, ror #2
 8021eca:	60c3      	str	r3, [r0, #12]
  state[4] += e;
 8021ecc:	6903      	ldr	r3, [r0, #16]
 8021ece:	eb03 03b8 	add.w	r3, r3, r8, ror #2
 8021ed2:	6103      	str	r3, [r0, #16]
  memset(block, 0, sizeof(block));
 8021ed4:	2240      	movs	r2, #64	@ 0x40
 8021ed6:	2100      	movs	r1, #0
 8021ed8:	a80e      	add	r0, sp, #56	@ 0x38
 8021eda:	f00a f889 	bl	802bff0 <memset>
}
 8021ede:	b01f      	add	sp, #124	@ 0x7c
 8021ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ee4:	ca62c1d6 	.word	0xca62c1d6

08021ee8 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8021ee8:	b538      	push	{r3, r4, r5, lr}
  void *p = pvPortMalloc(cnt * size);
 8021eea:	fb01 f400 	mul.w	r4, r1, r0
 8021eee:	4620      	mov	r0, r4
 8021ef0:	f7f8 f8f2 	bl	801a0d8 <pvPortMalloc>
  if (p != NULL) memset(p, 0, size * cnt);
 8021ef4:	4605      	mov	r5, r0
 8021ef6:	b118      	cbz	r0, 8021f00 <mg_calloc+0x18>
 8021ef8:	4622      	mov	r2, r4
 8021efa:	2100      	movs	r1, #0
 8021efc:	f00a f878 	bl	802bff0 <memset>
}
 8021f00:	4628      	mov	r0, r5
 8021f02:	bd38      	pop	{r3, r4, r5, pc}

08021f04 <mg_print_esc>:
size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8021f04:	b570      	push	{r4, r5, r6, lr}
 8021f06:	4605      	mov	r5, r0
 8021f08:	460e      	mov	r6, r1
  size_t len = (size_t) va_arg(*ap, int);
 8021f0a:	6811      	ldr	r1, [r2, #0]
 8021f0c:	1d0c      	adds	r4, r1, #4
 8021f0e:	6014      	str	r4, [r2, #0]
 8021f10:	680b      	ldr	r3, [r1, #0]
  char *p = va_arg(*ap, char *);
 8021f12:	f101 0408 	add.w	r4, r1, #8
 8021f16:	6014      	str	r4, [r2, #0]
 8021f18:	684c      	ldr	r4, [r1, #4]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8021f1a:	b923      	cbnz	r3, 8021f26 <mg_print_esc+0x22>
 8021f1c:	b11c      	cbz	r4, 8021f26 <mg_print_esc+0x22>
 8021f1e:	4620      	mov	r0, r4
 8021f20:	f7ee f9be 	bl	80102a0 <strlen>
 8021f24:	4603      	mov	r3, r0
  return qcpy(out, arg, p, len);
 8021f26:	4622      	mov	r2, r4
 8021f28:	4631      	mov	r1, r6
 8021f2a:	4628      	mov	r0, r5
 8021f2c:	f7fe fd69 	bl	8020a02 <qcpy>
}
 8021f30:	bd70      	pop	{r4, r5, r6, pc}

08021f32 <getpeer>:
                                     bool lsn) {
 8021f32:	b570      	push	{r4, r5, r6, lr}
 8021f34:	460d      	mov	r5, r1
 8021f36:	4616      	mov	r6, r2
  for (c = mgr->conns; c != NULL; c = c->next) {
 8021f38:	6804      	ldr	r4, [r0, #0]
 8021f3a:	e000      	b.n	8021f3e <getpeer+0xc>
 8021f3c:	6824      	ldr	r4, [r4, #0]
 8021f3e:	b364      	cbz	r4, 8021f9a <getpeer+0x68>
    if (c->is_arplooking && pkt->arp &&
 8021f40:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8021f44:	f013 0f10 	tst.w	r3, #16
 8021f48:	d008      	beq.n	8021f5c <getpeer+0x2a>
 8021f4a:	69a8      	ldr	r0, [r5, #24]
 8021f4c:	b130      	cbz	r0, 8021f5c <getpeer+0x2a>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 8021f4e:	2204      	movs	r2, #4
 8021f50:	f104 011c 	add.w	r1, r4, #28
 8021f54:	300e      	adds	r0, #14
 8021f56:	f009 ffb7 	bl	802bec8 <memcmp>
    if (c->is_arplooking && pkt->arp &&
 8021f5a:	b1f0      	cbz	r0, 8021f9a <getpeer+0x68>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 8021f5c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8021f60:	f013 0301 	ands.w	r3, r3, #1
 8021f64:	d005      	beq.n	8021f72 <getpeer+0x40>
 8021f66:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8021f68:	b11a      	cbz	r2, 8021f72 <getpeer+0x40>
 8021f6a:	8b21      	ldrh	r1, [r4, #24]
 8021f6c:	8852      	ldrh	r2, [r2, #2]
 8021f6e:	4291      	cmp	r1, r2
 8021f70:	d013      	beq.n	8021f9a <getpeer+0x68>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8021f72:	2b00      	cmp	r3, #0
 8021f74:	d1e2      	bne.n	8021f3c <getpeer+0xa>
 8021f76:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	d0df      	beq.n	8021f3c <getpeer+0xa>
 8021f7c:	8b21      	ldrh	r1, [r4, #24]
 8021f7e:	885a      	ldrh	r2, [r3, #2]
 8021f80:	4291      	cmp	r1, r2
 8021f82:	d1db      	bne.n	8021f3c <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8021f84:	f894 20ac 	ldrb.w	r2, [r4, #172]	@ 0xac
 8021f88:	f002 0201 	and.w	r2, r2, #1
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 8021f8c:	42b2      	cmp	r2, r6
 8021f8e:	d1d5      	bne.n	8021f3c <getpeer+0xa>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 8021f90:	b91e      	cbnz	r6, 8021f9a <getpeer+0x68>
 8021f92:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8021f94:	881b      	ldrh	r3, [r3, #0]
 8021f96:	429a      	cmp	r2, r3
 8021f98:	d1d0      	bne.n	8021f3c <getpeer+0xa>
}
 8021f9a:	4620      	mov	r0, r4
 8021f9c:	bd70      	pop	{r4, r5, r6, pc}

08021f9e <mg_pfn_stdout>:
void mg_pfn_stdout(char c, void *param) {
 8021f9e:	b508      	push	{r3, lr}
  putchar(c);
 8021fa0:	f009 fa80 	bl	802b4a4 <putchar>
}
 8021fa4:	bd08      	pop	{r3, pc}

08021fa6 <mg_queue_read_len>:
  MG_MEMORY_BARRIER();
 8021fa6:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8021faa:	6802      	ldr	r2, [r0, #0]
 8021fac:	6883      	ldr	r3, [r0, #8]
}
 8021fae:	58d0      	ldr	r0, [r2, r3]
 8021fb0:	4770      	bx	lr

08021fb2 <mg_base64_decode>:
size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8021fb2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fb6:	4691      	mov	r9, r2
 8021fb8:	469b      	mov	fp, r3
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8021fba:	4604      	mov	r4, r0
 8021fbc:	b150      	cbz	r0, 8021fd4 <mg_base64_decode+0x22>
 8021fbe:	eb00 0a01 	add.w	sl, r0, r1
  if (dl < n / 4 * 3 + 1) goto fail;
 8021fc2:	0889      	lsrs	r1, r1, #2
 8021fc4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021fc8:	3101      	adds	r1, #1
 8021fca:	4559      	cmp	r1, fp
 8021fcc:	d847      	bhi.n	802205e <mg_base64_decode+0xac>
  size_t len = 0;
 8021fce:	f04f 0800 	mov.w	r8, #0
 8021fd2:	e003      	b.n	8021fdc <mg_base64_decode+0x2a>
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8021fd4:	4682      	mov	sl, r0
 8021fd6:	e7f4      	b.n	8021fc2 <mg_base64_decode+0x10>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8021fd8:	4690      	mov	r8, r2
    src += 4;
 8021fda:	3404      	adds	r4, #4
  while (src != NULL && src + 3 < end) {
 8021fdc:	2c00      	cmp	r4, #0
 8021fde:	d03a      	beq.n	8022056 <mg_base64_decode+0xa4>
 8021fe0:	1ce3      	adds	r3, r4, #3
 8021fe2:	4553      	cmp	r3, sl
 8021fe4:	d237      	bcs.n	8022056 <mg_base64_decode+0xa4>
    int a = mg_base64_decode_single(src[0]),
 8021fe6:	7820      	ldrb	r0, [r4, #0]
 8021fe8:	f7fd f914 	bl	801f214 <mg_base64_decode_single>
 8021fec:	4606      	mov	r6, r0
        b = mg_base64_decode_single(src[1]),
 8021fee:	7860      	ldrb	r0, [r4, #1]
 8021ff0:	f7fd f910 	bl	801f214 <mg_base64_decode_single>
 8021ff4:	4605      	mov	r5, r0
        c = mg_base64_decode_single(src[2]),
 8021ff6:	78a0      	ldrb	r0, [r4, #2]
 8021ff8:	f7fd f90c 	bl	801f214 <mg_base64_decode_single>
 8021ffc:	4607      	mov	r7, r0
        d = mg_base64_decode_single(src[3]);
 8021ffe:	78e0      	ldrb	r0, [r4, #3]
 8022000:	f7fd f908 	bl	801f214 <mg_base64_decode_single>
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8022004:	2e40      	cmp	r6, #64	@ 0x40
 8022006:	d02a      	beq.n	802205e <mg_base64_decode+0xac>
 8022008:	2e00      	cmp	r6, #0
 802200a:	db28      	blt.n	802205e <mg_base64_decode+0xac>
 802200c:	2d40      	cmp	r5, #64	@ 0x40
 802200e:	d026      	beq.n	802205e <mg_base64_decode+0xac>
 8022010:	2d00      	cmp	r5, #0
 8022012:	db24      	blt.n	802205e <mg_base64_decode+0xac>
 8022014:	2f00      	cmp	r7, #0
 8022016:	db22      	blt.n	802205e <mg_base64_decode+0xac>
 8022018:	2800      	cmp	r0, #0
 802201a:	db20      	blt.n	802205e <mg_base64_decode+0xac>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 802201c:	112b      	asrs	r3, r5, #4
 802201e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
 8022022:	f108 0201 	add.w	r2, r8, #1
 8022026:	f809 3008 	strb.w	r3, [r9, r8]
    if (src[2] != '=') {
 802202a:	78a3      	ldrb	r3, [r4, #2]
 802202c:	2b3d      	cmp	r3, #61	@ 0x3d
 802202e:	d0d3      	beq.n	8021fd8 <mg_base64_decode+0x26>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8022030:	10bb      	asrs	r3, r7, #2
 8022032:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8022036:	f108 0102 	add.w	r1, r8, #2
 802203a:	f809 3002 	strb.w	r3, [r9, r2]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 802203e:	78e3      	ldrb	r3, [r4, #3]
 8022040:	2b3d      	cmp	r3, #61	@ 0x3d
 8022042:	d006      	beq.n	8022052 <mg_base64_decode+0xa0>
 8022044:	ea40 1087 	orr.w	r0, r0, r7, lsl #6
 8022048:	f108 0803 	add.w	r8, r8, #3
 802204c:	f809 0001 	strb.w	r0, [r9, r1]
 8022050:	e7c3      	b.n	8021fda <mg_base64_decode+0x28>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8022052:	4688      	mov	r8, r1
 8022054:	e7c1      	b.n	8021fda <mg_base64_decode+0x28>
  dst[len] = '\0';
 8022056:	2300      	movs	r3, #0
 8022058:	f809 3008 	strb.w	r3, [r9, r8]
  return len;
 802205c:	e006      	b.n	802206c <mg_base64_decode+0xba>
  if (dl > 0) dst[0] = '\0';
 802205e:	f1bb 0f00 	cmp.w	fp, #0
 8022062:	d006      	beq.n	8022072 <mg_base64_decode+0xc0>
 8022064:	f04f 0800 	mov.w	r8, #0
 8022068:	f889 8000 	strb.w	r8, [r9]
}
 802206c:	4640      	mov	r0, r8
 802206e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 0;
 8022072:	46d8      	mov	r8, fp
 8022074:	e7fa      	b.n	802206c <mg_base64_decode+0xba>

08022076 <mg_resolve_cancel>:
void mg_resolve_cancel(struct mg_connection *c) {
 8022076:	b570      	push	{r4, r5, r6, lr}
 8022078:	4605      	mov	r5, r0
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 802207a:	6843      	ldr	r3, [r0, #4]
 802207c:	f103 0630 	add.w	r6, r3, #48	@ 0x30
  for (d = *head; d != NULL; d = tmp) {
 8022080:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8022082:	e000      	b.n	8022086 <mg_resolve_cancel+0x10>
void mg_resolve_cancel(struct mg_connection *c) {
 8022084:	4621      	mov	r1, r4
  for (d = *head; d != NULL; d = tmp) {
 8022086:	b139      	cbz	r1, 8022098 <mg_resolve_cancel+0x22>
    tmp = d->next;
 8022088:	680c      	ldr	r4, [r1, #0]
    if (d->c == c) mg_dns_free(head, d);
 802208a:	684b      	ldr	r3, [r1, #4]
 802208c:	42ab      	cmp	r3, r5
 802208e:	d1f9      	bne.n	8022084 <mg_resolve_cancel+0xe>
 8022090:	4630      	mov	r0, r6
 8022092:	f7fe fe7a 	bl	8020d8a <mg_dns_free>
 8022096:	e7f5      	b.n	8022084 <mg_resolve_cancel+0xe>
}
 8022098:	bd70      	pop	{r4, r5, r6, pc}

0802209a <mg_dns_parse_rr>:
                       bool is_question, struct mg_dns_rr *rr) {
 802209a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802209c:	b083      	sub	sp, #12
 802209e:	9c08      	ldr	r4, [sp, #32]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 80220a0:	1886      	adds	r6, r0, r2
 80220a2:	1847      	adds	r7, r0, r1
  memset(rr, 0, sizeof(*rr));
 80220a4:	f04f 0c00 	mov.w	ip, #0
 80220a8:	f8c4 c000 	str.w	ip, [r4]
 80220ac:	f8c4 c004 	str.w	ip, [r4, #4]
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80220b0:	290b      	cmp	r1, #11
 80220b2:	d934      	bls.n	802211e <mg_dns_parse_rr+0x84>
 80220b4:	461d      	mov	r5, r3
  if (len > 512) return 0;  //  Too large, we don't expect that
 80220b6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80220ba:	d833      	bhi.n	8022124 <mg_dns_parse_rr+0x8a>
  if (s >= e) return 0;     //  Overflow
 80220bc:	42be      	cmp	r6, r7
 80220be:	d301      	bcc.n	80220c4 <mg_dns_parse_rr+0x2a>
 80220c0:	2000      	movs	r0, #0
 80220c2:	e02d      	b.n	8022120 <mg_dns_parse_rr+0x86>
  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 80220c4:	4663      	mov	r3, ip
 80220c6:	f8cd c000 	str.w	ip, [sp]
 80220ca:	f7fe ff3d 	bl	8020f48 <mg_dns_parse_name>
 80220ce:	b283      	uxth	r3, r0
 80220d0:	8023      	strh	r3, [r4, #0]
 80220d2:	b34b      	cbz	r3, 8022128 <mg_dns_parse_rr+0x8e>
  s += rr->nlen + 4;
 80220d4:	3304      	adds	r3, #4
 80220d6:	441e      	add	r6, r3
  if (s > e) return 0;
 80220d8:	42b7      	cmp	r7, r6
 80220da:	d327      	bcc.n	802212c <mg_dns_parse_rr+0x92>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 80220dc:	f816 2c04 	ldrb.w	r2, [r6, #-4]
 80220e0:	f816 3c03 	ldrb.w	r3, [r6, #-3]
 80220e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80220e8:	8063      	strh	r3, [r4, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80220ea:	f816 2c02 	ldrb.w	r2, [r6, #-2]
 80220ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80220f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80220f6:	80a3      	strh	r3, [r4, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80220f8:	b975      	cbnz	r5, 8022118 <mg_dns_parse_rr+0x7e>
  s += 6;
 80220fa:	1db3      	adds	r3, r6, #6
  if (s > e) return 0;
 80220fc:	429f      	cmp	r7, r3
 80220fe:	d317      	bcc.n	8022130 <mg_dns_parse_rr+0x96>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8022100:	7931      	ldrb	r1, [r6, #4]
 8022102:	7972      	ldrb	r2, [r6, #5]
 8022104:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8022108:	80e2      	strh	r2, [r4, #6]
  if (s + rr->alen > e) return 0;
 802210a:	4413      	add	r3, r2
 802210c:	42bb      	cmp	r3, r7
 802210e:	d811      	bhi.n	8022134 <mg_dns_parse_rr+0x9a>
  return (size_t) (rr->nlen + rr->alen + 10);
 8022110:	fa12 f080 	uxtah	r0, r2, r0
 8022114:	300a      	adds	r0, #10
 8022116:	e003      	b.n	8022120 <mg_dns_parse_rr+0x86>
  if (is_question) return (size_t) (rr->nlen + 4);
 8022118:	b280      	uxth	r0, r0
 802211a:	3004      	adds	r0, #4
 802211c:	e000      	b.n	8022120 <mg_dns_parse_rr+0x86>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 802211e:	2000      	movs	r0, #0
}
 8022120:	b003      	add	sp, #12
 8022122:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (len > 512) return 0;  //  Too large, we don't expect that
 8022124:	2000      	movs	r0, #0
 8022126:	e7fb      	b.n	8022120 <mg_dns_parse_rr+0x86>
    return 0;
 8022128:	2000      	movs	r0, #0
 802212a:	e7f9      	b.n	8022120 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 802212c:	2000      	movs	r0, #0
 802212e:	e7f7      	b.n	8022120 <mg_dns_parse_rr+0x86>
  if (s > e) return 0;
 8022130:	2000      	movs	r0, #0
 8022132:	e7f5      	b.n	8022120 <mg_dns_parse_rr+0x86>
  if (s + rr->alen > e) return 0;
 8022134:	2000      	movs	r0, #0
 8022136:	e7f3      	b.n	8022120 <mg_dns_parse_rr+0x86>

08022138 <mg_call>:
void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8022138:	b570      	push	{r4, r5, r6, lr}
 802213a:	4604      	mov	r4, r0
 802213c:	460d      	mov	r5, r1
 802213e:	4616      	mov	r6, r2
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 8022140:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8022144:	b103      	cbz	r3, 8022148 <mg_call+0x10>
 8022146:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8022148:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 802214a:	b11b      	cbz	r3, 8022154 <mg_call+0x1c>
 802214c:	4632      	mov	r2, r6
 802214e:	4629      	mov	r1, r5
 8022150:	4620      	mov	r0, r4
 8022152:	4798      	blx	r3
}
 8022154:	bd70      	pop	{r4, r5, r6, pc}

08022156 <mg_fs_open>:
struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8022156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022158:	4604      	mov	r4, r0
 802215a:	460d      	mov	r5, r1
 802215c:	4616      	mov	r6, r2
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 802215e:	2108      	movs	r1, #8
 8022160:	2001      	movs	r0, #1
 8022162:	f7ff fec1 	bl	8021ee8 <mg_calloc>
  if (fd != NULL) {
 8022166:	4607      	mov	r7, r0
 8022168:	b138      	cbz	r0, 802217a <mg_fs_open+0x24>
    fd->fd = fs->op(path, flags);
 802216a:	68a3      	ldr	r3, [r4, #8]
 802216c:	4631      	mov	r1, r6
 802216e:	4628      	mov	r0, r5
 8022170:	4798      	blx	r3
 8022172:	4605      	mov	r5, r0
 8022174:	6038      	str	r0, [r7, #0]
    fd->fs = fs;
 8022176:	607c      	str	r4, [r7, #4]
    if (fd->fd == NULL) {
 8022178:	b108      	cbz	r0, 802217e <mg_fs_open+0x28>
}
 802217a:	4638      	mov	r0, r7
 802217c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      free(fd);
 802217e:	4638      	mov	r0, r7
 8022180:	f7f8 f82c 	bl	801a1dc <vPortFree>
      fd = NULL;
 8022184:	462f      	mov	r7, r5
  return fd;
 8022186:	e7f8      	b.n	802217a <mg_fs_open+0x24>

08022188 <mg_fs_close>:
  if (fd != NULL) {
 8022188:	b148      	cbz	r0, 802219e <mg_fs_close+0x16>
void mg_fs_close(struct mg_fd *fd) {
 802218a:	b510      	push	{r4, lr}
 802218c:	4604      	mov	r4, r0
    fd->fs->cl(fd->fd);
 802218e:	6843      	ldr	r3, [r0, #4]
 8022190:	68db      	ldr	r3, [r3, #12]
 8022192:	6800      	ldr	r0, [r0, #0]
 8022194:	4798      	blx	r3
    free(fd);
 8022196:	4620      	mov	r0, r4
 8022198:	f7f8 f820 	bl	801a1dc <vPortFree>
}
 802219c:	bd10      	pop	{r4, pc}
 802219e:	4770      	bx	lr

080221a0 <restore_http_cb>:
static void restore_http_cb(struct mg_connection *c) {
 80221a0:	b510      	push	{r4, lr}
 80221a2:	4604      	mov	r4, r0
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80221a4:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 80221a8:	f7ff ffee 	bl	8022188 <mg_fs_close>
  c->pfn_data = NULL;
 80221ac:	2200      	movs	r2, #0
 80221ae:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  c->pfn = http_cb;
 80221b2:	4b05      	ldr	r3, [pc, #20]	@ (80221c8 <restore_http_cb+0x28>)
 80221b4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->is_resp = 0;
 80221b8:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80221bc:	f362 13c7 	bfi	r3, r2, #7, #1
 80221c0:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80221c4:	bd10      	pop	{r4, pc}
 80221c6:	bf00      	nop
 80221c8:	08025a7d 	.word	0x08025a7d

080221cc <mg_to_size_t>:
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80221cc:	b470      	push	{r4, r5, r6}
 80221ce:	b083      	sub	sp, #12
 80221d0:	ab02      	add	r3, sp, #8
 80221d2:	e903 0003 	stmdb	r3, {r0, r1}
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80221d6:	2300      	movs	r3, #0
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80221d8:	e000      	b.n	80221dc <mg_to_size_t+0x10>
 80221da:	3301      	adds	r3, #1
 80221dc:	9c01      	ldr	r4, [sp, #4]
 80221de:	429c      	cmp	r4, r3
 80221e0:	d905      	bls.n	80221ee <mg_to_size_t+0x22>
 80221e2:	9900      	ldr	r1, [sp, #0]
 80221e4:	5cc9      	ldrb	r1, [r1, r3]
 80221e6:	2920      	cmp	r1, #32
 80221e8:	d0f7      	beq.n	80221da <mg_to_size_t+0xe>
 80221ea:	2909      	cmp	r1, #9
 80221ec:	d0f5      	beq.n	80221da <mg_to_size_t+0xe>
  if (i < str.len && str.buf[i] == '-') return false;
 80221ee:	429c      	cmp	r4, r3
 80221f0:	d906      	bls.n	8022200 <mg_to_size_t+0x34>
 80221f2:	9900      	ldr	r1, [sp, #0]
 80221f4:	5cc9      	ldrb	r1, [r1, r3]
 80221f6:	292d      	cmp	r1, #45	@ 0x2d
 80221f8:	d02c      	beq.n	8022254 <mg_to_size_t+0x88>
 80221fa:	2500      	movs	r5, #0
 80221fc:	4628      	mov	r0, r5
 80221fe:	e001      	b.n	8022204 <mg_to_size_t+0x38>
 8022200:	2500      	movs	r5, #0
 8022202:	4628      	mov	r0, r5
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8022204:	429c      	cmp	r4, r3
 8022206:	d917      	bls.n	8022238 <mg_to_size_t+0x6c>
 8022208:	9900      	ldr	r1, [sp, #0]
 802220a:	5cc9      	ldrb	r1, [r1, r3]
 802220c:	292f      	cmp	r1, #47	@ 0x2f
 802220e:	d913      	bls.n	8022238 <mg_to_size_t+0x6c>
 8022210:	2939      	cmp	r1, #57	@ 0x39
 8022212:	d811      	bhi.n	8022238 <mg_to_size_t+0x6c>
    size_t digit = (size_t) (str.buf[i] - '0');
 8022214:	3930      	subs	r1, #48	@ 0x30
    if (result > max2) return false;  // Overflow
 8022216:	4e15      	ldr	r6, [pc, #84]	@ (802226c <mg_to_size_t+0xa0>)
 8022218:	42b0      	cmp	r0, r6
 802221a:	d81d      	bhi.n	8022258 <mg_to_size_t+0x8c>
    result *= 10;
 802221c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8022220:	ea4f 0c40 	mov.w	ip, r0, lsl #1
    if (result > max - digit) return false;  // Overflow
 8022224:	43ce      	mvns	r6, r1
 8022226:	ebb6 0f40 	cmp.w	r6, r0, lsl #1
 802222a:	d317      	bcc.n	802225c <mg_to_size_t+0x90>
    result += digit;
 802222c:	eb01 000c 	add.w	r0, r1, ip
    i++, ndigits++;
 8022230:	3301      	adds	r3, #1
 8022232:	3501      	adds	r5, #1
 8022234:	e7e6      	b.n	8022204 <mg_to_size_t+0x38>
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8022236:	3301      	adds	r3, #1
 8022238:	429c      	cmp	r4, r3
 802223a:	d905      	bls.n	8022248 <mg_to_size_t+0x7c>
 802223c:	9900      	ldr	r1, [sp, #0]
 802223e:	5cc9      	ldrb	r1, [r1, r3]
 8022240:	2920      	cmp	r1, #32
 8022242:	d0f8      	beq.n	8022236 <mg_to_size_t+0x6a>
 8022244:	2909      	cmp	r1, #9
 8022246:	d0f6      	beq.n	8022236 <mg_to_size_t+0x6a>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022248:	b155      	cbz	r5, 8022260 <mg_to_size_t+0x94>
  if (i != str.len) return false;  // Ditto
 802224a:	429c      	cmp	r4, r3
 802224c:	d10c      	bne.n	8022268 <mg_to_size_t+0x9c>
  *val = (size_t) result;
 802224e:	6010      	str	r0, [r2, #0]
  return true;
 8022250:	2001      	movs	r0, #1
 8022252:	e006      	b.n	8022262 <mg_to_size_t+0x96>
  if (i < str.len && str.buf[i] == '-') return false;
 8022254:	2000      	movs	r0, #0
 8022256:	e004      	b.n	8022262 <mg_to_size_t+0x96>
    if (result > max2) return false;  // Overflow
 8022258:	2000      	movs	r0, #0
 802225a:	e002      	b.n	8022262 <mg_to_size_t+0x96>
    if (result > max - digit) return false;  // Overflow
 802225c:	2000      	movs	r0, #0
 802225e:	e000      	b.n	8022262 <mg_to_size_t+0x96>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8022260:	2000      	movs	r0, #0
}
 8022262:	b003      	add	sp, #12
 8022264:	bc70      	pop	{r4, r5, r6}
 8022266:	4770      	bx	lr
  if (i != str.len) return false;  // Ditto
 8022268:	2000      	movs	r0, #0
 802226a:	e7fa      	b.n	8022262 <mg_to_size_t+0x96>
 802226c:	19999999 	.word	0x19999999

08022270 <mg_http_get_request_len>:
int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8022270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022272:	4606      	mov	r6, r0
 8022274:	460f      	mov	r7, r1
  for (i = 0; i < buf_len; i++) {
 8022276:	2400      	movs	r4, #0
 8022278:	e007      	b.n	802228a <mg_http_get_request_len+0x1a>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 802227a:	1933      	adds	r3, r6, r4
 802227c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8022280:	2b0a      	cmp	r3, #10
 8022282:	d10d      	bne.n	80222a0 <mg_http_get_request_len+0x30>
      return (int) i + 1;
 8022284:	1c60      	adds	r0, r4, #1
 8022286:	e01b      	b.n	80222c0 <mg_http_get_request_len+0x50>
  for (i = 0; i < buf_len; i++) {
 8022288:	3401      	adds	r4, #1
 802228a:	42bc      	cmp	r4, r7
 802228c:	d217      	bcs.n	80222be <mg_http_get_request_len+0x4e>
    if (!isok(buf[i])) return -1;
 802228e:	5d35      	ldrb	r5, [r6, r4]
 8022290:	4628      	mov	r0, r5
 8022292:	f7fd f944 	bl	801f51e <isok>
 8022296:	b1a0      	cbz	r0, 80222c2 <mg_http_get_request_len+0x52>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8022298:	2c00      	cmp	r4, #0
 802229a:	d0f5      	beq.n	8022288 <mg_http_get_request_len+0x18>
 802229c:	2d0a      	cmp	r5, #10
 802229e:	d0ec      	beq.n	802227a <mg_http_get_request_len+0xa>
 80222a0:	2c03      	cmp	r4, #3
 80222a2:	d9f1      	bls.n	8022288 <mg_http_get_request_len+0x18>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80222a4:	2d0a      	cmp	r5, #10
 80222a6:	d1ef      	bne.n	8022288 <mg_http_get_request_len+0x18>
 80222a8:	1933      	adds	r3, r6, r4
 80222aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80222ae:	2b0d      	cmp	r3, #13
 80222b0:	d1ea      	bne.n	8022288 <mg_http_get_request_len+0x18>
 80222b2:	1933      	adds	r3, r6, r4
 80222b4:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80222b8:	2b0a      	cmp	r3, #10
 80222ba:	d1e5      	bne.n	8022288 <mg_http_get_request_len+0x18>
 80222bc:	e7e2      	b.n	8022284 <mg_http_get_request_len+0x14>
  return 0;
 80222be:	2000      	movs	r0, #0
}
 80222c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!isok(buf[i])) return -1;
 80222c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80222c6:	e7fb      	b.n	80222c0 <mg_http_get_request_len+0x50>

080222c8 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80222c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222cc:	4605      	mov	r5, r0
 80222ce:	460f      	mov	r7, r1
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80222d0:	4608      	mov	r0, r1
 80222d2:	f7ed ffe5 	bl	80102a0 <strlen>
 80222d6:	4606      	mov	r6, r0
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80222d8:	2400      	movs	r4, #0
 80222da:	e000      	b.n	80222de <mg_http_get_header+0x16>
 80222dc:	3401      	adds	r4, #1
 80222de:	2c1d      	cmp	r4, #29
 80222e0:	d819      	bhi.n	8022316 <mg_http_get_header+0x4e>
 80222e2:	1ca3      	adds	r3, r4, #2
 80222e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80222e8:	685a      	ldr	r2, [r3, #4]
 80222ea:	b17a      	cbz	r2, 802230c <mg_http_get_header+0x44>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80222ec:	0123      	lsls	r3, r4, #4
 80222ee:	3328      	adds	r3, #40	@ 0x28
 80222f0:	eb05 0803 	add.w	r8, r5, r3
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80222f4:	42b2      	cmp	r2, r6
 80222f6:	d1f1      	bne.n	80222dc <mg_http_get_header+0x14>
 80222f8:	1ca3      	adds	r3, r4, #2
 80222fa:	011b      	lsls	r3, r3, #4
 80222fc:	4632      	mov	r2, r6
 80222fe:	4639      	mov	r1, r7
 8022300:	58e8      	ldr	r0, [r5, r3]
 8022302:	f7fd f8d7 	bl	801f4b4 <mg_ncasecmp>
 8022306:	2800      	cmp	r0, #0
 8022308:	d1e8      	bne.n	80222dc <mg_http_get_header+0x14>
 802230a:	e001      	b.n	8022310 <mg_http_get_header+0x48>
  return NULL;
 802230c:	f04f 0800 	mov.w	r8, #0
}
 8022310:	4640      	mov	r0, r8
 8022312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8022316:	f04f 0800 	mov.w	r8, #0
 802231a:	e7f9      	b.n	8022310 <mg_http_get_header+0x48>

0802231c <mg_http_status>:
int mg_http_status(const struct mg_http_message *hm) {
 802231c:	b508      	push	{r3, lr}
  return atoi(hm->uri.buf);
 802231e:	6880      	ldr	r0, [r0, #8]
 8022320:	f007 f932 	bl	8029588 <atoi>
}
 8022324:	bd08      	pop	{r3, pc}
	...

08022328 <mg_json_get>:
int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8022328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802232c:	b095      	sub	sp, #84	@ 0x54
 802232e:	ac08      	add	r4, sp, #32
 8022330:	e884 0003 	stmia.w	r4, {r0, r1}
 8022334:	9202      	str	r2, [sp, #8]
  const char *s = json.buf;
 8022336:	4606      	mov	r6, r0
  int len = (int) json.len;
 8022338:	4688      	mov	r8, r1
  if (toklen) *toklen = 0;
 802233a:	469a      	mov	sl, r3
 802233c:	b113      	cbz	r3, 8022344 <mg_json_get+0x1c>
 802233e:	2300      	movs	r3, #0
 8022340:	f8ca 3000 	str.w	r3, [sl]
  if (path[0] != '$') return MG_JSON_INVALID;
 8022344:	9b02      	ldr	r3, [sp, #8]
 8022346:	781b      	ldrb	r3, [r3, #0]
 8022348:	2b24      	cmp	r3, #36	@ 0x24
 802234a:	f040 8232 	bne.w	80227b2 <mg_json_get+0x48a>
  int ci = -1, ei = -1;  // Current and expected index in array
 802234e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022352:	9303      	str	r3, [sp, #12]
 8022354:	9301      	str	r3, [sp, #4]
  int pos = 1;           // Current position in `path`
 8022356:	2301      	movs	r3, #1
 8022358:	9304      	str	r3, [sp, #16]
  int ed = 0;            // Expected depth
 802235a:	f04f 0b00 	mov.w	fp, #0
  int depth = 0;         // Current depth (nesting level)
 802235e:	465f      	mov	r7, fp
  int j = 0;             // Offset in `s` we're looking for (return value)
 8022360:	f8cd b014 	str.w	fp, [sp, #20]
  for (i = 0; i < len; i++) {
 8022364:	465c      	mov	r4, fp
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8022366:	465b      	mov	r3, fp
 8022368:	f8cd a018 	str.w	sl, [sp, #24]
 802236c:	e190      	b.n	8022690 <mg_json_get+0x368>
        if (depth == ed) j = i;
 802236e:	455f      	cmp	r7, fp
 8022370:	d029      	beq.n	80223c6 <mg_json_get+0x9e>
        if (c == '{') {
 8022372:	2d7b      	cmp	r5, #123	@ 0x7b
 8022374:	d029      	beq.n	80223ca <mg_json_get+0xa2>
        } else if (c == '[') {
 8022376:	2d5b      	cmp	r5, #91	@ 0x5b
 8022378:	d047      	beq.n	802240a <mg_json_get+0xe2>
        } else if (c == ']' && depth > 0) {  // Empty array
 802237a:	2d5d      	cmp	r5, #93	@ 0x5d
 802237c:	d07a      	beq.n	8022474 <mg_json_get+0x14c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 802237e:	2d74      	cmp	r5, #116	@ 0x74
 8022380:	f000 80a4 	beq.w	80224cc <mg_json_get+0x1a4>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8022384:	2d6e      	cmp	r5, #110	@ 0x6e
 8022386:	f000 80b0 	beq.w	80224ea <mg_json_get+0x1c2>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 802238a:	2d66      	cmp	r5, #102	@ 0x66
 802238c:	f000 80bc 	beq.w	8022508 <mg_json_get+0x1e0>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8022390:	2d2d      	cmp	r5, #45	@ 0x2d
 8022392:	d005      	beq.n	80223a0 <mg_json_get+0x78>
 8022394:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8022398:	b2db      	uxtb	r3, r3
 802239a:	2b09      	cmp	r3, #9
 802239c:	f200 80c3 	bhi.w	8022526 <mg_json_get+0x1fe>
          int numlen = 0;
 80223a0:	2300      	movs	r3, #0
 80223a2:	930b      	str	r3, [sp, #44]	@ 0x2c
          mg_atod(&s[i], len - i, &numlen);
 80223a4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80223a6:	eba8 0104 	sub.w	r1, r8, r4
 80223aa:	4648      	mov	r0, r9
 80223ac:	f7fd fd30 	bl	801fe10 <mg_atod>
          i += numlen - 1;
 80223b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80223b2:	3b01      	subs	r3, #1
 80223b4:	441c      	add	r4, r3
        MG_CHECKRET('V');
 80223b6:	455f      	cmp	r7, fp
 80223b8:	f000 80c6 	beq.w	8022548 <mg_json_get+0x220>
        if (depth == ed && ei >= 0) ci++;
 80223bc:	455f      	cmp	r7, fp
 80223be:	f000 80da 	beq.w	8022576 <mg_json_get+0x24e>
        expecting = S_COMMA_OR_EOO;
 80223c2:	2303      	movs	r3, #3
 80223c4:	e163      	b.n	802268e <mg_json_get+0x366>
        if (depth == ed) j = i;
 80223c6:	9405      	str	r4, [sp, #20]
 80223c8:	e7d3      	b.n	8022372 <mg_json_get+0x4a>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80223ca:	2f1d      	cmp	r7, #29
 80223cc:	f300 81f4 	bgt.w	80227b8 <mg_json_get+0x490>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80223d0:	455f      	cmp	r7, fp
 80223d2:	d007      	beq.n	80223e4 <mg_json_get+0xbc>
          nesting[depth++] = c;
 80223d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80223d8:	446b      	add	r3, sp
 80223da:	f803 5c20 	strb.w	r5, [r3, #-32]
 80223de:	3701      	adds	r7, #1
          expecting = S_KEY;
 80223e0:	2301      	movs	r3, #1
          break;
 80223e2:	e154      	b.n	802268e <mg_json_get+0x366>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80223e4:	9b02      	ldr	r3, [sp, #8]
 80223e6:	9a04      	ldr	r2, [sp, #16]
 80223e8:	5c9b      	ldrb	r3, [r3, r2]
 80223ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80223ec:	d1f2      	bne.n	80223d4 <mg_json_get+0xac>
 80223ee:	9b01      	ldr	r3, [sp, #4]
 80223f0:	9a03      	ldr	r2, [sp, #12]
 80223f2:	4293      	cmp	r3, r2
 80223f4:	d1ee      	bne.n	80223d4 <mg_json_get+0xac>
            ed++, pos++, ci = ei = -1;
 80223f6:	f10b 0b01 	add.w	fp, fp, #1
 80223fa:	9b04      	ldr	r3, [sp, #16]
 80223fc:	3301      	adds	r3, #1
 80223fe:	9304      	str	r3, [sp, #16]
 8022400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022404:	9303      	str	r3, [sp, #12]
 8022406:	9301      	str	r3, [sp, #4]
 8022408:	e7e4      	b.n	80223d4 <mg_json_get+0xac>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 802240a:	2f1d      	cmp	r7, #29
 802240c:	f300 81d7 	bgt.w	80227be <mg_json_get+0x496>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8022410:	455f      	cmp	r7, fp
 8022412:	d006      	beq.n	8022422 <mg_json_get+0xfa>
          nesting[depth++] = c;
 8022414:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8022418:	446a      	add	r2, sp
 802241a:	f802 5c20 	strb.w	r5, [r2, #-32]
 802241e:	3701      	adds	r7, #1
          break;
 8022420:	e135      	b.n	802268e <mg_json_get+0x366>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8022422:	9a02      	ldr	r2, [sp, #8]
 8022424:	9904      	ldr	r1, [sp, #16]
 8022426:	5c52      	ldrb	r2, [r2, r1]
 8022428:	2a5b      	cmp	r2, #91	@ 0x5b
 802242a:	d1f3      	bne.n	8022414 <mg_json_get+0xec>
 802242c:	9a01      	ldr	r2, [sp, #4]
 802242e:	9903      	ldr	r1, [sp, #12]
 8022430:	428a      	cmp	r2, r1
 8022432:	d1ef      	bne.n	8022414 <mg_json_get+0xec>
            ed++, pos++, ci = 0;
 8022434:	f10b 0b01 	add.w	fp, fp, #1
 8022438:	9804      	ldr	r0, [sp, #16]
 802243a:	3001      	adds	r0, #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802243c:	2100      	movs	r1, #0
 802243e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8022442:	e005      	b.n	8022450 <mg_json_get+0x128>
              ei *= 10;
 8022444:	eb01 0181 	add.w	r1, r1, r1, lsl #2
              ei += path[pos] - '0';
 8022448:	3a30      	subs	r2, #48	@ 0x30
 802244a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 802244e:	3001      	adds	r0, #1
 8022450:	f81c 2000 	ldrb.w	r2, [ip, r0]
 8022454:	2a5d      	cmp	r2, #93	@ 0x5d
 8022456:	d001      	beq.n	802245c <mg_json_get+0x134>
 8022458:	2a00      	cmp	r2, #0
 802245a:	d1f3      	bne.n	8022444 <mg_json_get+0x11c>
            if (path[pos] != 0) pos++;
 802245c:	9004      	str	r0, [sp, #16]
 802245e:	9103      	str	r1, [sp, #12]
 8022460:	b12a      	cbz	r2, 802246e <mg_json_get+0x146>
 8022462:	4602      	mov	r2, r0
 8022464:	3201      	adds	r2, #1
 8022466:	9204      	str	r2, [sp, #16]
            ed++, pos++, ci = 0;
 8022468:	2200      	movs	r2, #0
 802246a:	9201      	str	r2, [sp, #4]
 802246c:	e7d2      	b.n	8022414 <mg_json_get+0xec>
 802246e:	2200      	movs	r2, #0
 8022470:	9201      	str	r2, [sp, #4]
 8022472:	e7cf      	b.n	8022414 <mg_json_get+0xec>
        } else if (c == ']' && depth > 0) {  // Empty array
 8022474:	2f00      	cmp	r7, #0
 8022476:	dd82      	ble.n	802237e <mg_json_get+0x56>
          MG_EOO(']');
 8022478:	455f      	cmp	r7, fp
 802247a:	d020      	beq.n	80224be <mg_json_get+0x196>
 802247c:	3f01      	subs	r7, #1
 802247e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8022482:	446b      	add	r3, sp
 8022484:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022488:	3302      	adds	r3, #2
 802248a:	429d      	cmp	r5, r3
 802248c:	f040 819a 	bne.w	80227c4 <mg_json_get+0x49c>
 8022490:	455f      	cmp	r7, fp
 8022492:	d190      	bne.n	80223b6 <mg_json_get+0x8e>
 8022494:	9b02      	ldr	r3, [sp, #8]
 8022496:	9a04      	ldr	r2, [sp, #16]
 8022498:	5c9b      	ldrb	r3, [r3, r2]
 802249a:	2b00      	cmp	r3, #0
 802249c:	d18b      	bne.n	80223b6 <mg_json_get+0x8e>
 802249e:	9b01      	ldr	r3, [sp, #4]
 80224a0:	9a03      	ldr	r2, [sp, #12]
 80224a2:	4293      	cmp	r3, r2
 80224a4:	d187      	bne.n	80223b6 <mg_json_get+0x8e>
 80224a6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80224aa:	f1ba 0f00 	cmp.w	sl, #0
 80224ae:	d004      	beq.n	80224ba <mg_json_get+0x192>
 80224b0:	9b05      	ldr	r3, [sp, #20]
 80224b2:	1ae3      	subs	r3, r4, r3
 80224b4:	3301      	adds	r3, #1
 80224b6:	f8ca 3000 	str.w	r3, [sl]
 80224ba:	9d05      	ldr	r5, [sp, #20]
 80224bc:	e175      	b.n	80227aa <mg_json_get+0x482>
 80224be:	9b01      	ldr	r3, [sp, #4]
 80224c0:	9a03      	ldr	r2, [sp, #12]
 80224c2:	4293      	cmp	r3, r2
 80224c4:	d0da      	beq.n	802247c <mg_json_get+0x154>
 80224c6:	f06f 0502 	mvn.w	r5, #2
 80224ca:	e16e      	b.n	80227aa <mg_json_get+0x482>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 80224cc:	1ce3      	adds	r3, r4, #3
 80224ce:	9307      	str	r3, [sp, #28]
 80224d0:	4543      	cmp	r3, r8
 80224d2:	f6bf af57 	bge.w	8022384 <mg_json_get+0x5c>
 80224d6:	2204      	movs	r2, #4
 80224d8:	49a3      	ldr	r1, [pc, #652]	@ (8022768 <mg_json_get+0x440>)
 80224da:	4648      	mov	r0, r9
 80224dc:	f009 fcf4 	bl	802bec8 <memcmp>
 80224e0:	2800      	cmp	r0, #0
 80224e2:	f47f af4f 	bne.w	8022384 <mg_json_get+0x5c>
          i += 3;
 80224e6:	9c07      	ldr	r4, [sp, #28]
 80224e8:	e765      	b.n	80223b6 <mg_json_get+0x8e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80224ea:	1ce3      	adds	r3, r4, #3
 80224ec:	9307      	str	r3, [sp, #28]
 80224ee:	4543      	cmp	r3, r8
 80224f0:	f6bf af4b 	bge.w	802238a <mg_json_get+0x62>
 80224f4:	2204      	movs	r2, #4
 80224f6:	499d      	ldr	r1, [pc, #628]	@ (802276c <mg_json_get+0x444>)
 80224f8:	4648      	mov	r0, r9
 80224fa:	f009 fce5 	bl	802bec8 <memcmp>
 80224fe:	2800      	cmp	r0, #0
 8022500:	f47f af43 	bne.w	802238a <mg_json_get+0x62>
          i += 3;
 8022504:	9c07      	ldr	r4, [sp, #28]
 8022506:	e756      	b.n	80223b6 <mg_json_get+0x8e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8022508:	1d23      	adds	r3, r4, #4
 802250a:	9307      	str	r3, [sp, #28]
 802250c:	4543      	cmp	r3, r8
 802250e:	f6bf af3f 	bge.w	8022390 <mg_json_get+0x68>
 8022512:	2205      	movs	r2, #5
 8022514:	4996      	ldr	r1, [pc, #600]	@ (8022770 <mg_json_get+0x448>)
 8022516:	4648      	mov	r0, r9
 8022518:	f009 fcd6 	bl	802bec8 <memcmp>
 802251c:	2800      	cmp	r0, #0
 802251e:	f47f af37 	bne.w	8022390 <mg_json_get+0x68>
          i += 4;
 8022522:	9c07      	ldr	r4, [sp, #28]
 8022524:	e747      	b.n	80223b6 <mg_json_get+0x8e>
        } else if (c == '"') {
 8022526:	2d22      	cmp	r5, #34	@ 0x22
 8022528:	f040 814f 	bne.w	80227ca <mg_json_get+0x4a2>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 802252c:	f10a 0001 	add.w	r0, sl, #1
 8022530:	eba8 0104 	sub.w	r1, r8, r4
 8022534:	3901      	subs	r1, #1
 8022536:	4430      	add	r0, r6
 8022538:	f7fd fc45 	bl	801fdc6 <mg_pass_string>
          if (n < 0) return n;
 802253c:	1e05      	subs	r5, r0, #0
 802253e:	f2c0 8134 	blt.w	80227aa <mg_json_get+0x482>
          i += n + 1;
 8022542:	3501      	adds	r5, #1
 8022544:	442c      	add	r4, r5
 8022546:	e736      	b.n	80223b6 <mg_json_get+0x8e>
        MG_CHECKRET('V');
 8022548:	9b02      	ldr	r3, [sp, #8]
 802254a:	9a04      	ldr	r2, [sp, #16]
 802254c:	5c9b      	ldrb	r3, [r3, r2]
 802254e:	2b00      	cmp	r3, #0
 8022550:	f47f af34 	bne.w	80223bc <mg_json_get+0x94>
 8022554:	9b01      	ldr	r3, [sp, #4]
 8022556:	9a03      	ldr	r2, [sp, #12]
 8022558:	4293      	cmp	r3, r2
 802255a:	f47f af2f 	bne.w	80223bc <mg_json_get+0x94>
 802255e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022562:	f1ba 0f00 	cmp.w	sl, #0
 8022566:	d004      	beq.n	8022572 <mg_json_get+0x24a>
 8022568:	9b05      	ldr	r3, [sp, #20]
 802256a:	1ae3      	subs	r3, r4, r3
 802256c:	3301      	adds	r3, #1
 802256e:	f8ca 3000 	str.w	r3, [sl]
 8022572:	9d05      	ldr	r5, [sp, #20]
 8022574:	e119      	b.n	80227aa <mg_json_get+0x482>
        if (depth == ed && ei >= 0) ci++;
 8022576:	9b03      	ldr	r3, [sp, #12]
 8022578:	2b00      	cmp	r3, #0
 802257a:	f2c0 8110 	blt.w	802279e <mg_json_get+0x476>
 802257e:	9b01      	ldr	r3, [sp, #4]
 8022580:	3301      	adds	r3, #1
 8022582:	9301      	str	r3, [sp, #4]
        expecting = S_COMMA_OR_EOO;
 8022584:	2303      	movs	r3, #3
 8022586:	e082      	b.n	802268e <mg_json_get+0x366>
        if (c == '"') {
 8022588:	2d22      	cmp	r5, #34	@ 0x22
 802258a:	d014      	beq.n	80225b6 <mg_json_get+0x28e>
        } else if (c == '}') {  // Empty object
 802258c:	2d7d      	cmp	r5, #125	@ 0x7d
 802258e:	f040 8125 	bne.w	80227dc <mg_json_get+0x4b4>
          MG_EOO('}');
 8022592:	455f      	cmp	r7, fp
 8022594:	d053      	beq.n	802263e <mg_json_get+0x316>
 8022596:	3f01      	subs	r7, #1
 8022598:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802259c:	446b      	add	r3, sp
 802259e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80225a2:	3302      	adds	r3, #2
 80225a4:	429d      	cmp	r5, r3
 80225a6:	f040 811c 	bne.w	80227e2 <mg_json_get+0x4ba>
 80225aa:	455f      	cmp	r7, fp
 80225ac:	d04e      	beq.n	802264c <mg_json_get+0x324>
          if (depth == ed && ei >= 0) ci++;
 80225ae:	455f      	cmp	r7, fp
 80225b0:	d061      	beq.n	8022676 <mg_json_get+0x34e>
          expecting = S_COMMA_OR_EOO;
 80225b2:	2303      	movs	r3, #3
 80225b4:	e06b      	b.n	802268e <mg_json_get+0x366>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80225b6:	f104 0901 	add.w	r9, r4, #1
 80225ba:	44b1      	add	r9, r6
 80225bc:	eba8 0104 	sub.w	r1, r8, r4
 80225c0:	3901      	subs	r1, #1
 80225c2:	4648      	mov	r0, r9
 80225c4:	f7fd fbff 	bl	801fdc6 <mg_pass_string>
          if (n < 0) return n;
 80225c8:	1e05      	subs	r5, r0, #0
 80225ca:	f2c0 80ee 	blt.w	80227aa <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80225ce:	1c63      	adds	r3, r4, #1
 80225d0:	442b      	add	r3, r5
 80225d2:	4543      	cmp	r3, r8
 80225d4:	f280 80fc 	bge.w	80227d0 <mg_json_get+0x4a8>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80225d8:	455f      	cmp	r7, fp
 80225da:	f2c0 80fc 	blt.w	80227d6 <mg_json_get+0x4ae>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80225de:	d005      	beq.n	80225ec <mg_json_get+0x2c4>
          if (depth == ed && path[pos - 1] == '.' &&
 80225e0:	455f      	cmp	r7, fp
 80225e2:	d00d      	beq.n	8022600 <mg_json_get+0x2d8>
          i += n + 1;
 80225e4:	3501      	adds	r5, #1
 80225e6:	442c      	add	r4, r5
          expecting = S_COLON;
 80225e8:	2302      	movs	r3, #2
 80225ea:	e050      	b.n	802268e <mg_json_get+0x366>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 80225ec:	9b02      	ldr	r3, [sp, #8]
 80225ee:	9a04      	ldr	r2, [sp, #16]
 80225f0:	4413      	add	r3, r2
 80225f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80225f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80225f8:	d0f2      	beq.n	80225e0 <mg_json_get+0x2b8>
 80225fa:	f06f 0502 	mvn.w	r5, #2
 80225fe:	e0d4      	b.n	80227aa <mg_json_get+0x482>
          if (depth == ed && path[pos - 1] == '.' &&
 8022600:	9b02      	ldr	r3, [sp, #8]
 8022602:	9a04      	ldr	r2, [sp, #16]
 8022604:	4413      	add	r3, r2
 8022606:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802260a:	2b2e      	cmp	r3, #46	@ 0x2e
 802260c:	d1ea      	bne.n	80225e4 <mg_json_get+0x2bc>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 802260e:	462a      	mov	r2, r5
 8022610:	9b02      	ldr	r3, [sp, #8]
 8022612:	9904      	ldr	r1, [sp, #16]
 8022614:	1859      	adds	r1, r3, r1
 8022616:	4648      	mov	r0, r9
 8022618:	f009 fd1f 	bl	802c05a <strncmp>
          if (depth == ed && path[pos - 1] == '.' &&
 802261c:	2800      	cmp	r0, #0
 802261e:	d1e1      	bne.n	80225e4 <mg_json_get+0x2bc>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8022620:	9904      	ldr	r1, [sp, #16]
 8022622:	194b      	adds	r3, r1, r5
 8022624:	9a02      	ldr	r2, [sp, #8]
 8022626:	5cd2      	ldrb	r2, [r2, r3]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8022628:	b12a      	cbz	r2, 8022636 <mg_json_get+0x30e>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 802262a:	2a2e      	cmp	r2, #46	@ 0x2e
 802262c:	d005      	beq.n	802263a <mg_json_get+0x312>
 802262e:	2a5b      	cmp	r2, #91	@ 0x5b
 8022630:	d1d8      	bne.n	80225e4 <mg_json_get+0x2bc>
            pos += n;
 8022632:	9304      	str	r3, [sp, #16]
 8022634:	e7d6      	b.n	80225e4 <mg_json_get+0x2bc>
 8022636:	9304      	str	r3, [sp, #16]
 8022638:	e7d4      	b.n	80225e4 <mg_json_get+0x2bc>
 802263a:	9304      	str	r3, [sp, #16]
 802263c:	e7d2      	b.n	80225e4 <mg_json_get+0x2bc>
          MG_EOO('}');
 802263e:	9b01      	ldr	r3, [sp, #4]
 8022640:	9a03      	ldr	r2, [sp, #12]
 8022642:	4293      	cmp	r3, r2
 8022644:	d0a7      	beq.n	8022596 <mg_json_get+0x26e>
 8022646:	f06f 0502 	mvn.w	r5, #2
 802264a:	e0ae      	b.n	80227aa <mg_json_get+0x482>
 802264c:	9b02      	ldr	r3, [sp, #8]
 802264e:	9a04      	ldr	r2, [sp, #16]
 8022650:	5c9b      	ldrb	r3, [r3, r2]
 8022652:	2b00      	cmp	r3, #0
 8022654:	d1ab      	bne.n	80225ae <mg_json_get+0x286>
 8022656:	9b01      	ldr	r3, [sp, #4]
 8022658:	9a03      	ldr	r2, [sp, #12]
 802265a:	4293      	cmp	r3, r2
 802265c:	d1a7      	bne.n	80225ae <mg_json_get+0x286>
 802265e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8022662:	f1ba 0f00 	cmp.w	sl, #0
 8022666:	d004      	beq.n	8022672 <mg_json_get+0x34a>
 8022668:	9b05      	ldr	r3, [sp, #20]
 802266a:	1ae3      	subs	r3, r4, r3
 802266c:	3301      	adds	r3, #1
 802266e:	f8ca 3000 	str.w	r3, [sl]
 8022672:	9d05      	ldr	r5, [sp, #20]
 8022674:	e099      	b.n	80227aa <mg_json_get+0x482>
          if (depth == ed && ei >= 0) ci++;
 8022676:	9b03      	ldr	r3, [sp, #12]
 8022678:	2b00      	cmp	r3, #0
 802267a:	f2c0 8092 	blt.w	80227a2 <mg_json_get+0x47a>
 802267e:	9b01      	ldr	r3, [sp, #4]
 8022680:	3301      	adds	r3, #1
 8022682:	9301      	str	r3, [sp, #4]
          expecting = S_COMMA_OR_EOO;
 8022684:	2303      	movs	r3, #3
 8022686:	e002      	b.n	802268e <mg_json_get+0x366>
        if (c == ':') {
 8022688:	2d3a      	cmp	r5, #58	@ 0x3a
 802268a:	d11d      	bne.n	80226c8 <mg_json_get+0x3a0>
          expecting = S_VALUE;
 802268c:	2300      	movs	r3, #0
  for (i = 0; i < len; i++) {
 802268e:	3401      	adds	r4, #1
 8022690:	4544      	cmp	r4, r8
 8022692:	f280 8088 	bge.w	80227a6 <mg_json_get+0x47e>
    unsigned char c = ((unsigned char *) s)[i];
 8022696:	46a2      	mov	sl, r4
 8022698:	eb06 0904 	add.w	r9, r6, r4
 802269c:	5d35      	ldrb	r5, [r6, r4]
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 802269e:	2d20      	cmp	r5, #32
 80226a0:	d0f5      	beq.n	802268e <mg_json_get+0x366>
 80226a2:	2d09      	cmp	r5, #9
 80226a4:	d0f3      	beq.n	802268e <mg_json_get+0x366>
 80226a6:	2d0a      	cmp	r5, #10
 80226a8:	d0f1      	beq.n	802268e <mg_json_get+0x366>
 80226aa:	2d0d      	cmp	r5, #13
 80226ac:	d0ef      	beq.n	802268e <mg_json_get+0x366>
    switch (expecting) {
 80226ae:	2b03      	cmp	r3, #3
 80226b0:	d8ed      	bhi.n	802268e <mg_json_get+0x366>
 80226b2:	a201      	add	r2, pc, #4	@ (adr r2, 80226b8 <mg_json_get+0x390>)
 80226b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80226b8:	0802236f 	.word	0x0802236f
 80226bc:	08022589 	.word	0x08022589
 80226c0:	08022689 	.word	0x08022689
 80226c4:	080226cf 	.word	0x080226cf
          return MG_JSON_INVALID;
 80226c8:	f06f 0501 	mvn.w	r5, #1
 80226cc:	e06d      	b.n	80227aa <mg_json_get+0x482>
        if (depth <= 0) {
 80226ce:	2f00      	cmp	r7, #0
 80226d0:	f340 808a 	ble.w	80227e8 <mg_json_get+0x4c0>
        } else if (c == ',') {
 80226d4:	2d2c      	cmp	r5, #44	@ 0x2c
 80226d6:	d01e      	beq.n	8022716 <mg_json_get+0x3ee>
        } else if (c == ']' || c == '}') {
 80226d8:	2d5d      	cmp	r5, #93	@ 0x5d
 80226da:	d002      	beq.n	80226e2 <mg_json_get+0x3ba>
 80226dc:	2d7d      	cmp	r5, #125	@ 0x7d
 80226de:	f040 8086 	bne.w	80227ee <mg_json_get+0x4c6>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 80226e2:	455f      	cmp	r7, fp
 80226e4:	d021      	beq.n	802272a <mg_json_get+0x402>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 80226e6:	455f      	cmp	r7, fp
 80226e8:	d02b      	beq.n	8022742 <mg_json_get+0x41a>
          MG_EOO('O');
 80226ea:	455f      	cmp	r7, fp
 80226ec:	d035      	beq.n	802275a <mg_json_get+0x432>
 80226ee:	3f01      	subs	r7, #1
 80226f0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80226f4:	446a      	add	r2, sp
 80226f6:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80226fa:	3202      	adds	r2, #2
 80226fc:	4295      	cmp	r5, r2
 80226fe:	d179      	bne.n	80227f4 <mg_json_get+0x4cc>
 8022700:	455f      	cmp	r7, fp
 8022702:	d037      	beq.n	8022774 <mg_json_get+0x44c>
          if (depth == ed && ei >= 0) ci++;
 8022704:	455f      	cmp	r7, fp
 8022706:	d1c2      	bne.n	802268e <mg_json_get+0x366>
 8022708:	9a03      	ldr	r2, [sp, #12]
 802270a:	2a00      	cmp	r2, #0
 802270c:	dbbf      	blt.n	802268e <mg_json_get+0x366>
 802270e:	9a01      	ldr	r2, [sp, #4]
 8022710:	3201      	adds	r2, #1
 8022712:	9201      	str	r2, [sp, #4]
 8022714:	e7bb      	b.n	802268e <mg_json_get+0x366>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8022716:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 802271a:	446b      	add	r3, sp
 802271c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8022720:	2b7b      	cmp	r3, #123	@ 0x7b
 8022722:	bf14      	ite	ne
 8022724:	2300      	movne	r3, #0
 8022726:	2301      	moveq	r3, #1
 8022728:	e7b1      	b.n	802268e <mg_json_get+0x366>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 802272a:	2d7d      	cmp	r5, #125	@ 0x7d
 802272c:	d1db      	bne.n	80226e6 <mg_json_get+0x3be>
 802272e:	9a02      	ldr	r2, [sp, #8]
 8022730:	9904      	ldr	r1, [sp, #16]
 8022732:	440a      	add	r2, r1
 8022734:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8022738:	2a2e      	cmp	r2, #46	@ 0x2e
 802273a:	d1d4      	bne.n	80226e6 <mg_json_get+0x3be>
            return MG_JSON_NOT_FOUND;
 802273c:	f06f 0502 	mvn.w	r5, #2
 8022740:	e033      	b.n	80227aa <mg_json_get+0x482>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 8022742:	2d5d      	cmp	r5, #93	@ 0x5d
 8022744:	d1d1      	bne.n	80226ea <mg_json_get+0x3c2>
 8022746:	9a02      	ldr	r2, [sp, #8]
 8022748:	9904      	ldr	r1, [sp, #16]
 802274a:	440a      	add	r2, r1
 802274c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8022750:	2a2c      	cmp	r2, #44	@ 0x2c
 8022752:	d1ca      	bne.n	80226ea <mg_json_get+0x3c2>
            return MG_JSON_NOT_FOUND;
 8022754:	f06f 0502 	mvn.w	r5, #2
 8022758:	e027      	b.n	80227aa <mg_json_get+0x482>
          MG_EOO('O');
 802275a:	9a01      	ldr	r2, [sp, #4]
 802275c:	9903      	ldr	r1, [sp, #12]
 802275e:	428a      	cmp	r2, r1
 8022760:	d0c5      	beq.n	80226ee <mg_json_get+0x3c6>
 8022762:	f06f 0502 	mvn.w	r5, #2
 8022766:	e020      	b.n	80227aa <mg_json_get+0x482>
 8022768:	080361c0 	.word	0x080361c0
 802276c:	08039454 	.word	0x08039454
 8022770:	080361c8 	.word	0x080361c8
 8022774:	9a02      	ldr	r2, [sp, #8]
 8022776:	9904      	ldr	r1, [sp, #16]
 8022778:	5c52      	ldrb	r2, [r2, r1]
 802277a:	2a00      	cmp	r2, #0
 802277c:	d1c2      	bne.n	8022704 <mg_json_get+0x3dc>
 802277e:	9a01      	ldr	r2, [sp, #4]
 8022780:	9903      	ldr	r1, [sp, #12]
 8022782:	428a      	cmp	r2, r1
 8022784:	d1be      	bne.n	8022704 <mg_json_get+0x3dc>
 8022786:	f8dd a018 	ldr.w	sl, [sp, #24]
 802278a:	f1ba 0f00 	cmp.w	sl, #0
 802278e:	d004      	beq.n	802279a <mg_json_get+0x472>
 8022790:	9b05      	ldr	r3, [sp, #20]
 8022792:	1ae3      	subs	r3, r4, r3
 8022794:	3301      	adds	r3, #1
 8022796:	f8ca 3000 	str.w	r3, [sl]
 802279a:	9d05      	ldr	r5, [sp, #20]
 802279c:	e005      	b.n	80227aa <mg_json_get+0x482>
        expecting = S_COMMA_OR_EOO;
 802279e:	2303      	movs	r3, #3
 80227a0:	e775      	b.n	802268e <mg_json_get+0x366>
          expecting = S_COMMA_OR_EOO;
 80227a2:	2303      	movs	r3, #3
 80227a4:	e773      	b.n	802268e <mg_json_get+0x366>
  return MG_JSON_NOT_FOUND;
 80227a6:	f06f 0502 	mvn.w	r5, #2
}
 80227aa:	4628      	mov	r0, r5
 80227ac:	b015      	add	sp, #84	@ 0x54
 80227ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (path[0] != '$') return MG_JSON_INVALID;
 80227b2:	f06f 0501 	mvn.w	r5, #1
 80227b6:	e7f8      	b.n	80227aa <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80227b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80227bc:	e7f5      	b.n	80227aa <mg_json_get+0x482>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80227be:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80227c2:	e7f2      	b.n	80227aa <mg_json_get+0x482>
          MG_EOO(']');
 80227c4:	f06f 0501 	mvn.w	r5, #1
 80227c8:	e7ef      	b.n	80227aa <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80227ca:	f06f 0501 	mvn.w	r5, #1
 80227ce:	e7ec      	b.n	80227aa <mg_json_get+0x482>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 80227d0:	f06f 0502 	mvn.w	r5, #2
 80227d4:	e7e9      	b.n	80227aa <mg_json_get+0x482>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 80227d6:	f06f 0502 	mvn.w	r5, #2
 80227da:	e7e6      	b.n	80227aa <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80227dc:	f06f 0501 	mvn.w	r5, #1
 80227e0:	e7e3      	b.n	80227aa <mg_json_get+0x482>
          MG_EOO('}');
 80227e2:	f06f 0501 	mvn.w	r5, #1
 80227e6:	e7e0      	b.n	80227aa <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80227e8:	f06f 0501 	mvn.w	r5, #1
 80227ec:	e7dd      	b.n	80227aa <mg_json_get+0x482>
          return MG_JSON_INVALID;
 80227ee:	f06f 0501 	mvn.w	r5, #1
 80227f2:	e7da      	b.n	80227aa <mg_json_get+0x482>
          MG_EOO('O');
 80227f4:	f06f 0501 	mvn.w	r5, #1
 80227f8:	e7d7      	b.n	80227aa <mg_json_get+0x482>
 80227fa:	bf00      	nop

080227fc <mg_json_get_num>:
bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 80227fc:	b510      	push	{r4, lr}
 80227fe:	b084      	sub	sp, #16
 8022800:	46ec      	mov	ip, sp
 8022802:	e88c 0003 	stmia.w	ip, {r0, r1}
 8022806:	461c      	mov	r4, r3
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8022808:	ab03      	add	r3, sp, #12
 802280a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802280e:	f7ff fd8b 	bl	8022328 <mg_json_get>
 8022812:	1e02      	subs	r2, r0, #0
 8022814:	db11      	blt.n	802283a <mg_json_get_num+0x3e>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8022816:	9b00      	ldr	r3, [sp, #0]
 8022818:	1898      	adds	r0, r3, r2
 802281a:	5c9a      	ldrb	r2, [r3, r2]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 802281c:	2a2d      	cmp	r2, #45	@ 0x2d
 802281e:	d003      	beq.n	8022828 <mg_json_get_num+0x2c>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 8022820:	3a30      	subs	r2, #48	@ 0x30
 8022822:	b2d2      	uxtb	r2, r2
 8022824:	2a09      	cmp	r2, #9
 8022826:	d80b      	bhi.n	8022840 <mg_json_get_num+0x44>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 8022828:	b164      	cbz	r4, 8022844 <mg_json_get_num+0x48>
 802282a:	2200      	movs	r2, #0
 802282c:	9903      	ldr	r1, [sp, #12]
 802282e:	f7fd faef 	bl	801fe10 <mg_atod>
 8022832:	ed84 0b00 	vstr	d0, [r4]
    found = 1;
 8022836:	2001      	movs	r0, #1
 8022838:	e000      	b.n	802283c <mg_json_get_num+0x40>
  int n, toklen, found = 0;
 802283a:	2000      	movs	r0, #0
}
 802283c:	b004      	add	sp, #16
 802283e:	bd10      	pop	{r4, pc}
  int n, toklen, found = 0;
 8022840:	2000      	movs	r0, #0
 8022842:	e7fb      	b.n	802283c <mg_json_get_num+0x40>
    found = 1;
 8022844:	2001      	movs	r0, #1
 8022846:	e7f9      	b.n	802283c <mg_json_get_num+0x40>

08022848 <mg_json_get_bool>:
bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8022848:	b510      	push	{r4, lr}
 802284a:	b082      	sub	sp, #8
 802284c:	46ec      	mov	ip, sp
 802284e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8022852:	461c      	mov	r4, r3
  int found = 0, off = mg_json_get(json, path, NULL);
 8022854:	2300      	movs	r3, #0
 8022856:	e89c 0003 	ldmia.w	ip, {r0, r1}
 802285a:	f7ff fd65 	bl	8022328 <mg_json_get>
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 802285e:	2800      	cmp	r0, #0
 8022860:	db0f      	blt.n	8022882 <mg_json_get_bool+0x3a>
 8022862:	9b00      	ldr	r3, [sp, #0]
 8022864:	5c1b      	ldrb	r3, [r3, r0]
 8022866:	2b74      	cmp	r3, #116	@ 0x74
 8022868:	d003      	beq.n	8022872 <mg_json_get_bool+0x2a>
 802286a:	2b66      	cmp	r3, #102	@ 0x66
 802286c:	d001      	beq.n	8022872 <mg_json_get_bool+0x2a>
  int found = 0, off = mg_json_get(json, path, NULL);
 802286e:	2000      	movs	r0, #0
 8022870:	e008      	b.n	8022884 <mg_json_get_bool+0x3c>
    if (v != NULL) *v = json.buf[off] == 't';
 8022872:	b14c      	cbz	r4, 8022888 <mg_json_get_bool+0x40>
 8022874:	2b74      	cmp	r3, #116	@ 0x74
 8022876:	bf14      	ite	ne
 8022878:	2300      	movne	r3, #0
 802287a:	2301      	moveq	r3, #1
 802287c:	7023      	strb	r3, [r4, #0]
    found = 1;
 802287e:	2001      	movs	r0, #1
 8022880:	e000      	b.n	8022884 <mg_json_get_bool+0x3c>
  int found = 0, off = mg_json_get(json, path, NULL);
 8022882:	2000      	movs	r0, #0
}
 8022884:	b002      	add	sp, #8
 8022886:	bd10      	pop	{r4, pc}
    found = 1;
 8022888:	2001      	movs	r0, #1
 802288a:	e7fb      	b.n	8022884 <mg_json_get_bool+0x3c>

0802288c <mg_hexdump>:
void mg_hexdump(const void *buf, size_t len) {
 802288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802288e:	b085      	sub	sp, #20
 8022890:	4606      	mov	r6, r0
 8022892:	460f      	mov	r7, r1
  for (i = 0; i < len; i++) {
 8022894:	2500      	movs	r5, #0
  unsigned char ascii[16], alen = 0;
 8022896:	462c      	mov	r4, r5
  for (i = 0; i < len; i++) {
 8022898:	e038      	b.n	802290c <mg_hexdump+0x80>
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 802289a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802289e:	f7fd fbc9 	bl	8020034 <nibble>
 80228a2:	f7fd fbaf 	bl	8020004 <logc>
 80228a6:	f3c5 2003 	ubfx	r0, r5, #8, #4
 80228aa:	f7fd fbc3 	bl	8020034 <nibble>
 80228ae:	f7fd fba9 	bl	8020004 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80228b2:	f3c5 1003 	ubfx	r0, r5, #4, #4
 80228b6:	f7fd fbbd 	bl	8020034 <nibble>
 80228ba:	f7fd fba3 	bl	8020004 <logc>
 80228be:	2030      	movs	r0, #48	@ 0x30
 80228c0:	f7fd fba0 	bl	8020004 <logc>
 80228c4:	2103      	movs	r1, #3
 80228c6:	4829      	ldr	r0, [pc, #164]	@ (802296c <mg_hexdump+0xe0>)
 80228c8:	f7fd fba8 	bl	802001c <logs>
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80228cc:	5d70      	ldrb	r0, [r6, r5]
 80228ce:	0900      	lsrs	r0, r0, #4
 80228d0:	f7fd fbb0 	bl	8020034 <nibble>
 80228d4:	f7fd fb96 	bl	8020004 <logc>
 80228d8:	5d70      	ldrb	r0, [r6, r5]
 80228da:	f000 000f 	and.w	r0, r0, #15
 80228de:	f7fd fba9 	bl	8020034 <nibble>
 80228e2:	f7fd fb8f 	bl	8020004 <logc>
    logc(' ');                                         // Space after hex number
 80228e6:	2020      	movs	r0, #32
 80228e8:	f7fd fb8c 	bl	8020004 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80228ec:	5d72      	ldrb	r2, [r6, r5]
 80228ee:	f1a2 0320 	sub.w	r3, r2, #32
 80228f2:	b2db      	uxtb	r3, r3
 80228f4:	2b5e      	cmp	r3, #94	@ 0x5e
 80228f6:	d900      	bls.n	80228fa <mg_hexdump+0x6e>
 80228f8:	222e      	movs	r2, #46	@ 0x2e
 80228fa:	1c63      	adds	r3, r4, #1
 80228fc:	f104 0110 	add.w	r1, r4, #16
 8022900:	eb0d 0401 	add.w	r4, sp, r1
 8022904:	f804 2c10 	strb.w	r2, [r4, #-16]
  for (i = 0; i < len; i++) {
 8022908:	3501      	adds	r5, #1
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 802290a:	b2dc      	uxtb	r4, r3
  for (i = 0; i < len; i++) {
 802290c:	42bd      	cmp	r5, r7
 802290e:	d21e      	bcs.n	802294e <mg_hexdump+0xc2>
    if ((i % 16) == 0) {
 8022910:	f015 0f0f 	tst.w	r5, #15
 8022914:	d1da      	bne.n	80228cc <mg_hexdump+0x40>
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8022916:	2d00      	cmp	r5, #0
 8022918:	d0bf      	beq.n	802289a <mg_hexdump+0xe>
 802291a:	2102      	movs	r1, #2
 802291c:	4814      	ldr	r0, [pc, #80]	@ (8022970 <mg_hexdump+0xe4>)
 802291e:	f7fd fb7d 	bl	802001c <logs>
 8022922:	2110      	movs	r1, #16
 8022924:	4668      	mov	r0, sp
 8022926:	f7fd fb79 	bl	802001c <logs>
 802292a:	200a      	movs	r0, #10
 802292c:	f7fd fb6a 	bl	8020004 <logc>
 8022930:	2400      	movs	r4, #0
 8022932:	e7b2      	b.n	802289a <mg_hexdump+0xe>
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8022934:	2103      	movs	r1, #3
 8022936:	480d      	ldr	r0, [pc, #52]	@ (802296c <mg_hexdump+0xe0>)
 8022938:	f7fd fb70 	bl	802001c <logs>
 802293c:	1c63      	adds	r3, r4, #1
 802293e:	f104 0210 	add.w	r2, r4, #16
 8022942:	eb0d 0402 	add.w	r4, sp, r2
 8022946:	2220      	movs	r2, #32
 8022948:	f804 2c10 	strb.w	r2, [r4, #-16]
 802294c:	b2dc      	uxtb	r4, r3
 802294e:	2c0f      	cmp	r4, #15
 8022950:	d9f0      	bls.n	8022934 <mg_hexdump+0xa8>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8022952:	2102      	movs	r1, #2
 8022954:	4806      	ldr	r0, [pc, #24]	@ (8022970 <mg_hexdump+0xe4>)
 8022956:	f7fd fb61 	bl	802001c <logs>
 802295a:	2110      	movs	r1, #16
 802295c:	4668      	mov	r0, sp
 802295e:	f7fd fb5d 	bl	802001c <logs>
 8022962:	200a      	movs	r0, #10
 8022964:	f7fd fb4e 	bl	8020004 <logc>
}
 8022968:	b005      	add	sp, #20
 802296a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802296c:	08039460 	.word	0x08039460
 8022970:	0803945c 	.word	0x0803945c

08022974 <mg_md5_init>:
  ctx->buf[0] = 0x67452301;
 8022974:	4b09      	ldr	r3, [pc, #36]	@ (802299c <mg_md5_init+0x28>)
 8022976:	6003      	str	r3, [r0, #0]
  ctx->buf[1] = 0xefcdab89;
 8022978:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 802297c:	6043      	str	r3, [r0, #4]
  ctx->buf[2] = 0x98badcfe;
 802297e:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8022982:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8022986:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 802298a:	6083      	str	r3, [r0, #8]
  ctx->buf[3] = 0x10325476;
 802298c:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8022990:	60c3      	str	r3, [r0, #12]
  ctx->bits[0] = 0;
 8022992:	2300      	movs	r3, #0
 8022994:	6103      	str	r3, [r0, #16]
  ctx->bits[1] = 0;
 8022996:	6143      	str	r3, [r0, #20]
}
 8022998:	4770      	bx	lr
 802299a:	bf00      	nop
 802299c:	67452301 	.word	0x67452301

080229a0 <mg_md5_update>:
void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 80229a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80229a4:	4606      	mov	r6, r0
 80229a6:	460c      	mov	r4, r1
 80229a8:	4615      	mov	r5, r2
  t = ctx->bits[0];
 80229aa:	6903      	ldr	r3, [r0, #16]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 80229ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80229b0:	6102      	str	r2, [r0, #16]
 80229b2:	429a      	cmp	r2, r3
 80229b4:	d202      	bcs.n	80229bc <mg_md5_update+0x1c>
 80229b6:	6942      	ldr	r2, [r0, #20]
 80229b8:	3201      	adds	r2, #1
 80229ba:	6142      	str	r2, [r0, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 80229bc:	6972      	ldr	r2, [r6, #20]
 80229be:	eb02 7255 	add.w	r2, r2, r5, lsr #29
 80229c2:	6172      	str	r2, [r6, #20]
  t = (t >> 3) & 0x3f;
 80229c4:	f3c3 07c5 	ubfx	r7, r3, #3, #6
  if (t) {
 80229c8:	f413 7ffc 	tst.w	r3, #504	@ 0x1f8
 80229cc:	d035      	beq.n	8022a3a <mg_md5_update+0x9a>
    unsigned char *p = (unsigned char *) ctx->in + t;
 80229ce:	f106 0918 	add.w	r9, r6, #24
 80229d2:	eb09 0007 	add.w	r0, r9, r7
    t = 64 - t;
 80229d6:	f1c7 0840 	rsb	r8, r7, #64	@ 0x40
    if (len < t) {
 80229da:	4545      	cmp	r5, r8
 80229dc:	d30b      	bcc.n	80229f6 <mg_md5_update+0x56>
    memcpy(p, buf, t);
 80229de:	4642      	mov	r2, r8
 80229e0:	4621      	mov	r1, r4
 80229e2:	f00a fd41 	bl	802d468 <memcpy>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 80229e6:	4649      	mov	r1, r9
 80229e8:	4630      	mov	r0, r6
 80229ea:	f7fd fb2d 	bl	8020048 <mg_md5_transform>
    buf += t;
 80229ee:	4444      	add	r4, r8
    len -= t;
 80229f0:	3f40      	subs	r7, #64	@ 0x40
 80229f2:	443d      	add	r5, r7
 80229f4:	e021      	b.n	8022a3a <mg_md5_update+0x9a>
      memcpy(p, buf, len);
 80229f6:	462a      	mov	r2, r5
 80229f8:	4621      	mov	r1, r4
 80229fa:	f00a fd35 	bl	802d468 <memcpy>
      return;
 80229fe:	e024      	b.n	8022a4a <mg_md5_update+0xaa>
    memcpy(ctx->in, buf, 64);
 8022a00:	f106 0118 	add.w	r1, r6, #24
 8022a04:	4623      	mov	r3, r4
 8022a06:	468c      	mov	ip, r1
 8022a08:	f104 0840 	add.w	r8, r4, #64	@ 0x40
 8022a0c:	681f      	ldr	r7, [r3, #0]
 8022a0e:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8022a12:	6898      	ldr	r0, [r3, #8]
 8022a14:	68da      	ldr	r2, [r3, #12]
 8022a16:	f8cc 7000 	str.w	r7, [ip]
 8022a1a:	f8cc e004 	str.w	lr, [ip, #4]
 8022a1e:	f8cc 0008 	str.w	r0, [ip, #8]
 8022a22:	f8cc 200c 	str.w	r2, [ip, #12]
 8022a26:	3310      	adds	r3, #16
 8022a28:	f10c 0c10 	add.w	ip, ip, #16
 8022a2c:	4543      	cmp	r3, r8
 8022a2e:	d1ed      	bne.n	8022a0c <mg_md5_update+0x6c>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022a30:	4630      	mov	r0, r6
 8022a32:	f7fd fb09 	bl	8020048 <mg_md5_transform>
    buf += 64;
 8022a36:	3440      	adds	r4, #64	@ 0x40
    len -= 64;
 8022a38:	3d40      	subs	r5, #64	@ 0x40
  while (len >= 64) {
 8022a3a:	2d3f      	cmp	r5, #63	@ 0x3f
 8022a3c:	d8e0      	bhi.n	8022a00 <mg_md5_update+0x60>
  memcpy(ctx->in, buf, len);
 8022a3e:	462a      	mov	r2, r5
 8022a40:	4621      	mov	r1, r4
 8022a42:	f106 0018 	add.w	r0, r6, #24
 8022a46:	f00a fd0f 	bl	802d468 <memcpy>
}
 8022a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08022a4e <mg_md5_final>:
void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 8022a4e:	b570      	push	{r4, r5, r6, lr}
 8022a50:	4604      	mov	r4, r0
 8022a52:	460d      	mov	r5, r1
  count = (ctx->bits[0] >> 3) & 0x3F;
 8022a54:	6903      	ldr	r3, [r0, #16]
 8022a56:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  p = ctx->in + count;
 8022a5a:	f100 0618 	add.w	r6, r0, #24
 8022a5e:	18f0      	adds	r0, r6, r3
  *p++ = 0x80;
 8022a60:	3001      	adds	r0, #1
 8022a62:	2280      	movs	r2, #128	@ 0x80
 8022a64:	54f2      	strb	r2, [r6, r3]
  count = 64 - 1 - count;
 8022a66:	f1c3 023f 	rsb	r2, r3, #63	@ 0x3f
  if (count < 8) {
 8022a6a:	2a07      	cmp	r2, #7
 8022a6c:	d821      	bhi.n	8022ab2 <mg_md5_final+0x64>
    memset(p, 0, count);
 8022a6e:	2100      	movs	r1, #0
 8022a70:	f009 fabe 	bl	802bff0 <memset>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022a74:	4631      	mov	r1, r6
 8022a76:	4620      	mov	r0, r4
 8022a78:	f7fd fae6 	bl	8020048 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 8022a7c:	2238      	movs	r2, #56	@ 0x38
 8022a7e:	2100      	movs	r1, #0
 8022a80:	4630      	mov	r0, r6
 8022a82:	f009 fab5 	bl	802bff0 <memset>
  a[14] = ctx->bits[0];
 8022a86:	6923      	ldr	r3, [r4, #16]
 8022a88:	6523      	str	r3, [r4, #80]	@ 0x50
  a[15] = ctx->bits[1];
 8022a8a:	6963      	ldr	r3, [r4, #20]
 8022a8c:	6563      	str	r3, [r4, #84]	@ 0x54
  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 8022a8e:	4631      	mov	r1, r6
 8022a90:	4620      	mov	r0, r4
 8022a92:	f7fd fad9 	bl	8020048 <mg_md5_transform>
  memcpy(digest, ctx->buf, 16);
 8022a96:	6820      	ldr	r0, [r4, #0]
 8022a98:	6861      	ldr	r1, [r4, #4]
 8022a9a:	68a2      	ldr	r2, [r4, #8]
 8022a9c:	68e3      	ldr	r3, [r4, #12]
 8022a9e:	6028      	str	r0, [r5, #0]
 8022aa0:	6069      	str	r1, [r5, #4]
 8022aa2:	60aa      	str	r2, [r5, #8]
 8022aa4:	60eb      	str	r3, [r5, #12]
  memset((char *) ctx, 0, sizeof(*ctx));
 8022aa6:	2258      	movs	r2, #88	@ 0x58
 8022aa8:	2100      	movs	r1, #0
 8022aaa:	4620      	mov	r0, r4
 8022aac:	f009 faa0 	bl	802bff0 <memset>
}
 8022ab0:	bd70      	pop	{r4, r5, r6, pc}
    memset(p, 0, count - 8);
 8022ab2:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8022ab6:	2100      	movs	r1, #0
 8022ab8:	f009 fa9a 	bl	802bff0 <memset>
 8022abc:	e7e3      	b.n	8022a86 <mg_md5_final+0x38>

08022abe <mg_mqtt_parse>:
                  struct mg_mqtt_message *m) {
 8022abe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ac2:	4604      	mov	r4, r0
 8022ac4:	460d      	mov	r5, r1
 8022ac6:	4617      	mov	r7, r2
 8022ac8:	461e      	mov	r6, r3
  memset(m, 0, sizeof(*m));
 8022aca:	2228      	movs	r2, #40	@ 0x28
 8022acc:	2100      	movs	r1, #0
 8022ace:	4618      	mov	r0, r3
 8022ad0:	f009 fa8e 	bl	802bff0 <memset>
  m->dgram.buf = (char *) buf;
 8022ad4:	6134      	str	r4, [r6, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8022ad6:	2d01      	cmp	r5, #1
 8022ad8:	f240 8088 	bls.w	8022bec <mg_mqtt_parse+0x12e>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8022adc:	7820      	ldrb	r0, [r4, #0]
 8022ade:	0900      	lsrs	r0, r0, #4
 8022ae0:	76b0      	strb	r0, [r6, #26]
  m->qos = (buf[0] >> 1) & 3;
 8022ae2:	46a4      	mov	ip, r4
 8022ae4:	f81c 9b01 	ldrb.w	r9, [ip], #1
 8022ae8:	f3c9 0941 	ubfx	r9, r9, #1, #2
 8022aec:	f886 901b 	strb.w	r9, [r6, #27]
  n = len_len = 0;
 8022af0:	2300      	movs	r3, #0
 8022af2:	4619      	mov	r1, r3
  uint8_t lc = 0, *p, *end;
 8022af4:	461a      	mov	r2, r3
  while ((size_t) (p - buf) < len) {
 8022af6:	ebac 0e04 	sub.w	lr, ip, r4
 8022afa:	45ae      	cmp	lr, r5
 8022afc:	d211      	bcs.n	8022b22 <mg_mqtt_parse+0x64>
    lc = *((uint8_t *) p++);
 8022afe:	f81c 2b01 	ldrb.w	r2, [ip], #1
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8022b02:	f002 0e7f 	and.w	lr, r2, #127	@ 0x7f
 8022b06:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
 8022b0a:	fa0e fe08 	lsl.w	lr, lr, r8
 8022b0e:	4471      	add	r1, lr
    len_len++;
 8022b10:	3301      	adds	r3, #1
    if (!(lc & 0x80)) break;
 8022b12:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8022b16:	d004      	beq.n	8022b22 <mg_mqtt_parse+0x64>
    if (len_len >= 4) return MQTT_MALFORMED;
 8022b18:	2b03      	cmp	r3, #3
 8022b1a:	d9ec      	bls.n	8022af6 <mg_mqtt_parse+0x38>
 8022b1c:	2002      	movs	r0, #2
}
 8022b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  end = p + n;
 8022b22:	eb0c 0801 	add.w	r8, ip, r1
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8022b26:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8022b2a:	d161      	bne.n	8022bf0 <mg_mqtt_parse+0x132>
 8022b2c:	4425      	add	r5, r4
 8022b2e:	4545      	cmp	r5, r8
 8022b30:	d360      	bcc.n	8022bf4 <mg_mqtt_parse+0x136>
  m->dgram.len = (size_t) (end - buf);
 8022b32:	eba8 0304 	sub.w	r3, r8, r4
 8022b36:	6173      	str	r3, [r6, #20]
  switch (m->cmd) {
 8022b38:	2803      	cmp	r0, #3
 8022b3a:	d01c      	beq.n	8022b76 <mg_mqtt_parse+0xb8>
 8022b3c:	d80a      	bhi.n	8022b54 <mg_mqtt_parse+0x96>
 8022b3e:	2802      	cmp	r0, #2
 8022b40:	d106      	bne.n	8022b50 <mg_mqtt_parse+0x92>
      if (end - p < 2) return MQTT_MALFORMED;
 8022b42:	2901      	cmp	r1, #1
 8022b44:	dd5a      	ble.n	8022bfc <mg_mqtt_parse+0x13e>
      m->ack = p[1];
 8022b46:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022b4a:	7733      	strb	r3, [r6, #28]
  return MQTT_OK;
 8022b4c:	2000      	movs	r0, #0
      break;
 8022b4e:	e7e6      	b.n	8022b1e <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8022b50:	2000      	movs	r0, #0
 8022b52:	e7e4      	b.n	8022b1e <mg_mqtt_parse+0x60>
 8022b54:	3804      	subs	r0, #4
 8022b56:	b2c0      	uxtb	r0, r0
 8022b58:	2807      	cmp	r0, #7
 8022b5a:	d84d      	bhi.n	8022bf8 <mg_mqtt_parse+0x13a>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022b5c:	f10c 0302 	add.w	r3, ip, #2
 8022b60:	4543      	cmp	r3, r8
 8022b62:	d84d      	bhi.n	8022c00 <mg_mqtt_parse+0x142>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8022b64:	f89c 2000 	ldrb.w	r2, [ip]
 8022b68:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022b6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022b70:	8333      	strh	r3, [r6, #24]
  return MQTT_OK;
 8022b72:	2000      	movs	r0, #0
      break;
 8022b74:	e7d3      	b.n	8022b1e <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022b76:	f10c 0202 	add.w	r2, ip, #2
 8022b7a:	4542      	cmp	r2, r8
 8022b7c:	d842      	bhi.n	8022c04 <mg_mqtt_parse+0x146>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8022b7e:	f89c 1000 	ldrb.w	r1, [ip]
 8022b82:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022b86:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8022b8a:	6073      	str	r3, [r6, #4]
      m->topic.buf = (char *) p + 2;
 8022b8c:	6032      	str	r2, [r6, #0]
      p += 2 + m->topic.len;
 8022b8e:	3302      	adds	r3, #2
 8022b90:	eb0c 0503 	add.w	r5, ip, r3
      if (p > end) return MQTT_MALFORMED;
 8022b94:	45a8      	cmp	r8, r5
 8022b96:	d337      	bcc.n	8022c08 <mg_mqtt_parse+0x14a>
      if (m->qos > 0) {
 8022b98:	f1b9 0f00 	cmp.w	r9, #0
 8022b9c:	d008      	beq.n	8022bb0 <mg_mqtt_parse+0xf2>
        if (p + 2 > end) return MQTT_MALFORMED;
 8022b9e:	1caa      	adds	r2, r5, #2
 8022ba0:	4542      	cmp	r2, r8
 8022ba2:	d833      	bhi.n	8022c0c <mg_mqtt_parse+0x14e>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8022ba4:	7829      	ldrb	r1, [r5, #0]
 8022ba6:	786b      	ldrb	r3, [r5, #1]
 8022ba8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8022bac:	8333      	strh	r3, [r6, #24]
        p += 2;
 8022bae:	4615      	mov	r5, r2
      if (p > end) return MQTT_MALFORMED;
 8022bb0:	4545      	cmp	r5, r8
 8022bb2:	d82d      	bhi.n	8022c10 <mg_mqtt_parse+0x152>
      if (version == 5 && p + 2 < end) {
 8022bb4:	2f05      	cmp	r7, #5
 8022bb6:	d007      	beq.n	8022bc8 <mg_mqtt_parse+0x10a>
      if (p > end) return MQTT_MALFORMED;
 8022bb8:	4545      	cmp	r5, r8
 8022bba:	d82d      	bhi.n	8022c18 <mg_mqtt_parse+0x15a>
      m->data.buf = (char *) p;
 8022bbc:	60b5      	str	r5, [r6, #8]
      m->data.len = (size_t) (end - p);
 8022bbe:	eba8 0505 	sub.w	r5, r8, r5
 8022bc2:	60f5      	str	r5, [r6, #12]
  return MQTT_OK;
 8022bc4:	2000      	movs	r0, #0
      break;
 8022bc6:	e7aa      	b.n	8022b1e <mg_mqtt_parse+0x60>
      if (version == 5 && p + 2 < end) {
 8022bc8:	1cab      	adds	r3, r5, #2
 8022bca:	4543      	cmp	r3, r8
 8022bcc:	d2f4      	bcs.n	8022bb8 <mg_mqtt_parse+0xfa>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8022bce:	f106 0224 	add.w	r2, r6, #36	@ 0x24
 8022bd2:	eba8 0105 	sub.w	r1, r8, r5
 8022bd6:	4628      	mov	r0, r5
 8022bd8:	f7fd fdde 	bl	8020798 <decode_varint>
        if (!len_len) return MQTT_MALFORMED;
 8022bdc:	b1d0      	cbz	r0, 8022c14 <mg_mqtt_parse+0x156>
        m->props_start = (size_t) (p + len_len - buf);
 8022bde:	182b      	adds	r3, r5, r0
 8022be0:	1b1b      	subs	r3, r3, r4
 8022be2:	6233      	str	r3, [r6, #32]
        p += len_len + m->props_size;
 8022be4:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8022be6:	4403      	add	r3, r0
 8022be8:	441d      	add	r5, r3
 8022bea:	e7e5      	b.n	8022bb8 <mg_mqtt_parse+0xfa>
  if (len < 2) return MQTT_INCOMPLETE;
 8022bec:	2001      	movs	r0, #1
 8022bee:	e796      	b.n	8022b1e <mg_mqtt_parse+0x60>
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8022bf0:	2001      	movs	r0, #1
 8022bf2:	e794      	b.n	8022b1e <mg_mqtt_parse+0x60>
 8022bf4:	2001      	movs	r0, #1
 8022bf6:	e792      	b.n	8022b1e <mg_mqtt_parse+0x60>
  switch (m->cmd) {
 8022bf8:	2000      	movs	r0, #0
 8022bfa:	e790      	b.n	8022b1e <mg_mqtt_parse+0x60>
      if (end - p < 2) return MQTT_MALFORMED;
 8022bfc:	2002      	movs	r0, #2
 8022bfe:	e78e      	b.n	8022b1e <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022c00:	2002      	movs	r0, #2
 8022c02:	e78c      	b.n	8022b1e <mg_mqtt_parse+0x60>
      if (p + 2 > end) return MQTT_MALFORMED;
 8022c04:	2002      	movs	r0, #2
 8022c06:	e78a      	b.n	8022b1e <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022c08:	2002      	movs	r0, #2
 8022c0a:	e788      	b.n	8022b1e <mg_mqtt_parse+0x60>
        if (p + 2 > end) return MQTT_MALFORMED;
 8022c0c:	2002      	movs	r0, #2
 8022c0e:	e786      	b.n	8022b1e <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022c10:	2002      	movs	r0, #2
 8022c12:	e784      	b.n	8022b1e <mg_mqtt_parse+0x60>
        if (!len_len) return MQTT_MALFORMED;
 8022c14:	2002      	movs	r0, #2
 8022c16:	e782      	b.n	8022b1e <mg_mqtt_parse+0x60>
      if (p > end) return MQTT_MALFORMED;
 8022c18:	2002      	movs	r0, #2
 8022c1a:	e780      	b.n	8022b1e <mg_mqtt_parse+0x60>

08022c1c <mg_alloc_conn>:
struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8022c1c:	b510      	push	{r4, lr}
 8022c1e:	4604      	mov	r4, r0
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8022c20:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8022c22:	31b0      	adds	r1, #176	@ 0xb0
 8022c24:	2001      	movs	r0, #1
 8022c26:	f7ff f95f 	bl	8021ee8 <mg_calloc>
  if (c != NULL) {
 8022c2a:	4603      	mov	r3, r0
 8022c2c:	b148      	cbz	r0, 8022c42 <mg_alloc_conn+0x26>
    c->mgr = mgr;
 8022c2e:	6044      	str	r4, [r0, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 8022c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022c34:	6742      	str	r2, [r0, #116]	@ 0x74
 8022c36:	6442      	str	r2, [r0, #68]	@ 0x44
 8022c38:	6542      	str	r2, [r0, #84]	@ 0x54
    c->id = ++mgr->nextid;
 8022c3a:	69e2      	ldr	r2, [r4, #28]
 8022c3c:	3201      	adds	r2, #1
 8022c3e:	61e2      	str	r2, [r4, #28]
 8022c40:	6342      	str	r2, [r0, #52]	@ 0x34
}
 8022c42:	4618      	mov	r0, r3
 8022c44:	bd10      	pop	{r4, pc}
	...

08022c48 <mg_mgr_init>:
void mg_mgr_init(struct mg_mgr *mgr) {
 8022c48:	b510      	push	{r4, lr}
 8022c4a:	4604      	mov	r4, r0
  memset(mgr, 0, sizeof(*mgr));
 8022c4c:	2248      	movs	r2, #72	@ 0x48
 8022c4e:	2100      	movs	r1, #0
 8022c50:	f009 f9ce 	bl	802bff0 <memset>
  mgr->epoll_fd = -1;
 8022c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022c58:	63a3      	str	r3, [r4, #56]	@ 0x38
  mgr->pipe = MG_INVALID_SOCKET;
 8022c5a:	6463      	str	r3, [r4, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 8022c5c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8022c60:	6163      	str	r3, [r4, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8022c62:	4b02      	ldr	r3, [pc, #8]	@ (8022c6c <mg_mgr_init+0x24>)
 8022c64:	6063      	str	r3, [r4, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8022c66:	4b02      	ldr	r3, [pc, #8]	@ (8022c70 <mg_mgr_init+0x28>)
 8022c68:	60e3      	str	r3, [r4, #12]
}
 8022c6a:	bd10      	pop	{r4, pc}
 8022c6c:	08039464 	.word	0x08039464
 8022c70:	08039478 	.word	0x08039478

08022c74 <mg_snprintf>:
size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8022c74:	b40c      	push	{r2, r3}
 8022c76:	b500      	push	{lr}
 8022c78:	b083      	sub	sp, #12
 8022c7a:	ab04      	add	r3, sp, #16
 8022c7c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8022c80:	9301      	str	r3, [sp, #4]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8022c82:	ab01      	add	r3, sp, #4
 8022c84:	f000 fce0 	bl	8023648 <mg_vsnprintf>
}
 8022c88:	b003      	add	sp, #12
 8022c8a:	f85d eb04 	ldr.w	lr, [sp], #4
 8022c8e:	b002      	add	sp, #8
 8022c90:	4770      	bx	lr
 8022c92:	0000      	movs	r0, r0
 8022c94:	0000      	movs	r0, r0
	...

08022c98 <mg_dtoa>:
static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8022c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c9c:	b093      	sub	sp, #76	@ 0x4c
 8022c9e:	9005      	str	r0, [sp, #20]
 8022ca0:	9106      	str	r1, [sp, #24]
 8022ca2:	ec51 0b10 	vmov	r0, r1, d0
 8022ca6:	ed8d 0b02 	vstr	d0, [sp, #8]
 8022caa:	4690      	mov	r8, r2
 8022cac:	9307      	str	r3, [sp, #28]
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8022cae:	2200      	movs	r2, #0
 8022cb0:	2300      	movs	r3, #0
 8022cb2:	f7ed ff21 	bl	8010af8 <__aeabi_dcmpeq>
 8022cb6:	b9c8      	cbnz	r0, 8022cec <mg_dtoa+0x54>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8022cb8:	ed9d 0b02 	vldr	d0, [sp, #8]
 8022cbc:	f7fc fb1c 	bl	801f2f8 <xisinf>
 8022cc0:	b9d8      	cbnz	r0, 8022cfa <mg_dtoa+0x62>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8022cc2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8022cc6:	f7fc fb29 	bl	801f31c <xisnan>
 8022cca:	4606      	mov	r6, r0
 8022ccc:	bb28      	cbnz	r0, 8022d1a <mg_dtoa+0x82>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8022cce:	2200      	movs	r2, #0
 8022cd0:	2300      	movs	r3, #0
 8022cd2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8022cd6:	4620      	mov	r0, r4
 8022cd8:	4629      	mov	r1, r5
 8022cda:	f7ed ff17 	bl	8010b0c <__aeabi_dcmplt>
 8022cde:	bb18      	cbnz	r0, 8022d28 <mg_dtoa+0x90>
  int i, s = 0, n = 0, e = 0;
 8022ce0:	4637      	mov	r7, r6
  mul = 1.0;
 8022ce2:	2400      	movs	r4, #0
 8022ce4:	4dba      	ldr	r5, [pc, #744]	@ (8022fd0 <mg_dtoa+0x338>)
 8022ce6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8022cea:	e02f      	b.n	8022d4c <mg_dtoa+0xb4>
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8022cec:	4bb9      	ldr	r3, [pc, #740]	@ (8022fd4 <mg_dtoa+0x33c>)
 8022cee:	4aba      	ldr	r2, [pc, #744]	@ (8022fd8 <mg_dtoa+0x340>)
 8022cf0:	9906      	ldr	r1, [sp, #24]
 8022cf2:	9805      	ldr	r0, [sp, #20]
 8022cf4:	f7ff ffbe 	bl	8022c74 <mg_snprintf>
 8022cf8:	e1d3      	b.n	80230a2 <mg_dtoa+0x40a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8022cfa:	2200      	movs	r2, #0
 8022cfc:	2300      	movs	r3, #0
 8022cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022d02:	f7ed ff21 	bl	8010b48 <__aeabi_dcmpgt>
 8022d06:	b130      	cbz	r0, 8022d16 <mg_dtoa+0x7e>
 8022d08:	4bb4      	ldr	r3, [pc, #720]	@ (8022fdc <mg_dtoa+0x344>)
 8022d0a:	4ab3      	ldr	r2, [pc, #716]	@ (8022fd8 <mg_dtoa+0x340>)
 8022d0c:	9906      	ldr	r1, [sp, #24]
 8022d0e:	9805      	ldr	r0, [sp, #20]
 8022d10:	f7ff ffb0 	bl	8022c74 <mg_snprintf>
 8022d14:	e1c5      	b.n	80230a2 <mg_dtoa+0x40a>
 8022d16:	4bb2      	ldr	r3, [pc, #712]	@ (8022fe0 <mg_dtoa+0x348>)
 8022d18:	e7f7      	b.n	8022d0a <mg_dtoa+0x72>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8022d1a:	4bb2      	ldr	r3, [pc, #712]	@ (8022fe4 <mg_dtoa+0x34c>)
 8022d1c:	4aae      	ldr	r2, [pc, #696]	@ (8022fd8 <mg_dtoa+0x340>)
 8022d1e:	9906      	ldr	r1, [sp, #24]
 8022d20:	9805      	ldr	r0, [sp, #20]
 8022d22:	f7ff ffa7 	bl	8022c74 <mg_snprintf>
 8022d26:	e1bc      	b.n	80230a2 <mg_dtoa+0x40a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8022d28:	4622      	mov	r2, r4
 8022d2a:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8022d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022d32:	232d      	movs	r3, #45	@ 0x2d
 8022d34:	f88d 3020 	strb.w	r3, [sp, #32]
 8022d38:	2701      	movs	r7, #1
 8022d3a:	e7d2      	b.n	8022ce2 <mg_dtoa+0x4a>
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8022d3c:	2200      	movs	r2, #0
 8022d3e:	4baa      	ldr	r3, [pc, #680]	@ (8022fe8 <mg_dtoa+0x350>)
 8022d40:	4620      	mov	r0, r4
 8022d42:	4629      	mov	r1, r5
 8022d44:	f7ed fc70 	bl	8010628 <__aeabi_dmul>
 8022d48:	4604      	mov	r4, r0
 8022d4a:	460d      	mov	r5, r1
 8022d4c:	2200      	movs	r2, #0
 8022d4e:	4ba6      	ldr	r3, [pc, #664]	@ (8022fe8 <mg_dtoa+0x350>)
 8022d50:	4650      	mov	r0, sl
 8022d52:	4659      	mov	r1, fp
 8022d54:	f7ed feee 	bl	8010b34 <__aeabi_dcmpge>
 8022d58:	b1b0      	cbz	r0, 8022d88 <mg_dtoa+0xf0>
 8022d5a:	4622      	mov	r2, r4
 8022d5c:	462b      	mov	r3, r5
 8022d5e:	4650      	mov	r0, sl
 8022d60:	4659      	mov	r1, fp
 8022d62:	f7ed fd8b 	bl	801087c <__aeabi_ddiv>
 8022d66:	2200      	movs	r2, #0
 8022d68:	4b9f      	ldr	r3, [pc, #636]	@ (8022fe8 <mg_dtoa+0x350>)
 8022d6a:	f7ed fee3 	bl	8010b34 <__aeabi_dcmpge>
 8022d6e:	2800      	cmp	r0, #0
 8022d70:	d1e4      	bne.n	8022d3c <mg_dtoa+0xa4>
 8022d72:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8022d76:	e007      	b.n	8022d88 <mg_dtoa+0xf0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8022d78:	2200      	movs	r2, #0
 8022d7a:	4b9b      	ldr	r3, [pc, #620]	@ (8022fe8 <mg_dtoa+0x350>)
 8022d7c:	4620      	mov	r0, r4
 8022d7e:	4629      	mov	r1, r5
 8022d80:	f7ed fd7c 	bl	801087c <__aeabi_ddiv>
 8022d84:	4604      	mov	r4, r0
 8022d86:	460d      	mov	r5, r1
 8022d88:	2200      	movs	r2, #0
 8022d8a:	4b91      	ldr	r3, [pc, #580]	@ (8022fd0 <mg_dtoa+0x338>)
 8022d8c:	4650      	mov	r0, sl
 8022d8e:	4659      	mov	r1, fp
 8022d90:	f7ed fec6 	bl	8010b20 <__aeabi_dcmple>
 8022d94:	b158      	cbz	r0, 8022dae <mg_dtoa+0x116>
 8022d96:	4622      	mov	r2, r4
 8022d98:	462b      	mov	r3, r5
 8022d9a:	4650      	mov	r0, sl
 8022d9c:	4659      	mov	r1, fp
 8022d9e:	f7ed fd6d 	bl	801087c <__aeabi_ddiv>
 8022da2:	2200      	movs	r2, #0
 8022da4:	4b8a      	ldr	r3, [pc, #552]	@ (8022fd0 <mg_dtoa+0x338>)
 8022da6:	f7ed febb 	bl	8010b20 <__aeabi_dcmple>
 8022daa:	2800      	cmp	r0, #0
 8022dac:	d1e4      	bne.n	8022d78 <mg_dtoa+0xe0>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8022dae:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8022db2:	2200      	movs	r2, #0
 8022db4:	4b8d      	ldr	r3, [pc, #564]	@ (8022fec <mg_dtoa+0x354>)
 8022db6:	4620      	mov	r0, r4
 8022db8:	4629      	mov	r1, r5
 8022dba:	f7ed fc35 	bl	8010628 <__aeabi_dmul>
 8022dbe:	4634      	mov	r4, r6
 8022dc0:	e004      	b.n	8022dcc <mg_dtoa+0x134>
 8022dc2:	2200      	movs	r2, #0
 8022dc4:	4b88      	ldr	r3, [pc, #544]	@ (8022fe8 <mg_dtoa+0x350>)
 8022dc6:	f7ed fd59 	bl	801087c <__aeabi_ddiv>
 8022dca:	3401      	adds	r4, #1
 8022dcc:	4544      	cmp	r4, r8
 8022dce:	dbf8      	blt.n	8022dc2 <mg_dtoa+0x12a>
  d += t;
 8022dd0:	4602      	mov	r2, r0
 8022dd2:	460b      	mov	r3, r1
 8022dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022dd8:	f7ed fa70 	bl	80102bc <__adddf3>
 8022ddc:	4682      	mov	sl, r0
 8022dde:	468b      	mov	fp, r1
  int i, s = 0, n = 0, e = 0;
 8022de0:	46b1      	mov	r9, r6
  mul = 1.0;
 8022de2:	2400      	movs	r4, #0
 8022de4:	4d7a      	ldr	r5, [pc, #488]	@ (8022fd0 <mg_dtoa+0x338>)
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8022de6:	e009      	b.n	8022dfc <mg_dtoa+0x164>
 8022de8:	2200      	movs	r2, #0
 8022dea:	4b7f      	ldr	r3, [pc, #508]	@ (8022fe8 <mg_dtoa+0x350>)
 8022dec:	4620      	mov	r0, r4
 8022dee:	4629      	mov	r1, r5
 8022df0:	f7ed fc1a 	bl	8010628 <__aeabi_dmul>
 8022df4:	4604      	mov	r4, r0
 8022df6:	460d      	mov	r5, r1
 8022df8:	f109 0901 	add.w	r9, r9, #1
 8022dfc:	2200      	movs	r2, #0
 8022dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8022fe8 <mg_dtoa+0x350>)
 8022e00:	4650      	mov	r0, sl
 8022e02:	4659      	mov	r1, fp
 8022e04:	f7ed fe96 	bl	8010b34 <__aeabi_dcmpge>
 8022e08:	b1b0      	cbz	r0, 8022e38 <mg_dtoa+0x1a0>
 8022e0a:	4622      	mov	r2, r4
 8022e0c:	462b      	mov	r3, r5
 8022e0e:	4650      	mov	r0, sl
 8022e10:	4659      	mov	r1, fp
 8022e12:	f7ed fd33 	bl	801087c <__aeabi_ddiv>
 8022e16:	2200      	movs	r2, #0
 8022e18:	4b73      	ldr	r3, [pc, #460]	@ (8022fe8 <mg_dtoa+0x350>)
 8022e1a:	f7ed fe8b 	bl	8010b34 <__aeabi_dcmpge>
 8022e1e:	2800      	cmp	r0, #0
 8022e20:	d1e2      	bne.n	8022de8 <mg_dtoa+0x150>
 8022e22:	e009      	b.n	8022e38 <mg_dtoa+0x1a0>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8022e24:	2200      	movs	r2, #0
 8022e26:	4b70      	ldr	r3, [pc, #448]	@ (8022fe8 <mg_dtoa+0x350>)
 8022e28:	4620      	mov	r0, r4
 8022e2a:	4629      	mov	r1, r5
 8022e2c:	f7ed fd26 	bl	801087c <__aeabi_ddiv>
 8022e30:	4604      	mov	r4, r0
 8022e32:	460d      	mov	r5, r1
 8022e34:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8022e38:	2200      	movs	r2, #0
 8022e3a:	4b65      	ldr	r3, [pc, #404]	@ (8022fd0 <mg_dtoa+0x338>)
 8022e3c:	4650      	mov	r0, sl
 8022e3e:	4659      	mov	r1, fp
 8022e40:	f7ed fe64 	bl	8010b0c <__aeabi_dcmplt>
 8022e44:	b158      	cbz	r0, 8022e5e <mg_dtoa+0x1c6>
 8022e46:	4622      	mov	r2, r4
 8022e48:	462b      	mov	r3, r5
 8022e4a:	4650      	mov	r0, sl
 8022e4c:	4659      	mov	r1, fp
 8022e4e:	f7ed fd15 	bl	801087c <__aeabi_ddiv>
 8022e52:	2200      	movs	r2, #0
 8022e54:	4b5e      	ldr	r3, [pc, #376]	@ (8022fd0 <mg_dtoa+0x338>)
 8022e56:	f7ed fe59 	bl	8010b0c <__aeabi_dcmplt>
 8022e5a:	2800      	cmp	r0, #0
 8022e5c:	d1e2      	bne.n	8022e24 <mg_dtoa+0x18c>
  if (e >= width && width > 1) {
 8022e5e:	45c1      	cmp	r9, r8
 8022e60:	db02      	blt.n	8022e68 <mg_dtoa+0x1d0>
 8022e62:	f1b8 0f01 	cmp.w	r8, #1
 8022e66:	dc25      	bgt.n	8022eb4 <mg_dtoa+0x21c>
  } else if (e <= -width && width > 1) {
 8022e68:	f1c8 0300 	rsb	r3, r8, #0
 8022e6c:	454b      	cmp	r3, r9
 8022e6e:	db5e      	blt.n	8022f2e <mg_dtoa+0x296>
 8022e70:	f1b8 0f01 	cmp.w	r8, #1
 8022e74:	dd5b      	ble.n	8022f2e <mg_dtoa+0x296>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8022e76:	4622      	mov	r2, r4
 8022e78:	462b      	mov	r3, r5
 8022e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022e7e:	f7ed fcfd 	bl	801087c <__aeabi_ddiv>
 8022e82:	ad08      	add	r5, sp, #32
 8022e84:	9b07      	ldr	r3, [sp, #28]
 8022e86:	4642      	mov	r2, r8
 8022e88:	ec41 0b10 	vmov	d0, r0, r1
 8022e8c:	2128      	movs	r1, #40	@ 0x28
 8022e8e:	4628      	mov	r0, r5
 8022e90:	f7ff ff02 	bl	8022c98 <mg_dtoa>
 8022e94:	4604      	mov	r4, r0
    n += addexp(buf + s + n, -e, '-');
 8022e96:	1838      	adds	r0, r7, r0
 8022e98:	222d      	movs	r2, #45	@ 0x2d
 8022e9a:	f1c9 0100 	rsb	r1, r9, #0
 8022e9e:	4428      	add	r0, r5
 8022ea0:	f7fc f9f0 	bl	801f284 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8022ea4:	9500      	str	r5, [sp, #0]
 8022ea6:	1823      	adds	r3, r4, r0
 8022ea8:	4a51      	ldr	r2, [pc, #324]	@ (8022ff0 <mg_dtoa+0x358>)
 8022eaa:	9906      	ldr	r1, [sp, #24]
 8022eac:	9805      	ldr	r0, [sp, #20]
 8022eae:	f7ff fee1 	bl	8022c74 <mg_snprintf>
 8022eb2:	e0f6      	b.n	80230a2 <mg_dtoa+0x40a>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8022eb4:	4622      	mov	r2, r4
 8022eb6:	462b      	mov	r3, r5
 8022eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022ebc:	f7ed fcde 	bl	801087c <__aeabi_ddiv>
 8022ec0:	ad08      	add	r5, sp, #32
 8022ec2:	9b07      	ldr	r3, [sp, #28]
 8022ec4:	4642      	mov	r2, r8
 8022ec6:	ec41 0b10 	vmov	d0, r0, r1
 8022eca:	2128      	movs	r1, #40	@ 0x28
 8022ecc:	4628      	mov	r0, r5
 8022ece:	f7ff fee3 	bl	8022c98 <mg_dtoa>
 8022ed2:	4604      	mov	r4, r0
    n += addexp(buf + s + n, e, '+');
 8022ed4:	1838      	adds	r0, r7, r0
 8022ed6:	222b      	movs	r2, #43	@ 0x2b
 8022ed8:	4649      	mov	r1, r9
 8022eda:	4428      	add	r0, r5
 8022edc:	f7fc f9d2 	bl	801f284 <addexp>
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8022ee0:	9500      	str	r5, [sp, #0]
 8022ee2:	1823      	adds	r3, r4, r0
 8022ee4:	4a42      	ldr	r2, [pc, #264]	@ (8022ff0 <mg_dtoa+0x358>)
 8022ee6:	9906      	ldr	r1, [sp, #24]
 8022ee8:	9805      	ldr	r0, [sp, #20]
 8022eea:	f7ff fec3 	bl	8022c74 <mg_snprintf>
 8022eee:	e0d8      	b.n	80230a2 <mg_dtoa+0x40a>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8022ef0:	3601      	adds	r6, #1
 8022ef2:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8022ef6:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 8022efa:	eb0d 0902 	add.w	r9, sp, r2
 8022efe:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8022f02:	f7ed fb27 	bl	8010554 <__aeabi_i2d>
 8022f06:	4622      	mov	r2, r4
 8022f08:	462b      	mov	r3, r5
 8022f0a:	f7ed fb8d 	bl	8010628 <__aeabi_dmul>
 8022f0e:	4602      	mov	r2, r0
 8022f10:	460b      	mov	r3, r1
 8022f12:	4650      	mov	r0, sl
 8022f14:	4659      	mov	r1, fp
 8022f16:	f7ed f9cf 	bl	80102b8 <__aeabi_dsub>
 8022f1a:	4682      	mov	sl, r0
 8022f1c:	468b      	mov	fp, r1
      t /= 10.0;
 8022f1e:	2200      	movs	r2, #0
 8022f20:	4b31      	ldr	r3, [pc, #196]	@ (8022fe8 <mg_dtoa+0x350>)
 8022f22:	4620      	mov	r0, r4
 8022f24:	4629      	mov	r1, r5
 8022f26:	f7ed fca9 	bl	801087c <__aeabi_ddiv>
 8022f2a:	4604      	mov	r4, r0
 8022f2c:	460d      	mov	r5, r1
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8022f2e:	2200      	movs	r2, #0
 8022f30:	4b27      	ldr	r3, [pc, #156]	@ (8022fd0 <mg_dtoa+0x338>)
 8022f32:	4620      	mov	r0, r4
 8022f34:	4629      	mov	r1, r5
 8022f36:	f7ed fdfd 	bl	8010b34 <__aeabi_dcmpge>
 8022f3a:	b188      	cbz	r0, 8022f60 <mg_dtoa+0x2c8>
 8022f3c:	eb07 0906 	add.w	r9, r7, r6
 8022f40:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 8022f44:	dc0c      	bgt.n	8022f60 <mg_dtoa+0x2c8>
      int ch = (int) (d / t);
 8022f46:	4622      	mov	r2, r4
 8022f48:	462b      	mov	r3, r5
 8022f4a:	4650      	mov	r0, sl
 8022f4c:	4659      	mov	r1, fp
 8022f4e:	f7ed fc95 	bl	801087c <__aeabi_ddiv>
 8022f52:	f7ed fe19 	bl	8010b88 <__aeabi_d2iz>
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8022f56:	2e00      	cmp	r6, #0
 8022f58:	dcca      	bgt.n	8022ef0 <mg_dtoa+0x258>
 8022f5a:	2800      	cmp	r0, #0
 8022f5c:	dcc8      	bgt.n	8022ef0 <mg_dtoa+0x258>
 8022f5e:	e7d0      	b.n	8022f02 <mg_dtoa+0x26a>
    if (n == 0) buf[s++] = '0';
 8022f60:	b9ce      	cbnz	r6, 8022f96 <mg_dtoa+0x2fe>
 8022f62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8022f66:	446b      	add	r3, sp
 8022f68:	2230      	movs	r2, #48	@ 0x30
 8022f6a:	f803 2c28 	strb.w	r2, [r3, #-40]
 8022f6e:	3701      	adds	r7, #1
 8022f70:	e011      	b.n	8022f96 <mg_dtoa+0x2fe>
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8022f72:	f106 0901 	add.w	r9, r6, #1
 8022f76:	f106 0348 	add.w	r3, r6, #72	@ 0x48
 8022f7a:	eb0d 0603 	add.w	r6, sp, r3
 8022f7e:	2330      	movs	r3, #48	@ 0x30
 8022f80:	f806 3c28 	strb.w	r3, [r6, #-40]
 8022f84:	2200      	movs	r2, #0
 8022f86:	4b18      	ldr	r3, [pc, #96]	@ (8022fe8 <mg_dtoa+0x350>)
 8022f88:	4620      	mov	r0, r4
 8022f8a:	4629      	mov	r1, r5
 8022f8c:	f7ed fc76 	bl	801087c <__aeabi_ddiv>
 8022f90:	4604      	mov	r4, r0
 8022f92:	460d      	mov	r5, r1
 8022f94:	464e      	mov	r6, r9
 8022f96:	2200      	movs	r2, #0
 8022f98:	4b0d      	ldr	r3, [pc, #52]	@ (8022fd0 <mg_dtoa+0x338>)
 8022f9a:	4620      	mov	r0, r4
 8022f9c:	4629      	mov	r1, r5
 8022f9e:	f7ed fdc9 	bl	8010b34 <__aeabi_dcmpge>
 8022fa2:	b110      	cbz	r0, 8022faa <mg_dtoa+0x312>
 8022fa4:	19f3      	adds	r3, r6, r7
 8022fa6:	2b27      	cmp	r3, #39	@ 0x27
 8022fa8:	dde3      	ble.n	8022f72 <mg_dtoa+0x2da>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8022faa:	19f3      	adds	r3, r6, r7
 8022fac:	2b27      	cmp	r3, #39	@ 0x27
 8022fae:	dc05      	bgt.n	8022fbc <mg_dtoa+0x324>
 8022fb0:	3701      	adds	r7, #1
 8022fb2:	3348      	adds	r3, #72	@ 0x48
 8022fb4:	446b      	add	r3, sp
 8022fb6:	222e      	movs	r2, #46	@ 0x2e
 8022fb8:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8022fbc:	a502      	add	r5, pc, #8	@ (adr r5, 8022fc8 <mg_dtoa+0x330>)
 8022fbe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8022fc2:	e03e      	b.n	8023042 <mg_dtoa+0x3aa>
 8022fc4:	f3af 8000 	nop.w
 8022fc8:	9999999a 	.word	0x9999999a
 8022fcc:	3fb99999 	.word	0x3fb99999
 8022fd0:	3ff00000 	.word	0x3ff00000
 8022fd4:	080387b0 	.word	0x080387b0
 8022fd8:	0803a070 	.word	0x0803a070
 8022fdc:	08039498 	.word	0x08039498
 8022fe0:	0803949c 	.word	0x0803949c
 8022fe4:	080394a4 	.word	0x080394a4
 8022fe8:	40240000 	.word	0x40240000
 8022fec:	40140000 	.word	0x40140000
 8022ff0:	080394a8 	.word	0x080394a8
      int ch = (int) (d / t);
 8022ff4:	4622      	mov	r2, r4
 8022ff6:	462b      	mov	r3, r5
 8022ff8:	4650      	mov	r0, sl
 8022ffa:	4659      	mov	r1, fp
 8022ffc:	f7ed fc3e 	bl	801087c <__aeabi_ddiv>
 8023000:	f7ed fdc2 	bl	8010b88 <__aeabi_d2iz>
      buf[s + n++] = (char) (ch + '0');
 8023004:	3601      	adds	r6, #1
 8023006:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 802300a:	f109 0248 	add.w	r2, r9, #72	@ 0x48
 802300e:	eb0d 0902 	add.w	r9, sp, r2
 8023012:	f809 3c28 	strb.w	r3, [r9, #-40]
      d -= ch * t;
 8023016:	f7ed fa9d 	bl	8010554 <__aeabi_i2d>
 802301a:	4622      	mov	r2, r4
 802301c:	462b      	mov	r3, r5
 802301e:	f7ed fb03 	bl	8010628 <__aeabi_dmul>
 8023022:	4602      	mov	r2, r0
 8023024:	460b      	mov	r3, r1
 8023026:	4650      	mov	r0, sl
 8023028:	4659      	mov	r1, fp
 802302a:	f7ed f945 	bl	80102b8 <__aeabi_dsub>
 802302e:	4682      	mov	sl, r0
 8023030:	468b      	mov	fp, r1
      t /= 10.0;
 8023032:	2200      	movs	r2, #0
 8023034:	4b1d      	ldr	r3, [pc, #116]	@ (80230ac <mg_dtoa+0x414>)
 8023036:	4620      	mov	r0, r4
 8023038:	4629      	mov	r1, r5
 802303a:	f7ed fc1f 	bl	801087c <__aeabi_ddiv>
 802303e:	4604      	mov	r4, r0
 8023040:	460d      	mov	r5, r1
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8023042:	eb07 0906 	add.w	r9, r7, r6
 8023046:	f1b9 0f27 	cmp.w	r9, #39	@ 0x27
 802304a:	dc03      	bgt.n	8023054 <mg_dtoa+0x3bc>
 802304c:	4546      	cmp	r6, r8
 802304e:	dbd1      	blt.n	8022ff4 <mg_dtoa+0x35c>
 8023050:	9a07      	ldr	r2, [sp, #28]
 8023052:	e000      	b.n	8023056 <mg_dtoa+0x3be>
 8023054:	9a07      	ldr	r2, [sp, #28]
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8023056:	b152      	cbz	r2, 802306e <mg_dtoa+0x3d6>
 8023058:	2e00      	cmp	r6, #0
 802305a:	dd08      	ble.n	802306e <mg_dtoa+0x3d6>
 802305c:	19bb      	adds	r3, r7, r6
 802305e:	3347      	adds	r3, #71	@ 0x47
 8023060:	446b      	add	r3, sp
 8023062:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8023066:	2b30      	cmp	r3, #48	@ 0x30
 8023068:	d101      	bne.n	802306e <mg_dtoa+0x3d6>
 802306a:	3e01      	subs	r6, #1
 802306c:	e7f3      	b.n	8023056 <mg_dtoa+0x3be>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 802306e:	2e00      	cmp	r6, #0
 8023070:	dd06      	ble.n	8023080 <mg_dtoa+0x3e8>
 8023072:	19bb      	adds	r3, r7, r6
 8023074:	3347      	adds	r3, #71	@ 0x47
 8023076:	446b      	add	r3, sp
 8023078:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 802307c:	2b2e      	cmp	r3, #46	@ 0x2e
 802307e:	d013      	beq.n	80230a8 <mg_dtoa+0x410>
  n += s;
 8023080:	4437      	add	r7, r6
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8023082:	2f27      	cmp	r7, #39	@ 0x27
 8023084:	dd00      	ble.n	8023088 <mg_dtoa+0x3f0>
 8023086:	2727      	movs	r7, #39	@ 0x27
  buf[n] = '\0';
 8023088:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802308c:	eb0d 0703 	add.w	r7, sp, r3
 8023090:	2300      	movs	r3, #0
 8023092:	f807 3c28 	strb.w	r3, [r7, #-40]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8023096:	ab08      	add	r3, sp, #32
 8023098:	4a05      	ldr	r2, [pc, #20]	@ (80230b0 <mg_dtoa+0x418>)
 802309a:	9906      	ldr	r1, [sp, #24]
 802309c:	9805      	ldr	r0, [sp, #20]
 802309e:	f7ff fde9 	bl	8022c74 <mg_snprintf>
}
 80230a2:	b013      	add	sp, #76	@ 0x4c
 80230a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80230a8:	3e01      	subs	r6, #1
 80230aa:	e7e9      	b.n	8023080 <mg_dtoa+0x3e8>
 80230ac:	40240000 	.word	0x40240000
 80230b0:	0803a070 	.word	0x0803a070

080230b4 <mg_vxprintf>:
                   va_list *ap) {
 80230b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230b8:	b093      	sub	sp, #76	@ 0x4c
 80230ba:	4681      	mov	r9, r0
 80230bc:	468a      	mov	sl, r1
 80230be:	4693      	mov	fp, r2
 80230c0:	9303      	str	r3, [sp, #12]
  size_t i = 0, n = 0;
 80230c2:	2700      	movs	r7, #0
 80230c4:	463c      	mov	r4, r7
  while (fmt[i] != '\0') {
 80230c6:	e1bc      	b.n	8023442 <mg_vxprintf+0x38e>
      char pad = ' ', minus = 0, c = fmt[++i];
 80230c8:	2320      	movs	r3, #32
 80230ca:	f88d 301f 	strb.w	r3, [sp, #31]
 80230ce:	1c66      	adds	r6, r4, #1
 80230d0:	f81b 5006 	ldrb.w	r5, [fp, r6]
      if (c == '#') x++, c = fmt[++i];
 80230d4:	2d23      	cmp	r5, #35	@ 0x23
 80230d6:	d00c      	beq.n	80230f2 <mg_vxprintf+0x3e>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 80230d8:	2300      	movs	r3, #0
 80230da:	9302      	str	r3, [sp, #8]
      if (c == '-') minus++, c = fmt[++i];
 80230dc:	2d2d      	cmp	r5, #45	@ 0x2d
 80230de:	d10e      	bne.n	80230fe <mg_vxprintf+0x4a>
 80230e0:	3601      	adds	r6, #1
 80230e2:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80230e6:	2301      	movs	r3, #1
 80230e8:	9304      	str	r3, [sp, #16]
      if (c == '0') pad = '0', c = fmt[++i];
 80230ea:	2d30      	cmp	r5, #48	@ 0x30
 80230ec:	d00a      	beq.n	8023104 <mg_vxprintf+0x50>
      if (c == '-') minus++, c = fmt[++i];
 80230ee:	2400      	movs	r4, #0
 80230f0:	e017      	b.n	8023122 <mg_vxprintf+0x6e>
      if (c == '#') x++, c = fmt[++i];
 80230f2:	1ca6      	adds	r6, r4, #2
 80230f4:	f81b 5006 	ldrb.w	r5, [fp, r6]
 80230f8:	2301      	movs	r3, #1
 80230fa:	9302      	str	r3, [sp, #8]
 80230fc:	e7ee      	b.n	80230dc <mg_vxprintf+0x28>
      char pad = ' ', minus = 0, c = fmt[++i];
 80230fe:	2300      	movs	r3, #0
 8023100:	9304      	str	r3, [sp, #16]
 8023102:	e7f2      	b.n	80230ea <mg_vxprintf+0x36>
      if (c == '0') pad = '0', c = fmt[++i];
 8023104:	2330      	movs	r3, #48	@ 0x30
 8023106:	f88d 301f 	strb.w	r3, [sp, #31]
 802310a:	3601      	adds	r6, #1
 802310c:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023110:	e7ed      	b.n	80230ee <mg_vxprintf+0x3a>
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8023112:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8023116:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 802311a:	3c30      	subs	r4, #48	@ 0x30
 802311c:	3601      	adds	r6, #1
 802311e:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023122:	4628      	mov	r0, r5
 8023124:	f7fc f8a7 	bl	801f276 <is_digit>
 8023128:	4601      	mov	r1, r0
 802312a:	2800      	cmp	r0, #0
 802312c:	d1f1      	bne.n	8023112 <mg_vxprintf+0x5e>
      if (c == '.') {
 802312e:	2d2e      	cmp	r5, #46	@ 0x2e
 8023130:	d002      	beq.n	8023138 <mg_vxprintf+0x84>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8023132:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8023136:	e026      	b.n	8023186 <mg_vxprintf+0xd2>
        c = fmt[++i];
 8023138:	1c73      	adds	r3, r6, #1
 802313a:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == '*') {
 802313e:	2d2a      	cmp	r5, #42	@ 0x2a
 8023140:	d119      	bne.n	8023176 <mg_vxprintf+0xc2>
          pr = (size_t) va_arg(*ap, int);
 8023142:	9803      	ldr	r0, [sp, #12]
 8023144:	6803      	ldr	r3, [r0, #0]
 8023146:	1d1a      	adds	r2, r3, #4
 8023148:	6002      	str	r2, [r0, #0]
 802314a:	f8d3 8000 	ldr.w	r8, [r3]
          c = fmt[++i];
 802314e:	3602      	adds	r6, #2
 8023150:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023154:	e017      	b.n	8023186 <mg_vxprintf+0xd2>
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8023156:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 802315a:	eb05 0848 	add.w	r8, r5, r8, lsl #1
 802315e:	f1a8 0830 	sub.w	r8, r8, #48	@ 0x30
 8023162:	3601      	adds	r6, #1
 8023164:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023168:	4628      	mov	r0, r5
 802316a:	f7fc f884 	bl	801f276 <is_digit>
 802316e:	2800      	cmp	r0, #0
 8023170:	d1f1      	bne.n	8023156 <mg_vxprintf+0xa2>
 8023172:	9905      	ldr	r1, [sp, #20]
 8023174:	e007      	b.n	8023186 <mg_vxprintf+0xd2>
          pr = 0;
 8023176:	f04f 0800 	mov.w	r8, #0
 802317a:	461e      	mov	r6, r3
 802317c:	9005      	str	r0, [sp, #20]
 802317e:	e7f3      	b.n	8023168 <mg_vxprintf+0xb4>
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8023180:	3601      	adds	r6, #1
 8023182:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023186:	2d68      	cmp	r5, #104	@ 0x68
 8023188:	d0fa      	beq.n	8023180 <mg_vxprintf+0xcc>
      if (c == 'l') {
 802318a:	2d6c      	cmp	r5, #108	@ 0x6c
 802318c:	d05f      	beq.n	802324e <mg_vxprintf+0x19a>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 802318e:	2200      	movs	r2, #0
      if (c == 'p') x = 1, is_long = 1;
 8023190:	2d70      	cmp	r5, #112	@ 0x70
 8023192:	d069      	beq.n	8023268 <mg_vxprintf+0x1b4>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8023194:	2d64      	cmp	r5, #100	@ 0x64
 8023196:	d06a      	beq.n	802326e <mg_vxprintf+0x1ba>
 8023198:	f1a5 0325 	sub.w	r3, r5, #37	@ 0x25
 802319c:	2b53      	cmp	r3, #83	@ 0x53
 802319e:	f200 81bc 	bhi.w	802351a <mg_vxprintf+0x466>
 80231a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80231a6:	01b5      	.short	0x01b5
 80231a8:	01ba01ba 	.word	0x01ba01ba
 80231ac:	01ba01ba 	.word	0x01ba01ba
 80231b0:	01ba01ba 	.word	0x01ba01ba
 80231b4:	01ba01ba 	.word	0x01ba01ba
 80231b8:	01ba01ba 	.word	0x01ba01ba
 80231bc:	01ba01ba 	.word	0x01ba01ba
 80231c0:	01ba01ba 	.word	0x01ba01ba
 80231c4:	01ba01ba 	.word	0x01ba01ba
 80231c8:	01ba01ba 	.word	0x01ba01ba
 80231cc:	01ba01ba 	.word	0x01ba01ba
 80231d0:	01ba01ba 	.word	0x01ba01ba
 80231d4:	01ba01ba 	.word	0x01ba01ba
 80231d8:	01ba01ba 	.word	0x01ba01ba
 80231dc:	01ba01ba 	.word	0x01ba01ba
 80231e0:	01ba01ba 	.word	0x01ba01ba
 80231e4:	01ba01ba 	.word	0x01ba01ba
 80231e8:	01ba01ba 	.word	0x01ba01ba
 80231ec:	01ba01ba 	.word	0x01ba01ba
 80231f0:	01ba01ba 	.word	0x01ba01ba
 80231f4:	014101ba 	.word	0x014101ba
 80231f8:	01ba01ba 	.word	0x01ba01ba
 80231fc:	01ba01ba 	.word	0x01ba01ba
 8023200:	01ba01ba 	.word	0x01ba01ba
 8023204:	01ba01ba 	.word	0x01ba01ba
 8023208:	01ba01ba 	.word	0x01ba01ba
 802320c:	01ba0065 	.word	0x01ba0065
 8023210:	01ba01ba 	.word	0x01ba01ba
 8023214:	01ba01ba 	.word	0x01ba01ba
 8023218:	01ba01ba 	.word	0x01ba01ba
 802321c:	01ba01ba 	.word	0x01ba01ba
 8023220:	016801ba 	.word	0x016801ba
 8023224:	01ba01ba 	.word	0x01ba01ba
 8023228:	00650065 	.word	0x00650065
 802322c:	01ba01ba 	.word	0x01ba01ba
 8023230:	01ba01ba 	.word	0x01ba01ba
 8023234:	015a01ba 	.word	0x015a01ba
 8023238:	01ba01ba 	.word	0x01ba01ba
 802323c:	01ba0065 	.word	0x01ba0065
 8023240:	017101ba 	.word	0x017101ba
 8023244:	006501ba 	.word	0x006501ba
 8023248:	01ba01ba 	.word	0x01ba01ba
 802324c:	008d      	.short	0x008d
        is_long++, c = fmt[++i];
 802324e:	1c73      	adds	r3, r6, #1
 8023250:	f81b 5003 	ldrb.w	r5, [fp, r3]
        if (c == 'l') is_long++, c = fmt[++i];
 8023254:	2d6c      	cmp	r5, #108	@ 0x6c
 8023256:	d002      	beq.n	802325e <mg_vxprintf+0x1aa>
        is_long++, c = fmt[++i];
 8023258:	461e      	mov	r6, r3
 802325a:	2201      	movs	r2, #1
 802325c:	e798      	b.n	8023190 <mg_vxprintf+0xdc>
        if (c == 'l') is_long++, c = fmt[++i];
 802325e:	3602      	adds	r6, #2
 8023260:	f81b 5006 	ldrb.w	r5, [fp, r6]
 8023264:	2202      	movs	r2, #2
 8023266:	e793      	b.n	8023190 <mg_vxprintf+0xdc>
      if (c == 'p') x = 1, is_long = 1;
 8023268:	2201      	movs	r2, #1
 802326a:	9202      	str	r2, [sp, #8]
 802326c:	e792      	b.n	8023194 <mg_vxprintf+0xe0>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 802326e:	2101      	movs	r1, #1
 8023270:	2d58      	cmp	r5, #88	@ 0x58
 8023272:	d027      	beq.n	80232c4 <mg_vxprintf+0x210>
 8023274:	2d70      	cmp	r5, #112	@ 0x70
 8023276:	d021      	beq.n	80232bc <mg_vxprintf+0x208>
 8023278:	2300      	movs	r3, #0
 802327a:	4618      	mov	r0, r3
        size_t xl = x ? 2 : 0;
 802327c:	9b02      	ldr	r3, [sp, #8]
 802327e:	b10b      	cbz	r3, 8023284 <mg_vxprintf+0x1d0>
 8023280:	2302      	movs	r3, #2
 8023282:	9302      	str	r3, [sp, #8]
        if (c == 'g' || c == 'f') {
 8023284:	f1a5 0366 	sub.w	r3, r5, #102	@ 0x66
 8023288:	b2db      	uxtb	r3, r3
 802328a:	2b01      	cmp	r3, #1
 802328c:	d91c      	bls.n	80232c8 <mg_vxprintf+0x214>
        } else if (is_long == 2) {
 802328e:	2a02      	cmp	r2, #2
 8023290:	d037      	beq.n	8023302 <mg_vxprintf+0x24e>
        } else if (is_long == 1) {
 8023292:	2a01      	cmp	r2, #1
 8023294:	d046      	beq.n	8023324 <mg_vxprintf+0x270>
          int v = va_arg(*ap, int);
 8023296:	9b03      	ldr	r3, [sp, #12]
 8023298:	f8d3 c000 	ldr.w	ip, [r3]
 802329c:	f10c 0204 	add.w	r2, ip, #4
 80232a0:	601a      	str	r2, [r3, #0]
 80232a2:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80232a6:	2d64      	cmp	r5, #100	@ 0x64
 80232a8:	d052      	beq.n	8023350 <mg_vxprintf+0x29c>
 80232aa:	461a      	mov	r2, r3
 80232ac:	2300      	movs	r3, #0
 80232ae:	9001      	str	r0, [sp, #4]
 80232b0:	9100      	str	r1, [sp, #0]
 80232b2:	a808      	add	r0, sp, #32
 80232b4:	f7fc f842 	bl	801f33c <mg_lld>
 80232b8:	4605      	mov	r5, r0
 80232ba:	e01c      	b.n	80232f6 <mg_vxprintf+0x242>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80232bc:	2301      	movs	r3, #1
 80232be:	e7dc      	b.n	802327a <mg_vxprintf+0x1c6>
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 80232c0:	2301      	movs	r3, #1
 80232c2:	e7da      	b.n	802327a <mg_vxprintf+0x1c6>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80232c4:	2301      	movs	r3, #1
 80232c6:	e7d8      	b.n	802327a <mg_vxprintf+0x1c6>
          double v = va_arg(*ap, double);
 80232c8:	9903      	ldr	r1, [sp, #12]
 80232ca:	680b      	ldr	r3, [r1, #0]
 80232cc:	3307      	adds	r3, #7
 80232ce:	f023 0307 	bic.w	r3, r3, #7
 80232d2:	f103 0208 	add.w	r2, r3, #8
 80232d6:	600a      	str	r2, [r1, #0]
 80232d8:	ed93 0b00 	vldr	d0, [r3]
          if (pr == ~0U) pr = 6;
 80232dc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80232e0:	d00c      	beq.n	80232fc <mg_vxprintf+0x248>
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80232e2:	2d67      	cmp	r5, #103	@ 0x67
 80232e4:	bf14      	ite	ne
 80232e6:	2300      	movne	r3, #0
 80232e8:	2301      	moveq	r3, #1
 80232ea:	4642      	mov	r2, r8
 80232ec:	2128      	movs	r1, #40	@ 0x28
 80232ee:	a808      	add	r0, sp, #32
 80232f0:	f7ff fcd2 	bl	8022c98 <mg_dtoa>
 80232f4:	4605      	mov	r5, r0
        for (j = 0; j < xl && w > 0; j++) w--;
 80232f6:	2300      	movs	r3, #0
 80232f8:	9a02      	ldr	r2, [sp, #8]
 80232fa:	e02e      	b.n	802335a <mg_vxprintf+0x2a6>
          if (pr == ~0U) pr = 6;
 80232fc:	f04f 0806 	mov.w	r8, #6
 8023300:	e7ef      	b.n	80232e2 <mg_vxprintf+0x22e>
          int64_t v = va_arg(*ap, int64_t);
 8023302:	9d03      	ldr	r5, [sp, #12]
 8023304:	682b      	ldr	r3, [r5, #0]
 8023306:	3307      	adds	r3, #7
 8023308:	f023 0307 	bic.w	r3, r3, #7
 802330c:	f103 0208 	add.w	r2, r3, #8
 8023310:	602a      	str	r2, [r5, #0]
 8023312:	e9d3 2300 	ldrd	r2, r3, [r3]
          k = mg_lld(tmp, v, s, h);
 8023316:	9001      	str	r0, [sp, #4]
 8023318:	9100      	str	r1, [sp, #0]
 802331a:	a808      	add	r0, sp, #32
 802331c:	f7fc f80e 	bl	801f33c <mg_lld>
 8023320:	4605      	mov	r5, r0
 8023322:	e7e8      	b.n	80232f6 <mg_vxprintf+0x242>
          long v = va_arg(*ap, long);
 8023324:	9b03      	ldr	r3, [sp, #12]
 8023326:	f8d3 c000 	ldr.w	ip, [r3]
 802332a:	f10c 0204 	add.w	r2, ip, #4
 802332e:	601a      	str	r2, [r3, #0]
 8023330:	f8dc 3000 	ldr.w	r3, [ip]
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8023334:	2d64      	cmp	r5, #100	@ 0x64
 8023336:	d008      	beq.n	802334a <mg_vxprintf+0x296>
 8023338:	461a      	mov	r2, r3
 802333a:	2300      	movs	r3, #0
 802333c:	9001      	str	r0, [sp, #4]
 802333e:	9100      	str	r1, [sp, #0]
 8023340:	a808      	add	r0, sp, #32
 8023342:	f7fb fffb 	bl	801f33c <mg_lld>
 8023346:	4605      	mov	r5, r0
 8023348:	e7d5      	b.n	80232f6 <mg_vxprintf+0x242>
 802334a:	461a      	mov	r2, r3
 802334c:	17db      	asrs	r3, r3, #31
 802334e:	e7f5      	b.n	802333c <mg_vxprintf+0x288>
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8023350:	461a      	mov	r2, r3
 8023352:	17db      	asrs	r3, r3, #31
 8023354:	e7ab      	b.n	80232ae <mg_vxprintf+0x1fa>
        for (j = 0; j < xl && w > 0; j++) w--;
 8023356:	3c01      	subs	r4, #1
 8023358:	3301      	adds	r3, #1
 802335a:	4293      	cmp	r3, r2
 802335c:	d225      	bcs.n	80233aa <mg_vxprintf+0x2f6>
 802335e:	2c00      	cmp	r4, #0
 8023360:	d1f9      	bne.n	8023356 <mg_vxprintf+0x2a2>
 8023362:	46a0      	mov	r8, r4
 8023364:	9605      	str	r6, [sp, #20]
 8023366:	9e04      	ldr	r6, [sp, #16]
 8023368:	e009      	b.n	802337e <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 802336a:	2301      	movs	r3, #1
 802336c:	f10d 021f 	add.w	r2, sp, #31
 8023370:	4651      	mov	r1, sl
 8023372:	4648      	mov	r0, r9
 8023374:	f7fc f878 	bl	801f468 <scpy>
 8023378:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 802337a:	f108 0801 	add.w	r8, r8, #1
 802337e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8023382:	2b20      	cmp	r3, #32
 8023384:	d106      	bne.n	8023394 <mg_vxprintf+0x2e0>
 8023386:	b92e      	cbnz	r6, 8023394 <mg_vxprintf+0x2e0>
 8023388:	42a5      	cmp	r5, r4
 802338a:	d203      	bcs.n	8023394 <mg_vxprintf+0x2e0>
 802338c:	eb08 0305 	add.w	r3, r8, r5
 8023390:	42a3      	cmp	r3, r4
 8023392:	d3ea      	bcc.n	802336a <mg_vxprintf+0x2b6>
        n += scpy(out, param, (char *) "0x", xl);
 8023394:	9e05      	ldr	r6, [sp, #20]
 8023396:	9b02      	ldr	r3, [sp, #8]
 8023398:	4a6b      	ldr	r2, [pc, #428]	@ (8023548 <mg_vxprintf+0x494>)
 802339a:	4651      	mov	r1, sl
 802339c:	4648      	mov	r0, r9
 802339e:	f7fc f863 	bl	801f468 <scpy>
 80233a2:	eb07 0800 	add.w	r8, r7, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80233a6:	2700      	movs	r7, #0
 80233a8:	e00d      	b.n	80233c6 <mg_vxprintf+0x312>
 80233aa:	f04f 0800 	mov.w	r8, #0
 80233ae:	9605      	str	r6, [sp, #20]
 80233b0:	9e04      	ldr	r6, [sp, #16]
 80233b2:	e7e4      	b.n	802337e <mg_vxprintf+0x2ca>
          n += scpy(out, param, &pad, 1);
 80233b4:	2301      	movs	r3, #1
 80233b6:	f10d 021f 	add.w	r2, sp, #31
 80233ba:	4651      	mov	r1, sl
 80233bc:	4648      	mov	r0, r9
 80233be:	f7fc f853 	bl	801f468 <scpy>
 80233c2:	4480      	add	r8, r0
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80233c4:	3701      	adds	r7, #1
 80233c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80233ca:	2b30      	cmp	r3, #48	@ 0x30
 80233cc:	d104      	bne.n	80233d8 <mg_vxprintf+0x324>
 80233ce:	42a5      	cmp	r5, r4
 80233d0:	d202      	bcs.n	80233d8 <mg_vxprintf+0x324>
 80233d2:	197b      	adds	r3, r7, r5
 80233d4:	42a3      	cmp	r3, r4
 80233d6:	d3ed      	bcc.n	80233b4 <mg_vxprintf+0x300>
        n += scpy(out, param, tmp, k);
 80233d8:	462b      	mov	r3, r5
 80233da:	aa08      	add	r2, sp, #32
 80233dc:	4651      	mov	r1, sl
 80233de:	4648      	mov	r0, r9
 80233e0:	f7fc f842 	bl	801f468 <scpy>
 80233e4:	eb08 0700 	add.w	r7, r8, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80233e8:	f04f 0800 	mov.w	r8, #0
 80233ec:	9602      	str	r6, [sp, #8]
 80233ee:	9e04      	ldr	r6, [sp, #16]
 80233f0:	e009      	b.n	8023406 <mg_vxprintf+0x352>
          n += scpy(out, param, &pad, 1);
 80233f2:	2301      	movs	r3, #1
 80233f4:	f10d 021f 	add.w	r2, sp, #31
 80233f8:	4651      	mov	r1, sl
 80233fa:	4648      	mov	r0, r9
 80233fc:	f7fc f834 	bl	801f468 <scpy>
 8023400:	4407      	add	r7, r0
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8023402:	f108 0801 	add.w	r8, r8, #1
 8023406:	f89d 301f 	ldrb.w	r3, [sp, #31]
 802340a:	2b20      	cmp	r3, #32
 802340c:	f040 808d 	bne.w	802352a <mg_vxprintf+0x476>
 8023410:	2e00      	cmp	r6, #0
 8023412:	f000 808c 	beq.w	802352e <mg_vxprintf+0x47a>
 8023416:	42a5      	cmp	r5, r4
 8023418:	f080 808b 	bcs.w	8023532 <mg_vxprintf+0x47e>
 802341c:	eb08 0305 	add.w	r3, r8, r5
 8023420:	42a3      	cmp	r3, r4
 8023422:	d3e6      	bcc.n	80233f2 <mg_vxprintf+0x33e>
 8023424:	9e02      	ldr	r6, [sp, #8]
 8023426:	e00b      	b.n	8023440 <mg_vxprintf+0x38c>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8023428:	9903      	ldr	r1, [sp, #12]
 802342a:	680b      	ldr	r3, [r1, #0]
 802342c:	1d1a      	adds	r2, r3, #4
 802342e:	600a      	str	r2, [r1, #0]
 8023430:	681c      	ldr	r4, [r3, #0]
        n += f(out, param, ap);
 8023432:	9a03      	ldr	r2, [sp, #12]
 8023434:	4651      	mov	r1, sl
 8023436:	4648      	mov	r0, r9
 8023438:	47a0      	blx	r4
 802343a:	4407      	add	r7, r0
        if (c == 'm') n += 2, out('"', param);
 802343c:	2d6d      	cmp	r5, #109	@ 0x6d
 802343e:	d015      	beq.n	802346c <mg_vxprintf+0x3b8>
      i++;
 8023440:	1c74      	adds	r4, r6, #1
  while (fmt[i] != '\0') {
 8023442:	f81b 0004 	ldrb.w	r0, [fp, r4]
 8023446:	2800      	cmp	r0, #0
 8023448:	d079      	beq.n	802353e <mg_vxprintf+0x48a>
    if (fmt[i] == '%') {
 802344a:	2825      	cmp	r0, #37	@ 0x25
 802344c:	f43f ae3c 	beq.w	80230c8 <mg_vxprintf+0x14>
      out(fmt[i], param), n++, i++;
 8023450:	4651      	mov	r1, sl
 8023452:	47c8      	blx	r9
 8023454:	3701      	adds	r7, #1
 8023456:	3401      	adds	r4, #1
 8023458:	e7f3      	b.n	8023442 <mg_vxprintf+0x38e>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 802345a:	9903      	ldr	r1, [sp, #12]
 802345c:	680b      	ldr	r3, [r1, #0]
 802345e:	1d1a      	adds	r2, r3, #4
 8023460:	600a      	str	r2, [r1, #0]
 8023462:	681c      	ldr	r4, [r3, #0]
        if (c == 'm') out('"', param);
 8023464:	4651      	mov	r1, sl
 8023466:	2022      	movs	r0, #34	@ 0x22
 8023468:	47c8      	blx	r9
 802346a:	e7e2      	b.n	8023432 <mg_vxprintf+0x37e>
        if (c == 'm') n += 2, out('"', param);
 802346c:	3702      	adds	r7, #2
 802346e:	4651      	mov	r1, sl
 8023470:	2022      	movs	r0, #34	@ 0x22
 8023472:	47c8      	blx	r9
 8023474:	e7e4      	b.n	8023440 <mg_vxprintf+0x38c>
        int ch = va_arg(*ap, int);
 8023476:	9903      	ldr	r1, [sp, #12]
 8023478:	680b      	ldr	r3, [r1, #0]
 802347a:	1d1a      	adds	r2, r3, #4
 802347c:	600a      	str	r2, [r1, #0]
        out((char) ch, param);
 802347e:	4651      	mov	r1, sl
 8023480:	7818      	ldrb	r0, [r3, #0]
 8023482:	47c8      	blx	r9
        n++;
 8023484:	3701      	adds	r7, #1
 8023486:	e7db      	b.n	8023440 <mg_vxprintf+0x38c>
        char *p = va_arg(*ap, char *);
 8023488:	9903      	ldr	r1, [sp, #12]
 802348a:	680b      	ldr	r3, [r1, #0]
 802348c:	1d1a      	adds	r2, r3, #4
 802348e:	600a      	str	r2, [r1, #0]
 8023490:	681b      	ldr	r3, [r3, #0]
 8023492:	9302      	str	r3, [sp, #8]
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8023494:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8023498:	d003      	beq.n	80234a2 <mg_vxprintf+0x3ee>
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 802349a:	2500      	movs	r5, #0
 802349c:	9605      	str	r6, [sp, #20]
 802349e:	9e04      	ldr	r6, [sp, #16]
 80234a0:	e011      	b.n	80234c6 <mg_vxprintf+0x412>
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80234a2:	4618      	mov	r0, r3
 80234a4:	b11b      	cbz	r3, 80234ae <mg_vxprintf+0x3fa>
 80234a6:	f7ec fefb 	bl	80102a0 <strlen>
 80234aa:	4680      	mov	r8, r0
 80234ac:	e7f5      	b.n	802349a <mg_vxprintf+0x3e6>
 80234ae:	f04f 0800 	mov.w	r8, #0
 80234b2:	e7f2      	b.n	802349a <mg_vxprintf+0x3e6>
          n += scpy(out, param, &pad, 1);
 80234b4:	2301      	movs	r3, #1
 80234b6:	f10d 021f 	add.w	r2, sp, #31
 80234ba:	4651      	mov	r1, sl
 80234bc:	4648      	mov	r0, r9
 80234be:	f7fb ffd3 	bl	801f468 <scpy>
 80234c2:	4407      	add	r7, r0
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80234c4:	3501      	adds	r5, #1
 80234c6:	b92e      	cbnz	r6, 80234d4 <mg_vxprintf+0x420>
 80234c8:	4544      	cmp	r4, r8
 80234ca:	d903      	bls.n	80234d4 <mg_vxprintf+0x420>
 80234cc:	eb05 0308 	add.w	r3, r5, r8
 80234d0:	42a3      	cmp	r3, r4
 80234d2:	d3ef      	bcc.n	80234b4 <mg_vxprintf+0x400>
        n += scpy(out, param, p, pr);
 80234d4:	9e05      	ldr	r6, [sp, #20]
 80234d6:	4643      	mov	r3, r8
 80234d8:	9a02      	ldr	r2, [sp, #8]
 80234da:	4651      	mov	r1, sl
 80234dc:	4648      	mov	r0, r9
 80234de:	f7fb ffc3 	bl	801f468 <scpy>
 80234e2:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80234e4:	2500      	movs	r5, #0
 80234e6:	9602      	str	r6, [sp, #8]
 80234e8:	9e04      	ldr	r6, [sp, #16]
 80234ea:	e008      	b.n	80234fe <mg_vxprintf+0x44a>
          n += scpy(out, param, &pad, 1);
 80234ec:	2301      	movs	r3, #1
 80234ee:	f10d 021f 	add.w	r2, sp, #31
 80234f2:	4651      	mov	r1, sl
 80234f4:	4648      	mov	r0, r9
 80234f6:	f7fb ffb7 	bl	801f468 <scpy>
 80234fa:	4407      	add	r7, r0
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80234fc:	3501      	adds	r5, #1
 80234fe:	b1d6      	cbz	r6, 8023536 <mg_vxprintf+0x482>
 8023500:	4544      	cmp	r4, r8
 8023502:	d91a      	bls.n	802353a <mg_vxprintf+0x486>
 8023504:	eb05 0308 	add.w	r3, r5, r8
 8023508:	42a3      	cmp	r3, r4
 802350a:	d3ef      	bcc.n	80234ec <mg_vxprintf+0x438>
 802350c:	9e02      	ldr	r6, [sp, #8]
 802350e:	e797      	b.n	8023440 <mg_vxprintf+0x38c>
        out('%', param);
 8023510:	4651      	mov	r1, sl
 8023512:	2025      	movs	r0, #37	@ 0x25
 8023514:	47c8      	blx	r9
        n++;
 8023516:	3701      	adds	r7, #1
 8023518:	e792      	b.n	8023440 <mg_vxprintf+0x38c>
        out('%', param);
 802351a:	4651      	mov	r1, sl
 802351c:	2025      	movs	r0, #37	@ 0x25
 802351e:	47c8      	blx	r9
        out(c, param);
 8023520:	4651      	mov	r1, sl
 8023522:	4628      	mov	r0, r5
 8023524:	47c8      	blx	r9
        n += 2;
 8023526:	3702      	adds	r7, #2
 8023528:	e78a      	b.n	8023440 <mg_vxprintf+0x38c>
 802352a:	9e02      	ldr	r6, [sp, #8]
 802352c:	e788      	b.n	8023440 <mg_vxprintf+0x38c>
 802352e:	9e02      	ldr	r6, [sp, #8]
 8023530:	e786      	b.n	8023440 <mg_vxprintf+0x38c>
 8023532:	9e02      	ldr	r6, [sp, #8]
 8023534:	e784      	b.n	8023440 <mg_vxprintf+0x38c>
 8023536:	9e02      	ldr	r6, [sp, #8]
 8023538:	e782      	b.n	8023440 <mg_vxprintf+0x38c>
 802353a:	9e02      	ldr	r6, [sp, #8]
 802353c:	e780      	b.n	8023440 <mg_vxprintf+0x38c>
}
 802353e:	4638      	mov	r0, r7
 8023540:	b013      	add	sp, #76	@ 0x4c
 8023542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023546:	bf00      	nop
 8023548:	080394b0 	.word	0x080394b0

0802354c <mg_xprintf>:
size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 802354c:	b40c      	push	{r2, r3}
 802354e:	b500      	push	{lr}
 8023550:	b083      	sub	sp, #12
 8023552:	ab04      	add	r3, sp, #16
 8023554:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8023558:	9301      	str	r3, [sp, #4]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 802355a:	ab01      	add	r3, sp, #4
 802355c:	f7ff fdaa 	bl	80230b4 <mg_vxprintf>
}
 8023560:	b003      	add	sp, #12
 8023562:	f85d eb04 	ldr.w	lr, [sp], #4
 8023566:	b002      	add	sp, #8
 8023568:	4770      	bx	lr
	...

0802356c <print_ip4>:
static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 802356c:	b530      	push	{r4, r5, lr}
 802356e:	b085      	sub	sp, #20
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8023570:	7853      	ldrb	r3, [r2, #1]
 8023572:	7894      	ldrb	r4, [r2, #2]
 8023574:	78d5      	ldrb	r5, [r2, #3]
 8023576:	9502      	str	r5, [sp, #8]
 8023578:	9401      	str	r4, [sp, #4]
 802357a:	9300      	str	r3, [sp, #0]
 802357c:	7813      	ldrb	r3, [r2, #0]
 802357e:	4a02      	ldr	r2, [pc, #8]	@ (8023588 <print_ip4+0x1c>)
 8023580:	f7ff ffe4 	bl	802354c <mg_xprintf>
}
 8023584:	b005      	add	sp, #20
 8023586:	bd30      	pop	{r4, r5, pc}
 8023588:	080394b4 	.word	0x080394b4

0802358c <mg_print_ip4>:
size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 802358c:	b510      	push	{r4, lr}
  uint8_t *p = va_arg(*ap, uint8_t *);
 802358e:	6813      	ldr	r3, [r2, #0]
 8023590:	1d1c      	adds	r4, r3, #4
 8023592:	6014      	str	r4, [r2, #0]
  return print_ip4(out, arg, p);
 8023594:	681a      	ldr	r2, [r3, #0]
 8023596:	f7ff ffe9 	bl	802356c <print_ip4>
}
 802359a:	bd10      	pop	{r4, pc}

0802359c <mg_print_mac>:
size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 802359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802359e:	b087      	sub	sp, #28
  uint8_t *p = va_arg(*ap, uint8_t *);
 80235a0:	6813      	ldr	r3, [r2, #0]
 80235a2:	1d1c      	adds	r4, r3, #4
 80235a4:	6014      	str	r4, [r2, #0]
 80235a6:	681a      	ldr	r2, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80235a8:	7813      	ldrb	r3, [r2, #0]
 80235aa:	7854      	ldrb	r4, [r2, #1]
 80235ac:	7895      	ldrb	r5, [r2, #2]
                    p[3], p[4], p[5]);
 80235ae:	78d6      	ldrb	r6, [r2, #3]
 80235b0:	7917      	ldrb	r7, [r2, #4]
 80235b2:	7952      	ldrb	r2, [r2, #5]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80235b4:	9204      	str	r2, [sp, #16]
 80235b6:	9703      	str	r7, [sp, #12]
 80235b8:	9602      	str	r6, [sp, #8]
 80235ba:	9501      	str	r5, [sp, #4]
 80235bc:	9400      	str	r4, [sp, #0]
 80235be:	4a02      	ldr	r2, [pc, #8]	@ (80235c8 <mg_print_mac+0x2c>)
 80235c0:	f7ff ffc4 	bl	802354c <mg_xprintf>
}
 80235c4:	b007      	add	sp, #28
 80235c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80235c8:	080394c0 	.word	0x080394c0

080235cc <mg_log>:
void mg_log(const char *fmt, ...) {
 80235cc:	b40f      	push	{r0, r1, r2, r3}
 80235ce:	b500      	push	{lr}
 80235d0:	b083      	sub	sp, #12
 80235d2:	ab04      	add	r3, sp, #16
 80235d4:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80235d8:	9301      	str	r3, [sp, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80235da:	ab01      	add	r3, sp, #4
 80235dc:	4907      	ldr	r1, [pc, #28]	@ (80235fc <mg_log+0x30>)
 80235de:	6809      	ldr	r1, [r1, #0]
 80235e0:	4807      	ldr	r0, [pc, #28]	@ (8023600 <mg_log+0x34>)
 80235e2:	6800      	ldr	r0, [r0, #0]
 80235e4:	f7ff fd66 	bl	80230b4 <mg_vxprintf>
  logs("\r\n", 2);
 80235e8:	2102      	movs	r1, #2
 80235ea:	4806      	ldr	r0, [pc, #24]	@ (8023604 <mg_log+0x38>)
 80235ec:	f7fc fd16 	bl	802001c <logs>
}
 80235f0:	b003      	add	sp, #12
 80235f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80235f6:	b004      	add	sp, #16
 80235f8:	4770      	bx	lr
 80235fa:	bf00      	nop
 80235fc:	20019780 	.word	0x20019780
 8023600:	20000128 	.word	0x20000128
 8023604:	08039ed4 	.word	0x08039ed4

08023608 <mg_vprintf>:
size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8023608:	b538      	push	{r3, r4, r5, lr}
 802360a:	4604      	mov	r4, r0
 802360c:	4613      	mov	r3, r2
  size_t old = c->send.len;
 802360e:	6d05      	ldr	r5, [r0, #80]	@ 0x50
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8023610:	460a      	mov	r2, r1
 8023612:	f100 0148 	add.w	r1, r0, #72	@ 0x48
 8023616:	4803      	ldr	r0, [pc, #12]	@ (8023624 <mg_vprintf+0x1c>)
 8023618:	f7ff fd4c 	bl	80230b4 <mg_vxprintf>
  return c->send.len - old;
 802361c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
}
 802361e:	1b40      	subs	r0, r0, r5
 8023620:	bd38      	pop	{r3, r4, r5, pc}
 8023622:	bf00      	nop
 8023624:	080266c7 	.word	0x080266c7

08023628 <mg_printf>:
size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8023628:	b40e      	push	{r1, r2, r3}
 802362a:	b500      	push	{lr}
 802362c:	b082      	sub	sp, #8
 802362e:	ab03      	add	r3, sp, #12
 8023630:	f853 1b04 	ldr.w	r1, [r3], #4
  va_start(ap, fmt);
 8023634:	9301      	str	r3, [sp, #4]
  len = mg_vprintf(c, fmt, &ap);
 8023636:	aa01      	add	r2, sp, #4
 8023638:	f7ff ffe6 	bl	8023608 <mg_vprintf>
}
 802363c:	b002      	add	sp, #8
 802363e:	f85d eb04 	ldr.w	lr, [sp], #4
 8023642:	b003      	add	sp, #12
 8023644:	4770      	bx	lr
	...

08023648 <mg_vsnprintf>:
size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8023648:	b530      	push	{r4, r5, lr}
 802364a:	b085      	sub	sp, #20
 802364c:	4605      	mov	r5, r0
 802364e:	460c      	mov	r4, r1
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8023650:	9000      	str	r0, [sp, #0]
 8023652:	9101      	str	r1, [sp, #4]
 8023654:	2100      	movs	r1, #0
 8023656:	9102      	str	r1, [sp, #8]
 8023658:	9103      	str	r1, [sp, #12]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 802365a:	4669      	mov	r1, sp
 802365c:	4804      	ldr	r0, [pc, #16]	@ (8023670 <mg_vsnprintf+0x28>)
 802365e:	f7ff fd29 	bl	80230b4 <mg_vxprintf>
  if (n < len) buf[n] = '\0';
 8023662:	4284      	cmp	r4, r0
 8023664:	d901      	bls.n	802366a <mg_vsnprintf+0x22>
 8023666:	2300      	movs	r3, #0
 8023668:	542b      	strb	r3, [r5, r0]
}
 802366a:	b005      	add	sp, #20
 802366c:	bd30      	pop	{r4, r5, pc}
 802366e:	bf00      	nop
 8023670:	080266d1 	.word	0x080266d1

08023674 <mg_http_reply>:
                   const char *fmt, ...) {
 8023674:	b408      	push	{r3}
 8023676:	b570      	push	{r4, r5, r6, lr}
 8023678:	b085      	sub	sp, #20
 802367a:	4604      	mov	r4, r0
 802367c:	460e      	mov	r6, r1
 802367e:	4615      	mov	r5, r2
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8023680:	4608      	mov	r0, r1
 8023682:	f7fc f83d 	bl	801f700 <mg_http_status_code_str>
 8023686:	4603      	mov	r3, r0
 8023688:	b1ed      	cbz	r5, 80236c6 <mg_http_reply+0x52>
 802368a:	9500      	str	r5, [sp, #0]
 802368c:	4632      	mov	r2, r6
 802368e:	4916      	ldr	r1, [pc, #88]	@ (80236e8 <mg_http_reply+0x74>)
 8023690:	4620      	mov	r0, r4
 8023692:	f7ff ffc9 	bl	8023628 <mg_printf>
  len = c->send.len;
 8023696:	6d25      	ldr	r5, [r4, #80]	@ 0x50
  va_start(ap, fmt);
 8023698:	ab0a      	add	r3, sp, #40	@ 0x28
 802369a:	9303      	str	r3, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 802369c:	ab03      	add	r3, sp, #12
 802369e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80236a0:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 80236a4:	4811      	ldr	r0, [pc, #68]	@ (80236ec <mg_http_reply+0x78>)
 80236a6:	f7ff fd05 	bl	80230b4 <mg_vxprintf>
  if (c->send.len > 16) {
 80236aa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80236ac:	2b10      	cmp	r3, #16
 80236ae:	d80c      	bhi.n	80236ca <mg_http_reply+0x56>
  c->is_resp = 0;
 80236b0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80236b4:	f36f 13c7 	bfc	r3, #7, #1
 80236b8:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80236bc:	b005      	add	sp, #20
 80236be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80236c2:	b001      	add	sp, #4
 80236c4:	4770      	bx	lr
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80236c6:	4d0a      	ldr	r5, [pc, #40]	@ (80236f0 <mg_http_reply+0x7c>)
 80236c8:	e7df      	b.n	802368a <mg_http_reply+0x16>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 80236ca:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 80236cc:	f1a5 000f 	sub.w	r0, r5, #15
 80236d0:	1b5b      	subs	r3, r3, r5
 80236d2:	4a08      	ldr	r2, [pc, #32]	@ (80236f4 <mg_http_reply+0x80>)
 80236d4:	210b      	movs	r1, #11
 80236d6:	4430      	add	r0, r6
 80236d8:	f7ff facc 	bl	8022c74 <mg_snprintf>
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 80236dc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80236de:	4405      	add	r5, r0
 80236e0:	3d0f      	subs	r5, #15
 80236e2:	2220      	movs	r2, #32
 80236e4:	555a      	strb	r2, [r3, r5]
 80236e6:	e7e3      	b.n	80236b0 <mg_http_reply+0x3c>
 80236e8:	080394e0 	.word	0x080394e0
 80236ec:	080266c7 	.word	0x080266c7
 80236f0:	0803606c 	.word	0x0803606c
 80236f4:	08039514 	.word	0x08039514

080236f8 <mg_http_etag>:
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80236f8:	b510      	push	{r4, lr}
 80236fa:	b084      	sub	sp, #16
 80236fc:	4604      	mov	r4, r0
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80236fe:	9202      	str	r2, [sp, #8]
 8023700:	2300      	movs	r3, #0
 8023702:	9303      	str	r3, [sp, #12]
 8023704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023708:	e9cd 2300 	strd	r2, r3, [sp]
 802370c:	4a02      	ldr	r2, [pc, #8]	@ (8023718 <mg_http_etag+0x20>)
 802370e:	f7ff fab1 	bl	8022c74 <mg_snprintf>
}
 8023712:	4620      	mov	r0, r4
 8023714:	b004      	add	sp, #16
 8023716:	bd10      	pop	{r4, pc}
 8023718:	0803951c 	.word	0x0803951c

0802371c <mg_url_encode>:
size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 802371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023720:	b083      	sub	sp, #12
 8023722:	4607      	mov	r7, r0
 8023724:	4689      	mov	r9, r1
 8023726:	4692      	mov	sl, r2
 8023728:	4698      	mov	r8, r3
  size_t i, n = 0;
 802372a:	2500      	movs	r5, #0
  for (i = 0; i < sl; i++) {
 802372c:	462c      	mov	r4, r5
 802372e:	e00c      	b.n	802374a <mg_url_encode+0x2e>
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 8023730:	f8cd b004 	str.w	fp, [sp, #4]
 8023734:	2301      	movs	r3, #1
 8023736:	9300      	str	r3, [sp, #0]
 8023738:	4b16      	ldr	r3, [pc, #88]	@ (8023794 <mg_url_encode+0x78>)
 802373a:	4a17      	ldr	r2, [pc, #92]	@ (8023798 <mg_url_encode+0x7c>)
 802373c:	2104      	movs	r1, #4
 802373e:	eb0a 0005 	add.w	r0, sl, r5
 8023742:	f7ff fa97 	bl	8022c74 <mg_snprintf>
      n += 3;
 8023746:	3503      	adds	r5, #3
  for (i = 0; i < sl; i++) {
 8023748:	3401      	adds	r4, #1
 802374a:	454c      	cmp	r4, r9
 802374c:	d20e      	bcs.n	802376c <mg_url_encode+0x50>
    int c = *(unsigned char *) &s[i];
 802374e:	eb07 0b04 	add.w	fp, r7, r4
 8023752:	5d3e      	ldrb	r6, [r7, r4]
    if (n + 4 >= len) return 0;
 8023754:	1d2b      	adds	r3, r5, #4
 8023756:	4543      	cmp	r3, r8
 8023758:	d216      	bcs.n	8023788 <mg_url_encode+0x6c>
    if (mg_is_url_safe(c)) {
 802375a:	4630      	mov	r0, r6
 802375c:	f7fc facc 	bl	801fcf8 <mg_is_url_safe>
 8023760:	2800      	cmp	r0, #0
 8023762:	d0e5      	beq.n	8023730 <mg_url_encode+0x14>
      buf[n++] = s[i];
 8023764:	f80a 6005 	strb.w	r6, [sl, r5]
 8023768:	3501      	adds	r5, #1
 802376a:	e7ed      	b.n	8023748 <mg_url_encode+0x2c>
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 802376c:	f1b8 0f00 	cmp.w	r8, #0
 8023770:	d00b      	beq.n	802378a <mg_url_encode+0x6e>
 8023772:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8023776:	45a8      	cmp	r8, r5
 8023778:	d902      	bls.n	8023780 <mg_url_encode+0x64>
 802377a:	2300      	movs	r3, #0
 802377c:	f80a 3005 	strb.w	r3, [sl, r5]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8023780:	2300      	movs	r3, #0
 8023782:	f80a 3008 	strb.w	r3, [sl, r8]
 8023786:	e000      	b.n	802378a <mg_url_encode+0x6e>
    if (n + 4 >= len) return 0;
 8023788:	2500      	movs	r5, #0
}
 802378a:	4628      	mov	r0, r5
 802378c:	b003      	add	sp, #12
 802378e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023792:	bf00      	nop
 8023794:	08020a51 	.word	0x08020a51
 8023798:	08039528 	.word	0x08039528

0802379c <mg_vmprintf>:
char *mg_vmprintf(const char *fmt, va_list *ap) {
 802379c:	b510      	push	{r4, lr}
 802379e:	b084      	sub	sp, #16
 80237a0:	4602      	mov	r2, r0
 80237a2:	460b      	mov	r3, r1
  struct mg_iobuf io = {0, 0, 0, 256};
 80237a4:	2400      	movs	r4, #0
 80237a6:	9400      	str	r4, [sp, #0]
 80237a8:	9401      	str	r4, [sp, #4]
 80237aa:	9402      	str	r4, [sp, #8]
 80237ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80237b0:	9103      	str	r1, [sp, #12]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 80237b2:	4669      	mov	r1, sp
 80237b4:	4802      	ldr	r0, [pc, #8]	@ (80237c0 <mg_vmprintf+0x24>)
 80237b6:	f7ff fc7d 	bl	80230b4 <mg_vxprintf>
}
 80237ba:	9800      	ldr	r0, [sp, #0]
 80237bc:	b004      	add	sp, #16
 80237be:	bd10      	pop	{r4, pc}
 80237c0:	080266c7 	.word	0x080266c7

080237c4 <mg_mprintf>:
char *mg_mprintf(const char *fmt, ...) {
 80237c4:	b40f      	push	{r0, r1, r2, r3}
 80237c6:	b500      	push	{lr}
 80237c8:	b083      	sub	sp, #12
 80237ca:	ab04      	add	r3, sp, #16
 80237cc:	f853 0b04 	ldr.w	r0, [r3], #4
  va_start(ap, fmt);
 80237d0:	9301      	str	r3, [sp, #4]
  s = mg_vmprintf(fmt, &ap);
 80237d2:	a901      	add	r1, sp, #4
 80237d4:	f7ff ffe2 	bl	802379c <mg_vmprintf>
}
 80237d8:	b003      	add	sp, #12
 80237da:	f85d eb04 	ldr.w	lr, [sp], #4
 80237de:	b004      	add	sp, #16
 80237e0:	4770      	bx	lr

080237e2 <mg_queue_next>:
size_t mg_queue_next(struct mg_queue *q, char **buf) {
 80237e2:	b538      	push	{r3, r4, r5, lr}
 80237e4:	4604      	mov	r4, r0
 80237e6:	460d      	mov	r5, r1
  if (q->tail != q->head) {
 80237e8:	6882      	ldr	r2, [r0, #8]
 80237ea:	68c3      	ldr	r3, [r0, #12]
 80237ec:	429a      	cmp	r2, r3
 80237ee:	d107      	bne.n	8023800 <mg_queue_next+0x1e>
  size_t len = 0;
 80237f0:	2000      	movs	r0, #0
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 80237f2:	b125      	cbz	r5, 80237fe <mg_queue_next+0x1c>
 80237f4:	6823      	ldr	r3, [r4, #0]
 80237f6:	68a2      	ldr	r2, [r4, #8]
 80237f8:	3204      	adds	r2, #4
 80237fa:	4413      	add	r3, r2
 80237fc:	602b      	str	r3, [r5, #0]
}
 80237fe:	bd38      	pop	{r3, r4, r5, pc}
    len = mg_queue_read_len(q);
 8023800:	f7fe fbd1 	bl	8021fa6 <mg_queue_read_len>
    if (len == 0) {  // Zero (head wrapped) ?
 8023804:	2800      	cmp	r0, #0
 8023806:	d1f4      	bne.n	80237f2 <mg_queue_next+0x10>
      q->tail = 0;   // Reset tail to the start
 8023808:	60a0      	str	r0, [r4, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 802380a:	68e2      	ldr	r2, [r4, #12]
 802380c:	68a3      	ldr	r3, [r4, #8]
 802380e:	429a      	cmp	r2, r3
 8023810:	d9ef      	bls.n	80237f2 <mg_queue_next+0x10>
 8023812:	4620      	mov	r0, r4
 8023814:	f7fe fbc7 	bl	8021fa6 <mg_queue_read_len>
 8023818:	e7eb      	b.n	80237f2 <mg_queue_next+0x10>

0802381a <mg_queue_del>:
  q->tail += len + sizeof(uint32_t);
 802381a:	6883      	ldr	r3, [r0, #8]
 802381c:	440b      	add	r3, r1
 802381e:	3304      	adds	r3, #4
 8023820:	6083      	str	r3, [r0, #8]
}
 8023822:	4770      	bx	lr

08023824 <mg_sha1_init>:
  context->state[0] = 0x67452301;
 8023824:	4b0a      	ldr	r3, [pc, #40]	@ (8023850 <mg_sha1_init+0x2c>)
 8023826:	6003      	str	r3, [r0, #0]
  context->state[1] = 0xEFCDAB89;
 8023828:	f103 3388 	add.w	r3, r3, #2290649224	@ 0x88888888
 802382c:	6043      	str	r3, [r0, #4]
  context->state[2] = 0x98BADCFE;
 802382e:	f103 4329 	add.w	r3, r3, #2835349504	@ 0xa9000000
 8023832:	f5a3 1396 	sub.w	r3, r3, #1228800	@ 0x12c000
 8023836:	f6a3 638b 	subw	r3, r3, #3723	@ 0xe8b
 802383a:	6083      	str	r3, [r0, #8]
  context->state[3] = 0x10325476;
 802383c:	f1a3 3388 	sub.w	r3, r3, #2290649224	@ 0x88888888
 8023840:	60c3      	str	r3, [r0, #12]
  context->state[4] = 0xC3D2E1F0;
 8023842:	4b04      	ldr	r3, [pc, #16]	@ (8023854 <mg_sha1_init+0x30>)
 8023844:	6103      	str	r3, [r0, #16]
  context->count[0] = context->count[1] = 0;
 8023846:	2300      	movs	r3, #0
 8023848:	6183      	str	r3, [r0, #24]
 802384a:	6143      	str	r3, [r0, #20]
}
 802384c:	4770      	bx	lr
 802384e:	bf00      	nop
 8023850:	67452301 	.word	0x67452301
 8023854:	c3d2e1f0 	.word	0xc3d2e1f0

08023858 <mg_sha1_update>:
                    size_t len) {
 8023858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802385a:	4604      	mov	r4, r0
 802385c:	460f      	mov	r7, r1
 802385e:	4616      	mov	r6, r2
  j = context->count[0];
 8023860:	6943      	ldr	r3, [r0, #20]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8023862:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8023866:	6142      	str	r2, [r0, #20]
 8023868:	429a      	cmp	r2, r3
 802386a:	d202      	bcs.n	8023872 <mg_sha1_update+0x1a>
 802386c:	6982      	ldr	r2, [r0, #24]
 802386e:	3201      	adds	r2, #1
 8023870:	6182      	str	r2, [r0, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8023872:	69a2      	ldr	r2, [r4, #24]
 8023874:	eb02 7256 	add.w	r2, r2, r6, lsr #29
 8023878:	61a2      	str	r2, [r4, #24]
  j = (j >> 3) & 63;
 802387a:	f3c3 03c5 	ubfx	r3, r3, #3, #6
  if ((j + len) > 63) {
 802387e:	18f2      	adds	r2, r6, r3
 8023880:	2a3f      	cmp	r2, #63	@ 0x3f
 8023882:	d808      	bhi.n	8023896 <mg_sha1_update+0x3e>
    i = 0;
 8023884:	2500      	movs	r5, #0
  memcpy(&context->buffer[j], &data[i], len - i);
 8023886:	3318      	adds	r3, #24
 8023888:	18e0      	adds	r0, r4, r3
 802388a:	1b72      	subs	r2, r6, r5
 802388c:	1979      	adds	r1, r7, r5
 802388e:	3004      	adds	r0, #4
 8023890:	f009 fdea 	bl	802d468 <memcpy>
}
 8023894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(&context->buffer[j], data, (i = 64 - j));
 8023896:	f103 0018 	add.w	r0, r3, #24
 802389a:	4420      	add	r0, r4
 802389c:	f1c3 0540 	rsb	r5, r3, #64	@ 0x40
 80238a0:	462a      	mov	r2, r5
 80238a2:	4639      	mov	r1, r7
 80238a4:	3004      	adds	r0, #4
 80238a6:	f009 fddf 	bl	802d468 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 80238aa:	f104 011c 	add.w	r1, r4, #28
 80238ae:	4620      	mov	r0, r4
 80238b0:	f7fd fb56 	bl	8020f60 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80238b4:	e004      	b.n	80238c0 <mg_sha1_update+0x68>
      mg_sha1_transform(context->state, &data[i]);
 80238b6:	1979      	adds	r1, r7, r5
 80238b8:	4620      	mov	r0, r4
 80238ba:	f7fd fb51 	bl	8020f60 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80238be:	3540      	adds	r5, #64	@ 0x40
 80238c0:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 80238c4:	42b3      	cmp	r3, r6
 80238c6:	d3f6      	bcc.n	80238b6 <mg_sha1_update+0x5e>
    j = 0;
 80238c8:	2300      	movs	r3, #0
 80238ca:	e7dc      	b.n	8023886 <mg_sha1_update+0x2e>

080238cc <mg_sha1_final>:
void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 80238cc:	b570      	push	{r4, r5, r6, lr}
 80238ce:	b084      	sub	sp, #16
 80238d0:	4606      	mov	r6, r0
 80238d2:	460d      	mov	r5, r1
  for (i = 0; i < 8; i++) {
 80238d4:	2300      	movs	r3, #0
 80238d6:	e013      	b.n	8023900 <mg_sha1_final+0x34>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80238d8:	2b03      	cmp	r3, #3
 80238da:	bf8c      	ite	hi
 80238dc:	2200      	movhi	r2, #0
 80238de:	2201      	movls	r2, #1
 80238e0:	3204      	adds	r2, #4
 80238e2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80238e6:	6851      	ldr	r1, [r2, #4]
                                      ((3 - (i & 3)) * 8)) &
 80238e8:	43da      	mvns	r2, r3
 80238ea:	f002 0203 	and.w	r2, r2, #3
 80238ee:	00d2      	lsls	r2, r2, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80238f0:	fa21 f202 	lsr.w	r2, r1, r2
 80238f4:	f103 0110 	add.w	r1, r3, #16
 80238f8:	4469      	add	r1, sp
 80238fa:	f801 2c08 	strb.w	r2, [r1, #-8]
  for (i = 0; i < 8; i++) {
 80238fe:	3301      	adds	r3, #1
 8023900:	2b07      	cmp	r3, #7
 8023902:	d9e9      	bls.n	80238d8 <mg_sha1_final+0xc>
  c = 0200;
 8023904:	2380      	movs	r3, #128	@ 0x80
 8023906:	f88d 3007 	strb.w	r3, [sp, #7]
  mg_sha1_update(context, &c, 1);
 802390a:	2201      	movs	r2, #1
 802390c:	f10d 0107 	add.w	r1, sp, #7
 8023910:	4628      	mov	r0, r5
 8023912:	f7ff ffa1 	bl	8023858 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8023916:	e008      	b.n	802392a <mg_sha1_final+0x5e>
    c = 0000;
 8023918:	2300      	movs	r3, #0
 802391a:	f88d 3007 	strb.w	r3, [sp, #7]
    mg_sha1_update(context, &c, 1);
 802391e:	2201      	movs	r2, #1
 8023920:	f10d 0107 	add.w	r1, sp, #7
 8023924:	4628      	mov	r0, r5
 8023926:	f7ff ff97 	bl	8023858 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 802392a:	696b      	ldr	r3, [r5, #20]
 802392c:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8023930:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8023934:	d1f0      	bne.n	8023918 <mg_sha1_final+0x4c>
  mg_sha1_update(context, finalcount, 8);
 8023936:	2208      	movs	r2, #8
 8023938:	eb0d 0102 	add.w	r1, sp, r2
 802393c:	4628      	mov	r0, r5
 802393e:	f7ff ff8b 	bl	8023858 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8023942:	2300      	movs	r3, #0
 8023944:	e00a      	b.n	802395c <mg_sha1_final+0x90>
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8023946:	089a      	lsrs	r2, r3, #2
 8023948:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
 802394c:	43da      	mvns	r2, r3
 802394e:	f002 0203 	and.w	r2, r2, #3
 8023952:	00d2      	lsls	r2, r2, #3
 8023954:	fa24 f202 	lsr.w	r2, r4, r2
    digest[i] =
 8023958:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < 20; i++) {
 802395a:	3301      	adds	r3, #1
 802395c:	2b13      	cmp	r3, #19
 802395e:	d9f2      	bls.n	8023946 <mg_sha1_final+0x7a>
  memset(context, '\0', sizeof(*context));
 8023960:	225c      	movs	r2, #92	@ 0x5c
 8023962:	2100      	movs	r1, #0
 8023964:	4628      	mov	r0, r5
 8023966:	f008 fb43 	bl	802bff0 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 802396a:	2300      	movs	r3, #0
 802396c:	9302      	str	r3, [sp, #8]
 802396e:	9303      	str	r3, [sp, #12]
}
 8023970:	b004      	add	sp, #16
 8023972:	bd70      	pop	{r4, r5, r6, pc}

08023974 <mg_http_serve_ssi>:
                       const char *fullpath) {
 8023974:	b508      	push	{r3, lr}
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8023976:	4b03      	ldr	r3, [pc, #12]	@ (8023984 <mg_http_serve_ssi+0x10>)
 8023978:	2200      	movs	r2, #0
 802397a:	f240 11f5 	movw	r1, #501	@ 0x1f5
 802397e:	f7ff fe79 	bl	8023674 <mg_http_reply>
}
 8023982:	bd08      	pop	{r3, pc}
 8023984:	08039530 	.word	0x08039530

08023988 <mg_str_s>:
struct mg_str mg_str_s(const char *s) {
 8023988:	b510      	push	{r4, lr}
 802398a:	4604      	mov	r4, r0
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802398c:	6001      	str	r1, [r0, #0]
 802398e:	b129      	cbz	r1, 802399c <mg_str_s+0x14>
 8023990:	4608      	mov	r0, r1
 8023992:	f7ec fc85 	bl	80102a0 <strlen>
 8023996:	6060      	str	r0, [r4, #4]
}
 8023998:	4620      	mov	r0, r4
 802399a:	bd10      	pop	{r4, pc}
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 802399c:	2000      	movs	r0, #0
 802399e:	e7fa      	b.n	8023996 <mg_str_s+0xe>

080239a0 <mg_str_n>:
  struct mg_str str = {(char *) s, n};
 80239a0:	6001      	str	r1, [r0, #0]
 80239a2:	6042      	str	r2, [r0, #4]
}
 80239a4:	4770      	bx	lr

080239a6 <stripquotes>:
static struct mg_str stripquotes(struct mg_str s) {
 80239a6:	b510      	push	{r4, lr}
 80239a8:	b082      	sub	sp, #8
 80239aa:	4604      	mov	r4, r0
 80239ac:	ab02      	add	r3, sp, #8
 80239ae:	e903 0006 	stmdb	r3, {r1, r2}
             : s;
 80239b2:	2a01      	cmp	r2, #1
 80239b4:	d902      	bls.n	80239bc <stripquotes+0x16>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80239b6:	780b      	ldrb	r3, [r1, #0]
 80239b8:	2b22      	cmp	r3, #34	@ 0x22
 80239ba:	d007      	beq.n	80239cc <stripquotes+0x26>
             : s;
 80239bc:	ab02      	add	r3, sp, #8
 80239be:	e913 0003 	ldmdb	r3, {r0, r1}
 80239c2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80239c6:	4620      	mov	r0, r4
 80239c8:	b002      	add	sp, #8
 80239ca:	bd10      	pop	{r4, pc}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 80239cc:	188b      	adds	r3, r1, r2
 80239ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80239d2:	2b22      	cmp	r3, #34	@ 0x22
 80239d4:	d1f2      	bne.n	80239bc <stripquotes+0x16>
             ? mg_str_n(s.buf + 1, s.len - 2)
 80239d6:	3a02      	subs	r2, #2
 80239d8:	3101      	adds	r1, #1
 80239da:	f7ff ffe1 	bl	80239a0 <mg_str_n>
             : s;
 80239de:	e7f2      	b.n	80239c6 <stripquotes+0x20>

080239e0 <mg_http_get_header_var>:
struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 80239e0:	b082      	sub	sp, #8
 80239e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239e6:	b084      	sub	sp, #16
 80239e8:	4680      	mov	r8, r0
 80239ea:	4668      	mov	r0, sp
 80239ec:	e880 0006 	stmia.w	r0, {r1, r2}
 80239f0:	930b      	str	r3, [sp, #44]	@ 0x2c
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 80239f2:	2400      	movs	r4, #0
 80239f4:	e01f      	b.n	8023a36 <mg_http_get_header_var+0x56>
      int q = p < x && *p == '"' ? 1 : 0;
 80239f6:	2201      	movs	r2, #1
 80239f8:	e037      	b.n	8023a6a <mg_http_get_header_var+0x8a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80239fa:	7818      	ldrb	r0, [r3, #0]
 80239fc:	283b      	cmp	r0, #59	@ 0x3b
 80239fe:	d00d      	beq.n	8023a1c <mg_http_get_header_var+0x3c>
 8023a00:	2820      	cmp	r0, #32
 8023a02:	d00b      	beq.n	8023a1c <mg_http_get_header_var+0x3c>
 8023a04:	282c      	cmp	r0, #44	@ 0x2c
 8023a06:	d009      	beq.n	8023a1c <mg_http_get_header_var+0x3c>
        p++;
 8023a08:	3301      	adds	r3, #1
      while (p < x &&
 8023a0a:	42bb      	cmp	r3, r7
 8023a0c:	d206      	bcs.n	8023a1c <mg_http_get_header_var+0x3c>
 8023a0e:	2a00      	cmp	r2, #0
 8023a10:	d0f3      	beq.n	80239fa <mg_http_get_header_var+0x1a>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8023a12:	428b      	cmp	r3, r1
 8023a14:	d0f8      	beq.n	8023a08 <mg_http_get_header_var+0x28>
 8023a16:	7818      	ldrb	r0, [r3, #0]
 8023a18:	2822      	cmp	r0, #34	@ 0x22
 8023a1a:	d1f5      	bne.n	8023a08 <mg_http_get_header_var+0x28>
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8023a1c:	1a5b      	subs	r3, r3, r1
 8023a1e:	ac02      	add	r4, sp, #8
 8023a20:	441a      	add	r2, r3
 8023a22:	4620      	mov	r0, r4
 8023a24:	f7ff ffbc 	bl	80239a0 <mg_str_n>
 8023a28:	e894 0006 	ldmia.w	r4, {r1, r2}
 8023a2c:	4640      	mov	r0, r8
 8023a2e:	f7ff ffba 	bl	80239a6 <stripquotes>
 8023a32:	e021      	b.n	8023a78 <mg_http_get_header_var+0x98>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8023a34:	3401      	adds	r4, #1
 8023a36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023a38:	b1ca      	cbz	r2, 8023a6e <mg_http_get_header_var+0x8e>
 8023a3a:	1915      	adds	r5, r2, r4
 8023a3c:	1cab      	adds	r3, r5, #2
 8023a3e:	9f01      	ldr	r7, [sp, #4]
 8023a40:	42bb      	cmp	r3, r7
 8023a42:	d214      	bcs.n	8023a6e <mg_http_get_header_var+0x8e>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 8023a44:	9e00      	ldr	r6, [sp, #0]
 8023a46:	5d73      	ldrb	r3, [r6, r5]
 8023a48:	2b3d      	cmp	r3, #61	@ 0x3d
 8023a4a:	d1f3      	bne.n	8023a34 <mg_http_get_header_var+0x54>
 8023a4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023a4e:	1930      	adds	r0, r6, r4
 8023a50:	f008 fa3a 	bl	802bec8 <memcmp>
 8023a54:	4602      	mov	r2, r0
 8023a56:	2800      	cmp	r0, #0
 8023a58:	d1ec      	bne.n	8023a34 <mg_http_get_header_var+0x54>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8023a5a:	3501      	adds	r5, #1
 8023a5c:	1971      	adds	r1, r6, r5
 8023a5e:	4437      	add	r7, r6
      int q = p < x && *p == '"' ? 1 : 0;
 8023a60:	42b9      	cmp	r1, r7
 8023a62:	d202      	bcs.n	8023a6a <mg_http_get_header_var+0x8a>
 8023a64:	5d73      	ldrb	r3, [r6, r5]
 8023a66:	2b22      	cmp	r3, #34	@ 0x22
 8023a68:	d0c5      	beq.n	80239f6 <mg_http_get_header_var+0x16>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 8023a6a:	460b      	mov	r3, r1
      while (p < x &&
 8023a6c:	e7cd      	b.n	8023a0a <mg_http_get_header_var+0x2a>
  return mg_str_n(NULL, 0);
 8023a6e:	2200      	movs	r2, #0
 8023a70:	4611      	mov	r1, r2
 8023a72:	4640      	mov	r0, r8
 8023a74:	f7ff ff94 	bl	80239a0 <mg_str_n>
}
 8023a78:	4640      	mov	r0, r8
 8023a7a:	b004      	add	sp, #16
 8023a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a80:	b002      	add	sp, #8
 8023a82:	4770      	bx	lr

08023a84 <mg_v4mapped>:
static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 8023a84:	b530      	push	{r4, r5, lr}
 8023a86:	b085      	sub	sp, #20
 8023a88:	466b      	mov	r3, sp
 8023a8a:	e883 0003 	stmia.w	r3, {r0, r1}
  if (str.len < 14) return false;
 8023a8e:	290d      	cmp	r1, #13
 8023a90:	d930      	bls.n	8023af4 <mg_v4mapped+0x70>
 8023a92:	4614      	mov	r4, r2
 8023a94:	460b      	mov	r3, r1
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8023a96:	4601      	mov	r1, r0
 8023a98:	7802      	ldrb	r2, [r0, #0]
 8023a9a:	2a3a      	cmp	r2, #58	@ 0x3a
 8023a9c:	d12d      	bne.n	8023afa <mg_v4mapped+0x76>
 8023a9e:	7842      	ldrb	r2, [r0, #1]
 8023aa0:	2a3a      	cmp	r2, #58	@ 0x3a
 8023aa2:	d12c      	bne.n	8023afe <mg_v4mapped+0x7a>
 8023aa4:	7982      	ldrb	r2, [r0, #6]
 8023aa6:	2a3a      	cmp	r2, #58	@ 0x3a
 8023aa8:	d12b      	bne.n	8023b02 <mg_v4mapped+0x7e>
  for (i = 2; i < 6; i++) {
 8023aaa:	2202      	movs	r2, #2
 8023aac:	e000      	b.n	8023ab0 <mg_v4mapped+0x2c>
 8023aae:	3201      	adds	r2, #1
 8023ab0:	2a05      	cmp	r2, #5
 8023ab2:	dc06      	bgt.n	8023ac2 <mg_v4mapped+0x3e>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 8023ab4:	5c88      	ldrb	r0, [r1, r2]
 8023ab6:	2866      	cmp	r0, #102	@ 0x66
 8023ab8:	d0f9      	beq.n	8023aae <mg_v4mapped+0x2a>
 8023aba:	2846      	cmp	r0, #70	@ 0x46
 8023abc:	d0f7      	beq.n	8023aae <mg_v4mapped+0x2a>
 8023abe:	2000      	movs	r0, #0
 8023ac0:	e019      	b.n	8023af6 <mg_v4mapped+0x72>
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 8023ac2:	ad02      	add	r5, sp, #8
 8023ac4:	1fda      	subs	r2, r3, #7
 8023ac6:	3107      	adds	r1, #7
 8023ac8:	4628      	mov	r0, r5
 8023aca:	f7ff ff69 	bl	80239a0 <mg_str_n>
 8023ace:	4622      	mov	r2, r4
 8023ad0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023ad4:	f7fc fee6 	bl	80208a4 <mg_aton4>
 8023ad8:	b168      	cbz	r0, 8023af6 <mg_v4mapped+0x72>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 8023ada:	6822      	ldr	r2, [r4, #0]
  memset(addr->ip, 0, sizeof(addr->ip));
 8023adc:	2300      	movs	r3, #0
 8023ade:	6023      	str	r3, [r4, #0]
 8023ae0:	6063      	str	r3, [r4, #4]
 8023ae2:	60a3      	str	r3, [r4, #8]
 8023ae4:	60e3      	str	r3, [r4, #12]
  addr->ip[10] = addr->ip[11] = 255;
 8023ae6:	23ff      	movs	r3, #255	@ 0xff
 8023ae8:	72e3      	strb	r3, [r4, #11]
 8023aea:	72a3      	strb	r3, [r4, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 8023aec:	60e2      	str	r2, [r4, #12]
  addr->is_ip6 = true;
 8023aee:	2301      	movs	r3, #1
 8023af0:	74e3      	strb	r3, [r4, #19]
  return true;
 8023af2:	e000      	b.n	8023af6 <mg_v4mapped+0x72>
  if (str.len < 14) return false;
 8023af4:	2000      	movs	r0, #0
}
 8023af6:	b005      	add	sp, #20
 8023af8:	bd30      	pop	{r4, r5, pc}
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 8023afa:	2000      	movs	r0, #0
 8023afc:	e7fb      	b.n	8023af6 <mg_v4mapped+0x72>
 8023afe:	2000      	movs	r0, #0
 8023b00:	e7f9      	b.n	8023af6 <mg_v4mapped+0x72>
 8023b02:	2000      	movs	r0, #0
 8023b04:	e7f7      	b.n	8023af6 <mg_v4mapped+0x72>

08023b06 <mkpay>:
static void mkpay(struct pkt *pkt, void *p) {
 8023b06:	b530      	push	{r4, r5, lr}
 8023b08:	b083      	sub	sp, #12
 8023b0a:	4604      	mov	r4, r0
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 8023b0c:	6803      	ldr	r3, [r0, #0]
 8023b0e:	6842      	ldr	r2, [r0, #4]
 8023b10:	441a      	add	r2, r3
 8023b12:	466d      	mov	r5, sp
 8023b14:	1a52      	subs	r2, r2, r1
 8023b16:	4628      	mov	r0, r5
 8023b18:	f7ff ff42 	bl	80239a0 <mg_str_n>
 8023b1c:	3408      	adds	r4, #8
 8023b1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8023b22:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8023b26:	b003      	add	sp, #12
 8023b28:	bd30      	pop	{r4, r5, pc}

08023b2a <mg_strcmp>:
int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8023b2a:	b084      	sub	sp, #16
 8023b2c:	f10d 0c10 	add.w	ip, sp, #16
 8023b30:	e90c 0003 	stmdb	ip, {r0, r1}
 8023b34:	4669      	mov	r1, sp
 8023b36:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8023b3a:	2300      	movs	r3, #0
  while (i < str1.len && i < str2.len) {
 8023b3c:	9a03      	ldr	r2, [sp, #12]
 8023b3e:	429a      	cmp	r2, r3
 8023b40:	d90b      	bls.n	8023b5a <mg_strcmp+0x30>
 8023b42:	9901      	ldr	r1, [sp, #4]
 8023b44:	4299      	cmp	r1, r3
 8023b46:	d908      	bls.n	8023b5a <mg_strcmp+0x30>
    int c1 = str1.buf[i];
 8023b48:	9a02      	ldr	r2, [sp, #8]
 8023b4a:	5cd1      	ldrb	r1, [r2, r3]
    int c2 = str2.buf[i];
 8023b4c:	9a00      	ldr	r2, [sp, #0]
 8023b4e:	5cd2      	ldrb	r2, [r2, r3]
    if (c1 < c2) return -1;
 8023b50:	4291      	cmp	r1, r2
 8023b52:	db09      	blt.n	8023b68 <mg_strcmp+0x3e>
    if (c1 > c2) return 1;
 8023b54:	dc0c      	bgt.n	8023b70 <mg_strcmp+0x46>
    i++;
 8023b56:	3301      	adds	r3, #1
 8023b58:	e7f0      	b.n	8023b3c <mg_strcmp+0x12>
  if (i < str1.len) return 1;
 8023b5a:	429a      	cmp	r2, r3
 8023b5c:	d80a      	bhi.n	8023b74 <mg_strcmp+0x4a>
  if (i < str2.len) return -1;
 8023b5e:	9a01      	ldr	r2, [sp, #4]
 8023b60:	429a      	cmp	r2, r3
 8023b62:	d809      	bhi.n	8023b78 <mg_strcmp+0x4e>
  return 0;
 8023b64:	2000      	movs	r0, #0
 8023b66:	e001      	b.n	8023b6c <mg_strcmp+0x42>
    if (c1 < c2) return -1;
 8023b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8023b6c:	b004      	add	sp, #16
 8023b6e:	4770      	bx	lr
    if (c1 > c2) return 1;
 8023b70:	2001      	movs	r0, #1
 8023b72:	e7fb      	b.n	8023b6c <mg_strcmp+0x42>
  if (i < str1.len) return 1;
 8023b74:	2001      	movs	r0, #1
 8023b76:	e7f9      	b.n	8023b6c <mg_strcmp+0x42>
  if (i < str2.len) return -1;
 8023b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023b7c:	e7f6      	b.n	8023b6c <mg_strcmp+0x42>

08023b7e <mg_strcasecmp>:
int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8023b7e:	b530      	push	{r4, r5, lr}
 8023b80:	b085      	sub	sp, #20
 8023b82:	ac04      	add	r4, sp, #16
 8023b84:	e904 0003 	stmdb	r4, {r0, r1}
 8023b88:	4669      	mov	r1, sp
 8023b8a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8023b8e:	2400      	movs	r4, #0
  while (i < str1.len && i < str2.len) {
 8023b90:	9b03      	ldr	r3, [sp, #12]
 8023b92:	42a3      	cmp	r3, r4
 8023b94:	d910      	bls.n	8023bb8 <mg_strcasecmp+0x3a>
 8023b96:	9a01      	ldr	r2, [sp, #4]
 8023b98:	42a2      	cmp	r2, r4
 8023b9a:	d90d      	bls.n	8023bb8 <mg_strcasecmp+0x3a>
    int c1 = mg_tolc(str1.buf[i]);
 8023b9c:	9b02      	ldr	r3, [sp, #8]
 8023b9e:	5d18      	ldrb	r0, [r3, r4]
 8023ba0:	f7fc ff8e 	bl	8020ac0 <mg_tolc>
 8023ba4:	4605      	mov	r5, r0
    int c2 = mg_tolc(str2.buf[i]);
 8023ba6:	9b00      	ldr	r3, [sp, #0]
 8023ba8:	5d18      	ldrb	r0, [r3, r4]
 8023baa:	f7fc ff89 	bl	8020ac0 <mg_tolc>
    if (c1 < c2) return -1;
 8023bae:	4285      	cmp	r5, r0
 8023bb0:	db09      	blt.n	8023bc6 <mg_strcasecmp+0x48>
    if (c1 > c2) return 1;
 8023bb2:	dc0c      	bgt.n	8023bce <mg_strcasecmp+0x50>
    i++;
 8023bb4:	3401      	adds	r4, #1
 8023bb6:	e7eb      	b.n	8023b90 <mg_strcasecmp+0x12>
  if (i < str1.len) return 1;
 8023bb8:	42a3      	cmp	r3, r4
 8023bba:	d80a      	bhi.n	8023bd2 <mg_strcasecmp+0x54>
  if (i < str2.len) return -1;
 8023bbc:	9b01      	ldr	r3, [sp, #4]
 8023bbe:	42a3      	cmp	r3, r4
 8023bc0:	d809      	bhi.n	8023bd6 <mg_strcasecmp+0x58>
  return 0;
 8023bc2:	2000      	movs	r0, #0
 8023bc4:	e001      	b.n	8023bca <mg_strcasecmp+0x4c>
    if (c1 < c2) return -1;
 8023bc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8023bca:	b005      	add	sp, #20
 8023bcc:	bd30      	pop	{r4, r5, pc}
    if (c1 > c2) return 1;
 8023bce:	2001      	movs	r0, #1
 8023bd0:	e7fb      	b.n	8023bca <mg_strcasecmp+0x4c>
  if (i < str1.len) return 1;
 8023bd2:	2001      	movs	r0, #1
 8023bd4:	e7f9      	b.n	8023bca <mg_strcasecmp+0x4c>
  if (i < str2.len) return -1;
 8023bd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023bda:	e7f6      	b.n	8023bca <mg_strcasecmp+0x4c>

08023bdc <mg_http_parse>:
int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8023bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023be0:	b086      	sub	sp, #24
 8023be2:	4604      	mov	r4, r0
 8023be4:	4616      	mov	r6, r2
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8023be6:	f7fe fb43 	bl	8022270 <mg_http_get_request_len>
 8023bea:	4607      	mov	r7, r0
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8023bec:	b1d4      	cbz	r4, 8023c24 <mg_http_parse+0x48>
 8023bee:	1825      	adds	r5, r4, r0
  memset(hm, 0, sizeof(*hm));
 8023bf0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8023bf4:	2100      	movs	r1, #0
 8023bf6:	4630      	mov	r0, r6
 8023bf8:	f008 f9fa 	bl	802bff0 <memset>
  if (req_len <= 0) return req_len;
 8023bfc:	2f00      	cmp	r7, #0
 8023bfe:	f340 808d 	ble.w	8023d1c <mg_http_parse+0x140>
  hm->message.buf = hm->head.buf = (char *) s;
 8023c02:	f8c6 4208 	str.w	r4, [r6, #520]	@ 0x208
 8023c06:	f8c6 4210 	str.w	r4, [r6, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8023c0a:	f8c6 5200 	str.w	r5, [r6, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8023c0e:	46b8      	mov	r8, r7
 8023c10:	f8c6 720c 	str.w	r7, [r6, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8023c14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023c18:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
 8023c1c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  hm->method.buf = (char *) s;
 8023c20:	6034      	str	r4, [r6, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8023c22:	e005      	b.n	8023c30 <mg_http_parse+0x54>
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8023c24:	4625      	mov	r5, r4
 8023c26:	e7e3      	b.n	8023bf0 <mg_http_parse+0x14>
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8023c28:	4414      	add	r4, r2
 8023c2a:	6873      	ldr	r3, [r6, #4]
 8023c2c:	4413      	add	r3, r2
 8023c2e:	6073      	str	r3, [r6, #4]
 8023c30:	42ac      	cmp	r4, r5
 8023c32:	d208      	bcs.n	8023c46 <mg_http_parse+0x6a>
 8023c34:	4629      	mov	r1, r5
 8023c36:	4620      	mov	r0, r4
 8023c38:	f7fb fc8a 	bl	801f550 <clen>
 8023c3c:	4602      	mov	r2, r0
 8023c3e:	2800      	cmp	r0, #0
 8023c40:	d1f2      	bne.n	8023c28 <mg_http_parse+0x4c>
 8023c42:	e000      	b.n	8023c46 <mg_http_parse+0x6a>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8023c44:	3401      	adds	r4, #1
 8023c46:	42ac      	cmp	r4, r5
 8023c48:	d202      	bcs.n	8023c50 <mg_http_parse+0x74>
 8023c4a:	7823      	ldrb	r3, [r4, #0]
 8023c4c:	2b20      	cmp	r3, #32
 8023c4e:	d0f9      	beq.n	8023c44 <mg_http_parse+0x68>
  hm->uri.buf = (char *) s;
 8023c50:	60b4      	str	r4, [r6, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8023c52:	e003      	b.n	8023c5c <mg_http_parse+0x80>
 8023c54:	4414      	add	r4, r2
 8023c56:	68f3      	ldr	r3, [r6, #12]
 8023c58:	4413      	add	r3, r2
 8023c5a:	60f3      	str	r3, [r6, #12]
 8023c5c:	42ac      	cmp	r4, r5
 8023c5e:	d208      	bcs.n	8023c72 <mg_http_parse+0x96>
 8023c60:	4629      	mov	r1, r5
 8023c62:	4620      	mov	r0, r4
 8023c64:	f7fb fc74 	bl	801f550 <clen>
 8023c68:	4602      	mov	r2, r0
 8023c6a:	2800      	cmp	r0, #0
 8023c6c:	d1f2      	bne.n	8023c54 <mg_http_parse+0x78>
 8023c6e:	e000      	b.n	8023c72 <mg_http_parse+0x96>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8023c70:	3401      	adds	r4, #1
 8023c72:	42ac      	cmp	r4, r5
 8023c74:	d202      	bcs.n	8023c7c <mg_http_parse+0xa0>
 8023c76:	7823      	ldrb	r3, [r4, #0]
 8023c78:	2b20      	cmp	r3, #32
 8023c7a:	d0f9      	beq.n	8023c70 <mg_http_parse+0x94>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8023c7c:	f106 0218 	add.w	r2, r6, #24
 8023c80:	4629      	mov	r1, r5
 8023c82:	4620      	mov	r0, r4
 8023c84:	f7fb fcab 	bl	801f5de <skiptorn>
 8023c88:	4682      	mov	sl, r0
 8023c8a:	2800      	cmp	r0, #0
 8023c8c:	f000 8082 	beq.w	8023d94 <mg_http_parse+0x1b8>
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8023c90:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8023c94:	68f4      	ldr	r4, [r6, #12]
 8023c96:	4622      	mov	r2, r4
 8023c98:	213f      	movs	r1, #63	@ 0x3f
 8023c9a:	4648      	mov	r0, r9
 8023c9c:	f7ec fab0 	bl	8010200 <memchr>
 8023ca0:	b138      	cbz	r0, 8023cb2 <mg_http_parse+0xd6>
    hm->query.buf = (char *) qs + 1;
 8023ca2:	1c42      	adds	r2, r0, #1
 8023ca4:	6132      	str	r2, [r6, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8023ca6:	444c      	add	r4, r9
 8023ca8:	1aa4      	subs	r4, r4, r2
 8023caa:	6174      	str	r4, [r6, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8023cac:	eba0 0309 	sub.w	r3, r0, r9
 8023cb0:	60f3      	str	r3, [r6, #12]
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8023cb2:	6873      	ldr	r3, [r6, #4]
 8023cb4:	2b00      	cmp	r3, #0
 8023cb6:	d06f      	beq.n	8023d98 <mg_http_parse+0x1bc>
 8023cb8:	68f3      	ldr	r3, [r6, #12]
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	d06f      	beq.n	8023d9e <mg_http_parse+0x1c2>
  if (!mg_http_parse_headers(s, end, hm->headers,
 8023cbe:	231e      	movs	r3, #30
 8023cc0:	f106 0220 	add.w	r2, r6, #32
 8023cc4:	4629      	mov	r1, r5
 8023cc6:	4650      	mov	r0, sl
 8023cc8:	f7fb fcb1 	bl	801f62e <mg_http_parse_headers>
 8023ccc:	2800      	cmp	r0, #0
 8023cce:	d069      	beq.n	8023da4 <mg_http_parse+0x1c8>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8023cd0:	4939      	ldr	r1, [pc, #228]	@ (8023db8 <mg_http_parse+0x1dc>)
 8023cd2:	4630      	mov	r0, r6
 8023cd4:	f7fe faf8 	bl	80222c8 <mg_http_get_header>
 8023cd8:	b160      	cbz	r0, 8023cf4 <mg_http_parse+0x118>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8023cda:	f506 7201 	add.w	r2, r6, #516	@ 0x204
 8023cde:	e9d0 0100 	ldrd	r0, r1, [r0]
 8023ce2:	f7fe fa73 	bl	80221cc <mg_to_size_t>
 8023ce6:	2800      	cmp	r0, #0
 8023ce8:	d05f      	beq.n	8023daa <mg_http_parse+0x1ce>
    hm->message.len = (size_t) req_len + hm->body.len;
 8023cea:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8023cee:	4443      	add	r3, r8
 8023cf0:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8023cf4:	2205      	movs	r2, #5
 8023cf6:	4931      	ldr	r1, [pc, #196]	@ (8023dbc <mg_http_parse+0x1e0>)
 8023cf8:	6830      	ldr	r0, [r6, #0]
 8023cfa:	f7fb fbdb 	bl	801f4b4 <mg_ncasecmp>
 8023cfe:	4604      	mov	r4, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8023d00:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8023d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023d08:	d00c      	beq.n	8023d24 <mg_http_parse+0x148>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8023d0a:	f8d6 3204 	ldr.w	r3, [r6, #516]	@ 0x204
 8023d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023d12:	d029      	beq.n	8023d68 <mg_http_parse+0x18c>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8023d14:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 8023d18:	4598      	cmp	r8, r3
 8023d1a:	d849      	bhi.n	8023db0 <mg_http_parse+0x1d4>
}
 8023d1c:	4638      	mov	r0, r7
 8023d1e:	b006      	add	sp, #24
 8023d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8023d24:	2800      	cmp	r0, #0
 8023d26:	d0f0      	beq.n	8023d0a <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8023d28:	466d      	mov	r5, sp
 8023d2a:	4925      	ldr	r1, [pc, #148]	@ (8023dc0 <mg_http_parse+0x1e4>)
 8023d2c:	4628      	mov	r0, r5
 8023d2e:	f7ff fe2b 	bl	8023988 <mg_str_s>
 8023d32:	e895 000c 	ldmia.w	r5, {r2, r3}
 8023d36:	e896 0003 	ldmia.w	r6, {r0, r1}
 8023d3a:	f7ff ff20 	bl	8023b7e <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8023d3e:	2800      	cmp	r0, #0
 8023d40:	d0e3      	beq.n	8023d0a <mg_http_parse+0x12e>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8023d42:	ad02      	add	r5, sp, #8
 8023d44:	491f      	ldr	r1, [pc, #124]	@ (8023dc4 <mg_http_parse+0x1e8>)
 8023d46:	4628      	mov	r0, r5
 8023d48:	f7ff fe1e 	bl	8023988 <mg_str_s>
 8023d4c:	e895 000c 	ldmia.w	r5, {r2, r3}
 8023d50:	e896 0003 	ldmia.w	r6, {r0, r1}
 8023d54:	f7ff ff13 	bl	8023b7e <mg_strcasecmp>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8023d58:	2800      	cmp	r0, #0
 8023d5a:	d0d6      	beq.n	8023d0a <mg_http_parse+0x12e>
    hm->body.len = 0;
 8023d5c:	2300      	movs	r3, #0
 8023d5e:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8023d62:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8023d66:	e7d0      	b.n	8023d0a <mg_http_parse+0x12e>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8023d68:	2c00      	cmp	r4, #0
 8023d6a:	d1d3      	bne.n	8023d14 <mg_http_parse+0x138>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8023d6c:	ac04      	add	r4, sp, #16
 8023d6e:	4916      	ldr	r1, [pc, #88]	@ (8023dc8 <mg_http_parse+0x1ec>)
 8023d70:	4620      	mov	r0, r4
 8023d72:	f7ff fe09 	bl	8023988 <mg_str_s>
 8023d76:	e894 000c 	ldmia.w	r4, {r2, r3}
 8023d7a:	f106 0108 	add.w	r1, r6, #8
 8023d7e:	c903      	ldmia	r1, {r0, r1}
 8023d80:	f7ff fefd 	bl	8023b7e <mg_strcasecmp>
  if (hm->body.len == (size_t) ~0 && is_response &&
 8023d84:	2800      	cmp	r0, #0
 8023d86:	d1c5      	bne.n	8023d14 <mg_http_parse+0x138>
    hm->body.len = 0;
 8023d88:	2300      	movs	r3, #0
 8023d8a:	f8c6 3204 	str.w	r3, [r6, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8023d8e:	f8c6 8214 	str.w	r8, [r6, #532]	@ 0x214
 8023d92:	e7bf      	b.n	8023d14 <mg_http_parse+0x138>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8023d94:	2700      	movs	r7, #0
 8023d96:	e7c1      	b.n	8023d1c <mg_http_parse+0x140>
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8023d98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8023d9c:	e7be      	b.n	8023d1c <mg_http_parse+0x140>
 8023d9e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8023da2:	e7bb      	b.n	8023d1c <mg_http_parse+0x140>
    return -1;  // error when parsing
 8023da4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8023da8:	e7b8      	b.n	8023d1c <mg_http_parse+0x140>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8023daa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8023dae:	e7b5      	b.n	8023d1c <mg_http_parse+0x140>
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8023db0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8023db4:	e7b2      	b.n	8023d1c <mg_http_parse+0x140>
 8023db6:	bf00      	nop
 8023db8:	08039540 	.word	0x08039540
 8023dbc:	08039550 	.word	0x08039550
 8023dc0:	080366e8 	.word	0x080366e8
 8023dc4:	08035b24 	.word	0x08035b24
 8023dc8:	08039558 	.word	0x08039558

08023dcc <mg_match>:
bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8023dcc:	b530      	push	{r4, r5, lr}
 8023dce:	b085      	sub	sp, #20
 8023dd0:	ac04      	add	r4, sp, #16
 8023dd2:	e904 0003 	stmdb	r4, {r0, r1}
 8023dd6:	4669      	mov	r1, sp
 8023dd8:	e881 000c 	stmia.w	r1, {r2, r3}
 8023ddc:	9808      	ldr	r0, [sp, #32]
  if (caps) caps->buf = NULL, caps->len = 0;
 8023dde:	b110      	cbz	r0, 8023de6 <mg_match+0x1a>
 8023de0:	2300      	movs	r3, #0
 8023de2:	6003      	str	r3, [r0, #0]
 8023de4:	6043      	str	r3, [r0, #4]
      ni = i++, nj = j + 1;
 8023de6:	2400      	movs	r4, #0
 8023de8:	46a4      	mov	ip, r4
 8023dea:	4621      	mov	r1, r4
 8023dec:	4623      	mov	r3, r4
 8023dee:	e028      	b.n	8023e42 <mg_match+0x76>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8023df0:	9a02      	ldr	r2, [sp, #8]
 8023df2:	440a      	add	r2, r1
 8023df4:	6002      	str	r2, [r0, #0]
 8023df6:	2201      	movs	r2, #1
 8023df8:	6042      	str	r2, [r0, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8023dfa:	2200      	movs	r2, #0
 8023dfc:	6082      	str	r2, [r0, #8]
 8023dfe:	60c2      	str	r2, [r0, #12]
 8023e00:	3008      	adds	r0, #8
      i++, j++;
 8023e02:	3301      	adds	r3, #1
 8023e04:	3101      	adds	r1, #1
 8023e06:	e01c      	b.n	8023e42 <mg_match+0x76>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8023e08:	429a      	cmp	r2, r3
 8023e0a:	d905      	bls.n	8023e18 <mg_match+0x4c>
 8023e0c:	9a00      	ldr	r2, [sp, #0]
 8023e0e:	5cd2      	ldrb	r2, [r2, r3]
 8023e10:	2a2a      	cmp	r2, #42	@ 0x2a
 8023e12:	d045      	beq.n	8023ea0 <mg_match+0xd4>
 8023e14:	2a23      	cmp	r2, #35	@ 0x23
 8023e16:	d043      	beq.n	8023ea0 <mg_match+0xd4>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8023e18:	2c00      	cmp	r4, #0
 8023e1a:	d065      	beq.n	8023ee8 <mg_match+0x11c>
 8023e1c:	9b03      	ldr	r3, [sp, #12]
 8023e1e:	42a3      	cmp	r3, r4
 8023e20:	d365      	bcc.n	8023eee <mg_match+0x122>
 8023e22:	9b00      	ldr	r3, [sp, #0]
 8023e24:	f813 300c 	ldrb.w	r3, [r3, ip]
 8023e28:	2b23      	cmp	r3, #35	@ 0x23
 8023e2a:	d003      	beq.n	8023e34 <mg_match+0x68>
 8023e2c:	9b02      	ldr	r3, [sp, #8]
 8023e2e:	5c5b      	ldrb	r3, [r3, r1]
 8023e30:	2b2f      	cmp	r3, #47	@ 0x2f
 8023e32:	d05e      	beq.n	8023ef2 <mg_match+0x126>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8023e34:	2800      	cmp	r0, #0
 8023e36:	d046      	beq.n	8023ec6 <mg_match+0xfa>
 8023e38:	6803      	ldr	r3, [r0, #0]
 8023e3a:	2b00      	cmp	r3, #0
 8023e3c:	d03c      	beq.n	8023eb8 <mg_match+0xec>
      i = ni, j = nj;
 8023e3e:	4621      	mov	r1, r4
 8023e40:	4663      	mov	r3, ip
  while (i < p.len || j < s.len) {
 8023e42:	9a01      	ldr	r2, [sp, #4]
 8023e44:	429a      	cmp	r2, r3
 8023e46:	d802      	bhi.n	8023e4e <mg_match+0x82>
 8023e48:	9d03      	ldr	r5, [sp, #12]
 8023e4a:	428d      	cmp	r5, r1
 8023e4c:	d941      	bls.n	8023ed2 <mg_match+0x106>
    if (i < p.len && j < s.len &&
 8023e4e:	429a      	cmp	r2, r3
 8023e50:	d9da      	bls.n	8023e08 <mg_match+0x3c>
 8023e52:	9d03      	ldr	r5, [sp, #12]
 8023e54:	428d      	cmp	r5, r1
 8023e56:	d9d7      	bls.n	8023e08 <mg_match+0x3c>
        (p.buf[i] == '?' ||
 8023e58:	9d00      	ldr	r5, [sp, #0]
 8023e5a:	f815 e003 	ldrb.w	lr, [r5, r3]
    if (i < p.len && j < s.len &&
 8023e5e:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8023e62:	d009      	beq.n	8023e78 <mg_match+0xac>
        (p.buf[i] == '?' ||
 8023e64:	f1be 0f2a 	cmp.w	lr, #42	@ 0x2a
 8023e68:	d0ce      	beq.n	8023e08 <mg_match+0x3c>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8023e6a:	f1be 0f23 	cmp.w	lr, #35	@ 0x23
 8023e6e:	d0cb      	beq.n	8023e08 <mg_match+0x3c>
 8023e70:	9d02      	ldr	r5, [sp, #8]
 8023e72:	5c6d      	ldrb	r5, [r5, r1]
 8023e74:	45ae      	cmp	lr, r5
 8023e76:	d1c7      	bne.n	8023e08 <mg_match+0x3c>
      if (caps == NULL) {
 8023e78:	2800      	cmp	r0, #0
 8023e7a:	d0c2      	beq.n	8023e02 <mg_match+0x36>
      } else if (p.buf[i] == '?') {
 8023e7c:	f1be 0f3f 	cmp.w	lr, #63	@ 0x3f
 8023e80:	d0b6      	beq.n	8023df0 <mg_match+0x24>
      } else if (caps->buf != NULL && caps->len == 0) {
 8023e82:	6802      	ldr	r2, [r0, #0]
 8023e84:	2a00      	cmp	r2, #0
 8023e86:	d0bc      	beq.n	8023e02 <mg_match+0x36>
 8023e88:	6845      	ldr	r5, [r0, #4]
 8023e8a:	2d00      	cmp	r5, #0
 8023e8c:	d1b9      	bne.n	8023e02 <mg_match+0x36>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8023e8e:	9d02      	ldr	r5, [sp, #8]
 8023e90:	440d      	add	r5, r1
 8023e92:	1aad      	subs	r5, r5, r2
 8023e94:	6045      	str	r5, [r0, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8023e96:	2200      	movs	r2, #0
 8023e98:	60c2      	str	r2, [r0, #12]
 8023e9a:	6082      	str	r2, [r0, #8]
 8023e9c:	3008      	adds	r0, #8
 8023e9e:	e7b0      	b.n	8023e02 <mg_match+0x36>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8023ea0:	b108      	cbz	r0, 8023ea6 <mg_match+0xda>
 8023ea2:	6802      	ldr	r2, [r0, #0]
 8023ea4:	b11a      	cbz	r2, 8023eae <mg_match+0xe2>
      ni = i++, nj = j + 1;
 8023ea6:	1c4c      	adds	r4, r1, #1
 8023ea8:	469c      	mov	ip, r3
 8023eaa:	3301      	adds	r3, #1
 8023eac:	e7c9      	b.n	8023e42 <mg_match+0x76>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8023eae:	6042      	str	r2, [r0, #4]
 8023eb0:	9a02      	ldr	r2, [sp, #8]
 8023eb2:	440a      	add	r2, r1
 8023eb4:	6002      	str	r2, [r0, #0]
 8023eb6:	e7f6      	b.n	8023ea6 <mg_match+0xda>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8023eb8:	6843      	ldr	r3, [r0, #4]
 8023eba:	b93b      	cbnz	r3, 8023ecc <mg_match+0x100>
        caps--, caps->len = 0;  // Restart previous cap
 8023ebc:	3808      	subs	r0, #8
 8023ebe:	6043      	str	r3, [r0, #4]
      i = ni, j = nj;
 8023ec0:	4621      	mov	r1, r4
 8023ec2:	4663      	mov	r3, ip
 8023ec4:	e7bd      	b.n	8023e42 <mg_match+0x76>
 8023ec6:	4621      	mov	r1, r4
 8023ec8:	4663      	mov	r3, ip
 8023eca:	e7ba      	b.n	8023e42 <mg_match+0x76>
 8023ecc:	4621      	mov	r1, r4
 8023ece:	4663      	mov	r3, ip
 8023ed0:	e7b7      	b.n	8023e42 <mg_match+0x76>
  if (caps && caps->buf && caps->len == 0) {
 8023ed2:	b180      	cbz	r0, 8023ef6 <mg_match+0x12a>
 8023ed4:	6803      	ldr	r3, [r0, #0]
 8023ed6:	b183      	cbz	r3, 8023efa <mg_match+0x12e>
 8023ed8:	6842      	ldr	r2, [r0, #4]
 8023eda:	b982      	cbnz	r2, 8023efe <mg_match+0x132>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8023edc:	9a02      	ldr	r2, [sp, #8]
 8023ede:	440a      	add	r2, r1
 8023ee0:	1ad3      	subs	r3, r2, r3
 8023ee2:	6043      	str	r3, [r0, #4]
  return true;
 8023ee4:	2001      	movs	r0, #1
 8023ee6:	e000      	b.n	8023eea <mg_match+0x11e>
      return false;
 8023ee8:	2000      	movs	r0, #0
}
 8023eea:	b005      	add	sp, #20
 8023eec:	bd30      	pop	{r4, r5, pc}
      return false;
 8023eee:	2000      	movs	r0, #0
 8023ef0:	e7fb      	b.n	8023eea <mg_match+0x11e>
 8023ef2:	2000      	movs	r0, #0
 8023ef4:	e7f9      	b.n	8023eea <mg_match+0x11e>
  return true;
 8023ef6:	2001      	movs	r0, #1
 8023ef8:	e7f7      	b.n	8023eea <mg_match+0x11e>
 8023efa:	2001      	movs	r0, #1
 8023efc:	e7f5      	b.n	8023eea <mg_match+0x11e>
 8023efe:	2001      	movs	r0, #1
 8023f00:	e7f3      	b.n	8023eea <mg_match+0x11e>

08023f02 <mg_span>:
bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8023f02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023f06:	b085      	sub	sp, #20
 8023f08:	ac04      	add	r4, sp, #16
 8023f0a:	e904 0003 	stmdb	r4, {r0, r1}
 8023f0e:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
  if (s.len == 0 || s.buf == NULL) {
 8023f12:	b379      	cbz	r1, 8023f74 <mg_span+0x72>
 8023f14:	4690      	mov	r8, r2
 8023f16:	461f      	mov	r7, r3
 8023f18:	460d      	mov	r5, r1
 8023f1a:	9e02      	ldr	r6, [sp, #8]
 8023f1c:	b366      	cbz	r6, 8023f78 <mg_span+0x76>
    size_t len = 0;
 8023f1e:	2400      	movs	r4, #0
 8023f20:	e000      	b.n	8023f24 <mg_span+0x22>
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8023f22:	3401      	adds	r4, #1
 8023f24:	42a5      	cmp	r5, r4
 8023f26:	d902      	bls.n	8023f2e <mg_span+0x2c>
 8023f28:	5d31      	ldrb	r1, [r6, r4]
 8023f2a:	4281      	cmp	r1, r0
 8023f2c:	d1f9      	bne.n	8023f22 <mg_span+0x20>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8023f2e:	f1b8 0f00 	cmp.w	r8, #0
 8023f32:	d009      	beq.n	8023f48 <mg_span+0x46>
 8023f34:	46e9      	mov	r9, sp
 8023f36:	4622      	mov	r2, r4
 8023f38:	4631      	mov	r1, r6
 8023f3a:	4648      	mov	r0, r9
 8023f3c:	f7ff fd30 	bl	80239a0 <mg_str_n>
 8023f40:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023f44:	e888 0003 	stmia.w	r8, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8023f48:	b187      	cbz	r7, 8023f6c <mg_span+0x6a>
 8023f4a:	46e8      	mov	r8, sp
 8023f4c:	1b2a      	subs	r2, r5, r4
 8023f4e:	1931      	adds	r1, r6, r4
 8023f50:	4640      	mov	r0, r8
 8023f52:	f7ff fd25 	bl	80239a0 <mg_str_n>
 8023f56:	e898 0003 	ldmia.w	r8, {r0, r1}
 8023f5a:	e887 0003 	stmia.w	r7, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8023f5e:	42a5      	cmp	r5, r4
 8023f60:	d904      	bls.n	8023f6c <mg_span+0x6a>
 8023f62:	4603      	mov	r3, r0
 8023f64:	3301      	adds	r3, #1
 8023f66:	603b      	str	r3, [r7, #0]
 8023f68:	1e4b      	subs	r3, r1, #1
 8023f6a:	607b      	str	r3, [r7, #4]
    return true;
 8023f6c:	2001      	movs	r0, #1
}
 8023f6e:	b005      	add	sp, #20
 8023f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;  // Empty string, nothing to span - fail
 8023f74:	2000      	movs	r0, #0
 8023f76:	e7fa      	b.n	8023f6e <mg_span+0x6c>
 8023f78:	2000      	movs	r0, #0
 8023f7a:	e7f8      	b.n	8023f6e <mg_span+0x6c>

08023f7c <mg_http_var>:
struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8023f7c:	b082      	sub	sp, #8
 8023f7e:	b510      	push	{r4, lr}
 8023f80:	b08a      	sub	sp, #40	@ 0x28
 8023f82:	4604      	mov	r4, r0
 8023f84:	f10d 0c08 	add.w	ip, sp, #8
 8023f88:	e88c 0006 	stmia.w	ip, {r1, r2}
 8023f8c:	930d      	str	r3, [sp, #52]	@ 0x34
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8023f8e:	2200      	movs	r2, #0
 8023f90:	4611      	mov	r1, r2
 8023f92:	f7ff fd05 	bl	80239a0 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8023f96:	ab02      	add	r3, sp, #8
 8023f98:	2226      	movs	r2, #38	@ 0x26
 8023f9a:	9200      	str	r2, [sp, #0]
 8023f9c:	aa08      	add	r2, sp, #32
 8023f9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023fa2:	f7ff ffae 	bl	8023f02 <mg_span>
 8023fa6:	b1c8      	cbz	r0, 8023fdc <mg_http_var+0x60>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8023fa8:	233d      	movs	r3, #61	@ 0x3d
 8023faa:	9300      	str	r3, [sp, #0]
 8023fac:	ab04      	add	r3, sp, #16
 8023fae:	aa06      	add	r2, sp, #24
 8023fb0:	a90a      	add	r1, sp, #40	@ 0x28
 8023fb2:	e911 0003 	ldmdb	r1, {r0, r1}
 8023fb6:	f7ff ffa4 	bl	8023f02 <mg_span>
 8023fba:	2800      	cmp	r0, #0
 8023fbc:	d0eb      	beq.n	8023f96 <mg_http_var+0x1a>
 8023fbe:	9a07      	ldr	r2, [sp, #28]
 8023fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023fc2:	4293      	cmp	r3, r2
 8023fc4:	d1e7      	bne.n	8023f96 <mg_http_var+0x1a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8023fc6:	9906      	ldr	r1, [sp, #24]
 8023fc8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023fca:	f7fb fa73 	bl	801f4b4 <mg_ncasecmp>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8023fce:	2800      	cmp	r0, #0
 8023fd0:	d1e1      	bne.n	8023f96 <mg_http_var+0x1a>
      result = v;
 8023fd2:	ab04      	add	r3, sp, #16
 8023fd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023fd8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8023fdc:	4620      	mov	r0, r4
 8023fde:	b00a      	add	sp, #40	@ 0x28
 8023fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023fe4:	b002      	add	sp, #8
 8023fe6:	4770      	bx	lr

08023fe8 <guess_content_type>:
static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8023fe8:	b530      	push	{r4, r5, lr}
 8023fea:	b08d      	sub	sp, #52	@ 0x34
 8023fec:	4604      	mov	r4, r0
 8023fee:	a802      	add	r0, sp, #8
 8023ff0:	e880 0006 	stmia.w	r0, {r1, r2}
  struct mg_str entry, k, v, s = mg_str(extra);
 8023ff4:	4619      	mov	r1, r3
 8023ff6:	a804      	add	r0, sp, #16
 8023ff8:	f7ff fcc6 	bl	8023988 <mg_str_s>
  size_t i = 0;
 8023ffc:	2300      	movs	r3, #0
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8023ffe:	e000      	b.n	8024002 <guess_content_type+0x1a>
 8024000:	3301      	adds	r3, #1
 8024002:	9803      	ldr	r0, [sp, #12]
 8024004:	4298      	cmp	r0, r3
 8024006:	d906      	bls.n	8024016 <guess_content_type+0x2e>
 8024008:	1ac1      	subs	r1, r0, r3
 802400a:	9a02      	ldr	r2, [sp, #8]
 802400c:	440a      	add	r2, r1
 802400e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8024012:	2a2e      	cmp	r2, #46	@ 0x2e
 8024014:	d1f4      	bne.n	8024000 <guess_content_type+0x18>
  path.buf += path.len - i;
 8024016:	1ac0      	subs	r0, r0, r3
 8024018:	9a02      	ldr	r2, [sp, #8]
 802401a:	4402      	add	r2, r0
 802401c:	9202      	str	r2, [sp, #8]
  path.len = i;
 802401e:	9303      	str	r3, [sp, #12]
  while (mg_span(s, &entry, &s, ',')) {
 8024020:	ab04      	add	r3, sp, #16
 8024022:	222c      	movs	r2, #44	@ 0x2c
 8024024:	9200      	str	r2, [sp, #0]
 8024026:	aa0a      	add	r2, sp, #40	@ 0x28
 8024028:	e893 0003 	ldmia.w	r3, {r0, r1}
 802402c:	f7ff ff69 	bl	8023f02 <mg_span>
 8024030:	b1c0      	cbz	r0, 8024064 <guess_content_type+0x7c>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 8024032:	233d      	movs	r3, #61	@ 0x3d
 8024034:	9300      	str	r3, [sp, #0]
 8024036:	ab06      	add	r3, sp, #24
 8024038:	aa08      	add	r2, sp, #32
 802403a:	a90c      	add	r1, sp, #48	@ 0x30
 802403c:	e911 0003 	ldmdb	r1, {r0, r1}
 8024040:	f7ff ff5f 	bl	8023f02 <mg_span>
 8024044:	2800      	cmp	r0, #0
 8024046:	d0eb      	beq.n	8024020 <guess_content_type+0x38>
 8024048:	ab08      	add	r3, sp, #32
 802404a:	cb0c      	ldmia	r3, {r2, r3}
 802404c:	a902      	add	r1, sp, #8
 802404e:	c903      	ldmia	r1, {r0, r1}
 8024050:	f7ff fd6b 	bl	8023b2a <mg_strcmp>
 8024054:	2800      	cmp	r0, #0
 8024056:	d1e3      	bne.n	8024020 <guess_content_type+0x38>
 8024058:	ab06      	add	r3, sp, #24
 802405a:	e893 0003 	ldmia.w	r3, {r0, r1}
 802405e:	e884 0003 	stmia.w	r4, {r0, r1}
 8024062:	e01c      	b.n	802409e <guess_content_type+0xb6>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8024064:	2500      	movs	r5, #0
 8024066:	4b0f      	ldr	r3, [pc, #60]	@ (80240a4 <guess_content_type+0xbc>)
 8024068:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
 802406c:	b19b      	cbz	r3, 8024096 <guess_content_type+0xae>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 802406e:	4b0d      	ldr	r3, [pc, #52]	@ (80240a4 <guess_content_type+0xbc>)
 8024070:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024074:	cb0c      	ldmia	r3, {r2, r3}
 8024076:	a902      	add	r1, sp, #8
 8024078:	c903      	ldmia	r1, {r0, r1}
 802407a:	f7ff fd56 	bl	8023b2a <mg_strcmp>
 802407e:	b108      	cbz	r0, 8024084 <guess_content_type+0x9c>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8024080:	3502      	adds	r5, #2
 8024082:	e7f0      	b.n	8024066 <guess_content_type+0x7e>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8024084:	3501      	adds	r5, #1
 8024086:	4b07      	ldr	r3, [pc, #28]	@ (80240a4 <guess_content_type+0xbc>)
 8024088:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802408c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024090:	e884 0003 	stmia.w	r4, {r0, r1}
 8024094:	e003      	b.n	802409e <guess_content_type+0xb6>
  return mg_str("text/plain; charset=utf-8");
 8024096:	4904      	ldr	r1, [pc, #16]	@ (80240a8 <guess_content_type+0xc0>)
 8024098:	4620      	mov	r0, r4
 802409a:	f7ff fc75 	bl	8023988 <mg_str_s>
}
 802409e:	4620      	mov	r0, r4
 80240a0:	b00d      	add	sp, #52	@ 0x34
 80240a2:	bd30      	pop	{r4, r5, pc}
 80240a4:	0803aa48 	.word	0x0803aa48
 80240a8:	0803955c 	.word	0x0803955c

080240ac <getrange>:
static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80240ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80240ae:	b087      	sub	sp, #28
 80240b0:	4604      	mov	r4, r0
 80240b2:	460e      	mov	r6, r1
 80240b4:	4617      	mov	r7, r2
  for (i = 0; i + 6 < s->len; i++) {
 80240b6:	2500      	movs	r5, #0
 80240b8:	1da8      	adds	r0, r5, #6
 80240ba:	6863      	ldr	r3, [r4, #4]
 80240bc:	4298      	cmp	r0, r3
 80240be:	d23c      	bcs.n	802413a <getrange+0x8e>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 80240c0:	6821      	ldr	r1, [r4, #0]
 80240c2:	1b5b      	subs	r3, r3, r5
 80240c4:	1f9a      	subs	r2, r3, #6
 80240c6:	4401      	add	r1, r0
 80240c8:	a804      	add	r0, sp, #16
 80240ca:	f7ff fc69 	bl	80239a0 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 80240ce:	6820      	ldr	r0, [r4, #0]
 80240d0:	2206      	movs	r2, #6
 80240d2:	491b      	ldr	r1, [pc, #108]	@ (8024140 <getrange+0x94>)
 80240d4:	4428      	add	r0, r5
 80240d6:	f007 fef7 	bl	802bec8 <memcmp>
 80240da:	b108      	cbz	r0, 80240e0 <getrange+0x34>
  for (i = 0; i + 6 < s->len; i++) {
 80240dc:	3501      	adds	r5, #1
 80240de:	e7eb      	b.n	80240b8 <getrange+0xc>
    if (mg_span(v, &k, &v, '-')) {
 80240e0:	ab04      	add	r3, sp, #16
 80240e2:	222d      	movs	r2, #45	@ 0x2d
 80240e4:	9200      	str	r2, [sp, #0]
 80240e6:	aa02      	add	r2, sp, #8
 80240e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80240ec:	f7ff ff09 	bl	8023f02 <mg_span>
 80240f0:	b1c0      	cbz	r0, 8024124 <getrange+0x78>
      if (mg_to_size_t(k, a)) numparsed++;
 80240f2:	4632      	mov	r2, r6
 80240f4:	ab02      	add	r3, sp, #8
 80240f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80240fa:	f7fe f867 	bl	80221cc <mg_to_size_t>
 80240fe:	b928      	cbnz	r0, 802410c <getrange+0x60>
  size_t i, numparsed = 0;
 8024100:	2400      	movs	r4, #0
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024102:	9b05      	ldr	r3, [sp, #20]
 8024104:	b923      	cbnz	r3, 8024110 <getrange+0x64>
}
 8024106:	4620      	mov	r0, r4
 8024108:	b007      	add	sp, #28
 802410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (mg_to_size_t(k, a)) numparsed++;
 802410c:	2401      	movs	r4, #1
 802410e:	e7f8      	b.n	8024102 <getrange+0x56>
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8024110:	463a      	mov	r2, r7
 8024112:	ab06      	add	r3, sp, #24
 8024114:	e913 0003 	ldmdb	r3, {r0, r1}
 8024118:	f7fe f858 	bl	80221cc <mg_to_size_t>
 802411c:	2800      	cmp	r0, #0
 802411e:	d0f2      	beq.n	8024106 <getrange+0x5a>
 8024120:	3401      	adds	r4, #1
 8024122:	e7f0      	b.n	8024106 <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8024124:	4632      	mov	r2, r6
 8024126:	ab06      	add	r3, sp, #24
 8024128:	e913 0003 	ldmdb	r3, {r0, r1}
 802412c:	f7fe f84e 	bl	80221cc <mg_to_size_t>
 8024130:	b908      	cbnz	r0, 8024136 <getrange+0x8a>
  size_t i, numparsed = 0;
 8024132:	2400      	movs	r4, #0
 8024134:	e7e7      	b.n	8024106 <getrange+0x5a>
      if (mg_to_size_t(v, a)) numparsed++;
 8024136:	2401      	movs	r4, #1
    break;
 8024138:	e7e5      	b.n	8024106 <getrange+0x5a>
  size_t i, numparsed = 0;
 802413a:	2400      	movs	r4, #0
 802413c:	e7e3      	b.n	8024106 <getrange+0x5a>
 802413e:	bf00      	nop
 8024140:	08039578 	.word	0x08039578

08024144 <mg_http_serve_file>:
                        const struct mg_http_serve_opts *opts) {
 8024144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024148:	b0e7      	sub	sp, #412	@ 0x19c
 802414a:	4607      	mov	r7, r0
 802414c:	4688      	mov	r8, r1
 802414e:	4614      	mov	r4, r2
 8024150:	461d      	mov	r5, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8024152:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8024156:	f1b9 0f00 	cmp.w	r9, #0
 802415a:	d036      	beq.n	80241ca <mg_http_serve_file+0x86>
  size_t size = 0;
 802415c:	2300      	movs	r3, #0
 802415e:	932d      	str	r3, [sp, #180]	@ 0xb4
  time_t mtime = 0;
 8024160:	2200      	movs	r2, #0
 8024162:	2300      	movs	r3, #0
 8024164:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8024168:	ae5e      	add	r6, sp, #376	@ 0x178
 802416a:	4621      	mov	r1, r4
 802416c:	4630      	mov	r0, r6
 802416e:	f7ff fc0b 	bl	8023988 <mg_str_s>
 8024172:	68eb      	ldr	r3, [r5, #12]
 8024174:	e896 0006 	ldmia.w	r6, {r1, r2}
 8024178:	a828      	add	r0, sp, #160	@ 0xa0
 802417a:	f7ff ff35 	bl	8023fe8 <guess_content_type>
  if (path != NULL) {
 802417e:	2c00      	cmp	r4, #0
 8024180:	d053      	beq.n	802422a <mg_http_serve_file+0xe6>
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8024182:	4995      	ldr	r1, [pc, #596]	@ (80243d8 <mg_http_serve_file+0x294>)
 8024184:	4640      	mov	r0, r8
 8024186:	f7fe f89f 	bl	80222c8 <mg_http_get_header>
    if (ae != NULL) {
 802418a:	4606      	mov	r6, r0
 802418c:	2800      	cmp	r0, #0
 802418e:	d042      	beq.n	8024216 <mg_http_serve_file+0xd2>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8024190:	6802      	ldr	r2, [r0, #0]
 8024192:	6841      	ldr	r1, [r0, #4]
 8024194:	4891      	ldr	r0, [pc, #580]	@ (80243dc <mg_http_serve_file+0x298>)
 8024196:	f7ff fb15 	bl	80237c4 <mg_mprintf>
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 802419a:	4683      	mov	fp, r0
 802419c:	b1d8      	cbz	r0, 80241d6 <mg_http_serve_file+0x92>
 802419e:	4990      	ldr	r1, [pc, #576]	@ (80243e0 <mg_http_serve_file+0x29c>)
 80241a0:	f007 ffa6 	bl	802c0f0 <strstr>
 80241a4:	4606      	mov	r6, r0
 80241a6:	b1d0      	cbz	r0, 80241de <mg_http_serve_file+0x9a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80241a8:	4623      	mov	r3, r4
 80241aa:	4a8e      	ldr	r2, [pc, #568]	@ (80243e4 <mg_http_serve_file+0x2a0>)
 80241ac:	2180      	movs	r1, #128	@ 0x80
 80241ae:	a82e      	add	r0, sp, #184	@ 0xb8
 80241b0:	f7fe fd60 	bl	8022c74 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80241b4:	2201      	movs	r2, #1
 80241b6:	a92e      	add	r1, sp, #184	@ 0xb8
 80241b8:	4648      	mov	r0, r9
 80241ba:	f7fd ffcc 	bl	8022156 <mg_fs_open>
        if (fd != NULL) gzip = true, path = tmp;
 80241be:	4606      	mov	r6, r0
 80241c0:	b130      	cbz	r0, 80241d0 <mg_http_serve_file+0x8c>
 80241c2:	f04f 0a01 	mov.w	sl, #1
 80241c6:	ac2e      	add	r4, sp, #184	@ 0xb8
 80241c8:	e00b      	b.n	80241e2 <mg_http_serve_file+0x9e>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80241ca:	f8df 9240 	ldr.w	r9, [pc, #576]	@ 802440c <mg_http_serve_file+0x2c8>
 80241ce:	e7c5      	b.n	802415c <mg_http_serve_file+0x18>
  bool gzip = false;
 80241d0:	f04f 0a00 	mov.w	sl, #0
 80241d4:	e005      	b.n	80241e2 <mg_http_serve_file+0x9e>
  struct mg_fd *fd = NULL;
 80241d6:	4606      	mov	r6, r0
  bool gzip = false;
 80241d8:	f04f 0a00 	mov.w	sl, #0
 80241dc:	e001      	b.n	80241e2 <mg_http_serve_file+0x9e>
 80241de:	f04f 0a00 	mov.w	sl, #0
      free(ae_);
 80241e2:	4658      	mov	r0, fp
 80241e4:	f7f5 fffa 	bl	801a1dc <vPortFree>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 80241e8:	b1c6      	cbz	r6, 802421c <mg_http_serve_file+0xd8>
  if (fd == NULL && opts->page404 != NULL) {
 80241ea:	b316      	cbz	r6, 8024232 <mg_http_serve_file+0xee>
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80241ec:	f8d9 3000 	ldr.w	r3, [r9]
 80241f0:	aa2a      	add	r2, sp, #168	@ 0xa8
 80241f2:	a92d      	add	r1, sp, #180	@ 0xb4
 80241f4:	4620      	mov	r0, r4
 80241f6:	4798      	blx	r3
 80241f8:	2800      	cmp	r0, #0
 80241fa:	d137      	bne.n	802426c <mg_http_serve_file+0x128>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 80241fc:	4b7a      	ldr	r3, [pc, #488]	@ (80243e8 <mg_http_serve_file+0x2a4>)
 80241fe:	68aa      	ldr	r2, [r5, #8]
 8024200:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8024204:	4638      	mov	r0, r7
 8024206:	f7ff fa35 	bl	8023674 <mg_http_reply>
    mg_fs_close(fd);
 802420a:	4630      	mov	r0, r6
 802420c:	f7fd ffbc 	bl	8022188 <mg_fs_close>
}
 8024210:	b067      	add	sp, #412	@ 0x19c
 8024212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool gzip = false;
 8024216:	f04f 0a00 	mov.w	sl, #0
 802421a:	e7e5      	b.n	80241e8 <mg_http_serve_file+0xa4>
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 802421c:	2201      	movs	r2, #1
 802421e:	4621      	mov	r1, r4
 8024220:	4648      	mov	r0, r9
 8024222:	f7fd ff98 	bl	8022156 <mg_fs_open>
 8024226:	4606      	mov	r6, r0
 8024228:	e7df      	b.n	80241ea <mg_http_serve_file+0xa6>
  struct mg_fd *fd = NULL;
 802422a:	4626      	mov	r6, r4
  bool gzip = false;
 802422c:	f04f 0a00 	mov.w	sl, #0
 8024230:	e7db      	b.n	80241ea <mg_http_serve_file+0xa6>
  if (fd == NULL && opts->page404 != NULL) {
 8024232:	6929      	ldr	r1, [r5, #16]
 8024234:	b1b9      	cbz	r1, 8024266 <mg_http_serve_file+0x122>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8024236:	2201      	movs	r2, #1
 8024238:	4648      	mov	r0, r9
 802423a:	f7fd ff8c 	bl	8022156 <mg_fs_open>
 802423e:	4606      	mov	r6, r0
    path = opts->page404;
 8024240:	692c      	ldr	r4, [r5, #16]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8024242:	f50d 7bc0 	add.w	fp, sp, #384	@ 0x180
 8024246:	4621      	mov	r1, r4
 8024248:	4658      	mov	r0, fp
 802424a:	f7ff fb9d 	bl	8023988 <mg_str_s>
 802424e:	68eb      	ldr	r3, [r5, #12]
 8024250:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8024254:	a80a      	add	r0, sp, #40	@ 0x28
 8024256:	f7ff fec7 	bl	8023fe8 <guess_content_type>
 802425a:	ab28      	add	r3, sp, #160	@ 0xa0
 802425c:	aa0a      	add	r2, sp, #40	@ 0x28
 802425e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024262:	e883 0003 	stmia.w	r3, {r0, r1}
  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8024266:	2e00      	cmp	r6, #0
 8024268:	d1c0      	bne.n	80241ec <mg_http_serve_file+0xa8>
 802426a:	e7c7      	b.n	80241fc <mg_http_serve_file+0xb8>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 802426c:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
 8024270:	e9cd 2300 	strd	r2, r3, [sp]
 8024274:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8024276:	2140      	movs	r1, #64	@ 0x40
 8024278:	a84e      	add	r0, sp, #312	@ 0x138
 802427a:	f7ff fa3d 	bl	80236f8 <mg_http_etag>
 802427e:	b190      	cbz	r0, 80242a6 <mg_http_serve_file+0x162>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8024280:	495a      	ldr	r1, [pc, #360]	@ (80243ec <mg_http_serve_file+0x2a8>)
 8024282:	4640      	mov	r0, r8
 8024284:	f7fe f820 	bl	80222c8 <mg_http_get_header>
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8024288:	4604      	mov	r4, r0
 802428a:	b160      	cbz	r0, 80242a6 <mg_http_serve_file+0x162>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 802428c:	f50d 7bc4 	add.w	fp, sp, #392	@ 0x188
 8024290:	a94e      	add	r1, sp, #312	@ 0x138
 8024292:	4658      	mov	r0, fp
 8024294:	f7ff fb78 	bl	8023988 <mg_str_s>
 8024298:	e89b 000c 	ldmia.w	fp, {r2, r3}
 802429c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80242a0:	f7ff fc6d 	bl	8023b7e <mg_strcasecmp>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 80242a4:	b340      	cbz	r0, 80242f8 <mg_http_serve_file+0x1b4>
    size_t r1 = 0, r2 = 0, cl = size;
 80242a6:	f04f 0b00 	mov.w	fp, #0
 80242aa:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
 80242ae:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80242b2:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 80242b4:	494e      	ldr	r1, [pc, #312]	@ (80243f0 <mg_http_serve_file+0x2ac>)
 80242b6:	4640      	mov	r0, r8
 80242b8:	f7fe f806 	bl	80222c8 <mg_http_get_header>
    range[0] = '\0';
 80242bc:	f88d b03c 	strb.w	fp, [sp, #60]	@ 0x3c
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80242c0:	2800      	cmp	r0, #0
 80242c2:	d040      	beq.n	8024346 <mg_http_serve_file+0x202>
 80242c4:	aa0e      	add	r2, sp, #56	@ 0x38
 80242c6:	a90d      	add	r1, sp, #52	@ 0x34
 80242c8:	f7ff fef0 	bl	80240ac <getrange>
 80242cc:	2800      	cmp	r0, #0
 80242ce:	dd70      	ble.n	80243b2 <mg_http_serve_file+0x26e>
      if (n == 1) r2 = cl - 1;
 80242d0:	2801      	cmp	r0, #1
 80242d2:	d01c      	beq.n	802430e <mg_http_serve_file+0x1ca>
      if (r1 > r2 || r2 >= cl) {
 80242d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80242d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80242d8:	429a      	cmp	r2, r3
 80242da:	d801      	bhi.n	80242e0 <mg_http_serve_file+0x19c>
 80242dc:	42a3      	cmp	r3, r4
 80242de:	d319      	bcc.n	8024314 <mg_http_serve_file+0x1d0>
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80242e0:	2400      	movs	r4, #0
 80242e2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80242e4:	9300      	str	r3, [sp, #0]
 80242e6:	9401      	str	r4, [sp, #4]
 80242e8:	4a42      	ldr	r2, [pc, #264]	@ (80243f4 <mg_http_serve_file+0x2b0>)
 80242ea:	2164      	movs	r1, #100	@ 0x64
 80242ec:	a80f      	add	r0, sp, #60	@ 0x3c
 80242ee:	f7fe fcc1 	bl	8022c74 <mg_snprintf>
        status = 416;
 80242f2:	f44f 79d0 	mov.w	r9, #416	@ 0x1a0
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80242f6:	e028      	b.n	802434a <mg_http_serve_file+0x206>
    mg_fs_close(fd);
 80242f8:	4630      	mov	r0, r6
 80242fa:	f7fd ff45 	bl	8022188 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 80242fe:	4b3e      	ldr	r3, [pc, #248]	@ (80243f8 <mg_http_serve_file+0x2b4>)
 8024300:	68aa      	ldr	r2, [r5, #8]
 8024302:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8024306:	4638      	mov	r0, r7
 8024308:	f7ff f9b4 	bl	8023674 <mg_http_reply>
 802430c:	e780      	b.n	8024210 <mg_http_serve_file+0xcc>
      if (n == 1) r2 = cl - 1;
 802430e:	1e63      	subs	r3, r4, #1
 8024310:	930e      	str	r3, [sp, #56]	@ 0x38
 8024312:	e7df      	b.n	80242d4 <mg_http_serve_file+0x190>
        cl = r2 - r1 + 1;
 8024314:	1a9b      	subs	r3, r3, r2
 8024316:	1c5c      	adds	r4, r3, #1
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8024318:	1911      	adds	r1, r2, r4
 802431a:	3901      	subs	r1, #1
        mg_snprintf(range, sizeof(range),
 802431c:	2300      	movs	r3, #0
 802431e:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8024320:	9004      	str	r0, [sp, #16]
 8024322:	9305      	str	r3, [sp, #20]
 8024324:	9102      	str	r1, [sp, #8]
 8024326:	9303      	str	r3, [sp, #12]
 8024328:	9200      	str	r2, [sp, #0]
 802432a:	9301      	str	r3, [sp, #4]
 802432c:	4a33      	ldr	r2, [pc, #204]	@ (80243fc <mg_http_serve_file+0x2b8>)
 802432e:	2164      	movs	r1, #100	@ 0x64
 8024330:	a80f      	add	r0, sp, #60	@ 0x3c
 8024332:	f7fe fc9f 	bl	8022c74 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8024336:	f8d9 3018 	ldr.w	r3, [r9, #24]
 802433a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802433c:	6830      	ldr	r0, [r6, #0]
 802433e:	4798      	blx	r3
        status = 206;
 8024340:	f04f 09ce 	mov.w	r9, #206	@ 0xce
 8024344:	e001      	b.n	802434a <mg_http_serve_file+0x206>
    int n, status = 200;
 8024346:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
    mg_printf(c,
 802434a:	4648      	mov	r0, r9
 802434c:	f7fb f9d8 	bl	801f700 <mg_http_status_code_str>
 8024350:	4603      	mov	r3, r0
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8024352:	9929      	ldr	r1, [sp, #164]	@ 0xa4
    mg_printf(c,
 8024354:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024356:	46a4      	mov	ip, r4
 8024358:	f1ba 0f00 	cmp.w	sl, #0
 802435c:	d02c      	beq.n	80243b8 <mg_http_serve_file+0x274>
 802435e:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 8024410 <mg_http_serve_file+0x2cc>
              range, opts->extra_headers ? opts->extra_headers : "");
 8024362:	68aa      	ldr	r2, [r5, #8]
    mg_printf(c,
 8024364:	b35a      	cbz	r2, 80243be <mg_http_serve_file+0x27a>
 8024366:	9208      	str	r2, [sp, #32]
 8024368:	aa0f      	add	r2, sp, #60	@ 0x3c
 802436a:	9207      	str	r2, [sp, #28]
 802436c:	f8cd e018 	str.w	lr, [sp, #24]
 8024370:	f8cd c010 	str.w	ip, [sp, #16]
 8024374:	2200      	movs	r2, #0
 8024376:	9205      	str	r2, [sp, #20]
 8024378:	aa4e      	add	r2, sp, #312	@ 0x138
 802437a:	9202      	str	r2, [sp, #8]
 802437c:	9001      	str	r0, [sp, #4]
 802437e:	9100      	str	r1, [sp, #0]
 8024380:	464a      	mov	r2, r9
 8024382:	491f      	ldr	r1, [pc, #124]	@ (8024400 <mg_http_serve_file+0x2bc>)
 8024384:	4638      	mov	r0, r7
 8024386:	f7ff f94f 	bl	8023628 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 802438a:	ad64      	add	r5, sp, #400	@ 0x190
 802438c:	491d      	ldr	r1, [pc, #116]	@ (8024404 <mg_http_serve_file+0x2c0>)
 802438e:	4628      	mov	r0, r5
 8024390:	f7ff fafa 	bl	8023988 <mg_str_s>
 8024394:	e895 000c 	ldmia.w	r5, {r2, r3}
 8024398:	e898 0003 	ldmia.w	r8, {r0, r1}
 802439c:	f7ff fbef 	bl	8023b7e <mg_strcasecmp>
 80243a0:	b178      	cbz	r0, 80243c2 <mg_http_serve_file+0x27e>
      c->pfn = static_cb;
 80243a2:	4b19      	ldr	r3, [pc, #100]	@ (8024408 <mg_http_serve_file+0x2c4>)
 80243a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      c->pfn_data = fd;
 80243a8:	f8c7 6084 	str.w	r6, [r7, #132]	@ 0x84
      *clp = cl;
 80243ac:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
}
 80243b0:	e72e      	b.n	8024210 <mg_http_serve_file+0xcc>
    int n, status = 200;
 80243b2:	f04f 09c8 	mov.w	r9, #200	@ 0xc8
 80243b6:	e7c8      	b.n	802434a <mg_http_serve_file+0x206>
    mg_printf(c,
 80243b8:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 80243f8 <mg_http_serve_file+0x2b4>
 80243bc:	e7d1      	b.n	8024362 <mg_http_serve_file+0x21e>
 80243be:	4a0e      	ldr	r2, [pc, #56]	@ (80243f8 <mg_http_serve_file+0x2b4>)
 80243c0:	e7d1      	b.n	8024366 <mg_http_serve_file+0x222>
      c->is_resp = 0;
 80243c2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 80243c6:	f36f 13c7 	bfc	r3, #7, #1
 80243ca:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_fs_close(fd);
 80243ce:	4630      	mov	r0, r6
 80243d0:	f7fd feda 	bl	8022188 <mg_fs_close>
 80243d4:	e71c      	b.n	8024210 <mg_http_serve_file+0xcc>
 80243d6:	bf00      	nop
 80243d8:	0803959c 	.word	0x0803959c
 80243dc:	080394a8 	.word	0x080394a8
 80243e0:	0803a95c 	.word	0x0803a95c
 80243e4:	080395ac 	.word	0x080395ac
 80243e8:	080395b4 	.word	0x080395b4
 80243ec:	080395c0 	.word	0x080395c0
 80243f0:	080395d0 	.word	0x080395d0
 80243f4:	080395d8 	.word	0x080395d8
 80243f8:	0803606c 	.word	0x0803606c
 80243fc:	080395f8 	.word	0x080395f8
 8024400:	08039620 	.word	0x08039620
 8024404:	08039670 	.word	0x08039670
 8024408:	0802651d 	.word	0x0802651d
 802440c:	20000130 	.word	0x20000130
 8024410:	08039580 	.word	0x08039580

08024414 <mg_str_to_num>:
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024418:	b083      	sub	sp, #12
 802441a:	ac02      	add	r4, sp, #8
 802441c:	e904 0003 	stmdb	r4, {r0, r1}
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8024420:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024422:	3901      	subs	r1, #1
 8024424:	2907      	cmp	r1, #7
 8024426:	f200 8128 	bhi.w	802467a <mg_str_to_num+0x266>
 802442a:	e8df f011 	tbh	[pc, r1, lsl #1]
 802442e:	0008      	.short	0x0008
 8024430:	01260020 	.word	0x01260020
 8024434:	0126000c 	.word	0x0126000c
 8024438:	01260126 	.word	0x01260126
 802443c:	001c      	.short	0x001c
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 802443e:	20ff      	movs	r0, #255	@ 0xff
 8024440:	f04f 0e00 	mov.w	lr, #0
 8024444:	e003      	b.n	802444e <mg_str_to_num+0x3a>
 8024446:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802444a:	f04f 0e00 	mov.w	lr, #0
  if (base == 0 && str.len >= 2) {
 802444e:	b9e2      	cbnz	r2, 802448a <mg_str_to_num+0x76>
 8024450:	9901      	ldr	r1, [sp, #4]
 8024452:	2901      	cmp	r1, #1
 8024454:	d926      	bls.n	80244a4 <mg_str_to_num+0x90>
    if (str.buf[i] == '0') {
 8024456:	9a00      	ldr	r2, [sp, #0]
 8024458:	7811      	ldrb	r1, [r2, #0]
 802445a:	2930      	cmp	r1, #48	@ 0x30
 802445c:	d00c      	beq.n	8024478 <mg_str_to_num+0x64>
  size_t i = 0, ndigits = 0;
 802445e:	f04f 0c00 	mov.w	ip, #0
      base = 10;
 8024462:	220a      	movs	r2, #10
 8024464:	e013      	b.n	802448e <mg_str_to_num+0x7a>
bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8024466:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802446a:	4686      	mov	lr, r0
 802446c:	e7ef      	b.n	802444e <mg_str_to_num+0x3a>
 802446e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8024472:	f04f 0e00 	mov.w	lr, #0
 8024476:	e7ea      	b.n	802444e <mg_str_to_num+0x3a>
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024478:	7852      	ldrb	r2, [r2, #1]
 802447a:	2a62      	cmp	r2, #98	@ 0x62
 802447c:	d015      	beq.n	80244aa <mg_str_to_num+0x96>
 802447e:	2a78      	cmp	r2, #120	@ 0x78
 8024480:	d017      	beq.n	80244b2 <mg_str_to_num+0x9e>
      i++;
 8024482:	f04f 0c01 	mov.w	ip, #1
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8024486:	220a      	movs	r2, #10
 8024488:	e001      	b.n	802448e <mg_str_to_num+0x7a>
  size_t i = 0, ndigits = 0;
 802448a:	f04f 0c00 	mov.w	ip, #0
  switch (base) {
 802448e:	2a0a      	cmp	r2, #10
 8024490:	d044      	beq.n	802451c <mg_str_to_num+0x108>
 8024492:	2a10      	cmp	r2, #16
 8024494:	f000 80d4 	beq.w	8024640 <mg_str_to_num+0x22c>
 8024498:	2a02      	cmp	r2, #2
 802449a:	d00e      	beq.n	80244ba <mg_str_to_num+0xa6>
 802449c:	2000      	movs	r0, #0
}
 802449e:	b003      	add	sp, #12
 80244a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i = 0, ndigits = 0;
 80244a4:	f04f 0c00 	mov.w	ip, #0
 80244a8:	e7f1      	b.n	802448e <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80244aa:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80244ae:	4662      	mov	r2, ip
 80244b0:	e7ed      	b.n	802448e <mg_str_to_num+0x7a>
      if (base != 10) ++i;
 80244b2:	f04f 0c02 	mov.w	ip, #2
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80244b6:	2210      	movs	r2, #16
 80244b8:	e7e9      	b.n	802448e <mg_str_to_num+0x7a>
  switch (base) {
 80244ba:	2200      	movs	r2, #0
 80244bc:	4611      	mov	r1, r2
 80244be:	4614      	mov	r4, r2
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 80244c0:	9d01      	ldr	r5, [sp, #4]
 80244c2:	4565      	cmp	r5, ip
 80244c4:	f240 80c0 	bls.w	8024648 <mg_str_to_num+0x234>
 80244c8:	9d00      	ldr	r5, [sp, #0]
 80244ca:	f815 600c 	ldrb.w	r6, [r5, ip]
 80244ce:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 80244d2:	b2ff      	uxtb	r7, r7
 80244d4:	2f01      	cmp	r7, #1
 80244d6:	f200 80b7 	bhi.w	8024648 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80244da:	3e30      	subs	r6, #48	@ 0x30
 80244dc:	ea4f 78e6 	mov.w	r8, r6, asr #31
        if (result > max / 2) return false;  // Overflow
 80244e0:	ea4f 0950 	mov.w	r9, r0, lsr #1
 80244e4:	ea49 79ce 	orr.w	r9, r9, lr, lsl #31
 80244e8:	ea4f 075e 	mov.w	r7, lr, lsr #1
 80244ec:	4591      	cmp	r9, r2
 80244ee:	418f      	sbcs	r7, r1
 80244f0:	f0c0 80c5 	bcc.w	802467e <mg_str_to_num+0x26a>
        result *= 2;
 80244f4:	1892      	adds	r2, r2, r2
 80244f6:	4149      	adcs	r1, r1
        if (result > max - digit) return false;  // Overflow
 80244f8:	ebb0 0a06 	subs.w	sl, r0, r6
 80244fc:	eb6e 0708 	sbc.w	r7, lr, r8
 8024500:	4592      	cmp	sl, r2
 8024502:	418f      	sbcs	r7, r1
 8024504:	f0c0 80bd 	bcc.w	8024682 <mg_str_to_num+0x26e>
        result += digit;
 8024508:	18b2      	adds	r2, r6, r2
 802450a:	eb48 0101 	adc.w	r1, r8, r1
        i++, ndigits++;
 802450e:	f10c 0c01 	add.w	ip, ip, #1
 8024512:	3401      	adds	r4, #1
 8024514:	e7d4      	b.n	80244c0 <mg_str_to_num+0xac>
        if (result > max / 10) return false;  // Overflow
 8024516:	f04f 0901 	mov.w	r9, #1
 802451a:	e017      	b.n	802454c <mg_str_to_num+0x138>
  switch (base) {
 802451c:	2200      	movs	r2, #0
 802451e:	4611      	mov	r1, r2
 8024520:	4614      	mov	r4, r2
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8024522:	9d01      	ldr	r5, [sp, #4]
 8024524:	4565      	cmp	r5, ip
 8024526:	f240 808f 	bls.w	8024648 <mg_str_to_num+0x234>
 802452a:	9d00      	ldr	r5, [sp, #0]
 802452c:	f815 700c 	ldrb.w	r7, [r5, ip]
 8024530:	2f2f      	cmp	r7, #47	@ 0x2f
 8024532:	f240 8089 	bls.w	8024648 <mg_str_to_num+0x234>
 8024536:	2f39      	cmp	r7, #57	@ 0x39
 8024538:	f200 8086 	bhi.w	8024648 <mg_str_to_num+0x234>
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 802453c:	3f30      	subs	r7, #48	@ 0x30
 802453e:	ea4f 78e7 	mov.w	r8, r7, asr #31
        if (result > max / 10) return false;  // Overflow
 8024542:	f04f 0900 	mov.w	r9, #0
 8024546:	eb10 060e 	adds.w	r6, r0, lr
 802454a:	d2e4      	bcs.n	8024516 <mg_str_to_num+0x102>
 802454c:	444e      	add	r6, r9
 802454e:	4d54      	ldr	r5, [pc, #336]	@ (80246a0 <mg_str_to_num+0x28c>)
 8024550:	fba5 9b06 	umull	r9, fp, r5, r6
 8024554:	f02b 0903 	bic.w	r9, fp, #3
 8024558:	eb09 099b 	add.w	r9, r9, fp, lsr #2
 802455c:	eba6 0609 	sub.w	r6, r6, r9
 8024560:	1b86      	subs	r6, r0, r6
 8024562:	f16e 0b00 	sbc.w	fp, lr, #0
 8024566:	f04f 39cc 	mov.w	r9, #3435973836	@ 0xcccccccc
 802456a:	fb09 f906 	mul.w	r9, r9, r6
 802456e:	fb05 990b 	mla	r9, r5, fp, r9
 8024572:	fba6 6a05 	umull	r6, sl, r6, r5
 8024576:	44d1      	add	r9, sl
 8024578:	0876      	lsrs	r6, r6, #1
 802457a:	ea46 76c9 	orr.w	r6, r6, r9, lsl #31
 802457e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8024582:	4296      	cmp	r6, r2
 8024584:	eb79 0901 	sbcs.w	r9, r9, r1
 8024588:	d37d      	bcc.n	8024686 <mg_str_to_num+0x272>
        result *= 10;
 802458a:	ea4f 0981 	mov.w	r9, r1, lsl #2
 802458e:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
 8024592:	0096      	lsls	r6, r2, #2
 8024594:	18b2      	adds	r2, r6, r2
 8024596:	eb41 0909 	adc.w	r9, r1, r9
 802459a:	1892      	adds	r2, r2, r2
 802459c:	eb49 0909 	adc.w	r9, r9, r9
        if (result > max - digit) return false;  // Overflow
 80245a0:	ebb0 0a07 	subs.w	sl, r0, r7
 80245a4:	eb6e 0108 	sbc.w	r1, lr, r8
 80245a8:	4592      	cmp	sl, r2
 80245aa:	eb71 0109 	sbcs.w	r1, r1, r9
 80245ae:	d36c      	bcc.n	802468a <mg_str_to_num+0x276>
        result += digit;
 80245b0:	18ba      	adds	r2, r7, r2
 80245b2:	eb48 0109 	adc.w	r1, r8, r9
        i++, ndigits++;
 80245b6:	f10c 0c01 	add.w	ip, ip, #1
 80245ba:	3401      	adds	r4, #1
 80245bc:	e7b1      	b.n	8024522 <mg_str_to_num+0x10e>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80245be:	f1a6 0741 	sub.w	r7, r6, #65	@ 0x41
 80245c2:	b2ff      	uxtb	r7, r7
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80245c4:	2f05      	cmp	r7, #5
 80245c6:	d832      	bhi.n	802462e <mg_str_to_num+0x21a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80245c8:	3e37      	subs	r6, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80245ca:	46b0      	mov	r8, r6
 80245cc:	17f6      	asrs	r6, r6, #31
        if (digit == (uint64_t) ~0) break;
 80245ce:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80245d2:	bf08      	it	eq
 80245d4:	f1b8 3fff 	cmpeq.w	r8, #4294967295	@ 0xffffffff
 80245d8:	d036      	beq.n	8024648 <mg_str_to_num+0x234>
        if (result > max / 16) return false;  // Overflow
 80245da:	ea4f 1910 	mov.w	r9, r0, lsr #4
 80245de:	ea49 790e 	orr.w	r9, r9, lr, lsl #28
 80245e2:	ea4f 171e 	mov.w	r7, lr, lsr #4
 80245e6:	4591      	cmp	r9, r2
 80245e8:	418f      	sbcs	r7, r1
 80245ea:	d350      	bcc.n	802468e <mg_str_to_num+0x27a>
        result *= 16;
 80245ec:	0109      	lsls	r1, r1, #4
 80245ee:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80245f2:	0112      	lsls	r2, r2, #4
        if (result > max - digit) return false;  // Overflow
 80245f4:	ebb0 0908 	subs.w	r9, r0, r8
 80245f8:	eb6e 0706 	sbc.w	r7, lr, r6
 80245fc:	4591      	cmp	r9, r2
 80245fe:	418f      	sbcs	r7, r1
 8024600:	d347      	bcc.n	8024692 <mg_str_to_num+0x27e>
        result += digit;
 8024602:	eb18 0202 	adds.w	r2, r8, r2
 8024606:	eb46 0101 	adc.w	r1, r6, r1
        i++, ndigits++;
 802460a:	f10c 0c01 	add.w	ip, ip, #1
 802460e:	3401      	adds	r4, #1
      while (i < str.len) {
 8024610:	9d01      	ldr	r5, [sp, #4]
 8024612:	4565      	cmp	r5, ip
 8024614:	d918      	bls.n	8024648 <mg_str_to_num+0x234>
        char c = str.buf[i];
 8024616:	9d00      	ldr	r5, [sp, #0]
 8024618:	f815 600c 	ldrb.w	r6, [r5, ip]
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 802461c:	f1a6 0730 	sub.w	r7, r6, #48	@ 0x30
 8024620:	b2ff      	uxtb	r7, r7
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024622:	2f09      	cmp	r7, #9
 8024624:	d8cb      	bhi.n	80245be <mg_str_to_num+0x1aa>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8024626:	3e30      	subs	r6, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8024628:	46b0      	mov	r8, r6
 802462a:	17f6      	asrs	r6, r6, #31
 802462c:	e7cf      	b.n	80245ce <mg_str_to_num+0x1ba>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 802462e:	f1a6 0761 	sub.w	r7, r6, #97	@ 0x61
 8024632:	b2ff      	uxtb	r7, r7
                                                  : (uint64_t) ~0;
 8024634:	2f05      	cmp	r7, #5
 8024636:	d807      	bhi.n	8024648 <mg_str_to_num+0x234>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8024638:	3e57      	subs	r6, #87	@ 0x57
                                                  : (uint64_t) ~0;
 802463a:	46b0      	mov	r8, r6
 802463c:	17f6      	asrs	r6, r6, #31
 802463e:	e7c6      	b.n	80245ce <mg_str_to_num+0x1ba>
  switch (base) {
 8024640:	2200      	movs	r2, #0
 8024642:	4611      	mov	r1, r2
 8024644:	4614      	mov	r4, r2
 8024646:	e7e3      	b.n	8024610 <mg_str_to_num+0x1fc>
  if (ndigits == 0) return false;
 8024648:	b32c      	cbz	r4, 8024696 <mg_str_to_num+0x282>
  if (i != str.len) return false;
 802464a:	9801      	ldr	r0, [sp, #4]
 802464c:	4560      	cmp	r0, ip
 802464e:	d124      	bne.n	802469a <mg_str_to_num+0x286>
  if (val_len == 1) {
 8024650:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024652:	2801      	cmp	r0, #1
 8024654:	d009      	beq.n	802466a <mg_str_to_num+0x256>
  } else if (val_len == 2) {
 8024656:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024658:	2802      	cmp	r0, #2
 802465a:	d008      	beq.n	802466e <mg_str_to_num+0x25a>
  } else if (val_len == 4) {
 802465c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802465e:	2804      	cmp	r0, #4
 8024660:	d008      	beq.n	8024674 <mg_str_to_num+0x260>
    *((uint64_t *) val) = (uint64_t) result;
 8024662:	601a      	str	r2, [r3, #0]
 8024664:	6059      	str	r1, [r3, #4]
  return true;
 8024666:	2001      	movs	r0, #1
 8024668:	e719      	b.n	802449e <mg_str_to_num+0x8a>
    *((uint8_t *) val) = (uint8_t) result;
 802466a:	701a      	strb	r2, [r3, #0]
 802466c:	e717      	b.n	802449e <mg_str_to_num+0x8a>
    *((uint16_t *) val) = (uint16_t) result;
 802466e:	801a      	strh	r2, [r3, #0]
  return true;
 8024670:	2001      	movs	r0, #1
 8024672:	e714      	b.n	802449e <mg_str_to_num+0x8a>
    *((uint32_t *) val) = (uint32_t) result;
 8024674:	601a      	str	r2, [r3, #0]
  return true;
 8024676:	2001      	movs	r0, #1
 8024678:	e711      	b.n	802449e <mg_str_to_num+0x8a>
  switch (base) {
 802467a:	2000      	movs	r0, #0
 802467c:	e70f      	b.n	802449e <mg_str_to_num+0x8a>
        if (result > max / 2) return false;  // Overflow
 802467e:	2000      	movs	r0, #0
 8024680:	e70d      	b.n	802449e <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024682:	2000      	movs	r0, #0
 8024684:	e70b      	b.n	802449e <mg_str_to_num+0x8a>
        if (result > max / 10) return false;  // Overflow
 8024686:	2000      	movs	r0, #0
 8024688:	e709      	b.n	802449e <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 802468a:	2000      	movs	r0, #0
 802468c:	e707      	b.n	802449e <mg_str_to_num+0x8a>
        if (result > max / 16) return false;  // Overflow
 802468e:	2000      	movs	r0, #0
 8024690:	e705      	b.n	802449e <mg_str_to_num+0x8a>
        if (result > max - digit) return false;  // Overflow
 8024692:	2000      	movs	r0, #0
 8024694:	e703      	b.n	802449e <mg_str_to_num+0x8a>
  if (ndigits == 0) return false;
 8024696:	2000      	movs	r0, #0
 8024698:	e701      	b.n	802449e <mg_str_to_num+0x8a>
  if (i != str.len) return false;
 802469a:	2000      	movs	r0, #0
 802469c:	e6ff      	b.n	802449e <mg_str_to_num+0x8a>
 802469e:	bf00      	nop
 80246a0:	cccccccd 	.word	0xcccccccd

080246a4 <mg_url_decode>:
                  int is_form_url_encoded) {
 80246a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246a8:	b087      	sub	sp, #28
 80246aa:	4606      	mov	r6, r0
 80246ac:	460f      	mov	r7, r1
 80246ae:	4693      	mov	fp, r2
 80246b0:	4699      	mov	r9, r3
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80246b2:	2400      	movs	r4, #0
 80246b4:	4623      	mov	r3, r4
 80246b6:	e027      	b.n	8024708 <mg_url_decode+0x64>
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 80246b8:	f103 0802 	add.w	r8, r3, #2
 80246bc:	45b8      	cmp	r8, r7
 80246be:	d241      	bcs.n	8024744 <mg_url_decode+0xa0>
 80246c0:	3301      	adds	r3, #1
 80246c2:	18f2      	adds	r2, r6, r3
 80246c4:	9203      	str	r2, [sp, #12]
 80246c6:	5cf0      	ldrb	r0, [r6, r3]
 80246c8:	f7fa ff16 	bl	801f4f8 <isx>
 80246cc:	2800      	cmp	r0, #0
 80246ce:	d03c      	beq.n	802474a <mg_url_decode+0xa6>
 80246d0:	f816 0008 	ldrb.w	r0, [r6, r8]
 80246d4:	f7fa ff10 	bl	801f4f8 <isx>
 80246d8:	2800      	cmp	r0, #0
 80246da:	d039      	beq.n	8024750 <mg_url_decode+0xac>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80246dc:	f10d 0a10 	add.w	sl, sp, #16
 80246e0:	2202      	movs	r2, #2
 80246e2:	9903      	ldr	r1, [sp, #12]
 80246e4:	4650      	mov	r0, sl
 80246e6:	f7ff f95b 	bl	80239a0 <mg_str_n>
 80246ea:	2301      	movs	r3, #1
 80246ec:	9300      	str	r3, [sp, #0]
 80246ee:	eb0b 0304 	add.w	r3, fp, r4
 80246f2:	2210      	movs	r2, #16
 80246f4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80246f8:	f7ff fe8c 	bl	8024414 <mg_str_to_num>
        i += 2;
 80246fc:	4643      	mov	r3, r8
 80246fe:	e001      	b.n	8024704 <mg_url_decode+0x60>
      dst[j] = src[i];
 8024700:	f80b 2004 	strb.w	r2, [fp, r4]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8024704:	3301      	adds	r3, #1
 8024706:	462c      	mov	r4, r5
 8024708:	42bb      	cmp	r3, r7
 802470a:	d20e      	bcs.n	802472a <mg_url_decode+0x86>
 802470c:	1c65      	adds	r5, r4, #1
 802470e:	454d      	cmp	r5, r9
 8024710:	d20b      	bcs.n	802472a <mg_url_decode+0x86>
    if (src[i] == '%') {
 8024712:	5cf2      	ldrb	r2, [r6, r3]
 8024714:	2a25      	cmp	r2, #37	@ 0x25
 8024716:	d0cf      	beq.n	80246b8 <mg_url_decode+0x14>
    } else if (is_form_url_encoded && src[i] == '+') {
 8024718:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802471a:	2900      	cmp	r1, #0
 802471c:	d0f0      	beq.n	8024700 <mg_url_decode+0x5c>
 802471e:	2a2b      	cmp	r2, #43	@ 0x2b
 8024720:	d1ee      	bne.n	8024700 <mg_url_decode+0x5c>
      dst[j] = ' ';
 8024722:	2220      	movs	r2, #32
 8024724:	f80b 2004 	strb.w	r2, [fp, r4]
 8024728:	e7ec      	b.n	8024704 <mg_url_decode+0x60>
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 802472a:	454c      	cmp	r4, r9
 802472c:	d202      	bcs.n	8024734 <mg_url_decode+0x90>
 802472e:	2200      	movs	r2, #0
 8024730:	f80b 2004 	strb.w	r2, [fp, r4]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8024734:	42bb      	cmp	r3, r7
 8024736:	d30e      	bcc.n	8024756 <mg_url_decode+0xb2>
 8024738:	454c      	cmp	r4, r9
 802473a:	d20f      	bcs.n	802475c <mg_url_decode+0xb8>
 802473c:	4620      	mov	r0, r4
}
 802473e:	b007      	add	sp, #28
 8024740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8024744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024748:	e7f9      	b.n	802473e <mg_url_decode+0x9a>
 802474a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802474e:	e7f6      	b.n	802473e <mg_url_decode+0x9a>
 8024750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024754:	e7f3      	b.n	802473e <mg_url_decode+0x9a>
  return i >= src_len && j < dst_len ? (int) j : -1;
 8024756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802475a:	e7f0      	b.n	802473e <mg_url_decode+0x9a>
 802475c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024760:	e7ed      	b.n	802473e <mg_url_decode+0x9a>

08024762 <mg_http_get_var>:
  if (dst != NULL && dst_len > 0) {
 8024762:	b352      	cbz	r2, 80247ba <mg_http_get_var+0x58>
                    size_t dst_len) {
 8024764:	b570      	push	{r4, r5, r6, lr}
 8024766:	b086      	sub	sp, #24
 8024768:	4604      	mov	r4, r0
 802476a:	461d      	mov	r5, r3
 802476c:	4616      	mov	r6, r2
  if (dst != NULL && dst_len > 0) {
 802476e:	b10b      	cbz	r3, 8024774 <mg_http_get_var+0x12>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8024770:	2300      	movs	r3, #0
 8024772:	7013      	strb	r3, [r2, #0]
  if (dst == NULL || dst_len == 0) {
 8024774:	b325      	cbz	r5, 80247c0 <mg_http_get_var+0x5e>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8024776:	6823      	ldr	r3, [r4, #0]
 8024778:	b32b      	cbz	r3, 80247c6 <mg_http_get_var+0x64>
 802477a:	b339      	cbz	r1, 80247cc <mg_http_get_var+0x6a>
 802477c:	6863      	ldr	r3, [r4, #4]
 802477e:	b343      	cbz	r3, 80247d2 <mg_http_get_var+0x70>
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8024780:	a804      	add	r0, sp, #16
 8024782:	f7ff f901 	bl	8023988 <mg_str_s>
 8024786:	9b05      	ldr	r3, [sp, #20]
 8024788:	9300      	str	r3, [sp, #0]
 802478a:	9b04      	ldr	r3, [sp, #16]
 802478c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8024790:	a802      	add	r0, sp, #8
 8024792:	f7ff fbf3 	bl	8023f7c <mg_http_var>
    if (v.buf == NULL) {
 8024796:	9802      	ldr	r0, [sp, #8]
 8024798:	b158      	cbz	r0, 80247b2 <mg_http_get_var+0x50>
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 802479a:	2301      	movs	r3, #1
 802479c:	9300      	str	r3, [sp, #0]
 802479e:	462b      	mov	r3, r5
 80247a0:	4632      	mov	r2, r6
 80247a2:	9903      	ldr	r1, [sp, #12]
 80247a4:	f7ff ff7e 	bl	80246a4 <mg_url_decode>
      if (len < 0) len = -3;  // Failed to decode
 80247a8:	2800      	cmp	r0, #0
 80247aa:	da04      	bge.n	80247b6 <mg_http_get_var+0x54>
 80247ac:	f06f 0002 	mvn.w	r0, #2
 80247b0:	e001      	b.n	80247b6 <mg_http_get_var+0x54>
      len = -4;  // Name does not exist
 80247b2:	f06f 0003 	mvn.w	r0, #3
}
 80247b6:	b006      	add	sp, #24
 80247b8:	bd70      	pop	{r4, r5, r6, pc}
    len = -2;  // Bad destination
 80247ba:	f06f 0001 	mvn.w	r0, #1
}
 80247be:	4770      	bx	lr
    len = -2;  // Bad destination
 80247c0:	f06f 0001 	mvn.w	r0, #1
 80247c4:	e7f7      	b.n	80247b6 <mg_http_get_var+0x54>
    len = -1;  // Bad source
 80247c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80247ca:	e7f4      	b.n	80247b6 <mg_http_get_var+0x54>
 80247cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80247d0:	e7f1      	b.n	80247b6 <mg_http_get_var+0x54>
 80247d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  return len;
 80247d6:	e7ee      	b.n	80247b6 <mg_http_get_var+0x54>

080247d8 <mg_http_creds>:
                   char *pass, size_t passlen) {
 80247d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80247dc:	b0c4      	sub	sp, #272	@ 0x110
 80247de:	4606      	mov	r6, r0
 80247e0:	460d      	mov	r5, r1
 80247e2:	4617      	mov	r7, r2
 80247e4:	461c      	mov	r4, r3
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 80247e6:	493f      	ldr	r1, [pc, #252]	@ (80248e4 <mg_http_creds+0x10c>)
 80247e8:	f7fd fd6e 	bl	80222c8 <mg_http_get_header>
  user[0] = pass[0] = '\0';
 80247ec:	2300      	movs	r3, #0
 80247ee:	7023      	strb	r3, [r4, #0]
 80247f0:	702b      	strb	r3, [r5, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80247f2:	b1c8      	cbz	r0, 8024828 <mg_http_creds+0x50>
 80247f4:	4680      	mov	r8, r0
 80247f6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80247fa:	f1b9 0f06 	cmp.w	r9, #6
 80247fe:	d907      	bls.n	8024810 <mg_http_creds+0x38>
 8024800:	f8d0 a000 	ldr.w	sl, [r0]
 8024804:	2206      	movs	r2, #6
 8024806:	4938      	ldr	r1, [pc, #224]	@ (80248e8 <mg_http_creds+0x110>)
 8024808:	4650      	mov	r0, sl
 802480a:	f007 fb5d 	bl	802bec8 <memcmp>
 802480e:	b328      	cbz	r0, 802485c <mg_http_creds+0x84>
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 8024810:	f1b9 0f07 	cmp.w	r9, #7
 8024814:	d908      	bls.n	8024828 <mg_http_creds+0x50>
 8024816:	f8d8 5000 	ldr.w	r5, [r8]
 802481a:	2207      	movs	r2, #7
 802481c:	4933      	ldr	r1, [pc, #204]	@ (80248ec <mg_http_creds+0x114>)
 802481e:	4628      	mov	r0, r5
 8024820:	f007 fb52 	bl	802bec8 <memcmp>
 8024824:	2800      	cmp	r0, #0
 8024826:	d043      	beq.n	80248b0 <mg_http_creds+0xd8>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8024828:	4931      	ldr	r1, [pc, #196]	@ (80248f0 <mg_http_creds+0x118>)
 802482a:	4630      	mov	r0, r6
 802482c:	f7fd fd4c 	bl	80222c8 <mg_http_get_header>
 8024830:	4605      	mov	r5, r0
 8024832:	2800      	cmp	r0, #0
 8024834:	d04e      	beq.n	80248d4 <mg_http_creds+0xfc>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 8024836:	220c      	movs	r2, #12
 8024838:	492e      	ldr	r1, [pc, #184]	@ (80248f4 <mg_http_creds+0x11c>)
 802483a:	a842      	add	r0, sp, #264	@ 0x108
 802483c:	f7ff f8b0 	bl	80239a0 <mg_str_n>
 8024840:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8024842:	9300      	str	r3, [sp, #0]
 8024844:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 8024846:	e895 0006 	ldmia.w	r5, {r1, r2}
 802484a:	a802      	add	r0, sp, #8
 802484c:	f7ff f8c8 	bl	80239e0 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 8024850:	9b03      	ldr	r3, [sp, #12]
 8024852:	2b00      	cmp	r3, #0
 8024854:	d136      	bne.n	80248c4 <mg_http_creds+0xec>
}
 8024856:	b044      	add	sp, #272	@ 0x110
 8024858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 802485c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8024860:	aa02      	add	r2, sp, #8
 8024862:	f1a9 0106 	sub.w	r1, r9, #6
 8024866:	f10a 0006 	add.w	r0, sl, #6
 802486a:	f7fd fba2 	bl	8021fb2 <mg_base64_decode>
 802486e:	4606      	mov	r6, r0
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 8024870:	4602      	mov	r2, r0
 8024872:	213a      	movs	r1, #58	@ 0x3a
 8024874:	a802      	add	r0, sp, #8
 8024876:	f7eb fcc3 	bl	8010200 <memchr>
    if (p != NULL) {
 802487a:	4680      	mov	r8, r0
 802487c:	2800      	cmp	r0, #0
 802487e:	d0ea      	beq.n	8024856 <mg_http_creds+0x7e>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 8024880:	ab02      	add	r3, sp, #8
 8024882:	eba0 0a03 	sub.w	sl, r0, r3
 8024886:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 80248f8 <mg_http_creds+0x120>
 802488a:	9300      	str	r3, [sp, #0]
 802488c:	4653      	mov	r3, sl
 802488e:	464a      	mov	r2, r9
 8024890:	4639      	mov	r1, r7
 8024892:	4628      	mov	r0, r5
 8024894:	f7fe f9ee 	bl	8022c74 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 8024898:	eba6 030a 	sub.w	r3, r6, sl
 802489c:	f108 0201 	add.w	r2, r8, #1
 80248a0:	9200      	str	r2, [sp, #0]
 80248a2:	3b01      	subs	r3, #1
 80248a4:	464a      	mov	r2, r9
 80248a6:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80248a8:	4620      	mov	r0, r4
 80248aa:	f7fe f9e3 	bl	8022c74 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 80248ae:	e7d2      	b.n	8024856 <mg_http_creds+0x7e>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 80248b0:	3507      	adds	r5, #7
 80248b2:	9500      	str	r5, [sp, #0]
 80248b4:	f1a9 0307 	sub.w	r3, r9, #7
 80248b8:	4a0f      	ldr	r2, [pc, #60]	@ (80248f8 <mg_http_creds+0x120>)
 80248ba:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80248bc:	4620      	mov	r0, r4
 80248be:	f7fe f9d9 	bl	8022c74 <mg_snprintf>
 80248c2:	e7c8      	b.n	8024856 <mg_http_creds+0x7e>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 80248c4:	9a02      	ldr	r2, [sp, #8]
 80248c6:	9200      	str	r2, [sp, #0]
 80248c8:	4a0b      	ldr	r2, [pc, #44]	@ (80248f8 <mg_http_creds+0x120>)
 80248ca:	994c      	ldr	r1, [sp, #304]	@ 0x130
 80248cc:	4620      	mov	r0, r4
 80248ce:	f7fe f9d1 	bl	8022c74 <mg_snprintf>
 80248d2:	e7c0      	b.n	8024856 <mg_http_creds+0x7e>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 80248d4:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 80248d6:	4622      	mov	r2, r4
 80248d8:	4906      	ldr	r1, [pc, #24]	@ (80248f4 <mg_http_creds+0x11c>)
 80248da:	f106 0010 	add.w	r0, r6, #16
 80248de:	f7ff ff40 	bl	8024762 <mg_http_get_var>
}
 80248e2:	e7b8      	b.n	8024856 <mg_http_creds+0x7e>
 80248e4:	08039678 	.word	0x08039678
 80248e8:	08039688 	.word	0x08039688
 80248ec:	08039690 	.word	0x08039690
 80248f0:	08039698 	.word	0x08039698
 80248f4:	08035e30 	.word	0x08035e30
 80248f8:	080394a8 	.word	0x080394a8

080248fc <listdir>:
                    const struct mg_http_serve_opts *opts, char *dir) {
 80248fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024900:	b0ae      	sub	sp, #184	@ 0xb8
 8024902:	4604      	mov	r4, r0
 8024904:	460d      	mov	r5, r1
 8024906:	4616      	mov	r6, r2
 8024908:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 802490a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 802490e:	f1b8 0f00 	cmp.w	r8, #0
 8024912:	d04f      	beq.n	80249b4 <listdir+0xb8>
  struct printdirentrydata d = {c, hm, opts, dir};
 8024914:	942a      	str	r4, [sp, #168]	@ 0xa8
 8024916:	952b      	str	r5, [sp, #172]	@ 0xac
 8024918:	962c      	str	r6, [sp, #176]	@ 0xb0
 802491a:	972d      	str	r7, [sp, #180]	@ 0xb4
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 802491c:	2300      	movs	r3, #0
 802491e:	9300      	str	r3, [sp, #0]
 8024920:	2380      	movs	r3, #128	@ 0x80
 8024922:	aa07      	add	r2, sp, #28
 8024924:	68e9      	ldr	r1, [r5, #12]
 8024926:	68a8      	ldr	r0, [r5, #8]
 8024928:	f7ff febc 	bl	80246a4 <mg_url_decode>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 802492c:	1e02      	subs	r2, r0, #0
 802492e:	dd44      	ble.n	80249ba <listdir+0xbe>
 8024930:	a907      	add	r1, sp, #28
 8024932:	a805      	add	r0, sp, #20
 8024934:	f7ff f834 	bl	80239a0 <mg_str_n>
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8024938:	68b2      	ldr	r2, [r6, #8]
  mg_printf(c,
 802493a:	2a00      	cmp	r2, #0
 802493c:	d044      	beq.n	80249c8 <listdir+0xcc>
 802493e:	4923      	ldr	r1, [pc, #140]	@ (80249cc <listdir+0xd0>)
 8024940:	4620      	mov	r0, r4
 8024942:	f7fe fe71 	bl	8023628 <mg_printf>
  off = c->send.len;  // Start of body
 8024946:	6d25      	ldr	r5, [r4, #80]	@ 0x50
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8024948:	9a06      	ldr	r2, [sp, #24]
  mg_printf(c,
 802494a:	9b05      	ldr	r3, [sp, #20]
 802494c:	9303      	str	r3, [sp, #12]
 802494e:	9202      	str	r2, [sp, #8]
 8024950:	491f      	ldr	r1, [pc, #124]	@ (80249d0 <listdir+0xd4>)
 8024952:	9101      	str	r1, [sp, #4]
 8024954:	491f      	ldr	r1, [pc, #124]	@ (80249d4 <listdir+0xd8>)
 8024956:	9100      	str	r1, [sp, #0]
 8024958:	491f      	ldr	r1, [pc, #124]	@ (80249d8 <listdir+0xdc>)
 802495a:	4620      	mov	r0, r4
 802495c:	f7fe fe64 	bl	8023628 <mg_printf>
  mg_printf(c, "%s",
 8024960:	4a1e      	ldr	r2, [pc, #120]	@ (80249dc <listdir+0xe0>)
 8024962:	491f      	ldr	r1, [pc, #124]	@ (80249e0 <listdir+0xe4>)
 8024964:	4620      	mov	r0, r4
 8024966:	f7fe fe5f 	bl	8023628 <mg_printf>
  fs->ls(dir, printdirentry, &d);
 802496a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802496e:	aa2a      	add	r2, sp, #168	@ 0xa8
 8024970:	491c      	ldr	r1, [pc, #112]	@ (80249e4 <listdir+0xe8>)
 8024972:	4638      	mov	r0, r7
 8024974:	4798      	blx	r3
  mg_printf(c,
 8024976:	4a1c      	ldr	r2, [pc, #112]	@ (80249e8 <listdir+0xec>)
 8024978:	491c      	ldr	r1, [pc, #112]	@ (80249ec <listdir+0xf0>)
 802497a:	4620      	mov	r0, r4
 802497c:	f7fe fe54 	bl	8023628 <mg_printf>
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8024980:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8024982:	1b5b      	subs	r3, r3, r5
 8024984:	4a1a      	ldr	r2, [pc, #104]	@ (80249f0 <listdir+0xf4>)
 8024986:	210a      	movs	r1, #10
 8024988:	a827      	add	r0, sp, #156	@ 0x9c
 802498a:	f7fe f973 	bl	8022c74 <mg_snprintf>
 802498e:	4602      	mov	r2, r0
  if (n > sizeof(tmp)) n = 0;
 8024990:	280a      	cmp	r0, #10
 8024992:	d900      	bls.n	8024996 <listdir+0x9a>
 8024994:	2200      	movs	r2, #0
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8024996:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8024998:	3d0c      	subs	r5, #12
 802499a:	a927      	add	r1, sp, #156	@ 0x9c
 802499c:	4428      	add	r0, r5
 802499e:	f008 fd63 	bl	802d468 <memcpy>
  c->is_resp = 0;                          // Mark response end
 80249a2:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80249a6:	f36f 13c7 	bfc	r3, #7, #1
 80249aa:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80249ae:	b02e      	add	sp, #184	@ 0xb8
 80249b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80249b4:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 80249f8 <listdir+0xfc>
 80249b8:	e7ac      	b.n	8024914 <listdir+0x18>
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 80249ba:	ab05      	add	r3, sp, #20
 80249bc:	3508      	adds	r5, #8
 80249be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80249c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80249c6:	e7b7      	b.n	8024938 <listdir+0x3c>
  mg_printf(c,
 80249c8:	4a0a      	ldr	r2, [pc, #40]	@ (80249f4 <listdir+0xf8>)
 80249ca:	e7b8      	b.n	802493e <listdir+0x42>
 80249cc:	080396a0 	.word	0x080396a0
 80249d0:	08039880 	.word	0x08039880
 80249d4:	08039a44 	.word	0x08039a44
 80249d8:	080396f8 	.word	0x080396f8
 80249dc:	08039c0c 	.word	0x08039c0c
 80249e0:	0803a070 	.word	0x0803a070
 80249e4:	0802612d 	.word	0x0802612d
 80249e8:	080375b8 	.word	0x080375b8
 80249ec:	08039c5c 	.word	0x08039c5c
 80249f0:	0803a320 	.word	0x0803a320
 80249f4:	0803606c 	.word	0x0803606c
 80249f8:	20000130 	.word	0x20000130

080249fc <skip_chunk>:
static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 80249fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024a00:	b087      	sub	sp, #28
 8024a02:	461f      	mov	r7, r3
  int i = 0, n = 0;
 8024a04:	2300      	movs	r3, #0
 8024a06:	9303      	str	r3, [sp, #12]
  if (len < 3) return 0;
 8024a08:	2902      	cmp	r1, #2
 8024a0a:	dd42      	ble.n	8024a92 <skip_chunk+0x96>
 8024a0c:	4606      	mov	r6, r0
 8024a0e:	460d      	mov	r5, r1
 8024a10:	4690      	mov	r8, r2
  int i = 0, n = 0;
 8024a12:	461c      	mov	r4, r3
  while (i < len && is_hex_digit(buf[i])) i++;
 8024a14:	42ac      	cmp	r4, r5
 8024a16:	da05      	bge.n	8024a24 <skip_chunk+0x28>
 8024a18:	5d30      	ldrb	r0, [r6, r4]
 8024a1a:	f7fb f998 	bl	801fd4e <is_hex_digit>
 8024a1e:	b108      	cbz	r0, 8024a24 <skip_chunk+0x28>
 8024a20:	3401      	adds	r4, #1
 8024a22:	e7f7      	b.n	8024a14 <skip_chunk+0x18>
  if (i == 0) return -1;                     // Error, no length specified
 8024a24:	2c00      	cmp	r4, #0
 8024a26:	d036      	beq.n	8024a96 <skip_chunk+0x9a>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8024a28:	2c08      	cmp	r4, #8
 8024a2a:	dc37      	bgt.n	8024a9c <skip_chunk+0xa0>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8024a2c:	42ac      	cmp	r4, r5
 8024a2e:	da38      	bge.n	8024aa2 <skip_chunk+0xa6>
 8024a30:	4622      	mov	r2, r4
 8024a32:	5d33      	ldrb	r3, [r6, r4]
 8024a34:	2b0d      	cmp	r3, #13
 8024a36:	d137      	bne.n	8024aa8 <skip_chunk+0xac>
 8024a38:	1933      	adds	r3, r6, r4
 8024a3a:	785b      	ldrb	r3, [r3, #1]
 8024a3c:	2b0a      	cmp	r3, #10
 8024a3e:	d136      	bne.n	8024aae <skip_chunk+0xb2>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 8024a40:	f10d 0910 	add.w	r9, sp, #16
 8024a44:	4631      	mov	r1, r6
 8024a46:	4648      	mov	r0, r9
 8024a48:	f7fe ffaa 	bl	80239a0 <mg_str_n>
 8024a4c:	2304      	movs	r3, #4
 8024a4e:	9300      	str	r3, [sp, #0]
 8024a50:	ab03      	add	r3, sp, #12
 8024a52:	2210      	movs	r2, #16
 8024a54:	e899 0003 	ldmia.w	r9, {r0, r1}
 8024a58:	f7ff fcdc 	bl	8024414 <mg_str_to_num>
 8024a5c:	b350      	cbz	r0, 8024ab4 <skip_chunk+0xb8>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8024a5e:	9b03      	ldr	r3, [sp, #12]
 8024a60:	2b00      	cmp	r3, #0
 8024a62:	db2a      	blt.n	8024aba <skip_chunk+0xbe>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8024a64:	1b2d      	subs	r5, r5, r4
 8024a66:	3d03      	subs	r5, #3
 8024a68:	42ab      	cmp	r3, r5
 8024a6a:	da29      	bge.n	8024ac0 <skip_chunk+0xc4>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8024a6c:	4423      	add	r3, r4
 8024a6e:	18f2      	adds	r2, r6, r3
 8024a70:	7892      	ldrb	r2, [r2, #2]
 8024a72:	2a0d      	cmp	r2, #13
 8024a74:	d126      	bne.n	8024ac4 <skip_chunk+0xc8>
 8024a76:	441e      	add	r6, r3
 8024a78:	78f3      	ldrb	r3, [r6, #3]
 8024a7a:	2b0a      	cmp	r3, #10
 8024a7c:	d125      	bne.n	8024aca <skip_chunk+0xce>
  *pl = i + 2, *dl = n;
 8024a7e:	3402      	adds	r4, #2
 8024a80:	f8c8 4000 	str.w	r4, [r8]
 8024a84:	9b03      	ldr	r3, [sp, #12]
 8024a86:	603b      	str	r3, [r7, #0]
  return i + 2 + n + 2;
 8024a88:	441c      	add	r4, r3
 8024a8a:	1ca0      	adds	r0, r4, #2
}
 8024a8c:	b007      	add	sp, #28
 8024a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (len < 3) return 0;
 8024a92:	2000      	movs	r0, #0
 8024a94:	e7fa      	b.n	8024a8c <skip_chunk+0x90>
  if (i == 0) return -1;                     // Error, no length specified
 8024a96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024a9a:	e7f7      	b.n	8024a8c <skip_chunk+0x90>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8024a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024aa0:	e7f4      	b.n	8024a8c <skip_chunk+0x90>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8024aa2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024aa6:	e7f1      	b.n	8024a8c <skip_chunk+0x90>
 8024aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024aac:	e7ee      	b.n	8024a8c <skip_chunk+0x90>
 8024aae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024ab2:	e7eb      	b.n	8024a8c <skip_chunk+0x90>
    return -1;                    // Decode chunk length, overflow
 8024ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024ab8:	e7e8      	b.n	8024a8c <skip_chunk+0x90>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 8024aba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024abe:	e7e5      	b.n	8024a8c <skip_chunk+0x90>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 8024ac0:	2000      	movs	r0, #0
 8024ac2:	e7e3      	b.n	8024a8c <skip_chunk+0x90>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8024ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024ac8:	e7e0      	b.n	8024a8c <skip_chunk+0x90>
 8024aca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024ace:	e7dd      	b.n	8024a8c <skip_chunk+0x90>

08024ad0 <mg_json_unescape>:
bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8024ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024ad4:	b086      	sub	sp, #24
 8024ad6:	ac02      	add	r4, sp, #8
 8024ad8:	e884 0003 	stmia.w	r4, {r0, r1}
 8024adc:	4617      	mov	r7, r2
 8024ade:	461e      	mov	r6, r3
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8024ae0:	2400      	movs	r4, #0
 8024ae2:	4621      	mov	r1, r4
 8024ae4:	e01c      	b.n	8024b20 <mg_json_unescape+0x50>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8024ae6:	f101 0805 	add.w	r8, r1, #5
 8024aea:	45a8      	cmp	r8, r5
 8024aec:	d221      	bcs.n	8024b32 <mg_json_unescape+0x62>
 8024aee:	185a      	adds	r2, r3, r1
 8024af0:	7852      	ldrb	r2, [r2, #1]
 8024af2:	2a75      	cmp	r2, #117	@ 0x75
 8024af4:	d11d      	bne.n	8024b32 <mg_json_unescape+0x62>
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 8024af6:	3102      	adds	r1, #2
 8024af8:	ad04      	add	r5, sp, #16
 8024afa:	2204      	movs	r2, #4
 8024afc:	4419      	add	r1, r3
 8024afe:	4628      	mov	r0, r5
 8024b00:	f7fe ff4e 	bl	80239a0 <mg_str_n>
 8024b04:	2301      	movs	r3, #1
 8024b06:	9300      	str	r3, [sp, #0]
 8024b08:	193b      	adds	r3, r7, r4
 8024b0a:	2210      	movs	r2, #16
 8024b0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8024b10:	f7ff fc80 	bl	8024414 <mg_str_to_num>
 8024b14:	b308      	cbz	r0, 8024b5a <mg_json_unescape+0x8a>
      i += 5;
 8024b16:	4641      	mov	r1, r8
 8024b18:	e000      	b.n	8024b1c <mg_json_unescape+0x4c>
      to[j] = s.buf[i];
 8024b1a:	5538      	strb	r0, [r7, r4]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8024b1c:	3101      	adds	r1, #1
 8024b1e:	3401      	adds	r4, #1
 8024b20:	9d03      	ldr	r5, [sp, #12]
 8024b22:	428d      	cmp	r5, r1
 8024b24:	d914      	bls.n	8024b50 <mg_json_unescape+0x80>
 8024b26:	42b4      	cmp	r4, r6
 8024b28:	d212      	bcs.n	8024b50 <mg_json_unescape+0x80>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 8024b2a:	9b02      	ldr	r3, [sp, #8]
 8024b2c:	5c58      	ldrb	r0, [r3, r1]
 8024b2e:	285c      	cmp	r0, #92	@ 0x5c
 8024b30:	d0d9      	beq.n	8024ae6 <mg_json_unescape+0x16>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8024b32:	285c      	cmp	r0, #92	@ 0x5c
 8024b34:	d1f1      	bne.n	8024b1a <mg_json_unescape+0x4a>
 8024b36:	f101 0801 	add.w	r8, r1, #1
 8024b3a:	45a8      	cmp	r8, r5
 8024b3c:	d2ed      	bcs.n	8024b1a <mg_json_unescape+0x4a>
      char c = json_esc(s.buf[i + 1], 0);
 8024b3e:	2100      	movs	r1, #0
 8024b40:	f813 0008 	ldrb.w	r0, [r3, r8]
 8024b44:	f7fb f928 	bl	801fd98 <json_esc>
      if (c == 0) return false;
 8024b48:	b150      	cbz	r0, 8024b60 <mg_json_unescape+0x90>
      to[j] = c;
 8024b4a:	5538      	strb	r0, [r7, r4]
      i++;
 8024b4c:	4641      	mov	r1, r8
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 8024b4e:	e7e5      	b.n	8024b1c <mg_json_unescape+0x4c>
  if (j >= n) return false;
 8024b50:	42b4      	cmp	r4, r6
 8024b52:	d207      	bcs.n	8024b64 <mg_json_unescape+0x94>
  if (n > 0) to[j] = '\0';
 8024b54:	2300      	movs	r3, #0
 8024b56:	553b      	strb	r3, [r7, r4]
  return true;
 8024b58:	2001      	movs	r0, #1
}
 8024b5a:	b006      	add	sp, #24
 8024b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (c == 0) return false;
 8024b60:	2000      	movs	r0, #0
 8024b62:	e7fa      	b.n	8024b5a <mg_json_unescape+0x8a>
  if (j >= n) return false;
 8024b64:	2000      	movs	r0, #0
 8024b66:	e7f8      	b.n	8024b5a <mg_json_unescape+0x8a>

08024b68 <mg_json_get_str>:
char *mg_json_get_str(struct mg_str json, const char *path) {
 8024b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b6a:	b087      	sub	sp, #28
 8024b6c:	46ec      	mov	ip, sp
 8024b6e:	e88c 0003 	stmia.w	ip, {r0, r1}
  int len = 0, off = mg_json_get(json, path, &len);
 8024b72:	2300      	movs	r3, #0
 8024b74:	9303      	str	r3, [sp, #12]
 8024b76:	ab03      	add	r3, sp, #12
 8024b78:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8024b7c:	f7fd fbd4 	bl	8022328 <mg_json_get>
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 8024b80:	1e04      	subs	r4, r0, #0
 8024b82:	db25      	blt.n	8024bd0 <mg_json_get_str+0x68>
 8024b84:	9903      	ldr	r1, [sp, #12]
 8024b86:	2901      	cmp	r1, #1
 8024b88:	dd24      	ble.n	8024bd4 <mg_json_get_str+0x6c>
 8024b8a:	9e00      	ldr	r6, [sp, #0]
 8024b8c:	5d33      	ldrb	r3, [r6, r4]
 8024b8e:	2b22      	cmp	r3, #34	@ 0x22
 8024b90:	d003      	beq.n	8024b9a <mg_json_get_str+0x32>
  char *result = NULL;
 8024b92:	2500      	movs	r5, #0
}
 8024b94:	4628      	mov	r0, r5
 8024b96:	b007      	add	sp, #28
 8024b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8024b9a:	2001      	movs	r0, #1
 8024b9c:	f7fd f9a4 	bl	8021ee8 <mg_calloc>
 8024ba0:	4605      	mov	r5, r0
 8024ba2:	2800      	cmp	r0, #0
 8024ba4:	d0f6      	beq.n	8024b94 <mg_json_get_str+0x2c>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 8024ba6:	1c61      	adds	r1, r4, #1
 8024ba8:	9f03      	ldr	r7, [sp, #12]
 8024baa:	ac04      	add	r4, sp, #16
 8024bac:	1eba      	subs	r2, r7, #2
 8024bae:	4431      	add	r1, r6
 8024bb0:	4620      	mov	r0, r4
 8024bb2:	f7fe fef5 	bl	80239a0 <mg_str_n>
 8024bb6:	463b      	mov	r3, r7
 8024bb8:	462a      	mov	r2, r5
 8024bba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024bbe:	f7ff ff87 	bl	8024ad0 <mg_json_unescape>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8024bc2:	2800      	cmp	r0, #0
 8024bc4:	d1e6      	bne.n	8024b94 <mg_json_get_str+0x2c>
      free(result);
 8024bc6:	4628      	mov	r0, r5
 8024bc8:	f7f5 fb08 	bl	801a1dc <vPortFree>
      result = NULL;
 8024bcc:	2500      	movs	r5, #0
 8024bce:	e7e1      	b.n	8024b94 <mg_json_get_str+0x2c>
  char *result = NULL;
 8024bd0:	2500      	movs	r5, #0
 8024bd2:	e7df      	b.n	8024b94 <mg_json_get_str+0x2c>
 8024bd4:	2500      	movs	r5, #0
 8024bd6:	e7dd      	b.n	8024b94 <mg_json_get_str+0x2c>

08024bd8 <mg_aton6>:
static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 8024bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024bdc:	b08a      	sub	sp, #40	@ 0x28
 8024bde:	ab02      	add	r3, sp, #8
 8024be0:	e883 0003 	stmia.w	r3, {r0, r1}
 8024be4:	4617      	mov	r7, r2
  addr->scope_id = 0;
 8024be6:	2300      	movs	r3, #0
 8024be8:	7493      	strb	r3, [r2, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8024bea:	2902      	cmp	r1, #2
 8024bec:	d904      	bls.n	8024bf8 <mg_aton6+0x20>
 8024bee:	460b      	mov	r3, r1
 8024bf0:	4602      	mov	r2, r0
 8024bf2:	7801      	ldrb	r1, [r0, #0]
 8024bf4:	295b      	cmp	r1, #91	@ 0x5b
 8024bf6:	d00f      	beq.n	8024c18 <mg_aton6+0x40>
  if (mg_v4mapped(str, addr)) return true;
 8024bf8:	463a      	mov	r2, r7
 8024bfa:	ab02      	add	r3, sp, #8
 8024bfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024c00:	f7fe ff40 	bl	8023a84 <mg_v4mapped>
 8024c04:	4680      	mov	r8, r0
 8024c06:	2800      	cmp	r0, #0
 8024c08:	f040 8087 	bne.w	8024d1a <mg_aton6+0x142>
  size_t i, j = 0, n = 0, dc = 42;
 8024c0c:	f04f 092a 	mov.w	r9, #42	@ 0x2a
 8024c10:	2600      	movs	r6, #0
 8024c12:	4635      	mov	r5, r6
  for (i = 0; i < str.len; i++) {
 8024c14:	4634      	mov	r4, r6
 8024c16:	e020      	b.n	8024c5a <mg_aton6+0x82>
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 8024c18:	3201      	adds	r2, #1
 8024c1a:	9202      	str	r2, [sp, #8]
 8024c1c:	3b02      	subs	r3, #2
 8024c1e:	9303      	str	r3, [sp, #12]
 8024c20:	e7ea      	b.n	8024bf8 <mg_aton6+0x20>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 8024c22:	2300      	movs	r3, #0
 8024c24:	9305      	str	r3, [sp, #20]
      if (i > j + 3) return false;
 8024c26:	1ceb      	adds	r3, r5, #3
 8024c28:	42a3      	cmp	r3, r4
 8024c2a:	d376      	bcc.n	8024d1a <mg_aton6+0x142>
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 8024c2c:	1b62      	subs	r2, r4, r5
 8024c2e:	f10d 0a18 	add.w	sl, sp, #24
 8024c32:	3201      	adds	r2, #1
 8024c34:	4429      	add	r1, r5
 8024c36:	4650      	mov	r0, sl
 8024c38:	f7fe feb2 	bl	80239a0 <mg_str_n>
 8024c3c:	2304      	movs	r3, #4
 8024c3e:	9300      	str	r3, [sp, #0]
 8024c40:	ab05      	add	r3, sp, #20
 8024c42:	2210      	movs	r2, #16
 8024c44:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8024c48:	f7ff fbe4 	bl	8024414 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8024c4c:	9b05      	ldr	r3, [sp, #20]
 8024c4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8024c52:	55ba      	strb	r2, [r7, r6]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8024c54:	1c72      	adds	r2, r6, #1
 8024c56:	54bb      	strb	r3, [r7, r2]
  for (i = 0; i < str.len; i++) {
 8024c58:	3401      	adds	r4, #1
 8024c5a:	9803      	ldr	r0, [sp, #12]
 8024c5c:	42a0      	cmp	r0, r4
 8024c5e:	d941      	bls.n	8024ce4 <mg_aton6+0x10c>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8024c60:	9902      	ldr	r1, [sp, #8]
 8024c62:	5d0a      	ldrb	r2, [r1, r4]
 8024c64:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8024c68:	b2db      	uxtb	r3, r3
 8024c6a:	2b09      	cmp	r3, #9
 8024c6c:	d9d9      	bls.n	8024c22 <mg_aton6+0x4a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8024c6e:	f1a2 0361 	sub.w	r3, r2, #97	@ 0x61
 8024c72:	b2db      	uxtb	r3, r3
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 8024c74:	2b05      	cmp	r3, #5
 8024c76:	d9d4      	bls.n	8024c22 <mg_aton6+0x4a>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 8024c78:	f1a2 0341 	sub.w	r3, r2, #65	@ 0x41
 8024c7c:	b2db      	uxtb	r3, r3
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 8024c7e:	2b05      	cmp	r3, #5
 8024c80:	d9cf      	bls.n	8024c22 <mg_aton6+0x4a>
    } else if (str.buf[i] == ':') {
 8024c82:	2a3a      	cmp	r2, #58	@ 0x3a
 8024c84:	d119      	bne.n	8024cba <mg_aton6+0xe2>
      j = i + 1;
 8024c86:	1c65      	adds	r5, r4, #1
      if (i > 0 && str.buf[i - 1] == ':') {
 8024c88:	b12c      	cbz	r4, 8024c96 <mg_aton6+0xbe>
 8024c8a:	190b      	adds	r3, r1, r4
 8024c8c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8024c90:	2b3a      	cmp	r3, #58	@ 0x3a
 8024c92:	d007      	beq.n	8024ca4 <mg_aton6+0xcc>
        n += 2;
 8024c94:	3602      	adds	r6, #2
      if (n > 14) return false;
 8024c96:	2e0e      	cmp	r6, #14
 8024c98:	d83f      	bhi.n	8024d1a <mg_aton6+0x142>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8024c9a:	1c73      	adds	r3, r6, #1
 8024c9c:	2200      	movs	r2, #0
 8024c9e:	54fa      	strb	r2, [r7, r3]
 8024ca0:	55ba      	strb	r2, [r7, r6]
 8024ca2:	e7d9      	b.n	8024c58 <mg_aton6+0x80>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 8024ca4:	2c01      	cmp	r4, #1
 8024ca6:	d906      	bls.n	8024cb6 <mg_aton6+0xde>
 8024ca8:	4421      	add	r1, r4
 8024caa:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8024cae:	2b3a      	cmp	r3, #58	@ 0x3a
 8024cb0:	d033      	beq.n	8024d1a <mg_aton6+0x142>
        dc = n;  // Double colon
 8024cb2:	46b1      	mov	r9, r6
 8024cb4:	e7ef      	b.n	8024c96 <mg_aton6+0xbe>
 8024cb6:	46b1      	mov	r9, r6
 8024cb8:	e7ed      	b.n	8024c96 <mg_aton6+0xbe>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 8024cba:	2a25      	cmp	r2, #37	@ 0x25
 8024cbc:	d12d      	bne.n	8024d1a <mg_aton6+0x142>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 8024cbe:	1c63      	adds	r3, r4, #1
 8024cc0:	1b02      	subs	r2, r0, r4
 8024cc2:	ac08      	add	r4, sp, #32
 8024cc4:	3a01      	subs	r2, #1
 8024cc6:	4419      	add	r1, r3
 8024cc8:	4620      	mov	r0, r4
 8024cca:	f7fe fe69 	bl	80239a0 <mg_str_n>
 8024cce:	2301      	movs	r3, #1
 8024cd0:	9300      	str	r3, [sp, #0]
 8024cd2:	f107 0312 	add.w	r3, r7, #18
 8024cd6:	220a      	movs	r2, #10
 8024cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024cdc:	f7ff fb9a 	bl	8024414 <mg_str_to_num>
 8024ce0:	4680      	mov	r8, r0
 8024ce2:	e01a      	b.n	8024d1a <mg_aton6+0x142>
  if (n < 14 && dc == 42) return false;
 8024ce4:	2e0d      	cmp	r6, #13
 8024ce6:	d814      	bhi.n	8024d12 <mg_aton6+0x13a>
 8024ce8:	f1b9 0f2a 	cmp.w	r9, #42	@ 0x2a
 8024cec:	d015      	beq.n	8024d1a <mg_aton6+0x142>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8024cee:	eba9 0006 	sub.w	r0, r9, r6
 8024cf2:	300e      	adds	r0, #14
 8024cf4:	eb07 0409 	add.w	r4, r7, r9
 8024cf8:	eba6 0209 	sub.w	r2, r6, r9
 8024cfc:	3202      	adds	r2, #2
 8024cfe:	4621      	mov	r1, r4
 8024d00:	4438      	add	r0, r7
 8024d02:	f007 f95b 	bl	802bfbc <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8024d06:	f1c6 020e 	rsb	r2, r6, #14
 8024d0a:	2100      	movs	r1, #0
 8024d0c:	4620      	mov	r0, r4
 8024d0e:	f007 f96f 	bl	802bff0 <memset>
  addr->is_ip6 = true;
 8024d12:	f04f 0801 	mov.w	r8, #1
 8024d16:	f887 8013 	strb.w	r8, [r7, #19]
}
 8024d1a:	4640      	mov	r0, r8
 8024d1c:	b00a      	add	sp, #40	@ 0x28
 8024d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08024d22 <mg_timer_init>:
                   unsigned flags, void (*fn)(void *), void *arg) {
 8024d22:	b410      	push	{r4}
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8024d24:	2400      	movs	r4, #0
 8024d26:	600c      	str	r4, [r1, #0]
 8024d28:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8024d2c:	2200      	movs	r2, #0
 8024d2e:	2300      	movs	r3, #0
 8024d30:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8024d34:	9b01      	ldr	r3, [sp, #4]
 8024d36:	618b      	str	r3, [r1, #24]
 8024d38:	9b02      	ldr	r3, [sp, #8]
 8024d3a:	61cb      	str	r3, [r1, #28]
 8024d3c:	9b03      	ldr	r3, [sp, #12]
 8024d3e:	620b      	str	r3, [r1, #32]
 8024d40:	6803      	ldr	r3, [r0, #0]
 8024d42:	624b      	str	r3, [r1, #36]	@ 0x24
  *head = t;
 8024d44:	6001      	str	r1, [r0, #0]
}
 8024d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024d4a:	4770      	bx	lr

08024d4c <mg_timer_add>:
                              unsigned flags, void (*fn)(void *), void *arg) {
 8024d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d4e:	b085      	sub	sp, #20
 8024d50:	4604      	mov	r4, r0
 8024d52:	4616      	mov	r6, r2
 8024d54:	461d      	mov	r5, r3
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8024d56:	2128      	movs	r1, #40	@ 0x28
 8024d58:	2001      	movs	r0, #1
 8024d5a:	f7fd f8c5 	bl	8021ee8 <mg_calloc>
  if (t != NULL) {
 8024d5e:	4607      	mov	r7, r0
 8024d60:	b180      	cbz	r0, 8024d84 <mg_timer_add+0x38>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8024d62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d64:	9302      	str	r3, [sp, #8]
 8024d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024d68:	9301      	str	r3, [sp, #4]
 8024d6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024d6c:	9300      	str	r3, [sp, #0]
 8024d6e:	4632      	mov	r2, r6
 8024d70:	462b      	mov	r3, r5
 8024d72:	4601      	mov	r1, r0
 8024d74:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8024d78:	f7ff ffd3 	bl	8024d22 <mg_timer_init>
    t->id = mgr->timerid++;
 8024d7c:	6a23      	ldr	r3, [r4, #32]
 8024d7e:	1c5a      	adds	r2, r3, #1
 8024d80:	6222      	str	r2, [r4, #32]
 8024d82:	603b      	str	r3, [r7, #0]
}
 8024d84:	4638      	mov	r0, r7
 8024d86:	b005      	add	sp, #20
 8024d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d8a:	0000      	movs	r0, r0
 8024d8c:	0000      	movs	r0, r0
	...

08024d90 <mg_timer_expired>:
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8024d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d94:	4698      	mov	r8, r3
 8024d96:	9906      	ldr	r1, [sp, #24]
 8024d98:	9c07      	ldr	r4, [sp, #28]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8024d9a:	188e      	adds	r6, r1, r2
 8024d9c:	eb43 0504 	adc.w	r5, r3, r4
 8024da0:	6847      	ldr	r7, [r0, #4]
 8024da2:	6803      	ldr	r3, [r0, #0]
 8024da4:	429e      	cmp	r6, r3
 8024da6:	eb75 0707 	sbcs.w	r7, r5, r7
 8024daa:	d203      	bcs.n	8024db4 <mg_timer_expired+0x24>
 8024dac:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8024df0 <mg_timer_expired+0x60>
 8024db0:	ed80 7b00 	vstr	d7, [r0]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8024db4:	6847      	ldr	r7, [r0, #4]
 8024db6:	6803      	ldr	r3, [r0, #0]
 8024db8:	431f      	orrs	r7, r3
 8024dba:	d101      	bne.n	8024dc0 <mg_timer_expired+0x30>
 8024dbc:	6006      	str	r6, [r0, #0]
 8024dbe:	6045      	str	r5, [r0, #4]
  if (*t > now) return false;                    // Not expired yet, return
 8024dc0:	6807      	ldr	r7, [r0, #0]
 8024dc2:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8024dc6:	42b9      	cmp	r1, r7
 8024dc8:	eb74 0e0c 	sbcs.w	lr, r4, ip
 8024dcc:	d30e      	bcc.n	8024dec <mg_timer_expired+0x5c>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8024dce:	1bc9      	subs	r1, r1, r7
 8024dd0:	eb64 040c 	sbc.w	r4, r4, ip
 8024dd4:	428a      	cmp	r2, r1
 8024dd6:	eb78 0404 	sbcs.w	r4, r8, r4
 8024dda:	d302      	bcc.n	8024de2 <mg_timer_expired+0x52>
 8024ddc:	18be      	adds	r6, r7, r2
 8024dde:	eb4c 0508 	adc.w	r5, ip, r8
 8024de2:	6006      	str	r6, [r0, #0]
 8024de4:	6045      	str	r5, [r0, #4]
  return true;                                   // Expired, return true
 8024de6:	2001      	movs	r0, #1
}
 8024de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (*t > now) return false;                    // Not expired yet, return
 8024dec:	2000      	movs	r0, #0
 8024dee:	e7fb      	b.n	8024de8 <mg_timer_expired+0x58>
	...

08024df8 <mg_timer_poll>:
void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8024df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024dfc:	b082      	sub	sp, #8
 8024dfe:	4617      	mov	r7, r2
 8024e00:	461e      	mov	r6, r3
  for (t = *head; t != NULL; t = tmp) {
 8024e02:	6804      	ldr	r4, [r0, #0]
 8024e04:	e019      	b.n	8024e3a <mg_timer_poll+0x42>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8024e06:	2500      	movs	r5, #0
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8024e08:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8024e0c:	9700      	str	r7, [sp, #0]
 8024e0e:	9601      	str	r6, [sp, #4]
 8024e10:	f104 0010 	add.w	r0, r4, #16
 8024e14:	f7ff ffbc 	bl	8024d90 <mg_timer_expired>
    tmp = t->next;
 8024e18:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
    if (!once && !expired) continue;
 8024e1c:	b905      	cbnz	r5, 8024e20 <mg_timer_poll+0x28>
 8024e1e:	b158      	cbz	r0, 8024e38 <mg_timer_poll+0x40>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8024e20:	69a3      	ldr	r3, [r4, #24]
 8024e22:	f003 0305 	and.w	r3, r3, #5
 8024e26:	2b04      	cmp	r3, #4
 8024e28:	d002      	beq.n	8024e30 <mg_timer_poll+0x38>
      t->fn(t->arg);
 8024e2a:	69e3      	ldr	r3, [r4, #28]
 8024e2c:	6a20      	ldr	r0, [r4, #32]
 8024e2e:	4798      	blx	r3
    t->flags |= MG_TIMER_CALLED;
 8024e30:	69a1      	ldr	r1, [r4, #24]
 8024e32:	f041 0104 	orr.w	r1, r1, #4
 8024e36:	61a1      	str	r1, [r4, #24]
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8024e38:	4644      	mov	r4, r8
  for (t = *head; t != NULL; t = tmp) {
 8024e3a:	b164      	cbz	r4, 8024e56 <mg_timer_poll+0x5e>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8024e3c:	6923      	ldr	r3, [r4, #16]
 8024e3e:	6962      	ldr	r2, [r4, #20]
 8024e40:	4313      	orrs	r3, r2
 8024e42:	d1e0      	bne.n	8024e06 <mg_timer_poll+0xe>
 8024e44:	69a3      	ldr	r3, [r4, #24]
 8024e46:	f003 0306 	and.w	r3, r3, #6
 8024e4a:	2b02      	cmp	r3, #2
 8024e4c:	d001      	beq.n	8024e52 <mg_timer_poll+0x5a>
 8024e4e:	2500      	movs	r5, #0
 8024e50:	e7da      	b.n	8024e08 <mg_timer_poll+0x10>
 8024e52:	2501      	movs	r5, #1
 8024e54:	e7d8      	b.n	8024e08 <mg_timer_poll+0x10>
}
 8024e56:	b002      	add	sp, #8
 8024e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024e5c <mg_tls_recv>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8024e5c:	b118      	cbz	r0, 8024e66 <mg_tls_recv+0xa>
 8024e5e:	b121      	cbz	r1, 8024e6a <mg_tls_recv+0xe>
 8024e60:	b92a      	cbnz	r2, 8024e6e <mg_tls_recv+0x12>
 8024e62:	2000      	movs	r0, #0
 8024e64:	4770      	bx	lr
 8024e66:	2000      	movs	r0, #0
 8024e68:	4770      	bx	lr
 8024e6a:	2000      	movs	r0, #0
 8024e6c:	4770      	bx	lr
 8024e6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024e72:	4770      	bx	lr

08024e74 <mg_tls_send>:
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8024e74:	b118      	cbz	r0, 8024e7e <mg_tls_send+0xa>
 8024e76:	b121      	cbz	r1, 8024e82 <mg_tls_send+0xe>
 8024e78:	b92a      	cbnz	r2, 8024e86 <mg_tls_send+0x12>
 8024e7a:	2000      	movs	r0, #0
 8024e7c:	4770      	bx	lr
 8024e7e:	2000      	movs	r0, #0
 8024e80:	4770      	bx	lr
 8024e82:	2000      	movs	r0, #0
 8024e84:	4770      	bx	lr
 8024e86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8024e8a:	4770      	bx	lr

08024e8c <mg_tls_pending>:
}
 8024e8c:	2000      	movs	r0, #0
 8024e8e:	4770      	bx	lr

08024e90 <mg_url_is_ssl>:
int mg_url_is_ssl(const char *url) {
 8024e90:	b510      	push	{r4, lr}
 8024e92:	4604      	mov	r4, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8024e94:	2204      	movs	r2, #4
 8024e96:	4918      	ldr	r1, [pc, #96]	@ (8024ef8 <mg_url_is_ssl+0x68>)
 8024e98:	f007 f8df 	bl	802c05a <strncmp>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8024e9c:	b1f8      	cbz	r0, 8024ede <mg_url_is_ssl+0x4e>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8024e9e:	2206      	movs	r2, #6
 8024ea0:	4916      	ldr	r1, [pc, #88]	@ (8024efc <mg_url_is_ssl+0x6c>)
 8024ea2:	4620      	mov	r0, r4
 8024ea4:	f007 f8d9 	bl	802c05a <strncmp>
 8024ea8:	b1d8      	cbz	r0, 8024ee2 <mg_url_is_ssl+0x52>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8024eaa:	2206      	movs	r2, #6
 8024eac:	4914      	ldr	r1, [pc, #80]	@ (8024f00 <mg_url_is_ssl+0x70>)
 8024eae:	4620      	mov	r0, r4
 8024eb0:	f007 f8d3 	bl	802c05a <strncmp>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8024eb4:	b1b8      	cbz	r0, 8024ee6 <mg_url_is_ssl+0x56>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8024eb6:	2204      	movs	r2, #4
 8024eb8:	4912      	ldr	r1, [pc, #72]	@ (8024f04 <mg_url_is_ssl+0x74>)
 8024eba:	4620      	mov	r0, r4
 8024ebc:	f007 f8cd 	bl	802c05a <strncmp>
 8024ec0:	b198      	cbz	r0, 8024eea <mg_url_is_ssl+0x5a>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8024ec2:	2204      	movs	r2, #4
 8024ec4:	4910      	ldr	r1, [pc, #64]	@ (8024f08 <mg_url_is_ssl+0x78>)
 8024ec6:	4620      	mov	r0, r4
 8024ec8:	f007 f8c7 	bl	802c05a <strncmp>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8024ecc:	b178      	cbz	r0, 8024eee <mg_url_is_ssl+0x5e>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8024ece:	2205      	movs	r2, #5
 8024ed0:	490e      	ldr	r1, [pc, #56]	@ (8024f0c <mg_url_is_ssl+0x7c>)
 8024ed2:	4620      	mov	r0, r4
 8024ed4:	f007 f8c1 	bl	802c05a <strncmp>
 8024ed8:	b958      	cbnz	r0, 8024ef2 <mg_url_is_ssl+0x62>
 8024eda:	2001      	movs	r0, #1
 8024edc:	e000      	b.n	8024ee0 <mg_url_is_ssl+0x50>
 8024ede:	2001      	movs	r0, #1
}
 8024ee0:	bd10      	pop	{r4, pc}
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8024ee2:	2001      	movs	r0, #1
 8024ee4:	e7fc      	b.n	8024ee0 <mg_url_is_ssl+0x50>
 8024ee6:	2001      	movs	r0, #1
 8024ee8:	e7fa      	b.n	8024ee0 <mg_url_is_ssl+0x50>
 8024eea:	2001      	movs	r0, #1
 8024eec:	e7f8      	b.n	8024ee0 <mg_url_is_ssl+0x50>
 8024eee:	2001      	movs	r0, #1
 8024ef0:	e7f6      	b.n	8024ee0 <mg_url_is_ssl+0x50>
 8024ef2:	2000      	movs	r0, #0
 8024ef4:	e7f4      	b.n	8024ee0 <mg_url_is_ssl+0x50>
 8024ef6:	bf00      	nop
 8024ef8:	08039cd0 	.word	0x08039cd0
 8024efc:	08039cd8 	.word	0x08039cd8
 8024f00:	08039ce0 	.word	0x08039ce0
 8024f04:	08039ce8 	.word	0x08039ce8
 8024f08:	08039cf0 	.word	0x08039cf0
 8024f0c:	08039cf8 	.word	0x08039cf8

08024f10 <mg_url_host>:
struct mg_str mg_url_host(const char *url) {
 8024f10:	b530      	push	{r4, r5, lr}
 8024f12:	b089      	sub	sp, #36	@ 0x24
 8024f14:	4604      	mov	r4, r0
 8024f16:	460d      	mov	r5, r1
  struct url u = urlparse(url);
 8024f18:	a801      	add	r0, sp, #4
 8024f1a:	f7fb ff52 	bl	8020dc2 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8024f1e:	9a05      	ldr	r2, [sp, #20]
             : u.uri ? u.uri - u.host
 8024f20:	b152      	cbz	r2, 8024f38 <mg_url_host+0x28>
  size_t n = u.port  ? u.port - u.host - 1
 8024f22:	9b04      	ldr	r3, [sp, #16]
 8024f24:	1ad2      	subs	r2, r2, r3
             : u.uri ? u.uri - u.host
 8024f26:	3a01      	subs	r2, #1
  struct mg_str s = mg_str_n(url + u.host, n);
 8024f28:	9904      	ldr	r1, [sp, #16]
 8024f2a:	4429      	add	r1, r5
 8024f2c:	4620      	mov	r0, r4
 8024f2e:	f7fe fd37 	bl	80239a0 <mg_str_n>
}
 8024f32:	4620      	mov	r0, r4
 8024f34:	b009      	add	sp, #36	@ 0x24
 8024f36:	bd30      	pop	{r4, r5, pc}
             : u.uri ? u.uri - u.host
 8024f38:	9a06      	ldr	r2, [sp, #24]
                     : u.end - u.host;
 8024f3a:	b112      	cbz	r2, 8024f42 <mg_url_host+0x32>
             : u.uri ? u.uri - u.host
 8024f3c:	9b04      	ldr	r3, [sp, #16]
                     : u.end - u.host;
 8024f3e:	1ad2      	subs	r2, r2, r3
 8024f40:	e7f2      	b.n	8024f28 <mg_url_host+0x18>
 8024f42:	9a07      	ldr	r2, [sp, #28]
 8024f44:	9b04      	ldr	r3, [sp, #16]
 8024f46:	1ad2      	subs	r2, r2, r3
 8024f48:	e7ee      	b.n	8024f28 <mg_url_host+0x18>
	...

08024f4c <mg_url_port>:
unsigned short mg_url_port(const char *url) {
 8024f4c:	b530      	push	{r4, r5, lr}
 8024f4e:	b089      	sub	sp, #36	@ 0x24
 8024f50:	4604      	mov	r4, r0
  struct url u = urlparse(url);
 8024f52:	4601      	mov	r1, r0
 8024f54:	a801      	add	r0, sp, #4
 8024f56:	f7fb ff34 	bl	8020dc2 <urlparse>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8024f5a:	2205      	movs	r2, #5
 8024f5c:	491d      	ldr	r1, [pc, #116]	@ (8024fd4 <mg_url_port+0x88>)
 8024f5e:	4620      	mov	r0, r4
 8024f60:	f007 f87b 	bl	802c05a <strncmp>
 8024f64:	b138      	cbz	r0, 8024f76 <mg_url_port+0x2a>
 8024f66:	2203      	movs	r2, #3
 8024f68:	491b      	ldr	r1, [pc, #108]	@ (8024fd8 <mg_url_port+0x8c>)
 8024f6a:	4620      	mov	r0, r4
 8024f6c:	f007 f875 	bl	802c05a <strncmp>
 8024f70:	b188      	cbz	r0, 8024f96 <mg_url_port+0x4a>
  unsigned short port = 0;
 8024f72:	2500      	movs	r5, #0
 8024f74:	e000      	b.n	8024f78 <mg_url_port+0x2c>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8024f76:	2550      	movs	r5, #80	@ 0x50
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8024f78:	2204      	movs	r2, #4
 8024f7a:	4918      	ldr	r1, [pc, #96]	@ (8024fdc <mg_url_port+0x90>)
 8024f7c:	4620      	mov	r0, r4
 8024f7e:	f007 f86c 	bl	802c05a <strncmp>
 8024f82:	b150      	cbz	r0, 8024f9a <mg_url_port+0x4e>
 8024f84:	2206      	movs	r2, #6
 8024f86:	4916      	ldr	r1, [pc, #88]	@ (8024fe0 <mg_url_port+0x94>)
 8024f88:	4620      	mov	r0, r4
 8024f8a:	f007 f866 	bl	802c05a <strncmp>
 8024f8e:	b930      	cbnz	r0, 8024f9e <mg_url_port+0x52>
    port = 443;
 8024f90:	f240 15bb 	movw	r5, #443	@ 0x1bb
 8024f94:	e003      	b.n	8024f9e <mg_url_port+0x52>
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8024f96:	2550      	movs	r5, #80	@ 0x50
 8024f98:	e7ee      	b.n	8024f78 <mg_url_port+0x2c>
    port = 443;
 8024f9a:	f240 15bb 	movw	r5, #443	@ 0x1bb
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 8024f9e:	2205      	movs	r2, #5
 8024fa0:	4910      	ldr	r1, [pc, #64]	@ (8024fe4 <mg_url_port+0x98>)
 8024fa2:	4620      	mov	r0, r4
 8024fa4:	f007 f859 	bl	802c05a <strncmp>
 8024fa8:	b908      	cbnz	r0, 8024fae <mg_url_port+0x62>
 8024faa:	f240 755b 	movw	r5, #1883	@ 0x75b
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8024fae:	2206      	movs	r2, #6
 8024fb0:	490d      	ldr	r1, [pc, #52]	@ (8024fe8 <mg_url_port+0x9c>)
 8024fb2:	4620      	mov	r0, r4
 8024fb4:	f007 f851 	bl	802c05a <strncmp>
 8024fb8:	b908      	cbnz	r0, 8024fbe <mg_url_port+0x72>
 8024fba:	f242 25b3 	movw	r5, #8883	@ 0x22b3
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8024fbe:	9805      	ldr	r0, [sp, #20]
 8024fc0:	b910      	cbnz	r0, 8024fc8 <mg_url_port+0x7c>
}
 8024fc2:	4628      	mov	r0, r5
 8024fc4:	b009      	add	sp, #36	@ 0x24
 8024fc6:	bd30      	pop	{r4, r5, pc}
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8024fc8:	4420      	add	r0, r4
 8024fca:	f004 fadd 	bl	8029588 <atoi>
 8024fce:	b285      	uxth	r5, r0
 8024fd0:	e7f7      	b.n	8024fc2 <mg_url_port+0x76>
 8024fd2:	bf00      	nop
 8024fd4:	08039d00 	.word	0x08039d00
 8024fd8:	08039d08 	.word	0x08039d08
 8024fdc:	08039cd0 	.word	0x08039cd0
 8024fe0:	08039cd8 	.word	0x08039cd8
 8024fe4:	08039d0c 	.word	0x08039d0c
 8024fe8:	08039ce0 	.word	0x08039ce0

08024fec <mg_bzero>:
  if (buf != NULL) {
 8024fec:	4603      	mov	r3, r0
 8024fee:	b920      	cbnz	r0, 8024ffa <mg_bzero+0xe>
 8024ff0:	4770      	bx	lr
    while (len--) *buf++ = 0;
 8024ff2:	2100      	movs	r1, #0
 8024ff4:	f803 1b01 	strb.w	r1, [r3], #1
 8024ff8:	4611      	mov	r1, r2
 8024ffa:	1e4a      	subs	r2, r1, #1
 8024ffc:	2900      	cmp	r1, #0
 8024ffe:	d1f8      	bne.n	8024ff2 <mg_bzero+0x6>
}
 8025000:	4770      	bx	lr

08025002 <mg_iobuf_del>:
size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 8025002:	b538      	push	{r3, r4, r5, lr}
 8025004:	4605      	mov	r5, r0
 8025006:	4608      	mov	r0, r1
 8025008:	4614      	mov	r4, r2
  if (ofs > io->len) ofs = io->len;
 802500a:	68aa      	ldr	r2, [r5, #8]
 802500c:	428a      	cmp	r2, r1
 802500e:	d200      	bcs.n	8025012 <mg_iobuf_del+0x10>
 8025010:	4610      	mov	r0, r2
  if (ofs + len > io->len) len = io->len - ofs;
 8025012:	1903      	adds	r3, r0, r4
 8025014:	429a      	cmp	r2, r3
 8025016:	d200      	bcs.n	802501a <mg_iobuf_del+0x18>
 8025018:	1a14      	subs	r4, r2, r0
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 802501a:	682b      	ldr	r3, [r5, #0]
 802501c:	b133      	cbz	r3, 802502c <mg_iobuf_del+0x2a>
 802501e:	1901      	adds	r1, r0, r4
 8025020:	1a12      	subs	r2, r2, r0
 8025022:	1b12      	subs	r2, r2, r4
 8025024:	4419      	add	r1, r3
 8025026:	4418      	add	r0, r3
 8025028:	f006 ffc8 	bl	802bfbc <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 802502c:	682b      	ldr	r3, [r5, #0]
 802502e:	b12b      	cbz	r3, 802503c <mg_iobuf_del+0x3a>
 8025030:	68a8      	ldr	r0, [r5, #8]
 8025032:	1b00      	subs	r0, r0, r4
 8025034:	4621      	mov	r1, r4
 8025036:	4418      	add	r0, r3
 8025038:	f7ff ffd8 	bl	8024fec <mg_bzero>
  io->len -= len;
 802503c:	68ab      	ldr	r3, [r5, #8]
 802503e:	1b1b      	subs	r3, r3, r4
 8025040:	60ab      	str	r3, [r5, #8]
}
 8025042:	4620      	mov	r0, r4
 8025044:	bd38      	pop	{r3, r4, r5, pc}

08025046 <mg_random>:
void mg_random(void *buf, size_t len) {
 8025046:	b538      	push	{r3, r4, r5, lr}
 8025048:	4604      	mov	r4, r0
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 802504a:	e006      	b.n	802505a <mg_random+0x14>
 802504c:	f006 fa8a 	bl	802b564 <rand>
 8025050:	4623      	mov	r3, r4
 8025052:	f803 0b01 	strb.w	r0, [r3], #1
 8025056:	461c      	mov	r4, r3
 8025058:	4629      	mov	r1, r5
 802505a:	1e4d      	subs	r5, r1, #1
 802505c:	2900      	cmp	r1, #0
 802505e:	d1f5      	bne.n	802504c <mg_random+0x6>
}
 8025060:	bd38      	pop	{r3, r4, r5, pc}
	...

08025064 <mg_random_str>:
char *mg_random_str(char *buf, size_t len) {
 8025064:	b570      	push	{r4, r5, r6, lr}
 8025066:	4604      	mov	r4, r0
 8025068:	460d      	mov	r5, r1
  mg_random(buf, len);
 802506a:	f7ff ffec 	bl	8025046 <mg_random>
  for (i = 0; i < len; i++) {
 802506e:	2100      	movs	r1, #0
 8025070:	e00a      	b.n	8025088 <mg_random_str+0x24>
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8025072:	2b33      	cmp	r3, #51	@ 0x33
 8025074:	d802      	bhi.n	802507c <mg_random_str+0x18>
 8025076:	3327      	adds	r3, #39	@ 0x27
 8025078:	b2db      	uxtb	r3, r3
 802507a:	e003      	b.n	8025084 <mg_random_str+0x20>
 802507c:	3b04      	subs	r3, #4
 802507e:	b2db      	uxtb	r3, r3
 8025080:	e000      	b.n	8025084 <mg_random_str+0x20>
 8025082:	2300      	movs	r3, #0
 8025084:	7003      	strb	r3, [r0, #0]
  for (i = 0; i < len; i++) {
 8025086:	3101      	adds	r1, #1
 8025088:	42a9      	cmp	r1, r5
 802508a:	d213      	bcs.n	80250b4 <mg_random_str+0x50>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 802508c:	1860      	adds	r0, r4, r1
 802508e:	5c63      	ldrb	r3, [r4, r1]
 8025090:	085a      	lsrs	r2, r3, #1
 8025092:	4e09      	ldr	r6, [pc, #36]	@ (80250b8 <mg_random_str+0x54>)
 8025094:	fba6 6202 	umull	r6, r2, r6, r2
 8025098:	0912      	lsrs	r2, r2, #4
 802509a:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 802509e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80250a2:	b2db      	uxtb	r3, r3
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 80250a4:	1e6a      	subs	r2, r5, #1
 80250a6:	428a      	cmp	r2, r1
 80250a8:	d0eb      	beq.n	8025082 <mg_random_str+0x1e>
 80250aa:	2b19      	cmp	r3, #25
 80250ac:	d8e1      	bhi.n	8025072 <mg_random_str+0xe>
 80250ae:	3361      	adds	r3, #97	@ 0x61
 80250b0:	b2db      	uxtb	r3, r3
 80250b2:	e7e7      	b.n	8025084 <mg_random_str+0x20>
}
 80250b4:	4620      	mov	r0, r4
 80250b6:	bd70      	pop	{r4, r5, r6, pc}
 80250b8:	84210843 	.word	0x84210843

080250bc <mg_ntohl>:
uint32_t mg_ntohl(uint32_t net) {
 80250bc:	b082      	sub	sp, #8
  uint8_t data[4] = {0, 0, 0, 0};
 80250be:	2300      	movs	r3, #0
 80250c0:	9301      	str	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 80250c2:	9001      	str	r0, [sp, #4]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80250c4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80250c8:	021b      	lsls	r3, r3, #8
 80250ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 80250ce:	f3c0 2207 	ubfx	r2, r0, #8, #8
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 80250d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
}
 80250d6:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80250da:	b002      	add	sp, #8
 80250dc:	4770      	bx	lr
	...

080250e0 <mg_atonl>:
static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 80250e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250e2:	b085      	sub	sp, #20
 80250e4:	466c      	mov	r4, sp
 80250e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80250ea:	4615      	mov	r5, r2
  uint32_t localhost = mg_htonl(0x7f000001);
 80250ec:	480b      	ldr	r0, [pc, #44]	@ (802511c <mg_atonl+0x3c>)
 80250ee:	f7ff ffe5 	bl	80250bc <mg_ntohl>
 80250f2:	4607      	mov	r7, r0
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 80250f4:	ae02      	add	r6, sp, #8
 80250f6:	490a      	ldr	r1, [pc, #40]	@ (8025120 <mg_atonl+0x40>)
 80250f8:	4630      	mov	r0, r6
 80250fa:	f7fe fc45 	bl	8023988 <mg_str_s>
 80250fe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8025102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025106:	f7fe fd3a 	bl	8023b7e <mg_strcasecmp>
 802510a:	b928      	cbnz	r0, 8025118 <mg_atonl+0x38>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 802510c:	602f      	str	r7, [r5, #0]
  addr->is_ip6 = false;
 802510e:	2300      	movs	r3, #0
 8025110:	74eb      	strb	r3, [r5, #19]
  return true;
 8025112:	2001      	movs	r0, #1
}
 8025114:	b005      	add	sp, #20
 8025116:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 8025118:	2000      	movs	r0, #0
 802511a:	e7fb      	b.n	8025114 <mg_atonl+0x34>
 802511c:	7f000001 	.word	0x7f000001
 8025120:	08039d14 	.word	0x08039d14

08025124 <mg_aton>:
bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8025124:	b510      	push	{r4, lr}
 8025126:	b082      	sub	sp, #8
 8025128:	466b      	mov	r3, sp
 802512a:	e883 0003 	stmia.w	r3, {r0, r1}
 802512e:	4614      	mov	r4, r2
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025130:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025134:	f7fb fe36 	bl	8020da4 <mg_atone>
 8025138:	b110      	cbz	r0, 8025140 <mg_aton+0x1c>
 802513a:	2001      	movs	r0, #1
}
 802513c:	b002      	add	sp, #8
 802513e:	bd10      	pop	{r4, pc}
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025140:	4622      	mov	r2, r4
 8025142:	ab02      	add	r3, sp, #8
 8025144:	e913 0003 	ldmdb	r3, {r0, r1}
 8025148:	f7ff ffca 	bl	80250e0 <mg_atonl>
 802514c:	b108      	cbz	r0, 8025152 <mg_aton+0x2e>
 802514e:	2001      	movs	r0, #1
 8025150:	e7f4      	b.n	802513c <mg_aton+0x18>
 8025152:	4622      	mov	r2, r4
 8025154:	ab02      	add	r3, sp, #8
 8025156:	e913 0003 	ldmdb	r3, {r0, r1}
 802515a:	f7fb fba3 	bl	80208a4 <mg_aton4>
 802515e:	b108      	cbz	r0, 8025164 <mg_aton+0x40>
 8025160:	2001      	movs	r0, #1
 8025162:	e7eb      	b.n	802513c <mg_aton+0x18>
         mg_aton6(str, addr);
 8025164:	4622      	mov	r2, r4
 8025166:	ab02      	add	r3, sp, #8
 8025168:	e913 0003 	ldmdb	r3, {r0, r1}
 802516c:	f7ff fd34 	bl	8024bd8 <mg_aton6>
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8025170:	2800      	cmp	r0, #0
 8025172:	d0e3      	beq.n	802513c <mg_aton+0x18>
 8025174:	2001      	movs	r0, #1
 8025176:	e7e1      	b.n	802513c <mg_aton+0x18>

08025178 <gettimestamp>:
static int64_t gettimestamp(const uint32_t *data) {
 8025178:	b570      	push	{r4, r5, r6, lr}
 802517a:	4604      	mov	r4, r0
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 802517c:	6800      	ldr	r0, [r0, #0]
 802517e:	f7ff ff9d 	bl	80250bc <mg_ntohl>
 8025182:	4606      	mov	r6, r0
 8025184:	6860      	ldr	r0, [r4, #4]
 8025186:	f7ff ff99 	bl	80250bc <mg_ntohl>
  if (sec) sec -= SNTP_TIME_OFFSET;
 802518a:	b12e      	cbz	r6, 8025198 <gettimestamp+0x20>
 802518c:	f106 46f8 	add.w	r6, r6, #2080374784	@ 0x7c000000
 8025190:	f506 06ab 	add.w	r6, r6, #5603328	@ 0x558000
 8025194:	f506 76c0 	add.w	r6, r6, #384	@ 0x180
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8025198:	0ef5      	lsrs	r5, r6, #27
 802519a:	0174      	lsls	r4, r6, #5
 802519c:	1ba4      	subs	r4, r4, r6
 802519e:	f165 0500 	sbc.w	r5, r5, #0
 80251a2:	00ad      	lsls	r5, r5, #2
 80251a4:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
 80251a8:	00a4      	lsls	r4, r4, #2
 80251aa:	19a4      	adds	r4, r4, r6
 80251ac:	f145 0500 	adc.w	r5, r5, #0
 80251b0:	00ed      	lsls	r5, r5, #3
 80251b2:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
 80251b6:	00e4      	lsls	r4, r4, #3
 80251b8:	f7eb f9bc 	bl	8010534 <__aeabi_ui2d>
 80251bc:	a309      	add	r3, pc, #36	@ (adr r3, 80251e4 <gettimestamp+0x6c>)
 80251be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251c2:	f7eb fb5b 	bl	801087c <__aeabi_ddiv>
 80251c6:	2200      	movs	r2, #0
 80251c8:	4b05      	ldr	r3, [pc, #20]	@ (80251e0 <gettimestamp+0x68>)
 80251ca:	f7eb fa2d 	bl	8010628 <__aeabi_dmul>
 80251ce:	f7eb fdef 	bl	8010db0 <__aeabi_d2lz>
 80251d2:	1820      	adds	r0, r4, r0
}
 80251d4:	eb45 0101 	adc.w	r1, r5, r1
 80251d8:	bd70      	pop	{r4, r5, r6, pc}
 80251da:	bf00      	nop
 80251dc:	f3af 8000 	nop.w
 80251e0:	408f4000 	.word	0x408f4000
 80251e4:	ffe00000 	.word	0xffe00000
 80251e8:	41efffff 	.word	0x41efffff

080251ec <mg_ntohs>:
uint16_t mg_ntohs(uint16_t net) {
 80251ec:	b082      	sub	sp, #8
  uint8_t data[2] = {0, 0};
 80251ee:	2300      	movs	r3, #0
 80251f0:	f8ad 3004 	strh.w	r3, [sp, #4]
  memcpy(&data, &net, sizeof(data));
 80251f4:	f8ad 0004 	strh.w	r0, [sp, #4]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 80251f8:	b2c3      	uxtb	r3, r0
 80251fa:	021b      	lsls	r3, r3, #8
}
 80251fc:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
 8025200:	b002      	add	sp, #8
 8025202:	4770      	bx	lr

08025204 <csumfin>:
static uint16_t csumfin(uint32_t sum) {
 8025204:	b508      	push	{r3, lr}
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 8025206:	e001      	b.n	802520c <csumfin+0x8>
 8025208:	fa13 f080 	uxtah	r0, r3, r0
 802520c:	0c03      	lsrs	r3, r0, #16
 802520e:	d1fb      	bne.n	8025208 <csumfin+0x4>
  return mg_htons(~sum & 0xffff);
 8025210:	43c0      	mvns	r0, r0
 8025212:	b280      	uxth	r0, r0
 8025214:	f7ff ffea 	bl	80251ec <mg_ntohs>
}
 8025218:	bd08      	pop	{r3, pc}

0802521a <ipcsum>:
static uint16_t ipcsum(const void *buf, size_t len) {
 802521a:	b508      	push	{r3, lr}
 802521c:	460a      	mov	r2, r1
  uint32_t sum = csumup(0, buf, len);
 802521e:	4601      	mov	r1, r0
 8025220:	2000      	movs	r0, #0
 8025222:	f7fb fb97 	bl	8020954 <csumup>
  return csumfin(sum);
 8025226:	f7ff ffed 	bl	8025204 <csumfin>
}
 802522a:	bd08      	pop	{r3, pc}

0802522c <tx_ip>:
                        size_t plen) {
 802522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802522e:	4617      	mov	r7, r2
 8025230:	461e      	mov	r6, r3
  struct eth *eth = (struct eth *) ifp->tx.buf;
 8025232:	6944      	ldr	r4, [r0, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 8025234:	4625      	mov	r5, r4
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 8025236:	680b      	ldr	r3, [r1, #0]
 8025238:	f845 3b0e 	str.w	r3, [r5], #14
 802523c:	888b      	ldrh	r3, [r1, #4]
 802523e:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 8025240:	6803      	ldr	r3, [r0, #0]
 8025242:	f8c4 3006 	str.w	r3, [r4, #6]
 8025246:	8883      	ldrh	r3, [r0, #4]
 8025248:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x800);
 802524a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802524e:	f7ff ffcd 	bl	80251ec <mg_ntohs>
 8025252:	81a0      	strh	r0, [r4, #12]
  memset(ip, 0, sizeof(*ip));
 8025254:	2100      	movs	r1, #0
 8025256:	f8c4 100e 	str.w	r1, [r4, #14]
 802525a:	6069      	str	r1, [r5, #4]
 802525c:	60a9      	str	r1, [r5, #8]
 802525e:	60e9      	str	r1, [r5, #12]
 8025260:	6129      	str	r1, [r5, #16]
  ip->ver = 0x45;   // Version 4, header length 5 words
 8025262:	2345      	movs	r3, #69	@ 0x45
 8025264:	73a3      	strb	r3, [r4, #14]
  ip->frag = 0x40;  // Don't fragment
 8025266:	2340      	movs	r3, #64	@ 0x40
 8025268:	7523      	strb	r3, [r4, #20]
 802526a:	7561      	strb	r1, [r4, #21]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 802526c:	9807      	ldr	r0, [sp, #28]
 802526e:	3014      	adds	r0, #20
 8025270:	b280      	uxth	r0, r0
 8025272:	f7ff ffbb 	bl	80251ec <mg_ntohs>
 8025276:	8220      	strh	r0, [r4, #16]
  ip->ttl = 64;
 8025278:	2340      	movs	r3, #64	@ 0x40
 802527a:	75a3      	strb	r3, [r4, #22]
  ip->proto = proto;
 802527c:	75e7      	strb	r7, [r4, #23]
  ip->src = ip_src;
 802527e:	f8c4 601a 	str.w	r6, [r4, #26]
  ip->dst = ip_dst;
 8025282:	9b06      	ldr	r3, [sp, #24]
 8025284:	f8c4 301e 	str.w	r3, [r4, #30]
  ip->csum = ipcsum(ip, sizeof(*ip));
 8025288:	2114      	movs	r1, #20
 802528a:	4628      	mov	r0, r5
 802528c:	f7ff ffc5 	bl	802521a <ipcsum>
 8025290:	8320      	strh	r0, [r4, #24]
}
 8025292:	4628      	mov	r0, r5
 8025294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025296 <rx_icmp>:
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 8025296:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8025298:	781b      	ldrb	r3, [r3, #0]
 802529a:	2b08      	cmp	r3, #8
 802529c:	d000      	beq.n	80252a0 <rx_icmp+0xa>
 802529e:	4770      	bx	lr
static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80252a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80252a4:	b083      	sub	sp, #12
 80252a6:	4605      	mov	r5, r0
 80252a8:	460c      	mov	r4, r1
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 80252aa:	69ca      	ldr	r2, [r1, #28]
 80252ac:	b11a      	cbz	r2, 80252b6 <rx_icmp+0x20>
 80252ae:	6911      	ldr	r1, [r2, #16]
 80252b0:	6883      	ldr	r3, [r0, #8]
 80252b2:	4299      	cmp	r1, r3
 80252b4:	d002      	beq.n	80252bc <rx_icmp+0x26>
}
 80252b6:	b003      	add	sp, #12
 80252b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 80252bc:	6986      	ldr	r6, [r0, #24]
 80252be:	3e26      	subs	r6, #38	@ 0x26
 80252c0:	68e1      	ldr	r1, [r4, #12]
    if (plen > space) plen = space;
 80252c2:	428e      	cmp	r6, r1
 80252c4:	d300      	bcc.n	80252c8 <rx_icmp+0x32>
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 80252c6:	460e      	mov	r6, r1
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 80252c8:	6921      	ldr	r1, [r4, #16]
 80252ca:	f106 0804 	add.w	r8, r6, #4
 80252ce:	f8cd 8004 	str.w	r8, [sp, #4]
 80252d2:	68d2      	ldr	r2, [r2, #12]
 80252d4:	9200      	str	r2, [sp, #0]
 80252d6:	2201      	movs	r2, #1
 80252d8:	3106      	adds	r1, #6
 80252da:	4628      	mov	r0, r5
 80252dc:	f7ff ffa6 	bl	802522c <tx_ip>
 80252e0:	4607      	mov	r7, r0
    struct icmp *icmp = (struct icmp *) (ip + 1);
 80252e2:	f100 0914 	add.w	r9, r0, #20
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 80252e6:	2300      	movs	r3, #0
 80252e8:	6143      	str	r3, [r0, #20]
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 80252ea:	4632      	mov	r2, r6
 80252ec:	68a1      	ldr	r1, [r4, #8]
 80252ee:	3018      	adds	r0, #24
 80252f0:	f008 f8ba 	bl	802d468 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 80252f4:	4641      	mov	r1, r8
 80252f6:	4648      	mov	r0, r9
 80252f8:	f7ff ff8f 	bl	802521a <ipcsum>
 80252fc:	82f8      	strh	r0, [r7, #22]
    ether_output(ifp, hlen + plen);
 80252fe:	f106 0126 	add.w	r1, r6, #38	@ 0x26
 8025302:	4628      	mov	r0, r5
 8025304:	f7fb fb37 	bl	8020976 <ether_output>
}
 8025308:	e7d5      	b.n	80252b6 <rx_icmp+0x20>

0802530a <rx_ip6>:
static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802530a:	b538      	push	{r3, r4, r5, lr}
 802530c:	4605      	mov	r5, r0
 802530e:	460c      	mov	r4, r1
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8025310:	6a09      	ldr	r1, [r1, #32]
 8025312:	798b      	ldrb	r3, [r1, #6]
 8025314:	2b01      	cmp	r3, #1
 8025316:	d00e      	beq.n	8025336 <rx_ip6+0x2c>
 8025318:	2b3a      	cmp	r3, #58	@ 0x3a
 802531a:	d00c      	beq.n	8025336 <rx_ip6+0x2c>
  } else if (pkt->ip6->proto == 17) {
 802531c:	2b11      	cmp	r3, #17
 802531e:	d110      	bne.n	8025342 <rx_ip6+0x38>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8025320:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 8025324:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8025326:	68e3      	ldr	r3, [r4, #12]
 8025328:	2b07      	cmp	r3, #7
 802532a:	d90a      	bls.n	8025342 <rx_ip6+0x38>
    mkpay(pkt, pkt->udp + 1);
 802532c:	3130      	adds	r1, #48	@ 0x30
 802532e:	4620      	mov	r0, r4
 8025330:	f7fe fbe9 	bl	8023b06 <mkpay>
 8025334:	e005      	b.n	8025342 <rx_ip6+0x38>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8025336:	f101 0328 	add.w	r3, r1, #40	@ 0x28
 802533a:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 802533c:	68e3      	ldr	r3, [r4, #12]
 802533e:	2b03      	cmp	r3, #3
 8025340:	d800      	bhi.n	8025344 <rx_ip6+0x3a>
}
 8025342:	bd38      	pop	{r3, r4, r5, pc}
    mkpay(pkt, pkt->icmp + 1);
 8025344:	312c      	adds	r1, #44	@ 0x2c
 8025346:	4620      	mov	r0, r4
 8025348:	f7fe fbdd 	bl	8023b06 <mkpay>
    rx_icmp(ifp, pkt);
 802534c:	4621      	mov	r1, r4
 802534e:	4628      	mov	r0, r5
 8025350:	f7ff ffa1 	bl	8025296 <rx_icmp>
 8025354:	e7f5      	b.n	8025342 <rx_ip6+0x38>

08025356 <tx_udp>:
                   const void *buf, size_t len) {
 8025356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802535a:	b083      	sub	sp, #12
 802535c:	4606      	mov	r6, r0
 802535e:	4698      	mov	r8, r3
 8025360:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025362:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 8025364:	f105 0308 	add.w	r3, r5, #8
 8025368:	9301      	str	r3, [sp, #4]
 802536a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802536c:	9300      	str	r3, [sp, #0]
 802536e:	4613      	mov	r3, r2
 8025370:	2211      	movs	r2, #17
 8025372:	f7ff ff5b 	bl	802522c <tx_ip>
 8025376:	4604      	mov	r4, r0
  struct udp *udp = (struct udp *) (ip + 1);
 8025378:	f100 0914 	add.w	r9, r0, #20
  udp->sport = sport;
 802537c:	f8a0 8014 	strh.w	r8, [r0, #20]
  udp->dport = dport;
 8025380:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8025384:	82c3      	strh	r3, [r0, #22]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 8025386:	f105 0008 	add.w	r0, r5, #8
 802538a:	b280      	uxth	r0, r0
 802538c:	f7ff ff2e 	bl	80251ec <mg_ntohs>
 8025390:	8320      	strh	r0, [r4, #24]
  udp->csum = 0;
 8025392:	2000      	movs	r0, #0
 8025394:	76a0      	strb	r0, [r4, #26]
 8025396:	76e0      	strb	r0, [r4, #27]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 8025398:	2208      	movs	r2, #8
 802539a:	4649      	mov	r1, r9
 802539c:	f7fb fada 	bl	8020954 <csumup>
  cs = csumup(cs, buf, len);
 80253a0:	462a      	mov	r2, r5
 80253a2:	4639      	mov	r1, r7
 80253a4:	f7fb fad6 	bl	8020954 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 80253a8:	2204      	movs	r2, #4
 80253aa:	f104 010c 	add.w	r1, r4, #12
 80253ae:	f7fb fad1 	bl	8020954 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 80253b2:	2204      	movs	r2, #4
 80253b4:	f104 0110 	add.w	r1, r4, #16
 80253b8:	f7fb facc 	bl	8020954 <csumup>
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 80253bc:	7a63      	ldrb	r3, [r4, #9]
 80253be:	442b      	add	r3, r5
 80253c0:	4418      	add	r0, r3
  udp->csum = csumfin(cs);
 80253c2:	3008      	adds	r0, #8
 80253c4:	f7ff ff1e 	bl	8025204 <csumfin>
 80253c8:	8360      	strh	r0, [r4, #26]
  memmove(udp + 1, buf, len);
 80253ca:	462a      	mov	r2, r5
 80253cc:	4639      	mov	r1, r7
 80253ce:	f104 001c 	add.w	r0, r4, #28
 80253d2:	f006 fdf3 	bl	802bfbc <memmove>
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 80253d6:	f105 012a 	add.w	r1, r5, #42	@ 0x2a
 80253da:	4630      	mov	r0, r6
 80253dc:	f7fb facb 	bl	8020976 <ether_output>
}
 80253e0:	b003      	add	sp, #12
 80253e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080253e6 <arp_ask>:
static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 80253e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80253e8:	4605      	mov	r5, r0
 80253ea:	460f      	mov	r7, r1
  struct eth *eth = (struct eth *) ifp->tx.buf;
 80253ec:	6944      	ldr	r4, [r0, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 80253ee:	4626      	mov	r6, r4
  memset(eth->dst, 255, sizeof(eth->dst));
 80253f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80253f4:	f846 3b0e 	str.w	r3, [r6], #14
 80253f8:	80a3      	strh	r3, [r4, #4]
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80253fa:	6803      	ldr	r3, [r0, #0]
 80253fc:	f8c4 3006 	str.w	r3, [r4, #6]
 8025400:	8883      	ldrh	r3, [r0, #4]
 8025402:	8163      	strh	r3, [r4, #10]
  eth->type = mg_htons(0x806);
 8025404:	f640 0006 	movw	r0, #2054	@ 0x806
 8025408:	f7ff fef0 	bl	80251ec <mg_ntohs>
 802540c:	81a0      	strh	r0, [r4, #12]
  memset(arp, 0, sizeof(*arp));
 802540e:	2300      	movs	r3, #0
 8025410:	f8c4 300e 	str.w	r3, [r4, #14]
 8025414:	6073      	str	r3, [r6, #4]
 8025416:	60b3      	str	r3, [r6, #8]
 8025418:	60f3      	str	r3, [r6, #12]
 802541a:	6133      	str	r3, [r6, #16]
 802541c:	6173      	str	r3, [r6, #20]
 802541e:	61b3      	str	r3, [r6, #24]
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 8025420:	2001      	movs	r0, #1
 8025422:	f7ff fee3 	bl	80251ec <mg_ntohs>
 8025426:	4606      	mov	r6, r0
 8025428:	81e0      	strh	r0, [r4, #14]
 802542a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802542e:	f7ff fedd 	bl	80251ec <mg_ntohs>
 8025432:	8220      	strh	r0, [r4, #16]
 8025434:	2306      	movs	r3, #6
 8025436:	74a3      	strb	r3, [r4, #18]
  arp->plen = 4;
 8025438:	2304      	movs	r3, #4
 802543a:	74e3      	strb	r3, [r4, #19]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 802543c:	82a6      	strh	r6, [r4, #20]
 802543e:	f8c4 7026 	str.w	r7, [r4, #38]	@ 0x26
 8025442:	68ab      	ldr	r3, [r5, #8]
 8025444:	61e3      	str	r3, [r4, #28]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 8025446:	682b      	ldr	r3, [r5, #0]
 8025448:	f8c4 3016 	str.w	r3, [r4, #22]
 802544c:	88ab      	ldrh	r3, [r5, #4]
 802544e:	8363      	strh	r3, [r4, #26]
  ether_output(ifp, PDIFF(eth, arp + 1));
 8025450:	212a      	movs	r1, #42	@ 0x2a
 8025452:	4628      	mov	r0, r5
 8025454:	f7fb fa8f 	bl	8020976 <ether_output>
}
 8025458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802545a <mg_open_listener>:
bool mg_open_listener(struct mg_connection *c, const char *url) {
 802545a:	b510      	push	{r4, lr}
 802545c:	4604      	mov	r4, r0
  c->loc.port = mg_htons(mg_url_port(url));
 802545e:	4608      	mov	r0, r1
 8025460:	f7ff fd74 	bl	8024f4c <mg_url_port>
 8025464:	f7ff fec2 	bl	80251ec <mg_ntohs>
 8025468:	8320      	strh	r0, [r4, #24]
}
 802546a:	2001      	movs	r0, #1
 802546c:	bd10      	pop	{r4, pc}
	...

08025470 <tx_dhcp>:
                    bool ciaddr) {
 8025470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025474:	b0c8      	sub	sp, #288	@ 0x120
 8025476:	4604      	mov	r4, r0
 8025478:	460e      	mov	r6, r1
 802547a:	4615      	mov	r5, r2
 802547c:	4698      	mov	r8, r3
 802547e:	f89d 7140 	ldrb.w	r7, [sp, #320]	@ 0x140
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 8025482:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025486:	4917      	ldr	r1, [pc, #92]	@ (80254e4 <tx_dhcp+0x74>)
 8025488:	a804      	add	r0, sp, #16
 802548a:	f007 ffed 	bl	802d468 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 802548e:	4816      	ldr	r0, [pc, #88]	@ (80254e8 <tx_dhcp+0x78>)
 8025490:	f7ff fe14 	bl	80250bc <mg_ntohl>
 8025494:	903f      	str	r0, [sp, #252]	@ 0xfc
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 8025496:	6820      	ldr	r0, [r4, #0]
 8025498:	900b      	str	r0, [sp, #44]	@ 0x2c
 802549a:	88a3      	ldrh	r3, [r4, #4]
 802549c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 80254a0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80254a4:	9305      	str	r3, [sp, #20]
  memcpy(&dhcp.options, opts, optslen);
 80254a6:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
 80254a8:	994e      	ldr	r1, [sp, #312]	@ 0x138
 80254aa:	a840      	add	r0, sp, #256	@ 0x100
 80254ac:	f007 ffdc 	bl	802d468 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 80254b0:	b107      	cbz	r7, 80254b4 <tx_dhcp+0x44>
 80254b2:	9507      	str	r5, [sp, #28]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 80254b4:	2044      	movs	r0, #68	@ 0x44
 80254b6:	f7ff fe99 	bl	80251ec <mg_ntohs>
 80254ba:	4607      	mov	r7, r0
 80254bc:	2043      	movs	r0, #67	@ 0x43
 80254be:	f7ff fe95 	bl	80251ec <mg_ntohs>
 80254c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80254c6:	9303      	str	r3, [sp, #12]
 80254c8:	ab04      	add	r3, sp, #16
 80254ca:	9302      	str	r3, [sp, #8]
 80254cc:	9001      	str	r0, [sp, #4]
 80254ce:	f8cd 8000 	str.w	r8, [sp]
 80254d2:	463b      	mov	r3, r7
 80254d4:	462a      	mov	r2, r5
 80254d6:	4631      	mov	r1, r6
 80254d8:	4620      	mov	r0, r4
 80254da:	f7ff ff3c 	bl	8025356 <tx_udp>
}
 80254de:	b048      	add	sp, #288	@ 0x120
 80254e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254e4:	0803533c 	.word	0x0803533c
 80254e8:	63825363 	.word	0x63825363

080254ec <rx_dhcp_server>:
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80254ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254f0:	b0d0      	sub	sp, #320	@ 0x140
 80254f2:	460d      	mov	r5, r1
  uint8_t op = 0, *p = pkt->dhcp->options,
 80254f4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80254f6:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 80254fa:	6809      	ldr	r1, [r1, #0]
 80254fc:	686a      	ldr	r2, [r5, #4]
 80254fe:	eb01 0802 	add.w	r8, r1, r2
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8025502:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8025506:	4543      	cmp	r3, r8
 8025508:	d827      	bhi.n	802555a <rx_dhcp_server+0x6e>
 802550a:	4606      	mov	r6, r0
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 802550c:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8025510:	495e      	ldr	r1, [pc, #376]	@ (802568c <rx_dhcp_server+0x1a0>)
 8025512:	a80c      	add	r0, sp, #48	@ 0x30
 8025514:	f007 ffa8 	bl	802d468 <memcpy>
  res.yiaddr = ifp->ip;
 8025518:	68b3      	ldr	r3, [r6, #8]
 802551a:	9310      	str	r3, [sp, #64]	@ 0x40
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 802551c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8025520:	3301      	adds	r3, #1
 8025522:	f88d 3043 	strb.w	r3, [sp, #67]	@ 0x43
  uint8_t op = 0, *p = pkt->dhcp->options,
 8025526:	2700      	movs	r7, #0
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8025528:	e002      	b.n	8025530 <rx_dhcp_server+0x44>
    p += p[1] + 2;
 802552a:	7863      	ldrb	r3, [r4, #1]
 802552c:	3302      	adds	r3, #2
 802552e:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {             // Parse options
 8025530:	1c63      	adds	r3, r4, #1
 8025532:	4543      	cmp	r3, r8
 8025534:	d20c      	bcs.n	8025550 <rx_dhcp_server+0x64>
 8025536:	7823      	ldrb	r3, [r4, #0]
 8025538:	2bff      	cmp	r3, #255	@ 0xff
 802553a:	d009      	beq.n	8025550 <rx_dhcp_server+0x64>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 802553c:	2b35      	cmp	r3, #53	@ 0x35
 802553e:	d1f4      	bne.n	802552a <rx_dhcp_server+0x3e>
 8025540:	7863      	ldrb	r3, [r4, #1]
 8025542:	2b01      	cmp	r3, #1
 8025544:	d1f1      	bne.n	802552a <rx_dhcp_server+0x3e>
 8025546:	1ca3      	adds	r3, r4, #2
 8025548:	4543      	cmp	r3, r8
 802554a:	d2ee      	bcs.n	802552a <rx_dhcp_server+0x3e>
      op = p[2];
 802554c:	78a7      	ldrb	r7, [r4, #2]
 802554e:	e7ec      	b.n	802552a <rx_dhcp_server+0x3e>
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 8025550:	2f01      	cmp	r7, #1
 8025552:	f000 808a 	beq.w	802566a <rx_dhcp_server+0x17e>
 8025556:	2f03      	cmp	r7, #3
 8025558:	d002      	beq.n	8025560 <rx_dhcp_server+0x74>
}
 802555a:	b050      	add	sp, #320	@ 0x140
 802555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 8025560:	2205      	movs	r2, #5
    uint8_t opts[] = {
 8025562:	2335      	movs	r3, #53	@ 0x35
 8025564:	f88d 3014 	strb.w	r3, [sp, #20]
 8025568:	2301      	movs	r3, #1
 802556a:	f88d 3015 	strb.w	r3, [sp, #21]
 802556e:	f88d 2016 	strb.w	r2, [sp, #22]
 8025572:	f88d 3017 	strb.w	r3, [sp, #23]
 8025576:	2204      	movs	r2, #4
 8025578:	f88d 2018 	strb.w	r2, [sp, #24]
 802557c:	2300      	movs	r3, #0
 802557e:	f88d 3019 	strb.w	r3, [sp, #25]
 8025582:	f88d 301a 	strb.w	r3, [sp, #26]
 8025586:	f88d 301b 	strb.w	r3, [sp, #27]
 802558a:	f88d 301c 	strb.w	r3, [sp, #28]
 802558e:	2136      	movs	r1, #54	@ 0x36
 8025590:	f88d 101d 	strb.w	r1, [sp, #29]
 8025594:	f88d 201e 	strb.w	r2, [sp, #30]
 8025598:	f88d 301f 	strb.w	r3, [sp, #31]
 802559c:	f88d 3020 	strb.w	r3, [sp, #32]
 80255a0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80255a4:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 80255a8:	230c      	movs	r3, #12
 80255aa:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80255ae:	2303      	movs	r3, #3
 80255b0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80255b4:	236d      	movs	r3, #109	@ 0x6d
 80255b6:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 80255ba:	2369      	movs	r3, #105	@ 0x69
 80255bc:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 80255c0:	2370      	movs	r3, #112	@ 0x70
 80255c2:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80255c6:	2333      	movs	r3, #51	@ 0x33
 80255c8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80255cc:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 80255d0:	23ff      	movs	r3, #255	@ 0xff
 80255d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80255d6:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80255da:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80255de:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
 80255e2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 80255e6:	f8d5 e030 	ldr.w	lr, [r5, #48]	@ 0x30
 80255ea:	f8de 001c 	ldr.w	r0, [lr, #28]
 80255ee:	9013      	str	r0, [sp, #76]	@ 0x4c
 80255f0:	f8be 3020 	ldrh.w	r3, [lr, #32]
 80255f4:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 80255f8:	68f3      	ldr	r3, [r6, #12]
 80255fa:	f8cd 3019 	str.w	r3, [sp, #25]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 80255fe:	68b3      	ldr	r3, [r6, #8]
 8025600:	f8cd 301f 	str.w	r3, [sp, #31]
    memcpy(&res.options, opts, sizeof(opts));
 8025604:	f50d 7c90 	add.w	ip, sp, #288	@ 0x120
 8025608:	ac05      	add	r4, sp, #20
 802560a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802560c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8025610:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8025614:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8025618:	f82c 2b02 	strh.w	r2, [ip], #2
 802561c:	0c12      	lsrs	r2, r2, #16
 802561e:	f88c 2000 	strb.w	r2, [ip]
    res.magic = pkt->dhcp->magic;
 8025622:	f8de 30ec 	ldr.w	r3, [lr, #236]	@ 0xec
 8025626:	9347      	str	r3, [sp, #284]	@ 0x11c
    res.xid = pkt->dhcp->xid;
 8025628:	f8de 3004 	ldr.w	r3, [lr, #4]
 802562c:	930d      	str	r3, [sp, #52]	@ 0x34
    if (ifp->enable_get_gateway) {
 802562e:	7fb3      	ldrb	r3, [r6, #30]
 8025630:	b9eb      	cbnz	r3, 802566e <rx_dhcp_server+0x182>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025632:	692c      	ldr	r4, [r5, #16]
 8025634:	3406      	adds	r4, #6
 8025636:	f8d6 8008 	ldr.w	r8, [r6, #8]
 802563a:	2043      	movs	r0, #67	@ 0x43
 802563c:	f7ff fdd6 	bl	80251ec <mg_ntohs>
 8025640:	4605      	mov	r5, r0
 8025642:	2f01      	cmp	r7, #1
 8025644:	d01e      	beq.n	8025684 <rx_dhcp_server+0x198>
 8025646:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025648:	2044      	movs	r0, #68	@ 0x44
 802564a:	f7ff fdcf 	bl	80251ec <mg_ntohs>
 802564e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8025652:	9303      	str	r3, [sp, #12]
 8025654:	ab0c      	add	r3, sp, #48	@ 0x30
 8025656:	9302      	str	r3, [sp, #8]
 8025658:	9001      	str	r0, [sp, #4]
 802565a:	9700      	str	r7, [sp, #0]
 802565c:	462b      	mov	r3, r5
 802565e:	4642      	mov	r2, r8
 8025660:	4621      	mov	r1, r4
 8025662:	4630      	mov	r0, r6
 8025664:	f7ff fe77 	bl	8025356 <tx_udp>
 8025668:	e777      	b.n	802555a <rx_dhcp_server+0x6e>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 802566a:	2202      	movs	r2, #2
 802566c:	e779      	b.n	8025562 <rx_dhcp_server+0x76>
      ifp->gw = res.yiaddr;
 802566e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025670:	6133      	str	r3, [r6, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8025672:	692b      	ldr	r3, [r5, #16]
 8025674:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8025678:	f8c6 2046 	str.w	r2, [r6, #70]	@ 0x46
 802567c:	895b      	ldrh	r3, [r3, #10]
 802567e:	f8a6 304a 	strh.w	r3, [r6, #74]	@ 0x4a
 8025682:	e7d6      	b.n	8025632 <rx_dhcp_server+0x146>
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 8025684:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025688:	e7de      	b.n	8025648 <rx_dhcp_server+0x15c>
 802568a:	bf00      	nop
 802568c:	0803544c 	.word	0x0803544c

08025690 <print_ip6>:
static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8025690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025694:	b08b      	sub	sp, #44	@ 0x2c
 8025696:	4605      	mov	r5, r0
 8025698:	9108      	str	r1, [sp, #32]
 802569a:	4614      	mov	r4, r2
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802569c:	8810      	ldrh	r0, [r2, #0]
 802569e:	f7ff fda5 	bl	80251ec <mg_ntohs>
 80256a2:	9009      	str	r0, [sp, #36]	@ 0x24
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80256a4:	8860      	ldrh	r0, [r4, #2]
 80256a6:	f7ff fda1 	bl	80251ec <mg_ntohs>
 80256aa:	4606      	mov	r6, r0
 80256ac:	88a0      	ldrh	r0, [r4, #4]
 80256ae:	f7ff fd9d 	bl	80251ec <mg_ntohs>
 80256b2:	4607      	mov	r7, r0
 80256b4:	88e0      	ldrh	r0, [r4, #6]
 80256b6:	f7ff fd99 	bl	80251ec <mg_ntohs>
 80256ba:	4680      	mov	r8, r0
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80256bc:	8920      	ldrh	r0, [r4, #8]
 80256be:	f7ff fd95 	bl	80251ec <mg_ntohs>
 80256c2:	4681      	mov	r9, r0
 80256c4:	8960      	ldrh	r0, [r4, #10]
 80256c6:	f7ff fd91 	bl	80251ec <mg_ntohs>
 80256ca:	4682      	mov	sl, r0
 80256cc:	89a0      	ldrh	r0, [r4, #12]
 80256ce:	f7ff fd8d 	bl	80251ec <mg_ntohs>
 80256d2:	4683      	mov	fp, r0
                    mg_ntohs(p[7]));
 80256d4:	89e0      	ldrh	r0, [r4, #14]
 80256d6:	f7ff fd89 	bl	80251ec <mg_ntohs>
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80256da:	9006      	str	r0, [sp, #24]
 80256dc:	f8cd b014 	str.w	fp, [sp, #20]
 80256e0:	f8cd a010 	str.w	sl, [sp, #16]
 80256e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80256e8:	f8cd 8008 	str.w	r8, [sp, #8]
 80256ec:	9701      	str	r7, [sp, #4]
 80256ee:	9600      	str	r6, [sp, #0]
 80256f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256f2:	4a04      	ldr	r2, [pc, #16]	@ (8025704 <print_ip6+0x74>)
 80256f4:	9908      	ldr	r1, [sp, #32]
 80256f6:	4628      	mov	r0, r5
 80256f8:	f7fd ff28 	bl	802354c <mg_xprintf>
}
 80256fc:	b00b      	add	sp, #44	@ 0x2c
 80256fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025702:	bf00      	nop
 8025704:	08039d20 	.word	0x08039d20

08025708 <mg_print_ip>:
size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8025708:	b510      	push	{r4, lr}
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 802570a:	6813      	ldr	r3, [r2, #0]
 802570c:	1d1c      	adds	r4, r3, #4
 802570e:	6014      	str	r4, [r2, #0]
 8025710:	681a      	ldr	r2, [r3, #0]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8025712:	7cd3      	ldrb	r3, [r2, #19]
 8025714:	b913      	cbnz	r3, 802571c <mg_print_ip+0x14>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8025716:	f7fd ff29 	bl	802356c <print_ip4>
}
 802571a:	bd10      	pop	{r4, pc}
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 802571c:	f7ff ffb8 	bl	8025690 <print_ip6>
 8025720:	e7fb      	b.n	802571a <mg_print_ip+0x12>
	...

08025724 <mg_print_ip_port>:
size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8025724:	b570      	push	{r4, r5, r6, lr}
 8025726:	b082      	sub	sp, #8
 8025728:	4604      	mov	r4, r0
 802572a:	460d      	mov	r5, r1
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 802572c:	6813      	ldr	r3, [r2, #0]
 802572e:	1d19      	adds	r1, r3, #4
 8025730:	6011      	str	r1, [r2, #0]
 8025732:	681e      	ldr	r6, [r3, #0]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8025734:	8a30      	ldrh	r0, [r6, #16]
 8025736:	f7ff fd59 	bl	80251ec <mg_ntohs>
 802573a:	9001      	str	r0, [sp, #4]
 802573c:	9600      	str	r6, [sp, #0]
 802573e:	4b04      	ldr	r3, [pc, #16]	@ (8025750 <mg_print_ip_port+0x2c>)
 8025740:	4a04      	ldr	r2, [pc, #16]	@ (8025754 <mg_print_ip_port+0x30>)
 8025742:	4629      	mov	r1, r5
 8025744:	4620      	mov	r0, r4
 8025746:	f7fd ff01 	bl	802354c <mg_xprintf>
}
 802574a:	b002      	add	sp, #8
 802574c:	bd70      	pop	{r4, r5, r6, pc}
 802574e:	bf00      	nop
 8025750:	08025709 	.word	0x08025709
 8025754:	08039d3c 	.word	0x08039d3c

08025758 <mg_crc32>:
  crc = ~crc;
 8025758:	43c0      	mvns	r0, r0
  while (len--) {
 802575a:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 802575e:	b1e2      	cbz	r2, 802579a <mg_crc32+0x42>
uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8025760:	b410      	push	{r4}
    uint8_t b = *(uint8_t *) buf++;
 8025762:	f811 3b01 	ldrb.w	r3, [r1], #1
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8025766:	ea83 0200 	eor.w	r2, r3, r0
 802576a:	f002 020f 	and.w	r2, r2, #15
 802576e:	4c0c      	ldr	r4, [pc, #48]	@ (80257a0 <mg_crc32+0x48>)
 8025770:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8025774:	ea82 1010 	eor.w	r0, r2, r0, lsr #4
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8025778:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 802577c:	f003 030f 	and.w	r3, r3, #15
 8025780:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8025784:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
  while (len--) {
 8025788:	4662      	mov	r2, ip
 802578a:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802578e:	2a00      	cmp	r2, #0
 8025790:	d1e7      	bne.n	8025762 <mg_crc32+0xa>
}
 8025792:	43c0      	mvns	r0, r0
 8025794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025798:	4770      	bx	lr
 802579a:	43c0      	mvns	r0, r0
 802579c:	4770      	bx	lr
 802579e:	bf00      	nop
 80257a0:	0803a5d0 	.word	0x0803a5d0

080257a4 <mg_path_is_sane>:
bool mg_path_is_sane(const struct mg_str path) {
 80257a4:	b082      	sub	sp, #8
 80257a6:	ab02      	add	r3, sp, #8
 80257a8:	e903 0003 	stmdb	r3, {r0, r1}
  const char *s = path.buf;
 80257ac:	4602      	mov	r2, r0
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 80257ae:	7803      	ldrb	r3, [r0, #0]
 80257b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80257b2:	d106      	bne.n	80257c2 <mg_path_is_sane+0x1e>
 80257b4:	7843      	ldrb	r3, [r0, #1]
 80257b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80257b8:	d103      	bne.n	80257c2 <mg_path_is_sane+0x1e>
 80257ba:	2000      	movs	r0, #0
 80257bc:	e015      	b.n	80257ea <mg_path_is_sane+0x46>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 80257be:	3201      	adds	r2, #1
 80257c0:	3901      	subs	r1, #1
 80257c2:	7813      	ldrb	r3, [r2, #0]
 80257c4:	b183      	cbz	r3, 80257e8 <mg_path_is_sane+0x44>
 80257c6:	b169      	cbz	r1, 80257e4 <mg_path_is_sane+0x40>
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 80257c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80257ca:	d001      	beq.n	80257d0 <mg_path_is_sane+0x2c>
 80257cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80257ce:	d1f6      	bne.n	80257be <mg_path_is_sane+0x1a>
 80257d0:	2901      	cmp	r1, #1
 80257d2:	d9f4      	bls.n	80257be <mg_path_is_sane+0x1a>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 80257d4:	7853      	ldrb	r3, [r2, #1]
 80257d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80257d8:	d1f1      	bne.n	80257be <mg_path_is_sane+0x1a>
 80257da:	7893      	ldrb	r3, [r2, #2]
 80257dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80257de:	d1ee      	bne.n	80257be <mg_path_is_sane+0x1a>
 80257e0:	2000      	movs	r0, #0
 80257e2:	e002      	b.n	80257ea <mg_path_is_sane+0x46>
  return true;
 80257e4:	2001      	movs	r0, #1
 80257e6:	e000      	b.n	80257ea <mg_path_is_sane+0x46>
 80257e8:	2001      	movs	r0, #1
}
 80257ea:	b002      	add	sp, #8
 80257ec:	4770      	bx	lr

080257ee <mg_millis>:
uint64_t mg_millis(void) {
 80257ee:	b508      	push	{r3, lr}
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 80257f0:	f7f3 fccc 	bl	801918c <xTaskGetTickCount>
}
 80257f4:	2100      	movs	r1, #0
 80257f6:	bd08      	pop	{r3, pc}

080257f8 <mg_log_prefix>:
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80257f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80257fc:	b092      	sub	sp, #72	@ 0x48
 80257fe:	4605      	mov	r5, r0
 8025800:	460c      	mov	r4, r1
 8025802:	4616      	mov	r6, r2
 8025804:	461f      	mov	r7, r3
  const char *p = strrchr(file, '/');
 8025806:	212f      	movs	r1, #47	@ 0x2f
 8025808:	4620      	mov	r0, r4
 802580a:	f006 fc4b 	bl	802c0a4 <strrchr>
  if (p == NULL) p = strrchr(file, '\\');
 802580e:	4680      	mov	r8, r0
 8025810:	b1a8      	cbz	r0, 802583e <mg_log_prefix+0x46>
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8025812:	f7ff ffec 	bl	80257ee <mg_millis>
 8025816:	f1b8 0f00 	cmp.w	r8, #0
 802581a:	d001      	beq.n	8025820 <mg_log_prefix+0x28>
 802581c:	f108 0401 	add.w	r4, r8, #1
 8025820:	9705      	str	r7, [sp, #20]
 8025822:	9604      	str	r6, [sp, #16]
 8025824:	9403      	str	r4, [sp, #12]
 8025826:	9502      	str	r5, [sp, #8]
 8025828:	9000      	str	r0, [sp, #0]
 802582a:	9101      	str	r1, [sp, #4]
 802582c:	4a0f      	ldr	r2, [pc, #60]	@ (802586c <mg_log_prefix+0x74>)
 802582e:	2129      	movs	r1, #41	@ 0x29
 8025830:	a807      	add	r0, sp, #28
 8025832:	f7fd fa1f 	bl	8022c74 <mg_snprintf>
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8025836:	2827      	cmp	r0, #39	@ 0x27
 8025838:	d90e      	bls.n	8025858 <mg_log_prefix+0x60>
 802583a:	2027      	movs	r0, #39	@ 0x27
 802583c:	e00c      	b.n	8025858 <mg_log_prefix+0x60>
  if (p == NULL) p = strrchr(file, '\\');
 802583e:	215c      	movs	r1, #92	@ 0x5c
 8025840:	4620      	mov	r0, r4
 8025842:	f006 fc2f 	bl	802c0a4 <strrchr>
 8025846:	4680      	mov	r8, r0
 8025848:	e7e3      	b.n	8025812 <mg_log_prefix+0x1a>
  while (n < sizeof(buf)) buf[n++] = ' ';
 802584a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 802584e:	446b      	add	r3, sp
 8025850:	2220      	movs	r2, #32
 8025852:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8025856:	3001      	adds	r0, #1
 8025858:	2828      	cmp	r0, #40	@ 0x28
 802585a:	d9f6      	bls.n	802584a <mg_log_prefix+0x52>
  logs(buf, n - 1);
 802585c:	1e41      	subs	r1, r0, #1
 802585e:	a807      	add	r0, sp, #28
 8025860:	f7fa fbdc 	bl	802001c <logs>
}
 8025864:	b012      	add	sp, #72	@ 0x48
 8025866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802586a:	bf00      	nop
 802586c:	08039d44 	.word	0x08039d44

08025870 <mg_dns_parse>:
bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8025870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025874:	b084      	sub	sp, #16
 8025876:	4605      	mov	r5, r0
 8025878:	460e      	mov	r6, r1
 802587a:	4690      	mov	r8, r2
  memset(dm, 0, sizeof(*dm));
 802587c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8025880:	2100      	movs	r1, #0
 8025882:	4640      	mov	r0, r8
 8025884:	f006 fbb4 	bl	802bff0 <memset>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8025888:	2e0b      	cmp	r6, #11
 802588a:	f240 808b 	bls.w	80259a4 <mg_dns_parse+0x134>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 802588e:	88a8      	ldrh	r0, [r5, #4]
 8025890:	f7ff fcac 	bl	80251ec <mg_ntohs>
 8025894:	2801      	cmp	r0, #1
 8025896:	f200 8089 	bhi.w	80259ac <mg_dns_parse+0x13c>
  num_answers = mg_ntohs(h->num_answers);
 802589a:	88e8      	ldrh	r0, [r5, #6]
 802589c:	f7ff fca6 	bl	80251ec <mg_ntohs>
 80258a0:	4604      	mov	r4, r0
 80258a2:	4681      	mov	r9, r0
  if (num_answers > 10) {
 80258a4:	280a      	cmp	r0, #10
 80258a6:	d905      	bls.n	80258b4 <mg_dns_parse+0x44>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80258a8:	4b43      	ldr	r3, [pc, #268]	@ (80259b8 <mg_dns_parse+0x148>)
 80258aa:	681b      	ldr	r3, [r3, #0]
 80258ac:	2b02      	cmp	r3, #2
 80258ae:	dc1a      	bgt.n	80258e6 <mg_dns_parse+0x76>
    num_answers = 10;  // Sanity cap
 80258b0:	f04f 090a 	mov.w	r9, #10
  dm->txnid = mg_ntohs(h->txnid);
 80258b4:	8828      	ldrh	r0, [r5, #0]
 80258b6:	f7ff fc99 	bl	80251ec <mg_ntohs>
 80258ba:	f8a8 0000 	strh.w	r0, [r8]
  size_t i, n, num_answers, ofs = sizeof(*h);
 80258be:	240c      	movs	r4, #12
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80258c0:	2700      	movs	r7, #0
 80258c2:	88a8      	ldrh	r0, [r5, #4]
 80258c4:	f7ff fc92 	bl	80251ec <mg_ntohs>
 80258c8:	42b8      	cmp	r0, r7
 80258ca:	d91a      	bls.n	8025902 <mg_dns_parse+0x92>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80258cc:	ab02      	add	r3, sp, #8
 80258ce:	9300      	str	r3, [sp, #0]
 80258d0:	2301      	movs	r3, #1
 80258d2:	4622      	mov	r2, r4
 80258d4:	4631      	mov	r1, r6
 80258d6:	4628      	mov	r0, r5
 80258d8:	f7fc fbdf 	bl	802209a <mg_dns_parse_rr>
 80258dc:	2800      	cmp	r0, #0
 80258de:	d067      	beq.n	80259b0 <mg_dns_parse+0x140>
    ofs += n;
 80258e0:	4404      	add	r4, r0
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80258e2:	3701      	adds	r7, #1
 80258e4:	e7ed      	b.n	80258c2 <mg_dns_parse+0x52>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 80258e6:	4b35      	ldr	r3, [pc, #212]	@ (80259bc <mg_dns_parse+0x14c>)
 80258e8:	f240 4293 	movw	r2, #1171	@ 0x493
 80258ec:	4934      	ldr	r1, [pc, #208]	@ (80259c0 <mg_dns_parse+0x150>)
 80258ee:	2003      	movs	r0, #3
 80258f0:	f7ff ff82 	bl	80257f8 <mg_log_prefix>
 80258f4:	4621      	mov	r1, r4
 80258f6:	4833      	ldr	r0, [pc, #204]	@ (80259c4 <mg_dns_parse+0x154>)
 80258f8:	f7fd fe68 	bl	80235cc <mg_log>
    num_answers = 10;  // Sanity cap
 80258fc:	f04f 090a 	mov.w	r9, #10
 8025900:	e7d8      	b.n	80258b4 <mg_dns_parse+0x44>
  for (i = 0; i < num_answers; i++) {
 8025902:	2700      	movs	r7, #0
 8025904:	e013      	b.n	802592e <mg_dns_parse+0xbe>
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8025906:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802590a:	2a01      	cmp	r2, #1
 802590c:	d12a      	bne.n	8025964 <mg_dns_parse+0xf4>
 802590e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8025912:	2a01      	cmp	r2, #1
 8025914:	d126      	bne.n	8025964 <mg_dns_parse+0xf4>
      dm->addr.is_ip6 = false;
 8025916:	2300      	movs	r3, #0
 8025918:	f888 3017 	strb.w	r3, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 802591c:	3c04      	subs	r4, #4
 802591e:	592b      	ldr	r3, [r5, r4]
 8025920:	f8c8 3004 	str.w	r3, [r8, #4]
      dm->resolved = true;
 8025924:	2001      	movs	r0, #1
 8025926:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802592a:	e03c      	b.n	80259a6 <mg_dns_parse+0x136>
  for (i = 0; i < num_answers; i++) {
 802592c:	3701      	adds	r7, #1
 802592e:	454f      	cmp	r7, r9
 8025930:	d236      	bcs.n	80259a0 <mg_dns_parse+0x130>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8025932:	ab02      	add	r3, sp, #8
 8025934:	9300      	str	r3, [sp, #0]
 8025936:	2300      	movs	r3, #0
 8025938:	4622      	mov	r2, r4
 802593a:	4631      	mov	r1, r6
 802593c:	4628      	mov	r0, r5
 802593e:	f7fc fbac 	bl	802209a <mg_dns_parse_rr>
 8025942:	4682      	mov	sl, r0
 8025944:	b3b0      	cbz	r0, 80259b4 <mg_dns_parse+0x144>
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8025946:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802594a:	9300      	str	r3, [sp, #0]
 802594c:	f108 0318 	add.w	r3, r8, #24
 8025950:	4622      	mov	r2, r4
 8025952:	4631      	mov	r1, r6
 8025954:	4628      	mov	r0, r5
 8025956:	f7fb faf7 	bl	8020f48 <mg_dns_parse_name>
    ofs += n;
 802595a:	4454      	add	r4, sl
    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 802595c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8025960:	2b04      	cmp	r3, #4
 8025962:	d0d0      	beq.n	8025906 <mg_dns_parse+0x96>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8025964:	2b10      	cmp	r3, #16
 8025966:	d1e1      	bne.n	802592c <mg_dns_parse+0xbc>
 8025968:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802596c:	2b1c      	cmp	r3, #28
 802596e:	d1dd      	bne.n	802592c <mg_dns_parse+0xbc>
 8025970:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8025974:	2b01      	cmp	r3, #1
 8025976:	d1d9      	bne.n	802592c <mg_dns_parse+0xbc>
      dm->addr.is_ip6 = true;
 8025978:	2001      	movs	r0, #1
 802597a:	f888 0017 	strb.w	r0, [r8, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 802597e:	3c10      	subs	r4, #16
 8025980:	192b      	adds	r3, r5, r4
 8025982:	592c      	ldr	r4, [r5, r4]
 8025984:	6859      	ldr	r1, [r3, #4]
 8025986:	689a      	ldr	r2, [r3, #8]
 8025988:	68db      	ldr	r3, [r3, #12]
 802598a:	f8c8 4004 	str.w	r4, [r8, #4]
 802598e:	f8c8 1008 	str.w	r1, [r8, #8]
 8025992:	f8c8 200c 	str.w	r2, [r8, #12]
 8025996:	f8c8 3010 	str.w	r3, [r8, #16]
      dm->resolved = true;
 802599a:	f888 0002 	strb.w	r0, [r8, #2]
      break;  // Return success
 802599e:	e002      	b.n	80259a6 <mg_dns_parse+0x136>
  return true;
 80259a0:	2001      	movs	r0, #1
 80259a2:	e000      	b.n	80259a6 <mg_dns_parse+0x136>
  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 80259a4:	2000      	movs	r0, #0
}
 80259a6:	b004      	add	sp, #16
 80259a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 80259ac:	2000      	movs	r0, #0
 80259ae:	e7fa      	b.n	80259a6 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80259b0:	2000      	movs	r0, #0
 80259b2:	e7f8      	b.n	80259a6 <mg_dns_parse+0x136>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80259b4:	2000      	movs	r0, #0
 80259b6:	e7f6      	b.n	80259a6 <mg_dns_parse+0x136>
 80259b8:	2000012c 	.word	0x2000012c
 80259bc:	0803a7d0 	.word	0x0803a7d0
 80259c0:	08039d58 	.word	0x08039d58
 80259c4:	08039d88 	.word	0x08039d88

080259c8 <mg_error>:
void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80259c8:	b40e      	push	{r1, r2, r3}
 80259ca:	b510      	push	{r4, lr}
 80259cc:	b093      	sub	sp, #76	@ 0x4c
 80259ce:	4604      	mov	r4, r0
 80259d0:	ab15      	add	r3, sp, #84	@ 0x54
 80259d2:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80259d6:	9301      	str	r3, [sp, #4]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80259d8:	ab01      	add	r3, sp, #4
 80259da:	2140      	movs	r1, #64	@ 0x40
 80259dc:	a802      	add	r0, sp, #8
 80259de:	f7fd fe33 	bl	8023648 <mg_vsnprintf>
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80259e2:	4b11      	ldr	r3, [pc, #68]	@ (8025a28 <mg_error+0x60>)
 80259e4:	681b      	ldr	r3, [r3, #0]
 80259e6:	2b00      	cmp	r3, #0
 80259e8:	dc0f      	bgt.n	8025a0a <mg_error+0x42>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80259ea:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80259ee:	f043 0320 	orr.w	r3, r3, #32
 80259f2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 80259f6:	aa02      	add	r2, sp, #8
 80259f8:	2100      	movs	r1, #0
 80259fa:	4620      	mov	r0, r4
 80259fc:	f7fc fb9c 	bl	8022138 <mg_call>
}
 8025a00:	b013      	add	sp, #76	@ 0x4c
 8025a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025a06:	b003      	add	sp, #12
 8025a08:	4770      	bx	lr
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8025a0a:	4b08      	ldr	r3, [pc, #32]	@ (8025a2c <mg_error+0x64>)
 8025a0c:	f240 5253 	movw	r2, #1363	@ 0x553
 8025a10:	4907      	ldr	r1, [pc, #28]	@ (8025a30 <mg_error+0x68>)
 8025a12:	2001      	movs	r0, #1
 8025a14:	f7ff fef0 	bl	80257f8 <mg_log_prefix>
 8025a18:	ab02      	add	r3, sp, #8
 8025a1a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8025a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025a1e:	4805      	ldr	r0, [pc, #20]	@ (8025a34 <mg_error+0x6c>)
 8025a20:	f7fd fdd4 	bl	80235cc <mg_log>
 8025a24:	e7e1      	b.n	80259ea <mg_error+0x22>
 8025a26:	bf00      	nop
 8025a28:	2000012c 	.word	0x2000012c
 8025a2c:	0803a7ac 	.word	0x0803a7ac
 8025a30:	08039d58 	.word	0x08039d58
 8025a34:	08039db4 	.word	0x08039db4

08025a38 <handle_tls_recv>:
static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 8025a38:	b570      	push	{r4, r5, r6, lr}
 8025a3a:	b082      	sub	sp, #8
 8025a3c:	4606      	mov	r6, r0
 8025a3e:	460c      	mov	r4, r1
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 8025a40:	6809      	ldr	r1, [r1, #0]
 8025a42:	68a5      	ldr	r5, [r4, #8]
 8025a44:	6862      	ldr	r2, [r4, #4]
 8025a46:	1b52      	subs	r2, r2, r5
 8025a48:	4429      	add	r1, r5
 8025a4a:	f7ff fa07 	bl	8024e5c <mg_tls_recv>
 8025a4e:	9001      	str	r0, [sp, #4]
  if (n == MG_IO_ERR) {
 8025a50:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8025a54:	d003      	beq.n	8025a5e <handle_tls_recv+0x26>
  } else if (n > 0) {
 8025a56:	2800      	cmp	r0, #0
 8025a58:	dc06      	bgt.n	8025a68 <handle_tls_recv+0x30>
}
 8025a5a:	b002      	add	sp, #8
 8025a5c:	bd70      	pop	{r4, r5, r6, pc}
    mg_error(c, "TLS recv error");
 8025a5e:	4906      	ldr	r1, [pc, #24]	@ (8025a78 <handle_tls_recv+0x40>)
 8025a60:	4630      	mov	r0, r6
 8025a62:	f7ff ffb1 	bl	80259c8 <mg_error>
 8025a66:	e7f8      	b.n	8025a5a <handle_tls_recv+0x22>
    io->len += (size_t) n;
 8025a68:	4405      	add	r5, r0
 8025a6a:	60a5      	str	r5, [r4, #8]
    mg_call(c, MG_EV_READ, &n);
 8025a6c:	aa01      	add	r2, sp, #4
 8025a6e:	2107      	movs	r1, #7
 8025a70:	4630      	mov	r0, r6
 8025a72:	f7fc fb61 	bl	8022138 <mg_call>
}
 8025a76:	e7f0      	b.n	8025a5a <handle_tls_recv+0x22>
 8025a78:	08039dc0 	.word	0x08039dc0

08025a7c <http_cb>:
static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8025a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a80:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8025a84:	4607      	mov	r7, r0
 8025a86:	468a      	mov	sl, r1
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8025a88:	2907      	cmp	r1, #7
 8025a8a:	f000 80e3 	beq.w	8025c54 <http_cb+0x1d8>
 8025a8e:	2909      	cmp	r1, #9
 8025a90:	f000 814a 	beq.w	8025d28 <http_cb+0x2ac>
 8025a94:	2902      	cmp	r1, #2
 8025a96:	f040 80d9 	bne.w	8025c4c <http_cb+0x1d0>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8025a9a:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8025a9e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8025aa2:	f023 030b 	bic.w	r3, r3, #11
 8025aa6:	04db      	lsls	r3, r3, #19
 8025aa8:	0cdb      	lsrs	r3, r3, #19
 8025aaa:	2b04      	cmp	r3, #4
 8025aac:	f040 80ce 	bne.w	8025c4c <http_cb+0x1d0>
       c->recv.len > 0)) {  // see #2796
 8025ab0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	f000 80ca 	beq.w	8025c4c <http_cb+0x1d0>
 8025ab8:	f04f 0900 	mov.w	r9, #0
 8025abc:	e0cc      	b.n	8025c58 <http_cb+0x1dc>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8025abe:	4b9f      	ldr	r3, [pc, #636]	@ (8025d3c <http_cb+0x2c0>)
 8025ac0:	681b      	ldr	r3, [r3, #0]
 8025ac2:	2b00      	cmp	r3, #0
 8025ac4:	dc11      	bgt.n	8025aea <http_cb+0x6e>
        c->is_draining = 1;
 8025ac6:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8025aca:	f043 0310 	orr.w	r3, r3, #16
 8025ace:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8025ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025ad4:	eba3 0109 	sub.w	r1, r3, r9
 8025ad8:	2910      	cmp	r1, #16
 8025ada:	bf28      	it	cs
 8025adc:	2110      	movcs	r1, #16
 8025ade:	4620      	mov	r0, r4
 8025ae0:	f7fc fed4 	bl	802288c <mg_hexdump>
        c->recv.len = 0;
 8025ae4:	2300      	movs	r3, #0
 8025ae6:	643b      	str	r3, [r7, #64]	@ 0x40
        return;
 8025ae8:	e0b0      	b.n	8025c4c <http_cb+0x1d0>
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8025aea:	4b95      	ldr	r3, [pc, #596]	@ (8025d40 <http_cb+0x2c4>)
 8025aec:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8025af0:	4994      	ldr	r1, [pc, #592]	@ (8025d44 <http_cb+0x2c8>)
 8025af2:	2001      	movs	r0, #1
 8025af4:	f7ff fe80 	bl	80257f8 <mg_log_prefix>
 8025af8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8025afa:	4893      	ldr	r0, [pc, #588]	@ (8025d48 <http_cb+0x2cc>)
 8025afc:	f7fd fd66 	bl	80235cc <mg_log>
 8025b00:	e7e1      	b.n	8025ac6 <http_cb+0x4a>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8025b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025b04:	eba3 0309 	sub.w	r3, r3, r9
 8025b08:	9387      	str	r3, [sp, #540]	@ 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8025b0a:	9a82      	ldr	r2, [sp, #520]	@ 0x208
 8025b0c:	9986      	ldr	r1, [sp, #536]	@ 0x218
 8025b0e:	1a52      	subs	r2, r2, r1
 8025b10:	1a9b      	subs	r3, r3, r2
 8025b12:	9383      	str	r3, [sp, #524]	@ 0x20c
 8025b14:	e0bf      	b.n	8025c96 <http_cb+0x21a>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8025b16:	ad88      	add	r5, sp, #544	@ 0x220
 8025b18:	498c      	ldr	r1, [pc, #560]	@ (8025d4c <http_cb+0x2d0>)
 8025b1a:	4628      	mov	r0, r5
 8025b1c:	f7fd ff34 	bl	8023988 <mg_str_s>
 8025b20:	e895 000c 	ldmia.w	r5, {r2, r3}
 8025b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025b28:	f7fe f829 	bl	8023b7e <mg_strcasecmp>
 8025b2c:	4604      	mov	r4, r0
 8025b2e:	b950      	cbnz	r0, 8025b46 <http_cb+0xca>
        char *s = (char *) c->recv.buf + ofs + n;
 8025b30:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8025b32:	eb08 0309 	add.w	r3, r8, r9
 8025b36:	441d      	add	r5, r3
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8025b38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025b3a:	eba3 0309 	sub.w	r3, r3, r9
 8025b3e:	eba3 0b08 	sub.w	fp, r3, r8
 8025b42:	4606      	mov	r6, r0
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8025b44:	e04a      	b.n	8025bdc <http_cb+0x160>
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8025b46:	4982      	ldr	r1, [pc, #520]	@ (8025d50 <http_cb+0x2d4>)
 8025b48:	4638      	mov	r0, r7
 8025b4a:	f7ff ff3d 	bl	80259c8 <mg_error>
          return;
 8025b4e:	e07d      	b.n	8025c4c <http_cb+0x1d0>
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8025b50:	2205      	movs	r2, #5
 8025b52:	4980      	ldr	r1, [pc, #512]	@ (8025d54 <http_cb+0x2d8>)
 8025b54:	9802      	ldr	r0, [sp, #8]
 8025b56:	f7f9 fcad 	bl	801f4b4 <mg_ncasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8025b5a:	2800      	cmp	r0, #0
 8025b5c:	d032      	beq.n	8025bc4 <http_cb+0x148>
 8025b5e:	ac8a      	add	r4, sp, #552	@ 0x228
 8025b60:	497d      	ldr	r1, [pc, #500]	@ (8025d58 <http_cb+0x2dc>)
 8025b62:	4620      	mov	r0, r4
 8025b64:	f7fd ff10 	bl	8023988 <mg_str_s>
 8025b68:	a902      	add	r1, sp, #8
 8025b6a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025b6e:	c903      	ldmia	r1, {r0, r1}
 8025b70:	f7fe f805 	bl	8023b7e <mg_strcasecmp>
 8025b74:	b9c0      	cbnz	r0, 8025ba8 <http_cb+0x12c>
          ofs += (size_t) n;  // this request has been processed
 8025b76:	44c1      	add	r9, r8
          mg_http_reply(c, 411, "", "");
 8025b78:	4a78      	ldr	r2, [pc, #480]	@ (8025d5c <http_cb+0x2e0>)
 8025b7a:	4613      	mov	r3, r2
 8025b7c:	f240 119b 	movw	r1, #411	@ 0x19b
 8025b80:	4638      	mov	r0, r7
 8025b82:	f7fd fd77 	bl	8023674 <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8025b86:	4b6d      	ldr	r3, [pc, #436]	@ (8025d3c <http_cb+0x2c0>)
 8025b88:	681b      	ldr	r3, [r3, #0]
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	f340 8092 	ble.w	8025cb4 <http_cb+0x238>
 8025b90:	4b6b      	ldr	r3, [pc, #428]	@ (8025d40 <http_cb+0x2c4>)
 8025b92:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8025b96:	496b      	ldr	r1, [pc, #428]	@ (8025d44 <http_cb+0x2c8>)
 8025b98:	2001      	movs	r0, #1
 8025b9a:	f7ff fe2d 	bl	80257f8 <mg_log_prefix>
 8025b9e:	4970      	ldr	r1, [pc, #448]	@ (8025d60 <http_cb+0x2e4>)
 8025ba0:	4870      	ldr	r0, [pc, #448]	@ (8025d64 <http_cb+0x2e8>)
 8025ba2:	f7fd fd13 	bl	80235cc <mg_log>
      if (is_chunked) {
 8025ba6:	e085      	b.n	8025cb4 <http_cb+0x238>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8025ba8:	ac8c      	add	r4, sp, #560	@ 0x230
 8025baa:	496f      	ldr	r1, [pc, #444]	@ (8025d68 <http_cb+0x2ec>)
 8025bac:	4620      	mov	r0, r4
 8025bae:	f7fd feeb 	bl	8023988 <mg_str_s>
 8025bb2:	a902      	add	r1, sp, #8
 8025bb4:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025bb8:	c903      	ldmia	r1, {r0, r1}
 8025bba:	f7fd ffe0 	bl	8023b7e <mg_strcasecmp>
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8025bbe:	2800      	cmp	r0, #0
 8025bc0:	d178      	bne.n	8025cb4 <http_cb+0x238>
 8025bc2:	e7d8      	b.n	8025b76 <http_cb+0xfa>
          int status = mg_http_status(&hm);
 8025bc4:	a802      	add	r0, sp, #8
 8025bc6:	f7fc fba9 	bl	802231c <mg_http_status>
          require_content_len = status >= 200 && status != 204 && status != 304;
 8025bca:	28c7      	cmp	r0, #199	@ 0xc7
 8025bcc:	dd72      	ble.n	8025cb4 <http_cb+0x238>
 8025bce:	28cc      	cmp	r0, #204	@ 0xcc
 8025bd0:	d070      	beq.n	8025cb4 <http_cb+0x238>
 8025bd2:	f5b0 7f98 	cmp.w	r0, #304	@ 0x130
 8025bd6:	d1cf      	bne.n	8025b78 <http_cb+0xfc>
 8025bd8:	e06c      	b.n	8025cb4 <http_cb+0x238>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8025bda:	4406      	add	r6, r0
 8025bdc:	ab01      	add	r3, sp, #4
 8025bde:	466a      	mov	r2, sp
 8025be0:	ebab 0106 	sub.w	r1, fp, r6
 8025be4:	19a8      	adds	r0, r5, r6
 8025be6:	f7fe ff09 	bl	80249fc <skip_chunk>
 8025bea:	2800      	cmp	r0, #0
 8025bec:	dd02      	ble.n	8025bf4 <http_cb+0x178>
 8025bee:	9b01      	ldr	r3, [sp, #4]
 8025bf0:	2b00      	cmp	r3, #0
 8025bf2:	d1f2      	bne.n	8025bda <http_cb+0x15e>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8025bf4:	b338      	cbz	r0, 8025c46 <http_cb+0x1ca>
        if (cl < 0) {
 8025bf6:	2800      	cmp	r0, #0
 8025bf8:	db21      	blt.n	8025c3e <http_cb+0x1c2>
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8025bfa:	2300      	movs	r3, #0
 8025bfc:	9383      	str	r3, [sp, #524]	@ 0x20c
 8025bfe:	f8cd 821c 	str.w	r8, [sp, #540]	@ 0x21c
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8025c02:	ab01      	add	r3, sp, #4
 8025c04:	466a      	mov	r2, sp
 8025c06:	ebab 0104 	sub.w	r1, fp, r4
 8025c0a:	1928      	adds	r0, r5, r4
 8025c0c:	f7fe fef6 	bl	80249fc <skip_chunk>
 8025c10:	1e06      	subs	r6, r0, #0
 8025c12:	dd11      	ble.n	8025c38 <http_cb+0x1bc>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8025c14:	9883      	ldr	r0, [sp, #524]	@ 0x20c
 8025c16:	9900      	ldr	r1, [sp, #0]
 8025c18:	4421      	add	r1, r4
 8025c1a:	9a01      	ldr	r2, [sp, #4]
 8025c1c:	4429      	add	r1, r5
 8025c1e:	4428      	add	r0, r5
 8025c20:	f006 f9cc 	bl	802bfbc <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8025c24:	4434      	add	r4, r6
 8025c26:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8025c28:	9b01      	ldr	r3, [sp, #4]
 8025c2a:	441a      	add	r2, r3
 8025c2c:	9283      	str	r2, [sp, #524]	@ 0x20c
 8025c2e:	9a87      	ldr	r2, [sp, #540]	@ 0x21c
 8025c30:	441a      	add	r2, r3
 8025c32:	9287      	str	r2, [sp, #540]	@ 0x21c
          if (dl == 0) break;
 8025c34:	2b00      	cmp	r3, #0
 8025c36:	d1e4      	bne.n	8025c02 <http_cb+0x186>
        ofs += (size_t) (n + o);
 8025c38:	4444      	add	r4, r8
 8025c3a:	44a1      	add	r9, r4
 8025c3c:	e044      	b.n	8025cc8 <http_cb+0x24c>
          mg_error(c, "Invalid chunk");
 8025c3e:	494b      	ldr	r1, [pc, #300]	@ (8025d6c <http_cb+0x2f0>)
 8025c40:	4638      	mov	r0, r7
 8025c42:	f7ff fec1 	bl	80259c8 <mg_error>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8025c46:	f1b9 0f00 	cmp.w	r9, #0
 8025c4a:	d170      	bne.n	8025d2e <http_cb+0x2b2>
}
 8025c4c:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
 8025c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c54:	f04f 0900 	mov.w	r9, #0
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8025c58:	f997 30ad 	ldrsb.w	r3, [r7, #173]	@ 0xad
 8025c5c:	2b00      	cmp	r3, #0
 8025c5e:	dbf2      	blt.n	8025c46 <http_cb+0x1ca>
 8025c60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8025c62:	4549      	cmp	r1, r9
 8025c64:	d9ef      	bls.n	8025c46 <http_cb+0x1ca>
      const char *buf = (char *) c->recv.buf + ofs;
 8025c66:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8025c68:	444c      	add	r4, r9
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8025c6a:	aa02      	add	r2, sp, #8
 8025c6c:	eba1 0109 	sub.w	r1, r1, r9
 8025c70:	4620      	mov	r0, r4
 8025c72:	f7fd ffb3 	bl	8023bdc <mg_http_parse>
      if (n < 0) {
 8025c76:	f1b0 0800 	subs.w	r8, r0, #0
 8025c7a:	f6ff af20 	blt.w	8025abe <http_cb+0x42>
      if (n == 0) break;                 // Request is not buffered yet
 8025c7e:	f1b8 0f00 	cmp.w	r8, #0
 8025c82:	d0e0      	beq.n	8025c46 <http_cb+0x1ca>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8025c84:	aa02      	add	r2, sp, #8
 8025c86:	210a      	movs	r1, #10
 8025c88:	4638      	mov	r0, r7
 8025c8a:	f7fc fa55 	bl	8022138 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8025c8e:	f1ba 0f09 	cmp.w	sl, #9
 8025c92:	f43f af36 	beq.w	8025b02 <http_cb+0x86>
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8025c96:	4936      	ldr	r1, [pc, #216]	@ (8025d70 <http_cb+0x2f4>)
 8025c98:	a802      	add	r0, sp, #8
 8025c9a:	f7fc fb15 	bl	80222c8 <mg_http_get_header>
 8025c9e:	4604      	mov	r4, r0
 8025ca0:	2800      	cmp	r0, #0
 8025ca2:	f47f af38 	bne.w	8025b16 <http_cb+0x9a>
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8025ca6:	4933      	ldr	r1, [pc, #204]	@ (8025d74 <http_cb+0x2f8>)
 8025ca8:	a802      	add	r0, sp, #8
 8025caa:	f7fc fb0d 	bl	80222c8 <mg_http_get_header>
 8025cae:	2800      	cmp	r0, #0
 8025cb0:	f43f af4e 	beq.w	8025b50 <http_cb+0xd4>
        size_t len = c->recv.len - ofs - (size_t) n;
 8025cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025cb6:	eba3 0309 	sub.w	r3, r3, r9
 8025cba:	eba3 0308 	sub.w	r3, r3, r8
        if (hm.body.len > len) break;  // Buffer more data
 8025cbe:	9a83      	ldr	r2, [sp, #524]	@ 0x20c
 8025cc0:	429a      	cmp	r2, r3
 8025cc2:	d8c0      	bhi.n	8025c46 <http_cb+0x1ca>
        ofs += (size_t) n + hm.body.len;
 8025cc4:	4490      	add	r8, r2
 8025cc6:	44c1      	add	r9, r8
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8025cc8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8025ccc:	f013 0f04 	tst.w	r3, #4
 8025cd0:	d005      	beq.n	8025cde <http_cb+0x262>
 8025cd2:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8025cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025cda:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8025cde:	aa02      	add	r2, sp, #8
 8025ce0:	210b      	movs	r1, #11
 8025ce2:	4638      	mov	r0, r7
 8025ce4:	f7fc fa28 	bl	8022138 <mg_call>
      if (c->is_accepted) {
 8025ce8:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 8025cec:	f013 0f04 	tst.w	r3, #4
 8025cf0:	d0b2      	beq.n	8025c58 <http_cb+0x1dc>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 8025cf2:	4921      	ldr	r1, [pc, #132]	@ (8025d78 <http_cb+0x2fc>)
 8025cf4:	a802      	add	r0, sp, #8
 8025cf6:	f7fc fae7 	bl	80222c8 <mg_http_get_header>
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 8025cfa:	4605      	mov	r5, r0
 8025cfc:	2800      	cmp	r0, #0
 8025cfe:	d0ab      	beq.n	8025c58 <http_cb+0x1dc>
 8025d00:	ac8e      	add	r4, sp, #568	@ 0x238
 8025d02:	491e      	ldr	r1, [pc, #120]	@ (8025d7c <http_cb+0x300>)
 8025d04:	4620      	mov	r0, r4
 8025d06:	f7fd fe3f 	bl	8023988 <mg_str_s>
 8025d0a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8025d0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d12:	f7fd ff34 	bl	8023b7e <mg_strcasecmp>
 8025d16:	2800      	cmp	r0, #0
 8025d18:	d19e      	bne.n	8025c58 <http_cb+0x1dc>
          c->is_draining = 1;  // honor "Connection: close"
 8025d1a:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8025d1e:	f043 0310 	orr.w	r3, r3, #16
 8025d22:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
          break;
 8025d26:	e78e      	b.n	8025c46 <http_cb+0x1ca>
 8025d28:	f04f 0900 	mov.w	r9, #0
 8025d2c:	e794      	b.n	8025c58 <http_cb+0x1dc>
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 8025d2e:	464a      	mov	r2, r9
 8025d30:	2100      	movs	r1, #0
 8025d32:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8025d36:	f7ff f964 	bl	8025002 <mg_iobuf_del>
 8025d3a:	e787      	b.n	8025c4c <http_cb+0x1d0>
 8025d3c:	2000012c 	.word	0x2000012c
 8025d40:	0803a7a4 	.word	0x0803a7a4
 8025d44:	08039d58 	.word	0x08039d58
 8025d48:	08039dd0 	.word	0x08039dd0
 8025d4c:	08039de8 	.word	0x08039de8
 8025d50:	08039df0 	.word	0x08039df0
 8025d54:	08039550 	.word	0x08039550
 8025d58:	08035b24 	.word	0x08035b24
 8025d5c:	0803606c 	.word	0x0803606c
 8025d60:	08039e1c 	.word	0x08039e1c
 8025d64:	0803a070 	.word	0x0803a070
 8025d68:	080366e8 	.word	0x080366e8
 8025d6c:	08039e40 	.word	0x08039e40
 8025d70:	08039df8 	.word	0x08039df8
 8025d74:	08039e0c 	.word	0x08039e0c
 8025d78:	08039e50 	.word	0x08039e50
 8025d7c:	08039e5c 	.word	0x08039e5c

08025d80 <uri_to_path2>:
                        char *path, size_t path_size) {
 8025d80:	b082      	sub	sp, #8
 8025d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025d86:	b086      	sub	sp, #24
 8025d88:	4681      	mov	r9, r0
 8025d8a:	460e      	mov	r6, r1
 8025d8c:	4690      	mov	r8, r2
 8025d8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025d90:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8025d92:	9f14      	ldr	r7, [sp, #80]	@ 0x50
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8025d94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025d96:	9300      	str	r3, [sp, #0]
 8025d98:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025d9a:	4a6f      	ldr	r2, [pc, #444]	@ (8025f58 <uri_to_path2+0x1d8>)
 8025d9c:	4639      	mov	r1, r7
 8025d9e:	4628      	mov	r0, r5
 8025da0:	f7fc ff68 	bl	8022c74 <mg_snprintf>
  if (n + 2 >= path_size) {
 8025da4:	1c83      	adds	r3, r0, #2
 8025da6:	42bb      	cmp	r3, r7
 8025da8:	d227      	bcs.n	8025dfa <uri_to_path2+0x7a>
  path[path_size - 1] = '\0';
 8025daa:	f107 3aff 	add.w	sl, r7, #4294967295	@ 0xffffffff
 8025dae:	2300      	movs	r3, #0
 8025db0:	f805 300a 	strb.w	r3, [r5, sl]
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8025db4:	b150      	cbz	r0, 8025dcc <uri_to_path2+0x4c>
 8025db6:	182b      	adds	r3, r5, r0
 8025db8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8025dbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8025dbe:	d005      	beq.n	8025dcc <uri_to_path2+0x4c>
 8025dc0:	1c43      	adds	r3, r0, #1
 8025dc2:	222f      	movs	r2, #47	@ 0x2f
 8025dc4:	542a      	strb	r2, [r5, r0]
 8025dc6:	2200      	movs	r2, #0
 8025dc8:	54ea      	strb	r2, [r5, r3]
 8025dca:	4618      	mov	r0, r3
  if (url.len < hm->uri.len) {
 8025dcc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025dce:	68f1      	ldr	r1, [r6, #12]
 8025dd0:	428c      	cmp	r4, r1
 8025dd2:	d31c      	bcc.n	8025e0e <uri_to_path2+0x8e>
  path[path_size - 1] = '\0';  // Double-check
 8025dd4:	2300      	movs	r3, #0
 8025dd6:	f805 300a 	strb.w	r3, [r5, sl]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8025dda:	ac02      	add	r4, sp, #8
 8025ddc:	463a      	mov	r2, r7
 8025dde:	4629      	mov	r1, r5
 8025de0:	4620      	mov	r0, r4
 8025de2:	f7fd fddd 	bl	80239a0 <mg_str_n>
 8025de6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025dea:	f7ff fcdb 	bl	80257a4 <mg_path_is_sane>
 8025dee:	b1c0      	cbz	r0, 8025e22 <uri_to_path2+0xa2>
  n = strlen(path);
 8025df0:	4628      	mov	r0, r5
 8025df2:	f7ea fa55 	bl	80102a0 <strlen>
 8025df6:	4604      	mov	r4, r0
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8025df8:	e020      	b.n	8025e3c <uri_to_path2+0xbc>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8025dfa:	4b58      	ldr	r3, [pc, #352]	@ (8025f5c <uri_to_path2+0x1dc>)
 8025dfc:	4a58      	ldr	r2, [pc, #352]	@ (8025f60 <uri_to_path2+0x1e0>)
 8025dfe:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025e02:	4648      	mov	r0, r9
 8025e04:	f7fd fc36 	bl	8023674 <mg_http_reply>
    return -1;
 8025e08:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8025e0c:	e046      	b.n	8025e9c <uri_to_path2+0x11c>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8025e0e:	2300      	movs	r3, #0
 8025e10:	9300      	str	r3, [sp, #0]
 8025e12:	1a3b      	subs	r3, r7, r0
 8025e14:	182a      	adds	r2, r5, r0
 8025e16:	1b09      	subs	r1, r1, r4
 8025e18:	68b0      	ldr	r0, [r6, #8]
 8025e1a:	4420      	add	r0, r4
 8025e1c:	f7fe fc42 	bl	80246a4 <mg_url_decode>
 8025e20:	e7d8      	b.n	8025dd4 <uri_to_path2+0x54>
    mg_http_reply(c, 400, "", "Invalid path");
 8025e22:	4b50      	ldr	r3, [pc, #320]	@ (8025f64 <uri_to_path2+0x1e4>)
 8025e24:	4a4e      	ldr	r2, [pc, #312]	@ (8025f60 <uri_to_path2+0x1e0>)
 8025e26:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025e2a:	4648      	mov	r0, r9
 8025e2c:	f7fd fc22 	bl	8023674 <mg_http_reply>
    return -1;
 8025e30:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8025e34:	e032      	b.n	8025e9c <uri_to_path2+0x11c>
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8025e36:	2200      	movs	r2, #0
 8025e38:	54ea      	strb	r2, [r5, r3]
 8025e3a:	461c      	mov	r4, r3
 8025e3c:	2c01      	cmp	r4, #1
 8025e3e:	d905      	bls.n	8025e4c <uri_to_path2+0xcc>
 8025e40:	1e63      	subs	r3, r4, #1
 8025e42:	f815 c003 	ldrb.w	ip, [r5, r3]
 8025e46:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8025e4a:	d0f4      	beq.n	8025e36 <uri_to_path2+0xb6>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8025e4c:	f10d 0a10 	add.w	sl, sp, #16
 8025e50:	4945      	ldr	r1, [pc, #276]	@ (8025f68 <uri_to_path2+0x1e8>)
 8025e52:	4650      	mov	r0, sl
 8025e54:	f7fd fd98 	bl	8023988 <mg_str_s>
 8025e58:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8025e5c:	f106 0108 	add.w	r1, r6, #8
 8025e60:	c903      	ldmia	r1, {r0, r1}
 8025e62:	f7fd fe62 	bl	8023b2a <mg_strcmp>
                                               : fs->st(path, NULL, NULL);
 8025e66:	b1f8      	cbz	r0, 8025ea8 <uri_to_path2+0x128>
 8025e68:	f8d8 3000 	ldr.w	r3, [r8]
 8025e6c:	2200      	movs	r2, #0
 8025e6e:	4611      	mov	r1, r2
 8025e70:	4628      	mov	r0, r5
 8025e72:	4798      	blx	r3
 8025e74:	4682      	mov	sl, r0
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8025e76:	4b3d      	ldr	r3, [pc, #244]	@ (8025f6c <uri_to_path2+0x1ec>)
 8025e78:	681b      	ldr	r3, [r3, #0]
 8025e7a:	2b03      	cmp	r3, #3
 8025e7c:	dc17      	bgt.n	8025eae <uri_to_path2+0x12e>
  if (flags == 0) {
 8025e7e:	f1ba 0f00 	cmp.w	sl, #0
 8025e82:	d00b      	beq.n	8025e9c <uri_to_path2+0x11c>
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8025e84:	f01a 0104 	ands.w	r1, sl, #4
 8025e88:	d007      	beq.n	8025e9a <uri_to_path2+0x11a>
 8025e8a:	68f2      	ldr	r2, [r6, #12]
 8025e8c:	b12a      	cbz	r2, 8025e9a <uri_to_path2+0x11a>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 8025e8e:	68b3      	ldr	r3, [r6, #8]
 8025e90:	1898      	adds	r0, r3, r2
 8025e92:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 8025e96:	282f      	cmp	r0, #47	@ 0x2f
 8025e98:	d11b      	bne.n	8025ed2 <uri_to_path2+0x152>
  } else if (flags & MG_FS_DIR) {
 8025e9a:	bb39      	cbnz	r1, 8025eec <uri_to_path2+0x16c>
}
 8025e9c:	4650      	mov	r0, sl
 8025e9e:	b006      	add	sp, #24
 8025ea0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025ea4:	b002      	add	sp, #8
 8025ea6:	4770      	bx	lr
                                               : fs->st(path, NULL, NULL);
 8025ea8:	f04f 0a04 	mov.w	sl, #4
 8025eac:	e7e3      	b.n	8025e76 <uri_to_path2+0xf6>
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 8025eae:	4b30      	ldr	r3, [pc, #192]	@ (8025f70 <uri_to_path2+0x1f0>)
 8025eb0:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 8025eb4:	492f      	ldr	r1, [pc, #188]	@ (8025f74 <uri_to_path2+0x1f4>)
 8025eb6:	2004      	movs	r0, #4
 8025eb8:	f7ff fc9e 	bl	80257f8 <mg_log_prefix>
 8025ebc:	f8cd a004 	str.w	sl, [sp, #4]
 8025ec0:	9500      	str	r5, [sp, #0]
 8025ec2:	68b3      	ldr	r3, [r6, #8]
 8025ec4:	68f2      	ldr	r2, [r6, #12]
 8025ec6:	f8d9 1034 	ldr.w	r1, [r9, #52]	@ 0x34
 8025eca:	482b      	ldr	r0, [pc, #172]	@ (8025f78 <uri_to_path2+0x1f8>)
 8025ecc:	f7fd fb7e 	bl	80235cc <mg_log>
 8025ed0:	e7d5      	b.n	8025e7e <uri_to_path2+0xfe>
    mg_printf(c,
 8025ed2:	492a      	ldr	r1, [pc, #168]	@ (8025f7c <uri_to_path2+0x1fc>)
 8025ed4:	4648      	mov	r0, r9
 8025ed6:	f7fd fba7 	bl	8023628 <mg_printf>
    c->is_resp = 0;
 8025eda:	f899 30ad 	ldrb.w	r3, [r9, #173]	@ 0xad
 8025ede:	f36f 13c7 	bfc	r3, #7, #1
 8025ee2:	f889 30ad 	strb.w	r3, [r9, #173]	@ 0xad
    flags = -1;
 8025ee6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8025eea:	e7d7      	b.n	8025e9c <uri_to_path2+0x11c>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8025eec:	192e      	adds	r6, r5, r4
 8025eee:	1b3f      	subs	r7, r7, r4
 8025ef0:	4a23      	ldr	r2, [pc, #140]	@ (8025f80 <uri_to_path2+0x200>)
 8025ef2:	4639      	mov	r1, r7
 8025ef4:	4630      	mov	r0, r6
 8025ef6:	f7fc febd 	bl	8022c74 <mg_snprintf>
 8025efa:	b130      	cbz	r0, 8025f0a <uri_to_path2+0x18a>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8025efc:	f8d8 3000 	ldr.w	r3, [r8]
 8025f00:	2200      	movs	r2, #0
 8025f02:	4611      	mov	r1, r2
 8025f04:	4628      	mov	r0, r5
 8025f06:	4798      	blx	r3
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8025f08:	bb08      	cbnz	r0, 8025f4e <uri_to_path2+0x1ce>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8025f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8025f84 <uri_to_path2+0x204>)
 8025f0c:	4639      	mov	r1, r7
 8025f0e:	4630      	mov	r0, r6
 8025f10:	f7fc feb0 	bl	8022c74 <mg_snprintf>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8025f14:	b130      	cbz	r0, 8025f24 <uri_to_path2+0x1a4>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8025f16:	f8d8 3000 	ldr.w	r3, [r8]
 8025f1a:	2200      	movs	r2, #0
 8025f1c:	4611      	mov	r1, r2
 8025f1e:	4628      	mov	r0, r5
 8025f20:	4798      	blx	r3
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8025f22:	b9b0      	cbnz	r0, 8025f52 <uri_to_path2+0x1d2>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8025f24:	4a18      	ldr	r2, [pc, #96]	@ (8025f88 <uri_to_path2+0x208>)
 8025f26:	4639      	mov	r1, r7
 8025f28:	4630      	mov	r0, r6
 8025f2a:	f7fc fea3 	bl	8022c74 <mg_snprintf>
 8025f2e:	b158      	cbz	r0, 8025f48 <uri_to_path2+0x1c8>
                (tmp = fs->st(path, NULL, NULL)) !=
 8025f30:	f8d8 3000 	ldr.w	r3, [r8]
 8025f34:	2200      	movs	r2, #0
 8025f36:	4611      	mov	r1, r2
 8025f38:	4628      	mov	r0, r5
 8025f3a:	4798      	blx	r3
                    0 &&
 8025f3c:	b120      	cbz	r0, 8025f48 <uri_to_path2+0x1c8>
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8025f3e:	340b      	adds	r4, #11
 8025f40:	2200      	movs	r2, #0
 8025f42:	552a      	strb	r2, [r5, r4]
      flags = tmp;
 8025f44:	4682      	mov	sl, r0
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8025f46:	e7a9      	b.n	8025e9c <uri_to_path2+0x11c>
      path[n] = '\0';  // Remove appended index file name
 8025f48:	2300      	movs	r3, #0
 8025f4a:	7033      	strb	r3, [r6, #0]
 8025f4c:	e7a6      	b.n	8025e9c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8025f4e:	4682      	mov	sl, r0
 8025f50:	e7a4      	b.n	8025e9c <uri_to_path2+0x11c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8025f52:	4682      	mov	sl, r0
 8025f54:	e7a2      	b.n	8025e9c <uri_to_path2+0x11c>
 8025f56:	bf00      	nop
 8025f58:	080394a8 	.word	0x080394a8
 8025f5c:	08039e64 	.word	0x08039e64
 8025f60:	0803606c 	.word	0x0803606c
 8025f64:	08039e78 	.word	0x08039e78
 8025f68:	08039554 	.word	0x08039554
 8025f6c:	2000012c 	.word	0x2000012c
 8025f70:	0803a794 	.word	0x0803a794
 8025f74:	08039d58 	.word	0x08039d58
 8025f78:	08039e88 	.word	0x08039e88
 8025f7c:	08039e9c 	.word	0x08039e9c
 8025f80:	08039ed8 	.word	0x08039ed8
 8025f84:	08039ee4 	.word	0x08039ee4
 8025f88:	08039ef4 	.word	0x08039ef4

08025f8c <uri_to_path>:
                       size_t path_size) {
 8025f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025f90:	b096      	sub	sp, #88	@ 0x58
 8025f92:	4606      	mov	r6, r0
 8025f94:	460d      	mov	r5, r1
 8025f96:	461f      	mov	r7, r3
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8025f98:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8025f9c:	f1b8 0f00 	cmp.w	r8, #0
 8025fa0:	d069      	beq.n	8026076 <uri_to_path+0xea>
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8025fa2:	6811      	ldr	r1, [r2, #0]
 8025fa4:	a80c      	add	r0, sp, #48	@ 0x30
 8025fa6:	f7fd fcef 	bl	8023988 <mg_str_s>
 8025faa:	2300      	movs	r3, #0
 8025fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8025fae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025fb0:	ab08      	add	r3, sp, #32
 8025fb2:	aa0a      	add	r2, sp, #40	@ 0x28
 8025fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025fb8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 8025fbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8025fbe:	222c      	movs	r2, #44	@ 0x2c
 8025fc0:	9200      	str	r2, [sp, #0]
 8025fc2:	aa0e      	add	r2, sp, #56	@ 0x38
 8025fc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8025fc8:	f7fd ff9b 	bl	8023f02 <mg_span>
 8025fcc:	2800      	cmp	r0, #0
 8025fce:	d055      	beq.n	802607c <uri_to_path+0xf0>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 8025fd0:	233d      	movs	r3, #61	@ 0x3d
 8025fd2:	9300      	str	r3, [sp, #0]
 8025fd4:	ab10      	add	r3, sp, #64	@ 0x40
 8025fd6:	aa12      	add	r2, sp, #72	@ 0x48
 8025fd8:	ac0e      	add	r4, sp, #56	@ 0x38
 8025fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025fde:	f7fd ff90 	bl	8023f02 <mg_span>
 8025fe2:	b978      	cbnz	r0, 8026004 <uri_to_path+0x78>
 8025fe4:	ab12      	add	r3, sp, #72	@ 0x48
 8025fe6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8025fea:	e883 0003 	stmia.w	r3, {r0, r1}
 8025fee:	ac06      	add	r4, sp, #24
 8025ff0:	2200      	movs	r2, #0
 8025ff2:	4611      	mov	r1, r2
 8025ff4:	4620      	mov	r0, r4
 8025ff6:	f7fd fcd3 	bl	80239a0 <mg_str_n>
 8025ffa:	ab10      	add	r3, sp, #64	@ 0x40
 8025ffc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026000:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 8026004:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026006:	b9c3      	cbnz	r3, 802603a <uri_to_path+0xae>
 8026008:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 802600c:	ac12      	add	r4, sp, #72	@ 0x48
 802600e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8026012:	e889 0003 	stmia.w	r9, {r0, r1}
 8026016:	f10d 0a18 	add.w	sl, sp, #24
 802601a:	4922      	ldr	r1, [pc, #136]	@ (80260a4 <uri_to_path+0x118>)
 802601c:	4650      	mov	r0, sl
 802601e:	f7fd fcb3 	bl	8023988 <mg_str_s>
 8026022:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8026026:	e884 0003 	stmia.w	r4, {r0, r1}
 802602a:	ab0a      	add	r3, sp, #40	@ 0x28
 802602c:	e883 0003 	stmia.w	r3, {r0, r1}
 8026030:	ab08      	add	r3, sp, #32
 8026032:	e899 0003 	ldmia.w	r9, {r0, r1}
 8026036:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 802603a:	68eb      	ldr	r3, [r5, #12]
 802603c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802603e:	4293      	cmp	r3, r2
 8026040:	d3bc      	bcc.n	8025fbc <uri_to_path+0x30>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 8026042:	ac14      	add	r4, sp, #80	@ 0x50
 8026044:	68a9      	ldr	r1, [r5, #8]
 8026046:	4620      	mov	r0, r4
 8026048:	f7fd fcaa 	bl	80239a0 <mg_str_n>
 802604c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8026050:	a912      	add	r1, sp, #72	@ 0x48
 8026052:	c903      	ldmia	r1, {r0, r1}
 8026054:	f7fd fd69 	bl	8023b2a <mg_strcmp>
 8026058:	2800      	cmp	r0, #0
 802605a:	d1af      	bne.n	8025fbc <uri_to_path+0x30>
    u = k, p = v;
 802605c:	ab0a      	add	r3, sp, #40	@ 0x28
 802605e:	aa12      	add	r2, sp, #72	@ 0x48
 8026060:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026064:	e883 0003 	stmia.w	r3, {r0, r1}
 8026068:	ab08      	add	r3, sp, #32
 802606a:	aa10      	add	r2, sp, #64	@ 0x40
 802606c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026070:	e883 0003 	stmia.w	r3, {r0, r1}
 8026074:	e7a2      	b.n	8025fbc <uri_to_path+0x30>
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8026076:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 80260a8 <uri_to_path+0x11c>
 802607a:	e792      	b.n	8025fa2 <uri_to_path+0x16>
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 802607c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802607e:	9304      	str	r3, [sp, #16]
 8026080:	9703      	str	r7, [sp, #12]
 8026082:	ab01      	add	r3, sp, #4
 8026084:	aa08      	add	r2, sp, #32
 8026086:	e892 0003 	ldmia.w	r2, {r0, r1}
 802608a:	e883 0003 	stmia.w	r3, {r0, r1}
 802608e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026090:	9300      	str	r3, [sp, #0]
 8026092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026094:	4642      	mov	r2, r8
 8026096:	4629      	mov	r1, r5
 8026098:	4630      	mov	r0, r6
 802609a:	f7ff fe71 	bl	8025d80 <uri_to_path2>
}
 802609e:	b016      	add	sp, #88	@ 0x58
 80260a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80260a4:	08039554 	.word	0x08039554
 80260a8:	20000130 	.word	0x20000130

080260ac <mg_http_serve_dir>:
                       const struct mg_http_serve_opts *opts) {
 80260ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80260b0:	b0a7      	sub	sp, #156	@ 0x9c
 80260b2:	4607      	mov	r7, r0
 80260b4:	460e      	mov	r6, r1
 80260b6:	4615      	mov	r5, r2
  const char *sp = opts->ssi_pattern;
 80260b8:	f8d2 8004 	ldr.w	r8, [r2, #4]
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 80260bc:	2380      	movs	r3, #128	@ 0x80
 80260be:	9300      	str	r3, [sp, #0]
 80260c0:	ab02      	add	r3, sp, #8
 80260c2:	f7ff ff63 	bl	8025f8c <uri_to_path>
  if (flags < 0) {
 80260c6:	2800      	cmp	r0, #0
 80260c8:	db20      	blt.n	802610c <mg_http_serve_dir+0x60>
  } else if (flags & MG_FS_DIR) {
 80260ca:	f010 0f04 	tst.w	r0, #4
 80260ce:	d120      	bne.n	8026112 <mg_http_serve_dir+0x66>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 80260d0:	b1b0      	cbz	r0, 8026100 <mg_http_serve_dir+0x54>
 80260d2:	f1b8 0f00 	cmp.w	r8, #0
 80260d6:	d013      	beq.n	8026100 <mg_http_serve_dir+0x54>
 80260d8:	ac22      	add	r4, sp, #136	@ 0x88
 80260da:	a902      	add	r1, sp, #8
 80260dc:	4620      	mov	r0, r4
 80260de:	f7fd fc53 	bl	8023988 <mg_str_s>
 80260e2:	f10d 0990 	add.w	r9, sp, #144	@ 0x90
 80260e6:	4641      	mov	r1, r8
 80260e8:	4648      	mov	r0, r9
 80260ea:	f7fd fc4d 	bl	8023988 <mg_str_s>
 80260ee:	2300      	movs	r3, #0
 80260f0:	9300      	str	r3, [sp, #0]
 80260f2:	e899 000c 	ldmia.w	r9, {r2, r3}
 80260f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80260fa:	f7fd fe67 	bl	8023dcc <mg_match>
 80260fe:	b978      	cbnz	r0, 8026120 <mg_http_serve_dir+0x74>
    mg_http_serve_file(c, hm, path, opts);
 8026100:	462b      	mov	r3, r5
 8026102:	aa02      	add	r2, sp, #8
 8026104:	4631      	mov	r1, r6
 8026106:	4638      	mov	r0, r7
 8026108:	f7fe f81c 	bl	8024144 <mg_http_serve_file>
}
 802610c:	b027      	add	sp, #156	@ 0x9c
 802610e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    listdir(c, hm, opts, path);
 8026112:	ab02      	add	r3, sp, #8
 8026114:	462a      	mov	r2, r5
 8026116:	4631      	mov	r1, r6
 8026118:	4638      	mov	r0, r7
 802611a:	f7fe fbef 	bl	80248fc <listdir>
 802611e:	e7f5      	b.n	802610c <mg_http_serve_dir+0x60>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8026120:	aa02      	add	r2, sp, #8
 8026122:	6829      	ldr	r1, [r5, #0]
 8026124:	4638      	mov	r0, r7
 8026126:	f7fd fc25 	bl	8023974 <mg_http_serve_ssi>
 802612a:	e7ef      	b.n	802610c <mg_http_serve_dir+0x60>

0802612c <printdirentry>:
static void printdirentry(const char *name, void *userdata) {
 802612c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802612e:	b0c3      	sub	sp, #268	@ 0x10c
 8026130:	4605      	mov	r5, r0
 8026132:	460c      	mov	r4, r1
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8026134:	688b      	ldr	r3, [r1, #8]
 8026136:	695e      	ldr	r6, [r3, #20]
 8026138:	b1b6      	cbz	r6, 8026168 <printdirentry+0x3c>
  size_t size = 0;
 802613a:	2300      	movs	r3, #0
 802613c:	9341      	str	r3, [sp, #260]	@ 0x104
  time_t t = 0;
 802613e:	2200      	movs	r2, #0
 8026140:	2300      	movs	r3, #0
 8026142:	e9cd 233e 	strd	r2, r3, [sp, #248]	@ 0xf8
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8026146:	9501      	str	r5, [sp, #4]
 8026148:	232f      	movs	r3, #47	@ 0x2f
 802614a:	9300      	str	r3, [sp, #0]
 802614c:	68e3      	ldr	r3, [r4, #12]
 802614e:	4a3c      	ldr	r2, [pc, #240]	@ (8026240 <printdirentry+0x114>)
 8026150:	2180      	movs	r1, #128	@ 0x80
 8026152:	a81e      	add	r0, sp, #120	@ 0x78
 8026154:	f7fc fd8e 	bl	8022c74 <mg_snprintf>
 8026158:	2880      	cmp	r0, #128	@ 0x80
 802615a:	d913      	bls.n	8026184 <printdirentry+0x58>
    MG_ERROR(("%s truncated", name));
 802615c:	4b39      	ldr	r3, [pc, #228]	@ (8026244 <printdirentry+0x118>)
 802615e:	681b      	ldr	r3, [r3, #0]
 8026160:	2b00      	cmp	r3, #0
 8026162:	dc03      	bgt.n	802616c <printdirentry+0x40>
}
 8026164:	b043      	add	sp, #268	@ 0x10c
 8026166:	bdf0      	pop	{r4, r5, r6, r7, pc}
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8026168:	4e37      	ldr	r6, [pc, #220]	@ (8026248 <printdirentry+0x11c>)
 802616a:	e7e6      	b.n	802613a <printdirentry+0xe>
    MG_ERROR(("%s truncated", name));
 802616c:	4b37      	ldr	r3, [pc, #220]	@ (802624c <printdirentry+0x120>)
 802616e:	f640 3248 	movw	r2, #2888	@ 0xb48
 8026172:	4937      	ldr	r1, [pc, #220]	@ (8026250 <printdirentry+0x124>)
 8026174:	2001      	movs	r0, #1
 8026176:	f7ff fb3f 	bl	80257f8 <mg_log_prefix>
 802617a:	4629      	mov	r1, r5
 802617c:	4835      	ldr	r0, [pc, #212]	@ (8026254 <printdirentry+0x128>)
 802617e:	f7fd fa25 	bl	80235cc <mg_log>
 8026182:	e7ef      	b.n	8026164 <printdirentry+0x38>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8026184:	6833      	ldr	r3, [r6, #0]
 8026186:	aa3e      	add	r2, sp, #248	@ 0xf8
 8026188:	a941      	add	r1, sp, #260	@ 0x104
 802618a:	a81e      	add	r0, sp, #120	@ 0x78
 802618c:	4798      	blx	r3
 802618e:	b9a8      	cbnz	r0, 80261bc <printdirentry+0x90>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8026190:	4b2c      	ldr	r3, [pc, #176]	@ (8026244 <printdirentry+0x118>)
 8026192:	681b      	ldr	r3, [r3, #0]
 8026194:	2b00      	cmp	r3, #0
 8026196:	dde5      	ble.n	8026164 <printdirentry+0x38>
 8026198:	4b2c      	ldr	r3, [pc, #176]	@ (802624c <printdirentry+0x120>)
 802619a:	f640 324a 	movw	r2, #2890	@ 0xb4a
 802619e:	492c      	ldr	r1, [pc, #176]	@ (8026250 <printdirentry+0x124>)
 80261a0:	2001      	movs	r0, #1
 80261a2:	f7ff fb29 	bl	80257f8 <mg_log_prefix>
 80261a6:	6823      	ldr	r3, [r4, #0]
 80261a8:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80261aa:	f007 f925 	bl	802d3f8 <__errno>
 80261ae:	6803      	ldr	r3, [r0, #0]
 80261b0:	aa1e      	add	r2, sp, #120	@ 0x78
 80261b2:	4621      	mov	r1, r4
 80261b4:	4828      	ldr	r0, [pc, #160]	@ (8026258 <printdirentry+0x12c>)
 80261b6:	f7fd fa09 	bl	80235cc <mg_log>
 80261ba:	e7d3      	b.n	8026164 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 80261bc:	f010 0604 	ands.w	r6, r0, #4
 80261c0:	d02d      	beq.n	802621e <printdirentry+0xf2>
 80261c2:	4f26      	ldr	r7, [pc, #152]	@ (802625c <printdirentry+0x130>)
    if (flags & MG_FS_DIR) {
 80261c4:	2e00      	cmp	r6, #0
 80261c6:	d02c      	beq.n	8026222 <printdirentry+0xf6>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 80261c8:	4b25      	ldr	r3, [pc, #148]	@ (8026260 <printdirentry+0x134>)
 80261ca:	4a26      	ldr	r2, [pc, #152]	@ (8026264 <printdirentry+0x138>)
 80261cc:	2128      	movs	r1, #40	@ 0x28
 80261ce:	a814      	add	r0, sp, #80	@ 0x50
 80261d0:	f7fc fd50 	bl	8022c74 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 80261d4:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 80261d6:	4a24      	ldr	r2, [pc, #144]	@ (8026268 <printdirentry+0x13c>)
 80261d8:	2128      	movs	r1, #40	@ 0x28
 80261da:	eb0d 0001 	add.w	r0, sp, r1
 80261de:	f7fc fd49 	bl	8022c74 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 80261e2:	4628      	mov	r0, r5
 80261e4:	f7ea f85c 	bl	80102a0 <strlen>
 80261e8:	4601      	mov	r1, r0
 80261ea:	2380      	movs	r3, #128	@ 0x80
 80261ec:	aa1e      	add	r2, sp, #120	@ 0x78
 80261ee:	4628      	mov	r0, r5
 80261f0:	f7fd fa94 	bl	802371c <mg_url_encode>
 80261f4:	4602      	mov	r2, r0
    mg_printf(d->c,
 80261f6:	6820      	ldr	r0, [r4, #0]
 80261f8:	993e      	ldr	r1, [sp, #248]	@ 0xf8
 80261fa:	b9e6      	cbnz	r6, 8026236 <printdirentry+0x10a>
 80261fc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80261fe:	2400      	movs	r4, #0
 8026200:	ae14      	add	r6, sp, #80	@ 0x50
 8026202:	9608      	str	r6, [sp, #32]
 8026204:	9306      	str	r3, [sp, #24]
 8026206:	9407      	str	r4, [sp, #28]
 8026208:	ab0a      	add	r3, sp, #40	@ 0x28
 802620a:	9304      	str	r3, [sp, #16]
 802620c:	9103      	str	r1, [sp, #12]
 802620e:	9702      	str	r7, [sp, #8]
 8026210:	9501      	str	r5, [sp, #4]
 8026212:	9700      	str	r7, [sp, #0]
 8026214:	ab1e      	add	r3, sp, #120	@ 0x78
 8026216:	4915      	ldr	r1, [pc, #84]	@ (802626c <printdirentry+0x140>)
 8026218:	f7fd fa06 	bl	8023628 <mg_printf>
}
 802621c:	e7a2      	b.n	8026164 <printdirentry+0x38>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 802621e:	4f14      	ldr	r7, [pc, #80]	@ (8026270 <printdirentry+0x144>)
 8026220:	e7d0      	b.n	80261c4 <printdirentry+0x98>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8026222:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8026224:	9300      	str	r3, [sp, #0]
 8026226:	2300      	movs	r3, #0
 8026228:	9301      	str	r3, [sp, #4]
 802622a:	4a12      	ldr	r2, [pc, #72]	@ (8026274 <printdirentry+0x148>)
 802622c:	2128      	movs	r1, #40	@ 0x28
 802622e:	a814      	add	r0, sp, #80	@ 0x50
 8026230:	f7fc fd20 	bl	8022c74 <mg_snprintf>
 8026234:	e7ce      	b.n	80261d4 <printdirentry+0xa8>
    mg_printf(d->c,
 8026236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802623a:	461c      	mov	r4, r3
 802623c:	e7e0      	b.n	8026200 <printdirentry+0xd4>
 802623e:	bf00      	nop
 8026240:	08039f04 	.word	0x08039f04
 8026244:	2000012c 	.word	0x2000012c
 8026248:	20000130 	.word	0x20000130
 802624c:	0803a784 	.word	0x0803a784
 8026250:	08039d58 	.word	0x08039d58
 8026254:	08039f0c 	.word	0x08039f0c
 8026258:	08039f1c 	.word	0x08039f1c
 802625c:	08039554 	.word	0x08039554
 8026260:	08039f30 	.word	0x08039f30
 8026264:	0803a070 	.word	0x0803a070
 8026268:	0803a320 	.word	0x0803a320
 802626c:	08039f40 	.word	0x08039f40
 8026270:	0803606c 	.word	0x0803606c
 8026274:	08039f38 	.word	0x08039f38

08026278 <mg_http_upload>:
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8026278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802627c:	b0ca      	sub	sp, #296	@ 0x128
 802627e:	4607      	mov	r7, r0
 8026280:	460d      	mov	r5, r1
 8026282:	4616      	mov	r6, r2
 8026284:	4698      	mov	r8, r3
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8026286:	2330      	movs	r3, #48	@ 0x30
 8026288:	9343      	str	r3, [sp, #268]	@ 0x10c
 802628a:	2400      	movs	r4, #0
 802628c:	9444      	str	r4, [sp, #272]	@ 0x110
 802628e:	9445      	str	r4, [sp, #276]	@ 0x114
 8026290:	9446      	str	r4, [sp, #280]	@ 0x118
 8026292:	9447      	str	r4, [sp, #284]	@ 0x11c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 8026294:	f101 0a10 	add.w	sl, r1, #16
 8026298:	2314      	movs	r3, #20
 802629a:	aa43      	add	r2, sp, #268	@ 0x10c
 802629c:	4964      	ldr	r1, [pc, #400]	@ (8026430 <mg_http_upload+0x1b8>)
 802629e:	4650      	mov	r0, sl
 80262a0:	f7fe fa5f 	bl	8024762 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80262a4:	f10d 098c 	add.w	r9, sp, #140	@ 0x8c
 80262a8:	2380      	movs	r3, #128	@ 0x80
 80262aa:	464a      	mov	r2, r9
 80262ac:	4961      	ldr	r1, [pc, #388]	@ (8026434 <mg_http_upload+0x1bc>)
 80262ae:	4650      	mov	r0, sl
 80262b0:	f7fe fa57 	bl	8024762 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 80262b4:	4622      	mov	r2, r4
 80262b6:	4621      	mov	r1, r4
 80262b8:	a843      	add	r0, sp, #268	@ 0x10c
 80262ba:	f005 fa1f 	bl	802b6fc <strtol>
 80262be:	4604      	mov	r4, r0
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 80262c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80262c4:	232f      	movs	r3, #47	@ 0x2f
 80262c6:	9300      	str	r3, [sp, #0]
 80262c8:	4643      	mov	r3, r8
 80262ca:	4a5b      	ldr	r2, [pc, #364]	@ (8026438 <mg_http_upload+0x1c0>)
 80262cc:	2180      	movs	r1, #128	@ 0x80
 80262ce:	a803      	add	r0, sp, #12
 80262d0:	f7fc fcd0 	bl	8022c74 <mg_snprintf>
  if (hm->body.len == 0) {
 80262d4:	f8d5 8204 	ldr.w	r8, [r5, #516]	@ 0x204
 80262d8:	f1b8 0f00 	cmp.w	r8, #0
 80262dc:	d047      	beq.n	802636e <mg_http_upload+0xf6>
  } else if (file[0] == '\0') {
 80262de:	f89d 308c 	ldrb.w	r3, [sp, #140]	@ 0x8c
 80262e2:	2b00      	cmp	r3, #0
 80262e4:	d04c      	beq.n	8026380 <mg_http_upload+0x108>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 80262e6:	f50d 7990 	add.w	r9, sp, #288	@ 0x120
 80262ea:	a923      	add	r1, sp, #140	@ 0x8c
 80262ec:	4648      	mov	r0, r9
 80262ee:	f7fd fb4b 	bl	8023988 <mg_str_s>
 80262f2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80262f6:	f7ff fa55 	bl	80257a4 <mg_path_is_sane>
 80262fa:	2800      	cmp	r0, #0
 80262fc:	d04a      	beq.n	8026394 <mg_http_upload+0x11c>
  } else if (offset < 0) {
 80262fe:	2c00      	cmp	r4, #0
 8026300:	db54      	blt.n	80263ac <mg_http_upload+0x134>
  } else if ((size_t) offset + hm->body.len > max_size) {
 8026302:	44a0      	add	r8, r4
 8026304:	9b52      	ldr	r3, [sp, #328]	@ 0x148
 8026306:	4598      	cmp	r8, r3
 8026308:	d85a      	bhi.n	80263c0 <mg_http_upload+0x148>
    size_t current_size = 0;
 802630a:	2300      	movs	r3, #0
 802630c:	9302      	str	r3, [sp, #8]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 802630e:	4b4b      	ldr	r3, [pc, #300]	@ (802643c <mg_http_upload+0x1c4>)
 8026310:	681b      	ldr	r3, [r3, #0]
 8026312:	2b02      	cmp	r3, #2
 8026314:	dc61      	bgt.n	80263da <mg_http_upload+0x162>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8026316:	b914      	cbnz	r4, 802631e <mg_http_upload+0xa6>
 8026318:	6a33      	ldr	r3, [r6, #32]
 802631a:	a803      	add	r0, sp, #12
 802631c:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 802631e:	6833      	ldr	r3, [r6, #0]
 8026320:	2200      	movs	r2, #0
 8026322:	a902      	add	r1, sp, #8
 8026324:	a803      	add	r0, sp, #12
 8026326:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8026328:	2c00      	cmp	r4, #0
 802632a:	dd02      	ble.n	8026332 <mg_http_upload+0xba>
 802632c:	9b02      	ldr	r3, [sp, #8]
 802632e:	429c      	cmp	r4, r3
 8026330:	d162      	bne.n	80263f8 <mg_http_upload+0x180>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 8026332:	2202      	movs	r2, #2
 8026334:	a903      	add	r1, sp, #12
 8026336:	4630      	mov	r0, r6
 8026338:	f7fb ff0d 	bl	8022156 <mg_fs_open>
 802633c:	4680      	mov	r8, r0
 802633e:	2800      	cmp	r0, #0
 8026340:	d066      	beq.n	8026410 <mg_http_upload+0x198>
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8026342:	6973      	ldr	r3, [r6, #20]
 8026344:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8026348:	f8d5 1200 	ldr.w	r1, [r5, #512]	@ 0x200
 802634c:	6800      	ldr	r0, [r0, #0]
 802634e:	4798      	blx	r3
 8026350:	4404      	add	r4, r0
      mg_fs_close(fd);
 8026352:	4640      	mov	r0, r8
 8026354:	f7fb ff18 	bl	8022188 <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 8026358:	9400      	str	r4, [sp, #0]
 802635a:	4b39      	ldr	r3, [pc, #228]	@ (8026440 <mg_http_upload+0x1c8>)
 802635c:	4a39      	ldr	r2, [pc, #228]	@ (8026444 <mg_http_upload+0x1cc>)
 802635e:	21c8      	movs	r1, #200	@ 0xc8
 8026360:	4638      	mov	r0, r7
 8026362:	f7fd f987 	bl	8023674 <mg_http_reply>
}
 8026366:	4620      	mov	r0, r4
 8026368:	b04a      	add	sp, #296	@ 0x128
 802636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 802636e:	2400      	movs	r4, #0
 8026370:	9400      	str	r4, [sp, #0]
 8026372:	4b33      	ldr	r3, [pc, #204]	@ (8026440 <mg_http_upload+0x1c8>)
 8026374:	4a33      	ldr	r2, [pc, #204]	@ (8026444 <mg_http_upload+0x1cc>)
 8026376:	21c8      	movs	r1, #200	@ 0xc8
 8026378:	4638      	mov	r0, r7
 802637a:	f7fd f97b 	bl	8023674 <mg_http_reply>
 802637e:	e7f2      	b.n	8026366 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "file required");
 8026380:	4b31      	ldr	r3, [pc, #196]	@ (8026448 <mg_http_upload+0x1d0>)
 8026382:	4a32      	ldr	r2, [pc, #200]	@ (802644c <mg_http_upload+0x1d4>)
 8026384:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026388:	4638      	mov	r0, r7
 802638a:	f7fd f973 	bl	8023674 <mg_http_reply>
    res = -1;
 802638e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8026392:	e7e8      	b.n	8026366 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8026394:	ab23      	add	r3, sp, #140	@ 0x8c
 8026396:	9300      	str	r3, [sp, #0]
 8026398:	4b2d      	ldr	r3, [pc, #180]	@ (8026450 <mg_http_upload+0x1d8>)
 802639a:	4a2c      	ldr	r2, [pc, #176]	@ (802644c <mg_http_upload+0x1d4>)
 802639c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80263a0:	4638      	mov	r0, r7
 80263a2:	f7fd f967 	bl	8023674 <mg_http_reply>
    res = -2;
 80263a6:	f06f 0401 	mvn.w	r4, #1
 80263aa:	e7dc      	b.n	8026366 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "offset required");
 80263ac:	4b29      	ldr	r3, [pc, #164]	@ (8026454 <mg_http_upload+0x1dc>)
 80263ae:	4a27      	ldr	r2, [pc, #156]	@ (802644c <mg_http_upload+0x1d4>)
 80263b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80263b4:	4638      	mov	r0, r7
 80263b6:	f7fd f95d 	bl	8023674 <mg_http_reply>
    res = -3;
 80263ba:	f06f 0402 	mvn.w	r4, #2
 80263be:	e7d2      	b.n	8026366 <mg_http_upload+0xee>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 80263c0:	9301      	str	r3, [sp, #4]
 80263c2:	ab03      	add	r3, sp, #12
 80263c4:	9300      	str	r3, [sp, #0]
 80263c6:	4b24      	ldr	r3, [pc, #144]	@ (8026458 <mg_http_upload+0x1e0>)
 80263c8:	4a20      	ldr	r2, [pc, #128]	@ (802644c <mg_http_upload+0x1d4>)
 80263ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80263ce:	4638      	mov	r0, r7
 80263d0:	f7fd f950 	bl	8023674 <mg_http_reply>
    res = -4;
 80263d4:	f06f 0403 	mvn.w	r4, #3
 80263d8:	e7c5      	b.n	8026366 <mg_http_upload+0xee>
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 80263da:	4b20      	ldr	r3, [pc, #128]	@ (802645c <mg_http_upload+0x1e4>)
 80263dc:	f640 426a 	movw	r2, #3178	@ 0xc6a
 80263e0:	491f      	ldr	r1, [pc, #124]	@ (8026460 <mg_http_upload+0x1e8>)
 80263e2:	2003      	movs	r0, #3
 80263e4:	f7ff fa08 	bl	80257f8 <mg_log_prefix>
 80263e8:	4623      	mov	r3, r4
 80263ea:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80263ee:	a903      	add	r1, sp, #12
 80263f0:	481c      	ldr	r0, [pc, #112]	@ (8026464 <mg_http_upload+0x1ec>)
 80263f2:	f7fd f8eb 	bl	80235cc <mg_log>
 80263f6:	e78e      	b.n	8026316 <mg_http_upload+0x9e>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 80263f8:	ab03      	add	r3, sp, #12
 80263fa:	9300      	str	r3, [sp, #0]
 80263fc:	4b1a      	ldr	r3, [pc, #104]	@ (8026468 <mg_http_upload+0x1f0>)
 80263fe:	4a13      	ldr	r2, [pc, #76]	@ (802644c <mg_http_upload+0x1d4>)
 8026400:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026404:	4638      	mov	r0, r7
 8026406:	f7fd f935 	bl	8023674 <mg_http_reply>
      res = -5;
 802640a:	f06f 0404 	mvn.w	r4, #4
 802640e:	e7aa      	b.n	8026366 <mg_http_upload+0xee>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 8026410:	f006 fff2 	bl	802d3f8 <__errno>
 8026414:	6803      	ldr	r3, [r0, #0]
 8026416:	9301      	str	r3, [sp, #4]
 8026418:	ab03      	add	r3, sp, #12
 802641a:	9300      	str	r3, [sp, #0]
 802641c:	4b13      	ldr	r3, [pc, #76]	@ (802646c <mg_http_upload+0x1f4>)
 802641e:	4a0b      	ldr	r2, [pc, #44]	@ (802644c <mg_http_upload+0x1d4>)
 8026420:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026424:	4638      	mov	r0, r7
 8026426:	f7fd f925 	bl	8023674 <mg_http_reply>
      res = -6;
 802642a:	f06f 0405 	mvn.w	r4, #5
 802642e:	e79a      	b.n	8026366 <mg_http_upload+0xee>
 8026430:	08039f98 	.word	0x08039f98
 8026434:	08039fc0 	.word	0x08039fc0
 8026438:	08039f04 	.word	0x08039f04
 802643c:	2000012c 	.word	0x2000012c
 8026440:	08039fa0 	.word	0x08039fa0
 8026444:	08035b68 	.word	0x08035b68
 8026448:	08039fa4 	.word	0x08039fa4
 802644c:	0803606c 	.word	0x0803606c
 8026450:	08039fb4 	.word	0x08039fb4
 8026454:	08039fc8 	.word	0x08039fc8
 8026458:	08039fd8 	.word	0x08039fd8
 802645c:	0803a774 	.word	0x0803a774
 8026460:	08039d58 	.word	0x08039d58
 8026464:	08039ff4 	.word	0x08039ff4
 8026468:	0803a00c 	.word	0x0803a00c
 802646c:	0803a020 	.word	0x0803a020

08026470 <mg_iobuf_resize>:
int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8026470:	b570      	push	{r4, r5, r6, lr}
 8026472:	b082      	sub	sp, #8
 8026474:	4604      	mov	r4, r0
 8026476:	4608      	mov	r0, r1
  new_size = roundup(new_size, io->align);
 8026478:	68e1      	ldr	r1, [r4, #12]
 802647a:	f7f9 fc7b 	bl	801fd74 <roundup>
  if (new_size == 0) {
 802647e:	b130      	cbz	r0, 802648e <mg_iobuf_resize+0x1e>
 8026480:	4605      	mov	r5, r0
  } else if (new_size != io->size) {
 8026482:	6863      	ldr	r3, [r4, #4]
 8026484:	4283      	cmp	r3, r0
 8026486:	d10f      	bne.n	80264a8 <mg_iobuf_resize+0x38>
  int ok = 1;
 8026488:	2001      	movs	r0, #1
}
 802648a:	b002      	add	sp, #8
 802648c:	bd70      	pop	{r4, r5, r6, pc}
    mg_bzero(io->buf, io->size);
 802648e:	6861      	ldr	r1, [r4, #4]
 8026490:	6820      	ldr	r0, [r4, #0]
 8026492:	f7fe fdab 	bl	8024fec <mg_bzero>
    free(io->buf);
 8026496:	6820      	ldr	r0, [r4, #0]
 8026498:	f7f3 fea0 	bl	801a1dc <vPortFree>
    io->buf = NULL;
 802649c:	2300      	movs	r3, #0
 802649e:	6023      	str	r3, [r4, #0]
    io->len = io->size = 0;
 80264a0:	6063      	str	r3, [r4, #4]
 80264a2:	60a3      	str	r3, [r4, #8]
  int ok = 1;
 80264a4:	2001      	movs	r0, #1
 80264a6:	e7f0      	b.n	802648a <mg_iobuf_resize+0x1a>
    void *p = calloc(1, new_size);
 80264a8:	4601      	mov	r1, r0
 80264aa:	2001      	movs	r0, #1
 80264ac:	f7fb fd1c 	bl	8021ee8 <mg_calloc>
    if (p != NULL) {
 80264b0:	4606      	mov	r6, r0
 80264b2:	b198      	cbz	r0, 80264dc <mg_iobuf_resize+0x6c>
      size_t len = new_size < io->len ? new_size : io->len;
 80264b4:	68a2      	ldr	r2, [r4, #8]
 80264b6:	42aa      	cmp	r2, r5
 80264b8:	bf28      	it	cs
 80264ba:	462a      	movcs	r2, r5
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 80264bc:	b11a      	cbz	r2, 80264c6 <mg_iobuf_resize+0x56>
 80264be:	6821      	ldr	r1, [r4, #0]
 80264c0:	b109      	cbz	r1, 80264c6 <mg_iobuf_resize+0x56>
 80264c2:	f005 fd7b 	bl	802bfbc <memmove>
      mg_bzero(io->buf, io->size);
 80264c6:	6861      	ldr	r1, [r4, #4]
 80264c8:	6820      	ldr	r0, [r4, #0]
 80264ca:	f7fe fd8f 	bl	8024fec <mg_bzero>
      free(io->buf);
 80264ce:	6820      	ldr	r0, [r4, #0]
 80264d0:	f7f3 fe84 	bl	801a1dc <vPortFree>
      io->buf = (unsigned char *) p;
 80264d4:	6026      	str	r6, [r4, #0]
      io->size = new_size;
 80264d6:	6065      	str	r5, [r4, #4]
  int ok = 1;
 80264d8:	2001      	movs	r0, #1
 80264da:	e7d6      	b.n	802648a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80264dc:	4b0b      	ldr	r3, [pc, #44]	@ (802650c <mg_iobuf_resize+0x9c>)
 80264de:	681b      	ldr	r3, [r3, #0]
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	dc01      	bgt.n	80264e8 <mg_iobuf_resize+0x78>
      ok = 0;
 80264e4:	2000      	movs	r0, #0
  return ok;
 80264e6:	e7d0      	b.n	802648a <mg_iobuf_resize+0x1a>
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80264e8:	4b09      	ldr	r3, [pc, #36]	@ (8026510 <mg_iobuf_resize+0xa0>)
 80264ea:	f640 5244 	movw	r2, #3396	@ 0xd44
 80264ee:	4909      	ldr	r1, [pc, #36]	@ (8026514 <mg_iobuf_resize+0xa4>)
 80264f0:	2001      	movs	r0, #1
 80264f2:	f7ff f981 	bl	80257f8 <mg_log_prefix>
 80264f6:	2600      	movs	r6, #0
 80264f8:	9500      	str	r5, [sp, #0]
 80264fa:	9601      	str	r6, [sp, #4]
 80264fc:	6862      	ldr	r2, [r4, #4]
 80264fe:	4633      	mov	r3, r6
 8026500:	4805      	ldr	r0, [pc, #20]	@ (8026518 <mg_iobuf_resize+0xa8>)
 8026502:	f7fd f863 	bl	80235cc <mg_log>
      ok = 0;
 8026506:	4630      	mov	r0, r6
 8026508:	e7bf      	b.n	802648a <mg_iobuf_resize+0x1a>
 802650a:	bf00      	nop
 802650c:	2000012c 	.word	0x2000012c
 8026510:	0803a764 	.word	0x0803a764
 8026514:	08039d58 	.word	0x08039d58
 8026518:	0803a030 	.word	0x0803a030

0802651c <static_cb>:
static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 802651c:	b538      	push	{r3, r4, r5, lr}
 802651e:	4604      	mov	r4, r0
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8026520:	2908      	cmp	r1, #8
 8026522:	d004      	beq.n	802652e <static_cb+0x12>
 8026524:	2902      	cmp	r1, #2
 8026526:	d002      	beq.n	802652e <static_cb+0x12>
  } else if (ev == MG_EV_CLOSE) {
 8026528:	2909      	cmp	r1, #9
 802652a:	d02b      	beq.n	8026584 <static_cb+0x68>
}
 802652c:	bd38      	pop	{r3, r4, r5, pc}
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 802652e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026532:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8026534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026538:	d31d      	bcc.n	8026576 <static_cb+0x5a>
    if (c->send.len >= c->send.size) return;  // Rate limit
 802653a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 802653c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802653e:	4299      	cmp	r1, r3
 8026540:	d2f4      	bcs.n	802652c <static_cb+0x10>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8026542:	1a5b      	subs	r3, r3, r1
 8026544:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8026548:	429a      	cmp	r2, r3
 802654a:	d300      	bcc.n	802654e <static_cb+0x32>
 802654c:	461a      	mov	r2, r3
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 802654e:	686b      	ldr	r3, [r5, #4]
 8026550:	691b      	ldr	r3, [r3, #16]
 8026552:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8026554:	4401      	add	r1, r0
 8026556:	6828      	ldr	r0, [r5, #0]
 8026558:	4798      	blx	r3
    c->send.len += n;
 802655a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802655c:	4403      	add	r3, r0
 802655e:	6523      	str	r3, [r4, #80]	@ 0x50
    *cl -= n;
 8026560:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8026564:	1a1b      	subs	r3, r3, r0
 8026566:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    if (n == 0) restore_http_cb(c);
 802656a:	2800      	cmp	r0, #0
 802656c:	d1de      	bne.n	802652c <static_cb+0x10>
 802656e:	4620      	mov	r0, r4
 8026570:	f7fb fe16 	bl	80221a0 <restore_http_cb>
 8026574:	e7da      	b.n	802652c <static_cb+0x10>
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8026576:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802657a:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 802657e:	f7ff ff77 	bl	8026470 <mg_iobuf_resize>
 8026582:	e7da      	b.n	802653a <static_cb+0x1e>
    restore_http_cb(c);
 8026584:	f7fb fe0c 	bl	80221a0 <restore_http_cb>
  (void) ev_data;
 8026588:	e7d0      	b.n	802652c <static_cb+0x10>

0802658a <mg_iobuf_add>:
                    size_t len) {
 802658a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802658e:	4604      	mov	r4, r0
 8026590:	460f      	mov	r7, r1
 8026592:	4690      	mov	r8, r2
 8026594:	461d      	mov	r5, r3
  size_t new_size = roundup(io->len + len, io->align);
 8026596:	6880      	ldr	r0, [r0, #8]
 8026598:	68e1      	ldr	r1, [r4, #12]
 802659a:	4418      	add	r0, r3
 802659c:	f7f9 fbea 	bl	801fd74 <roundup>
 80265a0:	4606      	mov	r6, r0
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 80265a2:	4601      	mov	r1, r0
 80265a4:	4620      	mov	r0, r4
 80265a6:	f7ff ff63 	bl	8026470 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 80265aa:	6863      	ldr	r3, [r4, #4]
 80265ac:	42b3      	cmp	r3, r6
 80265ae:	d000      	beq.n	80265b2 <mg_iobuf_add+0x28>
 80265b0:	2500      	movs	r5, #0
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80265b2:	68a2      	ldr	r2, [r4, #8]
 80265b4:	42ba      	cmp	r2, r7
 80265b6:	d812      	bhi.n	80265de <mg_iobuf_add+0x54>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 80265b8:	f1b8 0f00 	cmp.w	r8, #0
 80265bc:	d005      	beq.n	80265ca <mg_iobuf_add+0x40>
 80265be:	6820      	ldr	r0, [r4, #0]
 80265c0:	462a      	mov	r2, r5
 80265c2:	4641      	mov	r1, r8
 80265c4:	4438      	add	r0, r7
 80265c6:	f005 fcf9 	bl	802bfbc <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 80265ca:	68a3      	ldr	r3, [r4, #8]
 80265cc:	42bb      	cmp	r3, r7
 80265ce:	d200      	bcs.n	80265d2 <mg_iobuf_add+0x48>
 80265d0:	60a7      	str	r7, [r4, #8]
  io->len += len;
 80265d2:	68a3      	ldr	r3, [r4, #8]
 80265d4:	442b      	add	r3, r5
 80265d6:	60a3      	str	r3, [r4, #8]
}
 80265d8:	4628      	mov	r0, r5
 80265da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 80265de:	6823      	ldr	r3, [r4, #0]
 80265e0:	19e8      	adds	r0, r5, r7
 80265e2:	1bd2      	subs	r2, r2, r7
 80265e4:	19d9      	adds	r1, r3, r7
 80265e6:	4418      	add	r0, r3
 80265e8:	f005 fce8 	bl	802bfbc <memmove>
 80265ec:	e7e4      	b.n	80265b8 <mg_iobuf_add+0x2e>

080265ee <mg_iobuf_free>:
void mg_iobuf_free(struct mg_iobuf *io) {
 80265ee:	b508      	push	{r3, lr}
  mg_iobuf_resize(io, 0);
 80265f0:	2100      	movs	r1, #0
 80265f2:	f7ff ff3d 	bl	8026470 <mg_iobuf_resize>
}
 80265f6:	bd08      	pop	{r3, pc}

080265f8 <rx_udp>:
static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80265f8:	b538      	push	{r3, r4, r5, lr}
 80265fa:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 80265fc:	2201      	movs	r2, #1
 80265fe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8026600:	f7fb fc97 	bl	8021f32 <getpeer>
  if (c == NULL) {
 8026604:	b368      	cbz	r0, 8026662 <rx_udp+0x6a>
 8026606:	4605      	mov	r5, r0
    c->rem.port = pkt->udp->sport;
 8026608:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802660a:	881b      	ldrh	r3, [r3, #0]
 802660c:	8583      	strh	r3, [r0, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 802660e:	69e3      	ldr	r3, [r4, #28]
 8026610:	68db      	ldr	r3, [r3, #12]
 8026612:	61c3      	str	r3, [r0, #28]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8026614:	6923      	ldr	r3, [r4, #16]
 8026616:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802661a:	f8c0 20c8 	str.w	r2, [r0, #200]	@ 0xc8
 802661e:	895b      	ldrh	r3, [r3, #10]
 8026620:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 8026624:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8026626:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802662a:	d21b      	bcs.n	8026664 <rx_udp+0x6c>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802662c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802662e:	1ad2      	subs	r2, r2, r3
 8026630:	68e1      	ldr	r1, [r4, #12]
 8026632:	428a      	cmp	r2, r1
 8026634:	d204      	bcs.n	8026640 <rx_udp+0x48>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 8026636:	4419      	add	r1, r3
 8026638:	3038      	adds	r0, #56	@ 0x38
 802663a:	f7ff ff19 	bl	8026470 <mg_iobuf_resize>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 802663e:	b1a8      	cbz	r0, 802666c <rx_udp+0x74>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 8026640:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8026642:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8026644:	68e2      	ldr	r2, [r4, #12]
 8026646:	68a1      	ldr	r1, [r4, #8]
 8026648:	4418      	add	r0, r3
 802664a:	f006 ff0d 	bl	802d468 <memcpy>
      c->recv.len += pkt->pay.len;
 802664e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8026650:	4622      	mov	r2, r4
 8026652:	f852 1f0c 	ldr.w	r1, [r2, #12]!
 8026656:	440b      	add	r3, r1
 8026658:	642b      	str	r3, [r5, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 802665a:	2107      	movs	r1, #7
 802665c:	4628      	mov	r0, r5
 802665e:	f7fb fd6b 	bl	8022138 <mg_call>
}
 8026662:	bd38      	pop	{r3, r4, r5, pc}
      mg_error(c, "max_recv_buf_size reached");
 8026664:	4904      	ldr	r1, [pc, #16]	@ (8026678 <rx_udp+0x80>)
 8026666:	f7ff f9af 	bl	80259c8 <mg_error>
 802666a:	e7fa      	b.n	8026662 <rx_udp+0x6a>
      mg_error(c, "oom");
 802666c:	4903      	ldr	r1, [pc, #12]	@ (802667c <rx_udp+0x84>)
 802666e:	4628      	mov	r0, r5
 8026670:	f7ff f9aa 	bl	80259c8 <mg_error>
 8026674:	e7f5      	b.n	8026662 <rx_udp+0x6a>
 8026676:	bf00      	nop
 8026678:	0803a03c 	.word	0x0803a03c
 802667c:	0803a058 	.word	0x0803a058

08026680 <mg_pfn_iobuf_private>:
static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8026680:	b538      	push	{r3, r4, r5, lr}
 8026682:	4605      	mov	r5, r0
 8026684:	460c      	mov	r4, r1
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8026686:	b122      	cbz	r2, 8026692 <mg_pfn_iobuf_private+0x12>
 8026688:	6889      	ldr	r1, [r1, #8]
 802668a:	3102      	adds	r1, #2
 802668c:	6863      	ldr	r3, [r4, #4]
 802668e:	4299      	cmp	r1, r3
 8026690:	d80d      	bhi.n	80266ae <mg_pfn_iobuf_private+0x2e>
  if (io->len + 2 <= io->size) {
 8026692:	68a3      	ldr	r3, [r4, #8]
 8026694:	1c99      	adds	r1, r3, #2
 8026696:	6862      	ldr	r2, [r4, #4]
 8026698:	4291      	cmp	r1, r2
 802669a:	d80c      	bhi.n	80266b6 <mg_pfn_iobuf_private+0x36>
    io->buf[io->len++] = (uint8_t) ch;
 802669c:	6822      	ldr	r2, [r4, #0]
 802669e:	1c59      	adds	r1, r3, #1
 80266a0:	60a1      	str	r1, [r4, #8]
 80266a2:	54d5      	strb	r5, [r2, r3]
    io->buf[io->len] = 0;
 80266a4:	6822      	ldr	r2, [r4, #0]
 80266a6:	68a3      	ldr	r3, [r4, #8]
 80266a8:	2100      	movs	r1, #0
 80266aa:	54d1      	strb	r1, [r2, r3]
}
 80266ac:	bd38      	pop	{r3, r4, r5, pc}
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80266ae:	4620      	mov	r0, r4
 80266b0:	f7ff fede 	bl	8026470 <mg_iobuf_resize>
 80266b4:	e7ed      	b.n	8026692 <mg_pfn_iobuf_private+0x12>
  } else if (io->len < io->size) {
 80266b6:	4293      	cmp	r3, r2
 80266b8:	d2f8      	bcs.n	80266ac <mg_pfn_iobuf_private+0x2c>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80266ba:	6822      	ldr	r2, [r4, #0]
 80266bc:	1c59      	adds	r1, r3, #1
 80266be:	60a1      	str	r1, [r4, #8]
 80266c0:	2100      	movs	r1, #0
 80266c2:	54d1      	strb	r1, [r2, r3]
}
 80266c4:	e7f2      	b.n	80266ac <mg_pfn_iobuf_private+0x2c>

080266c6 <mg_pfn_iobuf>:
void mg_pfn_iobuf(char ch, void *param) {
 80266c6:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, true);
 80266c8:	2201      	movs	r2, #1
 80266ca:	f7ff ffd9 	bl	8026680 <mg_pfn_iobuf_private>
}
 80266ce:	bd08      	pop	{r3, pc}

080266d0 <mg_putchar_iobuf_static>:
static void mg_putchar_iobuf_static(char ch, void *param) {
 80266d0:	b508      	push	{r3, lr}
  mg_pfn_iobuf_private(ch, param, false);
 80266d2:	2200      	movs	r2, #0
 80266d4:	f7ff ffd4 	bl	8026680 <mg_pfn_iobuf_private>
}
 80266d8:	bd08      	pop	{r3, pc}
	...

080266dc <mg_close_conn>:
void mg_close_conn(struct mg_connection *c) {
 80266dc:	b510      	push	{r4, lr}
 80266de:	4604      	mov	r4, r0
  mg_resolve_cancel(c);  // Close any pending DNS query
 80266e0:	f7fb fcc9 	bl	8022076 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80266e4:	6862      	ldr	r2, [r4, #4]
 80266e6:	e000      	b.n	80266ea <mg_close_conn+0xe>
 80266e8:	461a      	mov	r2, r3
 80266ea:	6813      	ldr	r3, [r2, #0]
 80266ec:	42a3      	cmp	r3, r4
 80266ee:	d1fb      	bne.n	80266e8 <mg_close_conn+0xc>
 80266f0:	6823      	ldr	r3, [r4, #0]
 80266f2:	6013      	str	r3, [r2, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80266f4:	6863      	ldr	r3, [r4, #4]
 80266f6:	689a      	ldr	r2, [r3, #8]
 80266f8:	42a2      	cmp	r2, r4
 80266fa:	d020      	beq.n	802673e <mg_close_conn+0x62>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80266fc:	6863      	ldr	r3, [r4, #4]
 80266fe:	691a      	ldr	r2, [r3, #16]
 8026700:	42a2      	cmp	r2, r4
 8026702:	d01f      	beq.n	8026744 <mg_close_conn+0x68>
  mg_call(c, MG_EV_CLOSE, NULL);
 8026704:	2200      	movs	r2, #0
 8026706:	2109      	movs	r1, #9
 8026708:	4620      	mov	r0, r4
 802670a:	f7fb fd15 	bl	8022138 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802670e:	4b15      	ldr	r3, [pc, #84]	@ (8026764 <mg_close_conn+0x88>)
 8026710:	681b      	ldr	r3, [r3, #0]
 8026712:	2b02      	cmp	r3, #2
 8026714:	dc19      	bgt.n	802674a <mg_close_conn+0x6e>
  mg_iobuf_free(&c->recv);
 8026716:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 802671a:	f7ff ff68 	bl	80265ee <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 802671e:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8026722:	f7ff ff64 	bl	80265ee <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 8026726:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802672a:	f7ff ff60 	bl	80265ee <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 802672e:	21b0      	movs	r1, #176	@ 0xb0
 8026730:	4620      	mov	r0, r4
 8026732:	f7fe fc5b 	bl	8024fec <mg_bzero>
  free(c);
 8026736:	4620      	mov	r0, r4
 8026738:	f7f3 fd50 	bl	801a1dc <vPortFree>
}
 802673c:	bd10      	pop	{r4, pc}
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 802673e:	2200      	movs	r2, #0
 8026740:	609a      	str	r2, [r3, #8]
 8026742:	e7db      	b.n	80266fc <mg_close_conn+0x20>
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8026744:	2200      	movs	r2, #0
 8026746:	611a      	str	r2, [r3, #16]
 8026748:	e7dc      	b.n	8026704 <mg_close_conn+0x28>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 802674a:	4b07      	ldr	r3, [pc, #28]	@ (8026768 <mg_close_conn+0x8c>)
 802674c:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 8026750:	4906      	ldr	r1, [pc, #24]	@ (802676c <mg_close_conn+0x90>)
 8026752:	2003      	movs	r0, #3
 8026754:	f7ff f850 	bl	80257f8 <mg_log_prefix>
 8026758:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802675a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802675c:	4804      	ldr	r0, [pc, #16]	@ (8026770 <mg_close_conn+0x94>)
 802675e:	f7fc ff35 	bl	80235cc <mg_log>
 8026762:	e7d8      	b.n	8026716 <mg_close_conn+0x3a>
 8026764:	2000012c 	.word	0x2000012c
 8026768:	0803a740 	.word	0x0803a740
 802676c:	08039d58 	.word	0x08039d58
 8026770:	0803a05c 	.word	0x0803a05c

08026774 <close_conn>:
static void close_conn(struct mg_connection *c) {
 8026774:	b510      	push	{r4, lr}
 8026776:	4604      	mov	r4, r0
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8026778:	30d0      	adds	r0, #208	@ 0xd0
 802677a:	f7ff ff38 	bl	80265ee <mg_iobuf_free>
  mg_close_conn(c);
 802677e:	4620      	mov	r0, r4
 8026780:	f7ff ffac 	bl	80266dc <mg_close_conn>
}
 8026784:	bd10      	pop	{r4, pc}
	...

08026788 <mg_listen>:
                                mg_event_handler_t fn, void *fn_data) {
 8026788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802678c:	4606      	mov	r6, r0
 802678e:	460d      	mov	r5, r1
 8026790:	4690      	mov	r8, r2
 8026792:	461f      	mov	r7, r3
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8026794:	f7fc fa42 	bl	8022c1c <mg_alloc_conn>
 8026798:	4604      	mov	r4, r0
 802679a:	2800      	cmp	r0, #0
 802679c:	d03f      	beq.n	802681e <mg_listen+0x96>
  } else if (!mg_open_listener(c, url)) {
 802679e:	4629      	mov	r1, r5
 80267a0:	f7fe fe5b 	bl	802545a <mg_open_listener>
 80267a4:	2800      	cmp	r0, #0
 80267a6:	d04d      	beq.n	8026844 <mg_listen+0xbc>
    c->is_listening = 1;
 80267a8:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80267ac:	f043 0301 	orr.w	r3, r3, #1
 80267b0:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 80267b4:	2204      	movs	r2, #4
 80267b6:	492f      	ldr	r1, [pc, #188]	@ (8026874 <mg_listen+0xec>)
 80267b8:	4628      	mov	r0, r5
 80267ba:	f005 fc4e 	bl	802c05a <strncmp>
 80267be:	fab0 f080 	clz	r0, r0
 80267c2:	0940      	lsrs	r0, r0, #5
 80267c4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80267c8:	f360 0300 	bfi	r3, r0, #0, #1
 80267cc:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80267d0:	6833      	ldr	r3, [r6, #0]
 80267d2:	6023      	str	r3, [r4, #0]
 80267d4:	6034      	str	r4, [r6, #0]
    c->fn = fn;
 80267d6:	f8c4 8078 	str.w	r8, [r4, #120]	@ 0x78
    c->fn_data = fn_data;
 80267da:	67e7      	str	r7, [r4, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 80267dc:	2200      	movs	r2, #0
 80267de:	2101      	movs	r1, #1
 80267e0:	4620      	mov	r0, r4
 80267e2:	f7fb fca9 	bl	8022138 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 80267e6:	4628      	mov	r0, r5
 80267e8:	f7fe fb52 	bl	8024e90 <mg_url_is_ssl>
 80267ec:	b128      	cbz	r0, 80267fa <mg_listen+0x72>
 80267ee:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 80267f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80267f6:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80267fa:	4b1f      	ldr	r3, [pc, #124]	@ (8026878 <mg_listen+0xf0>)
 80267fc:	681b      	ldr	r3, [r3, #0]
 80267fe:	2b02      	cmp	r3, #2
 8026800:	dd11      	ble.n	8026826 <mg_listen+0x9e>
 8026802:	4b1e      	ldr	r3, [pc, #120]	@ (802687c <mg_listen+0xf4>)
 8026804:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 8026808:	491d      	ldr	r1, [pc, #116]	@ (8026880 <mg_listen+0xf8>)
 802680a:	2003      	movs	r0, #3
 802680c:	f7fe fff4 	bl	80257f8 <mg_log_prefix>
 8026810:	462b      	mov	r3, r5
 8026812:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8026814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026816:	481b      	ldr	r0, [pc, #108]	@ (8026884 <mg_listen+0xfc>)
 8026818:	f7fc fed8 	bl	80235cc <mg_log>
  return c;
 802681c:	e003      	b.n	8026826 <mg_listen+0x9e>
    MG_ERROR(("OOM %s", url));
 802681e:	4b16      	ldr	r3, [pc, #88]	@ (8026878 <mg_listen+0xf0>)
 8026820:	681b      	ldr	r3, [r3, #0]
 8026822:	2b00      	cmp	r3, #0
 8026824:	dc02      	bgt.n	802682c <mg_listen+0xa4>
}
 8026826:	4620      	mov	r0, r4
 8026828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("OOM %s", url));
 802682c:	4b13      	ldr	r3, [pc, #76]	@ (802687c <mg_listen+0xf4>)
 802682e:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 8026832:	4913      	ldr	r1, [pc, #76]	@ (8026880 <mg_listen+0xf8>)
 8026834:	2001      	movs	r0, #1
 8026836:	f7fe ffdf 	bl	80257f8 <mg_log_prefix>
 802683a:	4629      	mov	r1, r5
 802683c:	4812      	ldr	r0, [pc, #72]	@ (8026888 <mg_listen+0x100>)
 802683e:	f7fc fec5 	bl	80235cc <mg_log>
 8026842:	e7f0      	b.n	8026826 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8026844:	4b0c      	ldr	r3, [pc, #48]	@ (8026878 <mg_listen+0xf0>)
 8026846:	681b      	ldr	r3, [r3, #0]
 8026848:	2b00      	cmp	r3, #0
 802684a:	dc04      	bgt.n	8026856 <mg_listen+0xce>
    free(c);
 802684c:	4620      	mov	r0, r4
 802684e:	f7f3 fcc5 	bl	801a1dc <vPortFree>
    c = NULL;
 8026852:	2400      	movs	r4, #0
 8026854:	e7e7      	b.n	8026826 <mg_listen+0x9e>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8026856:	4b09      	ldr	r3, [pc, #36]	@ (802687c <mg_listen+0xf4>)
 8026858:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 802685c:	4908      	ldr	r1, [pc, #32]	@ (8026880 <mg_listen+0xf8>)
 802685e:	2001      	movs	r0, #1
 8026860:	f7fe ffca 	bl	80257f8 <mg_log_prefix>
 8026864:	f006 fdc8 	bl	802d3f8 <__errno>
 8026868:	6802      	ldr	r2, [r0, #0]
 802686a:	4629      	mov	r1, r5
 802686c:	4807      	ldr	r0, [pc, #28]	@ (802688c <mg_listen+0x104>)
 802686e:	f7fc fead 	bl	80235cc <mg_log>
 8026872:	e7eb      	b.n	802684c <mg_listen+0xc4>
 8026874:	0803a08c 	.word	0x0803a08c
 8026878:	2000012c 	.word	0x2000012c
 802687c:	0803a728 	.word	0x0803a728
 8026880:	08039d58 	.word	0x08039d58
 8026884:	08039db4 	.word	0x08039db4
 8026888:	0803a06c 	.word	0x0803a06c
 802688c:	0803a074 	.word	0x0803a074

08026890 <mg_http_listen>:
                                     mg_event_handler_t fn, void *fn_data) {
 8026890:	b508      	push	{r3, lr}
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8026892:	f7ff ff79 	bl	8026788 <mg_listen>
  if (c != NULL) c->pfn = http_cb;
 8026896:	b110      	cbz	r0, 802689e <mg_http_listen+0xe>
 8026898:	4b01      	ldr	r3, [pc, #4]	@ (80268a0 <mg_http_listen+0x10>)
 802689a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
}
 802689e:	bd08      	pop	{r3, pc}
 80268a0:	08025a7d 	.word	0x08025a7d

080268a4 <trim_len>:
static size_t trim_len(struct mg_connection *c, size_t len) {
 80268a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80268a8:	4605      	mov	r5, r0
 80268aa:	460c      	mov	r4, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80268ac:	6843      	ldr	r3, [r0, #4]
 80268ae:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 80268b0:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 80268b4:	f013 0301 	ands.w	r3, r3, #1
 80268b8:	d02c      	beq.n	8026914 <trim_len+0x70>
 80268ba:	2608      	movs	r6, #8
  size_t max_headers_len =
 80268bc:	f106 0826 	add.w	r8, r6, #38	@ 0x26
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 80268c0:	bb53      	cbnz	r3, 8026918 <trim_len+0x74>
 80268c2:	3618      	adds	r6, #24
  if (len + max_headers_len > ifp->tx.len) {
 80268c4:	eb08 0304 	add.w	r3, r8, r4
 80268c8:	69ba      	ldr	r2, [r7, #24]
 80268ca:	4293      	cmp	r3, r2
 80268cc:	d901      	bls.n	80268d2 <trim_len+0x2e>
    len = ifp->tx.len - max_headers_len;
 80268ce:	eba2 0408 	sub.w	r4, r2, r8
  if (ifp->mtu < min_mtu) {
 80268d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80268d6:	42b3      	cmp	r3, r6
 80268d8:	d205      	bcs.n	80268e6 <trim_len+0x42>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80268da:	4b1c      	ldr	r3, [pc, #112]	@ (802694c <trim_len+0xa8>)
 80268dc:	681b      	ldr	r3, [r3, #0]
 80268de:	2b00      	cmp	r3, #0
 80268e0:	dc1c      	bgt.n	802691c <trim_len+0x78>
    ifp->mtu = (uint16_t) min_mtu;
 80268e2:	f8a7 6044 	strh.w	r6, [r7, #68]	@ 0x44
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80268e6:	eb04 0308 	add.w	r3, r4, r8
 80268ea:	3b0e      	subs	r3, #14
 80268ec:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80268f0:	4293      	cmp	r3, r2
 80268f2:	d90c      	bls.n	802690e <trim_len+0x6a>
    len = ifp->mtu - max_headers_len + eth_h_len;
 80268f4:	eba2 0208 	sub.w	r2, r2, r8
 80268f8:	f102 040e 	add.w	r4, r2, #14
    if (c->is_udp) {
 80268fc:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026900:	f013 0f01 	tst.w	r3, #1
 8026904:	d003      	beq.n	802690e <trim_len+0x6a>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8026906:	4b11      	ldr	r3, [pc, #68]	@ (802694c <trim_len+0xa8>)
 8026908:	681b      	ldr	r3, [r3, #0]
 802690a:	2b00      	cmp	r3, #0
 802690c:	dc12      	bgt.n	8026934 <trim_len+0x90>
}
 802690e:	4620      	mov	r0, r4
 8026910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 8026914:	263c      	movs	r6, #60	@ 0x3c
 8026916:	e7d1      	b.n	80268bc <trim_len+0x18>
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 8026918:	2644      	movs	r6, #68	@ 0x44
 802691a:	e7d3      	b.n	80268c4 <trim_len+0x20>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 802691c:	4b0c      	ldr	r3, [pc, #48]	@ (8026950 <trim_len+0xac>)
 802691e:	f241 528c 	movw	r2, #5516	@ 0x158c
 8026922:	490c      	ldr	r1, [pc, #48]	@ (8026954 <trim_len+0xb0>)
 8026924:	2001      	movs	r0, #1
 8026926:	f7fe ff67 	bl	80257f8 <mg_log_prefix>
 802692a:	4631      	mov	r1, r6
 802692c:	480a      	ldr	r0, [pc, #40]	@ (8026958 <trim_len+0xb4>)
 802692e:	f7fc fe4d 	bl	80235cc <mg_log>
 8026932:	e7d6      	b.n	80268e2 <trim_len+0x3e>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 8026934:	4b06      	ldr	r3, [pc, #24]	@ (8026950 <trim_len+0xac>)
 8026936:	f241 5293 	movw	r2, #5523	@ 0x1593
 802693a:	4906      	ldr	r1, [pc, #24]	@ (8026954 <trim_len+0xb0>)
 802693c:	2001      	movs	r0, #1
 802693e:	f7fe ff5b 	bl	80257f8 <mg_log_prefix>
 8026942:	4806      	ldr	r0, [pc, #24]	@ (802695c <trim_len+0xb8>)
 8026944:	f7fc fe42 	bl	80235cc <mg_log>
 8026948:	e7e1      	b.n	802690e <trim_len+0x6a>
 802694a:	bf00      	nop
 802694c:	2000012c 	.word	0x2000012c
 8026950:	0803a71c 	.word	0x0803a71c
 8026954:	08039d58 	.word	0x08039d58
 8026958:	0803a094 	.word	0x0803a094
 802695c:	0803a0c0 	.word	0x0803a0c0

08026960 <mg_send>:
bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8026960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026962:	b085      	sub	sp, #20
 8026964:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8026966:	6843      	ldr	r3, [r0, #4]
 8026968:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 802696a:	69c7      	ldr	r7, [r0, #28]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 802696c:	68ab      	ldr	r3, [r5, #8]
 802696e:	b123      	cbz	r3, 802697a <mg_send+0x1a>
 8026970:	460e      	mov	r6, r1
 8026972:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8026976:	2b03      	cmp	r3, #3
 8026978:	d006      	beq.n	8026988 <mg_send+0x28>
    mg_error(c, "net down");
 802697a:	4913      	ldr	r1, [pc, #76]	@ (80269c8 <mg_send+0x68>)
 802697c:	4620      	mov	r0, r4
 802697e:	f7ff f823 	bl	80259c8 <mg_error>
  bool res = false;
 8026982:	2000      	movs	r0, #0
}
 8026984:	b005      	add	sp, #20
 8026986:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (c->is_udp) {
 8026988:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 802698c:	f013 0f01 	tst.w	r3, #1
 8026990:	d010      	beq.n	80269b4 <mg_send+0x54>
    len = trim_len(c, len);  // Trimming length if necessary
 8026992:	4611      	mov	r1, r2
 8026994:	f7ff ff86 	bl	80268a4 <trim_len>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8026998:	68aa      	ldr	r2, [r5, #8]
 802699a:	9003      	str	r0, [sp, #12]
 802699c:	9602      	str	r6, [sp, #8]
 802699e:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80269a0:	9301      	str	r3, [sp, #4]
 80269a2:	9700      	str	r7, [sp, #0]
 80269a4:	8b23      	ldrh	r3, [r4, #24]
 80269a6:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 80269aa:	4628      	mov	r0, r5
 80269ac:	f7fe fcd3 	bl	8025356 <tx_udp>
    res = true;
 80269b0:	2001      	movs	r0, #1
 80269b2:	e7e7      	b.n	8026984 <mg_send+0x24>
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80269b4:	4613      	mov	r3, r2
 80269b6:	460a      	mov	r2, r1
 80269b8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80269ba:	3048      	adds	r0, #72	@ 0x48
 80269bc:	f7ff fde5 	bl	802658a <mg_iobuf_add>
 80269c0:	3800      	subs	r0, #0
 80269c2:	bf18      	it	ne
 80269c4:	2001      	movne	r0, #1
 80269c6:	e7dd      	b.n	8026984 <mg_send+0x24>
 80269c8:	0803a0ec 	.word	0x0803a0ec

080269cc <mg_dns_send>:
                        uint16_t txnid, bool ipv6) {
 80269cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269ce:	b0c5      	sub	sp, #276	@ 0x114
 80269d0:	4606      	mov	r6, r0
 80269d2:	460d      	mov	r5, r1
 80269d4:	4614      	mov	r4, r2
 80269d6:	461f      	mov	r7, r3
  memset(&pkt, 0, sizeof(pkt));
 80269d8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80269dc:	2100      	movs	r1, #0
 80269de:	a801      	add	r0, sp, #4
 80269e0:	f005 fb06 	bl	802bff0 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80269e4:	4620      	mov	r0, r4
 80269e6:	f7fe fc01 	bl	80251ec <mg_ntohs>
 80269ea:	f8ad 0004 	strh.w	r0, [sp, #4]
  pkt.header.flags = mg_htons(0x100);
 80269ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80269f2:	f7fe fbfb 	bl	80251ec <mg_ntohs>
 80269f6:	f8ad 0006 	strh.w	r0, [sp, #6]
  pkt.header.num_questions = mg_htons(1);
 80269fa:	2001      	movs	r0, #1
 80269fc:	f7fe fbf6 	bl	80251ec <mg_ntohs>
 8026a00:	f8ad 0008 	strh.w	r0, [sp, #8]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8026a04:	f04f 0c00 	mov.w	ip, #0
 8026a08:	4664      	mov	r4, ip
 8026a0a:	e015      	b.n	8026a38 <mg_dns_send+0x6c>
      pkt.data[n] = (uint8_t) (i - n);
 8026a0c:	eba4 020c 	sub.w	r2, r4, ip
 8026a10:	ab01      	add	r3, sp, #4
 8026a12:	4463      	add	r3, ip
 8026a14:	731a      	strb	r2, [r3, #12]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8026a16:	f10c 0309 	add.w	r3, ip, #9
 8026a1a:	aa01      	add	r2, sp, #4
 8026a1c:	18d0      	adds	r0, r2, r3
 8026a1e:	6829      	ldr	r1, [r5, #0]
 8026a20:	eba4 020c 	sub.w	r2, r4, ip
 8026a24:	4461      	add	r1, ip
 8026a26:	3004      	adds	r0, #4
 8026a28:	f006 fd1e 	bl	802d468 <memcpy>
      n = i + 1;
 8026a2c:	f104 0c01 	add.w	ip, r4, #1
    if (i >= name->len) break;
 8026a30:	686a      	ldr	r2, [r5, #4]
 8026a32:	42a2      	cmp	r2, r4
 8026a34:	d90a      	bls.n	8026a4c <mg_dns_send+0x80>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8026a36:	3401      	adds	r4, #1
 8026a38:	2cfa      	cmp	r4, #250	@ 0xfa
 8026a3a:	d807      	bhi.n	8026a4c <mg_dns_send+0x80>
    if (name->buf[i] == '.' || i >= name->len) {
 8026a3c:	682b      	ldr	r3, [r5, #0]
 8026a3e:	5d1a      	ldrb	r2, [r3, r4]
 8026a40:	2a2e      	cmp	r2, #46	@ 0x2e
 8026a42:	d0e3      	beq.n	8026a0c <mg_dns_send+0x40>
 8026a44:	686b      	ldr	r3, [r5, #4]
 8026a46:	42a3      	cmp	r3, r4
 8026a48:	d8f2      	bhi.n	8026a30 <mg_dns_send+0x64>
 8026a4a:	e7df      	b.n	8026a0c <mg_dns_send+0x40>
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8026a4c:	f10c 0308 	add.w	r3, ip, #8
 8026a50:	aa01      	add	r2, sp, #4
 8026a52:	4413      	add	r3, r2
 8026a54:	4a0a      	ldr	r2, [pc, #40]	@ (8026a80 <mg_dns_send+0xb4>)
 8026a56:	f8d2 0220 	ldr.w	r0, [r2, #544]	@ 0x220
 8026a5a:	6058      	str	r0, [r3, #4]
 8026a5c:	f892 2224 	ldrb.w	r2, [r2, #548]	@ 0x224
 8026a60:	721a      	strb	r2, [r3, #8]
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8026a62:	b12f      	cbz	r7, 8026a70 <mg_dns_send+0xa4>
 8026a64:	f10c 0302 	add.w	r3, ip, #2
 8026a68:	aa01      	add	r2, sp, #4
 8026a6a:	4413      	add	r3, r2
 8026a6c:	221c      	movs	r2, #28
 8026a6e:	731a      	strb	r2, [r3, #12]
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8026a70:	f10c 0211 	add.w	r2, ip, #17
 8026a74:	a901      	add	r1, sp, #4
 8026a76:	4630      	mov	r0, r6
 8026a78:	f7ff ff72 	bl	8026960 <mg_send>
}
 8026a7c:	b045      	add	sp, #276	@ 0x114
 8026a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a80:	0803533c 	.word	0x0803533c

08026a84 <mg_mqtt_send_header>:
                         uint32_t len) {
 8026a84:	b500      	push	{lr}
 8026a86:	b083      	sub	sp, #12
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 8026a88:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8026a8c:	f88d 2000 	strb.w	r2, [sp]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 8026a90:	f10d 0201 	add.w	r2, sp, #1
    *vlen = len % 0x80;
 8026a94:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 8026a98:	7011      	strb	r1, [r2, #0]
    if (len > 0) *vlen |= 0x80;
 8026a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8026a9c:	ea4f 13d3 	mov.w	r3, r3, lsr #7
 8026aa0:	d90e      	bls.n	8026ac0 <mg_mqtt_send_header+0x3c>
 8026aa2:	f061 017f 	orn	r1, r1, #127	@ 0x7f
 8026aa6:	f802 1b01 	strb.w	r1, [r2], #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8026aaa:	f10d 0105 	add.w	r1, sp, #5
 8026aae:	428a      	cmp	r2, r1
 8026ab0:	d3f0      	bcc.n	8026a94 <mg_mqtt_send_header+0x10>
  mg_send(c, buf, (size_t) (vlen - buf));
 8026ab2:	4669      	mov	r1, sp
 8026ab4:	1a52      	subs	r2, r2, r1
 8026ab6:	f7ff ff53 	bl	8026960 <mg_send>
}
 8026aba:	b003      	add	sp, #12
 8026abc:	f85d fb04 	ldr.w	pc, [sp], #4
    vlen++;
 8026ac0:	3201      	adds	r2, #1
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 8026ac2:	e7f6      	b.n	8026ab2 <mg_mqtt_send_header+0x2e>

08026ac4 <mg_send_u32>:
static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8026ac4:	b500      	push	{lr}
 8026ac6:	b083      	sub	sp, #12
 8026ac8:	9101      	str	r1, [sp, #4]
  mg_send(c, &value, sizeof(value));
 8026aca:	2204      	movs	r2, #4
 8026acc:	eb0d 0102 	add.w	r1, sp, r2
 8026ad0:	f7ff ff46 	bl	8026960 <mg_send>
}
 8026ad4:	b003      	add	sp, #12
 8026ad6:	f85d fb04 	ldr.w	pc, [sp], #4

08026ada <mg_send_u16>:
static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8026ada:	b500      	push	{lr}
 8026adc:	b083      	sub	sp, #12
 8026ade:	f8ad 1006 	strh.w	r1, [sp, #6]
  mg_send(c, &value, sizeof(value));
 8026ae2:	2202      	movs	r2, #2
 8026ae4:	f10d 0106 	add.w	r1, sp, #6
 8026ae8:	f7ff ff3a 	bl	8026960 <mg_send>
}
 8026aec:	b003      	add	sp, #12
 8026aee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08026af4 <mg_send_mqtt_properties>:
                                    struct mg_mqtt_prop *props, size_t nprops) {
 8026af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026af8:	b083      	sub	sp, #12
 8026afa:	4606      	mov	r6, r0
 8026afc:	460f      	mov	r7, r1
 8026afe:	4691      	mov	r9, r2
  size_t total_size = get_properties_length(props, nprops);
 8026b00:	4611      	mov	r1, r2
 8026b02:	4638      	mov	r0, r7
 8026b04:	f7f9 fe82 	bl	802080c <get_properties_length>
 8026b08:	4601      	mov	r1, r0
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8026b0a:	2500      	movs	r5, #0
 8026b0c:	9501      	str	r5, [sp, #4]
  uint8_t buf[4] = {0, 0, 0, 0};
 8026b0e:	9500      	str	r5, [sp, #0]
  size_t i, len = encode_varint(buf, total_size);
 8026b10:	4668      	mov	r0, sp
 8026b12:	f7f9 fe2c 	bl	802076e <encode_varint>
 8026b16:	4602      	mov	r2, r0
  mg_send(c, buf, (size_t) len);
 8026b18:	4669      	mov	r1, sp
 8026b1a:	4630      	mov	r0, r6
 8026b1c:	f7ff ff20 	bl	8026960 <mg_send>
  for (i = 0; i < nprops; i++) {
 8026b20:	e018      	b.n	8026b54 <mg_send_mqtt_properties+0x60>
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8026b22:	89a0      	ldrh	r0, [r4, #12]
 8026b24:	f7fe fb62 	bl	80251ec <mg_ntohs>
 8026b28:	4601      	mov	r1, r0
 8026b2a:	4630      	mov	r0, r6
 8026b2c:	f7ff ffd5 	bl	8026ada <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 8026b30:	68e2      	ldr	r2, [r4, #12]
 8026b32:	68a1      	ldr	r1, [r4, #8]
 8026b34:	4630      	mov	r0, r6
 8026b36:	f7ff ff13 	bl	8026960 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8026b3a:	8aa0      	ldrh	r0, [r4, #20]
 8026b3c:	f7fe fb56 	bl	80251ec <mg_ntohs>
 8026b40:	4601      	mov	r1, r0
 8026b42:	4630      	mov	r0, r6
 8026b44:	f7ff ffc9 	bl	8026ada <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8026b48:	6962      	ldr	r2, [r4, #20]
 8026b4a:	6921      	ldr	r1, [r4, #16]
 8026b4c:	4630      	mov	r0, r6
 8026b4e:	f7ff ff07 	bl	8026960 <mg_send>
  for (i = 0; i < nprops; i++) {
 8026b52:	3501      	adds	r5, #1
 8026b54:	454d      	cmp	r5, r9
 8026b56:	d25b      	bcs.n	8026c10 <mg_send_mqtt_properties+0x11c>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 8026b58:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8026b5c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8026b60:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8026b64:	2201      	movs	r2, #1
 8026b66:	4621      	mov	r1, r4
 8026b68:	4630      	mov	r0, r6
 8026b6a:	f7ff fef9 	bl	8026960 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8026b6e:	f817 0008 	ldrb.w	r0, [r7, r8]
 8026b72:	f7f9 fe37 	bl	80207e4 <mqtt_prop_type_by_id>
 8026b76:	2806      	cmp	r0, #6
 8026b78:	d8eb      	bhi.n	8026b52 <mg_send_mqtt_properties+0x5e>
 8026b7a:	a301      	add	r3, pc, #4	@ (adr r3, 8026b80 <mg_send_mqtt_properties+0x8c>)
 8026b7c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8026b80:	08026b9d 	.word	0x08026b9d
 8026b84:	08026bc9 	.word	0x08026bc9
 8026b88:	08026b23 	.word	0x08026b23
 8026b8c:	08026be3 	.word	0x08026be3
 8026b90:	08026bfd 	.word	0x08026bfd
 8026b94:	08026bb9 	.word	0x08026bb9
 8026b98:	08026ba9 	.word	0x08026ba9
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 8026b9c:	2201      	movs	r2, #1
 8026b9e:	1d21      	adds	r1, r4, #4
 8026ba0:	4630      	mov	r0, r6
 8026ba2:	f7ff fedd 	bl	8026960 <mg_send>
        break;
 8026ba6:	e7d4      	b.n	8026b52 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8026ba8:	88a0      	ldrh	r0, [r4, #4]
 8026baa:	f7fe fb1f 	bl	80251ec <mg_ntohs>
 8026bae:	4601      	mov	r1, r0
 8026bb0:	4630      	mov	r0, r6
 8026bb2:	f7ff ff92 	bl	8026ada <mg_send_u16>
        break;
 8026bb6:	e7cc      	b.n	8026b52 <mg_send_mqtt_properties+0x5e>
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 8026bb8:	6860      	ldr	r0, [r4, #4]
 8026bba:	f7fe fa7f 	bl	80250bc <mg_ntohl>
 8026bbe:	4601      	mov	r1, r0
 8026bc0:	4630      	mov	r0, r6
 8026bc2:	f7ff ff7f 	bl	8026ac4 <mg_send_u32>
        break;
 8026bc6:	e7c4      	b.n	8026b52 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8026bc8:	8aa0      	ldrh	r0, [r4, #20]
 8026bca:	f7fe fb0f 	bl	80251ec <mg_ntohs>
 8026bce:	4601      	mov	r1, r0
 8026bd0:	4630      	mov	r0, r6
 8026bd2:	f7ff ff82 	bl	8026ada <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8026bd6:	6962      	ldr	r2, [r4, #20]
 8026bd8:	6921      	ldr	r1, [r4, #16]
 8026bda:	4630      	mov	r0, r6
 8026bdc:	f7ff fec0 	bl	8026960 <mg_send>
        break;
 8026be0:	e7b7      	b.n	8026b52 <mg_send_mqtt_properties+0x5e>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8026be2:	8aa0      	ldrh	r0, [r4, #20]
 8026be4:	f7fe fb02 	bl	80251ec <mg_ntohs>
 8026be8:	4601      	mov	r1, r0
 8026bea:	4630      	mov	r0, r6
 8026bec:	f7ff ff75 	bl	8026ada <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 8026bf0:	6962      	ldr	r2, [r4, #20]
 8026bf2:	6921      	ldr	r1, [r4, #16]
 8026bf4:	4630      	mov	r0, r6
 8026bf6:	f7ff feb3 	bl	8026960 <mg_send>
        break;
 8026bfa:	e7aa      	b.n	8026b52 <mg_send_mqtt_properties+0x5e>
        len = encode_varint(buf_v, props[i].iv);
 8026bfc:	6861      	ldr	r1, [r4, #4]
 8026bfe:	a801      	add	r0, sp, #4
 8026c00:	f7f9 fdb5 	bl	802076e <encode_varint>
 8026c04:	4602      	mov	r2, r0
        mg_send(c, buf_v, (size_t) len);
 8026c06:	a901      	add	r1, sp, #4
 8026c08:	4630      	mov	r0, r6
 8026c0a:	f7ff fea9 	bl	8026960 <mg_send>
        break;
 8026c0e:	e7a0      	b.n	8026b52 <mg_send_mqtt_properties+0x5e>
}
 8026c10:	b003      	add	sp, #12
 8026c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026c16:	bf00      	nop

08026c18 <mg_mqtt_login>:
void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8026c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026c1a:	b08b      	sub	sp, #44	@ 0x2c
 8026c1c:	4605      	mov	r5, r0
 8026c1e:	460c      	mov	r4, r1
  struct mg_str cid = opts->client_id;
 8026c20:	ab02      	add	r3, sp, #8
 8026c22:	f101 0210 	add.w	r2, r1, #16
 8026c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026c2a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 8026c2e:	2300      	movs	r3, #0
 8026c30:	f88d 3000 	strb.w	r3, [sp]
 8026c34:	2204      	movs	r2, #4
 8026c36:	f88d 2001 	strb.w	r2, [sp, #1]
 8026c3a:	224d      	movs	r2, #77	@ 0x4d
 8026c3c:	f88d 2002 	strb.w	r2, [sp, #2]
 8026c40:	2251      	movs	r2, #81	@ 0x51
 8026c42:	f88d 2003 	strb.w	r2, [sp, #3]
 8026c46:	2254      	movs	r2, #84	@ 0x54
 8026c48:	f88d 2004 	strb.w	r2, [sp, #4]
 8026c4c:	f88d 2005 	strb.w	r2, [sp, #5]
 8026c50:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8026c54:	f88d 2006 	strb.w	r2, [sp, #6]
 8026c58:	f88d 3007 	strb.w	r3, [sp, #7]
  if (cid.len == 0) {
 8026c5c:	2900      	cmp	r1, #0
 8026c5e:	f000 809f 	beq.w	8026da0 <mg_mqtt_login+0x188>
  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 8026c62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8026c66:	b913      	cbnz	r3, 8026c6e <mg_mqtt_login+0x56>
 8026c68:	2304      	movs	r3, #4
 8026c6a:	f88d 3006 	strb.w	r3, [sp, #6]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 8026c6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8026c72:	2b05      	cmp	r3, #5
 8026c74:	bf14      	ite	ne
 8026c76:	2300      	movne	r3, #0
 8026c78:	2301      	moveq	r3, #1
 8026c7a:	f895 20ad 	ldrb.w	r2, [r5, #173]	@ 0xad
 8026c7e:	f363 0282 	bfi	r2, r3, #2, #1
 8026c82:	f885 20ad 	strb.w	r2, [r5, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 8026c86:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8026c8a:	00d2      	lsls	r2, r2, #3
 8026c8c:	f002 0218 	and.w	r2, r2, #24
 8026c90:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->user.len > 0) {
 8026c94:	6863      	ldr	r3, [r4, #4]
 8026c96:	2b00      	cmp	r3, #0
 8026c98:	f000 808e 	beq.w	8026db8 <mg_mqtt_login+0x1a0>
    total_len += 2 + (uint32_t) opts->user.len;
 8026c9c:	330e      	adds	r3, #14
    hdr[7] |= MQTT_HAS_USER_NAME;
 8026c9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8026ca2:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->pass.len > 0) {
 8026ca6:	68e2      	ldr	r2, [r4, #12]
 8026ca8:	b13a      	cbz	r2, 8026cba <mg_mqtt_login+0xa2>
    total_len += 2 + (uint32_t) opts->pass.len;
 8026caa:	441a      	add	r2, r3
 8026cac:	1c93      	adds	r3, r2, #2
    hdr[7] |= MQTT_HAS_PASSWORD;
 8026cae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026cb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8026cb6:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 8026cba:	69e2      	ldr	r2, [r4, #28]
 8026cbc:	b14a      	cbz	r2, 8026cd2 <mg_mqtt_login+0xba>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 8026cbe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8026cc0:	440a      	add	r2, r1
 8026cc2:	441a      	add	r2, r3
 8026cc4:	1d13      	adds	r3, r2, #4
    hdr[7] |= MQTT_HAS_WILL;
 8026cc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026cca:	f042 0204 	orr.w	r2, r2, #4
 8026cce:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8026cd2:	f894 202f 	ldrb.w	r2, [r4, #47]	@ 0x2f
 8026cd6:	b90a      	cbnz	r2, 8026cdc <mg_mqtt_login+0xc4>
 8026cd8:	9a03      	ldr	r2, [sp, #12]
 8026cda:	b92a      	cbnz	r2, 8026ce8 <mg_mqtt_login+0xd0>
 8026cdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026ce0:	f042 0202 	orr.w	r2, r2, #2
 8026ce4:	f88d 2007 	strb.w	r2, [sp, #7]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 8026ce8:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8026cec:	b12a      	cbz	r2, 8026cfa <mg_mqtt_login+0xe2>
 8026cee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8026cf2:	f042 0220 	orr.w	r2, r2, #32
 8026cf6:	f88d 2007 	strb.w	r2, [sp, #7]
  total_len += (uint32_t) cid.len;
 8026cfa:	9f03      	ldr	r7, [sp, #12]
 8026cfc:	18fe      	adds	r6, r7, r3
  if (c->is_mqtt5) {
 8026cfe:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026d02:	f013 0f04 	tst.w	r3, #4
 8026d06:	d159      	bne.n	8026dbc <mg_mqtt_login+0x1a4>
  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8026d08:	4633      	mov	r3, r6
 8026d0a:	2200      	movs	r2, #0
 8026d0c:	2101      	movs	r1, #1
 8026d0e:	4628      	mov	r0, r5
 8026d10:	f7ff feb8 	bl	8026a84 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8026d14:	2208      	movs	r2, #8
 8026d16:	4669      	mov	r1, sp
 8026d18:	4628      	mov	r0, r5
 8026d1a:	f7ff fe21 	bl	8026960 <mg_send>
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8026d1e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8026d20:	f7fe fa64 	bl	80251ec <mg_ntohs>
 8026d24:	4601      	mov	r1, r0
 8026d26:	4628      	mov	r0, r5
 8026d28:	f7ff fed7 	bl	8026ada <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8026d2c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026d30:	f013 0f04 	tst.w	r3, #4
 8026d34:	d152      	bne.n	8026ddc <mg_mqtt_login+0x1c4>
  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8026d36:	b2b8      	uxth	r0, r7
 8026d38:	f7fe fa58 	bl	80251ec <mg_ntohs>
 8026d3c:	4601      	mov	r1, r0
 8026d3e:	4628      	mov	r0, r5
 8026d40:	f7ff fecb 	bl	8026ada <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 8026d44:	463a      	mov	r2, r7
 8026d46:	9902      	ldr	r1, [sp, #8]
 8026d48:	4628      	mov	r0, r5
 8026d4a:	f7ff fe09 	bl	8026960 <mg_send>
  if (hdr[7] & MQTT_HAS_WILL) {
 8026d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8026d52:	f013 0f04 	tst.w	r3, #4
 8026d56:	d01c      	beq.n	8026d92 <mg_mqtt_login+0x17a>
    if (c->is_mqtt5)
 8026d58:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026d5c:	f013 0f04 	tst.w	r3, #4
 8026d60:	d142      	bne.n	8026de8 <mg_mqtt_login+0x1d0>
    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8026d62:	8ba0      	ldrh	r0, [r4, #28]
 8026d64:	f7fe fa42 	bl	80251ec <mg_ntohs>
 8026d68:	4601      	mov	r1, r0
 8026d6a:	4628      	mov	r0, r5
 8026d6c:	f7ff feb5 	bl	8026ada <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 8026d70:	69e2      	ldr	r2, [r4, #28]
 8026d72:	69a1      	ldr	r1, [r4, #24]
 8026d74:	4628      	mov	r0, r5
 8026d76:	f7ff fdf3 	bl	8026960 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 8026d7a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8026d7c:	f7fe fa36 	bl	80251ec <mg_ntohs>
 8026d80:	4601      	mov	r1, r0
 8026d82:	4628      	mov	r0, r5
 8026d84:	f7ff fea9 	bl	8026ada <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 8026d88:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8026d8a:	6a21      	ldr	r1, [r4, #32]
 8026d8c:	4628      	mov	r0, r5
 8026d8e:	f7ff fde7 	bl	8026960 <mg_send>
  if (opts->user.len > 0) {
 8026d92:	6860      	ldr	r0, [r4, #4]
 8026d94:	bb70      	cbnz	r0, 8026df4 <mg_mqtt_login+0x1dc>
  if (opts->pass.len > 0) {
 8026d96:	68e0      	ldr	r0, [r4, #12]
 8026d98:	2800      	cmp	r0, #0
 8026d9a:	d138      	bne.n	8026e0e <mg_mqtt_login+0x1f6>
}
 8026d9c:	b00b      	add	sp, #44	@ 0x2c
 8026d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mg_random_str(client_id, sizeof(client_id) - 1);
 8026da0:	2114      	movs	r1, #20
 8026da2:	a804      	add	r0, sp, #16
 8026da4:	f7fe f95e 	bl	8025064 <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 8026da8:	2300      	movs	r3, #0
 8026daa:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    cid = mg_str(client_id);
 8026dae:	a904      	add	r1, sp, #16
 8026db0:	a802      	add	r0, sp, #8
 8026db2:	f7fc fde9 	bl	8023988 <mg_str_s>
 8026db6:	e754      	b.n	8026c62 <mg_mqtt_login+0x4a>
  size_t total_len = 7 + 1 + 2 + 2;
 8026db8:	230c      	movs	r3, #12
 8026dba:	e774      	b.n	8026ca6 <mg_mqtt_login+0x8e>
    total_len += get_props_size(opts->props, opts->num_props);
 8026dbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026dbe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8026dc0:	f7f9 fd68 	bl	8020894 <get_props_size>
 8026dc4:	4406      	add	r6, r0
    if (hdr[7] & MQTT_HAS_WILL)
 8026dc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8026dca:	f013 0f04 	tst.w	r3, #4
 8026dce:	d09b      	beq.n	8026d08 <mg_mqtt_login+0xf0>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8026dd0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8026dd2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8026dd4:	f7f9 fd5e 	bl	8020894 <get_props_size>
 8026dd8:	4406      	add	r6, r0
 8026dda:	e795      	b.n	8026d08 <mg_mqtt_login+0xf0>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8026ddc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8026dde:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8026de0:	4628      	mov	r0, r5
 8026de2:	f7ff fe87 	bl	8026af4 <mg_send_mqtt_properties>
 8026de6:	e7a6      	b.n	8026d36 <mg_mqtt_login+0x11e>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8026de8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8026dea:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8026dec:	4628      	mov	r0, r5
 8026dee:	f7ff fe81 	bl	8026af4 <mg_send_mqtt_properties>
 8026df2:	e7b6      	b.n	8026d62 <mg_mqtt_login+0x14a>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8026df4:	b280      	uxth	r0, r0
 8026df6:	f7fe f9f9 	bl	80251ec <mg_ntohs>
 8026dfa:	4601      	mov	r1, r0
 8026dfc:	4628      	mov	r0, r5
 8026dfe:	f7ff fe6c 	bl	8026ada <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 8026e02:	6862      	ldr	r2, [r4, #4]
 8026e04:	6821      	ldr	r1, [r4, #0]
 8026e06:	4628      	mov	r0, r5
 8026e08:	f7ff fdaa 	bl	8026960 <mg_send>
 8026e0c:	e7c3      	b.n	8026d96 <mg_mqtt_login+0x17e>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8026e0e:	b280      	uxth	r0, r0
 8026e10:	f7fe f9ec 	bl	80251ec <mg_ntohs>
 8026e14:	4601      	mov	r1, r0
 8026e16:	4628      	mov	r0, r5
 8026e18:	f7ff fe5f 	bl	8026ada <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 8026e1c:	68e2      	ldr	r2, [r4, #12]
 8026e1e:	68a1      	ldr	r1, [r4, #8]
 8026e20:	4628      	mov	r0, r5
 8026e22:	f7ff fd9d 	bl	8026960 <mg_send>
}
 8026e26:	e7b9      	b.n	8026d9c <mg_mqtt_login+0x184>

08026e28 <mg_mqtt_sub>:
void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8026e28:	b530      	push	{r4, r5, lr}
 8026e2a:	b083      	sub	sp, #12
 8026e2c:	4604      	mov	r4, r0
 8026e2e:	460d      	mov	r5, r1
  uint8_t qos_ = opts->qos & 3;
 8026e30:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8026e34:	f003 0303 	and.w	r3, r3, #3
 8026e38:	f88d 3007 	strb.w	r3, [sp, #7]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8026e3c:	f890 30ad 	ldrb.w	r3, [r0, #173]	@ 0xad
 8026e40:	f013 0f04 	tst.w	r3, #4
 8026e44:	d133      	bne.n	8026eae <mg_mqtt_sub+0x86>
 8026e46:	2000      	movs	r0, #0
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 8026e48:	69eb      	ldr	r3, [r5, #28]
 8026e4a:	4403      	add	r3, r0
  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 8026e4c:	3305      	adds	r3, #5
 8026e4e:	2202      	movs	r2, #2
 8026e50:	2108      	movs	r1, #8
 8026e52:	4620      	mov	r0, r4
 8026e54:	f7ff fe16 	bl	8026a84 <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8026e58:	6862      	ldr	r2, [r4, #4]
 8026e5a:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8026e5c:	3301      	adds	r3, #1
 8026e5e:	b29b      	uxth	r3, r3
 8026e60:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8026e62:	b91b      	cbnz	r3, 8026e6c <mg_mqtt_sub+0x44>
 8026e64:	6862      	ldr	r2, [r4, #4]
 8026e66:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8026e68:	3301      	adds	r3, #1
 8026e6a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8026e6c:	6863      	ldr	r3, [r4, #4]
 8026e6e:	8d98      	ldrh	r0, [r3, #44]	@ 0x2c
 8026e70:	f7fe f9bc 	bl	80251ec <mg_ntohs>
 8026e74:	4601      	mov	r1, r0
 8026e76:	4620      	mov	r0, r4
 8026e78:	f7ff fe2f 	bl	8026ada <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8026e7c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8026e80:	f013 0f04 	tst.w	r3, #4
 8026e84:	d118      	bne.n	8026eb8 <mg_mqtt_sub+0x90>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8026e86:	8ba8      	ldrh	r0, [r5, #28]
 8026e88:	f7fe f9b0 	bl	80251ec <mg_ntohs>
 8026e8c:	4601      	mov	r1, r0
 8026e8e:	4620      	mov	r0, r4
 8026e90:	f7ff fe23 	bl	8026ada <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8026e94:	69ea      	ldr	r2, [r5, #28]
 8026e96:	69a9      	ldr	r1, [r5, #24]
 8026e98:	4620      	mov	r0, r4
 8026e9a:	f7ff fd61 	bl	8026960 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 8026e9e:	2201      	movs	r2, #1
 8026ea0:	f10d 0107 	add.w	r1, sp, #7
 8026ea4:	4620      	mov	r0, r4
 8026ea6:	f7ff fd5b 	bl	8026960 <mg_send>
}
 8026eaa:	b003      	add	sp, #12
 8026eac:	bd30      	pop	{r4, r5, pc}
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 8026eae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8026eb0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8026eb2:	f7f9 fcef 	bl	8020894 <get_props_size>
 8026eb6:	e7c7      	b.n	8026e48 <mg_mqtt_sub+0x20>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8026eb8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8026eba:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8026ebc:	4620      	mov	r0, r4
 8026ebe:	f7ff fe19 	bl	8026af4 <mg_send_mqtt_properties>
 8026ec2:	e7e0      	b.n	8026e86 <mg_mqtt_sub+0x5e>

08026ec4 <mg_mqtt_pub>:
uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8026ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026ec8:	b083      	sub	sp, #12
 8026eca:	4605      	mov	r5, r0
 8026ecc:	460c      	mov	r4, r1
  uint16_t id = opts->retransmit_id;
 8026ece:	f8b1 802c 	ldrh.w	r8, [r1, #44]	@ 0x2c
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8026ed2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8026ed6:	005b      	lsls	r3, r3, #1
 8026ed8:	f003 0306 	and.w	r3, r3, #6
 8026edc:	f891 202e 	ldrb.w	r2, [r1, #46]	@ 0x2e
 8026ee0:	2a00      	cmp	r2, #0
 8026ee2:	d057      	beq.n	8026f94 <mg_mqtt_pub+0xd0>
 8026ee4:	2201      	movs	r2, #1
 8026ee6:	ea43 0a02 	orr.w	sl, r3, r2
 8026eea:	4656      	mov	r6, sl
  size_t len = 2 + opts->topic.len + opts->message.len;
 8026eec:	69e7      	ldr	r7, [r4, #28]
 8026eee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8026ef0:	441f      	add	r7, r3
 8026ef2:	f107 0902 	add.w	r9, r7, #2
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8026ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8026fe0 <mg_mqtt_pub+0x11c>)
 8026ef8:	681b      	ldr	r3, [r3, #0]
 8026efa:	2b02      	cmp	r3, #2
 8026efc:	dc4c      	bgt.n	8026f98 <mg_mqtt_pub+0xd4>
  if (opts->qos > 0) len += 2;
 8026efe:	f894 b028 	ldrb.w	fp, [r4, #40]	@ 0x28
 8026f02:	f1bb 0f00 	cmp.w	fp, #0
 8026f06:	d001      	beq.n	8026f0c <mg_mqtt_pub+0x48>
 8026f08:	f107 0904 	add.w	r9, r7, #4
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8026f0c:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026f10:	f013 0f04 	tst.w	r3, #4
 8026f14:	d152      	bne.n	8026fbc <mg_mqtt_pub+0xf8>
  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 8026f16:	f1bb 0f00 	cmp.w	fp, #0
 8026f1a:	d004      	beq.n	8026f26 <mg_mqtt_pub+0x62>
 8026f1c:	f1b8 0f00 	cmp.w	r8, #0
 8026f20:	d001      	beq.n	8026f26 <mg_mqtt_pub+0x62>
 8026f22:	f04a 0608 	orr.w	r6, sl, #8
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8026f26:	464b      	mov	r3, r9
 8026f28:	4632      	mov	r2, r6
 8026f2a:	2103      	movs	r1, #3
 8026f2c:	4628      	mov	r0, r5
 8026f2e:	f7ff fda9 	bl	8026a84 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8026f32:	8ba0      	ldrh	r0, [r4, #28]
 8026f34:	f7fe f95a 	bl	80251ec <mg_ntohs>
 8026f38:	4601      	mov	r1, r0
 8026f3a:	4628      	mov	r0, r5
 8026f3c:	f7ff fdcd 	bl	8026ada <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 8026f40:	69e2      	ldr	r2, [r4, #28]
 8026f42:	69a1      	ldr	r1, [r4, #24]
 8026f44:	4628      	mov	r0, r5
 8026f46:	f7ff fd0b 	bl	8026960 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 8026f4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8026f4e:	b1b3      	cbz	r3, 8026f7e <mg_mqtt_pub+0xba>
    if (id == 0) {  // generate new one if not resending
 8026f50:	f1b8 0f00 	cmp.w	r8, #0
 8026f54:	d10c      	bne.n	8026f70 <mg_mqtt_pub+0xac>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8026f56:	686a      	ldr	r2, [r5, #4]
 8026f58:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8026f5a:	3301      	adds	r3, #1
 8026f5c:	b29b      	uxth	r3, r3
 8026f5e:	8593      	strh	r3, [r2, #44]	@ 0x2c
 8026f60:	b91b      	cbnz	r3, 8026f6a <mg_mqtt_pub+0xa6>
 8026f62:	686a      	ldr	r2, [r5, #4]
 8026f64:	8d93      	ldrh	r3, [r2, #44]	@ 0x2c
 8026f66:	3301      	adds	r3, #1
 8026f68:	8593      	strh	r3, [r2, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 8026f6a:	686b      	ldr	r3, [r5, #4]
 8026f6c:	f8b3 802c 	ldrh.w	r8, [r3, #44]	@ 0x2c
    mg_send_u16(c, mg_htons(id));
 8026f70:	4640      	mov	r0, r8
 8026f72:	f7fe f93b 	bl	80251ec <mg_ntohs>
 8026f76:	4601      	mov	r1, r0
 8026f78:	4628      	mov	r0, r5
 8026f7a:	f7ff fdae 	bl	8026ada <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8026f7e:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8026f82:	f013 0f04 	tst.w	r3, #4
 8026f86:	d11f      	bne.n	8026fc8 <mg_mqtt_pub+0x104>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8026f88:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8026f8a:	bb1a      	cbnz	r2, 8026fd4 <mg_mqtt_pub+0x110>
}
 8026f8c:	4640      	mov	r0, r8
 8026f8e:	b003      	add	sp, #12
 8026f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8026f94:	2200      	movs	r2, #0
 8026f96:	e7a6      	b.n	8026ee6 <mg_mqtt_pub+0x22>
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8026f98:	4b12      	ldr	r3, [pc, #72]	@ (8026fe4 <mg_mqtt_pub+0x120>)
 8026f9a:	f241 123c 	movw	r2, #4412	@ 0x113c
 8026f9e:	4912      	ldr	r1, [pc, #72]	@ (8026fe8 <mg_mqtt_pub+0x124>)
 8026fa0:	2003      	movs	r0, #3
 8026fa2:	f7fe fc29 	bl	80257f8 <mg_log_prefix>
 8026fa6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8026fa8:	6a22      	ldr	r2, [r4, #32]
 8026faa:	9201      	str	r2, [sp, #4]
 8026fac:	9300      	str	r3, [sp, #0]
 8026fae:	69a3      	ldr	r3, [r4, #24]
 8026fb0:	69e2      	ldr	r2, [r4, #28]
 8026fb2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8026fb4:	480d      	ldr	r0, [pc, #52]	@ (8026fec <mg_mqtt_pub+0x128>)
 8026fb6:	f7fc fb09 	bl	80235cc <mg_log>
 8026fba:	e7a0      	b.n	8026efe <mg_mqtt_pub+0x3a>
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8026fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026fbe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8026fc0:	f7f9 fc68 	bl	8020894 <get_props_size>
 8026fc4:	4481      	add	r9, r0
 8026fc6:	e7a6      	b.n	8026f16 <mg_mqtt_pub+0x52>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8026fc8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8026fca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8026fcc:	4628      	mov	r0, r5
 8026fce:	f7ff fd91 	bl	8026af4 <mg_send_mqtt_properties>
 8026fd2:	e7d9      	b.n	8026f88 <mg_mqtt_pub+0xc4>
  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 8026fd4:	6a21      	ldr	r1, [r4, #32]
 8026fd6:	4628      	mov	r0, r5
 8026fd8:	f7ff fcc2 	bl	8026960 <mg_send>
 8026fdc:	e7d6      	b.n	8026f8c <mg_mqtt_pub+0xc8>
 8026fde:	bf00      	nop
 8026fe0:	2000012c 	.word	0x2000012c
 8026fe4:	0803a758 	.word	0x0803a758
 8026fe8:	08039d58 	.word	0x08039d58
 8026fec:	0803a0f8 	.word	0x0803a0f8

08026ff0 <mqtt_cb>:
static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 8026ff0:	b530      	push	{r4, r5, lr}
 8026ff2:	b08f      	sub	sp, #60	@ 0x3c
 8026ff4:	4604      	mov	r4, r0
  if (ev == MG_EV_READ) {
 8026ff6:	2907      	cmp	r1, #7
 8026ff8:	f000 808f 	beq.w	802711a <mqtt_cb+0x12a>
}
 8026ffc:	b00f      	add	sp, #60	@ 0x3c
 8026ffe:	bd30      	pop	{r4, r5, pc}
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8027000:	2204      	movs	r2, #4
 8027002:	e091      	b.n	8027128 <mqtt_cb+0x138>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8027004:	4b73      	ldr	r3, [pc, #460]	@ (80271d4 <mqtt_cb+0x1e4>)
 8027006:	681b      	ldr	r3, [r3, #0]
 8027008:	2b00      	cmp	r3, #0
 802700a:	dc06      	bgt.n	802701a <mqtt_cb+0x2a>
        c->is_closing = 1;
 802700c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027010:	f043 0320 	orr.w	r3, r3, #32
 8027014:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        break;
 8027018:	e7f0      	b.n	8026ffc <mqtt_cb+0xc>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 802701a:	4b6f      	ldr	r3, [pc, #444]	@ (80271d8 <mqtt_cb+0x1e8>)
 802701c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 8027020:	496e      	ldr	r1, [pc, #440]	@ (80271dc <mqtt_cb+0x1ec>)
 8027022:	2001      	movs	r0, #1
 8027024:	f7fe fbe8 	bl	80257f8 <mg_log_prefix>
 8027028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802702a:	486d      	ldr	r0, [pc, #436]	@ (80271e0 <mqtt_cb+0x1f0>)
 802702c:	f7fc face 	bl	80235cc <mg_log>
 8027030:	e7ec      	b.n	802700c <mqtt_cb+0x1c>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8027032:	4b69      	ldr	r3, [pc, #420]	@ (80271d8 <mqtt_cb+0x1e8>)
 8027034:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 8027038:	4968      	ldr	r1, [pc, #416]	@ (80271dc <mqtt_cb+0x1ec>)
 802703a:	2004      	movs	r0, #4
 802703c:	f7fe fbdc 	bl	80257f8 <mg_log_prefix>
 8027040:	9b06      	ldr	r3, [sp, #24]
 8027042:	9301      	str	r3, [sp, #4]
 8027044:	9b07      	ldr	r3, [sp, #28]
 8027046:	9300      	str	r3, [sp, #0]
 8027048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802704a:	f89d 202a 	ldrb.w	r2, [sp, #42]	@ 0x2a
 802704e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027050:	4864      	ldr	r0, [pc, #400]	@ (80271e4 <mqtt_cb+0x1f4>)
 8027052:	f7fc fabb 	bl	80235cc <mg_log>
 8027056:	e077      	b.n	8027148 <mqtt_cb+0x158>
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8027058:	aa0b      	add	r2, sp, #44	@ 0x2c
 802705a:	2111      	movs	r1, #17
 802705c:	4620      	mov	r0, r4
 802705e:	f7fb f86b 	bl	8022138 <mg_call>
            if (mm.ack == 0) {
 8027062:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8027066:	b97b      	cbnz	r3, 8027088 <mqtt_cb+0x98>
              MG_DEBUG(("%lu Connected", c->id));
 8027068:	4b5a      	ldr	r3, [pc, #360]	@ (80271d4 <mqtt_cb+0x1e4>)
 802706a:	681b      	ldr	r3, [r3, #0]
 802706c:	2b02      	cmp	r3, #2
 802706e:	dd49      	ble.n	8027104 <mqtt_cb+0x114>
 8027070:	4b59      	ldr	r3, [pc, #356]	@ (80271d8 <mqtt_cb+0x1e8>)
 8027072:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 8027076:	4959      	ldr	r1, [pc, #356]	@ (80271dc <mqtt_cb+0x1ec>)
 8027078:	2003      	movs	r0, #3
 802707a:	f7fe fbbd 	bl	80257f8 <mg_log_prefix>
 802707e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027080:	4859      	ldr	r0, [pc, #356]	@ (80271e8 <mqtt_cb+0x1f8>)
 8027082:	f7fc faa3 	bl	80235cc <mg_log>
 8027086:	e03d      	b.n	8027104 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 8027088:	4b52      	ldr	r3, [pc, #328]	@ (80271d4 <mqtt_cb+0x1e4>)
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	2b00      	cmp	r3, #0
 802708e:	dc06      	bgt.n	802709e <mqtt_cb+0xae>
              c->is_closing = 1;
 8027090:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027094:	f043 0320 	orr.w	r3, r3, #32
 8027098:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 802709c:	e032      	b.n	8027104 <mqtt_cb+0x114>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 802709e:	4b4e      	ldr	r3, [pc, #312]	@ (80271d8 <mqtt_cb+0x1e8>)
 80270a0:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 80270a4:	494d      	ldr	r1, [pc, #308]	@ (80271dc <mqtt_cb+0x1ec>)
 80270a6:	2001      	movs	r0, #1
 80270a8:	f7fe fba6 	bl	80257f8 <mg_log_prefix>
 80270ac:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 80270b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80270b2:	484e      	ldr	r0, [pc, #312]	@ (80271ec <mqtt_cb+0x1fc>)
 80270b4:	f7fc fa8a 	bl	80235cc <mg_log>
 80270b8:	e7ea      	b.n	8027090 <mqtt_cb+0xa0>
            if (mm.qos > 0) {
 80270ba:	f89d 502b 	ldrb.w	r5, [sp, #43]	@ 0x2b
 80270be:	b1e5      	cbz	r5, 80270fa <mqtt_cb+0x10a>
              uint16_t id = mg_ntohs(mm.id);
 80270c0:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 80270c4:	f7fe f892 	bl	80251ec <mg_ntohs>
 80270c8:	f8ad 000c 	strh.w	r0, [sp, #12]
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 80270cc:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80270d0:	f013 0f04 	tst.w	r3, #4
 80270d4:	d14a      	bne.n	802716c <mqtt_cb+0x17c>
              uint32_t remaining_len = sizeof(id);
 80270d6:	2302      	movs	r3, #2
              mg_mqtt_send_header(
 80270d8:	2d02      	cmp	r5, #2
 80270da:	d049      	beq.n	8027170 <mqtt_cb+0x180>
 80270dc:	2104      	movs	r1, #4
 80270de:	2200      	movs	r2, #0
 80270e0:	4620      	mov	r0, r4
 80270e2:	f7ff fccf 	bl	8026a84 <mg_mqtt_send_header>
              mg_send(c, &id, sizeof(id));
 80270e6:	2202      	movs	r2, #2
 80270e8:	a903      	add	r1, sp, #12
 80270ea:	4620      	mov	r0, r4
 80270ec:	f7ff fc38 	bl	8026960 <mg_send>
              if (c->is_mqtt5) {
 80270f0:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80270f4:	f013 0f04 	tst.w	r3, #4
 80270f8:	d13c      	bne.n	8027174 <mqtt_cb+0x184>
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 80270fa:	aa04      	add	r2, sp, #16
 80270fc:	2110      	movs	r1, #16
 80270fe:	4620      	mov	r0, r4
 8027100:	f7fb f81a 	bl	8022138 <mg_call>
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8027104:	aa04      	add	r2, sp, #16
 8027106:	210f      	movs	r1, #15
 8027108:	4620      	mov	r0, r4
 802710a:	f7fb f815 	bl	8022138 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 802710e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027110:	2100      	movs	r1, #0
 8027112:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8027116:	f7fd ff74 	bl	8025002 <mg_iobuf_del>
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 802711a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802711e:	f013 0f04 	tst.w	r3, #4
 8027122:	f43f af6d 	beq.w	8027000 <mqtt_cb+0x10>
 8027126:	2205      	movs	r2, #5
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8027128:	ab04      	add	r3, sp, #16
 802712a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802712c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802712e:	f7fb fcc6 	bl	8022abe <mg_mqtt_parse>
      if (rc == MQTT_MALFORMED) {
 8027132:	2802      	cmp	r0, #2
 8027134:	f43f af66 	beq.w	8027004 <mqtt_cb+0x14>
      } else if (rc == MQTT_OK) {
 8027138:	2800      	cmp	r0, #0
 802713a:	f47f af5f 	bne.w	8026ffc <mqtt_cb+0xc>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 802713e:	4b25      	ldr	r3, [pc, #148]	@ (80271d4 <mqtt_cb+0x1e4>)
 8027140:	681b      	ldr	r3, [r3, #0]
 8027142:	2b03      	cmp	r3, #3
 8027144:	f73f af75 	bgt.w	8027032 <mqtt_cb+0x42>
        switch (mm.cmd) {
 8027148:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 802714c:	3b02      	subs	r3, #2
 802714e:	2b04      	cmp	r3, #4
 8027150:	d8d8      	bhi.n	8027104 <mqtt_cb+0x114>
 8027152:	a201      	add	r2, pc, #4	@ (adr r2, 8027158 <mqtt_cb+0x168>)
 8027154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027158:	08027059 	.word	0x08027059
 802715c:	080270bb 	.word	0x080270bb
 8027160:	08027105 	.word	0x08027105
 8027164:	08027189 	.word	0x08027189
 8027168:	080271af 	.word	0x080271af
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 802716c:	2304      	movs	r3, #4
 802716e:	e7b3      	b.n	80270d8 <mqtt_cb+0xe8>
              mg_mqtt_send_header(
 8027170:	2105      	movs	r1, #5
 8027172:	e7b4      	b.n	80270de <mqtt_cb+0xee>
                uint16_t zero = 0;
 8027174:	2300      	movs	r3, #0
 8027176:	f8ad 300e 	strh.w	r3, [sp, #14]
                mg_send(c, &zero, sizeof(zero));
 802717a:	2202      	movs	r2, #2
 802717c:	f10d 010e 	add.w	r1, sp, #14
 8027180:	4620      	mov	r0, r4
 8027182:	f7ff fbed 	bl	8026960 <mg_send>
 8027186:	e7b8      	b.n	80270fa <mqtt_cb+0x10a>
            uint16_t id = mg_ntohs(mm.id);
 8027188:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 802718c:	f7fe f82e 	bl	80251ec <mg_ntohs>
 8027190:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 8027194:	2302      	movs	r3, #2
 8027196:	461a      	mov	r2, r3
 8027198:	2106      	movs	r1, #6
 802719a:	4620      	mov	r0, r4
 802719c:	f7ff fc72 	bl	8026a84 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 80271a0:	2202      	movs	r2, #2
 80271a2:	f10d 010e 	add.w	r1, sp, #14
 80271a6:	4620      	mov	r0, r4
 80271a8:	f7ff fbda 	bl	8026960 <mg_send>
            break;
 80271ac:	e7aa      	b.n	8027104 <mqtt_cb+0x114>
            uint16_t id = mg_ntohs(mm.id);
 80271ae:	f8bd 0028 	ldrh.w	r0, [sp, #40]	@ 0x28
 80271b2:	f7fe f81b 	bl	80251ec <mg_ntohs>
 80271b6:	f8ad 000e 	strh.w	r0, [sp, #14]
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 80271ba:	2302      	movs	r3, #2
 80271bc:	2200      	movs	r2, #0
 80271be:	2107      	movs	r1, #7
 80271c0:	4620      	mov	r0, r4
 80271c2:	f7ff fc5f 	bl	8026a84 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 80271c6:	2202      	movs	r2, #2
 80271c8:	f10d 010e 	add.w	r1, sp, #14
 80271cc:	4620      	mov	r0, r4
 80271ce:	f7ff fbc7 	bl	8026960 <mg_send>
            break;
 80271d2:	e797      	b.n	8027104 <mqtt_cb+0x114>
 80271d4:	2000012c 	.word	0x2000012c
 80271d8:	0803a750 	.word	0x0803a750
 80271dc:	08039d58 	.word	0x08039d58
 80271e0:	0803a110 	.word	0x0803a110
 80271e4:	0803a12c 	.word	0x0803a12c
 80271e8:	0803a14c 	.word	0x0803a14c
 80271ec:	0803a15c 	.word	0x0803a15c

080271f0 <tx_tcp>:
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 80271f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80271f4:	b088      	sub	sp, #32
 80271f6:	4605      	mov	r5, r0
 80271f8:	469a      	mov	sl, r3
 80271fa:	9f15      	ldr	r7, [sp, #84]	@ 0x54
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 80271fc:	f107 0614 	add.w	r6, r7, #20
 8027200:	9601      	str	r6, [sp, #4]
 8027202:	9200      	str	r2, [sp, #0]
 8027204:	6883      	ldr	r3, [r0, #8]
 8027206:	2206      	movs	r2, #6
 8027208:	f7fe f810 	bl	802522c <tx_ip>
 802720c:	4604      	mov	r4, r0
  struct tcp *tcp = (struct tcp *) (ip + 1);
 802720e:	f100 0914 	add.w	r9, r0, #20
  memset(tcp, 0, sizeof(*tcp));
 8027212:	2200      	movs	r2, #0
 8027214:	6142      	str	r2, [r0, #20]
 8027216:	6182      	str	r2, [r0, #24]
 8027218:	61c2      	str	r2, [r0, #28]
 802721a:	6202      	str	r2, [r0, #32]
 802721c:	6242      	str	r2, [r0, #36]	@ 0x24
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 802721e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027220:	b10b      	cbz	r3, 8027226 <tx_tcp+0x36>
 8027222:	2f00      	cmp	r7, #0
 8027224:	d147      	bne.n	80272b6 <tx_tcp+0xc6>
  tcp->sport = sport;
 8027226:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 802722a:	82a3      	strh	r3, [r4, #20]
  tcp->dport = dport;
 802722c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8027230:	82e3      	strh	r3, [r4, #22]
  tcp->seq = seq;
 8027232:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027234:	61a3      	str	r3, [r4, #24]
  tcp->ack = ack;
 8027236:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027238:	61e3      	str	r3, [r4, #28]
  tcp->flags = flags;
 802723a:	f884 a021 	strb.w	sl, [r4, #33]	@ 0x21
  tcp->win = mg_htons(MIP_TCP_WIN);
 802723e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8027242:	f7fd ffd3 	bl	80251ec <mg_ntohs>
 8027246:	8460      	strh	r0, [r4, #34]	@ 0x22
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 8027248:	2350      	movs	r3, #80	@ 0x50
 802724a:	f884 3020 	strb.w	r3, [r4, #32]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 802724e:	b2bb      	uxth	r3, r7
 8027250:	3314      	adds	r3, #20
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 8027252:	2000      	movs	r0, #0
 8027254:	f88d 001c 	strb.w	r0, [sp, #28]
 8027258:	7a62      	ldrb	r2, [r4, #9]
 802725a:	f88d 201d 	strb.w	r2, [sp, #29]
 802725e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8027262:	f88d 201e 	strb.w	r2, [sp, #30]
 8027266:	f88d 301f 	strb.w	r3, [sp, #31]
  cs = csumup(cs, tcp, n);
 802726a:	b2b2      	uxth	r2, r6
 802726c:	4649      	mov	r1, r9
 802726e:	f7f9 fb71 	bl	8020954 <csumup>
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8027272:	f104 060c 	add.w	r6, r4, #12
 8027276:	2204      	movs	r2, #4
 8027278:	4631      	mov	r1, r6
 802727a:	f7f9 fb6b 	bl	8020954 <csumup>
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 802727e:	f104 0810 	add.w	r8, r4, #16
 8027282:	2204      	movs	r2, #4
 8027284:	4641      	mov	r1, r8
 8027286:	f7f9 fb65 	bl	8020954 <csumup>
  cs = csumup(cs, pseudo, sizeof(pseudo));
 802728a:	2204      	movs	r2, #4
 802728c:	a907      	add	r1, sp, #28
 802728e:	f7f9 fb61 	bl	8020954 <csumup>
  tcp->csum = csumfin(cs);
 8027292:	f7fd ffb7 	bl	8025204 <csumfin>
 8027296:	84a0      	strh	r0, [r4, #36]	@ 0x24
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8027298:	4b18      	ldr	r3, [pc, #96]	@ (80272fc <tx_tcp+0x10c>)
 802729a:	681b      	ldr	r3, [r3, #0]
 802729c:	2b03      	cmp	r3, #3
 802729e:	dc10      	bgt.n	80272c2 <tx_tcp+0xd2>
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 80272a0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80272a4:	696b      	ldr	r3, [r5, #20]
 80272a6:	1ac9      	subs	r1, r1, r3
 80272a8:	4439      	add	r1, r7
 80272aa:	4628      	mov	r0, r5
 80272ac:	f7f9 fb63 	bl	8020976 <ether_output>
}
 80272b0:	b008      	add	sp, #32
 80272b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 80272b6:	463a      	mov	r2, r7
 80272b8:	4619      	mov	r1, r3
 80272ba:	3028      	adds	r0, #40	@ 0x28
 80272bc:	f004 fe7e 	bl	802bfbc <memmove>
 80272c0:	e7b1      	b.n	8027226 <tx_tcp+0x36>
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 80272c2:	4b0f      	ldr	r3, [pc, #60]	@ (8027300 <tx_tcp+0x110>)
 80272c4:	f241 5254 	movw	r2, #5460	@ 0x1554
 80272c8:	490e      	ldr	r1, [pc, #56]	@ (8027304 <tx_tcp+0x114>)
 80272ca:	2004      	movs	r0, #4
 80272cc:	f7fe fa94 	bl	80257f8 <mg_log_prefix>
 80272d0:	8aa0      	ldrh	r0, [r4, #20]
 80272d2:	f7fd ff8b 	bl	80251ec <mg_ntohs>
 80272d6:	4681      	mov	r9, r0
 80272d8:	8ae0      	ldrh	r0, [r4, #22]
 80272da:	f7fd ff87 	bl	80251ec <mg_ntohs>
 80272de:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80272e2:	4909      	ldr	r1, [pc, #36]	@ (8027308 <tx_tcp+0x118>)
 80272e4:	9704      	str	r7, [sp, #16]
 80272e6:	9303      	str	r3, [sp, #12]
 80272e8:	9002      	str	r0, [sp, #8]
 80272ea:	f8cd 8004 	str.w	r8, [sp, #4]
 80272ee:	9100      	str	r1, [sp, #0]
 80272f0:	464b      	mov	r3, r9
 80272f2:	4632      	mov	r2, r6
 80272f4:	4805      	ldr	r0, [pc, #20]	@ (802730c <tx_tcp+0x11c>)
 80272f6:	f7fc f969 	bl	80235cc <mg_log>
 80272fa:	e7d1      	b.n	80272a0 <tx_tcp+0xb0>
 80272fc:	2000012c 	.word	0x2000012c
 8027300:	0803a714 	.word	0x0803a714
 8027304:	08039d58 	.word	0x08039d58
 8027308:	0802358d 	.word	0x0802358d
 802730c:	0803a17c 	.word	0x0803a17c

08027310 <send_syn>:
static void send_syn(struct mg_connection *c) {
 8027310:	b530      	push	{r4, r5, lr}
 8027312:	b087      	sub	sp, #28
 8027314:	4604      	mov	r4, r0
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8027316:	8b05      	ldrh	r5, [r0, #24]
 8027318:	4628      	mov	r0, r5
 802731a:	f7fd ff67 	bl	80251ec <mg_ntohs>
 802731e:	f7fd fecd 	bl	80250bc <mg_ntohl>
 8027322:	4602      	mov	r2, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8027324:	6863      	ldr	r3, [r4, #4]
 8027326:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 8027328:	2300      	movs	r3, #0
 802732a:	9305      	str	r3, [sp, #20]
 802732c:	9304      	str	r3, [sp, #16]
 802732e:	9303      	str	r3, [sp, #12]
 8027330:	9202      	str	r2, [sp, #8]
 8027332:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8027334:	9301      	str	r3, [sp, #4]
 8027336:	9500      	str	r5, [sp, #0]
 8027338:	2302      	movs	r3, #2
 802733a:	69e2      	ldr	r2, [r4, #28]
 802733c:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027340:	f7ff ff56 	bl	80271f0 <tx_tcp>
}
 8027344:	b007      	add	sp, #28
 8027346:	bd30      	pop	{r4, r5, pc}

08027348 <tx_tcp_pkt>:
                         size_t len) {
 8027348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802734c:	b087      	sub	sp, #28
 802734e:	4605      	mov	r5, r0
 8027350:	4617      	mov	r7, r2
 8027352:	4698      	mov	r8, r3
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 8027354:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8027356:	7b5c      	ldrb	r4, [r3, #13]
 8027358:	f014 0403 	ands.w	r4, r4, #3
 802735c:	bf18      	it	ne
 802735e:	2401      	movne	r4, #1
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027360:	690e      	ldr	r6, [r1, #16]
 8027362:	3606      	adds	r6, #6
 8027364:	69ca      	ldr	r2, [r1, #28]
 8027366:	f8d2 900c 	ldr.w	r9, [r2, #12]
 802736a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802736e:	f8b3 b000 	ldrh.w	fp, [r3]
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8027372:	6858      	ldr	r0, [r3, #4]
 8027374:	f7fd fea2 	bl	80250bc <mg_ntohl>
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8027378:	4420      	add	r0, r4
 802737a:	f7fd fe9f 	bl	80250bc <mg_ntohl>
 802737e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027380:	9305      	str	r3, [sp, #20]
 8027382:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027384:	9304      	str	r3, [sp, #16]
 8027386:	9003      	str	r0, [sp, #12]
 8027388:	f8cd 8008 	str.w	r8, [sp, #8]
 802738c:	f8cd b004 	str.w	fp, [sp, #4]
 8027390:	f8cd a000 	str.w	sl, [sp]
 8027394:	463b      	mov	r3, r7
 8027396:	464a      	mov	r2, r9
 8027398:	4631      	mov	r1, r6
 802739a:	4628      	mov	r0, r5
 802739c:	f7ff ff28 	bl	80271f0 <tx_tcp>
}
 80273a0:	b007      	add	sp, #28
 80273a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080273a8 <settmout>:
static void settmout(struct mg_connection *c, uint8_t type) {
 80273a8:	b530      	push	{r4, r5, lr}
 80273aa:	b083      	sub	sp, #12
 80273ac:	4604      	mov	r4, r0
 80273ae:	460d      	mov	r5, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80273b0:	6843      	ldr	r3, [r0, #4]
 80273b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 80273b4:	2901      	cmp	r1, #1
 80273b6:	d01a      	beq.n	80273ee <settmout+0x46>
 80273b8:	2903      	cmp	r1, #3
 80273ba:	d01a      	beq.n	80273f2 <settmout+0x4a>
 80273bc:	2904      	cmp	r1, #4
 80273be:	d01b      	beq.n	80273f8 <settmout+0x50>
 80273c0:	2902      	cmp	r1, #2
 80273c2:	d012      	beq.n	80273ea <settmout+0x42>
 80273c4:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
  s->timer = ifp->now + n;
 80273c8:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 80273ca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80273cc:	185b      	adds	r3, r3, r1
 80273ce:	f142 0200 	adc.w	r2, r2, #0
 80273d2:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 80273d6:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
  s->ttype = type;
 80273da:	f884 50ce 	strb.w	r5, [r4, #206]	@ 0xce
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80273de:	4b10      	ldr	r3, [pc, #64]	@ (8027420 <settmout+0x78>)
 80273e0:	681b      	ldr	r3, [r3, #0]
 80273e2:	2b03      	cmp	r3, #3
 80273e4:	dc0b      	bgt.n	80273fe <settmout+0x56>
}
 80273e6:	b003      	add	sp, #12
 80273e8:	bd30      	pop	{r4, r5, pc}
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 80273ea:	2364      	movs	r3, #100	@ 0x64
 80273ec:	e7ec      	b.n	80273c8 <settmout+0x20>
 80273ee:	2396      	movs	r3, #150	@ 0x96
 80273f0:	e7ea      	b.n	80273c8 <settmout+0x20>
 80273f2:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80273f6:	e7e7      	b.n	80273c8 <settmout+0x20>
 80273f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80273fc:	e7e4      	b.n	80273c8 <settmout+0x20>
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 80273fe:	4b09      	ldr	r3, [pc, #36]	@ (8027424 <settmout+0x7c>)
 8027400:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 8027404:	4908      	ldr	r1, [pc, #32]	@ (8027428 <settmout+0x80>)
 8027406:	2004      	movs	r0, #4
 8027408:	f7fe f9f6 	bl	80257f8 <mg_log_prefix>
 802740c:	e9d4 232e 	ldrd	r2, r3, [r4, #184]	@ 0xb8
 8027410:	e9cd 2300 	strd	r2, r3, [sp]
 8027414:	462a      	mov	r2, r5
 8027416:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027418:	4804      	ldr	r0, [pc, #16]	@ (802742c <settmout+0x84>)
 802741a:	f7fc f8d7 	bl	80235cc <mg_log>
}
 802741e:	e7e2      	b.n	80273e6 <settmout+0x3e>
 8027420:	2000012c 	.word	0x2000012c
 8027424:	0803a708 	.word	0x0803a708
 8027428:	08039d58 	.word	0x08039d58
 802742c:	0803a1a0 	.word	0x0803a1a0

08027430 <mg_io_send>:
long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8027430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027434:	b089      	sub	sp, #36	@ 0x24
 8027436:	4604      	mov	r4, r0
 8027438:	460e      	mov	r6, r1
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 802743a:	6843      	ldr	r3, [r0, #4]
 802743c:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 802743e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  len = trim_len(c, len);
 8027442:	4611      	mov	r1, r2
 8027444:	f7ff fa2e 	bl	80268a4 <trim_len>
 8027448:	4605      	mov	r5, r0
  if (c->is_udp) {
 802744a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802744e:	f013 0f01 	tst.w	r3, #1
 8027452:	d010      	beq.n	8027476 <mg_io_send+0x46>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8027454:	68ba      	ldr	r2, [r7, #8]
 8027456:	9003      	str	r0, [sp, #12]
 8027458:	9602      	str	r6, [sp, #8]
 802745a:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 802745c:	9301      	str	r3, [sp, #4]
 802745e:	f8cd 8000 	str.w	r8, [sp]
 8027462:	8b23      	ldrh	r3, [r4, #24]
 8027464:	f104 01c8 	add.w	r1, r4, #200	@ 0xc8
 8027468:	4638      	mov	r0, r7
 802746a:	f7fd ff74 	bl	8025356 <tx_udp>
  return (long) len;
 802746e:	4628      	mov	r0, r5
}
 8027470:	b009      	add	sp, #36	@ 0x24
 8027472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 8027476:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 802747a:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 802747e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8027482:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027486:	f7fd fe19 	bl	80250bc <mg_ntohl>
 802748a:	9007      	str	r0, [sp, #28]
 802748c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027490:	f7fd fe14 	bl	80250bc <mg_ntohl>
 8027494:	9505      	str	r5, [sp, #20]
 8027496:	9604      	str	r6, [sp, #16]
 8027498:	9003      	str	r0, [sp, #12]
 802749a:	9b07      	ldr	r3, [sp, #28]
 802749c:	9302      	str	r3, [sp, #8]
 802749e:	f8cd b004 	str.w	fp, [sp, #4]
 80274a2:	f8cd a000 	str.w	sl, [sp]
 80274a6:	2318      	movs	r3, #24
 80274a8:	4642      	mov	r2, r8
 80274aa:	4649      	mov	r1, r9
 80274ac:	4638      	mov	r0, r7
 80274ae:	f7ff fe9f 	bl	80271f0 <tx_tcp>
    if (sent == 0) {
 80274b2:	b180      	cbz	r0, 80274d6 <mg_io_send+0xa6>
    } else if (sent == (size_t) -1) {
 80274b4:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 80274b8:	d010      	beq.n	80274dc <mg_io_send+0xac>
      s->seq += (uint32_t) len;
 80274ba:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80274be:	442b      	add	r3, r5
 80274c0:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 80274c4:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 80274c8:	2b01      	cmp	r3, #1
 80274ca:	d1d0      	bne.n	802746e <mg_io_send+0x3e>
 80274cc:	2100      	movs	r1, #0
 80274ce:	4620      	mov	r0, r4
 80274d0:	f7ff ff6a 	bl	80273a8 <settmout>
 80274d4:	e7cb      	b.n	802746e <mg_io_send+0x3e>
      return MG_IO_WAIT;
 80274d6:	f06f 0001 	mvn.w	r0, #1
 80274da:	e7c9      	b.n	8027470 <mg_io_send+0x40>
      return MG_IO_ERR;
 80274dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80274e0:	e7c6      	b.n	8027470 <mg_io_send+0x40>
	...

080274e4 <write_conn>:
static void write_conn(struct mg_connection *c) {
 80274e4:	b510      	push	{r4, lr}
 80274e6:	b082      	sub	sp, #8
 80274e8:	4604      	mov	r4, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80274ea:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
                       : mg_io_send(c, c->send.buf, c->send.len);
 80274ee:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80274f2:	d00b      	beq.n	802750c <write_conn+0x28>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80274f4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80274f6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80274f8:	f7fd fcbc 	bl	8024e74 <mg_tls_send>
 80274fc:	9001      	str	r0, [sp, #4]
  if (len == MG_IO_ERR) {
 80274fe:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 8027502:	d008      	beq.n	8027516 <write_conn+0x32>
  } else if (len > 0) {
 8027504:	2800      	cmp	r0, #0
 8027506:	dc0b      	bgt.n	8027520 <write_conn+0x3c>
}
 8027508:	b002      	add	sp, #8
 802750a:	bd10      	pop	{r4, pc}
                       : mg_io_send(c, c->send.buf, c->send.len);
 802750c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 802750e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8027510:	f7ff ff8e 	bl	8027430 <mg_io_send>
 8027514:	e7f2      	b.n	80274fc <write_conn+0x18>
    mg_error(c, "tx err");
 8027516:	4908      	ldr	r1, [pc, #32]	@ (8027538 <write_conn+0x54>)
 8027518:	4620      	mov	r0, r4
 802751a:	f7fe fa55 	bl	80259c8 <mg_error>
 802751e:	e7f3      	b.n	8027508 <write_conn+0x24>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8027520:	4602      	mov	r2, r0
 8027522:	2100      	movs	r1, #0
 8027524:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8027528:	f7fd fd6b 	bl	8025002 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 802752c:	aa01      	add	r2, sp, #4
 802752e:	2108      	movs	r1, #8
 8027530:	4620      	mov	r0, r4
 8027532:	f7fa fe01 	bl	8022138 <mg_call>
}
 8027536:	e7e7      	b.n	8027508 <write_conn+0x24>
 8027538:	0803a1b0 	.word	0x0803a1b0

0802753c <init_closure>:
  if (c->is_udp == false && c->is_listening == false &&
 802753c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 8027540:	f240 1221 	movw	r2, #289	@ 0x121
 8027544:	421a      	tst	r2, r3
 8027546:	d000      	beq.n	802754a <init_closure+0xe>
 8027548:	4770      	bx	lr
static void init_closure(struct mg_connection *c) {
 802754a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802754e:	b086      	sub	sp, #24
 8027550:	4604      	mov	r4, r0
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8027552:	6843      	ldr	r3, [r0, #4]
    struct mg_tcpip_if *ifp =
 8027554:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027556:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 802755a:	f100 07c8 	add.w	r7, r0, #200	@ 0xc8
 802755e:	f8b0 9018 	ldrh.w	r9, [r0, #24]
 8027562:	f8b0 a02c 	ldrh.w	sl, [r0, #44]	@ 0x2c
 8027566:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 802756a:	f7fd fda7 	bl	80250bc <mg_ntohl>
 802756e:	4605      	mov	r5, r0
 8027570:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027574:	f7fd fda2 	bl	80250bc <mg_ntohl>
 8027578:	2300      	movs	r3, #0
 802757a:	9305      	str	r3, [sp, #20]
 802757c:	9304      	str	r3, [sp, #16]
 802757e:	9003      	str	r0, [sp, #12]
 8027580:	9502      	str	r5, [sp, #8]
 8027582:	f8cd a004 	str.w	sl, [sp, #4]
 8027586:	f8cd 9000 	str.w	r9, [sp]
 802758a:	2311      	movs	r3, #17
 802758c:	4642      	mov	r2, r8
 802758e:	4639      	mov	r1, r7
 8027590:	4630      	mov	r0, r6
 8027592:	f7ff fe2d 	bl	80271f0 <tx_tcp>
    settmout(c, MIP_TTYPE_FIN);
 8027596:	2104      	movs	r1, #4
 8027598:	4620      	mov	r0, r4
 802759a:	f7ff ff05 	bl	80273a8 <settmout>
}
 802759e:	b006      	add	sp, #24
 80275a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080275a4 <mg_connect_resolved>:
void mg_connect_resolved(struct mg_connection *c) {
 80275a4:	b530      	push	{r4, r5, lr}
 80275a6:	b085      	sub	sp, #20
 80275a8:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80275aa:	6843      	ldr	r3, [r0, #4]
 80275ac:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80275ae:	69c3      	ldr	r3, [r0, #28]
 80275b0:	9303      	str	r3, [sp, #12]
  c->is_resolving = 0;
 80275b2:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80275b6:	f36f 03c3 	bfc	r3, #3, #1
 80275ba:	f880 30ac 	strb.w	r3, [r0, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 80275be:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 80275c2:	2b00      	cmp	r3, #0
 80275c4:	db03      	blt.n	80275ce <mg_connect_resolved+0x2a>
 80275c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80275ca:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 80275ce:	68ab      	ldr	r3, [r5, #8]
 80275d0:	60a3      	str	r3, [r4, #8]
  c->loc.port = mg_htons(ifp->eport++);
 80275d2:	f8b5 0068 	ldrh.w	r0, [r5, #104]	@ 0x68
 80275d6:	1c43      	adds	r3, r0, #1
 80275d8:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
 80275dc:	f7fd fe06 	bl	80251ec <mg_ntohs>
 80275e0:	8320      	strh	r0, [r4, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 80275e2:	4b51      	ldr	r3, [pc, #324]	@ (8027728 <mg_connect_resolved+0x184>)
 80275e4:	681b      	ldr	r3, [r3, #0]
 80275e6:	2b02      	cmp	r3, #2
 80275e8:	dc36      	bgt.n	8027658 <mg_connect_resolved+0xb4>
  mg_call(c, MG_EV_RESOLVE, NULL);
 80275ea:	2200      	movs	r2, #0
 80275ec:	2103      	movs	r1, #3
 80275ee:	4620      	mov	r0, r4
 80275f0:	f7fa fda2 	bl	8022138 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 80275f4:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 80275f8:	f013 0301 	ands.w	r3, r3, #1
 80275fc:	d009      	beq.n	8027612 <mg_connect_resolved+0x6e>
 80275fe:	9903      	ldr	r1, [sp, #12]
 8027600:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8027604:	d03b      	beq.n	802767e <mg_connect_resolved+0xda>
 8027606:	68aa      	ldr	r2, [r5, #8]
 8027608:	68e8      	ldr	r0, [r5, #12]
 802760a:	ea62 0200 	orn	r2, r2, r0
 802760e:	4291      	cmp	r1, r2
 8027610:	d035      	beq.n	802767e <mg_connect_resolved+0xda>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8027612:	68aa      	ldr	r2, [r5, #8]
 8027614:	2a00      	cmp	r2, #0
 8027616:	d046      	beq.n	80276a6 <mg_connect_resolved+0x102>
 8027618:	9903      	ldr	r1, [sp, #12]
 802761a:	68e8      	ldr	r0, [r5, #12]
 802761c:	404a      	eors	r2, r1
 802761e:	4202      	tst	r2, r0
 8027620:	d141      	bne.n	80276a6 <mg_connect_resolved+0x102>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8027622:	692a      	ldr	r2, [r5, #16]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8027624:	4291      	cmp	r1, r2
 8027626:	d03e      	beq.n	80276a6 <mg_connect_resolved+0x102>
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8027628:	4b3f      	ldr	r3, [pc, #252]	@ (8027728 <mg_connect_resolved+0x184>)
 802762a:	681b      	ldr	r3, [r3, #0]
 802762c:	2b02      	cmp	r3, #2
 802762e:	dc2e      	bgt.n	802768e <mg_connect_resolved+0xea>
    arp_ask(ifp, rem_ip);
 8027630:	9903      	ldr	r1, [sp, #12]
 8027632:	4628      	mov	r0, r5
 8027634:	f7fd fed7 	bl	80253e6 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8027638:	2102      	movs	r1, #2
 802763a:	4620      	mov	r0, r4
 802763c:	f7ff feb4 	bl	80273a8 <settmout>
    c->is_arplooking = 1;
 8027640:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027644:	f043 0310 	orr.w	r3, r3, #16
 8027648:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->is_connecting = 1;
 802764c:	b2db      	uxtb	r3, r3
 802764e:	f043 0320 	orr.w	r3, r3, #32
 8027652:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
 8027656:	e018      	b.n	802768a <mg_connect_resolved+0xe6>
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8027658:	4b34      	ldr	r3, [pc, #208]	@ (802772c <mg_connect_resolved+0x188>)
 802765a:	f241 724f 	movw	r2, #5967	@ 0x174f
 802765e:	4934      	ldr	r1, [pc, #208]	@ (8027730 <mg_connect_resolved+0x18c>)
 8027660:	2003      	movs	r0, #3
 8027662:	f7fe f8c9 	bl	80257f8 <mg_log_prefix>
 8027666:	4a33      	ldr	r2, [pc, #204]	@ (8027734 <mg_connect_resolved+0x190>)
 8027668:	f104 031c 	add.w	r3, r4, #28
 802766c:	9301      	str	r3, [sp, #4]
 802766e:	9200      	str	r2, [sp, #0]
 8027670:	f104 0308 	add.w	r3, r4, #8
 8027674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027676:	4830      	ldr	r0, [pc, #192]	@ (8027738 <mg_connect_resolved+0x194>)
 8027678:	f7fb ffa8 	bl	80235cc <mg_log>
 802767c:	e7b5      	b.n	80275ea <mg_connect_resolved+0x46>
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 802767e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027682:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 8027686:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
}
 802768a:	b005      	add	sp, #20
 802768c:	bd30      	pop	{r4, r5, pc}
    MG_DEBUG(("%lu ARP lookup...", c->id));
 802768e:	4b27      	ldr	r3, [pc, #156]	@ (802772c <mg_connect_resolved+0x188>)
 8027690:	f241 7258 	movw	r2, #5976	@ 0x1758
 8027694:	4926      	ldr	r1, [pc, #152]	@ (8027730 <mg_connect_resolved+0x18c>)
 8027696:	2003      	movs	r0, #3
 8027698:	f7fe f8ae 	bl	80257f8 <mg_log_prefix>
 802769c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802769e:	4827      	ldr	r0, [pc, #156]	@ (802773c <mg_connect_resolved+0x198>)
 80276a0:	f7fb ff94 	bl	80235cc <mg_log>
 80276a4:	e7c4      	b.n	8027630 <mg_connect_resolved+0x8c>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 80276a6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80276aa:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
 80276ae:	2ae0      	cmp	r2, #224	@ 0xe0
 80276b0:	d00e      	beq.n	80276d0 <mg_connect_resolved+0x12c>
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 80276b2:	f8d5 2046 	ldr.w	r2, [r5, #70]	@ 0x46
 80276b6:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 80276ba:	f8b5 204a 	ldrh.w	r2, [r5, #74]	@ 0x4a
 80276be:	f8a4 20cc 	strh.w	r2, [r4, #204]	@ 0xcc
    if (c->is_udp) {
 80276c2:	b31b      	cbz	r3, 802770c <mg_connect_resolved+0x168>
      mg_call(c, MG_EV_CONNECT, NULL);
 80276c4:	2200      	movs	r2, #0
 80276c6:	2104      	movs	r1, #4
 80276c8:	4620      	mov	r0, r4
 80276ca:	f7fa fd35 	bl	8022138 <mg_call>
 80276ce:	e7dc      	b.n	802768a <mg_connect_resolved+0xe6>
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 80276d0:	4b1b      	ldr	r3, [pc, #108]	@ (8027740 <mg_connect_resolved+0x19c>)
 80276d2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80276d6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80276da:	0c1b      	lsrs	r3, r3, #16
 80276dc:	f88d 300a 	strb.w	r3, [sp, #10]
    memcpy(s->mac, mcastp, 3);
 80276e0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80276e4:	b2db      	uxtb	r3, r3
 80276e6:	f8a4 20c8 	strh.w	r2, [r4, #200]	@ 0xc8
 80276ea:	f884 30ca 	strb.w	r3, [r4, #202]	@ 0xca
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 80276ee:	f8bd 200d 	ldrh.w	r2, [sp, #13]
 80276f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80276f6:	f8a4 20cb 	strh.w	r2, [r4, #203]	@ 0xcb
 80276fa:	f884 30cd 	strb.w	r3, [r4, #205]	@ 0xcd
    s->mac[3] &= 0x7F;
 80276fe:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8027702:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8027706:	f884 30cb 	strb.w	r3, [r4, #203]	@ 0xcb
 802770a:	e7be      	b.n	802768a <mg_connect_resolved+0xe6>
      send_syn(c);
 802770c:	4620      	mov	r0, r4
 802770e:	f7ff fdff 	bl	8027310 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8027712:	2103      	movs	r1, #3
 8027714:	4620      	mov	r0, r4
 8027716:	f7ff fe47 	bl	80273a8 <settmout>
      c->is_connecting = 1;
 802771a:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802771e:	f043 0320 	orr.w	r3, r3, #32
 8027722:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
}
 8027726:	e7b0      	b.n	802768a <mg_connect_resolved+0xe6>
 8027728:	2000012c 	.word	0x2000012c
 802772c:	0803a6e4 	.word	0x0803a6e4
 8027730:	08039d58 	.word	0x08039d58
 8027734:	08025725 	.word	0x08025725
 8027738:	0803a1b8 	.word	0x0803a1b8
 802773c:	0803a1c8 	.word	0x0803a1c8
 8027740:	0803533c 	.word	0x0803533c

08027744 <dns_cb>:
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8027744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027746:	b0c9      	sub	sp, #292	@ 0x124
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8027748:	6847      	ldr	r7, [r0, #4]
  if (ev == MG_EV_POLL) {
 802774a:	2902      	cmp	r1, #2
 802774c:	d009      	beq.n	8027762 <dns_cb+0x1e>
 802774e:	4604      	mov	r4, r0
 8027750:	f107 0630 	add.w	r6, r7, #48	@ 0x30
  } else if (ev == MG_EV_READ) {
 8027754:	2907      	cmp	r1, #7
 8027756:	d016      	beq.n	8027786 <dns_cb+0x42>
  } else if (ev == MG_EV_CLOSE) {
 8027758:	2909      	cmp	r1, #9
 802775a:	f000 809a 	beq.w	8027892 <dns_cb+0x14e>
}
 802775e:	b049      	add	sp, #292	@ 0x124
 8027760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint64_t now = *(uint64_t *) ev_data;
 8027762:	6816      	ldr	r6, [r2, #0]
 8027764:	6855      	ldr	r5, [r2, #4]
    for (d = *head; d != NULL; d = tmp) {
 8027766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027768:	e000      	b.n	802776c <dns_cb+0x28>
static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 802776a:	4623      	mov	r3, r4
    for (d = *head; d != NULL; d = tmp) {
 802776c:	2b00      	cmp	r3, #0
 802776e:	d0f6      	beq.n	802775e <dns_cb+0x1a>
      tmp = d->next;
 8027770:	681c      	ldr	r4, [r3, #0]
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8027772:	6899      	ldr	r1, [r3, #8]
 8027774:	68da      	ldr	r2, [r3, #12]
 8027776:	42b1      	cmp	r1, r6
 8027778:	41aa      	sbcs	r2, r5
 802777a:	d2f6      	bcs.n	802776a <dns_cb+0x26>
 802777c:	494c      	ldr	r1, [pc, #304]	@ (80278b0 <dns_cb+0x16c>)
 802777e:	6858      	ldr	r0, [r3, #4]
 8027780:	f7fe f922 	bl	80259c8 <mg_error>
 8027784:	e7f1      	b.n	802776a <dns_cb+0x26>
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8027786:	aa02      	add	r2, sp, #8
 8027788:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802778a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802778c:	f7fe f870 	bl	8025870 <mg_dns_parse>
 8027790:	b9c8      	cbnz	r0, 80277c6 <dns_cb+0x82>
      MG_ERROR(("Unexpected DNS response:"));
 8027792:	4b48      	ldr	r3, [pc, #288]	@ (80278b4 <dns_cb+0x170>)
 8027794:	681b      	ldr	r3, [r3, #0]
 8027796:	2b00      	cmp	r3, #0
 8027798:	dc0a      	bgt.n	80277b0 <dns_cb+0x6c>
      mg_hexdump(c->recv.buf, c->recv.len);
 802779a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802779c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 802779e:	f7fb f875 	bl	802288c <mg_hexdump>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80277a2:	4b44      	ldr	r3, [pc, #272]	@ (80278b4 <dns_cb+0x170>)
 80277a4:	681b      	ldr	r3, [r3, #0]
 80277a6:	2b00      	cmp	r3, #0
 80277a8:	dc68      	bgt.n	802787c <dns_cb+0x138>
    c->recv.len = 0;
 80277aa:	2300      	movs	r3, #0
 80277ac:	6423      	str	r3, [r4, #64]	@ 0x40
 80277ae:	e7d6      	b.n	802775e <dns_cb+0x1a>
      MG_ERROR(("Unexpected DNS response:"));
 80277b0:	4b41      	ldr	r3, [pc, #260]	@ (80278b8 <dns_cb+0x174>)
 80277b2:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 80277b6:	4941      	ldr	r1, [pc, #260]	@ (80278bc <dns_cb+0x178>)
 80277b8:	2001      	movs	r0, #1
 80277ba:	f7fe f81d 	bl	80257f8 <mg_log_prefix>
 80277be:	4840      	ldr	r0, [pc, #256]	@ (80278c0 <dns_cb+0x17c>)
 80277c0:	f7fb ff04 	bl	80235cc <mg_log>
 80277c4:	e7e9      	b.n	802779a <dns_cb+0x56>
      for (d = *head; d != NULL; d = tmp) {
 80277c6:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
    int resolved = 0;
 80277c8:	2100      	movs	r1, #0
      for (d = *head; d != NULL; d = tmp) {
 80277ca:	e008      	b.n	80277de <dns_cb+0x9a>
            mg_connect_resolved(d->c);
 80277cc:	6868      	ldr	r0, [r5, #4]
 80277ce:	f7ff fee9 	bl	80275a4 <mg_connect_resolved>
        mg_dns_free(head, d);
 80277d2:	4629      	mov	r1, r5
 80277d4:	4630      	mov	r0, r6
 80277d6:	f7f9 fad8 	bl	8020d8a <mg_dns_free>
        resolved = 1;
 80277da:	2101      	movs	r1, #1
 80277dc:	463d      	mov	r5, r7
      for (d = *head; d != NULL; d = tmp) {
 80277de:	2d00      	cmp	r5, #0
 80277e0:	d049      	beq.n	8027876 <dns_cb+0x132>
        tmp = d->next;
 80277e2:	682f      	ldr	r7, [r5, #0]
        if (dm.txnid != d->txnid) continue;
 80277e4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80277e8:	8a2b      	ldrh	r3, [r5, #16]
 80277ea:	429a      	cmp	r2, r3
 80277ec:	d1f6      	bne.n	80277dc <dns_cb+0x98>
        if (d->c->is_resolving) {
 80277ee:	6868      	ldr	r0, [r5, #4]
 80277f0:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 80277f4:	f013 0f08 	tst.w	r3, #8
 80277f8:	d02c      	beq.n	8027854 <dns_cb+0x110>
          if (dm.resolved) {
 80277fa:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80277fe:	b323      	cbz	r3, 802784a <dns_cb+0x106>
            dm.addr.port = d->c->rem.port;  // Save port
 8027800:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8027802:	f8ad 301c 	strh.w	r3, [sp, #28]
            d->c->rem = dm.addr;            // Copy resolved address
 8027806:	686b      	ldr	r3, [r5, #4]
 8027808:	f103 0c1c 	add.w	ip, r3, #28
 802780c:	f10d 0e0c 	add.w	lr, sp, #12
 8027810:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8027814:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8027818:	f8de 3000 	ldr.w	r3, [lr]
 802781c:	f8cc 3000 	str.w	r3, [ip]
            MG_DEBUG(
 8027820:	4b24      	ldr	r3, [pc, #144]	@ (80278b4 <dns_cb+0x170>)
 8027822:	681b      	ldr	r3, [r3, #0]
 8027824:	2b02      	cmp	r3, #2
 8027826:	ddd1      	ble.n	80277cc <dns_cb+0x88>
 8027828:	4b23      	ldr	r3, [pc, #140]	@ (80278b8 <dns_cb+0x174>)
 802782a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 802782e:	4923      	ldr	r1, [pc, #140]	@ (80278bc <dns_cb+0x178>)
 8027830:	2003      	movs	r0, #3
 8027832:	f7fd ffe1 	bl	80257f8 <mg_log_prefix>
 8027836:	686b      	ldr	r3, [r5, #4]
 8027838:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802783a:	331c      	adds	r3, #28
 802783c:	9300      	str	r3, [sp, #0]
 802783e:	4b21      	ldr	r3, [pc, #132]	@ (80278c4 <dns_cb+0x180>)
 8027840:	aa08      	add	r2, sp, #32
 8027842:	4821      	ldr	r0, [pc, #132]	@ (80278c8 <dns_cb+0x184>)
 8027844:	f7fb fec2 	bl	80235cc <mg_log>
 8027848:	e7c0      	b.n	80277cc <dns_cb+0x88>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 802784a:	aa08      	add	r2, sp, #32
 802784c:	491f      	ldr	r1, [pc, #124]	@ (80278cc <dns_cb+0x188>)
 802784e:	f7fe f8bb 	bl	80259c8 <mg_error>
 8027852:	e7be      	b.n	80277d2 <dns_cb+0x8e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8027854:	4b17      	ldr	r3, [pc, #92]	@ (80278b4 <dns_cb+0x170>)
 8027856:	681b      	ldr	r3, [r3, #0]
 8027858:	2b00      	cmp	r3, #0
 802785a:	ddba      	ble.n	80277d2 <dns_cb+0x8e>
 802785c:	4b16      	ldr	r3, [pc, #88]	@ (80278b8 <dns_cb+0x174>)
 802785e:	f240 42da 	movw	r2, #1242	@ 0x4da
 8027862:	4916      	ldr	r1, [pc, #88]	@ (80278bc <dns_cb+0x178>)
 8027864:	2001      	movs	r0, #1
 8027866:	f7fd ffc7 	bl	80257f8 <mg_log_prefix>
 802786a:	686b      	ldr	r3, [r5, #4]
 802786c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802786e:	4818      	ldr	r0, [pc, #96]	@ (80278d0 <dns_cb+0x18c>)
 8027870:	f7fb feac 	bl	80235cc <mg_log>
 8027874:	e7ad      	b.n	80277d2 <dns_cb+0x8e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8027876:	2900      	cmp	r1, #0
 8027878:	d197      	bne.n	80277aa <dns_cb+0x66>
 802787a:	e792      	b.n	80277a2 <dns_cb+0x5e>
 802787c:	4b0e      	ldr	r3, [pc, #56]	@ (80278b8 <dns_cb+0x174>)
 802787e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8027882:	490e      	ldr	r1, [pc, #56]	@ (80278bc <dns_cb+0x178>)
 8027884:	2001      	movs	r0, #1
 8027886:	f7fd ffb7 	bl	80257f8 <mg_log_prefix>
 802788a:	4812      	ldr	r0, [pc, #72]	@ (80278d4 <dns_cb+0x190>)
 802788c:	f7fb fe9e 	bl	80235cc <mg_log>
 8027890:	e78b      	b.n	80277aa <dns_cb+0x66>
    for (d = *head; d != NULL; d = tmp) {
 8027892:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8027894:	2c00      	cmp	r4, #0
 8027896:	f43f af62 	beq.w	802775e <dns_cb+0x1a>
      tmp = d->next;
 802789a:	6825      	ldr	r5, [r4, #0]
      mg_error(d->c, "DNS error");
 802789c:	490e      	ldr	r1, [pc, #56]	@ (80278d8 <dns_cb+0x194>)
 802789e:	6860      	ldr	r0, [r4, #4]
 80278a0:	f7fe f892 	bl	80259c8 <mg_error>
      mg_dns_free(head, d);
 80278a4:	4621      	mov	r1, r4
 80278a6:	4630      	mov	r0, r6
 80278a8:	f7f9 fa6f 	bl	8020d8a <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 80278ac:	462c      	mov	r4, r5
 80278ae:	e7f1      	b.n	8027894 <dns_cb+0x150>
 80278b0:	0803a1dc 	.word	0x0803a1dc
 80278b4:	2000012c 	.word	0x2000012c
 80278b8:	0803a7b8 	.word	0x0803a7b8
 80278bc:	08039d58 	.word	0x08039d58
 80278c0:	0803a1e8 	.word	0x0803a1e8
 80278c4:	08025709 	.word	0x08025709
 80278c8:	0803a204 	.word	0x0803a204
 80278cc:	0803a214 	.word	0x0803a214
 80278d0:	0803a22c 	.word	0x0803a22c
 80278d4:	0803a244 	.word	0x0803a244
 80278d8:	0803a254 	.word	0x0803a254

080278dc <tx_dhcp_discover>:
static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 80278dc:	b510      	push	{r4, lr}
 80278de:	b086      	sub	sp, #24
 80278e0:	4604      	mov	r4, r0
  uint8_t opts[] = {
 80278e2:	4a12      	ldr	r2, [pc, #72]	@ (802792c <tx_dhcp_discover+0x50>)
 80278e4:	ab04      	add	r3, sp, #16
 80278e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80278ea:	e883 0003 	stmia.w	r3, {r0, r1}
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 80278ee:	2200      	movs	r2, #0
 80278f0:	9202      	str	r2, [sp, #8]
 80278f2:	2108      	movs	r1, #8
 80278f4:	9101      	str	r1, [sp, #4]
 80278f6:	9300      	str	r3, [sp, #0]
 80278f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80278fc:	490c      	ldr	r1, [pc, #48]	@ (8027930 <tx_dhcp_discover+0x54>)
 80278fe:	4620      	mov	r0, r4
 8027900:	f7fd fdb6 	bl	8025470 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8027904:	4b0b      	ldr	r3, [pc, #44]	@ (8027934 <tx_dhcp_discover+0x58>)
 8027906:	681b      	ldr	r3, [r3, #0]
 8027908:	2b02      	cmp	r3, #2
 802790a:	dc01      	bgt.n	8027910 <tx_dhcp_discover+0x34>
}
 802790c:	b006      	add	sp, #24
 802790e:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 8027910:	4b09      	ldr	r3, [pc, #36]	@ (8027938 <tx_dhcp_discover+0x5c>)
 8027912:	f241 4270 	movw	r2, #5232	@ 0x1470
 8027916:	4909      	ldr	r1, [pc, #36]	@ (802793c <tx_dhcp_discover+0x60>)
 8027918:	2003      	movs	r0, #3
 802791a:	f7fd ff6d 	bl	80257f8 <mg_log_prefix>
 802791e:	4622      	mov	r2, r4
 8027920:	4907      	ldr	r1, [pc, #28]	@ (8027940 <tx_dhcp_discover+0x64>)
 8027922:	4808      	ldr	r0, [pc, #32]	@ (8027944 <tx_dhcp_discover+0x68>)
 8027924:	f7fb fe52 	bl	80235cc <mg_log>
}
 8027928:	e7f0      	b.n	802790c <tx_dhcp_discover+0x30>
 802792a:	bf00      	nop
 802792c:	0803a280 	.word	0x0803a280
 8027930:	0803a7e0 	.word	0x0803a7e0
 8027934:	2000012c 	.word	0x2000012c
 8027938:	0803a6b4 	.word	0x0803a6b4
 802793c:	08039d58 	.word	0x08039d58
 8027940:	0802359d 	.word	0x0802359d
 8027944:	0803a260 	.word	0x0803a260

08027948 <tx_dhcp_request_re>:
                               uint32_t ip_src, uint32_t ip_dst) {
 8027948:	b510      	push	{r4, lr}
 802794a:	b086      	sub	sp, #24
  uint8_t opts[] = {
 802794c:	4c0d      	ldr	r4, [pc, #52]	@ (8027984 <tx_dhcp_request_re+0x3c>)
 802794e:	9405      	str	r4, [sp, #20]
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 8027950:	2401      	movs	r4, #1
 8027952:	9402      	str	r4, [sp, #8]
 8027954:	2404      	movs	r4, #4
 8027956:	9401      	str	r4, [sp, #4]
 8027958:	ac05      	add	r4, sp, #20
 802795a:	9400      	str	r4, [sp, #0]
 802795c:	f7fd fd88 	bl	8025470 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8027960:	4b09      	ldr	r3, [pc, #36]	@ (8027988 <tx_dhcp_request_re+0x40>)
 8027962:	681b      	ldr	r3, [r3, #0]
 8027964:	2b02      	cmp	r3, #2
 8027966:	dc01      	bgt.n	802796c <tx_dhcp_request_re+0x24>
}
 8027968:	b006      	add	sp, #24
 802796a:	bd10      	pop	{r4, pc}
  MG_DEBUG(("DHCP req sent"));
 802796c:	4b07      	ldr	r3, [pc, #28]	@ (802798c <tx_dhcp_request_re+0x44>)
 802796e:	f241 4266 	movw	r2, #5222	@ 0x1466
 8027972:	4907      	ldr	r1, [pc, #28]	@ (8027990 <tx_dhcp_request_re+0x48>)
 8027974:	2003      	movs	r0, #3
 8027976:	f7fd ff3f 	bl	80257f8 <mg_log_prefix>
 802797a:	4806      	ldr	r0, [pc, #24]	@ (8027994 <tx_dhcp_request_re+0x4c>)
 802797c:	f7fb fe26 	bl	80235cc <mg_log>
}
 8027980:	e7f2      	b.n	8027968 <tx_dhcp_request_re+0x20>
 8027982:	bf00      	nop
 8027984:	ff030135 	.word	0xff030135
 8027988:	2000012c 	.word	0x2000012c
 802798c:	0803a690 	.word	0x0803a690
 8027990:	08039d58 	.word	0x08039d58
 8027994:	0803a28c 	.word	0x0803a28c

08027998 <rx_arp>:
static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8027998:	b5f0      	push	{r4, r5, r6, r7, lr}
 802799a:	b083      	sub	sp, #12
 802799c:	4604      	mov	r4, r0
 802799e:	460d      	mov	r5, r1
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80279a0:	698e      	ldr	r6, [r1, #24]
 80279a2:	88f7      	ldrh	r7, [r6, #6]
 80279a4:	2001      	movs	r0, #1
 80279a6:	f7fd fc21 	bl	80251ec <mg_ntohs>
 80279aa:	4287      	cmp	r7, r0
 80279ac:	d006      	beq.n	80279bc <rx_arp+0x24>
  } else if (pkt->arp->op == mg_htons(2)) {
 80279ae:	2002      	movs	r0, #2
 80279b0:	f7fd fc1c 	bl	80251ec <mg_ntohs>
 80279b4:	4287      	cmp	r7, r0
 80279b6:	d05a      	beq.n	8027a6e <rx_arp+0xd6>
}
 80279b8:	b003      	add	sp, #12
 80279ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 80279bc:	69b2      	ldr	r2, [r6, #24]
 80279be:	68a3      	ldr	r3, [r4, #8]
 80279c0:	429a      	cmp	r2, r3
 80279c2:	d1f4      	bne.n	80279ae <rx_arp+0x16>
    struct eth *eth = (struct eth *) ifp->tx.buf;
 80279c4:	6966      	ldr	r6, [r4, #20]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 80279c6:	692b      	ldr	r3, [r5, #16]
 80279c8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80279cc:	6032      	str	r2, [r6, #0]
 80279ce:	895b      	ldrh	r3, [r3, #10]
 80279d0:	80b3      	strh	r3, [r6, #4]
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 80279d2:	6823      	ldr	r3, [r4, #0]
 80279d4:	f8c6 3006 	str.w	r3, [r6, #6]
 80279d8:	88a3      	ldrh	r3, [r4, #4]
 80279da:	8173      	strh	r3, [r6, #10]
    eth->type = mg_htons(0x806);
 80279dc:	f640 0006 	movw	r0, #2054	@ 0x806
 80279e0:	f7fd fc04 	bl	80251ec <mg_ntohs>
 80279e4:	81b0      	strh	r0, [r6, #12]
    *arp = *pkt->arp;
 80279e6:	69ab      	ldr	r3, [r5, #24]
 80279e8:	6818      	ldr	r0, [r3, #0]
 80279ea:	6859      	ldr	r1, [r3, #4]
 80279ec:	689a      	ldr	r2, [r3, #8]
 80279ee:	68df      	ldr	r7, [r3, #12]
 80279f0:	f8c6 000e 	str.w	r0, [r6, #14]
 80279f4:	f8c6 1012 	str.w	r1, [r6, #18]
 80279f8:	f8c6 2016 	str.w	r2, [r6, #22]
 80279fc:	f8c6 701a 	str.w	r7, [r6, #26]
 8027a00:	6918      	ldr	r0, [r3, #16]
 8027a02:	6959      	ldr	r1, [r3, #20]
 8027a04:	699a      	ldr	r2, [r3, #24]
 8027a06:	f8c6 001e 	str.w	r0, [r6, #30]
 8027a0a:	f8c6 1022 	str.w	r1, [r6, #34]	@ 0x22
 8027a0e:	f8c6 2026 	str.w	r2, [r6, #38]	@ 0x26
    arp->op = mg_htons(2);
 8027a12:	2002      	movs	r0, #2
 8027a14:	f7fd fbea 	bl	80251ec <mg_ntohs>
 8027a18:	82b0      	strh	r0, [r6, #20]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 8027a1a:	69ab      	ldr	r3, [r5, #24]
 8027a1c:	689a      	ldr	r2, [r3, #8]
 8027a1e:	6232      	str	r2, [r6, #32]
 8027a20:	899b      	ldrh	r3, [r3, #12]
 8027a22:	84b3      	strh	r3, [r6, #36]	@ 0x24
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 8027a24:	6823      	ldr	r3, [r4, #0]
 8027a26:	f8c6 3016 	str.w	r3, [r6, #22]
 8027a2a:	88a3      	ldrh	r3, [r4, #4]
 8027a2c:	8373      	strh	r3, [r6, #26]
    arp->tpa = pkt->arp->spa;
 8027a2e:	69ab      	ldr	r3, [r5, #24]
 8027a30:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8027a34:	f8c6 3026 	str.w	r3, [r6, #38]	@ 0x26
    arp->spa = ifp->ip;
 8027a38:	68a3      	ldr	r3, [r4, #8]
 8027a3a:	61f3      	str	r3, [r6, #28]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8027a3c:	4b32      	ldr	r3, [pc, #200]	@ (8027b08 <rx_arp+0x170>)
 8027a3e:	681b      	ldr	r3, [r3, #0]
 8027a40:	2b02      	cmp	r3, #2
 8027a42:	dc04      	bgt.n	8027a4e <rx_arp+0xb6>
    ether_output(ifp, PDIFF(eth, arp + 1));
 8027a44:	212a      	movs	r1, #42	@ 0x2a
 8027a46:	4620      	mov	r0, r4
 8027a48:	f7f8 ff95 	bl	8020976 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 8027a4c:	e7b4      	b.n	80279b8 <rx_arp+0x20>
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 8027a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8027b0c <rx_arp+0x174>)
 8027a50:	f241 4292 	movw	r2, #5266	@ 0x1492
 8027a54:	492e      	ldr	r1, [pc, #184]	@ (8027b10 <rx_arp+0x178>)
 8027a56:	2003      	movs	r0, #3
 8027a58:	f7fd fece 	bl	80257f8 <mg_log_prefix>
 8027a5c:	9400      	str	r4, [sp, #0]
 8027a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8027b14 <rx_arp+0x17c>)
 8027a60:	f106 0226 	add.w	r2, r6, #38	@ 0x26
 8027a64:	492c      	ldr	r1, [pc, #176]	@ (8027b18 <rx_arp+0x180>)
 8027a66:	482d      	ldr	r0, [pc, #180]	@ (8027b1c <rx_arp+0x184>)
 8027a68:	f7fb fdb0 	bl	80235cc <mg_log>
 8027a6c:	e7ea      	b.n	8027a44 <rx_arp+0xac>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 8027a6e:	2206      	movs	r2, #6
 8027a70:	4621      	mov	r1, r4
 8027a72:	f106 0012 	add.w	r0, r6, #18
 8027a76:	f004 fa27 	bl	802bec8 <memcmp>
 8027a7a:	2800      	cmp	r0, #0
 8027a7c:	d19c      	bne.n	80279b8 <rx_arp+0x20>
    if (pkt->arp->spa == ifp->gw) {
 8027a7e:	f8d6 200e 	ldr.w	r2, [r6, #14]
 8027a82:	6923      	ldr	r3, [r4, #16]
 8027a84:	429a      	cmp	r2, r3
 8027a86:	d026      	beq.n	8027ad6 <rx_arp+0x13e>
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8027a88:	2200      	movs	r2, #0
 8027a8a:	4629      	mov	r1, r5
 8027a8c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8027a8e:	f7fa fa50 	bl	8021f32 <getpeer>
      if (c != NULL && c->is_arplooking) {
 8027a92:	4604      	mov	r4, r0
 8027a94:	2800      	cmp	r0, #0
 8027a96:	d08f      	beq.n	80279b8 <rx_arp+0x20>
 8027a98:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027a9c:	f013 0f10 	tst.w	r3, #16
 8027aa0:	d08a      	beq.n	80279b8 <rx_arp+0x20>
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 8027aa2:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 8027aa6:	68b3      	ldr	r3, [r6, #8]
 8027aa8:	f8c0 30c8 	str.w	r3, [r0, #200]	@ 0xc8
 8027aac:	89b3      	ldrh	r3, [r6, #12]
 8027aae:	f8a0 30cc 	strh.w	r3, [r0, #204]	@ 0xcc
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8027ab2:	4b15      	ldr	r3, [pc, #84]	@ (8027b08 <rx_arp+0x170>)
 8027ab4:	681b      	ldr	r3, [r3, #0]
 8027ab6:	2b02      	cmp	r3, #2
 8027ab8:	dc14      	bgt.n	8027ae4 <rx_arp+0x14c>
        c->is_arplooking = 0;
 8027aba:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027abe:	f36f 1304 	bfc	r3, #4, #1
 8027ac2:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
        send_syn(c);
 8027ac6:	4620      	mov	r0, r4
 8027ac8:	f7ff fc22 	bl	8027310 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 8027acc:	2103      	movs	r1, #3
 8027ace:	4620      	mov	r0, r4
 8027ad0:	f7ff fc6a 	bl	80273a8 <settmout>
 8027ad4:	e770      	b.n	80279b8 <rx_arp+0x20>
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 8027ad6:	68b3      	ldr	r3, [r6, #8]
 8027ad8:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8027adc:	89b3      	ldrh	r3, [r6, #12]
 8027ade:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8027ae2:	e769      	b.n	80279b8 <rx_arp+0x20>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 8027ae4:	4b09      	ldr	r3, [pc, #36]	@ (8027b0c <rx_arp+0x174>)
 8027ae6:	f241 429f 	movw	r2, #5279	@ 0x149f
 8027aea:	4909      	ldr	r1, [pc, #36]	@ (8027b10 <rx_arp+0x178>)
 8027aec:	2003      	movs	r0, #3
 8027aee:	f7fd fe83 	bl	80257f8 <mg_log_prefix>
 8027af2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027af4:	9501      	str	r5, [sp, #4]
 8027af6:	4b07      	ldr	r3, [pc, #28]	@ (8027b14 <rx_arp+0x17c>)
 8027af8:	9300      	str	r3, [sp, #0]
 8027afa:	f104 031c 	add.w	r3, r4, #28
 8027afe:	4a06      	ldr	r2, [pc, #24]	@ (8027b18 <rx_arp+0x180>)
 8027b00:	4807      	ldr	r0, [pc, #28]	@ (8027b20 <rx_arp+0x188>)
 8027b02:	f7fb fd63 	bl	80235cc <mg_log>
 8027b06:	e7d8      	b.n	8027aba <rx_arp+0x122>
 8027b08:	2000012c 	.word	0x2000012c
 8027b0c:	0803a67c 	.word	0x0803a67c
 8027b10:	08039d58 	.word	0x08039d58
 8027b14:	0802359d 	.word	0x0802359d
 8027b18:	0802358d 	.word	0x0802358d
 8027b1c:	0803a29c 	.word	0x0803a29c
 8027b20:	0803a2b4 	.word	0x0803a2b4

08027b24 <tx_dhcp_request_sel>:
                                uint32_t ip_srv) {
 8027b24:	b570      	push	{r4, r5, r6, lr}
 8027b26:	b08c      	sub	sp, #48	@ 0x30
 8027b28:	4686      	mov	lr, r0
 8027b2a:	460d      	mov	r5, r1
 8027b2c:	4616      	mov	r6, r2
  uint8_t opts[] = {
 8027b2e:	f10d 0c14 	add.w	ip, sp, #20
 8027b32:	4c22      	ldr	r4, [pc, #136]	@ (8027bbc <tx_dhcp_request_sel+0x98>)
 8027b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027b36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8027b3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8027b3e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8027b42:	f82c 2b02 	strh.w	r2, [ip], #2
 8027b46:	0c12      	lsrs	r2, r2, #16
 8027b48:	f88c 2000 	strb.w	r2, [ip]
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 8027b4c:	f8cd 601e 	str.w	r6, [sp, #30]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 8027b50:	9509      	str	r5, [sp, #36]	@ 0x24
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 8027b52:	f89e 301f 	ldrb.w	r3, [lr, #31]
 8027b56:	b323      	cbz	r3, 8027ba2 <tx_dhcp_request_sel+0x7e>
 8027b58:	2306      	movs	r3, #6
 8027b5a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8027b5e:	2301      	movs	r3, #1
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 8027b60:	f89e 2020 	ldrb.w	r2, [lr, #32]
 8027b64:	b132      	cbz	r2, 8027b74 <tx_dhcp_request_sel+0x50>
 8027b66:	1c5a      	adds	r2, r3, #1
 8027b68:	3348      	adds	r3, #72	@ 0x48
 8027b6a:	446b      	add	r3, sp
 8027b6c:	212a      	movs	r1, #42	@ 0x2a
 8027b6e:	f803 1c1c 	strb.w	r1, [r3, #-28]
 8027b72:	b2d3      	uxtb	r3, r2
  opts[21] += addopts;
 8027b74:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8027b78:	441a      	add	r2, r3
 8027b7a:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 8027b7e:	2200      	movs	r2, #0
 8027b80:	9202      	str	r2, [sp, #8]
 8027b82:	3319      	adds	r3, #25
 8027b84:	9301      	str	r3, [sp, #4]
 8027b86:	ab05      	add	r3, sp, #20
 8027b88:	9300      	str	r3, [sp, #0]
 8027b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027b8e:	490c      	ldr	r1, [pc, #48]	@ (8027bc0 <tx_dhcp_request_sel+0x9c>)
 8027b90:	4670      	mov	r0, lr
 8027b92:	f7fd fc6d 	bl	8025470 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 8027b96:	4b0b      	ldr	r3, [pc, #44]	@ (8027bc4 <tx_dhcp_request_sel+0xa0>)
 8027b98:	681b      	ldr	r3, [r3, #0]
 8027b9a:	2b02      	cmp	r3, #2
 8027b9c:	dc03      	bgt.n	8027ba6 <tx_dhcp_request_sel+0x82>
}
 8027b9e:	b00c      	add	sp, #48	@ 0x30
 8027ba0:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t addopts = 0;
 8027ba2:	2300      	movs	r3, #0
 8027ba4:	e7dc      	b.n	8027b60 <tx_dhcp_request_sel+0x3c>
  MG_DEBUG(("DHCP req sent"));
 8027ba6:	4b08      	ldr	r3, [pc, #32]	@ (8027bc8 <tx_dhcp_request_sel+0xa4>)
 8027ba8:	f241 425b 	movw	r2, #5211	@ 0x145b
 8027bac:	4907      	ldr	r1, [pc, #28]	@ (8027bcc <tx_dhcp_request_sel+0xa8>)
 8027bae:	2003      	movs	r0, #3
 8027bb0:	f7fd fe22 	bl	80257f8 <mg_log_prefix>
 8027bb4:	4806      	ldr	r0, [pc, #24]	@ (8027bd0 <tx_dhcp_request_sel+0xac>)
 8027bb6:	f7fb fd09 	bl	80235cc <mg_log>
}
 8027bba:	e7f0      	b.n	8027b9e <tx_dhcp_request_sel+0x7a>
 8027bbc:	08035568 	.word	0x08035568
 8027bc0:	0803a7e0 	.word	0x0803a7e0
 8027bc4:	2000012c 	.word	0x2000012c
 8027bc8:	0803a650 	.word	0x0803a650
 8027bcc:	08039d58 	.word	0x08039d58
 8027bd0:	0803a28c 	.word	0x0803a28c

08027bd4 <read_conn>:
static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8027bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027bd8:	b089      	sub	sp, #36	@ 0x24
 8027bda:	4604      	mov	r4, r0
 8027bdc:	460d      	mov	r5, r1
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8027bde:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8027be2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8027be6:	d049      	beq.n	8027c7c <read_conn+0xa8>
 8027be8:	f100 0968 	add.w	r9, r0, #104	@ 0x68
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 8027bec:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8027bee:	6878      	ldr	r0, [r7, #4]
 8027bf0:	f7fd fa64 	bl	80250bc <mg_ntohl>
 8027bf4:	4680      	mov	r8, r0
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8027bf6:	69e6      	ldr	r6, [r4, #28]
  if (pkt->tcp->flags & TH_FIN) {
 8027bf8:	7b7b      	ldrb	r3, [r7, #13]
 8027bfa:	f013 0f01 	tst.w	r3, #1
 8027bfe:	d053      	beq.n	8027ca8 <read_conn+0xd4>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8027c00:	68eb      	ldr	r3, [r5, #12]
 8027c02:	4403      	add	r3, r0
 8027c04:	3301      	adds	r3, #1
 8027c06:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 8027c0a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027c0e:	f013 0f10 	tst.w	r3, #16
 8027c12:	d003      	beq.n	8027c1c <read_conn+0x48>
 8027c14:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027c18:	2b04      	cmp	r3, #4
 8027c1a:	d032      	beq.n	8027c82 <read_conn+0xae>
      c->is_draining = 1;
 8027c1c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8027c20:	f043 0310 	orr.w	r3, r3, #16
 8027c24:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 8027c28:	2104      	movs	r1, #4
 8027c2a:	4620      	mov	r0, r4
 8027c2c:	f7ff fbbc 	bl	80273a8 <settmout>
      flags |= TH_FIN;
 8027c30:	f04f 0b11 	mov.w	fp, #17
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 8027c34:	6863      	ldr	r3, [r4, #4]
 8027c36:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8027c38:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8027c3c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8027c40:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8027c44:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027c48:	f7fd fa38 	bl	80250bc <mg_ntohl>
 8027c4c:	4605      	mov	r5, r0
 8027c4e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027c52:	f7fd fa33 	bl	80250bc <mg_ntohl>
 8027c56:	2300      	movs	r3, #0
 8027c58:	9305      	str	r3, [sp, #20]
 8027c5a:	4b9b      	ldr	r3, [pc, #620]	@ (8027ec8 <read_conn+0x2f4>)
 8027c5c:	9304      	str	r3, [sp, #16]
 8027c5e:	9003      	str	r0, [sp, #12]
 8027c60:	9502      	str	r5, [sp, #8]
 8027c62:	f8cd a004 	str.w	sl, [sp, #4]
 8027c66:	f8cd 9000 	str.w	r9, [sp]
 8027c6a:	465b      	mov	r3, fp
 8027c6c:	4632      	mov	r2, r6
 8027c6e:	4641      	mov	r1, r8
 8027c70:	4638      	mov	r0, r7
 8027c72:	f7ff fabd 	bl	80271f0 <tx_tcp>
}
 8027c76:	b009      	add	sp, #36	@ 0x24
 8027c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8027c7c:	f100 0938 	add.w	r9, r0, #56	@ 0x38
 8027c80:	e7b4      	b.n	8027bec <read_conn+0x18>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8027c82:	f8d4 70b0 	ldr.w	r7, [r4, #176]	@ 0xb0
 8027c86:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8027c88:	6898      	ldr	r0, [r3, #8]
 8027c8a:	f7fd fa17 	bl	80250bc <mg_ntohl>
 8027c8e:	4287      	cmp	r7, r0
 8027c90:	d004      	beq.n	8027c9c <read_conn+0xc8>
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 8027c92:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8027c96:	f04f 0b10 	mov.w	fp, #16
 8027c9a:	e7cb      	b.n	8027c34 <read_conn+0x60>
        s->seq++;                               // Yes. Increment our SEQ
 8027c9c:	3701      	adds	r7, #1
 8027c9e:	f8c4 70b0 	str.w	r7, [r4, #176]	@ 0xb0
    uint8_t flags = TH_ACK;
 8027ca2:	f04f 0b10 	mov.w	fp, #16
 8027ca6:	e7c5      	b.n	8027c34 <read_conn+0x60>
  } else if (pkt->pay.len == 0) {
 8027ca8:	68eb      	ldr	r3, [r5, #12]
 8027caa:	2b00      	cmp	r3, #0
 8027cac:	d0e3      	beq.n	8027c76 <read_conn+0xa2>
  } else if (seq != s->ack) {
 8027cae:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8027cb2:	4282      	cmp	r2, r0
 8027cb4:	d046      	beq.n	8027d44 <read_conn+0x170>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8027cb6:	181d      	adds	r5, r3, r0
    if (s->ack == ack) {
 8027cb8:	42aa      	cmp	r2, r5
 8027cba:	d025      	beq.n	8027d08 <read_conn+0x134>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8027cbc:	4b83      	ldr	r3, [pc, #524]	@ (8027ecc <read_conn+0x2f8>)
 8027cbe:	681b      	ldr	r3, [r3, #0]
 8027cc0:	2b03      	cmp	r3, #3
 8027cc2:	dc30      	bgt.n	8027d26 <read_conn+0x152>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8027cc4:	6863      	ldr	r3, [r4, #4]
 8027cc6:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 8027cc8:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8027ccc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
 8027cd0:	f8b4 a02c 	ldrh.w	sl, [r4, #44]	@ 0x2c
 8027cd4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027cd8:	f7fd f9f0 	bl	80250bc <mg_ntohl>
 8027cdc:	4605      	mov	r5, r0
 8027cde:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027ce2:	f7fd f9eb 	bl	80250bc <mg_ntohl>
 8027ce6:	2300      	movs	r3, #0
 8027ce8:	9305      	str	r3, [sp, #20]
 8027cea:	4b77      	ldr	r3, [pc, #476]	@ (8027ec8 <read_conn+0x2f4>)
 8027cec:	9304      	str	r3, [sp, #16]
 8027cee:	9003      	str	r0, [sp, #12]
 8027cf0:	9502      	str	r5, [sp, #8]
 8027cf2:	f8cd a004 	str.w	sl, [sp, #4]
 8027cf6:	f8cd 9000 	str.w	r9, [sp]
 8027cfa:	2310      	movs	r3, #16
 8027cfc:	4632      	mov	r2, r6
 8027cfe:	4641      	mov	r1, r8
 8027d00:	4638      	mov	r0, r7
 8027d02:	f7ff fa75 	bl	80271f0 <tx_tcp>
 8027d06:	e7b6      	b.n	8027c76 <read_conn+0xa2>
      MG_VERBOSE(("ignoring duplicate pkt"));
 8027d08:	4b70      	ldr	r3, [pc, #448]	@ (8027ecc <read_conn+0x2f8>)
 8027d0a:	681b      	ldr	r3, [r3, #0]
 8027d0c:	2b03      	cmp	r3, #3
 8027d0e:	ddb2      	ble.n	8027c76 <read_conn+0xa2>
 8027d10:	4b6f      	ldr	r3, [pc, #444]	@ (8027ed0 <read_conn+0x2fc>)
 8027d12:	f241 52da 	movw	r2, #5594	@ 0x15da
 8027d16:	496f      	ldr	r1, [pc, #444]	@ (8027ed4 <read_conn+0x300>)
 8027d18:	2004      	movs	r0, #4
 8027d1a:	f7fd fd6d 	bl	80257f8 <mg_log_prefix>
 8027d1e:	486e      	ldr	r0, [pc, #440]	@ (8027ed8 <read_conn+0x304>)
 8027d20:	f7fb fc54 	bl	80235cc <mg_log>
 8027d24:	e7a7      	b.n	8027c76 <read_conn+0xa2>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 8027d26:	4b6a      	ldr	r3, [pc, #424]	@ (8027ed0 <read_conn+0x2fc>)
 8027d28:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 8027d2c:	4969      	ldr	r1, [pc, #420]	@ (8027ed4 <read_conn+0x300>)
 8027d2e:	2004      	movs	r0, #4
 8027d30:	f7fd fd62 	bl	80257f8 <mg_log_prefix>
 8027d34:	462b      	mov	r3, r5
 8027d36:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8027d3a:	4641      	mov	r1, r8
 8027d3c:	4867      	ldr	r0, [pc, #412]	@ (8027edc <read_conn+0x308>)
 8027d3e:	f7fb fc45 	bl	80235cc <mg_log>
 8027d42:	e7bf      	b.n	8027cc4 <read_conn+0xf0>
  } else if (io->size - io->len < pkt->pay.len &&
 8027d44:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8027d48:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8027d4c:	1a52      	subs	r2, r2, r1
 8027d4e:	4293      	cmp	r3, r2
 8027d50:	d905      	bls.n	8027d5e <read_conn+0x18a>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8027d52:	4419      	add	r1, r3
 8027d54:	4648      	mov	r0, r9
 8027d56:	f7fe fb8b 	bl	8026470 <mg_iobuf_resize>
  } else if (io->size - io->len < pkt->pay.len &&
 8027d5a:	2800      	cmp	r0, #0
 8027d5c:	d05c      	beq.n	8027e18 <read_conn+0x244>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 8027d5e:	f8d9 0000 	ldr.w	r0, [r9]
 8027d62:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8027d66:	68ea      	ldr	r2, [r5, #12]
 8027d68:	68a9      	ldr	r1, [r5, #8]
 8027d6a:	4418      	add	r0, r3
 8027d6c:	f005 fb7c 	bl	802d468 <memcpy>
    io->len += pkt->pay.len;
 8027d70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8027d74:	68ea      	ldr	r2, [r5, #12]
 8027d76:	4413      	add	r3, r2
 8027d78:	f8c9 3008 	str.w	r3, [r9, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8027d7c:	4b53      	ldr	r3, [pc, #332]	@ (8027ecc <read_conn+0x2f8>)
 8027d7e:	681b      	ldr	r3, [r3, #0]
 8027d80:	2b03      	cmp	r3, #3
 8027d82:	dc4e      	bgt.n	8027e22 <read_conn+0x24e>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8027d84:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8027d86:	6858      	ldr	r0, [r3, #4]
 8027d88:	f7fd f998 	bl	80250bc <mg_ntohl>
 8027d8c:	68eb      	ldr	r3, [r5, #12]
 8027d8e:	4418      	add	r0, r3
 8027d90:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    s->unacked += pkt->pay.len;
 8027d94:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8027d98:	68ea      	ldr	r2, [r5, #12]
 8027d9a:	4413      	add	r3, r2
 8027d9c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 8027da0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8027da4:	4293      	cmp	r3, r2
 8027da6:	d95e      	bls.n	8027e66 <read_conn+0x292>
 8027da8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8027dac:	4298      	cmp	r0, r3
 8027dae:	d05a      	beq.n	8027e66 <read_conn+0x292>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8027db0:	4b46      	ldr	r3, [pc, #280]	@ (8027ecc <read_conn+0x2f8>)
 8027db2:	681b      	ldr	r3, [r3, #0]
 8027db4:	2b03      	cmp	r3, #3
 8027db6:	dc48      	bgt.n	8027e4a <read_conn+0x276>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 8027db8:	6863      	ldr	r3, [r4, #4]
 8027dba:	f8d3 903c 	ldr.w	r9, [r3, #60]	@ 0x3c
 8027dbe:	f104 08c8 	add.w	r8, r4, #200	@ 0xc8
 8027dc2:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8027dc6:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8027dca:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8027dce:	f7fd f975 	bl	80250bc <mg_ntohl>
 8027dd2:	9007      	str	r0, [sp, #28]
 8027dd4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8027dd8:	f7fd f970 	bl	80250bc <mg_ntohl>
 8027ddc:	2700      	movs	r7, #0
 8027dde:	9705      	str	r7, [sp, #20]
 8027de0:	9704      	str	r7, [sp, #16]
 8027de2:	9003      	str	r0, [sp, #12]
 8027de4:	9b07      	ldr	r3, [sp, #28]
 8027de6:	9302      	str	r3, [sp, #8]
 8027de8:	f8cd b004 	str.w	fp, [sp, #4]
 8027dec:	f8cd a000 	str.w	sl, [sp]
 8027df0:	2310      	movs	r3, #16
 8027df2:	4632      	mov	r2, r6
 8027df4:	4641      	mov	r1, r8
 8027df6:	4648      	mov	r0, r9
 8027df8:	f7ff f9fa 	bl	80271f0 <tx_tcp>
      s->unacked = 0;
 8027dfc:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
      s->acked = s->ack;
 8027e00:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8027e04:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8027e08:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027e0c:	b37b      	cbz	r3, 8027e6e <read_conn+0x29a>
 8027e0e:	4639      	mov	r1, r7
 8027e10:	4620      	mov	r0, r4
 8027e12:	f7ff fac9 	bl	80273a8 <settmout>
 8027e16:	e02a      	b.n	8027e6e <read_conn+0x29a>
    mg_error(c, "oom");
 8027e18:	4931      	ldr	r1, [pc, #196]	@ (8027ee0 <read_conn+0x30c>)
 8027e1a:	4620      	mov	r0, r4
 8027e1c:	f7fd fdd4 	bl	80259c8 <mg_error>
 8027e20:	e729      	b.n	8027c76 <read_conn+0xa2>
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8027e22:	4b2b      	ldr	r3, [pc, #172]	@ (8027ed0 <read_conn+0x2fc>)
 8027e24:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 8027e28:	492a      	ldr	r1, [pc, #168]	@ (8027ed4 <read_conn+0x300>)
 8027e2a:	2004      	movs	r0, #4
 8027e2c:	f7fd fce4 	bl	80257f8 <mg_log_prefix>
 8027e30:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8027e32:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8027e34:	6858      	ldr	r0, [r3, #4]
 8027e36:	f7fd f941 	bl	80250bc <mg_ntohl>
 8027e3a:	4602      	mov	r2, r0
 8027e3c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8027e40:	4639      	mov	r1, r7
 8027e42:	4828      	ldr	r0, [pc, #160]	@ (8027ee4 <read_conn+0x310>)
 8027e44:	f7fb fbc2 	bl	80235cc <mg_log>
 8027e48:	e79c      	b.n	8027d84 <read_conn+0x1b0>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8027e4a:	4b21      	ldr	r3, [pc, #132]	@ (8027ed0 <read_conn+0x2fc>)
 8027e4c:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 8027e50:	4920      	ldr	r1, [pc, #128]	@ (8027ed4 <read_conn+0x300>)
 8027e52:	2004      	movs	r0, #4
 8027e54:	f7fd fcd0 	bl	80257f8 <mg_log_prefix>
 8027e58:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 8027e5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027e5e:	4822      	ldr	r0, [pc, #136]	@ (8027ee8 <read_conn+0x314>)
 8027e60:	f7fb fbb4 	bl	80235cc <mg_log>
 8027e64:	e7a8      	b.n	8027db8 <read_conn+0x1e4>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8027e66:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8027e6a:	2b01      	cmp	r3, #1
 8027e6c:	d11b      	bne.n	8027ea6 <read_conn+0x2d2>
    if (c->is_tls && c->is_tls_hs) {
 8027e6e:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027e72:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8027e76:	2ac0      	cmp	r2, #192	@ 0xc0
 8027e78:	f43f aefd 	beq.w	8027c76 <read_conn+0xa2>
    } else if (c->is_tls) {
 8027e7c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8027e80:	d01b      	beq.n	8027eba <read_conn+0x2e6>
      io = &c->recv;
 8027e82:	f104 0638 	add.w	r6, r4, #56	@ 0x38
      if (io->size - io->len < pkt->pay.len &&
 8027e86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8027e88:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8027e8a:	1a5b      	subs	r3, r3, r1
 8027e8c:	68ea      	ldr	r2, [r5, #12]
 8027e8e:	4293      	cmp	r3, r2
 8027e90:	d204      	bcs.n	8027e9c <read_conn+0x2c8>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 8027e92:	4411      	add	r1, r2
 8027e94:	4630      	mov	r0, r6
 8027e96:	f7fe faeb 	bl	8026470 <mg_iobuf_resize>
      if (io->size - io->len < pkt->pay.len &&
 8027e9a:	b148      	cbz	r0, 8027eb0 <read_conn+0x2dc>
        handle_tls_recv(c, io);
 8027e9c:	4631      	mov	r1, r6
 8027e9e:	4620      	mov	r0, r4
 8027ea0:	f7fd fdca 	bl	8025a38 <handle_tls_recv>
 8027ea4:	e6e7      	b.n	8027c76 <read_conn+0xa2>
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8027ea6:	2101      	movs	r1, #1
 8027ea8:	4620      	mov	r0, r4
 8027eaa:	f7ff fa7d 	bl	80273a8 <settmout>
 8027eae:	e7de      	b.n	8027e6e <read_conn+0x29a>
        mg_error(c, "oom");
 8027eb0:	490b      	ldr	r1, [pc, #44]	@ (8027ee0 <read_conn+0x30c>)
 8027eb2:	4620      	mov	r0, r4
 8027eb4:	f7fd fd88 	bl	80259c8 <mg_error>
 8027eb8:	e6dd      	b.n	8027c76 <read_conn+0xa2>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 8027eba:	f105 020c 	add.w	r2, r5, #12
 8027ebe:	2107      	movs	r1, #7
 8027ec0:	4620      	mov	r0, r4
 8027ec2:	f7fa f939 	bl	8022138 <mg_call>
}
 8027ec6:	e6d6      	b.n	8027c76 <read_conn+0xa2>
 8027ec8:	0803606c 	.word	0x0803606c
 8027ecc:	2000012c 	.word	0x2000012c
 8027ed0:	0803a644 	.word	0x0803a644
 8027ed4:	08039d58 	.word	0x08039d58
 8027ed8:	0803a2d0 	.word	0x0803a2d0
 8027edc:	0803a2e8 	.word	0x0803a2e8
 8027ee0:	0803a058 	.word	0x0803a058
 8027ee4:	0803a300 	.word	0x0803a300
 8027ee8:	0803a314 	.word	0x0803a314

08027eec <accept_conn>:
                                         struct pkt *pkt) {
 8027eec:	b570      	push	{r4, r5, r6, lr}
 8027eee:	4605      	mov	r5, r0
 8027ef0:	460e      	mov	r6, r1
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8027ef2:	6840      	ldr	r0, [r0, #4]
 8027ef4:	f7fa fe92 	bl	8022c1c <mg_alloc_conn>
  if (c == NULL) {
 8027ef8:	4604      	mov	r4, r0
 8027efa:	2800      	cmp	r0, #0
 8027efc:	d058      	beq.n	8027fb0 <accept_conn+0xc4>
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 8027efe:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8027f00:	6898      	ldr	r0, [r3, #8]
 8027f02:	f7fd f8db 	bl	80250bc <mg_ntohl>
 8027f06:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
 8027f0a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8027f0c:	6858      	ldr	r0, [r3, #4]
 8027f0e:	f7fd f8d5 	bl	80250bc <mg_ntohl>
 8027f12:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 8027f16:	6933      	ldr	r3, [r6, #16]
 8027f18:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8027f1c:	f8c4 20c8 	str.w	r2, [r4, #200]	@ 0xc8
 8027f20:	895b      	ldrh	r3, [r3, #10]
 8027f22:	f8a4 30cc 	strh.w	r3, [r4, #204]	@ 0xcc
  settmout(c, MIP_TTYPE_KEEPALIVE);
 8027f26:	2100      	movs	r1, #0
 8027f28:	4620      	mov	r0, r4
 8027f2a:	f7ff fa3d 	bl	80273a8 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 8027f2e:	69f3      	ldr	r3, [r6, #28]
 8027f30:	68db      	ldr	r3, [r3, #12]
 8027f32:	61e3      	str	r3, [r4, #28]
  c->rem.port = pkt->tcp->sport;
 8027f34:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8027f36:	881b      	ldrh	r3, [r3, #0]
 8027f38:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8027f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8027fec <accept_conn+0x100>)
 8027f3c:	681b      	ldr	r3, [r3, #0]
 8027f3e:	2b02      	cmp	r3, #2
 8027f40:	dc45      	bgt.n	8027fce <accept_conn+0xe2>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8027f42:	686b      	ldr	r3, [r5, #4]
 8027f44:	681b      	ldr	r3, [r3, #0]
 8027f46:	6023      	str	r3, [r4, #0]
 8027f48:	686b      	ldr	r3, [r5, #4]
 8027f4a:	601c      	str	r4, [r3, #0]
  c->is_accepted = 1;
 8027f4c:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8027f50:	f043 0304 	orr.w	r3, r3, #4
 8027f54:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8027f58:	f895 30ad 	ldrb.w	r3, [r5, #173]	@ 0xad
 8027f5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8027f60:	f894 20ad 	ldrb.w	r2, [r4, #173]	@ 0xad
 8027f64:	f363 02c3 	bfi	r2, r3, #3, #1
 8027f68:	f884 20ad 	strb.w	r2, [r4, #173]	@ 0xad
  c->pfn = lsn->pfn;
 8027f6c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 8027f70:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  c->loc = lsn->loc;
 8027f74:	f104 0608 	add.w	r6, r4, #8
 8027f78:	f105 0c08 	add.w	ip, r5, #8
 8027f7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8027f80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8027f82:	f8dc 3000 	ldr.w	r3, [ip]
 8027f86:	6033      	str	r3, [r6, #0]
  c->pfn_data = lsn->pfn_data;
 8027f88:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 8027f8c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  c->fn = lsn->fn;
 8027f90:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 8027f92:	67a3      	str	r3, [r4, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 8027f94:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8027f96:	67e3      	str	r3, [r4, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 8027f98:	2200      	movs	r2, #0
 8027f9a:	2101      	movs	r1, #1
 8027f9c:	4620      	mov	r0, r4
 8027f9e:	f7fa f8cb 	bl	8022138 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 8027fa2:	2200      	movs	r2, #0
 8027fa4:	2105      	movs	r1, #5
 8027fa6:	4620      	mov	r0, r4
 8027fa8:	f7fa f8c6 	bl	8022138 <mg_call>
}
 8027fac:	4620      	mov	r0, r4
 8027fae:	bd70      	pop	{r4, r5, r6, pc}
    MG_ERROR(("OOM"));
 8027fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8027fec <accept_conn+0x100>)
 8027fb2:	681b      	ldr	r3, [r3, #0]
 8027fb4:	2b00      	cmp	r3, #0
 8027fb6:	ddf9      	ble.n	8027fac <accept_conn+0xc0>
 8027fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8027ff0 <accept_conn+0x104>)
 8027fba:	f241 5268 	movw	r2, #5480	@ 0x1568
 8027fbe:	490d      	ldr	r1, [pc, #52]	@ (8027ff4 <accept_conn+0x108>)
 8027fc0:	2001      	movs	r0, #1
 8027fc2:	f7fd fc19 	bl	80257f8 <mg_log_prefix>
 8027fc6:	480c      	ldr	r0, [pc, #48]	@ (8027ff8 <accept_conn+0x10c>)
 8027fc8:	f7fb fb00 	bl	80235cc <mg_log>
    return NULL;
 8027fcc:	e7ee      	b.n	8027fac <accept_conn+0xc0>
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8027fce:	4b08      	ldr	r3, [pc, #32]	@ (8027ff0 <accept_conn+0x104>)
 8027fd0:	f241 5271 	movw	r2, #5489	@ 0x1571
 8027fd4:	4907      	ldr	r1, [pc, #28]	@ (8027ff4 <accept_conn+0x108>)
 8027fd6:	2003      	movs	r0, #3
 8027fd8:	f7fd fc0e 	bl	80257f8 <mg_log_prefix>
 8027fdc:	f104 031c 	add.w	r3, r4, #28
 8027fe0:	4a06      	ldr	r2, [pc, #24]	@ (8027ffc <accept_conn+0x110>)
 8027fe2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027fe4:	4806      	ldr	r0, [pc, #24]	@ (8028000 <accept_conn+0x114>)
 8027fe6:	f7fb faf1 	bl	80235cc <mg_log>
 8027fea:	e7aa      	b.n	8027f42 <accept_conn+0x56>
 8027fec:	2000012c 	.word	0x2000012c
 8027ff0:	0803a638 	.word	0x0803a638
 8027ff4:	08039d58 	.word	0x08039d58
 8027ff8:	0803a380 	.word	0x0803a380
 8027ffc:	08025725 	.word	0x08025725
 8028000:	0803a324 	.word	0x0803a324

08028004 <rx_tcp>:
static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028008:	b083      	sub	sp, #12
 802800a:	4606      	mov	r6, r0
 802800c:	460c      	mov	r4, r1
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 802800e:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 8028010:	2200      	movs	r2, #0
 8028012:	4638      	mov	r0, r7
 8028014:	f7f9 ff8d 	bl	8021f32 <getpeer>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8028018:	4605      	mov	r5, r0
 802801a:	b380      	cbz	r0, 802807e <rx_tcp+0x7a>
 802801c:	f100 08b0 	add.w	r8, r0, #176	@ 0xb0
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8028020:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028024:	f013 0f20 	tst.w	r3, #32
 8028028:	d02b      	beq.n	8028082 <rx_tcp+0x7e>
 802802a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802802c:	7b5a      	ldrb	r2, [r3, #13]
 802802e:	2a12      	cmp	r2, #18
 8028030:	d126      	bne.n	8028080 <rx_tcp+0x7c>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8028032:	6898      	ldr	r0, [r3, #8]
 8028034:	f7fd f842 	bl	80250bc <mg_ntohl>
 8028038:	f8c5 00b0 	str.w	r0, [r5, #176]	@ 0xb0
 802803c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802803e:	6858      	ldr	r0, [r3, #4]
 8028040:	f7fd f83c 	bl	80250bc <mg_ntohl>
 8028044:	3001      	adds	r0, #1
 8028046:	f8c8 0004 	str.w	r0, [r8, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 802804a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802804c:	689b      	ldr	r3, [r3, #8]
 802804e:	2700      	movs	r7, #0
 8028050:	9701      	str	r7, [sp, #4]
 8028052:	9700      	str	r7, [sp, #0]
 8028054:	2210      	movs	r2, #16
 8028056:	4621      	mov	r1, r4
 8028058:	4630      	mov	r0, r6
 802805a:	f7ff f975 	bl	8027348 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 802805e:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028062:	f367 1345 	bfi	r3, r7, #5, #1
 8028066:	f885 30ac 	strb.w	r3, [r5, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 802806a:	4639      	mov	r1, r7
 802806c:	4628      	mov	r0, r5
 802806e:	f7ff f99b 	bl	80273a8 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8028072:	463a      	mov	r2, r7
 8028074:	2104      	movs	r1, #4
 8028076:	4628      	mov	r0, r5
 8028078:	f7fa f85e 	bl	8022138 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 802807c:	e01b      	b.n	80280b6 <rx_tcp+0xb2>
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 802807e:	4680      	mov	r8, r0
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8028080:	b385      	cbz	r5, 80280e4 <rx_tcp+0xe0>
 8028082:	f895 30ac 	ldrb.w	r3, [r5, #172]	@ 0xac
 8028086:	f013 0f20 	tst.w	r3, #32
 802808a:	d004      	beq.n	8028096 <rx_tcp+0x92>
 802808c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802808e:	7b5a      	ldrb	r2, [r3, #13]
 8028090:	2a10      	cmp	r2, #16
 8028092:	d113      	bne.n	80280bc <rx_tcp+0xb8>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8028094:	b335      	cbz	r5, 80280e4 <rx_tcp+0xe0>
 8028096:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028098:	7b5b      	ldrb	r3, [r3, #13]
 802809a:	f013 0f04 	tst.w	r3, #4
 802809e:	d117      	bne.n	80280d0 <rx_tcp+0xcc>
  } else if (c != NULL) {
 80280a0:	b305      	cbz	r5, 80280e4 <rx_tcp+0xe0>
    s->tmiss = 0;                         // Reset missed keep-alive counter
 80280a2:	2300      	movs	r3, #0
 80280a4:	f888 301f 	strb.w	r3, [r8, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 80280a8:	f898 301e 	ldrb.w	r3, [r8, #30]
 80280ac:	b1ab      	cbz	r3, 80280da <rx_tcp+0xd6>
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 80280ae:	4621      	mov	r1, r4
 80280b0:	4628      	mov	r0, r5
 80280b2:	f7ff fd8f 	bl	8027bd4 <read_conn>
}
 80280b6:	b003      	add	sp, #12
 80280b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 80280bc:	689b      	ldr	r3, [r3, #8]
 80280be:	2200      	movs	r2, #0
 80280c0:	9201      	str	r2, [sp, #4]
 80280c2:	9200      	str	r2, [sp, #0]
 80280c4:	2214      	movs	r2, #20
 80280c6:	4621      	mov	r1, r4
 80280c8:	4630      	mov	r0, r6
 80280ca:	f7ff f93d 	bl	8027348 <tx_tcp_pkt>
 80280ce:	e7f2      	b.n	80280b6 <rx_tcp+0xb2>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80280d0:	4934      	ldr	r1, [pc, #208]	@ (80281a4 <rx_tcp+0x1a0>)
 80280d2:	4628      	mov	r0, r5
 80280d4:	f7fd fc78 	bl	80259c8 <mg_error>
 80280d8:	e7ed      	b.n	80280b6 <rx_tcp+0xb2>
      settmout(c,
 80280da:	2100      	movs	r1, #0
 80280dc:	4628      	mov	r0, r5
 80280de:	f7ff f963 	bl	80273a8 <settmout>
 80280e2:	e7e4      	b.n	80280ae <rx_tcp+0xaa>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 80280e4:	2201      	movs	r2, #1
 80280e6:	4621      	mov	r1, r4
 80280e8:	4638      	mov	r0, r7
 80280ea:	f7f9 ff22 	bl	8021f32 <getpeer>
 80280ee:	4607      	mov	r7, r0
 80280f0:	b168      	cbz	r0, 802810e <rx_tcp+0x10a>
  } else if (pkt->tcp->flags & TH_RST) {
 80280f2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80280f4:	7b6b      	ldrb	r3, [r5, #13]
 80280f6:	f013 0f04 	tst.w	r3, #4
 80280fa:	d013      	beq.n	8028124 <rx_tcp+0x120>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 80280fc:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8028100:	f013 0f04 	tst.w	r3, #4
 8028104:	d0d7      	beq.n	80280b6 <rx_tcp+0xb2>
 8028106:	4927      	ldr	r1, [pc, #156]	@ (80281a4 <rx_tcp+0x1a0>)
 8028108:	f7fd fc5e 	bl	80259c8 <mg_error>
 802810c:	e7d3      	b.n	80280b6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 802810e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028110:	689b      	ldr	r3, [r3, #8]
 8028112:	2200      	movs	r2, #0
 8028114:	9201      	str	r2, [sp, #4]
 8028116:	9200      	str	r2, [sp, #0]
 8028118:	2214      	movs	r2, #20
 802811a:	4621      	mov	r1, r4
 802811c:	4630      	mov	r0, r6
 802811e:	f7ff f913 	bl	8027348 <tx_tcp_pkt>
 8028122:	e7c8      	b.n	80280b6 <rx_tcp+0xb2>
  } else if (pkt->tcp->flags & TH_SYN) {
 8028124:	f013 0f02 	tst.w	r3, #2
 8028128:	d11d      	bne.n	8028166 <rx_tcp+0x162>
  } else if (pkt->tcp->flags & TH_FIN) {
 802812a:	f013 0f01 	tst.w	r3, #1
 802812e:	d129      	bne.n	8028184 <rx_tcp+0x180>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8028130:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8028134:	4648      	mov	r0, r9
 8028136:	f7fc ffc1 	bl	80250bc <mg_ntohl>
 802813a:	4680      	mov	r8, r0
 802813c:	8828      	ldrh	r0, [r5, #0]
 802813e:	f7fd f855 	bl	80251ec <mg_ntohs>
 8028142:	1c43      	adds	r3, r0, #1
 8028144:	4598      	cmp	r8, r3
 8028146:	d027      	beq.n	8028198 <rx_tcp+0x194>
  } else if (!c->is_accepted) {  // no peer
 8028148:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 802814c:	f013 0f04 	tst.w	r3, #4
 8028150:	d1b1      	bne.n	80280b6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028152:	2300      	movs	r3, #0
 8028154:	9301      	str	r3, [sp, #4]
 8028156:	9300      	str	r3, [sp, #0]
 8028158:	464b      	mov	r3, r9
 802815a:	2214      	movs	r2, #20
 802815c:	4621      	mov	r1, r4
 802815e:	4630      	mov	r0, r6
 8028160:	f7ff f8f2 	bl	8027348 <tx_tcp_pkt>
}
 8028164:	e7a7      	b.n	80280b6 <rx_tcp+0xb2>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8028166:	8828      	ldrh	r0, [r5, #0]
 8028168:	f7fd f840 	bl	80251ec <mg_ntohs>
 802816c:	f7fc ffa6 	bl	80250bc <mg_ntohl>
 8028170:	4603      	mov	r3, r0
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8028172:	2200      	movs	r2, #0
 8028174:	9201      	str	r2, [sp, #4]
 8028176:	9200      	str	r2, [sp, #0]
 8028178:	2212      	movs	r2, #18
 802817a:	4621      	mov	r1, r4
 802817c:	4630      	mov	r0, r6
 802817e:	f7ff f8e3 	bl	8027348 <tx_tcp_pkt>
 8028182:	e798      	b.n	80280b6 <rx_tcp+0xb2>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8028184:	68ab      	ldr	r3, [r5, #8]
 8028186:	2200      	movs	r2, #0
 8028188:	9201      	str	r2, [sp, #4]
 802818a:	9200      	str	r2, [sp, #0]
 802818c:	2211      	movs	r2, #17
 802818e:	4621      	mov	r1, r4
 8028190:	4630      	mov	r0, r6
 8028192:	f7ff f8d9 	bl	8027348 <tx_tcp_pkt>
 8028196:	e78e      	b.n	80280b6 <rx_tcp+0xb2>
    accept_conn(c, pkt);
 8028198:	4621      	mov	r1, r4
 802819a:	4638      	mov	r0, r7
 802819c:	f7ff fea6 	bl	8027eec <accept_conn>
 80281a0:	e789      	b.n	80280b6 <rx_tcp+0xb2>
 80281a2:	bf00      	nop
 80281a4:	0803a334 	.word	0x0803a334

080281a8 <mg_sendnsreq>:
                         struct mg_dns *dnsc, bool ipv6) {
 80281a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80281ac:	b082      	sub	sp, #8
 80281ae:	4604      	mov	r4, r0
 80281b0:	4688      	mov	r8, r1
 80281b2:	4617      	mov	r7, r2
 80281b4:	461d      	mov	r5, r3
  if (dnsc->url == NULL) {
 80281b6:	6819      	ldr	r1, [r3, #0]
 80281b8:	2900      	cmp	r1, #0
 80281ba:	d037      	beq.n	802822c <mg_sendnsreq+0x84>
  } else if (dnsc->c == NULL) {
 80281bc:	685b      	ldr	r3, [r3, #4]
 80281be:	2b00      	cmp	r3, #0
 80281c0:	d038      	beq.n	8028234 <mg_sendnsreq+0x8c>
  if (dnsc->c == NULL) {
 80281c2:	686b      	ldr	r3, [r5, #4]
 80281c4:	2b00      	cmp	r3, #0
 80281c6:	d040      	beq.n	802824a <mg_sendnsreq+0xa2>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80281c8:	2118      	movs	r1, #24
 80281ca:	2001      	movs	r0, #1
 80281cc:	f7f9 fe8c 	bl	8021ee8 <mg_calloc>
 80281d0:	4606      	mov	r6, r0
 80281d2:	2800      	cmp	r0, #0
 80281d4:	d03e      	beq.n	8028254 <mg_sendnsreq+0xac>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80281d6:	6863      	ldr	r3, [r4, #4]
 80281d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80281da:	2b00      	cmp	r3, #0
 80281dc:	d03f      	beq.n	802825e <mg_sendnsreq+0xb6>
 80281de:	8a1b      	ldrh	r3, [r3, #16]
 80281e0:	3301      	adds	r3, #1
 80281e2:	b29b      	uxth	r3, r3
 80281e4:	8233      	strh	r3, [r6, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80281e6:	6863      	ldr	r3, [r4, #4]
 80281e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80281ea:	6033      	str	r3, [r6, #0]
    c->mgr->active_dns_requests = d;
 80281ec:	6863      	ldr	r3, [r4, #4]
 80281ee:	631e      	str	r6, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 80281f0:	f7fd fafd 	bl	80257ee <mg_millis>
 80281f4:	19c0      	adds	r0, r0, r7
 80281f6:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
 80281fa:	60b0      	str	r0, [r6, #8]
 80281fc:	60f1      	str	r1, [r6, #12]
    d->c = c;
 80281fe:	6074      	str	r4, [r6, #4]
    c->is_resolving = 1;
 8028200:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8028204:	f043 0308 	orr.w	r3, r3, #8
 8028208:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 802820c:	4b21      	ldr	r3, [pc, #132]	@ (8028294 <mg_sendnsreq+0xec>)
 802820e:	681b      	ldr	r3, [r3, #0]
 8028210:	2b03      	cmp	r3, #3
 8028212:	dc26      	bgt.n	8028262 <mg_sendnsreq+0xba>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8028214:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8028218:	8a32      	ldrh	r2, [r6, #16]
 802821a:	4641      	mov	r1, r8
 802821c:	6868      	ldr	r0, [r5, #4]
 802821e:	f7fe fbd5 	bl	80269cc <mg_dns_send>
 8028222:	2800      	cmp	r0, #0
 8028224:	d031      	beq.n	802828a <mg_sendnsreq+0xe2>
}
 8028226:	b002      	add	sp, #8
 8028228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 802822c:	491a      	ldr	r1, [pc, #104]	@ (8028298 <mg_sendnsreq+0xf0>)
 802822e:	f7fd fbcb 	bl	80259c8 <mg_error>
 8028232:	e7c6      	b.n	80281c2 <mg_sendnsreq+0x1a>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8028234:	461a      	mov	r2, r3
 8028236:	6840      	ldr	r0, [r0, #4]
 8028238:	f000 f866 	bl	8028308 <mg_connect>
 802823c:	6068      	str	r0, [r5, #4]
    if (dnsc->c != NULL) {
 802823e:	2800      	cmp	r0, #0
 8028240:	d0bf      	beq.n	80281c2 <mg_sendnsreq+0x1a>
      dnsc->c->pfn = dns_cb;
 8028242:	4b16      	ldr	r3, [pc, #88]	@ (802829c <mg_sendnsreq+0xf4>)
 8028244:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8028248:	e7bb      	b.n	80281c2 <mg_sendnsreq+0x1a>
    mg_error(c, "resolver");
 802824a:	4915      	ldr	r1, [pc, #84]	@ (80282a0 <mg_sendnsreq+0xf8>)
 802824c:	4620      	mov	r0, r4
 802824e:	f7fd fbbb 	bl	80259c8 <mg_error>
 8028252:	e7e8      	b.n	8028226 <mg_sendnsreq+0x7e>
    mg_error(c, "resolve OOM");
 8028254:	4913      	ldr	r1, [pc, #76]	@ (80282a4 <mg_sendnsreq+0xfc>)
 8028256:	4620      	mov	r0, r4
 8028258:	f7fd fbb6 	bl	80259c8 <mg_error>
 802825c:	e7e3      	b.n	8028226 <mg_sendnsreq+0x7e>
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 802825e:	2301      	movs	r3, #1
 8028260:	e7c0      	b.n	80281e4 <mg_sendnsreq+0x3c>
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8028262:	4b11      	ldr	r3, [pc, #68]	@ (80282a8 <mg_sendnsreq+0x100>)
 8028264:	f240 521e 	movw	r2, #1310	@ 0x51e
 8028268:	4910      	ldr	r1, [pc, #64]	@ (80282ac <mg_sendnsreq+0x104>)
 802826a:	2004      	movs	r0, #4
 802826c:	f7fd fac4 	bl	80257f8 <mg_log_prefix>
 8028270:	8a33      	ldrh	r3, [r6, #16]
 8028272:	9301      	str	r3, [sp, #4]
 8028274:	682b      	ldr	r3, [r5, #0]
 8028276:	9300      	str	r3, [sp, #0]
 8028278:	f8d8 3000 	ldr.w	r3, [r8]
 802827c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8028280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028282:	480b      	ldr	r0, [pc, #44]	@ (80282b0 <mg_sendnsreq+0x108>)
 8028284:	f7fb f9a2 	bl	80235cc <mg_log>
 8028288:	e7c4      	b.n	8028214 <mg_sendnsreq+0x6c>
      mg_error(dnsc->c, "DNS send");
 802828a:	490a      	ldr	r1, [pc, #40]	@ (80282b4 <mg_sendnsreq+0x10c>)
 802828c:	6868      	ldr	r0, [r5, #4]
 802828e:	f7fd fb9b 	bl	80259c8 <mg_error>
}
 8028292:	e7c8      	b.n	8028226 <mg_sendnsreq+0x7e>
 8028294:	2000012c 	.word	0x2000012c
 8028298:	0803a340 	.word	0x0803a340
 802829c:	08027745 	.word	0x08027745
 80282a0:	0803a36c 	.word	0x0803a36c
 80282a4:	0803a378 	.word	0x0803a378
 80282a8:	0803a7c0 	.word	0x0803a7c0
 80282ac:	08039d58 	.word	0x08039d58
 80282b0:	0803a384 	.word	0x0803a384
 80282b4:	0803a3a8 	.word	0x0803a3a8

080282b8 <mg_resolve>:
void mg_resolve(struct mg_connection *c, const char *url) {
 80282b8:	b570      	push	{r4, r5, r6, lr}
 80282ba:	b084      	sub	sp, #16
 80282bc:	4604      	mov	r4, r0
 80282be:	460e      	mov	r6, r1
  struct mg_str host = mg_url_host(url);
 80282c0:	ad02      	add	r5, sp, #8
 80282c2:	4628      	mov	r0, r5
 80282c4:	f7fc fe24 	bl	8024f10 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80282c8:	4630      	mov	r0, r6
 80282ca:	f7fc fe3f 	bl	8024f4c <mg_url_port>
 80282ce:	f7fc ff8d 	bl	80251ec <mg_ntohs>
 80282d2:	85a0      	strh	r0, [r4, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 80282d4:	f104 021c 	add.w	r2, r4, #28
 80282d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80282dc:	f7fc ff22 	bl	8025124 <mg_aton>
 80282e0:	b960      	cbnz	r0, 80282fc <mg_resolve+0x44>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80282e2:	6862      	ldr	r2, [r4, #4]
 80282e4:	7e11      	ldrb	r1, [r2, #24]
 80282e6:	b169      	cbz	r1, 8028304 <mg_resolve+0x4c>
 80282e8:	f102 030c 	add.w	r3, r2, #12
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80282ec:	6952      	ldr	r2, [r2, #20]
 80282ee:	9100      	str	r1, [sp, #0]
 80282f0:	a902      	add	r1, sp, #8
 80282f2:	4620      	mov	r0, r4
 80282f4:	f7ff ff58 	bl	80281a8 <mg_sendnsreq>
}
 80282f8:	b004      	add	sp, #16
 80282fa:	bd70      	pop	{r4, r5, r6, pc}
    mg_connect_resolved(c);
 80282fc:	4620      	mov	r0, r4
 80282fe:	f7ff f951 	bl	80275a4 <mg_connect_resolved>
 8028302:	e7f9      	b.n	80282f8 <mg_resolve+0x40>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8028304:	1d13      	adds	r3, r2, #4
 8028306:	e7f1      	b.n	80282ec <mg_resolve+0x34>

08028308 <mg_connect>:
                                 mg_event_handler_t fn, void *fn_data) {
 8028308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (url == NULL || url[0] == '\0') {
 802830c:	b129      	cbz	r1, 802831a <mg_connect+0x12>
 802830e:	4680      	mov	r8, r0
 8028310:	4617      	mov	r7, r2
 8028312:	461e      	mov	r6, r3
 8028314:	460d      	mov	r5, r1
 8028316:	780b      	ldrb	r3, [r1, #0]
 8028318:	b99b      	cbnz	r3, 8028342 <mg_connect+0x3a>
    MG_ERROR(("null url"));
 802831a:	4b30      	ldr	r3, [pc, #192]	@ (80283dc <mg_connect+0xd4>)
 802831c:	681b      	ldr	r3, [r3, #0]
 802831e:	2b00      	cmp	r3, #0
 8028320:	dc03      	bgt.n	802832a <mg_connect+0x22>
  struct mg_connection *c = NULL;
 8028322:	2400      	movs	r4, #0
}
 8028324:	4620      	mov	r0, r4
 8028326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MG_ERROR(("null url"));
 802832a:	4b2d      	ldr	r3, [pc, #180]	@ (80283e0 <mg_connect+0xd8>)
 802832c:	f241 22be 	movw	r2, #4798	@ 0x12be
 8028330:	492c      	ldr	r1, [pc, #176]	@ (80283e4 <mg_connect+0xdc>)
 8028332:	2001      	movs	r0, #1
 8028334:	f7fd fa60 	bl	80257f8 <mg_log_prefix>
 8028338:	482b      	ldr	r0, [pc, #172]	@ (80283e8 <mg_connect+0xe0>)
 802833a:	f7fb f947 	bl	80235cc <mg_log>
  struct mg_connection *c = NULL;
 802833e:	2400      	movs	r4, #0
 8028340:	e7f0      	b.n	8028324 <mg_connect+0x1c>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8028342:	f7fa fc6b 	bl	8022c1c <mg_alloc_conn>
 8028346:	4604      	mov	r4, r0
 8028348:	b358      	cbz	r0, 80283a2 <mg_connect+0x9a>
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 802834a:	f8d8 3000 	ldr.w	r3, [r8]
 802834e:	6003      	str	r3, [r0, #0]
 8028350:	f8c8 0000 	str.w	r0, [r8]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8028354:	2204      	movs	r2, #4
 8028356:	4925      	ldr	r1, [pc, #148]	@ (80283ec <mg_connect+0xe4>)
 8028358:	4628      	mov	r0, r5
 802835a:	f003 fe7e 	bl	802c05a <strncmp>
 802835e:	fab0 f080 	clz	r0, r0
 8028362:	0940      	lsrs	r0, r0, #5
 8028364:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028368:	f360 0300 	bfi	r3, r0, #0, #1
 802836c:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8028370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028374:	6323      	str	r3, [r4, #48]	@ 0x30
    c->fn = fn;
 8028376:	67a7      	str	r7, [r4, #120]	@ 0x78
    c->is_client = true;
 8028378:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 802837c:	f043 0302 	orr.w	r3, r3, #2
 8028380:	f884 30ac 	strb.w	r3, [r4, #172]	@ 0xac
    c->fn_data = fn_data;
 8028384:	67e6      	str	r6, [r4, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 8028386:	4b15      	ldr	r3, [pc, #84]	@ (80283dc <mg_connect+0xd4>)
 8028388:	681b      	ldr	r3, [r3, #0]
 802838a:	2b02      	cmp	r3, #2
 802838c:	dc18      	bgt.n	80283c0 <mg_connect+0xb8>
    mg_call(c, MG_EV_OPEN, (void *) url);
 802838e:	462a      	mov	r2, r5
 8028390:	2101      	movs	r1, #1
 8028392:	4620      	mov	r0, r4
 8028394:	f7f9 fed0 	bl	8022138 <mg_call>
    mg_resolve(c, url);
 8028398:	4629      	mov	r1, r5
 802839a:	4620      	mov	r0, r4
 802839c:	f7ff ff8c 	bl	80282b8 <mg_resolve>
 80283a0:	e7c0      	b.n	8028324 <mg_connect+0x1c>
    MG_ERROR(("OOM"));
 80283a2:	4b0e      	ldr	r3, [pc, #56]	@ (80283dc <mg_connect+0xd4>)
 80283a4:	681b      	ldr	r3, [r3, #0]
 80283a6:	2b00      	cmp	r3, #0
 80283a8:	ddbc      	ble.n	8028324 <mg_connect+0x1c>
 80283aa:	4b0d      	ldr	r3, [pc, #52]	@ (80283e0 <mg_connect+0xd8>)
 80283ac:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 80283b0:	490c      	ldr	r1, [pc, #48]	@ (80283e4 <mg_connect+0xdc>)
 80283b2:	2001      	movs	r0, #1
 80283b4:	f7fd fa20 	bl	80257f8 <mg_log_prefix>
 80283b8:	480d      	ldr	r0, [pc, #52]	@ (80283f0 <mg_connect+0xe8>)
 80283ba:	f7fb f907 	bl	80235cc <mg_log>
 80283be:	e7b1      	b.n	8028324 <mg_connect+0x1c>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 80283c0:	4b07      	ldr	r3, [pc, #28]	@ (80283e0 <mg_connect+0xd8>)
 80283c2:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 80283c6:	4907      	ldr	r1, [pc, #28]	@ (80283e4 <mg_connect+0xdc>)
 80283c8:	2003      	movs	r0, #3
 80283ca:	f7fd fa15 	bl	80257f8 <mg_log_prefix>
 80283ce:	462b      	mov	r3, r5
 80283d0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80283d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80283d4:	4807      	ldr	r0, [pc, #28]	@ (80283f4 <mg_connect+0xec>)
 80283d6:	f7fb f8f9 	bl	80235cc <mg_log>
 80283da:	e7d8      	b.n	802838e <mg_connect+0x86>
 80283dc:	2000012c 	.word	0x2000012c
 80283e0:	0803a734 	.word	0x0803a734
 80283e4:	08039d58 	.word	0x08039d58
 80283e8:	0803a3b4 	.word	0x0803a3b4
 80283ec:	0803a08c 	.word	0x0803a08c
 80283f0:	0803a380 	.word	0x0803a380
 80283f4:	08039db4 	.word	0x08039db4

080283f8 <mg_mqtt_connect>:
                                      mg_event_handler_t fn, void *fn_data) {
 80283f8:	b530      	push	{r4, r5, lr}
 80283fa:	b091      	sub	sp, #68	@ 0x44
 80283fc:	4614      	mov	r4, r2
 80283fe:	461a      	mov	r2, r3
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 8028400:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8028402:	f7ff ff81 	bl	8028308 <mg_connect>
  if (c != NULL) {
 8028406:	4605      	mov	r5, r0
 8028408:	b160      	cbz	r0, 8028424 <mg_mqtt_connect+0x2c>
    memset(&empty, 0, sizeof(empty));
 802840a:	2240      	movs	r2, #64	@ 0x40
 802840c:	2100      	movs	r1, #0
 802840e:	4668      	mov	r0, sp
 8028410:	f003 fdee 	bl	802bff0 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 8028414:	b14c      	cbz	r4, 802842a <mg_mqtt_connect+0x32>
 8028416:	4621      	mov	r1, r4
 8028418:	4628      	mov	r0, r5
 802841a:	f7fe fbfd 	bl	8026c18 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 802841e:	4b04      	ldr	r3, [pc, #16]	@ (8028430 <mg_mqtt_connect+0x38>)
 8028420:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
 8028424:	4628      	mov	r0, r5
 8028426:	b011      	add	sp, #68	@ 0x44
 8028428:	bd30      	pop	{r4, r5, pc}
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 802842a:	466c      	mov	r4, sp
 802842c:	e7f3      	b.n	8028416 <mg_mqtt_connect+0x1e>
 802842e:	bf00      	nop
 8028430:	08026ff1 	.word	0x08026ff1

08028434 <mg_tcpip_init>:
void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8028434:	b538      	push	{r3, r4, r5, lr}
 8028436:	4605      	mov	r5, r0
 8028438:	460c      	mov	r4, r1
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 802843a:	680b      	ldr	r3, [r1, #0]
 802843c:	b90b      	cbnz	r3, 8028442 <mg_tcpip_init+0xe>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 802843e:	888b      	ldrh	r3, [r1, #4]
 8028440:	b1a3      	cbz	r3, 802846c <mg_tcpip_init+0x38>
  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 8028442:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028444:	681b      	ldr	r3, [r3, #0]
 8028446:	b34b      	cbz	r3, 802849c <mg_tcpip_init+0x68>
 8028448:	4620      	mov	r0, r4
 802844a:	4798      	blx	r3
 802844c:	bb30      	cbnz	r0, 802849c <mg_tcpip_init+0x68>
    MG_ERROR(("driver init failed"));
 802844e:	4b3b      	ldr	r3, [pc, #236]	@ (802853c <mg_tcpip_init+0x108>)
 8028450:	681b      	ldr	r3, [r3, #0]
 8028452:	2b00      	cmp	r3, #0
 8028454:	dd5f      	ble.n	8028516 <mg_tcpip_init+0xe2>
 8028456:	4b3a      	ldr	r3, [pc, #232]	@ (8028540 <mg_tcpip_init+0x10c>)
 8028458:	f241 7223 	movw	r2, #5923	@ 0x1723
 802845c:	4939      	ldr	r1, [pc, #228]	@ (8028544 <mg_tcpip_init+0x110>)
 802845e:	2001      	movs	r0, #1
 8028460:	f7fd f9ca 	bl	80257f8 <mg_log_prefix>
 8028464:	4838      	ldr	r0, [pc, #224]	@ (8028548 <mg_tcpip_init+0x114>)
 8028466:	f7fb f8b1 	bl	80235cc <mg_log>
 802846a:	e054      	b.n	8028516 <mg_tcpip_init+0xe2>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 802846c:	4608      	mov	r0, r1
 802846e:	2302      	movs	r3, #2
 8028470:	f800 3b01 	strb.w	r3, [r0], #1
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8028474:	2105      	movs	r1, #5
 8028476:	f7fc fde6 	bl	8025046 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 802847a:	4b30      	ldr	r3, [pc, #192]	@ (802853c <mg_tcpip_init+0x108>)
 802847c:	681b      	ldr	r3, [r3, #0]
 802847e:	2b01      	cmp	r3, #1
 8028480:	dddf      	ble.n	8028442 <mg_tcpip_init+0xe>
 8028482:	4b2f      	ldr	r3, [pc, #188]	@ (8028540 <mg_tcpip_init+0x10c>)
 8028484:	f241 721f 	movw	r2, #5919	@ 0x171f
 8028488:	492e      	ldr	r1, [pc, #184]	@ (8028544 <mg_tcpip_init+0x110>)
 802848a:	2002      	movs	r0, #2
 802848c:	f7fd f9b4 	bl	80257f8 <mg_log_prefix>
 8028490:	4622      	mov	r2, r4
 8028492:	492e      	ldr	r1, [pc, #184]	@ (802854c <mg_tcpip_init+0x118>)
 8028494:	482e      	ldr	r0, [pc, #184]	@ (8028550 <mg_tcpip_init+0x11c>)
 8028496:	f7fb f899 	bl	80235cc <mg_log>
 802849a:	e7d2      	b.n	8028442 <mg_tcpip_init+0xe>
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 802849c:	f240 6104 	movw	r1, #1540	@ 0x604
 80284a0:	2001      	movs	r0, #1
 80284a2:	f7f9 fd21 	bl	8021ee8 <mg_calloc>
 80284a6:	6160      	str	r0, [r4, #20]
 80284a8:	f240 6304 	movw	r3, #1540	@ 0x604
 80284ac:	61a3      	str	r3, [r4, #24]
    if (ifp->recv_queue.size == 0)
 80284ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80284b0:	b92b      	cbnz	r3, 80284be <mg_tcpip_init+0x8a>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 80284b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80284b4:	689b      	ldr	r3, [r3, #8]
 80284b6:	b37b      	cbz	r3, 8028518 <mg_tcpip_init+0xe4>
 80284b8:	f240 6304 	movw	r3, #1540	@ 0x604
 80284bc:	63a3      	str	r3, [r4, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 80284be:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80284c0:	2001      	movs	r0, #1
 80284c2:	f7f9 fd11 	bl	8021ee8 <mg_calloc>
 80284c6:	6360      	str	r0, [r4, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 80284c8:	f7fd f991 	bl	80257ee <mg_millis>
 80284cc:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
    mgr->priv = ifp;
 80284d0:	63ec      	str	r4, [r5, #60]	@ 0x3c
    ifp->mgr = mgr;
 80284d2:	6325      	str	r5, [r4, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80284d4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80284d8:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 80284dc:	2330      	movs	r3, #48	@ 0x30
 80284de:	642b      	str	r3, [r5, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80284e0:	68a3      	ldr	r3, [r4, #8]
 80284e2:	b90b      	cbnz	r3, 80284e8 <mg_tcpip_init+0xb4>
 80284e4:	2301      	movs	r3, #1
 80284e6:	7723      	strb	r3, [r4, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 80284e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80284ec:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 80284f0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 80284f4:	2102      	movs	r1, #2
 80284f6:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80284fa:	f7fc fda4 	bl	8025046 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 80284fe:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 8028502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8028506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 802850a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802850e:	6963      	ldr	r3, [r4, #20]
 8028510:	b12b      	cbz	r3, 802851e <mg_tcpip_init+0xea>
 8028512:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028514:	b11b      	cbz	r3, 802851e <mg_tcpip_init+0xea>
}
 8028516:	bd38      	pop	{r3, r4, r5, pc}
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8028518:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802851c:	e7ce      	b.n	80284bc <mg_tcpip_init+0x88>
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802851e:	4b07      	ldr	r3, [pc, #28]	@ (802853c <mg_tcpip_init+0x108>)
 8028520:	681b      	ldr	r3, [r3, #0]
 8028522:	2b00      	cmp	r3, #0
 8028524:	ddf7      	ble.n	8028516 <mg_tcpip_init+0xe2>
 8028526:	4b06      	ldr	r3, [pc, #24]	@ (8028540 <mg_tcpip_init+0x10c>)
 8028528:	f241 7234 	movw	r2, #5940	@ 0x1734
 802852c:	4905      	ldr	r1, [pc, #20]	@ (8028544 <mg_tcpip_init+0x110>)
 802852e:	2001      	movs	r0, #1
 8028530:	f7fd f962 	bl	80257f8 <mg_log_prefix>
 8028534:	4807      	ldr	r0, [pc, #28]	@ (8028554 <mg_tcpip_init+0x120>)
 8028536:	f7fb f849 	bl	80235cc <mg_log>
}
 802853a:	e7ec      	b.n	8028516 <mg_tcpip_init+0xe2>
 802853c:	2000012c 	.word	0x2000012c
 8028540:	0803a6f8 	.word	0x0803a6f8
 8028544:	08039d58 	.word	0x08039d58
 8028548:	0803a3e4 	.word	0x0803a3e4
 802854c:	0802359d 	.word	0x0802359d
 8028550:	0803a3c0 	.word	0x0803a3c0
 8028554:	0803a380 	.word	0x0803a380

08028558 <onstatechange>:
static void onstatechange(struct mg_tcpip_if *ifp) {
 8028558:	b510      	push	{r4, lr}
 802855a:	4604      	mov	r4, r0
  if (ifp->state == MG_TCPIP_STATE_READY) {
 802855c:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 8028560:	2b03      	cmp	r3, #3
 8028562:	d011      	beq.n	8028588 <onstatechange+0x30>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 8028564:	2b01      	cmp	r3, #1
 8028566:	d04f      	beq.n	8028608 <onstatechange+0xb0>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 8028568:	b9f3      	cbnz	r3, 80285a8 <onstatechange+0x50>
    MG_ERROR(("Link down"));
 802856a:	4b31      	ldr	r3, [pc, #196]	@ (8028630 <onstatechange+0xd8>)
 802856c:	681b      	ldr	r3, [r3, #0]
 802856e:	2b00      	cmp	r3, #0
 8028570:	dd1a      	ble.n	80285a8 <onstatechange+0x50>
 8028572:	4b30      	ldr	r3, [pc, #192]	@ (8028634 <onstatechange+0xdc>)
 8028574:	f241 4209 	movw	r2, #5129	@ 0x1409
 8028578:	492f      	ldr	r1, [pc, #188]	@ (8028638 <onstatechange+0xe0>)
 802857a:	2001      	movs	r0, #1
 802857c:	f7fd f93c 	bl	80257f8 <mg_log_prefix>
 8028580:	482e      	ldr	r0, [pc, #184]	@ (802863c <onstatechange+0xe4>)
 8028582:	f7fb f823 	bl	80235cc <mg_log>
 8028586:	e00f      	b.n	80285a8 <onstatechange+0x50>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 8028588:	4b29      	ldr	r3, [pc, #164]	@ (8028630 <onstatechange+0xd8>)
 802858a:	681b      	ldr	r3, [r3, #0]
 802858c:	2b01      	cmp	r3, #1
 802858e:	dc12      	bgt.n	80285b6 <onstatechange+0x5e>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 8028590:	4b27      	ldr	r3, [pc, #156]	@ (8028630 <onstatechange+0xd8>)
 8028592:	681b      	ldr	r3, [r3, #0]
 8028594:	2b01      	cmp	r3, #1
 8028596:	dc1c      	bgt.n	80285d2 <onstatechange+0x7a>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 8028598:	4b25      	ldr	r3, [pc, #148]	@ (8028630 <onstatechange+0xd8>)
 802859a:	681b      	ldr	r3, [r3, #0]
 802859c:	2b01      	cmp	r3, #1
 802859e:	dc26      	bgt.n	80285ee <onstatechange+0x96>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 80285a0:	6921      	ldr	r1, [r4, #16]
 80285a2:	4620      	mov	r0, r4
 80285a4:	f7fc ff1f 	bl	80253e6 <arp_ask>
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 80285a8:	f104 027c 	add.w	r2, r4, #124	@ 0x7c
 80285ac:	2100      	movs	r1, #0
 80285ae:	4620      	mov	r0, r4
 80285b0:	f7f8 f9cb 	bl	802094a <mg_tcpip_call>
}
 80285b4:	bd10      	pop	{r4, pc}
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 80285b6:	4b1f      	ldr	r3, [pc, #124]	@ (8028634 <onstatechange+0xdc>)
 80285b8:	f241 4201 	movw	r2, #5121	@ 0x1401
 80285bc:	491e      	ldr	r1, [pc, #120]	@ (8028638 <onstatechange+0xe0>)
 80285be:	2002      	movs	r0, #2
 80285c0:	f7fd f91a 	bl	80257f8 <mg_log_prefix>
 80285c4:	f104 0208 	add.w	r2, r4, #8
 80285c8:	491d      	ldr	r1, [pc, #116]	@ (8028640 <onstatechange+0xe8>)
 80285ca:	481e      	ldr	r0, [pc, #120]	@ (8028644 <onstatechange+0xec>)
 80285cc:	f7fa fffe 	bl	80235cc <mg_log>
 80285d0:	e7de      	b.n	8028590 <onstatechange+0x38>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 80285d2:	4b18      	ldr	r3, [pc, #96]	@ (8028634 <onstatechange+0xdc>)
 80285d4:	f241 4202 	movw	r2, #5122	@ 0x1402
 80285d8:	4917      	ldr	r1, [pc, #92]	@ (8028638 <onstatechange+0xe0>)
 80285da:	2002      	movs	r0, #2
 80285dc:	f7fd f90c 	bl	80257f8 <mg_log_prefix>
 80285e0:	f104 0210 	add.w	r2, r4, #16
 80285e4:	4916      	ldr	r1, [pc, #88]	@ (8028640 <onstatechange+0xe8>)
 80285e6:	4818      	ldr	r0, [pc, #96]	@ (8028648 <onstatechange+0xf0>)
 80285e8:	f7fa fff0 	bl	80235cc <mg_log>
 80285ec:	e7d4      	b.n	8028598 <onstatechange+0x40>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 80285ee:	4b11      	ldr	r3, [pc, #68]	@ (8028634 <onstatechange+0xdc>)
 80285f0:	f241 4203 	movw	r2, #5123	@ 0x1403
 80285f4:	4910      	ldr	r1, [pc, #64]	@ (8028638 <onstatechange+0xe0>)
 80285f6:	2002      	movs	r0, #2
 80285f8:	f7fd f8fe 	bl	80257f8 <mg_log_prefix>
 80285fc:	4622      	mov	r2, r4
 80285fe:	4913      	ldr	r1, [pc, #76]	@ (802864c <onstatechange+0xf4>)
 8028600:	4813      	ldr	r0, [pc, #76]	@ (8028650 <onstatechange+0xf8>)
 8028602:	f7fa ffe3 	bl	80235cc <mg_log>
 8028606:	e7cb      	b.n	80285a0 <onstatechange+0x48>
    MG_ERROR(("Link up"));
 8028608:	4b09      	ldr	r3, [pc, #36]	@ (8028630 <onstatechange+0xd8>)
 802860a:	681b      	ldr	r3, [r3, #0]
 802860c:	2b00      	cmp	r3, #0
 802860e:	dc04      	bgt.n	802861a <onstatechange+0xc2>
    srand((unsigned int) mg_millis());
 8028610:	f7fd f8ed 	bl	80257ee <mg_millis>
 8028614:	f002 ff9c 	bl	802b550 <srand>
 8028618:	e7c6      	b.n	80285a8 <onstatechange+0x50>
    MG_ERROR(("Link up"));
 802861a:	4b06      	ldr	r3, [pc, #24]	@ (8028634 <onstatechange+0xdc>)
 802861c:	f241 4206 	movw	r2, #5126	@ 0x1406
 8028620:	4905      	ldr	r1, [pc, #20]	@ (8028638 <onstatechange+0xe0>)
 8028622:	2001      	movs	r0, #1
 8028624:	f7fd f8e8 	bl	80257f8 <mg_log_prefix>
 8028628:	480a      	ldr	r0, [pc, #40]	@ (8028654 <onstatechange+0xfc>)
 802862a:	f7fa ffcf 	bl	80235cc <mg_log>
 802862e:	e7ef      	b.n	8028610 <onstatechange+0xb8>
 8028630:	2000012c 	.word	0x2000012c
 8028634:	0803a6a4 	.word	0x0803a6a4
 8028638:	08039d58 	.word	0x08039d58
 802863c:	0803a430 	.word	0x0803a430
 8028640:	0802358d 	.word	0x0802358d
 8028644:	0803a3f8 	.word	0x0803a3f8
 8028648:	0803a408 	.word	0x0803a408
 802864c:	0802359d 	.word	0x0802359d
 8028650:	0803a418 	.word	0x0803a418
 8028654:	0803a428 	.word	0x0803a428

08028658 <rx_dhcp_client>:
static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8028658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802865c:	b087      	sub	sp, #28
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 802865e:	2300      	movs	r3, #0
 8028660:	9305      	str	r3, [sp, #20]
 8028662:	9304      	str	r3, [sp, #16]
  uint8_t msgtype = 0, state = ifp->state;
 8028664:	f890 a07c 	ldrb.w	sl, [r0, #124]	@ 0x7c
  uint8_t *p = pkt->dhcp->options,
 8028668:	f8d1 8030 	ldr.w	r8, [r1, #48]	@ 0x30
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 802866c:	680e      	ldr	r6, [r1, #0]
 802866e:	684b      	ldr	r3, [r1, #4]
 8028670:	441e      	add	r6, r3
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 8028672:	f508 7388 	add.w	r3, r8, #272	@ 0x110
 8028676:	42b3      	cmp	r3, r6
 8028678:	d87b      	bhi.n	8028772 <rx_dhcp_client+0x11a>
 802867a:	4605      	mov	r5, r0
 802867c:	460f      	mov	r7, r1
 802867e:	f108 04f0 	add.w	r4, r8, #240	@ 0xf0
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 8028682:	2204      	movs	r2, #4
 8028684:	1c81      	adds	r1, r0, #2
 8028686:	eb08 0002 	add.w	r0, r8, r2
 802868a:	f003 fc1d 	bl	802bec8 <memcmp>
 802868e:	2800      	cmp	r0, #0
 8028690:	d16f      	bne.n	8028772 <rx_dhcp_client+0x11a>
  uint8_t msgtype = 0, state = ifp->state;
 8028692:	f04f 0900 	mov.w	r9, #0
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 8028696:	4648      	mov	r0, r9
 8028698:	f8cd 9004 	str.w	r9, [sp, #4]
 802869c:	f8cd 9000 	str.w	r9, [sp]
 80286a0:	46cb      	mov	fp, r9
 80286a2:	e026      	b.n	80286f2 <rx_dhcp_client+0x9a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80286a4:	7862      	ldrb	r2, [r4, #1]
 80286a6:	2a04      	cmp	r2, #4
 80286a8:	d12b      	bne.n	8028702 <rx_dhcp_client+0xaa>
 80286aa:	1da2      	adds	r2, r4, #6
 80286ac:	42b2      	cmp	r2, r6
 80286ae:	d228      	bcs.n	8028702 <rx_dhcp_client+0xaa>
      memcpy(&mask, p + 2, sizeof(mask));
 80286b0:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80286b4:	9301      	str	r3, [sp, #4]
 80286b6:	e019      	b.n	80286ec <rx_dhcp_client+0x94>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 80286b8:	7862      	ldrb	r2, [r4, #1]
 80286ba:	2a04      	cmp	r2, #4
 80286bc:	d123      	bne.n	8028706 <rx_dhcp_client+0xae>
 80286be:	1da2      	adds	r2, r4, #6
 80286c0:	42b2      	cmp	r2, r6
 80286c2:	d220      	bcs.n	8028706 <rx_dhcp_client+0xae>
      ip = pkt->dhcp->yiaddr;
 80286c4:	f8d8 b010 	ldr.w	fp, [r8, #16]
      memcpy(&gw, p + 2, sizeof(gw));
 80286c8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80286cc:	9300      	str	r3, [sp, #0]
      ip = pkt->dhcp->yiaddr;
 80286ce:	e00d      	b.n	80286ec <rx_dhcp_client+0x94>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80286d0:	7862      	ldrb	r2, [r4, #1]
 80286d2:	2a04      	cmp	r2, #4
 80286d4:	d11b      	bne.n	802870e <rx_dhcp_client+0xb6>
               p + 6 < end) {  // DNS
 80286d6:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 80286d8:	42b2      	cmp	r2, r6
 80286da:	d218      	bcs.n	802870e <rx_dhcp_client+0xb6>
      memcpy(&dns, p + 2, sizeof(dns));
 80286dc:	f8d4 3002 	ldr.w	r3, [r4, #2]
 80286e0:	9305      	str	r3, [sp, #20]
 80286e2:	e003      	b.n	80286ec <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 80286e4:	2b33      	cmp	r3, #51	@ 0x33
 80286e6:	d022      	beq.n	802872e <rx_dhcp_client+0xd6>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 80286e8:	2b35      	cmp	r3, #53	@ 0x35
 80286ea:	d02b      	beq.n	8028744 <rx_dhcp_client+0xec>
    p += p[1] + 2;
 80286ec:	7863      	ldrb	r3, [r4, #1]
 80286ee:	3302      	adds	r3, #2
 80286f0:	441c      	add	r4, r3
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 80286f2:	1c63      	adds	r3, r4, #1
 80286f4:	42b3      	cmp	r3, r6
 80286f6:	d22e      	bcs.n	8028756 <rx_dhcp_client+0xfe>
 80286f8:	7823      	ldrb	r3, [r4, #0]
 80286fa:	2bff      	cmp	r3, #255	@ 0xff
 80286fc:	d02b      	beq.n	8028756 <rx_dhcp_client+0xfe>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 80286fe:	2b01      	cmp	r3, #1
 8028700:	d0d0      	beq.n	80286a4 <rx_dhcp_client+0x4c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 8028702:	2b03      	cmp	r3, #3
 8028704:	d0d8      	beq.n	80286b8 <rx_dhcp_client+0x60>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 8028706:	7fea      	ldrb	r2, [r5, #31]
 8028708:	b10a      	cbz	r2, 802870e <rx_dhcp_client+0xb6>
 802870a:	2b06      	cmp	r3, #6
 802870c:	d0e0      	beq.n	80286d0 <rx_dhcp_client+0x78>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 802870e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8028712:	2a00      	cmp	r2, #0
 8028714:	d0e6      	beq.n	80286e4 <rx_dhcp_client+0x8c>
 8028716:	2b2a      	cmp	r3, #42	@ 0x2a
 8028718:	d1e4      	bne.n	80286e4 <rx_dhcp_client+0x8c>
 802871a:	7862      	ldrb	r2, [r4, #1]
 802871c:	2a04      	cmp	r2, #4
 802871e:	d1e1      	bne.n	80286e4 <rx_dhcp_client+0x8c>
               p + 6 < end) {  // SNTP
 8028720:	1da2      	adds	r2, r4, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 8028722:	42b2      	cmp	r2, r6
 8028724:	d2de      	bcs.n	80286e4 <rx_dhcp_client+0x8c>
      memcpy(&sntp, p + 2, sizeof(sntp));
 8028726:	f8d4 3002 	ldr.w	r3, [r4, #2]
 802872a:	9304      	str	r3, [sp, #16]
 802872c:	e7de      	b.n	80286ec <rx_dhcp_client+0x94>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 802872e:	7862      	ldrb	r2, [r4, #1]
 8028730:	2a04      	cmp	r2, #4
 8028732:	d1d9      	bne.n	80286e8 <rx_dhcp_client+0x90>
 8028734:	1da2      	adds	r2, r4, #6
 8028736:	42b2      	cmp	r2, r6
 8028738:	d2d6      	bcs.n	80286e8 <rx_dhcp_client+0x90>
      lease = mg_ntohl(lease);
 802873a:	f8d4 0002 	ldr.w	r0, [r4, #2]
 802873e:	f7fc fcbd 	bl	80250bc <mg_ntohl>
 8028742:	e7d3      	b.n	80286ec <rx_dhcp_client+0x94>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 8028744:	7863      	ldrb	r3, [r4, #1]
 8028746:	2b01      	cmp	r3, #1
 8028748:	d1d0      	bne.n	80286ec <rx_dhcp_client+0x94>
 802874a:	1da3      	adds	r3, r4, #6
 802874c:	42b3      	cmp	r3, r6
 802874e:	d2cd      	bcs.n	80286ec <rx_dhcp_client+0x94>
      msgtype = p[2];
 8028750:	f894 9002 	ldrb.w	r9, [r4, #2]
 8028754:	e7ca      	b.n	80286ec <rx_dhcp_client+0x94>
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8028756:	f1b9 0f06 	cmp.w	r9, #6
 802875a:	d00d      	beq.n	8028778 <rx_dhcp_client+0x120>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802875c:	f1b9 0f02 	cmp.w	r9, #2
 8028760:	d013      	beq.n	802878a <rx_dhcp_client+0x132>
  } else if (msgtype == 5) {          // DHCPACK
 8028762:	f1b9 0f05 	cmp.w	r9, #5
 8028766:	d028      	beq.n	80287ba <rx_dhcp_client+0x162>
  if (ifp->state != state) onstatechange(ifp);
 8028768:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 802876c:	4553      	cmp	r3, sl
 802876e:	f040 80b4 	bne.w	80288da <rx_dhcp_client+0x282>
}
 8028772:	b007      	add	sp, #28
 8028774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 8028778:	68ab      	ldr	r3, [r5, #8]
 802877a:	455b      	cmp	r3, fp
 802877c:	d1ee      	bne.n	802875c <rx_dhcp_client+0x104>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 802877e:	2301      	movs	r3, #1
 8028780:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8028784:	2300      	movs	r3, #0
 8028786:	60ab      	str	r3, [r5, #8]
 8028788:	e7ee      	b.n	8028768 <rx_dhcp_client+0x110>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 802878a:	f1ba 0f01 	cmp.w	sl, #1
 802878e:	d1e8      	bne.n	8028762 <rx_dhcp_client+0x10a>
 8028790:	f1bb 0f00 	cmp.w	fp, #0
 8028794:	d0e5      	beq.n	8028762 <rx_dhcp_client+0x10a>
 8028796:	9b00      	ldr	r3, [sp, #0]
 8028798:	2b00      	cmp	r3, #0
 802879a:	d0e2      	beq.n	8028762 <rx_dhcp_client+0x10a>
 802879c:	2800      	cmp	r0, #0
 802879e:	d0e0      	beq.n	8028762 <rx_dhcp_client+0x10a>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80287a0:	f8d8 2014 	ldr.w	r2, [r8, #20]
    tx_dhcp_request_sel(ifp, ip,
 80287a4:	b90a      	cbnz	r2, 80287aa <rx_dhcp_client+0x152>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 80287a6:	69fb      	ldr	r3, [r7, #28]
    tx_dhcp_request_sel(ifp, ip,
 80287a8:	68da      	ldr	r2, [r3, #12]
 80287aa:	4659      	mov	r1, fp
 80287ac:	4628      	mov	r0, r5
 80287ae:	f7ff f9b9 	bl	8027b24 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 80287b2:	2302      	movs	r3, #2
 80287b4:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 80287b8:	e7d6      	b.n	8028768 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80287ba:	f1ba 0f02 	cmp.w	sl, #2
 80287be:	d02a      	beq.n	8028816 <rx_dhcp_client+0x1be>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 80287c0:	f1ba 0f03 	cmp.w	sl, #3
 80287c4:	d1d0      	bne.n	8028768 <rx_dhcp_client+0x110>
 80287c6:	68ab      	ldr	r3, [r5, #8]
 80287c8:	455b      	cmp	r3, fp
 80287ca:	d1cd      	bne.n	8028768 <rx_dhcp_client+0x110>
      ifp->lease_expire = ifp->now + lease * 1000;
 80287cc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80287ce:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 80287d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80287d4:	4604      	mov	r4, r0
 80287d6:	fb00 f202 	mul.w	r2, r0, r2
 80287da:	189b      	adds	r3, r3, r2
 80287dc:	f141 0100 	adc.w	r1, r1, #0
 80287e0:	662b      	str	r3, [r5, #96]	@ 0x60
 80287e2:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80287e4:	4b3f      	ldr	r3, [pc, #252]	@ (80288e4 <rx_dhcp_client+0x28c>)
 80287e6:	681b      	ldr	r3, [r3, #0]
 80287e8:	2b01      	cmp	r3, #1
 80287ea:	ddbd      	ble.n	8028768 <rx_dhcp_client+0x110>
 80287ec:	4b3e      	ldr	r3, [pc, #248]	@ (80288e8 <rx_dhcp_client+0x290>)
 80287ee:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 80287f2:	493e      	ldr	r1, [pc, #248]	@ (80288ec <rx_dhcp_client+0x294>)
 80287f4:	2002      	movs	r0, #2
 80287f6:	f7fc ffff 	bl	80257f8 <mg_log_prefix>
 80287fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80287fe:	2300      	movs	r3, #0
 8028800:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 8028804:	f7e8 faa8 	bl	8010d58 <__aeabi_uldivmod>
 8028808:	4602      	mov	r2, r0
 802880a:	460b      	mov	r3, r1
 802880c:	4621      	mov	r1, r4
 802880e:	4838      	ldr	r0, [pc, #224]	@ (80288f0 <rx_dhcp_client+0x298>)
 8028810:	f7fa fedc 	bl	80235cc <mg_log>
 8028814:	e7a8      	b.n	8028768 <rx_dhcp_client+0x110>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 8028816:	f1bb 0f00 	cmp.w	fp, #0
 802881a:	d0d1      	beq.n	80287c0 <rx_dhcp_client+0x168>
 802881c:	9b00      	ldr	r3, [sp, #0]
 802881e:	2b00      	cmp	r3, #0
 8028820:	d0ce      	beq.n	80287c0 <rx_dhcp_client+0x168>
 8028822:	4604      	mov	r4, r0
 8028824:	2800      	cmp	r0, #0
 8028826:	d0cb      	beq.n	80287c0 <rx_dhcp_client+0x168>
      ifp->lease_expire = ifp->now + lease * 1000;
 8028828:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802882a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 802882c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028830:	fb00 f202 	mul.w	r2, r0, r2
 8028834:	189b      	adds	r3, r3, r2
 8028836:	f141 0100 	adc.w	r1, r1, #0
 802883a:	662b      	str	r3, [r5, #96]	@ 0x60
 802883c:	6669      	str	r1, [r5, #100]	@ 0x64
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 802883e:	4b29      	ldr	r3, [pc, #164]	@ (80288e4 <rx_dhcp_client+0x28c>)
 8028840:	681b      	ldr	r3, [r3, #0]
 8028842:	2b01      	cmp	r3, #1
 8028844:	dc2e      	bgt.n	80288a4 <rx_dhcp_client+0x24c>
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 8028846:	693b      	ldr	r3, [r7, #16]
 8028848:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802884c:	f8c5 2046 	str.w	r2, [r5, #70]	@ 0x46
 8028850:	895b      	ldrh	r3, [r3, #10]
 8028852:	f8a5 304a 	strh.w	r3, [r5, #74]	@ 0x4a
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 8028856:	f8c5 b008 	str.w	fp, [r5, #8]
 802885a:	9b00      	ldr	r3, [sp, #0]
 802885c:	612b      	str	r3, [r5, #16]
 802885e:	9b01      	ldr	r3, [sp, #4]
 8028860:	60eb      	str	r3, [r5, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 8028862:	2303      	movs	r3, #3
 8028864:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      mg_random(&rand, sizeof(rand));
 8028868:	2108      	movs	r1, #8
 802886a:	eb0d 0001 	add.w	r0, sp, r1
 802886e:	f7fc fbea 	bl	8025046 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 8028872:	9c02      	ldr	r4, [sp, #8]
 8028874:	f7fc ffbb 	bl	80257ee <mg_millis>
 8028878:	4420      	add	r0, r4
 802887a:	f002 fe69 	bl	802b550 <srand>
      if (ifp->enable_req_dns && dns != 0)
 802887e:	7feb      	ldrb	r3, [r5, #31]
 8028880:	b10b      	cbz	r3, 8028886 <rx_dhcp_client+0x22e>
 8028882:	9b05      	ldr	r3, [sp, #20]
 8028884:	bb1b      	cbnz	r3, 80288ce <rx_dhcp_client+0x276>
      if (ifp->enable_req_sntp && sntp != 0)
 8028886:	f895 3020 	ldrb.w	r3, [r5, #32]
 802888a:	2b00      	cmp	r3, #0
 802888c:	f43f af6c 	beq.w	8028768 <rx_dhcp_client+0x110>
 8028890:	9b04      	ldr	r3, [sp, #16]
 8028892:	2b00      	cmp	r3, #0
 8028894:	f43f af68 	beq.w	8028768 <rx_dhcp_client+0x110>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 8028898:	aa04      	add	r2, sp, #16
 802889a:	2102      	movs	r1, #2
 802889c:	4628      	mov	r0, r5
 802889e:	f7f8 f854 	bl	802094a <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 80288a2:	e761      	b.n	8028768 <rx_dhcp_client+0x110>
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 80288a4:	4b10      	ldr	r3, [pc, #64]	@ (80288e8 <rx_dhcp_client+0x290>)
 80288a6:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 80288aa:	4910      	ldr	r1, [pc, #64]	@ (80288ec <rx_dhcp_client+0x294>)
 80288ac:	2002      	movs	r0, #2
 80288ae:	f7fc ffa3 	bl	80257f8 <mg_log_prefix>
 80288b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80288b6:	2300      	movs	r3, #0
 80288b8:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	@ 0x60
 80288bc:	f7e8 fa4c 	bl	8010d58 <__aeabi_uldivmod>
 80288c0:	4602      	mov	r2, r0
 80288c2:	460b      	mov	r3, r1
 80288c4:	4621      	mov	r1, r4
 80288c6:	480a      	ldr	r0, [pc, #40]	@ (80288f0 <rx_dhcp_client+0x298>)
 80288c8:	f7fa fe80 	bl	80235cc <mg_log>
 80288cc:	e7bb      	b.n	8028846 <rx_dhcp_client+0x1ee>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 80288ce:	aa05      	add	r2, sp, #20
 80288d0:	2101      	movs	r1, #1
 80288d2:	4628      	mov	r0, r5
 80288d4:	f7f8 f839 	bl	802094a <mg_tcpip_call>
 80288d8:	e7d5      	b.n	8028886 <rx_dhcp_client+0x22e>
  if (ifp->state != state) onstatechange(ifp);
 80288da:	4628      	mov	r0, r5
 80288dc:	f7ff fe3c 	bl	8028558 <onstatechange>
 80288e0:	e747      	b.n	8028772 <rx_dhcp_client+0x11a>
 80288e2:	bf00      	nop
 80288e4:	2000012c 	.word	0x2000012c
 80288e8:	0803a664 	.word	0x0803a664
 80288ec:	08039d58 	.word	0x08039d58
 80288f0:	0803a43c 	.word	0x0803a43c

080288f4 <rx_ip>:
static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 80288f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80288f8:	b084      	sub	sp, #16
 80288fa:	4605      	mov	r5, r0
 80288fc:	460c      	mov	r4, r1
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 80288fe:	69c9      	ldr	r1, [r1, #28]
 8028900:	88cb      	ldrh	r3, [r1, #6]
 8028902:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8028906:	b29b      	uxth	r3, r3
 8028908:	b1c3      	cbz	r3, 802893c <rx_ip+0x48>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802890a:	7a4b      	ldrb	r3, [r1, #9]
 802890c:	2b11      	cmp	r3, #17
 802890e:	d00e      	beq.n	802892e <rx_ip+0x3a>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8028910:	7a4b      	ldrb	r3, [r1, #9]
 8028912:	2b06      	cmp	r3, #6
 8028914:	d00f      	beq.n	8028936 <rx_ip+0x42>
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8028916:	2200      	movs	r2, #0
 8028918:	4621      	mov	r1, r4
 802891a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 802891c:	f7f9 fb09 	bl	8021f32 <getpeer>
    if (c) mg_error(c, "Received fragmented packet");
 8028920:	b110      	cbz	r0, 8028928 <rx_ip+0x34>
 8028922:	4963      	ldr	r1, [pc, #396]	@ (8028ab0 <rx_ip+0x1bc>)
 8028924:	f7fd f850 	bl	80259c8 <mg_error>
}
 8028928:	b004      	add	sp, #16
 802892a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 802892e:	f101 0314 	add.w	r3, r1, #20
 8028932:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8028934:	e7ec      	b.n	8028910 <rx_ip+0x1c>
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8028936:	3114      	adds	r1, #20
 8028938:	62a1      	str	r1, [r4, #40]	@ 0x28
 802893a:	e7ec      	b.n	8028916 <rx_ip+0x22>
  } else if (pkt->ip->proto == 1) {
 802893c:	7a4b      	ldrb	r3, [r1, #9]
 802893e:	2b01      	cmp	r3, #1
 8028940:	d024      	beq.n	802898c <rx_ip+0x98>
  } else if (pkt->ip->proto == 17) {
 8028942:	2b11      	cmp	r3, #17
 8028944:	d031      	beq.n	80289aa <rx_ip+0xb6>
  } else if (pkt->ip->proto == 6) {
 8028946:	2b06      	cmp	r3, #6
 8028948:	d1ee      	bne.n	8028928 <rx_ip+0x34>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 802894a:	f101 0314 	add.w	r3, r1, #20
 802894e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8028950:	68e3      	ldr	r3, [r4, #12]
 8028952:	2b13      	cmp	r3, #19
 8028954:	d9e8      	bls.n	8028928 <rx_ip+0x34>
    mkpay(pkt, pkt->tcp + 1);
 8028956:	3128      	adds	r1, #40	@ 0x28
 8028958:	4620      	mov	r0, r4
 802895a:	f7fb f8d4 	bl	8023b06 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 802895e:	69e3      	ldr	r3, [r4, #28]
 8028960:	8858      	ldrh	r0, [r3, #2]
 8028962:	f7fc fc43 	bl	80251ec <mg_ntohs>
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8028966:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028968:	7b1b      	ldrb	r3, [r3, #12]
 802896a:	091b      	lsrs	r3, r3, #4
 802896c:	3305      	adds	r3, #5
 802896e:	009a      	lsls	r2, r3, #2
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 8028970:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8028974:	d301      	bcc.n	802897a <rx_ip+0x86>
 8028976:	1a80      	subs	r0, r0, r2
 8028978:	60e0      	str	r0, [r4, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802897a:	4b4e      	ldr	r3, [pc, #312]	@ (8028ab4 <rx_ip+0x1c0>)
 802897c:	681b      	ldr	r3, [r3, #0]
 802897e:	2b03      	cmp	r3, #3
 8028980:	dc74      	bgt.n	8028a6c <rx_ip+0x178>
    rx_tcp(ifp, pkt);
 8028982:	4621      	mov	r1, r4
 8028984:	4628      	mov	r0, r5
 8028986:	f7ff fb3d 	bl	8028004 <rx_tcp>
 802898a:	e7cd      	b.n	8028928 <rx_ip+0x34>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 802898c:	f101 0314 	add.w	r3, r1, #20
 8028990:	6263      	str	r3, [r4, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8028992:	68e3      	ldr	r3, [r4, #12]
 8028994:	2b03      	cmp	r3, #3
 8028996:	d9c7      	bls.n	8028928 <rx_ip+0x34>
    mkpay(pkt, pkt->icmp + 1);
 8028998:	3118      	adds	r1, #24
 802899a:	4620      	mov	r0, r4
 802899c:	f7fb f8b3 	bl	8023b06 <mkpay>
    rx_icmp(ifp, pkt);
 80289a0:	4621      	mov	r1, r4
 80289a2:	4628      	mov	r0, r5
 80289a4:	f7fc fc77 	bl	8025296 <rx_icmp>
 80289a8:	e7be      	b.n	8028928 <rx_ip+0x34>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 80289aa:	f101 0314 	add.w	r3, r1, #20
 80289ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80289b0:	68e3      	ldr	r3, [r4, #12]
 80289b2:	2b07      	cmp	r3, #7
 80289b4:	d9b8      	bls.n	8028928 <rx_ip+0x34>
    mkpay(pkt, pkt->udp + 1);
 80289b6:	311c      	adds	r1, #28
 80289b8:	4620      	mov	r0, r4
 80289ba:	f7fb f8a4 	bl	8023b06 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80289be:	4b3d      	ldr	r3, [pc, #244]	@ (8028ab4 <rx_ip+0x1c0>)
 80289c0:	681b      	ldr	r3, [r3, #0]
 80289c2:	2b03      	cmp	r3, #3
 80289c4:	dc16      	bgt.n	80289f4 <rx_ip+0x100>
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 80289c6:	7f2b      	ldrb	r3, [r5, #28]
 80289c8:	b133      	cbz	r3, 80289d8 <rx_ip+0xe4>
 80289ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80289cc:	8877      	ldrh	r7, [r6, #2]
 80289ce:	2044      	movs	r0, #68	@ 0x44
 80289d0:	f7fc fc0c 	bl	80251ec <mg_ntohs>
 80289d4:	4287      	cmp	r7, r0
 80289d6:	d02f      	beq.n	8028a38 <rx_ip+0x144>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 80289d8:	7f6b      	ldrb	r3, [r5, #29]
 80289da:	b133      	cbz	r3, 80289ea <rx_ip+0xf6>
 80289dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80289de:	8877      	ldrh	r7, [r6, #2]
 80289e0:	2043      	movs	r0, #67	@ 0x43
 80289e2:	f7fc fc03 	bl	80251ec <mg_ntohs>
 80289e6:	4287      	cmp	r7, r0
 80289e8:	d033      	beq.n	8028a52 <rx_ip+0x15e>
      rx_udp(ifp, pkt);
 80289ea:	4621      	mov	r1, r4
 80289ec:	4628      	mov	r0, r5
 80289ee:	f7fd fe03 	bl	80265f8 <rx_udp>
 80289f2:	e799      	b.n	8028928 <rx_ip+0x34>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80289f4:	4b30      	ldr	r3, [pc, #192]	@ (8028ab8 <rx_ip+0x1c4>)
 80289f6:	f241 6255 	movw	r2, #5717	@ 0x1655
 80289fa:	4930      	ldr	r1, [pc, #192]	@ (8028abc <rx_ip+0x1c8>)
 80289fc:	2004      	movs	r0, #4
 80289fe:	f7fc fefb 	bl	80257f8 <mg_log_prefix>
 8028a02:	69e7      	ldr	r7, [r4, #28]
 8028a04:	f8d4 802c 	ldr.w	r8, [r4, #44]	@ 0x2c
 8028a08:	f8b8 0000 	ldrh.w	r0, [r8]
 8028a0c:	f7fc fbee 	bl	80251ec <mg_ntohs>
 8028a10:	4606      	mov	r6, r0
 8028a12:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8028a16:	f7fc fbe9 	bl	80251ec <mg_ntohs>
 8028a1a:	68e3      	ldr	r3, [r4, #12]
 8028a1c:	4928      	ldr	r1, [pc, #160]	@ (8028ac0 <rx_ip+0x1cc>)
 8028a1e:	9303      	str	r3, [sp, #12]
 8028a20:	9002      	str	r0, [sp, #8]
 8028a22:	f107 0310 	add.w	r3, r7, #16
 8028a26:	9301      	str	r3, [sp, #4]
 8028a28:	9100      	str	r1, [sp, #0]
 8028a2a:	4633      	mov	r3, r6
 8028a2c:	f107 020c 	add.w	r2, r7, #12
 8028a30:	4824      	ldr	r0, [pc, #144]	@ (8028ac4 <rx_ip+0x1d0>)
 8028a32:	f7fa fdcb 	bl	80235cc <mg_log>
 8028a36:	e7c6      	b.n	80289c6 <rx_ip+0xd2>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8028a38:	f106 0308 	add.w	r3, r6, #8
 8028a3c:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8028a3e:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8028a42:	4620      	mov	r0, r4
 8028a44:	f7fb f85f 	bl	8023b06 <mkpay>
      rx_dhcp_client(ifp, pkt);
 8028a48:	4621      	mov	r1, r4
 8028a4a:	4628      	mov	r0, r5
 8028a4c:	f7ff fe04 	bl	8028658 <rx_dhcp_client>
 8028a50:	e76a      	b.n	8028928 <rx_ip+0x34>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8028a52:	f106 0308 	add.w	r3, r6, #8
 8028a56:	6323      	str	r3, [r4, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8028a58:	f506 718c 	add.w	r1, r6, #280	@ 0x118
 8028a5c:	4620      	mov	r0, r4
 8028a5e:	f7fb f852 	bl	8023b06 <mkpay>
      rx_dhcp_server(ifp, pkt);
 8028a62:	4621      	mov	r1, r4
 8028a64:	4628      	mov	r0, r5
 8028a66:	f7fc fd41 	bl	80254ec <rx_dhcp_server>
 8028a6a:	e75d      	b.n	8028928 <rx_ip+0x34>
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8028a6c:	4b12      	ldr	r3, [pc, #72]	@ (8028ab8 <rx_ip+0x1c4>)
 8028a6e:	f241 626a 	movw	r2, #5738	@ 0x166a
 8028a72:	4912      	ldr	r1, [pc, #72]	@ (8028abc <rx_ip+0x1c8>)
 8028a74:	2004      	movs	r0, #4
 8028a76:	f7fc febf 	bl	80257f8 <mg_log_prefix>
 8028a7a:	69e7      	ldr	r7, [r4, #28]
 8028a7c:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 8028a80:	f8b8 0000 	ldrh.w	r0, [r8]
 8028a84:	f7fc fbb2 	bl	80251ec <mg_ntohs>
 8028a88:	4606      	mov	r6, r0
 8028a8a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8028a8e:	f7fc fbad 	bl	80251ec <mg_ntohs>
 8028a92:	68e3      	ldr	r3, [r4, #12]
 8028a94:	490a      	ldr	r1, [pc, #40]	@ (8028ac0 <rx_ip+0x1cc>)
 8028a96:	9303      	str	r3, [sp, #12]
 8028a98:	9002      	str	r0, [sp, #8]
 8028a9a:	f107 0310 	add.w	r3, r7, #16
 8028a9e:	9301      	str	r3, [sp, #4]
 8028aa0:	9100      	str	r1, [sp, #0]
 8028aa2:	4633      	mov	r3, r6
 8028aa4:	f107 020c 	add.w	r2, r7, #12
 8028aa8:	4807      	ldr	r0, [pc, #28]	@ (8028ac8 <rx_ip+0x1d4>)
 8028aaa:	f7fa fd8f 	bl	80235cc <mg_log>
 8028aae:	e768      	b.n	8028982 <rx_ip+0x8e>
 8028ab0:	0803a454 	.word	0x0803a454
 8028ab4:	2000012c 	.word	0x2000012c
 8028ab8:	0803a674 	.word	0x0803a674
 8028abc:	08039d58 	.word	0x08039d58
 8028ac0:	0802358d 	.word	0x0802358d
 8028ac4:	0803a470 	.word	0x0803a470
 8028ac8:	0803a48c 	.word	0x0803a48c

08028acc <mg_tcpip_rx>:
static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8028acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ad0:	b08e      	sub	sp, #56	@ 0x38
 8028ad2:	4606      	mov	r6, r0
 8028ad4:	460c      	mov	r4, r1
 8028ad6:	4615      	mov	r5, r2
  memset(&pkt, 0, sizeof(pkt));
 8028ad8:	2234      	movs	r2, #52	@ 0x34
 8028ada:	2100      	movs	r1, #0
 8028adc:	a801      	add	r0, sp, #4
 8028ade:	f003 fa87 	bl	802bff0 <memset>
  pkt.raw.buf = (char *) buf;
 8028ae2:	9401      	str	r4, [sp, #4]
  pkt.raw.len = len;
 8028ae4:	9502      	str	r5, [sp, #8]
  pkt.eth = (struct eth *) buf;
 8028ae6:	9405      	str	r4, [sp, #20]
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8028ae8:	2d0d      	cmp	r5, #13
 8028aea:	d93f      	bls.n	8028b6c <mg_tcpip_rx+0xa0>
  if (ifp->enable_mac_check &&
 8028aec:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8028af0:	b15b      	cbz	r3, 8028b0a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8028af2:	2206      	movs	r2, #6
 8028af4:	4631      	mov	r1, r6
 8028af6:	4620      	mov	r0, r4
 8028af8:	f003 f9e6 	bl	802bec8 <memcmp>
  if (ifp->enable_mac_check &&
 8028afc:	b128      	cbz	r0, 8028b0a <mg_tcpip_rx+0x3e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8028afe:	2206      	movs	r2, #6
 8028b00:	4945      	ldr	r1, [pc, #276]	@ (8028c18 <mg_tcpip_rx+0x14c>)
 8028b02:	4620      	mov	r0, r4
 8028b04:	f003 f9e0 	bl	802bec8 <memcmp>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8028b08:	bb80      	cbnz	r0, 8028b6c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8028b0a:	f896 3021 	ldrb.w	r3, [r6, #33]	@ 0x21
 8028b0e:	b18b      	cbz	r3, 8028b34 <mg_tcpip_rx+0x68>
 8028b10:	2d04      	cmp	r5, #4
 8028b12:	d92e      	bls.n	8028b72 <mg_tcpip_rx+0xa6>
    len -= 4;  // TODO(scaprile): check on bigendian
 8028b14:	f1a5 0804 	sub.w	r8, r5, #4
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8028b18:	4642      	mov	r2, r8
 8028b1a:	4621      	mov	r1, r4
 8028b1c:	2000      	movs	r0, #0
 8028b1e:	f7fc fe1b 	bl	8025758 <mg_crc32>
 8028b22:	9000      	str	r0, [sp, #0]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8028b24:	2204      	movs	r2, #4
 8028b26:	4669      	mov	r1, sp
 8028b28:	eb04 0008 	add.w	r0, r4, r8
 8028b2c:	f003 f9cc 	bl	802bec8 <memcmp>
 8028b30:	b108      	cbz	r0, 8028b36 <mg_tcpip_rx+0x6a>
 8028b32:	e01b      	b.n	8028b6c <mg_tcpip_rx+0xa0>
  if (ifp->enable_crc32_check && len > 4) {
 8028b34:	46a8      	mov	r8, r5
  if (pkt.eth->type == mg_htons(0x806)) {
 8028b36:	89a7      	ldrh	r7, [r4, #12]
 8028b38:	f640 0006 	movw	r0, #2054	@ 0x806
 8028b3c:	f7fc fb56 	bl	80251ec <mg_ntohs>
 8028b40:	4287      	cmp	r7, r0
 8028b42:	d018      	beq.n	8028b76 <mg_tcpip_rx+0xaa>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8028b44:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 8028b48:	f7fc fb50 	bl	80251ec <mg_ntohs>
 8028b4c:	4287      	cmp	r7, r0
 8028b4e:	d01b      	beq.n	8028b88 <mg_tcpip_rx+0xbc>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8028b50:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8028b54:	f7fc fb4a 	bl	80251ec <mg_ntohs>
 8028b58:	4287      	cmp	r7, r0
 8028b5a:	d028      	beq.n	8028bae <mg_tcpip_rx+0xe2>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8028b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8028c1c <mg_tcpip_rx+0x150>)
 8028b5e:	681b      	ldr	r3, [r3, #0]
 8028b60:	2b02      	cmp	r3, #2
 8028b62:	dc41      	bgt.n	8028be8 <mg_tcpip_rx+0x11c>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8028b64:	4b2d      	ldr	r3, [pc, #180]	@ (8028c1c <mg_tcpip_rx+0x150>)
 8028b66:	681b      	ldr	r3, [r3, #0]
 8028b68:	2b03      	cmp	r3, #3
 8028b6a:	dc4d      	bgt.n	8028c08 <mg_tcpip_rx+0x13c>
}
 8028b6c:	b00e      	add	sp, #56	@ 0x38
 8028b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ifp->enable_crc32_check && len > 4) {
 8028b72:	46a8      	mov	r8, r5
 8028b74:	e7df      	b.n	8028b36 <mg_tcpip_rx+0x6a>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8028b76:	340e      	adds	r4, #14
 8028b78:	9407      	str	r4, [sp, #28]
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8028b7a:	2d29      	cmp	r5, #41	@ 0x29
 8028b7c:	d9f6      	bls.n	8028b6c <mg_tcpip_rx+0xa0>
    rx_arp(ifp, &pkt);
 8028b7e:	a901      	add	r1, sp, #4
 8028b80:	4630      	mov	r0, r6
 8028b82:	f7fe ff09 	bl	8027998 <rx_arp>
 8028b86:	e7f1      	b.n	8028b6c <mg_tcpip_rx+0xa0>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8028b88:	f104 030e 	add.w	r3, r4, #14
 8028b8c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 8028b8e:	2d35      	cmp	r5, #53	@ 0x35
 8028b90:	d9ec      	bls.n	8028b6c <mg_tcpip_rx+0xa0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8028b92:	7ba3      	ldrb	r3, [r4, #14]
 8028b94:	091b      	lsrs	r3, r3, #4
 8028b96:	2b06      	cmp	r3, #6
 8028b98:	d1e8      	bne.n	8028b6c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip6 + 1);
 8028b9a:	f104 0136 	add.w	r1, r4, #54	@ 0x36
 8028b9e:	a801      	add	r0, sp, #4
 8028ba0:	f7fa ffb1 	bl	8023b06 <mkpay>
    rx_ip6(ifp, &pkt);
 8028ba4:	a901      	add	r1, sp, #4
 8028ba6:	4630      	mov	r0, r6
 8028ba8:	f7fc fbaf 	bl	802530a <rx_ip6>
 8028bac:	e7de      	b.n	8028b6c <mg_tcpip_rx+0xa0>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 8028bae:	f104 030e 	add.w	r3, r4, #14
 8028bb2:	9308      	str	r3, [sp, #32]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8028bb4:	2d21      	cmp	r5, #33	@ 0x21
 8028bb6:	d9d9      	bls.n	8028b6c <mg_tcpip_rx+0xa0>
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8028bb8:	8a20      	ldrh	r0, [r4, #16]
 8028bba:	f7fc fb17 	bl	80251ec <mg_ntohs>
 8028bbe:	300e      	adds	r0, #14
 8028bc0:	42a8      	cmp	r0, r5
 8028bc2:	d200      	bcs.n	8028bc6 <mg_tcpip_rx+0xfa>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 8028bc4:	9002      	str	r0, [sp, #8]
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8028bc6:	9b02      	ldr	r3, [sp, #8]
 8028bc8:	2b21      	cmp	r3, #33	@ 0x21
 8028bca:	d9cf      	bls.n	8028b6c <mg_tcpip_rx+0xa0>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8028bcc:	7ba3      	ldrb	r3, [r4, #14]
 8028bce:	091b      	lsrs	r3, r3, #4
 8028bd0:	2b04      	cmp	r3, #4
 8028bd2:	d1cb      	bne.n	8028b6c <mg_tcpip_rx+0xa0>
    mkpay(&pkt, pkt.ip + 1);
 8028bd4:	f104 0122 	add.w	r1, r4, #34	@ 0x22
 8028bd8:	a801      	add	r0, sp, #4
 8028bda:	f7fa ff94 	bl	8023b06 <mkpay>
    rx_ip(ifp, &pkt);
 8028bde:	a901      	add	r1, sp, #4
 8028be0:	4630      	mov	r0, r6
 8028be2:	f7ff fe87 	bl	80288f4 <rx_ip>
 8028be6:	e7c1      	b.n	8028b6c <mg_tcpip_rx+0xa0>
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8028be8:	4b0d      	ldr	r3, [pc, #52]	@ (8028c20 <mg_tcpip_rx+0x154>)
 8028bea:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 8028bee:	490d      	ldr	r1, [pc, #52]	@ (8028c24 <mg_tcpip_rx+0x158>)
 8028bf0:	2003      	movs	r0, #3
 8028bf2:	f7fc fe01 	bl	80257f8 <mg_log_prefix>
 8028bf6:	9b05      	ldr	r3, [sp, #20]
 8028bf8:	8998      	ldrh	r0, [r3, #12]
 8028bfa:	f7fc faf7 	bl	80251ec <mg_ntohs>
 8028bfe:	4601      	mov	r1, r0
 8028c00:	4809      	ldr	r0, [pc, #36]	@ (8028c28 <mg_tcpip_rx+0x15c>)
 8028c02:	f7fa fce3 	bl	80235cc <mg_log>
 8028c06:	e7ad      	b.n	8028b64 <mg_tcpip_rx+0x98>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8028c08:	4641      	mov	r1, r8
 8028c0a:	2920      	cmp	r1, #32
 8028c0c:	bf28      	it	cs
 8028c0e:	2120      	movcs	r1, #32
 8028c10:	4620      	mov	r0, r4
 8028c12:	f7f9 fe3b 	bl	802288c <mg_hexdump>
 8028c16:	e7a9      	b.n	8028b6c <mg_tcpip_rx+0xa0>
 8028c18:	0803a7e0 	.word	0x0803a7e0
 8028c1c:	2000012c 	.word	0x2000012c
 8028c20:	0803a684 	.word	0x0803a684
 8028c24:	08039d58 	.word	0x08039d58
 8028c28:	0803a4a8 	.word	0x0803a4a8

08028c2c <mg_tcpip_poll>:
static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8028c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c30:	b08b      	sub	sp, #44	@ 0x2c
 8028c32:	4605      	mov	r5, r0
 8028c34:	4616      	mov	r6, r2
 8028c36:	461f      	mov	r7, r3
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8028c38:	9200      	str	r2, [sp, #0]
 8028c3a:	9301      	str	r3, [sp, #4]
 8028c3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028c40:	2300      	movs	r3, #0
 8028c42:	3058      	adds	r0, #88	@ 0x58
 8028c44:	f7fc f8a4 	bl	8024d90 <mg_timer_expired>
  ifp->now = now;
 8028c48:	652e      	str	r6, [r5, #80]	@ 0x50
 8028c4a:	656f      	str	r7, [r5, #84]	@ 0x54
  if (expired_1000ms && ifp->driver->up) {
 8028c4c:	4604      	mov	r4, r0
 8028c4e:	b318      	cbz	r0, 8028c98 <mg_tcpip_poll+0x6c>
 8028c50:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8028c52:	68db      	ldr	r3, [r3, #12]
 8028c54:	b303      	cbz	r3, 8028c98 <mg_tcpip_poll+0x6c>
    bool up = ifp->driver->up(ifp);
 8028c56:	4628      	mov	r0, r5
 8028c58:	4798      	blx	r3
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8028c5a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028c5e:	3b00      	subs	r3, #0
 8028c60:	bf18      	it	ne
 8028c62:	2301      	movne	r3, #1
    if (up != current) {
 8028c64:	4298      	cmp	r0, r3
 8028c66:	d010      	beq.n	8028c8a <mg_tcpip_poll+0x5e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8028c68:	b120      	cbz	r0, 8028c74 <mg_tcpip_poll+0x48>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 8028c6a:	7f2b      	ldrb	r3, [r5, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8028c6c:	2b00      	cmp	r3, #0
 8028c6e:	d06e      	beq.n	8028d4e <mg_tcpip_poll+0x122>
 8028c70:	2301      	movs	r3, #1
 8028c72:	e000      	b.n	8028c76 <mg_tcpip_poll+0x4a>
 8028c74:	2300      	movs	r3, #0
 8028c76:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8028c7a:	b918      	cbnz	r0, 8028c84 <mg_tcpip_poll+0x58>
 8028c7c:	7f2b      	ldrb	r3, [r5, #28]
 8028c7e:	b10b      	cbz	r3, 8028c84 <mg_tcpip_poll+0x58>
 8028c80:	2300      	movs	r3, #0
 8028c82:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8028c84:	4628      	mov	r0, r5
 8028c86:	f7ff fc67 	bl	8028558 <onstatechange>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8028c8a:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028c8e:	b91b      	cbnz	r3, 8028c98 <mg_tcpip_poll+0x6c>
 8028c90:	4ba8      	ldr	r3, [pc, #672]	@ (8028f34 <mg_tcpip_poll+0x308>)
 8028c92:	681b      	ldr	r3, [r3, #0]
 8028c94:	2b00      	cmp	r3, #0
 8028c96:	dc5c      	bgt.n	8028d52 <mg_tcpip_poll+0x126>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8028c98:	f895 307c 	ldrb.w	r3, [r5, #124]	@ 0x7c
 8028c9c:	2b00      	cmp	r3, #0
 8028c9e:	f000 8146 	beq.w	8028f2e <mg_tcpip_poll+0x302>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8028ca2:	2b01      	cmp	r3, #1
 8028ca4:	d060      	beq.n	8028d68 <mg_tcpip_poll+0x13c>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8028ca6:	2c00      	cmp	r4, #0
 8028ca8:	d05f      	beq.n	8028d6a <mg_tcpip_poll+0x13e>
 8028caa:	2b03      	cmp	r3, #3
 8028cac:	d15d      	bne.n	8028d6a <mg_tcpip_poll+0x13e>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 8028cae:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8028cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 8028cb2:	ea52 0103 	orrs.w	r1, r2, r3
 8028cb6:	d058      	beq.n	8028d6a <mg_tcpip_poll+0x13e>
    if (ifp->now >= ifp->lease_expire) {
 8028cb8:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8028cba:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8028cbc:	4290      	cmp	r0, r2
 8028cbe:	eb71 0403 	sbcs.w	r4, r1, r3
 8028cc2:	d262      	bcs.n	8028d8a <mg_tcpip_poll+0x15e>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8028cc4:	4c9c      	ldr	r4, [pc, #624]	@ (8028f38 <mg_tcpip_poll+0x30c>)
 8028cc6:	1904      	adds	r4, r0, r4
 8028cc8:	f141 0c00 	adc.w	ip, r1, #0
 8028ccc:	42a2      	cmp	r2, r4
 8028cce:	eb73 030c 	sbcs.w	r3, r3, ip
 8028cd2:	d24a      	bcs.n	8028d6a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8028cd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8028cd8:	2300      	movs	r3, #0
 8028cda:	f7e8 f83d 	bl	8010d58 <__aeabi_uldivmod>
 8028cde:	4602      	mov	r2, r0
 8028ce0:	2000      	movs	r0, #0
 8028ce2:	1853      	adds	r3, r2, r1
 8028ce4:	d25a      	bcs.n	8028d9c <mg_tcpip_poll+0x170>
 8028ce6:	4403      	add	r3, r0
 8028ce8:	4894      	ldr	r0, [pc, #592]	@ (8028f3c <mg_tcpip_poll+0x310>)
 8028cea:	fba0 4003 	umull	r4, r0, r0, r3
 8028cee:	08c0      	lsrs	r0, r0, #3
 8028cf0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8028cf4:	1a1b      	subs	r3, r3, r0
 8028cf6:	1ad3      	subs	r3, r2, r3
 8028cf8:	f161 0c00 	sbc.w	ip, r1, #0
 8028cfc:	4c90      	ldr	r4, [pc, #576]	@ (8028f40 <mg_tcpip_poll+0x314>)
 8028cfe:	f04f 30ee 	mov.w	r0, #4008636142	@ 0xeeeeeeee
 8028d02:	fb03 f000 	mul.w	r0, r3, r0
 8028d06:	fb04 000c 	mla	r0, r4, ip, r0
 8028d0a:	fba3 3404 	umull	r3, r4, r3, r4
 8028d0e:	4420      	add	r0, r4
 8028d10:	089b      	lsrs	r3, r3, #2
 8028d12:	ea43 7380 	orr.w	r3, r3, r0, lsl #30
 8028d16:	0880      	lsrs	r0, r0, #2
 8028d18:	0104      	lsls	r4, r0, #4
 8028d1a:	ea44 7413 	orr.w	r4, r4, r3, lsr #28
 8028d1e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8028d22:	ebbc 0c03 	subs.w	ip, ip, r3
 8028d26:	eb64 0300 	sbc.w	r3, r4, r0
 8028d2a:	009b      	lsls	r3, r3, #2
 8028d2c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8028d30:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8028d34:	1a12      	subs	r2, r2, r0
 8028d36:	eb61 0103 	sbc.w	r1, r1, r3
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 8028d3a:	430a      	orrs	r2, r1
 8028d3c:	d115      	bne.n	8028d6a <mg_tcpip_poll+0x13e>
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8028d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028d42:	68aa      	ldr	r2, [r5, #8]
 8028d44:	497f      	ldr	r1, [pc, #508]	@ (8028f44 <mg_tcpip_poll+0x318>)
 8028d46:	4628      	mov	r0, r5
 8028d48:	f7fe fdfe 	bl	8027948 <tx_dhcp_request_re>
 8028d4c:	e00d      	b.n	8028d6a <mg_tcpip_poll+0x13e>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8028d4e:	2303      	movs	r3, #3
 8028d50:	e791      	b.n	8028c76 <mg_tcpip_poll+0x4a>
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8028d52:	4b7d      	ldr	r3, [pc, #500]	@ (8028f48 <mg_tcpip_poll+0x31c>)
 8028d54:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8028d58:	497c      	ldr	r1, [pc, #496]	@ (8028f4c <mg_tcpip_poll+0x320>)
 8028d5a:	2001      	movs	r0, #1
 8028d5c:	f7fc fd4c 	bl	80257f8 <mg_log_prefix>
 8028d60:	487b      	ldr	r0, [pc, #492]	@ (8028f50 <mg_tcpip_poll+0x324>)
 8028d62:	f7fa fc33 	bl	80235cc <mg_log>
 8028d66:	e797      	b.n	8028c98 <mg_tcpip_poll+0x6c>
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 8028d68:	b95c      	cbnz	r4, 8028d82 <mg_tcpip_poll+0x156>
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 8028d6a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8028d6c:	689b      	ldr	r3, [r3, #8]
 8028d6e:	b1fb      	cbz	r3, 8028db0 <mg_tcpip_poll+0x184>
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 8028d70:	462a      	mov	r2, r5
 8028d72:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8028d74:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8028d76:	4798      	blx	r3
    if (len > 0) {
 8028d78:	4602      	mov	r2, r0
 8028d7a:	b988      	cbnz	r0, 8028da0 <mg_tcpip_poll+0x174>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8028d7c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8028d7e:	681c      	ldr	r4, [r3, #0]
 8028d80:	e0a3      	b.n	8028eca <mg_tcpip_poll+0x29e>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8028d82:	4628      	mov	r0, r5
 8028d84:	f7fe fdaa 	bl	80278dc <tx_dhcp_discover>
 8028d88:	e7ef      	b.n	8028d6a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 8028d8a:	2301      	movs	r3, #1
 8028d8c:	f885 307c 	strb.w	r3, [r5, #124]	@ 0x7c
 8028d90:	2300      	movs	r3, #0
 8028d92:	60ab      	str	r3, [r5, #8]
      onstatechange(ifp);
 8028d94:	4628      	mov	r0, r5
 8028d96:	f7ff fbdf 	bl	8028558 <onstatechange>
 8028d9a:	e7e6      	b.n	8028d6a <mg_tcpip_poll+0x13e>
               ((ifp->now / 1000) % 60) == 0) {
 8028d9c:	2001      	movs	r0, #1
 8028d9e:	e7a2      	b.n	8028ce6 <mg_tcpip_poll+0xba>
      ifp->nrecv++;
 8028da0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8028da2:	3301      	adds	r3, #1
 8028da4:	672b      	str	r3, [r5, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8028da6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8028da8:	4628      	mov	r0, r5
 8028daa:	f7ff fe8f 	bl	8028acc <mg_tcpip_rx>
 8028dae:	e7e5      	b.n	8028d7c <mg_tcpip_poll+0x150>
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8028db0:	f105 0434 	add.w	r4, r5, #52	@ 0x34
 8028db4:	a909      	add	r1, sp, #36	@ 0x24
 8028db6:	4620      	mov	r0, r4
 8028db8:	f7fa fd13 	bl	80237e2 <mg_queue_next>
    if (len > 0) {
 8028dbc:	4680      	mov	r8, r0
 8028dbe:	2800      	cmp	r0, #0
 8028dc0:	d0dc      	beq.n	8028d7c <mg_tcpip_poll+0x150>
      mg_tcpip_rx(ifp, buf, len);
 8028dc2:	4602      	mov	r2, r0
 8028dc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028dc6:	4628      	mov	r0, r5
 8028dc8:	f7ff fe80 	bl	8028acc <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8028dcc:	4641      	mov	r1, r8
 8028dce:	4620      	mov	r0, r4
 8028dd0:	f7fa fd23 	bl	802381a <mg_queue_del>
 8028dd4:	e7d2      	b.n	8028d7c <mg_tcpip_poll+0x150>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8028dd6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	@ 0xc0
 8028dda:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8028dde:	4291      	cmp	r1, r2
 8028de0:	f000 8088 	beq.w	8028ef4 <mg_tcpip_poll+0x2c8>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8028de4:	4b53      	ldr	r3, [pc, #332]	@ (8028f34 <mg_tcpip_poll+0x308>)
 8028de6:	681b      	ldr	r3, [r3, #0]
 8028de8:	2b03      	cmp	r3, #3
 8028dea:	dc23      	bgt.n	8028e34 <mg_tcpip_poll+0x208>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8028dec:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8028df0:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028df4:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
 8028df8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8028dfc:	f7fc f95e 	bl	80250bc <mg_ntohl>
 8028e00:	9007      	str	r0, [sp, #28]
 8028e02:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028e06:	f7fc f959 	bl	80250bc <mg_ntohl>
 8028e0a:	2300      	movs	r3, #0
 8028e0c:	9305      	str	r3, [sp, #20]
 8028e0e:	9304      	str	r3, [sp, #16]
 8028e10:	9003      	str	r0, [sp, #12]
 8028e12:	9b07      	ldr	r3, [sp, #28]
 8028e14:	9302      	str	r3, [sp, #8]
 8028e16:	f8cd b004 	str.w	fp, [sp, #4]
 8028e1a:	f8cd a000 	str.w	sl, [sp]
 8028e1e:	2310      	movs	r3, #16
 8028e20:	4642      	mov	r2, r8
 8028e22:	4649      	mov	r1, r9
 8028e24:	4628      	mov	r0, r5
 8028e26:	f7fe f9e3 	bl	80271f0 <tx_tcp>
        s->acked = s->ack;
 8028e2a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028e2e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8028e32:	e045      	b.n	8028ec0 <mg_tcpip_poll+0x294>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8028e34:	4b44      	ldr	r3, [pc, #272]	@ (8028f48 <mg_tcpip_poll+0x31c>)
 8028e36:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 8028e3a:	4944      	ldr	r1, [pc, #272]	@ (8028f4c <mg_tcpip_poll+0x320>)
 8028e3c:	2004      	movs	r0, #4
 8028e3e:	f7fc fcdb 	bl	80257f8 <mg_log_prefix>
 8028e42:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8028e46:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
 8028e4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028e4c:	4841      	ldr	r0, [pc, #260]	@ (8028f54 <mg_tcpip_poll+0x328>)
 8028e4e:	f7fa fbbd 	bl	80235cc <mg_log>
 8028e52:	e7cb      	b.n	8028dec <mg_tcpip_poll+0x1c0>
        mg_error(c, "ARP timeout");
 8028e54:	4940      	ldr	r1, [pc, #256]	@ (8028f58 <mg_tcpip_poll+0x32c>)
 8028e56:	4620      	mov	r0, r4
 8028e58:	f7fc fdb6 	bl	80259c8 <mg_error>
 8028e5c:	e030      	b.n	8028ec0 <mg_tcpip_poll+0x294>
        mg_error(c, "Connection timeout");
 8028e5e:	493f      	ldr	r1, [pc, #252]	@ (8028f5c <mg_tcpip_poll+0x330>)
 8028e60:	4620      	mov	r0, r4
 8028e62:	f7fc fdb1 	bl	80259c8 <mg_error>
 8028e66:	e02b      	b.n	8028ec0 <mg_tcpip_poll+0x294>
        c->is_closing = 1;
 8028e68:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8028e6c:	f043 0320 	orr.w	r3, r3, #32
 8028e70:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
        continue;
 8028e74:	e028      	b.n	8028ec8 <mg_tcpip_poll+0x29c>
          mg_error(c, "keepalive");
 8028e76:	493a      	ldr	r1, [pc, #232]	@ (8028f60 <mg_tcpip_poll+0x334>)
 8028e78:	4620      	mov	r0, r4
 8028e7a:	f7fc fda5 	bl	80259c8 <mg_error>
 8028e7e:	e01f      	b.n	8028ec0 <mg_tcpip_poll+0x294>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8028e80:	f104 09c8 	add.w	r9, r4, #200	@ 0xc8
 8028e84:	f8b4 a018 	ldrh.w	sl, [r4, #24]
 8028e88:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8028e8c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8028e90:	3801      	subs	r0, #1
 8028e92:	f7fc f913 	bl	80250bc <mg_ntohl>
 8028e96:	9007      	str	r0, [sp, #28]
 8028e98:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
 8028e9c:	f7fc f90e 	bl	80250bc <mg_ntohl>
 8028ea0:	2300      	movs	r3, #0
 8028ea2:	9305      	str	r3, [sp, #20]
 8028ea4:	9304      	str	r3, [sp, #16]
 8028ea6:	9003      	str	r0, [sp, #12]
 8028ea8:	9b07      	ldr	r3, [sp, #28]
 8028eaa:	9302      	str	r3, [sp, #8]
 8028eac:	f8cd b004 	str.w	fp, [sp, #4]
 8028eb0:	f8cd a000 	str.w	sl, [sp]
 8028eb4:	2310      	movs	r3, #16
 8028eb6:	4642      	mov	r2, r8
 8028eb8:	4649      	mov	r1, r9
 8028eba:	4628      	mov	r0, r5
 8028ebc:	f7fe f998 	bl	80271f0 <tx_tcp>
      settmout(c, MIP_TTYPE_KEEPALIVE);
 8028ec0:	2100      	movs	r1, #0
 8028ec2:	4620      	mov	r0, r4
 8028ec4:	f7fe fa70 	bl	80273a8 <settmout>
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8028ec8:	6824      	ldr	r4, [r4, #0]
 8028eca:	b384      	cbz	r4, 8028f2e <mg_tcpip_poll+0x302>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 8028ecc:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	@ 0xac
 8028ed0:	f240 1209 	movw	r2, #265	@ 0x109
 8028ed4:	421a      	tst	r2, r3
 8028ed6:	d1f7      	bne.n	8028ec8 <mg_tcpip_poll+0x29c>
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8028ed8:	f8d4 801c 	ldr.w	r8, [r4, #28]
    if (now > s->timer) {
 8028edc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8028ee0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8028ee4:	42b2      	cmp	r2, r6
 8028ee6:	41bb      	sbcs	r3, r7
 8028ee8:	d2ee      	bcs.n	8028ec8 <mg_tcpip_poll+0x29c>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8028eea:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8028eee:	2b01      	cmp	r3, #1
 8028ef0:	f43f af71 	beq.w	8028dd6 <mg_tcpip_poll+0x1aa>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 8028ef4:	2b02      	cmp	r3, #2
 8028ef6:	d0ad      	beq.n	8028e54 <mg_tcpip_poll+0x228>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 8028ef8:	2b03      	cmp	r3, #3
 8028efa:	d0b0      	beq.n	8028e5e <mg_tcpip_poll+0x232>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 8028efc:	2b04      	cmp	r3, #4
 8028efe:	d0b3      	beq.n	8028e68 <mg_tcpip_poll+0x23c>
        if (s->tmiss++ > 2) {
 8028f00:	f894 30cf 	ldrb.w	r3, [r4, #207]	@ 0xcf
 8028f04:	1c5a      	adds	r2, r3, #1
 8028f06:	f884 20cf 	strb.w	r2, [r4, #207]	@ 0xcf
 8028f0a:	2b02      	cmp	r3, #2
 8028f0c:	d8b3      	bhi.n	8028e76 <mg_tcpip_poll+0x24a>
          MG_VERBOSE(("%lu keepalive", c->id));
 8028f0e:	4b09      	ldr	r3, [pc, #36]	@ (8028f34 <mg_tcpip_poll+0x308>)
 8028f10:	681b      	ldr	r3, [r3, #0]
 8028f12:	2b03      	cmp	r3, #3
 8028f14:	ddb4      	ble.n	8028e80 <mg_tcpip_poll+0x254>
 8028f16:	4b0c      	ldr	r3, [pc, #48]	@ (8028f48 <mg_tcpip_poll+0x31c>)
 8028f18:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8028f1c:	490b      	ldr	r1, [pc, #44]	@ (8028f4c <mg_tcpip_poll+0x320>)
 8028f1e:	2004      	movs	r0, #4
 8028f20:	f7fc fc6a 	bl	80257f8 <mg_log_prefix>
 8028f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028f26:	480f      	ldr	r0, [pc, #60]	@ (8028f64 <mg_tcpip_poll+0x338>)
 8028f28:	f7fa fb50 	bl	80235cc <mg_log>
 8028f2c:	e7a8      	b.n	8028e80 <mg_tcpip_poll+0x254>
}
 8028f2e:	b00b      	add	sp, #44	@ 0x2c
 8028f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f34:	2000012c 	.word	0x2000012c
 8028f38:	001b7740 	.word	0x001b7740
 8028f3c:	88888889 	.word	0x88888889
 8028f40:	eeeeeeef 	.word	0xeeeeeeef
 8028f44:	0803a7e0 	.word	0x0803a7e0
 8028f48:	0803a6c8 	.word	0x0803a6c8
 8028f4c:	08039d58 	.word	0x08039d58
 8028f50:	0803a4bc 	.word	0x0803a4bc
 8028f54:	0803a4cc 	.word	0x0803a4cc
 8028f58:	0803a4dc 	.word	0x0803a4dc
 8028f5c:	0803a4e8 	.word	0x0803a4e8
 8028f60:	0803a500 	.word	0x0803a500
 8028f64:	0803a4fc 	.word	0x0803a4fc

08028f68 <mg_mgr_poll>:
void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8028f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028f6a:	b087      	sub	sp, #28
 8028f6c:	4604      	mov	r4, r0
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8028f6e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
  uint64_t now = mg_millis();
 8028f70:	f7fc fc3d 	bl	80257ee <mg_millis>
 8028f74:	4602      	mov	r2, r0
 8028f76:	460b      	mov	r3, r1
 8028f78:	9004      	str	r0, [sp, #16]
 8028f7a:	9105      	str	r1, [sp, #20]
  mg_timer_poll(&mgr->timers, now);
 8028f7c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8028f80:	f7fb ff3a 	bl	8024df8 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8028f84:	2d00      	cmp	r5, #0
 8028f86:	d078      	beq.n	802907a <mg_mgr_poll+0x112>
 8028f88:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8028f8a:	2b00      	cmp	r3, #0
 8028f8c:	d075      	beq.n	802907a <mg_mgr_poll+0x112>
  mg_tcpip_poll(ifp, now);
 8028f8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028f92:	4628      	mov	r0, r5
 8028f94:	f7ff fe4a 	bl	8028c2c <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8028f98:	6824      	ldr	r4, [r4, #0]
 8028f9a:	e040      	b.n	802901e <mg_mgr_poll+0xb6>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8028f9c:	4b38      	ldr	r3, [pc, #224]	@ (8029080 <mg_mgr_poll+0x118>)
 8028f9e:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8028fa2:	4938      	ldr	r1, [pc, #224]	@ (8029084 <mg_mgr_poll+0x11c>)
 8028fa4:	2004      	movs	r0, #4
 8028fa6:	f7fc fc27 	bl	80257f8 <mg_log_prefix>
 8028faa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028fac:	f894 00ac 	ldrb.w	r0, [r4, #172]	@ 0xac
 8028fb0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8028fb4:	d019      	beq.n	8028fea <mg_mgr_poll+0x82>
 8028fb6:	2254      	movs	r2, #84	@ 0x54
 8028fb8:	f010 0f20 	tst.w	r0, #32
 8028fbc:	d017      	beq.n	8028fee <mg_mgr_poll+0x86>
 8028fbe:	2343      	movs	r3, #67	@ 0x43
 8028fc0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8028fc4:	d115      	bne.n	8028ff2 <mg_mgr_poll+0x8a>
 8028fc6:	2668      	movs	r6, #104	@ 0x68
 8028fc8:	f010 0f08 	tst.w	r0, #8
 8028fcc:	d013      	beq.n	8028ff6 <mg_mgr_poll+0x8e>
 8028fce:	2752      	movs	r7, #82	@ 0x52
 8028fd0:	f894 00ad 	ldrb.w	r0, [r4, #173]	@ 0xad
 8028fd4:	f010 0f20 	tst.w	r0, #32
 8028fd8:	d00f      	beq.n	8028ffa <mg_mgr_poll+0x92>
 8028fda:	2043      	movs	r0, #67	@ 0x43
 8028fdc:	9002      	str	r0, [sp, #8]
 8028fde:	9701      	str	r7, [sp, #4]
 8028fe0:	9600      	str	r6, [sp, #0]
 8028fe2:	4829      	ldr	r0, [pc, #164]	@ (8029088 <mg_mgr_poll+0x120>)
 8028fe4:	f7fa faf2 	bl	80235cc <mg_log>
 8028fe8:	e024      	b.n	8029034 <mg_mgr_poll+0xcc>
 8028fea:	2274      	movs	r2, #116	@ 0x74
 8028fec:	e7e4      	b.n	8028fb8 <mg_mgr_poll+0x50>
 8028fee:	2363      	movs	r3, #99	@ 0x63
 8028ff0:	e7e6      	b.n	8028fc0 <mg_mgr_poll+0x58>
 8028ff2:	2648      	movs	r6, #72	@ 0x48
 8028ff4:	e7e8      	b.n	8028fc8 <mg_mgr_poll+0x60>
 8028ff6:	2772      	movs	r7, #114	@ 0x72
 8028ff8:	e7ea      	b.n	8028fd0 <mg_mgr_poll+0x68>
 8028ffa:	2063      	movs	r0, #99	@ 0x63
 8028ffc:	e7ee      	b.n	8028fdc <mg_mgr_poll+0x74>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8028ffe:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8029002:	4620      	mov	r0, r4
 8029004:	f7fc fd18 	bl	8025a38 <handle_tls_recv>
 8029008:	e01e      	b.n	8029048 <mg_mgr_poll+0xe0>
    if (can_write(c)) write_conn(c);
 802900a:	4620      	mov	r0, r4
 802900c:	f7fe fa6a 	bl	80274e4 <write_conn>
 8029010:	e01f      	b.n	8029052 <mg_mgr_poll+0xea>
    if (c->is_closing) close_conn(c);
 8029012:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029016:	f013 0f20 	tst.w	r3, #32
 802901a:	d12a      	bne.n	8029072 <mg_mgr_poll+0x10a>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802901c:	462c      	mov	r4, r5
  for (c = mgr->conns; c != NULL; c = tmp) {
 802901e:	b364      	cbz	r4, 802907a <mg_mgr_poll+0x112>
    tmp = c->next;
 8029020:	6825      	ldr	r5, [r4, #0]
    mg_call(c, MG_EV_POLL, &now);
 8029022:	aa04      	add	r2, sp, #16
 8029024:	2102      	movs	r1, #2
 8029026:	4620      	mov	r0, r4
 8029028:	f7f9 f886 	bl	8022138 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 802902c:	4b17      	ldr	r3, [pc, #92]	@ (802908c <mg_mgr_poll+0x124>)
 802902e:	681b      	ldr	r3, [r3, #0]
 8029030:	2b03      	cmp	r3, #3
 8029032:	dcb3      	bgt.n	8028f9c <mg_mgr_poll+0x34>
    if (c->is_tls && mg_tls_pending(c) > 0)
 8029034:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8029038:	f013 0f40 	tst.w	r3, #64	@ 0x40
 802903c:	d004      	beq.n	8029048 <mg_mgr_poll+0xe0>
 802903e:	4620      	mov	r0, r4
 8029040:	f7fb ff24 	bl	8024e8c <mg_tls_pending>
 8029044:	2800      	cmp	r0, #0
 8029046:	d1da      	bne.n	8028ffe <mg_mgr_poll+0x96>
    if (can_write(c)) write_conn(c);
 8029048:	4620      	mov	r0, r4
 802904a:	f7f7 fca3 	bl	8020994 <can_write>
 802904e:	2800      	cmp	r0, #0
 8029050:	d1db      	bne.n	802900a <mg_mgr_poll+0xa2>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8029052:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029056:	f013 0f10 	tst.w	r3, #16
 802905a:	d0da      	beq.n	8029012 <mg_mgr_poll+0xaa>
 802905c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802905e:	2b00      	cmp	r3, #0
 8029060:	d1d7      	bne.n	8029012 <mg_mgr_poll+0xaa>
 8029062:	f894 30ce 	ldrb.w	r3, [r4, #206]	@ 0xce
 8029066:	2b04      	cmp	r3, #4
 8029068:	d0d3      	beq.n	8029012 <mg_mgr_poll+0xaa>
      init_closure(c);
 802906a:	4620      	mov	r0, r4
 802906c:	f7fe fa66 	bl	802753c <init_closure>
 8029070:	e7cf      	b.n	8029012 <mg_mgr_poll+0xaa>
    if (c->is_closing) close_conn(c);
 8029072:	4620      	mov	r0, r4
 8029074:	f7fd fb7e 	bl	8026774 <close_conn>
 8029078:	e7d0      	b.n	802901c <mg_mgr_poll+0xb4>
}
 802907a:	b007      	add	sp, #28
 802907c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802907e:	bf00      	nop
 8029080:	0803a6d8 	.word	0x0803a6d8
 8029084:	08039d58 	.word	0x08039d58
 8029088:	0803a50c 	.word	0x0803a50c
 802908c:	2000012c 	.word	0x2000012c

08029090 <mg_now>:
uint64_t mg_now(void) {
 8029090:	b508      	push	{r3, lr}
  return mg_millis() + s_boot_timestamp;
 8029092:	f7fc fbac 	bl	80257ee <mg_millis>
 8029096:	4a03      	ldr	r2, [pc, #12]	@ (80290a4 <mg_now+0x14>)
 8029098:	6813      	ldr	r3, [r2, #0]
 802909a:	6852      	ldr	r2, [r2, #4]
 802909c:	18c0      	adds	r0, r0, r3
}
 802909e:	eb42 0101 	adc.w	r1, r2, r1
 80290a2:	bd08      	pop	{r3, pc}
 80290a4:	20019778 	.word	0x20019778

080290a8 <mg_sntp_parse>:
int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 80290a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80290ac:	4604      	mov	r4, r0
  int mode = len > 0 ? buf[0] & 7 : 0;
 80290ae:	460a      	mov	r2, r1
 80290b0:	b129      	cbz	r1, 80290be <mg_sntp_parse+0x16>
 80290b2:	7801      	ldrb	r1, [r0, #0]
 80290b4:	f001 0307 	and.w	r3, r1, #7
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 80290b8:	f3c1 05c2 	ubfx	r5, r1, #3, #3
 80290bc:	e001      	b.n	80290c2 <mg_sntp_parse+0x1a>
  int mode = len > 0 ? buf[0] & 7 : 0;
 80290be:	2300      	movs	r3, #0
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 80290c0:	461d      	mov	r5, r3
  if (len < 48) {
 80290c2:	2a2f      	cmp	r2, #47	@ 0x2f
 80290c4:	d817      	bhi.n	80290f6 <mg_sntp_parse+0x4e>
    MG_ERROR(("%s", "corrupt packet"));
 80290c6:	4b4b      	ldr	r3, [pc, #300]	@ (80291f4 <mg_sntp_parse+0x14c>)
 80290c8:	681b      	ldr	r3, [r3, #0]
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	dc04      	bgt.n	80290d8 <mg_sntp_parse+0x30>
  int64_t epoch_milliseconds = -1;
 80290ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80290d2:	4601      	mov	r1, r0
}
 80290d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MG_ERROR(("%s", "corrupt packet"));
 80290d8:	4b47      	ldr	r3, [pc, #284]	@ (80291f8 <mg_sntp_parse+0x150>)
 80290da:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 80290de:	4947      	ldr	r1, [pc, #284]	@ (80291fc <mg_sntp_parse+0x154>)
 80290e0:	2001      	movs	r0, #1
 80290e2:	f7fc fb89 	bl	80257f8 <mg_log_prefix>
 80290e6:	4946      	ldr	r1, [pc, #280]	@ (8029200 <mg_sntp_parse+0x158>)
 80290e8:	4846      	ldr	r0, [pc, #280]	@ (8029204 <mg_sntp_parse+0x15c>)
 80290ea:	f7fa fa6f 	bl	80235cc <mg_log>
  int64_t epoch_milliseconds = -1;
 80290ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80290f2:	4601      	mov	r1, r0
 80290f4:	e7ee      	b.n	80290d4 <mg_sntp_parse+0x2c>
  } else if (mode != 4 && mode != 5) {
 80290f6:	3b04      	subs	r3, #4
 80290f8:	2b01      	cmp	r3, #1
 80290fa:	d916      	bls.n	802912a <mg_sntp_parse+0x82>
    MG_ERROR(("%s", "not a server reply"));
 80290fc:	4b3d      	ldr	r3, [pc, #244]	@ (80291f4 <mg_sntp_parse+0x14c>)
 80290fe:	681b      	ldr	r3, [r3, #0]
 8029100:	2b00      	cmp	r3, #0
 8029102:	dc03      	bgt.n	802910c <mg_sntp_parse+0x64>
  int64_t epoch_milliseconds = -1;
 8029104:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029108:	4601      	mov	r1, r0
 802910a:	e7e3      	b.n	80290d4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "not a server reply"));
 802910c:	4b3a      	ldr	r3, [pc, #232]	@ (80291f8 <mg_sntp_parse+0x150>)
 802910e:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8029112:	493a      	ldr	r1, [pc, #232]	@ (80291fc <mg_sntp_parse+0x154>)
 8029114:	2001      	movs	r0, #1
 8029116:	f7fc fb6f 	bl	80257f8 <mg_log_prefix>
 802911a:	493b      	ldr	r1, [pc, #236]	@ (8029208 <mg_sntp_parse+0x160>)
 802911c:	4839      	ldr	r0, [pc, #228]	@ (8029204 <mg_sntp_parse+0x15c>)
 802911e:	f7fa fa55 	bl	80235cc <mg_log>
  int64_t epoch_milliseconds = -1;
 8029122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029126:	4601      	mov	r1, r0
 8029128:	e7d4      	b.n	80290d4 <mg_sntp_parse+0x2c>
  } else if (buf[1] == 0) {
 802912a:	7863      	ldrb	r3, [r4, #1]
 802912c:	b9b3      	cbnz	r3, 802915c <mg_sntp_parse+0xb4>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802912e:	4b31      	ldr	r3, [pc, #196]	@ (80291f4 <mg_sntp_parse+0x14c>)
 8029130:	681b      	ldr	r3, [r3, #0]
 8029132:	2b00      	cmp	r3, #0
 8029134:	dc03      	bgt.n	802913e <mg_sntp_parse+0x96>
  int64_t epoch_milliseconds = -1;
 8029136:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802913a:	4601      	mov	r1, r0
 802913c:	e7ca      	b.n	80290d4 <mg_sntp_parse+0x2c>
    MG_ERROR(("%s", "server sent a kiss of death"));
 802913e:	4b2e      	ldr	r3, [pc, #184]	@ (80291f8 <mg_sntp_parse+0x150>)
 8029140:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8029144:	492d      	ldr	r1, [pc, #180]	@ (80291fc <mg_sntp_parse+0x154>)
 8029146:	2001      	movs	r0, #1
 8029148:	f7fc fb56 	bl	80257f8 <mg_log_prefix>
 802914c:	492f      	ldr	r1, [pc, #188]	@ (802920c <mg_sntp_parse+0x164>)
 802914e:	482d      	ldr	r0, [pc, #180]	@ (8029204 <mg_sntp_parse+0x15c>)
 8029150:	f7fa fa3c 	bl	80235cc <mg_log>
  int64_t epoch_milliseconds = -1;
 8029154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029158:	4601      	mov	r1, r0
 802915a:	e7bb      	b.n	80290d4 <mg_sntp_parse+0x2c>
  } else if (version == 4 || version == 3) {
 802915c:	1eeb      	subs	r3, r5, #3
 802915e:	2b01      	cmp	r3, #1
 8029160:	d907      	bls.n	8029172 <mg_sntp_parse+0xca>
    MG_ERROR(("unexpected version: %d", version));
 8029162:	4b24      	ldr	r3, [pc, #144]	@ (80291f4 <mg_sntp_parse+0x14c>)
 8029164:	681b      	ldr	r3, [r3, #0]
 8029166:	2b00      	cmp	r3, #0
 8029168:	dc35      	bgt.n	80291d6 <mg_sntp_parse+0x12e>
  int64_t epoch_milliseconds = -1;
 802916a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802916e:	4601      	mov	r1, r0
  return epoch_milliseconds;
 8029170:	e7b0      	b.n	80290d4 <mg_sntp_parse+0x2c>
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8029172:	f104 0018 	add.w	r0, r4, #24
 8029176:	f7fb ffff 	bl	8025178 <gettimestamp>
 802917a:	4606      	mov	r6, r0
 802917c:	468a      	mov	sl, r1
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 802917e:	f104 0020 	add.w	r0, r4, #32
 8029182:	f7fb fff9 	bl	8025178 <gettimestamp>
 8029186:	4680      	mov	r8, r0
 8029188:	4689      	mov	r9, r1
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802918a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 802918e:	f7fb fff3 	bl	8025178 <gettimestamp>
 8029192:	4607      	mov	r7, r0
 8029194:	460c      	mov	r4, r1
    int64_t now = (int64_t) mg_millis();
 8029196:	f7fc fb2a 	bl	80257ee <mg_millis>
 802919a:	4605      	mov	r5, r0
 802919c:	468c      	mov	ip, r1
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 802919e:	1b86      	subs	r6, r0, r6
 80291a0:	eb61 020a 	sbc.w	r2, r1, sl
 80291a4:	ebb7 0808 	subs.w	r8, r7, r8
 80291a8:	eb64 0909 	sbc.w	r9, r4, r9
 80291ac:	ebb6 0608 	subs.w	r6, r6, r8
 80291b0:	eb62 0209 	sbc.w	r2, r2, r9
    epoch_milliseconds = transmit_time + latency / 2;
 80291b4:	0fd3      	lsrs	r3, r2, #31
 80291b6:	199b      	adds	r3, r3, r6
 80291b8:	f142 0200 	adc.w	r2, r2, #0
 80291bc:	085b      	lsrs	r3, r3, #1
 80291be:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80291c2:	19d8      	adds	r0, r3, r7
 80291c4:	eb44 0162 	adc.w	r1, r4, r2, asr #1
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 80291c8:	1b45      	subs	r5, r0, r5
 80291ca:	eb61 030c 	sbc.w	r3, r1, ip
 80291ce:	4a10      	ldr	r2, [pc, #64]	@ (8029210 <mg_sntp_parse+0x168>)
 80291d0:	6015      	str	r5, [r2, #0]
 80291d2:	6053      	str	r3, [r2, #4]
 80291d4:	e77e      	b.n	80290d4 <mg_sntp_parse+0x2c>
    MG_ERROR(("unexpected version: %d", version));
 80291d6:	4b08      	ldr	r3, [pc, #32]	@ (80291f8 <mg_sntp_parse+0x150>)
 80291d8:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 80291dc:	4907      	ldr	r1, [pc, #28]	@ (80291fc <mg_sntp_parse+0x154>)
 80291de:	2001      	movs	r0, #1
 80291e0:	f7fc fb0a 	bl	80257f8 <mg_log_prefix>
 80291e4:	4629      	mov	r1, r5
 80291e6:	480b      	ldr	r0, [pc, #44]	@ (8029214 <mg_sntp_parse+0x16c>)
 80291e8:	f7fa f9f0 	bl	80235cc <mg_log>
  int64_t epoch_milliseconds = -1;
 80291ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80291f0:	4601      	mov	r1, r0
 80291f2:	e76f      	b.n	80290d4 <mg_sntp_parse+0x2c>
 80291f4:	2000012c 	.word	0x2000012c
 80291f8:	0803a628 	.word	0x0803a628
 80291fc:	08039d58 	.word	0x08039d58
 8029200:	0803a520 	.word	0x0803a520
 8029204:	0803a070 	.word	0x0803a070
 8029208:	0803a530 	.word	0x0803a530
 802920c:	0803a544 	.word	0x0803a544
 8029210:	20019778 	.word	0x20019778
 8029214:	0803a560 	.word	0x0803a560

08029218 <mg_sntp_request>:
void mg_sntp_request(struct mg_connection *c) {
 8029218:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 802921c:	b08c      	sub	sp, #48	@ 0x30
 802921e:	4604      	mov	r4, r0
  if (c->is_resolving) {
 8029220:	f890 30ac 	ldrb.w	r3, [r0, #172]	@ 0xac
 8029224:	f013 0f08 	tst.w	r3, #8
 8029228:	d012      	beq.n	8029250 <mg_sntp_request+0x38>
    MG_ERROR(("%lu wait until resolved", c->id));
 802922a:	4b2b      	ldr	r3, [pc, #172]	@ (80292d8 <mg_sntp_request+0xc0>)
 802922c:	681b      	ldr	r3, [r3, #0]
 802922e:	2b00      	cmp	r3, #0
 8029230:	dc02      	bgt.n	8029238 <mg_sntp_request+0x20>
}
 8029232:	b00c      	add	sp, #48	@ 0x30
 8029234:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    MG_ERROR(("%lu wait until resolved", c->id));
 8029238:	4b28      	ldr	r3, [pc, #160]	@ (80292dc <mg_sntp_request+0xc4>)
 802923a:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 802923e:	4928      	ldr	r1, [pc, #160]	@ (80292e0 <mg_sntp_request+0xc8>)
 8029240:	2001      	movs	r0, #1
 8029242:	f7fc fad9 	bl	80257f8 <mg_log_prefix>
 8029246:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029248:	4826      	ldr	r0, [pc, #152]	@ (80292e4 <mg_sntp_request+0xcc>)
 802924a:	f7fa f9bf 	bl	80235cc <mg_log>
 802924e:	e7f0      	b.n	8029232 <mg_sntp_request+0x1a>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8029250:	f7fc facd 	bl	80257ee <mg_millis>
 8029254:	4606      	mov	r6, r0
 8029256:	460d      	mov	r5, r1
    uint8_t buf[48] = {0};
 8029258:	2100      	movs	r1, #0
 802925a:	9100      	str	r1, [sp, #0]
 802925c:	222c      	movs	r2, #44	@ 0x2c
 802925e:	a801      	add	r0, sp, #4
 8029260:	f002 fec6 	bl	802bff0 <memset>
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8029264:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8029268:	2300      	movs	r3, #0
 802926a:	4630      	mov	r0, r6
 802926c:	4629      	mov	r1, r5
 802926e:	f7e7 fd23 	bl	8010cb8 <__aeabi_ldivmod>
 8029272:	4610      	mov	r0, r2
 8029274:	4619      	mov	r1, r3
 8029276:	f7e7 f9a9 	bl	80105cc <__aeabi_l2d>
 802927a:	2200      	movs	r2, #0
 802927c:	4b1a      	ldr	r3, [pc, #104]	@ (80292e8 <mg_sntp_request+0xd0>)
 802927e:	f7e7 fafd 	bl	801087c <__aeabi_ddiv>
 8029282:	a313      	add	r3, pc, #76	@ (adr r3, 80292d0 <mg_sntp_request+0xb8>)
 8029284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029288:	f7e7 f9ce 	bl	8010628 <__aeabi_dmul>
 802928c:	4680      	mov	r8, r0
 802928e:	4689      	mov	r9, r1
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8029290:	2323      	movs	r3, #35	@ 0x23
 8029292:	f88d 3000 	strb.w	r3, [sp]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8029296:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802929a:	2300      	movs	r3, #0
 802929c:	4630      	mov	r0, r6
 802929e:	4629      	mov	r1, r5
 80292a0:	f7e7 fd0a 	bl	8010cb8 <__aeabi_ldivmod>
 80292a4:	f100 4003 	add.w	r0, r0, #2197815296	@ 0x83000000
 80292a8:	f500 002a 	add.w	r0, r0, #11141120	@ 0xaa0000
 80292ac:	f500 40fd 	add.w	r0, r0, #32384	@ 0x7e80
 80292b0:	f7fb ff04 	bl	80250bc <mg_ntohl>
 80292b4:	900a      	str	r0, [sp, #40]	@ 0x28
    t[1] = mg_htonl((uint32_t) frac);
 80292b6:	4640      	mov	r0, r8
 80292b8:	4649      	mov	r1, r9
 80292ba:	f7e7 fc8d 	bl	8010bd8 <__aeabi_d2uiz>
 80292be:	f7fb fefd 	bl	80250bc <mg_ntohl>
 80292c2:	900b      	str	r0, [sp, #44]	@ 0x2c
    mg_send(c, buf, sizeof(buf));
 80292c4:	2230      	movs	r2, #48	@ 0x30
 80292c6:	4669      	mov	r1, sp
 80292c8:	4620      	mov	r0, r4
 80292ca:	f7fd fb49 	bl	8026960 <mg_send>
}
 80292ce:	e7b0      	b.n	8029232 <mg_sntp_request+0x1a>
 80292d0:	ffe00000 	.word	0xffe00000
 80292d4:	41efffff 	.word	0x41efffff
 80292d8:	2000012c 	.word	0x2000012c
 80292dc:	0803a618 	.word	0x0803a618
 80292e0:	08039d58 	.word	0x08039d58
 80292e4:	0803a578 	.word	0x0803a578
 80292e8:	408f4000 	.word	0x408f4000

080292ec <sntp_cb>:
static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 80292ec:	b570      	push	{r4, r5, r6, lr}
 80292ee:	b082      	sub	sp, #8
 80292f0:	4604      	mov	r4, r0
  if (ev == MG_EV_OPEN) {
 80292f2:	3901      	subs	r1, #1
 80292f4:	2906      	cmp	r1, #6
 80292f6:	d810      	bhi.n	802931a <sntp_cb+0x2e>
 80292f8:	e8df f001 	tbb	[pc, r1]
 80292fc:	110f4604 	.word	0x110f4604
 8029300:	0f0f      	.short	0x0f0f
 8029302:	14          	.byte	0x14
 8029303:	00          	.byte	0x00
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 8029304:	f7fc fa73 	bl	80257ee <mg_millis>
 8029308:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802930c:	18c0      	adds	r0, r0, r3
 802930e:	f141 0100 	adc.w	r1, r1, #0
 8029312:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8029316:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
}
 802931a:	b002      	add	sp, #8
 802931c:	bd70      	pop	{r4, r5, r6, pc}
    mg_sntp_request(c);
 802931e:	f7ff ff7b 	bl	8029218 <mg_sntp_request>
 8029322:	e7fa      	b.n	802931a <sntp_cb+0x2e>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8029324:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8029326:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8029328:	f7ff febe 	bl	80290a8 <mg_sntp_parse>
 802932c:	4605      	mov	r5, r0
 802932e:	460e      	mov	r6, r1
 8029330:	9000      	str	r0, [sp, #0]
 8029332:	9101      	str	r1, [sp, #4]
    if (milliseconds > 0) {
 8029334:	2801      	cmp	r0, #1
 8029336:	f171 0300 	sbcs.w	r3, r1, #0
 802933a:	da06      	bge.n	802934a <sntp_cb+0x5e>
    c->is_closing = 1;
 802933c:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 8029340:	f043 0320 	orr.w	r3, r3, #32
 8029344:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
 8029348:	e7e7      	b.n	802931a <sntp_cb+0x2e>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 802934a:	f7fc fa50 	bl	80257ee <mg_millis>
 802934e:	1a2d      	subs	r5, r5, r0
 8029350:	eb66 0601 	sbc.w	r6, r6, r1
 8029354:	4b14      	ldr	r3, [pc, #80]	@ (80293a8 <sntp_cb+0xbc>)
 8029356:	601d      	str	r5, [r3, #0]
 8029358:	605e      	str	r6, [r3, #4]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 802935a:	466a      	mov	r2, sp
 802935c:	2112      	movs	r1, #18
 802935e:	4620      	mov	r0, r4
 8029360:	f7f8 feea 	bl	8022138 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8029364:	4b11      	ldr	r3, [pc, #68]	@ (80293ac <sntp_cb+0xc0>)
 8029366:	681b      	ldr	r3, [r3, #0]
 8029368:	2b02      	cmp	r3, #2
 802936a:	dde7      	ble.n	802933c <sntp_cb+0x50>
 802936c:	4b10      	ldr	r3, [pc, #64]	@ (80293b0 <sntp_cb+0xc4>)
 802936e:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8029372:	4910      	ldr	r1, [pc, #64]	@ (80293b4 <sntp_cb+0xc8>)
 8029374:	2003      	movs	r0, #3
 8029376:	f7fc fa3f 	bl	80257f8 <mg_log_prefix>
 802937a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802937e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029380:	480d      	ldr	r0, [pc, #52]	@ (80293b8 <sntp_cb+0xcc>)
 8029382:	f7fa f923 	bl	80235cc <mg_log>
 8029386:	e7d9      	b.n	802933c <sntp_cb+0x50>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8029388:	f7fc fa31 	bl	80257ee <mg_millis>
 802938c:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8029390:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8029394:	4282      	cmp	r2, r0
 8029396:	418b      	sbcs	r3, r1
 8029398:	d2bf      	bcs.n	802931a <sntp_cb+0x2e>
 802939a:	f894 30ad 	ldrb.w	r3, [r4, #173]	@ 0xad
 802939e:	f043 0320 	orr.w	r3, r3, #32
 80293a2:	f884 30ad 	strb.w	r3, [r4, #173]	@ 0xad
}
 80293a6:	e7b8      	b.n	802931a <sntp_cb+0x2e>
 80293a8:	20019778 	.word	0x20019778
 80293ac:	2000012c 	.word	0x2000012c
 80293b0:	0803a610 	.word	0x0803a610
 80293b4:	08039d58 	.word	0x08039d58
 80293b8:	0803a590 	.word	0x0803a590

080293bc <mg_sntp_connect>:
                                      mg_event_handler_t fn, void *fnd) {
 80293bc:	b538      	push	{r3, r4, r5, lr}
  if (url == NULL) url = "udp://time.google.com:123";
 80293be:	460d      	mov	r5, r1
 80293c0:	b169      	cbz	r1, 80293de <mg_sntp_connect+0x22>
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 80293c2:	4629      	mov	r1, r5
 80293c4:	f7fe ffa0 	bl	8028308 <mg_connect>
 80293c8:	4604      	mov	r4, r0
 80293ca:	b130      	cbz	r0, 80293da <mg_sntp_connect+0x1e>
    c->pfn = sntp_cb;
 80293cc:	4b05      	ldr	r3, [pc, #20]	@ (80293e4 <mg_sntp_connect+0x28>)
 80293ce:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 80293d2:	462a      	mov	r2, r5
 80293d4:	2101      	movs	r1, #1
 80293d6:	f7ff ff89 	bl	80292ec <sntp_cb>
}
 80293da:	4620      	mov	r0, r4
 80293dc:	bd38      	pop	{r3, r4, r5, pc}
  if (url == NULL) url = "udp://time.google.com:123";
 80293de:	4d02      	ldr	r5, [pc, #8]	@ (80293e8 <mg_sntp_connect+0x2c>)
 80293e0:	e7ef      	b.n	80293c2 <mg_sntp_connect+0x6>
 80293e2:	bf00      	nop
 80293e4:	080292ed 	.word	0x080292ed
 80293e8:	0803a5b4 	.word	0x0803a5b4

080293ec <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 80293ec:	b508      	push	{r3, lr}
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 80293ee:	2207      	movs	r2, #7
 80293f0:	4903      	ldr	r1, [pc, #12]	@ (8029400 <has_mqtt_prefix+0x14>)
 80293f2:	f002 fe32 	bl	802c05a <strncmp>
}
 80293f6:	fab0 f080 	clz	r0, r0
 80293fa:	0940      	lsrs	r0, r0, #5
 80293fc:	bd08      	pop	{r3, pc}
 80293fe:	bf00      	nop
 8029400:	0803ac30 	.word	0x0803ac30

08029404 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8029404:	b570      	push	{r4, r5, r6, lr}
 8029406:	4604      	mov	r4, r0
    int dot_count = 0;
    int is_ip_format = 1;

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8029408:	2200      	movs	r2, #0
    int dot_count = 0;
 802940a:	4610      	mov	r0, r2
    for (int i = 0; host[i] != '\0'; i++) {
 802940c:	e001      	b.n	8029412 <is_valid_ip_or_domain+0xe>
        if (host[i] == '.') {
            dot_count++;
 802940e:	3001      	adds	r0, #1
    for (int i = 0; host[i] != '\0'; i++) {
 8029410:	3201      	adds	r2, #1
 8029412:	5ca3      	ldrb	r3, [r4, r2]
 8029414:	b143      	cbz	r3, 8029428 <is_valid_ip_or_domain+0x24>
        if (host[i] == '.') {
 8029416:	2b2e      	cmp	r3, #46	@ 0x2e
 8029418:	d0f9      	beq.n	802940e <is_valid_ip_or_domain+0xa>
        } else if (!isdigit(host[i])) {
 802941a:	491d      	ldr	r1, [pc, #116]	@ (8029490 <is_valid_ip_or_domain+0x8c>)
 802941c:	5ccb      	ldrb	r3, [r1, r3]
 802941e:	f013 0f04 	tst.w	r3, #4
 8029422:	d1f5      	bne.n	8029410 <is_valid_ip_or_domain+0xc>
            is_ip_format = 0;
 8029424:	2500      	movs	r5, #0
 8029426:	e000      	b.n	802942a <is_valid_ip_or_domain+0x26>
    int is_ip_format = 1;
 8029428:	2501      	movs	r5, #1
            break;
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 802942a:	b335      	cbz	r5, 802947a <is_valid_ip_or_domain+0x76>
 802942c:	2803      	cmp	r0, #3
 802942e:	d013      	beq.n	8029458 <is_valid_ip_or_domain+0x54>
 8029430:	2200      	movs	r2, #0
 8029432:	4615      	mov	r5, r2
 8029434:	e014      	b.n	8029460 <is_valid_ip_or_domain+0x5c>
        int octet;
        const char *ptr = host;

        for (int i = 0; i < 4; i++) {
 8029436:	3601      	adds	r6, #1
 8029438:	2e03      	cmp	r6, #3
 802943a:	dc24      	bgt.n	8029486 <is_valid_ip_or_domain+0x82>
            octet = atoi(ptr);
 802943c:	4620      	mov	r0, r4
 802943e:	f000 f8a3 	bl	8029588 <atoi>
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 8029442:	28ff      	cmp	r0, #255	@ 0xff
 8029444:	d821      	bhi.n	802948a <is_valid_ip_or_domain+0x86>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 8029446:	212e      	movs	r1, #46	@ 0x2e
 8029448:	4620      	mov	r0, r4
 802944a:	f002 fde8 	bl	802c01e <strchr>
            if (ptr != NULL) ptr++;
 802944e:	4604      	mov	r4, r0
 8029450:	2800      	cmp	r0, #0
 8029452:	d0f0      	beq.n	8029436 <is_valid_ip_or_domain+0x32>
 8029454:	3401      	adds	r4, #1
 8029456:	e7ee      	b.n	8029436 <is_valid_ip_or_domain+0x32>
        for (int i = 0; i < 4; i++) {
 8029458:	2600      	movs	r6, #0
 802945a:	e7ed      	b.n	8029438 <is_valid_ip_or_domain+0x34>

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
    for (int i = 0; host[i] != '\0'; i++) {
        if (host[i] == '.') {
            dot_count++;
 802945c:	3501      	adds	r5, #1
    for (int i = 0; host[i] != '\0'; i++) {
 802945e:	3201      	adds	r2, #1
 8029460:	5ca3      	ldrb	r3, [r4, r2]
 8029462:	b163      	cbz	r3, 802947e <is_valid_ip_or_domain+0x7a>
        if (host[i] == '.') {
 8029464:	2b2e      	cmp	r3, #46	@ 0x2e
 8029466:	d0f9      	beq.n	802945c <is_valid_ip_or_domain+0x58>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 8029468:	4909      	ldr	r1, [pc, #36]	@ (8029490 <is_valid_ip_or_domain+0x8c>)
 802946a:	5cc9      	ldrb	r1, [r1, r3]
 802946c:	f011 0f07 	tst.w	r1, #7
 8029470:	d1f5      	bne.n	802945e <is_valid_ip_or_domain+0x5a>
 8029472:	2b2d      	cmp	r3, #45	@ 0x2d
 8029474:	d0f3      	beq.n	802945e <is_valid_ip_or_domain+0x5a>
            return 0;  // Некорректный символ для доменного имени
 8029476:	2500      	movs	r5, #0
 8029478:	e005      	b.n	8029486 <is_valid_ip_or_domain+0x82>
 802947a:	462a      	mov	r2, r5
 802947c:	e7f0      	b.n	8029460 <is_valid_ip_or_domain+0x5c>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 802947e:	2d00      	cmp	r5, #0
 8029480:	bfd4      	ite	le
 8029482:	2500      	movle	r5, #0
 8029484:	2501      	movgt	r5, #1
}
 8029486:	4628      	mov	r0, r5
 8029488:	bd70      	pop	{r4, r5, r6, pc}
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 802948a:	2500      	movs	r5, #0
 802948c:	e7fb      	b.n	8029486 <is_valid_ip_or_domain+0x82>
 802948e:	bf00      	nop
 8029490:	0803b0d1 	.word	0x0803b0d1

08029494 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8029494:	b510      	push	{r4, lr}
 8029496:	4604      	mov	r4, r0
    int port = atoi(port_str);
 8029498:	f000 f876 	bl	8029588 <atoi>
    if (port < 1 || port > MAX_PORT) {
 802949c:	3801      	subs	r0, #1
 802949e:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80294a2:	4298      	cmp	r0, r3
 80294a4:	d80a      	bhi.n	80294bc <is_valid_port+0x28>
        return 0; // Порт вне диапазона
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
 80294a6:	7823      	ldrb	r3, [r4, #0]
 80294a8:	b133      	cbz	r3, 80294b8 <is_valid_port+0x24>
        if (!isdigit(*port_str)) {
 80294aa:	4a06      	ldr	r2, [pc, #24]	@ (80294c4 <is_valid_port+0x30>)
 80294ac:	5cd3      	ldrb	r3, [r2, r3]
 80294ae:	f013 0f04 	tst.w	r3, #4
 80294b2:	d005      	beq.n	80294c0 <is_valid_port+0x2c>
            return 0;
        }
        port_str++;
 80294b4:	3401      	adds	r4, #1
 80294b6:	e7f6      	b.n	80294a6 <is_valid_port+0x12>
    }
    return 1;
 80294b8:	2001      	movs	r0, #1
 80294ba:	e000      	b.n	80294be <is_valid_port+0x2a>
        return 0; // Порт вне диапазона
 80294bc:	2000      	movs	r0, #0
}
 80294be:	bd10      	pop	{r4, pc}
            return 0;
 80294c0:	2000      	movs	r0, #0
 80294c2:	e7fc      	b.n	80294be <is_valid_port+0x2a>
 80294c4:	0803b0d1 	.word	0x0803b0d1

080294c8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 80294c8:	b570      	push	{r4, r5, r6, lr}
 80294ca:	b0c0      	sub	sp, #256	@ 0x100
 80294cc:	4604      	mov	r4, r0
    if (!has_mqtt_prefix(url)) {
 80294ce:	f7ff ff8d 	bl	80293ec <has_mqtt_prefix>
 80294d2:	b1d0      	cbz	r0, 802950a <is_valid_mqtt_url+0x42>
        printf("Error: URL does not start with 'mqtt://'\n");
        return -1;
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 80294d4:	3407      	adds	r4, #7
    const char *colon = strchr(host_start, ':');
 80294d6:	213a      	movs	r1, #58	@ 0x3a
 80294d8:	4620      	mov	r0, r4
 80294da:	f002 fda0 	bl	802c01e <strchr>
    if (!colon) {
 80294de:	4606      	mov	r6, r0
 80294e0:	b1c8      	cbz	r0, 8029516 <is_valid_mqtt_url+0x4e>
        return -2;
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 80294e2:	1b05      	subs	r5, r0, r4
 80294e4:	462a      	mov	r2, r5
 80294e6:	4621      	mov	r1, r4
 80294e8:	4668      	mov	r0, sp
 80294ea:	f002 fdc8 	bl	802c07e <strncpy>
    host[colon - host_start] = '\0';
 80294ee:	2300      	movs	r3, #0
 80294f0:	f80d 3005 	strb.w	r3, [sp, r5]

    if (!is_valid_ip_or_domain(host)) {
 80294f4:	4668      	mov	r0, sp
 80294f6:	f7ff ff85 	bl	8029404 <is_valid_ip_or_domain>
 80294fa:	b190      	cbz	r0, 8029522 <is_valid_mqtt_url+0x5a>
        return -3;
    }

    // Проверить порт
    const char *port_str = colon + 1;
    if (!is_valid_port(port_str)) {
 80294fc:	1c70      	adds	r0, r6, #1
 80294fe:	f7ff ffc9 	bl	8029494 <is_valid_port>
 8029502:	b1a0      	cbz	r0, 802952e <is_valid_mqtt_url+0x66>
        printf("Error: Invalid port number\n");
        return -4;
    }

    return 0; // URL прошел все проверки
 8029504:	2000      	movs	r0, #0
}
 8029506:	b040      	add	sp, #256	@ 0x100
 8029508:	bd70      	pop	{r4, r5, r6, pc}
        printf("Error: URL does not start with 'mqtt://'\n");
 802950a:	480c      	ldr	r0, [pc, #48]	@ (802953c <is_valid_mqtt_url+0x74>)
 802950c:	f002 f818 	bl	802b540 <puts>
        return -1;
 8029510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029514:	e7f7      	b.n	8029506 <is_valid_mqtt_url+0x3e>
        printf("Error: URL does not contain a port separator ':'\n");
 8029516:	480a      	ldr	r0, [pc, #40]	@ (8029540 <is_valid_mqtt_url+0x78>)
 8029518:	f002 f812 	bl	802b540 <puts>
        return -2;
 802951c:	f06f 0001 	mvn.w	r0, #1
 8029520:	e7f1      	b.n	8029506 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid domain or IP address\n");
 8029522:	4808      	ldr	r0, [pc, #32]	@ (8029544 <is_valid_mqtt_url+0x7c>)
 8029524:	f002 f80c 	bl	802b540 <puts>
        return -3;
 8029528:	f06f 0002 	mvn.w	r0, #2
 802952c:	e7eb      	b.n	8029506 <is_valid_mqtt_url+0x3e>
        printf("Error: Invalid port number\n");
 802952e:	4806      	ldr	r0, [pc, #24]	@ (8029548 <is_valid_mqtt_url+0x80>)
 8029530:	f002 f806 	bl	802b540 <puts>
        return -4;
 8029534:	f06f 0003 	mvn.w	r0, #3
 8029538:	e7e5      	b.n	8029506 <is_valid_mqtt_url+0x3e>
 802953a:	bf00      	nop
 802953c:	0803ac38 	.word	0x0803ac38
 8029540:	0803ac64 	.word	0x0803ac64
 8029544:	0803ac98 	.word	0x0803ac98
 8029548:	0803acbc 	.word	0x0803acbc

0802954c <__assert_func>:
 802954c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802954e:	4614      	mov	r4, r2
 8029550:	461a      	mov	r2, r3
 8029552:	4b09      	ldr	r3, [pc, #36]	@ (8029578 <__assert_func+0x2c>)
 8029554:	681b      	ldr	r3, [r3, #0]
 8029556:	4605      	mov	r5, r0
 8029558:	68d8      	ldr	r0, [r3, #12]
 802955a:	b954      	cbnz	r4, 8029572 <__assert_func+0x26>
 802955c:	4b07      	ldr	r3, [pc, #28]	@ (802957c <__assert_func+0x30>)
 802955e:	461c      	mov	r4, r3
 8029560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029564:	9100      	str	r1, [sp, #0]
 8029566:	462b      	mov	r3, r5
 8029568:	4905      	ldr	r1, [pc, #20]	@ (8029580 <__assert_func+0x34>)
 802956a:	f000 f811 	bl	8029590 <fiprintf>
 802956e:	f003 ffdf 	bl	802d530 <abort>
 8029572:	4b04      	ldr	r3, [pc, #16]	@ (8029584 <__assert_func+0x38>)
 8029574:	e7f4      	b.n	8029560 <__assert_func+0x14>
 8029576:	bf00      	nop
 8029578:	200002d8 	.word	0x200002d8
 802957c:	0803ad12 	.word	0x0803ad12
 8029580:	0803ace4 	.word	0x0803ace4
 8029584:	0803acd7 	.word	0x0803acd7

08029588 <atoi>:
 8029588:	220a      	movs	r2, #10
 802958a:	2100      	movs	r1, #0
 802958c:	f002 b8b6 	b.w	802b6fc <strtol>

08029590 <fiprintf>:
 8029590:	b40e      	push	{r1, r2, r3}
 8029592:	b503      	push	{r0, r1, lr}
 8029594:	4601      	mov	r1, r0
 8029596:	ab03      	add	r3, sp, #12
 8029598:	4805      	ldr	r0, [pc, #20]	@ (80295b0 <fiprintf+0x20>)
 802959a:	f853 2b04 	ldr.w	r2, [r3], #4
 802959e:	6800      	ldr	r0, [r0, #0]
 80295a0:	9301      	str	r3, [sp, #4]
 80295a2:	f001 fab7 	bl	802ab14 <_vfiprintf_r>
 80295a6:	b002      	add	sp, #8
 80295a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80295ac:	b003      	add	sp, #12
 80295ae:	4770      	bx	lr
 80295b0:	200002d8 	.word	0x200002d8

080295b4 <printf>:
 80295b4:	b40f      	push	{r0, r1, r2, r3}
 80295b6:	b507      	push	{r0, r1, r2, lr}
 80295b8:	4906      	ldr	r1, [pc, #24]	@ (80295d4 <printf+0x20>)
 80295ba:	ab04      	add	r3, sp, #16
 80295bc:	6808      	ldr	r0, [r1, #0]
 80295be:	f853 2b04 	ldr.w	r2, [r3], #4
 80295c2:	6881      	ldr	r1, [r0, #8]
 80295c4:	9301      	str	r3, [sp, #4]
 80295c6:	f000 f807 	bl	80295d8 <_vfprintf_r>
 80295ca:	b003      	add	sp, #12
 80295cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80295d0:	b004      	add	sp, #16
 80295d2:	4770      	bx	lr
 80295d4:	200002d8 	.word	0x200002d8

080295d8 <_vfprintf_r>:
 80295d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295dc:	b0d3      	sub	sp, #332	@ 0x14c
 80295de:	468b      	mov	fp, r1
 80295e0:	4690      	mov	r8, r2
 80295e2:	461c      	mov	r4, r3
 80295e4:	461e      	mov	r6, r3
 80295e6:	9003      	str	r0, [sp, #12]
 80295e8:	f003 fe90 	bl	802d30c <_localeconv_r>
 80295ec:	6803      	ldr	r3, [r0, #0]
 80295ee:	9316      	str	r3, [sp, #88]	@ 0x58
 80295f0:	4618      	mov	r0, r3
 80295f2:	f7e6 fe55 	bl	80102a0 <strlen>
 80295f6:	9b03      	ldr	r3, [sp, #12]
 80295f8:	900d      	str	r0, [sp, #52]	@ 0x34
 80295fa:	b123      	cbz	r3, 8029606 <_vfprintf_r+0x2e>
 80295fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80295fe:	b913      	cbnz	r3, 8029606 <_vfprintf_r+0x2e>
 8029600:	9803      	ldr	r0, [sp, #12]
 8029602:	f002 fa4f 	bl	802baa4 <__sinit>
 8029606:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802960a:	07da      	lsls	r2, r3, #31
 802960c:	d407      	bmi.n	802961e <_vfprintf_r+0x46>
 802960e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029612:	059b      	lsls	r3, r3, #22
 8029614:	d403      	bmi.n	802961e <_vfprintf_r+0x46>
 8029616:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802961a:	f003 ff22 	bl	802d462 <__retarget_lock_acquire_recursive>
 802961e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8029622:	049f      	lsls	r7, r3, #18
 8029624:	d409      	bmi.n	802963a <_vfprintf_r+0x62>
 8029626:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802962a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802962e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8029636:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802963a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802963e:	071d      	lsls	r5, r3, #28
 8029640:	d502      	bpl.n	8029648 <_vfprintf_r+0x70>
 8029642:	f8db 3010 	ldr.w	r3, [fp, #16]
 8029646:	b9c3      	cbnz	r3, 802967a <_vfprintf_r+0xa2>
 8029648:	9803      	ldr	r0, [sp, #12]
 802964a:	4659      	mov	r1, fp
 802964c:	f002 fbe6 	bl	802be1c <__swsetup_r>
 8029650:	b198      	cbz	r0, 802967a <_vfprintf_r+0xa2>
 8029652:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029656:	07d8      	lsls	r0, r3, #31
 8029658:	d506      	bpl.n	8029668 <_vfprintf_r+0x90>
 802965a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802965e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029660:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8029662:	b053      	add	sp, #332	@ 0x14c
 8029664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029668:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802966c:	0599      	lsls	r1, r3, #22
 802966e:	d4f4      	bmi.n	802965a <_vfprintf_r+0x82>
 8029670:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029674:	f003 fef7 	bl	802d466 <__retarget_lock_release_recursive>
 8029678:	e7ef      	b.n	802965a <_vfprintf_r+0x82>
 802967a:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 802967e:	f003 021a 	and.w	r2, r3, #26
 8029682:	2a0a      	cmp	r2, #10
 8029684:	d116      	bne.n	80296b4 <_vfprintf_r+0xdc>
 8029686:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 802968a:	2a00      	cmp	r2, #0
 802968c:	db12      	blt.n	80296b4 <_vfprintf_r+0xdc>
 802968e:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8029692:	07d2      	lsls	r2, r2, #31
 8029694:	d405      	bmi.n	80296a2 <_vfprintf_r+0xca>
 8029696:	059b      	lsls	r3, r3, #22
 8029698:	d403      	bmi.n	80296a2 <_vfprintf_r+0xca>
 802969a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802969e:	f003 fee2 	bl	802d466 <__retarget_lock_release_recursive>
 80296a2:	9803      	ldr	r0, [sp, #12]
 80296a4:	4623      	mov	r3, r4
 80296a6:	4642      	mov	r2, r8
 80296a8:	4659      	mov	r1, fp
 80296aa:	b053      	add	sp, #332	@ 0x14c
 80296ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296b0:	f001 b9be 	b.w	802aa30 <__sbprintf>
 80296b4:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8029900 <_vfprintf_r+0x328>
 80296b8:	2300      	movs	r3, #0
 80296ba:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80296be:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80296c2:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80296c6:	ac29      	add	r4, sp, #164	@ 0xa4
 80296c8:	9426      	str	r4, [sp, #152]	@ 0x98
 80296ca:	9304      	str	r3, [sp, #16]
 80296cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80296ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80296d0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80296d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80296d4:	4643      	mov	r3, r8
 80296d6:	461d      	mov	r5, r3
 80296d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80296dc:	b10a      	cbz	r2, 80296e2 <_vfprintf_r+0x10a>
 80296de:	2a25      	cmp	r2, #37	@ 0x25
 80296e0:	d1f9      	bne.n	80296d6 <_vfprintf_r+0xfe>
 80296e2:	ebb5 0708 	subs.w	r7, r5, r8
 80296e6:	d00d      	beq.n	8029704 <_vfprintf_r+0x12c>
 80296e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80296ea:	443b      	add	r3, r7
 80296ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80296ee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80296f0:	3301      	adds	r3, #1
 80296f2:	2b07      	cmp	r3, #7
 80296f4:	e9c4 8700 	strd	r8, r7, [r4]
 80296f8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80296fa:	dc75      	bgt.n	80297e8 <_vfprintf_r+0x210>
 80296fc:	3408      	adds	r4, #8
 80296fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029700:	443b      	add	r3, r7
 8029702:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029704:	782b      	ldrb	r3, [r5, #0]
 8029706:	2b00      	cmp	r3, #0
 8029708:	f001 814f 	beq.w	802a9aa <_vfprintf_r+0x13d2>
 802970c:	2200      	movs	r2, #0
 802970e:	1c6b      	adds	r3, r5, #1
 8029710:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8029714:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8029718:	920e      	str	r2, [sp, #56]	@ 0x38
 802971a:	4615      	mov	r5, r2
 802971c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029720:	9206      	str	r2, [sp, #24]
 8029722:	930c      	str	r3, [sp, #48]	@ 0x30
 8029724:	9b06      	ldr	r3, [sp, #24]
 8029726:	3b20      	subs	r3, #32
 8029728:	2b5a      	cmp	r3, #90	@ 0x5a
 802972a:	f200 85aa 	bhi.w	802a282 <_vfprintf_r+0xcaa>
 802972e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8029732:	009d      	.short	0x009d
 8029734:	05a805a8 	.word	0x05a805a8
 8029738:	05a800a5 	.word	0x05a800a5
 802973c:	05a805a8 	.word	0x05a805a8
 8029740:	05a80085 	.word	0x05a80085
 8029744:	00a805a8 	.word	0x00a805a8
 8029748:	05a800b2 	.word	0x05a800b2
 802974c:	00b400af 	.word	0x00b400af
 8029750:	00ce05a8 	.word	0x00ce05a8
 8029754:	00d100d1 	.word	0x00d100d1
 8029758:	00d100d1 	.word	0x00d100d1
 802975c:	00d100d1 	.word	0x00d100d1
 8029760:	00d100d1 	.word	0x00d100d1
 8029764:	05a800d1 	.word	0x05a800d1
 8029768:	05a805a8 	.word	0x05a805a8
 802976c:	05a805a8 	.word	0x05a805a8
 8029770:	05a805a8 	.word	0x05a805a8
 8029774:	05a80146 	.word	0x05a80146
 8029778:	011a0107 	.word	0x011a0107
 802977c:	01460146 	.word	0x01460146
 8029780:	05a80146 	.word	0x05a80146
 8029784:	05a805a8 	.word	0x05a805a8
 8029788:	00e205a8 	.word	0x00e205a8
 802978c:	05a805a8 	.word	0x05a805a8
 8029790:	05a804a3 	.word	0x05a804a3
 8029794:	05a805a8 	.word	0x05a805a8
 8029798:	05a804ed 	.word	0x05a804ed
 802979c:	05a8050e 	.word	0x05a8050e
 80297a0:	053005a8 	.word	0x053005a8
 80297a4:	05a805a8 	.word	0x05a805a8
 80297a8:	05a805a8 	.word	0x05a805a8
 80297ac:	05a805a8 	.word	0x05a805a8
 80297b0:	05a805a8 	.word	0x05a805a8
 80297b4:	05a80146 	.word	0x05a80146
 80297b8:	011c0107 	.word	0x011c0107
 80297bc:	01460146 	.word	0x01460146
 80297c0:	00ed0146 	.word	0x00ed0146
 80297c4:	0101011c 	.word	0x0101011c
 80297c8:	00fa05a8 	.word	0x00fa05a8
 80297cc:	048705a8 	.word	0x048705a8
 80297d0:	04dc04a5 	.word	0x04dc04a5
 80297d4:	05a80101 	.word	0x05a80101
 80297d8:	009b04ed 	.word	0x009b04ed
 80297dc:	05a80510 	.word	0x05a80510
 80297e0:	006505a8 	.word	0x006505a8
 80297e4:	009b05a8 	.word	0x009b05a8
 80297e8:	9803      	ldr	r0, [sp, #12]
 80297ea:	aa26      	add	r2, sp, #152	@ 0x98
 80297ec:	4659      	mov	r1, fp
 80297ee:	f001 f95f 	bl	802aab0 <__sprint_r>
 80297f2:	2800      	cmp	r0, #0
 80297f4:	f040 814d 	bne.w	8029a92 <_vfprintf_r+0x4ba>
 80297f8:	ac29      	add	r4, sp, #164	@ 0xa4
 80297fa:	e780      	b.n	80296fe <_vfprintf_r+0x126>
 80297fc:	4b42      	ldr	r3, [pc, #264]	@ (8029908 <_vfprintf_r+0x330>)
 80297fe:	9319      	str	r3, [sp, #100]	@ 0x64
 8029800:	f015 0320 	ands.w	r3, r5, #32
 8029804:	f000 84c8 	beq.w	802a198 <_vfprintf_r+0xbc0>
 8029808:	3607      	adds	r6, #7
 802980a:	f026 0307 	bic.w	r3, r6, #7
 802980e:	461a      	mov	r2, r3
 8029810:	685f      	ldr	r7, [r3, #4]
 8029812:	f852 6b08 	ldr.w	r6, [r2], #8
 8029816:	9207      	str	r2, [sp, #28]
 8029818:	07eb      	lsls	r3, r5, #31
 802981a:	d50a      	bpl.n	8029832 <_vfprintf_r+0x25a>
 802981c:	ea56 0307 	orrs.w	r3, r6, r7
 8029820:	d007      	beq.n	8029832 <_vfprintf_r+0x25a>
 8029822:	2330      	movs	r3, #48	@ 0x30
 8029824:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8029828:	9b06      	ldr	r3, [sp, #24]
 802982a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802982e:	f045 0502 	orr.w	r5, r5, #2
 8029832:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029836:	2302      	movs	r3, #2
 8029838:	f000 bc2e 	b.w	802a098 <_vfprintf_r+0xac0>
 802983c:	9803      	ldr	r0, [sp, #12]
 802983e:	f003 fd65 	bl	802d30c <_localeconv_r>
 8029842:	6843      	ldr	r3, [r0, #4]
 8029844:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029846:	4618      	mov	r0, r3
 8029848:	f7e6 fd2a 	bl	80102a0 <strlen>
 802984c:	9012      	str	r0, [sp, #72]	@ 0x48
 802984e:	9803      	ldr	r0, [sp, #12]
 8029850:	f003 fd5c 	bl	802d30c <_localeconv_r>
 8029854:	6883      	ldr	r3, [r0, #8]
 8029856:	9309      	str	r3, [sp, #36]	@ 0x24
 8029858:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802985a:	b12b      	cbz	r3, 8029868 <_vfprintf_r+0x290>
 802985c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802985e:	b11b      	cbz	r3, 8029868 <_vfprintf_r+0x290>
 8029860:	781b      	ldrb	r3, [r3, #0]
 8029862:	b10b      	cbz	r3, 8029868 <_vfprintf_r+0x290>
 8029864:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8029868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802986a:	e757      	b.n	802971c <_vfprintf_r+0x144>
 802986c:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8029870:	2b00      	cmp	r3, #0
 8029872:	d1f9      	bne.n	8029868 <_vfprintf_r+0x290>
 8029874:	2320      	movs	r3, #32
 8029876:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802987a:	e7f5      	b.n	8029868 <_vfprintf_r+0x290>
 802987c:	f045 0501 	orr.w	r5, r5, #1
 8029880:	e7f2      	b.n	8029868 <_vfprintf_r+0x290>
 8029882:	f856 3b04 	ldr.w	r3, [r6], #4
 8029886:	930e      	str	r3, [sp, #56]	@ 0x38
 8029888:	2b00      	cmp	r3, #0
 802988a:	daed      	bge.n	8029868 <_vfprintf_r+0x290>
 802988c:	425b      	negs	r3, r3
 802988e:	930e      	str	r3, [sp, #56]	@ 0x38
 8029890:	f045 0504 	orr.w	r5, r5, #4
 8029894:	e7e8      	b.n	8029868 <_vfprintf_r+0x290>
 8029896:	232b      	movs	r3, #43	@ 0x2b
 8029898:	e7ed      	b.n	8029876 <_vfprintf_r+0x29e>
 802989a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802989c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80298a0:	9206      	str	r2, [sp, #24]
 80298a2:	2a2a      	cmp	r2, #42	@ 0x2a
 80298a4:	d10f      	bne.n	80298c6 <_vfprintf_r+0x2ee>
 80298a6:	f856 2b04 	ldr.w	r2, [r6], #4
 80298aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80298ac:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 80298b0:	e7da      	b.n	8029868 <_vfprintf_r+0x290>
 80298b2:	fb01 2909 	mla	r9, r1, r9, r2
 80298b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80298ba:	9206      	str	r2, [sp, #24]
 80298bc:	9a06      	ldr	r2, [sp, #24]
 80298be:	3a30      	subs	r2, #48	@ 0x30
 80298c0:	2a09      	cmp	r2, #9
 80298c2:	d9f6      	bls.n	80298b2 <_vfprintf_r+0x2da>
 80298c4:	e72d      	b.n	8029722 <_vfprintf_r+0x14a>
 80298c6:	f04f 0900 	mov.w	r9, #0
 80298ca:	210a      	movs	r1, #10
 80298cc:	e7f6      	b.n	80298bc <_vfprintf_r+0x2e4>
 80298ce:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80298d2:	e7c9      	b.n	8029868 <_vfprintf_r+0x290>
 80298d4:	2200      	movs	r2, #0
 80298d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80298d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80298da:	210a      	movs	r1, #10
 80298dc:	9a06      	ldr	r2, [sp, #24]
 80298de:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80298e0:	3a30      	subs	r2, #48	@ 0x30
 80298e2:	fb01 2200 	mla	r2, r1, r0, r2
 80298e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80298e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80298ec:	9206      	str	r2, [sp, #24]
 80298ee:	3a30      	subs	r2, #48	@ 0x30
 80298f0:	2a09      	cmp	r2, #9
 80298f2:	d9f3      	bls.n	80298dc <_vfprintf_r+0x304>
 80298f4:	e715      	b.n	8029722 <_vfprintf_r+0x14a>
 80298f6:	f045 0508 	orr.w	r5, r5, #8
 80298fa:	e7b5      	b.n	8029868 <_vfprintf_r+0x290>
 80298fc:	f3af 8000 	nop.w
	...
 8029908:	0803ad23 	.word	0x0803ad23
 802990c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802990e:	781b      	ldrb	r3, [r3, #0]
 8029910:	2b68      	cmp	r3, #104	@ 0x68
 8029912:	bf01      	itttt	eq
 8029914:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8029916:	3301      	addeq	r3, #1
 8029918:	930c      	streq	r3, [sp, #48]	@ 0x30
 802991a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802991e:	bf18      	it	ne
 8029920:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8029924:	e7a0      	b.n	8029868 <_vfprintf_r+0x290>
 8029926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029928:	781b      	ldrb	r3, [r3, #0]
 802992a:	2b6c      	cmp	r3, #108	@ 0x6c
 802992c:	d105      	bne.n	802993a <_vfprintf_r+0x362>
 802992e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029930:	3301      	adds	r3, #1
 8029932:	930c      	str	r3, [sp, #48]	@ 0x30
 8029934:	f045 0520 	orr.w	r5, r5, #32
 8029938:	e796      	b.n	8029868 <_vfprintf_r+0x290>
 802993a:	f045 0510 	orr.w	r5, r5, #16
 802993e:	e793      	b.n	8029868 <_vfprintf_r+0x290>
 8029940:	4632      	mov	r2, r6
 8029942:	f852 3b04 	ldr.w	r3, [r2], #4
 8029946:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802994a:	2300      	movs	r3, #0
 802994c:	9207      	str	r2, [sp, #28]
 802994e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029952:	469a      	mov	sl, r3
 8029954:	f04f 0901 	mov.w	r9, #1
 8029958:	9310      	str	r3, [sp, #64]	@ 0x40
 802995a:	461f      	mov	r7, r3
 802995c:	9308      	str	r3, [sp, #32]
 802995e:	461e      	mov	r6, r3
 8029960:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8029964:	e1da      	b.n	8029d1c <_vfprintf_r+0x744>
 8029966:	f045 0510 	orr.w	r5, r5, #16
 802996a:	06af      	lsls	r7, r5, #26
 802996c:	d512      	bpl.n	8029994 <_vfprintf_r+0x3bc>
 802996e:	3607      	adds	r6, #7
 8029970:	f026 0307 	bic.w	r3, r6, #7
 8029974:	461a      	mov	r2, r3
 8029976:	685f      	ldr	r7, [r3, #4]
 8029978:	f852 6b08 	ldr.w	r6, [r2], #8
 802997c:	9207      	str	r2, [sp, #28]
 802997e:	2f00      	cmp	r7, #0
 8029980:	da06      	bge.n	8029990 <_vfprintf_r+0x3b8>
 8029982:	4276      	negs	r6, r6
 8029984:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8029988:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802998c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029990:	2301      	movs	r3, #1
 8029992:	e384      	b.n	802a09e <_vfprintf_r+0xac6>
 8029994:	4633      	mov	r3, r6
 8029996:	06ee      	lsls	r6, r5, #27
 8029998:	f853 7b04 	ldr.w	r7, [r3], #4
 802999c:	9307      	str	r3, [sp, #28]
 802999e:	d502      	bpl.n	80299a6 <_vfprintf_r+0x3ce>
 80299a0:	463e      	mov	r6, r7
 80299a2:	17ff      	asrs	r7, r7, #31
 80299a4:	e7eb      	b.n	802997e <_vfprintf_r+0x3a6>
 80299a6:	0668      	lsls	r0, r5, #25
 80299a8:	d503      	bpl.n	80299b2 <_vfprintf_r+0x3da>
 80299aa:	b23e      	sxth	r6, r7
 80299ac:	f347 37c0 	sbfx	r7, r7, #15, #1
 80299b0:	e7e5      	b.n	802997e <_vfprintf_r+0x3a6>
 80299b2:	05a9      	lsls	r1, r5, #22
 80299b4:	d5f4      	bpl.n	80299a0 <_vfprintf_r+0x3c8>
 80299b6:	b27e      	sxtb	r6, r7
 80299b8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80299bc:	e7df      	b.n	802997e <_vfprintf_r+0x3a6>
 80299be:	3607      	adds	r6, #7
 80299c0:	f026 0307 	bic.w	r3, r6, #7
 80299c4:	ecb3 7b02 	vldmia	r3!, {d7}
 80299c8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80299cc:	9307      	str	r3, [sp, #28]
 80299ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80299d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80299d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80299d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80299d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80299da:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80299de:	4b85      	ldr	r3, [pc, #532]	@ (8029bf4 <_vfprintf_r+0x61c>)
 80299e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80299e4:	f7e7 f8ba 	bl	8010b5c <__aeabi_dcmpun>
 80299e8:	bb10      	cbnz	r0, 8029a30 <_vfprintf_r+0x458>
 80299ea:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 80299ee:	4b81      	ldr	r3, [pc, #516]	@ (8029bf4 <_vfprintf_r+0x61c>)
 80299f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80299f4:	f7e7 f894 	bl	8010b20 <__aeabi_dcmple>
 80299f8:	b9d0      	cbnz	r0, 8029a30 <_vfprintf_r+0x458>
 80299fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80299fe:	2200      	movs	r2, #0
 8029a00:	2300      	movs	r3, #0
 8029a02:	f7e7 f883 	bl	8010b0c <__aeabi_dcmplt>
 8029a06:	b110      	cbz	r0, 8029a0e <_vfprintf_r+0x436>
 8029a08:	232d      	movs	r3, #45	@ 0x2d
 8029a0a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8029a0e:	4a7a      	ldr	r2, [pc, #488]	@ (8029bf8 <_vfprintf_r+0x620>)
 8029a10:	4b7a      	ldr	r3, [pc, #488]	@ (8029bfc <_vfprintf_r+0x624>)
 8029a12:	9906      	ldr	r1, [sp, #24]
 8029a14:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8029a18:	2947      	cmp	r1, #71	@ 0x47
 8029a1a:	bfd4      	ite	le
 8029a1c:	4690      	movle	r8, r2
 8029a1e:	4698      	movgt	r8, r3
 8029a20:	f04f 0a00 	mov.w	sl, #0
 8029a24:	f04f 0903 	mov.w	r9, #3
 8029a28:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8029a2c:	f000 bff8 	b.w	802aa20 <_vfprintf_r+0x1448>
 8029a30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8029a34:	4610      	mov	r0, r2
 8029a36:	4619      	mov	r1, r3
 8029a38:	f7e7 f890 	bl	8010b5c <__aeabi_dcmpun>
 8029a3c:	4682      	mov	sl, r0
 8029a3e:	b140      	cbz	r0, 8029a52 <_vfprintf_r+0x47a>
 8029a40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029a42:	4a6f      	ldr	r2, [pc, #444]	@ (8029c00 <_vfprintf_r+0x628>)
 8029a44:	2b00      	cmp	r3, #0
 8029a46:	bfbc      	itt	lt
 8029a48:	232d      	movlt	r3, #45	@ 0x2d
 8029a4a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8029a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8029c04 <_vfprintf_r+0x62c>)
 8029a50:	e7df      	b.n	8029a12 <_vfprintf_r+0x43a>
 8029a52:	9b06      	ldr	r3, [sp, #24]
 8029a54:	2b61      	cmp	r3, #97	@ 0x61
 8029a56:	d02e      	beq.n	8029ab6 <_vfprintf_r+0x4de>
 8029a58:	2b41      	cmp	r3, #65	@ 0x41
 8029a5a:	d12e      	bne.n	8029aba <_vfprintf_r+0x4e2>
 8029a5c:	2358      	movs	r3, #88	@ 0x58
 8029a5e:	2230      	movs	r2, #48	@ 0x30
 8029a60:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8029a64:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8029a68:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8029a6c:	f045 0502 	orr.w	r5, r5, #2
 8029a70:	f340 80ae 	ble.w	8029bd0 <_vfprintf_r+0x5f8>
 8029a74:	9803      	ldr	r0, [sp, #12]
 8029a76:	f109 0101 	add.w	r1, r9, #1
 8029a7a:	f004 fd0f 	bl	802e49c <_malloc_r>
 8029a7e:	4680      	mov	r8, r0
 8029a80:	2800      	cmp	r0, #0
 8029a82:	f040 80aa 	bne.w	8029bda <_vfprintf_r+0x602>
 8029a86:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029a8e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8029a92:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8029a96:	07d9      	lsls	r1, r3, #31
 8029a98:	d407      	bmi.n	8029aaa <_vfprintf_r+0x4d2>
 8029a9a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029a9e:	059a      	lsls	r2, r3, #22
 8029aa0:	d403      	bmi.n	8029aaa <_vfprintf_r+0x4d2>
 8029aa2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8029aa6:	f003 fcde 	bl	802d466 <__retarget_lock_release_recursive>
 8029aaa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8029aae:	065b      	lsls	r3, r3, #25
 8029ab0:	f57f add6 	bpl.w	8029660 <_vfprintf_r+0x88>
 8029ab4:	e5d1      	b.n	802965a <_vfprintf_r+0x82>
 8029ab6:	2378      	movs	r3, #120	@ 0x78
 8029ab8:	e7d1      	b.n	8029a5e <_vfprintf_r+0x486>
 8029aba:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8029abe:	f000 808e 	beq.w	8029bde <_vfprintf_r+0x606>
 8029ac2:	9b06      	ldr	r3, [sp, #24]
 8029ac4:	f023 0320 	bic.w	r3, r3, #32
 8029ac8:	2b47      	cmp	r3, #71	@ 0x47
 8029aca:	d105      	bne.n	8029ad8 <_vfprintf_r+0x500>
 8029acc:	f1b9 0f00 	cmp.w	r9, #0
 8029ad0:	d102      	bne.n	8029ad8 <_vfprintf_r+0x500>
 8029ad2:	46ca      	mov	sl, r9
 8029ad4:	f04f 0901 	mov.w	r9, #1
 8029ad8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8029adc:	9311      	str	r3, [sp, #68]	@ 0x44
 8029ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029ae0:	2b00      	cmp	r3, #0
 8029ae2:	da7f      	bge.n	8029be4 <_vfprintf_r+0x60c>
 8029ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029ae6:	9314      	str	r3, [sp, #80]	@ 0x50
 8029ae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029aea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8029aee:	9315      	str	r3, [sp, #84]	@ 0x54
 8029af0:	232d      	movs	r3, #45	@ 0x2d
 8029af2:	931c      	str	r3, [sp, #112]	@ 0x70
 8029af4:	9b06      	ldr	r3, [sp, #24]
 8029af6:	f023 0320 	bic.w	r3, r3, #32
 8029afa:	2b41      	cmp	r3, #65	@ 0x41
 8029afc:	9308      	str	r3, [sp, #32]
 8029afe:	f040 81e7 	bne.w	8029ed0 <_vfprintf_r+0x8f8>
 8029b02:	a820      	add	r0, sp, #128	@ 0x80
 8029b04:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8029b08:	f003 fcd2 	bl	802d4b0 <frexp>
 8029b0c:	2200      	movs	r2, #0
 8029b0e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8029b12:	ec51 0b10 	vmov	r0, r1, d0
 8029b16:	f7e6 fd87 	bl	8010628 <__aeabi_dmul>
 8029b1a:	4602      	mov	r2, r0
 8029b1c:	460b      	mov	r3, r1
 8029b1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029b22:	2200      	movs	r2, #0
 8029b24:	2300      	movs	r3, #0
 8029b26:	f7e6 ffe7 	bl	8010af8 <__aeabi_dcmpeq>
 8029b2a:	b108      	cbz	r0, 8029b30 <_vfprintf_r+0x558>
 8029b2c:	2301      	movs	r3, #1
 8029b2e:	9320      	str	r3, [sp, #128]	@ 0x80
 8029b30:	4a35      	ldr	r2, [pc, #212]	@ (8029c08 <_vfprintf_r+0x630>)
 8029b32:	4b36      	ldr	r3, [pc, #216]	@ (8029c0c <_vfprintf_r+0x634>)
 8029b34:	9906      	ldr	r1, [sp, #24]
 8029b36:	2961      	cmp	r1, #97	@ 0x61
 8029b38:	bf18      	it	ne
 8029b3a:	461a      	movne	r2, r3
 8029b3c:	9210      	str	r2, [sp, #64]	@ 0x40
 8029b3e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 8029b42:	4646      	mov	r6, r8
 8029b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029b48:	4b31      	ldr	r3, [pc, #196]	@ (8029c10 <_vfprintf_r+0x638>)
 8029b4a:	2200      	movs	r2, #0
 8029b4c:	f7e6 fd6c 	bl	8010628 <__aeabi_dmul>
 8029b50:	4602      	mov	r2, r0
 8029b52:	460b      	mov	r3, r1
 8029b54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029b58:	f7e7 f816 	bl	8010b88 <__aeabi_d2iz>
 8029b5c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8029b5e:	f7e6 fcf9 	bl	8010554 <__aeabi_i2d>
 8029b62:	4602      	mov	r2, r0
 8029b64:	460b      	mov	r3, r1
 8029b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029b6a:	f7e6 fba5 	bl	80102b8 <__aeabi_dsub>
 8029b6e:	4602      	mov	r2, r0
 8029b70:	460b      	mov	r3, r1
 8029b72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8029b76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029b78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029b7a:	5c9b      	ldrb	r3, [r3, r2]
 8029b7c:	f806 3b01 	strb.w	r3, [r6], #1
 8029b80:	1c7a      	adds	r2, r7, #1
 8029b82:	d006      	beq.n	8029b92 <_vfprintf_r+0x5ba>
 8029b84:	1e7b      	subs	r3, r7, #1
 8029b86:	931d      	str	r3, [sp, #116]	@ 0x74
 8029b88:	2200      	movs	r2, #0
 8029b8a:	2300      	movs	r3, #0
 8029b8c:	f7e6 ffb4 	bl	8010af8 <__aeabi_dcmpeq>
 8029b90:	b370      	cbz	r0, 8029bf0 <_vfprintf_r+0x618>
 8029b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029b96:	4b1f      	ldr	r3, [pc, #124]	@ (8029c14 <_vfprintf_r+0x63c>)
 8029b98:	2200      	movs	r2, #0
 8029b9a:	f7e6 ffd5 	bl	8010b48 <__aeabi_dcmpgt>
 8029b9e:	2800      	cmp	r0, #0
 8029ba0:	d13a      	bne.n	8029c18 <_vfprintf_r+0x640>
 8029ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8029c14 <_vfprintf_r+0x63c>)
 8029ba8:	2200      	movs	r2, #0
 8029baa:	f7e6 ffa5 	bl	8010af8 <__aeabi_dcmpeq>
 8029bae:	b110      	cbz	r0, 8029bb6 <_vfprintf_r+0x5de>
 8029bb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029bb2:	07db      	lsls	r3, r3, #31
 8029bb4:	d430      	bmi.n	8029c18 <_vfprintf_r+0x640>
 8029bb6:	4633      	mov	r3, r6
 8029bb8:	19f1      	adds	r1, r6, r7
 8029bba:	2030      	movs	r0, #48	@ 0x30
 8029bbc:	1aca      	subs	r2, r1, r3
 8029bbe:	2a00      	cmp	r2, #0
 8029bc0:	f280 8183 	bge.w	8029eca <_vfprintf_r+0x8f2>
 8029bc4:	1c7b      	adds	r3, r7, #1
 8029bc6:	3701      	adds	r7, #1
 8029bc8:	bfb8      	it	lt
 8029bca:	2300      	movlt	r3, #0
 8029bcc:	441e      	add	r6, r3
 8029bce:	e037      	b.n	8029c40 <_vfprintf_r+0x668>
 8029bd0:	f04f 0a00 	mov.w	sl, #0
 8029bd4:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8029bd8:	e77e      	b.n	8029ad8 <_vfprintf_r+0x500>
 8029bda:	4682      	mov	sl, r0
 8029bdc:	e77c      	b.n	8029ad8 <_vfprintf_r+0x500>
 8029bde:	f04f 0906 	mov.w	r9, #6
 8029be2:	e779      	b.n	8029ad8 <_vfprintf_r+0x500>
 8029be4:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8029be8:	2300      	movs	r3, #0
 8029bea:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8029bee:	e780      	b.n	8029af2 <_vfprintf_r+0x51a>
 8029bf0:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8029bf2:	e7a7      	b.n	8029b44 <_vfprintf_r+0x56c>
 8029bf4:	7fefffff 	.word	0x7fefffff
 8029bf8:	0803ad13 	.word	0x0803ad13
 8029bfc:	0803ad17 	.word	0x0803ad17
 8029c00:	0803ad1b 	.word	0x0803ad1b
 8029c04:	0803ad1f 	.word	0x0803ad1f
 8029c08:	0803ad23 	.word	0x0803ad23
 8029c0c:	0803ad34 	.word	0x0803ad34
 8029c10:	40300000 	.word	0x40300000
 8029c14:	3fe00000 	.word	0x3fe00000
 8029c18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029c1a:	9624      	str	r6, [sp, #144]	@ 0x90
 8029c1c:	7bd9      	ldrb	r1, [r3, #15]
 8029c1e:	2030      	movs	r0, #48	@ 0x30
 8029c20:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8029c22:	1e53      	subs	r3, r2, #1
 8029c24:	9324      	str	r3, [sp, #144]	@ 0x90
 8029c26:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8029c2a:	428b      	cmp	r3, r1
 8029c2c:	f000 814a 	beq.w	8029ec4 <_vfprintf_r+0x8ec>
 8029c30:	2b39      	cmp	r3, #57	@ 0x39
 8029c32:	bf0b      	itete	eq
 8029c34:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8029c36:	3301      	addne	r3, #1
 8029c38:	7a9b      	ldrbeq	r3, [r3, #10]
 8029c3a:	b2db      	uxtbne	r3, r3
 8029c3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8029c40:	eba6 0308 	sub.w	r3, r6, r8
 8029c44:	9304      	str	r3, [sp, #16]
 8029c46:	9b08      	ldr	r3, [sp, #32]
 8029c48:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8029c4a:	2b47      	cmp	r3, #71	@ 0x47
 8029c4c:	f040 8189 	bne.w	8029f62 <_vfprintf_r+0x98a>
 8029c50:	1cf1      	adds	r1, r6, #3
 8029c52:	db02      	blt.n	8029c5a <_vfprintf_r+0x682>
 8029c54:	45b1      	cmp	r9, r6
 8029c56:	f280 81a7 	bge.w	8029fa8 <_vfprintf_r+0x9d0>
 8029c5a:	9b06      	ldr	r3, [sp, #24]
 8029c5c:	3b02      	subs	r3, #2
 8029c5e:	9306      	str	r3, [sp, #24]
 8029c60:	9906      	ldr	r1, [sp, #24]
 8029c62:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8029c66:	f021 0120 	bic.w	r1, r1, #32
 8029c6a:	2941      	cmp	r1, #65	@ 0x41
 8029c6c:	bf08      	it	eq
 8029c6e:	320f      	addeq	r2, #15
 8029c70:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8029c74:	bf06      	itte	eq
 8029c76:	b2d2      	uxtbeq	r2, r2
 8029c78:	2101      	moveq	r1, #1
 8029c7a:	2100      	movne	r1, #0
 8029c7c:	2b00      	cmp	r3, #0
 8029c7e:	9320      	str	r3, [sp, #128]	@ 0x80
 8029c80:	bfb8      	it	lt
 8029c82:	f1c6 0301 	rsblt	r3, r6, #1
 8029c86:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8029c8a:	bfb4      	ite	lt
 8029c8c:	222d      	movlt	r2, #45	@ 0x2d
 8029c8e:	222b      	movge	r2, #43	@ 0x2b
 8029c90:	2b09      	cmp	r3, #9
 8029c92:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8029c96:	f340 817a 	ble.w	8029f8e <_vfprintf_r+0x9b6>
 8029c9a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8029c9e:	270a      	movs	r7, #10
 8029ca0:	4602      	mov	r2, r0
 8029ca2:	fbb3 f6f7 	udiv	r6, r3, r7
 8029ca6:	fb07 3116 	mls	r1, r7, r6, r3
 8029caa:	3130      	adds	r1, #48	@ 0x30
 8029cac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8029cb0:	4619      	mov	r1, r3
 8029cb2:	2963      	cmp	r1, #99	@ 0x63
 8029cb4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8029cb8:	4633      	mov	r3, r6
 8029cba:	dcf1      	bgt.n	8029ca0 <_vfprintf_r+0x6c8>
 8029cbc:	3330      	adds	r3, #48	@ 0x30
 8029cbe:	1e91      	subs	r1, r2, #2
 8029cc0:	f800 3c01 	strb.w	r3, [r0, #-1]
 8029cc4:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8029cc8:	460b      	mov	r3, r1
 8029cca:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8029cce:	4283      	cmp	r3, r0
 8029cd0:	f0c0 8158 	bcc.w	8029f84 <_vfprintf_r+0x9ac>
 8029cd4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8029cd8:	1a9b      	subs	r3, r3, r2
 8029cda:	4281      	cmp	r1, r0
 8029cdc:	bf88      	it	hi
 8029cde:	2300      	movhi	r3, #0
 8029ce0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8029ce4:	441a      	add	r2, r3
 8029ce6:	ab22      	add	r3, sp, #136	@ 0x88
 8029ce8:	1ad3      	subs	r3, r2, r3
 8029cea:	9a04      	ldr	r2, [sp, #16]
 8029cec:	9318      	str	r3, [sp, #96]	@ 0x60
 8029cee:	2a01      	cmp	r2, #1
 8029cf0:	eb03 0902 	add.w	r9, r3, r2
 8029cf4:	dc01      	bgt.n	8029cfa <_vfprintf_r+0x722>
 8029cf6:	07ea      	lsls	r2, r5, #31
 8029cf8:	d501      	bpl.n	8029cfe <_vfprintf_r+0x726>
 8029cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029cfc:	4499      	add	r9, r3
 8029cfe:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8029d02:	2700      	movs	r7, #0
 8029d04:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8029d08:	9311      	str	r3, [sp, #68]	@ 0x44
 8029d0a:	9708      	str	r7, [sp, #32]
 8029d0c:	463e      	mov	r6, r7
 8029d0e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029d10:	2b00      	cmp	r3, #0
 8029d12:	f040 8191 	bne.w	802a038 <_vfprintf_r+0xa60>
 8029d16:	2300      	movs	r3, #0
 8029d18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029d1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8029d1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029d1e:	454b      	cmp	r3, r9
 8029d20:	bfb8      	it	lt
 8029d22:	464b      	movlt	r3, r9
 8029d24:	9311      	str	r3, [sp, #68]	@ 0x44
 8029d26:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8029d2a:	b113      	cbz	r3, 8029d32 <_vfprintf_r+0x75a>
 8029d2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8029d2e:	3301      	adds	r3, #1
 8029d30:	9311      	str	r3, [sp, #68]	@ 0x44
 8029d32:	f015 0302 	ands.w	r3, r5, #2
 8029d36:	931c      	str	r3, [sp, #112]	@ 0x70
 8029d38:	bf1e      	ittt	ne
 8029d3a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8029d3c:	3302      	addne	r3, #2
 8029d3e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8029d40:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8029d44:	931d      	str	r3, [sp, #116]	@ 0x74
 8029d46:	d122      	bne.n	8029d8e <_vfprintf_r+0x7b6>
 8029d48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029d4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029d4c:	1a9b      	subs	r3, r3, r2
 8029d4e:	2b00      	cmp	r3, #0
 8029d50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029d52:	dd1c      	ble.n	8029d8e <_vfprintf_r+0x7b6>
 8029d54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029d56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8029d5a:	2810      	cmp	r0, #16
 8029d5c:	489f      	ldr	r0, [pc, #636]	@ (8029fdc <_vfprintf_r+0xa04>)
 8029d5e:	6020      	str	r0, [r4, #0]
 8029d60:	f102 0201 	add.w	r2, r2, #1
 8029d64:	f104 0108 	add.w	r1, r4, #8
 8029d68:	f300 8297 	bgt.w	802a29a <_vfprintf_r+0xcc2>
 8029d6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029d6e:	6060      	str	r0, [r4, #4]
 8029d70:	4403      	add	r3, r0
 8029d72:	2a07      	cmp	r2, #7
 8029d74:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029d78:	f340 82a4 	ble.w	802a2c4 <_vfprintf_r+0xcec>
 8029d7c:	9803      	ldr	r0, [sp, #12]
 8029d7e:	aa26      	add	r2, sp, #152	@ 0x98
 8029d80:	4659      	mov	r1, fp
 8029d82:	f000 fe95 	bl	802aab0 <__sprint_r>
 8029d86:	2800      	cmp	r0, #0
 8029d88:	f040 85ed 	bne.w	802a966 <_vfprintf_r+0x138e>
 8029d8c:	ac29      	add	r4, sp, #164	@ 0xa4
 8029d8e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8029d92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029d94:	b16a      	cbz	r2, 8029db2 <_vfprintf_r+0x7da>
 8029d96:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8029d9a:	6022      	str	r2, [r4, #0]
 8029d9c:	2201      	movs	r2, #1
 8029d9e:	4413      	add	r3, r2
 8029da0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029da2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029da4:	6062      	str	r2, [r4, #4]
 8029da6:	4413      	add	r3, r2
 8029da8:	2b07      	cmp	r3, #7
 8029daa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029dac:	f300 828c 	bgt.w	802a2c8 <_vfprintf_r+0xcf0>
 8029db0:	3408      	adds	r4, #8
 8029db2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8029db4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029db6:	b162      	cbz	r2, 8029dd2 <_vfprintf_r+0x7fa>
 8029db8:	aa1f      	add	r2, sp, #124	@ 0x7c
 8029dba:	6022      	str	r2, [r4, #0]
 8029dbc:	2202      	movs	r2, #2
 8029dbe:	4413      	add	r3, r2
 8029dc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029dc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029dc4:	6062      	str	r2, [r4, #4]
 8029dc6:	3301      	adds	r3, #1
 8029dc8:	2b07      	cmp	r3, #7
 8029dca:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029dcc:	f300 8286 	bgt.w	802a2dc <_vfprintf_r+0xd04>
 8029dd0:	3408      	adds	r4, #8
 8029dd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8029dd4:	2b80      	cmp	r3, #128	@ 0x80
 8029dd6:	d122      	bne.n	8029e1e <_vfprintf_r+0x846>
 8029dd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029dda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8029ddc:	1a9b      	subs	r3, r3, r2
 8029dde:	2b00      	cmp	r3, #0
 8029de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029de2:	dd1c      	ble.n	8029e1e <_vfprintf_r+0x846>
 8029de4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029de6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8029dea:	2810      	cmp	r0, #16
 8029dec:	487c      	ldr	r0, [pc, #496]	@ (8029fe0 <_vfprintf_r+0xa08>)
 8029dee:	6020      	str	r0, [r4, #0]
 8029df0:	f102 0201 	add.w	r2, r2, #1
 8029df4:	f104 0108 	add.w	r1, r4, #8
 8029df8:	f300 827a 	bgt.w	802a2f0 <_vfprintf_r+0xd18>
 8029dfc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029dfe:	6060      	str	r0, [r4, #4]
 8029e00:	4403      	add	r3, r0
 8029e02:	2a07      	cmp	r2, #7
 8029e04:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029e08:	f340 8287 	ble.w	802a31a <_vfprintf_r+0xd42>
 8029e0c:	9803      	ldr	r0, [sp, #12]
 8029e0e:	aa26      	add	r2, sp, #152	@ 0x98
 8029e10:	4659      	mov	r1, fp
 8029e12:	f000 fe4d 	bl	802aab0 <__sprint_r>
 8029e16:	2800      	cmp	r0, #0
 8029e18:	f040 85a5 	bne.w	802a966 <_vfprintf_r+0x138e>
 8029e1c:	ac29      	add	r4, sp, #164	@ 0xa4
 8029e1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029e20:	eba3 0309 	sub.w	r3, r3, r9
 8029e24:	2b00      	cmp	r3, #0
 8029e26:	9310      	str	r3, [sp, #64]	@ 0x40
 8029e28:	dd1c      	ble.n	8029e64 <_vfprintf_r+0x88c>
 8029e2a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029e2c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8029e30:	2810      	cmp	r0, #16
 8029e32:	486b      	ldr	r0, [pc, #428]	@ (8029fe0 <_vfprintf_r+0xa08>)
 8029e34:	6020      	str	r0, [r4, #0]
 8029e36:	f102 0201 	add.w	r2, r2, #1
 8029e3a:	f104 0108 	add.w	r1, r4, #8
 8029e3e:	f300 826e 	bgt.w	802a31e <_vfprintf_r+0xd46>
 8029e42:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029e44:	6060      	str	r0, [r4, #4]
 8029e46:	4403      	add	r3, r0
 8029e48:	2a07      	cmp	r2, #7
 8029e4a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8029e4e:	f340 827b 	ble.w	802a348 <_vfprintf_r+0xd70>
 8029e52:	9803      	ldr	r0, [sp, #12]
 8029e54:	aa26      	add	r2, sp, #152	@ 0x98
 8029e56:	4659      	mov	r1, fp
 8029e58:	f000 fe2a 	bl	802aab0 <__sprint_r>
 8029e5c:	2800      	cmp	r0, #0
 8029e5e:	f040 8582 	bne.w	802a966 <_vfprintf_r+0x138e>
 8029e62:	ac29      	add	r4, sp, #164	@ 0xa4
 8029e64:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029e66:	9310      	str	r3, [sp, #64]	@ 0x40
 8029e68:	05e8      	lsls	r0, r5, #23
 8029e6a:	f100 8273 	bmi.w	802a354 <_vfprintf_r+0xd7c>
 8029e6e:	444b      	add	r3, r9
 8029e70:	9328      	str	r3, [sp, #160]	@ 0xa0
 8029e72:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8029e74:	3301      	adds	r3, #1
 8029e76:	2b07      	cmp	r3, #7
 8029e78:	e9c4 8900 	strd	r8, r9, [r4]
 8029e7c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029e7e:	f300 82af 	bgt.w	802a3e0 <_vfprintf_r+0xe08>
 8029e82:	3408      	adds	r4, #8
 8029e84:	0768      	lsls	r0, r5, #29
 8029e86:	f100 8550 	bmi.w	802a92a <_vfprintf_r+0x1352>
 8029e8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8029e8e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029e90:	428a      	cmp	r2, r1
 8029e92:	bfac      	ite	ge
 8029e94:	189b      	addge	r3, r3, r2
 8029e96:	185b      	addlt	r3, r3, r1
 8029e98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029e9a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8029e9c:	b13b      	cbz	r3, 8029eae <_vfprintf_r+0x8d6>
 8029e9e:	9803      	ldr	r0, [sp, #12]
 8029ea0:	aa26      	add	r2, sp, #152	@ 0x98
 8029ea2:	4659      	mov	r1, fp
 8029ea4:	f000 fe04 	bl	802aab0 <__sprint_r>
 8029ea8:	2800      	cmp	r0, #0
 8029eaa:	f040 855c 	bne.w	802a966 <_vfprintf_r+0x138e>
 8029eae:	2300      	movs	r3, #0
 8029eb0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8029eb2:	f1ba 0f00 	cmp.w	sl, #0
 8029eb6:	f040 8572 	bne.w	802a99e <_vfprintf_r+0x13c6>
 8029eba:	9e07      	ldr	r6, [sp, #28]
 8029ebc:	ac29      	add	r4, sp, #164	@ 0xa4
 8029ebe:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8029ec2:	e407      	b.n	80296d4 <_vfprintf_r+0xfc>
 8029ec4:	f802 0c01 	strb.w	r0, [r2, #-1]
 8029ec8:	e6aa      	b.n	8029c20 <_vfprintf_r+0x648>
 8029eca:	f803 0b01 	strb.w	r0, [r3], #1
 8029ece:	e675      	b.n	8029bbc <_vfprintf_r+0x5e4>
 8029ed0:	9b08      	ldr	r3, [sp, #32]
 8029ed2:	2b46      	cmp	r3, #70	@ 0x46
 8029ed4:	d005      	beq.n	8029ee2 <_vfprintf_r+0x90a>
 8029ed6:	2b45      	cmp	r3, #69	@ 0x45
 8029ed8:	d11a      	bne.n	8029f10 <_vfprintf_r+0x938>
 8029eda:	f109 0601 	add.w	r6, r9, #1
 8029ede:	2102      	movs	r1, #2
 8029ee0:	e001      	b.n	8029ee6 <_vfprintf_r+0x90e>
 8029ee2:	464e      	mov	r6, r9
 8029ee4:	2103      	movs	r1, #3
 8029ee6:	ab24      	add	r3, sp, #144	@ 0x90
 8029ee8:	9301      	str	r3, [sp, #4]
 8029eea:	ab21      	add	r3, sp, #132	@ 0x84
 8029eec:	9300      	str	r3, [sp, #0]
 8029eee:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8029ef2:	ab20      	add	r3, sp, #128	@ 0x80
 8029ef4:	9803      	ldr	r0, [sp, #12]
 8029ef6:	4632      	mov	r2, r6
 8029ef8:	f003 fbb6 	bl	802d668 <_dtoa_r>
 8029efc:	9b08      	ldr	r3, [sp, #32]
 8029efe:	2b47      	cmp	r3, #71	@ 0x47
 8029f00:	4680      	mov	r8, r0
 8029f02:	d119      	bne.n	8029f38 <_vfprintf_r+0x960>
 8029f04:	07e8      	lsls	r0, r5, #31
 8029f06:	d405      	bmi.n	8029f14 <_vfprintf_r+0x93c>
 8029f08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029f0a:	eba3 0308 	sub.w	r3, r3, r8
 8029f0e:	e699      	b.n	8029c44 <_vfprintf_r+0x66c>
 8029f10:	464e      	mov	r6, r9
 8029f12:	e7e4      	b.n	8029ede <_vfprintf_r+0x906>
 8029f14:	eb08 0706 	add.w	r7, r8, r6
 8029f18:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8029f1c:	2200      	movs	r2, #0
 8029f1e:	2300      	movs	r3, #0
 8029f20:	f7e6 fdea 	bl	8010af8 <__aeabi_dcmpeq>
 8029f24:	b100      	cbz	r0, 8029f28 <_vfprintf_r+0x950>
 8029f26:	9724      	str	r7, [sp, #144]	@ 0x90
 8029f28:	2230      	movs	r2, #48	@ 0x30
 8029f2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8029f2c:	429f      	cmp	r7, r3
 8029f2e:	d9eb      	bls.n	8029f08 <_vfprintf_r+0x930>
 8029f30:	1c59      	adds	r1, r3, #1
 8029f32:	9124      	str	r1, [sp, #144]	@ 0x90
 8029f34:	701a      	strb	r2, [r3, #0]
 8029f36:	e7f8      	b.n	8029f2a <_vfprintf_r+0x952>
 8029f38:	9b08      	ldr	r3, [sp, #32]
 8029f3a:	2b46      	cmp	r3, #70	@ 0x46
 8029f3c:	eb00 0706 	add.w	r7, r0, r6
 8029f40:	d1ea      	bne.n	8029f18 <_vfprintf_r+0x940>
 8029f42:	7803      	ldrb	r3, [r0, #0]
 8029f44:	2b30      	cmp	r3, #48	@ 0x30
 8029f46:	d109      	bne.n	8029f5c <_vfprintf_r+0x984>
 8029f48:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8029f4c:	2200      	movs	r2, #0
 8029f4e:	2300      	movs	r3, #0
 8029f50:	f7e6 fdd2 	bl	8010af8 <__aeabi_dcmpeq>
 8029f54:	b910      	cbnz	r0, 8029f5c <_vfprintf_r+0x984>
 8029f56:	f1c6 0601 	rsb	r6, r6, #1
 8029f5a:	9620      	str	r6, [sp, #128]	@ 0x80
 8029f5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029f5e:	441f      	add	r7, r3
 8029f60:	e7da      	b.n	8029f18 <_vfprintf_r+0x940>
 8029f62:	9b08      	ldr	r3, [sp, #32]
 8029f64:	2b46      	cmp	r3, #70	@ 0x46
 8029f66:	f47f ae7b 	bne.w	8029c60 <_vfprintf_r+0x688>
 8029f6a:	f005 0301 	and.w	r3, r5, #1
 8029f6e:	2e00      	cmp	r6, #0
 8029f70:	ea43 0309 	orr.w	r3, r3, r9
 8029f74:	dd25      	ble.n	8029fc2 <_vfprintf_r+0x9ea>
 8029f76:	b37b      	cbz	r3, 8029fd8 <_vfprintf_r+0xa00>
 8029f78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029f7a:	18f3      	adds	r3, r6, r3
 8029f7c:	4499      	add	r9, r3
 8029f7e:	2366      	movs	r3, #102	@ 0x66
 8029f80:	9306      	str	r3, [sp, #24]
 8029f82:	e033      	b.n	8029fec <_vfprintf_r+0xa14>
 8029f84:	f813 7b01 	ldrb.w	r7, [r3], #1
 8029f88:	f806 7f01 	strb.w	r7, [r6, #1]!
 8029f8c:	e69f      	b.n	8029cce <_vfprintf_r+0x6f6>
 8029f8e:	b941      	cbnz	r1, 8029fa2 <_vfprintf_r+0x9ca>
 8029f90:	2230      	movs	r2, #48	@ 0x30
 8029f92:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8029f96:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8029f9a:	3330      	adds	r3, #48	@ 0x30
 8029f9c:	f802 3b01 	strb.w	r3, [r2], #1
 8029fa0:	e6a1      	b.n	8029ce6 <_vfprintf_r+0x70e>
 8029fa2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8029fa6:	e7f8      	b.n	8029f9a <_vfprintf_r+0x9c2>
 8029fa8:	9b04      	ldr	r3, [sp, #16]
 8029faa:	42b3      	cmp	r3, r6
 8029fac:	dd0d      	ble.n	8029fca <_vfprintf_r+0x9f2>
 8029fae:	9b04      	ldr	r3, [sp, #16]
 8029fb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8029fb2:	2e00      	cmp	r6, #0
 8029fb4:	eb03 0902 	add.w	r9, r3, r2
 8029fb8:	dc0c      	bgt.n	8029fd4 <_vfprintf_r+0x9fc>
 8029fba:	f1c6 0301 	rsb	r3, r6, #1
 8029fbe:	4499      	add	r9, r3
 8029fc0:	e008      	b.n	8029fd4 <_vfprintf_r+0x9fc>
 8029fc2:	b17b      	cbz	r3, 8029fe4 <_vfprintf_r+0xa0c>
 8029fc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029fc6:	3301      	adds	r3, #1
 8029fc8:	e7d8      	b.n	8029f7c <_vfprintf_r+0x9a4>
 8029fca:	07eb      	lsls	r3, r5, #31
 8029fcc:	d521      	bpl.n	802a012 <_vfprintf_r+0xa3a>
 8029fce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029fd0:	eb06 0903 	add.w	r9, r6, r3
 8029fd4:	2367      	movs	r3, #103	@ 0x67
 8029fd6:	e7d3      	b.n	8029f80 <_vfprintf_r+0x9a8>
 8029fd8:	46b1      	mov	r9, r6
 8029fda:	e7d0      	b.n	8029f7e <_vfprintf_r+0x9a6>
 8029fdc:	0803ad57 	.word	0x0803ad57
 8029fe0:	0803ad47 	.word	0x0803ad47
 8029fe4:	2366      	movs	r3, #102	@ 0x66
 8029fe6:	9306      	str	r3, [sp, #24]
 8029fe8:	f04f 0901 	mov.w	r9, #1
 8029fec:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8029ff0:	9308      	str	r3, [sp, #32]
 8029ff2:	d01f      	beq.n	802a034 <_vfprintf_r+0xa5c>
 8029ff4:	2700      	movs	r7, #0
 8029ff6:	2e00      	cmp	r6, #0
 8029ff8:	9708      	str	r7, [sp, #32]
 8029ffa:	f77f ae88 	ble.w	8029d0e <_vfprintf_r+0x736>
 8029ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a000:	781b      	ldrb	r3, [r3, #0]
 802a002:	2bff      	cmp	r3, #255	@ 0xff
 802a004:	d107      	bne.n	802a016 <_vfprintf_r+0xa3e>
 802a006:	9b08      	ldr	r3, [sp, #32]
 802a008:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a00a:	443b      	add	r3, r7
 802a00c:	fb02 9903 	mla	r9, r2, r3, r9
 802a010:	e67d      	b.n	8029d0e <_vfprintf_r+0x736>
 802a012:	46b1      	mov	r9, r6
 802a014:	e7de      	b.n	8029fd4 <_vfprintf_r+0x9fc>
 802a016:	42b3      	cmp	r3, r6
 802a018:	daf5      	bge.n	802a006 <_vfprintf_r+0xa2e>
 802a01a:	1af6      	subs	r6, r6, r3
 802a01c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a01e:	785b      	ldrb	r3, [r3, #1]
 802a020:	b133      	cbz	r3, 802a030 <_vfprintf_r+0xa58>
 802a022:	9b08      	ldr	r3, [sp, #32]
 802a024:	3301      	adds	r3, #1
 802a026:	9308      	str	r3, [sp, #32]
 802a028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a02a:	3301      	adds	r3, #1
 802a02c:	9309      	str	r3, [sp, #36]	@ 0x24
 802a02e:	e7e6      	b.n	8029ffe <_vfprintf_r+0xa26>
 802a030:	3701      	adds	r7, #1
 802a032:	e7e4      	b.n	8029ffe <_vfprintf_r+0xa26>
 802a034:	9f08      	ldr	r7, [sp, #32]
 802a036:	e66a      	b.n	8029d0e <_vfprintf_r+0x736>
 802a038:	232d      	movs	r3, #45	@ 0x2d
 802a03a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a03e:	e66a      	b.n	8029d16 <_vfprintf_r+0x73e>
 802a040:	06af      	lsls	r7, r5, #26
 802a042:	d507      	bpl.n	802a054 <_vfprintf_r+0xa7c>
 802a044:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a046:	6833      	ldr	r3, [r6, #0]
 802a048:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a04a:	17d2      	asrs	r2, r2, #31
 802a04c:	e9c3 1200 	strd	r1, r2, [r3]
 802a050:	3604      	adds	r6, #4
 802a052:	e734      	b.n	8029ebe <_vfprintf_r+0x8e6>
 802a054:	06e8      	lsls	r0, r5, #27
 802a056:	d503      	bpl.n	802a060 <_vfprintf_r+0xa88>
 802a058:	6833      	ldr	r3, [r6, #0]
 802a05a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a05c:	601a      	str	r2, [r3, #0]
 802a05e:	e7f7      	b.n	802a050 <_vfprintf_r+0xa78>
 802a060:	0669      	lsls	r1, r5, #25
 802a062:	d503      	bpl.n	802a06c <_vfprintf_r+0xa94>
 802a064:	6833      	ldr	r3, [r6, #0]
 802a066:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a068:	801a      	strh	r2, [r3, #0]
 802a06a:	e7f1      	b.n	802a050 <_vfprintf_r+0xa78>
 802a06c:	05aa      	lsls	r2, r5, #22
 802a06e:	d5f3      	bpl.n	802a058 <_vfprintf_r+0xa80>
 802a070:	6833      	ldr	r3, [r6, #0]
 802a072:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a074:	701a      	strb	r2, [r3, #0]
 802a076:	e7eb      	b.n	802a050 <_vfprintf_r+0xa78>
 802a078:	f045 0510 	orr.w	r5, r5, #16
 802a07c:	f015 0320 	ands.w	r3, r5, #32
 802a080:	d020      	beq.n	802a0c4 <_vfprintf_r+0xaec>
 802a082:	3607      	adds	r6, #7
 802a084:	f026 0307 	bic.w	r3, r6, #7
 802a088:	461a      	mov	r2, r3
 802a08a:	685f      	ldr	r7, [r3, #4]
 802a08c:	f852 6b08 	ldr.w	r6, [r2], #8
 802a090:	9207      	str	r2, [sp, #28]
 802a092:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a096:	2300      	movs	r3, #0
 802a098:	2200      	movs	r2, #0
 802a09a:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a09e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a0a2:	f000 8491 	beq.w	802a9c8 <_vfprintf_r+0x13f0>
 802a0a6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802a0aa:	9208      	str	r2, [sp, #32]
 802a0ac:	ea56 0207 	orrs.w	r2, r6, r7
 802a0b0:	f040 848f 	bne.w	802a9d2 <_vfprintf_r+0x13fa>
 802a0b4:	f1b9 0f00 	cmp.w	r9, #0
 802a0b8:	f000 80db 	beq.w	802a272 <_vfprintf_r+0xc9a>
 802a0bc:	2b01      	cmp	r3, #1
 802a0be:	f040 848b 	bne.w	802a9d8 <_vfprintf_r+0x1400>
 802a0c2:	e083      	b.n	802a1cc <_vfprintf_r+0xbf4>
 802a0c4:	4632      	mov	r2, r6
 802a0c6:	f015 0710 	ands.w	r7, r5, #16
 802a0ca:	f852 6b04 	ldr.w	r6, [r2], #4
 802a0ce:	9207      	str	r2, [sp, #28]
 802a0d0:	d001      	beq.n	802a0d6 <_vfprintf_r+0xafe>
 802a0d2:	461f      	mov	r7, r3
 802a0d4:	e7dd      	b.n	802a092 <_vfprintf_r+0xaba>
 802a0d6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a0da:	d001      	beq.n	802a0e0 <_vfprintf_r+0xb08>
 802a0dc:	b2b6      	uxth	r6, r6
 802a0de:	e7d8      	b.n	802a092 <_vfprintf_r+0xaba>
 802a0e0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a0e4:	d0d5      	beq.n	802a092 <_vfprintf_r+0xaba>
 802a0e6:	b2f6      	uxtb	r6, r6
 802a0e8:	e7f3      	b.n	802a0d2 <_vfprintf_r+0xafa>
 802a0ea:	4633      	mov	r3, r6
 802a0ec:	2278      	movs	r2, #120	@ 0x78
 802a0ee:	f853 6b04 	ldr.w	r6, [r3], #4
 802a0f2:	9307      	str	r3, [sp, #28]
 802a0f4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802a0f8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802a0fc:	4b93      	ldr	r3, [pc, #588]	@ (802a34c <_vfprintf_r+0xd74>)
 802a0fe:	9319      	str	r3, [sp, #100]	@ 0x64
 802a100:	2700      	movs	r7, #0
 802a102:	f045 0502 	orr.w	r5, r5, #2
 802a106:	2302      	movs	r3, #2
 802a108:	9206      	str	r2, [sp, #24]
 802a10a:	e7c5      	b.n	802a098 <_vfprintf_r+0xac0>
 802a10c:	4633      	mov	r3, r6
 802a10e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802a112:	f853 8b04 	ldr.w	r8, [r3], #4
 802a116:	9307      	str	r3, [sp, #28]
 802a118:	f04f 0600 	mov.w	r6, #0
 802a11c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802a120:	d00f      	beq.n	802a142 <_vfprintf_r+0xb6a>
 802a122:	464a      	mov	r2, r9
 802a124:	4631      	mov	r1, r6
 802a126:	4640      	mov	r0, r8
 802a128:	f7e6 f86a 	bl	8010200 <memchr>
 802a12c:	4682      	mov	sl, r0
 802a12e:	2800      	cmp	r0, #0
 802a130:	f43f ac7a 	beq.w	8029a28 <_vfprintf_r+0x450>
 802a134:	eba0 0908 	sub.w	r9, r0, r8
 802a138:	46b2      	mov	sl, r6
 802a13a:	9610      	str	r6, [sp, #64]	@ 0x40
 802a13c:	4637      	mov	r7, r6
 802a13e:	9608      	str	r6, [sp, #32]
 802a140:	e5ec      	b.n	8029d1c <_vfprintf_r+0x744>
 802a142:	4640      	mov	r0, r8
 802a144:	f7e6 f8ac 	bl	80102a0 <strlen>
 802a148:	46b2      	mov	sl, r6
 802a14a:	4681      	mov	r9, r0
 802a14c:	e46c      	b.n	8029a28 <_vfprintf_r+0x450>
 802a14e:	f045 0510 	orr.w	r5, r5, #16
 802a152:	f015 0320 	ands.w	r3, r5, #32
 802a156:	d009      	beq.n	802a16c <_vfprintf_r+0xb94>
 802a158:	3607      	adds	r6, #7
 802a15a:	f026 0307 	bic.w	r3, r6, #7
 802a15e:	461a      	mov	r2, r3
 802a160:	685f      	ldr	r7, [r3, #4]
 802a162:	f852 6b08 	ldr.w	r6, [r2], #8
 802a166:	9207      	str	r2, [sp, #28]
 802a168:	2301      	movs	r3, #1
 802a16a:	e795      	b.n	802a098 <_vfprintf_r+0xac0>
 802a16c:	4632      	mov	r2, r6
 802a16e:	f015 0710 	ands.w	r7, r5, #16
 802a172:	f852 6b04 	ldr.w	r6, [r2], #4
 802a176:	9207      	str	r2, [sp, #28]
 802a178:	d001      	beq.n	802a17e <_vfprintf_r+0xba6>
 802a17a:	461f      	mov	r7, r3
 802a17c:	e7f4      	b.n	802a168 <_vfprintf_r+0xb90>
 802a17e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a182:	d001      	beq.n	802a188 <_vfprintf_r+0xbb0>
 802a184:	b2b6      	uxth	r6, r6
 802a186:	e7ef      	b.n	802a168 <_vfprintf_r+0xb90>
 802a188:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a18c:	d0ec      	beq.n	802a168 <_vfprintf_r+0xb90>
 802a18e:	b2f6      	uxtb	r6, r6
 802a190:	e7f3      	b.n	802a17a <_vfprintf_r+0xba2>
 802a192:	4b6f      	ldr	r3, [pc, #444]	@ (802a350 <_vfprintf_r+0xd78>)
 802a194:	f7ff bb33 	b.w	80297fe <_vfprintf_r+0x226>
 802a198:	4632      	mov	r2, r6
 802a19a:	f015 0710 	ands.w	r7, r5, #16
 802a19e:	f852 6b04 	ldr.w	r6, [r2], #4
 802a1a2:	9207      	str	r2, [sp, #28]
 802a1a4:	d002      	beq.n	802a1ac <_vfprintf_r+0xbd4>
 802a1a6:	461f      	mov	r7, r3
 802a1a8:	f7ff bb36 	b.w	8029818 <_vfprintf_r+0x240>
 802a1ac:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802a1b0:	d002      	beq.n	802a1b8 <_vfprintf_r+0xbe0>
 802a1b2:	b2b6      	uxth	r6, r6
 802a1b4:	f7ff bb30 	b.w	8029818 <_vfprintf_r+0x240>
 802a1b8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802a1bc:	f43f ab2c 	beq.w	8029818 <_vfprintf_r+0x240>
 802a1c0:	b2f6      	uxtb	r6, r6
 802a1c2:	e7f0      	b.n	802a1a6 <_vfprintf_r+0xbce>
 802a1c4:	2e0a      	cmp	r6, #10
 802a1c6:	f177 0300 	sbcs.w	r3, r7, #0
 802a1ca:	d207      	bcs.n	802a1dc <_vfprintf_r+0xc04>
 802a1cc:	3630      	adds	r6, #48	@ 0x30
 802a1ce:	b2f6      	uxtb	r6, r6
 802a1d0:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802a1d4:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 802a1d8:	f000 bc1a 	b.w	802aa10 <_vfprintf_r+0x1438>
 802a1dc:	2300      	movs	r3, #0
 802a1de:	9304      	str	r3, [sp, #16]
 802a1e0:	9b08      	ldr	r3, [sp, #32]
 802a1e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802a1e6:	ad52      	add	r5, sp, #328	@ 0x148
 802a1e8:	9310      	str	r3, [sp, #64]	@ 0x40
 802a1ea:	220a      	movs	r2, #10
 802a1ec:	2300      	movs	r3, #0
 802a1ee:	4630      	mov	r0, r6
 802a1f0:	4639      	mov	r1, r7
 802a1f2:	f7e6 fdb1 	bl	8010d58 <__aeabi_uldivmod>
 802a1f6:	9b04      	ldr	r3, [sp, #16]
 802a1f8:	9011      	str	r0, [sp, #68]	@ 0x44
 802a1fa:	3301      	adds	r3, #1
 802a1fc:	9304      	str	r3, [sp, #16]
 802a1fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a200:	3230      	adds	r2, #48	@ 0x30
 802a202:	468a      	mov	sl, r1
 802a204:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 802a208:	f805 2c01 	strb.w	r2, [r5, #-1]
 802a20c:	b1d3      	cbz	r3, 802a244 <_vfprintf_r+0xc6c>
 802a20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a210:	9a04      	ldr	r2, [sp, #16]
 802a212:	781b      	ldrb	r3, [r3, #0]
 802a214:	429a      	cmp	r2, r3
 802a216:	d115      	bne.n	802a244 <_vfprintf_r+0xc6c>
 802a218:	2aff      	cmp	r2, #255	@ 0xff
 802a21a:	d013      	beq.n	802a244 <_vfprintf_r+0xc6c>
 802a21c:	2e0a      	cmp	r6, #10
 802a21e:	f177 0300 	sbcs.w	r3, r7, #0
 802a222:	d30f      	bcc.n	802a244 <_vfprintf_r+0xc6c>
 802a224:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a226:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802a228:	eba8 0803 	sub.w	r8, r8, r3
 802a22c:	461a      	mov	r2, r3
 802a22e:	4640      	mov	r0, r8
 802a230:	f001 ff25 	bl	802c07e <strncpy>
 802a234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a236:	785b      	ldrb	r3, [r3, #1]
 802a238:	b11b      	cbz	r3, 802a242 <_vfprintf_r+0xc6a>
 802a23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a23c:	3301      	adds	r3, #1
 802a23e:	9309      	str	r3, [sp, #36]	@ 0x24
 802a240:	2300      	movs	r3, #0
 802a242:	9304      	str	r3, [sp, #16]
 802a244:	2e0a      	cmp	r6, #10
 802a246:	f177 0700 	sbcs.w	r7, r7, #0
 802a24a:	f0c0 83e1 	bcc.w	802aa10 <_vfprintf_r+0x1438>
 802a24e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802a250:	4657      	mov	r7, sl
 802a252:	4645      	mov	r5, r8
 802a254:	e7c9      	b.n	802a1ea <_vfprintf_r+0xc12>
 802a256:	f006 030f 	and.w	r3, r6, #15
 802a25a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802a25c:	0936      	lsrs	r6, r6, #4
 802a25e:	5cd3      	ldrb	r3, [r2, r3]
 802a260:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802a264:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802a268:	093f      	lsrs	r7, r7, #4
 802a26a:	ea56 0307 	orrs.w	r3, r6, r7
 802a26e:	d1f2      	bne.n	802a256 <_vfprintf_r+0xc7e>
 802a270:	e3ce      	b.n	802aa10 <_vfprintf_r+0x1438>
 802a272:	b91b      	cbnz	r3, 802a27c <_vfprintf_r+0xca4>
 802a274:	07ed      	lsls	r5, r5, #31
 802a276:	d501      	bpl.n	802a27c <_vfprintf_r+0xca4>
 802a278:	2630      	movs	r6, #48	@ 0x30
 802a27a:	e7a9      	b.n	802a1d0 <_vfprintf_r+0xbf8>
 802a27c:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802a280:	e3c6      	b.n	802aa10 <_vfprintf_r+0x1438>
 802a282:	9b06      	ldr	r3, [sp, #24]
 802a284:	2b00      	cmp	r3, #0
 802a286:	f000 8390 	beq.w	802a9aa <_vfprintf_r+0x13d2>
 802a28a:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a28e:	2300      	movs	r3, #0
 802a290:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a294:	9607      	str	r6, [sp, #28]
 802a296:	f7ff bb5c 	b.w	8029952 <_vfprintf_r+0x37a>
 802a29a:	2010      	movs	r0, #16
 802a29c:	4403      	add	r3, r0
 802a29e:	2a07      	cmp	r2, #7
 802a2a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a2a4:	6060      	str	r0, [r4, #4]
 802a2a6:	dd08      	ble.n	802a2ba <_vfprintf_r+0xce2>
 802a2a8:	9803      	ldr	r0, [sp, #12]
 802a2aa:	aa26      	add	r2, sp, #152	@ 0x98
 802a2ac:	4659      	mov	r1, fp
 802a2ae:	f000 fbff 	bl	802aab0 <__sprint_r>
 802a2b2:	2800      	cmp	r0, #0
 802a2b4:	f040 8357 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a2b8:	a929      	add	r1, sp, #164	@ 0xa4
 802a2ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a2bc:	3b10      	subs	r3, #16
 802a2be:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a2c0:	460c      	mov	r4, r1
 802a2c2:	e547      	b.n	8029d54 <_vfprintf_r+0x77c>
 802a2c4:	460c      	mov	r4, r1
 802a2c6:	e562      	b.n	8029d8e <_vfprintf_r+0x7b6>
 802a2c8:	9803      	ldr	r0, [sp, #12]
 802a2ca:	aa26      	add	r2, sp, #152	@ 0x98
 802a2cc:	4659      	mov	r1, fp
 802a2ce:	f000 fbef 	bl	802aab0 <__sprint_r>
 802a2d2:	2800      	cmp	r0, #0
 802a2d4:	f040 8347 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a2d8:	ac29      	add	r4, sp, #164	@ 0xa4
 802a2da:	e56a      	b.n	8029db2 <_vfprintf_r+0x7da>
 802a2dc:	9803      	ldr	r0, [sp, #12]
 802a2de:	aa26      	add	r2, sp, #152	@ 0x98
 802a2e0:	4659      	mov	r1, fp
 802a2e2:	f000 fbe5 	bl	802aab0 <__sprint_r>
 802a2e6:	2800      	cmp	r0, #0
 802a2e8:	f040 833d 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a2ec:	ac29      	add	r4, sp, #164	@ 0xa4
 802a2ee:	e570      	b.n	8029dd2 <_vfprintf_r+0x7fa>
 802a2f0:	2010      	movs	r0, #16
 802a2f2:	4403      	add	r3, r0
 802a2f4:	2a07      	cmp	r2, #7
 802a2f6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a2fa:	6060      	str	r0, [r4, #4]
 802a2fc:	dd08      	ble.n	802a310 <_vfprintf_r+0xd38>
 802a2fe:	9803      	ldr	r0, [sp, #12]
 802a300:	aa26      	add	r2, sp, #152	@ 0x98
 802a302:	4659      	mov	r1, fp
 802a304:	f000 fbd4 	bl	802aab0 <__sprint_r>
 802a308:	2800      	cmp	r0, #0
 802a30a:	f040 832c 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a30e:	a929      	add	r1, sp, #164	@ 0xa4
 802a310:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a312:	3b10      	subs	r3, #16
 802a314:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a316:	460c      	mov	r4, r1
 802a318:	e564      	b.n	8029de4 <_vfprintf_r+0x80c>
 802a31a:	460c      	mov	r4, r1
 802a31c:	e57f      	b.n	8029e1e <_vfprintf_r+0x846>
 802a31e:	2010      	movs	r0, #16
 802a320:	4403      	add	r3, r0
 802a322:	2a07      	cmp	r2, #7
 802a324:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a328:	6060      	str	r0, [r4, #4]
 802a32a:	dd08      	ble.n	802a33e <_vfprintf_r+0xd66>
 802a32c:	9803      	ldr	r0, [sp, #12]
 802a32e:	aa26      	add	r2, sp, #152	@ 0x98
 802a330:	4659      	mov	r1, fp
 802a332:	f000 fbbd 	bl	802aab0 <__sprint_r>
 802a336:	2800      	cmp	r0, #0
 802a338:	f040 8315 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a33c:	a929      	add	r1, sp, #164	@ 0xa4
 802a33e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a340:	3b10      	subs	r3, #16
 802a342:	9310      	str	r3, [sp, #64]	@ 0x40
 802a344:	460c      	mov	r4, r1
 802a346:	e570      	b.n	8029e2a <_vfprintf_r+0x852>
 802a348:	460c      	mov	r4, r1
 802a34a:	e58b      	b.n	8029e64 <_vfprintf_r+0x88c>
 802a34c:	0803ad23 	.word	0x0803ad23
 802a350:	0803ad34 	.word	0x0803ad34
 802a354:	9b06      	ldr	r3, [sp, #24]
 802a356:	2b65      	cmp	r3, #101	@ 0x65
 802a358:	f340 8245 	ble.w	802a7e6 <_vfprintf_r+0x120e>
 802a35c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a360:	2200      	movs	r2, #0
 802a362:	2300      	movs	r3, #0
 802a364:	f7e6 fbc8 	bl	8010af8 <__aeabi_dcmpeq>
 802a368:	2800      	cmp	r0, #0
 802a36a:	d06a      	beq.n	802a442 <_vfprintf_r+0xe6a>
 802a36c:	4b73      	ldr	r3, [pc, #460]	@ (802a53c <_vfprintf_r+0xf64>)
 802a36e:	6023      	str	r3, [r4, #0]
 802a370:	2301      	movs	r3, #1
 802a372:	6063      	str	r3, [r4, #4]
 802a374:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a376:	3301      	adds	r3, #1
 802a378:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a37a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a37c:	3301      	adds	r3, #1
 802a37e:	2b07      	cmp	r3, #7
 802a380:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a382:	dc37      	bgt.n	802a3f4 <_vfprintf_r+0xe1c>
 802a384:	3408      	adds	r4, #8
 802a386:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a388:	9a04      	ldr	r2, [sp, #16]
 802a38a:	4293      	cmp	r3, r2
 802a38c:	db02      	blt.n	802a394 <_vfprintf_r+0xdbc>
 802a38e:	07e9      	lsls	r1, r5, #31
 802a390:	f57f ad78 	bpl.w	8029e84 <_vfprintf_r+0x8ac>
 802a394:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a396:	6023      	str	r3, [r4, #0]
 802a398:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a39a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a39c:	6063      	str	r3, [r4, #4]
 802a39e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a3a0:	4413      	add	r3, r2
 802a3a2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a3a4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a3a6:	3301      	adds	r3, #1
 802a3a8:	2b07      	cmp	r3, #7
 802a3aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a3ac:	dc2c      	bgt.n	802a408 <_vfprintf_r+0xe30>
 802a3ae:	3408      	adds	r4, #8
 802a3b0:	9b04      	ldr	r3, [sp, #16]
 802a3b2:	1e5e      	subs	r6, r3, #1
 802a3b4:	2e00      	cmp	r6, #0
 802a3b6:	f77f ad65 	ble.w	8029e84 <_vfprintf_r+0x8ac>
 802a3ba:	4f61      	ldr	r7, [pc, #388]	@ (802a540 <_vfprintf_r+0xf68>)
 802a3bc:	f04f 0810 	mov.w	r8, #16
 802a3c0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a3c4:	2e10      	cmp	r6, #16
 802a3c6:	f103 0301 	add.w	r3, r3, #1
 802a3ca:	f104 0108 	add.w	r1, r4, #8
 802a3ce:	6027      	str	r7, [r4, #0]
 802a3d0:	dc24      	bgt.n	802a41c <_vfprintf_r+0xe44>
 802a3d2:	6066      	str	r6, [r4, #4]
 802a3d4:	2b07      	cmp	r3, #7
 802a3d6:	4416      	add	r6, r2
 802a3d8:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802a3dc:	f340 82a2 	ble.w	802a924 <_vfprintf_r+0x134c>
 802a3e0:	9803      	ldr	r0, [sp, #12]
 802a3e2:	aa26      	add	r2, sp, #152	@ 0x98
 802a3e4:	4659      	mov	r1, fp
 802a3e6:	f000 fb63 	bl	802aab0 <__sprint_r>
 802a3ea:	2800      	cmp	r0, #0
 802a3ec:	f040 82bb 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a3f0:	ac29      	add	r4, sp, #164	@ 0xa4
 802a3f2:	e547      	b.n	8029e84 <_vfprintf_r+0x8ac>
 802a3f4:	9803      	ldr	r0, [sp, #12]
 802a3f6:	aa26      	add	r2, sp, #152	@ 0x98
 802a3f8:	4659      	mov	r1, fp
 802a3fa:	f000 fb59 	bl	802aab0 <__sprint_r>
 802a3fe:	2800      	cmp	r0, #0
 802a400:	f040 82b1 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a404:	ac29      	add	r4, sp, #164	@ 0xa4
 802a406:	e7be      	b.n	802a386 <_vfprintf_r+0xdae>
 802a408:	9803      	ldr	r0, [sp, #12]
 802a40a:	aa26      	add	r2, sp, #152	@ 0x98
 802a40c:	4659      	mov	r1, fp
 802a40e:	f000 fb4f 	bl	802aab0 <__sprint_r>
 802a412:	2800      	cmp	r0, #0
 802a414:	f040 82a7 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a418:	ac29      	add	r4, sp, #164	@ 0xa4
 802a41a:	e7c9      	b.n	802a3b0 <_vfprintf_r+0xdd8>
 802a41c:	3210      	adds	r2, #16
 802a41e:	2b07      	cmp	r3, #7
 802a420:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a424:	f8c4 8004 	str.w	r8, [r4, #4]
 802a428:	dd08      	ble.n	802a43c <_vfprintf_r+0xe64>
 802a42a:	9803      	ldr	r0, [sp, #12]
 802a42c:	aa26      	add	r2, sp, #152	@ 0x98
 802a42e:	4659      	mov	r1, fp
 802a430:	f000 fb3e 	bl	802aab0 <__sprint_r>
 802a434:	2800      	cmp	r0, #0
 802a436:	f040 8296 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a43a:	a929      	add	r1, sp, #164	@ 0xa4
 802a43c:	3e10      	subs	r6, #16
 802a43e:	460c      	mov	r4, r1
 802a440:	e7be      	b.n	802a3c0 <_vfprintf_r+0xde8>
 802a442:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a444:	2b00      	cmp	r3, #0
 802a446:	dc7d      	bgt.n	802a544 <_vfprintf_r+0xf6c>
 802a448:	4b3c      	ldr	r3, [pc, #240]	@ (802a53c <_vfprintf_r+0xf64>)
 802a44a:	6023      	str	r3, [r4, #0]
 802a44c:	2301      	movs	r3, #1
 802a44e:	6063      	str	r3, [r4, #4]
 802a450:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a452:	3301      	adds	r3, #1
 802a454:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a456:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a458:	3301      	adds	r3, #1
 802a45a:	2b07      	cmp	r3, #7
 802a45c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a45e:	dc46      	bgt.n	802a4ee <_vfprintf_r+0xf16>
 802a460:	3408      	adds	r4, #8
 802a462:	9904      	ldr	r1, [sp, #16]
 802a464:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a466:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802a468:	430b      	orrs	r3, r1
 802a46a:	f005 0101 	and.w	r1, r5, #1
 802a46e:	430b      	orrs	r3, r1
 802a470:	f43f ad08 	beq.w	8029e84 <_vfprintf_r+0x8ac>
 802a474:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a476:	6023      	str	r3, [r4, #0]
 802a478:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a47a:	6063      	str	r3, [r4, #4]
 802a47c:	441a      	add	r2, r3
 802a47e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a480:	9228      	str	r2, [sp, #160]	@ 0xa0
 802a482:	3301      	adds	r3, #1
 802a484:	2b07      	cmp	r3, #7
 802a486:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a488:	dc3b      	bgt.n	802a502 <_vfprintf_r+0xf2a>
 802a48a:	f104 0308 	add.w	r3, r4, #8
 802a48e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a490:	2e00      	cmp	r6, #0
 802a492:	da1b      	bge.n	802a4cc <_vfprintf_r+0xef4>
 802a494:	4f2a      	ldr	r7, [pc, #168]	@ (802a540 <_vfprintf_r+0xf68>)
 802a496:	4276      	negs	r6, r6
 802a498:	461a      	mov	r2, r3
 802a49a:	2410      	movs	r4, #16
 802a49c:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802a4a0:	2e10      	cmp	r6, #16
 802a4a2:	f101 0101 	add.w	r1, r1, #1
 802a4a6:	f103 0308 	add.w	r3, r3, #8
 802a4aa:	6017      	str	r7, [r2, #0]
 802a4ac:	dc33      	bgt.n	802a516 <_vfprintf_r+0xf3e>
 802a4ae:	6056      	str	r6, [r2, #4]
 802a4b0:	2907      	cmp	r1, #7
 802a4b2:	4406      	add	r6, r0
 802a4b4:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802a4b8:	dd08      	ble.n	802a4cc <_vfprintf_r+0xef4>
 802a4ba:	9803      	ldr	r0, [sp, #12]
 802a4bc:	aa26      	add	r2, sp, #152	@ 0x98
 802a4be:	4659      	mov	r1, fp
 802a4c0:	f000 faf6 	bl	802aab0 <__sprint_r>
 802a4c4:	2800      	cmp	r0, #0
 802a4c6:	f040 824e 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a4ca:	ab29      	add	r3, sp, #164	@ 0xa4
 802a4cc:	9a04      	ldr	r2, [sp, #16]
 802a4ce:	9904      	ldr	r1, [sp, #16]
 802a4d0:	605a      	str	r2, [r3, #4]
 802a4d2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802a4d4:	f8c3 8000 	str.w	r8, [r3]
 802a4d8:	440a      	add	r2, r1
 802a4da:	9228      	str	r2, [sp, #160]	@ 0xa0
 802a4dc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802a4de:	3201      	adds	r2, #1
 802a4e0:	2a07      	cmp	r2, #7
 802a4e2:	9227      	str	r2, [sp, #156]	@ 0x9c
 802a4e4:	f73f af7c 	bgt.w	802a3e0 <_vfprintf_r+0xe08>
 802a4e8:	f103 0408 	add.w	r4, r3, #8
 802a4ec:	e4ca      	b.n	8029e84 <_vfprintf_r+0x8ac>
 802a4ee:	9803      	ldr	r0, [sp, #12]
 802a4f0:	aa26      	add	r2, sp, #152	@ 0x98
 802a4f2:	4659      	mov	r1, fp
 802a4f4:	f000 fadc 	bl	802aab0 <__sprint_r>
 802a4f8:	2800      	cmp	r0, #0
 802a4fa:	f040 8234 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a4fe:	ac29      	add	r4, sp, #164	@ 0xa4
 802a500:	e7af      	b.n	802a462 <_vfprintf_r+0xe8a>
 802a502:	9803      	ldr	r0, [sp, #12]
 802a504:	aa26      	add	r2, sp, #152	@ 0x98
 802a506:	4659      	mov	r1, fp
 802a508:	f000 fad2 	bl	802aab0 <__sprint_r>
 802a50c:	2800      	cmp	r0, #0
 802a50e:	f040 822a 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a512:	ab29      	add	r3, sp, #164	@ 0xa4
 802a514:	e7bb      	b.n	802a48e <_vfprintf_r+0xeb6>
 802a516:	3010      	adds	r0, #16
 802a518:	2907      	cmp	r1, #7
 802a51a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802a51e:	6054      	str	r4, [r2, #4]
 802a520:	dd08      	ble.n	802a534 <_vfprintf_r+0xf5c>
 802a522:	9803      	ldr	r0, [sp, #12]
 802a524:	aa26      	add	r2, sp, #152	@ 0x98
 802a526:	4659      	mov	r1, fp
 802a528:	f000 fac2 	bl	802aab0 <__sprint_r>
 802a52c:	2800      	cmp	r0, #0
 802a52e:	f040 821a 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a532:	ab29      	add	r3, sp, #164	@ 0xa4
 802a534:	3e10      	subs	r6, #16
 802a536:	461a      	mov	r2, r3
 802a538:	e7b0      	b.n	802a49c <_vfprintf_r+0xec4>
 802a53a:	bf00      	nop
 802a53c:	0803ad45 	.word	0x0803ad45
 802a540:	0803ad47 	.word	0x0803ad47
 802a544:	9b04      	ldr	r3, [sp, #16]
 802a546:	4443      	add	r3, r8
 802a548:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a54a:	9b04      	ldr	r3, [sp, #16]
 802a54c:	42b3      	cmp	r3, r6
 802a54e:	bfa8      	it	ge
 802a550:	4633      	movge	r3, r6
 802a552:	2b00      	cmp	r3, #0
 802a554:	4699      	mov	r9, r3
 802a556:	dd0b      	ble.n	802a570 <_vfprintf_r+0xf98>
 802a558:	e9c4 8300 	strd	r8, r3, [r4]
 802a55c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a55e:	444b      	add	r3, r9
 802a560:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a562:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a564:	3301      	adds	r3, #1
 802a566:	2b07      	cmp	r3, #7
 802a568:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a56a:	f300 8089 	bgt.w	802a680 <_vfprintf_r+0x10a8>
 802a56e:	3408      	adds	r4, #8
 802a570:	f1b9 0f00 	cmp.w	r9, #0
 802a574:	bfac      	ite	ge
 802a576:	eba6 0309 	subge.w	r3, r6, r9
 802a57a:	4633      	movlt	r3, r6
 802a57c:	2b00      	cmp	r3, #0
 802a57e:	9306      	str	r3, [sp, #24]
 802a580:	dd1c      	ble.n	802a5bc <_vfprintf_r+0xfe4>
 802a582:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 802a8e8 <_vfprintf_r+0x1310>
 802a586:	9806      	ldr	r0, [sp, #24]
 802a588:	f8c4 9000 	str.w	r9, [r4]
 802a58c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a590:	2810      	cmp	r0, #16
 802a592:	f102 0201 	add.w	r2, r2, #1
 802a596:	f104 0108 	add.w	r1, r4, #8
 802a59a:	dc7b      	bgt.n	802a694 <_vfprintf_r+0x10bc>
 802a59c:	4403      	add	r3, r0
 802a59e:	2a07      	cmp	r2, #7
 802a5a0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a5a4:	6060      	str	r0, [r4, #4]
 802a5a6:	f340 808a 	ble.w	802a6be <_vfprintf_r+0x10e6>
 802a5aa:	9803      	ldr	r0, [sp, #12]
 802a5ac:	aa26      	add	r2, sp, #152	@ 0x98
 802a5ae:	4659      	mov	r1, fp
 802a5b0:	f000 fa7e 	bl	802aab0 <__sprint_r>
 802a5b4:	2800      	cmp	r0, #0
 802a5b6:	f040 81d6 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a5ba:	ac29      	add	r4, sp, #164	@ 0xa4
 802a5bc:	056a      	lsls	r2, r5, #21
 802a5be:	44b0      	add	r8, r6
 802a5c0:	d508      	bpl.n	802a5d4 <_vfprintf_r+0xffc>
 802a5c2:	9b08      	ldr	r3, [sp, #32]
 802a5c4:	2b00      	cmp	r3, #0
 802a5c6:	d17c      	bne.n	802a6c2 <_vfprintf_r+0x10ea>
 802a5c8:	2f00      	cmp	r7, #0
 802a5ca:	d17c      	bne.n	802a6c6 <_vfprintf_r+0x10ee>
 802a5cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a5ce:	4598      	cmp	r8, r3
 802a5d0:	bf28      	it	cs
 802a5d2:	4698      	movcs	r8, r3
 802a5d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a5d6:	9a04      	ldr	r2, [sp, #16]
 802a5d8:	4293      	cmp	r3, r2
 802a5da:	db01      	blt.n	802a5e0 <_vfprintf_r+0x1008>
 802a5dc:	07eb      	lsls	r3, r5, #31
 802a5de:	d50e      	bpl.n	802a5fe <_vfprintf_r+0x1026>
 802a5e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a5e2:	6023      	str	r3, [r4, #0]
 802a5e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a5e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a5e8:	6063      	str	r3, [r4, #4]
 802a5ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a5ec:	4413      	add	r3, r2
 802a5ee:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a5f0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a5f2:	3301      	adds	r3, #1
 802a5f4:	2b07      	cmp	r3, #7
 802a5f6:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a5f8:	f300 80e1 	bgt.w	802a7be <_vfprintf_r+0x11e6>
 802a5fc:	3408      	adds	r4, #8
 802a5fe:	9b04      	ldr	r3, [sp, #16]
 802a600:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802a602:	1bdf      	subs	r7, r3, r7
 802a604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a606:	eba3 0308 	sub.w	r3, r3, r8
 802a60a:	429f      	cmp	r7, r3
 802a60c:	bfa8      	it	ge
 802a60e:	461f      	movge	r7, r3
 802a610:	2f00      	cmp	r7, #0
 802a612:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a614:	dd0a      	ble.n	802a62c <_vfprintf_r+0x1054>
 802a616:	443b      	add	r3, r7
 802a618:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a61a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a61c:	3301      	adds	r3, #1
 802a61e:	2b07      	cmp	r3, #7
 802a620:	e9c4 8700 	strd	r8, r7, [r4]
 802a624:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a626:	f300 80d4 	bgt.w	802a7d2 <_vfprintf_r+0x11fa>
 802a62a:	3408      	adds	r4, #8
 802a62c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a62e:	9b04      	ldr	r3, [sp, #16]
 802a630:	2f00      	cmp	r7, #0
 802a632:	eba3 0606 	sub.w	r6, r3, r6
 802a636:	bfa8      	it	ge
 802a638:	1bf6      	subge	r6, r6, r7
 802a63a:	2e00      	cmp	r6, #0
 802a63c:	f77f ac22 	ble.w	8029e84 <_vfprintf_r+0x8ac>
 802a640:	4fa9      	ldr	r7, [pc, #676]	@ (802a8e8 <_vfprintf_r+0x1310>)
 802a642:	f04f 0810 	mov.w	r8, #16
 802a646:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a64a:	2e10      	cmp	r6, #16
 802a64c:	f103 0301 	add.w	r3, r3, #1
 802a650:	f104 0108 	add.w	r1, r4, #8
 802a654:	6027      	str	r7, [r4, #0]
 802a656:	f77f aebc 	ble.w	802a3d2 <_vfprintf_r+0xdfa>
 802a65a:	3210      	adds	r2, #16
 802a65c:	2b07      	cmp	r3, #7
 802a65e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a662:	f8c4 8004 	str.w	r8, [r4, #4]
 802a666:	dd08      	ble.n	802a67a <_vfprintf_r+0x10a2>
 802a668:	9803      	ldr	r0, [sp, #12]
 802a66a:	aa26      	add	r2, sp, #152	@ 0x98
 802a66c:	4659      	mov	r1, fp
 802a66e:	f000 fa1f 	bl	802aab0 <__sprint_r>
 802a672:	2800      	cmp	r0, #0
 802a674:	f040 8177 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a678:	a929      	add	r1, sp, #164	@ 0xa4
 802a67a:	3e10      	subs	r6, #16
 802a67c:	460c      	mov	r4, r1
 802a67e:	e7e2      	b.n	802a646 <_vfprintf_r+0x106e>
 802a680:	9803      	ldr	r0, [sp, #12]
 802a682:	aa26      	add	r2, sp, #152	@ 0x98
 802a684:	4659      	mov	r1, fp
 802a686:	f000 fa13 	bl	802aab0 <__sprint_r>
 802a68a:	2800      	cmp	r0, #0
 802a68c:	f040 816b 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a690:	ac29      	add	r4, sp, #164	@ 0xa4
 802a692:	e76d      	b.n	802a570 <_vfprintf_r+0xf98>
 802a694:	2010      	movs	r0, #16
 802a696:	4403      	add	r3, r0
 802a698:	2a07      	cmp	r2, #7
 802a69a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a69e:	6060      	str	r0, [r4, #4]
 802a6a0:	dd08      	ble.n	802a6b4 <_vfprintf_r+0x10dc>
 802a6a2:	9803      	ldr	r0, [sp, #12]
 802a6a4:	aa26      	add	r2, sp, #152	@ 0x98
 802a6a6:	4659      	mov	r1, fp
 802a6a8:	f000 fa02 	bl	802aab0 <__sprint_r>
 802a6ac:	2800      	cmp	r0, #0
 802a6ae:	f040 815a 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a6b2:	a929      	add	r1, sp, #164	@ 0xa4
 802a6b4:	9b06      	ldr	r3, [sp, #24]
 802a6b6:	3b10      	subs	r3, #16
 802a6b8:	9306      	str	r3, [sp, #24]
 802a6ba:	460c      	mov	r4, r1
 802a6bc:	e763      	b.n	802a586 <_vfprintf_r+0xfae>
 802a6be:	460c      	mov	r4, r1
 802a6c0:	e77c      	b.n	802a5bc <_vfprintf_r+0xfe4>
 802a6c2:	2f00      	cmp	r7, #0
 802a6c4:	d04b      	beq.n	802a75e <_vfprintf_r+0x1186>
 802a6c6:	3f01      	subs	r7, #1
 802a6c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a6ca:	6023      	str	r3, [r4, #0]
 802a6cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a6ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a6d0:	6063      	str	r3, [r4, #4]
 802a6d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a6d4:	4413      	add	r3, r2
 802a6d6:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a6d8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a6da:	3301      	adds	r3, #1
 802a6dc:	2b07      	cmp	r3, #7
 802a6de:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a6e0:	dc44      	bgt.n	802a76c <_vfprintf_r+0x1194>
 802a6e2:	3408      	adds	r4, #8
 802a6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a6e6:	f893 9000 	ldrb.w	r9, [r3]
 802a6ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a6ec:	eba3 0308 	sub.w	r3, r3, r8
 802a6f0:	4599      	cmp	r9, r3
 802a6f2:	bfa8      	it	ge
 802a6f4:	4699      	movge	r9, r3
 802a6f6:	f1b9 0f00 	cmp.w	r9, #0
 802a6fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a6fc:	dd09      	ble.n	802a712 <_vfprintf_r+0x113a>
 802a6fe:	444b      	add	r3, r9
 802a700:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a702:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a704:	3301      	adds	r3, #1
 802a706:	2b07      	cmp	r3, #7
 802a708:	e9c4 8900 	strd	r8, r9, [r4]
 802a70c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a70e:	dc37      	bgt.n	802a780 <_vfprintf_r+0x11a8>
 802a710:	3408      	adds	r4, #8
 802a712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a714:	781e      	ldrb	r6, [r3, #0]
 802a716:	f1b9 0f00 	cmp.w	r9, #0
 802a71a:	bfa8      	it	ge
 802a71c:	eba6 0609 	subge.w	r6, r6, r9
 802a720:	2e00      	cmp	r6, #0
 802a722:	dd18      	ble.n	802a756 <_vfprintf_r+0x117e>
 802a724:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a728:	486f      	ldr	r0, [pc, #444]	@ (802a8e8 <_vfprintf_r+0x1310>)
 802a72a:	6020      	str	r0, [r4, #0]
 802a72c:	2e10      	cmp	r6, #16
 802a72e:	f103 0301 	add.w	r3, r3, #1
 802a732:	f104 0108 	add.w	r1, r4, #8
 802a736:	dc2d      	bgt.n	802a794 <_vfprintf_r+0x11bc>
 802a738:	6066      	str	r6, [r4, #4]
 802a73a:	2b07      	cmp	r3, #7
 802a73c:	4416      	add	r6, r2
 802a73e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802a742:	dd3a      	ble.n	802a7ba <_vfprintf_r+0x11e2>
 802a744:	9803      	ldr	r0, [sp, #12]
 802a746:	aa26      	add	r2, sp, #152	@ 0x98
 802a748:	4659      	mov	r1, fp
 802a74a:	f000 f9b1 	bl	802aab0 <__sprint_r>
 802a74e:	2800      	cmp	r0, #0
 802a750:	f040 8109 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a754:	ac29      	add	r4, sp, #164	@ 0xa4
 802a756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a758:	781b      	ldrb	r3, [r3, #0]
 802a75a:	4498      	add	r8, r3
 802a75c:	e731      	b.n	802a5c2 <_vfprintf_r+0xfea>
 802a75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a760:	3b01      	subs	r3, #1
 802a762:	9309      	str	r3, [sp, #36]	@ 0x24
 802a764:	9b08      	ldr	r3, [sp, #32]
 802a766:	3b01      	subs	r3, #1
 802a768:	9308      	str	r3, [sp, #32]
 802a76a:	e7ad      	b.n	802a6c8 <_vfprintf_r+0x10f0>
 802a76c:	9803      	ldr	r0, [sp, #12]
 802a76e:	aa26      	add	r2, sp, #152	@ 0x98
 802a770:	4659      	mov	r1, fp
 802a772:	f000 f99d 	bl	802aab0 <__sprint_r>
 802a776:	2800      	cmp	r0, #0
 802a778:	f040 80f5 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a77c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a77e:	e7b1      	b.n	802a6e4 <_vfprintf_r+0x110c>
 802a780:	9803      	ldr	r0, [sp, #12]
 802a782:	aa26      	add	r2, sp, #152	@ 0x98
 802a784:	4659      	mov	r1, fp
 802a786:	f000 f993 	bl	802aab0 <__sprint_r>
 802a78a:	2800      	cmp	r0, #0
 802a78c:	f040 80eb 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a790:	ac29      	add	r4, sp, #164	@ 0xa4
 802a792:	e7be      	b.n	802a712 <_vfprintf_r+0x113a>
 802a794:	2010      	movs	r0, #16
 802a796:	4402      	add	r2, r0
 802a798:	2b07      	cmp	r3, #7
 802a79a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a79e:	6060      	str	r0, [r4, #4]
 802a7a0:	dd08      	ble.n	802a7b4 <_vfprintf_r+0x11dc>
 802a7a2:	9803      	ldr	r0, [sp, #12]
 802a7a4:	aa26      	add	r2, sp, #152	@ 0x98
 802a7a6:	4659      	mov	r1, fp
 802a7a8:	f000 f982 	bl	802aab0 <__sprint_r>
 802a7ac:	2800      	cmp	r0, #0
 802a7ae:	f040 80da 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a7b2:	a929      	add	r1, sp, #164	@ 0xa4
 802a7b4:	3e10      	subs	r6, #16
 802a7b6:	460c      	mov	r4, r1
 802a7b8:	e7b4      	b.n	802a724 <_vfprintf_r+0x114c>
 802a7ba:	460c      	mov	r4, r1
 802a7bc:	e7cb      	b.n	802a756 <_vfprintf_r+0x117e>
 802a7be:	9803      	ldr	r0, [sp, #12]
 802a7c0:	aa26      	add	r2, sp, #152	@ 0x98
 802a7c2:	4659      	mov	r1, fp
 802a7c4:	f000 f974 	bl	802aab0 <__sprint_r>
 802a7c8:	2800      	cmp	r0, #0
 802a7ca:	f040 80cc 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a7ce:	ac29      	add	r4, sp, #164	@ 0xa4
 802a7d0:	e715      	b.n	802a5fe <_vfprintf_r+0x1026>
 802a7d2:	9803      	ldr	r0, [sp, #12]
 802a7d4:	aa26      	add	r2, sp, #152	@ 0x98
 802a7d6:	4659      	mov	r1, fp
 802a7d8:	f000 f96a 	bl	802aab0 <__sprint_r>
 802a7dc:	2800      	cmp	r0, #0
 802a7de:	f040 80c2 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a7e2:	ac29      	add	r4, sp, #164	@ 0xa4
 802a7e4:	e722      	b.n	802a62c <_vfprintf_r+0x1054>
 802a7e6:	9904      	ldr	r1, [sp, #16]
 802a7e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a7ea:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802a7ec:	2901      	cmp	r1, #1
 802a7ee:	f103 0301 	add.w	r3, r3, #1
 802a7f2:	f102 0201 	add.w	r2, r2, #1
 802a7f6:	f104 0608 	add.w	r6, r4, #8
 802a7fa:	dc02      	bgt.n	802a802 <_vfprintf_r+0x122a>
 802a7fc:	07ef      	lsls	r7, r5, #31
 802a7fe:	f140 8086 	bpl.w	802a90e <_vfprintf_r+0x1336>
 802a802:	2101      	movs	r1, #1
 802a804:	2a07      	cmp	r2, #7
 802a806:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a80a:	f8c4 8000 	str.w	r8, [r4]
 802a80e:	6061      	str	r1, [r4, #4]
 802a810:	dd08      	ble.n	802a824 <_vfprintf_r+0x124c>
 802a812:	9803      	ldr	r0, [sp, #12]
 802a814:	aa26      	add	r2, sp, #152	@ 0x98
 802a816:	4659      	mov	r1, fp
 802a818:	f000 f94a 	bl	802aab0 <__sprint_r>
 802a81c:	2800      	cmp	r0, #0
 802a81e:	f040 80a2 	bne.w	802a966 <_vfprintf_r+0x138e>
 802a822:	ae29      	add	r6, sp, #164	@ 0xa4
 802a824:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a826:	6033      	str	r3, [r6, #0]
 802a828:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a82a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a82c:	6073      	str	r3, [r6, #4]
 802a82e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a830:	4413      	add	r3, r2
 802a832:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a834:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a836:	3301      	adds	r3, #1
 802a838:	2b07      	cmp	r3, #7
 802a83a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a83c:	dc33      	bgt.n	802a8a6 <_vfprintf_r+0x12ce>
 802a83e:	3608      	adds	r6, #8
 802a840:	9b04      	ldr	r3, [sp, #16]
 802a842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a846:	1e5c      	subs	r4, r3, #1
 802a848:	2200      	movs	r2, #0
 802a84a:	2300      	movs	r3, #0
 802a84c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 802a850:	f7e6 f952 	bl	8010af8 <__aeabi_dcmpeq>
 802a854:	2800      	cmp	r0, #0
 802a856:	d12f      	bne.n	802a8b8 <_vfprintf_r+0x12e0>
 802a858:	f108 0201 	add.w	r2, r8, #1
 802a85c:	e9c6 2400 	strd	r2, r4, [r6]
 802a860:	9a04      	ldr	r2, [sp, #16]
 802a862:	f109 0301 	add.w	r3, r9, #1
 802a866:	3f01      	subs	r7, #1
 802a868:	4417      	add	r7, r2
 802a86a:	2b07      	cmp	r3, #7
 802a86c:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802a870:	dd56      	ble.n	802a920 <_vfprintf_r+0x1348>
 802a872:	9803      	ldr	r0, [sp, #12]
 802a874:	aa26      	add	r2, sp, #152	@ 0x98
 802a876:	4659      	mov	r1, fp
 802a878:	f000 f91a 	bl	802aab0 <__sprint_r>
 802a87c:	2800      	cmp	r0, #0
 802a87e:	d172      	bne.n	802a966 <_vfprintf_r+0x138e>
 802a880:	ae29      	add	r6, sp, #164	@ 0xa4
 802a882:	ab22      	add	r3, sp, #136	@ 0x88
 802a884:	6033      	str	r3, [r6, #0]
 802a886:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a888:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802a88a:	6073      	str	r3, [r6, #4]
 802a88c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a88e:	4413      	add	r3, r2
 802a890:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a892:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a894:	3301      	adds	r3, #1
 802a896:	2b07      	cmp	r3, #7
 802a898:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a89a:	f73f ada1 	bgt.w	802a3e0 <_vfprintf_r+0xe08>
 802a89e:	f106 0408 	add.w	r4, r6, #8
 802a8a2:	f7ff baef 	b.w	8029e84 <_vfprintf_r+0x8ac>
 802a8a6:	9803      	ldr	r0, [sp, #12]
 802a8a8:	aa26      	add	r2, sp, #152	@ 0x98
 802a8aa:	4659      	mov	r1, fp
 802a8ac:	f000 f900 	bl	802aab0 <__sprint_r>
 802a8b0:	2800      	cmp	r0, #0
 802a8b2:	d158      	bne.n	802a966 <_vfprintf_r+0x138e>
 802a8b4:	ae29      	add	r6, sp, #164	@ 0xa4
 802a8b6:	e7c3      	b.n	802a840 <_vfprintf_r+0x1268>
 802a8b8:	9b04      	ldr	r3, [sp, #16]
 802a8ba:	2b01      	cmp	r3, #1
 802a8bc:	dde1      	ble.n	802a882 <_vfprintf_r+0x12aa>
 802a8be:	4f0a      	ldr	r7, [pc, #40]	@ (802a8e8 <_vfprintf_r+0x1310>)
 802a8c0:	f04f 0810 	mov.w	r8, #16
 802a8c4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a8c8:	2c10      	cmp	r4, #16
 802a8ca:	f103 0301 	add.w	r3, r3, #1
 802a8ce:	f106 0108 	add.w	r1, r6, #8
 802a8d2:	6037      	str	r7, [r6, #0]
 802a8d4:	dc0a      	bgt.n	802a8ec <_vfprintf_r+0x1314>
 802a8d6:	6074      	str	r4, [r6, #4]
 802a8d8:	2b07      	cmp	r3, #7
 802a8da:	4414      	add	r4, r2
 802a8dc:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802a8e0:	dcc7      	bgt.n	802a872 <_vfprintf_r+0x129a>
 802a8e2:	460e      	mov	r6, r1
 802a8e4:	e7cd      	b.n	802a882 <_vfprintf_r+0x12aa>
 802a8e6:	bf00      	nop
 802a8e8:	0803ad47 	.word	0x0803ad47
 802a8ec:	3210      	adds	r2, #16
 802a8ee:	2b07      	cmp	r3, #7
 802a8f0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a8f4:	f8c6 8004 	str.w	r8, [r6, #4]
 802a8f8:	dd06      	ble.n	802a908 <_vfprintf_r+0x1330>
 802a8fa:	9803      	ldr	r0, [sp, #12]
 802a8fc:	aa26      	add	r2, sp, #152	@ 0x98
 802a8fe:	4659      	mov	r1, fp
 802a900:	f000 f8d6 	bl	802aab0 <__sprint_r>
 802a904:	bb78      	cbnz	r0, 802a966 <_vfprintf_r+0x138e>
 802a906:	a929      	add	r1, sp, #164	@ 0xa4
 802a908:	3c10      	subs	r4, #16
 802a90a:	460e      	mov	r6, r1
 802a90c:	e7da      	b.n	802a8c4 <_vfprintf_r+0x12ec>
 802a90e:	2101      	movs	r1, #1
 802a910:	2a07      	cmp	r2, #7
 802a912:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a916:	f8c4 8000 	str.w	r8, [r4]
 802a91a:	6061      	str	r1, [r4, #4]
 802a91c:	ddb1      	ble.n	802a882 <_vfprintf_r+0x12aa>
 802a91e:	e7a8      	b.n	802a872 <_vfprintf_r+0x129a>
 802a920:	3608      	adds	r6, #8
 802a922:	e7ae      	b.n	802a882 <_vfprintf_r+0x12aa>
 802a924:	460c      	mov	r4, r1
 802a926:	f7ff baad 	b.w	8029e84 <_vfprintf_r+0x8ac>
 802a92a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a92c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a92e:	1a9d      	subs	r5, r3, r2
 802a930:	2d00      	cmp	r5, #0
 802a932:	f77f aaaa 	ble.w	8029e8a <_vfprintf_r+0x8b2>
 802a936:	4e3d      	ldr	r6, [pc, #244]	@ (802aa2c <_vfprintf_r+0x1454>)
 802a938:	2710      	movs	r7, #16
 802a93a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802a93e:	2d10      	cmp	r5, #16
 802a940:	f103 0301 	add.w	r3, r3, #1
 802a944:	6026      	str	r6, [r4, #0]
 802a946:	dc18      	bgt.n	802a97a <_vfprintf_r+0x13a2>
 802a948:	6065      	str	r5, [r4, #4]
 802a94a:	2b07      	cmp	r3, #7
 802a94c:	4415      	add	r5, r2
 802a94e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 802a952:	f77f aa9a 	ble.w	8029e8a <_vfprintf_r+0x8b2>
 802a956:	9803      	ldr	r0, [sp, #12]
 802a958:	aa26      	add	r2, sp, #152	@ 0x98
 802a95a:	4659      	mov	r1, fp
 802a95c:	f000 f8a8 	bl	802aab0 <__sprint_r>
 802a960:	2800      	cmp	r0, #0
 802a962:	f43f aa92 	beq.w	8029e8a <_vfprintf_r+0x8b2>
 802a966:	f1ba 0f00 	cmp.w	sl, #0
 802a96a:	f43f a892 	beq.w	8029a92 <_vfprintf_r+0x4ba>
 802a96e:	9803      	ldr	r0, [sp, #12]
 802a970:	4651      	mov	r1, sl
 802a972:	f003 fc7b 	bl	802e26c <_free_r>
 802a976:	f7ff b88c 	b.w	8029a92 <_vfprintf_r+0x4ba>
 802a97a:	3210      	adds	r2, #16
 802a97c:	2b07      	cmp	r3, #7
 802a97e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802a982:	6067      	str	r7, [r4, #4]
 802a984:	dc02      	bgt.n	802a98c <_vfprintf_r+0x13b4>
 802a986:	3408      	adds	r4, #8
 802a988:	3d10      	subs	r5, #16
 802a98a:	e7d6      	b.n	802a93a <_vfprintf_r+0x1362>
 802a98c:	9803      	ldr	r0, [sp, #12]
 802a98e:	aa26      	add	r2, sp, #152	@ 0x98
 802a990:	4659      	mov	r1, fp
 802a992:	f000 f88d 	bl	802aab0 <__sprint_r>
 802a996:	2800      	cmp	r0, #0
 802a998:	d1e5      	bne.n	802a966 <_vfprintf_r+0x138e>
 802a99a:	ac29      	add	r4, sp, #164	@ 0xa4
 802a99c:	e7f4      	b.n	802a988 <_vfprintf_r+0x13b0>
 802a99e:	9803      	ldr	r0, [sp, #12]
 802a9a0:	4651      	mov	r1, sl
 802a9a2:	f003 fc63 	bl	802e26c <_free_r>
 802a9a6:	f7ff ba88 	b.w	8029eba <_vfprintf_r+0x8e2>
 802a9aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a9ac:	b91b      	cbnz	r3, 802a9b6 <_vfprintf_r+0x13de>
 802a9ae:	2300      	movs	r3, #0
 802a9b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a9b2:	f7ff b86e 	b.w	8029a92 <_vfprintf_r+0x4ba>
 802a9b6:	9803      	ldr	r0, [sp, #12]
 802a9b8:	aa26      	add	r2, sp, #152	@ 0x98
 802a9ba:	4659      	mov	r1, fp
 802a9bc:	f000 f878 	bl	802aab0 <__sprint_r>
 802a9c0:	2800      	cmp	r0, #0
 802a9c2:	d0f4      	beq.n	802a9ae <_vfprintf_r+0x13d6>
 802a9c4:	f7ff b865 	b.w	8029a92 <_vfprintf_r+0x4ba>
 802a9c8:	ea56 0207 	orrs.w	r2, r6, r7
 802a9cc:	9508      	str	r5, [sp, #32]
 802a9ce:	f43f ab75 	beq.w	802a0bc <_vfprintf_r+0xae4>
 802a9d2:	2b01      	cmp	r3, #1
 802a9d4:	f43f abf6 	beq.w	802a1c4 <_vfprintf_r+0xbec>
 802a9d8:	2b02      	cmp	r3, #2
 802a9da:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802a9de:	f43f ac3a 	beq.w	802a256 <_vfprintf_r+0xc7e>
 802a9e2:	f006 0307 	and.w	r3, r6, #7
 802a9e6:	08f6      	lsrs	r6, r6, #3
 802a9e8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802a9ec:	08ff      	lsrs	r7, r7, #3
 802a9ee:	3330      	adds	r3, #48	@ 0x30
 802a9f0:	ea56 0107 	orrs.w	r1, r6, r7
 802a9f4:	4642      	mov	r2, r8
 802a9f6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802a9fa:	d1f2      	bne.n	802a9e2 <_vfprintf_r+0x140a>
 802a9fc:	9908      	ldr	r1, [sp, #32]
 802a9fe:	07ce      	lsls	r6, r1, #31
 802aa00:	d506      	bpl.n	802aa10 <_vfprintf_r+0x1438>
 802aa02:	2b30      	cmp	r3, #48	@ 0x30
 802aa04:	d004      	beq.n	802aa10 <_vfprintf_r+0x1438>
 802aa06:	2330      	movs	r3, #48	@ 0x30
 802aa08:	f808 3c01 	strb.w	r3, [r8, #-1]
 802aa0c:	f1a2 0802 	sub.w	r8, r2, #2
 802aa10:	ab52      	add	r3, sp, #328	@ 0x148
 802aa12:	9d08      	ldr	r5, [sp, #32]
 802aa14:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 802aa18:	f04f 0a00 	mov.w	sl, #0
 802aa1c:	eba3 0908 	sub.w	r9, r3, r8
 802aa20:	4657      	mov	r7, sl
 802aa22:	f8cd a020 	str.w	sl, [sp, #32]
 802aa26:	4656      	mov	r6, sl
 802aa28:	f7ff b978 	b.w	8029d1c <_vfprintf_r+0x744>
 802aa2c:	0803ad57 	.word	0x0803ad57

0802aa30 <__sbprintf>:
 802aa30:	b5f0      	push	{r4, r5, r6, r7, lr}
 802aa32:	461f      	mov	r7, r3
 802aa34:	898b      	ldrh	r3, [r1, #12]
 802aa36:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802aa3a:	f023 0302 	bic.w	r3, r3, #2
 802aa3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 802aa42:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802aa44:	9319      	str	r3, [sp, #100]	@ 0x64
 802aa46:	89cb      	ldrh	r3, [r1, #14]
 802aa48:	f8ad 300e 	strh.w	r3, [sp, #14]
 802aa4c:	69cb      	ldr	r3, [r1, #28]
 802aa4e:	9307      	str	r3, [sp, #28]
 802aa50:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802aa52:	9309      	str	r3, [sp, #36]	@ 0x24
 802aa54:	ab1a      	add	r3, sp, #104	@ 0x68
 802aa56:	9300      	str	r3, [sp, #0]
 802aa58:	9304      	str	r3, [sp, #16]
 802aa5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802aa5e:	4615      	mov	r5, r2
 802aa60:	4606      	mov	r6, r0
 802aa62:	9302      	str	r3, [sp, #8]
 802aa64:	9305      	str	r3, [sp, #20]
 802aa66:	a816      	add	r0, sp, #88	@ 0x58
 802aa68:	2300      	movs	r3, #0
 802aa6a:	460c      	mov	r4, r1
 802aa6c:	9306      	str	r3, [sp, #24]
 802aa6e:	f002 fcf5 	bl	802d45c <__retarget_lock_init_recursive>
 802aa72:	462a      	mov	r2, r5
 802aa74:	463b      	mov	r3, r7
 802aa76:	4669      	mov	r1, sp
 802aa78:	4630      	mov	r0, r6
 802aa7a:	f7fe fdad 	bl	80295d8 <_vfprintf_r>
 802aa7e:	1e05      	subs	r5, r0, #0
 802aa80:	db07      	blt.n	802aa92 <__sbprintf+0x62>
 802aa82:	4669      	mov	r1, sp
 802aa84:	4630      	mov	r0, r6
 802aa86:	f000 fecb 	bl	802b820 <_fflush_r>
 802aa8a:	2800      	cmp	r0, #0
 802aa8c:	bf18      	it	ne
 802aa8e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802aa92:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802aa96:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802aa98:	065b      	lsls	r3, r3, #25
 802aa9a:	bf42      	ittt	mi
 802aa9c:	89a3      	ldrhmi	r3, [r4, #12]
 802aa9e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802aaa2:	81a3      	strhmi	r3, [r4, #12]
 802aaa4:	f002 fcdb 	bl	802d45e <__retarget_lock_close_recursive>
 802aaa8:	4628      	mov	r0, r5
 802aaaa:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802aaae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802aab0 <__sprint_r>:
 802aab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aab4:	6893      	ldr	r3, [r2, #8]
 802aab6:	4680      	mov	r8, r0
 802aab8:	460e      	mov	r6, r1
 802aaba:	4614      	mov	r4, r2
 802aabc:	b343      	cbz	r3, 802ab10 <__sprint_r+0x60>
 802aabe:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802aac0:	049d      	lsls	r5, r3, #18
 802aac2:	d522      	bpl.n	802ab0a <__sprint_r+0x5a>
 802aac4:	6815      	ldr	r5, [r2, #0]
 802aac6:	68a0      	ldr	r0, [r4, #8]
 802aac8:	3508      	adds	r5, #8
 802aaca:	b928      	cbnz	r0, 802aad8 <__sprint_r+0x28>
 802aacc:	2300      	movs	r3, #0
 802aace:	60a3      	str	r3, [r4, #8]
 802aad0:	2300      	movs	r3, #0
 802aad2:	6063      	str	r3, [r4, #4]
 802aad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aad8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802aadc:	f04f 0900 	mov.w	r9, #0
 802aae0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 802aae4:	45ca      	cmp	sl, r9
 802aae6:	dc05      	bgt.n	802aaf4 <__sprint_r+0x44>
 802aae8:	68a3      	ldr	r3, [r4, #8]
 802aaea:	f027 0703 	bic.w	r7, r7, #3
 802aaee:	1bdb      	subs	r3, r3, r7
 802aaf0:	60a3      	str	r3, [r4, #8]
 802aaf2:	e7e8      	b.n	802aac6 <__sprint_r+0x16>
 802aaf4:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 802aaf8:	4632      	mov	r2, r6
 802aafa:	4640      	mov	r0, r8
 802aafc:	f001 fa35 	bl	802bf6a <_fputwc_r>
 802ab00:	1c43      	adds	r3, r0, #1
 802ab02:	d0e3      	beq.n	802aacc <__sprint_r+0x1c>
 802ab04:	f109 0901 	add.w	r9, r9, #1
 802ab08:	e7ec      	b.n	802aae4 <__sprint_r+0x34>
 802ab0a:	f001 f81d 	bl	802bb48 <__sfvwrite_r>
 802ab0e:	e7dd      	b.n	802aacc <__sprint_r+0x1c>
 802ab10:	4618      	mov	r0, r3
 802ab12:	e7dd      	b.n	802aad0 <__sprint_r+0x20>

0802ab14 <_vfiprintf_r>:
 802ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab18:	b0bb      	sub	sp, #236	@ 0xec
 802ab1a:	460f      	mov	r7, r1
 802ab1c:	4693      	mov	fp, r2
 802ab1e:	461c      	mov	r4, r3
 802ab20:	461d      	mov	r5, r3
 802ab22:	9000      	str	r0, [sp, #0]
 802ab24:	b118      	cbz	r0, 802ab2e <_vfiprintf_r+0x1a>
 802ab26:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802ab28:	b90b      	cbnz	r3, 802ab2e <_vfiprintf_r+0x1a>
 802ab2a:	f000 ffbb 	bl	802baa4 <__sinit>
 802ab2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802ab30:	07db      	lsls	r3, r3, #31
 802ab32:	d405      	bmi.n	802ab40 <_vfiprintf_r+0x2c>
 802ab34:	89bb      	ldrh	r3, [r7, #12]
 802ab36:	059e      	lsls	r6, r3, #22
 802ab38:	d402      	bmi.n	802ab40 <_vfiprintf_r+0x2c>
 802ab3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802ab3c:	f002 fc91 	bl	802d462 <__retarget_lock_acquire_recursive>
 802ab40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802ab44:	0498      	lsls	r0, r3, #18
 802ab46:	d406      	bmi.n	802ab56 <_vfiprintf_r+0x42>
 802ab48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802ab4c:	81bb      	strh	r3, [r7, #12]
 802ab4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802ab50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802ab54:	667b      	str	r3, [r7, #100]	@ 0x64
 802ab56:	89bb      	ldrh	r3, [r7, #12]
 802ab58:	0719      	lsls	r1, r3, #28
 802ab5a:	d501      	bpl.n	802ab60 <_vfiprintf_r+0x4c>
 802ab5c:	693b      	ldr	r3, [r7, #16]
 802ab5e:	b9ab      	cbnz	r3, 802ab8c <_vfiprintf_r+0x78>
 802ab60:	9800      	ldr	r0, [sp, #0]
 802ab62:	4639      	mov	r1, r7
 802ab64:	f001 f95a 	bl	802be1c <__swsetup_r>
 802ab68:	b180      	cbz	r0, 802ab8c <_vfiprintf_r+0x78>
 802ab6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802ab6c:	07da      	lsls	r2, r3, #31
 802ab6e:	d506      	bpl.n	802ab7e <_vfiprintf_r+0x6a>
 802ab70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802ab74:	9303      	str	r3, [sp, #12]
 802ab76:	9803      	ldr	r0, [sp, #12]
 802ab78:	b03b      	add	sp, #236	@ 0xec
 802ab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab7e:	89bb      	ldrh	r3, [r7, #12]
 802ab80:	059b      	lsls	r3, r3, #22
 802ab82:	d4f5      	bmi.n	802ab70 <_vfiprintf_r+0x5c>
 802ab84:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802ab86:	f002 fc6e 	bl	802d466 <__retarget_lock_release_recursive>
 802ab8a:	e7f1      	b.n	802ab70 <_vfiprintf_r+0x5c>
 802ab8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802ab90:	f003 021a 	and.w	r2, r3, #26
 802ab94:	2a0a      	cmp	r2, #10
 802ab96:	d114      	bne.n	802abc2 <_vfiprintf_r+0xae>
 802ab98:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 802ab9c:	2a00      	cmp	r2, #0
 802ab9e:	db10      	blt.n	802abc2 <_vfiprintf_r+0xae>
 802aba0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802aba2:	07d6      	lsls	r6, r2, #31
 802aba4:	d404      	bmi.n	802abb0 <_vfiprintf_r+0x9c>
 802aba6:	059d      	lsls	r5, r3, #22
 802aba8:	d402      	bmi.n	802abb0 <_vfiprintf_r+0x9c>
 802abaa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802abac:	f002 fc5b 	bl	802d466 <__retarget_lock_release_recursive>
 802abb0:	9800      	ldr	r0, [sp, #0]
 802abb2:	4623      	mov	r3, r4
 802abb4:	465a      	mov	r2, fp
 802abb6:	4639      	mov	r1, r7
 802abb8:	b03b      	add	sp, #236	@ 0xec
 802abba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802abbe:	f000 bc31 	b.w	802b424 <__sbprintf>
 802abc2:	2300      	movs	r3, #0
 802abc4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802abc8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802abcc:	ae11      	add	r6, sp, #68	@ 0x44
 802abce:	960e      	str	r6, [sp, #56]	@ 0x38
 802abd0:	9307      	str	r3, [sp, #28]
 802abd2:	9309      	str	r3, [sp, #36]	@ 0x24
 802abd4:	9303      	str	r3, [sp, #12]
 802abd6:	465b      	mov	r3, fp
 802abd8:	461c      	mov	r4, r3
 802abda:	f813 2b01 	ldrb.w	r2, [r3], #1
 802abde:	b10a      	cbz	r2, 802abe4 <_vfiprintf_r+0xd0>
 802abe0:	2a25      	cmp	r2, #37	@ 0x25
 802abe2:	d1f9      	bne.n	802abd8 <_vfiprintf_r+0xc4>
 802abe4:	ebb4 080b 	subs.w	r8, r4, fp
 802abe8:	d00d      	beq.n	802ac06 <_vfiprintf_r+0xf2>
 802abea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802abec:	4443      	add	r3, r8
 802abee:	9310      	str	r3, [sp, #64]	@ 0x40
 802abf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802abf2:	3301      	adds	r3, #1
 802abf4:	2b07      	cmp	r3, #7
 802abf6:	e9c6 b800 	strd	fp, r8, [r6]
 802abfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 802abfc:	dc75      	bgt.n	802acea <_vfiprintf_r+0x1d6>
 802abfe:	3608      	adds	r6, #8
 802ac00:	9b03      	ldr	r3, [sp, #12]
 802ac02:	4443      	add	r3, r8
 802ac04:	9303      	str	r3, [sp, #12]
 802ac06:	7823      	ldrb	r3, [r4, #0]
 802ac08:	2b00      	cmp	r3, #0
 802ac0a:	f000 83cd 	beq.w	802b3a8 <_vfiprintf_r+0x894>
 802ac0e:	2300      	movs	r3, #0
 802ac10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802ac14:	e9cd 2301 	strd	r2, r3, [sp, #4]
 802ac18:	3401      	adds	r4, #1
 802ac1a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ac1e:	469a      	mov	sl, r3
 802ac20:	46a3      	mov	fp, r4
 802ac22:	f81b 3b01 	ldrb.w	r3, [fp], #1
 802ac26:	f1a3 0220 	sub.w	r2, r3, #32
 802ac2a:	2a5a      	cmp	r2, #90	@ 0x5a
 802ac2c:	f200 8316 	bhi.w	802b25c <_vfiprintf_r+0x748>
 802ac30:	e8df f012 	tbh	[pc, r2, lsl #1]
 802ac34:	0314009a 	.word	0x0314009a
 802ac38:	00a20314 	.word	0x00a20314
 802ac3c:	03140314 	.word	0x03140314
 802ac40:	00820314 	.word	0x00820314
 802ac44:	03140314 	.word	0x03140314
 802ac48:	00af00a5 	.word	0x00af00a5
 802ac4c:	00ac0314 	.word	0x00ac0314
 802ac50:	031400b1 	.word	0x031400b1
 802ac54:	00d000cd 	.word	0x00d000cd
 802ac58:	00d000d0 	.word	0x00d000d0
 802ac5c:	00d000d0 	.word	0x00d000d0
 802ac60:	00d000d0 	.word	0x00d000d0
 802ac64:	00d000d0 	.word	0x00d000d0
 802ac68:	03140314 	.word	0x03140314
 802ac6c:	03140314 	.word	0x03140314
 802ac70:	03140314 	.word	0x03140314
 802ac74:	03140314 	.word	0x03140314
 802ac78:	00f70314 	.word	0x00f70314
 802ac7c:	03140104 	.word	0x03140104
 802ac80:	03140314 	.word	0x03140314
 802ac84:	03140314 	.word	0x03140314
 802ac88:	03140314 	.word	0x03140314
 802ac8c:	03140314 	.word	0x03140314
 802ac90:	01520314 	.word	0x01520314
 802ac94:	03140314 	.word	0x03140314
 802ac98:	019a0314 	.word	0x019a0314
 802ac9c:	027a0314 	.word	0x027a0314
 802aca0:	03140314 	.word	0x03140314
 802aca4:	0314029a 	.word	0x0314029a
 802aca8:	03140314 	.word	0x03140314
 802acac:	03140314 	.word	0x03140314
 802acb0:	03140314 	.word	0x03140314
 802acb4:	03140314 	.word	0x03140314
 802acb8:	00f70314 	.word	0x00f70314
 802acbc:	03140106 	.word	0x03140106
 802acc0:	03140314 	.word	0x03140314
 802acc4:	010600e0 	.word	0x010600e0
 802acc8:	031400f1 	.word	0x031400f1
 802accc:	031400eb 	.word	0x031400eb
 802acd0:	01540132 	.word	0x01540132
 802acd4:	00f10189 	.word	0x00f10189
 802acd8:	019a0314 	.word	0x019a0314
 802acdc:	027c0098 	.word	0x027c0098
 802ace0:	03140314 	.word	0x03140314
 802ace4:	03140065 	.word	0x03140065
 802ace8:	0098      	.short	0x0098
 802acea:	9800      	ldr	r0, [sp, #0]
 802acec:	aa0e      	add	r2, sp, #56	@ 0x38
 802acee:	4639      	mov	r1, r7
 802acf0:	f7ff fede 	bl	802aab0 <__sprint_r>
 802acf4:	2800      	cmp	r0, #0
 802acf6:	f040 8336 	bne.w	802b366 <_vfiprintf_r+0x852>
 802acfa:	ae11      	add	r6, sp, #68	@ 0x44
 802acfc:	e780      	b.n	802ac00 <_vfiprintf_r+0xec>
 802acfe:	4a99      	ldr	r2, [pc, #612]	@ (802af64 <_vfiprintf_r+0x450>)
 802ad00:	9205      	str	r2, [sp, #20]
 802ad02:	f01a 0220 	ands.w	r2, sl, #32
 802ad06:	f000 8231 	beq.w	802b16c <_vfiprintf_r+0x658>
 802ad0a:	3507      	adds	r5, #7
 802ad0c:	f025 0507 	bic.w	r5, r5, #7
 802ad10:	46a8      	mov	r8, r5
 802ad12:	686d      	ldr	r5, [r5, #4]
 802ad14:	f858 4b08 	ldr.w	r4, [r8], #8
 802ad18:	f01a 0f01 	tst.w	sl, #1
 802ad1c:	d009      	beq.n	802ad32 <_vfiprintf_r+0x21e>
 802ad1e:	ea54 0205 	orrs.w	r2, r4, r5
 802ad22:	bf1f      	itttt	ne
 802ad24:	2230      	movne	r2, #48	@ 0x30
 802ad26:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802ad2a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802ad2e:	f04a 0a02 	orrne.w	sl, sl, #2
 802ad32:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802ad36:	e112      	b.n	802af5e <_vfiprintf_r+0x44a>
 802ad38:	9800      	ldr	r0, [sp, #0]
 802ad3a:	f002 fae7 	bl	802d30c <_localeconv_r>
 802ad3e:	6843      	ldr	r3, [r0, #4]
 802ad40:	9309      	str	r3, [sp, #36]	@ 0x24
 802ad42:	4618      	mov	r0, r3
 802ad44:	f7e5 faac 	bl	80102a0 <strlen>
 802ad48:	9007      	str	r0, [sp, #28]
 802ad4a:	9800      	ldr	r0, [sp, #0]
 802ad4c:	f002 fade 	bl	802d30c <_localeconv_r>
 802ad50:	6883      	ldr	r3, [r0, #8]
 802ad52:	9306      	str	r3, [sp, #24]
 802ad54:	9b07      	ldr	r3, [sp, #28]
 802ad56:	b12b      	cbz	r3, 802ad64 <_vfiprintf_r+0x250>
 802ad58:	9b06      	ldr	r3, [sp, #24]
 802ad5a:	b11b      	cbz	r3, 802ad64 <_vfiprintf_r+0x250>
 802ad5c:	781b      	ldrb	r3, [r3, #0]
 802ad5e:	b10b      	cbz	r3, 802ad64 <_vfiprintf_r+0x250>
 802ad60:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 802ad64:	465c      	mov	r4, fp
 802ad66:	e75b      	b.n	802ac20 <_vfiprintf_r+0x10c>
 802ad68:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802ad6c:	2b00      	cmp	r3, #0
 802ad6e:	d1f9      	bne.n	802ad64 <_vfiprintf_r+0x250>
 802ad70:	2320      	movs	r3, #32
 802ad72:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ad76:	e7f5      	b.n	802ad64 <_vfiprintf_r+0x250>
 802ad78:	f04a 0a01 	orr.w	sl, sl, #1
 802ad7c:	e7f2      	b.n	802ad64 <_vfiprintf_r+0x250>
 802ad7e:	f855 3b04 	ldr.w	r3, [r5], #4
 802ad82:	9302      	str	r3, [sp, #8]
 802ad84:	2b00      	cmp	r3, #0
 802ad86:	daed      	bge.n	802ad64 <_vfiprintf_r+0x250>
 802ad88:	425b      	negs	r3, r3
 802ad8a:	9302      	str	r3, [sp, #8]
 802ad8c:	f04a 0a04 	orr.w	sl, sl, #4
 802ad90:	e7e8      	b.n	802ad64 <_vfiprintf_r+0x250>
 802ad92:	232b      	movs	r3, #43	@ 0x2b
 802ad94:	e7ed      	b.n	802ad72 <_vfiprintf_r+0x25e>
 802ad96:	465a      	mov	r2, fp
 802ad98:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ad9c:	2b2a      	cmp	r3, #42	@ 0x2a
 802ad9e:	d112      	bne.n	802adc6 <_vfiprintf_r+0x2b2>
 802ada0:	f855 3b04 	ldr.w	r3, [r5], #4
 802ada4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ada8:	9301      	str	r3, [sp, #4]
 802adaa:	4693      	mov	fp, r2
 802adac:	e7da      	b.n	802ad64 <_vfiprintf_r+0x250>
 802adae:	9b01      	ldr	r3, [sp, #4]
 802adb0:	fb00 1303 	mla	r3, r0, r3, r1
 802adb4:	9301      	str	r3, [sp, #4]
 802adb6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802adba:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802adbe:	2909      	cmp	r1, #9
 802adc0:	d9f5      	bls.n	802adae <_vfiprintf_r+0x29a>
 802adc2:	4693      	mov	fp, r2
 802adc4:	e72f      	b.n	802ac26 <_vfiprintf_r+0x112>
 802adc6:	2100      	movs	r1, #0
 802adc8:	9101      	str	r1, [sp, #4]
 802adca:	200a      	movs	r0, #10
 802adcc:	e7f5      	b.n	802adba <_vfiprintf_r+0x2a6>
 802adce:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802add2:	e7c7      	b.n	802ad64 <_vfiprintf_r+0x250>
 802add4:	2100      	movs	r1, #0
 802add6:	465a      	mov	r2, fp
 802add8:	9102      	str	r1, [sp, #8]
 802adda:	200a      	movs	r0, #10
 802addc:	9902      	ldr	r1, [sp, #8]
 802adde:	3b30      	subs	r3, #48	@ 0x30
 802ade0:	fb00 3301 	mla	r3, r0, r1, r3
 802ade4:	9302      	str	r3, [sp, #8]
 802ade6:	f812 3b01 	ldrb.w	r3, [r2], #1
 802adea:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802adee:	2909      	cmp	r1, #9
 802adf0:	d9f4      	bls.n	802addc <_vfiprintf_r+0x2c8>
 802adf2:	e7e6      	b.n	802adc2 <_vfiprintf_r+0x2ae>
 802adf4:	f89b 3000 	ldrb.w	r3, [fp]
 802adf8:	2b68      	cmp	r3, #104	@ 0x68
 802adfa:	bf06      	itte	eq
 802adfc:	f10b 0b01 	addeq.w	fp, fp, #1
 802ae00:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 802ae04:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 802ae08:	e7ac      	b.n	802ad64 <_vfiprintf_r+0x250>
 802ae0a:	f89b 3000 	ldrb.w	r3, [fp]
 802ae0e:	2b6c      	cmp	r3, #108	@ 0x6c
 802ae10:	d104      	bne.n	802ae1c <_vfiprintf_r+0x308>
 802ae12:	f10b 0b01 	add.w	fp, fp, #1
 802ae16:	f04a 0a20 	orr.w	sl, sl, #32
 802ae1a:	e7a3      	b.n	802ad64 <_vfiprintf_r+0x250>
 802ae1c:	f04a 0a10 	orr.w	sl, sl, #16
 802ae20:	e7a0      	b.n	802ad64 <_vfiprintf_r+0x250>
 802ae22:	46a8      	mov	r8, r5
 802ae24:	2400      	movs	r4, #0
 802ae26:	f858 3b04 	ldr.w	r3, [r8], #4
 802ae2a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802ae2e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802ae32:	2301      	movs	r3, #1
 802ae34:	9301      	str	r3, [sp, #4]
 802ae36:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 802ae3a:	e0ab      	b.n	802af94 <_vfiprintf_r+0x480>
 802ae3c:	f04a 0a10 	orr.w	sl, sl, #16
 802ae40:	f01a 0f20 	tst.w	sl, #32
 802ae44:	d011      	beq.n	802ae6a <_vfiprintf_r+0x356>
 802ae46:	3507      	adds	r5, #7
 802ae48:	f025 0507 	bic.w	r5, r5, #7
 802ae4c:	46a8      	mov	r8, r5
 802ae4e:	686d      	ldr	r5, [r5, #4]
 802ae50:	f858 4b08 	ldr.w	r4, [r8], #8
 802ae54:	2d00      	cmp	r5, #0
 802ae56:	da06      	bge.n	802ae66 <_vfiprintf_r+0x352>
 802ae58:	4264      	negs	r4, r4
 802ae5a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802ae5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802ae62:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ae66:	2301      	movs	r3, #1
 802ae68:	e048      	b.n	802aefc <_vfiprintf_r+0x3e8>
 802ae6a:	46a8      	mov	r8, r5
 802ae6c:	f01a 0f10 	tst.w	sl, #16
 802ae70:	f858 5b04 	ldr.w	r5, [r8], #4
 802ae74:	d002      	beq.n	802ae7c <_vfiprintf_r+0x368>
 802ae76:	462c      	mov	r4, r5
 802ae78:	17ed      	asrs	r5, r5, #31
 802ae7a:	e7eb      	b.n	802ae54 <_vfiprintf_r+0x340>
 802ae7c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802ae80:	d003      	beq.n	802ae8a <_vfiprintf_r+0x376>
 802ae82:	b22c      	sxth	r4, r5
 802ae84:	f345 35c0 	sbfx	r5, r5, #15, #1
 802ae88:	e7e4      	b.n	802ae54 <_vfiprintf_r+0x340>
 802ae8a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802ae8e:	d0f2      	beq.n	802ae76 <_vfiprintf_r+0x362>
 802ae90:	b26c      	sxtb	r4, r5
 802ae92:	f345 15c0 	sbfx	r5, r5, #7, #1
 802ae96:	e7dd      	b.n	802ae54 <_vfiprintf_r+0x340>
 802ae98:	f01a 0f20 	tst.w	sl, #32
 802ae9c:	d007      	beq.n	802aeae <_vfiprintf_r+0x39a>
 802ae9e:	9a03      	ldr	r2, [sp, #12]
 802aea0:	682b      	ldr	r3, [r5, #0]
 802aea2:	9903      	ldr	r1, [sp, #12]
 802aea4:	17d2      	asrs	r2, r2, #31
 802aea6:	e9c3 1200 	strd	r1, r2, [r3]
 802aeaa:	3504      	adds	r5, #4
 802aeac:	e693      	b.n	802abd6 <_vfiprintf_r+0xc2>
 802aeae:	f01a 0f10 	tst.w	sl, #16
 802aeb2:	d003      	beq.n	802aebc <_vfiprintf_r+0x3a8>
 802aeb4:	682b      	ldr	r3, [r5, #0]
 802aeb6:	9a03      	ldr	r2, [sp, #12]
 802aeb8:	601a      	str	r2, [r3, #0]
 802aeba:	e7f6      	b.n	802aeaa <_vfiprintf_r+0x396>
 802aebc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802aec0:	d003      	beq.n	802aeca <_vfiprintf_r+0x3b6>
 802aec2:	682b      	ldr	r3, [r5, #0]
 802aec4:	9a03      	ldr	r2, [sp, #12]
 802aec6:	801a      	strh	r2, [r3, #0]
 802aec8:	e7ef      	b.n	802aeaa <_vfiprintf_r+0x396>
 802aeca:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802aece:	d0f1      	beq.n	802aeb4 <_vfiprintf_r+0x3a0>
 802aed0:	682b      	ldr	r3, [r5, #0]
 802aed2:	9a03      	ldr	r2, [sp, #12]
 802aed4:	701a      	strb	r2, [r3, #0]
 802aed6:	e7e8      	b.n	802aeaa <_vfiprintf_r+0x396>
 802aed8:	f04a 0a10 	orr.w	sl, sl, #16
 802aedc:	f01a 0320 	ands.w	r3, sl, #32
 802aee0:	d01f      	beq.n	802af22 <_vfiprintf_r+0x40e>
 802aee2:	3507      	adds	r5, #7
 802aee4:	f025 0507 	bic.w	r5, r5, #7
 802aee8:	46a8      	mov	r8, r5
 802aeea:	686d      	ldr	r5, [r5, #4]
 802aeec:	f858 4b08 	ldr.w	r4, [r8], #8
 802aef0:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 802aef4:	2300      	movs	r3, #0
 802aef6:	2200      	movs	r2, #0
 802aef8:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802aefc:	9a01      	ldr	r2, [sp, #4]
 802aefe:	3201      	adds	r2, #1
 802af00:	f000 825f 	beq.w	802b3c2 <_vfiprintf_r+0x8ae>
 802af04:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 802af08:	9204      	str	r2, [sp, #16]
 802af0a:	ea54 0205 	orrs.w	r2, r4, r5
 802af0e:	f040 825e 	bne.w	802b3ce <_vfiprintf_r+0x8ba>
 802af12:	9a01      	ldr	r2, [sp, #4]
 802af14:	2a00      	cmp	r2, #0
 802af16:	f000 8198 	beq.w	802b24a <_vfiprintf_r+0x736>
 802af1a:	2b01      	cmp	r3, #1
 802af1c:	f040 825a 	bne.w	802b3d4 <_vfiprintf_r+0x8c0>
 802af20:	e13b      	b.n	802b19a <_vfiprintf_r+0x686>
 802af22:	46a8      	mov	r8, r5
 802af24:	f01a 0510 	ands.w	r5, sl, #16
 802af28:	f858 4b04 	ldr.w	r4, [r8], #4
 802af2c:	d001      	beq.n	802af32 <_vfiprintf_r+0x41e>
 802af2e:	461d      	mov	r5, r3
 802af30:	e7de      	b.n	802aef0 <_vfiprintf_r+0x3dc>
 802af32:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802af36:	d001      	beq.n	802af3c <_vfiprintf_r+0x428>
 802af38:	b2a4      	uxth	r4, r4
 802af3a:	e7d9      	b.n	802aef0 <_vfiprintf_r+0x3dc>
 802af3c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802af40:	d0d6      	beq.n	802aef0 <_vfiprintf_r+0x3dc>
 802af42:	b2e4      	uxtb	r4, r4
 802af44:	e7f3      	b.n	802af2e <_vfiprintf_r+0x41a>
 802af46:	46a8      	mov	r8, r5
 802af48:	f647 0330 	movw	r3, #30768	@ 0x7830
 802af4c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802af50:	f858 4b04 	ldr.w	r4, [r8], #4
 802af54:	4b03      	ldr	r3, [pc, #12]	@ (802af64 <_vfiprintf_r+0x450>)
 802af56:	9305      	str	r3, [sp, #20]
 802af58:	2500      	movs	r5, #0
 802af5a:	f04a 0a02 	orr.w	sl, sl, #2
 802af5e:	2302      	movs	r3, #2
 802af60:	e7c9      	b.n	802aef6 <_vfiprintf_r+0x3e2>
 802af62:	bf00      	nop
 802af64:	0803ad23 	.word	0x0803ad23
 802af68:	9b01      	ldr	r3, [sp, #4]
 802af6a:	46a8      	mov	r8, r5
 802af6c:	1c5c      	adds	r4, r3, #1
 802af6e:	f04f 0500 	mov.w	r5, #0
 802af72:	f858 9b04 	ldr.w	r9, [r8], #4
 802af76:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802af7a:	f000 80d0 	beq.w	802b11e <_vfiprintf_r+0x60a>
 802af7e:	461a      	mov	r2, r3
 802af80:	4629      	mov	r1, r5
 802af82:	4648      	mov	r0, r9
 802af84:	f7e5 f93c 	bl	8010200 <memchr>
 802af88:	4604      	mov	r4, r0
 802af8a:	b118      	cbz	r0, 802af94 <_vfiprintf_r+0x480>
 802af8c:	eba0 0309 	sub.w	r3, r0, r9
 802af90:	9301      	str	r3, [sp, #4]
 802af92:	462c      	mov	r4, r5
 802af94:	9b01      	ldr	r3, [sp, #4]
 802af96:	42a3      	cmp	r3, r4
 802af98:	bfb8      	it	lt
 802af9a:	4623      	movlt	r3, r4
 802af9c:	9304      	str	r3, [sp, #16]
 802af9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802afa2:	b113      	cbz	r3, 802afaa <_vfiprintf_r+0x496>
 802afa4:	9b04      	ldr	r3, [sp, #16]
 802afa6:	3301      	adds	r3, #1
 802afa8:	9304      	str	r3, [sp, #16]
 802afaa:	f01a 0302 	ands.w	r3, sl, #2
 802afae:	9308      	str	r3, [sp, #32]
 802afb0:	bf1e      	ittt	ne
 802afb2:	9b04      	ldrne	r3, [sp, #16]
 802afb4:	3302      	addne	r3, #2
 802afb6:	9304      	strne	r3, [sp, #16]
 802afb8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 802afbc:	930a      	str	r3, [sp, #40]	@ 0x28
 802afbe:	d11f      	bne.n	802b000 <_vfiprintf_r+0x4ec>
 802afc0:	9b02      	ldr	r3, [sp, #8]
 802afc2:	9a04      	ldr	r2, [sp, #16]
 802afc4:	1a9d      	subs	r5, r3, r2
 802afc6:	2d00      	cmp	r5, #0
 802afc8:	dd1a      	ble.n	802b000 <_vfiprintf_r+0x4ec>
 802afca:	4ba9      	ldr	r3, [pc, #676]	@ (802b270 <_vfiprintf_r+0x75c>)
 802afcc:	6033      	str	r3, [r6, #0]
 802afce:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802afd2:	2d10      	cmp	r5, #16
 802afd4:	f102 0201 	add.w	r2, r2, #1
 802afd8:	f106 0008 	add.w	r0, r6, #8
 802afdc:	f300 814e 	bgt.w	802b27c <_vfiprintf_r+0x768>
 802afe0:	6075      	str	r5, [r6, #4]
 802afe2:	2a07      	cmp	r2, #7
 802afe4:	4465      	add	r5, ip
 802afe6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802afea:	f340 815a 	ble.w	802b2a2 <_vfiprintf_r+0x78e>
 802afee:	9800      	ldr	r0, [sp, #0]
 802aff0:	aa0e      	add	r2, sp, #56	@ 0x38
 802aff2:	4639      	mov	r1, r7
 802aff4:	f7ff fd5c 	bl	802aab0 <__sprint_r>
 802aff8:	2800      	cmp	r0, #0
 802affa:	f040 81b4 	bne.w	802b366 <_vfiprintf_r+0x852>
 802affe:	ae11      	add	r6, sp, #68	@ 0x44
 802b000:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802b004:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b008:	b161      	cbz	r1, 802b024 <_vfiprintf_r+0x510>
 802b00a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802b00e:	3301      	adds	r3, #1
 802b010:	6031      	str	r1, [r6, #0]
 802b012:	2101      	movs	r1, #1
 802b014:	440a      	add	r2, r1
 802b016:	2b07      	cmp	r3, #7
 802b018:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b01c:	6071      	str	r1, [r6, #4]
 802b01e:	f300 8142 	bgt.w	802b2a6 <_vfiprintf_r+0x792>
 802b022:	3608      	adds	r6, #8
 802b024:	9908      	ldr	r1, [sp, #32]
 802b026:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b02a:	b159      	cbz	r1, 802b044 <_vfiprintf_r+0x530>
 802b02c:	a90d      	add	r1, sp, #52	@ 0x34
 802b02e:	3301      	adds	r3, #1
 802b030:	6031      	str	r1, [r6, #0]
 802b032:	2102      	movs	r1, #2
 802b034:	440a      	add	r2, r1
 802b036:	2b07      	cmp	r3, #7
 802b038:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b03c:	6071      	str	r1, [r6, #4]
 802b03e:	f300 813b 	bgt.w	802b2b8 <_vfiprintf_r+0x7a4>
 802b042:	3608      	adds	r6, #8
 802b044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802b046:	2b80      	cmp	r3, #128	@ 0x80
 802b048:	d11f      	bne.n	802b08a <_vfiprintf_r+0x576>
 802b04a:	9b02      	ldr	r3, [sp, #8]
 802b04c:	9a04      	ldr	r2, [sp, #16]
 802b04e:	1a9d      	subs	r5, r3, r2
 802b050:	2d00      	cmp	r5, #0
 802b052:	dd1a      	ble.n	802b08a <_vfiprintf_r+0x576>
 802b054:	4b87      	ldr	r3, [pc, #540]	@ (802b274 <_vfiprintf_r+0x760>)
 802b056:	6033      	str	r3, [r6, #0]
 802b058:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802b05c:	2d10      	cmp	r5, #16
 802b05e:	f102 0201 	add.w	r2, r2, #1
 802b062:	f106 0008 	add.w	r0, r6, #8
 802b066:	f300 8130 	bgt.w	802b2ca <_vfiprintf_r+0x7b6>
 802b06a:	6075      	str	r5, [r6, #4]
 802b06c:	2a07      	cmp	r2, #7
 802b06e:	4465      	add	r5, ip
 802b070:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 802b074:	f340 813c 	ble.w	802b2f0 <_vfiprintf_r+0x7dc>
 802b078:	9800      	ldr	r0, [sp, #0]
 802b07a:	aa0e      	add	r2, sp, #56	@ 0x38
 802b07c:	4639      	mov	r1, r7
 802b07e:	f7ff fd17 	bl	802aab0 <__sprint_r>
 802b082:	2800      	cmp	r0, #0
 802b084:	f040 816f 	bne.w	802b366 <_vfiprintf_r+0x852>
 802b088:	ae11      	add	r6, sp, #68	@ 0x44
 802b08a:	9b01      	ldr	r3, [sp, #4]
 802b08c:	1ae4      	subs	r4, r4, r3
 802b08e:	2c00      	cmp	r4, #0
 802b090:	dd1a      	ble.n	802b0c8 <_vfiprintf_r+0x5b4>
 802b092:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802b096:	4877      	ldr	r0, [pc, #476]	@ (802b274 <_vfiprintf_r+0x760>)
 802b098:	6030      	str	r0, [r6, #0]
 802b09a:	2c10      	cmp	r4, #16
 802b09c:	f103 0301 	add.w	r3, r3, #1
 802b0a0:	f106 0108 	add.w	r1, r6, #8
 802b0a4:	f300 8126 	bgt.w	802b2f4 <_vfiprintf_r+0x7e0>
 802b0a8:	6074      	str	r4, [r6, #4]
 802b0aa:	2b07      	cmp	r3, #7
 802b0ac:	4414      	add	r4, r2
 802b0ae:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802b0b2:	f340 8130 	ble.w	802b316 <_vfiprintf_r+0x802>
 802b0b6:	9800      	ldr	r0, [sp, #0]
 802b0b8:	aa0e      	add	r2, sp, #56	@ 0x38
 802b0ba:	4639      	mov	r1, r7
 802b0bc:	f7ff fcf8 	bl	802aab0 <__sprint_r>
 802b0c0:	2800      	cmp	r0, #0
 802b0c2:	f040 8150 	bne.w	802b366 <_vfiprintf_r+0x852>
 802b0c6:	ae11      	add	r6, sp, #68	@ 0x44
 802b0c8:	9b01      	ldr	r3, [sp, #4]
 802b0ca:	9a01      	ldr	r2, [sp, #4]
 802b0cc:	6073      	str	r3, [r6, #4]
 802b0ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b0d0:	f8c6 9000 	str.w	r9, [r6]
 802b0d4:	4413      	add	r3, r2
 802b0d6:	9310      	str	r3, [sp, #64]	@ 0x40
 802b0d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802b0da:	3301      	adds	r3, #1
 802b0dc:	2b07      	cmp	r3, #7
 802b0de:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b0e0:	f300 811b 	bgt.w	802b31a <_vfiprintf_r+0x806>
 802b0e4:	f106 0308 	add.w	r3, r6, #8
 802b0e8:	f01a 0f04 	tst.w	sl, #4
 802b0ec:	f040 811d 	bne.w	802b32a <_vfiprintf_r+0x816>
 802b0f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b0f4:	9904      	ldr	r1, [sp, #16]
 802b0f6:	428a      	cmp	r2, r1
 802b0f8:	bfac      	ite	ge
 802b0fa:	189b      	addge	r3, r3, r2
 802b0fc:	185b      	addlt	r3, r3, r1
 802b0fe:	9303      	str	r3, [sp, #12]
 802b100:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b102:	b13b      	cbz	r3, 802b114 <_vfiprintf_r+0x600>
 802b104:	9800      	ldr	r0, [sp, #0]
 802b106:	aa0e      	add	r2, sp, #56	@ 0x38
 802b108:	4639      	mov	r1, r7
 802b10a:	f7ff fcd1 	bl	802aab0 <__sprint_r>
 802b10e:	2800      	cmp	r0, #0
 802b110:	f040 8129 	bne.w	802b366 <_vfiprintf_r+0x852>
 802b114:	2300      	movs	r3, #0
 802b116:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b118:	4645      	mov	r5, r8
 802b11a:	ae11      	add	r6, sp, #68	@ 0x44
 802b11c:	e55b      	b.n	802abd6 <_vfiprintf_r+0xc2>
 802b11e:	4648      	mov	r0, r9
 802b120:	f7e5 f8be 	bl	80102a0 <strlen>
 802b124:	9001      	str	r0, [sp, #4]
 802b126:	e734      	b.n	802af92 <_vfiprintf_r+0x47e>
 802b128:	f04a 0a10 	orr.w	sl, sl, #16
 802b12c:	f01a 0320 	ands.w	r3, sl, #32
 802b130:	d008      	beq.n	802b144 <_vfiprintf_r+0x630>
 802b132:	3507      	adds	r5, #7
 802b134:	f025 0507 	bic.w	r5, r5, #7
 802b138:	46a8      	mov	r8, r5
 802b13a:	686d      	ldr	r5, [r5, #4]
 802b13c:	f858 4b08 	ldr.w	r4, [r8], #8
 802b140:	2301      	movs	r3, #1
 802b142:	e6d8      	b.n	802aef6 <_vfiprintf_r+0x3e2>
 802b144:	46a8      	mov	r8, r5
 802b146:	f01a 0510 	ands.w	r5, sl, #16
 802b14a:	f858 4b04 	ldr.w	r4, [r8], #4
 802b14e:	d001      	beq.n	802b154 <_vfiprintf_r+0x640>
 802b150:	461d      	mov	r5, r3
 802b152:	e7f5      	b.n	802b140 <_vfiprintf_r+0x62c>
 802b154:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 802b158:	d001      	beq.n	802b15e <_vfiprintf_r+0x64a>
 802b15a:	b2a4      	uxth	r4, r4
 802b15c:	e7f0      	b.n	802b140 <_vfiprintf_r+0x62c>
 802b15e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b162:	d0ed      	beq.n	802b140 <_vfiprintf_r+0x62c>
 802b164:	b2e4      	uxtb	r4, r4
 802b166:	e7f3      	b.n	802b150 <_vfiprintf_r+0x63c>
 802b168:	4a43      	ldr	r2, [pc, #268]	@ (802b278 <_vfiprintf_r+0x764>)
 802b16a:	e5c9      	b.n	802ad00 <_vfiprintf_r+0x1ec>
 802b16c:	46a8      	mov	r8, r5
 802b16e:	f01a 0510 	ands.w	r5, sl, #16
 802b172:	f858 4b04 	ldr.w	r4, [r8], #4
 802b176:	d001      	beq.n	802b17c <_vfiprintf_r+0x668>
 802b178:	4615      	mov	r5, r2
 802b17a:	e5cd      	b.n	802ad18 <_vfiprintf_r+0x204>
 802b17c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802b180:	d001      	beq.n	802b186 <_vfiprintf_r+0x672>
 802b182:	b2a4      	uxth	r4, r4
 802b184:	e5c8      	b.n	802ad18 <_vfiprintf_r+0x204>
 802b186:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 802b18a:	f43f adc5 	beq.w	802ad18 <_vfiprintf_r+0x204>
 802b18e:	b2e4      	uxtb	r4, r4
 802b190:	e7f2      	b.n	802b178 <_vfiprintf_r+0x664>
 802b192:	2c0a      	cmp	r4, #10
 802b194:	f175 0300 	sbcs.w	r3, r5, #0
 802b198:	d206      	bcs.n	802b1a8 <_vfiprintf_r+0x694>
 802b19a:	3430      	adds	r4, #48	@ 0x30
 802b19c:	b2e4      	uxtb	r4, r4
 802b19e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802b1a2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 802b1a6:	e131      	b.n	802b40c <_vfiprintf_r+0x8f8>
 802b1a8:	ab3a      	add	r3, sp, #232	@ 0xe8
 802b1aa:	9308      	str	r3, [sp, #32]
 802b1ac:	9b04      	ldr	r3, [sp, #16]
 802b1ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802b1b2:	f04f 0a00 	mov.w	sl, #0
 802b1b6:	930a      	str	r3, [sp, #40]	@ 0x28
 802b1b8:	220a      	movs	r2, #10
 802b1ba:	2300      	movs	r3, #0
 802b1bc:	4620      	mov	r0, r4
 802b1be:	4629      	mov	r1, r5
 802b1c0:	f7e5 fdca 	bl	8010d58 <__aeabi_uldivmod>
 802b1c4:	460b      	mov	r3, r1
 802b1c6:	9908      	ldr	r1, [sp, #32]
 802b1c8:	900b      	str	r0, [sp, #44]	@ 0x2c
 802b1ca:	3230      	adds	r2, #48	@ 0x30
 802b1cc:	f801 2c01 	strb.w	r2, [r1, #-1]
 802b1d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802b1d2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 802b1d6:	f10a 0a01 	add.w	sl, sl, #1
 802b1da:	b1e2      	cbz	r2, 802b216 <_vfiprintf_r+0x702>
 802b1dc:	9a06      	ldr	r2, [sp, #24]
 802b1de:	7812      	ldrb	r2, [r2, #0]
 802b1e0:	4552      	cmp	r2, sl
 802b1e2:	d118      	bne.n	802b216 <_vfiprintf_r+0x702>
 802b1e4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802b1e8:	d015      	beq.n	802b216 <_vfiprintf_r+0x702>
 802b1ea:	2c0a      	cmp	r4, #10
 802b1ec:	f175 0200 	sbcs.w	r2, r5, #0
 802b1f0:	d311      	bcc.n	802b216 <_vfiprintf_r+0x702>
 802b1f2:	9308      	str	r3, [sp, #32]
 802b1f4:	9b07      	ldr	r3, [sp, #28]
 802b1f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802b1f8:	eba9 0903 	sub.w	r9, r9, r3
 802b1fc:	461a      	mov	r2, r3
 802b1fe:	4648      	mov	r0, r9
 802b200:	f000 ff3d 	bl	802c07e <strncpy>
 802b204:	9b06      	ldr	r3, [sp, #24]
 802b206:	785a      	ldrb	r2, [r3, #1]
 802b208:	9b08      	ldr	r3, [sp, #32]
 802b20a:	b172      	cbz	r2, 802b22a <_vfiprintf_r+0x716>
 802b20c:	9a06      	ldr	r2, [sp, #24]
 802b20e:	3201      	adds	r2, #1
 802b210:	9206      	str	r2, [sp, #24]
 802b212:	f04f 0a00 	mov.w	sl, #0
 802b216:	2c0a      	cmp	r4, #10
 802b218:	f175 0500 	sbcs.w	r5, r5, #0
 802b21c:	f0c0 80f6 	bcc.w	802b40c <_vfiprintf_r+0x8f8>
 802b220:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802b222:	f8cd 9020 	str.w	r9, [sp, #32]
 802b226:	461d      	mov	r5, r3
 802b228:	e7c6      	b.n	802b1b8 <_vfiprintf_r+0x6a4>
 802b22a:	4692      	mov	sl, r2
 802b22c:	e7f3      	b.n	802b216 <_vfiprintf_r+0x702>
 802b22e:	f004 030f 	and.w	r3, r4, #15
 802b232:	9a05      	ldr	r2, [sp, #20]
 802b234:	0924      	lsrs	r4, r4, #4
 802b236:	5cd3      	ldrb	r3, [r2, r3]
 802b238:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802b23c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802b240:	092d      	lsrs	r5, r5, #4
 802b242:	ea54 0305 	orrs.w	r3, r4, r5
 802b246:	d1f2      	bne.n	802b22e <_vfiprintf_r+0x71a>
 802b248:	e0e0      	b.n	802b40c <_vfiprintf_r+0x8f8>
 802b24a:	b923      	cbnz	r3, 802b256 <_vfiprintf_r+0x742>
 802b24c:	f01a 0f01 	tst.w	sl, #1
 802b250:	d001      	beq.n	802b256 <_vfiprintf_r+0x742>
 802b252:	2430      	movs	r4, #48	@ 0x30
 802b254:	e7a3      	b.n	802b19e <_vfiprintf_r+0x68a>
 802b256:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802b25a:	e0d7      	b.n	802b40c <_vfiprintf_r+0x8f8>
 802b25c:	2b00      	cmp	r3, #0
 802b25e:	f000 80a3 	beq.w	802b3a8 <_vfiprintf_r+0x894>
 802b262:	2400      	movs	r4, #0
 802b264:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802b268:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802b26c:	46a8      	mov	r8, r5
 802b26e:	e5e0      	b.n	802ae32 <_vfiprintf_r+0x31e>
 802b270:	0803ad77 	.word	0x0803ad77
 802b274:	0803ad67 	.word	0x0803ad67
 802b278:	0803ad34 	.word	0x0803ad34
 802b27c:	2110      	movs	r1, #16
 802b27e:	6071      	str	r1, [r6, #4]
 802b280:	2a07      	cmp	r2, #7
 802b282:	4461      	add	r1, ip
 802b284:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802b288:	dd08      	ble.n	802b29c <_vfiprintf_r+0x788>
 802b28a:	9800      	ldr	r0, [sp, #0]
 802b28c:	aa0e      	add	r2, sp, #56	@ 0x38
 802b28e:	4639      	mov	r1, r7
 802b290:	f7ff fc0e 	bl	802aab0 <__sprint_r>
 802b294:	2800      	cmp	r0, #0
 802b296:	d166      	bne.n	802b366 <_vfiprintf_r+0x852>
 802b298:	4b60      	ldr	r3, [pc, #384]	@ (802b41c <_vfiprintf_r+0x908>)
 802b29a:	a811      	add	r0, sp, #68	@ 0x44
 802b29c:	3d10      	subs	r5, #16
 802b29e:	4606      	mov	r6, r0
 802b2a0:	e694      	b.n	802afcc <_vfiprintf_r+0x4b8>
 802b2a2:	4606      	mov	r6, r0
 802b2a4:	e6ac      	b.n	802b000 <_vfiprintf_r+0x4ec>
 802b2a6:	9800      	ldr	r0, [sp, #0]
 802b2a8:	aa0e      	add	r2, sp, #56	@ 0x38
 802b2aa:	4639      	mov	r1, r7
 802b2ac:	f7ff fc00 	bl	802aab0 <__sprint_r>
 802b2b0:	2800      	cmp	r0, #0
 802b2b2:	d158      	bne.n	802b366 <_vfiprintf_r+0x852>
 802b2b4:	ae11      	add	r6, sp, #68	@ 0x44
 802b2b6:	e6b5      	b.n	802b024 <_vfiprintf_r+0x510>
 802b2b8:	9800      	ldr	r0, [sp, #0]
 802b2ba:	aa0e      	add	r2, sp, #56	@ 0x38
 802b2bc:	4639      	mov	r1, r7
 802b2be:	f7ff fbf7 	bl	802aab0 <__sprint_r>
 802b2c2:	2800      	cmp	r0, #0
 802b2c4:	d14f      	bne.n	802b366 <_vfiprintf_r+0x852>
 802b2c6:	ae11      	add	r6, sp, #68	@ 0x44
 802b2c8:	e6bc      	b.n	802b044 <_vfiprintf_r+0x530>
 802b2ca:	2110      	movs	r1, #16
 802b2cc:	6071      	str	r1, [r6, #4]
 802b2ce:	2a07      	cmp	r2, #7
 802b2d0:	4461      	add	r1, ip
 802b2d2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802b2d6:	dd08      	ble.n	802b2ea <_vfiprintf_r+0x7d6>
 802b2d8:	9800      	ldr	r0, [sp, #0]
 802b2da:	aa0e      	add	r2, sp, #56	@ 0x38
 802b2dc:	4639      	mov	r1, r7
 802b2de:	f7ff fbe7 	bl	802aab0 <__sprint_r>
 802b2e2:	2800      	cmp	r0, #0
 802b2e4:	d13f      	bne.n	802b366 <_vfiprintf_r+0x852>
 802b2e6:	4b4e      	ldr	r3, [pc, #312]	@ (802b420 <_vfiprintf_r+0x90c>)
 802b2e8:	a811      	add	r0, sp, #68	@ 0x44
 802b2ea:	3d10      	subs	r5, #16
 802b2ec:	4606      	mov	r6, r0
 802b2ee:	e6b2      	b.n	802b056 <_vfiprintf_r+0x542>
 802b2f0:	4606      	mov	r6, r0
 802b2f2:	e6ca      	b.n	802b08a <_vfiprintf_r+0x576>
 802b2f4:	2010      	movs	r0, #16
 802b2f6:	4402      	add	r2, r0
 802b2f8:	2b07      	cmp	r3, #7
 802b2fa:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802b2fe:	6070      	str	r0, [r6, #4]
 802b300:	dd06      	ble.n	802b310 <_vfiprintf_r+0x7fc>
 802b302:	9800      	ldr	r0, [sp, #0]
 802b304:	aa0e      	add	r2, sp, #56	@ 0x38
 802b306:	4639      	mov	r1, r7
 802b308:	f7ff fbd2 	bl	802aab0 <__sprint_r>
 802b30c:	bb58      	cbnz	r0, 802b366 <_vfiprintf_r+0x852>
 802b30e:	a911      	add	r1, sp, #68	@ 0x44
 802b310:	3c10      	subs	r4, #16
 802b312:	460e      	mov	r6, r1
 802b314:	e6bd      	b.n	802b092 <_vfiprintf_r+0x57e>
 802b316:	460e      	mov	r6, r1
 802b318:	e6d6      	b.n	802b0c8 <_vfiprintf_r+0x5b4>
 802b31a:	9800      	ldr	r0, [sp, #0]
 802b31c:	aa0e      	add	r2, sp, #56	@ 0x38
 802b31e:	4639      	mov	r1, r7
 802b320:	f7ff fbc6 	bl	802aab0 <__sprint_r>
 802b324:	b9f8      	cbnz	r0, 802b366 <_vfiprintf_r+0x852>
 802b326:	ab11      	add	r3, sp, #68	@ 0x44
 802b328:	e6de      	b.n	802b0e8 <_vfiprintf_r+0x5d4>
 802b32a:	9a02      	ldr	r2, [sp, #8]
 802b32c:	9904      	ldr	r1, [sp, #16]
 802b32e:	1a54      	subs	r4, r2, r1
 802b330:	2c00      	cmp	r4, #0
 802b332:	f77f aedd 	ble.w	802b0f0 <_vfiprintf_r+0x5dc>
 802b336:	4d39      	ldr	r5, [pc, #228]	@ (802b41c <_vfiprintf_r+0x908>)
 802b338:	2610      	movs	r6, #16
 802b33a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802b33e:	2c10      	cmp	r4, #16
 802b340:	f102 0201 	add.w	r2, r2, #1
 802b344:	601d      	str	r5, [r3, #0]
 802b346:	dc1d      	bgt.n	802b384 <_vfiprintf_r+0x870>
 802b348:	605c      	str	r4, [r3, #4]
 802b34a:	2a07      	cmp	r2, #7
 802b34c:	440c      	add	r4, r1
 802b34e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802b352:	f77f aecd 	ble.w	802b0f0 <_vfiprintf_r+0x5dc>
 802b356:	9800      	ldr	r0, [sp, #0]
 802b358:	aa0e      	add	r2, sp, #56	@ 0x38
 802b35a:	4639      	mov	r1, r7
 802b35c:	f7ff fba8 	bl	802aab0 <__sprint_r>
 802b360:	2800      	cmp	r0, #0
 802b362:	f43f aec5 	beq.w	802b0f0 <_vfiprintf_r+0x5dc>
 802b366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802b368:	07d9      	lsls	r1, r3, #31
 802b36a:	d405      	bmi.n	802b378 <_vfiprintf_r+0x864>
 802b36c:	89bb      	ldrh	r3, [r7, #12]
 802b36e:	059a      	lsls	r2, r3, #22
 802b370:	d402      	bmi.n	802b378 <_vfiprintf_r+0x864>
 802b372:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802b374:	f002 f877 	bl	802d466 <__retarget_lock_release_recursive>
 802b378:	89bb      	ldrh	r3, [r7, #12]
 802b37a:	065b      	lsls	r3, r3, #25
 802b37c:	f57f abfb 	bpl.w	802ab76 <_vfiprintf_r+0x62>
 802b380:	f7ff bbf6 	b.w	802ab70 <_vfiprintf_r+0x5c>
 802b384:	3110      	adds	r1, #16
 802b386:	2a07      	cmp	r2, #7
 802b388:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802b38c:	605e      	str	r6, [r3, #4]
 802b38e:	dc02      	bgt.n	802b396 <_vfiprintf_r+0x882>
 802b390:	3308      	adds	r3, #8
 802b392:	3c10      	subs	r4, #16
 802b394:	e7d1      	b.n	802b33a <_vfiprintf_r+0x826>
 802b396:	9800      	ldr	r0, [sp, #0]
 802b398:	aa0e      	add	r2, sp, #56	@ 0x38
 802b39a:	4639      	mov	r1, r7
 802b39c:	f7ff fb88 	bl	802aab0 <__sprint_r>
 802b3a0:	2800      	cmp	r0, #0
 802b3a2:	d1e0      	bne.n	802b366 <_vfiprintf_r+0x852>
 802b3a4:	ab11      	add	r3, sp, #68	@ 0x44
 802b3a6:	e7f4      	b.n	802b392 <_vfiprintf_r+0x87e>
 802b3a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b3aa:	b913      	cbnz	r3, 802b3b2 <_vfiprintf_r+0x89e>
 802b3ac:	2300      	movs	r3, #0
 802b3ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b3b0:	e7d9      	b.n	802b366 <_vfiprintf_r+0x852>
 802b3b2:	9800      	ldr	r0, [sp, #0]
 802b3b4:	aa0e      	add	r2, sp, #56	@ 0x38
 802b3b6:	4639      	mov	r1, r7
 802b3b8:	f7ff fb7a 	bl	802aab0 <__sprint_r>
 802b3bc:	2800      	cmp	r0, #0
 802b3be:	d0f5      	beq.n	802b3ac <_vfiprintf_r+0x898>
 802b3c0:	e7d1      	b.n	802b366 <_vfiprintf_r+0x852>
 802b3c2:	ea54 0205 	orrs.w	r2, r4, r5
 802b3c6:	f8cd a010 	str.w	sl, [sp, #16]
 802b3ca:	f43f ada6 	beq.w	802af1a <_vfiprintf_r+0x406>
 802b3ce:	2b01      	cmp	r3, #1
 802b3d0:	f43f aedf 	beq.w	802b192 <_vfiprintf_r+0x67e>
 802b3d4:	2b02      	cmp	r3, #2
 802b3d6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802b3da:	f43f af28 	beq.w	802b22e <_vfiprintf_r+0x71a>
 802b3de:	f004 0307 	and.w	r3, r4, #7
 802b3e2:	08e4      	lsrs	r4, r4, #3
 802b3e4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802b3e8:	08ed      	lsrs	r5, r5, #3
 802b3ea:	3330      	adds	r3, #48	@ 0x30
 802b3ec:	ea54 0105 	orrs.w	r1, r4, r5
 802b3f0:	464a      	mov	r2, r9
 802b3f2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802b3f6:	d1f2      	bne.n	802b3de <_vfiprintf_r+0x8ca>
 802b3f8:	9904      	ldr	r1, [sp, #16]
 802b3fa:	07c8      	lsls	r0, r1, #31
 802b3fc:	d506      	bpl.n	802b40c <_vfiprintf_r+0x8f8>
 802b3fe:	2b30      	cmp	r3, #48	@ 0x30
 802b400:	d004      	beq.n	802b40c <_vfiprintf_r+0x8f8>
 802b402:	2330      	movs	r3, #48	@ 0x30
 802b404:	f809 3c01 	strb.w	r3, [r9, #-1]
 802b408:	f1a2 0902 	sub.w	r9, r2, #2
 802b40c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802b40e:	eba3 0309 	sub.w	r3, r3, r9
 802b412:	9c01      	ldr	r4, [sp, #4]
 802b414:	f8dd a010 	ldr.w	sl, [sp, #16]
 802b418:	9301      	str	r3, [sp, #4]
 802b41a:	e5bb      	b.n	802af94 <_vfiprintf_r+0x480>
 802b41c:	0803ad77 	.word	0x0803ad77
 802b420:	0803ad67 	.word	0x0803ad67

0802b424 <__sbprintf>:
 802b424:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b426:	461f      	mov	r7, r3
 802b428:	898b      	ldrh	r3, [r1, #12]
 802b42a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802b42e:	f023 0302 	bic.w	r3, r3, #2
 802b432:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b436:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b438:	9319      	str	r3, [sp, #100]	@ 0x64
 802b43a:	89cb      	ldrh	r3, [r1, #14]
 802b43c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b440:	69cb      	ldr	r3, [r1, #28]
 802b442:	9307      	str	r3, [sp, #28]
 802b444:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 802b446:	9309      	str	r3, [sp, #36]	@ 0x24
 802b448:	ab1a      	add	r3, sp, #104	@ 0x68
 802b44a:	9300      	str	r3, [sp, #0]
 802b44c:	9304      	str	r3, [sp, #16]
 802b44e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b452:	4615      	mov	r5, r2
 802b454:	4606      	mov	r6, r0
 802b456:	9302      	str	r3, [sp, #8]
 802b458:	9305      	str	r3, [sp, #20]
 802b45a:	a816      	add	r0, sp, #88	@ 0x58
 802b45c:	2300      	movs	r3, #0
 802b45e:	460c      	mov	r4, r1
 802b460:	9306      	str	r3, [sp, #24]
 802b462:	f001 fffb 	bl	802d45c <__retarget_lock_init_recursive>
 802b466:	462a      	mov	r2, r5
 802b468:	463b      	mov	r3, r7
 802b46a:	4669      	mov	r1, sp
 802b46c:	4630      	mov	r0, r6
 802b46e:	f7ff fb51 	bl	802ab14 <_vfiprintf_r>
 802b472:	1e05      	subs	r5, r0, #0
 802b474:	db07      	blt.n	802b486 <__sbprintf+0x62>
 802b476:	4669      	mov	r1, sp
 802b478:	4630      	mov	r0, r6
 802b47a:	f000 f9d1 	bl	802b820 <_fflush_r>
 802b47e:	2800      	cmp	r0, #0
 802b480:	bf18      	it	ne
 802b482:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802b486:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802b48a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802b48c:	065b      	lsls	r3, r3, #25
 802b48e:	bf42      	ittt	mi
 802b490:	89a3      	ldrhmi	r3, [r4, #12]
 802b492:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 802b496:	81a3      	strhmi	r3, [r4, #12]
 802b498:	f001 ffe1 	bl	802d45e <__retarget_lock_close_recursive>
 802b49c:	4628      	mov	r0, r5
 802b49e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802b4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b4a4 <putchar>:
 802b4a4:	4b02      	ldr	r3, [pc, #8]	@ (802b4b0 <putchar+0xc>)
 802b4a6:	4601      	mov	r1, r0
 802b4a8:	6818      	ldr	r0, [r3, #0]
 802b4aa:	6882      	ldr	r2, [r0, #8]
 802b4ac:	f007 bacc 	b.w	8032a48 <_putc_r>
 802b4b0:	200002d8 	.word	0x200002d8

0802b4b4 <_puts_r>:
 802b4b4:	b530      	push	{r4, r5, lr}
 802b4b6:	4605      	mov	r5, r0
 802b4b8:	b089      	sub	sp, #36	@ 0x24
 802b4ba:	4608      	mov	r0, r1
 802b4bc:	460c      	mov	r4, r1
 802b4be:	f7e4 feef 	bl	80102a0 <strlen>
 802b4c2:	4b1e      	ldr	r3, [pc, #120]	@ (802b53c <_puts_r+0x88>)
 802b4c4:	9306      	str	r3, [sp, #24]
 802b4c6:	2301      	movs	r3, #1
 802b4c8:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802b4cc:	9307      	str	r3, [sp, #28]
 802b4ce:	4418      	add	r0, r3
 802b4d0:	ab04      	add	r3, sp, #16
 802b4d2:	9301      	str	r3, [sp, #4]
 802b4d4:	2302      	movs	r3, #2
 802b4d6:	9302      	str	r3, [sp, #8]
 802b4d8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802b4da:	68ac      	ldr	r4, [r5, #8]
 802b4dc:	9003      	str	r0, [sp, #12]
 802b4de:	b913      	cbnz	r3, 802b4e6 <_puts_r+0x32>
 802b4e0:	4628      	mov	r0, r5
 802b4e2:	f000 fadf 	bl	802baa4 <__sinit>
 802b4e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b4e8:	07db      	lsls	r3, r3, #31
 802b4ea:	d405      	bmi.n	802b4f8 <_puts_r+0x44>
 802b4ec:	89a3      	ldrh	r3, [r4, #12]
 802b4ee:	0598      	lsls	r0, r3, #22
 802b4f0:	d402      	bmi.n	802b4f8 <_puts_r+0x44>
 802b4f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b4f4:	f001 ffb5 	bl	802d462 <__retarget_lock_acquire_recursive>
 802b4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b4fc:	0499      	lsls	r1, r3, #18
 802b4fe:	d406      	bmi.n	802b50e <_puts_r+0x5a>
 802b500:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b504:	81a3      	strh	r3, [r4, #12]
 802b506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b508:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b50c:	6663      	str	r3, [r4, #100]	@ 0x64
 802b50e:	4628      	mov	r0, r5
 802b510:	aa01      	add	r2, sp, #4
 802b512:	4621      	mov	r1, r4
 802b514:	f000 fb18 	bl	802bb48 <__sfvwrite_r>
 802b518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b51a:	2800      	cmp	r0, #0
 802b51c:	bf0c      	ite	eq
 802b51e:	250a      	moveq	r5, #10
 802b520:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 802b524:	07da      	lsls	r2, r3, #31
 802b526:	d405      	bmi.n	802b534 <_puts_r+0x80>
 802b528:	89a3      	ldrh	r3, [r4, #12]
 802b52a:	059b      	lsls	r3, r3, #22
 802b52c:	d402      	bmi.n	802b534 <_puts_r+0x80>
 802b52e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b530:	f001 ff99 	bl	802d466 <__retarget_lock_release_recursive>
 802b534:	4628      	mov	r0, r5
 802b536:	b009      	add	sp, #36	@ 0x24
 802b538:	bd30      	pop	{r4, r5, pc}
 802b53a:	bf00      	nop
 802b53c:	0803ad11 	.word	0x0803ad11

0802b540 <puts>:
 802b540:	4b02      	ldr	r3, [pc, #8]	@ (802b54c <puts+0xc>)
 802b542:	4601      	mov	r1, r0
 802b544:	6818      	ldr	r0, [r3, #0]
 802b546:	f7ff bfb5 	b.w	802b4b4 <_puts_r>
 802b54a:	bf00      	nop
 802b54c:	200002d8 	.word	0x200002d8

0802b550 <srand>:
 802b550:	4b03      	ldr	r3, [pc, #12]	@ (802b560 <srand+0x10>)
 802b552:	681b      	ldr	r3, [r3, #0]
 802b554:	2200      	movs	r2, #0
 802b556:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 802b55a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 802b55e:	4770      	bx	lr
 802b560:	200002d8 	.word	0x200002d8

0802b564 <rand>:
 802b564:	4b0a      	ldr	r3, [pc, #40]	@ (802b590 <rand+0x2c>)
 802b566:	480b      	ldr	r0, [pc, #44]	@ (802b594 <rand+0x30>)
 802b568:	6819      	ldr	r1, [r3, #0]
 802b56a:	4a0b      	ldr	r2, [pc, #44]	@ (802b598 <rand+0x34>)
 802b56c:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 802b570:	b510      	push	{r4, lr}
 802b572:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 802b576:	4358      	muls	r0, r3
 802b578:	fb02 0004 	mla	r0, r2, r4, r0
 802b57c:	fba3 3202 	umull	r3, r2, r3, r2
 802b580:	3301      	adds	r3, #1
 802b582:	eb40 0002 	adc.w	r0, r0, r2
 802b586:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 802b58a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802b58e:	bd10      	pop	{r4, pc}
 802b590:	200002d8 	.word	0x200002d8
 802b594:	5851f42d 	.word	0x5851f42d
 802b598:	4c957f2d 	.word	0x4c957f2d

0802b59c <snprintf>:
 802b59c:	b40c      	push	{r2, r3}
 802b59e:	b530      	push	{r4, r5, lr}
 802b5a0:	4b17      	ldr	r3, [pc, #92]	@ (802b600 <snprintf+0x64>)
 802b5a2:	1e0c      	subs	r4, r1, #0
 802b5a4:	681d      	ldr	r5, [r3, #0]
 802b5a6:	b09d      	sub	sp, #116	@ 0x74
 802b5a8:	da08      	bge.n	802b5bc <snprintf+0x20>
 802b5aa:	238b      	movs	r3, #139	@ 0x8b
 802b5ac:	602b      	str	r3, [r5, #0]
 802b5ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b5b2:	b01d      	add	sp, #116	@ 0x74
 802b5b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b5b8:	b002      	add	sp, #8
 802b5ba:	4770      	bx	lr
 802b5bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802b5c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802b5c4:	bf14      	ite	ne
 802b5c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802b5ca:	4623      	moveq	r3, r4
 802b5cc:	9304      	str	r3, [sp, #16]
 802b5ce:	9307      	str	r3, [sp, #28]
 802b5d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802b5d4:	9002      	str	r0, [sp, #8]
 802b5d6:	9006      	str	r0, [sp, #24]
 802b5d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 802b5dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802b5de:	ab21      	add	r3, sp, #132	@ 0x84
 802b5e0:	a902      	add	r1, sp, #8
 802b5e2:	4628      	mov	r0, r5
 802b5e4:	9301      	str	r3, [sp, #4]
 802b5e6:	f004 fe7b 	bl	80302e0 <_svfprintf_r>
 802b5ea:	1c43      	adds	r3, r0, #1
 802b5ec:	bfbc      	itt	lt
 802b5ee:	238b      	movlt	r3, #139	@ 0x8b
 802b5f0:	602b      	strlt	r3, [r5, #0]
 802b5f2:	2c00      	cmp	r4, #0
 802b5f4:	d0dd      	beq.n	802b5b2 <snprintf+0x16>
 802b5f6:	9b02      	ldr	r3, [sp, #8]
 802b5f8:	2200      	movs	r2, #0
 802b5fa:	701a      	strb	r2, [r3, #0]
 802b5fc:	e7d9      	b.n	802b5b2 <snprintf+0x16>
 802b5fe:	bf00      	nop
 802b600:	200002d8 	.word	0x200002d8

0802b604 <_strtol_l.constprop.0>:
 802b604:	2b24      	cmp	r3, #36	@ 0x24
 802b606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b60a:	4686      	mov	lr, r0
 802b60c:	4690      	mov	r8, r2
 802b60e:	d801      	bhi.n	802b614 <_strtol_l.constprop.0+0x10>
 802b610:	2b01      	cmp	r3, #1
 802b612:	d106      	bne.n	802b622 <_strtol_l.constprop.0+0x1e>
 802b614:	f001 fef0 	bl	802d3f8 <__errno>
 802b618:	2316      	movs	r3, #22
 802b61a:	6003      	str	r3, [r0, #0]
 802b61c:	2000      	movs	r0, #0
 802b61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b622:	4834      	ldr	r0, [pc, #208]	@ (802b6f4 <_strtol_l.constprop.0+0xf0>)
 802b624:	460d      	mov	r5, r1
 802b626:	462a      	mov	r2, r5
 802b628:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b62c:	5d06      	ldrb	r6, [r0, r4]
 802b62e:	f016 0608 	ands.w	r6, r6, #8
 802b632:	d1f8      	bne.n	802b626 <_strtol_l.constprop.0+0x22>
 802b634:	2c2d      	cmp	r4, #45	@ 0x2d
 802b636:	d12d      	bne.n	802b694 <_strtol_l.constprop.0+0x90>
 802b638:	782c      	ldrb	r4, [r5, #0]
 802b63a:	2601      	movs	r6, #1
 802b63c:	1c95      	adds	r5, r2, #2
 802b63e:	f033 0210 	bics.w	r2, r3, #16
 802b642:	d109      	bne.n	802b658 <_strtol_l.constprop.0+0x54>
 802b644:	2c30      	cmp	r4, #48	@ 0x30
 802b646:	d12a      	bne.n	802b69e <_strtol_l.constprop.0+0x9a>
 802b648:	782a      	ldrb	r2, [r5, #0]
 802b64a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802b64e:	2a58      	cmp	r2, #88	@ 0x58
 802b650:	d125      	bne.n	802b69e <_strtol_l.constprop.0+0x9a>
 802b652:	786c      	ldrb	r4, [r5, #1]
 802b654:	2310      	movs	r3, #16
 802b656:	3502      	adds	r5, #2
 802b658:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802b65c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 802b660:	2200      	movs	r2, #0
 802b662:	fbbc f9f3 	udiv	r9, ip, r3
 802b666:	4610      	mov	r0, r2
 802b668:	fb03 ca19 	mls	sl, r3, r9, ip
 802b66c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802b670:	2f09      	cmp	r7, #9
 802b672:	d81b      	bhi.n	802b6ac <_strtol_l.constprop.0+0xa8>
 802b674:	463c      	mov	r4, r7
 802b676:	42a3      	cmp	r3, r4
 802b678:	dd27      	ble.n	802b6ca <_strtol_l.constprop.0+0xc6>
 802b67a:	1c57      	adds	r7, r2, #1
 802b67c:	d007      	beq.n	802b68e <_strtol_l.constprop.0+0x8a>
 802b67e:	4581      	cmp	r9, r0
 802b680:	d320      	bcc.n	802b6c4 <_strtol_l.constprop.0+0xc0>
 802b682:	d101      	bne.n	802b688 <_strtol_l.constprop.0+0x84>
 802b684:	45a2      	cmp	sl, r4
 802b686:	db1d      	blt.n	802b6c4 <_strtol_l.constprop.0+0xc0>
 802b688:	fb00 4003 	mla	r0, r0, r3, r4
 802b68c:	2201      	movs	r2, #1
 802b68e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b692:	e7eb      	b.n	802b66c <_strtol_l.constprop.0+0x68>
 802b694:	2c2b      	cmp	r4, #43	@ 0x2b
 802b696:	bf04      	itt	eq
 802b698:	782c      	ldrbeq	r4, [r5, #0]
 802b69a:	1c95      	addeq	r5, r2, #2
 802b69c:	e7cf      	b.n	802b63e <_strtol_l.constprop.0+0x3a>
 802b69e:	2b00      	cmp	r3, #0
 802b6a0:	d1da      	bne.n	802b658 <_strtol_l.constprop.0+0x54>
 802b6a2:	2c30      	cmp	r4, #48	@ 0x30
 802b6a4:	bf0c      	ite	eq
 802b6a6:	2308      	moveq	r3, #8
 802b6a8:	230a      	movne	r3, #10
 802b6aa:	e7d5      	b.n	802b658 <_strtol_l.constprop.0+0x54>
 802b6ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802b6b0:	2f19      	cmp	r7, #25
 802b6b2:	d801      	bhi.n	802b6b8 <_strtol_l.constprop.0+0xb4>
 802b6b4:	3c37      	subs	r4, #55	@ 0x37
 802b6b6:	e7de      	b.n	802b676 <_strtol_l.constprop.0+0x72>
 802b6b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802b6bc:	2f19      	cmp	r7, #25
 802b6be:	d804      	bhi.n	802b6ca <_strtol_l.constprop.0+0xc6>
 802b6c0:	3c57      	subs	r4, #87	@ 0x57
 802b6c2:	e7d8      	b.n	802b676 <_strtol_l.constprop.0+0x72>
 802b6c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802b6c8:	e7e1      	b.n	802b68e <_strtol_l.constprop.0+0x8a>
 802b6ca:	1c53      	adds	r3, r2, #1
 802b6cc:	d108      	bne.n	802b6e0 <_strtol_l.constprop.0+0xdc>
 802b6ce:	2322      	movs	r3, #34	@ 0x22
 802b6d0:	f8ce 3000 	str.w	r3, [lr]
 802b6d4:	4660      	mov	r0, ip
 802b6d6:	f1b8 0f00 	cmp.w	r8, #0
 802b6da:	d0a0      	beq.n	802b61e <_strtol_l.constprop.0+0x1a>
 802b6dc:	1e69      	subs	r1, r5, #1
 802b6de:	e006      	b.n	802b6ee <_strtol_l.constprop.0+0xea>
 802b6e0:	b106      	cbz	r6, 802b6e4 <_strtol_l.constprop.0+0xe0>
 802b6e2:	4240      	negs	r0, r0
 802b6e4:	f1b8 0f00 	cmp.w	r8, #0
 802b6e8:	d099      	beq.n	802b61e <_strtol_l.constprop.0+0x1a>
 802b6ea:	2a00      	cmp	r2, #0
 802b6ec:	d1f6      	bne.n	802b6dc <_strtol_l.constprop.0+0xd8>
 802b6ee:	f8c8 1000 	str.w	r1, [r8]
 802b6f2:	e794      	b.n	802b61e <_strtol_l.constprop.0+0x1a>
 802b6f4:	0803b0d1 	.word	0x0803b0d1

0802b6f8 <_strtol_r>:
 802b6f8:	f7ff bf84 	b.w	802b604 <_strtol_l.constprop.0>

0802b6fc <strtol>:
 802b6fc:	4613      	mov	r3, r2
 802b6fe:	460a      	mov	r2, r1
 802b700:	4601      	mov	r1, r0
 802b702:	4802      	ldr	r0, [pc, #8]	@ (802b70c <strtol+0x10>)
 802b704:	6800      	ldr	r0, [r0, #0]
 802b706:	f7ff bf7d 	b.w	802b604 <_strtol_l.constprop.0>
 802b70a:	bf00      	nop
 802b70c:	200002d8 	.word	0x200002d8

0802b710 <__sflush_r>:
 802b710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b714:	4605      	mov	r5, r0
 802b716:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802b71a:	0706      	lsls	r6, r0, #28
 802b71c:	460c      	mov	r4, r1
 802b71e:	d457      	bmi.n	802b7d0 <__sflush_r+0xc0>
 802b720:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 802b724:	818b      	strh	r3, [r1, #12]
 802b726:	684b      	ldr	r3, [r1, #4]
 802b728:	2b00      	cmp	r3, #0
 802b72a:	dc02      	bgt.n	802b732 <__sflush_r+0x22>
 802b72c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802b72e:	2b00      	cmp	r3, #0
 802b730:	dd4c      	ble.n	802b7cc <__sflush_r+0xbc>
 802b732:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b734:	2e00      	cmp	r6, #0
 802b736:	d049      	beq.n	802b7cc <__sflush_r+0xbc>
 802b738:	2300      	movs	r3, #0
 802b73a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802b73e:	682f      	ldr	r7, [r5, #0]
 802b740:	69e1      	ldr	r1, [r4, #28]
 802b742:	602b      	str	r3, [r5, #0]
 802b744:	d034      	beq.n	802b7b0 <__sflush_r+0xa0>
 802b746:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 802b748:	89a3      	ldrh	r3, [r4, #12]
 802b74a:	0759      	lsls	r1, r3, #29
 802b74c:	d505      	bpl.n	802b75a <__sflush_r+0x4a>
 802b74e:	6863      	ldr	r3, [r4, #4]
 802b750:	1ad2      	subs	r2, r2, r3
 802b752:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802b754:	b10b      	cbz	r3, 802b75a <__sflush_r+0x4a>
 802b756:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802b758:	1ad2      	subs	r2, r2, r3
 802b75a:	2300      	movs	r3, #0
 802b75c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b75e:	69e1      	ldr	r1, [r4, #28]
 802b760:	4628      	mov	r0, r5
 802b762:	47b0      	blx	r6
 802b764:	1c43      	adds	r3, r0, #1
 802b766:	d106      	bne.n	802b776 <__sflush_r+0x66>
 802b768:	682a      	ldr	r2, [r5, #0]
 802b76a:	2a1d      	cmp	r2, #29
 802b76c:	d848      	bhi.n	802b800 <__sflush_r+0xf0>
 802b76e:	4b2b      	ldr	r3, [pc, #172]	@ (802b81c <__sflush_r+0x10c>)
 802b770:	4113      	asrs	r3, r2
 802b772:	07de      	lsls	r6, r3, #31
 802b774:	d444      	bmi.n	802b800 <__sflush_r+0xf0>
 802b776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b77a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 802b77e:	81a2      	strh	r2, [r4, #12]
 802b780:	2200      	movs	r2, #0
 802b782:	6062      	str	r2, [r4, #4]
 802b784:	04d9      	lsls	r1, r3, #19
 802b786:	6922      	ldr	r2, [r4, #16]
 802b788:	6022      	str	r2, [r4, #0]
 802b78a:	d504      	bpl.n	802b796 <__sflush_r+0x86>
 802b78c:	1c42      	adds	r2, r0, #1
 802b78e:	d101      	bne.n	802b794 <__sflush_r+0x84>
 802b790:	682b      	ldr	r3, [r5, #0]
 802b792:	b903      	cbnz	r3, 802b796 <__sflush_r+0x86>
 802b794:	6520      	str	r0, [r4, #80]	@ 0x50
 802b796:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802b798:	602f      	str	r7, [r5, #0]
 802b79a:	b1b9      	cbz	r1, 802b7cc <__sflush_r+0xbc>
 802b79c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802b7a0:	4299      	cmp	r1, r3
 802b7a2:	d002      	beq.n	802b7aa <__sflush_r+0x9a>
 802b7a4:	4628      	mov	r0, r5
 802b7a6:	f002 fd61 	bl	802e26c <_free_r>
 802b7aa:	2300      	movs	r3, #0
 802b7ac:	6323      	str	r3, [r4, #48]	@ 0x30
 802b7ae:	e00d      	b.n	802b7cc <__sflush_r+0xbc>
 802b7b0:	2301      	movs	r3, #1
 802b7b2:	4628      	mov	r0, r5
 802b7b4:	47b0      	blx	r6
 802b7b6:	4602      	mov	r2, r0
 802b7b8:	1c50      	adds	r0, r2, #1
 802b7ba:	d1c5      	bne.n	802b748 <__sflush_r+0x38>
 802b7bc:	682b      	ldr	r3, [r5, #0]
 802b7be:	2b00      	cmp	r3, #0
 802b7c0:	d0c2      	beq.n	802b748 <__sflush_r+0x38>
 802b7c2:	2b1d      	cmp	r3, #29
 802b7c4:	d001      	beq.n	802b7ca <__sflush_r+0xba>
 802b7c6:	2b16      	cmp	r3, #22
 802b7c8:	d11a      	bne.n	802b800 <__sflush_r+0xf0>
 802b7ca:	602f      	str	r7, [r5, #0]
 802b7cc:	2000      	movs	r0, #0
 802b7ce:	e01e      	b.n	802b80e <__sflush_r+0xfe>
 802b7d0:	690f      	ldr	r7, [r1, #16]
 802b7d2:	2f00      	cmp	r7, #0
 802b7d4:	d0fa      	beq.n	802b7cc <__sflush_r+0xbc>
 802b7d6:	0783      	lsls	r3, r0, #30
 802b7d8:	680e      	ldr	r6, [r1, #0]
 802b7da:	bf08      	it	eq
 802b7dc:	694b      	ldreq	r3, [r1, #20]
 802b7de:	600f      	str	r7, [r1, #0]
 802b7e0:	bf18      	it	ne
 802b7e2:	2300      	movne	r3, #0
 802b7e4:	eba6 0807 	sub.w	r8, r6, r7
 802b7e8:	608b      	str	r3, [r1, #8]
 802b7ea:	f1b8 0f00 	cmp.w	r8, #0
 802b7ee:	dded      	ble.n	802b7cc <__sflush_r+0xbc>
 802b7f0:	69e1      	ldr	r1, [r4, #28]
 802b7f2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802b7f4:	4643      	mov	r3, r8
 802b7f6:	463a      	mov	r2, r7
 802b7f8:	4628      	mov	r0, r5
 802b7fa:	47b0      	blx	r6
 802b7fc:	2800      	cmp	r0, #0
 802b7fe:	dc08      	bgt.n	802b812 <__sflush_r+0x102>
 802b800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b808:	81a3      	strh	r3, [r4, #12]
 802b80a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802b80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b812:	4407      	add	r7, r0
 802b814:	eba8 0800 	sub.w	r8, r8, r0
 802b818:	e7e7      	b.n	802b7ea <__sflush_r+0xda>
 802b81a:	bf00      	nop
 802b81c:	dfbffffe 	.word	0xdfbffffe

0802b820 <_fflush_r>:
 802b820:	b538      	push	{r3, r4, r5, lr}
 802b822:	460c      	mov	r4, r1
 802b824:	4605      	mov	r5, r0
 802b826:	b118      	cbz	r0, 802b830 <_fflush_r+0x10>
 802b828:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802b82a:	b90b      	cbnz	r3, 802b830 <_fflush_r+0x10>
 802b82c:	f000 f93a 	bl	802baa4 <__sinit>
 802b830:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 802b834:	b1b8      	cbz	r0, 802b866 <_fflush_r+0x46>
 802b836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b838:	07db      	lsls	r3, r3, #31
 802b83a:	d404      	bmi.n	802b846 <_fflush_r+0x26>
 802b83c:	0581      	lsls	r1, r0, #22
 802b83e:	d402      	bmi.n	802b846 <_fflush_r+0x26>
 802b840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b842:	f001 fe0e 	bl	802d462 <__retarget_lock_acquire_recursive>
 802b846:	4628      	mov	r0, r5
 802b848:	4621      	mov	r1, r4
 802b84a:	f7ff ff61 	bl	802b710 <__sflush_r>
 802b84e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b850:	07da      	lsls	r2, r3, #31
 802b852:	4605      	mov	r5, r0
 802b854:	d405      	bmi.n	802b862 <_fflush_r+0x42>
 802b856:	89a3      	ldrh	r3, [r4, #12]
 802b858:	059b      	lsls	r3, r3, #22
 802b85a:	d402      	bmi.n	802b862 <_fflush_r+0x42>
 802b85c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b85e:	f001 fe02 	bl	802d466 <__retarget_lock_release_recursive>
 802b862:	4628      	mov	r0, r5
 802b864:	bd38      	pop	{r3, r4, r5, pc}
 802b866:	4605      	mov	r5, r0
 802b868:	e7fb      	b.n	802b862 <_fflush_r+0x42>
	...

0802b86c <sprintf>:
 802b86c:	b40e      	push	{r1, r2, r3}
 802b86e:	b500      	push	{lr}
 802b870:	b09c      	sub	sp, #112	@ 0x70
 802b872:	ab1d      	add	r3, sp, #116	@ 0x74
 802b874:	9002      	str	r0, [sp, #8]
 802b876:	9006      	str	r0, [sp, #24]
 802b878:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802b87c:	4809      	ldr	r0, [pc, #36]	@ (802b8a4 <sprintf+0x38>)
 802b87e:	9107      	str	r1, [sp, #28]
 802b880:	9104      	str	r1, [sp, #16]
 802b882:	4909      	ldr	r1, [pc, #36]	@ (802b8a8 <sprintf+0x3c>)
 802b884:	f853 2b04 	ldr.w	r2, [r3], #4
 802b888:	9105      	str	r1, [sp, #20]
 802b88a:	6800      	ldr	r0, [r0, #0]
 802b88c:	9301      	str	r3, [sp, #4]
 802b88e:	a902      	add	r1, sp, #8
 802b890:	f004 fd26 	bl	80302e0 <_svfprintf_r>
 802b894:	9b02      	ldr	r3, [sp, #8]
 802b896:	2200      	movs	r2, #0
 802b898:	701a      	strb	r2, [r3, #0]
 802b89a:	b01c      	add	sp, #112	@ 0x70
 802b89c:	f85d eb04 	ldr.w	lr, [sp], #4
 802b8a0:	b003      	add	sp, #12
 802b8a2:	4770      	bx	lr
 802b8a4:	200002d8 	.word	0x200002d8
 802b8a8:	ffff0208 	.word	0xffff0208

0802b8ac <sscanf>:
 802b8ac:	b40e      	push	{r1, r2, r3}
 802b8ae:	b530      	push	{r4, r5, lr}
 802b8b0:	b09c      	sub	sp, #112	@ 0x70
 802b8b2:	ac1f      	add	r4, sp, #124	@ 0x7c
 802b8b4:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802b8b8:	f854 5b04 	ldr.w	r5, [r4], #4
 802b8bc:	f8ad 2014 	strh.w	r2, [sp, #20]
 802b8c0:	9002      	str	r0, [sp, #8]
 802b8c2:	9006      	str	r0, [sp, #24]
 802b8c4:	f7e4 fcec 	bl	80102a0 <strlen>
 802b8c8:	4b0b      	ldr	r3, [pc, #44]	@ (802b8f8 <sscanf+0x4c>)
 802b8ca:	9003      	str	r0, [sp, #12]
 802b8cc:	9007      	str	r0, [sp, #28]
 802b8ce:	930a      	str	r3, [sp, #40]	@ 0x28
 802b8d0:	480a      	ldr	r0, [pc, #40]	@ (802b8fc <sscanf+0x50>)
 802b8d2:	9401      	str	r4, [sp, #4]
 802b8d4:	2300      	movs	r3, #0
 802b8d6:	930e      	str	r3, [sp, #56]	@ 0x38
 802b8d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802b8da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802b8de:	f8ad 3016 	strh.w	r3, [sp, #22]
 802b8e2:	462a      	mov	r2, r5
 802b8e4:	4623      	mov	r3, r4
 802b8e6:	a902      	add	r1, sp, #8
 802b8e8:	6800      	ldr	r0, [r0, #0]
 802b8ea:	f005 ff3b 	bl	8031764 <__ssvfscanf_r>
 802b8ee:	b01c      	add	sp, #112	@ 0x70
 802b8f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b8f4:	b003      	add	sp, #12
 802b8f6:	4770      	bx	lr
 802b8f8:	0802b923 	.word	0x0802b923
 802b8fc:	200002d8 	.word	0x200002d8

0802b900 <__sread>:
 802b900:	b510      	push	{r4, lr}
 802b902:	460c      	mov	r4, r1
 802b904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b908:	f001 fd52 	bl	802d3b0 <_read_r>
 802b90c:	2800      	cmp	r0, #0
 802b90e:	bfab      	itete	ge
 802b910:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 802b912:	89a3      	ldrhlt	r3, [r4, #12]
 802b914:	181b      	addge	r3, r3, r0
 802b916:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b91a:	bfac      	ite	ge
 802b91c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802b91e:	81a3      	strhlt	r3, [r4, #12]
 802b920:	bd10      	pop	{r4, pc}

0802b922 <__seofread>:
 802b922:	2000      	movs	r0, #0
 802b924:	4770      	bx	lr

0802b926 <__swrite>:
 802b926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b92a:	461f      	mov	r7, r3
 802b92c:	898b      	ldrh	r3, [r1, #12]
 802b92e:	05db      	lsls	r3, r3, #23
 802b930:	4605      	mov	r5, r0
 802b932:	460c      	mov	r4, r1
 802b934:	4616      	mov	r6, r2
 802b936:	d505      	bpl.n	802b944 <__swrite+0x1e>
 802b938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b93c:	2302      	movs	r3, #2
 802b93e:	2200      	movs	r2, #0
 802b940:	f001 fd24 	bl	802d38c <_lseek_r>
 802b944:	89a3      	ldrh	r3, [r4, #12]
 802b946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b94a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b94e:	81a3      	strh	r3, [r4, #12]
 802b950:	4632      	mov	r2, r6
 802b952:	463b      	mov	r3, r7
 802b954:	4628      	mov	r0, r5
 802b956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b95a:	f001 bd3b 	b.w	802d3d4 <_write_r>

0802b95e <__sseek>:
 802b95e:	b510      	push	{r4, lr}
 802b960:	460c      	mov	r4, r1
 802b962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b966:	f001 fd11 	bl	802d38c <_lseek_r>
 802b96a:	1c43      	adds	r3, r0, #1
 802b96c:	89a3      	ldrh	r3, [r4, #12]
 802b96e:	bf15      	itete	ne
 802b970:	6520      	strne	r0, [r4, #80]	@ 0x50
 802b972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b97a:	81a3      	strheq	r3, [r4, #12]
 802b97c:	bf18      	it	ne
 802b97e:	81a3      	strhne	r3, [r4, #12]
 802b980:	bd10      	pop	{r4, pc}

0802b982 <__sclose>:
 802b982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b986:	f001 bcc5 	b.w	802d314 <_close_r>
	...

0802b98c <std>:
 802b98c:	2300      	movs	r3, #0
 802b98e:	b510      	push	{r4, lr}
 802b990:	4604      	mov	r4, r0
 802b992:	e9c0 3300 	strd	r3, r3, [r0]
 802b996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b99a:	6083      	str	r3, [r0, #8]
 802b99c:	8181      	strh	r1, [r0, #12]
 802b99e:	6643      	str	r3, [r0, #100]	@ 0x64
 802b9a0:	81c2      	strh	r2, [r0, #14]
 802b9a2:	6183      	str	r3, [r0, #24]
 802b9a4:	4619      	mov	r1, r3
 802b9a6:	2208      	movs	r2, #8
 802b9a8:	305c      	adds	r0, #92	@ 0x5c
 802b9aa:	f000 fb21 	bl	802bff0 <memset>
 802b9ae:	4b0d      	ldr	r3, [pc, #52]	@ (802b9e4 <std+0x58>)
 802b9b0:	6223      	str	r3, [r4, #32]
 802b9b2:	4b0d      	ldr	r3, [pc, #52]	@ (802b9e8 <std+0x5c>)
 802b9b4:	6263      	str	r3, [r4, #36]	@ 0x24
 802b9b6:	4b0d      	ldr	r3, [pc, #52]	@ (802b9ec <std+0x60>)
 802b9b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b9ba:	4b0d      	ldr	r3, [pc, #52]	@ (802b9f0 <std+0x64>)
 802b9bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b9be:	4b0d      	ldr	r3, [pc, #52]	@ (802b9f4 <std+0x68>)
 802b9c0:	61e4      	str	r4, [r4, #28]
 802b9c2:	429c      	cmp	r4, r3
 802b9c4:	d006      	beq.n	802b9d4 <std+0x48>
 802b9c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b9ca:	4294      	cmp	r4, r2
 802b9cc:	d002      	beq.n	802b9d4 <std+0x48>
 802b9ce:	33d0      	adds	r3, #208	@ 0xd0
 802b9d0:	429c      	cmp	r4, r3
 802b9d2:	d105      	bne.n	802b9e0 <std+0x54>
 802b9d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b9dc:	f001 bd3e 	b.w	802d45c <__retarget_lock_init_recursive>
 802b9e0:	bd10      	pop	{r4, pc}
 802b9e2:	bf00      	nop
 802b9e4:	0802b901 	.word	0x0802b901
 802b9e8:	0802b927 	.word	0x0802b927
 802b9ec:	0802b95f 	.word	0x0802b95f
 802b9f0:	0802b983 	.word	0x0802b983
 802b9f4:	20019784 	.word	0x20019784

0802b9f8 <stdio_exit_handler>:
 802b9f8:	4a02      	ldr	r2, [pc, #8]	@ (802ba04 <stdio_exit_handler+0xc>)
 802b9fa:	4903      	ldr	r1, [pc, #12]	@ (802ba08 <stdio_exit_handler+0x10>)
 802b9fc:	4803      	ldr	r0, [pc, #12]	@ (802ba0c <stdio_exit_handler+0x14>)
 802b9fe:	f000 b9ef 	b.w	802bde0 <_fwalk_sglue>
 802ba02:	bf00      	nop
 802ba04:	20000158 	.word	0x20000158
 802ba08:	080333a1 	.word	0x080333a1
 802ba0c:	200002e0 	.word	0x200002e0

0802ba10 <cleanup_stdio>:
 802ba10:	6841      	ldr	r1, [r0, #4]
 802ba12:	4b0c      	ldr	r3, [pc, #48]	@ (802ba44 <cleanup_stdio+0x34>)
 802ba14:	4299      	cmp	r1, r3
 802ba16:	b510      	push	{r4, lr}
 802ba18:	4604      	mov	r4, r0
 802ba1a:	d001      	beq.n	802ba20 <cleanup_stdio+0x10>
 802ba1c:	f007 fcc0 	bl	80333a0 <_fclose_r>
 802ba20:	68a1      	ldr	r1, [r4, #8]
 802ba22:	4b09      	ldr	r3, [pc, #36]	@ (802ba48 <cleanup_stdio+0x38>)
 802ba24:	4299      	cmp	r1, r3
 802ba26:	d002      	beq.n	802ba2e <cleanup_stdio+0x1e>
 802ba28:	4620      	mov	r0, r4
 802ba2a:	f007 fcb9 	bl	80333a0 <_fclose_r>
 802ba2e:	68e1      	ldr	r1, [r4, #12]
 802ba30:	4b06      	ldr	r3, [pc, #24]	@ (802ba4c <cleanup_stdio+0x3c>)
 802ba32:	4299      	cmp	r1, r3
 802ba34:	d004      	beq.n	802ba40 <cleanup_stdio+0x30>
 802ba36:	4620      	mov	r0, r4
 802ba38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ba3c:	f007 bcb0 	b.w	80333a0 <_fclose_r>
 802ba40:	bd10      	pop	{r4, pc}
 802ba42:	bf00      	nop
 802ba44:	20019784 	.word	0x20019784
 802ba48:	200197ec 	.word	0x200197ec
 802ba4c:	20019854 	.word	0x20019854

0802ba50 <global_stdio_init.part.0>:
 802ba50:	b510      	push	{r4, lr}
 802ba52:	4b0b      	ldr	r3, [pc, #44]	@ (802ba80 <global_stdio_init.part.0+0x30>)
 802ba54:	4c0b      	ldr	r4, [pc, #44]	@ (802ba84 <global_stdio_init.part.0+0x34>)
 802ba56:	4a0c      	ldr	r2, [pc, #48]	@ (802ba88 <global_stdio_init.part.0+0x38>)
 802ba58:	601a      	str	r2, [r3, #0]
 802ba5a:	4620      	mov	r0, r4
 802ba5c:	2200      	movs	r2, #0
 802ba5e:	2104      	movs	r1, #4
 802ba60:	f7ff ff94 	bl	802b98c <std>
 802ba64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802ba68:	2201      	movs	r2, #1
 802ba6a:	2109      	movs	r1, #9
 802ba6c:	f7ff ff8e 	bl	802b98c <std>
 802ba70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802ba74:	2202      	movs	r2, #2
 802ba76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ba7a:	2112      	movs	r1, #18
 802ba7c:	f7ff bf86 	b.w	802b98c <std>
 802ba80:	200198bc 	.word	0x200198bc
 802ba84:	20019784 	.word	0x20019784
 802ba88:	0802b9f9 	.word	0x0802b9f9

0802ba8c <__sfp_lock_acquire>:
 802ba8c:	4801      	ldr	r0, [pc, #4]	@ (802ba94 <__sfp_lock_acquire+0x8>)
 802ba8e:	f001 bce8 	b.w	802d462 <__retarget_lock_acquire_recursive>
 802ba92:	bf00      	nop
 802ba94:	200198ec 	.word	0x200198ec

0802ba98 <__sfp_lock_release>:
 802ba98:	4801      	ldr	r0, [pc, #4]	@ (802baa0 <__sfp_lock_release+0x8>)
 802ba9a:	f001 bce4 	b.w	802d466 <__retarget_lock_release_recursive>
 802ba9e:	bf00      	nop
 802baa0:	200198ec 	.word	0x200198ec

0802baa4 <__sinit>:
 802baa4:	b510      	push	{r4, lr}
 802baa6:	4604      	mov	r4, r0
 802baa8:	f7ff fff0 	bl	802ba8c <__sfp_lock_acquire>
 802baac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802baae:	b11b      	cbz	r3, 802bab8 <__sinit+0x14>
 802bab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bab4:	f7ff bff0 	b.w	802ba98 <__sfp_lock_release>
 802bab8:	4b04      	ldr	r3, [pc, #16]	@ (802bacc <__sinit+0x28>)
 802baba:	6363      	str	r3, [r4, #52]	@ 0x34
 802babc:	4b04      	ldr	r3, [pc, #16]	@ (802bad0 <__sinit+0x2c>)
 802babe:	681b      	ldr	r3, [r3, #0]
 802bac0:	2b00      	cmp	r3, #0
 802bac2:	d1f5      	bne.n	802bab0 <__sinit+0xc>
 802bac4:	f7ff ffc4 	bl	802ba50 <global_stdio_init.part.0>
 802bac8:	e7f2      	b.n	802bab0 <__sinit+0xc>
 802baca:	bf00      	nop
 802bacc:	0802ba11 	.word	0x0802ba11
 802bad0:	200198bc 	.word	0x200198bc

0802bad4 <_vsnprintf_r>:
 802bad4:	b530      	push	{r4, r5, lr}
 802bad6:	4614      	mov	r4, r2
 802bad8:	2c00      	cmp	r4, #0
 802bada:	b09b      	sub	sp, #108	@ 0x6c
 802badc:	4605      	mov	r5, r0
 802bade:	461a      	mov	r2, r3
 802bae0:	da05      	bge.n	802baee <_vsnprintf_r+0x1a>
 802bae2:	238b      	movs	r3, #139	@ 0x8b
 802bae4:	6003      	str	r3, [r0, #0]
 802bae6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802baea:	b01b      	add	sp, #108	@ 0x6c
 802baec:	bd30      	pop	{r4, r5, pc}
 802baee:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802baf2:	f8ad 300c 	strh.w	r3, [sp, #12]
 802baf6:	bf14      	ite	ne
 802baf8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802bafc:	4623      	moveq	r3, r4
 802bafe:	9302      	str	r3, [sp, #8]
 802bb00:	9305      	str	r3, [sp, #20]
 802bb02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802bb06:	9100      	str	r1, [sp, #0]
 802bb08:	9104      	str	r1, [sp, #16]
 802bb0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802bb0e:	4669      	mov	r1, sp
 802bb10:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802bb12:	f004 fbe5 	bl	80302e0 <_svfprintf_r>
 802bb16:	1c43      	adds	r3, r0, #1
 802bb18:	bfbc      	itt	lt
 802bb1a:	238b      	movlt	r3, #139	@ 0x8b
 802bb1c:	602b      	strlt	r3, [r5, #0]
 802bb1e:	2c00      	cmp	r4, #0
 802bb20:	d0e3      	beq.n	802baea <_vsnprintf_r+0x16>
 802bb22:	9b00      	ldr	r3, [sp, #0]
 802bb24:	2200      	movs	r2, #0
 802bb26:	701a      	strb	r2, [r3, #0]
 802bb28:	e7df      	b.n	802baea <_vsnprintf_r+0x16>
	...

0802bb2c <vsnprintf>:
 802bb2c:	b507      	push	{r0, r1, r2, lr}
 802bb2e:	9300      	str	r3, [sp, #0]
 802bb30:	4613      	mov	r3, r2
 802bb32:	460a      	mov	r2, r1
 802bb34:	4601      	mov	r1, r0
 802bb36:	4803      	ldr	r0, [pc, #12]	@ (802bb44 <vsnprintf+0x18>)
 802bb38:	6800      	ldr	r0, [r0, #0]
 802bb3a:	f7ff ffcb 	bl	802bad4 <_vsnprintf_r>
 802bb3e:	b003      	add	sp, #12
 802bb40:	f85d fb04 	ldr.w	pc, [sp], #4
 802bb44:	200002d8 	.word	0x200002d8

0802bb48 <__sfvwrite_r>:
 802bb48:	6893      	ldr	r3, [r2, #8]
 802bb4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb4e:	4606      	mov	r6, r0
 802bb50:	460c      	mov	r4, r1
 802bb52:	4691      	mov	r9, r2
 802bb54:	b91b      	cbnz	r3, 802bb5e <__sfvwrite_r+0x16>
 802bb56:	2000      	movs	r0, #0
 802bb58:	b003      	add	sp, #12
 802bb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb5e:	898b      	ldrh	r3, [r1, #12]
 802bb60:	0718      	lsls	r0, r3, #28
 802bb62:	d550      	bpl.n	802bc06 <__sfvwrite_r+0xbe>
 802bb64:	690b      	ldr	r3, [r1, #16]
 802bb66:	2b00      	cmp	r3, #0
 802bb68:	d04d      	beq.n	802bc06 <__sfvwrite_r+0xbe>
 802bb6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bb6e:	f8d9 8000 	ldr.w	r8, [r9]
 802bb72:	f013 0702 	ands.w	r7, r3, #2
 802bb76:	d16b      	bne.n	802bc50 <__sfvwrite_r+0x108>
 802bb78:	f013 0301 	ands.w	r3, r3, #1
 802bb7c:	f000 809c 	beq.w	802bcb8 <__sfvwrite_r+0x170>
 802bb80:	4638      	mov	r0, r7
 802bb82:	46ba      	mov	sl, r7
 802bb84:	46bb      	mov	fp, r7
 802bb86:	f1bb 0f00 	cmp.w	fp, #0
 802bb8a:	f000 8103 	beq.w	802bd94 <__sfvwrite_r+0x24c>
 802bb8e:	b950      	cbnz	r0, 802bba6 <__sfvwrite_r+0x5e>
 802bb90:	465a      	mov	r2, fp
 802bb92:	210a      	movs	r1, #10
 802bb94:	4650      	mov	r0, sl
 802bb96:	f7e4 fb33 	bl	8010200 <memchr>
 802bb9a:	2800      	cmp	r0, #0
 802bb9c:	f000 8100 	beq.w	802bda0 <__sfvwrite_r+0x258>
 802bba0:	3001      	adds	r0, #1
 802bba2:	eba0 070a 	sub.w	r7, r0, sl
 802bba6:	6820      	ldr	r0, [r4, #0]
 802bba8:	6921      	ldr	r1, [r4, #16]
 802bbaa:	68a5      	ldr	r5, [r4, #8]
 802bbac:	6963      	ldr	r3, [r4, #20]
 802bbae:	455f      	cmp	r7, fp
 802bbb0:	463a      	mov	r2, r7
 802bbb2:	bf28      	it	cs
 802bbb4:	465a      	movcs	r2, fp
 802bbb6:	4288      	cmp	r0, r1
 802bbb8:	f240 80f5 	bls.w	802bda6 <__sfvwrite_r+0x25e>
 802bbbc:	441d      	add	r5, r3
 802bbbe:	42aa      	cmp	r2, r5
 802bbc0:	f340 80f1 	ble.w	802bda6 <__sfvwrite_r+0x25e>
 802bbc4:	4651      	mov	r1, sl
 802bbc6:	462a      	mov	r2, r5
 802bbc8:	f000 f9f8 	bl	802bfbc <memmove>
 802bbcc:	6823      	ldr	r3, [r4, #0]
 802bbce:	442b      	add	r3, r5
 802bbd0:	6023      	str	r3, [r4, #0]
 802bbd2:	4621      	mov	r1, r4
 802bbd4:	4630      	mov	r0, r6
 802bbd6:	f7ff fe23 	bl	802b820 <_fflush_r>
 802bbda:	2800      	cmp	r0, #0
 802bbdc:	d167      	bne.n	802bcae <__sfvwrite_r+0x166>
 802bbde:	1b7f      	subs	r7, r7, r5
 802bbe0:	f040 80f9 	bne.w	802bdd6 <__sfvwrite_r+0x28e>
 802bbe4:	4621      	mov	r1, r4
 802bbe6:	4630      	mov	r0, r6
 802bbe8:	f7ff fe1a 	bl	802b820 <_fflush_r>
 802bbec:	2800      	cmp	r0, #0
 802bbee:	d15e      	bne.n	802bcae <__sfvwrite_r+0x166>
 802bbf0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802bbf4:	1b5b      	subs	r3, r3, r5
 802bbf6:	44aa      	add	sl, r5
 802bbf8:	ebab 0b05 	sub.w	fp, fp, r5
 802bbfc:	f8c9 3008 	str.w	r3, [r9, #8]
 802bc00:	2b00      	cmp	r3, #0
 802bc02:	d1c0      	bne.n	802bb86 <__sfvwrite_r+0x3e>
 802bc04:	e7a7      	b.n	802bb56 <__sfvwrite_r+0xe>
 802bc06:	4621      	mov	r1, r4
 802bc08:	4630      	mov	r0, r6
 802bc0a:	f000 f907 	bl	802be1c <__swsetup_r>
 802bc0e:	2800      	cmp	r0, #0
 802bc10:	d0ab      	beq.n	802bb6a <__sfvwrite_r+0x22>
 802bc12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802bc16:	e79f      	b.n	802bb58 <__sfvwrite_r+0x10>
 802bc18:	e9d8 a500 	ldrd	sl, r5, [r8]
 802bc1c:	f108 0808 	add.w	r8, r8, #8
 802bc20:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 802bc24:	69e1      	ldr	r1, [r4, #28]
 802bc26:	2d00      	cmp	r5, #0
 802bc28:	d0f6      	beq.n	802bc18 <__sfvwrite_r+0xd0>
 802bc2a:	42bd      	cmp	r5, r7
 802bc2c:	462b      	mov	r3, r5
 802bc2e:	4652      	mov	r2, sl
 802bc30:	bf28      	it	cs
 802bc32:	463b      	movcs	r3, r7
 802bc34:	4630      	mov	r0, r6
 802bc36:	47d8      	blx	fp
 802bc38:	2800      	cmp	r0, #0
 802bc3a:	dd38      	ble.n	802bcae <__sfvwrite_r+0x166>
 802bc3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802bc40:	1a1b      	subs	r3, r3, r0
 802bc42:	4482      	add	sl, r0
 802bc44:	1a2d      	subs	r5, r5, r0
 802bc46:	f8c9 3008 	str.w	r3, [r9, #8]
 802bc4a:	2b00      	cmp	r3, #0
 802bc4c:	d1e8      	bne.n	802bc20 <__sfvwrite_r+0xd8>
 802bc4e:	e782      	b.n	802bb56 <__sfvwrite_r+0xe>
 802bc50:	f04f 0a00 	mov.w	sl, #0
 802bc54:	4f61      	ldr	r7, [pc, #388]	@ (802bddc <__sfvwrite_r+0x294>)
 802bc56:	4655      	mov	r5, sl
 802bc58:	e7e2      	b.n	802bc20 <__sfvwrite_r+0xd8>
 802bc5a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 802bc5e:	f108 0808 	add.w	r8, r8, #8
 802bc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bc66:	6820      	ldr	r0, [r4, #0]
 802bc68:	68a2      	ldr	r2, [r4, #8]
 802bc6a:	f1ba 0f00 	cmp.w	sl, #0
 802bc6e:	d0f4      	beq.n	802bc5a <__sfvwrite_r+0x112>
 802bc70:	0599      	lsls	r1, r3, #22
 802bc72:	d563      	bpl.n	802bd3c <__sfvwrite_r+0x1f4>
 802bc74:	4552      	cmp	r2, sl
 802bc76:	d836      	bhi.n	802bce6 <__sfvwrite_r+0x19e>
 802bc78:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 802bc7c:	d033      	beq.n	802bce6 <__sfvwrite_r+0x19e>
 802bc7e:	6921      	ldr	r1, [r4, #16]
 802bc80:	6965      	ldr	r5, [r4, #20]
 802bc82:	eba0 0b01 	sub.w	fp, r0, r1
 802bc86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802bc8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802bc8e:	f10b 0201 	add.w	r2, fp, #1
 802bc92:	106d      	asrs	r5, r5, #1
 802bc94:	4452      	add	r2, sl
 802bc96:	4295      	cmp	r5, r2
 802bc98:	bf38      	it	cc
 802bc9a:	4615      	movcc	r5, r2
 802bc9c:	055b      	lsls	r3, r3, #21
 802bc9e:	d53d      	bpl.n	802bd1c <__sfvwrite_r+0x1d4>
 802bca0:	4629      	mov	r1, r5
 802bca2:	4630      	mov	r0, r6
 802bca4:	f002 fbfa 	bl	802e49c <_malloc_r>
 802bca8:	b948      	cbnz	r0, 802bcbe <__sfvwrite_r+0x176>
 802bcaa:	230c      	movs	r3, #12
 802bcac:	6033      	str	r3, [r6, #0]
 802bcae:	89a3      	ldrh	r3, [r4, #12]
 802bcb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bcb4:	81a3      	strh	r3, [r4, #12]
 802bcb6:	e7ac      	b.n	802bc12 <__sfvwrite_r+0xca>
 802bcb8:	461f      	mov	r7, r3
 802bcba:	469a      	mov	sl, r3
 802bcbc:	e7d1      	b.n	802bc62 <__sfvwrite_r+0x11a>
 802bcbe:	465a      	mov	r2, fp
 802bcc0:	6921      	ldr	r1, [r4, #16]
 802bcc2:	9001      	str	r0, [sp, #4]
 802bcc4:	f001 fbd0 	bl	802d468 <memcpy>
 802bcc8:	89a2      	ldrh	r2, [r4, #12]
 802bcca:	9b01      	ldr	r3, [sp, #4]
 802bccc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802bcd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802bcd4:	81a2      	strh	r2, [r4, #12]
 802bcd6:	6123      	str	r3, [r4, #16]
 802bcd8:	6165      	str	r5, [r4, #20]
 802bcda:	445b      	add	r3, fp
 802bcdc:	eba5 050b 	sub.w	r5, r5, fp
 802bce0:	6023      	str	r3, [r4, #0]
 802bce2:	4652      	mov	r2, sl
 802bce4:	60a5      	str	r5, [r4, #8]
 802bce6:	4552      	cmp	r2, sl
 802bce8:	bf28      	it	cs
 802bcea:	4652      	movcs	r2, sl
 802bcec:	6820      	ldr	r0, [r4, #0]
 802bcee:	9201      	str	r2, [sp, #4]
 802bcf0:	4639      	mov	r1, r7
 802bcf2:	f000 f963 	bl	802bfbc <memmove>
 802bcf6:	68a3      	ldr	r3, [r4, #8]
 802bcf8:	9a01      	ldr	r2, [sp, #4]
 802bcfa:	1a9b      	subs	r3, r3, r2
 802bcfc:	60a3      	str	r3, [r4, #8]
 802bcfe:	6823      	ldr	r3, [r4, #0]
 802bd00:	4413      	add	r3, r2
 802bd02:	4655      	mov	r5, sl
 802bd04:	6023      	str	r3, [r4, #0]
 802bd06:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802bd0a:	1b5b      	subs	r3, r3, r5
 802bd0c:	442f      	add	r7, r5
 802bd0e:	ebaa 0a05 	sub.w	sl, sl, r5
 802bd12:	f8c9 3008 	str.w	r3, [r9, #8]
 802bd16:	2b00      	cmp	r3, #0
 802bd18:	d1a3      	bne.n	802bc62 <__sfvwrite_r+0x11a>
 802bd1a:	e71c      	b.n	802bb56 <__sfvwrite_r+0xe>
 802bd1c:	462a      	mov	r2, r5
 802bd1e:	4630      	mov	r0, r6
 802bd20:	f007 fbcc 	bl	80334bc <_realloc_r>
 802bd24:	4603      	mov	r3, r0
 802bd26:	2800      	cmp	r0, #0
 802bd28:	d1d5      	bne.n	802bcd6 <__sfvwrite_r+0x18e>
 802bd2a:	6921      	ldr	r1, [r4, #16]
 802bd2c:	4630      	mov	r0, r6
 802bd2e:	f002 fa9d 	bl	802e26c <_free_r>
 802bd32:	89a3      	ldrh	r3, [r4, #12]
 802bd34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802bd38:	81a3      	strh	r3, [r4, #12]
 802bd3a:	e7b6      	b.n	802bcaa <__sfvwrite_r+0x162>
 802bd3c:	6923      	ldr	r3, [r4, #16]
 802bd3e:	4283      	cmp	r3, r0
 802bd40:	d302      	bcc.n	802bd48 <__sfvwrite_r+0x200>
 802bd42:	6961      	ldr	r1, [r4, #20]
 802bd44:	4551      	cmp	r1, sl
 802bd46:	d915      	bls.n	802bd74 <__sfvwrite_r+0x22c>
 802bd48:	4552      	cmp	r2, sl
 802bd4a:	bf28      	it	cs
 802bd4c:	4652      	movcs	r2, sl
 802bd4e:	4639      	mov	r1, r7
 802bd50:	4615      	mov	r5, r2
 802bd52:	f000 f933 	bl	802bfbc <memmove>
 802bd56:	68a3      	ldr	r3, [r4, #8]
 802bd58:	6822      	ldr	r2, [r4, #0]
 802bd5a:	1b5b      	subs	r3, r3, r5
 802bd5c:	442a      	add	r2, r5
 802bd5e:	60a3      	str	r3, [r4, #8]
 802bd60:	6022      	str	r2, [r4, #0]
 802bd62:	2b00      	cmp	r3, #0
 802bd64:	d1cf      	bne.n	802bd06 <__sfvwrite_r+0x1be>
 802bd66:	4621      	mov	r1, r4
 802bd68:	4630      	mov	r0, r6
 802bd6a:	f7ff fd59 	bl	802b820 <_fflush_r>
 802bd6e:	2800      	cmp	r0, #0
 802bd70:	d0c9      	beq.n	802bd06 <__sfvwrite_r+0x1be>
 802bd72:	e79c      	b.n	802bcae <__sfvwrite_r+0x166>
 802bd74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 802bd78:	4553      	cmp	r3, sl
 802bd7a:	bf28      	it	cs
 802bd7c:	4653      	movcs	r3, sl
 802bd7e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802bd80:	fb93 f3f1 	sdiv	r3, r3, r1
 802bd84:	463a      	mov	r2, r7
 802bd86:	434b      	muls	r3, r1
 802bd88:	4630      	mov	r0, r6
 802bd8a:	69e1      	ldr	r1, [r4, #28]
 802bd8c:	47a8      	blx	r5
 802bd8e:	1e05      	subs	r5, r0, #0
 802bd90:	dcb9      	bgt.n	802bd06 <__sfvwrite_r+0x1be>
 802bd92:	e78c      	b.n	802bcae <__sfvwrite_r+0x166>
 802bd94:	e9d8 ab00 	ldrd	sl, fp, [r8]
 802bd98:	2000      	movs	r0, #0
 802bd9a:	f108 0808 	add.w	r8, r8, #8
 802bd9e:	e6f2      	b.n	802bb86 <__sfvwrite_r+0x3e>
 802bda0:	f10b 0701 	add.w	r7, fp, #1
 802bda4:	e6ff      	b.n	802bba6 <__sfvwrite_r+0x5e>
 802bda6:	4293      	cmp	r3, r2
 802bda8:	dc08      	bgt.n	802bdbc <__sfvwrite_r+0x274>
 802bdaa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802bdac:	69e1      	ldr	r1, [r4, #28]
 802bdae:	4652      	mov	r2, sl
 802bdb0:	4630      	mov	r0, r6
 802bdb2:	47a8      	blx	r5
 802bdb4:	1e05      	subs	r5, r0, #0
 802bdb6:	f73f af12 	bgt.w	802bbde <__sfvwrite_r+0x96>
 802bdba:	e778      	b.n	802bcae <__sfvwrite_r+0x166>
 802bdbc:	4651      	mov	r1, sl
 802bdbe:	9201      	str	r2, [sp, #4]
 802bdc0:	f000 f8fc 	bl	802bfbc <memmove>
 802bdc4:	9a01      	ldr	r2, [sp, #4]
 802bdc6:	68a3      	ldr	r3, [r4, #8]
 802bdc8:	1a9b      	subs	r3, r3, r2
 802bdca:	60a3      	str	r3, [r4, #8]
 802bdcc:	6823      	ldr	r3, [r4, #0]
 802bdce:	4413      	add	r3, r2
 802bdd0:	6023      	str	r3, [r4, #0]
 802bdd2:	4615      	mov	r5, r2
 802bdd4:	e703      	b.n	802bbde <__sfvwrite_r+0x96>
 802bdd6:	2001      	movs	r0, #1
 802bdd8:	e70a      	b.n	802bbf0 <__sfvwrite_r+0xa8>
 802bdda:	bf00      	nop
 802bddc:	7ffffc00 	.word	0x7ffffc00

0802bde0 <_fwalk_sglue>:
 802bde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bde4:	4607      	mov	r7, r0
 802bde6:	4688      	mov	r8, r1
 802bde8:	4614      	mov	r4, r2
 802bdea:	2600      	movs	r6, #0
 802bdec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802bdf0:	f1b9 0901 	subs.w	r9, r9, #1
 802bdf4:	d505      	bpl.n	802be02 <_fwalk_sglue+0x22>
 802bdf6:	6824      	ldr	r4, [r4, #0]
 802bdf8:	2c00      	cmp	r4, #0
 802bdfa:	d1f7      	bne.n	802bdec <_fwalk_sglue+0xc>
 802bdfc:	4630      	mov	r0, r6
 802bdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802be02:	89ab      	ldrh	r3, [r5, #12]
 802be04:	2b01      	cmp	r3, #1
 802be06:	d907      	bls.n	802be18 <_fwalk_sglue+0x38>
 802be08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802be0c:	3301      	adds	r3, #1
 802be0e:	d003      	beq.n	802be18 <_fwalk_sglue+0x38>
 802be10:	4629      	mov	r1, r5
 802be12:	4638      	mov	r0, r7
 802be14:	47c0      	blx	r8
 802be16:	4306      	orrs	r6, r0
 802be18:	3568      	adds	r5, #104	@ 0x68
 802be1a:	e7e9      	b.n	802bdf0 <_fwalk_sglue+0x10>

0802be1c <__swsetup_r>:
 802be1c:	b538      	push	{r3, r4, r5, lr}
 802be1e:	4b29      	ldr	r3, [pc, #164]	@ (802bec4 <__swsetup_r+0xa8>)
 802be20:	4605      	mov	r5, r0
 802be22:	6818      	ldr	r0, [r3, #0]
 802be24:	460c      	mov	r4, r1
 802be26:	b118      	cbz	r0, 802be30 <__swsetup_r+0x14>
 802be28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802be2a:	b90b      	cbnz	r3, 802be30 <__swsetup_r+0x14>
 802be2c:	f7ff fe3a 	bl	802baa4 <__sinit>
 802be30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802be34:	0719      	lsls	r1, r3, #28
 802be36:	d422      	bmi.n	802be7e <__swsetup_r+0x62>
 802be38:	06da      	lsls	r2, r3, #27
 802be3a:	d407      	bmi.n	802be4c <__swsetup_r+0x30>
 802be3c:	2209      	movs	r2, #9
 802be3e:	602a      	str	r2, [r5, #0]
 802be40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802be44:	81a3      	strh	r3, [r4, #12]
 802be46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802be4a:	e033      	b.n	802beb4 <__swsetup_r+0x98>
 802be4c:	0758      	lsls	r0, r3, #29
 802be4e:	d512      	bpl.n	802be76 <__swsetup_r+0x5a>
 802be50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802be52:	b141      	cbz	r1, 802be66 <__swsetup_r+0x4a>
 802be54:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802be58:	4299      	cmp	r1, r3
 802be5a:	d002      	beq.n	802be62 <__swsetup_r+0x46>
 802be5c:	4628      	mov	r0, r5
 802be5e:	f002 fa05 	bl	802e26c <_free_r>
 802be62:	2300      	movs	r3, #0
 802be64:	6323      	str	r3, [r4, #48]	@ 0x30
 802be66:	89a3      	ldrh	r3, [r4, #12]
 802be68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802be6c:	81a3      	strh	r3, [r4, #12]
 802be6e:	2300      	movs	r3, #0
 802be70:	6063      	str	r3, [r4, #4]
 802be72:	6923      	ldr	r3, [r4, #16]
 802be74:	6023      	str	r3, [r4, #0]
 802be76:	89a3      	ldrh	r3, [r4, #12]
 802be78:	f043 0308 	orr.w	r3, r3, #8
 802be7c:	81a3      	strh	r3, [r4, #12]
 802be7e:	6923      	ldr	r3, [r4, #16]
 802be80:	b94b      	cbnz	r3, 802be96 <__swsetup_r+0x7a>
 802be82:	89a3      	ldrh	r3, [r4, #12]
 802be84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802be88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802be8c:	d003      	beq.n	802be96 <__swsetup_r+0x7a>
 802be8e:	4621      	mov	r1, r4
 802be90:	4628      	mov	r0, r5
 802be92:	f005 fc2b 	bl	80316ec <__smakebuf_r>
 802be96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802be9a:	f013 0201 	ands.w	r2, r3, #1
 802be9e:	d00a      	beq.n	802beb6 <__swsetup_r+0x9a>
 802bea0:	2200      	movs	r2, #0
 802bea2:	60a2      	str	r2, [r4, #8]
 802bea4:	6962      	ldr	r2, [r4, #20]
 802bea6:	4252      	negs	r2, r2
 802bea8:	61a2      	str	r2, [r4, #24]
 802beaa:	6922      	ldr	r2, [r4, #16]
 802beac:	b942      	cbnz	r2, 802bec0 <__swsetup_r+0xa4>
 802beae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802beb2:	d1c5      	bne.n	802be40 <__swsetup_r+0x24>
 802beb4:	bd38      	pop	{r3, r4, r5, pc}
 802beb6:	0799      	lsls	r1, r3, #30
 802beb8:	bf58      	it	pl
 802beba:	6962      	ldrpl	r2, [r4, #20]
 802bebc:	60a2      	str	r2, [r4, #8]
 802bebe:	e7f4      	b.n	802beaa <__swsetup_r+0x8e>
 802bec0:	2000      	movs	r0, #0
 802bec2:	e7f7      	b.n	802beb4 <__swsetup_r+0x98>
 802bec4:	200002d8 	.word	0x200002d8

0802bec8 <memcmp>:
 802bec8:	b510      	push	{r4, lr}
 802beca:	3901      	subs	r1, #1
 802becc:	4402      	add	r2, r0
 802bece:	4290      	cmp	r0, r2
 802bed0:	d101      	bne.n	802bed6 <memcmp+0xe>
 802bed2:	2000      	movs	r0, #0
 802bed4:	e005      	b.n	802bee2 <memcmp+0x1a>
 802bed6:	7803      	ldrb	r3, [r0, #0]
 802bed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802bedc:	42a3      	cmp	r3, r4
 802bede:	d001      	beq.n	802bee4 <memcmp+0x1c>
 802bee0:	1b18      	subs	r0, r3, r4
 802bee2:	bd10      	pop	{r4, pc}
 802bee4:	3001      	adds	r0, #1
 802bee6:	e7f2      	b.n	802bece <memcmp+0x6>

0802bee8 <__fputwc>:
 802bee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802beec:	4680      	mov	r8, r0
 802beee:	460f      	mov	r7, r1
 802bef0:	4614      	mov	r4, r2
 802bef2:	f001 fa05 	bl	802d300 <__locale_mb_cur_max>
 802bef6:	2801      	cmp	r0, #1
 802bef8:	4605      	mov	r5, r0
 802befa:	d11b      	bne.n	802bf34 <__fputwc+0x4c>
 802befc:	1e7b      	subs	r3, r7, #1
 802befe:	2bfe      	cmp	r3, #254	@ 0xfe
 802bf00:	d818      	bhi.n	802bf34 <__fputwc+0x4c>
 802bf02:	f88d 7004 	strb.w	r7, [sp, #4]
 802bf06:	2600      	movs	r6, #0
 802bf08:	f10d 0904 	add.w	r9, sp, #4
 802bf0c:	42ae      	cmp	r6, r5
 802bf0e:	d021      	beq.n	802bf54 <__fputwc+0x6c>
 802bf10:	68a3      	ldr	r3, [r4, #8]
 802bf12:	f816 1009 	ldrb.w	r1, [r6, r9]
 802bf16:	3b01      	subs	r3, #1
 802bf18:	2b00      	cmp	r3, #0
 802bf1a:	60a3      	str	r3, [r4, #8]
 802bf1c:	da04      	bge.n	802bf28 <__fputwc+0x40>
 802bf1e:	69a2      	ldr	r2, [r4, #24]
 802bf20:	4293      	cmp	r3, r2
 802bf22:	db1b      	blt.n	802bf5c <__fputwc+0x74>
 802bf24:	290a      	cmp	r1, #10
 802bf26:	d019      	beq.n	802bf5c <__fputwc+0x74>
 802bf28:	6823      	ldr	r3, [r4, #0]
 802bf2a:	1c5a      	adds	r2, r3, #1
 802bf2c:	6022      	str	r2, [r4, #0]
 802bf2e:	7019      	strb	r1, [r3, #0]
 802bf30:	3601      	adds	r6, #1
 802bf32:	e7eb      	b.n	802bf0c <__fputwc+0x24>
 802bf34:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 802bf38:	463a      	mov	r2, r7
 802bf3a:	a901      	add	r1, sp, #4
 802bf3c:	4640      	mov	r0, r8
 802bf3e:	f001 faa1 	bl	802d484 <_wcrtomb_r>
 802bf42:	1c43      	adds	r3, r0, #1
 802bf44:	4605      	mov	r5, r0
 802bf46:	d1de      	bne.n	802bf06 <__fputwc+0x1e>
 802bf48:	89a3      	ldrh	r3, [r4, #12]
 802bf4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bf4e:	81a3      	strh	r3, [r4, #12]
 802bf50:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802bf54:	4638      	mov	r0, r7
 802bf56:	b003      	add	sp, #12
 802bf58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802bf5c:	4622      	mov	r2, r4
 802bf5e:	4640      	mov	r0, r8
 802bf60:	f008 fb1d 	bl	803459e <__swbuf_r>
 802bf64:	3001      	adds	r0, #1
 802bf66:	d1e3      	bne.n	802bf30 <__fputwc+0x48>
 802bf68:	e7f2      	b.n	802bf50 <__fputwc+0x68>

0802bf6a <_fputwc_r>:
 802bf6a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 802bf6c:	07db      	lsls	r3, r3, #31
 802bf6e:	b570      	push	{r4, r5, r6, lr}
 802bf70:	4605      	mov	r5, r0
 802bf72:	460e      	mov	r6, r1
 802bf74:	4614      	mov	r4, r2
 802bf76:	d405      	bmi.n	802bf84 <_fputwc_r+0x1a>
 802bf78:	8993      	ldrh	r3, [r2, #12]
 802bf7a:	0598      	lsls	r0, r3, #22
 802bf7c:	d402      	bmi.n	802bf84 <_fputwc_r+0x1a>
 802bf7e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 802bf80:	f001 fa6f 	bl	802d462 <__retarget_lock_acquire_recursive>
 802bf84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bf88:	0499      	lsls	r1, r3, #18
 802bf8a:	d406      	bmi.n	802bf9a <_fputwc_r+0x30>
 802bf8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802bf90:	81a3      	strh	r3, [r4, #12]
 802bf92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bf94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802bf98:	6663      	str	r3, [r4, #100]	@ 0x64
 802bf9a:	4622      	mov	r2, r4
 802bf9c:	4628      	mov	r0, r5
 802bf9e:	4631      	mov	r1, r6
 802bfa0:	f7ff ffa2 	bl	802bee8 <__fputwc>
 802bfa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802bfa6:	07da      	lsls	r2, r3, #31
 802bfa8:	4605      	mov	r5, r0
 802bfaa:	d405      	bmi.n	802bfb8 <_fputwc_r+0x4e>
 802bfac:	89a3      	ldrh	r3, [r4, #12]
 802bfae:	059b      	lsls	r3, r3, #22
 802bfb0:	d402      	bmi.n	802bfb8 <_fputwc_r+0x4e>
 802bfb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802bfb4:	f001 fa57 	bl	802d466 <__retarget_lock_release_recursive>
 802bfb8:	4628      	mov	r0, r5
 802bfba:	bd70      	pop	{r4, r5, r6, pc}

0802bfbc <memmove>:
 802bfbc:	4288      	cmp	r0, r1
 802bfbe:	b510      	push	{r4, lr}
 802bfc0:	eb01 0402 	add.w	r4, r1, r2
 802bfc4:	d902      	bls.n	802bfcc <memmove+0x10>
 802bfc6:	4284      	cmp	r4, r0
 802bfc8:	4623      	mov	r3, r4
 802bfca:	d807      	bhi.n	802bfdc <memmove+0x20>
 802bfcc:	1e43      	subs	r3, r0, #1
 802bfce:	42a1      	cmp	r1, r4
 802bfd0:	d008      	beq.n	802bfe4 <memmove+0x28>
 802bfd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802bfd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802bfda:	e7f8      	b.n	802bfce <memmove+0x12>
 802bfdc:	4402      	add	r2, r0
 802bfde:	4601      	mov	r1, r0
 802bfe0:	428a      	cmp	r2, r1
 802bfe2:	d100      	bne.n	802bfe6 <memmove+0x2a>
 802bfe4:	bd10      	pop	{r4, pc}
 802bfe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802bfea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802bfee:	e7f7      	b.n	802bfe0 <memmove+0x24>

0802bff0 <memset>:
 802bff0:	4402      	add	r2, r0
 802bff2:	4603      	mov	r3, r0
 802bff4:	4293      	cmp	r3, r2
 802bff6:	d100      	bne.n	802bffa <memset+0xa>
 802bff8:	4770      	bx	lr
 802bffa:	f803 1b01 	strb.w	r1, [r3], #1
 802bffe:	e7f9      	b.n	802bff4 <memset+0x4>

0802c000 <strcat>:
 802c000:	b510      	push	{r4, lr}
 802c002:	4602      	mov	r2, r0
 802c004:	7814      	ldrb	r4, [r2, #0]
 802c006:	4613      	mov	r3, r2
 802c008:	3201      	adds	r2, #1
 802c00a:	2c00      	cmp	r4, #0
 802c00c:	d1fa      	bne.n	802c004 <strcat+0x4>
 802c00e:	3b01      	subs	r3, #1
 802c010:	f811 2b01 	ldrb.w	r2, [r1], #1
 802c014:	f803 2f01 	strb.w	r2, [r3, #1]!
 802c018:	2a00      	cmp	r2, #0
 802c01a:	d1f9      	bne.n	802c010 <strcat+0x10>
 802c01c:	bd10      	pop	{r4, pc}

0802c01e <strchr>:
 802c01e:	b2c9      	uxtb	r1, r1
 802c020:	4603      	mov	r3, r0
 802c022:	4618      	mov	r0, r3
 802c024:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c028:	b112      	cbz	r2, 802c030 <strchr+0x12>
 802c02a:	428a      	cmp	r2, r1
 802c02c:	d1f9      	bne.n	802c022 <strchr+0x4>
 802c02e:	4770      	bx	lr
 802c030:	2900      	cmp	r1, #0
 802c032:	bf18      	it	ne
 802c034:	2000      	movne	r0, #0
 802c036:	4770      	bx	lr

0802c038 <strcspn>:
 802c038:	b570      	push	{r4, r5, r6, lr}
 802c03a:	4603      	mov	r3, r0
 802c03c:	461e      	mov	r6, r3
 802c03e:	f813 4b01 	ldrb.w	r4, [r3], #1
 802c042:	b144      	cbz	r4, 802c056 <strcspn+0x1e>
 802c044:	1e4a      	subs	r2, r1, #1
 802c046:	e001      	b.n	802c04c <strcspn+0x14>
 802c048:	42a5      	cmp	r5, r4
 802c04a:	d004      	beq.n	802c056 <strcspn+0x1e>
 802c04c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802c050:	2d00      	cmp	r5, #0
 802c052:	d1f9      	bne.n	802c048 <strcspn+0x10>
 802c054:	e7f2      	b.n	802c03c <strcspn+0x4>
 802c056:	1a30      	subs	r0, r6, r0
 802c058:	bd70      	pop	{r4, r5, r6, pc}

0802c05a <strncmp>:
 802c05a:	b510      	push	{r4, lr}
 802c05c:	b16a      	cbz	r2, 802c07a <strncmp+0x20>
 802c05e:	3901      	subs	r1, #1
 802c060:	1884      	adds	r4, r0, r2
 802c062:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c066:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802c06a:	429a      	cmp	r2, r3
 802c06c:	d103      	bne.n	802c076 <strncmp+0x1c>
 802c06e:	42a0      	cmp	r0, r4
 802c070:	d001      	beq.n	802c076 <strncmp+0x1c>
 802c072:	2a00      	cmp	r2, #0
 802c074:	d1f5      	bne.n	802c062 <strncmp+0x8>
 802c076:	1ad0      	subs	r0, r2, r3
 802c078:	bd10      	pop	{r4, pc}
 802c07a:	4610      	mov	r0, r2
 802c07c:	e7fc      	b.n	802c078 <strncmp+0x1e>

0802c07e <strncpy>:
 802c07e:	b510      	push	{r4, lr}
 802c080:	3901      	subs	r1, #1
 802c082:	4603      	mov	r3, r0
 802c084:	b132      	cbz	r2, 802c094 <strncpy+0x16>
 802c086:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802c08a:	f803 4b01 	strb.w	r4, [r3], #1
 802c08e:	3a01      	subs	r2, #1
 802c090:	2c00      	cmp	r4, #0
 802c092:	d1f7      	bne.n	802c084 <strncpy+0x6>
 802c094:	441a      	add	r2, r3
 802c096:	2100      	movs	r1, #0
 802c098:	4293      	cmp	r3, r2
 802c09a:	d100      	bne.n	802c09e <strncpy+0x20>
 802c09c:	bd10      	pop	{r4, pc}
 802c09e:	f803 1b01 	strb.w	r1, [r3], #1
 802c0a2:	e7f9      	b.n	802c098 <strncpy+0x1a>

0802c0a4 <strrchr>:
 802c0a4:	b538      	push	{r3, r4, r5, lr}
 802c0a6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 802c0aa:	4603      	mov	r3, r0
 802c0ac:	d10e      	bne.n	802c0cc <strrchr+0x28>
 802c0ae:	4621      	mov	r1, r4
 802c0b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c0b4:	f7ff bfb3 	b.w	802c01e <strchr>
 802c0b8:	1c43      	adds	r3, r0, #1
 802c0ba:	4605      	mov	r5, r0
 802c0bc:	4621      	mov	r1, r4
 802c0be:	4618      	mov	r0, r3
 802c0c0:	f7ff ffad 	bl	802c01e <strchr>
 802c0c4:	2800      	cmp	r0, #0
 802c0c6:	d1f7      	bne.n	802c0b8 <strrchr+0x14>
 802c0c8:	4628      	mov	r0, r5
 802c0ca:	bd38      	pop	{r3, r4, r5, pc}
 802c0cc:	2500      	movs	r5, #0
 802c0ce:	e7f5      	b.n	802c0bc <strrchr+0x18>

0802c0d0 <strspn>:
 802c0d0:	b570      	push	{r4, r5, r6, lr}
 802c0d2:	4603      	mov	r3, r0
 802c0d4:	461e      	mov	r6, r3
 802c0d6:	f813 4b01 	ldrb.w	r4, [r3], #1
 802c0da:	b13c      	cbz	r4, 802c0ec <strspn+0x1c>
 802c0dc:	1e4a      	subs	r2, r1, #1
 802c0de:	e001      	b.n	802c0e4 <strspn+0x14>
 802c0e0:	42a5      	cmp	r5, r4
 802c0e2:	d0f7      	beq.n	802c0d4 <strspn+0x4>
 802c0e4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802c0e8:	2d00      	cmp	r5, #0
 802c0ea:	d1f9      	bne.n	802c0e0 <strspn+0x10>
 802c0ec:	1a30      	subs	r0, r6, r0
 802c0ee:	bd70      	pop	{r4, r5, r6, pc}

0802c0f0 <strstr>:
 802c0f0:	780a      	ldrb	r2, [r1, #0]
 802c0f2:	b570      	push	{r4, r5, r6, lr}
 802c0f4:	b96a      	cbnz	r2, 802c112 <strstr+0x22>
 802c0f6:	bd70      	pop	{r4, r5, r6, pc}
 802c0f8:	429a      	cmp	r2, r3
 802c0fa:	d109      	bne.n	802c110 <strstr+0x20>
 802c0fc:	460c      	mov	r4, r1
 802c0fe:	4605      	mov	r5, r0
 802c100:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802c104:	2b00      	cmp	r3, #0
 802c106:	d0f6      	beq.n	802c0f6 <strstr+0x6>
 802c108:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802c10c:	429e      	cmp	r6, r3
 802c10e:	d0f7      	beq.n	802c100 <strstr+0x10>
 802c110:	3001      	adds	r0, #1
 802c112:	7803      	ldrb	r3, [r0, #0]
 802c114:	2b00      	cmp	r3, #0
 802c116:	d1ef      	bne.n	802c0f8 <strstr+0x8>
 802c118:	4618      	mov	r0, r3
 802c11a:	e7ec      	b.n	802c0f6 <strstr+0x6>

0802c11c <localtime_r>:
 802c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c120:	460c      	mov	r4, r1
 802c122:	4680      	mov	r8, r0
 802c124:	f008 fab6 	bl	8034694 <__gettzinfo>
 802c128:	4621      	mov	r1, r4
 802c12a:	4605      	mov	r5, r0
 802c12c:	4640      	mov	r0, r8
 802c12e:	f008 fab5 	bl	803469c <gmtime_r>
 802c132:	6943      	ldr	r3, [r0, #20]
 802c134:	0799      	lsls	r1, r3, #30
 802c136:	4604      	mov	r4, r0
 802c138:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 802c13c:	d106      	bne.n	802c14c <localtime_r+0x30>
 802c13e:	2264      	movs	r2, #100	@ 0x64
 802c140:	fb97 f3f2 	sdiv	r3, r7, r2
 802c144:	fb02 7313 	mls	r3, r2, r3, r7
 802c148:	2b00      	cmp	r3, #0
 802c14a:	d170      	bne.n	802c22e <localtime_r+0x112>
 802c14c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c150:	fb97 f3f2 	sdiv	r3, r7, r2
 802c154:	fb02 7313 	mls	r3, r2, r3, r7
 802c158:	fab3 f383 	clz	r3, r3
 802c15c:	095b      	lsrs	r3, r3, #5
 802c15e:	4e64      	ldr	r6, [pc, #400]	@ (802c2f0 <localtime_r+0x1d4>)
 802c160:	2230      	movs	r2, #48	@ 0x30
 802c162:	fb02 6603 	mla	r6, r2, r3, r6
 802c166:	f000 fe97 	bl	802ce98 <__tz_lock>
 802c16a:	f000 fea1 	bl	802ceb0 <_tzset_unlocked>
 802c16e:	4b61      	ldr	r3, [pc, #388]	@ (802c2f4 <localtime_r+0x1d8>)
 802c170:	681b      	ldr	r3, [r3, #0]
 802c172:	2b00      	cmp	r3, #0
 802c174:	d06a      	beq.n	802c24c <localtime_r+0x130>
 802c176:	686b      	ldr	r3, [r5, #4]
 802c178:	42bb      	cmp	r3, r7
 802c17a:	d15a      	bne.n	802c232 <localtime_r+0x116>
 802c17c:	682f      	ldr	r7, [r5, #0]
 802c17e:	e9d8 2300 	ldrd	r2, r3, [r8]
 802c182:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802c186:	2f00      	cmp	r7, #0
 802c188:	d15b      	bne.n	802c242 <localtime_r+0x126>
 802c18a:	4282      	cmp	r2, r0
 802c18c:	eb73 0101 	sbcs.w	r1, r3, r1
 802c190:	db5e      	blt.n	802c250 <localtime_r+0x134>
 802c192:	2301      	movs	r3, #1
 802c194:	6223      	str	r3, [r4, #32]
 802c196:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 802c198:	6861      	ldr	r1, [r4, #4]
 802c19a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802c19e:	fb93 f0f2 	sdiv	r0, r3, r2
 802c1a2:	fb02 3310 	mls	r3, r2, r0, r3
 802c1a6:	223c      	movs	r2, #60	@ 0x3c
 802c1a8:	fb93 f5f2 	sdiv	r5, r3, r2
 802c1ac:	fb02 3215 	mls	r2, r2, r5, r3
 802c1b0:	6823      	ldr	r3, [r4, #0]
 802c1b2:	1a9b      	subs	r3, r3, r2
 802c1b4:	68a2      	ldr	r2, [r4, #8]
 802c1b6:	6023      	str	r3, [r4, #0]
 802c1b8:	1b49      	subs	r1, r1, r5
 802c1ba:	1a12      	subs	r2, r2, r0
 802c1bc:	2b3b      	cmp	r3, #59	@ 0x3b
 802c1be:	6061      	str	r1, [r4, #4]
 802c1c0:	60a2      	str	r2, [r4, #8]
 802c1c2:	dd51      	ble.n	802c268 <localtime_r+0x14c>
 802c1c4:	3101      	adds	r1, #1
 802c1c6:	6061      	str	r1, [r4, #4]
 802c1c8:	3b3c      	subs	r3, #60	@ 0x3c
 802c1ca:	6023      	str	r3, [r4, #0]
 802c1cc:	6863      	ldr	r3, [r4, #4]
 802c1ce:	2b3b      	cmp	r3, #59	@ 0x3b
 802c1d0:	dd50      	ble.n	802c274 <localtime_r+0x158>
 802c1d2:	3201      	adds	r2, #1
 802c1d4:	60a2      	str	r2, [r4, #8]
 802c1d6:	3b3c      	subs	r3, #60	@ 0x3c
 802c1d8:	6063      	str	r3, [r4, #4]
 802c1da:	68a3      	ldr	r3, [r4, #8]
 802c1dc:	2b17      	cmp	r3, #23
 802c1de:	dd4f      	ble.n	802c280 <localtime_r+0x164>
 802c1e0:	69e2      	ldr	r2, [r4, #28]
 802c1e2:	3201      	adds	r2, #1
 802c1e4:	61e2      	str	r2, [r4, #28]
 802c1e6:	69a2      	ldr	r2, [r4, #24]
 802c1e8:	3201      	adds	r2, #1
 802c1ea:	2a07      	cmp	r2, #7
 802c1ec:	bfa8      	it	ge
 802c1ee:	2200      	movge	r2, #0
 802c1f0:	61a2      	str	r2, [r4, #24]
 802c1f2:	68e2      	ldr	r2, [r4, #12]
 802c1f4:	3b18      	subs	r3, #24
 802c1f6:	3201      	adds	r2, #1
 802c1f8:	60a3      	str	r3, [r4, #8]
 802c1fa:	6923      	ldr	r3, [r4, #16]
 802c1fc:	60e2      	str	r2, [r4, #12]
 802c1fe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802c202:	428a      	cmp	r2, r1
 802c204:	dd0e      	ble.n	802c224 <localtime_r+0x108>
 802c206:	2b0b      	cmp	r3, #11
 802c208:	eba2 0201 	sub.w	r2, r2, r1
 802c20c:	60e2      	str	r2, [r4, #12]
 802c20e:	f103 0201 	add.w	r2, r3, #1
 802c212:	bf09      	itett	eq
 802c214:	6963      	ldreq	r3, [r4, #20]
 802c216:	6122      	strne	r2, [r4, #16]
 802c218:	2200      	moveq	r2, #0
 802c21a:	3301      	addeq	r3, #1
 802c21c:	bf02      	ittt	eq
 802c21e:	6122      	streq	r2, [r4, #16]
 802c220:	6163      	streq	r3, [r4, #20]
 802c222:	61e2      	streq	r2, [r4, #28]
 802c224:	f000 fe3e 	bl	802cea4 <__tz_unlock>
 802c228:	4620      	mov	r0, r4
 802c22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c22e:	2301      	movs	r3, #1
 802c230:	e795      	b.n	802c15e <localtime_r+0x42>
 802c232:	4638      	mov	r0, r7
 802c234:	f000 fd86 	bl	802cd44 <__tzcalc_limits>
 802c238:	2800      	cmp	r0, #0
 802c23a:	d19f      	bne.n	802c17c <localtime_r+0x60>
 802c23c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c240:	e004      	b.n	802c24c <localtime_r+0x130>
 802c242:	4282      	cmp	r2, r0
 802c244:	eb73 0101 	sbcs.w	r1, r3, r1
 802c248:	da02      	bge.n	802c250 <localtime_r+0x134>
 802c24a:	2300      	movs	r3, #0
 802c24c:	6223      	str	r3, [r4, #32]
 802c24e:	e009      	b.n	802c264 <localtime_r+0x148>
 802c250:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 802c254:	4282      	cmp	r2, r0
 802c256:	418b      	sbcs	r3, r1
 802c258:	bfb4      	ite	lt
 802c25a:	2301      	movlt	r3, #1
 802c25c:	2300      	movge	r3, #0
 802c25e:	6223      	str	r3, [r4, #32]
 802c260:	2b00      	cmp	r3, #0
 802c262:	d198      	bne.n	802c196 <localtime_r+0x7a>
 802c264:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 802c266:	e797      	b.n	802c198 <localtime_r+0x7c>
 802c268:	2b00      	cmp	r3, #0
 802c26a:	daaf      	bge.n	802c1cc <localtime_r+0xb0>
 802c26c:	3901      	subs	r1, #1
 802c26e:	6061      	str	r1, [r4, #4]
 802c270:	333c      	adds	r3, #60	@ 0x3c
 802c272:	e7aa      	b.n	802c1ca <localtime_r+0xae>
 802c274:	2b00      	cmp	r3, #0
 802c276:	dab0      	bge.n	802c1da <localtime_r+0xbe>
 802c278:	3a01      	subs	r2, #1
 802c27a:	60a2      	str	r2, [r4, #8]
 802c27c:	333c      	adds	r3, #60	@ 0x3c
 802c27e:	e7ab      	b.n	802c1d8 <localtime_r+0xbc>
 802c280:	2b00      	cmp	r3, #0
 802c282:	dacf      	bge.n	802c224 <localtime_r+0x108>
 802c284:	69e2      	ldr	r2, [r4, #28]
 802c286:	3a01      	subs	r2, #1
 802c288:	61e2      	str	r2, [r4, #28]
 802c28a:	69a2      	ldr	r2, [r4, #24]
 802c28c:	3a01      	subs	r2, #1
 802c28e:	bf48      	it	mi
 802c290:	2206      	movmi	r2, #6
 802c292:	61a2      	str	r2, [r4, #24]
 802c294:	68e2      	ldr	r2, [r4, #12]
 802c296:	3318      	adds	r3, #24
 802c298:	3a01      	subs	r2, #1
 802c29a:	60e2      	str	r2, [r4, #12]
 802c29c:	60a3      	str	r3, [r4, #8]
 802c29e:	2a00      	cmp	r2, #0
 802c2a0:	d1c0      	bne.n	802c224 <localtime_r+0x108>
 802c2a2:	6923      	ldr	r3, [r4, #16]
 802c2a4:	3b01      	subs	r3, #1
 802c2a6:	d405      	bmi.n	802c2b4 <localtime_r+0x198>
 802c2a8:	6123      	str	r3, [r4, #16]
 802c2aa:	6923      	ldr	r3, [r4, #16]
 802c2ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c2b0:	60e3      	str	r3, [r4, #12]
 802c2b2:	e7b7      	b.n	802c224 <localtime_r+0x108>
 802c2b4:	230b      	movs	r3, #11
 802c2b6:	6123      	str	r3, [r4, #16]
 802c2b8:	6963      	ldr	r3, [r4, #20]
 802c2ba:	1e5a      	subs	r2, r3, #1
 802c2bc:	6162      	str	r2, [r4, #20]
 802c2be:	0792      	lsls	r2, r2, #30
 802c2c0:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 802c2c4:	d105      	bne.n	802c2d2 <localtime_r+0x1b6>
 802c2c6:	2164      	movs	r1, #100	@ 0x64
 802c2c8:	fb93 f2f1 	sdiv	r2, r3, r1
 802c2cc:	fb01 3212 	mls	r2, r1, r2, r3
 802c2d0:	b962      	cbnz	r2, 802c2ec <localtime_r+0x1d0>
 802c2d2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c2d6:	fb93 f1f2 	sdiv	r1, r3, r2
 802c2da:	fb02 3311 	mls	r3, r2, r1, r3
 802c2de:	fab3 f383 	clz	r3, r3
 802c2e2:	095b      	lsrs	r3, r3, #5
 802c2e4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 802c2e8:	61e3      	str	r3, [r4, #28]
 802c2ea:	e7de      	b.n	802c2aa <localtime_r+0x18e>
 802c2ec:	2301      	movs	r3, #1
 802c2ee:	e7f9      	b.n	802c2e4 <localtime_r+0x1c8>
 802c2f0:	0803ad88 	.word	0x0803ad88
 802c2f4:	200198e0 	.word	0x200198e0

0802c2f8 <iso_year_adjust>:
 802c2f8:	6942      	ldr	r2, [r0, #20]
 802c2fa:	2a00      	cmp	r2, #0
 802c2fc:	f240 736c 	movw	r3, #1900	@ 0x76c
 802c300:	bfa8      	it	ge
 802c302:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 802c306:	4413      	add	r3, r2
 802c308:	0792      	lsls	r2, r2, #30
 802c30a:	d105      	bne.n	802c318 <iso_year_adjust+0x20>
 802c30c:	2164      	movs	r1, #100	@ 0x64
 802c30e:	fb93 f2f1 	sdiv	r2, r3, r1
 802c312:	fb01 3212 	mls	r2, r1, r2, r3
 802c316:	b9ca      	cbnz	r2, 802c34c <iso_year_adjust+0x54>
 802c318:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802c31c:	fb93 f1f2 	sdiv	r1, r3, r2
 802c320:	fb02 3311 	mls	r3, r2, r1, r3
 802c324:	fab3 f383 	clz	r3, r3
 802c328:	095b      	lsrs	r3, r3, #5
 802c32a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802c32e:	0040      	lsls	r0, r0, #1
 802c330:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 802c334:	4418      	add	r0, r3
 802c336:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802c33a:	4298      	cmp	r0, r3
 802c33c:	d027      	beq.n	802c38e <iso_year_adjust+0x96>
 802c33e:	dc11      	bgt.n	802c364 <iso_year_adjust+0x6c>
 802c340:	2801      	cmp	r0, #1
 802c342:	dc0a      	bgt.n	802c35a <iso_year_adjust+0x62>
 802c344:	43c0      	mvns	r0, r0
 802c346:	0fc0      	lsrs	r0, r0, #31
 802c348:	4240      	negs	r0, r0
 802c34a:	4770      	bx	lr
 802c34c:	2301      	movs	r3, #1
 802c34e:	e7ec      	b.n	802c32a <iso_year_adjust+0x32>
 802c350:	4b10      	ldr	r3, [pc, #64]	@ (802c394 <iso_year_adjust+0x9c>)
 802c352:	40c3      	lsrs	r3, r0
 802c354:	f343 0000 	sbfx	r0, r3, #0, #1
 802c358:	4770      	bx	lr
 802c35a:	380a      	subs	r0, #10
 802c35c:	2817      	cmp	r0, #23
 802c35e:	d9f7      	bls.n	802c350 <iso_year_adjust+0x58>
 802c360:	2000      	movs	r0, #0
 802c362:	4770      	bx	lr
 802c364:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 802c368:	4298      	cmp	r0, r3
 802c36a:	dc06      	bgt.n	802c37a <iso_year_adjust+0x82>
 802c36c:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 802c370:	4298      	cmp	r0, r3
 802c372:	bfd4      	ite	le
 802c374:	2000      	movle	r0, #0
 802c376:	2001      	movgt	r0, #1
 802c378:	4770      	bx	lr
 802c37a:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 802c37e:	3802      	subs	r0, #2
 802c380:	2815      	cmp	r0, #21
 802c382:	d8ed      	bhi.n	802c360 <iso_year_adjust+0x68>
 802c384:	4b04      	ldr	r3, [pc, #16]	@ (802c398 <iso_year_adjust+0xa0>)
 802c386:	40c3      	lsrs	r3, r0
 802c388:	f003 0001 	and.w	r0, r3, #1
 802c38c:	4770      	bx	lr
 802c38e:	2001      	movs	r0, #1
 802c390:	4770      	bx	lr
 802c392:	bf00      	nop
 802c394:	00cc00cf 	.word	0x00cc00cf
 802c398:	002a001f 	.word	0x002a001f

0802c39c <__strftime.isra.0>:
 802c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c3a0:	b08f      	sub	sp, #60	@ 0x3c
 802c3a2:	461e      	mov	r6, r3
 802c3a4:	2300      	movs	r3, #0
 802c3a6:	4607      	mov	r7, r0
 802c3a8:	460d      	mov	r5, r1
 802c3aa:	9302      	str	r3, [sp, #8]
 802c3ac:	461c      	mov	r4, r3
 802c3ae:	7813      	ldrb	r3, [r2, #0]
 802c3b0:	2b00      	cmp	r3, #0
 802c3b2:	f000 84ae 	beq.w	802cd12 <__strftime.isra.0+0x976>
 802c3b6:	2b25      	cmp	r3, #37	@ 0x25
 802c3b8:	d11f      	bne.n	802c3fa <__strftime.isra.0+0x5e>
 802c3ba:	f892 9001 	ldrb.w	r9, [r2, #1]
 802c3be:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 802c3c2:	d024      	beq.n	802c40e <__strftime.isra.0+0x72>
 802c3c4:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802c3c8:	d021      	beq.n	802c40e <__strftime.isra.0+0x72>
 802c3ca:	f102 0801 	add.w	r8, r2, #1
 802c3ce:	f04f 0900 	mov.w	r9, #0
 802c3d2:	f898 2000 	ldrb.w	r2, [r8]
 802c3d6:	3a31      	subs	r2, #49	@ 0x31
 802c3d8:	2a08      	cmp	r2, #8
 802c3da:	d81b      	bhi.n	802c414 <__strftime.isra.0+0x78>
 802c3dc:	220a      	movs	r2, #10
 802c3de:	4640      	mov	r0, r8
 802c3e0:	a906      	add	r1, sp, #24
 802c3e2:	f008 f88b 	bl	80344fc <strtoul>
 802c3e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802c3ea:	4602      	mov	r2, r0
 802c3ec:	f898 1000 	ldrb.w	r1, [r8]
 802c3f0:	2945      	cmp	r1, #69	@ 0x45
 802c3f2:	d111      	bne.n	802c418 <__strftime.isra.0+0x7c>
 802c3f4:	f108 0801 	add.w	r8, r8, #1
 802c3f8:	e010      	b.n	802c41c <__strftime.isra.0+0x80>
 802c3fa:	1e69      	subs	r1, r5, #1
 802c3fc:	42a1      	cmp	r1, r4
 802c3fe:	f240 815d 	bls.w	802c6bc <__strftime.isra.0+0x320>
 802c402:	553b      	strb	r3, [r7, r4]
 802c404:	3201      	adds	r2, #1
 802c406:	f104 0a01 	add.w	sl, r4, #1
 802c40a:	4654      	mov	r4, sl
 802c40c:	e7cf      	b.n	802c3ae <__strftime.isra.0+0x12>
 802c40e:	f102 0802 	add.w	r8, r2, #2
 802c412:	e7de      	b.n	802c3d2 <__strftime.isra.0+0x36>
 802c414:	2200      	movs	r2, #0
 802c416:	e7e9      	b.n	802c3ec <__strftime.isra.0+0x50>
 802c418:	294f      	cmp	r1, #79	@ 0x4f
 802c41a:	d0eb      	beq.n	802c3f4 <__strftime.isra.0+0x58>
 802c41c:	f898 0000 	ldrb.w	r0, [r8]
 802c420:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 802c424:	2955      	cmp	r1, #85	@ 0x55
 802c426:	f200 8149 	bhi.w	802c6bc <__strftime.isra.0+0x320>
 802c42a:	e8df f011 	tbh	[pc, r1, lsl #1]
 802c42e:	046a      	.short	0x046a
 802c430:	01470147 	.word	0x01470147
 802c434:	01470147 	.word	0x01470147
 802c438:	01470147 	.word	0x01470147
 802c43c:	01470147 	.word	0x01470147
 802c440:	01470147 	.word	0x01470147
 802c444:	01470147 	.word	0x01470147
 802c448:	01470147 	.word	0x01470147
 802c44c:	01470147 	.word	0x01470147
 802c450:	01470147 	.word	0x01470147
 802c454:	01470147 	.word	0x01470147
 802c458:	01470147 	.word	0x01470147
 802c45c:	01470147 	.word	0x01470147
 802c460:	01470147 	.word	0x01470147
 802c464:	00750147 	.word	0x00750147
 802c468:	00dc00a3 	.word	0x00dc00a3
 802c46c:	01470128 	.word	0x01470128
 802c470:	01cb0159 	.word	0x01cb0159
 802c474:	02590252 	.word	0x02590252
 802c478:	01470147 	.word	0x01470147
 802c47c:	02710147 	.word	0x02710147
 802c480:	01470147 	.word	0x01470147
 802c484:	0147027c 	.word	0x0147027c
 802c488:	033402ac 	.word	0x033402ac
 802c48c:	036a033e 	.word	0x036a033e
 802c490:	03d80372 	.word	0x03d80372
 802c494:	03ee00d8 	.word	0x03ee00d8
 802c498:	01470440 	.word	0x01470440
 802c49c:	01470147 	.word	0x01470147
 802c4a0:	01470147 	.word	0x01470147
 802c4a4:	00560147 	.word	0x00560147
 802c4a8:	00ba008d 	.word	0x00ba008d
 802c4ac:	011d011d 	.word	0x011d011d
 802c4b0:	017e0147 	.word	0x017e0147
 802c4b4:	0147008d 	.word	0x0147008d
 802c4b8:	0252026a 	.word	0x0252026a
 802c4bc:	026e0259 	.word	0x026e0259
 802c4c0:	01470273 	.word	0x01470273
 802c4c4:	02a5027c 	.word	0x02a5027c
 802c4c8:	02b500d0 	.word	0x02b500d0
 802c4cc:	035d0336 	.word	0x035d0336
 802c4d0:	03cf03a4 	.word	0x03cf03a4
 802c4d4:	03e000d4 	.word	0x03e000d4
 802c4d8:	0403      	.short	0x0403
 802c4da:	69b3      	ldr	r3, [r6, #24]
 802c4dc:	4aad      	ldr	r2, [pc, #692]	@ (802c794 <__strftime.isra.0+0x3f8>)
 802c4de:	3318      	adds	r3, #24
 802c4e0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802c4e4:	4658      	mov	r0, fp
 802c4e6:	f7e3 fedb 	bl	80102a0 <strlen>
 802c4ea:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c4ee:	eb04 0a00 	add.w	sl, r4, r0
 802c4f2:	1e6b      	subs	r3, r5, #1
 802c4f4:	45a2      	cmp	sl, r4
 802c4f6:	d107      	bne.n	802c508 <__strftime.isra.0+0x16c>
 802c4f8:	f898 3000 	ldrb.w	r3, [r8]
 802c4fc:	2b00      	cmp	r3, #0
 802c4fe:	f000 8409 	beq.w	802cd14 <__strftime.isra.0+0x978>
 802c502:	f108 0201 	add.w	r2, r8, #1
 802c506:	e780      	b.n	802c40a <__strftime.isra.0+0x6e>
 802c508:	42a3      	cmp	r3, r4
 802c50a:	f240 80d7 	bls.w	802c6bc <__strftime.isra.0+0x320>
 802c50e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802c512:	553a      	strb	r2, [r7, r4]
 802c514:	3401      	adds	r4, #1
 802c516:	e7ed      	b.n	802c4f4 <__strftime.isra.0+0x158>
 802c518:	69b2      	ldr	r2, [r6, #24]
 802c51a:	4b9e      	ldr	r3, [pc, #632]	@ (802c794 <__strftime.isra.0+0x3f8>)
 802c51c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802c520:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 802c524:	4658      	mov	r0, fp
 802c526:	f7e3 febb 	bl	80102a0 <strlen>
 802c52a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c52e:	eb04 0a00 	add.w	sl, r4, r0
 802c532:	1e6b      	subs	r3, r5, #1
 802c534:	4554      	cmp	r4, sl
 802c536:	d0df      	beq.n	802c4f8 <__strftime.isra.0+0x15c>
 802c538:	42a3      	cmp	r3, r4
 802c53a:	f240 80bf 	bls.w	802c6bc <__strftime.isra.0+0x320>
 802c53e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802c542:	553a      	strb	r2, [r7, r4]
 802c544:	3401      	adds	r4, #1
 802c546:	e7f5      	b.n	802c534 <__strftime.isra.0+0x198>
 802c548:	4b92      	ldr	r3, [pc, #584]	@ (802c794 <__strftime.isra.0+0x3f8>)
 802c54a:	6932      	ldr	r2, [r6, #16]
 802c54c:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 802c550:	4658      	mov	r0, fp
 802c552:	f7e3 fea5 	bl	80102a0 <strlen>
 802c556:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c55a:	eb04 0a00 	add.w	sl, r4, r0
 802c55e:	1e6b      	subs	r3, r5, #1
 802c560:	45a2      	cmp	sl, r4
 802c562:	d0c9      	beq.n	802c4f8 <__strftime.isra.0+0x15c>
 802c564:	42a3      	cmp	r3, r4
 802c566:	f240 80a9 	bls.w	802c6bc <__strftime.isra.0+0x320>
 802c56a:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802c56e:	553a      	strb	r2, [r7, r4]
 802c570:	3401      	adds	r4, #1
 802c572:	e7f5      	b.n	802c560 <__strftime.isra.0+0x1c4>
 802c574:	6933      	ldr	r3, [r6, #16]
 802c576:	4a87      	ldr	r2, [pc, #540]	@ (802c794 <__strftime.isra.0+0x3f8>)
 802c578:	330c      	adds	r3, #12
 802c57a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 802c57e:	4658      	mov	r0, fp
 802c580:	f7e3 fe8e 	bl	80102a0 <strlen>
 802c584:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c588:	eb04 0a00 	add.w	sl, r4, r0
 802c58c:	1e6b      	subs	r3, r5, #1
 802c58e:	45a2      	cmp	sl, r4
 802c590:	d0b2      	beq.n	802c4f8 <__strftime.isra.0+0x15c>
 802c592:	42a3      	cmp	r3, r4
 802c594:	f240 8092 	bls.w	802c6bc <__strftime.isra.0+0x320>
 802c598:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 802c59c:	553a      	strb	r2, [r7, r4]
 802c59e:	3401      	adds	r4, #1
 802c5a0:	e7f5      	b.n	802c58e <__strftime.isra.0+0x1f2>
 802c5a2:	4b7c      	ldr	r3, [pc, #496]	@ (802c794 <__strftime.isra.0+0x3f8>)
 802c5a4:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 802c5a8:	4650      	mov	r0, sl
 802c5aa:	f7e3 fe79 	bl	80102a0 <strlen>
 802c5ae:	f89a 3000 	ldrb.w	r3, [sl]
 802c5b2:	2b00      	cmp	r3, #0
 802c5b4:	f000 8341 	beq.w	802cc3a <__strftime.isra.0+0x89e>
 802c5b8:	4633      	mov	r3, r6
 802c5ba:	4652      	mov	r2, sl
 802c5bc:	1b29      	subs	r1, r5, r4
 802c5be:	1938      	adds	r0, r7, r4
 802c5c0:	f7ff feec 	bl	802c39c <__strftime.isra.0>
 802c5c4:	2800      	cmp	r0, #0
 802c5c6:	dd79      	ble.n	802c6bc <__strftime.isra.0+0x320>
 802c5c8:	eb04 0a00 	add.w	sl, r4, r0
 802c5cc:	e794      	b.n	802c4f8 <__strftime.isra.0+0x15c>
 802c5ce:	4b71      	ldr	r3, [pc, #452]	@ (802c794 <__strftime.isra.0+0x3f8>)
 802c5d0:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 802c5d4:	e7e8      	b.n	802c5a8 <__strftime.isra.0+0x20c>
 802c5d6:	4b6f      	ldr	r3, [pc, #444]	@ (802c794 <__strftime.isra.0+0x3f8>)
 802c5d8:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802c5dc:	e7e4      	b.n	802c5a8 <__strftime.isra.0+0x20c>
 802c5de:	4b6d      	ldr	r3, [pc, #436]	@ (802c794 <__strftime.isra.0+0x3f8>)
 802c5e0:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 802c5e4:	e7e0      	b.n	802c5a8 <__strftime.isra.0+0x20c>
 802c5e6:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802c5ea:	496b      	ldr	r1, [pc, #428]	@ (802c798 <__strftime.isra.0+0x3fc>)
 802c5ec:	458a      	cmp	sl, r1
 802c5ee:	bfac      	ite	ge
 802c5f0:	f04f 0b00 	movge.w	fp, #0
 802c5f4:	f04f 0b01 	movlt.w	fp, #1
 802c5f8:	f1ba 0f00 	cmp.w	sl, #0
 802c5fc:	db12      	blt.n	802c624 <__strftime.isra.0+0x288>
 802c5fe:	2064      	movs	r0, #100	@ 0x64
 802c600:	fb9a f0f0 	sdiv	r0, sl, r0
 802c604:	3013      	adds	r0, #19
 802c606:	f1b9 0f00 	cmp.w	r9, #0
 802c60a:	d015      	beq.n	802c638 <__strftime.isra.0+0x29c>
 802c60c:	2863      	cmp	r0, #99	@ 0x63
 802c60e:	dd28      	ble.n	802c662 <__strftime.isra.0+0x2c6>
 802c610:	4b62      	ldr	r3, [pc, #392]	@ (802c79c <__strftime.isra.0+0x400>)
 802c612:	4963      	ldr	r1, [pc, #396]	@ (802c7a0 <__strftime.isra.0+0x404>)
 802c614:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802c618:	bf0c      	ite	eq
 802c61a:	469c      	moveq	ip, r3
 802c61c:	468c      	movne	ip, r1
 802c61e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802c7bc <__strftime.isra.0+0x420>
 802c622:	e00d      	b.n	802c640 <__strftime.isra.0+0x2a4>
 802c624:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 802c628:	9203      	str	r2, [sp, #12]
 802c62a:	f000 ff88 	bl	802d53e <abs>
 802c62e:	2164      	movs	r1, #100	@ 0x64
 802c630:	9a03      	ldr	r2, [sp, #12]
 802c632:	fb90 f0f1 	sdiv	r0, r0, r1
 802c636:	e7e6      	b.n	802c606 <__strftime.isra.0+0x26a>
 802c638:	f8df c164 	ldr.w	ip, [pc, #356]	@ 802c7a0 <__strftime.isra.0+0x404>
 802c63c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 802c7c0 <__strftime.isra.0+0x424>
 802c640:	4b58      	ldr	r3, [pc, #352]	@ (802c7a4 <__strftime.isra.0+0x408>)
 802c642:	9001      	str	r0, [sp, #4]
 802c644:	2a02      	cmp	r2, #2
 802c646:	bf2c      	ite	cs
 802c648:	ebcb 0102 	rsbcs	r1, fp, r2
 802c64c:	f1cb 0102 	rsbcc	r1, fp, #2
 802c650:	4a51      	ldr	r2, [pc, #324]	@ (802c798 <__strftime.isra.0+0x3fc>)
 802c652:	9100      	str	r1, [sp, #0]
 802c654:	4592      	cmp	sl, r2
 802c656:	bfa8      	it	ge
 802c658:	4663      	movge	r3, ip
 802c65a:	4672      	mov	r2, lr
 802c65c:	1b29      	subs	r1, r5, r4
 802c65e:	1938      	adds	r0, r7, r4
 802c660:	e023      	b.n	802c6aa <__strftime.isra.0+0x30e>
 802c662:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 802c7a0 <__strftime.isra.0+0x404>
 802c666:	e7da      	b.n	802c61e <__strftime.isra.0+0x282>
 802c668:	494f      	ldr	r1, [pc, #316]	@ (802c7a8 <__strftime.isra.0+0x40c>)
 802c66a:	4a50      	ldr	r2, [pc, #320]	@ (802c7ac <__strftime.isra.0+0x410>)
 802c66c:	68f3      	ldr	r3, [r6, #12]
 802c66e:	2864      	cmp	r0, #100	@ 0x64
 802c670:	bf18      	it	ne
 802c672:	460a      	movne	r2, r1
 802c674:	1b29      	subs	r1, r5, r4
 802c676:	1938      	adds	r0, r7, r4
 802c678:	f002 f986 	bl	802e988 <sniprintf>
 802c67c:	e017      	b.n	802c6ae <__strftime.isra.0+0x312>
 802c67e:	6970      	ldr	r0, [r6, #20]
 802c680:	6933      	ldr	r3, [r6, #16]
 802c682:	2800      	cmp	r0, #0
 802c684:	f103 0a01 	add.w	sl, r3, #1
 802c688:	eb07 0b04 	add.w	fp, r7, r4
 802c68c:	68f3      	ldr	r3, [r6, #12]
 802c68e:	eba5 0904 	sub.w	r9, r5, r4
 802c692:	db19      	blt.n	802c6c8 <__strftime.isra.0+0x32c>
 802c694:	2264      	movs	r2, #100	@ 0x64
 802c696:	fb90 fcf2 	sdiv	ip, r0, r2
 802c69a:	fb02 001c 	mls	r0, r2, ip, r0
 802c69e:	4a44      	ldr	r2, [pc, #272]	@ (802c7b0 <__strftime.isra.0+0x414>)
 802c6a0:	e9cd 3000 	strd	r3, r0, [sp]
 802c6a4:	4649      	mov	r1, r9
 802c6a6:	4653      	mov	r3, sl
 802c6a8:	4658      	mov	r0, fp
 802c6aa:	f002 f96d 	bl	802e988 <sniprintf>
 802c6ae:	2800      	cmp	r0, #0
 802c6b0:	db04      	blt.n	802c6bc <__strftime.isra.0+0x320>
 802c6b2:	eb00 0a04 	add.w	sl, r0, r4
 802c6b6:	4555      	cmp	r5, sl
 802c6b8:	f63f af1e 	bhi.w	802c4f8 <__strftime.isra.0+0x15c>
 802c6bc:	f04f 0a00 	mov.w	sl, #0
 802c6c0:	4650      	mov	r0, sl
 802c6c2:	b00f      	add	sp, #60	@ 0x3c
 802c6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c6c8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c6cc:	9303      	str	r3, [sp, #12]
 802c6ce:	f000 ff36 	bl	802d53e <abs>
 802c6d2:	2264      	movs	r2, #100	@ 0x64
 802c6d4:	9b03      	ldr	r3, [sp, #12]
 802c6d6:	fb90 fcf2 	sdiv	ip, r0, r2
 802c6da:	fb0c 0012 	mls	r0, ip, r2, r0
 802c6de:	e7de      	b.n	802c69e <__strftime.isra.0+0x302>
 802c6e0:	2125      	movs	r1, #37	@ 0x25
 802c6e2:	f88d 1018 	strb.w	r1, [sp, #24]
 802c6e6:	f1b9 0f00 	cmp.w	r9, #0
 802c6ea:	d00b      	beq.n	802c704 <__strftime.isra.0+0x368>
 802c6ec:	2a05      	cmp	r2, #5
 802c6ee:	f88d 9019 	strb.w	r9, [sp, #25]
 802c6f2:	d817      	bhi.n	802c724 <__strftime.isra.0+0x388>
 802c6f4:	f10d 001a 	add.w	r0, sp, #26
 802c6f8:	492e      	ldr	r1, [pc, #184]	@ (802c7b4 <__strftime.isra.0+0x418>)
 802c6fa:	f000 fe83 	bl	802d404 <strcpy>
 802c6fe:	4633      	mov	r3, r6
 802c700:	aa06      	add	r2, sp, #24
 802c702:	e75b      	b.n	802c5bc <__strftime.isra.0+0x220>
 802c704:	232b      	movs	r3, #43	@ 0x2b
 802c706:	f88d 3019 	strb.w	r3, [sp, #25]
 802c70a:	2304      	movs	r3, #4
 802c70c:	4a2a      	ldr	r2, [pc, #168]	@ (802c7b8 <__strftime.isra.0+0x41c>)
 802c70e:	211e      	movs	r1, #30
 802c710:	f10d 001a 	add.w	r0, sp, #26
 802c714:	f002 f938 	bl	802e988 <sniprintf>
 802c718:	2800      	cmp	r0, #0
 802c71a:	ddeb      	ble.n	802c6f4 <__strftime.isra.0+0x358>
 802c71c:	f10d 031a 	add.w	r3, sp, #26
 802c720:	4418      	add	r0, r3
 802c722:	e7e9      	b.n	802c6f8 <__strftime.isra.0+0x35c>
 802c724:	1f93      	subs	r3, r2, #6
 802c726:	d0e5      	beq.n	802c6f4 <__strftime.isra.0+0x358>
 802c728:	e7f0      	b.n	802c70c <__strftime.isra.0+0x370>
 802c72a:	4630      	mov	r0, r6
 802c72c:	f7ff fde4 	bl	802c2f8 <iso_year_adjust>
 802c730:	4682      	mov	sl, r0
 802c732:	6970      	ldr	r0, [r6, #20]
 802c734:	2800      	cmp	r0, #0
 802c736:	db11      	blt.n	802c75c <__strftime.isra.0+0x3c0>
 802c738:	2364      	movs	r3, #100	@ 0x64
 802c73a:	fb90 f2f3 	sdiv	r2, r0, r3
 802c73e:	fb03 0012 	mls	r0, r3, r2, r0
 802c742:	2364      	movs	r3, #100	@ 0x64
 802c744:	4482      	add	sl, r0
 802c746:	fb9a f2f3 	sdiv	r2, sl, r3
 802c74a:	fb03 aa12 	mls	sl, r3, r2, sl
 802c74e:	449a      	add	sl, r3
 802c750:	fbba f2f3 	udiv	r2, sl, r3
 802c754:	fb03 a312 	mls	r3, r3, r2, sl
 802c758:	4a14      	ldr	r2, [pc, #80]	@ (802c7ac <__strftime.isra.0+0x410>)
 802c75a:	e78b      	b.n	802c674 <__strftime.isra.0+0x2d8>
 802c75c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c760:	f000 feed 	bl	802d53e <abs>
 802c764:	2364      	movs	r3, #100	@ 0x64
 802c766:	f1ba 0f00 	cmp.w	sl, #0
 802c76a:	fb90 f2f3 	sdiv	r2, r0, r3
 802c76e:	fb02 0013 	mls	r0, r2, r3, r0
 802c772:	da07      	bge.n	802c784 <__strftime.isra.0+0x3e8>
 802c774:	6972      	ldr	r2, [r6, #20]
 802c776:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 802c77a:	429a      	cmp	r2, r3
 802c77c:	bfb8      	it	lt
 802c77e:	f04f 0a01 	movlt.w	sl, #1
 802c782:	e7de      	b.n	802c742 <__strftime.isra.0+0x3a6>
 802c784:	d0dd      	beq.n	802c742 <__strftime.isra.0+0x3a6>
 802c786:	6972      	ldr	r2, [r6, #20]
 802c788:	4b03      	ldr	r3, [pc, #12]	@ (802c798 <__strftime.isra.0+0x3fc>)
 802c78a:	429a      	cmp	r2, r3
 802c78c:	bfb8      	it	lt
 802c78e:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802c792:	e7d6      	b.n	802c742 <__strftime.isra.0+0x3a6>
 802c794:	0803afd4 	.word	0x0803afd4
 802c798:	fffff894 	.word	0xfffff894
 802c79c:	0803adf7 	.word	0x0803adf7
 802c7a0:	0803ad12 	.word	0x0803ad12
 802c7a4:	0803adf9 	.word	0x0803adf9
 802c7a8:	0803adfb 	.word	0x0803adfb
 802c7ac:	0803ae09 	.word	0x0803ae09
 802c7b0:	0803adff 	.word	0x0803adff
 802c7b4:	0803ae12 	.word	0x0803ae12
 802c7b8:	0803ae0e 	.word	0x0803ae0e
 802c7bc:	0803adef 	.word	0x0803adef
 802c7c0:	0803ade8 	.word	0x0803ade8
 802c7c4:	6971      	ldr	r1, [r6, #20]
 802c7c6:	48bc      	ldr	r0, [pc, #752]	@ (802cab8 <__strftime.isra.0+0x71c>)
 802c7c8:	9205      	str	r2, [sp, #20]
 802c7ca:	4281      	cmp	r1, r0
 802c7cc:	bfac      	ite	ge
 802c7ce:	2300      	movge	r3, #0
 802c7d0:	2301      	movlt	r3, #1
 802c7d2:	4630      	mov	r0, r6
 802c7d4:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802c7d8:	f7ff fd8e 	bl	802c2f8 <iso_year_adjust>
 802c7dc:	9904      	ldr	r1, [sp, #16]
 802c7de:	9a05      	ldr	r2, [sp, #20]
 802c7e0:	2900      	cmp	r1, #0
 802c7e2:	4682      	mov	sl, r0
 802c7e4:	db3a      	blt.n	802c85c <__strftime.isra.0+0x4c0>
 802c7e6:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802c7ea:	fb91 fbfb 	sdiv	fp, r1, fp
 802c7ee:	f10b 0b13 	add.w	fp, fp, #19
 802c7f2:	6970      	ldr	r0, [r6, #20]
 802c7f4:	2800      	cmp	r0, #0
 802c7f6:	db3e      	blt.n	802c876 <__strftime.isra.0+0x4da>
 802c7f8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802c7fc:	f1ba 0f00 	cmp.w	sl, #0
 802c800:	fb90 fefc 	sdiv	lr, r0, ip
 802c804:	fb0c 001e 	mls	r0, ip, lr, r0
 802c808:	da4f      	bge.n	802c8aa <__strftime.isra.0+0x50e>
 802c80a:	4482      	add	sl, r0
 802c80c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802c810:	d157      	bne.n	802c8c2 <__strftime.isra.0+0x526>
 802c812:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c816:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802c81a:	9b03      	ldr	r3, [sp, #12]
 802c81c:	2164      	movs	r1, #100	@ 0x64
 802c81e:	fb01 aa0b 	mla	sl, r1, fp, sl
 802c822:	2b00      	cmp	r3, #0
 802c824:	f040 81f7 	bne.w	802cc16 <__strftime.isra.0+0x87a>
 802c828:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802c82c:	d104      	bne.n	802c838 <__strftime.isra.0+0x49c>
 802c82e:	f242 710f 	movw	r1, #9999	@ 0x270f
 802c832:	458a      	cmp	sl, r1
 802c834:	f200 8275 	bhi.w	802cd22 <__strftime.isra.0+0x986>
 802c838:	a906      	add	r1, sp, #24
 802c83a:	2025      	movs	r0, #37	@ 0x25
 802c83c:	7008      	strb	r0, [r1, #0]
 802c83e:	f1b9 0f00 	cmp.w	r9, #0
 802c842:	f040 81f3 	bne.w	802cc2c <__strftime.isra.0+0x890>
 802c846:	1c48      	adds	r0, r1, #1
 802c848:	499c      	ldr	r1, [pc, #624]	@ (802cabc <__strftime.isra.0+0x720>)
 802c84a:	9203      	str	r2, [sp, #12]
 802c84c:	f000 fdda 	bl	802d404 <strcpy>
 802c850:	9a03      	ldr	r2, [sp, #12]
 802c852:	f8cd a000 	str.w	sl, [sp]
 802c856:	4613      	mov	r3, r2
 802c858:	aa06      	add	r2, sp, #24
 802c85a:	e098      	b.n	802c98e <__strftime.isra.0+0x5f2>
 802c85c:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 802c860:	9205      	str	r2, [sp, #20]
 802c862:	9104      	str	r1, [sp, #16]
 802c864:	f000 fe6b 	bl	802d53e <abs>
 802c868:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802c86c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 802c870:	fb90 fbfc 	sdiv	fp, r0, ip
 802c874:	e7bd      	b.n	802c7f2 <__strftime.isra.0+0x456>
 802c876:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802c87a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 802c87e:	f000 fe5e 	bl	802d53e <abs>
 802c882:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802c886:	f1ba 0f00 	cmp.w	sl, #0
 802c88a:	fb90 fefc 	sdiv	lr, r0, ip
 802c88e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 802c892:	fb0e 001c 	mls	r0, lr, ip, r0
 802c896:	da08      	bge.n	802c8aa <__strftime.isra.0+0x50e>
 802c898:	6971      	ldr	r1, [r6, #20]
 802c89a:	4b89      	ldr	r3, [pc, #548]	@ (802cac0 <__strftime.isra.0+0x724>)
 802c89c:	4299      	cmp	r1, r3
 802c89e:	dab4      	bge.n	802c80a <__strftime.isra.0+0x46e>
 802c8a0:	f04f 0a01 	mov.w	sl, #1
 802c8a4:	f8cd a00c 	str.w	sl, [sp, #12]
 802c8a8:	e7af      	b.n	802c80a <__strftime.isra.0+0x46e>
 802c8aa:	f1ba 0f00 	cmp.w	sl, #0
 802c8ae:	d0ac      	beq.n	802c80a <__strftime.isra.0+0x46e>
 802c8b0:	4b81      	ldr	r3, [pc, #516]	@ (802cab8 <__strftime.isra.0+0x71c>)
 802c8b2:	4299      	cmp	r1, r3
 802c8b4:	9b03      	ldr	r3, [sp, #12]
 802c8b6:	bfbc      	itt	lt
 802c8b8:	2301      	movlt	r3, #1
 802c8ba:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802c8be:	9303      	str	r3, [sp, #12]
 802c8c0:	e7a3      	b.n	802c80a <__strftime.isra.0+0x46e>
 802c8c2:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 802c8c6:	bf04      	itt	eq
 802c8c8:	f10b 0b01 	addeq.w	fp, fp, #1
 802c8cc:	f04f 0a00 	moveq.w	sl, #0
 802c8d0:	e7a3      	b.n	802c81a <__strftime.isra.0+0x47e>
 802c8d2:	497c      	ldr	r1, [pc, #496]	@ (802cac4 <__strftime.isra.0+0x728>)
 802c8d4:	4a7c      	ldr	r2, [pc, #496]	@ (802cac8 <__strftime.isra.0+0x72c>)
 802c8d6:	68b3      	ldr	r3, [r6, #8]
 802c8d8:	286b      	cmp	r0, #107	@ 0x6b
 802c8da:	bf18      	it	ne
 802c8dc:	460a      	movne	r2, r1
 802c8de:	e6c9      	b.n	802c674 <__strftime.isra.0+0x2d8>
 802c8e0:	68b3      	ldr	r3, [r6, #8]
 802c8e2:	b163      	cbz	r3, 802c8fe <__strftime.isra.0+0x562>
 802c8e4:	2b0c      	cmp	r3, #12
 802c8e6:	d004      	beq.n	802c8f2 <__strftime.isra.0+0x556>
 802c8e8:	210c      	movs	r1, #12
 802c8ea:	fb93 f2f1 	sdiv	r2, r3, r1
 802c8ee:	fb01 3312 	mls	r3, r1, r2, r3
 802c8f2:	4975      	ldr	r1, [pc, #468]	@ (802cac8 <__strftime.isra.0+0x72c>)
 802c8f4:	4a73      	ldr	r2, [pc, #460]	@ (802cac4 <__strftime.isra.0+0x728>)
 802c8f6:	2849      	cmp	r0, #73	@ 0x49
 802c8f8:	bf18      	it	ne
 802c8fa:	460a      	movne	r2, r1
 802c8fc:	e6ba      	b.n	802c674 <__strftime.isra.0+0x2d8>
 802c8fe:	230c      	movs	r3, #12
 802c900:	e7f7      	b.n	802c8f2 <__strftime.isra.0+0x556>
 802c902:	69f3      	ldr	r3, [r6, #28]
 802c904:	4a71      	ldr	r2, [pc, #452]	@ (802cacc <__strftime.isra.0+0x730>)
 802c906:	3301      	adds	r3, #1
 802c908:	e6b4      	b.n	802c674 <__strftime.isra.0+0x2d8>
 802c90a:	6933      	ldr	r3, [r6, #16]
 802c90c:	3301      	adds	r3, #1
 802c90e:	e723      	b.n	802c758 <__strftime.isra.0+0x3bc>
 802c910:	6873      	ldr	r3, [r6, #4]
 802c912:	e721      	b.n	802c758 <__strftime.isra.0+0x3bc>
 802c914:	1e6b      	subs	r3, r5, #1
 802c916:	429c      	cmp	r4, r3
 802c918:	f4bf aed0 	bcs.w	802c6bc <__strftime.isra.0+0x320>
 802c91c:	f104 0a01 	add.w	sl, r4, #1
 802c920:	230a      	movs	r3, #10
 802c922:	553b      	strb	r3, [r7, r4]
 802c924:	e5e8      	b.n	802c4f8 <__strftime.isra.0+0x15c>
 802c926:	68b3      	ldr	r3, [r6, #8]
 802c928:	2b0b      	cmp	r3, #11
 802c92a:	4b69      	ldr	r3, [pc, #420]	@ (802cad0 <__strftime.isra.0+0x734>)
 802c92c:	bfd4      	ite	le
 802c92e:	2200      	movle	r2, #0
 802c930:	2201      	movgt	r2, #1
 802c932:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802c936:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802c93a:	4658      	mov	r0, fp
 802c93c:	f7e3 fcb0 	bl	80102a0 <strlen>
 802c940:	eb04 0a00 	add.w	sl, r4, r0
 802c944:	4863      	ldr	r0, [pc, #396]	@ (802cad4 <__strftime.isra.0+0x738>)
 802c946:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c94a:	1e69      	subs	r1, r5, #1
 802c94c:	45a2      	cmp	sl, r4
 802c94e:	f43f add3 	beq.w	802c4f8 <__strftime.isra.0+0x15c>
 802c952:	42a1      	cmp	r1, r4
 802c954:	f67f aeb2 	bls.w	802c6bc <__strftime.isra.0+0x320>
 802c958:	f898 2000 	ldrb.w	r2, [r8]
 802c95c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 802c960:	2a50      	cmp	r2, #80	@ 0x50
 802c962:	d106      	bne.n	802c972 <__strftime.isra.0+0x5d6>
 802c964:	5cc2      	ldrb	r2, [r0, r3]
 802c966:	f002 0203 	and.w	r2, r2, #3
 802c96a:	2a01      	cmp	r2, #1
 802c96c:	bf08      	it	eq
 802c96e:	3320      	addeq	r3, #32
 802c970:	b2db      	uxtb	r3, r3
 802c972:	553b      	strb	r3, [r7, r4]
 802c974:	3401      	adds	r4, #1
 802c976:	e7e9      	b.n	802c94c <__strftime.isra.0+0x5b0>
 802c978:	2203      	movs	r2, #3
 802c97a:	6933      	ldr	r3, [r6, #16]
 802c97c:	fb93 f3f2 	sdiv	r3, r3, r2
 802c980:	4a55      	ldr	r2, [pc, #340]	@ (802cad8 <__strftime.isra.0+0x73c>)
 802c982:	3301      	adds	r3, #1
 802c984:	e676      	b.n	802c674 <__strftime.isra.0+0x2d8>
 802c986:	6873      	ldr	r3, [r6, #4]
 802c988:	9300      	str	r3, [sp, #0]
 802c98a:	68b3      	ldr	r3, [r6, #8]
 802c98c:	4a53      	ldr	r2, [pc, #332]	@ (802cadc <__strftime.isra.0+0x740>)
 802c98e:	1b29      	subs	r1, r5, r4
 802c990:	1938      	adds	r0, r7, r4
 802c992:	f001 fff9 	bl	802e988 <sniprintf>
 802c996:	e68a      	b.n	802c6ae <__strftime.isra.0+0x312>
 802c998:	6a33      	ldr	r3, [r6, #32]
 802c99a:	2b00      	cmp	r3, #0
 802c99c:	db78      	blt.n	802ca90 <__strftime.isra.0+0x6f4>
 802c99e:	f000 fa7b 	bl	802ce98 <__tz_lock>
 802c9a2:	9b02      	ldr	r3, [sp, #8]
 802c9a4:	b90b      	cbnz	r3, 802c9aa <__strftime.isra.0+0x60e>
 802c9a6:	f000 fa83 	bl	802ceb0 <_tzset_unlocked>
 802c9aa:	f007 fe73 	bl	8034694 <__gettzinfo>
 802c9ae:	6a33      	ldr	r3, [r6, #32]
 802c9b0:	2b00      	cmp	r3, #0
 802c9b2:	bfd4      	ite	le
 802c9b4:	2200      	movle	r2, #0
 802c9b6:	2201      	movgt	r2, #1
 802c9b8:	2328      	movs	r3, #40	@ 0x28
 802c9ba:	fb02 3303 	mla	r3, r2, r3, r3
 802c9be:	58c3      	ldr	r3, [r0, r3]
 802c9c0:	f1c3 0a00 	rsb	sl, r3, #0
 802c9c4:	f000 fa6e 	bl	802cea4 <__tz_unlock>
 802c9c8:	2301      	movs	r3, #1
 802c9ca:	9302      	str	r3, [sp, #8]
 802c9cc:	6972      	ldr	r2, [r6, #20]
 802c9ce:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 802c9d2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802c9d6:	f16c 0c00 	sbc.w	ip, ip, #0
 802c9da:	f1bc 0f00 	cmp.w	ip, #0
 802c9de:	eba5 0104 	sub.w	r1, r5, r4
 802c9e2:	eb07 0004 	add.w	r0, r7, r4
 802c9e6:	da02      	bge.n	802c9ee <__strftime.isra.0+0x652>
 802c9e8:	3303      	adds	r3, #3
 802c9ea:	f14c 0c00 	adc.w	ip, ip, #0
 802c9ee:	089b      	lsrs	r3, r3, #2
 802c9f0:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802c9f4:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 802c9f8:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802c9fc:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802ca00:	fb9e fefb 	sdiv	lr, lr, fp
 802ca04:	ebb3 030e 	subs.w	r3, r3, lr
 802ca08:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802ca0c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 802ca10:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 802ca14:	fb9e fefb 	sdiv	lr, lr, fp
 802ca18:	eb13 030e 	adds.w	r3, r3, lr
 802ca1c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 802ca20:	3a46      	subs	r2, #70	@ 0x46
 802ca22:	f240 1e6d 	movw	lr, #365	@ 0x16d
 802ca26:	fb0e f202 	mul.w	r2, lr, r2
 802ca2a:	189b      	adds	r3, r3, r2
 802ca2c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802ca30:	69f2      	ldr	r2, [r6, #28]
 802ca32:	f8d6 b004 	ldr.w	fp, [r6, #4]
 802ca36:	189b      	adds	r3, r3, r2
 802ca38:	f04f 0e18 	mov.w	lr, #24
 802ca3c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 802ca40:	fba3 230e 	umull	r2, r3, r3, lr
 802ca44:	fb0e 330c 	mla	r3, lr, ip, r3
 802ca48:	f8d6 c008 	ldr.w	ip, [r6, #8]
 802ca4c:	eb12 020c 	adds.w	r2, r2, ip
 802ca50:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802ca54:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 802ca58:	fba2 2e0c 	umull	r2, lr, r2, ip
 802ca5c:	fb0c ee03 	mla	lr, ip, r3, lr
 802ca60:	eb12 030b 	adds.w	r3, r2, fp
 802ca64:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 802ca68:	fba3 e30c 	umull	lr, r3, r3, ip
 802ca6c:	fb0c 3302 	mla	r3, ip, r2, r3
 802ca70:	f8d6 c000 	ldr.w	ip, [r6]
 802ca74:	eb1e 020c 	adds.w	r2, lr, ip
 802ca78:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 802ca7c:	ebb2 020a 	subs.w	r2, r2, sl
 802ca80:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802ca84:	e9cd 2300 	strd	r2, r3, [sp]
 802ca88:	4a15      	ldr	r2, [pc, #84]	@ (802cae0 <__strftime.isra.0+0x744>)
 802ca8a:	f001 ff7d 	bl	802e988 <sniprintf>
 802ca8e:	e60e      	b.n	802c6ae <__strftime.isra.0+0x312>
 802ca90:	f04f 0a00 	mov.w	sl, #0
 802ca94:	e79a      	b.n	802c9cc <__strftime.isra.0+0x630>
 802ca96:	6833      	ldr	r3, [r6, #0]
 802ca98:	e65e      	b.n	802c758 <__strftime.isra.0+0x3bc>
 802ca9a:	1e6b      	subs	r3, r5, #1
 802ca9c:	429c      	cmp	r4, r3
 802ca9e:	f4bf ae0d 	bcs.w	802c6bc <__strftime.isra.0+0x320>
 802caa2:	f104 0a01 	add.w	sl, r4, #1
 802caa6:	2309      	movs	r3, #9
 802caa8:	e73b      	b.n	802c922 <__strftime.isra.0+0x586>
 802caaa:	6833      	ldr	r3, [r6, #0]
 802caac:	9301      	str	r3, [sp, #4]
 802caae:	6873      	ldr	r3, [r6, #4]
 802cab0:	9300      	str	r3, [sp, #0]
 802cab2:	68b3      	ldr	r3, [r6, #8]
 802cab4:	4a0b      	ldr	r2, [pc, #44]	@ (802cae4 <__strftime.isra.0+0x748>)
 802cab6:	e5d1      	b.n	802c65c <__strftime.isra.0+0x2c0>
 802cab8:	fffff894 	.word	0xfffff894
 802cabc:	0803ae1a 	.word	0x0803ae1a
 802cac0:	fffff895 	.word	0xfffff895
 802cac4:	0803ae09 	.word	0x0803ae09
 802cac8:	0803adfb 	.word	0x0803adfb
 802cacc:	0803ae1e 	.word	0x0803ae1e
 802cad0:	0803afd4 	.word	0x0803afd4
 802cad4:	0803b0d1 	.word	0x0803b0d1
 802cad8:	0803ae23 	.word	0x0803ae23
 802cadc:	0803ae32 	.word	0x0803ae32
 802cae0:	0803ae28 	.word	0x0803ae28
 802cae4:	0803ae2d 	.word	0x0803ae2d
 802cae8:	1e6b      	subs	r3, r5, #1
 802caea:	429c      	cmp	r4, r3
 802caec:	f4bf ade6 	bcs.w	802c6bc <__strftime.isra.0+0x320>
 802caf0:	69b3      	ldr	r3, [r6, #24]
 802caf2:	b91b      	cbnz	r3, 802cafc <__strftime.isra.0+0x760>
 802caf4:	2337      	movs	r3, #55	@ 0x37
 802caf6:	f104 0a01 	add.w	sl, r4, #1
 802cafa:	e712      	b.n	802c922 <__strftime.isra.0+0x586>
 802cafc:	3330      	adds	r3, #48	@ 0x30
 802cafe:	b2db      	uxtb	r3, r3
 802cb00:	e7f9      	b.n	802caf6 <__strftime.isra.0+0x75a>
 802cb02:	69f3      	ldr	r3, [r6, #28]
 802cb04:	69b2      	ldr	r2, [r6, #24]
 802cb06:	3307      	adds	r3, #7
 802cb08:	1a9b      	subs	r3, r3, r2
 802cb0a:	2207      	movs	r2, #7
 802cb0c:	fb93 f3f2 	sdiv	r3, r3, r2
 802cb10:	e622      	b.n	802c758 <__strftime.isra.0+0x3bc>
 802cb12:	4630      	mov	r0, r6
 802cb14:	f7ff fbf0 	bl	802c2f8 <iso_year_adjust>
 802cb18:	69b2      	ldr	r2, [r6, #24]
 802cb1a:	b132      	cbz	r2, 802cb2a <__strftime.isra.0+0x78e>
 802cb1c:	3a01      	subs	r2, #1
 802cb1e:	2800      	cmp	r0, #0
 802cb20:	69f3      	ldr	r3, [r6, #28]
 802cb22:	dc26      	bgt.n	802cb72 <__strftime.isra.0+0x7d6>
 802cb24:	d103      	bne.n	802cb2e <__strftime.isra.0+0x792>
 802cb26:	330a      	adds	r3, #10
 802cb28:	e7ee      	b.n	802cb08 <__strftime.isra.0+0x76c>
 802cb2a:	2206      	movs	r2, #6
 802cb2c:	e7f7      	b.n	802cb1e <__strftime.isra.0+0x782>
 802cb2e:	1ad2      	subs	r2, r2, r3
 802cb30:	6973      	ldr	r3, [r6, #20]
 802cb32:	2b00      	cmp	r3, #0
 802cb34:	f240 716b 	movw	r1, #1899	@ 0x76b
 802cb38:	bfa8      	it	ge
 802cb3a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802cb3e:	440b      	add	r3, r1
 802cb40:	0799      	lsls	r1, r3, #30
 802cb42:	d105      	bne.n	802cb50 <__strftime.isra.0+0x7b4>
 802cb44:	2064      	movs	r0, #100	@ 0x64
 802cb46:	fb93 f1f0 	sdiv	r1, r3, r0
 802cb4a:	fb00 3111 	mls	r1, r0, r1, r3
 802cb4e:	b971      	cbnz	r1, 802cb6e <__strftime.isra.0+0x7d2>
 802cb50:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 802cb54:	fb93 f0f1 	sdiv	r0, r3, r1
 802cb58:	fb01 3310 	mls	r3, r1, r0, r3
 802cb5c:	fab3 f383 	clz	r3, r3
 802cb60:	095b      	lsrs	r3, r3, #5
 802cb62:	1ad2      	subs	r2, r2, r3
 802cb64:	2a04      	cmp	r2, #4
 802cb66:	bfcc      	ite	gt
 802cb68:	2334      	movgt	r3, #52	@ 0x34
 802cb6a:	2335      	movle	r3, #53	@ 0x35
 802cb6c:	e5f4      	b.n	802c758 <__strftime.isra.0+0x3bc>
 802cb6e:	2301      	movs	r3, #1
 802cb70:	e7f7      	b.n	802cb62 <__strftime.isra.0+0x7c6>
 802cb72:	2301      	movs	r3, #1
 802cb74:	e5f0      	b.n	802c758 <__strftime.isra.0+0x3bc>
 802cb76:	496c      	ldr	r1, [pc, #432]	@ (802cd28 <__strftime.isra.0+0x98c>)
 802cb78:	9203      	str	r2, [sp, #12]
 802cb7a:	a806      	add	r0, sp, #24
 802cb7c:	f000 fc42 	bl	802d404 <strcpy>
 802cb80:	a806      	add	r0, sp, #24
 802cb82:	f7e3 fb8d 	bl	80102a0 <strlen>
 802cb86:	ab06      	add	r3, sp, #24
 802cb88:	eb03 0a00 	add.w	sl, r3, r0
 802cb8c:	f10a 0a01 	add.w	sl, sl, #1
 802cb90:	46d3      	mov	fp, sl
 802cb92:	f1b9 0f00 	cmp.w	r9, #0
 802cb96:	d009      	beq.n	802cbac <__strftime.isra.0+0x810>
 802cb98:	9a03      	ldr	r2, [sp, #12]
 802cb9a:	f803 9000 	strb.w	r9, [r3, r0]
 802cb9e:	2a05      	cmp	r2, #5
 802cba0:	d901      	bls.n	802cba6 <__strftime.isra.0+0x80a>
 802cba2:	1f93      	subs	r3, r2, #6
 802cba4:	d106      	bne.n	802cbb4 <__strftime.isra.0+0x818>
 802cba6:	4961      	ldr	r1, [pc, #388]	@ (802cd2c <__strftime.isra.0+0x990>)
 802cba8:	4658      	mov	r0, fp
 802cbaa:	e5a6      	b.n	802c6fa <__strftime.isra.0+0x35e>
 802cbac:	aa06      	add	r2, sp, #24
 802cbae:	232b      	movs	r3, #43	@ 0x2b
 802cbb0:	5413      	strb	r3, [r2, r0]
 802cbb2:	2304      	movs	r3, #4
 802cbb4:	a90e      	add	r1, sp, #56	@ 0x38
 802cbb6:	4a5e      	ldr	r2, [pc, #376]	@ (802cd30 <__strftime.isra.0+0x994>)
 802cbb8:	eba1 010a 	sub.w	r1, r1, sl
 802cbbc:	4650      	mov	r0, sl
 802cbbe:	f001 fee3 	bl	802e988 <sniprintf>
 802cbc2:	2800      	cmp	r0, #0
 802cbc4:	bfc8      	it	gt
 802cbc6:	eb0a 0b00 	addgt.w	fp, sl, r0
 802cbca:	e7ec      	b.n	802cba6 <__strftime.isra.0+0x80a>
 802cbcc:	1e6b      	subs	r3, r5, #1
 802cbce:	429c      	cmp	r4, r3
 802cbd0:	f4bf ad74 	bcs.w	802c6bc <__strftime.isra.0+0x320>
 802cbd4:	69b3      	ldr	r3, [r6, #24]
 802cbd6:	f104 0a01 	add.w	sl, r4, #1
 802cbda:	3330      	adds	r3, #48	@ 0x30
 802cbdc:	e6a1      	b.n	802c922 <__strftime.isra.0+0x586>
 802cbde:	69b2      	ldr	r2, [r6, #24]
 802cbe0:	b11a      	cbz	r2, 802cbea <__strftime.isra.0+0x84e>
 802cbe2:	3a01      	subs	r2, #1
 802cbe4:	69f3      	ldr	r3, [r6, #28]
 802cbe6:	3307      	adds	r3, #7
 802cbe8:	e78e      	b.n	802cb08 <__strftime.isra.0+0x76c>
 802cbea:	2206      	movs	r2, #6
 802cbec:	e7fa      	b.n	802cbe4 <__strftime.isra.0+0x848>
 802cbee:	6970      	ldr	r0, [r6, #20]
 802cbf0:	2800      	cmp	r0, #0
 802cbf2:	db05      	blt.n	802cc00 <__strftime.isra.0+0x864>
 802cbf4:	2364      	movs	r3, #100	@ 0x64
 802cbf6:	fb90 f2f3 	sdiv	r2, r0, r3
 802cbfa:	fb02 0313 	mls	r3, r2, r3, r0
 802cbfe:	e5ab      	b.n	802c758 <__strftime.isra.0+0x3bc>
 802cc00:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802cc04:	f000 fc9b 	bl	802d53e <abs>
 802cc08:	e7f4      	b.n	802cbf4 <__strftime.isra.0+0x858>
 802cc0a:	6971      	ldr	r1, [r6, #20]
 802cc0c:	4849      	ldr	r0, [pc, #292]	@ (802cd34 <__strftime.isra.0+0x998>)
 802cc0e:	4281      	cmp	r1, r0
 802cc10:	da09      	bge.n	802cc26 <__strftime.isra.0+0x88a>
 802cc12:	eba0 0a01 	sub.w	sl, r0, r1
 802cc16:	212d      	movs	r1, #45	@ 0x2d
 802cc18:	f88d 1018 	strb.w	r1, [sp, #24]
 802cc1c:	b102      	cbz	r2, 802cc20 <__strftime.isra.0+0x884>
 802cc1e:	3a01      	subs	r2, #1
 802cc20:	f10d 0119 	add.w	r1, sp, #25
 802cc24:	e609      	b.n	802c83a <__strftime.isra.0+0x49e>
 802cc26:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802cc2a:	e5fd      	b.n	802c828 <__strftime.isra.0+0x48c>
 802cc2c:	2330      	movs	r3, #48	@ 0x30
 802cc2e:	1c88      	adds	r0, r1, #2
 802cc30:	704b      	strb	r3, [r1, #1]
 802cc32:	e609      	b.n	802c848 <__strftime.isra.0+0x4ac>
 802cc34:	6a33      	ldr	r3, [r6, #32]
 802cc36:	2b00      	cmp	r3, #0
 802cc38:	da01      	bge.n	802cc3e <__strftime.isra.0+0x8a2>
 802cc3a:	46a2      	mov	sl, r4
 802cc3c:	e45c      	b.n	802c4f8 <__strftime.isra.0+0x15c>
 802cc3e:	f000 f92b 	bl	802ce98 <__tz_lock>
 802cc42:	9b02      	ldr	r3, [sp, #8]
 802cc44:	b90b      	cbnz	r3, 802cc4a <__strftime.isra.0+0x8ae>
 802cc46:	f000 f933 	bl	802ceb0 <_tzset_unlocked>
 802cc4a:	f007 fd23 	bl	8034694 <__gettzinfo>
 802cc4e:	6a33      	ldr	r3, [r6, #32]
 802cc50:	2b00      	cmp	r3, #0
 802cc52:	bfd4      	ite	le
 802cc54:	2200      	movle	r2, #0
 802cc56:	2201      	movgt	r2, #1
 802cc58:	2328      	movs	r3, #40	@ 0x28
 802cc5a:	fb02 3303 	mla	r3, r2, r3, r3
 802cc5e:	eb07 0a04 	add.w	sl, r7, r4
 802cc62:	58c3      	ldr	r3, [r0, r3]
 802cc64:	f1c3 0900 	rsb	r9, r3, #0
 802cc68:	f000 f91c 	bl	802cea4 <__tz_unlock>
 802cc6c:	233c      	movs	r3, #60	@ 0x3c
 802cc6e:	fb99 f0f3 	sdiv	r0, r9, r3
 802cc72:	f001 fbfe 	bl	802e472 <labs>
 802cc76:	233c      	movs	r3, #60	@ 0x3c
 802cc78:	eba5 0b04 	sub.w	fp, r5, r4
 802cc7c:	fb90 f2f3 	sdiv	r2, r0, r3
 802cc80:	fb02 0013 	mls	r0, r2, r3, r0
 802cc84:	9000      	str	r0, [sp, #0]
 802cc86:	4a2c      	ldr	r2, [pc, #176]	@ (802cd38 <__strftime.isra.0+0x99c>)
 802cc88:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 802cc8c:	4659      	mov	r1, fp
 802cc8e:	4650      	mov	r0, sl
 802cc90:	fb99 f3f3 	sdiv	r3, r9, r3
 802cc94:	f001 fe78 	bl	802e988 <sniprintf>
 802cc98:	2800      	cmp	r0, #0
 802cc9a:	f6ff ad0f 	blt.w	802c6bc <__strftime.isra.0+0x320>
 802cc9e:	eb00 0a04 	add.w	sl, r0, r4
 802cca2:	4555      	cmp	r5, sl
 802cca4:	f67f ad0a 	bls.w	802c6bc <__strftime.isra.0+0x320>
 802cca8:	2301      	movs	r3, #1
 802ccaa:	9302      	str	r3, [sp, #8]
 802ccac:	e424      	b.n	802c4f8 <__strftime.isra.0+0x15c>
 802ccae:	6a33      	ldr	r3, [r6, #32]
 802ccb0:	2b00      	cmp	r3, #0
 802ccb2:	dbc2      	blt.n	802cc3a <__strftime.isra.0+0x89e>
 802ccb4:	f000 f8f0 	bl	802ce98 <__tz_lock>
 802ccb8:	9b02      	ldr	r3, [sp, #8]
 802ccba:	b90b      	cbnz	r3, 802ccc0 <__strftime.isra.0+0x924>
 802ccbc:	f000 f8f8 	bl	802ceb0 <_tzset_unlocked>
 802ccc0:	6a33      	ldr	r3, [r6, #32]
 802ccc2:	4a1e      	ldr	r2, [pc, #120]	@ (802cd3c <__strftime.isra.0+0x9a0>)
 802ccc4:	2b00      	cmp	r3, #0
 802ccc6:	bfd4      	ite	le
 802ccc8:	2300      	movle	r3, #0
 802ccca:	2301      	movgt	r3, #1
 802cccc:	46a2      	mov	sl, r4
 802ccce:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 802ccd2:	4648      	mov	r0, r9
 802ccd4:	f7e3 fae4 	bl	80102a0 <strlen>
 802ccd8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802ccdc:	4420      	add	r0, r4
 802ccde:	1e6b      	subs	r3, r5, #1
 802cce0:	4550      	cmp	r0, sl
 802cce2:	d102      	bne.n	802ccea <__strftime.isra.0+0x94e>
 802cce4:	f000 f8de 	bl	802cea4 <__tz_unlock>
 802cce8:	e7de      	b.n	802cca8 <__strftime.isra.0+0x90c>
 802ccea:	4553      	cmp	r3, sl
 802ccec:	d906      	bls.n	802ccfc <__strftime.isra.0+0x960>
 802ccee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802ccf2:	f807 200a 	strb.w	r2, [r7, sl]
 802ccf6:	f10a 0a01 	add.w	sl, sl, #1
 802ccfa:	e7f1      	b.n	802cce0 <__strftime.isra.0+0x944>
 802ccfc:	f000 f8d2 	bl	802cea4 <__tz_unlock>
 802cd00:	e4dc      	b.n	802c6bc <__strftime.isra.0+0x320>
 802cd02:	1e6b      	subs	r3, r5, #1
 802cd04:	429c      	cmp	r4, r3
 802cd06:	f4bf acd9 	bcs.w	802c6bc <__strftime.isra.0+0x320>
 802cd0a:	f104 0a01 	add.w	sl, r4, #1
 802cd0e:	2325      	movs	r3, #37	@ 0x25
 802cd10:	e607      	b.n	802c922 <__strftime.isra.0+0x586>
 802cd12:	46a2      	mov	sl, r4
 802cd14:	2d00      	cmp	r5, #0
 802cd16:	f43f acd3 	beq.w	802c6c0 <__strftime.isra.0+0x324>
 802cd1a:	2300      	movs	r3, #0
 802cd1c:	f807 300a 	strb.w	r3, [r7, sl]
 802cd20:	e4ce      	b.n	802c6c0 <__strftime.isra.0+0x324>
 802cd22:	4649      	mov	r1, r9
 802cd24:	e778      	b.n	802cc18 <__strftime.isra.0+0x87c>
 802cd26:	bf00      	nop
 802cd28:	0803ae3c 	.word	0x0803ae3c
 802cd2c:	0803afa4 	.word	0x0803afa4
 802cd30:	0803ae0e 	.word	0x0803ae0e
 802cd34:	fffff894 	.word	0xfffff894
 802cd38:	0803ae44 	.word	0x0803ae44
 802cd3c:	20000164 	.word	0x20000164

0802cd40 <strftime>:
 802cd40:	f7ff bb2c 	b.w	802c39c <__strftime.isra.0>

0802cd44 <__tzcalc_limits>:
 802cd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cd48:	4604      	mov	r4, r0
 802cd4a:	f007 fca3 	bl	8034694 <__gettzinfo>
 802cd4e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 802cd52:	429c      	cmp	r4, r3
 802cd54:	f340 8099 	ble.w	802ce8a <__tzcalc_limits+0x146>
 802cd58:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 802cd5c:	19e5      	adds	r5, r4, r7
 802cd5e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 802cd62:	f240 126d 	movw	r2, #365	@ 0x16d
 802cd66:	10ad      	asrs	r5, r5, #2
 802cd68:	fb02 5503 	mla	r5, r2, r3, r5
 802cd6c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 802cd70:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 802cd74:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 802cd78:	4f45      	ldr	r7, [pc, #276]	@ (802ce90 <__tzcalc_limits+0x14c>)
 802cd7a:	fb93 f3f2 	sdiv	r3, r3, r2
 802cd7e:	441d      	add	r5, r3
 802cd80:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802cd84:	eb04 030c 	add.w	r3, r4, ip
 802cd88:	6044      	str	r4, [r0, #4]
 802cd8a:	fbb3 f3f2 	udiv	r3, r3, r2
 802cd8e:	4601      	mov	r1, r0
 802cd90:	441d      	add	r5, r3
 802cd92:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802cd96:	7a0b      	ldrb	r3, [r1, #8]
 802cd98:	694a      	ldr	r2, [r1, #20]
 802cd9a:	2b4a      	cmp	r3, #74	@ 0x4a
 802cd9c:	d133      	bne.n	802ce06 <__tzcalc_limits+0xc2>
 802cd9e:	07a6      	lsls	r6, r4, #30
 802cda0:	eb05 0302 	add.w	r3, r5, r2
 802cda4:	d106      	bne.n	802cdb4 <__tzcalc_limits+0x70>
 802cda6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 802cdaa:	fb94 f6fe 	sdiv	r6, r4, lr
 802cdae:	fb0e 4616 	mls	r6, lr, r6, r4
 802cdb2:	b936      	cbnz	r6, 802cdc2 <__tzcalc_limits+0x7e>
 802cdb4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 802cdb8:	fb94 f6fe 	sdiv	r6, r4, lr
 802cdbc:	fb0e 4616 	mls	r6, lr, r6, r4
 802cdc0:	b9fe      	cbnz	r6, 802ce02 <__tzcalc_limits+0xbe>
 802cdc2:	2a3b      	cmp	r2, #59	@ 0x3b
 802cdc4:	bfd4      	ite	le
 802cdc6:	2200      	movle	r2, #0
 802cdc8:	2201      	movgt	r2, #1
 802cdca:	4413      	add	r3, r2
 802cdcc:	3b01      	subs	r3, #1
 802cdce:	698a      	ldr	r2, [r1, #24]
 802cdd0:	17d6      	asrs	r6, r2, #31
 802cdd2:	fbc3 2607 	smlal	r2, r6, r3, r7
 802cdd6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 802cdd8:	18d2      	adds	r2, r2, r3
 802cdda:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802cdde:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802cde2:	3128      	adds	r1, #40	@ 0x28
 802cde4:	458c      	cmp	ip, r1
 802cde6:	d1d6      	bne.n	802cd96 <__tzcalc_limits+0x52>
 802cde8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 802cdec:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802cdf0:	428c      	cmp	r4, r1
 802cdf2:	4193      	sbcs	r3, r2
 802cdf4:	bfb4      	ite	lt
 802cdf6:	2301      	movlt	r3, #1
 802cdf8:	2300      	movge	r3, #0
 802cdfa:	6003      	str	r3, [r0, #0]
 802cdfc:	2001      	movs	r0, #1
 802cdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ce02:	2200      	movs	r2, #0
 802ce04:	e7e1      	b.n	802cdca <__tzcalc_limits+0x86>
 802ce06:	2b44      	cmp	r3, #68	@ 0x44
 802ce08:	d101      	bne.n	802ce0e <__tzcalc_limits+0xca>
 802ce0a:	18ab      	adds	r3, r5, r2
 802ce0c:	e7df      	b.n	802cdce <__tzcalc_limits+0x8a>
 802ce0e:	07a3      	lsls	r3, r4, #30
 802ce10:	d105      	bne.n	802ce1e <__tzcalc_limits+0xda>
 802ce12:	2664      	movs	r6, #100	@ 0x64
 802ce14:	fb94 f3f6 	sdiv	r3, r4, r6
 802ce18:	fb06 4313 	mls	r3, r6, r3, r4
 802ce1c:	bb7b      	cbnz	r3, 802ce7e <__tzcalc_limits+0x13a>
 802ce1e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802ce22:	fb94 f6f3 	sdiv	r6, r4, r3
 802ce26:	fb03 4616 	mls	r6, r3, r6, r4
 802ce2a:	fab6 f686 	clz	r6, r6
 802ce2e:	0976      	lsrs	r6, r6, #5
 802ce30:	f8df e060 	ldr.w	lr, [pc, #96]	@ 802ce94 <__tzcalc_limits+0x150>
 802ce34:	f8d1 900c 	ldr.w	r9, [r1, #12]
 802ce38:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 802ce3c:	462b      	mov	r3, r5
 802ce3e:	f04f 0800 	mov.w	r8, #0
 802ce42:	fb0a e606 	mla	r6, sl, r6, lr
 802ce46:	f108 0801 	add.w	r8, r8, #1
 802ce4a:	45c1      	cmp	r9, r8
 802ce4c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 802ce50:	dc17      	bgt.n	802ce82 <__tzcalc_limits+0x13e>
 802ce52:	f103 0804 	add.w	r8, r3, #4
 802ce56:	2607      	movs	r6, #7
 802ce58:	fb98 f6f6 	sdiv	r6, r8, r6
 802ce5c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802ce60:	eba8 0606 	sub.w	r6, r8, r6
 802ce64:	1b92      	subs	r2, r2, r6
 802ce66:	690e      	ldr	r6, [r1, #16]
 802ce68:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 802ce6c:	bf48      	it	mi
 802ce6e:	3207      	addmi	r2, #7
 802ce70:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 802ce74:	4432      	add	r2, r6
 802ce76:	4572      	cmp	r2, lr
 802ce78:	da05      	bge.n	802ce86 <__tzcalc_limits+0x142>
 802ce7a:	4413      	add	r3, r2
 802ce7c:	e7a7      	b.n	802cdce <__tzcalc_limits+0x8a>
 802ce7e:	2601      	movs	r6, #1
 802ce80:	e7d6      	b.n	802ce30 <__tzcalc_limits+0xec>
 802ce82:	4473      	add	r3, lr
 802ce84:	e7df      	b.n	802ce46 <__tzcalc_limits+0x102>
 802ce86:	3a07      	subs	r2, #7
 802ce88:	e7f5      	b.n	802ce76 <__tzcalc_limits+0x132>
 802ce8a:	2000      	movs	r0, #0
 802ce8c:	e7b7      	b.n	802cdfe <__tzcalc_limits+0xba>
 802ce8e:	bf00      	nop
 802ce90:	00015180 	.word	0x00015180
 802ce94:	0803ad84 	.word	0x0803ad84

0802ce98 <__tz_lock>:
 802ce98:	4801      	ldr	r0, [pc, #4]	@ (802cea0 <__tz_lock+0x8>)
 802ce9a:	f000 bae1 	b.w	802d460 <__retarget_lock_acquire>
 802ce9e:	bf00      	nop
 802cea0:	200198e8 	.word	0x200198e8

0802cea4 <__tz_unlock>:
 802cea4:	4801      	ldr	r0, [pc, #4]	@ (802ceac <__tz_unlock+0x8>)
 802cea6:	f000 badd 	b.w	802d464 <__retarget_lock_release>
 802ceaa:	bf00      	nop
 802ceac:	200198e8 	.word	0x200198e8

0802ceb0 <_tzset_unlocked>:
 802ceb0:	4b01      	ldr	r3, [pc, #4]	@ (802ceb8 <_tzset_unlocked+0x8>)
 802ceb2:	6818      	ldr	r0, [r3, #0]
 802ceb4:	f000 b802 	b.w	802cebc <_tzset_unlocked_r>
 802ceb8:	200002d8 	.word	0x200002d8

0802cebc <_tzset_unlocked_r>:
 802cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cec0:	b08d      	sub	sp, #52	@ 0x34
 802cec2:	4607      	mov	r7, r0
 802cec4:	f007 fbe6 	bl	8034694 <__gettzinfo>
 802cec8:	49bc      	ldr	r1, [pc, #752]	@ (802d1bc <_tzset_unlocked_r+0x300>)
 802ceca:	4dbd      	ldr	r5, [pc, #756]	@ (802d1c0 <_tzset_unlocked_r+0x304>)
 802cecc:	4604      	mov	r4, r0
 802cece:	4638      	mov	r0, r7
 802ced0:	f001 fac8 	bl	802e464 <_getenv_r>
 802ced4:	4606      	mov	r6, r0
 802ced6:	bb10      	cbnz	r0, 802cf1e <_tzset_unlocked_r+0x62>
 802ced8:	4bba      	ldr	r3, [pc, #744]	@ (802d1c4 <_tzset_unlocked_r+0x308>)
 802ceda:	4abb      	ldr	r2, [pc, #748]	@ (802d1c8 <_tzset_unlocked_r+0x30c>)
 802cedc:	6018      	str	r0, [r3, #0]
 802cede:	4bbb      	ldr	r3, [pc, #748]	@ (802d1cc <_tzset_unlocked_r+0x310>)
 802cee0:	62a0      	str	r0, [r4, #40]	@ 0x28
 802cee2:	6018      	str	r0, [r3, #0]
 802cee4:	4bba      	ldr	r3, [pc, #744]	@ (802d1d0 <_tzset_unlocked_r+0x314>)
 802cee6:	6520      	str	r0, [r4, #80]	@ 0x50
 802cee8:	e9c3 2200 	strd	r2, r2, [r3]
 802ceec:	214a      	movs	r1, #74	@ 0x4a
 802ceee:	2200      	movs	r2, #0
 802cef0:	2300      	movs	r3, #0
 802cef2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802cef6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802cefa:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 802cefe:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 802cf02:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802cf06:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802cf0a:	6828      	ldr	r0, [r5, #0]
 802cf0c:	7221      	strb	r1, [r4, #8]
 802cf0e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802cf12:	f001 fabb 	bl	802e48c <free>
 802cf16:	602e      	str	r6, [r5, #0]
 802cf18:	b00d      	add	sp, #52	@ 0x34
 802cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf1e:	6829      	ldr	r1, [r5, #0]
 802cf20:	2900      	cmp	r1, #0
 802cf22:	f040 808e 	bne.w	802d042 <_tzset_unlocked_r+0x186>
 802cf26:	6828      	ldr	r0, [r5, #0]
 802cf28:	f001 fab0 	bl	802e48c <free>
 802cf2c:	4630      	mov	r0, r6
 802cf2e:	f7e3 f9b7 	bl	80102a0 <strlen>
 802cf32:	1c41      	adds	r1, r0, #1
 802cf34:	4638      	mov	r0, r7
 802cf36:	f001 fab1 	bl	802e49c <_malloc_r>
 802cf3a:	6028      	str	r0, [r5, #0]
 802cf3c:	2800      	cmp	r0, #0
 802cf3e:	f040 8086 	bne.w	802d04e <_tzset_unlocked_r+0x192>
 802cf42:	4aa2      	ldr	r2, [pc, #648]	@ (802d1cc <_tzset_unlocked_r+0x310>)
 802cf44:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 802d1d0 <_tzset_unlocked_r+0x314>
 802cf48:	f8df a278 	ldr.w	sl, [pc, #632]	@ 802d1c4 <_tzset_unlocked_r+0x308>
 802cf4c:	2300      	movs	r3, #0
 802cf4e:	6013      	str	r3, [r2, #0]
 802cf50:	4aa0      	ldr	r2, [pc, #640]	@ (802d1d4 <_tzset_unlocked_r+0x318>)
 802cf52:	f8ca 3000 	str.w	r3, [sl]
 802cf56:	2000      	movs	r0, #0
 802cf58:	2100      	movs	r1, #0
 802cf5a:	e9c8 2200 	strd	r2, r2, [r8]
 802cf5e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 802cf62:	e9c4 3305 	strd	r3, r3, [r4, #20]
 802cf66:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802cf6a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 802cf6e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 802cf72:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 802cf76:	224a      	movs	r2, #74	@ 0x4a
 802cf78:	7222      	strb	r2, [r4, #8]
 802cf7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802cf7c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 802cf80:	6523      	str	r3, [r4, #80]	@ 0x50
 802cf82:	7833      	ldrb	r3, [r6, #0]
 802cf84:	2b3a      	cmp	r3, #58	@ 0x3a
 802cf86:	bf08      	it	eq
 802cf88:	3601      	addeq	r6, #1
 802cf8a:	7833      	ldrb	r3, [r6, #0]
 802cf8c:	2b3c      	cmp	r3, #60	@ 0x3c
 802cf8e:	d162      	bne.n	802d056 <_tzset_unlocked_r+0x19a>
 802cf90:	1c75      	adds	r5, r6, #1
 802cf92:	4a91      	ldr	r2, [pc, #580]	@ (802d1d8 <_tzset_unlocked_r+0x31c>)
 802cf94:	4991      	ldr	r1, [pc, #580]	@ (802d1dc <_tzset_unlocked_r+0x320>)
 802cf96:	ab0a      	add	r3, sp, #40	@ 0x28
 802cf98:	4628      	mov	r0, r5
 802cf9a:	f001 fccb 	bl	802e934 <siscanf>
 802cf9e:	2800      	cmp	r0, #0
 802cfa0:	ddba      	ble.n	802cf18 <_tzset_unlocked_r+0x5c>
 802cfa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802cfa4:	1eda      	subs	r2, r3, #3
 802cfa6:	2a07      	cmp	r2, #7
 802cfa8:	d8b6      	bhi.n	802cf18 <_tzset_unlocked_r+0x5c>
 802cfaa:	5ceb      	ldrb	r3, [r5, r3]
 802cfac:	2b3e      	cmp	r3, #62	@ 0x3e
 802cfae:	d1b3      	bne.n	802cf18 <_tzset_unlocked_r+0x5c>
 802cfb0:	3602      	adds	r6, #2
 802cfb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802cfb4:	18f5      	adds	r5, r6, r3
 802cfb6:	5cf3      	ldrb	r3, [r6, r3]
 802cfb8:	2b2d      	cmp	r3, #45	@ 0x2d
 802cfba:	d15a      	bne.n	802d072 <_tzset_unlocked_r+0x1b6>
 802cfbc:	3501      	adds	r5, #1
 802cfbe:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802cfc2:	2300      	movs	r3, #0
 802cfc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802cfc8:	f8ad 3020 	strh.w	r3, [sp, #32]
 802cfcc:	af08      	add	r7, sp, #32
 802cfce:	ab0a      	add	r3, sp, #40	@ 0x28
 802cfd0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802cfd4:	9303      	str	r3, [sp, #12]
 802cfd6:	f10d 031e 	add.w	r3, sp, #30
 802cfda:	9300      	str	r3, [sp, #0]
 802cfdc:	4980      	ldr	r1, [pc, #512]	@ (802d1e0 <_tzset_unlocked_r+0x324>)
 802cfde:	ab0a      	add	r3, sp, #40	@ 0x28
 802cfe0:	aa07      	add	r2, sp, #28
 802cfe2:	4628      	mov	r0, r5
 802cfe4:	f001 fca6 	bl	802e934 <siscanf>
 802cfe8:	2800      	cmp	r0, #0
 802cfea:	dd95      	ble.n	802cf18 <_tzset_unlocked_r+0x5c>
 802cfec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802cff0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 802cff4:	223c      	movs	r2, #60	@ 0x3c
 802cff6:	fb02 6603 	mla	r6, r2, r3, r6
 802cffa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802cffe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 802d002:	fb02 6603 	mla	r6, r2, r3, r6
 802d006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d008:	fb09 f606 	mul.w	r6, r9, r6
 802d00c:	eb05 0903 	add.w	r9, r5, r3
 802d010:	5ceb      	ldrb	r3, [r5, r3]
 802d012:	2b3c      	cmp	r3, #60	@ 0x3c
 802d014:	f040 80ee 	bne.w	802d1f4 <_tzset_unlocked_r+0x338>
 802d018:	f109 0501 	add.w	r5, r9, #1
 802d01c:	4a71      	ldr	r2, [pc, #452]	@ (802d1e4 <_tzset_unlocked_r+0x328>)
 802d01e:	496f      	ldr	r1, [pc, #444]	@ (802d1dc <_tzset_unlocked_r+0x320>)
 802d020:	ab0a      	add	r3, sp, #40	@ 0x28
 802d022:	4628      	mov	r0, r5
 802d024:	f001 fc86 	bl	802e934 <siscanf>
 802d028:	2800      	cmp	r0, #0
 802d02a:	dc28      	bgt.n	802d07e <_tzset_unlocked_r+0x1c2>
 802d02c:	f899 3001 	ldrb.w	r3, [r9, #1]
 802d030:	2b3e      	cmp	r3, #62	@ 0x3e
 802d032:	d124      	bne.n	802d07e <_tzset_unlocked_r+0x1c2>
 802d034:	4b68      	ldr	r3, [pc, #416]	@ (802d1d8 <_tzset_unlocked_r+0x31c>)
 802d036:	62a6      	str	r6, [r4, #40]	@ 0x28
 802d038:	e9c8 3300 	strd	r3, r3, [r8]
 802d03c:	f8ca 6000 	str.w	r6, [sl]
 802d040:	e76a      	b.n	802cf18 <_tzset_unlocked_r+0x5c>
 802d042:	f7e3 f8cd 	bl	80101e0 <strcmp>
 802d046:	2800      	cmp	r0, #0
 802d048:	f47f af6d 	bne.w	802cf26 <_tzset_unlocked_r+0x6a>
 802d04c:	e764      	b.n	802cf18 <_tzset_unlocked_r+0x5c>
 802d04e:	4631      	mov	r1, r6
 802d050:	f000 f9d8 	bl	802d404 <strcpy>
 802d054:	e775      	b.n	802cf42 <_tzset_unlocked_r+0x86>
 802d056:	4a60      	ldr	r2, [pc, #384]	@ (802d1d8 <_tzset_unlocked_r+0x31c>)
 802d058:	4963      	ldr	r1, [pc, #396]	@ (802d1e8 <_tzset_unlocked_r+0x32c>)
 802d05a:	ab0a      	add	r3, sp, #40	@ 0x28
 802d05c:	4630      	mov	r0, r6
 802d05e:	f001 fc69 	bl	802e934 <siscanf>
 802d062:	2800      	cmp	r0, #0
 802d064:	f77f af58 	ble.w	802cf18 <_tzset_unlocked_r+0x5c>
 802d068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d06a:	3b03      	subs	r3, #3
 802d06c:	2b07      	cmp	r3, #7
 802d06e:	d9a0      	bls.n	802cfb2 <_tzset_unlocked_r+0xf6>
 802d070:	e752      	b.n	802cf18 <_tzset_unlocked_r+0x5c>
 802d072:	2b2b      	cmp	r3, #43	@ 0x2b
 802d074:	bf08      	it	eq
 802d076:	3501      	addeq	r5, #1
 802d078:	f04f 0901 	mov.w	r9, #1
 802d07c:	e7a1      	b.n	802cfc2 <_tzset_unlocked_r+0x106>
 802d07e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d080:	1eda      	subs	r2, r3, #3
 802d082:	2a07      	cmp	r2, #7
 802d084:	f63f af48 	bhi.w	802cf18 <_tzset_unlocked_r+0x5c>
 802d088:	5ceb      	ldrb	r3, [r5, r3]
 802d08a:	2b3e      	cmp	r3, #62	@ 0x3e
 802d08c:	f47f af44 	bne.w	802cf18 <_tzset_unlocked_r+0x5c>
 802d090:	f109 0902 	add.w	r9, r9, #2
 802d094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d096:	eb09 0503 	add.w	r5, r9, r3
 802d09a:	f819 3003 	ldrb.w	r3, [r9, r3]
 802d09e:	2b2d      	cmp	r3, #45	@ 0x2d
 802d0a0:	f040 80b7 	bne.w	802d212 <_tzset_unlocked_r+0x356>
 802d0a4:	3501      	adds	r5, #1
 802d0a6:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 802d0aa:	2300      	movs	r3, #0
 802d0ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 802d0b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d0b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 802d0b8:	930a      	str	r3, [sp, #40]	@ 0x28
 802d0ba:	ab0a      	add	r3, sp, #40	@ 0x28
 802d0bc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 802d0c0:	9301      	str	r3, [sp, #4]
 802d0c2:	f10d 031e 	add.w	r3, sp, #30
 802d0c6:	9300      	str	r3, [sp, #0]
 802d0c8:	4945      	ldr	r1, [pc, #276]	@ (802d1e0 <_tzset_unlocked_r+0x324>)
 802d0ca:	ab0a      	add	r3, sp, #40	@ 0x28
 802d0cc:	aa07      	add	r2, sp, #28
 802d0ce:	4628      	mov	r0, r5
 802d0d0:	f001 fc30 	bl	802e934 <siscanf>
 802d0d4:	2800      	cmp	r0, #0
 802d0d6:	f300 80a2 	bgt.w	802d21e <_tzset_unlocked_r+0x362>
 802d0da:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 802d0de:	9304      	str	r3, [sp, #16]
 802d0e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d0e2:	4627      	mov	r7, r4
 802d0e4:	441d      	add	r5, r3
 802d0e6:	f04f 0b00 	mov.w	fp, #0
 802d0ea:	782b      	ldrb	r3, [r5, #0]
 802d0ec:	2b2c      	cmp	r3, #44	@ 0x2c
 802d0ee:	bf08      	it	eq
 802d0f0:	3501      	addeq	r5, #1
 802d0f2:	f895 9000 	ldrb.w	r9, [r5]
 802d0f6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 802d0fa:	f040 80a3 	bne.w	802d244 <_tzset_unlocked_r+0x388>
 802d0fe:	ab0a      	add	r3, sp, #40	@ 0x28
 802d100:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 802d104:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802d108:	aa09      	add	r2, sp, #36	@ 0x24
 802d10a:	9200      	str	r2, [sp, #0]
 802d10c:	4937      	ldr	r1, [pc, #220]	@ (802d1ec <_tzset_unlocked_r+0x330>)
 802d10e:	9303      	str	r3, [sp, #12]
 802d110:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802d114:	4628      	mov	r0, r5
 802d116:	f001 fc0d 	bl	802e934 <siscanf>
 802d11a:	2803      	cmp	r0, #3
 802d11c:	f47f aefc 	bne.w	802cf18 <_tzset_unlocked_r+0x5c>
 802d120:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 802d124:	1e4b      	subs	r3, r1, #1
 802d126:	2b0b      	cmp	r3, #11
 802d128:	f63f aef6 	bhi.w	802cf18 <_tzset_unlocked_r+0x5c>
 802d12c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 802d130:	1e53      	subs	r3, r2, #1
 802d132:	2b04      	cmp	r3, #4
 802d134:	f63f aef0 	bhi.w	802cf18 <_tzset_unlocked_r+0x5c>
 802d138:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 802d13c:	2b06      	cmp	r3, #6
 802d13e:	f63f aeeb 	bhi.w	802cf18 <_tzset_unlocked_r+0x5c>
 802d142:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802d146:	f887 9008 	strb.w	r9, [r7, #8]
 802d14a:	617b      	str	r3, [r7, #20]
 802d14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d14e:	eb05 0903 	add.w	r9, r5, r3
 802d152:	2500      	movs	r5, #0
 802d154:	f04f 0302 	mov.w	r3, #2
 802d158:	f8ad 301c 	strh.w	r3, [sp, #28]
 802d15c:	f8ad 501e 	strh.w	r5, [sp, #30]
 802d160:	f8ad 5020 	strh.w	r5, [sp, #32]
 802d164:	950a      	str	r5, [sp, #40]	@ 0x28
 802d166:	f899 3000 	ldrb.w	r3, [r9]
 802d16a:	2b2f      	cmp	r3, #47	@ 0x2f
 802d16c:	f040 8096 	bne.w	802d29c <_tzset_unlocked_r+0x3e0>
 802d170:	ab0a      	add	r3, sp, #40	@ 0x28
 802d172:	aa08      	add	r2, sp, #32
 802d174:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802d178:	f10d 021e 	add.w	r2, sp, #30
 802d17c:	9200      	str	r2, [sp, #0]
 802d17e:	491c      	ldr	r1, [pc, #112]	@ (802d1f0 <_tzset_unlocked_r+0x334>)
 802d180:	9303      	str	r3, [sp, #12]
 802d182:	aa07      	add	r2, sp, #28
 802d184:	4648      	mov	r0, r9
 802d186:	f001 fbd5 	bl	802e934 <siscanf>
 802d18a:	42a8      	cmp	r0, r5
 802d18c:	f300 8086 	bgt.w	802d29c <_tzset_unlocked_r+0x3e0>
 802d190:	214a      	movs	r1, #74	@ 0x4a
 802d192:	2200      	movs	r2, #0
 802d194:	2300      	movs	r3, #0
 802d196:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802d19a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802d19e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802d1a2:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 802d1a6:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 802d1aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802d1ae:	7221      	strb	r1, [r4, #8]
 802d1b0:	62a5      	str	r5, [r4, #40]	@ 0x28
 802d1b2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802d1b6:	6525      	str	r5, [r4, #80]	@ 0x50
 802d1b8:	e6ae      	b.n	802cf18 <_tzset_unlocked_r+0x5c>
 802d1ba:	bf00      	nop
 802d1bc:	0803ae50 	.word	0x0803ae50
 802d1c0:	200198c0 	.word	0x200198c0
 802d1c4:	200198dc 	.word	0x200198dc
 802d1c8:	0803ae53 	.word	0x0803ae53
 802d1cc:	200198e0 	.word	0x200198e0
 802d1d0:	20000164 	.word	0x20000164
 802d1d4:	0803ad12 	.word	0x0803ad12
 802d1d8:	200198d0 	.word	0x200198d0
 802d1dc:	0803ae57 	.word	0x0803ae57
 802d1e0:	0803ae8c 	.word	0x0803ae8c
 802d1e4:	200198c4 	.word	0x200198c4
 802d1e8:	0803ae6a 	.word	0x0803ae6a
 802d1ec:	0803ae78 	.word	0x0803ae78
 802d1f0:	0803ae8b 	.word	0x0803ae8b
 802d1f4:	4a3e      	ldr	r2, [pc, #248]	@ (802d2f0 <_tzset_unlocked_r+0x434>)
 802d1f6:	493f      	ldr	r1, [pc, #252]	@ (802d2f4 <_tzset_unlocked_r+0x438>)
 802d1f8:	ab0a      	add	r3, sp, #40	@ 0x28
 802d1fa:	4648      	mov	r0, r9
 802d1fc:	f001 fb9a 	bl	802e934 <siscanf>
 802d200:	2800      	cmp	r0, #0
 802d202:	f77f af17 	ble.w	802d034 <_tzset_unlocked_r+0x178>
 802d206:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d208:	3b03      	subs	r3, #3
 802d20a:	2b07      	cmp	r3, #7
 802d20c:	f67f af42 	bls.w	802d094 <_tzset_unlocked_r+0x1d8>
 802d210:	e682      	b.n	802cf18 <_tzset_unlocked_r+0x5c>
 802d212:	2b2b      	cmp	r3, #43	@ 0x2b
 802d214:	bf08      	it	eq
 802d216:	3501      	addeq	r5, #1
 802d218:	f04f 0901 	mov.w	r9, #1
 802d21c:	e745      	b.n	802d0aa <_tzset_unlocked_r+0x1ee>
 802d21e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802d222:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802d226:	213c      	movs	r1, #60	@ 0x3c
 802d228:	fb01 3302 	mla	r3, r1, r2, r3
 802d22c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802d230:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802d234:	fb01 3302 	mla	r3, r1, r2, r3
 802d238:	fb09 f303 	mul.w	r3, r9, r3
 802d23c:	e74f      	b.n	802d0de <_tzset_unlocked_r+0x222>
 802d23e:	f04f 0b01 	mov.w	fp, #1
 802d242:	e752      	b.n	802d0ea <_tzset_unlocked_r+0x22e>
 802d244:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 802d248:	bf06      	itte	eq
 802d24a:	3501      	addeq	r5, #1
 802d24c:	464b      	moveq	r3, r9
 802d24e:	2344      	movne	r3, #68	@ 0x44
 802d250:	220a      	movs	r2, #10
 802d252:	a90b      	add	r1, sp, #44	@ 0x2c
 802d254:	4628      	mov	r0, r5
 802d256:	9305      	str	r3, [sp, #20]
 802d258:	f007 f950 	bl	80344fc <strtoul>
 802d25c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 802d260:	9b05      	ldr	r3, [sp, #20]
 802d262:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 802d266:	45a9      	cmp	r9, r5
 802d268:	d114      	bne.n	802d294 <_tzset_unlocked_r+0x3d8>
 802d26a:	234d      	movs	r3, #77	@ 0x4d
 802d26c:	f1bb 0f00 	cmp.w	fp, #0
 802d270:	d107      	bne.n	802d282 <_tzset_unlocked_r+0x3c6>
 802d272:	7223      	strb	r3, [r4, #8]
 802d274:	2103      	movs	r1, #3
 802d276:	2302      	movs	r3, #2
 802d278:	e9c4 1303 	strd	r1, r3, [r4, #12]
 802d27c:	f8c4 b014 	str.w	fp, [r4, #20]
 802d280:	e767      	b.n	802d152 <_tzset_unlocked_r+0x296>
 802d282:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 802d286:	220b      	movs	r2, #11
 802d288:	2301      	movs	r3, #1
 802d28a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 802d28e:	2300      	movs	r3, #0
 802d290:	63e3      	str	r3, [r4, #60]	@ 0x3c
 802d292:	e75e      	b.n	802d152 <_tzset_unlocked_r+0x296>
 802d294:	b280      	uxth	r0, r0
 802d296:	723b      	strb	r3, [r7, #8]
 802d298:	6178      	str	r0, [r7, #20]
 802d29a:	e75a      	b.n	802d152 <_tzset_unlocked_r+0x296>
 802d29c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802d2a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802d2a4:	213c      	movs	r1, #60	@ 0x3c
 802d2a6:	fb01 3302 	mla	r3, r1, r2, r3
 802d2aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802d2ae:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802d2b2:	fb01 3302 	mla	r3, r1, r2, r3
 802d2b6:	61bb      	str	r3, [r7, #24]
 802d2b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802d2ba:	3728      	adds	r7, #40	@ 0x28
 802d2bc:	444d      	add	r5, r9
 802d2be:	f1bb 0f00 	cmp.w	fp, #0
 802d2c2:	d0bc      	beq.n	802d23e <_tzset_unlocked_r+0x382>
 802d2c4:	9b04      	ldr	r3, [sp, #16]
 802d2c6:	6523      	str	r3, [r4, #80]	@ 0x50
 802d2c8:	4b0b      	ldr	r3, [pc, #44]	@ (802d2f8 <_tzset_unlocked_r+0x43c>)
 802d2ca:	f8c8 3000 	str.w	r3, [r8]
 802d2ce:	6860      	ldr	r0, [r4, #4]
 802d2d0:	4b07      	ldr	r3, [pc, #28]	@ (802d2f0 <_tzset_unlocked_r+0x434>)
 802d2d2:	62a6      	str	r6, [r4, #40]	@ 0x28
 802d2d4:	f8c8 3004 	str.w	r3, [r8, #4]
 802d2d8:	f7ff fd34 	bl	802cd44 <__tzcalc_limits>
 802d2dc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802d2de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802d2e0:	f8ca 2000 	str.w	r2, [sl]
 802d2e4:	1a9b      	subs	r3, r3, r2
 802d2e6:	4a05      	ldr	r2, [pc, #20]	@ (802d2fc <_tzset_unlocked_r+0x440>)
 802d2e8:	bf18      	it	ne
 802d2ea:	2301      	movne	r3, #1
 802d2ec:	6013      	str	r3, [r2, #0]
 802d2ee:	e613      	b.n	802cf18 <_tzset_unlocked_r+0x5c>
 802d2f0:	200198c4 	.word	0x200198c4
 802d2f4:	0803ae6a 	.word	0x0803ae6a
 802d2f8:	200198d0 	.word	0x200198d0
 802d2fc:	200198e0 	.word	0x200198e0

0802d300 <__locale_mb_cur_max>:
 802d300:	4b01      	ldr	r3, [pc, #4]	@ (802d308 <__locale_mb_cur_max+0x8>)
 802d302:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 802d306:	4770      	bx	lr
 802d308:	2000016c 	.word	0x2000016c

0802d30c <_localeconv_r>:
 802d30c:	4800      	ldr	r0, [pc, #0]	@ (802d310 <_localeconv_r+0x4>)
 802d30e:	4770      	bx	lr
 802d310:	2000025c 	.word	0x2000025c

0802d314 <_close_r>:
 802d314:	b538      	push	{r3, r4, r5, lr}
 802d316:	4d06      	ldr	r5, [pc, #24]	@ (802d330 <_close_r+0x1c>)
 802d318:	2300      	movs	r3, #0
 802d31a:	4604      	mov	r4, r0
 802d31c:	4608      	mov	r0, r1
 802d31e:	602b      	str	r3, [r5, #0]
 802d320:	f7e4 fff4 	bl	801230c <_close>
 802d324:	1c43      	adds	r3, r0, #1
 802d326:	d102      	bne.n	802d32e <_close_r+0x1a>
 802d328:	682b      	ldr	r3, [r5, #0]
 802d32a:	b103      	cbz	r3, 802d32e <_close_r+0x1a>
 802d32c:	6023      	str	r3, [r4, #0]
 802d32e:	bd38      	pop	{r3, r4, r5, pc}
 802d330:	200198e4 	.word	0x200198e4

0802d334 <_reclaim_reent>:
 802d334:	4b14      	ldr	r3, [pc, #80]	@ (802d388 <_reclaim_reent+0x54>)
 802d336:	681b      	ldr	r3, [r3, #0]
 802d338:	4283      	cmp	r3, r0
 802d33a:	b570      	push	{r4, r5, r6, lr}
 802d33c:	4604      	mov	r4, r0
 802d33e:	d022      	beq.n	802d386 <_reclaim_reent+0x52>
 802d340:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802d342:	b153      	cbz	r3, 802d35a <_reclaim_reent+0x26>
 802d344:	2500      	movs	r5, #0
 802d346:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802d348:	5959      	ldr	r1, [r3, r5]
 802d34a:	b9b1      	cbnz	r1, 802d37a <_reclaim_reent+0x46>
 802d34c:	3504      	adds	r5, #4
 802d34e:	2d80      	cmp	r5, #128	@ 0x80
 802d350:	d1f9      	bne.n	802d346 <_reclaim_reent+0x12>
 802d352:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802d354:	4620      	mov	r0, r4
 802d356:	f000 ff89 	bl	802e26c <_free_r>
 802d35a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802d35c:	b111      	cbz	r1, 802d364 <_reclaim_reent+0x30>
 802d35e:	4620      	mov	r0, r4
 802d360:	f000 ff84 	bl	802e26c <_free_r>
 802d364:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 802d366:	b111      	cbz	r1, 802d36e <_reclaim_reent+0x3a>
 802d368:	4620      	mov	r0, r4
 802d36a:	f000 ff7f 	bl	802e26c <_free_r>
 802d36e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802d370:	b14b      	cbz	r3, 802d386 <_reclaim_reent+0x52>
 802d372:	4620      	mov	r0, r4
 802d374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d378:	4718      	bx	r3
 802d37a:	680e      	ldr	r6, [r1, #0]
 802d37c:	4620      	mov	r0, r4
 802d37e:	f000 ff75 	bl	802e26c <_free_r>
 802d382:	4631      	mov	r1, r6
 802d384:	e7e1      	b.n	802d34a <_reclaim_reent+0x16>
 802d386:	bd70      	pop	{r4, r5, r6, pc}
 802d388:	200002d8 	.word	0x200002d8

0802d38c <_lseek_r>:
 802d38c:	b538      	push	{r3, r4, r5, lr}
 802d38e:	4d07      	ldr	r5, [pc, #28]	@ (802d3ac <_lseek_r+0x20>)
 802d390:	4604      	mov	r4, r0
 802d392:	4608      	mov	r0, r1
 802d394:	4611      	mov	r1, r2
 802d396:	2200      	movs	r2, #0
 802d398:	602a      	str	r2, [r5, #0]
 802d39a:	461a      	mov	r2, r3
 802d39c:	f7e4 ffc0 	bl	8012320 <_lseek>
 802d3a0:	1c43      	adds	r3, r0, #1
 802d3a2:	d102      	bne.n	802d3aa <_lseek_r+0x1e>
 802d3a4:	682b      	ldr	r3, [r5, #0]
 802d3a6:	b103      	cbz	r3, 802d3aa <_lseek_r+0x1e>
 802d3a8:	6023      	str	r3, [r4, #0]
 802d3aa:	bd38      	pop	{r3, r4, r5, pc}
 802d3ac:	200198e4 	.word	0x200198e4

0802d3b0 <_read_r>:
 802d3b0:	b538      	push	{r3, r4, r5, lr}
 802d3b2:	4d07      	ldr	r5, [pc, #28]	@ (802d3d0 <_read_r+0x20>)
 802d3b4:	4604      	mov	r4, r0
 802d3b6:	4608      	mov	r0, r1
 802d3b8:	4611      	mov	r1, r2
 802d3ba:	2200      	movs	r2, #0
 802d3bc:	602a      	str	r2, [r5, #0]
 802d3be:	461a      	mov	r2, r3
 802d3c0:	f7e4 ff86 	bl	80122d0 <_read>
 802d3c4:	1c43      	adds	r3, r0, #1
 802d3c6:	d102      	bne.n	802d3ce <_read_r+0x1e>
 802d3c8:	682b      	ldr	r3, [r5, #0]
 802d3ca:	b103      	cbz	r3, 802d3ce <_read_r+0x1e>
 802d3cc:	6023      	str	r3, [r4, #0]
 802d3ce:	bd38      	pop	{r3, r4, r5, pc}
 802d3d0:	200198e4 	.word	0x200198e4

0802d3d4 <_write_r>:
 802d3d4:	b538      	push	{r3, r4, r5, lr}
 802d3d6:	4d07      	ldr	r5, [pc, #28]	@ (802d3f4 <_write_r+0x20>)
 802d3d8:	4604      	mov	r4, r0
 802d3da:	4608      	mov	r0, r1
 802d3dc:	4611      	mov	r1, r2
 802d3de:	2200      	movs	r2, #0
 802d3e0:	602a      	str	r2, [r5, #0]
 802d3e2:	461a      	mov	r2, r3
 802d3e4:	f7e4 ff84 	bl	80122f0 <_write>
 802d3e8:	1c43      	adds	r3, r0, #1
 802d3ea:	d102      	bne.n	802d3f2 <_write_r+0x1e>
 802d3ec:	682b      	ldr	r3, [r5, #0]
 802d3ee:	b103      	cbz	r3, 802d3f2 <_write_r+0x1e>
 802d3f0:	6023      	str	r3, [r4, #0]
 802d3f2:	bd38      	pop	{r3, r4, r5, pc}
 802d3f4:	200198e4 	.word	0x200198e4

0802d3f8 <__errno>:
 802d3f8:	4b01      	ldr	r3, [pc, #4]	@ (802d400 <__errno+0x8>)
 802d3fa:	6818      	ldr	r0, [r3, #0]
 802d3fc:	4770      	bx	lr
 802d3fe:	bf00      	nop
 802d400:	200002d8 	.word	0x200002d8

0802d404 <strcpy>:
 802d404:	4603      	mov	r3, r0
 802d406:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d40a:	f803 2b01 	strb.w	r2, [r3], #1
 802d40e:	2a00      	cmp	r2, #0
 802d410:	d1f9      	bne.n	802d406 <strcpy+0x2>
 802d412:	4770      	bx	lr

0802d414 <__libc_init_array>:
 802d414:	b570      	push	{r4, r5, r6, lr}
 802d416:	4d0d      	ldr	r5, [pc, #52]	@ (802d44c <__libc_init_array+0x38>)
 802d418:	4c0d      	ldr	r4, [pc, #52]	@ (802d450 <__libc_init_array+0x3c>)
 802d41a:	1b64      	subs	r4, r4, r5
 802d41c:	10a4      	asrs	r4, r4, #2
 802d41e:	2600      	movs	r6, #0
 802d420:	42a6      	cmp	r6, r4
 802d422:	d109      	bne.n	802d438 <__libc_init_array+0x24>
 802d424:	4d0b      	ldr	r5, [pc, #44]	@ (802d454 <__libc_init_array+0x40>)
 802d426:	4c0c      	ldr	r4, [pc, #48]	@ (802d458 <__libc_init_array+0x44>)
 802d428:	f007 ff60 	bl	80352ec <_init>
 802d42c:	1b64      	subs	r4, r4, r5
 802d42e:	10a4      	asrs	r4, r4, #2
 802d430:	2600      	movs	r6, #0
 802d432:	42a6      	cmp	r6, r4
 802d434:	d105      	bne.n	802d442 <__libc_init_array+0x2e>
 802d436:	bd70      	pop	{r4, r5, r6, pc}
 802d438:	f855 3b04 	ldr.w	r3, [r5], #4
 802d43c:	4798      	blx	r3
 802d43e:	3601      	adds	r6, #1
 802d440:	e7ee      	b.n	802d420 <__libc_init_array+0xc>
 802d442:	f855 3b04 	ldr.w	r3, [r5], #4
 802d446:	4798      	blx	r3
 802d448:	3601      	adds	r6, #1
 802d44a:	e7f2      	b.n	802d432 <__libc_init_array+0x1e>
 802d44c:	0803b4e0 	.word	0x0803b4e0
 802d450:	0803b4e0 	.word	0x0803b4e0
 802d454:	0803b4e0 	.word	0x0803b4e0
 802d458:	0803b4e8 	.word	0x0803b4e8

0802d45c <__retarget_lock_init_recursive>:
 802d45c:	4770      	bx	lr

0802d45e <__retarget_lock_close_recursive>:
 802d45e:	4770      	bx	lr

0802d460 <__retarget_lock_acquire>:
 802d460:	4770      	bx	lr

0802d462 <__retarget_lock_acquire_recursive>:
 802d462:	4770      	bx	lr

0802d464 <__retarget_lock_release>:
 802d464:	4770      	bx	lr

0802d466 <__retarget_lock_release_recursive>:
 802d466:	4770      	bx	lr

0802d468 <memcpy>:
 802d468:	440a      	add	r2, r1
 802d46a:	4291      	cmp	r1, r2
 802d46c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802d470:	d100      	bne.n	802d474 <memcpy+0xc>
 802d472:	4770      	bx	lr
 802d474:	b510      	push	{r4, lr}
 802d476:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d47a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802d47e:	4291      	cmp	r1, r2
 802d480:	d1f9      	bne.n	802d476 <memcpy+0xe>
 802d482:	bd10      	pop	{r4, pc}

0802d484 <_wcrtomb_r>:
 802d484:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d486:	4c09      	ldr	r4, [pc, #36]	@ (802d4ac <_wcrtomb_r+0x28>)
 802d488:	b085      	sub	sp, #20
 802d48a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 802d48e:	4605      	mov	r5, r0
 802d490:	461e      	mov	r6, r3
 802d492:	b909      	cbnz	r1, 802d498 <_wcrtomb_r+0x14>
 802d494:	460a      	mov	r2, r1
 802d496:	a901      	add	r1, sp, #4
 802d498:	47b8      	blx	r7
 802d49a:	1c43      	adds	r3, r0, #1
 802d49c:	bf01      	itttt	eq
 802d49e:	2300      	moveq	r3, #0
 802d4a0:	6033      	streq	r3, [r6, #0]
 802d4a2:	238a      	moveq	r3, #138	@ 0x8a
 802d4a4:	602b      	streq	r3, [r5, #0]
 802d4a6:	b005      	add	sp, #20
 802d4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d4aa:	bf00      	nop
 802d4ac:	2000016c 	.word	0x2000016c

0802d4b0 <frexp>:
 802d4b0:	b570      	push	{r4, r5, r6, lr}
 802d4b2:	2100      	movs	r1, #0
 802d4b4:	ec55 4b10 	vmov	r4, r5, d0
 802d4b8:	6001      	str	r1, [r0, #0]
 802d4ba:	4915      	ldr	r1, [pc, #84]	@ (802d510 <frexp+0x60>)
 802d4bc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802d4c0:	428a      	cmp	r2, r1
 802d4c2:	4606      	mov	r6, r0
 802d4c4:	462b      	mov	r3, r5
 802d4c6:	d820      	bhi.n	802d50a <frexp+0x5a>
 802d4c8:	4621      	mov	r1, r4
 802d4ca:	4311      	orrs	r1, r2
 802d4cc:	d01d      	beq.n	802d50a <frexp+0x5a>
 802d4ce:	4911      	ldr	r1, [pc, #68]	@ (802d514 <frexp+0x64>)
 802d4d0:	4029      	ands	r1, r5
 802d4d2:	b961      	cbnz	r1, 802d4ee <frexp+0x3e>
 802d4d4:	4b10      	ldr	r3, [pc, #64]	@ (802d518 <frexp+0x68>)
 802d4d6:	2200      	movs	r2, #0
 802d4d8:	4620      	mov	r0, r4
 802d4da:	4629      	mov	r1, r5
 802d4dc:	f7e3 f8a4 	bl	8010628 <__aeabi_dmul>
 802d4e0:	460b      	mov	r3, r1
 802d4e2:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 802d4e6:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802d4ea:	4604      	mov	r4, r0
 802d4ec:	6031      	str	r1, [r6, #0]
 802d4ee:	6831      	ldr	r1, [r6, #0]
 802d4f0:	1512      	asrs	r2, r2, #20
 802d4f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802d4f6:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802d4fa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802d4fe:	4411      	add	r1, r2
 802d500:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 802d504:	6031      	str	r1, [r6, #0]
 802d506:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802d50a:	ec45 4b10 	vmov	d0, r4, r5
 802d50e:	bd70      	pop	{r4, r5, r6, pc}
 802d510:	7fefffff 	.word	0x7fefffff
 802d514:	7ff00000 	.word	0x7ff00000
 802d518:	43500000 	.word	0x43500000

0802d51c <register_fini>:
 802d51c:	4b02      	ldr	r3, [pc, #8]	@ (802d528 <register_fini+0xc>)
 802d51e:	b113      	cbz	r3, 802d526 <register_fini+0xa>
 802d520:	4802      	ldr	r0, [pc, #8]	@ (802d52c <register_fini+0x10>)
 802d522:	f000 b810 	b.w	802d546 <atexit>
 802d526:	4770      	bx	lr
 802d528:	00000000 	.word	0x00000000
 802d52c:	080349ad 	.word	0x080349ad

0802d530 <abort>:
 802d530:	b508      	push	{r3, lr}
 802d532:	2006      	movs	r0, #6
 802d534:	f007 f8a6 	bl	8034684 <raise>
 802d538:	2001      	movs	r0, #1
 802d53a:	f7e4 fec3 	bl	80122c4 <_exit>

0802d53e <abs>:
 802d53e:	2800      	cmp	r0, #0
 802d540:	bfb8      	it	lt
 802d542:	4240      	neglt	r0, r0
 802d544:	4770      	bx	lr

0802d546 <atexit>:
 802d546:	2300      	movs	r3, #0
 802d548:	4601      	mov	r1, r0
 802d54a:	461a      	mov	r2, r3
 802d54c:	4618      	mov	r0, r3
 802d54e:	f007 bb01 	b.w	8034b54 <__register_exitproc>

0802d552 <quorem>:
 802d552:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d556:	6903      	ldr	r3, [r0, #16]
 802d558:	690c      	ldr	r4, [r1, #16]
 802d55a:	42a3      	cmp	r3, r4
 802d55c:	4607      	mov	r7, r0
 802d55e:	db7e      	blt.n	802d65e <quorem+0x10c>
 802d560:	3c01      	subs	r4, #1
 802d562:	f101 0814 	add.w	r8, r1, #20
 802d566:	00a3      	lsls	r3, r4, #2
 802d568:	f100 0514 	add.w	r5, r0, #20
 802d56c:	9300      	str	r3, [sp, #0]
 802d56e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802d572:	9301      	str	r3, [sp, #4]
 802d574:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802d578:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802d57c:	3301      	adds	r3, #1
 802d57e:	429a      	cmp	r2, r3
 802d580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802d584:	fbb2 f6f3 	udiv	r6, r2, r3
 802d588:	d32e      	bcc.n	802d5e8 <quorem+0x96>
 802d58a:	f04f 0a00 	mov.w	sl, #0
 802d58e:	46c4      	mov	ip, r8
 802d590:	46ae      	mov	lr, r5
 802d592:	46d3      	mov	fp, sl
 802d594:	f85c 3b04 	ldr.w	r3, [ip], #4
 802d598:	b298      	uxth	r0, r3
 802d59a:	fb06 a000 	mla	r0, r6, r0, sl
 802d59e:	0c02      	lsrs	r2, r0, #16
 802d5a0:	0c1b      	lsrs	r3, r3, #16
 802d5a2:	fb06 2303 	mla	r3, r6, r3, r2
 802d5a6:	f8de 2000 	ldr.w	r2, [lr]
 802d5aa:	b280      	uxth	r0, r0
 802d5ac:	b292      	uxth	r2, r2
 802d5ae:	1a12      	subs	r2, r2, r0
 802d5b0:	445a      	add	r2, fp
 802d5b2:	f8de 0000 	ldr.w	r0, [lr]
 802d5b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802d5ba:	b29b      	uxth	r3, r3
 802d5bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802d5c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802d5c4:	b292      	uxth	r2, r2
 802d5c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802d5ca:	45e1      	cmp	r9, ip
 802d5cc:	f84e 2b04 	str.w	r2, [lr], #4
 802d5d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802d5d4:	d2de      	bcs.n	802d594 <quorem+0x42>
 802d5d6:	9b00      	ldr	r3, [sp, #0]
 802d5d8:	58eb      	ldr	r3, [r5, r3]
 802d5da:	b92b      	cbnz	r3, 802d5e8 <quorem+0x96>
 802d5dc:	9b01      	ldr	r3, [sp, #4]
 802d5de:	3b04      	subs	r3, #4
 802d5e0:	429d      	cmp	r5, r3
 802d5e2:	461a      	mov	r2, r3
 802d5e4:	d32f      	bcc.n	802d646 <quorem+0xf4>
 802d5e6:	613c      	str	r4, [r7, #16]
 802d5e8:	4638      	mov	r0, r7
 802d5ea:	f005 fce3 	bl	8032fb4 <__mcmp>
 802d5ee:	2800      	cmp	r0, #0
 802d5f0:	db25      	blt.n	802d63e <quorem+0xec>
 802d5f2:	4629      	mov	r1, r5
 802d5f4:	2000      	movs	r0, #0
 802d5f6:	f858 2b04 	ldr.w	r2, [r8], #4
 802d5fa:	f8d1 c000 	ldr.w	ip, [r1]
 802d5fe:	fa1f fe82 	uxth.w	lr, r2
 802d602:	fa1f f38c 	uxth.w	r3, ip
 802d606:	eba3 030e 	sub.w	r3, r3, lr
 802d60a:	4403      	add	r3, r0
 802d60c:	0c12      	lsrs	r2, r2, #16
 802d60e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802d612:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802d616:	b29b      	uxth	r3, r3
 802d618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802d61c:	45c1      	cmp	r9, r8
 802d61e:	f841 3b04 	str.w	r3, [r1], #4
 802d622:	ea4f 4022 	mov.w	r0, r2, asr #16
 802d626:	d2e6      	bcs.n	802d5f6 <quorem+0xa4>
 802d628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802d62c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802d630:	b922      	cbnz	r2, 802d63c <quorem+0xea>
 802d632:	3b04      	subs	r3, #4
 802d634:	429d      	cmp	r5, r3
 802d636:	461a      	mov	r2, r3
 802d638:	d30b      	bcc.n	802d652 <quorem+0x100>
 802d63a:	613c      	str	r4, [r7, #16]
 802d63c:	3601      	adds	r6, #1
 802d63e:	4630      	mov	r0, r6
 802d640:	b003      	add	sp, #12
 802d642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d646:	6812      	ldr	r2, [r2, #0]
 802d648:	3b04      	subs	r3, #4
 802d64a:	2a00      	cmp	r2, #0
 802d64c:	d1cb      	bne.n	802d5e6 <quorem+0x94>
 802d64e:	3c01      	subs	r4, #1
 802d650:	e7c6      	b.n	802d5e0 <quorem+0x8e>
 802d652:	6812      	ldr	r2, [r2, #0]
 802d654:	3b04      	subs	r3, #4
 802d656:	2a00      	cmp	r2, #0
 802d658:	d1ef      	bne.n	802d63a <quorem+0xe8>
 802d65a:	3c01      	subs	r4, #1
 802d65c:	e7ea      	b.n	802d634 <quorem+0xe2>
 802d65e:	2000      	movs	r0, #0
 802d660:	e7ee      	b.n	802d640 <quorem+0xee>
 802d662:	0000      	movs	r0, r0
 802d664:	0000      	movs	r0, r0
	...

0802d668 <_dtoa_r>:
 802d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d66c:	b099      	sub	sp, #100	@ 0x64
 802d66e:	ed8d 0b02 	vstr	d0, [sp, #8]
 802d672:	9109      	str	r1, [sp, #36]	@ 0x24
 802d674:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 802d676:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802d678:	920e      	str	r2, [sp, #56]	@ 0x38
 802d67a:	ec55 4b10 	vmov	r4, r5, d0
 802d67e:	4683      	mov	fp, r0
 802d680:	9313      	str	r3, [sp, #76]	@ 0x4c
 802d682:	b149      	cbz	r1, 802d698 <_dtoa_r+0x30>
 802d684:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802d686:	604a      	str	r2, [r1, #4]
 802d688:	2301      	movs	r3, #1
 802d68a:	4093      	lsls	r3, r2
 802d68c:	608b      	str	r3, [r1, #8]
 802d68e:	f005 fa40 	bl	8032b12 <_Bfree>
 802d692:	2300      	movs	r3, #0
 802d694:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 802d698:	1e2b      	subs	r3, r5, #0
 802d69a:	bfb9      	ittee	lt
 802d69c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802d6a0:	9303      	strlt	r3, [sp, #12]
 802d6a2:	2300      	movge	r3, #0
 802d6a4:	6033      	strge	r3, [r6, #0]
 802d6a6:	9f03      	ldr	r7, [sp, #12]
 802d6a8:	4b97      	ldr	r3, [pc, #604]	@ (802d908 <_dtoa_r+0x2a0>)
 802d6aa:	bfbc      	itt	lt
 802d6ac:	2201      	movlt	r2, #1
 802d6ae:	6032      	strlt	r2, [r6, #0]
 802d6b0:	43bb      	bics	r3, r7
 802d6b2:	d114      	bne.n	802d6de <_dtoa_r+0x76>
 802d6b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802d6b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 802d6ba:	6013      	str	r3, [r2, #0]
 802d6bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802d6c0:	4323      	orrs	r3, r4
 802d6c2:	f000 854c 	beq.w	802e15e <_dtoa_r+0xaf6>
 802d6c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802d6c8:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802d920 <_dtoa_r+0x2b8>
 802d6cc:	b11b      	cbz	r3, 802d6d6 <_dtoa_r+0x6e>
 802d6ce:	f10a 0303 	add.w	r3, sl, #3
 802d6d2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802d6d4:	6013      	str	r3, [r2, #0]
 802d6d6:	4650      	mov	r0, sl
 802d6d8:	b019      	add	sp, #100	@ 0x64
 802d6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d6de:	ed9d 7b02 	vldr	d7, [sp, #8]
 802d6e2:	2200      	movs	r2, #0
 802d6e4:	ec51 0b17 	vmov	r0, r1, d7
 802d6e8:	2300      	movs	r3, #0
 802d6ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802d6ee:	f7e3 fa03 	bl	8010af8 <__aeabi_dcmpeq>
 802d6f2:	4680      	mov	r8, r0
 802d6f4:	b150      	cbz	r0, 802d70c <_dtoa_r+0xa4>
 802d6f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802d6f8:	2301      	movs	r3, #1
 802d6fa:	6013      	str	r3, [r2, #0]
 802d6fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802d6fe:	b113      	cbz	r3, 802d706 <_dtoa_r+0x9e>
 802d700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802d702:	4b82      	ldr	r3, [pc, #520]	@ (802d90c <_dtoa_r+0x2a4>)
 802d704:	6013      	str	r3, [r2, #0]
 802d706:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 802d924 <_dtoa_r+0x2bc>
 802d70a:	e7e4      	b.n	802d6d6 <_dtoa_r+0x6e>
 802d70c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802d710:	aa16      	add	r2, sp, #88	@ 0x58
 802d712:	a917      	add	r1, sp, #92	@ 0x5c
 802d714:	4658      	mov	r0, fp
 802d716:	f005 fd6d 	bl	80331f4 <__d2b>
 802d71a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802d71e:	4681      	mov	r9, r0
 802d720:	2e00      	cmp	r6, #0
 802d722:	d077      	beq.n	802d814 <_dtoa_r+0x1ac>
 802d724:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802d726:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802d72a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802d72e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d732:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802d736:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802d73a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802d73e:	4619      	mov	r1, r3
 802d740:	2200      	movs	r2, #0
 802d742:	4b73      	ldr	r3, [pc, #460]	@ (802d910 <_dtoa_r+0x2a8>)
 802d744:	f7e2 fdb8 	bl	80102b8 <__aeabi_dsub>
 802d748:	a369      	add	r3, pc, #420	@ (adr r3, 802d8f0 <_dtoa_r+0x288>)
 802d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d74e:	f7e2 ff6b 	bl	8010628 <__aeabi_dmul>
 802d752:	a369      	add	r3, pc, #420	@ (adr r3, 802d8f8 <_dtoa_r+0x290>)
 802d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d758:	f7e2 fdb0 	bl	80102bc <__adddf3>
 802d75c:	4604      	mov	r4, r0
 802d75e:	4630      	mov	r0, r6
 802d760:	460d      	mov	r5, r1
 802d762:	f7e2 fef7 	bl	8010554 <__aeabi_i2d>
 802d766:	a366      	add	r3, pc, #408	@ (adr r3, 802d900 <_dtoa_r+0x298>)
 802d768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d76c:	f7e2 ff5c 	bl	8010628 <__aeabi_dmul>
 802d770:	4602      	mov	r2, r0
 802d772:	460b      	mov	r3, r1
 802d774:	4620      	mov	r0, r4
 802d776:	4629      	mov	r1, r5
 802d778:	f7e2 fda0 	bl	80102bc <__adddf3>
 802d77c:	4604      	mov	r4, r0
 802d77e:	460d      	mov	r5, r1
 802d780:	f7e3 fa02 	bl	8010b88 <__aeabi_d2iz>
 802d784:	2200      	movs	r2, #0
 802d786:	4607      	mov	r7, r0
 802d788:	2300      	movs	r3, #0
 802d78a:	4620      	mov	r0, r4
 802d78c:	4629      	mov	r1, r5
 802d78e:	f7e3 f9bd 	bl	8010b0c <__aeabi_dcmplt>
 802d792:	b140      	cbz	r0, 802d7a6 <_dtoa_r+0x13e>
 802d794:	4638      	mov	r0, r7
 802d796:	f7e2 fedd 	bl	8010554 <__aeabi_i2d>
 802d79a:	4622      	mov	r2, r4
 802d79c:	462b      	mov	r3, r5
 802d79e:	f7e3 f9ab 	bl	8010af8 <__aeabi_dcmpeq>
 802d7a2:	b900      	cbnz	r0, 802d7a6 <_dtoa_r+0x13e>
 802d7a4:	3f01      	subs	r7, #1
 802d7a6:	2f16      	cmp	r7, #22
 802d7a8:	d851      	bhi.n	802d84e <_dtoa_r+0x1e6>
 802d7aa:	4b5a      	ldr	r3, [pc, #360]	@ (802d914 <_dtoa_r+0x2ac>)
 802d7ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d7b8:	f7e3 f9a8 	bl	8010b0c <__aeabi_dcmplt>
 802d7bc:	2800      	cmp	r0, #0
 802d7be:	d048      	beq.n	802d852 <_dtoa_r+0x1ea>
 802d7c0:	3f01      	subs	r7, #1
 802d7c2:	2300      	movs	r3, #0
 802d7c4:	9312      	str	r3, [sp, #72]	@ 0x48
 802d7c6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802d7c8:	1b9b      	subs	r3, r3, r6
 802d7ca:	1e5a      	subs	r2, r3, #1
 802d7cc:	bf44      	itt	mi
 802d7ce:	f1c3 0801 	rsbmi	r8, r3, #1
 802d7d2:	2300      	movmi	r3, #0
 802d7d4:	9208      	str	r2, [sp, #32]
 802d7d6:	bf54      	ite	pl
 802d7d8:	f04f 0800 	movpl.w	r8, #0
 802d7dc:	9308      	strmi	r3, [sp, #32]
 802d7de:	2f00      	cmp	r7, #0
 802d7e0:	db39      	blt.n	802d856 <_dtoa_r+0x1ee>
 802d7e2:	9b08      	ldr	r3, [sp, #32]
 802d7e4:	970f      	str	r7, [sp, #60]	@ 0x3c
 802d7e6:	443b      	add	r3, r7
 802d7e8:	9308      	str	r3, [sp, #32]
 802d7ea:	2300      	movs	r3, #0
 802d7ec:	930a      	str	r3, [sp, #40]	@ 0x28
 802d7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d7f0:	2b09      	cmp	r3, #9
 802d7f2:	d865      	bhi.n	802d8c0 <_dtoa_r+0x258>
 802d7f4:	2b05      	cmp	r3, #5
 802d7f6:	bfc4      	itt	gt
 802d7f8:	3b04      	subgt	r3, #4
 802d7fa:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802d7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d7fe:	f1a3 0302 	sub.w	r3, r3, #2
 802d802:	bfcc      	ite	gt
 802d804:	2400      	movgt	r4, #0
 802d806:	2401      	movle	r4, #1
 802d808:	2b03      	cmp	r3, #3
 802d80a:	d864      	bhi.n	802d8d6 <_dtoa_r+0x26e>
 802d80c:	e8df f003 	tbb	[pc, r3]
 802d810:	5635372a 	.word	0x5635372a
 802d814:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802d818:	441e      	add	r6, r3
 802d81a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802d81e:	2b20      	cmp	r3, #32
 802d820:	bfc1      	itttt	gt
 802d822:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802d826:	409f      	lslgt	r7, r3
 802d828:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802d82c:	fa24 f303 	lsrgt.w	r3, r4, r3
 802d830:	bfd6      	itet	le
 802d832:	f1c3 0320 	rsble	r3, r3, #32
 802d836:	ea47 0003 	orrgt.w	r0, r7, r3
 802d83a:	fa04 f003 	lslle.w	r0, r4, r3
 802d83e:	f7e2 fe79 	bl	8010534 <__aeabi_ui2d>
 802d842:	2201      	movs	r2, #1
 802d844:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802d848:	3e01      	subs	r6, #1
 802d84a:	9214      	str	r2, [sp, #80]	@ 0x50
 802d84c:	e777      	b.n	802d73e <_dtoa_r+0xd6>
 802d84e:	2301      	movs	r3, #1
 802d850:	e7b8      	b.n	802d7c4 <_dtoa_r+0x15c>
 802d852:	9012      	str	r0, [sp, #72]	@ 0x48
 802d854:	e7b7      	b.n	802d7c6 <_dtoa_r+0x15e>
 802d856:	427b      	negs	r3, r7
 802d858:	930a      	str	r3, [sp, #40]	@ 0x28
 802d85a:	2300      	movs	r3, #0
 802d85c:	eba8 0807 	sub.w	r8, r8, r7
 802d860:	930f      	str	r3, [sp, #60]	@ 0x3c
 802d862:	e7c4      	b.n	802d7ee <_dtoa_r+0x186>
 802d864:	2300      	movs	r3, #0
 802d866:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d86a:	2b00      	cmp	r3, #0
 802d86c:	dc36      	bgt.n	802d8dc <_dtoa_r+0x274>
 802d86e:	2301      	movs	r3, #1
 802d870:	9300      	str	r3, [sp, #0]
 802d872:	9307      	str	r3, [sp, #28]
 802d874:	461a      	mov	r2, r3
 802d876:	920e      	str	r2, [sp, #56]	@ 0x38
 802d878:	e00b      	b.n	802d892 <_dtoa_r+0x22a>
 802d87a:	2301      	movs	r3, #1
 802d87c:	e7f3      	b.n	802d866 <_dtoa_r+0x1fe>
 802d87e:	2300      	movs	r3, #0
 802d880:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d884:	18fb      	adds	r3, r7, r3
 802d886:	9300      	str	r3, [sp, #0]
 802d888:	3301      	adds	r3, #1
 802d88a:	2b01      	cmp	r3, #1
 802d88c:	9307      	str	r3, [sp, #28]
 802d88e:	bfb8      	it	lt
 802d890:	2301      	movlt	r3, #1
 802d892:	2100      	movs	r1, #0
 802d894:	2204      	movs	r2, #4
 802d896:	f102 0014 	add.w	r0, r2, #20
 802d89a:	4298      	cmp	r0, r3
 802d89c:	d922      	bls.n	802d8e4 <_dtoa_r+0x27c>
 802d89e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 802d8a2:	4658      	mov	r0, fp
 802d8a4:	f005 f910 	bl	8032ac8 <_Balloc>
 802d8a8:	4682      	mov	sl, r0
 802d8aa:	2800      	cmp	r0, #0
 802d8ac:	d13c      	bne.n	802d928 <_dtoa_r+0x2c0>
 802d8ae:	4b1a      	ldr	r3, [pc, #104]	@ (802d918 <_dtoa_r+0x2b0>)
 802d8b0:	4602      	mov	r2, r0
 802d8b2:	f240 11af 	movw	r1, #431	@ 0x1af
 802d8b6:	4819      	ldr	r0, [pc, #100]	@ (802d91c <_dtoa_r+0x2b4>)
 802d8b8:	f7fb fe48 	bl	802954c <__assert_func>
 802d8bc:	2301      	movs	r3, #1
 802d8be:	e7df      	b.n	802d880 <_dtoa_r+0x218>
 802d8c0:	2401      	movs	r4, #1
 802d8c2:	2300      	movs	r3, #0
 802d8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 802d8c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 802d8c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802d8cc:	9300      	str	r3, [sp, #0]
 802d8ce:	9307      	str	r3, [sp, #28]
 802d8d0:	2200      	movs	r2, #0
 802d8d2:	2312      	movs	r3, #18
 802d8d4:	e7cf      	b.n	802d876 <_dtoa_r+0x20e>
 802d8d6:	2301      	movs	r3, #1
 802d8d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d8da:	e7f5      	b.n	802d8c8 <_dtoa_r+0x260>
 802d8dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802d8de:	9300      	str	r3, [sp, #0]
 802d8e0:	9307      	str	r3, [sp, #28]
 802d8e2:	e7d6      	b.n	802d892 <_dtoa_r+0x22a>
 802d8e4:	3101      	adds	r1, #1
 802d8e6:	0052      	lsls	r2, r2, #1
 802d8e8:	e7d5      	b.n	802d896 <_dtoa_r+0x22e>
 802d8ea:	bf00      	nop
 802d8ec:	f3af 8000 	nop.w
 802d8f0:	636f4361 	.word	0x636f4361
 802d8f4:	3fd287a7 	.word	0x3fd287a7
 802d8f8:	8b60c8b3 	.word	0x8b60c8b3
 802d8fc:	3fc68a28 	.word	0x3fc68a28
 802d900:	509f79fb 	.word	0x509f79fb
 802d904:	3fd34413 	.word	0x3fd34413
 802d908:	7ff00000 	.word	0x7ff00000
 802d90c:	0803ad46 	.word	0x0803ad46
 802d910:	3ff80000 	.word	0x3ff80000
 802d914:	0803b360 	.word	0x0803b360
 802d918:	0803b1de 	.word	0x0803b1de
 802d91c:	0803b1ef 	.word	0x0803b1ef
 802d920:	0803b1da 	.word	0x0803b1da
 802d924:	0803ad45 	.word	0x0803ad45
 802d928:	9b07      	ldr	r3, [sp, #28]
 802d92a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802d92e:	2b0e      	cmp	r3, #14
 802d930:	f200 80a4 	bhi.w	802da7c <_dtoa_r+0x414>
 802d934:	2c00      	cmp	r4, #0
 802d936:	f000 80a1 	beq.w	802da7c <_dtoa_r+0x414>
 802d93a:	2f00      	cmp	r7, #0
 802d93c:	dd33      	ble.n	802d9a6 <_dtoa_r+0x33e>
 802d93e:	4bae      	ldr	r3, [pc, #696]	@ (802dbf8 <_dtoa_r+0x590>)
 802d940:	f007 020f 	and.w	r2, r7, #15
 802d944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802d948:	ed93 7b00 	vldr	d7, [r3]
 802d94c:	05f8      	lsls	r0, r7, #23
 802d94e:	ed8d 7b04 	vstr	d7, [sp, #16]
 802d952:	ea4f 1427 	mov.w	r4, r7, asr #4
 802d956:	d516      	bpl.n	802d986 <_dtoa_r+0x31e>
 802d958:	4ba8      	ldr	r3, [pc, #672]	@ (802dbfc <_dtoa_r+0x594>)
 802d95a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d95e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802d962:	f7e2 ff8b 	bl	801087c <__aeabi_ddiv>
 802d966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d96a:	f004 040f 	and.w	r4, r4, #15
 802d96e:	2603      	movs	r6, #3
 802d970:	4da2      	ldr	r5, [pc, #648]	@ (802dbfc <_dtoa_r+0x594>)
 802d972:	b954      	cbnz	r4, 802d98a <_dtoa_r+0x322>
 802d974:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802d978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802d97c:	f7e2 ff7e 	bl	801087c <__aeabi_ddiv>
 802d980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d984:	e028      	b.n	802d9d8 <_dtoa_r+0x370>
 802d986:	2602      	movs	r6, #2
 802d988:	e7f2      	b.n	802d970 <_dtoa_r+0x308>
 802d98a:	07e1      	lsls	r1, r4, #31
 802d98c:	d508      	bpl.n	802d9a0 <_dtoa_r+0x338>
 802d98e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802d992:	e9d5 2300 	ldrd	r2, r3, [r5]
 802d996:	f7e2 fe47 	bl	8010628 <__aeabi_dmul>
 802d99a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802d99e:	3601      	adds	r6, #1
 802d9a0:	1064      	asrs	r4, r4, #1
 802d9a2:	3508      	adds	r5, #8
 802d9a4:	e7e5      	b.n	802d972 <_dtoa_r+0x30a>
 802d9a6:	f000 80d2 	beq.w	802db4e <_dtoa_r+0x4e6>
 802d9aa:	427c      	negs	r4, r7
 802d9ac:	4b92      	ldr	r3, [pc, #584]	@ (802dbf8 <_dtoa_r+0x590>)
 802d9ae:	4d93      	ldr	r5, [pc, #588]	@ (802dbfc <_dtoa_r+0x594>)
 802d9b0:	f004 020f 	and.w	r2, r4, #15
 802d9b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802d9c0:	f7e2 fe32 	bl	8010628 <__aeabi_dmul>
 802d9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802d9c8:	1124      	asrs	r4, r4, #4
 802d9ca:	2300      	movs	r3, #0
 802d9cc:	2602      	movs	r6, #2
 802d9ce:	2c00      	cmp	r4, #0
 802d9d0:	f040 80b2 	bne.w	802db38 <_dtoa_r+0x4d0>
 802d9d4:	2b00      	cmp	r3, #0
 802d9d6:	d1d3      	bne.n	802d980 <_dtoa_r+0x318>
 802d9d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802d9da:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802d9de:	2b00      	cmp	r3, #0
 802d9e0:	f000 80b7 	beq.w	802db52 <_dtoa_r+0x4ea>
 802d9e4:	4b86      	ldr	r3, [pc, #536]	@ (802dc00 <_dtoa_r+0x598>)
 802d9e6:	2200      	movs	r2, #0
 802d9e8:	4620      	mov	r0, r4
 802d9ea:	4629      	mov	r1, r5
 802d9ec:	f7e3 f88e 	bl	8010b0c <__aeabi_dcmplt>
 802d9f0:	2800      	cmp	r0, #0
 802d9f2:	f000 80ae 	beq.w	802db52 <_dtoa_r+0x4ea>
 802d9f6:	9b07      	ldr	r3, [sp, #28]
 802d9f8:	2b00      	cmp	r3, #0
 802d9fa:	f000 80aa 	beq.w	802db52 <_dtoa_r+0x4ea>
 802d9fe:	9b00      	ldr	r3, [sp, #0]
 802da00:	2b00      	cmp	r3, #0
 802da02:	dd37      	ble.n	802da74 <_dtoa_r+0x40c>
 802da04:	1e7b      	subs	r3, r7, #1
 802da06:	9304      	str	r3, [sp, #16]
 802da08:	4620      	mov	r0, r4
 802da0a:	4b7e      	ldr	r3, [pc, #504]	@ (802dc04 <_dtoa_r+0x59c>)
 802da0c:	2200      	movs	r2, #0
 802da0e:	4629      	mov	r1, r5
 802da10:	f7e2 fe0a 	bl	8010628 <__aeabi_dmul>
 802da14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802da18:	9c00      	ldr	r4, [sp, #0]
 802da1a:	3601      	adds	r6, #1
 802da1c:	4630      	mov	r0, r6
 802da1e:	f7e2 fd99 	bl	8010554 <__aeabi_i2d>
 802da22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802da26:	f7e2 fdff 	bl	8010628 <__aeabi_dmul>
 802da2a:	4b77      	ldr	r3, [pc, #476]	@ (802dc08 <_dtoa_r+0x5a0>)
 802da2c:	2200      	movs	r2, #0
 802da2e:	f7e2 fc45 	bl	80102bc <__adddf3>
 802da32:	4605      	mov	r5, r0
 802da34:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802da38:	2c00      	cmp	r4, #0
 802da3a:	f040 808d 	bne.w	802db58 <_dtoa_r+0x4f0>
 802da3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802da42:	4b72      	ldr	r3, [pc, #456]	@ (802dc0c <_dtoa_r+0x5a4>)
 802da44:	2200      	movs	r2, #0
 802da46:	f7e2 fc37 	bl	80102b8 <__aeabi_dsub>
 802da4a:	4602      	mov	r2, r0
 802da4c:	460b      	mov	r3, r1
 802da4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802da52:	462a      	mov	r2, r5
 802da54:	4633      	mov	r3, r6
 802da56:	f7e3 f877 	bl	8010b48 <__aeabi_dcmpgt>
 802da5a:	2800      	cmp	r0, #0
 802da5c:	f040 828c 	bne.w	802df78 <_dtoa_r+0x910>
 802da60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802da64:	462a      	mov	r2, r5
 802da66:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802da6a:	f7e3 f84f 	bl	8010b0c <__aeabi_dcmplt>
 802da6e:	2800      	cmp	r0, #0
 802da70:	f040 8129 	bne.w	802dcc6 <_dtoa_r+0x65e>
 802da74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802da78:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802da7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802da7e:	2b00      	cmp	r3, #0
 802da80:	f2c0 815b 	blt.w	802dd3a <_dtoa_r+0x6d2>
 802da84:	2f0e      	cmp	r7, #14
 802da86:	f300 8158 	bgt.w	802dd3a <_dtoa_r+0x6d2>
 802da8a:	4b5b      	ldr	r3, [pc, #364]	@ (802dbf8 <_dtoa_r+0x590>)
 802da8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802da90:	ed93 7b00 	vldr	d7, [r3]
 802da94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802da96:	2b00      	cmp	r3, #0
 802da98:	ed8d 7b00 	vstr	d7, [sp]
 802da9c:	da03      	bge.n	802daa6 <_dtoa_r+0x43e>
 802da9e:	9b07      	ldr	r3, [sp, #28]
 802daa0:	2b00      	cmp	r3, #0
 802daa2:	f340 8102 	ble.w	802dcaa <_dtoa_r+0x642>
 802daa6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802daaa:	4656      	mov	r6, sl
 802daac:	e9dd 2300 	ldrd	r2, r3, [sp]
 802dab0:	4620      	mov	r0, r4
 802dab2:	4629      	mov	r1, r5
 802dab4:	f7e2 fee2 	bl	801087c <__aeabi_ddiv>
 802dab8:	f7e3 f866 	bl	8010b88 <__aeabi_d2iz>
 802dabc:	4680      	mov	r8, r0
 802dabe:	f7e2 fd49 	bl	8010554 <__aeabi_i2d>
 802dac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802dac6:	f7e2 fdaf 	bl	8010628 <__aeabi_dmul>
 802daca:	4602      	mov	r2, r0
 802dacc:	460b      	mov	r3, r1
 802dace:	4620      	mov	r0, r4
 802dad0:	4629      	mov	r1, r5
 802dad2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802dad6:	f7e2 fbef 	bl	80102b8 <__aeabi_dsub>
 802dada:	f806 4b01 	strb.w	r4, [r6], #1
 802dade:	9d07      	ldr	r5, [sp, #28]
 802dae0:	eba6 040a 	sub.w	r4, r6, sl
 802dae4:	42a5      	cmp	r5, r4
 802dae6:	4602      	mov	r2, r0
 802dae8:	460b      	mov	r3, r1
 802daea:	f040 8118 	bne.w	802dd1e <_dtoa_r+0x6b6>
 802daee:	f7e2 fbe5 	bl	80102bc <__adddf3>
 802daf2:	e9dd 2300 	ldrd	r2, r3, [sp]
 802daf6:	4604      	mov	r4, r0
 802daf8:	460d      	mov	r5, r1
 802dafa:	f7e3 f825 	bl	8010b48 <__aeabi_dcmpgt>
 802dafe:	2800      	cmp	r0, #0
 802db00:	f040 80fa 	bne.w	802dcf8 <_dtoa_r+0x690>
 802db04:	e9dd 2300 	ldrd	r2, r3, [sp]
 802db08:	4620      	mov	r0, r4
 802db0a:	4629      	mov	r1, r5
 802db0c:	f7e2 fff4 	bl	8010af8 <__aeabi_dcmpeq>
 802db10:	b118      	cbz	r0, 802db1a <_dtoa_r+0x4b2>
 802db12:	f018 0f01 	tst.w	r8, #1
 802db16:	f040 80ef 	bne.w	802dcf8 <_dtoa_r+0x690>
 802db1a:	4649      	mov	r1, r9
 802db1c:	4658      	mov	r0, fp
 802db1e:	f004 fff8 	bl	8032b12 <_Bfree>
 802db22:	2300      	movs	r3, #0
 802db24:	7033      	strb	r3, [r6, #0]
 802db26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802db28:	3701      	adds	r7, #1
 802db2a:	601f      	str	r7, [r3, #0]
 802db2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802db2e:	2b00      	cmp	r3, #0
 802db30:	f43f add1 	beq.w	802d6d6 <_dtoa_r+0x6e>
 802db34:	601e      	str	r6, [r3, #0]
 802db36:	e5ce      	b.n	802d6d6 <_dtoa_r+0x6e>
 802db38:	07e2      	lsls	r2, r4, #31
 802db3a:	d505      	bpl.n	802db48 <_dtoa_r+0x4e0>
 802db3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 802db40:	f7e2 fd72 	bl	8010628 <__aeabi_dmul>
 802db44:	3601      	adds	r6, #1
 802db46:	2301      	movs	r3, #1
 802db48:	1064      	asrs	r4, r4, #1
 802db4a:	3508      	adds	r5, #8
 802db4c:	e73f      	b.n	802d9ce <_dtoa_r+0x366>
 802db4e:	2602      	movs	r6, #2
 802db50:	e742      	b.n	802d9d8 <_dtoa_r+0x370>
 802db52:	9c07      	ldr	r4, [sp, #28]
 802db54:	9704      	str	r7, [sp, #16]
 802db56:	e761      	b.n	802da1c <_dtoa_r+0x3b4>
 802db58:	4b27      	ldr	r3, [pc, #156]	@ (802dbf8 <_dtoa_r+0x590>)
 802db5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802db5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802db60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802db64:	4454      	add	r4, sl
 802db66:	2900      	cmp	r1, #0
 802db68:	d054      	beq.n	802dc14 <_dtoa_r+0x5ac>
 802db6a:	4929      	ldr	r1, [pc, #164]	@ (802dc10 <_dtoa_r+0x5a8>)
 802db6c:	2000      	movs	r0, #0
 802db6e:	f7e2 fe85 	bl	801087c <__aeabi_ddiv>
 802db72:	4633      	mov	r3, r6
 802db74:	462a      	mov	r2, r5
 802db76:	f7e2 fb9f 	bl	80102b8 <__aeabi_dsub>
 802db7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802db7e:	4656      	mov	r6, sl
 802db80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802db84:	f7e3 f800 	bl	8010b88 <__aeabi_d2iz>
 802db88:	4605      	mov	r5, r0
 802db8a:	f7e2 fce3 	bl	8010554 <__aeabi_i2d>
 802db8e:	4602      	mov	r2, r0
 802db90:	460b      	mov	r3, r1
 802db92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802db96:	f7e2 fb8f 	bl	80102b8 <__aeabi_dsub>
 802db9a:	3530      	adds	r5, #48	@ 0x30
 802db9c:	4602      	mov	r2, r0
 802db9e:	460b      	mov	r3, r1
 802dba0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802dba4:	f806 5b01 	strb.w	r5, [r6], #1
 802dba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802dbac:	f7e2 ffae 	bl	8010b0c <__aeabi_dcmplt>
 802dbb0:	2800      	cmp	r0, #0
 802dbb2:	d172      	bne.n	802dc9a <_dtoa_r+0x632>
 802dbb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802dbb8:	4911      	ldr	r1, [pc, #68]	@ (802dc00 <_dtoa_r+0x598>)
 802dbba:	2000      	movs	r0, #0
 802dbbc:	f7e2 fb7c 	bl	80102b8 <__aeabi_dsub>
 802dbc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802dbc4:	f7e2 ffa2 	bl	8010b0c <__aeabi_dcmplt>
 802dbc8:	2800      	cmp	r0, #0
 802dbca:	f040 8096 	bne.w	802dcfa <_dtoa_r+0x692>
 802dbce:	42a6      	cmp	r6, r4
 802dbd0:	f43f af50 	beq.w	802da74 <_dtoa_r+0x40c>
 802dbd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802dbd8:	4b0a      	ldr	r3, [pc, #40]	@ (802dc04 <_dtoa_r+0x59c>)
 802dbda:	2200      	movs	r2, #0
 802dbdc:	f7e2 fd24 	bl	8010628 <__aeabi_dmul>
 802dbe0:	4b08      	ldr	r3, [pc, #32]	@ (802dc04 <_dtoa_r+0x59c>)
 802dbe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802dbe6:	2200      	movs	r2, #0
 802dbe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dbec:	f7e2 fd1c 	bl	8010628 <__aeabi_dmul>
 802dbf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dbf4:	e7c4      	b.n	802db80 <_dtoa_r+0x518>
 802dbf6:	bf00      	nop
 802dbf8:	0803b360 	.word	0x0803b360
 802dbfc:	0803b338 	.word	0x0803b338
 802dc00:	3ff00000 	.word	0x3ff00000
 802dc04:	40240000 	.word	0x40240000
 802dc08:	401c0000 	.word	0x401c0000
 802dc0c:	40140000 	.word	0x40140000
 802dc10:	3fe00000 	.word	0x3fe00000
 802dc14:	4631      	mov	r1, r6
 802dc16:	4628      	mov	r0, r5
 802dc18:	f7e2 fd06 	bl	8010628 <__aeabi_dmul>
 802dc1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802dc20:	9415      	str	r4, [sp, #84]	@ 0x54
 802dc22:	4656      	mov	r6, sl
 802dc24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dc28:	f7e2 ffae 	bl	8010b88 <__aeabi_d2iz>
 802dc2c:	4605      	mov	r5, r0
 802dc2e:	f7e2 fc91 	bl	8010554 <__aeabi_i2d>
 802dc32:	4602      	mov	r2, r0
 802dc34:	460b      	mov	r3, r1
 802dc36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dc3a:	f7e2 fb3d 	bl	80102b8 <__aeabi_dsub>
 802dc3e:	3530      	adds	r5, #48	@ 0x30
 802dc40:	f806 5b01 	strb.w	r5, [r6], #1
 802dc44:	4602      	mov	r2, r0
 802dc46:	460b      	mov	r3, r1
 802dc48:	42a6      	cmp	r6, r4
 802dc4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802dc4e:	f04f 0200 	mov.w	r2, #0
 802dc52:	d124      	bne.n	802dc9e <_dtoa_r+0x636>
 802dc54:	4bac      	ldr	r3, [pc, #688]	@ (802df08 <_dtoa_r+0x8a0>)
 802dc56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802dc5a:	f7e2 fb2f 	bl	80102bc <__adddf3>
 802dc5e:	4602      	mov	r2, r0
 802dc60:	460b      	mov	r3, r1
 802dc62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dc66:	f7e2 ff6f 	bl	8010b48 <__aeabi_dcmpgt>
 802dc6a:	2800      	cmp	r0, #0
 802dc6c:	d145      	bne.n	802dcfa <_dtoa_r+0x692>
 802dc6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802dc72:	49a5      	ldr	r1, [pc, #660]	@ (802df08 <_dtoa_r+0x8a0>)
 802dc74:	2000      	movs	r0, #0
 802dc76:	f7e2 fb1f 	bl	80102b8 <__aeabi_dsub>
 802dc7a:	4602      	mov	r2, r0
 802dc7c:	460b      	mov	r3, r1
 802dc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802dc82:	f7e2 ff43 	bl	8010b0c <__aeabi_dcmplt>
 802dc86:	2800      	cmp	r0, #0
 802dc88:	f43f aef4 	beq.w	802da74 <_dtoa_r+0x40c>
 802dc8c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802dc8e:	1e73      	subs	r3, r6, #1
 802dc90:	9315      	str	r3, [sp, #84]	@ 0x54
 802dc92:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802dc96:	2b30      	cmp	r3, #48	@ 0x30
 802dc98:	d0f8      	beq.n	802dc8c <_dtoa_r+0x624>
 802dc9a:	9f04      	ldr	r7, [sp, #16]
 802dc9c:	e73d      	b.n	802db1a <_dtoa_r+0x4b2>
 802dc9e:	4b9b      	ldr	r3, [pc, #620]	@ (802df0c <_dtoa_r+0x8a4>)
 802dca0:	f7e2 fcc2 	bl	8010628 <__aeabi_dmul>
 802dca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dca8:	e7bc      	b.n	802dc24 <_dtoa_r+0x5bc>
 802dcaa:	d10c      	bne.n	802dcc6 <_dtoa_r+0x65e>
 802dcac:	4b98      	ldr	r3, [pc, #608]	@ (802df10 <_dtoa_r+0x8a8>)
 802dcae:	2200      	movs	r2, #0
 802dcb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802dcb4:	f7e2 fcb8 	bl	8010628 <__aeabi_dmul>
 802dcb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802dcbc:	f7e2 ff3a 	bl	8010b34 <__aeabi_dcmpge>
 802dcc0:	2800      	cmp	r0, #0
 802dcc2:	f000 8157 	beq.w	802df74 <_dtoa_r+0x90c>
 802dcc6:	2400      	movs	r4, #0
 802dcc8:	4625      	mov	r5, r4
 802dcca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dccc:	43db      	mvns	r3, r3
 802dcce:	9304      	str	r3, [sp, #16]
 802dcd0:	4656      	mov	r6, sl
 802dcd2:	2700      	movs	r7, #0
 802dcd4:	4621      	mov	r1, r4
 802dcd6:	4658      	mov	r0, fp
 802dcd8:	f004 ff1b 	bl	8032b12 <_Bfree>
 802dcdc:	2d00      	cmp	r5, #0
 802dcde:	d0dc      	beq.n	802dc9a <_dtoa_r+0x632>
 802dce0:	b12f      	cbz	r7, 802dcee <_dtoa_r+0x686>
 802dce2:	42af      	cmp	r7, r5
 802dce4:	d003      	beq.n	802dcee <_dtoa_r+0x686>
 802dce6:	4639      	mov	r1, r7
 802dce8:	4658      	mov	r0, fp
 802dcea:	f004 ff12 	bl	8032b12 <_Bfree>
 802dcee:	4629      	mov	r1, r5
 802dcf0:	4658      	mov	r0, fp
 802dcf2:	f004 ff0e 	bl	8032b12 <_Bfree>
 802dcf6:	e7d0      	b.n	802dc9a <_dtoa_r+0x632>
 802dcf8:	9704      	str	r7, [sp, #16]
 802dcfa:	4633      	mov	r3, r6
 802dcfc:	461e      	mov	r6, r3
 802dcfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802dd02:	2a39      	cmp	r2, #57	@ 0x39
 802dd04:	d107      	bne.n	802dd16 <_dtoa_r+0x6ae>
 802dd06:	459a      	cmp	sl, r3
 802dd08:	d1f8      	bne.n	802dcfc <_dtoa_r+0x694>
 802dd0a:	9a04      	ldr	r2, [sp, #16]
 802dd0c:	3201      	adds	r2, #1
 802dd0e:	9204      	str	r2, [sp, #16]
 802dd10:	2230      	movs	r2, #48	@ 0x30
 802dd12:	f88a 2000 	strb.w	r2, [sl]
 802dd16:	781a      	ldrb	r2, [r3, #0]
 802dd18:	3201      	adds	r2, #1
 802dd1a:	701a      	strb	r2, [r3, #0]
 802dd1c:	e7bd      	b.n	802dc9a <_dtoa_r+0x632>
 802dd1e:	4b7b      	ldr	r3, [pc, #492]	@ (802df0c <_dtoa_r+0x8a4>)
 802dd20:	2200      	movs	r2, #0
 802dd22:	f7e2 fc81 	bl	8010628 <__aeabi_dmul>
 802dd26:	2200      	movs	r2, #0
 802dd28:	2300      	movs	r3, #0
 802dd2a:	4604      	mov	r4, r0
 802dd2c:	460d      	mov	r5, r1
 802dd2e:	f7e2 fee3 	bl	8010af8 <__aeabi_dcmpeq>
 802dd32:	2800      	cmp	r0, #0
 802dd34:	f43f aeba 	beq.w	802daac <_dtoa_r+0x444>
 802dd38:	e6ef      	b.n	802db1a <_dtoa_r+0x4b2>
 802dd3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802dd3c:	2a00      	cmp	r2, #0
 802dd3e:	f000 80db 	beq.w	802def8 <_dtoa_r+0x890>
 802dd42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802dd44:	2a01      	cmp	r2, #1
 802dd46:	f300 80bf 	bgt.w	802dec8 <_dtoa_r+0x860>
 802dd4a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802dd4c:	2a00      	cmp	r2, #0
 802dd4e:	f000 80b7 	beq.w	802dec0 <_dtoa_r+0x858>
 802dd52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802dd56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802dd58:	4646      	mov	r6, r8
 802dd5a:	9a08      	ldr	r2, [sp, #32]
 802dd5c:	2101      	movs	r1, #1
 802dd5e:	441a      	add	r2, r3
 802dd60:	4658      	mov	r0, fp
 802dd62:	4498      	add	r8, r3
 802dd64:	9208      	str	r2, [sp, #32]
 802dd66:	f004 ffb9 	bl	8032cdc <__i2b>
 802dd6a:	4605      	mov	r5, r0
 802dd6c:	b15e      	cbz	r6, 802dd86 <_dtoa_r+0x71e>
 802dd6e:	9b08      	ldr	r3, [sp, #32]
 802dd70:	2b00      	cmp	r3, #0
 802dd72:	dd08      	ble.n	802dd86 <_dtoa_r+0x71e>
 802dd74:	42b3      	cmp	r3, r6
 802dd76:	9a08      	ldr	r2, [sp, #32]
 802dd78:	bfa8      	it	ge
 802dd7a:	4633      	movge	r3, r6
 802dd7c:	eba8 0803 	sub.w	r8, r8, r3
 802dd80:	1af6      	subs	r6, r6, r3
 802dd82:	1ad3      	subs	r3, r2, r3
 802dd84:	9308      	str	r3, [sp, #32]
 802dd86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dd88:	b1f3      	cbz	r3, 802ddc8 <_dtoa_r+0x760>
 802dd8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802dd8c:	2b00      	cmp	r3, #0
 802dd8e:	f000 80b7 	beq.w	802df00 <_dtoa_r+0x898>
 802dd92:	b18c      	cbz	r4, 802ddb8 <_dtoa_r+0x750>
 802dd94:	4629      	mov	r1, r5
 802dd96:	4622      	mov	r2, r4
 802dd98:	4658      	mov	r0, fp
 802dd9a:	f005 f85f 	bl	8032e5c <__pow5mult>
 802dd9e:	464a      	mov	r2, r9
 802dda0:	4601      	mov	r1, r0
 802dda2:	4605      	mov	r5, r0
 802dda4:	4658      	mov	r0, fp
 802dda6:	f004 ffaf 	bl	8032d08 <__multiply>
 802ddaa:	4649      	mov	r1, r9
 802ddac:	9004      	str	r0, [sp, #16]
 802ddae:	4658      	mov	r0, fp
 802ddb0:	f004 feaf 	bl	8032b12 <_Bfree>
 802ddb4:	9b04      	ldr	r3, [sp, #16]
 802ddb6:	4699      	mov	r9, r3
 802ddb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ddba:	1b1a      	subs	r2, r3, r4
 802ddbc:	d004      	beq.n	802ddc8 <_dtoa_r+0x760>
 802ddbe:	4649      	mov	r1, r9
 802ddc0:	4658      	mov	r0, fp
 802ddc2:	f005 f84b 	bl	8032e5c <__pow5mult>
 802ddc6:	4681      	mov	r9, r0
 802ddc8:	2101      	movs	r1, #1
 802ddca:	4658      	mov	r0, fp
 802ddcc:	f004 ff86 	bl	8032cdc <__i2b>
 802ddd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ddd2:	4604      	mov	r4, r0
 802ddd4:	2b00      	cmp	r3, #0
 802ddd6:	f000 81cc 	beq.w	802e172 <_dtoa_r+0xb0a>
 802ddda:	461a      	mov	r2, r3
 802dddc:	4601      	mov	r1, r0
 802ddde:	4658      	mov	r0, fp
 802dde0:	f005 f83c 	bl	8032e5c <__pow5mult>
 802dde4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802dde6:	2b01      	cmp	r3, #1
 802dde8:	4604      	mov	r4, r0
 802ddea:	f300 8095 	bgt.w	802df18 <_dtoa_r+0x8b0>
 802ddee:	9b02      	ldr	r3, [sp, #8]
 802ddf0:	2b00      	cmp	r3, #0
 802ddf2:	f040 8087 	bne.w	802df04 <_dtoa_r+0x89c>
 802ddf6:	9b03      	ldr	r3, [sp, #12]
 802ddf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802ddfc:	2b00      	cmp	r3, #0
 802ddfe:	f040 8089 	bne.w	802df14 <_dtoa_r+0x8ac>
 802de02:	9b03      	ldr	r3, [sp, #12]
 802de04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802de08:	0d1b      	lsrs	r3, r3, #20
 802de0a:	051b      	lsls	r3, r3, #20
 802de0c:	b12b      	cbz	r3, 802de1a <_dtoa_r+0x7b2>
 802de0e:	9b08      	ldr	r3, [sp, #32]
 802de10:	3301      	adds	r3, #1
 802de12:	9308      	str	r3, [sp, #32]
 802de14:	f108 0801 	add.w	r8, r8, #1
 802de18:	2301      	movs	r3, #1
 802de1a:	930a      	str	r3, [sp, #40]	@ 0x28
 802de1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802de1e:	2b00      	cmp	r3, #0
 802de20:	f000 81ad 	beq.w	802e17e <_dtoa_r+0xb16>
 802de24:	6923      	ldr	r3, [r4, #16]
 802de26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802de2a:	6918      	ldr	r0, [r3, #16]
 802de2c:	f004 ff0a 	bl	8032c44 <__hi0bits>
 802de30:	f1c0 0020 	rsb	r0, r0, #32
 802de34:	9b08      	ldr	r3, [sp, #32]
 802de36:	4418      	add	r0, r3
 802de38:	f010 001f 	ands.w	r0, r0, #31
 802de3c:	d077      	beq.n	802df2e <_dtoa_r+0x8c6>
 802de3e:	f1c0 0320 	rsb	r3, r0, #32
 802de42:	2b04      	cmp	r3, #4
 802de44:	dd6b      	ble.n	802df1e <_dtoa_r+0x8b6>
 802de46:	9b08      	ldr	r3, [sp, #32]
 802de48:	f1c0 001c 	rsb	r0, r0, #28
 802de4c:	4403      	add	r3, r0
 802de4e:	4480      	add	r8, r0
 802de50:	4406      	add	r6, r0
 802de52:	9308      	str	r3, [sp, #32]
 802de54:	f1b8 0f00 	cmp.w	r8, #0
 802de58:	dd05      	ble.n	802de66 <_dtoa_r+0x7fe>
 802de5a:	4649      	mov	r1, r9
 802de5c:	4642      	mov	r2, r8
 802de5e:	4658      	mov	r0, fp
 802de60:	f005 f83c 	bl	8032edc <__lshift>
 802de64:	4681      	mov	r9, r0
 802de66:	9b08      	ldr	r3, [sp, #32]
 802de68:	2b00      	cmp	r3, #0
 802de6a:	dd05      	ble.n	802de78 <_dtoa_r+0x810>
 802de6c:	4621      	mov	r1, r4
 802de6e:	461a      	mov	r2, r3
 802de70:	4658      	mov	r0, fp
 802de72:	f005 f833 	bl	8032edc <__lshift>
 802de76:	4604      	mov	r4, r0
 802de78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802de7a:	2b00      	cmp	r3, #0
 802de7c:	d059      	beq.n	802df32 <_dtoa_r+0x8ca>
 802de7e:	4621      	mov	r1, r4
 802de80:	4648      	mov	r0, r9
 802de82:	f005 f897 	bl	8032fb4 <__mcmp>
 802de86:	2800      	cmp	r0, #0
 802de88:	da53      	bge.n	802df32 <_dtoa_r+0x8ca>
 802de8a:	1e7b      	subs	r3, r7, #1
 802de8c:	9304      	str	r3, [sp, #16]
 802de8e:	4649      	mov	r1, r9
 802de90:	2300      	movs	r3, #0
 802de92:	220a      	movs	r2, #10
 802de94:	4658      	mov	r0, fp
 802de96:	f004 fe45 	bl	8032b24 <__multadd>
 802de9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802de9c:	4681      	mov	r9, r0
 802de9e:	2b00      	cmp	r3, #0
 802dea0:	f000 816f 	beq.w	802e182 <_dtoa_r+0xb1a>
 802dea4:	2300      	movs	r3, #0
 802dea6:	4629      	mov	r1, r5
 802dea8:	220a      	movs	r2, #10
 802deaa:	4658      	mov	r0, fp
 802deac:	f004 fe3a 	bl	8032b24 <__multadd>
 802deb0:	9b00      	ldr	r3, [sp, #0]
 802deb2:	2b00      	cmp	r3, #0
 802deb4:	4605      	mov	r5, r0
 802deb6:	dc67      	bgt.n	802df88 <_dtoa_r+0x920>
 802deb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802deba:	2b02      	cmp	r3, #2
 802debc:	dc41      	bgt.n	802df42 <_dtoa_r+0x8da>
 802debe:	e063      	b.n	802df88 <_dtoa_r+0x920>
 802dec0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802dec2:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802dec6:	e746      	b.n	802dd56 <_dtoa_r+0x6ee>
 802dec8:	9b07      	ldr	r3, [sp, #28]
 802deca:	1e5c      	subs	r4, r3, #1
 802decc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dece:	42a3      	cmp	r3, r4
 802ded0:	bfbf      	itttt	lt
 802ded2:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802ded4:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802ded6:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802ded8:	1ae3      	sublt	r3, r4, r3
 802deda:	bfb4      	ite	lt
 802dedc:	18d2      	addlt	r2, r2, r3
 802dede:	1b1c      	subge	r4, r3, r4
 802dee0:	9b07      	ldr	r3, [sp, #28]
 802dee2:	bfbc      	itt	lt
 802dee4:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802dee6:	2400      	movlt	r4, #0
 802dee8:	2b00      	cmp	r3, #0
 802deea:	bfb5      	itete	lt
 802deec:	eba8 0603 	sublt.w	r6, r8, r3
 802def0:	9b07      	ldrge	r3, [sp, #28]
 802def2:	2300      	movlt	r3, #0
 802def4:	4646      	movge	r6, r8
 802def6:	e730      	b.n	802dd5a <_dtoa_r+0x6f2>
 802def8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802defa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802defc:	4646      	mov	r6, r8
 802defe:	e735      	b.n	802dd6c <_dtoa_r+0x704>
 802df00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802df02:	e75c      	b.n	802ddbe <_dtoa_r+0x756>
 802df04:	2300      	movs	r3, #0
 802df06:	e788      	b.n	802de1a <_dtoa_r+0x7b2>
 802df08:	3fe00000 	.word	0x3fe00000
 802df0c:	40240000 	.word	0x40240000
 802df10:	40140000 	.word	0x40140000
 802df14:	9b02      	ldr	r3, [sp, #8]
 802df16:	e780      	b.n	802de1a <_dtoa_r+0x7b2>
 802df18:	2300      	movs	r3, #0
 802df1a:	930a      	str	r3, [sp, #40]	@ 0x28
 802df1c:	e782      	b.n	802de24 <_dtoa_r+0x7bc>
 802df1e:	d099      	beq.n	802de54 <_dtoa_r+0x7ec>
 802df20:	9a08      	ldr	r2, [sp, #32]
 802df22:	331c      	adds	r3, #28
 802df24:	441a      	add	r2, r3
 802df26:	4498      	add	r8, r3
 802df28:	441e      	add	r6, r3
 802df2a:	9208      	str	r2, [sp, #32]
 802df2c:	e792      	b.n	802de54 <_dtoa_r+0x7ec>
 802df2e:	4603      	mov	r3, r0
 802df30:	e7f6      	b.n	802df20 <_dtoa_r+0x8b8>
 802df32:	9b07      	ldr	r3, [sp, #28]
 802df34:	9704      	str	r7, [sp, #16]
 802df36:	2b00      	cmp	r3, #0
 802df38:	dc20      	bgt.n	802df7c <_dtoa_r+0x914>
 802df3a:	9300      	str	r3, [sp, #0]
 802df3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802df3e:	2b02      	cmp	r3, #2
 802df40:	dd1e      	ble.n	802df80 <_dtoa_r+0x918>
 802df42:	9b00      	ldr	r3, [sp, #0]
 802df44:	2b00      	cmp	r3, #0
 802df46:	f47f aec0 	bne.w	802dcca <_dtoa_r+0x662>
 802df4a:	4621      	mov	r1, r4
 802df4c:	2205      	movs	r2, #5
 802df4e:	4658      	mov	r0, fp
 802df50:	f004 fde8 	bl	8032b24 <__multadd>
 802df54:	4601      	mov	r1, r0
 802df56:	4604      	mov	r4, r0
 802df58:	4648      	mov	r0, r9
 802df5a:	f005 f82b 	bl	8032fb4 <__mcmp>
 802df5e:	2800      	cmp	r0, #0
 802df60:	f77f aeb3 	ble.w	802dcca <_dtoa_r+0x662>
 802df64:	4656      	mov	r6, sl
 802df66:	2331      	movs	r3, #49	@ 0x31
 802df68:	f806 3b01 	strb.w	r3, [r6], #1
 802df6c:	9b04      	ldr	r3, [sp, #16]
 802df6e:	3301      	adds	r3, #1
 802df70:	9304      	str	r3, [sp, #16]
 802df72:	e6ae      	b.n	802dcd2 <_dtoa_r+0x66a>
 802df74:	9c07      	ldr	r4, [sp, #28]
 802df76:	9704      	str	r7, [sp, #16]
 802df78:	4625      	mov	r5, r4
 802df7a:	e7f3      	b.n	802df64 <_dtoa_r+0x8fc>
 802df7c:	9b07      	ldr	r3, [sp, #28]
 802df7e:	9300      	str	r3, [sp, #0]
 802df80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802df82:	2b00      	cmp	r3, #0
 802df84:	f000 8101 	beq.w	802e18a <_dtoa_r+0xb22>
 802df88:	2e00      	cmp	r6, #0
 802df8a:	dd05      	ble.n	802df98 <_dtoa_r+0x930>
 802df8c:	4629      	mov	r1, r5
 802df8e:	4632      	mov	r2, r6
 802df90:	4658      	mov	r0, fp
 802df92:	f004 ffa3 	bl	8032edc <__lshift>
 802df96:	4605      	mov	r5, r0
 802df98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802df9a:	2b00      	cmp	r3, #0
 802df9c:	d059      	beq.n	802e052 <_dtoa_r+0x9ea>
 802df9e:	6869      	ldr	r1, [r5, #4]
 802dfa0:	4658      	mov	r0, fp
 802dfa2:	f004 fd91 	bl	8032ac8 <_Balloc>
 802dfa6:	4606      	mov	r6, r0
 802dfa8:	b920      	cbnz	r0, 802dfb4 <_dtoa_r+0x94c>
 802dfaa:	4b83      	ldr	r3, [pc, #524]	@ (802e1b8 <_dtoa_r+0xb50>)
 802dfac:	4602      	mov	r2, r0
 802dfae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802dfb2:	e480      	b.n	802d8b6 <_dtoa_r+0x24e>
 802dfb4:	692a      	ldr	r2, [r5, #16]
 802dfb6:	3202      	adds	r2, #2
 802dfb8:	0092      	lsls	r2, r2, #2
 802dfba:	f105 010c 	add.w	r1, r5, #12
 802dfbe:	300c      	adds	r0, #12
 802dfc0:	f7ff fa52 	bl	802d468 <memcpy>
 802dfc4:	2201      	movs	r2, #1
 802dfc6:	4631      	mov	r1, r6
 802dfc8:	4658      	mov	r0, fp
 802dfca:	f004 ff87 	bl	8032edc <__lshift>
 802dfce:	f10a 0301 	add.w	r3, sl, #1
 802dfd2:	9307      	str	r3, [sp, #28]
 802dfd4:	9b00      	ldr	r3, [sp, #0]
 802dfd6:	4453      	add	r3, sl
 802dfd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802dfda:	9b02      	ldr	r3, [sp, #8]
 802dfdc:	f003 0301 	and.w	r3, r3, #1
 802dfe0:	462f      	mov	r7, r5
 802dfe2:	930a      	str	r3, [sp, #40]	@ 0x28
 802dfe4:	4605      	mov	r5, r0
 802dfe6:	9b07      	ldr	r3, [sp, #28]
 802dfe8:	4621      	mov	r1, r4
 802dfea:	3b01      	subs	r3, #1
 802dfec:	4648      	mov	r0, r9
 802dfee:	9300      	str	r3, [sp, #0]
 802dff0:	f7ff faaf 	bl	802d552 <quorem>
 802dff4:	4639      	mov	r1, r7
 802dff6:	9002      	str	r0, [sp, #8]
 802dff8:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802dffc:	4648      	mov	r0, r9
 802dffe:	f004 ffd9 	bl	8032fb4 <__mcmp>
 802e002:	462a      	mov	r2, r5
 802e004:	9008      	str	r0, [sp, #32]
 802e006:	4621      	mov	r1, r4
 802e008:	4658      	mov	r0, fp
 802e00a:	f004 ffef 	bl	8032fec <__mdiff>
 802e00e:	68c2      	ldr	r2, [r0, #12]
 802e010:	4606      	mov	r6, r0
 802e012:	bb02      	cbnz	r2, 802e056 <_dtoa_r+0x9ee>
 802e014:	4601      	mov	r1, r0
 802e016:	4648      	mov	r0, r9
 802e018:	f004 ffcc 	bl	8032fb4 <__mcmp>
 802e01c:	4602      	mov	r2, r0
 802e01e:	4631      	mov	r1, r6
 802e020:	4658      	mov	r0, fp
 802e022:	920e      	str	r2, [sp, #56]	@ 0x38
 802e024:	f004 fd75 	bl	8032b12 <_Bfree>
 802e028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e02a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802e02c:	9e07      	ldr	r6, [sp, #28]
 802e02e:	ea43 0102 	orr.w	r1, r3, r2
 802e032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e034:	4319      	orrs	r1, r3
 802e036:	d110      	bne.n	802e05a <_dtoa_r+0x9f2>
 802e038:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e03c:	d029      	beq.n	802e092 <_dtoa_r+0xa2a>
 802e03e:	9b08      	ldr	r3, [sp, #32]
 802e040:	2b00      	cmp	r3, #0
 802e042:	dd02      	ble.n	802e04a <_dtoa_r+0x9e2>
 802e044:	9b02      	ldr	r3, [sp, #8]
 802e046:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802e04a:	9b00      	ldr	r3, [sp, #0]
 802e04c:	f883 8000 	strb.w	r8, [r3]
 802e050:	e640      	b.n	802dcd4 <_dtoa_r+0x66c>
 802e052:	4628      	mov	r0, r5
 802e054:	e7bb      	b.n	802dfce <_dtoa_r+0x966>
 802e056:	2201      	movs	r2, #1
 802e058:	e7e1      	b.n	802e01e <_dtoa_r+0x9b6>
 802e05a:	9b08      	ldr	r3, [sp, #32]
 802e05c:	2b00      	cmp	r3, #0
 802e05e:	db04      	blt.n	802e06a <_dtoa_r+0xa02>
 802e060:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802e062:	430b      	orrs	r3, r1
 802e064:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802e066:	430b      	orrs	r3, r1
 802e068:	d120      	bne.n	802e0ac <_dtoa_r+0xa44>
 802e06a:	2a00      	cmp	r2, #0
 802e06c:	dded      	ble.n	802e04a <_dtoa_r+0x9e2>
 802e06e:	4649      	mov	r1, r9
 802e070:	2201      	movs	r2, #1
 802e072:	4658      	mov	r0, fp
 802e074:	f004 ff32 	bl	8032edc <__lshift>
 802e078:	4621      	mov	r1, r4
 802e07a:	4681      	mov	r9, r0
 802e07c:	f004 ff9a 	bl	8032fb4 <__mcmp>
 802e080:	2800      	cmp	r0, #0
 802e082:	dc03      	bgt.n	802e08c <_dtoa_r+0xa24>
 802e084:	d1e1      	bne.n	802e04a <_dtoa_r+0x9e2>
 802e086:	f018 0f01 	tst.w	r8, #1
 802e08a:	d0de      	beq.n	802e04a <_dtoa_r+0x9e2>
 802e08c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e090:	d1d8      	bne.n	802e044 <_dtoa_r+0x9dc>
 802e092:	9a00      	ldr	r2, [sp, #0]
 802e094:	2339      	movs	r3, #57	@ 0x39
 802e096:	7013      	strb	r3, [r2, #0]
 802e098:	4633      	mov	r3, r6
 802e09a:	461e      	mov	r6, r3
 802e09c:	3b01      	subs	r3, #1
 802e09e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802e0a2:	2a39      	cmp	r2, #57	@ 0x39
 802e0a4:	d052      	beq.n	802e14c <_dtoa_r+0xae4>
 802e0a6:	3201      	adds	r2, #1
 802e0a8:	701a      	strb	r2, [r3, #0]
 802e0aa:	e613      	b.n	802dcd4 <_dtoa_r+0x66c>
 802e0ac:	2a00      	cmp	r2, #0
 802e0ae:	dd07      	ble.n	802e0c0 <_dtoa_r+0xa58>
 802e0b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802e0b4:	d0ed      	beq.n	802e092 <_dtoa_r+0xa2a>
 802e0b6:	9a00      	ldr	r2, [sp, #0]
 802e0b8:	f108 0301 	add.w	r3, r8, #1
 802e0bc:	7013      	strb	r3, [r2, #0]
 802e0be:	e609      	b.n	802dcd4 <_dtoa_r+0x66c>
 802e0c0:	9b07      	ldr	r3, [sp, #28]
 802e0c2:	9a07      	ldr	r2, [sp, #28]
 802e0c4:	f803 8c01 	strb.w	r8, [r3, #-1]
 802e0c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e0ca:	4293      	cmp	r3, r2
 802e0cc:	d028      	beq.n	802e120 <_dtoa_r+0xab8>
 802e0ce:	4649      	mov	r1, r9
 802e0d0:	2300      	movs	r3, #0
 802e0d2:	220a      	movs	r2, #10
 802e0d4:	4658      	mov	r0, fp
 802e0d6:	f004 fd25 	bl	8032b24 <__multadd>
 802e0da:	42af      	cmp	r7, r5
 802e0dc:	4681      	mov	r9, r0
 802e0de:	f04f 0300 	mov.w	r3, #0
 802e0e2:	f04f 020a 	mov.w	r2, #10
 802e0e6:	4639      	mov	r1, r7
 802e0e8:	4658      	mov	r0, fp
 802e0ea:	d107      	bne.n	802e0fc <_dtoa_r+0xa94>
 802e0ec:	f004 fd1a 	bl	8032b24 <__multadd>
 802e0f0:	4607      	mov	r7, r0
 802e0f2:	4605      	mov	r5, r0
 802e0f4:	9b07      	ldr	r3, [sp, #28]
 802e0f6:	3301      	adds	r3, #1
 802e0f8:	9307      	str	r3, [sp, #28]
 802e0fa:	e774      	b.n	802dfe6 <_dtoa_r+0x97e>
 802e0fc:	f004 fd12 	bl	8032b24 <__multadd>
 802e100:	4629      	mov	r1, r5
 802e102:	4607      	mov	r7, r0
 802e104:	2300      	movs	r3, #0
 802e106:	220a      	movs	r2, #10
 802e108:	4658      	mov	r0, fp
 802e10a:	f004 fd0b 	bl	8032b24 <__multadd>
 802e10e:	4605      	mov	r5, r0
 802e110:	e7f0      	b.n	802e0f4 <_dtoa_r+0xa8c>
 802e112:	9b00      	ldr	r3, [sp, #0]
 802e114:	2b00      	cmp	r3, #0
 802e116:	bfcc      	ite	gt
 802e118:	461e      	movgt	r6, r3
 802e11a:	2601      	movle	r6, #1
 802e11c:	4456      	add	r6, sl
 802e11e:	2700      	movs	r7, #0
 802e120:	4649      	mov	r1, r9
 802e122:	2201      	movs	r2, #1
 802e124:	4658      	mov	r0, fp
 802e126:	f004 fed9 	bl	8032edc <__lshift>
 802e12a:	4621      	mov	r1, r4
 802e12c:	4681      	mov	r9, r0
 802e12e:	f004 ff41 	bl	8032fb4 <__mcmp>
 802e132:	2800      	cmp	r0, #0
 802e134:	dcb0      	bgt.n	802e098 <_dtoa_r+0xa30>
 802e136:	d102      	bne.n	802e13e <_dtoa_r+0xad6>
 802e138:	f018 0f01 	tst.w	r8, #1
 802e13c:	d1ac      	bne.n	802e098 <_dtoa_r+0xa30>
 802e13e:	4633      	mov	r3, r6
 802e140:	461e      	mov	r6, r3
 802e142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e146:	2a30      	cmp	r2, #48	@ 0x30
 802e148:	d0fa      	beq.n	802e140 <_dtoa_r+0xad8>
 802e14a:	e5c3      	b.n	802dcd4 <_dtoa_r+0x66c>
 802e14c:	459a      	cmp	sl, r3
 802e14e:	d1a4      	bne.n	802e09a <_dtoa_r+0xa32>
 802e150:	9b04      	ldr	r3, [sp, #16]
 802e152:	3301      	adds	r3, #1
 802e154:	9304      	str	r3, [sp, #16]
 802e156:	2331      	movs	r3, #49	@ 0x31
 802e158:	f88a 3000 	strb.w	r3, [sl]
 802e15c:	e5ba      	b.n	802dcd4 <_dtoa_r+0x66c>
 802e15e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e160:	f8df a058 	ldr.w	sl, [pc, #88]	@ 802e1bc <_dtoa_r+0xb54>
 802e164:	2b00      	cmp	r3, #0
 802e166:	f43f aab6 	beq.w	802d6d6 <_dtoa_r+0x6e>
 802e16a:	f10a 0308 	add.w	r3, sl, #8
 802e16e:	f7ff bab0 	b.w	802d6d2 <_dtoa_r+0x6a>
 802e172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e174:	2b01      	cmp	r3, #1
 802e176:	f77f ae3a 	ble.w	802ddee <_dtoa_r+0x786>
 802e17a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e17c:	930a      	str	r3, [sp, #40]	@ 0x28
 802e17e:	2001      	movs	r0, #1
 802e180:	e658      	b.n	802de34 <_dtoa_r+0x7cc>
 802e182:	9b00      	ldr	r3, [sp, #0]
 802e184:	2b00      	cmp	r3, #0
 802e186:	f77f aed9 	ble.w	802df3c <_dtoa_r+0x8d4>
 802e18a:	4656      	mov	r6, sl
 802e18c:	4621      	mov	r1, r4
 802e18e:	4648      	mov	r0, r9
 802e190:	f7ff f9df 	bl	802d552 <quorem>
 802e194:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802e198:	f806 8b01 	strb.w	r8, [r6], #1
 802e19c:	9b00      	ldr	r3, [sp, #0]
 802e19e:	eba6 020a 	sub.w	r2, r6, sl
 802e1a2:	4293      	cmp	r3, r2
 802e1a4:	ddb5      	ble.n	802e112 <_dtoa_r+0xaaa>
 802e1a6:	4649      	mov	r1, r9
 802e1a8:	2300      	movs	r3, #0
 802e1aa:	220a      	movs	r2, #10
 802e1ac:	4658      	mov	r0, fp
 802e1ae:	f004 fcb9 	bl	8032b24 <__multadd>
 802e1b2:	4681      	mov	r9, r0
 802e1b4:	e7ea      	b.n	802e18c <_dtoa_r+0xb24>
 802e1b6:	bf00      	nop
 802e1b8:	0803b1de 	.word	0x0803b1de
 802e1bc:	0803b1d1 	.word	0x0803b1d1

0802e1c0 <_malloc_trim_r>:
 802e1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e1c4:	4606      	mov	r6, r0
 802e1c6:	2008      	movs	r0, #8
 802e1c8:	4689      	mov	r9, r1
 802e1ca:	f006 fb53 	bl	8034874 <sysconf>
 802e1ce:	4f24      	ldr	r7, [pc, #144]	@ (802e260 <_malloc_trim_r+0xa0>)
 802e1d0:	4680      	mov	r8, r0
 802e1d2:	4630      	mov	r0, r6
 802e1d4:	f004 fc6c 	bl	8032ab0 <__malloc_lock>
 802e1d8:	68bb      	ldr	r3, [r7, #8]
 802e1da:	685d      	ldr	r5, [r3, #4]
 802e1dc:	f025 0503 	bic.w	r5, r5, #3
 802e1e0:	f1a5 0411 	sub.w	r4, r5, #17
 802e1e4:	eba4 0409 	sub.w	r4, r4, r9
 802e1e8:	4444      	add	r4, r8
 802e1ea:	fbb4 f4f8 	udiv	r4, r4, r8
 802e1ee:	3c01      	subs	r4, #1
 802e1f0:	fb08 f404 	mul.w	r4, r8, r4
 802e1f4:	45a0      	cmp	r8, r4
 802e1f6:	dd05      	ble.n	802e204 <_malloc_trim_r+0x44>
 802e1f8:	4630      	mov	r0, r6
 802e1fa:	f004 fc5f 	bl	8032abc <__malloc_unlock>
 802e1fe:	2000      	movs	r0, #0
 802e200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e204:	2100      	movs	r1, #0
 802e206:	4630      	mov	r0, r6
 802e208:	f006 fb24 	bl	8034854 <_sbrk_r>
 802e20c:	68bb      	ldr	r3, [r7, #8]
 802e20e:	442b      	add	r3, r5
 802e210:	4298      	cmp	r0, r3
 802e212:	d1f1      	bne.n	802e1f8 <_malloc_trim_r+0x38>
 802e214:	4261      	negs	r1, r4
 802e216:	4630      	mov	r0, r6
 802e218:	f006 fb1c 	bl	8034854 <_sbrk_r>
 802e21c:	3001      	adds	r0, #1
 802e21e:	d110      	bne.n	802e242 <_malloc_trim_r+0x82>
 802e220:	2100      	movs	r1, #0
 802e222:	4630      	mov	r0, r6
 802e224:	f006 fb16 	bl	8034854 <_sbrk_r>
 802e228:	68ba      	ldr	r2, [r7, #8]
 802e22a:	1a83      	subs	r3, r0, r2
 802e22c:	2b0f      	cmp	r3, #15
 802e22e:	dde3      	ble.n	802e1f8 <_malloc_trim_r+0x38>
 802e230:	490c      	ldr	r1, [pc, #48]	@ (802e264 <_malloc_trim_r+0xa4>)
 802e232:	6809      	ldr	r1, [r1, #0]
 802e234:	1a40      	subs	r0, r0, r1
 802e236:	490c      	ldr	r1, [pc, #48]	@ (802e268 <_malloc_trim_r+0xa8>)
 802e238:	f043 0301 	orr.w	r3, r3, #1
 802e23c:	6008      	str	r0, [r1, #0]
 802e23e:	6053      	str	r3, [r2, #4]
 802e240:	e7da      	b.n	802e1f8 <_malloc_trim_r+0x38>
 802e242:	68bb      	ldr	r3, [r7, #8]
 802e244:	4a08      	ldr	r2, [pc, #32]	@ (802e268 <_malloc_trim_r+0xa8>)
 802e246:	1b2d      	subs	r5, r5, r4
 802e248:	f045 0501 	orr.w	r5, r5, #1
 802e24c:	605d      	str	r5, [r3, #4]
 802e24e:	6813      	ldr	r3, [r2, #0]
 802e250:	4630      	mov	r0, r6
 802e252:	1b1b      	subs	r3, r3, r4
 802e254:	6013      	str	r3, [r2, #0]
 802e256:	f004 fc31 	bl	8032abc <__malloc_unlock>
 802e25a:	2001      	movs	r0, #1
 802e25c:	e7d0      	b.n	802e200 <_malloc_trim_r+0x40>
 802e25e:	bf00      	nop
 802e260:	2000040c 	.word	0x2000040c
 802e264:	20000404 	.word	0x20000404
 802e268:	200198f4 	.word	0x200198f4

0802e26c <_free_r>:
 802e26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e26e:	4604      	mov	r4, r0
 802e270:	460f      	mov	r7, r1
 802e272:	2900      	cmp	r1, #0
 802e274:	f000 80b1 	beq.w	802e3da <_free_r+0x16e>
 802e278:	f004 fc1a 	bl	8032ab0 <__malloc_lock>
 802e27c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 802e280:	4d56      	ldr	r5, [pc, #344]	@ (802e3dc <_free_r+0x170>)
 802e282:	f022 0001 	bic.w	r0, r2, #1
 802e286:	f1a7 0308 	sub.w	r3, r7, #8
 802e28a:	eb03 0c00 	add.w	ip, r3, r0
 802e28e:	68a9      	ldr	r1, [r5, #8]
 802e290:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802e294:	4561      	cmp	r1, ip
 802e296:	f026 0603 	bic.w	r6, r6, #3
 802e29a:	f002 0201 	and.w	r2, r2, #1
 802e29e:	d11b      	bne.n	802e2d8 <_free_r+0x6c>
 802e2a0:	4406      	add	r6, r0
 802e2a2:	b93a      	cbnz	r2, 802e2b4 <_free_r+0x48>
 802e2a4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 802e2a8:	1a9b      	subs	r3, r3, r2
 802e2aa:	4416      	add	r6, r2
 802e2ac:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802e2b0:	60ca      	str	r2, [r1, #12]
 802e2b2:	6091      	str	r1, [r2, #8]
 802e2b4:	f046 0201 	orr.w	r2, r6, #1
 802e2b8:	605a      	str	r2, [r3, #4]
 802e2ba:	60ab      	str	r3, [r5, #8]
 802e2bc:	4b48      	ldr	r3, [pc, #288]	@ (802e3e0 <_free_r+0x174>)
 802e2be:	681b      	ldr	r3, [r3, #0]
 802e2c0:	42b3      	cmp	r3, r6
 802e2c2:	d804      	bhi.n	802e2ce <_free_r+0x62>
 802e2c4:	4b47      	ldr	r3, [pc, #284]	@ (802e3e4 <_free_r+0x178>)
 802e2c6:	4620      	mov	r0, r4
 802e2c8:	6819      	ldr	r1, [r3, #0]
 802e2ca:	f7ff ff79 	bl	802e1c0 <_malloc_trim_r>
 802e2ce:	4620      	mov	r0, r4
 802e2d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802e2d4:	f004 bbf2 	b.w	8032abc <__malloc_unlock>
 802e2d8:	f8cc 6004 	str.w	r6, [ip, #4]
 802e2dc:	2a00      	cmp	r2, #0
 802e2de:	d138      	bne.n	802e352 <_free_r+0xe6>
 802e2e0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 802e2e4:	1a5b      	subs	r3, r3, r1
 802e2e6:	4408      	add	r0, r1
 802e2e8:	6899      	ldr	r1, [r3, #8]
 802e2ea:	f105 0708 	add.w	r7, r5, #8
 802e2ee:	42b9      	cmp	r1, r7
 802e2f0:	d031      	beq.n	802e356 <_free_r+0xea>
 802e2f2:	68df      	ldr	r7, [r3, #12]
 802e2f4:	60cf      	str	r7, [r1, #12]
 802e2f6:	60b9      	str	r1, [r7, #8]
 802e2f8:	eb0c 0106 	add.w	r1, ip, r6
 802e2fc:	6849      	ldr	r1, [r1, #4]
 802e2fe:	07c9      	lsls	r1, r1, #31
 802e300:	d40b      	bmi.n	802e31a <_free_r+0xae>
 802e302:	f8dc 1008 	ldr.w	r1, [ip, #8]
 802e306:	4430      	add	r0, r6
 802e308:	bb3a      	cbnz	r2, 802e35a <_free_r+0xee>
 802e30a:	4e37      	ldr	r6, [pc, #220]	@ (802e3e8 <_free_r+0x17c>)
 802e30c:	42b1      	cmp	r1, r6
 802e30e:	d124      	bne.n	802e35a <_free_r+0xee>
 802e310:	e9c5 3304 	strd	r3, r3, [r5, #16]
 802e314:	e9c3 1102 	strd	r1, r1, [r3, #8]
 802e318:	2201      	movs	r2, #1
 802e31a:	f040 0101 	orr.w	r1, r0, #1
 802e31e:	6059      	str	r1, [r3, #4]
 802e320:	5018      	str	r0, [r3, r0]
 802e322:	2a00      	cmp	r2, #0
 802e324:	d1d3      	bne.n	802e2ce <_free_r+0x62>
 802e326:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802e32a:	d21b      	bcs.n	802e364 <_free_r+0xf8>
 802e32c:	08c2      	lsrs	r2, r0, #3
 802e32e:	2101      	movs	r1, #1
 802e330:	0940      	lsrs	r0, r0, #5
 802e332:	4081      	lsls	r1, r0
 802e334:	6868      	ldr	r0, [r5, #4]
 802e336:	3201      	adds	r2, #1
 802e338:	4301      	orrs	r1, r0
 802e33a:	6069      	str	r1, [r5, #4]
 802e33c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 802e340:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 802e344:	3908      	subs	r1, #8
 802e346:	e9c3 0102 	strd	r0, r1, [r3, #8]
 802e34a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 802e34e:	60c3      	str	r3, [r0, #12]
 802e350:	e7bd      	b.n	802e2ce <_free_r+0x62>
 802e352:	2200      	movs	r2, #0
 802e354:	e7d0      	b.n	802e2f8 <_free_r+0x8c>
 802e356:	2201      	movs	r2, #1
 802e358:	e7ce      	b.n	802e2f8 <_free_r+0x8c>
 802e35a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 802e35e:	60ce      	str	r6, [r1, #12]
 802e360:	60b1      	str	r1, [r6, #8]
 802e362:	e7da      	b.n	802e31a <_free_r+0xae>
 802e364:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 802e368:	ea4f 2250 	mov.w	r2, r0, lsr #9
 802e36c:	d214      	bcs.n	802e398 <_free_r+0x12c>
 802e36e:	0982      	lsrs	r2, r0, #6
 802e370:	3238      	adds	r2, #56	@ 0x38
 802e372:	1c51      	adds	r1, r2, #1
 802e374:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 802e378:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 802e37c:	428e      	cmp	r6, r1
 802e37e:	d125      	bne.n	802e3cc <_free_r+0x160>
 802e380:	2001      	movs	r0, #1
 802e382:	1092      	asrs	r2, r2, #2
 802e384:	fa00 f202 	lsl.w	r2, r0, r2
 802e388:	6868      	ldr	r0, [r5, #4]
 802e38a:	4302      	orrs	r2, r0
 802e38c:	606a      	str	r2, [r5, #4]
 802e38e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 802e392:	60b3      	str	r3, [r6, #8]
 802e394:	60cb      	str	r3, [r1, #12]
 802e396:	e79a      	b.n	802e2ce <_free_r+0x62>
 802e398:	2a14      	cmp	r2, #20
 802e39a:	d801      	bhi.n	802e3a0 <_free_r+0x134>
 802e39c:	325b      	adds	r2, #91	@ 0x5b
 802e39e:	e7e8      	b.n	802e372 <_free_r+0x106>
 802e3a0:	2a54      	cmp	r2, #84	@ 0x54
 802e3a2:	d802      	bhi.n	802e3aa <_free_r+0x13e>
 802e3a4:	0b02      	lsrs	r2, r0, #12
 802e3a6:	326e      	adds	r2, #110	@ 0x6e
 802e3a8:	e7e3      	b.n	802e372 <_free_r+0x106>
 802e3aa:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802e3ae:	d802      	bhi.n	802e3b6 <_free_r+0x14a>
 802e3b0:	0bc2      	lsrs	r2, r0, #15
 802e3b2:	3277      	adds	r2, #119	@ 0x77
 802e3b4:	e7dd      	b.n	802e372 <_free_r+0x106>
 802e3b6:	f240 5154 	movw	r1, #1364	@ 0x554
 802e3ba:	428a      	cmp	r2, r1
 802e3bc:	bf9a      	itte	ls
 802e3be:	0c82      	lsrls	r2, r0, #18
 802e3c0:	327c      	addls	r2, #124	@ 0x7c
 802e3c2:	227e      	movhi	r2, #126	@ 0x7e
 802e3c4:	e7d5      	b.n	802e372 <_free_r+0x106>
 802e3c6:	6889      	ldr	r1, [r1, #8]
 802e3c8:	428e      	cmp	r6, r1
 802e3ca:	d004      	beq.n	802e3d6 <_free_r+0x16a>
 802e3cc:	684a      	ldr	r2, [r1, #4]
 802e3ce:	f022 0203 	bic.w	r2, r2, #3
 802e3d2:	4282      	cmp	r2, r0
 802e3d4:	d8f7      	bhi.n	802e3c6 <_free_r+0x15a>
 802e3d6:	68ce      	ldr	r6, [r1, #12]
 802e3d8:	e7d9      	b.n	802e38e <_free_r+0x122>
 802e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e3dc:	2000040c 	.word	0x2000040c
 802e3e0:	20000408 	.word	0x20000408
 802e3e4:	20019924 	.word	0x20019924
 802e3e8:	20000414 	.word	0x20000414

0802e3ec <_findenv_r>:
 802e3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e3f0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 802e460 <_findenv_r+0x74>
 802e3f4:	4606      	mov	r6, r0
 802e3f6:	4689      	mov	r9, r1
 802e3f8:	4617      	mov	r7, r2
 802e3fa:	f006 fc31 	bl	8034c60 <__env_lock>
 802e3fe:	f8da 4000 	ldr.w	r4, [sl]
 802e402:	b134      	cbz	r4, 802e412 <_findenv_r+0x26>
 802e404:	464b      	mov	r3, r9
 802e406:	4698      	mov	r8, r3
 802e408:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e40c:	b13a      	cbz	r2, 802e41e <_findenv_r+0x32>
 802e40e:	2a3d      	cmp	r2, #61	@ 0x3d
 802e410:	d1f9      	bne.n	802e406 <_findenv_r+0x1a>
 802e412:	4630      	mov	r0, r6
 802e414:	f006 fc2a 	bl	8034c6c <__env_unlock>
 802e418:	2000      	movs	r0, #0
 802e41a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e41e:	eba8 0809 	sub.w	r8, r8, r9
 802e422:	46a3      	mov	fp, r4
 802e424:	f854 0b04 	ldr.w	r0, [r4], #4
 802e428:	2800      	cmp	r0, #0
 802e42a:	d0f2      	beq.n	802e412 <_findenv_r+0x26>
 802e42c:	4642      	mov	r2, r8
 802e42e:	4649      	mov	r1, r9
 802e430:	f7fd fe13 	bl	802c05a <strncmp>
 802e434:	2800      	cmp	r0, #0
 802e436:	d1f4      	bne.n	802e422 <_findenv_r+0x36>
 802e438:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802e43c:	eb03 0508 	add.w	r5, r3, r8
 802e440:	f813 3008 	ldrb.w	r3, [r3, r8]
 802e444:	2b3d      	cmp	r3, #61	@ 0x3d
 802e446:	d1ec      	bne.n	802e422 <_findenv_r+0x36>
 802e448:	f8da 3000 	ldr.w	r3, [sl]
 802e44c:	ebab 0303 	sub.w	r3, fp, r3
 802e450:	109b      	asrs	r3, r3, #2
 802e452:	4630      	mov	r0, r6
 802e454:	603b      	str	r3, [r7, #0]
 802e456:	f006 fc09 	bl	8034c6c <__env_unlock>
 802e45a:	1c68      	adds	r0, r5, #1
 802e45c:	e7dd      	b.n	802e41a <_findenv_r+0x2e>
 802e45e:	bf00      	nop
 802e460:	20000014 	.word	0x20000014

0802e464 <_getenv_r>:
 802e464:	b507      	push	{r0, r1, r2, lr}
 802e466:	aa01      	add	r2, sp, #4
 802e468:	f7ff ffc0 	bl	802e3ec <_findenv_r>
 802e46c:	b003      	add	sp, #12
 802e46e:	f85d fb04 	ldr.w	pc, [sp], #4

0802e472 <labs>:
 802e472:	2800      	cmp	r0, #0
 802e474:	bfb8      	it	lt
 802e476:	4240      	neglt	r0, r0
 802e478:	4770      	bx	lr
	...

0802e47c <malloc>:
 802e47c:	4b02      	ldr	r3, [pc, #8]	@ (802e488 <malloc+0xc>)
 802e47e:	4601      	mov	r1, r0
 802e480:	6818      	ldr	r0, [r3, #0]
 802e482:	f000 b80b 	b.w	802e49c <_malloc_r>
 802e486:	bf00      	nop
 802e488:	200002d8 	.word	0x200002d8

0802e48c <free>:
 802e48c:	4b02      	ldr	r3, [pc, #8]	@ (802e498 <free+0xc>)
 802e48e:	4601      	mov	r1, r0
 802e490:	6818      	ldr	r0, [r3, #0]
 802e492:	f7ff beeb 	b.w	802e26c <_free_r>
 802e496:	bf00      	nop
 802e498:	200002d8 	.word	0x200002d8

0802e49c <_malloc_r>:
 802e49c:	f101 030b 	add.w	r3, r1, #11
 802e4a0:	2b16      	cmp	r3, #22
 802e4a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e4a6:	4605      	mov	r5, r0
 802e4a8:	d906      	bls.n	802e4b8 <_malloc_r+0x1c>
 802e4aa:	f033 0707 	bics.w	r7, r3, #7
 802e4ae:	d504      	bpl.n	802e4ba <_malloc_r+0x1e>
 802e4b0:	230c      	movs	r3, #12
 802e4b2:	602b      	str	r3, [r5, #0]
 802e4b4:	2400      	movs	r4, #0
 802e4b6:	e1a3      	b.n	802e800 <_malloc_r+0x364>
 802e4b8:	2710      	movs	r7, #16
 802e4ba:	42b9      	cmp	r1, r7
 802e4bc:	d8f8      	bhi.n	802e4b0 <_malloc_r+0x14>
 802e4be:	4628      	mov	r0, r5
 802e4c0:	f004 faf6 	bl	8032ab0 <__malloc_lock>
 802e4c4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 802e4c8:	4eaf      	ldr	r6, [pc, #700]	@ (802e788 <_malloc_r+0x2ec>)
 802e4ca:	d237      	bcs.n	802e53c <_malloc_r+0xa0>
 802e4cc:	f107 0208 	add.w	r2, r7, #8
 802e4d0:	4432      	add	r2, r6
 802e4d2:	f1a2 0108 	sub.w	r1, r2, #8
 802e4d6:	6854      	ldr	r4, [r2, #4]
 802e4d8:	428c      	cmp	r4, r1
 802e4da:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802e4de:	d102      	bne.n	802e4e6 <_malloc_r+0x4a>
 802e4e0:	68d4      	ldr	r4, [r2, #12]
 802e4e2:	42a2      	cmp	r2, r4
 802e4e4:	d010      	beq.n	802e508 <_malloc_r+0x6c>
 802e4e6:	6863      	ldr	r3, [r4, #4]
 802e4e8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802e4ec:	f023 0303 	bic.w	r3, r3, #3
 802e4f0:	60ca      	str	r2, [r1, #12]
 802e4f2:	4423      	add	r3, r4
 802e4f4:	6091      	str	r1, [r2, #8]
 802e4f6:	685a      	ldr	r2, [r3, #4]
 802e4f8:	f042 0201 	orr.w	r2, r2, #1
 802e4fc:	605a      	str	r2, [r3, #4]
 802e4fe:	4628      	mov	r0, r5
 802e500:	f004 fadc 	bl	8032abc <__malloc_unlock>
 802e504:	3408      	adds	r4, #8
 802e506:	e17b      	b.n	802e800 <_malloc_r+0x364>
 802e508:	3302      	adds	r3, #2
 802e50a:	6934      	ldr	r4, [r6, #16]
 802e50c:	499f      	ldr	r1, [pc, #636]	@ (802e78c <_malloc_r+0x2f0>)
 802e50e:	428c      	cmp	r4, r1
 802e510:	d077      	beq.n	802e602 <_malloc_r+0x166>
 802e512:	6862      	ldr	r2, [r4, #4]
 802e514:	f022 0c03 	bic.w	ip, r2, #3
 802e518:	ebac 0007 	sub.w	r0, ip, r7
 802e51c:	280f      	cmp	r0, #15
 802e51e:	dd48      	ble.n	802e5b2 <_malloc_r+0x116>
 802e520:	19e2      	adds	r2, r4, r7
 802e522:	f040 0301 	orr.w	r3, r0, #1
 802e526:	f047 0701 	orr.w	r7, r7, #1
 802e52a:	6067      	str	r7, [r4, #4]
 802e52c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802e530:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802e534:	6053      	str	r3, [r2, #4]
 802e536:	f844 000c 	str.w	r0, [r4, ip]
 802e53a:	e7e0      	b.n	802e4fe <_malloc_r+0x62>
 802e53c:	0a7b      	lsrs	r3, r7, #9
 802e53e:	d02a      	beq.n	802e596 <_malloc_r+0xfa>
 802e540:	2b04      	cmp	r3, #4
 802e542:	d812      	bhi.n	802e56a <_malloc_r+0xce>
 802e544:	09bb      	lsrs	r3, r7, #6
 802e546:	3338      	adds	r3, #56	@ 0x38
 802e548:	1c5a      	adds	r2, r3, #1
 802e54a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 802e54e:	f1a2 0c08 	sub.w	ip, r2, #8
 802e552:	6854      	ldr	r4, [r2, #4]
 802e554:	4564      	cmp	r4, ip
 802e556:	d006      	beq.n	802e566 <_malloc_r+0xca>
 802e558:	6862      	ldr	r2, [r4, #4]
 802e55a:	f022 0203 	bic.w	r2, r2, #3
 802e55e:	1bd0      	subs	r0, r2, r7
 802e560:	280f      	cmp	r0, #15
 802e562:	dd1c      	ble.n	802e59e <_malloc_r+0x102>
 802e564:	3b01      	subs	r3, #1
 802e566:	3301      	adds	r3, #1
 802e568:	e7cf      	b.n	802e50a <_malloc_r+0x6e>
 802e56a:	2b14      	cmp	r3, #20
 802e56c:	d801      	bhi.n	802e572 <_malloc_r+0xd6>
 802e56e:	335b      	adds	r3, #91	@ 0x5b
 802e570:	e7ea      	b.n	802e548 <_malloc_r+0xac>
 802e572:	2b54      	cmp	r3, #84	@ 0x54
 802e574:	d802      	bhi.n	802e57c <_malloc_r+0xe0>
 802e576:	0b3b      	lsrs	r3, r7, #12
 802e578:	336e      	adds	r3, #110	@ 0x6e
 802e57a:	e7e5      	b.n	802e548 <_malloc_r+0xac>
 802e57c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 802e580:	d802      	bhi.n	802e588 <_malloc_r+0xec>
 802e582:	0bfb      	lsrs	r3, r7, #15
 802e584:	3377      	adds	r3, #119	@ 0x77
 802e586:	e7df      	b.n	802e548 <_malloc_r+0xac>
 802e588:	f240 5254 	movw	r2, #1364	@ 0x554
 802e58c:	4293      	cmp	r3, r2
 802e58e:	d804      	bhi.n	802e59a <_malloc_r+0xfe>
 802e590:	0cbb      	lsrs	r3, r7, #18
 802e592:	337c      	adds	r3, #124	@ 0x7c
 802e594:	e7d8      	b.n	802e548 <_malloc_r+0xac>
 802e596:	233f      	movs	r3, #63	@ 0x3f
 802e598:	e7d6      	b.n	802e548 <_malloc_r+0xac>
 802e59a:	237e      	movs	r3, #126	@ 0x7e
 802e59c:	e7d4      	b.n	802e548 <_malloc_r+0xac>
 802e59e:	2800      	cmp	r0, #0
 802e5a0:	68e1      	ldr	r1, [r4, #12]
 802e5a2:	db04      	blt.n	802e5ae <_malloc_r+0x112>
 802e5a4:	68a3      	ldr	r3, [r4, #8]
 802e5a6:	60d9      	str	r1, [r3, #12]
 802e5a8:	608b      	str	r3, [r1, #8]
 802e5aa:	18a3      	adds	r3, r4, r2
 802e5ac:	e7a3      	b.n	802e4f6 <_malloc_r+0x5a>
 802e5ae:	460c      	mov	r4, r1
 802e5b0:	e7d0      	b.n	802e554 <_malloc_r+0xb8>
 802e5b2:	2800      	cmp	r0, #0
 802e5b4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 802e5b8:	db07      	blt.n	802e5ca <_malloc_r+0x12e>
 802e5ba:	44a4      	add	ip, r4
 802e5bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802e5c0:	f043 0301 	orr.w	r3, r3, #1
 802e5c4:	f8cc 3004 	str.w	r3, [ip, #4]
 802e5c8:	e799      	b.n	802e4fe <_malloc_r+0x62>
 802e5ca:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802e5ce:	6870      	ldr	r0, [r6, #4]
 802e5d0:	f080 8095 	bcs.w	802e6fe <_malloc_r+0x262>
 802e5d4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 802e5d8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802e5dc:	f04f 0c01 	mov.w	ip, #1
 802e5e0:	3201      	adds	r2, #1
 802e5e2:	fa0c fc0e 	lsl.w	ip, ip, lr
 802e5e6:	ea4c 0000 	orr.w	r0, ip, r0
 802e5ea:	6070      	str	r0, [r6, #4]
 802e5ec:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 802e5f0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 802e5f4:	3808      	subs	r0, #8
 802e5f6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802e5fa:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802e5fe:	f8cc 400c 	str.w	r4, [ip, #12]
 802e602:	1098      	asrs	r0, r3, #2
 802e604:	2201      	movs	r2, #1
 802e606:	4082      	lsls	r2, r0
 802e608:	6870      	ldr	r0, [r6, #4]
 802e60a:	4290      	cmp	r0, r2
 802e60c:	d326      	bcc.n	802e65c <_malloc_r+0x1c0>
 802e60e:	4210      	tst	r0, r2
 802e610:	d106      	bne.n	802e620 <_malloc_r+0x184>
 802e612:	f023 0303 	bic.w	r3, r3, #3
 802e616:	0052      	lsls	r2, r2, #1
 802e618:	4210      	tst	r0, r2
 802e61a:	f103 0304 	add.w	r3, r3, #4
 802e61e:	d0fa      	beq.n	802e616 <_malloc_r+0x17a>
 802e620:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 802e624:	46c1      	mov	r9, r8
 802e626:	469e      	mov	lr, r3
 802e628:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802e62c:	454c      	cmp	r4, r9
 802e62e:	f040 80b9 	bne.w	802e7a4 <_malloc_r+0x308>
 802e632:	f10e 0e01 	add.w	lr, lr, #1
 802e636:	f01e 0f03 	tst.w	lr, #3
 802e63a:	f109 0908 	add.w	r9, r9, #8
 802e63e:	d1f3      	bne.n	802e628 <_malloc_r+0x18c>
 802e640:	0798      	lsls	r0, r3, #30
 802e642:	f040 80e3 	bne.w	802e80c <_malloc_r+0x370>
 802e646:	6873      	ldr	r3, [r6, #4]
 802e648:	ea23 0302 	bic.w	r3, r3, r2
 802e64c:	6073      	str	r3, [r6, #4]
 802e64e:	6870      	ldr	r0, [r6, #4]
 802e650:	0052      	lsls	r2, r2, #1
 802e652:	4290      	cmp	r0, r2
 802e654:	d302      	bcc.n	802e65c <_malloc_r+0x1c0>
 802e656:	2a00      	cmp	r2, #0
 802e658:	f040 80e5 	bne.w	802e826 <_malloc_r+0x38a>
 802e65c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 802e660:	f8da 3004 	ldr.w	r3, [sl, #4]
 802e664:	f023 0903 	bic.w	r9, r3, #3
 802e668:	45b9      	cmp	r9, r7
 802e66a:	d304      	bcc.n	802e676 <_malloc_r+0x1da>
 802e66c:	eba9 0207 	sub.w	r2, r9, r7
 802e670:	2a0f      	cmp	r2, #15
 802e672:	f300 8141 	bgt.w	802e8f8 <_malloc_r+0x45c>
 802e676:	4b46      	ldr	r3, [pc, #280]	@ (802e790 <_malloc_r+0x2f4>)
 802e678:	6819      	ldr	r1, [r3, #0]
 802e67a:	3110      	adds	r1, #16
 802e67c:	4439      	add	r1, r7
 802e67e:	2008      	movs	r0, #8
 802e680:	9101      	str	r1, [sp, #4]
 802e682:	f006 f8f7 	bl	8034874 <sysconf>
 802e686:	4a43      	ldr	r2, [pc, #268]	@ (802e794 <_malloc_r+0x2f8>)
 802e688:	9901      	ldr	r1, [sp, #4]
 802e68a:	6813      	ldr	r3, [r2, #0]
 802e68c:	3301      	adds	r3, #1
 802e68e:	bf1f      	itttt	ne
 802e690:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 802e694:	1809      	addne	r1, r1, r0
 802e696:	4243      	negne	r3, r0
 802e698:	4019      	andne	r1, r3
 802e69a:	4680      	mov	r8, r0
 802e69c:	4628      	mov	r0, r5
 802e69e:	9101      	str	r1, [sp, #4]
 802e6a0:	f006 f8d8 	bl	8034854 <_sbrk_r>
 802e6a4:	1c42      	adds	r2, r0, #1
 802e6a6:	eb0a 0b09 	add.w	fp, sl, r9
 802e6aa:	4604      	mov	r4, r0
 802e6ac:	f000 80f7 	beq.w	802e89e <_malloc_r+0x402>
 802e6b0:	4583      	cmp	fp, r0
 802e6b2:	9901      	ldr	r1, [sp, #4]
 802e6b4:	4a37      	ldr	r2, [pc, #220]	@ (802e794 <_malloc_r+0x2f8>)
 802e6b6:	d902      	bls.n	802e6be <_malloc_r+0x222>
 802e6b8:	45b2      	cmp	sl, r6
 802e6ba:	f040 80f0 	bne.w	802e89e <_malloc_r+0x402>
 802e6be:	4b36      	ldr	r3, [pc, #216]	@ (802e798 <_malloc_r+0x2fc>)
 802e6c0:	6818      	ldr	r0, [r3, #0]
 802e6c2:	45a3      	cmp	fp, r4
 802e6c4:	eb00 0e01 	add.w	lr, r0, r1
 802e6c8:	f8c3 e000 	str.w	lr, [r3]
 802e6cc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 802e6d0:	f040 80ab 	bne.w	802e82a <_malloc_r+0x38e>
 802e6d4:	ea1b 0f0c 	tst.w	fp, ip
 802e6d8:	f040 80a7 	bne.w	802e82a <_malloc_r+0x38e>
 802e6dc:	68b2      	ldr	r2, [r6, #8]
 802e6de:	4449      	add	r1, r9
 802e6e0:	f041 0101 	orr.w	r1, r1, #1
 802e6e4:	6051      	str	r1, [r2, #4]
 802e6e6:	4a2d      	ldr	r2, [pc, #180]	@ (802e79c <_malloc_r+0x300>)
 802e6e8:	681b      	ldr	r3, [r3, #0]
 802e6ea:	6811      	ldr	r1, [r2, #0]
 802e6ec:	428b      	cmp	r3, r1
 802e6ee:	bf88      	it	hi
 802e6f0:	6013      	strhi	r3, [r2, #0]
 802e6f2:	4a2b      	ldr	r2, [pc, #172]	@ (802e7a0 <_malloc_r+0x304>)
 802e6f4:	6811      	ldr	r1, [r2, #0]
 802e6f6:	428b      	cmp	r3, r1
 802e6f8:	bf88      	it	hi
 802e6fa:	6013      	strhi	r3, [r2, #0]
 802e6fc:	e0cf      	b.n	802e89e <_malloc_r+0x402>
 802e6fe:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 802e702:	ea4f 225c 	mov.w	r2, ip, lsr #9
 802e706:	d218      	bcs.n	802e73a <_malloc_r+0x29e>
 802e708:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802e70c:	3238      	adds	r2, #56	@ 0x38
 802e70e:	f102 0e01 	add.w	lr, r2, #1
 802e712:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 802e716:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802e71a:	45f0      	cmp	r8, lr
 802e71c:	d12b      	bne.n	802e776 <_malloc_r+0x2da>
 802e71e:	1092      	asrs	r2, r2, #2
 802e720:	f04f 0c01 	mov.w	ip, #1
 802e724:	fa0c f202 	lsl.w	r2, ip, r2
 802e728:	4302      	orrs	r2, r0
 802e72a:	6072      	str	r2, [r6, #4]
 802e72c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 802e730:	f8c8 4008 	str.w	r4, [r8, #8]
 802e734:	f8ce 400c 	str.w	r4, [lr, #12]
 802e738:	e763      	b.n	802e602 <_malloc_r+0x166>
 802e73a:	2a14      	cmp	r2, #20
 802e73c:	d801      	bhi.n	802e742 <_malloc_r+0x2a6>
 802e73e:	325b      	adds	r2, #91	@ 0x5b
 802e740:	e7e5      	b.n	802e70e <_malloc_r+0x272>
 802e742:	2a54      	cmp	r2, #84	@ 0x54
 802e744:	d803      	bhi.n	802e74e <_malloc_r+0x2b2>
 802e746:	ea4f 321c 	mov.w	r2, ip, lsr #12
 802e74a:	326e      	adds	r2, #110	@ 0x6e
 802e74c:	e7df      	b.n	802e70e <_malloc_r+0x272>
 802e74e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802e752:	d803      	bhi.n	802e75c <_malloc_r+0x2c0>
 802e754:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 802e758:	3277      	adds	r2, #119	@ 0x77
 802e75a:	e7d8      	b.n	802e70e <_malloc_r+0x272>
 802e75c:	f240 5e54 	movw	lr, #1364	@ 0x554
 802e760:	4572      	cmp	r2, lr
 802e762:	bf9a      	itte	ls
 802e764:	ea4f 429c 	movls.w	r2, ip, lsr #18
 802e768:	327c      	addls	r2, #124	@ 0x7c
 802e76a:	227e      	movhi	r2, #126	@ 0x7e
 802e76c:	e7cf      	b.n	802e70e <_malloc_r+0x272>
 802e76e:	f8de e008 	ldr.w	lr, [lr, #8]
 802e772:	45f0      	cmp	r8, lr
 802e774:	d005      	beq.n	802e782 <_malloc_r+0x2e6>
 802e776:	f8de 2004 	ldr.w	r2, [lr, #4]
 802e77a:	f022 0203 	bic.w	r2, r2, #3
 802e77e:	4562      	cmp	r2, ip
 802e780:	d8f5      	bhi.n	802e76e <_malloc_r+0x2d2>
 802e782:	f8de 800c 	ldr.w	r8, [lr, #12]
 802e786:	e7d1      	b.n	802e72c <_malloc_r+0x290>
 802e788:	2000040c 	.word	0x2000040c
 802e78c:	20000414 	.word	0x20000414
 802e790:	20019924 	.word	0x20019924
 802e794:	20000404 	.word	0x20000404
 802e798:	200198f4 	.word	0x200198f4
 802e79c:	20019920 	.word	0x20019920
 802e7a0:	2001991c 	.word	0x2001991c
 802e7a4:	6860      	ldr	r0, [r4, #4]
 802e7a6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802e7aa:	f020 0003 	bic.w	r0, r0, #3
 802e7ae:	eba0 0a07 	sub.w	sl, r0, r7
 802e7b2:	f1ba 0f0f 	cmp.w	sl, #15
 802e7b6:	dd12      	ble.n	802e7de <_malloc_r+0x342>
 802e7b8:	68a3      	ldr	r3, [r4, #8]
 802e7ba:	19e2      	adds	r2, r4, r7
 802e7bc:	f047 0701 	orr.w	r7, r7, #1
 802e7c0:	6067      	str	r7, [r4, #4]
 802e7c2:	f8c3 c00c 	str.w	ip, [r3, #12]
 802e7c6:	f8cc 3008 	str.w	r3, [ip, #8]
 802e7ca:	f04a 0301 	orr.w	r3, sl, #1
 802e7ce:	e9c6 2204 	strd	r2, r2, [r6, #16]
 802e7d2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 802e7d6:	6053      	str	r3, [r2, #4]
 802e7d8:	f844 a000 	str.w	sl, [r4, r0]
 802e7dc:	e68f      	b.n	802e4fe <_malloc_r+0x62>
 802e7de:	f1ba 0f00 	cmp.w	sl, #0
 802e7e2:	db11      	blt.n	802e808 <_malloc_r+0x36c>
 802e7e4:	4420      	add	r0, r4
 802e7e6:	6843      	ldr	r3, [r0, #4]
 802e7e8:	f043 0301 	orr.w	r3, r3, #1
 802e7ec:	6043      	str	r3, [r0, #4]
 802e7ee:	f854 3f08 	ldr.w	r3, [r4, #8]!
 802e7f2:	4628      	mov	r0, r5
 802e7f4:	f8c3 c00c 	str.w	ip, [r3, #12]
 802e7f8:	f8cc 3008 	str.w	r3, [ip, #8]
 802e7fc:	f004 f95e 	bl	8032abc <__malloc_unlock>
 802e800:	4620      	mov	r0, r4
 802e802:	b003      	add	sp, #12
 802e804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e808:	4664      	mov	r4, ip
 802e80a:	e70f      	b.n	802e62c <_malloc_r+0x190>
 802e80c:	f858 0908 	ldr.w	r0, [r8], #-8
 802e810:	4540      	cmp	r0, r8
 802e812:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 802e816:	f43f af13 	beq.w	802e640 <_malloc_r+0x1a4>
 802e81a:	e718      	b.n	802e64e <_malloc_r+0x1b2>
 802e81c:	3304      	adds	r3, #4
 802e81e:	0052      	lsls	r2, r2, #1
 802e820:	4210      	tst	r0, r2
 802e822:	d0fb      	beq.n	802e81c <_malloc_r+0x380>
 802e824:	e6fc      	b.n	802e620 <_malloc_r+0x184>
 802e826:	4673      	mov	r3, lr
 802e828:	e7fa      	b.n	802e820 <_malloc_r+0x384>
 802e82a:	6810      	ldr	r0, [r2, #0]
 802e82c:	3001      	adds	r0, #1
 802e82e:	bf1b      	ittet	ne
 802e830:	eba4 0b0b 	subne.w	fp, r4, fp
 802e834:	eb0b 020e 	addne.w	r2, fp, lr
 802e838:	6014      	streq	r4, [r2, #0]
 802e83a:	601a      	strne	r2, [r3, #0]
 802e83c:	f014 0b07 	ands.w	fp, r4, #7
 802e840:	bf1a      	itte	ne
 802e842:	f1cb 0008 	rsbne	r0, fp, #8
 802e846:	1824      	addne	r4, r4, r0
 802e848:	4658      	moveq	r0, fp
 802e84a:	1862      	adds	r2, r4, r1
 802e84c:	ea02 010c 	and.w	r1, r2, ip
 802e850:	4480      	add	r8, r0
 802e852:	eba8 0801 	sub.w	r8, r8, r1
 802e856:	ea08 080c 	and.w	r8, r8, ip
 802e85a:	4641      	mov	r1, r8
 802e85c:	4628      	mov	r0, r5
 802e85e:	9201      	str	r2, [sp, #4]
 802e860:	f005 fff8 	bl	8034854 <_sbrk_r>
 802e864:	1c43      	adds	r3, r0, #1
 802e866:	9a01      	ldr	r2, [sp, #4]
 802e868:	4b28      	ldr	r3, [pc, #160]	@ (802e90c <_malloc_r+0x470>)
 802e86a:	d107      	bne.n	802e87c <_malloc_r+0x3e0>
 802e86c:	f1bb 0f00 	cmp.w	fp, #0
 802e870:	d023      	beq.n	802e8ba <_malloc_r+0x41e>
 802e872:	f1ab 0008 	sub.w	r0, fp, #8
 802e876:	4410      	add	r0, r2
 802e878:	f04f 0800 	mov.w	r8, #0
 802e87c:	681a      	ldr	r2, [r3, #0]
 802e87e:	60b4      	str	r4, [r6, #8]
 802e880:	1b00      	subs	r0, r0, r4
 802e882:	4440      	add	r0, r8
 802e884:	4442      	add	r2, r8
 802e886:	f040 0001 	orr.w	r0, r0, #1
 802e88a:	45b2      	cmp	sl, r6
 802e88c:	601a      	str	r2, [r3, #0]
 802e88e:	6060      	str	r0, [r4, #4]
 802e890:	f43f af29 	beq.w	802e6e6 <_malloc_r+0x24a>
 802e894:	f1b9 0f0f 	cmp.w	r9, #15
 802e898:	d812      	bhi.n	802e8c0 <_malloc_r+0x424>
 802e89a:	2301      	movs	r3, #1
 802e89c:	6063      	str	r3, [r4, #4]
 802e89e:	68b3      	ldr	r3, [r6, #8]
 802e8a0:	685b      	ldr	r3, [r3, #4]
 802e8a2:	f023 0303 	bic.w	r3, r3, #3
 802e8a6:	42bb      	cmp	r3, r7
 802e8a8:	eba3 0207 	sub.w	r2, r3, r7
 802e8ac:	d301      	bcc.n	802e8b2 <_malloc_r+0x416>
 802e8ae:	2a0f      	cmp	r2, #15
 802e8b0:	dc22      	bgt.n	802e8f8 <_malloc_r+0x45c>
 802e8b2:	4628      	mov	r0, r5
 802e8b4:	f004 f902 	bl	8032abc <__malloc_unlock>
 802e8b8:	e5fc      	b.n	802e4b4 <_malloc_r+0x18>
 802e8ba:	4610      	mov	r0, r2
 802e8bc:	46d8      	mov	r8, fp
 802e8be:	e7dd      	b.n	802e87c <_malloc_r+0x3e0>
 802e8c0:	f8da 2004 	ldr.w	r2, [sl, #4]
 802e8c4:	f1a9 090c 	sub.w	r9, r9, #12
 802e8c8:	f029 0907 	bic.w	r9, r9, #7
 802e8cc:	f002 0201 	and.w	r2, r2, #1
 802e8d0:	ea42 0209 	orr.w	r2, r2, r9
 802e8d4:	f8ca 2004 	str.w	r2, [sl, #4]
 802e8d8:	2105      	movs	r1, #5
 802e8da:	eb0a 0209 	add.w	r2, sl, r9
 802e8de:	f1b9 0f0f 	cmp.w	r9, #15
 802e8e2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 802e8e6:	f67f aefe 	bls.w	802e6e6 <_malloc_r+0x24a>
 802e8ea:	f10a 0108 	add.w	r1, sl, #8
 802e8ee:	4628      	mov	r0, r5
 802e8f0:	f7ff fcbc 	bl	802e26c <_free_r>
 802e8f4:	4b05      	ldr	r3, [pc, #20]	@ (802e90c <_malloc_r+0x470>)
 802e8f6:	e6f6      	b.n	802e6e6 <_malloc_r+0x24a>
 802e8f8:	68b4      	ldr	r4, [r6, #8]
 802e8fa:	f047 0301 	orr.w	r3, r7, #1
 802e8fe:	4427      	add	r7, r4
 802e900:	f042 0201 	orr.w	r2, r2, #1
 802e904:	6063      	str	r3, [r4, #4]
 802e906:	60b7      	str	r7, [r6, #8]
 802e908:	607a      	str	r2, [r7, #4]
 802e90a:	e5f8      	b.n	802e4fe <_malloc_r+0x62>
 802e90c:	200198f4 	.word	0x200198f4

0802e910 <__ascii_mbtowc>:
 802e910:	b082      	sub	sp, #8
 802e912:	b901      	cbnz	r1, 802e916 <__ascii_mbtowc+0x6>
 802e914:	a901      	add	r1, sp, #4
 802e916:	b142      	cbz	r2, 802e92a <__ascii_mbtowc+0x1a>
 802e918:	b14b      	cbz	r3, 802e92e <__ascii_mbtowc+0x1e>
 802e91a:	7813      	ldrb	r3, [r2, #0]
 802e91c:	600b      	str	r3, [r1, #0]
 802e91e:	7812      	ldrb	r2, [r2, #0]
 802e920:	1e10      	subs	r0, r2, #0
 802e922:	bf18      	it	ne
 802e924:	2001      	movne	r0, #1
 802e926:	b002      	add	sp, #8
 802e928:	4770      	bx	lr
 802e92a:	4610      	mov	r0, r2
 802e92c:	e7fb      	b.n	802e926 <__ascii_mbtowc+0x16>
 802e92e:	f06f 0001 	mvn.w	r0, #1
 802e932:	e7f8      	b.n	802e926 <__ascii_mbtowc+0x16>

0802e934 <siscanf>:
 802e934:	b40e      	push	{r1, r2, r3}
 802e936:	b530      	push	{r4, r5, lr}
 802e938:	b09c      	sub	sp, #112	@ 0x70
 802e93a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802e93c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802e940:	f854 5b04 	ldr.w	r5, [r4], #4
 802e944:	f8ad 2014 	strh.w	r2, [sp, #20]
 802e948:	9002      	str	r0, [sp, #8]
 802e94a:	9006      	str	r0, [sp, #24]
 802e94c:	f7e1 fca8 	bl	80102a0 <strlen>
 802e950:	4b0b      	ldr	r3, [pc, #44]	@ (802e980 <siscanf+0x4c>)
 802e952:	9003      	str	r0, [sp, #12]
 802e954:	9007      	str	r0, [sp, #28]
 802e956:	930a      	str	r3, [sp, #40]	@ 0x28
 802e958:	480a      	ldr	r0, [pc, #40]	@ (802e984 <siscanf+0x50>)
 802e95a:	9401      	str	r4, [sp, #4]
 802e95c:	2300      	movs	r3, #0
 802e95e:	930e      	str	r3, [sp, #56]	@ 0x38
 802e960:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e962:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802e966:	f8ad 3016 	strh.w	r3, [sp, #22]
 802e96a:	462a      	mov	r2, r5
 802e96c:	4623      	mov	r3, r4
 802e96e:	a902      	add	r1, sp, #8
 802e970:	6800      	ldr	r0, [r0, #0]
 802e972:	f000 fd99 	bl	802f4a8 <__ssvfiscanf_r>
 802e976:	b01c      	add	sp, #112	@ 0x70
 802e978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e97c:	b003      	add	sp, #12
 802e97e:	4770      	bx	lr
 802e980:	0802b923 	.word	0x0802b923
 802e984:	200002d8 	.word	0x200002d8

0802e988 <sniprintf>:
 802e988:	b40c      	push	{r2, r3}
 802e98a:	b530      	push	{r4, r5, lr}
 802e98c:	4b17      	ldr	r3, [pc, #92]	@ (802e9ec <sniprintf+0x64>)
 802e98e:	1e0c      	subs	r4, r1, #0
 802e990:	681d      	ldr	r5, [r3, #0]
 802e992:	b09d      	sub	sp, #116	@ 0x74
 802e994:	da08      	bge.n	802e9a8 <sniprintf+0x20>
 802e996:	238b      	movs	r3, #139	@ 0x8b
 802e998:	602b      	str	r3, [r5, #0]
 802e99a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e99e:	b01d      	add	sp, #116	@ 0x74
 802e9a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e9a4:	b002      	add	sp, #8
 802e9a6:	4770      	bx	lr
 802e9a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802e9ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 802e9b0:	bf14      	ite	ne
 802e9b2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802e9b6:	4623      	moveq	r3, r4
 802e9b8:	9304      	str	r3, [sp, #16]
 802e9ba:	9307      	str	r3, [sp, #28]
 802e9bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802e9c0:	9002      	str	r0, [sp, #8]
 802e9c2:	9006      	str	r0, [sp, #24]
 802e9c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 802e9c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802e9ca:	ab21      	add	r3, sp, #132	@ 0x84
 802e9cc:	a902      	add	r1, sp, #8
 802e9ce:	4628      	mov	r0, r5
 802e9d0:	9301      	str	r3, [sp, #4]
 802e9d2:	f000 f88b 	bl	802eaec <_svfiprintf_r>
 802e9d6:	1c43      	adds	r3, r0, #1
 802e9d8:	bfbc      	itt	lt
 802e9da:	238b      	movlt	r3, #139	@ 0x8b
 802e9dc:	602b      	strlt	r3, [r5, #0]
 802e9de:	2c00      	cmp	r4, #0
 802e9e0:	d0dd      	beq.n	802e99e <sniprintf+0x16>
 802e9e2:	9b02      	ldr	r3, [sp, #8]
 802e9e4:	2200      	movs	r2, #0
 802e9e6:	701a      	strb	r2, [r3, #0]
 802e9e8:	e7d9      	b.n	802e99e <sniprintf+0x16>
 802e9ea:	bf00      	nop
 802e9ec:	200002d8 	.word	0x200002d8

0802e9f0 <__ssprint_r>:
 802e9f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e9f4:	6893      	ldr	r3, [r2, #8]
 802e9f6:	f8d2 b000 	ldr.w	fp, [r2]
 802e9fa:	9001      	str	r0, [sp, #4]
 802e9fc:	460c      	mov	r4, r1
 802e9fe:	4617      	mov	r7, r2
 802ea00:	2b00      	cmp	r3, #0
 802ea02:	d157      	bne.n	802eab4 <__ssprint_r+0xc4>
 802ea04:	2000      	movs	r0, #0
 802ea06:	2300      	movs	r3, #0
 802ea08:	607b      	str	r3, [r7, #4]
 802ea0a:	b003      	add	sp, #12
 802ea0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ea10:	e9db a800 	ldrd	sl, r8, [fp]
 802ea14:	f10b 0b08 	add.w	fp, fp, #8
 802ea18:	68a6      	ldr	r6, [r4, #8]
 802ea1a:	6820      	ldr	r0, [r4, #0]
 802ea1c:	f1b8 0f00 	cmp.w	r8, #0
 802ea20:	d0f6      	beq.n	802ea10 <__ssprint_r+0x20>
 802ea22:	45b0      	cmp	r8, r6
 802ea24:	d32e      	bcc.n	802ea84 <__ssprint_r+0x94>
 802ea26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ea2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802ea2e:	d029      	beq.n	802ea84 <__ssprint_r+0x94>
 802ea30:	6921      	ldr	r1, [r4, #16]
 802ea32:	6965      	ldr	r5, [r4, #20]
 802ea34:	eba0 0901 	sub.w	r9, r0, r1
 802ea38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ea3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ea40:	f109 0001 	add.w	r0, r9, #1
 802ea44:	106d      	asrs	r5, r5, #1
 802ea46:	4440      	add	r0, r8
 802ea48:	4285      	cmp	r5, r0
 802ea4a:	bf38      	it	cc
 802ea4c:	4605      	movcc	r5, r0
 802ea4e:	0553      	lsls	r3, r2, #21
 802ea50:	d534      	bpl.n	802eabc <__ssprint_r+0xcc>
 802ea52:	9801      	ldr	r0, [sp, #4]
 802ea54:	4629      	mov	r1, r5
 802ea56:	f7ff fd21 	bl	802e49c <_malloc_r>
 802ea5a:	4606      	mov	r6, r0
 802ea5c:	2800      	cmp	r0, #0
 802ea5e:	d038      	beq.n	802ead2 <__ssprint_r+0xe2>
 802ea60:	464a      	mov	r2, r9
 802ea62:	6921      	ldr	r1, [r4, #16]
 802ea64:	f7fe fd00 	bl	802d468 <memcpy>
 802ea68:	89a2      	ldrh	r2, [r4, #12]
 802ea6a:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 802ea6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 802ea72:	81a2      	strh	r2, [r4, #12]
 802ea74:	6126      	str	r6, [r4, #16]
 802ea76:	6165      	str	r5, [r4, #20]
 802ea78:	444e      	add	r6, r9
 802ea7a:	eba5 0509 	sub.w	r5, r5, r9
 802ea7e:	6026      	str	r6, [r4, #0]
 802ea80:	60a5      	str	r5, [r4, #8]
 802ea82:	4646      	mov	r6, r8
 802ea84:	4546      	cmp	r6, r8
 802ea86:	bf28      	it	cs
 802ea88:	4646      	movcs	r6, r8
 802ea8a:	4632      	mov	r2, r6
 802ea8c:	4651      	mov	r1, sl
 802ea8e:	6820      	ldr	r0, [r4, #0]
 802ea90:	f7fd fa94 	bl	802bfbc <memmove>
 802ea94:	68a2      	ldr	r2, [r4, #8]
 802ea96:	1b92      	subs	r2, r2, r6
 802ea98:	60a2      	str	r2, [r4, #8]
 802ea9a:	6822      	ldr	r2, [r4, #0]
 802ea9c:	4432      	add	r2, r6
 802ea9e:	6022      	str	r2, [r4, #0]
 802eaa0:	68ba      	ldr	r2, [r7, #8]
 802eaa2:	eba2 0308 	sub.w	r3, r2, r8
 802eaa6:	44c2      	add	sl, r8
 802eaa8:	60bb      	str	r3, [r7, #8]
 802eaaa:	2b00      	cmp	r3, #0
 802eaac:	d0aa      	beq.n	802ea04 <__ssprint_r+0x14>
 802eaae:	f04f 0800 	mov.w	r8, #0
 802eab2:	e7b1      	b.n	802ea18 <__ssprint_r+0x28>
 802eab4:	f04f 0a00 	mov.w	sl, #0
 802eab8:	46d0      	mov	r8, sl
 802eaba:	e7ad      	b.n	802ea18 <__ssprint_r+0x28>
 802eabc:	9801      	ldr	r0, [sp, #4]
 802eabe:	462a      	mov	r2, r5
 802eac0:	f004 fcfc 	bl	80334bc <_realloc_r>
 802eac4:	4606      	mov	r6, r0
 802eac6:	2800      	cmp	r0, #0
 802eac8:	d1d4      	bne.n	802ea74 <__ssprint_r+0x84>
 802eaca:	6921      	ldr	r1, [r4, #16]
 802eacc:	9801      	ldr	r0, [sp, #4]
 802eace:	f7ff fbcd 	bl	802e26c <_free_r>
 802ead2:	9a01      	ldr	r2, [sp, #4]
 802ead4:	230c      	movs	r3, #12
 802ead6:	6013      	str	r3, [r2, #0]
 802ead8:	89a3      	ldrh	r3, [r4, #12]
 802eada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802eade:	81a3      	strh	r3, [r4, #12]
 802eae0:	2300      	movs	r3, #0
 802eae2:	60bb      	str	r3, [r7, #8]
 802eae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802eae8:	e78d      	b.n	802ea06 <__ssprint_r+0x16>
	...

0802eaec <_svfiprintf_r>:
 802eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eaf0:	461d      	mov	r5, r3
 802eaf2:	898b      	ldrh	r3, [r1, #12]
 802eaf4:	b0bb      	sub	sp, #236	@ 0xec
 802eaf6:	468b      	mov	fp, r1
 802eaf8:	0619      	lsls	r1, r3, #24
 802eafa:	9001      	str	r0, [sp, #4]
 802eafc:	9202      	str	r2, [sp, #8]
 802eafe:	d514      	bpl.n	802eb2a <_svfiprintf_r+0x3e>
 802eb00:	f8db 3010 	ldr.w	r3, [fp, #16]
 802eb04:	b98b      	cbnz	r3, 802eb2a <_svfiprintf_r+0x3e>
 802eb06:	2140      	movs	r1, #64	@ 0x40
 802eb08:	f7ff fcc8 	bl	802e49c <_malloc_r>
 802eb0c:	f8cb 0000 	str.w	r0, [fp]
 802eb10:	f8cb 0010 	str.w	r0, [fp, #16]
 802eb14:	b930      	cbnz	r0, 802eb24 <_svfiprintf_r+0x38>
 802eb16:	9a01      	ldr	r2, [sp, #4]
 802eb18:	230c      	movs	r3, #12
 802eb1a:	6013      	str	r3, [r2, #0]
 802eb1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802eb20:	9304      	str	r3, [sp, #16]
 802eb22:	e3df      	b.n	802f2e4 <_svfiprintf_r+0x7f8>
 802eb24:	2340      	movs	r3, #64	@ 0x40
 802eb26:	f8cb 3014 	str.w	r3, [fp, #20]
 802eb2a:	2300      	movs	r3, #0
 802eb2c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 802eb30:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802eb34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 802eb38:	ae11      	add	r6, sp, #68	@ 0x44
 802eb3a:	960e      	str	r6, [sp, #56]	@ 0x38
 802eb3c:	9304      	str	r3, [sp, #16]
 802eb3e:	9b02      	ldr	r3, [sp, #8]
 802eb40:	461c      	mov	r4, r3
 802eb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 802eb46:	b10a      	cbz	r2, 802eb4c <_svfiprintf_r+0x60>
 802eb48:	2a25      	cmp	r2, #37	@ 0x25
 802eb4a:	d1f9      	bne.n	802eb40 <_svfiprintf_r+0x54>
 802eb4c:	9a02      	ldr	r2, [sp, #8]
 802eb4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802eb50:	1aa7      	subs	r7, r4, r2
 802eb52:	d00c      	beq.n	802eb6e <_svfiprintf_r+0x82>
 802eb54:	443b      	add	r3, r7
 802eb56:	9310      	str	r3, [sp, #64]	@ 0x40
 802eb58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802eb5a:	3301      	adds	r3, #1
 802eb5c:	2b07      	cmp	r3, #7
 802eb5e:	e9c6 2700 	strd	r2, r7, [r6]
 802eb62:	930f      	str	r3, [sp, #60]	@ 0x3c
 802eb64:	dc76      	bgt.n	802ec54 <_svfiprintf_r+0x168>
 802eb66:	3608      	adds	r6, #8
 802eb68:	9b04      	ldr	r3, [sp, #16]
 802eb6a:	443b      	add	r3, r7
 802eb6c:	9304      	str	r3, [sp, #16]
 802eb6e:	7823      	ldrb	r3, [r4, #0]
 802eb70:	2b00      	cmp	r3, #0
 802eb72:	f000 83ce 	beq.w	802f312 <_svfiprintf_r+0x826>
 802eb76:	2300      	movs	r3, #0
 802eb78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802eb7c:	3401      	adds	r4, #1
 802eb7e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802eb82:	9200      	str	r2, [sp, #0]
 802eb84:	9303      	str	r3, [sp, #12]
 802eb86:	4699      	mov	r9, r3
 802eb88:	4622      	mov	r2, r4
 802eb8a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802eb8e:	9202      	str	r2, [sp, #8]
 802eb90:	f1a3 0220 	sub.w	r2, r3, #32
 802eb94:	2a5a      	cmp	r2, #90	@ 0x5a
 802eb96:	f200 8318 	bhi.w	802f1ca <_svfiprintf_r+0x6de>
 802eb9a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802eb9e:	009a      	.short	0x009a
 802eba0:	03160316 	.word	0x03160316
 802eba4:	031600a2 	.word	0x031600a2
 802eba8:	03160316 	.word	0x03160316
 802ebac:	03160082 	.word	0x03160082
 802ebb0:	00a50316 	.word	0x00a50316
 802ebb4:	031600af 	.word	0x031600af
 802ebb8:	00b100ac 	.word	0x00b100ac
 802ebbc:	00cc0316 	.word	0x00cc0316
 802ebc0:	00cf00cf 	.word	0x00cf00cf
 802ebc4:	00cf00cf 	.word	0x00cf00cf
 802ebc8:	00cf00cf 	.word	0x00cf00cf
 802ebcc:	00cf00cf 	.word	0x00cf00cf
 802ebd0:	031600cf 	.word	0x031600cf
 802ebd4:	03160316 	.word	0x03160316
 802ebd8:	03160316 	.word	0x03160316
 802ebdc:	03160316 	.word	0x03160316
 802ebe0:	03160316 	.word	0x03160316
 802ebe4:	010600f9 	.word	0x010600f9
 802ebe8:	03160316 	.word	0x03160316
 802ebec:	03160316 	.word	0x03160316
 802ebf0:	03160316 	.word	0x03160316
 802ebf4:	03160316 	.word	0x03160316
 802ebf8:	03160316 	.word	0x03160316
 802ebfc:	03160154 	.word	0x03160154
 802ec00:	03160316 	.word	0x03160316
 802ec04:	0316019b 	.word	0x0316019b
 802ec08:	0316027d 	.word	0x0316027d
 802ec0c:	029d0316 	.word	0x029d0316
 802ec10:	03160316 	.word	0x03160316
 802ec14:	03160316 	.word	0x03160316
 802ec18:	03160316 	.word	0x03160316
 802ec1c:	03160316 	.word	0x03160316
 802ec20:	03160316 	.word	0x03160316
 802ec24:	010800f9 	.word	0x010800f9
 802ec28:	03160316 	.word	0x03160316
 802ec2c:	00df0316 	.word	0x00df0316
 802ec30:	00f30108 	.word	0x00f30108
 802ec34:	00ec0316 	.word	0x00ec0316
 802ec38:	01340316 	.word	0x01340316
 802ec3c:	018a0156 	.word	0x018a0156
 802ec40:	031600f3 	.word	0x031600f3
 802ec44:	0098019b 	.word	0x0098019b
 802ec48:	0316027f 	.word	0x0316027f
 802ec4c:	00650316 	.word	0x00650316
 802ec50:	00980316 	.word	0x00980316
 802ec54:	9801      	ldr	r0, [sp, #4]
 802ec56:	aa0e      	add	r2, sp, #56	@ 0x38
 802ec58:	4659      	mov	r1, fp
 802ec5a:	f7ff fec9 	bl	802e9f0 <__ssprint_r>
 802ec5e:	2800      	cmp	r0, #0
 802ec60:	f040 833b 	bne.w	802f2da <_svfiprintf_r+0x7ee>
 802ec64:	ae11      	add	r6, sp, #68	@ 0x44
 802ec66:	e77f      	b.n	802eb68 <_svfiprintf_r+0x7c>
 802ec68:	4a99      	ldr	r2, [pc, #612]	@ (802eed0 <_svfiprintf_r+0x3e4>)
 802ec6a:	9205      	str	r2, [sp, #20]
 802ec6c:	f019 0220 	ands.w	r2, r9, #32
 802ec70:	f000 8234 	beq.w	802f0dc <_svfiprintf_r+0x5f0>
 802ec74:	3507      	adds	r5, #7
 802ec76:	f025 0507 	bic.w	r5, r5, #7
 802ec7a:	462f      	mov	r7, r5
 802ec7c:	686d      	ldr	r5, [r5, #4]
 802ec7e:	f857 4b08 	ldr.w	r4, [r7], #8
 802ec82:	f019 0f01 	tst.w	r9, #1
 802ec86:	d009      	beq.n	802ec9c <_svfiprintf_r+0x1b0>
 802ec88:	ea54 0205 	orrs.w	r2, r4, r5
 802ec8c:	bf1f      	itttt	ne
 802ec8e:	2230      	movne	r2, #48	@ 0x30
 802ec90:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 802ec94:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 802ec98:	f049 0902 	orrne.w	r9, r9, #2
 802ec9c:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802eca0:	e113      	b.n	802eeca <_svfiprintf_r+0x3de>
 802eca2:	9801      	ldr	r0, [sp, #4]
 802eca4:	f7fe fb32 	bl	802d30c <_localeconv_r>
 802eca8:	6843      	ldr	r3, [r0, #4]
 802ecaa:	9308      	str	r3, [sp, #32]
 802ecac:	4618      	mov	r0, r3
 802ecae:	f7e1 faf7 	bl	80102a0 <strlen>
 802ecb2:	9007      	str	r0, [sp, #28]
 802ecb4:	9801      	ldr	r0, [sp, #4]
 802ecb6:	f7fe fb29 	bl	802d30c <_localeconv_r>
 802ecba:	6883      	ldr	r3, [r0, #8]
 802ecbc:	9306      	str	r3, [sp, #24]
 802ecbe:	9b07      	ldr	r3, [sp, #28]
 802ecc0:	b12b      	cbz	r3, 802ecce <_svfiprintf_r+0x1e2>
 802ecc2:	9b06      	ldr	r3, [sp, #24]
 802ecc4:	b11b      	cbz	r3, 802ecce <_svfiprintf_r+0x1e2>
 802ecc6:	781b      	ldrb	r3, [r3, #0]
 802ecc8:	b10b      	cbz	r3, 802ecce <_svfiprintf_r+0x1e2>
 802ecca:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 802ecce:	9c02      	ldr	r4, [sp, #8]
 802ecd0:	e75a      	b.n	802eb88 <_svfiprintf_r+0x9c>
 802ecd2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802ecd6:	2b00      	cmp	r3, #0
 802ecd8:	d1f9      	bne.n	802ecce <_svfiprintf_r+0x1e2>
 802ecda:	2320      	movs	r3, #32
 802ecdc:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802ece0:	e7f5      	b.n	802ecce <_svfiprintf_r+0x1e2>
 802ece2:	f049 0901 	orr.w	r9, r9, #1
 802ece6:	e7f2      	b.n	802ecce <_svfiprintf_r+0x1e2>
 802ece8:	f855 3b04 	ldr.w	r3, [r5], #4
 802ecec:	9303      	str	r3, [sp, #12]
 802ecee:	2b00      	cmp	r3, #0
 802ecf0:	daed      	bge.n	802ecce <_svfiprintf_r+0x1e2>
 802ecf2:	425b      	negs	r3, r3
 802ecf4:	9303      	str	r3, [sp, #12]
 802ecf6:	f049 0904 	orr.w	r9, r9, #4
 802ecfa:	e7e8      	b.n	802ecce <_svfiprintf_r+0x1e2>
 802ecfc:	232b      	movs	r3, #43	@ 0x2b
 802ecfe:	e7ed      	b.n	802ecdc <_svfiprintf_r+0x1f0>
 802ed00:	9a02      	ldr	r2, [sp, #8]
 802ed02:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ed06:	2b2a      	cmp	r3, #42	@ 0x2a
 802ed08:	d111      	bne.n	802ed2e <_svfiprintf_r+0x242>
 802ed0a:	f855 3b04 	ldr.w	r3, [r5], #4
 802ed0e:	9202      	str	r2, [sp, #8]
 802ed10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802ed14:	9300      	str	r3, [sp, #0]
 802ed16:	e7da      	b.n	802ecce <_svfiprintf_r+0x1e2>
 802ed18:	9b00      	ldr	r3, [sp, #0]
 802ed1a:	fb00 1303 	mla	r3, r0, r3, r1
 802ed1e:	9300      	str	r3, [sp, #0]
 802ed20:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ed24:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802ed28:	2909      	cmp	r1, #9
 802ed2a:	d9f5      	bls.n	802ed18 <_svfiprintf_r+0x22c>
 802ed2c:	e72f      	b.n	802eb8e <_svfiprintf_r+0xa2>
 802ed2e:	2100      	movs	r1, #0
 802ed30:	9100      	str	r1, [sp, #0]
 802ed32:	200a      	movs	r0, #10
 802ed34:	e7f6      	b.n	802ed24 <_svfiprintf_r+0x238>
 802ed36:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 802ed3a:	e7c8      	b.n	802ecce <_svfiprintf_r+0x1e2>
 802ed3c:	2100      	movs	r1, #0
 802ed3e:	9a02      	ldr	r2, [sp, #8]
 802ed40:	9103      	str	r1, [sp, #12]
 802ed42:	200a      	movs	r0, #10
 802ed44:	9903      	ldr	r1, [sp, #12]
 802ed46:	3b30      	subs	r3, #48	@ 0x30
 802ed48:	fb00 3301 	mla	r3, r0, r1, r3
 802ed4c:	9303      	str	r3, [sp, #12]
 802ed4e:	f812 3b01 	ldrb.w	r3, [r2], #1
 802ed52:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802ed56:	2909      	cmp	r1, #9
 802ed58:	d9f4      	bls.n	802ed44 <_svfiprintf_r+0x258>
 802ed5a:	e718      	b.n	802eb8e <_svfiprintf_r+0xa2>
 802ed5c:	9b02      	ldr	r3, [sp, #8]
 802ed5e:	781b      	ldrb	r3, [r3, #0]
 802ed60:	2b68      	cmp	r3, #104	@ 0x68
 802ed62:	bf01      	itttt	eq
 802ed64:	9b02      	ldreq	r3, [sp, #8]
 802ed66:	3301      	addeq	r3, #1
 802ed68:	9302      	streq	r3, [sp, #8]
 802ed6a:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 802ed6e:	bf18      	it	ne
 802ed70:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 802ed74:	e7ab      	b.n	802ecce <_svfiprintf_r+0x1e2>
 802ed76:	9b02      	ldr	r3, [sp, #8]
 802ed78:	781b      	ldrb	r3, [r3, #0]
 802ed7a:	2b6c      	cmp	r3, #108	@ 0x6c
 802ed7c:	d105      	bne.n	802ed8a <_svfiprintf_r+0x29e>
 802ed7e:	9b02      	ldr	r3, [sp, #8]
 802ed80:	3301      	adds	r3, #1
 802ed82:	9302      	str	r3, [sp, #8]
 802ed84:	f049 0920 	orr.w	r9, r9, #32
 802ed88:	e7a1      	b.n	802ecce <_svfiprintf_r+0x1e2>
 802ed8a:	f049 0910 	orr.w	r9, r9, #16
 802ed8e:	e79e      	b.n	802ecce <_svfiprintf_r+0x1e2>
 802ed90:	462f      	mov	r7, r5
 802ed92:	2400      	movs	r4, #0
 802ed94:	f857 3b04 	ldr.w	r3, [r7], #4
 802ed98:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802ed9c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802eda0:	2301      	movs	r3, #1
 802eda2:	9300      	str	r3, [sp, #0]
 802eda4:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 802eda8:	e0aa      	b.n	802ef00 <_svfiprintf_r+0x414>
 802edaa:	f049 0910 	orr.w	r9, r9, #16
 802edae:	f019 0f20 	tst.w	r9, #32
 802edb2:	d011      	beq.n	802edd8 <_svfiprintf_r+0x2ec>
 802edb4:	3507      	adds	r5, #7
 802edb6:	f025 0507 	bic.w	r5, r5, #7
 802edba:	462f      	mov	r7, r5
 802edbc:	686d      	ldr	r5, [r5, #4]
 802edbe:	f857 4b08 	ldr.w	r4, [r7], #8
 802edc2:	2d00      	cmp	r5, #0
 802edc4:	da06      	bge.n	802edd4 <_svfiprintf_r+0x2e8>
 802edc6:	4264      	negs	r4, r4
 802edc8:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802edcc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 802edd0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802edd4:	2301      	movs	r3, #1
 802edd6:	e048      	b.n	802ee6a <_svfiprintf_r+0x37e>
 802edd8:	462f      	mov	r7, r5
 802edda:	f019 0f10 	tst.w	r9, #16
 802edde:	f857 5b04 	ldr.w	r5, [r7], #4
 802ede2:	d002      	beq.n	802edea <_svfiprintf_r+0x2fe>
 802ede4:	462c      	mov	r4, r5
 802ede6:	17ed      	asrs	r5, r5, #31
 802ede8:	e7eb      	b.n	802edc2 <_svfiprintf_r+0x2d6>
 802edea:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802edee:	d003      	beq.n	802edf8 <_svfiprintf_r+0x30c>
 802edf0:	b22c      	sxth	r4, r5
 802edf2:	f345 35c0 	sbfx	r5, r5, #15, #1
 802edf6:	e7e4      	b.n	802edc2 <_svfiprintf_r+0x2d6>
 802edf8:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802edfc:	d0f2      	beq.n	802ede4 <_svfiprintf_r+0x2f8>
 802edfe:	b26c      	sxtb	r4, r5
 802ee00:	f345 15c0 	sbfx	r5, r5, #7, #1
 802ee04:	e7dd      	b.n	802edc2 <_svfiprintf_r+0x2d6>
 802ee06:	f019 0f20 	tst.w	r9, #32
 802ee0a:	d007      	beq.n	802ee1c <_svfiprintf_r+0x330>
 802ee0c:	9a04      	ldr	r2, [sp, #16]
 802ee0e:	682b      	ldr	r3, [r5, #0]
 802ee10:	9904      	ldr	r1, [sp, #16]
 802ee12:	17d2      	asrs	r2, r2, #31
 802ee14:	e9c3 1200 	strd	r1, r2, [r3]
 802ee18:	3504      	adds	r5, #4
 802ee1a:	e690      	b.n	802eb3e <_svfiprintf_r+0x52>
 802ee1c:	f019 0f10 	tst.w	r9, #16
 802ee20:	d003      	beq.n	802ee2a <_svfiprintf_r+0x33e>
 802ee22:	682b      	ldr	r3, [r5, #0]
 802ee24:	9a04      	ldr	r2, [sp, #16]
 802ee26:	601a      	str	r2, [r3, #0]
 802ee28:	e7f6      	b.n	802ee18 <_svfiprintf_r+0x32c>
 802ee2a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 802ee2e:	d003      	beq.n	802ee38 <_svfiprintf_r+0x34c>
 802ee30:	682b      	ldr	r3, [r5, #0]
 802ee32:	9a04      	ldr	r2, [sp, #16]
 802ee34:	801a      	strh	r2, [r3, #0]
 802ee36:	e7ef      	b.n	802ee18 <_svfiprintf_r+0x32c>
 802ee38:	f419 7f00 	tst.w	r9, #512	@ 0x200
 802ee3c:	d0f1      	beq.n	802ee22 <_svfiprintf_r+0x336>
 802ee3e:	682b      	ldr	r3, [r5, #0]
 802ee40:	9a04      	ldr	r2, [sp, #16]
 802ee42:	701a      	strb	r2, [r3, #0]
 802ee44:	e7e8      	b.n	802ee18 <_svfiprintf_r+0x32c>
 802ee46:	f049 0910 	orr.w	r9, r9, #16
 802ee4a:	f019 0320 	ands.w	r3, r9, #32
 802ee4e:	d01e      	beq.n	802ee8e <_svfiprintf_r+0x3a2>
 802ee50:	3507      	adds	r5, #7
 802ee52:	f025 0507 	bic.w	r5, r5, #7
 802ee56:	462f      	mov	r7, r5
 802ee58:	686d      	ldr	r5, [r5, #4]
 802ee5a:	f857 4b08 	ldr.w	r4, [r7], #8
 802ee5e:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 802ee62:	2300      	movs	r3, #0
 802ee64:	2200      	movs	r2, #0
 802ee66:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 802ee6a:	9a00      	ldr	r2, [sp, #0]
 802ee6c:	3201      	adds	r2, #1
 802ee6e:	f000 8259 	beq.w	802f324 <_svfiprintf_r+0x838>
 802ee72:	ea54 0205 	orrs.w	r2, r4, r5
 802ee76:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 802ee7a:	f040 8258 	bne.w	802f32e <_svfiprintf_r+0x842>
 802ee7e:	9a00      	ldr	r2, [sp, #0]
 802ee80:	2a00      	cmp	r2, #0
 802ee82:	f000 8199 	beq.w	802f1b8 <_svfiprintf_r+0x6cc>
 802ee86:	2b01      	cmp	r3, #1
 802ee88:	f040 8254 	bne.w	802f334 <_svfiprintf_r+0x848>
 802ee8c:	e13d      	b.n	802f10a <_svfiprintf_r+0x61e>
 802ee8e:	462f      	mov	r7, r5
 802ee90:	f019 0510 	ands.w	r5, r9, #16
 802ee94:	f857 4b04 	ldr.w	r4, [r7], #4
 802ee98:	d001      	beq.n	802ee9e <_svfiprintf_r+0x3b2>
 802ee9a:	461d      	mov	r5, r3
 802ee9c:	e7df      	b.n	802ee5e <_svfiprintf_r+0x372>
 802ee9e:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802eea2:	d001      	beq.n	802eea8 <_svfiprintf_r+0x3bc>
 802eea4:	b2a4      	uxth	r4, r4
 802eea6:	e7da      	b.n	802ee5e <_svfiprintf_r+0x372>
 802eea8:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802eeac:	d0d7      	beq.n	802ee5e <_svfiprintf_r+0x372>
 802eeae:	b2e4      	uxtb	r4, r4
 802eeb0:	e7f3      	b.n	802ee9a <_svfiprintf_r+0x3ae>
 802eeb2:	462f      	mov	r7, r5
 802eeb4:	f647 0330 	movw	r3, #30768	@ 0x7830
 802eeb8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 802eebc:	f857 4b04 	ldr.w	r4, [r7], #4
 802eec0:	4b03      	ldr	r3, [pc, #12]	@ (802eed0 <_svfiprintf_r+0x3e4>)
 802eec2:	9305      	str	r3, [sp, #20]
 802eec4:	2500      	movs	r5, #0
 802eec6:	f049 0902 	orr.w	r9, r9, #2
 802eeca:	2302      	movs	r3, #2
 802eecc:	e7ca      	b.n	802ee64 <_svfiprintf_r+0x378>
 802eece:	bf00      	nop
 802eed0:	0803ad23 	.word	0x0803ad23
 802eed4:	9b00      	ldr	r3, [sp, #0]
 802eed6:	462f      	mov	r7, r5
 802eed8:	1c5a      	adds	r2, r3, #1
 802eeda:	f04f 0500 	mov.w	r5, #0
 802eede:	f857 8b04 	ldr.w	r8, [r7], #4
 802eee2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 802eee6:	f000 80d2 	beq.w	802f08e <_svfiprintf_r+0x5a2>
 802eeea:	461a      	mov	r2, r3
 802eeec:	4629      	mov	r1, r5
 802eeee:	4640      	mov	r0, r8
 802eef0:	f7e1 f986 	bl	8010200 <memchr>
 802eef4:	4604      	mov	r4, r0
 802eef6:	b118      	cbz	r0, 802ef00 <_svfiprintf_r+0x414>
 802eef8:	eba0 0308 	sub.w	r3, r0, r8
 802eefc:	9300      	str	r3, [sp, #0]
 802eefe:	462c      	mov	r4, r5
 802ef00:	9d00      	ldr	r5, [sp, #0]
 802ef02:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802ef06:	42a5      	cmp	r5, r4
 802ef08:	bfb8      	it	lt
 802ef0a:	4625      	movlt	r5, r4
 802ef0c:	b103      	cbz	r3, 802ef10 <_svfiprintf_r+0x424>
 802ef0e:	3501      	adds	r5, #1
 802ef10:	f019 0302 	ands.w	r3, r9, #2
 802ef14:	9309      	str	r3, [sp, #36]	@ 0x24
 802ef16:	bf18      	it	ne
 802ef18:	3502      	addne	r5, #2
 802ef1a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 802ef1e:	930a      	str	r3, [sp, #40]	@ 0x28
 802ef20:	d123      	bne.n	802ef6a <_svfiprintf_r+0x47e>
 802ef22:	9b03      	ldr	r3, [sp, #12]
 802ef24:	eba3 0a05 	sub.w	sl, r3, r5
 802ef28:	f1ba 0f00 	cmp.w	sl, #0
 802ef2c:	dd1d      	ble.n	802ef6a <_svfiprintf_r+0x47e>
 802ef2e:	4bac      	ldr	r3, [pc, #688]	@ (802f1e0 <_svfiprintf_r+0x6f4>)
 802ef30:	6033      	str	r3, [r6, #0]
 802ef32:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802ef36:	f1ba 0f10 	cmp.w	sl, #16
 802ef3a:	f102 0201 	add.w	r2, r2, #1
 802ef3e:	f106 0008 	add.w	r0, r6, #8
 802ef42:	f300 8153 	bgt.w	802f1ec <_svfiprintf_r+0x700>
 802ef46:	eb0c 010a 	add.w	r1, ip, sl
 802ef4a:	2a07      	cmp	r2, #7
 802ef4c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802ef50:	f8c6 a004 	str.w	sl, [r6, #4]
 802ef54:	f340 815e 	ble.w	802f214 <_svfiprintf_r+0x728>
 802ef58:	9801      	ldr	r0, [sp, #4]
 802ef5a:	aa0e      	add	r2, sp, #56	@ 0x38
 802ef5c:	4659      	mov	r1, fp
 802ef5e:	f7ff fd47 	bl	802e9f0 <__ssprint_r>
 802ef62:	2800      	cmp	r0, #0
 802ef64:	f040 81b9 	bne.w	802f2da <_svfiprintf_r+0x7ee>
 802ef68:	ae11      	add	r6, sp, #68	@ 0x44
 802ef6a:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 802ef6e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ef72:	b161      	cbz	r1, 802ef8e <_svfiprintf_r+0x4a2>
 802ef74:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802ef78:	3301      	adds	r3, #1
 802ef7a:	6031      	str	r1, [r6, #0]
 802ef7c:	2101      	movs	r1, #1
 802ef7e:	440a      	add	r2, r1
 802ef80:	2b07      	cmp	r3, #7
 802ef82:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802ef86:	6071      	str	r1, [r6, #4]
 802ef88:	f300 8146 	bgt.w	802f218 <_svfiprintf_r+0x72c>
 802ef8c:	3608      	adds	r6, #8
 802ef8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ef90:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802ef94:	b159      	cbz	r1, 802efae <_svfiprintf_r+0x4c2>
 802ef96:	a90d      	add	r1, sp, #52	@ 0x34
 802ef98:	3301      	adds	r3, #1
 802ef9a:	6031      	str	r1, [r6, #0]
 802ef9c:	2102      	movs	r1, #2
 802ef9e:	440a      	add	r2, r1
 802efa0:	2b07      	cmp	r3, #7
 802efa2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802efa6:	6071      	str	r1, [r6, #4]
 802efa8:	f300 813f 	bgt.w	802f22a <_svfiprintf_r+0x73e>
 802efac:	3608      	adds	r6, #8
 802efae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802efb0:	2b80      	cmp	r3, #128	@ 0x80
 802efb2:	d123      	bne.n	802effc <_svfiprintf_r+0x510>
 802efb4:	9b03      	ldr	r3, [sp, #12]
 802efb6:	eba3 0a05 	sub.w	sl, r3, r5
 802efba:	f1ba 0f00 	cmp.w	sl, #0
 802efbe:	dd1d      	ble.n	802effc <_svfiprintf_r+0x510>
 802efc0:	4b88      	ldr	r3, [pc, #544]	@ (802f1e4 <_svfiprintf_r+0x6f8>)
 802efc2:	6033      	str	r3, [r6, #0]
 802efc4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802efc8:	f1ba 0f10 	cmp.w	sl, #16
 802efcc:	f102 0201 	add.w	r2, r2, #1
 802efd0:	f106 0008 	add.w	r0, r6, #8
 802efd4:	f300 8132 	bgt.w	802f23c <_svfiprintf_r+0x750>
 802efd8:	eb0c 010a 	add.w	r1, ip, sl
 802efdc:	2a07      	cmp	r2, #7
 802efde:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802efe2:	f8c6 a004 	str.w	sl, [r6, #4]
 802efe6:	f340 813d 	ble.w	802f264 <_svfiprintf_r+0x778>
 802efea:	9801      	ldr	r0, [sp, #4]
 802efec:	aa0e      	add	r2, sp, #56	@ 0x38
 802efee:	4659      	mov	r1, fp
 802eff0:	f7ff fcfe 	bl	802e9f0 <__ssprint_r>
 802eff4:	2800      	cmp	r0, #0
 802eff6:	f040 8170 	bne.w	802f2da <_svfiprintf_r+0x7ee>
 802effa:	ae11      	add	r6, sp, #68	@ 0x44
 802effc:	9b00      	ldr	r3, [sp, #0]
 802effe:	1ae4      	subs	r4, r4, r3
 802f000:	2c00      	cmp	r4, #0
 802f002:	dd1a      	ble.n	802f03a <_svfiprintf_r+0x54e>
 802f004:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 802f008:	4876      	ldr	r0, [pc, #472]	@ (802f1e4 <_svfiprintf_r+0x6f8>)
 802f00a:	6030      	str	r0, [r6, #0]
 802f00c:	2c10      	cmp	r4, #16
 802f00e:	f103 0301 	add.w	r3, r3, #1
 802f012:	f106 0108 	add.w	r1, r6, #8
 802f016:	f300 8127 	bgt.w	802f268 <_svfiprintf_r+0x77c>
 802f01a:	6074      	str	r4, [r6, #4]
 802f01c:	2b07      	cmp	r3, #7
 802f01e:	4414      	add	r4, r2
 802f020:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802f024:	f340 8131 	ble.w	802f28a <_svfiprintf_r+0x79e>
 802f028:	9801      	ldr	r0, [sp, #4]
 802f02a:	aa0e      	add	r2, sp, #56	@ 0x38
 802f02c:	4659      	mov	r1, fp
 802f02e:	f7ff fcdf 	bl	802e9f0 <__ssprint_r>
 802f032:	2800      	cmp	r0, #0
 802f034:	f040 8151 	bne.w	802f2da <_svfiprintf_r+0x7ee>
 802f038:	ae11      	add	r6, sp, #68	@ 0x44
 802f03a:	9b00      	ldr	r3, [sp, #0]
 802f03c:	9a00      	ldr	r2, [sp, #0]
 802f03e:	6073      	str	r3, [r6, #4]
 802f040:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f042:	f8c6 8000 	str.w	r8, [r6]
 802f046:	4413      	add	r3, r2
 802f048:	9310      	str	r3, [sp, #64]	@ 0x40
 802f04a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802f04c:	3301      	adds	r3, #1
 802f04e:	2b07      	cmp	r3, #7
 802f050:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f052:	f300 811c 	bgt.w	802f28e <_svfiprintf_r+0x7a2>
 802f056:	f106 0308 	add.w	r3, r6, #8
 802f05a:	f019 0f04 	tst.w	r9, #4
 802f05e:	f040 811e 	bne.w	802f29e <_svfiprintf_r+0x7b2>
 802f062:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 802f066:	42aa      	cmp	r2, r5
 802f068:	bfac      	ite	ge
 802f06a:	189b      	addge	r3, r3, r2
 802f06c:	195b      	addlt	r3, r3, r5
 802f06e:	9304      	str	r3, [sp, #16]
 802f070:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f072:	b13b      	cbz	r3, 802f084 <_svfiprintf_r+0x598>
 802f074:	9801      	ldr	r0, [sp, #4]
 802f076:	aa0e      	add	r2, sp, #56	@ 0x38
 802f078:	4659      	mov	r1, fp
 802f07a:	f7ff fcb9 	bl	802e9f0 <__ssprint_r>
 802f07e:	2800      	cmp	r0, #0
 802f080:	f040 812b 	bne.w	802f2da <_svfiprintf_r+0x7ee>
 802f084:	2300      	movs	r3, #0
 802f086:	930f      	str	r3, [sp, #60]	@ 0x3c
 802f088:	463d      	mov	r5, r7
 802f08a:	ae11      	add	r6, sp, #68	@ 0x44
 802f08c:	e557      	b.n	802eb3e <_svfiprintf_r+0x52>
 802f08e:	4640      	mov	r0, r8
 802f090:	f7e1 f906 	bl	80102a0 <strlen>
 802f094:	9000      	str	r0, [sp, #0]
 802f096:	e732      	b.n	802eefe <_svfiprintf_r+0x412>
 802f098:	f049 0910 	orr.w	r9, r9, #16
 802f09c:	f019 0320 	ands.w	r3, r9, #32
 802f0a0:	d008      	beq.n	802f0b4 <_svfiprintf_r+0x5c8>
 802f0a2:	3507      	adds	r5, #7
 802f0a4:	f025 0507 	bic.w	r5, r5, #7
 802f0a8:	462f      	mov	r7, r5
 802f0aa:	686d      	ldr	r5, [r5, #4]
 802f0ac:	f857 4b08 	ldr.w	r4, [r7], #8
 802f0b0:	2301      	movs	r3, #1
 802f0b2:	e6d7      	b.n	802ee64 <_svfiprintf_r+0x378>
 802f0b4:	462f      	mov	r7, r5
 802f0b6:	f019 0510 	ands.w	r5, r9, #16
 802f0ba:	f857 4b04 	ldr.w	r4, [r7], #4
 802f0be:	d001      	beq.n	802f0c4 <_svfiprintf_r+0x5d8>
 802f0c0:	461d      	mov	r5, r3
 802f0c2:	e7f5      	b.n	802f0b0 <_svfiprintf_r+0x5c4>
 802f0c4:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 802f0c8:	d001      	beq.n	802f0ce <_svfiprintf_r+0x5e2>
 802f0ca:	b2a4      	uxth	r4, r4
 802f0cc:	e7f0      	b.n	802f0b0 <_svfiprintf_r+0x5c4>
 802f0ce:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f0d2:	d0ed      	beq.n	802f0b0 <_svfiprintf_r+0x5c4>
 802f0d4:	b2e4      	uxtb	r4, r4
 802f0d6:	e7f3      	b.n	802f0c0 <_svfiprintf_r+0x5d4>
 802f0d8:	4a43      	ldr	r2, [pc, #268]	@ (802f1e8 <_svfiprintf_r+0x6fc>)
 802f0da:	e5c6      	b.n	802ec6a <_svfiprintf_r+0x17e>
 802f0dc:	462f      	mov	r7, r5
 802f0de:	f019 0510 	ands.w	r5, r9, #16
 802f0e2:	f857 4b04 	ldr.w	r4, [r7], #4
 802f0e6:	d001      	beq.n	802f0ec <_svfiprintf_r+0x600>
 802f0e8:	4615      	mov	r5, r2
 802f0ea:	e5ca      	b.n	802ec82 <_svfiprintf_r+0x196>
 802f0ec:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 802f0f0:	d001      	beq.n	802f0f6 <_svfiprintf_r+0x60a>
 802f0f2:	b2a4      	uxth	r4, r4
 802f0f4:	e5c5      	b.n	802ec82 <_svfiprintf_r+0x196>
 802f0f6:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 802f0fa:	f43f adc2 	beq.w	802ec82 <_svfiprintf_r+0x196>
 802f0fe:	b2e4      	uxtb	r4, r4
 802f100:	e7f2      	b.n	802f0e8 <_svfiprintf_r+0x5fc>
 802f102:	2c0a      	cmp	r4, #10
 802f104:	f175 0300 	sbcs.w	r3, r5, #0
 802f108:	d206      	bcs.n	802f118 <_svfiprintf_r+0x62c>
 802f10a:	3430      	adds	r4, #48	@ 0x30
 802f10c:	b2e4      	uxtb	r4, r4
 802f10e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802f112:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 802f116:	e129      	b.n	802f36c <_svfiprintf_r+0x880>
 802f118:	ab3a      	add	r3, sp, #232	@ 0xe8
 802f11a:	9309      	str	r3, [sp, #36]	@ 0x24
 802f11c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 802f120:	f04f 0900 	mov.w	r9, #0
 802f124:	930a      	str	r3, [sp, #40]	@ 0x28
 802f126:	220a      	movs	r2, #10
 802f128:	2300      	movs	r3, #0
 802f12a:	4620      	mov	r0, r4
 802f12c:	4629      	mov	r1, r5
 802f12e:	f7e1 fe13 	bl	8010d58 <__aeabi_uldivmod>
 802f132:	460b      	mov	r3, r1
 802f134:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f136:	900b      	str	r0, [sp, #44]	@ 0x2c
 802f138:	3230      	adds	r2, #48	@ 0x30
 802f13a:	f801 2c01 	strb.w	r2, [r1, #-1]
 802f13e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802f140:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 802f144:	f109 0901 	add.w	r9, r9, #1
 802f148:	b1e2      	cbz	r2, 802f184 <_svfiprintf_r+0x698>
 802f14a:	9a06      	ldr	r2, [sp, #24]
 802f14c:	7812      	ldrb	r2, [r2, #0]
 802f14e:	454a      	cmp	r2, r9
 802f150:	d118      	bne.n	802f184 <_svfiprintf_r+0x698>
 802f152:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802f156:	d015      	beq.n	802f184 <_svfiprintf_r+0x698>
 802f158:	2c0a      	cmp	r4, #10
 802f15a:	f175 0200 	sbcs.w	r2, r5, #0
 802f15e:	d311      	bcc.n	802f184 <_svfiprintf_r+0x698>
 802f160:	9309      	str	r3, [sp, #36]	@ 0x24
 802f162:	9b07      	ldr	r3, [sp, #28]
 802f164:	9908      	ldr	r1, [sp, #32]
 802f166:	eba8 0803 	sub.w	r8, r8, r3
 802f16a:	461a      	mov	r2, r3
 802f16c:	4640      	mov	r0, r8
 802f16e:	f7fc ff86 	bl	802c07e <strncpy>
 802f172:	9b06      	ldr	r3, [sp, #24]
 802f174:	785a      	ldrb	r2, [r3, #1]
 802f176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f178:	b172      	cbz	r2, 802f198 <_svfiprintf_r+0x6ac>
 802f17a:	9a06      	ldr	r2, [sp, #24]
 802f17c:	3201      	adds	r2, #1
 802f17e:	9206      	str	r2, [sp, #24]
 802f180:	f04f 0900 	mov.w	r9, #0
 802f184:	2c0a      	cmp	r4, #10
 802f186:	f175 0500 	sbcs.w	r5, r5, #0
 802f18a:	f0c0 80ef 	bcc.w	802f36c <_svfiprintf_r+0x880>
 802f18e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802f190:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802f194:	461d      	mov	r5, r3
 802f196:	e7c6      	b.n	802f126 <_svfiprintf_r+0x63a>
 802f198:	4691      	mov	r9, r2
 802f19a:	e7f3      	b.n	802f184 <_svfiprintf_r+0x698>
 802f19c:	f004 030f 	and.w	r3, r4, #15
 802f1a0:	9a05      	ldr	r2, [sp, #20]
 802f1a2:	0924      	lsrs	r4, r4, #4
 802f1a4:	5cd3      	ldrb	r3, [r2, r3]
 802f1a6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802f1aa:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 802f1ae:	092d      	lsrs	r5, r5, #4
 802f1b0:	ea54 0305 	orrs.w	r3, r4, r5
 802f1b4:	d1f2      	bne.n	802f19c <_svfiprintf_r+0x6b0>
 802f1b6:	e0d9      	b.n	802f36c <_svfiprintf_r+0x880>
 802f1b8:	b923      	cbnz	r3, 802f1c4 <_svfiprintf_r+0x6d8>
 802f1ba:	f019 0f01 	tst.w	r9, #1
 802f1be:	d001      	beq.n	802f1c4 <_svfiprintf_r+0x6d8>
 802f1c0:	2430      	movs	r4, #48	@ 0x30
 802f1c2:	e7a4      	b.n	802f10e <_svfiprintf_r+0x622>
 802f1c4:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802f1c8:	e0d0      	b.n	802f36c <_svfiprintf_r+0x880>
 802f1ca:	2b00      	cmp	r3, #0
 802f1cc:	f000 80a1 	beq.w	802f312 <_svfiprintf_r+0x826>
 802f1d0:	2400      	movs	r4, #0
 802f1d2:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 802f1d6:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 802f1da:	462f      	mov	r7, r5
 802f1dc:	e5e0      	b.n	802eda0 <_svfiprintf_r+0x2b4>
 802f1de:	bf00      	nop
 802f1e0:	0803b257 	.word	0x0803b257
 802f1e4:	0803b247 	.word	0x0803b247
 802f1e8:	0803ad34 	.word	0x0803ad34
 802f1ec:	2110      	movs	r1, #16
 802f1ee:	6071      	str	r1, [r6, #4]
 802f1f0:	2a07      	cmp	r2, #7
 802f1f2:	4461      	add	r1, ip
 802f1f4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f1f8:	dd08      	ble.n	802f20c <_svfiprintf_r+0x720>
 802f1fa:	9801      	ldr	r0, [sp, #4]
 802f1fc:	aa0e      	add	r2, sp, #56	@ 0x38
 802f1fe:	4659      	mov	r1, fp
 802f200:	f7ff fbf6 	bl	802e9f0 <__ssprint_r>
 802f204:	2800      	cmp	r0, #0
 802f206:	d168      	bne.n	802f2da <_svfiprintf_r+0x7ee>
 802f208:	4b5c      	ldr	r3, [pc, #368]	@ (802f37c <_svfiprintf_r+0x890>)
 802f20a:	a811      	add	r0, sp, #68	@ 0x44
 802f20c:	f1aa 0a10 	sub.w	sl, sl, #16
 802f210:	4606      	mov	r6, r0
 802f212:	e68d      	b.n	802ef30 <_svfiprintf_r+0x444>
 802f214:	4606      	mov	r6, r0
 802f216:	e6a8      	b.n	802ef6a <_svfiprintf_r+0x47e>
 802f218:	9801      	ldr	r0, [sp, #4]
 802f21a:	aa0e      	add	r2, sp, #56	@ 0x38
 802f21c:	4659      	mov	r1, fp
 802f21e:	f7ff fbe7 	bl	802e9f0 <__ssprint_r>
 802f222:	2800      	cmp	r0, #0
 802f224:	d159      	bne.n	802f2da <_svfiprintf_r+0x7ee>
 802f226:	ae11      	add	r6, sp, #68	@ 0x44
 802f228:	e6b1      	b.n	802ef8e <_svfiprintf_r+0x4a2>
 802f22a:	9801      	ldr	r0, [sp, #4]
 802f22c:	aa0e      	add	r2, sp, #56	@ 0x38
 802f22e:	4659      	mov	r1, fp
 802f230:	f7ff fbde 	bl	802e9f0 <__ssprint_r>
 802f234:	2800      	cmp	r0, #0
 802f236:	d150      	bne.n	802f2da <_svfiprintf_r+0x7ee>
 802f238:	ae11      	add	r6, sp, #68	@ 0x44
 802f23a:	e6b8      	b.n	802efae <_svfiprintf_r+0x4c2>
 802f23c:	2110      	movs	r1, #16
 802f23e:	6071      	str	r1, [r6, #4]
 802f240:	2a07      	cmp	r2, #7
 802f242:	4461      	add	r1, ip
 802f244:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f248:	dd08      	ble.n	802f25c <_svfiprintf_r+0x770>
 802f24a:	9801      	ldr	r0, [sp, #4]
 802f24c:	aa0e      	add	r2, sp, #56	@ 0x38
 802f24e:	4659      	mov	r1, fp
 802f250:	f7ff fbce 	bl	802e9f0 <__ssprint_r>
 802f254:	2800      	cmp	r0, #0
 802f256:	d140      	bne.n	802f2da <_svfiprintf_r+0x7ee>
 802f258:	4b49      	ldr	r3, [pc, #292]	@ (802f380 <_svfiprintf_r+0x894>)
 802f25a:	a811      	add	r0, sp, #68	@ 0x44
 802f25c:	f1aa 0a10 	sub.w	sl, sl, #16
 802f260:	4606      	mov	r6, r0
 802f262:	e6ae      	b.n	802efc2 <_svfiprintf_r+0x4d6>
 802f264:	4606      	mov	r6, r0
 802f266:	e6c9      	b.n	802effc <_svfiprintf_r+0x510>
 802f268:	2010      	movs	r0, #16
 802f26a:	4402      	add	r2, r0
 802f26c:	2b07      	cmp	r3, #7
 802f26e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802f272:	6070      	str	r0, [r6, #4]
 802f274:	dd06      	ble.n	802f284 <_svfiprintf_r+0x798>
 802f276:	9801      	ldr	r0, [sp, #4]
 802f278:	aa0e      	add	r2, sp, #56	@ 0x38
 802f27a:	4659      	mov	r1, fp
 802f27c:	f7ff fbb8 	bl	802e9f0 <__ssprint_r>
 802f280:	bb58      	cbnz	r0, 802f2da <_svfiprintf_r+0x7ee>
 802f282:	a911      	add	r1, sp, #68	@ 0x44
 802f284:	3c10      	subs	r4, #16
 802f286:	460e      	mov	r6, r1
 802f288:	e6bc      	b.n	802f004 <_svfiprintf_r+0x518>
 802f28a:	460e      	mov	r6, r1
 802f28c:	e6d5      	b.n	802f03a <_svfiprintf_r+0x54e>
 802f28e:	9801      	ldr	r0, [sp, #4]
 802f290:	aa0e      	add	r2, sp, #56	@ 0x38
 802f292:	4659      	mov	r1, fp
 802f294:	f7ff fbac 	bl	802e9f0 <__ssprint_r>
 802f298:	b9f8      	cbnz	r0, 802f2da <_svfiprintf_r+0x7ee>
 802f29a:	ab11      	add	r3, sp, #68	@ 0x44
 802f29c:	e6dd      	b.n	802f05a <_svfiprintf_r+0x56e>
 802f29e:	9a03      	ldr	r2, [sp, #12]
 802f2a0:	1b54      	subs	r4, r2, r5
 802f2a2:	2c00      	cmp	r4, #0
 802f2a4:	f77f aedd 	ble.w	802f062 <_svfiprintf_r+0x576>
 802f2a8:	4e34      	ldr	r6, [pc, #208]	@ (802f37c <_svfiprintf_r+0x890>)
 802f2aa:	f04f 0810 	mov.w	r8, #16
 802f2ae:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802f2b2:	2c10      	cmp	r4, #16
 802f2b4:	f102 0201 	add.w	r2, r2, #1
 802f2b8:	601e      	str	r6, [r3, #0]
 802f2ba:	dc17      	bgt.n	802f2ec <_svfiprintf_r+0x800>
 802f2bc:	605c      	str	r4, [r3, #4]
 802f2be:	2a07      	cmp	r2, #7
 802f2c0:	440c      	add	r4, r1
 802f2c2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 802f2c6:	f77f aecc 	ble.w	802f062 <_svfiprintf_r+0x576>
 802f2ca:	9801      	ldr	r0, [sp, #4]
 802f2cc:	aa0e      	add	r2, sp, #56	@ 0x38
 802f2ce:	4659      	mov	r1, fp
 802f2d0:	f7ff fb8e 	bl	802e9f0 <__ssprint_r>
 802f2d4:	2800      	cmp	r0, #0
 802f2d6:	f43f aec4 	beq.w	802f062 <_svfiprintf_r+0x576>
 802f2da:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802f2de:	065b      	lsls	r3, r3, #25
 802f2e0:	f53f ac1c 	bmi.w	802eb1c <_svfiprintf_r+0x30>
 802f2e4:	9804      	ldr	r0, [sp, #16]
 802f2e6:	b03b      	add	sp, #236	@ 0xec
 802f2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f2ec:	3110      	adds	r1, #16
 802f2ee:	2a07      	cmp	r2, #7
 802f2f0:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 802f2f4:	f8c3 8004 	str.w	r8, [r3, #4]
 802f2f8:	dc02      	bgt.n	802f300 <_svfiprintf_r+0x814>
 802f2fa:	3308      	adds	r3, #8
 802f2fc:	3c10      	subs	r4, #16
 802f2fe:	e7d6      	b.n	802f2ae <_svfiprintf_r+0x7c2>
 802f300:	9801      	ldr	r0, [sp, #4]
 802f302:	aa0e      	add	r2, sp, #56	@ 0x38
 802f304:	4659      	mov	r1, fp
 802f306:	f7ff fb73 	bl	802e9f0 <__ssprint_r>
 802f30a:	2800      	cmp	r0, #0
 802f30c:	d1e5      	bne.n	802f2da <_svfiprintf_r+0x7ee>
 802f30e:	ab11      	add	r3, sp, #68	@ 0x44
 802f310:	e7f4      	b.n	802f2fc <_svfiprintf_r+0x810>
 802f312:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802f314:	2b00      	cmp	r3, #0
 802f316:	d0e0      	beq.n	802f2da <_svfiprintf_r+0x7ee>
 802f318:	9801      	ldr	r0, [sp, #4]
 802f31a:	aa0e      	add	r2, sp, #56	@ 0x38
 802f31c:	4659      	mov	r1, fp
 802f31e:	f7ff fb67 	bl	802e9f0 <__ssprint_r>
 802f322:	e7da      	b.n	802f2da <_svfiprintf_r+0x7ee>
 802f324:	ea54 0205 	orrs.w	r2, r4, r5
 802f328:	46ca      	mov	sl, r9
 802f32a:	f43f adac 	beq.w	802ee86 <_svfiprintf_r+0x39a>
 802f32e:	2b01      	cmp	r3, #1
 802f330:	f43f aee7 	beq.w	802f102 <_svfiprintf_r+0x616>
 802f334:	2b02      	cmp	r3, #2
 802f336:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802f33a:	f43f af2f 	beq.w	802f19c <_svfiprintf_r+0x6b0>
 802f33e:	f004 0307 	and.w	r3, r4, #7
 802f342:	08e4      	lsrs	r4, r4, #3
 802f344:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 802f348:	08ed      	lsrs	r5, r5, #3
 802f34a:	3330      	adds	r3, #48	@ 0x30
 802f34c:	ea54 0105 	orrs.w	r1, r4, r5
 802f350:	4642      	mov	r2, r8
 802f352:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802f356:	d1f2      	bne.n	802f33e <_svfiprintf_r+0x852>
 802f358:	f01a 0f01 	tst.w	sl, #1
 802f35c:	d006      	beq.n	802f36c <_svfiprintf_r+0x880>
 802f35e:	2b30      	cmp	r3, #48	@ 0x30
 802f360:	d004      	beq.n	802f36c <_svfiprintf_r+0x880>
 802f362:	2330      	movs	r3, #48	@ 0x30
 802f364:	f808 3c01 	strb.w	r3, [r8, #-1]
 802f368:	f1a2 0802 	sub.w	r8, r2, #2
 802f36c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802f36e:	eba3 0308 	sub.w	r3, r3, r8
 802f372:	9c00      	ldr	r4, [sp, #0]
 802f374:	9300      	str	r3, [sp, #0]
 802f376:	46d1      	mov	r9, sl
 802f378:	e5c2      	b.n	802ef00 <_svfiprintf_r+0x414>
 802f37a:	bf00      	nop
 802f37c:	0803b257 	.word	0x0803b257
 802f380:	0803b247 	.word	0x0803b247

0802f384 <_sungetc_r>:
 802f384:	b538      	push	{r3, r4, r5, lr}
 802f386:	1c4b      	adds	r3, r1, #1
 802f388:	4614      	mov	r4, r2
 802f38a:	d103      	bne.n	802f394 <_sungetc_r+0x10>
 802f38c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 802f390:	4628      	mov	r0, r5
 802f392:	bd38      	pop	{r3, r4, r5, pc}
 802f394:	8993      	ldrh	r3, [r2, #12]
 802f396:	f023 0320 	bic.w	r3, r3, #32
 802f39a:	8193      	strh	r3, [r2, #12]
 802f39c:	6853      	ldr	r3, [r2, #4]
 802f39e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802f3a0:	b2cd      	uxtb	r5, r1
 802f3a2:	b18a      	cbz	r2, 802f3c8 <_sungetc_r+0x44>
 802f3a4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 802f3a6:	429a      	cmp	r2, r3
 802f3a8:	dd08      	ble.n	802f3bc <_sungetc_r+0x38>
 802f3aa:	6823      	ldr	r3, [r4, #0]
 802f3ac:	1e5a      	subs	r2, r3, #1
 802f3ae:	6022      	str	r2, [r4, #0]
 802f3b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 802f3b4:	6863      	ldr	r3, [r4, #4]
 802f3b6:	3301      	adds	r3, #1
 802f3b8:	6063      	str	r3, [r4, #4]
 802f3ba:	e7e9      	b.n	802f390 <_sungetc_r+0xc>
 802f3bc:	4621      	mov	r1, r4
 802f3be:	f005 f8a7 	bl	8034510 <__submore>
 802f3c2:	2800      	cmp	r0, #0
 802f3c4:	d0f1      	beq.n	802f3aa <_sungetc_r+0x26>
 802f3c6:	e7e1      	b.n	802f38c <_sungetc_r+0x8>
 802f3c8:	6921      	ldr	r1, [r4, #16]
 802f3ca:	6822      	ldr	r2, [r4, #0]
 802f3cc:	b141      	cbz	r1, 802f3e0 <_sungetc_r+0x5c>
 802f3ce:	4291      	cmp	r1, r2
 802f3d0:	d206      	bcs.n	802f3e0 <_sungetc_r+0x5c>
 802f3d2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802f3d6:	42a9      	cmp	r1, r5
 802f3d8:	d102      	bne.n	802f3e0 <_sungetc_r+0x5c>
 802f3da:	3a01      	subs	r2, #1
 802f3dc:	6022      	str	r2, [r4, #0]
 802f3de:	e7ea      	b.n	802f3b6 <_sungetc_r+0x32>
 802f3e0:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 802f3e4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802f3e8:	6323      	str	r3, [r4, #48]	@ 0x30
 802f3ea:	2303      	movs	r3, #3
 802f3ec:	6363      	str	r3, [r4, #52]	@ 0x34
 802f3ee:	4623      	mov	r3, r4
 802f3f0:	f803 5f42 	strb.w	r5, [r3, #66]!
 802f3f4:	6023      	str	r3, [r4, #0]
 802f3f6:	2301      	movs	r3, #1
 802f3f8:	e7de      	b.n	802f3b8 <_sungetc_r+0x34>

0802f3fa <__ssrefill_r>:
 802f3fa:	b510      	push	{r4, lr}
 802f3fc:	460c      	mov	r4, r1
 802f3fe:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802f400:	b169      	cbz	r1, 802f41e <__ssrefill_r+0x24>
 802f402:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802f406:	4299      	cmp	r1, r3
 802f408:	d001      	beq.n	802f40e <__ssrefill_r+0x14>
 802f40a:	f7fe ff2f 	bl	802e26c <_free_r>
 802f40e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802f410:	6063      	str	r3, [r4, #4]
 802f412:	2000      	movs	r0, #0
 802f414:	6320      	str	r0, [r4, #48]	@ 0x30
 802f416:	b113      	cbz	r3, 802f41e <__ssrefill_r+0x24>
 802f418:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802f41a:	6023      	str	r3, [r4, #0]
 802f41c:	bd10      	pop	{r4, pc}
 802f41e:	6923      	ldr	r3, [r4, #16]
 802f420:	6023      	str	r3, [r4, #0]
 802f422:	2300      	movs	r3, #0
 802f424:	6063      	str	r3, [r4, #4]
 802f426:	89a3      	ldrh	r3, [r4, #12]
 802f428:	f043 0320 	orr.w	r3, r3, #32
 802f42c:	81a3      	strh	r3, [r4, #12]
 802f42e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802f432:	e7f3      	b.n	802f41c <__ssrefill_r+0x22>

0802f434 <_sfread_r>:
 802f434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f438:	461f      	mov	r7, r3
 802f43a:	4613      	mov	r3, r2
 802f43c:	437b      	muls	r3, r7
 802f43e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802f440:	9000      	str	r0, [sp, #0]
 802f442:	4688      	mov	r8, r1
 802f444:	4691      	mov	r9, r2
 802f446:	d028      	beq.n	802f49a <_sfread_r+0x66>
 802f448:	461e      	mov	r6, r3
 802f44a:	f04f 0b00 	mov.w	fp, #0
 802f44e:	e9d4 1500 	ldrd	r1, r5, [r4]
 802f452:	42b5      	cmp	r5, r6
 802f454:	d30b      	bcc.n	802f46e <_sfread_r+0x3a>
 802f456:	4632      	mov	r2, r6
 802f458:	4640      	mov	r0, r8
 802f45a:	f7fe f805 	bl	802d468 <memcpy>
 802f45e:	6862      	ldr	r2, [r4, #4]
 802f460:	6821      	ldr	r1, [r4, #0]
 802f462:	1b92      	subs	r2, r2, r6
 802f464:	4431      	add	r1, r6
 802f466:	6062      	str	r2, [r4, #4]
 802f468:	6021      	str	r1, [r4, #0]
 802f46a:	463b      	mov	r3, r7
 802f46c:	e015      	b.n	802f49a <_sfread_r+0x66>
 802f46e:	462a      	mov	r2, r5
 802f470:	4640      	mov	r0, r8
 802f472:	9301      	str	r3, [sp, #4]
 802f474:	f7fd fff8 	bl	802d468 <memcpy>
 802f478:	6822      	ldr	r2, [r4, #0]
 802f47a:	9800      	ldr	r0, [sp, #0]
 802f47c:	442a      	add	r2, r5
 802f47e:	e9c4 2b00 	strd	r2, fp, [r4]
 802f482:	4621      	mov	r1, r4
 802f484:	f7ff ffb9 	bl	802f3fa <__ssrefill_r>
 802f488:	44a8      	add	r8, r5
 802f48a:	9b01      	ldr	r3, [sp, #4]
 802f48c:	eba6 0a05 	sub.w	sl, r6, r5
 802f490:	b138      	cbz	r0, 802f4a2 <_sfread_r+0x6e>
 802f492:	441d      	add	r5, r3
 802f494:	1bad      	subs	r5, r5, r6
 802f496:	fbb5 f3f9 	udiv	r3, r5, r9
 802f49a:	4618      	mov	r0, r3
 802f49c:	b003      	add	sp, #12
 802f49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f4a2:	4656      	mov	r6, sl
 802f4a4:	e7d3      	b.n	802f44e <_sfread_r+0x1a>
	...

0802f4a8 <__ssvfiscanf_r>:
 802f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f4ac:	b0df      	sub	sp, #380	@ 0x17c
 802f4ae:	af02      	add	r7, sp, #8
 802f4b0:	460c      	mov	r4, r1
 802f4b2:	623b      	str	r3, [r7, #32]
 802f4b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802f4b8:	6278      	str	r0, [r7, #36]	@ 0x24
 802f4ba:	049d      	lsls	r5, r3, #18
 802f4bc:	60ba      	str	r2, [r7, #8]
 802f4be:	d406      	bmi.n	802f4ce <__ssvfiscanf_r+0x26>
 802f4c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802f4c4:	818b      	strh	r3, [r1, #12]
 802f4c6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802f4c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802f4cc:	664b      	str	r3, [r1, #100]	@ 0x64
 802f4ce:	2300      	movs	r3, #0
 802f4d0:	e9c7 3305 	strd	r3, r3, [r7, #20]
 802f4d4:	60fb      	str	r3, [r7, #12]
 802f4d6:	469b      	mov	fp, r3
 802f4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f4da:	61fb      	str	r3, [r7, #28]
 802f4dc:	e005      	b.n	802f4ea <__ssvfiscanf_r+0x42>
 802f4de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f4e0:	4621      	mov	r1, r4
 802f4e2:	f7ff ff8a 	bl	802f3fa <__ssrefill_r>
 802f4e6:	b168      	cbz	r0, 802f504 <__ssvfiscanf_r+0x5c>
 802f4e8:	60bd      	str	r5, [r7, #8]
 802f4ea:	68bd      	ldr	r5, [r7, #8]
 802f4ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 802f4f0:	637b      	str	r3, [r7, #52]	@ 0x34
 802f4f2:	b333      	cbz	r3, 802f542 <__ssvfiscanf_r+0x9a>
 802f4f4:	4a75      	ldr	r2, [pc, #468]	@ (802f6cc <__ssvfiscanf_r+0x224>)
 802f4f6:	5cd6      	ldrb	r6, [r2, r3]
 802f4f8:	f016 0608 	ands.w	r6, r6, #8
 802f4fc:	d011      	beq.n	802f522 <__ssvfiscanf_r+0x7a>
 802f4fe:	6863      	ldr	r3, [r4, #4]
 802f500:	2b00      	cmp	r3, #0
 802f502:	ddec      	ble.n	802f4de <__ssvfiscanf_r+0x36>
 802f504:	6823      	ldr	r3, [r4, #0]
 802f506:	4971      	ldr	r1, [pc, #452]	@ (802f6cc <__ssvfiscanf_r+0x224>)
 802f508:	781a      	ldrb	r2, [r3, #0]
 802f50a:	5c8a      	ldrb	r2, [r1, r2]
 802f50c:	0710      	lsls	r0, r2, #28
 802f50e:	d5eb      	bpl.n	802f4e8 <__ssvfiscanf_r+0x40>
 802f510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f512:	3201      	adds	r2, #1
 802f514:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f516:	6862      	ldr	r2, [r4, #4]
 802f518:	3301      	adds	r3, #1
 802f51a:	3a01      	subs	r2, #1
 802f51c:	6062      	str	r2, [r4, #4]
 802f51e:	6023      	str	r3, [r4, #0]
 802f520:	e7ed      	b.n	802f4fe <__ssvfiscanf_r+0x56>
 802f522:	2b25      	cmp	r3, #37	@ 0x25
 802f524:	d15f      	bne.n	802f5e6 <__ssvfiscanf_r+0x13e>
 802f526:	62be      	str	r6, [r7, #40]	@ 0x28
 802f528:	462a      	mov	r2, r5
 802f52a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802f52e:	60ba      	str	r2, [r7, #8]
 802f530:	2b7a      	cmp	r3, #122	@ 0x7a
 802f532:	d806      	bhi.n	802f542 <__ssvfiscanf_r+0x9a>
 802f534:	2b42      	cmp	r3, #66	@ 0x42
 802f536:	d809      	bhi.n	802f54c <__ssvfiscanf_r+0xa4>
 802f538:	2b2a      	cmp	r3, #42	@ 0x2a
 802f53a:	d079      	beq.n	802f630 <__ssvfiscanf_r+0x188>
 802f53c:	d844      	bhi.n	802f5c8 <__ssvfiscanf_r+0x120>
 802f53e:	2b25      	cmp	r3, #37	@ 0x25
 802f540:	d050      	beq.n	802f5e4 <__ssvfiscanf_r+0x13c>
 802f542:	f1bb 0f00 	cmp.w	fp, #0
 802f546:	f000 810e 	beq.w	802f766 <__ssvfiscanf_r+0x2be>
 802f54a:	e107      	b.n	802f75c <__ssvfiscanf_r+0x2b4>
 802f54c:	3b43      	subs	r3, #67	@ 0x43
 802f54e:	2b37      	cmp	r3, #55	@ 0x37
 802f550:	f200 80fd 	bhi.w	802f74e <__ssvfiscanf_r+0x2a6>
 802f554:	e8df f013 	tbh	[pc, r3, lsl #1]
 802f558:	00a40117 	.word	0x00a40117
 802f55c:	00fb00fb 	.word	0x00fb00fb
 802f560:	00fb00fb 	.word	0x00fb00fb
 802f564:	00fb00fb 	.word	0x00fb00fb
 802f568:	008e00fb 	.word	0x008e00fb
 802f56c:	00fb00fb 	.word	0x00fb00fb
 802f570:	00fb00a8 	.word	0x00fb00a8
 802f574:	00fb00fb 	.word	0x00fb00fb
 802f578:	00fb00c0 	.word	0x00fb00c0
 802f57c:	00fb00fb 	.word	0x00fb00fb
 802f580:	00b400fb 	.word	0x00b400fb
 802f584:	00fb00fb 	.word	0x00fb00fb
 802f588:	00fb010d 	.word	0x00fb010d
 802f58c:	00fb00fb 	.word	0x00fb00fb
 802f590:	00fb00fb 	.word	0x00fb00fb
 802f594:	00fb00fb 	.word	0x00fb00fb
 802f598:	00a60119 	.word	0x00a60119
 802f59c:	00fb00fb 	.word	0x00fb00fb
 802f5a0:	008100fb 	.word	0x008100fb
 802f5a4:	008e013e 	.word	0x008e013e
 802f5a8:	007300fb 	.word	0x007300fb
 802f5ac:	01200095 	.word	0x01200095
 802f5b0:	011d00aa 	.word	0x011d00aa
 802f5b4:	00fb00fb 	.word	0x00fb00fb
 802f5b8:	009200c2 	.word	0x009200c2
 802f5bc:	00fb00b0 	.word	0x00fb00b0
 802f5c0:	00b400fb 	.word	0x00b400fb
 802f5c4:	009200fb 	.word	0x009200fb
 802f5c8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802f5cc:	2a09      	cmp	r2, #9
 802f5ce:	d8b8      	bhi.n	802f542 <__ssvfiscanf_r+0x9a>
 802f5d0:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802f5d4:	d1b5      	bne.n	802f542 <__ssvfiscanf_r+0x9a>
 802f5d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802f5d8:	220a      	movs	r2, #10
 802f5da:	fb02 3301 	mla	r3, r2, r1, r3
 802f5de:	3b30      	subs	r3, #48	@ 0x30
 802f5e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f5e2:	e02a      	b.n	802f63a <__ssvfiscanf_r+0x192>
 802f5e4:	68bd      	ldr	r5, [r7, #8]
 802f5e6:	6863      	ldr	r3, [r4, #4]
 802f5e8:	2b00      	cmp	r3, #0
 802f5ea:	dd0e      	ble.n	802f60a <__ssvfiscanf_r+0x162>
 802f5ec:	6823      	ldr	r3, [r4, #0]
 802f5ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802f5f2:	7819      	ldrb	r1, [r3, #0]
 802f5f4:	4291      	cmp	r1, r2
 802f5f6:	d1a4      	bne.n	802f542 <__ssvfiscanf_r+0x9a>
 802f5f8:	3301      	adds	r3, #1
 802f5fa:	6862      	ldr	r2, [r4, #4]
 802f5fc:	6023      	str	r3, [r4, #0]
 802f5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f600:	3a01      	subs	r2, #1
 802f602:	3301      	adds	r3, #1
 802f604:	6062      	str	r2, [r4, #4]
 802f606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f608:	e76e      	b.n	802f4e8 <__ssvfiscanf_r+0x40>
 802f60a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f60c:	4621      	mov	r1, r4
 802f60e:	f7ff fef4 	bl	802f3fa <__ssrefill_r>
 802f612:	2800      	cmp	r0, #0
 802f614:	d0ea      	beq.n	802f5ec <__ssvfiscanf_r+0x144>
 802f616:	69fb      	ldr	r3, [r7, #28]
 802f618:	b113      	cbz	r3, 802f620 <__ssvfiscanf_r+0x178>
 802f61a:	89a3      	ldrh	r3, [r4, #12]
 802f61c:	065b      	lsls	r3, r3, #25
 802f61e:	d590      	bpl.n	802f542 <__ssvfiscanf_r+0x9a>
 802f620:	f1bb 0f00 	cmp.w	fp, #0
 802f624:	f040 8654 	bne.w	80302d0 <__ssvfiscanf_r+0xe28>
 802f628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f62c:	61fb      	str	r3, [r7, #28]
 802f62e:	e09a      	b.n	802f766 <__ssvfiscanf_r+0x2be>
 802f630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f632:	4333      	orrs	r3, r6
 802f634:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f636:	d184      	bne.n	802f542 <__ssvfiscanf_r+0x9a>
 802f638:	2610      	movs	r6, #16
 802f63a:	68bd      	ldr	r5, [r7, #8]
 802f63c:	e774      	b.n	802f528 <__ssvfiscanf_r+0x80>
 802f63e:	0731      	lsls	r1, r6, #28
 802f640:	f47f af7f 	bne.w	802f542 <__ssvfiscanf_r+0x9a>
 802f644:	786b      	ldrb	r3, [r5, #1]
 802f646:	2b6c      	cmp	r3, #108	@ 0x6c
 802f648:	d104      	bne.n	802f654 <__ssvfiscanf_r+0x1ac>
 802f64a:	1cab      	adds	r3, r5, #2
 802f64c:	60bb      	str	r3, [r7, #8]
 802f64e:	f046 0602 	orr.w	r6, r6, #2
 802f652:	e7f2      	b.n	802f63a <__ssvfiscanf_r+0x192>
 802f654:	f046 0601 	orr.w	r6, r6, #1
 802f658:	e7ef      	b.n	802f63a <__ssvfiscanf_r+0x192>
 802f65a:	0732      	lsls	r2, r6, #28
 802f65c:	f47f af71 	bne.w	802f542 <__ssvfiscanf_r+0x9a>
 802f660:	786b      	ldrb	r3, [r5, #1]
 802f662:	2b68      	cmp	r3, #104	@ 0x68
 802f664:	bf03      	ittte	eq
 802f666:	1cab      	addeq	r3, r5, #2
 802f668:	60bb      	streq	r3, [r7, #8]
 802f66a:	f046 0608 	orreq.w	r6, r6, #8
 802f66e:	f046 0604 	orrne.w	r6, r6, #4
 802f672:	e7e2      	b.n	802f63a <__ssvfiscanf_r+0x192>
 802f674:	0733      	lsls	r3, r6, #28
 802f676:	f47f af64 	bne.w	802f542 <__ssvfiscanf_r+0x9a>
 802f67a:	e7e8      	b.n	802f64e <__ssvfiscanf_r+0x1a6>
 802f67c:	0735      	lsls	r5, r6, #28
 802f67e:	d0dc      	beq.n	802f63a <__ssvfiscanf_r+0x192>
 802f680:	e75f      	b.n	802f542 <__ssvfiscanf_r+0x9a>
 802f682:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802f686:	f47f af5c 	bne.w	802f542 <__ssvfiscanf_r+0x9a>
 802f68a:	f1bb 0f00 	cmp.w	fp, #0
 802f68e:	d104      	bne.n	802f69a <__ssvfiscanf_r+0x1f2>
 802f690:	b082      	sub	sp, #8
 802f692:	f10d 0b08 	add.w	fp, sp, #8
 802f696:	e9cb 3300 	strd	r3, r3, [fp]
 802f69a:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802f69e:	e7cc      	b.n	802f63a <__ssvfiscanf_r+0x192>
 802f6a0:	f046 0601 	orr.w	r6, r6, #1
 802f6a4:	4b0a      	ldr	r3, [pc, #40]	@ (802f6d0 <__ssvfiscanf_r+0x228>)
 802f6a6:	e008      	b.n	802f6ba <__ssvfiscanf_r+0x212>
 802f6a8:	f046 0601 	orr.w	r6, r6, #1
 802f6ac:	4b09      	ldr	r3, [pc, #36]	@ (802f6d4 <__ssvfiscanf_r+0x22c>)
 802f6ae:	60fb      	str	r3, [r7, #12]
 802f6b0:	2308      	movs	r3, #8
 802f6b2:	617b      	str	r3, [r7, #20]
 802f6b4:	2503      	movs	r5, #3
 802f6b6:	e012      	b.n	802f6de <__ssvfiscanf_r+0x236>
 802f6b8:	4b06      	ldr	r3, [pc, #24]	@ (802f6d4 <__ssvfiscanf_r+0x22c>)
 802f6ba:	60fb      	str	r3, [r7, #12]
 802f6bc:	230a      	movs	r3, #10
 802f6be:	e7f8      	b.n	802f6b2 <__ssvfiscanf_r+0x20a>
 802f6c0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802f6c4:	4b03      	ldr	r3, [pc, #12]	@ (802f6d4 <__ssvfiscanf_r+0x22c>)
 802f6c6:	60fb      	str	r3, [r7, #12]
 802f6c8:	2310      	movs	r3, #16
 802f6ca:	e7f2      	b.n	802f6b2 <__ssvfiscanf_r+0x20a>
 802f6cc:	0803b0d1 	.word	0x0803b0d1
 802f6d0:	0802b6f9 	.word	0x0802b6f9
 802f6d4:	080344f9 	.word	0x080344f9
 802f6d8:	f046 0601 	orr.w	r6, r6, #1
 802f6dc:	2502      	movs	r5, #2
 802f6de:	6863      	ldr	r3, [r4, #4]
 802f6e0:	2b00      	cmp	r3, #0
 802f6e2:	dd7b      	ble.n	802f7dc <__ssvfiscanf_r+0x334>
 802f6e4:	0671      	lsls	r1, r6, #25
 802f6e6:	d407      	bmi.n	802f6f8 <__ssvfiscanf_r+0x250>
 802f6e8:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 802fa74 <__ssvfiscanf_r+0x5cc>
 802f6ec:	6823      	ldr	r3, [r4, #0]
 802f6ee:	781a      	ldrb	r2, [r3, #0]
 802f6f0:	f818 2002 	ldrb.w	r2, [r8, r2]
 802f6f4:	0712      	lsls	r2, r2, #28
 802f6f6:	d479      	bmi.n	802f7ec <__ssvfiscanf_r+0x344>
 802f6f8:	2d02      	cmp	r5, #2
 802f6fa:	f000 836f 	beq.w	802fddc <__ssvfiscanf_r+0x934>
 802f6fe:	2d03      	cmp	r5, #3
 802f700:	f000 84f6 	beq.w	80300f0 <__ssvfiscanf_r+0xc48>
 802f704:	f006 0310 	and.w	r3, r6, #16
 802f708:	2d01      	cmp	r5, #1
 802f70a:	613b      	str	r3, [r7, #16]
 802f70c:	f006 0501 	and.w	r5, r6, #1
 802f710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f712:	f000 81b1 	beq.w	802fa78 <__ssvfiscanf_r+0x5d0>
 802f716:	2b01      	cmp	r3, #1
 802f718:	bf38      	it	cc
 802f71a:	2301      	movcc	r3, #1
 802f71c:	4698      	mov	r8, r3
 802f71e:	693b      	ldr	r3, [r7, #16]
 802f720:	2d00      	cmp	r5, #0
 802f722:	f000 813b 	beq.w	802f99c <__ssvfiscanf_r+0x4f4>
 802f726:	2b00      	cmp	r3, #0
 802f728:	f040 80d8 	bne.w	802f8dc <__ssvfiscanf_r+0x434>
 802f72c:	6a3b      	ldr	r3, [r7, #32]
 802f72e:	0636      	lsls	r6, r6, #24
 802f730:	f853 5b04 	ldr.w	r5, [r3], #4
 802f734:	623b      	str	r3, [r7, #32]
 802f736:	f140 80d7 	bpl.w	802f8e8 <__ssvfiscanf_r+0x440>
 802f73a:	b145      	cbz	r5, 802f74e <__ssvfiscanf_r+0x2a6>
 802f73c:	2080      	movs	r0, #128	@ 0x80
 802f73e:	f7fe fe9d 	bl	802e47c <malloc>
 802f742:	4606      	mov	r6, r0
 802f744:	2800      	cmp	r0, #0
 802f746:	d164      	bne.n	802f812 <__ssvfiscanf_r+0x36a>
 802f748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802f74c:	61fb      	str	r3, [r7, #28]
 802f74e:	f1bb 0f00 	cmp.w	fp, #0
 802f752:	d008      	beq.n	802f766 <__ssvfiscanf_r+0x2be>
 802f754:	69fb      	ldr	r3, [r7, #28]
 802f756:	3301      	adds	r3, #1
 802f758:	f000 85ba 	beq.w	80302d0 <__ssvfiscanf_r+0xe28>
 802f75c:	f8db 0000 	ldr.w	r0, [fp]
 802f760:	b108      	cbz	r0, 802f766 <__ssvfiscanf_r+0x2be>
 802f762:	f7fe fe93 	bl	802e48c <free>
 802f766:	69f8      	ldr	r0, [r7, #28]
 802f768:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 802f76c:	46bd      	mov	sp, r7
 802f76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f772:	68b9      	ldr	r1, [r7, #8]
 802f774:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 802f778:	f003 fe67 	bl	803344a <__sccl>
 802f77c:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f780:	60b8      	str	r0, [r7, #8]
 802f782:	2501      	movs	r5, #1
 802f784:	e7ab      	b.n	802f6de <__ssvfiscanf_r+0x236>
 802f786:	f046 0601 	orr.w	r6, r6, #1
 802f78a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802f78e:	2500      	movs	r5, #0
 802f790:	e7a5      	b.n	802f6de <__ssvfiscanf_r+0x236>
 802f792:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802f796:	e795      	b.n	802f6c4 <__ssvfiscanf_r+0x21c>
 802f798:	06f0      	lsls	r0, r6, #27
 802f79a:	f53f aea6 	bmi.w	802f4ea <__ssvfiscanf_r+0x42>
 802f79e:	6a3a      	ldr	r2, [r7, #32]
 802f7a0:	0731      	lsls	r1, r6, #28
 802f7a2:	f852 3b04 	ldr.w	r3, [r2], #4
 802f7a6:	623a      	str	r2, [r7, #32]
 802f7a8:	d502      	bpl.n	802f7b0 <__ssvfiscanf_r+0x308>
 802f7aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f7ac:	701a      	strb	r2, [r3, #0]
 802f7ae:	e69c      	b.n	802f4ea <__ssvfiscanf_r+0x42>
 802f7b0:	0772      	lsls	r2, r6, #29
 802f7b2:	d502      	bpl.n	802f7ba <__ssvfiscanf_r+0x312>
 802f7b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f7b6:	801a      	strh	r2, [r3, #0]
 802f7b8:	e697      	b.n	802f4ea <__ssvfiscanf_r+0x42>
 802f7ba:	07f5      	lsls	r5, r6, #31
 802f7bc:	d502      	bpl.n	802f7c4 <__ssvfiscanf_r+0x31c>
 802f7be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f7c0:	601a      	str	r2, [r3, #0]
 802f7c2:	e692      	b.n	802f4ea <__ssvfiscanf_r+0x42>
 802f7c4:	07b0      	lsls	r0, r6, #30
 802f7c6:	d5fa      	bpl.n	802f7be <__ssvfiscanf_r+0x316>
 802f7c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f7ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802f7cc:	17d2      	asrs	r2, r2, #31
 802f7ce:	e9c3 1200 	strd	r1, r2, [r3]
 802f7d2:	e68a      	b.n	802f4ea <__ssvfiscanf_r+0x42>
 802f7d4:	4ba6      	ldr	r3, [pc, #664]	@ (802fa70 <__ssvfiscanf_r+0x5c8>)
 802f7d6:	60fb      	str	r3, [r7, #12]
 802f7d8:	2300      	movs	r3, #0
 802f7da:	e76a      	b.n	802f6b2 <__ssvfiscanf_r+0x20a>
 802f7dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f7de:	4621      	mov	r1, r4
 802f7e0:	f7ff fe0b 	bl	802f3fa <__ssrefill_r>
 802f7e4:	2800      	cmp	r0, #0
 802f7e6:	f43f af7d 	beq.w	802f6e4 <__ssvfiscanf_r+0x23c>
 802f7ea:	e714      	b.n	802f616 <__ssvfiscanf_r+0x16e>
 802f7ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f7ee:	3201      	adds	r2, #1
 802f7f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f7f2:	6862      	ldr	r2, [r4, #4]
 802f7f4:	3a01      	subs	r2, #1
 802f7f6:	2a00      	cmp	r2, #0
 802f7f8:	6062      	str	r2, [r4, #4]
 802f7fa:	dd02      	ble.n	802f802 <__ssvfiscanf_r+0x35a>
 802f7fc:	3301      	adds	r3, #1
 802f7fe:	6023      	str	r3, [r4, #0]
 802f800:	e774      	b.n	802f6ec <__ssvfiscanf_r+0x244>
 802f802:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f804:	4621      	mov	r1, r4
 802f806:	f7ff fdf8 	bl	802f3fa <__ssrefill_r>
 802f80a:	2800      	cmp	r0, #0
 802f80c:	f43f af6e 	beq.w	802f6ec <__ssvfiscanf_r+0x244>
 802f810:	e701      	b.n	802f616 <__ssvfiscanf_r+0x16e>
 802f812:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802f816:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802f81a:	6028      	str	r0, [r5, #0]
 802f81c:	4599      	cmp	r9, r3
 802f81e:	d314      	bcc.n	802f84a <__ssvfiscanf_r+0x3a2>
 802f820:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802f824:	4293      	cmp	r3, r2
 802f826:	f200 8553 	bhi.w	80302d0 <__ssvfiscanf_r+0xe28>
 802f82a:	3308      	adds	r3, #8
 802f82c:	fa1f fa83 	uxth.w	sl, r3
 802f830:	f8db 0000 	ldr.w	r0, [fp]
 802f834:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802f838:	f003 fdaa 	bl	8033390 <realloc>
 802f83c:	2800      	cmp	r0, #0
 802f83e:	f000 8547 	beq.w	80302d0 <__ssvfiscanf_r+0xe28>
 802f842:	f8cb 0000 	str.w	r0, [fp]
 802f846:	f8ab a004 	strh.w	sl, [fp, #4]
 802f84a:	f8db 3000 	ldr.w	r3, [fp]
 802f84e:	f109 0201 	add.w	r2, r9, #1
 802f852:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802f856:	46aa      	mov	sl, r5
 802f858:	f8ab 2006 	strh.w	r2, [fp, #6]
 802f85c:	4635      	mov	r5, r6
 802f85e:	f04f 0920 	mov.w	r9, #32
 802f862:	2200      	movs	r2, #0
 802f864:	62ba      	str	r2, [r7, #40]	@ 0x28
 802f866:	f7fd fd4b 	bl	802d300 <__locale_mb_cur_max>
 802f86a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802f86c:	4290      	cmp	r0, r2
 802f86e:	f43f aed2 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802f872:	6821      	ldr	r1, [r4, #0]
 802f874:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 802f878:	f811 0b01 	ldrb.w	r0, [r1], #1
 802f87c:	f80c 0002 	strb.w	r0, [ip, r2]
 802f880:	1c53      	adds	r3, r2, #1
 802f882:	6862      	ldr	r2, [r4, #4]
 802f884:	3a01      	subs	r2, #1
 802f886:	e9c4 1200 	strd	r1, r2, [r4]
 802f88a:	69ba      	ldr	r2, [r7, #24]
 802f88c:	2a03      	cmp	r2, #3
 802f88e:	d102      	bne.n	802f896 <__ssvfiscanf_r+0x3ee>
 802f890:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802f892:	2a04      	cmp	r2, #4
 802f894:	d007      	beq.n	802f8a6 <__ssvfiscanf_r+0x3fe>
 802f896:	2208      	movs	r2, #8
 802f898:	2100      	movs	r1, #0
 802f89a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802f89e:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f8a0:	f7fc fba6 	bl	802bff0 <memset>
 802f8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f8a6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802f8aa:	9200      	str	r2, [sp, #0]
 802f8ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f8b0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802f8b4:	4629      	mov	r1, r5
 802f8b6:	f005 f925 	bl	8034b04 <_mbrtowc_r>
 802f8ba:	4603      	mov	r3, r0
 802f8bc:	61b8      	str	r0, [r7, #24]
 802f8be:	1c58      	adds	r0, r3, #1
 802f8c0:	f43f aea9 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802f8c4:	461a      	mov	r2, r3
 802f8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f8c8:	b9b2      	cbnz	r2, 802f8f8 <__ssvfiscanf_r+0x450>
 802f8ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f8cc:	441a      	add	r2, r3
 802f8ce:	4613      	mov	r3, r2
 802f8d0:	693a      	ldr	r2, [r7, #16]
 802f8d2:	b172      	cbz	r2, 802f8f2 <__ssvfiscanf_r+0x44a>
 802f8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802f8d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802f8da:	e019      	b.n	802f910 <__ssvfiscanf_r+0x468>
 802f8dc:	f04f 0900 	mov.w	r9, #0
 802f8e0:	464e      	mov	r6, r9
 802f8e2:	46ca      	mov	sl, r9
 802f8e4:	464d      	mov	r5, r9
 802f8e6:	e7bc      	b.n	802f862 <__ssvfiscanf_r+0x3ba>
 802f8e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802f8ec:	464e      	mov	r6, r9
 802f8ee:	46ca      	mov	sl, r9
 802f8f0:	e7b7      	b.n	802f862 <__ssvfiscanf_r+0x3ba>
 802f8f2:	693a      	ldr	r2, [r7, #16]
 802f8f4:	602a      	str	r2, [r5, #0]
 802f8f6:	e7ed      	b.n	802f8d4 <__ssvfiscanf_r+0x42c>
 802f8f8:	69ba      	ldr	r2, [r7, #24]
 802f8fa:	3202      	adds	r2, #2
 802f8fc:	d024      	beq.n	802f948 <__ssvfiscanf_r+0x4a0>
 802f8fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802f900:	441a      	add	r2, r3
 802f902:	69bb      	ldr	r3, [r7, #24]
 802f904:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802f906:	2b03      	cmp	r3, #3
 802f908:	d1e5      	bne.n	802f8d6 <__ssvfiscanf_r+0x42e>
 802f90a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802f90c:	2b04      	cmp	r3, #4
 802f90e:	d1e2      	bne.n	802f8d6 <__ssvfiscanf_r+0x42e>
 802f910:	693b      	ldr	r3, [r7, #16]
 802f912:	b9bb      	cbnz	r3, 802f944 <__ssvfiscanf_r+0x49c>
 802f914:	f1ba 0f00 	cmp.w	sl, #0
 802f918:	d013      	beq.n	802f942 <__ssvfiscanf_r+0x49a>
 802f91a:	1bab      	subs	r3, r5, r6
 802f91c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802f920:	d80f      	bhi.n	802f942 <__ssvfiscanf_r+0x49a>
 802f922:	4630      	mov	r0, r6
 802f924:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802f928:	62bb      	str	r3, [r7, #40]	@ 0x28
 802f92a:	f003 fd31 	bl	8033390 <realloc>
 802f92e:	4606      	mov	r6, r0
 802f930:	2800      	cmp	r0, #0
 802f932:	f43f af09 	beq.w	802f748 <__ssvfiscanf_r+0x2a0>
 802f936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802f938:	f8ca 0000 	str.w	r0, [sl]
 802f93c:	18c5      	adds	r5, r0, r3
 802f93e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802f942:	3504      	adds	r5, #4
 802f944:	2200      	movs	r2, #0
 802f946:	e000      	b.n	802f94a <__ssvfiscanf_r+0x4a2>
 802f948:	461a      	mov	r2, r3
 802f94a:	6863      	ldr	r3, [r4, #4]
 802f94c:	2b00      	cmp	r3, #0
 802f94e:	dc13      	bgt.n	802f978 <__ssvfiscanf_r+0x4d0>
 802f950:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f952:	62ba      	str	r2, [r7, #40]	@ 0x28
 802f954:	4621      	mov	r1, r4
 802f956:	f7ff fd50 	bl	802f3fa <__ssrefill_r>
 802f95a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802f95c:	b160      	cbz	r0, 802f978 <__ssvfiscanf_r+0x4d0>
 802f95e:	2a00      	cmp	r2, #0
 802f960:	f47f ae59 	bne.w	802f616 <__ssvfiscanf_r+0x16e>
 802f964:	f1ba 0f00 	cmp.w	sl, #0
 802f968:	d10b      	bne.n	802f982 <__ssvfiscanf_r+0x4da>
 802f96a:	693b      	ldr	r3, [r7, #16]
 802f96c:	2b00      	cmp	r3, #0
 802f96e:	f47f adbc 	bne.w	802f4ea <__ssvfiscanf_r+0x42>
 802f972:	69fb      	ldr	r3, [r7, #28]
 802f974:	3301      	adds	r3, #1
 802f976:	e5b0      	b.n	802f4da <__ssvfiscanf_r+0x32>
 802f978:	f1b8 0f00 	cmp.w	r8, #0
 802f97c:	f47f af72 	bne.w	802f864 <__ssvfiscanf_r+0x3bc>
 802f980:	e7f0      	b.n	802f964 <__ssvfiscanf_r+0x4bc>
 802f982:	1ba9      	subs	r1, r5, r6
 802f984:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802f988:	d9ef      	bls.n	802f96a <__ssvfiscanf_r+0x4c2>
 802f98a:	f8da 0000 	ldr.w	r0, [sl]
 802f98e:	f003 fcff 	bl	8033390 <realloc>
 802f992:	2800      	cmp	r0, #0
 802f994:	d0e9      	beq.n	802f96a <__ssvfiscanf_r+0x4c2>
 802f996:	f8ca 0000 	str.w	r0, [sl]
 802f99a:	e7e6      	b.n	802f96a <__ssvfiscanf_r+0x4c2>
 802f99c:	b1db      	cbz	r3, 802f9d6 <__ssvfiscanf_r+0x52e>
 802f99e:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f9a2:	4598      	cmp	r8, r3
 802f9a4:	dd10      	ble.n	802f9c8 <__ssvfiscanf_r+0x520>
 802f9a6:	441a      	add	r2, r3
 802f9a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802f9aa:	6022      	str	r2, [r4, #0]
 802f9ac:	4621      	mov	r1, r4
 802f9ae:	441d      	add	r5, r3
 802f9b0:	eba8 0803 	sub.w	r8, r8, r3
 802f9b4:	f7ff fd21 	bl	802f3fa <__ssrefill_r>
 802f9b8:	2800      	cmp	r0, #0
 802f9ba:	d0f0      	beq.n	802f99e <__ssvfiscanf_r+0x4f6>
 802f9bc:	2d00      	cmp	r5, #0
 802f9be:	f43f ae2a 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802f9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802f9c4:	442b      	add	r3, r5
 802f9c6:	e201      	b.n	802fdcc <__ssvfiscanf_r+0x924>
 802f9c8:	eba3 0308 	sub.w	r3, r3, r8
 802f9cc:	4442      	add	r2, r8
 802f9ce:	4445      	add	r5, r8
 802f9d0:	6063      	str	r3, [r4, #4]
 802f9d2:	6022      	str	r2, [r4, #0]
 802f9d4:	e7f5      	b.n	802f9c2 <__ssvfiscanf_r+0x51a>
 802f9d6:	6a3b      	ldr	r3, [r7, #32]
 802f9d8:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802f9dc:	f853 5b04 	ldr.w	r5, [r3], #4
 802f9e0:	623b      	str	r3, [r7, #32]
 802f9e2:	d02d      	beq.n	802fa40 <__ssvfiscanf_r+0x598>
 802f9e4:	2d00      	cmp	r5, #0
 802f9e6:	f43f adac 	beq.w	802f542 <__ssvfiscanf_r+0x9a>
 802f9ea:	4640      	mov	r0, r8
 802f9ec:	f7fe fd46 	bl	802e47c <malloc>
 802f9f0:	4681      	mov	r9, r0
 802f9f2:	2800      	cmp	r0, #0
 802f9f4:	f43f ae14 	beq.w	802f620 <__ssvfiscanf_r+0x178>
 802f9f8:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802f9fc:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802fa00:	6028      	str	r0, [r5, #0]
 802fa02:	45b2      	cmp	sl, r6
 802fa04:	d312      	bcc.n	802fa2c <__ssvfiscanf_r+0x584>
 802fa06:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fa0a:	429e      	cmp	r6, r3
 802fa0c:	f200 8460 	bhi.w	80302d0 <__ssvfiscanf_r+0xe28>
 802fa10:	3608      	adds	r6, #8
 802fa12:	b2b6      	uxth	r6, r6
 802fa14:	f8db 0000 	ldr.w	r0, [fp]
 802fa18:	00b1      	lsls	r1, r6, #2
 802fa1a:	f003 fcb9 	bl	8033390 <realloc>
 802fa1e:	2800      	cmp	r0, #0
 802fa20:	f000 8456 	beq.w	80302d0 <__ssvfiscanf_r+0xe28>
 802fa24:	f8cb 0000 	str.w	r0, [fp]
 802fa28:	f8ab 6004 	strh.w	r6, [fp, #4]
 802fa2c:	f8db 3000 	ldr.w	r3, [fp]
 802fa30:	f10a 0201 	add.w	r2, sl, #1
 802fa34:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802fa38:	462e      	mov	r6, r5
 802fa3a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fa3e:	464d      	mov	r5, r9
 802fa40:	9400      	str	r4, [sp, #0]
 802fa42:	4629      	mov	r1, r5
 802fa44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fa46:	4643      	mov	r3, r8
 802fa48:	2201      	movs	r2, #1
 802fa4a:	f7ff fcf3 	bl	802f434 <_sfread_r>
 802fa4e:	4605      	mov	r5, r0
 802fa50:	2800      	cmp	r0, #0
 802fa52:	f43f ade0 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802fa56:	b13e      	cbz	r6, 802fa68 <__ssvfiscanf_r+0x5c0>
 802fa58:	4580      	cmp	r8, r0
 802fa5a:	d905      	bls.n	802fa68 <__ssvfiscanf_r+0x5c0>
 802fa5c:	4601      	mov	r1, r0
 802fa5e:	6830      	ldr	r0, [r6, #0]
 802fa60:	f003 fc96 	bl	8033390 <realloc>
 802fa64:	b100      	cbz	r0, 802fa68 <__ssvfiscanf_r+0x5c0>
 802fa66:	6030      	str	r0, [r6, #0]
 802fa68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fa6a:	442b      	add	r3, r5
 802fa6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fa6e:	e780      	b.n	802f972 <__ssvfiscanf_r+0x4ca>
 802fa70:	0802b6f9 	.word	0x0802b6f9
 802fa74:	0803b0d1 	.word	0x0803b0d1
 802fa78:	2b00      	cmp	r3, #0
 802fa7a:	bf08      	it	eq
 802fa7c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802fa80:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fa82:	693b      	ldr	r3, [r7, #16]
 802fa84:	2d00      	cmp	r5, #0
 802fa86:	f000 8100 	beq.w	802fc8a <__ssvfiscanf_r+0x7e2>
 802fa8a:	2b00      	cmp	r3, #0
 802fa8c:	f040 80a5 	bne.w	802fbda <__ssvfiscanf_r+0x732>
 802fa90:	6a3b      	ldr	r3, [r7, #32]
 802fa92:	0631      	lsls	r1, r6, #24
 802fa94:	f853 5b04 	ldr.w	r5, [r3], #4
 802fa98:	623b      	str	r3, [r7, #32]
 802fa9a:	f140 80a5 	bpl.w	802fbe8 <__ssvfiscanf_r+0x740>
 802fa9e:	2d00      	cmp	r5, #0
 802faa0:	f43f ae55 	beq.w	802f74e <__ssvfiscanf_r+0x2a6>
 802faa4:	2080      	movs	r0, #128	@ 0x80
 802faa6:	f7fe fce9 	bl	802e47c <malloc>
 802faaa:	4680      	mov	r8, r0
 802faac:	2800      	cmp	r0, #0
 802faae:	f43f ae4b 	beq.w	802f748 <__ssvfiscanf_r+0x2a0>
 802fab2:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 802fab6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802faba:	6028      	str	r0, [r5, #0]
 802fabc:	429e      	cmp	r6, r3
 802fabe:	d314      	bcc.n	802faea <__ssvfiscanf_r+0x642>
 802fac0:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802fac4:	4293      	cmp	r3, r2
 802fac6:	f200 8403 	bhi.w	80302d0 <__ssvfiscanf_r+0xe28>
 802faca:	3308      	adds	r3, #8
 802facc:	fa1f f983 	uxth.w	r9, r3
 802fad0:	f8db 0000 	ldr.w	r0, [fp]
 802fad4:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802fad8:	f003 fc5a 	bl	8033390 <realloc>
 802fadc:	2800      	cmp	r0, #0
 802fade:	f000 83f7 	beq.w	80302d0 <__ssvfiscanf_r+0xe28>
 802fae2:	f8cb 0000 	str.w	r0, [fp]
 802fae6:	f8ab 9004 	strh.w	r9, [fp, #4]
 802faea:	f8db 3000 	ldr.w	r3, [fp]
 802faee:	1c72      	adds	r2, r6, #1
 802faf0:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802faf4:	46aa      	mov	sl, r5
 802faf6:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fafa:	4645      	mov	r5, r8
 802fafc:	f04f 0920 	mov.w	r9, #32
 802fb00:	2600      	movs	r6, #0
 802fb02:	f7fd fbfd 	bl	802d300 <__locale_mb_cur_max>
 802fb06:	4286      	cmp	r6, r0
 802fb08:	f43f ad85 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802fb0c:	1c73      	adds	r3, r6, #1
 802fb0e:	607b      	str	r3, [r7, #4]
 802fb10:	6823      	ldr	r3, [r4, #0]
 802fb12:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802fb16:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fb1a:	558a      	strb	r2, [r1, r6]
 802fb1c:	6862      	ldr	r2, [r4, #4]
 802fb1e:	3a01      	subs	r2, #1
 802fb20:	e9c4 3200 	strd	r3, r2, [r4]
 802fb24:	69bb      	ldr	r3, [r7, #24]
 802fb26:	2b03      	cmp	r3, #3
 802fb28:	d102      	bne.n	802fb30 <__ssvfiscanf_r+0x688>
 802fb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fb2c:	2b04      	cmp	r3, #4
 802fb2e:	d005      	beq.n	802fb3c <__ssvfiscanf_r+0x694>
 802fb30:	2208      	movs	r2, #8
 802fb32:	2100      	movs	r1, #0
 802fb34:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 802fb38:	f7fc fa5a 	bl	802bff0 <memset>
 802fb3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 802fb40:	9300      	str	r3, [sp, #0]
 802fb42:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802fb46:	687b      	ldr	r3, [r7, #4]
 802fb48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fb4a:	4629      	mov	r1, r5
 802fb4c:	f004 ffda 	bl	8034b04 <_mbrtowc_r>
 802fb50:	1c42      	adds	r2, r0, #1
 802fb52:	61b8      	str	r0, [r7, #24]
 802fb54:	f43f ad5f 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802fb58:	2800      	cmp	r0, #0
 802fb5a:	d14a      	bne.n	802fbf2 <__ssvfiscanf_r+0x74a>
 802fb5c:	6028      	str	r0, [r5, #0]
 802fb5e:	682e      	ldr	r6, [r5, #0]
 802fb60:	1c73      	adds	r3, r6, #1
 802fb62:	d056      	beq.n	802fc12 <__ssvfiscanf_r+0x76a>
 802fb64:	2208      	movs	r2, #8
 802fb66:	2100      	movs	r1, #0
 802fb68:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802fb6c:	f7fc fa40 	bl	802bff0 <memset>
 802fb70:	4b99      	ldr	r3, [pc, #612]	@ (802fdd8 <__ssvfiscanf_r+0x930>)
 802fb72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fb74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802fb78:	603b      	str	r3, [r7, #0]
 802fb7a:	4632      	mov	r2, r6
 802fb7c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802fb80:	683e      	ldr	r6, [r7, #0]
 802fb82:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802fb86:	47b0      	blx	r6
 802fb88:	2801      	cmp	r0, #1
 802fb8a:	d144      	bne.n	802fc16 <__ssvfiscanf_r+0x76e>
 802fb8c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 802fb90:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802fb94:	5c9b      	ldrb	r3, [r3, r2]
 802fb96:	2b00      	cmp	r3, #0
 802fb98:	d148      	bne.n	802fc2c <__ssvfiscanf_r+0x784>
 802fb9a:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 802fb9e:	687b      	ldr	r3, [r7, #4]
 802fba0:	2b00      	cmp	r3, #0
 802fba2:	d13a      	bne.n	802fc1a <__ssvfiscanf_r+0x772>
 802fba4:	693b      	ldr	r3, [r7, #16]
 802fba6:	2b00      	cmp	r3, #0
 802fba8:	f47f ac9f 	bne.w	802f4ea <__ssvfiscanf_r+0x42>
 802fbac:	602b      	str	r3, [r5, #0]
 802fbae:	f1ba 0f00 	cmp.w	sl, #0
 802fbb2:	f43f aede 	beq.w	802f972 <__ssvfiscanf_r+0x4ca>
 802fbb6:	eba5 0108 	sub.w	r1, r5, r8
 802fbba:	108b      	asrs	r3, r1, #2
 802fbbc:	3301      	adds	r3, #1
 802fbbe:	4599      	cmp	r9, r3
 802fbc0:	f67f aed7 	bls.w	802f972 <__ssvfiscanf_r+0x4ca>
 802fbc4:	f8da 0000 	ldr.w	r0, [sl]
 802fbc8:	3104      	adds	r1, #4
 802fbca:	f003 fbe1 	bl	8033390 <realloc>
 802fbce:	2800      	cmp	r0, #0
 802fbd0:	f43f aecf 	beq.w	802f972 <__ssvfiscanf_r+0x4ca>
 802fbd4:	f8ca 0000 	str.w	r0, [sl]
 802fbd8:	e6cb      	b.n	802f972 <__ssvfiscanf_r+0x4ca>
 802fbda:	f04f 0900 	mov.w	r9, #0
 802fbde:	46c8      	mov	r8, r9
 802fbe0:	46ca      	mov	sl, r9
 802fbe2:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802fbe6:	e78b      	b.n	802fb00 <__ssvfiscanf_r+0x658>
 802fbe8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802fbec:	46c8      	mov	r8, r9
 802fbee:	46ca      	mov	sl, r9
 802fbf0:	e786      	b.n	802fb00 <__ssvfiscanf_r+0x658>
 802fbf2:	69bb      	ldr	r3, [r7, #24]
 802fbf4:	3302      	adds	r3, #2
 802fbf6:	d1b2      	bne.n	802fb5e <__ssvfiscanf_r+0x6b6>
 802fbf8:	687e      	ldr	r6, [r7, #4]
 802fbfa:	6863      	ldr	r3, [r4, #4]
 802fbfc:	2b00      	cmp	r3, #0
 802fbfe:	dc3f      	bgt.n	802fc80 <__ssvfiscanf_r+0x7d8>
 802fc00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fc02:	4621      	mov	r1, r4
 802fc04:	f7ff fbf9 	bl	802f3fa <__ssrefill_r>
 802fc08:	2800      	cmp	r0, #0
 802fc0a:	d039      	beq.n	802fc80 <__ssvfiscanf_r+0x7d8>
 802fc0c:	2e00      	cmp	r6, #0
 802fc0e:	d0c9      	beq.n	802fba4 <__ssvfiscanf_r+0x6fc>
 802fc10:	e501      	b.n	802f616 <__ssvfiscanf_r+0x16e>
 802fc12:	4632      	mov	r2, r6
 802fc14:	e7bc      	b.n	802fb90 <__ssvfiscanf_r+0x6e8>
 802fc16:	2200      	movs	r2, #0
 802fc18:	e7ba      	b.n	802fb90 <__ssvfiscanf_r+0x6e8>
 802fc1a:	687b      	ldr	r3, [r7, #4]
 802fc1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fc1e:	3b01      	subs	r3, #1
 802fc20:	4622      	mov	r2, r4
 802fc22:	5cf1      	ldrb	r1, [r6, r3]
 802fc24:	607b      	str	r3, [r7, #4]
 802fc26:	f7ff fbad 	bl	802f384 <_sungetc_r>
 802fc2a:	e7b8      	b.n	802fb9e <__ssvfiscanf_r+0x6f6>
 802fc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fc2e:	687a      	ldr	r2, [r7, #4]
 802fc30:	4413      	add	r3, r2
 802fc32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fc34:	69bb      	ldr	r3, [r7, #24]
 802fc36:	2b03      	cmp	r3, #3
 802fc38:	d102      	bne.n	802fc40 <__ssvfiscanf_r+0x798>
 802fc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802fc3c:	2b04      	cmp	r3, #4
 802fc3e:	d002      	beq.n	802fc46 <__ssvfiscanf_r+0x79e>
 802fc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fc42:	3b01      	subs	r3, #1
 802fc44:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fc46:	693b      	ldr	r3, [r7, #16]
 802fc48:	b9c3      	cbnz	r3, 802fc7c <__ssvfiscanf_r+0x7d4>
 802fc4a:	3504      	adds	r5, #4
 802fc4c:	f1ba 0f00 	cmp.w	sl, #0
 802fc50:	d014      	beq.n	802fc7c <__ssvfiscanf_r+0x7d4>
 802fc52:	eba5 0608 	sub.w	r6, r5, r8
 802fc56:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802fc5a:	d80d      	bhi.n	802fc78 <__ssvfiscanf_r+0x7d0>
 802fc5c:	4640      	mov	r0, r8
 802fc5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802fc62:	f003 fb95 	bl	8033390 <realloc>
 802fc66:	4680      	mov	r8, r0
 802fc68:	2800      	cmp	r0, #0
 802fc6a:	f43f ad6d 	beq.w	802f748 <__ssvfiscanf_r+0x2a0>
 802fc6e:	1985      	adds	r5, r0, r6
 802fc70:	f8ca 0000 	str.w	r0, [sl]
 802fc74:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fc78:	693e      	ldr	r6, [r7, #16]
 802fc7a:	e7be      	b.n	802fbfa <__ssvfiscanf_r+0x752>
 802fc7c:	2600      	movs	r6, #0
 802fc7e:	e7bc      	b.n	802fbfa <__ssvfiscanf_r+0x752>
 802fc80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fc82:	2b00      	cmp	r3, #0
 802fc84:	f47f af3d 	bne.w	802fb02 <__ssvfiscanf_r+0x65a>
 802fc88:	e78c      	b.n	802fba4 <__ssvfiscanf_r+0x6fc>
 802fc8a:	b1e3      	cbz	r3, 802fcc6 <__ssvfiscanf_r+0x81e>
 802fc8c:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 802fc90:	6823      	ldr	r3, [r4, #0]
 802fc92:	781a      	ldrb	r2, [r3, #0]
 802fc94:	5cb2      	ldrb	r2, [r6, r2]
 802fc96:	b91a      	cbnz	r2, 802fca0 <__ssvfiscanf_r+0x7f8>
 802fc98:	2d00      	cmp	r5, #0
 802fc9a:	f47f ae92 	bne.w	802f9c2 <__ssvfiscanf_r+0x51a>
 802fc9e:	e450      	b.n	802f542 <__ssvfiscanf_r+0x9a>
 802fca0:	3301      	adds	r3, #1
 802fca2:	6862      	ldr	r2, [r4, #4]
 802fca4:	6023      	str	r3, [r4, #0]
 802fca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fca8:	3501      	adds	r5, #1
 802fcaa:	3a01      	subs	r2, #1
 802fcac:	42ab      	cmp	r3, r5
 802fcae:	6062      	str	r2, [r4, #4]
 802fcb0:	f43f ae87 	beq.w	802f9c2 <__ssvfiscanf_r+0x51a>
 802fcb4:	2a00      	cmp	r2, #0
 802fcb6:	dceb      	bgt.n	802fc90 <__ssvfiscanf_r+0x7e8>
 802fcb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fcba:	4621      	mov	r1, r4
 802fcbc:	f7ff fb9d 	bl	802f3fa <__ssrefill_r>
 802fcc0:	2800      	cmp	r0, #0
 802fcc2:	d0e5      	beq.n	802fc90 <__ssvfiscanf_r+0x7e8>
 802fcc4:	e67d      	b.n	802f9c2 <__ssvfiscanf_r+0x51a>
 802fcc6:	6a3b      	ldr	r3, [r7, #32]
 802fcc8:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 802fccc:	f853 5b04 	ldr.w	r5, [r3], #4
 802fcd0:	623b      	str	r3, [r7, #32]
 802fcd2:	d07e      	beq.n	802fdd2 <__ssvfiscanf_r+0x92a>
 802fcd4:	2d00      	cmp	r5, #0
 802fcd6:	f43f ac34 	beq.w	802f542 <__ssvfiscanf_r+0x9a>
 802fcda:	2020      	movs	r0, #32
 802fcdc:	f7fe fbce 	bl	802e47c <malloc>
 802fce0:	4680      	mov	r8, r0
 802fce2:	2800      	cmp	r0, #0
 802fce4:	f43f ac9c 	beq.w	802f620 <__ssvfiscanf_r+0x178>
 802fce8:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802fcec:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 802fcf0:	6028      	str	r0, [r5, #0]
 802fcf2:	45b1      	cmp	r9, r6
 802fcf4:	d312      	bcc.n	802fd1c <__ssvfiscanf_r+0x874>
 802fcf6:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802fcfa:	429e      	cmp	r6, r3
 802fcfc:	f200 82e8 	bhi.w	80302d0 <__ssvfiscanf_r+0xe28>
 802fd00:	3608      	adds	r6, #8
 802fd02:	b2b6      	uxth	r6, r6
 802fd04:	f8db 0000 	ldr.w	r0, [fp]
 802fd08:	00b1      	lsls	r1, r6, #2
 802fd0a:	f003 fb41 	bl	8033390 <realloc>
 802fd0e:	2800      	cmp	r0, #0
 802fd10:	f000 82de 	beq.w	80302d0 <__ssvfiscanf_r+0xe28>
 802fd14:	f8cb 0000 	str.w	r0, [fp]
 802fd18:	f8ab 6004 	strh.w	r6, [fp, #4]
 802fd1c:	f8db 3000 	ldr.w	r3, [fp]
 802fd20:	f109 0201 	add.w	r2, r9, #1
 802fd24:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802fd28:	46aa      	mov	sl, r5
 802fd2a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fd2e:	4645      	mov	r5, r8
 802fd30:	f04f 0920 	mov.w	r9, #32
 802fd34:	462e      	mov	r6, r5
 802fd36:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 802fd3a:	6823      	ldr	r3, [r4, #0]
 802fd3c:	781a      	ldrb	r2, [r3, #0]
 802fd3e:	f818 2002 	ldrb.w	r2, [r8, r2]
 802fd42:	b362      	cbz	r2, 802fd9e <__ssvfiscanf_r+0x8f6>
 802fd44:	6862      	ldr	r2, [r4, #4]
 802fd46:	3a01      	subs	r2, #1
 802fd48:	6062      	str	r2, [r4, #4]
 802fd4a:	1c5a      	adds	r2, r3, #1
 802fd4c:	6022      	str	r2, [r4, #0]
 802fd4e:	781b      	ldrb	r3, [r3, #0]
 802fd50:	f805 3b01 	strb.w	r3, [r5], #1
 802fd54:	f1ba 0f00 	cmp.w	sl, #0
 802fd58:	d011      	beq.n	802fd7e <__ssvfiscanf_r+0x8d6>
 802fd5a:	1bab      	subs	r3, r5, r6
 802fd5c:	454b      	cmp	r3, r9
 802fd5e:	d30e      	bcc.n	802fd7e <__ssvfiscanf_r+0x8d6>
 802fd60:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802fd64:	4630      	mov	r0, r6
 802fd66:	4649      	mov	r1, r9
 802fd68:	613b      	str	r3, [r7, #16]
 802fd6a:	f003 fb11 	bl	8033390 <realloc>
 802fd6e:	4606      	mov	r6, r0
 802fd70:	2800      	cmp	r0, #0
 802fd72:	f43f ac55 	beq.w	802f620 <__ssvfiscanf_r+0x178>
 802fd76:	693b      	ldr	r3, [r7, #16]
 802fd78:	f8ca 0000 	str.w	r0, [sl]
 802fd7c:	18c5      	adds	r5, r0, r3
 802fd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fd80:	3b01      	subs	r3, #1
 802fd82:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fd84:	d00b      	beq.n	802fd9e <__ssvfiscanf_r+0x8f6>
 802fd86:	6863      	ldr	r3, [r4, #4]
 802fd88:	2b00      	cmp	r3, #0
 802fd8a:	dcd6      	bgt.n	802fd3a <__ssvfiscanf_r+0x892>
 802fd8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802fd8e:	4621      	mov	r1, r4
 802fd90:	f7ff fb33 	bl	802f3fa <__ssrefill_r>
 802fd94:	2800      	cmp	r0, #0
 802fd96:	d0d0      	beq.n	802fd3a <__ssvfiscanf_r+0x892>
 802fd98:	42b5      	cmp	r5, r6
 802fd9a:	f43f ac3c 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802fd9e:	1bae      	subs	r6, r5, r6
 802fda0:	f43f abcf 	beq.w	802f542 <__ssvfiscanf_r+0x9a>
 802fda4:	2300      	movs	r3, #0
 802fda6:	702b      	strb	r3, [r5, #0]
 802fda8:	f1ba 0f00 	cmp.w	sl, #0
 802fdac:	d009      	beq.n	802fdc2 <__ssvfiscanf_r+0x91a>
 802fdae:	1c71      	adds	r1, r6, #1
 802fdb0:	4589      	cmp	r9, r1
 802fdb2:	d906      	bls.n	802fdc2 <__ssvfiscanf_r+0x91a>
 802fdb4:	f8da 0000 	ldr.w	r0, [sl]
 802fdb8:	f003 faea 	bl	8033390 <realloc>
 802fdbc:	b108      	cbz	r0, 802fdc2 <__ssvfiscanf_r+0x91a>
 802fdbe:	f8ca 0000 	str.w	r0, [sl]
 802fdc2:	69fb      	ldr	r3, [r7, #28]
 802fdc4:	3301      	adds	r3, #1
 802fdc6:	61fb      	str	r3, [r7, #28]
 802fdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802fdca:	4433      	add	r3, r6
 802fdcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802fdce:	f7ff bb8c 	b.w	802f4ea <__ssvfiscanf_r+0x42>
 802fdd2:	46ca      	mov	sl, r9
 802fdd4:	e7ae      	b.n	802fd34 <__ssvfiscanf_r+0x88c>
 802fdd6:	bf00      	nop
 802fdd8:	2000016c 	.word	0x2000016c
 802fddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802fdde:	2b00      	cmp	r3, #0
 802fde0:	bf08      	it	eq
 802fde2:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802fde6:	f016 0501 	ands.w	r5, r6, #1
 802fdea:	62bb      	str	r3, [r7, #40]	@ 0x28
 802fdec:	f006 0810 	and.w	r8, r6, #16
 802fdf0:	f000 80e1 	beq.w	802ffb6 <__ssvfiscanf_r+0xb0e>
 802fdf4:	f1b8 0f00 	cmp.w	r8, #0
 802fdf8:	f040 8089 	bne.w	802ff0e <__ssvfiscanf_r+0xa66>
 802fdfc:	6a3b      	ldr	r3, [r7, #32]
 802fdfe:	0636      	lsls	r6, r6, #24
 802fe00:	f853 5b04 	ldr.w	r5, [r3], #4
 802fe04:	623b      	str	r3, [r7, #32]
 802fe06:	f140 8089 	bpl.w	802ff1c <__ssvfiscanf_r+0xa74>
 802fe0a:	2d00      	cmp	r5, #0
 802fe0c:	f43f ac9f 	beq.w	802f74e <__ssvfiscanf_r+0x2a6>
 802fe10:	2080      	movs	r0, #128	@ 0x80
 802fe12:	f7fe fb33 	bl	802e47c <malloc>
 802fe16:	4606      	mov	r6, r0
 802fe18:	2800      	cmp	r0, #0
 802fe1a:	f43f ac95 	beq.w	802f748 <__ssvfiscanf_r+0x2a0>
 802fe1e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 802fe22:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802fe26:	6028      	str	r0, [r5, #0]
 802fe28:	4599      	cmp	r9, r3
 802fe2a:	d314      	bcc.n	802fe56 <__ssvfiscanf_r+0x9ae>
 802fe2c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802fe30:	4293      	cmp	r3, r2
 802fe32:	f200 824d 	bhi.w	80302d0 <__ssvfiscanf_r+0xe28>
 802fe36:	3308      	adds	r3, #8
 802fe38:	fa1f fa83 	uxth.w	sl, r3
 802fe3c:	f8db 0000 	ldr.w	r0, [fp]
 802fe40:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802fe44:	f003 faa4 	bl	8033390 <realloc>
 802fe48:	2800      	cmp	r0, #0
 802fe4a:	f000 8241 	beq.w	80302d0 <__ssvfiscanf_r+0xe28>
 802fe4e:	f8cb 0000 	str.w	r0, [fp]
 802fe52:	f8ab a004 	strh.w	sl, [fp, #4]
 802fe56:	f8db 3000 	ldr.w	r3, [fp]
 802fe5a:	f109 0201 	add.w	r2, r9, #1
 802fe5e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802fe62:	46aa      	mov	sl, r5
 802fe64:	f8ab 2006 	strh.w	r2, [fp, #6]
 802fe68:	4635      	mov	r5, r6
 802fe6a:	f04f 0920 	mov.w	r9, #32
 802fe6e:	2300      	movs	r3, #0
 802fe70:	6822      	ldr	r2, [r4, #0]
 802fe72:	499e      	ldr	r1, [pc, #632]	@ (80300ec <__ssvfiscanf_r+0xc44>)
 802fe74:	7812      	ldrb	r2, [r2, #0]
 802fe76:	5c8a      	ldrb	r2, [r1, r2]
 802fe78:	0711      	lsls	r1, r2, #28
 802fe7a:	d43c      	bmi.n	802fef6 <__ssvfiscanf_r+0xa4e>
 802fe7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802fe7e:	2a00      	cmp	r2, #0
 802fe80:	d039      	beq.n	802fef6 <__ssvfiscanf_r+0xa4e>
 802fe82:	613b      	str	r3, [r7, #16]
 802fe84:	f7fd fa3c 	bl	802d300 <__locale_mb_cur_max>
 802fe88:	693b      	ldr	r3, [r7, #16]
 802fe8a:	4298      	cmp	r0, r3
 802fe8c:	f43f abc3 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802fe90:	1c5a      	adds	r2, r3, #1
 802fe92:	613a      	str	r2, [r7, #16]
 802fe94:	6822      	ldr	r2, [r4, #0]
 802fe96:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802fe9a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802fe9e:	54c8      	strb	r0, [r1, r3]
 802fea0:	6863      	ldr	r3, [r4, #4]
 802fea2:	3b01      	subs	r3, #1
 802fea4:	e9c4 2300 	strd	r2, r3, [r4]
 802fea8:	69bb      	ldr	r3, [r7, #24]
 802feaa:	2b03      	cmp	r3, #3
 802feac:	d102      	bne.n	802feb4 <__ssvfiscanf_r+0xa0c>
 802feae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802feb0:	2b04      	cmp	r3, #4
 802feb2:	d005      	beq.n	802fec0 <__ssvfiscanf_r+0xa18>
 802feb4:	2208      	movs	r2, #8
 802feb6:	2100      	movs	r1, #0
 802feb8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802febc:	f7fc f898 	bl	802bff0 <memset>
 802fec0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802fec4:	9300      	str	r3, [sp, #0]
 802fec6:	693b      	ldr	r3, [r7, #16]
 802fec8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802feca:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802fece:	4629      	mov	r1, r5
 802fed0:	f004 fe18 	bl	8034b04 <_mbrtowc_r>
 802fed4:	4603      	mov	r3, r0
 802fed6:	61b8      	str	r0, [r7, #24]
 802fed8:	1c58      	adds	r0, r3, #1
 802feda:	f43f ab9c 	beq.w	802f616 <__ssvfiscanf_r+0x16e>
 802fede:	bb0b      	cbnz	r3, 802ff24 <__ssvfiscanf_r+0xa7c>
 802fee0:	602b      	str	r3, [r5, #0]
 802fee2:	6828      	ldr	r0, [r5, #0]
 802fee4:	f004 fe28 	bl	8034b38 <iswspace>
 802fee8:	4603      	mov	r3, r0
 802feea:	2800      	cmp	r0, #0
 802feec:	d037      	beq.n	802ff5e <__ssvfiscanf_r+0xab6>
 802feee:	693a      	ldr	r2, [r7, #16]
 802fef0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802fef4:	bb4a      	cbnz	r2, 802ff4a <__ssvfiscanf_r+0xaa2>
 802fef6:	f1b8 0f00 	cmp.w	r8, #0
 802fefa:	f47f aaf6 	bne.w	802f4ea <__ssvfiscanf_r+0x42>
 802fefe:	f8c5 8000 	str.w	r8, [r5]
 802ff02:	f1ba 0f00 	cmp.w	sl, #0
 802ff06:	f43f ad34 	beq.w	802f972 <__ssvfiscanf_r+0x4ca>
 802ff0a:	1ba9      	subs	r1, r5, r6
 802ff0c:	e655      	b.n	802fbba <__ssvfiscanf_r+0x712>
 802ff0e:	f04f 0900 	mov.w	r9, #0
 802ff12:	464e      	mov	r6, r9
 802ff14:	46ca      	mov	sl, r9
 802ff16:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 802ff1a:	e7a8      	b.n	802fe6e <__ssvfiscanf_r+0x9c6>
 802ff1c:	46c1      	mov	r9, r8
 802ff1e:	4646      	mov	r6, r8
 802ff20:	46c2      	mov	sl, r8
 802ff22:	e7a4      	b.n	802fe6e <__ssvfiscanf_r+0x9c6>
 802ff24:	69bb      	ldr	r3, [r7, #24]
 802ff26:	3302      	adds	r3, #2
 802ff28:	d1db      	bne.n	802fee2 <__ssvfiscanf_r+0xa3a>
 802ff2a:	693b      	ldr	r3, [r7, #16]
 802ff2c:	6862      	ldr	r2, [r4, #4]
 802ff2e:	2a00      	cmp	r2, #0
 802ff30:	dc9e      	bgt.n	802fe70 <__ssvfiscanf_r+0x9c8>
 802ff32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802ff34:	613b      	str	r3, [r7, #16]
 802ff36:	4621      	mov	r1, r4
 802ff38:	f7ff fa5f 	bl	802f3fa <__ssrefill_r>
 802ff3c:	693b      	ldr	r3, [r7, #16]
 802ff3e:	2800      	cmp	r0, #0
 802ff40:	d096      	beq.n	802fe70 <__ssvfiscanf_r+0x9c8>
 802ff42:	2b00      	cmp	r3, #0
 802ff44:	f47f ab67 	bne.w	802f616 <__ssvfiscanf_r+0x16e>
 802ff48:	e7d5      	b.n	802fef6 <__ssvfiscanf_r+0xa4e>
 802ff4a:	693a      	ldr	r2, [r7, #16]
 802ff4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802ff4e:	3a01      	subs	r2, #1
 802ff50:	613a      	str	r2, [r7, #16]
 802ff52:	6939      	ldr	r1, [r7, #16]
 802ff54:	4622      	mov	r2, r4
 802ff56:	5c59      	ldrb	r1, [r3, r1]
 802ff58:	f7ff fa14 	bl	802f384 <_sungetc_r>
 802ff5c:	e7c7      	b.n	802feee <__ssvfiscanf_r+0xa46>
 802ff5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802ff60:	6939      	ldr	r1, [r7, #16]
 802ff62:	440a      	add	r2, r1
 802ff64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802ff66:	69ba      	ldr	r2, [r7, #24]
 802ff68:	2a03      	cmp	r2, #3
 802ff6a:	d102      	bne.n	802ff72 <__ssvfiscanf_r+0xaca>
 802ff6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802ff6e:	2a04      	cmp	r2, #4
 802ff70:	d002      	beq.n	802ff78 <__ssvfiscanf_r+0xad0>
 802ff72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802ff74:	3a01      	subs	r2, #1
 802ff76:	62ba      	str	r2, [r7, #40]	@ 0x28
 802ff78:	f1b8 0f00 	cmp.w	r8, #0
 802ff7c:	d1d6      	bne.n	802ff2c <__ssvfiscanf_r+0xa84>
 802ff7e:	3504      	adds	r5, #4
 802ff80:	f1ba 0f00 	cmp.w	sl, #0
 802ff84:	d015      	beq.n	802ffb2 <__ssvfiscanf_r+0xb0a>
 802ff86:	1bab      	subs	r3, r5, r6
 802ff88:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802ff8c:	d80f      	bhi.n	802ffae <__ssvfiscanf_r+0xb06>
 802ff8e:	4630      	mov	r0, r6
 802ff90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802ff94:	613b      	str	r3, [r7, #16]
 802ff96:	f003 f9fb 	bl	8033390 <realloc>
 802ff9a:	4606      	mov	r6, r0
 802ff9c:	2800      	cmp	r0, #0
 802ff9e:	f43f abd3 	beq.w	802f748 <__ssvfiscanf_r+0x2a0>
 802ffa2:	693b      	ldr	r3, [r7, #16]
 802ffa4:	f8ca 0000 	str.w	r0, [sl]
 802ffa8:	18c5      	adds	r5, r0, r3
 802ffaa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802ffae:	4643      	mov	r3, r8
 802ffb0:	e7bc      	b.n	802ff2c <__ssvfiscanf_r+0xa84>
 802ffb2:	4653      	mov	r3, sl
 802ffb4:	e7ba      	b.n	802ff2c <__ssvfiscanf_r+0xa84>
 802ffb6:	f1b8 0f00 	cmp.w	r8, #0
 802ffba:	d019      	beq.n	802fff0 <__ssvfiscanf_r+0xb48>
 802ffbc:	4e4b      	ldr	r6, [pc, #300]	@ (80300ec <__ssvfiscanf_r+0xc44>)
 802ffbe:	6823      	ldr	r3, [r4, #0]
 802ffc0:	781a      	ldrb	r2, [r3, #0]
 802ffc2:	5cb2      	ldrb	r2, [r6, r2]
 802ffc4:	0712      	lsls	r2, r2, #28
 802ffc6:	f53f acfc 	bmi.w	802f9c2 <__ssvfiscanf_r+0x51a>
 802ffca:	3301      	adds	r3, #1
 802ffcc:	6862      	ldr	r2, [r4, #4]
 802ffce:	6023      	str	r3, [r4, #0]
 802ffd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ffd2:	3501      	adds	r5, #1
 802ffd4:	3a01      	subs	r2, #1
 802ffd6:	429d      	cmp	r5, r3
 802ffd8:	6062      	str	r2, [r4, #4]
 802ffda:	f43f acf2 	beq.w	802f9c2 <__ssvfiscanf_r+0x51a>
 802ffde:	2a00      	cmp	r2, #0
 802ffe0:	dced      	bgt.n	802ffbe <__ssvfiscanf_r+0xb16>
 802ffe2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802ffe4:	4621      	mov	r1, r4
 802ffe6:	f7ff fa08 	bl	802f3fa <__ssrefill_r>
 802ffea:	2800      	cmp	r0, #0
 802ffec:	d0e7      	beq.n	802ffbe <__ssvfiscanf_r+0xb16>
 802ffee:	e4e8      	b.n	802f9c2 <__ssvfiscanf_r+0x51a>
 802fff0:	6a3b      	ldr	r3, [r7, #32]
 802fff2:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802fff6:	f853 5b04 	ldr.w	r5, [r3], #4
 802fffa:	623b      	str	r3, [r7, #32]
 802fffc:	d074      	beq.n	80300e8 <__ssvfiscanf_r+0xc40>
 802fffe:	2d00      	cmp	r5, #0
 8030000:	f43f aa9f 	beq.w	802f542 <__ssvfiscanf_r+0x9a>
 8030004:	2020      	movs	r0, #32
 8030006:	f7fe fa39 	bl	802e47c <malloc>
 803000a:	4680      	mov	r8, r0
 803000c:	2800      	cmp	r0, #0
 803000e:	f43f ab07 	beq.w	802f620 <__ssvfiscanf_r+0x178>
 8030012:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8030016:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 803001a:	6028      	str	r0, [r5, #0]
 803001c:	45b1      	cmp	r9, r6
 803001e:	d312      	bcc.n	8030046 <__ssvfiscanf_r+0xb9e>
 8030020:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8030024:	429e      	cmp	r6, r3
 8030026:	f200 8153 	bhi.w	80302d0 <__ssvfiscanf_r+0xe28>
 803002a:	3608      	adds	r6, #8
 803002c:	b2b6      	uxth	r6, r6
 803002e:	f8db 0000 	ldr.w	r0, [fp]
 8030032:	00b1      	lsls	r1, r6, #2
 8030034:	f003 f9ac 	bl	8033390 <realloc>
 8030038:	2800      	cmp	r0, #0
 803003a:	f000 8149 	beq.w	80302d0 <__ssvfiscanf_r+0xe28>
 803003e:	f8cb 0000 	str.w	r0, [fp]
 8030042:	f8ab 6004 	strh.w	r6, [fp, #4]
 8030046:	f8db 3000 	ldr.w	r3, [fp]
 803004a:	f109 0201 	add.w	r2, r9, #1
 803004e:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8030052:	46aa      	mov	sl, r5
 8030054:	f8ab 2006 	strh.w	r2, [fp, #6]
 8030058:	4645      	mov	r5, r8
 803005a:	2620      	movs	r6, #32
 803005c:	46a9      	mov	r9, r5
 803005e:	6823      	ldr	r3, [r4, #0]
 8030060:	4922      	ldr	r1, [pc, #136]	@ (80300ec <__ssvfiscanf_r+0xc44>)
 8030062:	781a      	ldrb	r2, [r3, #0]
 8030064:	5c8a      	ldrb	r2, [r1, r2]
 8030066:	0710      	lsls	r0, r2, #28
 8030068:	d428      	bmi.n	80300bc <__ssvfiscanf_r+0xc14>
 803006a:	6862      	ldr	r2, [r4, #4]
 803006c:	3a01      	subs	r2, #1
 803006e:	6062      	str	r2, [r4, #4]
 8030070:	1c5a      	adds	r2, r3, #1
 8030072:	6022      	str	r2, [r4, #0]
 8030074:	781b      	ldrb	r3, [r3, #0]
 8030076:	f805 3b01 	strb.w	r3, [r5], #1
 803007a:	f1ba 0f00 	cmp.w	sl, #0
 803007e:	d010      	beq.n	80300a2 <__ssvfiscanf_r+0xbfa>
 8030080:	eba5 0809 	sub.w	r8, r5, r9
 8030084:	45b0      	cmp	r8, r6
 8030086:	d30c      	bcc.n	80300a2 <__ssvfiscanf_r+0xbfa>
 8030088:	0076      	lsls	r6, r6, #1
 803008a:	4648      	mov	r0, r9
 803008c:	4631      	mov	r1, r6
 803008e:	f003 f97f 	bl	8033390 <realloc>
 8030092:	4681      	mov	r9, r0
 8030094:	2800      	cmp	r0, #0
 8030096:	f43f aac3 	beq.w	802f620 <__ssvfiscanf_r+0x178>
 803009a:	eb00 0508 	add.w	r5, r0, r8
 803009e:	f8ca 0000 	str.w	r0, [sl]
 80300a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80300a4:	3b01      	subs	r3, #1
 80300a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80300a8:	d008      	beq.n	80300bc <__ssvfiscanf_r+0xc14>
 80300aa:	6863      	ldr	r3, [r4, #4]
 80300ac:	2b00      	cmp	r3, #0
 80300ae:	dcd6      	bgt.n	803005e <__ssvfiscanf_r+0xbb6>
 80300b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80300b2:	4621      	mov	r1, r4
 80300b4:	f7ff f9a1 	bl	802f3fa <__ssrefill_r>
 80300b8:	2800      	cmp	r0, #0
 80300ba:	d0d0      	beq.n	803005e <__ssvfiscanf_r+0xbb6>
 80300bc:	2300      	movs	r3, #0
 80300be:	702b      	strb	r3, [r5, #0]
 80300c0:	eba5 0509 	sub.w	r5, r5, r9
 80300c4:	f1ba 0f00 	cmp.w	sl, #0
 80300c8:	f43f acce 	beq.w	802fa68 <__ssvfiscanf_r+0x5c0>
 80300cc:	1c69      	adds	r1, r5, #1
 80300ce:	428e      	cmp	r6, r1
 80300d0:	f67f acca 	bls.w	802fa68 <__ssvfiscanf_r+0x5c0>
 80300d4:	f8da 0000 	ldr.w	r0, [sl]
 80300d8:	f003 f95a 	bl	8033390 <realloc>
 80300dc:	2800      	cmp	r0, #0
 80300de:	f43f acc3 	beq.w	802fa68 <__ssvfiscanf_r+0x5c0>
 80300e2:	f8ca 0000 	str.w	r0, [sl]
 80300e6:	e4bf      	b.n	802fa68 <__ssvfiscanf_r+0x5c0>
 80300e8:	46b2      	mov	sl, r6
 80300ea:	e7b7      	b.n	803005c <__ssvfiscanf_r+0xbb4>
 80300ec:	0803b0d1 	.word	0x0803b0d1
 80300f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80300f2:	3b01      	subs	r3, #1
 80300f4:	2b26      	cmp	r3, #38	@ 0x26
 80300f6:	bf81      	itttt	hi
 80300f8:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 80300fa:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 80300fe:	2327      	movhi	r3, #39	@ 0x27
 8030100:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8030102:	bf98      	it	ls
 8030104:	f04f 0800 	movls.w	r8, #0
 8030108:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 803010c:	f04f 0900 	mov.w	r9, #0
 8030110:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8030114:	6822      	ldr	r2, [r4, #0]
 8030116:	7813      	ldrb	r3, [r2, #0]
 8030118:	2b39      	cmp	r3, #57	@ 0x39
 803011a:	d80f      	bhi.n	803013c <__ssvfiscanf_r+0xc94>
 803011c:	2b2a      	cmp	r3, #42	@ 0x2a
 803011e:	d91a      	bls.n	8030156 <__ssvfiscanf_r+0xcae>
 8030120:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8030124:	290e      	cmp	r1, #14
 8030126:	d816      	bhi.n	8030156 <__ssvfiscanf_r+0xcae>
 8030128:	e8df f001 	tbb	[pc, r1]
 803012c:	15771577 	.word	0x15771577
 8030130:	67673e15 	.word	0x67673e15
 8030134:	67676767 	.word	0x67676767
 8030138:	6f67      	.short	0x6f67
 803013a:	6f          	.byte	0x6f
 803013b:	00          	.byte	0x00
 803013c:	2b66      	cmp	r3, #102	@ 0x66
 803013e:	d831      	bhi.n	80301a4 <__ssvfiscanf_r+0xcfc>
 8030140:	2b60      	cmp	r3, #96	@ 0x60
 8030142:	d803      	bhi.n	803014c <__ssvfiscanf_r+0xca4>
 8030144:	2b46      	cmp	r3, #70	@ 0x46
 8030146:	d804      	bhi.n	8030152 <__ssvfiscanf_r+0xcaa>
 8030148:	2b40      	cmp	r3, #64	@ 0x40
 803014a:	d904      	bls.n	8030156 <__ssvfiscanf_r+0xcae>
 803014c:	6979      	ldr	r1, [r7, #20]
 803014e:	290a      	cmp	r1, #10
 8030150:	e061      	b.n	8030216 <__ssvfiscanf_r+0xd6e>
 8030152:	2b58      	cmp	r3, #88	@ 0x58
 8030154:	d066      	beq.n	8030224 <__ssvfiscanf_r+0xd7c>
 8030156:	05f1      	lsls	r1, r6, #23
 8030158:	d511      	bpl.n	803017e <__ssvfiscanf_r+0xcd6>
 803015a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 803015e:	459a      	cmp	sl, r3
 8030160:	d908      	bls.n	8030174 <__ssvfiscanf_r+0xccc>
 8030162:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8030166:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8030168:	4622      	mov	r2, r4
 803016a:	f7ff f90b 	bl	802f384 <_sungetc_r>
 803016e:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8030172:	46c2      	mov	sl, r8
 8030174:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030178:	459a      	cmp	sl, r3
 803017a:	f43f a9e2 	beq.w	802f542 <__ssvfiscanf_r+0x9a>
 803017e:	f016 0210 	ands.w	r2, r6, #16
 8030182:	d16b      	bne.n	803025c <__ssvfiscanf_r+0xdb4>
 8030184:	697b      	ldr	r3, [r7, #20]
 8030186:	f88a 2000 	strb.w	r2, [sl]
 803018a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803018c:	68fd      	ldr	r5, [r7, #12]
 803018e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030192:	47a8      	blx	r5
 8030194:	6a3b      	ldr	r3, [r7, #32]
 8030196:	06b2      	lsls	r2, r6, #26
 8030198:	f103 0804 	add.w	r8, r3, #4
 803019c:	d555      	bpl.n	803024a <__ssvfiscanf_r+0xda2>
 803019e:	681b      	ldr	r3, [r3, #0]
 80301a0:	6018      	str	r0, [r3, #0]
 80301a2:	e057      	b.n	8030254 <__ssvfiscanf_r+0xdac>
 80301a4:	2b78      	cmp	r3, #120	@ 0x78
 80301a6:	e7d5      	b.n	8030154 <__ssvfiscanf_r+0xcac>
 80301a8:	0531      	lsls	r1, r6, #20
 80301aa:	d509      	bpl.n	80301c0 <__ssvfiscanf_r+0xd18>
 80301ac:	6979      	ldr	r1, [r7, #20]
 80301ae:	b919      	cbnz	r1, 80301b8 <__ssvfiscanf_r+0xd10>
 80301b0:	2108      	movs	r1, #8
 80301b2:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80301b6:	6179      	str	r1, [r7, #20]
 80301b8:	0575      	lsls	r5, r6, #21
 80301ba:	d506      	bpl.n	80301ca <__ssvfiscanf_r+0xd22>
 80301bc:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 80301c0:	4655      	mov	r5, sl
 80301c2:	f805 3b01 	strb.w	r3, [r5], #1
 80301c6:	46aa      	mov	sl, r5
 80301c8:	e00b      	b.n	80301e2 <__ssvfiscanf_r+0xd3a>
 80301ca:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 80301ce:	f1b8 0f00 	cmp.w	r8, #0
 80301d2:	d004      	beq.n	80301de <__ssvfiscanf_r+0xd36>
 80301d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80301d6:	3301      	adds	r3, #1
 80301d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80301dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80301de:	f109 0901 	add.w	r9, r9, #1
 80301e2:	6863      	ldr	r3, [r4, #4]
 80301e4:	3b01      	subs	r3, #1
 80301e6:	2b00      	cmp	r3, #0
 80301e8:	6063      	str	r3, [r4, #4]
 80301ea:	dd27      	ble.n	803023c <__ssvfiscanf_r+0xd94>
 80301ec:	3201      	adds	r2, #1
 80301ee:	6022      	str	r2, [r4, #0]
 80301f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80301f2:	3b01      	subs	r3, #1
 80301f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80301f6:	d18d      	bne.n	8030114 <__ssvfiscanf_r+0xc6c>
 80301f8:	e7ad      	b.n	8030156 <__ssvfiscanf_r+0xcae>
 80301fa:	6978      	ldr	r0, [r7, #20]
 80301fc:	4936      	ldr	r1, [pc, #216]	@ (80302d8 <__ssvfiscanf_r+0xe30>)
 80301fe:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030202:	6179      	str	r1, [r7, #20]
 8030204:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8030208:	e7da      	b.n	80301c0 <__ssvfiscanf_r+0xd18>
 803020a:	6978      	ldr	r0, [r7, #20]
 803020c:	4932      	ldr	r1, [pc, #200]	@ (80302d8 <__ssvfiscanf_r+0xe30>)
 803020e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8030212:	6179      	str	r1, [r7, #20]
 8030214:	2908      	cmp	r1, #8
 8030216:	dcf5      	bgt.n	8030204 <__ssvfiscanf_r+0xd5c>
 8030218:	e79d      	b.n	8030156 <__ssvfiscanf_r+0xcae>
 803021a:	0630      	lsls	r0, r6, #24
 803021c:	d59b      	bpl.n	8030156 <__ssvfiscanf_r+0xcae>
 803021e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8030222:	e7cd      	b.n	80301c0 <__ssvfiscanf_r+0xd18>
 8030224:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8030228:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 803022c:	d193      	bne.n	8030156 <__ssvfiscanf_r+0xcae>
 803022e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8030232:	2110      	movs	r1, #16
 8030234:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8030238:	6179      	str	r1, [r7, #20]
 803023a:	e7c1      	b.n	80301c0 <__ssvfiscanf_r+0xd18>
 803023c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803023e:	4621      	mov	r1, r4
 8030240:	f7ff f8db 	bl	802f3fa <__ssrefill_r>
 8030244:	2800      	cmp	r0, #0
 8030246:	d0d3      	beq.n	80301f0 <__ssvfiscanf_r+0xd48>
 8030248:	e785      	b.n	8030156 <__ssvfiscanf_r+0xcae>
 803024a:	0733      	lsls	r3, r6, #28
 803024c:	d50d      	bpl.n	803026a <__ssvfiscanf_r+0xdc2>
 803024e:	6a3b      	ldr	r3, [r7, #32]
 8030250:	681b      	ldr	r3, [r3, #0]
 8030252:	7018      	strb	r0, [r3, #0]
 8030254:	69fb      	ldr	r3, [r7, #28]
 8030256:	3301      	adds	r3, #1
 8030258:	e9c7 3807 	strd	r3, r8, [r7, #28]
 803025c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8030260:	ebaa 0503 	sub.w	r5, sl, r3
 8030264:	444d      	add	r5, r9
 8030266:	f7ff bbac 	b.w	802f9c2 <__ssvfiscanf_r+0x51a>
 803026a:	0775      	lsls	r5, r6, #29
 803026c:	d503      	bpl.n	8030276 <__ssvfiscanf_r+0xdce>
 803026e:	6a3b      	ldr	r3, [r7, #32]
 8030270:	681b      	ldr	r3, [r3, #0]
 8030272:	8018      	strh	r0, [r3, #0]
 8030274:	e7ee      	b.n	8030254 <__ssvfiscanf_r+0xdac>
 8030276:	f016 0201 	ands.w	r2, r6, #1
 803027a:	d001      	beq.n	8030280 <__ssvfiscanf_r+0xdd8>
 803027c:	6a3b      	ldr	r3, [r7, #32]
 803027e:	e78e      	b.n	803019e <__ssvfiscanf_r+0xcf6>
 8030280:	07b1      	lsls	r1, r6, #30
 8030282:	d5fb      	bpl.n	803027c <__ssvfiscanf_r+0xdd4>
 8030284:	4b15      	ldr	r3, [pc, #84]	@ (80302dc <__ssvfiscanf_r+0xe34>)
 8030286:	68f9      	ldr	r1, [r7, #12]
 8030288:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 803028a:	4299      	cmp	r1, r3
 803028c:	697b      	ldr	r3, [r7, #20]
 803028e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8030292:	d106      	bne.n	80302a2 <__ssvfiscanf_r+0xdfa>
 8030294:	f004 fc34 	bl	8034b00 <_strtoull_r>
 8030298:	6a3b      	ldr	r3, [r7, #32]
 803029a:	681b      	ldr	r3, [r3, #0]
 803029c:	e9c3 0100 	strd	r0, r1, [r3]
 80302a0:	e7d8      	b.n	8030254 <__ssvfiscanf_r+0xdac>
 80302a2:	f004 fb81 	bl	80349a8 <_strtoll_r>
 80302a6:	e7f7      	b.n	8030298 <__ssvfiscanf_r+0xdf0>
 80302a8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80302ac:	6818      	ldr	r0, [r3, #0]
 80302ae:	f7fe f8ed 	bl	802e48c <free>
 80302b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80302b6:	3401      	adds	r4, #1
 80302b8:	601e      	str	r6, [r3, #0]
 80302ba:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80302be:	f8db 5000 	ldr.w	r5, [fp]
 80302c2:	42a3      	cmp	r3, r4
 80302c4:	dcf0      	bgt.n	80302a8 <__ssvfiscanf_r+0xe00>
 80302c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80302ca:	61fb      	str	r3, [r7, #28]
 80302cc:	f7ff ba46 	b.w	802f75c <__ssvfiscanf_r+0x2b4>
 80302d0:	2400      	movs	r4, #0
 80302d2:	4626      	mov	r6, r4
 80302d4:	e7f1      	b.n	80302ba <__ssvfiscanf_r+0xe12>
 80302d6:	bf00      	nop
 80302d8:	0803b268 	.word	0x0803b268
 80302dc:	080344f9 	.word	0x080344f9

080302e0 <_svfprintf_r>:
 80302e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80302e4:	b0d3      	sub	sp, #332	@ 0x14c
 80302e6:	468b      	mov	fp, r1
 80302e8:	4691      	mov	r9, r2
 80302ea:	461e      	mov	r6, r3
 80302ec:	9003      	str	r0, [sp, #12]
 80302ee:	f7fd f80d 	bl	802d30c <_localeconv_r>
 80302f2:	6803      	ldr	r3, [r0, #0]
 80302f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80302f6:	4618      	mov	r0, r3
 80302f8:	f7df ffd2 	bl	80102a0 <strlen>
 80302fc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030300:	900d      	str	r0, [sp, #52]	@ 0x34
 8030302:	061b      	lsls	r3, r3, #24
 8030304:	d515      	bpl.n	8030332 <_svfprintf_r+0x52>
 8030306:	f8db 3010 	ldr.w	r3, [fp, #16]
 803030a:	b993      	cbnz	r3, 8030332 <_svfprintf_r+0x52>
 803030c:	9803      	ldr	r0, [sp, #12]
 803030e:	2140      	movs	r1, #64	@ 0x40
 8030310:	f7fe f8c4 	bl	802e49c <_malloc_r>
 8030314:	f8cb 0000 	str.w	r0, [fp]
 8030318:	f8cb 0010 	str.w	r0, [fp, #16]
 803031c:	b930      	cbnz	r0, 803032c <_svfprintf_r+0x4c>
 803031e:	9a03      	ldr	r2, [sp, #12]
 8030320:	230c      	movs	r3, #12
 8030322:	6013      	str	r3, [r2, #0]
 8030324:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8030328:	930f      	str	r3, [sp, #60]	@ 0x3c
 803032a:	e1f7      	b.n	803071c <_svfprintf_r+0x43c>
 803032c:	2340      	movs	r3, #64	@ 0x40
 803032e:	f8cb 3014 	str.w	r3, [fp, #20]
 8030332:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8030580 <_svfprintf_r+0x2a0>
 8030336:	2300      	movs	r3, #0
 8030338:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 803033c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8030340:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8030344:	ac29      	add	r4, sp, #164	@ 0xa4
 8030346:	9426      	str	r4, [sp, #152]	@ 0x98
 8030348:	9304      	str	r3, [sp, #16]
 803034a:	9309      	str	r3, [sp, #36]	@ 0x24
 803034c:	9312      	str	r3, [sp, #72]	@ 0x48
 803034e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8030350:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030352:	464b      	mov	r3, r9
 8030354:	461d      	mov	r5, r3
 8030356:	f813 2b01 	ldrb.w	r2, [r3], #1
 803035a:	b10a      	cbz	r2, 8030360 <_svfprintf_r+0x80>
 803035c:	2a25      	cmp	r2, #37	@ 0x25
 803035e:	d1f9      	bne.n	8030354 <_svfprintf_r+0x74>
 8030360:	ebb5 0709 	subs.w	r7, r5, r9
 8030364:	d00d      	beq.n	8030382 <_svfprintf_r+0xa2>
 8030366:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030368:	443b      	add	r3, r7
 803036a:	9328      	str	r3, [sp, #160]	@ 0xa0
 803036c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803036e:	3301      	adds	r3, #1
 8030370:	2b07      	cmp	r3, #7
 8030372:	e9c4 9700 	strd	r9, r7, [r4]
 8030376:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030378:	dc75      	bgt.n	8030466 <_svfprintf_r+0x186>
 803037a:	3408      	adds	r4, #8
 803037c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803037e:	443b      	add	r3, r7
 8030380:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030382:	782b      	ldrb	r3, [r5, #0]
 8030384:	2b00      	cmp	r3, #0
 8030386:	f001 8148 	beq.w	803161a <_svfprintf_r+0x133a>
 803038a:	2200      	movs	r2, #0
 803038c:	1c6b      	adds	r3, r5, #1
 803038e:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030392:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8030396:	920e      	str	r2, [sp, #56]	@ 0x38
 8030398:	4615      	mov	r5, r2
 803039a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803039e:	9206      	str	r2, [sp, #24]
 80303a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80303a2:	9b06      	ldr	r3, [sp, #24]
 80303a4:	3b20      	subs	r3, #32
 80303a6:	2b5a      	cmp	r3, #90	@ 0x5a
 80303a8:	f200 85a4 	bhi.w	8030ef4 <_svfprintf_r+0xc14>
 80303ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80303b0:	05a2009d 	.word	0x05a2009d
 80303b4:	00a505a2 	.word	0x00a505a2
 80303b8:	05a205a2 	.word	0x05a205a2
 80303bc:	008505a2 	.word	0x008505a2
 80303c0:	05a205a2 	.word	0x05a205a2
 80303c4:	00b200a8 	.word	0x00b200a8
 80303c8:	00af05a2 	.word	0x00af05a2
 80303cc:	05a200b4 	.word	0x05a200b4
 80303d0:	00d100ce 	.word	0x00d100ce
 80303d4:	00d100d1 	.word	0x00d100d1
 80303d8:	00d100d1 	.word	0x00d100d1
 80303dc:	00d100d1 	.word	0x00d100d1
 80303e0:	00d100d1 	.word	0x00d100d1
 80303e4:	05a205a2 	.word	0x05a205a2
 80303e8:	05a205a2 	.word	0x05a205a2
 80303ec:	05a205a2 	.word	0x05a205a2
 80303f0:	014705a2 	.word	0x014705a2
 80303f4:	010805a2 	.word	0x010805a2
 80303f8:	0147011b 	.word	0x0147011b
 80303fc:	01470147 	.word	0x01470147
 8030400:	05a205a2 	.word	0x05a205a2
 8030404:	05a205a2 	.word	0x05a205a2
 8030408:	05a200e2 	.word	0x05a200e2
 803040c:	049d05a2 	.word	0x049d05a2
 8030410:	05a205a2 	.word	0x05a205a2
 8030414:	04e705a2 	.word	0x04e705a2
 8030418:	050805a2 	.word	0x050805a2
 803041c:	05a205a2 	.word	0x05a205a2
 8030420:	05a2052a 	.word	0x05a2052a
 8030424:	05a205a2 	.word	0x05a205a2
 8030428:	05a205a2 	.word	0x05a205a2
 803042c:	05a205a2 	.word	0x05a205a2
 8030430:	014705a2 	.word	0x014705a2
 8030434:	010805a2 	.word	0x010805a2
 8030438:	0147011d 	.word	0x0147011d
 803043c:	01470147 	.word	0x01470147
 8030440:	011d00ee 	.word	0x011d00ee
 8030444:	05a20102 	.word	0x05a20102
 8030448:	05a200fb 	.word	0x05a200fb
 803044c:	049f047e 	.word	0x049f047e
 8030450:	010204d6 	.word	0x010204d6
 8030454:	04e705a2 	.word	0x04e705a2
 8030458:	050a009b 	.word	0x050a009b
 803045c:	05a205a2 	.word	0x05a205a2
 8030460:	05a20065 	.word	0x05a20065
 8030464:	009b      	.short	0x009b
 8030466:	9803      	ldr	r0, [sp, #12]
 8030468:	aa26      	add	r2, sp, #152	@ 0x98
 803046a:	4659      	mov	r1, fp
 803046c:	f7fe fac0 	bl	802e9f0 <__ssprint_r>
 8030470:	2800      	cmp	r0, #0
 8030472:	f040 814e 	bne.w	8030712 <_svfprintf_r+0x432>
 8030476:	ac29      	add	r4, sp, #164	@ 0xa4
 8030478:	e780      	b.n	803037c <_svfprintf_r+0x9c>
 803047a:	4b43      	ldr	r3, [pc, #268]	@ (8030588 <_svfprintf_r+0x2a8>)
 803047c:	9319      	str	r3, [sp, #100]	@ 0x64
 803047e:	f015 0320 	ands.w	r3, r5, #32
 8030482:	f000 84c2 	beq.w	8030e0a <_svfprintf_r+0xb2a>
 8030486:	3607      	adds	r6, #7
 8030488:	f026 0307 	bic.w	r3, r6, #7
 803048c:	461a      	mov	r2, r3
 803048e:	685f      	ldr	r7, [r3, #4]
 8030490:	f852 6b08 	ldr.w	r6, [r2], #8
 8030494:	9207      	str	r2, [sp, #28]
 8030496:	07eb      	lsls	r3, r5, #31
 8030498:	d50a      	bpl.n	80304b0 <_svfprintf_r+0x1d0>
 803049a:	ea56 0307 	orrs.w	r3, r6, r7
 803049e:	d007      	beq.n	80304b0 <_svfprintf_r+0x1d0>
 80304a0:	2330      	movs	r3, #48	@ 0x30
 80304a2:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 80304a6:	9b06      	ldr	r3, [sp, #24]
 80304a8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80304ac:	f045 0502 	orr.w	r5, r5, #2
 80304b0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80304b4:	2302      	movs	r3, #2
 80304b6:	f000 bc28 	b.w	8030d0a <_svfprintf_r+0xa2a>
 80304ba:	9803      	ldr	r0, [sp, #12]
 80304bc:	f7fc ff26 	bl	802d30c <_localeconv_r>
 80304c0:	6843      	ldr	r3, [r0, #4]
 80304c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80304c4:	4618      	mov	r0, r3
 80304c6:	f7df feeb 	bl	80102a0 <strlen>
 80304ca:	9012      	str	r0, [sp, #72]	@ 0x48
 80304cc:	9803      	ldr	r0, [sp, #12]
 80304ce:	f7fc ff1d 	bl	802d30c <_localeconv_r>
 80304d2:	6883      	ldr	r3, [r0, #8]
 80304d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80304d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80304d8:	b12b      	cbz	r3, 80304e6 <_svfprintf_r+0x206>
 80304da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80304dc:	b11b      	cbz	r3, 80304e6 <_svfprintf_r+0x206>
 80304de:	781b      	ldrb	r3, [r3, #0]
 80304e0:	b10b      	cbz	r3, 80304e6 <_svfprintf_r+0x206>
 80304e2:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80304e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80304e8:	e757      	b.n	803039a <_svfprintf_r+0xba>
 80304ea:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80304ee:	2b00      	cmp	r3, #0
 80304f0:	d1f9      	bne.n	80304e6 <_svfprintf_r+0x206>
 80304f2:	2320      	movs	r3, #32
 80304f4:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80304f8:	e7f5      	b.n	80304e6 <_svfprintf_r+0x206>
 80304fa:	f045 0501 	orr.w	r5, r5, #1
 80304fe:	e7f2      	b.n	80304e6 <_svfprintf_r+0x206>
 8030500:	f856 3b04 	ldr.w	r3, [r6], #4
 8030504:	930e      	str	r3, [sp, #56]	@ 0x38
 8030506:	2b00      	cmp	r3, #0
 8030508:	daed      	bge.n	80304e6 <_svfprintf_r+0x206>
 803050a:	425b      	negs	r3, r3
 803050c:	930e      	str	r3, [sp, #56]	@ 0x38
 803050e:	f045 0504 	orr.w	r5, r5, #4
 8030512:	e7e8      	b.n	80304e6 <_svfprintf_r+0x206>
 8030514:	232b      	movs	r3, #43	@ 0x2b
 8030516:	e7ed      	b.n	80304f4 <_svfprintf_r+0x214>
 8030518:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803051a:	f813 2b01 	ldrb.w	r2, [r3], #1
 803051e:	9206      	str	r2, [sp, #24]
 8030520:	2a2a      	cmp	r2, #42	@ 0x2a
 8030522:	d10f      	bne.n	8030544 <_svfprintf_r+0x264>
 8030524:	f856 2b04 	ldr.w	r2, [r6], #4
 8030528:	930c      	str	r3, [sp, #48]	@ 0x30
 803052a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 803052e:	e7da      	b.n	80304e6 <_svfprintf_r+0x206>
 8030530:	fb01 2808 	mla	r8, r1, r8, r2
 8030534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030538:	9206      	str	r2, [sp, #24]
 803053a:	9a06      	ldr	r2, [sp, #24]
 803053c:	3a30      	subs	r2, #48	@ 0x30
 803053e:	2a09      	cmp	r2, #9
 8030540:	d9f6      	bls.n	8030530 <_svfprintf_r+0x250>
 8030542:	e72d      	b.n	80303a0 <_svfprintf_r+0xc0>
 8030544:	f04f 0800 	mov.w	r8, #0
 8030548:	210a      	movs	r1, #10
 803054a:	e7f6      	b.n	803053a <_svfprintf_r+0x25a>
 803054c:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8030550:	e7c9      	b.n	80304e6 <_svfprintf_r+0x206>
 8030552:	2200      	movs	r2, #0
 8030554:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8030556:	920e      	str	r2, [sp, #56]	@ 0x38
 8030558:	210a      	movs	r1, #10
 803055a:	9a06      	ldr	r2, [sp, #24]
 803055c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 803055e:	3a30      	subs	r2, #48	@ 0x30
 8030560:	fb01 2200 	mla	r2, r1, r0, r2
 8030564:	920e      	str	r2, [sp, #56]	@ 0x38
 8030566:	f813 2b01 	ldrb.w	r2, [r3], #1
 803056a:	9206      	str	r2, [sp, #24]
 803056c:	3a30      	subs	r2, #48	@ 0x30
 803056e:	2a09      	cmp	r2, #9
 8030570:	d9f3      	bls.n	803055a <_svfprintf_r+0x27a>
 8030572:	e715      	b.n	80303a0 <_svfprintf_r+0xc0>
 8030574:	f045 0508 	orr.w	r5, r5, #8
 8030578:	e7b5      	b.n	80304e6 <_svfprintf_r+0x206>
 803057a:	bf00      	nop
 803057c:	f3af 8000 	nop.w
	...
 8030588:	0803ad23 	.word	0x0803ad23
 803058c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803058e:	781b      	ldrb	r3, [r3, #0]
 8030590:	2b68      	cmp	r3, #104	@ 0x68
 8030592:	bf01      	itttt	eq
 8030594:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8030596:	3301      	addeq	r3, #1
 8030598:	930c      	streq	r3, [sp, #48]	@ 0x30
 803059a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 803059e:	bf18      	it	ne
 80305a0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 80305a4:	e79f      	b.n	80304e6 <_svfprintf_r+0x206>
 80305a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80305a8:	781b      	ldrb	r3, [r3, #0]
 80305aa:	2b6c      	cmp	r3, #108	@ 0x6c
 80305ac:	d105      	bne.n	80305ba <_svfprintf_r+0x2da>
 80305ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80305b0:	3301      	adds	r3, #1
 80305b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80305b4:	f045 0520 	orr.w	r5, r5, #32
 80305b8:	e795      	b.n	80304e6 <_svfprintf_r+0x206>
 80305ba:	f045 0510 	orr.w	r5, r5, #16
 80305be:	e792      	b.n	80304e6 <_svfprintf_r+0x206>
 80305c0:	4632      	mov	r2, r6
 80305c2:	f852 3b04 	ldr.w	r3, [r2], #4
 80305c6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80305ca:	2300      	movs	r3, #0
 80305cc:	9207      	str	r2, [sp, #28]
 80305ce:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80305d2:	469a      	mov	sl, r3
 80305d4:	f04f 0801 	mov.w	r8, #1
 80305d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80305da:	461f      	mov	r7, r3
 80305dc:	9308      	str	r3, [sp, #32]
 80305de:	461e      	mov	r6, r3
 80305e0:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 80305e4:	e1d2      	b.n	803098c <_svfprintf_r+0x6ac>
 80305e6:	f045 0510 	orr.w	r5, r5, #16
 80305ea:	06af      	lsls	r7, r5, #26
 80305ec:	d512      	bpl.n	8030614 <_svfprintf_r+0x334>
 80305ee:	3607      	adds	r6, #7
 80305f0:	f026 0307 	bic.w	r3, r6, #7
 80305f4:	461a      	mov	r2, r3
 80305f6:	685f      	ldr	r7, [r3, #4]
 80305f8:	f852 6b08 	ldr.w	r6, [r2], #8
 80305fc:	9207      	str	r2, [sp, #28]
 80305fe:	2f00      	cmp	r7, #0
 8030600:	da06      	bge.n	8030610 <_svfprintf_r+0x330>
 8030602:	4276      	negs	r6, r6
 8030604:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8030608:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 803060c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030610:	2301      	movs	r3, #1
 8030612:	e37d      	b.n	8030d10 <_svfprintf_r+0xa30>
 8030614:	4633      	mov	r3, r6
 8030616:	06ee      	lsls	r6, r5, #27
 8030618:	f853 7b04 	ldr.w	r7, [r3], #4
 803061c:	9307      	str	r3, [sp, #28]
 803061e:	d502      	bpl.n	8030626 <_svfprintf_r+0x346>
 8030620:	463e      	mov	r6, r7
 8030622:	17ff      	asrs	r7, r7, #31
 8030624:	e7eb      	b.n	80305fe <_svfprintf_r+0x31e>
 8030626:	0668      	lsls	r0, r5, #25
 8030628:	d503      	bpl.n	8030632 <_svfprintf_r+0x352>
 803062a:	b23e      	sxth	r6, r7
 803062c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8030630:	e7e5      	b.n	80305fe <_svfprintf_r+0x31e>
 8030632:	05a9      	lsls	r1, r5, #22
 8030634:	d5f4      	bpl.n	8030620 <_svfprintf_r+0x340>
 8030636:	b27e      	sxtb	r6, r7
 8030638:	f347 17c0 	sbfx	r7, r7, #7, #1
 803063c:	e7df      	b.n	80305fe <_svfprintf_r+0x31e>
 803063e:	3607      	adds	r6, #7
 8030640:	f026 0307 	bic.w	r3, r6, #7
 8030644:	ecb3 7b02 	vldmia	r3!, {d7}
 8030648:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803064c:	9307      	str	r3, [sp, #28]
 803064e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030650:	931a      	str	r3, [sp, #104]	@ 0x68
 8030652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8030658:	931b      	str	r3, [sp, #108]	@ 0x6c
 803065a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803065e:	4b81      	ldr	r3, [pc, #516]	@ (8030864 <_svfprintf_r+0x584>)
 8030660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030664:	f7e0 fa7a 	bl	8010b5c <__aeabi_dcmpun>
 8030668:	bb10      	cbnz	r0, 80306b0 <_svfprintf_r+0x3d0>
 803066a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 803066e:	4b7d      	ldr	r3, [pc, #500]	@ (8030864 <_svfprintf_r+0x584>)
 8030670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8030674:	f7e0 fa54 	bl	8010b20 <__aeabi_dcmple>
 8030678:	b9d0      	cbnz	r0, 80306b0 <_svfprintf_r+0x3d0>
 803067a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803067e:	2200      	movs	r2, #0
 8030680:	2300      	movs	r3, #0
 8030682:	f7e0 fa43 	bl	8010b0c <__aeabi_dcmplt>
 8030686:	b110      	cbz	r0, 803068e <_svfprintf_r+0x3ae>
 8030688:	232d      	movs	r3, #45	@ 0x2d
 803068a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 803068e:	4a76      	ldr	r2, [pc, #472]	@ (8030868 <_svfprintf_r+0x588>)
 8030690:	4b76      	ldr	r3, [pc, #472]	@ (803086c <_svfprintf_r+0x58c>)
 8030692:	9906      	ldr	r1, [sp, #24]
 8030694:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8030698:	2947      	cmp	r1, #71	@ 0x47
 803069a:	bfd4      	ite	le
 803069c:	4691      	movle	r9, r2
 803069e:	4699      	movgt	r9, r3
 80306a0:	f04f 0a00 	mov.w	sl, #0
 80306a4:	f04f 0803 	mov.w	r8, #3
 80306a8:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 80306ac:	f000 bfec 	b.w	8031688 <_svfprintf_r+0x13a8>
 80306b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80306b4:	4610      	mov	r0, r2
 80306b6:	4619      	mov	r1, r3
 80306b8:	f7e0 fa50 	bl	8010b5c <__aeabi_dcmpun>
 80306bc:	4682      	mov	sl, r0
 80306be:	b140      	cbz	r0, 80306d2 <_svfprintf_r+0x3f2>
 80306c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80306c2:	4a6b      	ldr	r2, [pc, #428]	@ (8030870 <_svfprintf_r+0x590>)
 80306c4:	2b00      	cmp	r3, #0
 80306c6:	bfbc      	itt	lt
 80306c8:	232d      	movlt	r3, #45	@ 0x2d
 80306ca:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80306ce:	4b69      	ldr	r3, [pc, #420]	@ (8030874 <_svfprintf_r+0x594>)
 80306d0:	e7df      	b.n	8030692 <_svfprintf_r+0x3b2>
 80306d2:	9b06      	ldr	r3, [sp, #24]
 80306d4:	2b61      	cmp	r3, #97	@ 0x61
 80306d6:	d025      	beq.n	8030724 <_svfprintf_r+0x444>
 80306d8:	2b41      	cmp	r3, #65	@ 0x41
 80306da:	d125      	bne.n	8030728 <_svfprintf_r+0x448>
 80306dc:	2358      	movs	r3, #88	@ 0x58
 80306de:	2230      	movs	r2, #48	@ 0x30
 80306e0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 80306e4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80306e8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80306ec:	f045 0502 	orr.w	r5, r5, #2
 80306f0:	f340 80a5 	ble.w	803083e <_svfprintf_r+0x55e>
 80306f4:	9803      	ldr	r0, [sp, #12]
 80306f6:	f108 0101 	add.w	r1, r8, #1
 80306fa:	f7fd fecf 	bl	802e49c <_malloc_r>
 80306fe:	4681      	mov	r9, r0
 8030700:	2800      	cmp	r0, #0
 8030702:	f040 80a1 	bne.w	8030848 <_svfprintf_r+0x568>
 8030706:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 803070a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803070e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8030712:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8030716:	065b      	lsls	r3, r3, #25
 8030718:	f53f ae04 	bmi.w	8030324 <_svfprintf_r+0x44>
 803071c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803071e:	b053      	add	sp, #332	@ 0x14c
 8030720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030724:	2378      	movs	r3, #120	@ 0x78
 8030726:	e7da      	b.n	80306de <_svfprintf_r+0x3fe>
 8030728:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 803072c:	f000 808e 	beq.w	803084c <_svfprintf_r+0x56c>
 8030730:	9b06      	ldr	r3, [sp, #24]
 8030732:	f023 0320 	bic.w	r3, r3, #32
 8030736:	2b47      	cmp	r3, #71	@ 0x47
 8030738:	d105      	bne.n	8030746 <_svfprintf_r+0x466>
 803073a:	f1b8 0f00 	cmp.w	r8, #0
 803073e:	d102      	bne.n	8030746 <_svfprintf_r+0x466>
 8030740:	46c2      	mov	sl, r8
 8030742:	f04f 0801 	mov.w	r8, #1
 8030746:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 803074a:	9311      	str	r3, [sp, #68]	@ 0x44
 803074c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803074e:	2b00      	cmp	r3, #0
 8030750:	da7f      	bge.n	8030852 <_svfprintf_r+0x572>
 8030752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8030754:	9314      	str	r3, [sp, #80]	@ 0x50
 8030756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8030758:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 803075c:	9315      	str	r3, [sp, #84]	@ 0x54
 803075e:	232d      	movs	r3, #45	@ 0x2d
 8030760:	931c      	str	r3, [sp, #112]	@ 0x70
 8030762:	9b06      	ldr	r3, [sp, #24]
 8030764:	f023 0320 	bic.w	r3, r3, #32
 8030768:	2b41      	cmp	r3, #65	@ 0x41
 803076a:	9308      	str	r3, [sp, #32]
 803076c:	f040 81e6 	bne.w	8030b3c <_svfprintf_r+0x85c>
 8030770:	a820      	add	r0, sp, #128	@ 0x80
 8030772:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8030776:	f7fc fe9b 	bl	802d4b0 <frexp>
 803077a:	2200      	movs	r2, #0
 803077c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8030780:	ec51 0b10 	vmov	r0, r1, d0
 8030784:	f7df ff50 	bl	8010628 <__aeabi_dmul>
 8030788:	4602      	mov	r2, r0
 803078a:	460b      	mov	r3, r1
 803078c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8030790:	2200      	movs	r2, #0
 8030792:	2300      	movs	r3, #0
 8030794:	f7e0 f9b0 	bl	8010af8 <__aeabi_dcmpeq>
 8030798:	b108      	cbz	r0, 803079e <_svfprintf_r+0x4be>
 803079a:	2301      	movs	r3, #1
 803079c:	9320      	str	r3, [sp, #128]	@ 0x80
 803079e:	4a36      	ldr	r2, [pc, #216]	@ (8030878 <_svfprintf_r+0x598>)
 80307a0:	4b36      	ldr	r3, [pc, #216]	@ (803087c <_svfprintf_r+0x59c>)
 80307a2:	9906      	ldr	r1, [sp, #24]
 80307a4:	2961      	cmp	r1, #97	@ 0x61
 80307a6:	bf18      	it	ne
 80307a8:	461a      	movne	r2, r3
 80307aa:	9210      	str	r2, [sp, #64]	@ 0x40
 80307ac:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 80307b0:	464e      	mov	r6, r9
 80307b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80307b6:	4b32      	ldr	r3, [pc, #200]	@ (8030880 <_svfprintf_r+0x5a0>)
 80307b8:	2200      	movs	r2, #0
 80307ba:	f7df ff35 	bl	8010628 <__aeabi_dmul>
 80307be:	4602      	mov	r2, r0
 80307c0:	460b      	mov	r3, r1
 80307c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80307c6:	f7e0 f9df 	bl	8010b88 <__aeabi_d2iz>
 80307ca:	9013      	str	r0, [sp, #76]	@ 0x4c
 80307cc:	f7df fec2 	bl	8010554 <__aeabi_i2d>
 80307d0:	4602      	mov	r2, r0
 80307d2:	460b      	mov	r3, r1
 80307d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80307d8:	f7df fd6e 	bl	80102b8 <__aeabi_dsub>
 80307dc:	4602      	mov	r2, r0
 80307de:	460b      	mov	r3, r1
 80307e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80307e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80307e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80307e8:	5c9b      	ldrb	r3, [r3, r2]
 80307ea:	f806 3b01 	strb.w	r3, [r6], #1
 80307ee:	1c7a      	adds	r2, r7, #1
 80307f0:	d006      	beq.n	8030800 <_svfprintf_r+0x520>
 80307f2:	1e7b      	subs	r3, r7, #1
 80307f4:	931d      	str	r3, [sp, #116]	@ 0x74
 80307f6:	2200      	movs	r2, #0
 80307f8:	2300      	movs	r3, #0
 80307fa:	f7e0 f97d 	bl	8010af8 <__aeabi_dcmpeq>
 80307fe:	b370      	cbz	r0, 803085e <_svfprintf_r+0x57e>
 8030800:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030804:	4b1f      	ldr	r3, [pc, #124]	@ (8030884 <_svfprintf_r+0x5a4>)
 8030806:	2200      	movs	r2, #0
 8030808:	f7e0 f99e 	bl	8010b48 <__aeabi_dcmpgt>
 803080c:	2800      	cmp	r0, #0
 803080e:	d13b      	bne.n	8030888 <_svfprintf_r+0x5a8>
 8030810:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8030814:	4b1b      	ldr	r3, [pc, #108]	@ (8030884 <_svfprintf_r+0x5a4>)
 8030816:	2200      	movs	r2, #0
 8030818:	f7e0 f96e 	bl	8010af8 <__aeabi_dcmpeq>
 803081c:	b110      	cbz	r0, 8030824 <_svfprintf_r+0x544>
 803081e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8030820:	07db      	lsls	r3, r3, #31
 8030822:	d431      	bmi.n	8030888 <_svfprintf_r+0x5a8>
 8030824:	4633      	mov	r3, r6
 8030826:	19f1      	adds	r1, r6, r7
 8030828:	2030      	movs	r0, #48	@ 0x30
 803082a:	1aca      	subs	r2, r1, r3
 803082c:	2a00      	cmp	r2, #0
 803082e:	f280 8182 	bge.w	8030b36 <_svfprintf_r+0x856>
 8030832:	1c7b      	adds	r3, r7, #1
 8030834:	3701      	adds	r7, #1
 8030836:	bfb8      	it	lt
 8030838:	2300      	movlt	r3, #0
 803083a:	441e      	add	r6, r3
 803083c:	e038      	b.n	80308b0 <_svfprintf_r+0x5d0>
 803083e:	f04f 0a00 	mov.w	sl, #0
 8030842:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8030846:	e77e      	b.n	8030746 <_svfprintf_r+0x466>
 8030848:	4682      	mov	sl, r0
 803084a:	e77c      	b.n	8030746 <_svfprintf_r+0x466>
 803084c:	f04f 0806 	mov.w	r8, #6
 8030850:	e779      	b.n	8030746 <_svfprintf_r+0x466>
 8030852:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8030856:	2300      	movs	r3, #0
 8030858:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 803085c:	e780      	b.n	8030760 <_svfprintf_r+0x480>
 803085e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8030860:	e7a7      	b.n	80307b2 <_svfprintf_r+0x4d2>
 8030862:	bf00      	nop
 8030864:	7fefffff 	.word	0x7fefffff
 8030868:	0803ad13 	.word	0x0803ad13
 803086c:	0803ad17 	.word	0x0803ad17
 8030870:	0803ad1b 	.word	0x0803ad1b
 8030874:	0803ad1f 	.word	0x0803ad1f
 8030878:	0803ad23 	.word	0x0803ad23
 803087c:	0803ad34 	.word	0x0803ad34
 8030880:	40300000 	.word	0x40300000
 8030884:	3fe00000 	.word	0x3fe00000
 8030888:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803088a:	9624      	str	r6, [sp, #144]	@ 0x90
 803088c:	7bd9      	ldrb	r1, [r3, #15]
 803088e:	2030      	movs	r0, #48	@ 0x30
 8030890:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8030892:	1e53      	subs	r3, r2, #1
 8030894:	9324      	str	r3, [sp, #144]	@ 0x90
 8030896:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 803089a:	428b      	cmp	r3, r1
 803089c:	f000 8148 	beq.w	8030b30 <_svfprintf_r+0x850>
 80308a0:	2b39      	cmp	r3, #57	@ 0x39
 80308a2:	bf0b      	itete	eq
 80308a4:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 80308a6:	3301      	addne	r3, #1
 80308a8:	7a9b      	ldrbeq	r3, [r3, #10]
 80308aa:	b2db      	uxtbne	r3, r3
 80308ac:	f802 3c01 	strb.w	r3, [r2, #-1]
 80308b0:	eba6 0309 	sub.w	r3, r6, r9
 80308b4:	9304      	str	r3, [sp, #16]
 80308b6:	9b08      	ldr	r3, [sp, #32]
 80308b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80308ba:	2b47      	cmp	r3, #71	@ 0x47
 80308bc:	f040 8187 	bne.w	8030bce <_svfprintf_r+0x8ee>
 80308c0:	1cf1      	adds	r1, r6, #3
 80308c2:	db02      	blt.n	80308ca <_svfprintf_r+0x5ea>
 80308c4:	4546      	cmp	r6, r8
 80308c6:	f340 81a5 	ble.w	8030c14 <_svfprintf_r+0x934>
 80308ca:	9b06      	ldr	r3, [sp, #24]
 80308cc:	3b02      	subs	r3, #2
 80308ce:	9306      	str	r3, [sp, #24]
 80308d0:	9906      	ldr	r1, [sp, #24]
 80308d2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80308d6:	f021 0120 	bic.w	r1, r1, #32
 80308da:	2941      	cmp	r1, #65	@ 0x41
 80308dc:	bf08      	it	eq
 80308de:	320f      	addeq	r2, #15
 80308e0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80308e4:	bf06      	itte	eq
 80308e6:	b2d2      	uxtbeq	r2, r2
 80308e8:	2101      	moveq	r1, #1
 80308ea:	2100      	movne	r1, #0
 80308ec:	2b00      	cmp	r3, #0
 80308ee:	9320      	str	r3, [sp, #128]	@ 0x80
 80308f0:	bfb8      	it	lt
 80308f2:	f1c6 0301 	rsblt	r3, r6, #1
 80308f6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80308fa:	bfb4      	ite	lt
 80308fc:	222d      	movlt	r2, #45	@ 0x2d
 80308fe:	222b      	movge	r2, #43	@ 0x2b
 8030900:	2b09      	cmp	r3, #9
 8030902:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8030906:	f340 8178 	ble.w	8030bfa <_svfprintf_r+0x91a>
 803090a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803090e:	270a      	movs	r7, #10
 8030910:	4602      	mov	r2, r0
 8030912:	fbb3 f6f7 	udiv	r6, r3, r7
 8030916:	fb07 3116 	mls	r1, r7, r6, r3
 803091a:	3130      	adds	r1, #48	@ 0x30
 803091c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8030920:	4619      	mov	r1, r3
 8030922:	2963      	cmp	r1, #99	@ 0x63
 8030924:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8030928:	4633      	mov	r3, r6
 803092a:	dcf1      	bgt.n	8030910 <_svfprintf_r+0x630>
 803092c:	3330      	adds	r3, #48	@ 0x30
 803092e:	1e91      	subs	r1, r2, #2
 8030930:	f800 3c01 	strb.w	r3, [r0, #-1]
 8030934:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8030938:	460b      	mov	r3, r1
 803093a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 803093e:	4283      	cmp	r3, r0
 8030940:	f0c0 8156 	bcc.w	8030bf0 <_svfprintf_r+0x910>
 8030944:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8030948:	1a9b      	subs	r3, r3, r2
 803094a:	4281      	cmp	r1, r0
 803094c:	bf88      	it	hi
 803094e:	2300      	movhi	r3, #0
 8030950:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8030954:	441a      	add	r2, r3
 8030956:	ab22      	add	r3, sp, #136	@ 0x88
 8030958:	1ad3      	subs	r3, r2, r3
 803095a:	9a04      	ldr	r2, [sp, #16]
 803095c:	9318      	str	r3, [sp, #96]	@ 0x60
 803095e:	2a01      	cmp	r2, #1
 8030960:	eb03 0802 	add.w	r8, r3, r2
 8030964:	dc01      	bgt.n	803096a <_svfprintf_r+0x68a>
 8030966:	07ea      	lsls	r2, r5, #31
 8030968:	d501      	bpl.n	803096e <_svfprintf_r+0x68e>
 803096a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803096c:	4498      	add	r8, r3
 803096e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030972:	2700      	movs	r7, #0
 8030974:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8030978:	9311      	str	r3, [sp, #68]	@ 0x44
 803097a:	9708      	str	r7, [sp, #32]
 803097c:	463e      	mov	r6, r7
 803097e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8030980:	2b00      	cmp	r3, #0
 8030982:	f040 818f 	bne.w	8030ca4 <_svfprintf_r+0x9c4>
 8030986:	2300      	movs	r3, #0
 8030988:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 803098a:	9310      	str	r3, [sp, #64]	@ 0x40
 803098c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803098e:	4543      	cmp	r3, r8
 8030990:	bfb8      	it	lt
 8030992:	4643      	movlt	r3, r8
 8030994:	9311      	str	r3, [sp, #68]	@ 0x44
 8030996:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 803099a:	b113      	cbz	r3, 80309a2 <_svfprintf_r+0x6c2>
 803099c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803099e:	3301      	adds	r3, #1
 80309a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80309a2:	f015 0302 	ands.w	r3, r5, #2
 80309a6:	931c      	str	r3, [sp, #112]	@ 0x70
 80309a8:	bf1e      	ittt	ne
 80309aa:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80309ac:	3302      	addne	r3, #2
 80309ae:	9311      	strne	r3, [sp, #68]	@ 0x44
 80309b0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80309b4:	931d      	str	r3, [sp, #116]	@ 0x74
 80309b6:	d122      	bne.n	80309fe <_svfprintf_r+0x71e>
 80309b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80309ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80309bc:	1a9b      	subs	r3, r3, r2
 80309be:	2b00      	cmp	r3, #0
 80309c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80309c2:	dd1c      	ble.n	80309fe <_svfprintf_r+0x71e>
 80309c4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80309c6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80309ca:	2810      	cmp	r0, #16
 80309cc:	489e      	ldr	r0, [pc, #632]	@ (8030c48 <_svfprintf_r+0x968>)
 80309ce:	6020      	str	r0, [r4, #0]
 80309d0:	f102 0201 	add.w	r2, r2, #1
 80309d4:	f104 0108 	add.w	r1, r4, #8
 80309d8:	f300 8298 	bgt.w	8030f0c <_svfprintf_r+0xc2c>
 80309dc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80309de:	6060      	str	r0, [r4, #4]
 80309e0:	4403      	add	r3, r0
 80309e2:	2a07      	cmp	r2, #7
 80309e4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80309e8:	f340 82a5 	ble.w	8030f36 <_svfprintf_r+0xc56>
 80309ec:	9803      	ldr	r0, [sp, #12]
 80309ee:	aa26      	add	r2, sp, #152	@ 0x98
 80309f0:	4659      	mov	r1, fp
 80309f2:	f7fd fffd 	bl	802e9f0 <__ssprint_r>
 80309f6:	2800      	cmp	r0, #0
 80309f8:	f040 85ed 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 80309fc:	ac29      	add	r4, sp, #164	@ 0xa4
 80309fe:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8030a02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030a04:	b16a      	cbz	r2, 8030a22 <_svfprintf_r+0x742>
 8030a06:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8030a0a:	6022      	str	r2, [r4, #0]
 8030a0c:	2201      	movs	r2, #1
 8030a0e:	4413      	add	r3, r2
 8030a10:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030a12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030a14:	6062      	str	r2, [r4, #4]
 8030a16:	4413      	add	r3, r2
 8030a18:	2b07      	cmp	r3, #7
 8030a1a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030a1c:	f300 828d 	bgt.w	8030f3a <_svfprintf_r+0xc5a>
 8030a20:	3408      	adds	r4, #8
 8030a22:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8030a24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030a26:	b162      	cbz	r2, 8030a42 <_svfprintf_r+0x762>
 8030a28:	aa1f      	add	r2, sp, #124	@ 0x7c
 8030a2a:	6022      	str	r2, [r4, #0]
 8030a2c:	2202      	movs	r2, #2
 8030a2e:	4413      	add	r3, r2
 8030a30:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030a32:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030a34:	6062      	str	r2, [r4, #4]
 8030a36:	3301      	adds	r3, #1
 8030a38:	2b07      	cmp	r3, #7
 8030a3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030a3c:	f300 8287 	bgt.w	8030f4e <_svfprintf_r+0xc6e>
 8030a40:	3408      	adds	r4, #8
 8030a42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8030a44:	2b80      	cmp	r3, #128	@ 0x80
 8030a46:	d122      	bne.n	8030a8e <_svfprintf_r+0x7ae>
 8030a48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030a4a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8030a4c:	1a9b      	subs	r3, r3, r2
 8030a4e:	2b00      	cmp	r3, #0
 8030a50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030a52:	dd1c      	ble.n	8030a8e <_svfprintf_r+0x7ae>
 8030a54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8030a56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8030a5a:	2810      	cmp	r0, #16
 8030a5c:	487b      	ldr	r0, [pc, #492]	@ (8030c4c <_svfprintf_r+0x96c>)
 8030a5e:	6020      	str	r0, [r4, #0]
 8030a60:	f102 0201 	add.w	r2, r2, #1
 8030a64:	f104 0108 	add.w	r1, r4, #8
 8030a68:	f300 827b 	bgt.w	8030f62 <_svfprintf_r+0xc82>
 8030a6c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8030a6e:	6060      	str	r0, [r4, #4]
 8030a70:	4403      	add	r3, r0
 8030a72:	2a07      	cmp	r2, #7
 8030a74:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030a78:	f340 8288 	ble.w	8030f8c <_svfprintf_r+0xcac>
 8030a7c:	9803      	ldr	r0, [sp, #12]
 8030a7e:	aa26      	add	r2, sp, #152	@ 0x98
 8030a80:	4659      	mov	r1, fp
 8030a82:	f7fd ffb5 	bl	802e9f0 <__ssprint_r>
 8030a86:	2800      	cmp	r0, #0
 8030a88:	f040 85a5 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8030a8c:	ac29      	add	r4, sp, #164	@ 0xa4
 8030a8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030a90:	eba3 0308 	sub.w	r3, r3, r8
 8030a94:	2b00      	cmp	r3, #0
 8030a96:	9310      	str	r3, [sp, #64]	@ 0x40
 8030a98:	dd1c      	ble.n	8030ad4 <_svfprintf_r+0x7f4>
 8030a9a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8030a9c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8030aa0:	2810      	cmp	r0, #16
 8030aa2:	486a      	ldr	r0, [pc, #424]	@ (8030c4c <_svfprintf_r+0x96c>)
 8030aa4:	6020      	str	r0, [r4, #0]
 8030aa6:	f102 0201 	add.w	r2, r2, #1
 8030aaa:	f104 0108 	add.w	r1, r4, #8
 8030aae:	f300 826f 	bgt.w	8030f90 <_svfprintf_r+0xcb0>
 8030ab2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8030ab4:	6060      	str	r0, [r4, #4]
 8030ab6:	4403      	add	r3, r0
 8030ab8:	2a07      	cmp	r2, #7
 8030aba:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030abe:	f340 827c 	ble.w	8030fba <_svfprintf_r+0xcda>
 8030ac2:	9803      	ldr	r0, [sp, #12]
 8030ac4:	aa26      	add	r2, sp, #152	@ 0x98
 8030ac6:	4659      	mov	r1, fp
 8030ac8:	f7fd ff92 	bl	802e9f0 <__ssprint_r>
 8030acc:	2800      	cmp	r0, #0
 8030ace:	f040 8582 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8030ad2:	ac29      	add	r4, sp, #164	@ 0xa4
 8030ad4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030ad6:	9310      	str	r3, [sp, #64]	@ 0x40
 8030ad8:	05ea      	lsls	r2, r5, #23
 8030ada:	f100 8275 	bmi.w	8030fc8 <_svfprintf_r+0xce8>
 8030ade:	4443      	add	r3, r8
 8030ae0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030ae2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030ae4:	3301      	adds	r3, #1
 8030ae6:	2b07      	cmp	r3, #7
 8030ae8:	e9c4 9800 	strd	r9, r8, [r4]
 8030aec:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030aee:	f300 82b1 	bgt.w	8031054 <_svfprintf_r+0xd74>
 8030af2:	3408      	adds	r4, #8
 8030af4:	076a      	lsls	r2, r5, #29
 8030af6:	f100 8550 	bmi.w	803159a <_svfprintf_r+0x12ba>
 8030afa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8030afe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8030b00:	428a      	cmp	r2, r1
 8030b02:	bfac      	ite	ge
 8030b04:	189b      	addge	r3, r3, r2
 8030b06:	185b      	addlt	r3, r3, r1
 8030b08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8030b0a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8030b0c:	b13b      	cbz	r3, 8030b1e <_svfprintf_r+0x83e>
 8030b0e:	9803      	ldr	r0, [sp, #12]
 8030b10:	aa26      	add	r2, sp, #152	@ 0x98
 8030b12:	4659      	mov	r1, fp
 8030b14:	f7fd ff6c 	bl	802e9f0 <__ssprint_r>
 8030b18:	2800      	cmp	r0, #0
 8030b1a:	f040 855c 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8030b1e:	2300      	movs	r3, #0
 8030b20:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030b22:	f1ba 0f00 	cmp.w	sl, #0
 8030b26:	f040 8572 	bne.w	803160e <_svfprintf_r+0x132e>
 8030b2a:	9e07      	ldr	r6, [sp, #28]
 8030b2c:	ac29      	add	r4, sp, #164	@ 0xa4
 8030b2e:	e0c6      	b.n	8030cbe <_svfprintf_r+0x9de>
 8030b30:	f802 0c01 	strb.w	r0, [r2, #-1]
 8030b34:	e6ac      	b.n	8030890 <_svfprintf_r+0x5b0>
 8030b36:	f803 0b01 	strb.w	r0, [r3], #1
 8030b3a:	e676      	b.n	803082a <_svfprintf_r+0x54a>
 8030b3c:	9b08      	ldr	r3, [sp, #32]
 8030b3e:	2b46      	cmp	r3, #70	@ 0x46
 8030b40:	d005      	beq.n	8030b4e <_svfprintf_r+0x86e>
 8030b42:	2b45      	cmp	r3, #69	@ 0x45
 8030b44:	d11a      	bne.n	8030b7c <_svfprintf_r+0x89c>
 8030b46:	f108 0601 	add.w	r6, r8, #1
 8030b4a:	2102      	movs	r1, #2
 8030b4c:	e001      	b.n	8030b52 <_svfprintf_r+0x872>
 8030b4e:	4646      	mov	r6, r8
 8030b50:	2103      	movs	r1, #3
 8030b52:	ab24      	add	r3, sp, #144	@ 0x90
 8030b54:	9301      	str	r3, [sp, #4]
 8030b56:	ab21      	add	r3, sp, #132	@ 0x84
 8030b58:	9300      	str	r3, [sp, #0]
 8030b5a:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8030b5e:	ab20      	add	r3, sp, #128	@ 0x80
 8030b60:	9803      	ldr	r0, [sp, #12]
 8030b62:	4632      	mov	r2, r6
 8030b64:	f7fc fd80 	bl	802d668 <_dtoa_r>
 8030b68:	9b08      	ldr	r3, [sp, #32]
 8030b6a:	2b47      	cmp	r3, #71	@ 0x47
 8030b6c:	4681      	mov	r9, r0
 8030b6e:	d119      	bne.n	8030ba4 <_svfprintf_r+0x8c4>
 8030b70:	07e8      	lsls	r0, r5, #31
 8030b72:	d405      	bmi.n	8030b80 <_svfprintf_r+0x8a0>
 8030b74:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8030b76:	eba3 0309 	sub.w	r3, r3, r9
 8030b7a:	e69b      	b.n	80308b4 <_svfprintf_r+0x5d4>
 8030b7c:	4646      	mov	r6, r8
 8030b7e:	e7e4      	b.n	8030b4a <_svfprintf_r+0x86a>
 8030b80:	eb09 0706 	add.w	r7, r9, r6
 8030b84:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8030b88:	2200      	movs	r2, #0
 8030b8a:	2300      	movs	r3, #0
 8030b8c:	f7df ffb4 	bl	8010af8 <__aeabi_dcmpeq>
 8030b90:	b100      	cbz	r0, 8030b94 <_svfprintf_r+0x8b4>
 8030b92:	9724      	str	r7, [sp, #144]	@ 0x90
 8030b94:	2230      	movs	r2, #48	@ 0x30
 8030b96:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8030b98:	429f      	cmp	r7, r3
 8030b9a:	d9eb      	bls.n	8030b74 <_svfprintf_r+0x894>
 8030b9c:	1c59      	adds	r1, r3, #1
 8030b9e:	9124      	str	r1, [sp, #144]	@ 0x90
 8030ba0:	701a      	strb	r2, [r3, #0]
 8030ba2:	e7f8      	b.n	8030b96 <_svfprintf_r+0x8b6>
 8030ba4:	9b08      	ldr	r3, [sp, #32]
 8030ba6:	2b46      	cmp	r3, #70	@ 0x46
 8030ba8:	eb00 0706 	add.w	r7, r0, r6
 8030bac:	d1ea      	bne.n	8030b84 <_svfprintf_r+0x8a4>
 8030bae:	7803      	ldrb	r3, [r0, #0]
 8030bb0:	2b30      	cmp	r3, #48	@ 0x30
 8030bb2:	d109      	bne.n	8030bc8 <_svfprintf_r+0x8e8>
 8030bb4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8030bb8:	2200      	movs	r2, #0
 8030bba:	2300      	movs	r3, #0
 8030bbc:	f7df ff9c 	bl	8010af8 <__aeabi_dcmpeq>
 8030bc0:	b910      	cbnz	r0, 8030bc8 <_svfprintf_r+0x8e8>
 8030bc2:	f1c6 0601 	rsb	r6, r6, #1
 8030bc6:	9620      	str	r6, [sp, #128]	@ 0x80
 8030bc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8030bca:	441f      	add	r7, r3
 8030bcc:	e7da      	b.n	8030b84 <_svfprintf_r+0x8a4>
 8030bce:	9b08      	ldr	r3, [sp, #32]
 8030bd0:	2b46      	cmp	r3, #70	@ 0x46
 8030bd2:	f47f ae7d 	bne.w	80308d0 <_svfprintf_r+0x5f0>
 8030bd6:	f005 0301 	and.w	r3, r5, #1
 8030bda:	2e00      	cmp	r6, #0
 8030bdc:	ea43 0308 	orr.w	r3, r3, r8
 8030be0:	dd25      	ble.n	8030c2e <_svfprintf_r+0x94e>
 8030be2:	b37b      	cbz	r3, 8030c44 <_svfprintf_r+0x964>
 8030be4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030be6:	18f3      	adds	r3, r6, r3
 8030be8:	4498      	add	r8, r3
 8030bea:	2366      	movs	r3, #102	@ 0x66
 8030bec:	9306      	str	r3, [sp, #24]
 8030bee:	e033      	b.n	8030c58 <_svfprintf_r+0x978>
 8030bf0:	f813 7b01 	ldrb.w	r7, [r3], #1
 8030bf4:	f806 7f01 	strb.w	r7, [r6, #1]!
 8030bf8:	e6a1      	b.n	803093e <_svfprintf_r+0x65e>
 8030bfa:	b941      	cbnz	r1, 8030c0e <_svfprintf_r+0x92e>
 8030bfc:	2230      	movs	r2, #48	@ 0x30
 8030bfe:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8030c02:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8030c06:	3330      	adds	r3, #48	@ 0x30
 8030c08:	f802 3b01 	strb.w	r3, [r2], #1
 8030c0c:	e6a3      	b.n	8030956 <_svfprintf_r+0x676>
 8030c0e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8030c12:	e7f8      	b.n	8030c06 <_svfprintf_r+0x926>
 8030c14:	9b04      	ldr	r3, [sp, #16]
 8030c16:	429e      	cmp	r6, r3
 8030c18:	da0d      	bge.n	8030c36 <_svfprintf_r+0x956>
 8030c1a:	9b04      	ldr	r3, [sp, #16]
 8030c1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8030c1e:	2e00      	cmp	r6, #0
 8030c20:	eb03 0802 	add.w	r8, r3, r2
 8030c24:	dc0c      	bgt.n	8030c40 <_svfprintf_r+0x960>
 8030c26:	f1c6 0301 	rsb	r3, r6, #1
 8030c2a:	4498      	add	r8, r3
 8030c2c:	e008      	b.n	8030c40 <_svfprintf_r+0x960>
 8030c2e:	b17b      	cbz	r3, 8030c50 <_svfprintf_r+0x970>
 8030c30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030c32:	3301      	adds	r3, #1
 8030c34:	e7d8      	b.n	8030be8 <_svfprintf_r+0x908>
 8030c36:	07eb      	lsls	r3, r5, #31
 8030c38:	d521      	bpl.n	8030c7e <_svfprintf_r+0x99e>
 8030c3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8030c3c:	eb06 0803 	add.w	r8, r6, r3
 8030c40:	2367      	movs	r3, #103	@ 0x67
 8030c42:	e7d3      	b.n	8030bec <_svfprintf_r+0x90c>
 8030c44:	46b0      	mov	r8, r6
 8030c46:	e7d0      	b.n	8030bea <_svfprintf_r+0x90a>
 8030c48:	0803b29a 	.word	0x0803b29a
 8030c4c:	0803b28a 	.word	0x0803b28a
 8030c50:	2366      	movs	r3, #102	@ 0x66
 8030c52:	9306      	str	r3, [sp, #24]
 8030c54:	f04f 0801 	mov.w	r8, #1
 8030c58:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8030c5c:	9308      	str	r3, [sp, #32]
 8030c5e:	d01f      	beq.n	8030ca0 <_svfprintf_r+0x9c0>
 8030c60:	2700      	movs	r7, #0
 8030c62:	2e00      	cmp	r6, #0
 8030c64:	9708      	str	r7, [sp, #32]
 8030c66:	f77f ae8a 	ble.w	803097e <_svfprintf_r+0x69e>
 8030c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030c6c:	781b      	ldrb	r3, [r3, #0]
 8030c6e:	2bff      	cmp	r3, #255	@ 0xff
 8030c70:	d107      	bne.n	8030c82 <_svfprintf_r+0x9a2>
 8030c72:	9b08      	ldr	r3, [sp, #32]
 8030c74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8030c76:	443b      	add	r3, r7
 8030c78:	fb02 8803 	mla	r8, r2, r3, r8
 8030c7c:	e67f      	b.n	803097e <_svfprintf_r+0x69e>
 8030c7e:	46b0      	mov	r8, r6
 8030c80:	e7de      	b.n	8030c40 <_svfprintf_r+0x960>
 8030c82:	42b3      	cmp	r3, r6
 8030c84:	daf5      	bge.n	8030c72 <_svfprintf_r+0x992>
 8030c86:	1af6      	subs	r6, r6, r3
 8030c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030c8a:	785b      	ldrb	r3, [r3, #1]
 8030c8c:	b133      	cbz	r3, 8030c9c <_svfprintf_r+0x9bc>
 8030c8e:	9b08      	ldr	r3, [sp, #32]
 8030c90:	3301      	adds	r3, #1
 8030c92:	9308      	str	r3, [sp, #32]
 8030c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030c96:	3301      	adds	r3, #1
 8030c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8030c9a:	e7e6      	b.n	8030c6a <_svfprintf_r+0x98a>
 8030c9c:	3701      	adds	r7, #1
 8030c9e:	e7e4      	b.n	8030c6a <_svfprintf_r+0x98a>
 8030ca0:	9f08      	ldr	r7, [sp, #32]
 8030ca2:	e66c      	b.n	803097e <_svfprintf_r+0x69e>
 8030ca4:	232d      	movs	r3, #45	@ 0x2d
 8030ca6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030caa:	e66c      	b.n	8030986 <_svfprintf_r+0x6a6>
 8030cac:	06af      	lsls	r7, r5, #26
 8030cae:	d50a      	bpl.n	8030cc6 <_svfprintf_r+0x9e6>
 8030cb0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030cb2:	6833      	ldr	r3, [r6, #0]
 8030cb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8030cb6:	17d2      	asrs	r2, r2, #31
 8030cb8:	e9c3 1200 	strd	r1, r2, [r3]
 8030cbc:	3604      	adds	r6, #4
 8030cbe:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8030cc2:	f7ff bb46 	b.w	8030352 <_svfprintf_r+0x72>
 8030cc6:	06e8      	lsls	r0, r5, #27
 8030cc8:	d503      	bpl.n	8030cd2 <_svfprintf_r+0x9f2>
 8030cca:	6833      	ldr	r3, [r6, #0]
 8030ccc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030cce:	601a      	str	r2, [r3, #0]
 8030cd0:	e7f4      	b.n	8030cbc <_svfprintf_r+0x9dc>
 8030cd2:	0669      	lsls	r1, r5, #25
 8030cd4:	d503      	bpl.n	8030cde <_svfprintf_r+0x9fe>
 8030cd6:	6833      	ldr	r3, [r6, #0]
 8030cd8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030cda:	801a      	strh	r2, [r3, #0]
 8030cdc:	e7ee      	b.n	8030cbc <_svfprintf_r+0x9dc>
 8030cde:	05aa      	lsls	r2, r5, #22
 8030ce0:	d5f3      	bpl.n	8030cca <_svfprintf_r+0x9ea>
 8030ce2:	6833      	ldr	r3, [r6, #0]
 8030ce4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8030ce6:	701a      	strb	r2, [r3, #0]
 8030ce8:	e7e8      	b.n	8030cbc <_svfprintf_r+0x9dc>
 8030cea:	f045 0510 	orr.w	r5, r5, #16
 8030cee:	f015 0320 	ands.w	r3, r5, #32
 8030cf2:	d020      	beq.n	8030d36 <_svfprintf_r+0xa56>
 8030cf4:	3607      	adds	r6, #7
 8030cf6:	f026 0307 	bic.w	r3, r6, #7
 8030cfa:	461a      	mov	r2, r3
 8030cfc:	685f      	ldr	r7, [r3, #4]
 8030cfe:	f852 6b08 	ldr.w	r6, [r2], #8
 8030d02:	9207      	str	r2, [sp, #28]
 8030d04:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8030d08:	2300      	movs	r3, #0
 8030d0a:	2200      	movs	r2, #0
 8030d0c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8030d10:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8030d14:	f000 848c 	beq.w	8031630 <_svfprintf_r+0x1350>
 8030d18:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8030d1c:	9208      	str	r2, [sp, #32]
 8030d1e:	ea56 0207 	orrs.w	r2, r6, r7
 8030d22:	f040 848a 	bne.w	803163a <_svfprintf_r+0x135a>
 8030d26:	f1b8 0f00 	cmp.w	r8, #0
 8030d2a:	f000 80db 	beq.w	8030ee4 <_svfprintf_r+0xc04>
 8030d2e:	2b01      	cmp	r3, #1
 8030d30:	f040 8486 	bne.w	8031640 <_svfprintf_r+0x1360>
 8030d34:	e083      	b.n	8030e3e <_svfprintf_r+0xb5e>
 8030d36:	4632      	mov	r2, r6
 8030d38:	f015 0710 	ands.w	r7, r5, #16
 8030d3c:	f852 6b04 	ldr.w	r6, [r2], #4
 8030d40:	9207      	str	r2, [sp, #28]
 8030d42:	d001      	beq.n	8030d48 <_svfprintf_r+0xa68>
 8030d44:	461f      	mov	r7, r3
 8030d46:	e7dd      	b.n	8030d04 <_svfprintf_r+0xa24>
 8030d48:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030d4c:	d001      	beq.n	8030d52 <_svfprintf_r+0xa72>
 8030d4e:	b2b6      	uxth	r6, r6
 8030d50:	e7d8      	b.n	8030d04 <_svfprintf_r+0xa24>
 8030d52:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8030d56:	d0d5      	beq.n	8030d04 <_svfprintf_r+0xa24>
 8030d58:	b2f6      	uxtb	r6, r6
 8030d5a:	e7f3      	b.n	8030d44 <_svfprintf_r+0xa64>
 8030d5c:	4633      	mov	r3, r6
 8030d5e:	2278      	movs	r2, #120	@ 0x78
 8030d60:	f853 6b04 	ldr.w	r6, [r3], #4
 8030d64:	9307      	str	r3, [sp, #28]
 8030d66:	f647 0330 	movw	r3, #30768	@ 0x7830
 8030d6a:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8030d6e:	4b94      	ldr	r3, [pc, #592]	@ (8030fc0 <_svfprintf_r+0xce0>)
 8030d70:	9319      	str	r3, [sp, #100]	@ 0x64
 8030d72:	2700      	movs	r7, #0
 8030d74:	f045 0502 	orr.w	r5, r5, #2
 8030d78:	2302      	movs	r3, #2
 8030d7a:	9206      	str	r2, [sp, #24]
 8030d7c:	e7c5      	b.n	8030d0a <_svfprintf_r+0xa2a>
 8030d7e:	4633      	mov	r3, r6
 8030d80:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8030d84:	f853 9b04 	ldr.w	r9, [r3], #4
 8030d88:	9307      	str	r3, [sp, #28]
 8030d8a:	f04f 0600 	mov.w	r6, #0
 8030d8e:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8030d92:	d00f      	beq.n	8030db4 <_svfprintf_r+0xad4>
 8030d94:	4642      	mov	r2, r8
 8030d96:	4631      	mov	r1, r6
 8030d98:	4648      	mov	r0, r9
 8030d9a:	f7df fa31 	bl	8010200 <memchr>
 8030d9e:	4682      	mov	sl, r0
 8030da0:	2800      	cmp	r0, #0
 8030da2:	f43f ac81 	beq.w	80306a8 <_svfprintf_r+0x3c8>
 8030da6:	eba0 0809 	sub.w	r8, r0, r9
 8030daa:	46b2      	mov	sl, r6
 8030dac:	9610      	str	r6, [sp, #64]	@ 0x40
 8030dae:	4637      	mov	r7, r6
 8030db0:	9608      	str	r6, [sp, #32]
 8030db2:	e5eb      	b.n	803098c <_svfprintf_r+0x6ac>
 8030db4:	4648      	mov	r0, r9
 8030db6:	f7df fa73 	bl	80102a0 <strlen>
 8030dba:	46b2      	mov	sl, r6
 8030dbc:	4680      	mov	r8, r0
 8030dbe:	e473      	b.n	80306a8 <_svfprintf_r+0x3c8>
 8030dc0:	f045 0510 	orr.w	r5, r5, #16
 8030dc4:	f015 0320 	ands.w	r3, r5, #32
 8030dc8:	d009      	beq.n	8030dde <_svfprintf_r+0xafe>
 8030dca:	3607      	adds	r6, #7
 8030dcc:	f026 0307 	bic.w	r3, r6, #7
 8030dd0:	461a      	mov	r2, r3
 8030dd2:	685f      	ldr	r7, [r3, #4]
 8030dd4:	f852 6b08 	ldr.w	r6, [r2], #8
 8030dd8:	9207      	str	r2, [sp, #28]
 8030dda:	2301      	movs	r3, #1
 8030ddc:	e795      	b.n	8030d0a <_svfprintf_r+0xa2a>
 8030dde:	4632      	mov	r2, r6
 8030de0:	f015 0710 	ands.w	r7, r5, #16
 8030de4:	f852 6b04 	ldr.w	r6, [r2], #4
 8030de8:	9207      	str	r2, [sp, #28]
 8030dea:	d001      	beq.n	8030df0 <_svfprintf_r+0xb10>
 8030dec:	461f      	mov	r7, r3
 8030dee:	e7f4      	b.n	8030dda <_svfprintf_r+0xafa>
 8030df0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030df4:	d001      	beq.n	8030dfa <_svfprintf_r+0xb1a>
 8030df6:	b2b6      	uxth	r6, r6
 8030df8:	e7ef      	b.n	8030dda <_svfprintf_r+0xafa>
 8030dfa:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8030dfe:	d0ec      	beq.n	8030dda <_svfprintf_r+0xafa>
 8030e00:	b2f6      	uxtb	r6, r6
 8030e02:	e7f3      	b.n	8030dec <_svfprintf_r+0xb0c>
 8030e04:	4b6f      	ldr	r3, [pc, #444]	@ (8030fc4 <_svfprintf_r+0xce4>)
 8030e06:	f7ff bb39 	b.w	803047c <_svfprintf_r+0x19c>
 8030e0a:	4632      	mov	r2, r6
 8030e0c:	f015 0710 	ands.w	r7, r5, #16
 8030e10:	f852 6b04 	ldr.w	r6, [r2], #4
 8030e14:	9207      	str	r2, [sp, #28]
 8030e16:	d002      	beq.n	8030e1e <_svfprintf_r+0xb3e>
 8030e18:	461f      	mov	r7, r3
 8030e1a:	f7ff bb3c 	b.w	8030496 <_svfprintf_r+0x1b6>
 8030e1e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8030e22:	d002      	beq.n	8030e2a <_svfprintf_r+0xb4a>
 8030e24:	b2b6      	uxth	r6, r6
 8030e26:	f7ff bb36 	b.w	8030496 <_svfprintf_r+0x1b6>
 8030e2a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8030e2e:	f43f ab32 	beq.w	8030496 <_svfprintf_r+0x1b6>
 8030e32:	b2f6      	uxtb	r6, r6
 8030e34:	e7f0      	b.n	8030e18 <_svfprintf_r+0xb38>
 8030e36:	2e0a      	cmp	r6, #10
 8030e38:	f177 0300 	sbcs.w	r3, r7, #0
 8030e3c:	d207      	bcs.n	8030e4e <_svfprintf_r+0xb6e>
 8030e3e:	3630      	adds	r6, #48	@ 0x30
 8030e40:	b2f6      	uxtb	r6, r6
 8030e42:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8030e46:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8030e4a:	f000 bc15 	b.w	8031678 <_svfprintf_r+0x1398>
 8030e4e:	2300      	movs	r3, #0
 8030e50:	9304      	str	r3, [sp, #16]
 8030e52:	9b08      	ldr	r3, [sp, #32]
 8030e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8030e58:	ad52      	add	r5, sp, #328	@ 0x148
 8030e5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8030e5c:	220a      	movs	r2, #10
 8030e5e:	2300      	movs	r3, #0
 8030e60:	4630      	mov	r0, r6
 8030e62:	4639      	mov	r1, r7
 8030e64:	f7df ff78 	bl	8010d58 <__aeabi_uldivmod>
 8030e68:	9b04      	ldr	r3, [sp, #16]
 8030e6a:	9011      	str	r0, [sp, #68]	@ 0x44
 8030e6c:	3301      	adds	r3, #1
 8030e6e:	9304      	str	r3, [sp, #16]
 8030e70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030e72:	3230      	adds	r2, #48	@ 0x30
 8030e74:	468a      	mov	sl, r1
 8030e76:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8030e7a:	f805 2c01 	strb.w	r2, [r5, #-1]
 8030e7e:	b1d3      	cbz	r3, 8030eb6 <_svfprintf_r+0xbd6>
 8030e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030e82:	9a04      	ldr	r2, [sp, #16]
 8030e84:	781b      	ldrb	r3, [r3, #0]
 8030e86:	429a      	cmp	r2, r3
 8030e88:	d115      	bne.n	8030eb6 <_svfprintf_r+0xbd6>
 8030e8a:	2aff      	cmp	r2, #255	@ 0xff
 8030e8c:	d013      	beq.n	8030eb6 <_svfprintf_r+0xbd6>
 8030e8e:	2e0a      	cmp	r6, #10
 8030e90:	f177 0300 	sbcs.w	r3, r7, #0
 8030e94:	d30f      	bcc.n	8030eb6 <_svfprintf_r+0xbd6>
 8030e96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8030e98:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8030e9a:	eba9 0903 	sub.w	r9, r9, r3
 8030e9e:	461a      	mov	r2, r3
 8030ea0:	4648      	mov	r0, r9
 8030ea2:	f7fb f8ec 	bl	802c07e <strncpy>
 8030ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030ea8:	785b      	ldrb	r3, [r3, #1]
 8030eaa:	b11b      	cbz	r3, 8030eb4 <_svfprintf_r+0xbd4>
 8030eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030eae:	3301      	adds	r3, #1
 8030eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8030eb2:	2300      	movs	r3, #0
 8030eb4:	9304      	str	r3, [sp, #16]
 8030eb6:	2e0a      	cmp	r6, #10
 8030eb8:	f177 0700 	sbcs.w	r7, r7, #0
 8030ebc:	f0c0 83dc 	bcc.w	8031678 <_svfprintf_r+0x1398>
 8030ec0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8030ec2:	4657      	mov	r7, sl
 8030ec4:	464d      	mov	r5, r9
 8030ec6:	e7c9      	b.n	8030e5c <_svfprintf_r+0xb7c>
 8030ec8:	f006 030f 	and.w	r3, r6, #15
 8030ecc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8030ece:	0936      	lsrs	r6, r6, #4
 8030ed0:	5cd3      	ldrb	r3, [r2, r3]
 8030ed2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8030ed6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8030eda:	093f      	lsrs	r7, r7, #4
 8030edc:	ea56 0307 	orrs.w	r3, r6, r7
 8030ee0:	d1f2      	bne.n	8030ec8 <_svfprintf_r+0xbe8>
 8030ee2:	e3c9      	b.n	8031678 <_svfprintf_r+0x1398>
 8030ee4:	b91b      	cbnz	r3, 8030eee <_svfprintf_r+0xc0e>
 8030ee6:	07e9      	lsls	r1, r5, #31
 8030ee8:	d501      	bpl.n	8030eee <_svfprintf_r+0xc0e>
 8030eea:	2630      	movs	r6, #48	@ 0x30
 8030eec:	e7a9      	b.n	8030e42 <_svfprintf_r+0xb62>
 8030eee:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8030ef2:	e3c1      	b.n	8031678 <_svfprintf_r+0x1398>
 8030ef4:	9b06      	ldr	r3, [sp, #24]
 8030ef6:	2b00      	cmp	r3, #0
 8030ef8:	f000 838f 	beq.w	803161a <_svfprintf_r+0x133a>
 8030efc:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8030f00:	2300      	movs	r3, #0
 8030f02:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8030f06:	9607      	str	r6, [sp, #28]
 8030f08:	f7ff bb63 	b.w	80305d2 <_svfprintf_r+0x2f2>
 8030f0c:	2010      	movs	r0, #16
 8030f0e:	4403      	add	r3, r0
 8030f10:	2a07      	cmp	r2, #7
 8030f12:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030f16:	6060      	str	r0, [r4, #4]
 8030f18:	dd08      	ble.n	8030f2c <_svfprintf_r+0xc4c>
 8030f1a:	9803      	ldr	r0, [sp, #12]
 8030f1c:	aa26      	add	r2, sp, #152	@ 0x98
 8030f1e:	4659      	mov	r1, fp
 8030f20:	f7fd fd66 	bl	802e9f0 <__ssprint_r>
 8030f24:	2800      	cmp	r0, #0
 8030f26:	f040 8356 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8030f2a:	a929      	add	r1, sp, #164	@ 0xa4
 8030f2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8030f2e:	3b10      	subs	r3, #16
 8030f30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030f32:	460c      	mov	r4, r1
 8030f34:	e546      	b.n	80309c4 <_svfprintf_r+0x6e4>
 8030f36:	460c      	mov	r4, r1
 8030f38:	e561      	b.n	80309fe <_svfprintf_r+0x71e>
 8030f3a:	9803      	ldr	r0, [sp, #12]
 8030f3c:	aa26      	add	r2, sp, #152	@ 0x98
 8030f3e:	4659      	mov	r1, fp
 8030f40:	f7fd fd56 	bl	802e9f0 <__ssprint_r>
 8030f44:	2800      	cmp	r0, #0
 8030f46:	f040 8346 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8030f4a:	ac29      	add	r4, sp, #164	@ 0xa4
 8030f4c:	e569      	b.n	8030a22 <_svfprintf_r+0x742>
 8030f4e:	9803      	ldr	r0, [sp, #12]
 8030f50:	aa26      	add	r2, sp, #152	@ 0x98
 8030f52:	4659      	mov	r1, fp
 8030f54:	f7fd fd4c 	bl	802e9f0 <__ssprint_r>
 8030f58:	2800      	cmp	r0, #0
 8030f5a:	f040 833c 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8030f5e:	ac29      	add	r4, sp, #164	@ 0xa4
 8030f60:	e56f      	b.n	8030a42 <_svfprintf_r+0x762>
 8030f62:	2010      	movs	r0, #16
 8030f64:	4403      	add	r3, r0
 8030f66:	2a07      	cmp	r2, #7
 8030f68:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030f6c:	6060      	str	r0, [r4, #4]
 8030f6e:	dd08      	ble.n	8030f82 <_svfprintf_r+0xca2>
 8030f70:	9803      	ldr	r0, [sp, #12]
 8030f72:	aa26      	add	r2, sp, #152	@ 0x98
 8030f74:	4659      	mov	r1, fp
 8030f76:	f7fd fd3b 	bl	802e9f0 <__ssprint_r>
 8030f7a:	2800      	cmp	r0, #0
 8030f7c:	f040 832b 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8030f80:	a929      	add	r1, sp, #164	@ 0xa4
 8030f82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8030f84:	3b10      	subs	r3, #16
 8030f86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8030f88:	460c      	mov	r4, r1
 8030f8a:	e563      	b.n	8030a54 <_svfprintf_r+0x774>
 8030f8c:	460c      	mov	r4, r1
 8030f8e:	e57e      	b.n	8030a8e <_svfprintf_r+0x7ae>
 8030f90:	2010      	movs	r0, #16
 8030f92:	4403      	add	r3, r0
 8030f94:	2a07      	cmp	r2, #7
 8030f96:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8030f9a:	6060      	str	r0, [r4, #4]
 8030f9c:	dd08      	ble.n	8030fb0 <_svfprintf_r+0xcd0>
 8030f9e:	9803      	ldr	r0, [sp, #12]
 8030fa0:	aa26      	add	r2, sp, #152	@ 0x98
 8030fa2:	4659      	mov	r1, fp
 8030fa4:	f7fd fd24 	bl	802e9f0 <__ssprint_r>
 8030fa8:	2800      	cmp	r0, #0
 8030faa:	f040 8314 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8030fae:	a929      	add	r1, sp, #164	@ 0xa4
 8030fb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030fb2:	3b10      	subs	r3, #16
 8030fb4:	9310      	str	r3, [sp, #64]	@ 0x40
 8030fb6:	460c      	mov	r4, r1
 8030fb8:	e56f      	b.n	8030a9a <_svfprintf_r+0x7ba>
 8030fba:	460c      	mov	r4, r1
 8030fbc:	e58a      	b.n	8030ad4 <_svfprintf_r+0x7f4>
 8030fbe:	bf00      	nop
 8030fc0:	0803ad23 	.word	0x0803ad23
 8030fc4:	0803ad34 	.word	0x0803ad34
 8030fc8:	9b06      	ldr	r3, [sp, #24]
 8030fca:	2b65      	cmp	r3, #101	@ 0x65
 8030fcc:	f340 8246 	ble.w	803145c <_svfprintf_r+0x117c>
 8030fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8030fd4:	2200      	movs	r2, #0
 8030fd6:	2300      	movs	r3, #0
 8030fd8:	f7df fd8e 	bl	8010af8 <__aeabi_dcmpeq>
 8030fdc:	2800      	cmp	r0, #0
 8030fde:	d06a      	beq.n	80310b6 <_svfprintf_r+0xdd6>
 8030fe0:	4b73      	ldr	r3, [pc, #460]	@ (80311b0 <_svfprintf_r+0xed0>)
 8030fe2:	6023      	str	r3, [r4, #0]
 8030fe4:	2301      	movs	r3, #1
 8030fe6:	6063      	str	r3, [r4, #4]
 8030fe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8030fea:	3301      	adds	r3, #1
 8030fec:	9328      	str	r3, [sp, #160]	@ 0xa0
 8030fee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8030ff0:	3301      	adds	r3, #1
 8030ff2:	2b07      	cmp	r3, #7
 8030ff4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8030ff6:	dc37      	bgt.n	8031068 <_svfprintf_r+0xd88>
 8030ff8:	3408      	adds	r4, #8
 8030ffa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8030ffc:	9a04      	ldr	r2, [sp, #16]
 8030ffe:	4293      	cmp	r3, r2
 8031000:	db02      	blt.n	8031008 <_svfprintf_r+0xd28>
 8031002:	07ef      	lsls	r7, r5, #31
 8031004:	f57f ad76 	bpl.w	8030af4 <_svfprintf_r+0x814>
 8031008:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803100a:	6023      	str	r3, [r4, #0]
 803100c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803100e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8031010:	6063      	str	r3, [r4, #4]
 8031012:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031014:	4413      	add	r3, r2
 8031016:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031018:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803101a:	3301      	adds	r3, #1
 803101c:	2b07      	cmp	r3, #7
 803101e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031020:	dc2c      	bgt.n	803107c <_svfprintf_r+0xd9c>
 8031022:	3408      	adds	r4, #8
 8031024:	9b04      	ldr	r3, [sp, #16]
 8031026:	1e5e      	subs	r6, r3, #1
 8031028:	2e00      	cmp	r6, #0
 803102a:	f77f ad63 	ble.w	8030af4 <_svfprintf_r+0x814>
 803102e:	4f61      	ldr	r7, [pc, #388]	@ (80311b4 <_svfprintf_r+0xed4>)
 8031030:	f04f 0810 	mov.w	r8, #16
 8031034:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031038:	2e10      	cmp	r6, #16
 803103a:	f103 0301 	add.w	r3, r3, #1
 803103e:	f104 0108 	add.w	r1, r4, #8
 8031042:	6027      	str	r7, [r4, #0]
 8031044:	dc24      	bgt.n	8031090 <_svfprintf_r+0xdb0>
 8031046:	6066      	str	r6, [r4, #4]
 8031048:	2b07      	cmp	r3, #7
 803104a:	4416      	add	r6, r2
 803104c:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8031050:	f340 82a0 	ble.w	8031594 <_svfprintf_r+0x12b4>
 8031054:	9803      	ldr	r0, [sp, #12]
 8031056:	aa26      	add	r2, sp, #152	@ 0x98
 8031058:	4659      	mov	r1, fp
 803105a:	f7fd fcc9 	bl	802e9f0 <__ssprint_r>
 803105e:	2800      	cmp	r0, #0
 8031060:	f040 82b9 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031064:	ac29      	add	r4, sp, #164	@ 0xa4
 8031066:	e545      	b.n	8030af4 <_svfprintf_r+0x814>
 8031068:	9803      	ldr	r0, [sp, #12]
 803106a:	aa26      	add	r2, sp, #152	@ 0x98
 803106c:	4659      	mov	r1, fp
 803106e:	f7fd fcbf 	bl	802e9f0 <__ssprint_r>
 8031072:	2800      	cmp	r0, #0
 8031074:	f040 82af 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031078:	ac29      	add	r4, sp, #164	@ 0xa4
 803107a:	e7be      	b.n	8030ffa <_svfprintf_r+0xd1a>
 803107c:	9803      	ldr	r0, [sp, #12]
 803107e:	aa26      	add	r2, sp, #152	@ 0x98
 8031080:	4659      	mov	r1, fp
 8031082:	f7fd fcb5 	bl	802e9f0 <__ssprint_r>
 8031086:	2800      	cmp	r0, #0
 8031088:	f040 82a5 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 803108c:	ac29      	add	r4, sp, #164	@ 0xa4
 803108e:	e7c9      	b.n	8031024 <_svfprintf_r+0xd44>
 8031090:	3210      	adds	r2, #16
 8031092:	2b07      	cmp	r3, #7
 8031094:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031098:	f8c4 8004 	str.w	r8, [r4, #4]
 803109c:	dd08      	ble.n	80310b0 <_svfprintf_r+0xdd0>
 803109e:	9803      	ldr	r0, [sp, #12]
 80310a0:	aa26      	add	r2, sp, #152	@ 0x98
 80310a2:	4659      	mov	r1, fp
 80310a4:	f7fd fca4 	bl	802e9f0 <__ssprint_r>
 80310a8:	2800      	cmp	r0, #0
 80310aa:	f040 8294 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 80310ae:	a929      	add	r1, sp, #164	@ 0xa4
 80310b0:	3e10      	subs	r6, #16
 80310b2:	460c      	mov	r4, r1
 80310b4:	e7be      	b.n	8031034 <_svfprintf_r+0xd54>
 80310b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80310b8:	2b00      	cmp	r3, #0
 80310ba:	dc7d      	bgt.n	80311b8 <_svfprintf_r+0xed8>
 80310bc:	4b3c      	ldr	r3, [pc, #240]	@ (80311b0 <_svfprintf_r+0xed0>)
 80310be:	6023      	str	r3, [r4, #0]
 80310c0:	2301      	movs	r3, #1
 80310c2:	6063      	str	r3, [r4, #4]
 80310c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80310c6:	3301      	adds	r3, #1
 80310c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80310ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80310cc:	3301      	adds	r3, #1
 80310ce:	2b07      	cmp	r3, #7
 80310d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80310d2:	dc46      	bgt.n	8031162 <_svfprintf_r+0xe82>
 80310d4:	3408      	adds	r4, #8
 80310d6:	9904      	ldr	r1, [sp, #16]
 80310d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80310da:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80310dc:	430b      	orrs	r3, r1
 80310de:	f005 0101 	and.w	r1, r5, #1
 80310e2:	430b      	orrs	r3, r1
 80310e4:	f43f ad06 	beq.w	8030af4 <_svfprintf_r+0x814>
 80310e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80310ea:	6023      	str	r3, [r4, #0]
 80310ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80310ee:	6063      	str	r3, [r4, #4]
 80310f0:	441a      	add	r2, r3
 80310f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80310f4:	9228      	str	r2, [sp, #160]	@ 0xa0
 80310f6:	3301      	adds	r3, #1
 80310f8:	2b07      	cmp	r3, #7
 80310fa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80310fc:	dc3b      	bgt.n	8031176 <_svfprintf_r+0xe96>
 80310fe:	f104 0308 	add.w	r3, r4, #8
 8031102:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8031104:	2e00      	cmp	r6, #0
 8031106:	da1b      	bge.n	8031140 <_svfprintf_r+0xe60>
 8031108:	4f2a      	ldr	r7, [pc, #168]	@ (80311b4 <_svfprintf_r+0xed4>)
 803110a:	4276      	negs	r6, r6
 803110c:	461a      	mov	r2, r3
 803110e:	2410      	movs	r4, #16
 8031110:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8031114:	2e10      	cmp	r6, #16
 8031116:	f101 0101 	add.w	r1, r1, #1
 803111a:	f103 0308 	add.w	r3, r3, #8
 803111e:	6017      	str	r7, [r2, #0]
 8031120:	dc33      	bgt.n	803118a <_svfprintf_r+0xeaa>
 8031122:	6056      	str	r6, [r2, #4]
 8031124:	2907      	cmp	r1, #7
 8031126:	4406      	add	r6, r0
 8031128:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 803112c:	dd08      	ble.n	8031140 <_svfprintf_r+0xe60>
 803112e:	9803      	ldr	r0, [sp, #12]
 8031130:	aa26      	add	r2, sp, #152	@ 0x98
 8031132:	4659      	mov	r1, fp
 8031134:	f7fd fc5c 	bl	802e9f0 <__ssprint_r>
 8031138:	2800      	cmp	r0, #0
 803113a:	f040 824c 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 803113e:	ab29      	add	r3, sp, #164	@ 0xa4
 8031140:	9a04      	ldr	r2, [sp, #16]
 8031142:	9904      	ldr	r1, [sp, #16]
 8031144:	605a      	str	r2, [r3, #4]
 8031146:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8031148:	f8c3 9000 	str.w	r9, [r3]
 803114c:	440a      	add	r2, r1
 803114e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8031150:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031152:	3201      	adds	r2, #1
 8031154:	2a07      	cmp	r2, #7
 8031156:	9227      	str	r2, [sp, #156]	@ 0x9c
 8031158:	f73f af7c 	bgt.w	8031054 <_svfprintf_r+0xd74>
 803115c:	f103 0408 	add.w	r4, r3, #8
 8031160:	e4c8      	b.n	8030af4 <_svfprintf_r+0x814>
 8031162:	9803      	ldr	r0, [sp, #12]
 8031164:	aa26      	add	r2, sp, #152	@ 0x98
 8031166:	4659      	mov	r1, fp
 8031168:	f7fd fc42 	bl	802e9f0 <__ssprint_r>
 803116c:	2800      	cmp	r0, #0
 803116e:	f040 8232 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031172:	ac29      	add	r4, sp, #164	@ 0xa4
 8031174:	e7af      	b.n	80310d6 <_svfprintf_r+0xdf6>
 8031176:	9803      	ldr	r0, [sp, #12]
 8031178:	aa26      	add	r2, sp, #152	@ 0x98
 803117a:	4659      	mov	r1, fp
 803117c:	f7fd fc38 	bl	802e9f0 <__ssprint_r>
 8031180:	2800      	cmp	r0, #0
 8031182:	f040 8228 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031186:	ab29      	add	r3, sp, #164	@ 0xa4
 8031188:	e7bb      	b.n	8031102 <_svfprintf_r+0xe22>
 803118a:	3010      	adds	r0, #16
 803118c:	2907      	cmp	r1, #7
 803118e:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 8031192:	6054      	str	r4, [r2, #4]
 8031194:	dd08      	ble.n	80311a8 <_svfprintf_r+0xec8>
 8031196:	9803      	ldr	r0, [sp, #12]
 8031198:	aa26      	add	r2, sp, #152	@ 0x98
 803119a:	4659      	mov	r1, fp
 803119c:	f7fd fc28 	bl	802e9f0 <__ssprint_r>
 80311a0:	2800      	cmp	r0, #0
 80311a2:	f040 8218 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 80311a6:	ab29      	add	r3, sp, #164	@ 0xa4
 80311a8:	3e10      	subs	r6, #16
 80311aa:	461a      	mov	r2, r3
 80311ac:	e7b0      	b.n	8031110 <_svfprintf_r+0xe30>
 80311ae:	bf00      	nop
 80311b0:	0803ad45 	.word	0x0803ad45
 80311b4:	0803b28a 	.word	0x0803b28a
 80311b8:	9b04      	ldr	r3, [sp, #16]
 80311ba:	444b      	add	r3, r9
 80311bc:	9306      	str	r3, [sp, #24]
 80311be:	9b04      	ldr	r3, [sp, #16]
 80311c0:	42b3      	cmp	r3, r6
 80311c2:	bfa8      	it	ge
 80311c4:	4633      	movge	r3, r6
 80311c6:	2b00      	cmp	r3, #0
 80311c8:	4698      	mov	r8, r3
 80311ca:	dd0b      	ble.n	80311e4 <_svfprintf_r+0xf04>
 80311cc:	e9c4 9300 	strd	r9, r3, [r4]
 80311d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80311d2:	4443      	add	r3, r8
 80311d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80311d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80311d8:	3301      	adds	r3, #1
 80311da:	2b07      	cmp	r3, #7
 80311dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80311de:	f300 8089 	bgt.w	80312f4 <_svfprintf_r+0x1014>
 80311e2:	3408      	adds	r4, #8
 80311e4:	4643      	mov	r3, r8
 80311e6:	2b00      	cmp	r3, #0
 80311e8:	bfac      	ite	ge
 80311ea:	eba6 0808 	subge.w	r8, r6, r8
 80311ee:	46b0      	movlt	r8, r6
 80311f0:	f1b8 0f00 	cmp.w	r8, #0
 80311f4:	dd1b      	ble.n	803122e <_svfprintf_r+0xf4e>
 80311f6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80311fa:	4897      	ldr	r0, [pc, #604]	@ (8031458 <_svfprintf_r+0x1178>)
 80311fc:	6020      	str	r0, [r4, #0]
 80311fe:	f1b8 0f10 	cmp.w	r8, #16
 8031202:	f102 0201 	add.w	r2, r2, #1
 8031206:	f104 0108 	add.w	r1, r4, #8
 803120a:	dc7d      	bgt.n	8031308 <_svfprintf_r+0x1028>
 803120c:	4443      	add	r3, r8
 803120e:	2a07      	cmp	r2, #7
 8031210:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031214:	f8c4 8004 	str.w	r8, [r4, #4]
 8031218:	f340 808a 	ble.w	8031330 <_svfprintf_r+0x1050>
 803121c:	9803      	ldr	r0, [sp, #12]
 803121e:	aa26      	add	r2, sp, #152	@ 0x98
 8031220:	4659      	mov	r1, fp
 8031222:	f7fd fbe5 	bl	802e9f0 <__ssprint_r>
 8031226:	2800      	cmp	r0, #0
 8031228:	f040 81d5 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 803122c:	ac29      	add	r4, sp, #164	@ 0xa4
 803122e:	eb09 0806 	add.w	r8, r9, r6
 8031232:	056e      	lsls	r6, r5, #21
 8031234:	d508      	bpl.n	8031248 <_svfprintf_r+0xf68>
 8031236:	9b08      	ldr	r3, [sp, #32]
 8031238:	2b00      	cmp	r3, #0
 803123a:	d17b      	bne.n	8031334 <_svfprintf_r+0x1054>
 803123c:	2f00      	cmp	r7, #0
 803123e:	d17b      	bne.n	8031338 <_svfprintf_r+0x1058>
 8031240:	9b06      	ldr	r3, [sp, #24]
 8031242:	4598      	cmp	r8, r3
 8031244:	bf28      	it	cs
 8031246:	4698      	movcs	r8, r3
 8031248:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 803124a:	9a04      	ldr	r2, [sp, #16]
 803124c:	4293      	cmp	r3, r2
 803124e:	db01      	blt.n	8031254 <_svfprintf_r+0xf74>
 8031250:	07e8      	lsls	r0, r5, #31
 8031252:	d50e      	bpl.n	8031272 <_svfprintf_r+0xf92>
 8031254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8031256:	6023      	str	r3, [r4, #0]
 8031258:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803125a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803125c:	6063      	str	r3, [r4, #4]
 803125e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031260:	4413      	add	r3, r2
 8031262:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031264:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031266:	3301      	adds	r3, #1
 8031268:	2b07      	cmp	r3, #7
 803126a:	9327      	str	r3, [sp, #156]	@ 0x9c
 803126c:	f300 80df 	bgt.w	803142e <_svfprintf_r+0x114e>
 8031270:	3408      	adds	r4, #8
 8031272:	9b04      	ldr	r3, [sp, #16]
 8031274:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8031276:	1bdf      	subs	r7, r3, r7
 8031278:	9b06      	ldr	r3, [sp, #24]
 803127a:	eba3 0308 	sub.w	r3, r3, r8
 803127e:	429f      	cmp	r7, r3
 8031280:	bfa8      	it	ge
 8031282:	461f      	movge	r7, r3
 8031284:	2f00      	cmp	r7, #0
 8031286:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031288:	dd0a      	ble.n	80312a0 <_svfprintf_r+0xfc0>
 803128a:	443b      	add	r3, r7
 803128c:	9328      	str	r3, [sp, #160]	@ 0xa0
 803128e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031290:	3301      	adds	r3, #1
 8031292:	2b07      	cmp	r3, #7
 8031294:	e9c4 8700 	strd	r8, r7, [r4]
 8031298:	9327      	str	r3, [sp, #156]	@ 0x9c
 803129a:	f300 80d2 	bgt.w	8031442 <_svfprintf_r+0x1162>
 803129e:	3408      	adds	r4, #8
 80312a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80312a2:	9b04      	ldr	r3, [sp, #16]
 80312a4:	2f00      	cmp	r7, #0
 80312a6:	eba3 0606 	sub.w	r6, r3, r6
 80312aa:	bfa8      	it	ge
 80312ac:	1bf6      	subge	r6, r6, r7
 80312ae:	2e00      	cmp	r6, #0
 80312b0:	f77f ac20 	ble.w	8030af4 <_svfprintf_r+0x814>
 80312b4:	4f68      	ldr	r7, [pc, #416]	@ (8031458 <_svfprintf_r+0x1178>)
 80312b6:	f04f 0810 	mov.w	r8, #16
 80312ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80312be:	2e10      	cmp	r6, #16
 80312c0:	f103 0301 	add.w	r3, r3, #1
 80312c4:	f104 0108 	add.w	r1, r4, #8
 80312c8:	6027      	str	r7, [r4, #0]
 80312ca:	f77f aebc 	ble.w	8031046 <_svfprintf_r+0xd66>
 80312ce:	3210      	adds	r2, #16
 80312d0:	2b07      	cmp	r3, #7
 80312d2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80312d6:	f8c4 8004 	str.w	r8, [r4, #4]
 80312da:	dd08      	ble.n	80312ee <_svfprintf_r+0x100e>
 80312dc:	9803      	ldr	r0, [sp, #12]
 80312de:	aa26      	add	r2, sp, #152	@ 0x98
 80312e0:	4659      	mov	r1, fp
 80312e2:	f7fd fb85 	bl	802e9f0 <__ssprint_r>
 80312e6:	2800      	cmp	r0, #0
 80312e8:	f040 8175 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 80312ec:	a929      	add	r1, sp, #164	@ 0xa4
 80312ee:	3e10      	subs	r6, #16
 80312f0:	460c      	mov	r4, r1
 80312f2:	e7e2      	b.n	80312ba <_svfprintf_r+0xfda>
 80312f4:	9803      	ldr	r0, [sp, #12]
 80312f6:	aa26      	add	r2, sp, #152	@ 0x98
 80312f8:	4659      	mov	r1, fp
 80312fa:	f7fd fb79 	bl	802e9f0 <__ssprint_r>
 80312fe:	2800      	cmp	r0, #0
 8031300:	f040 8169 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031304:	ac29      	add	r4, sp, #164	@ 0xa4
 8031306:	e76d      	b.n	80311e4 <_svfprintf_r+0xf04>
 8031308:	2010      	movs	r0, #16
 803130a:	4403      	add	r3, r0
 803130c:	2a07      	cmp	r2, #7
 803130e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031312:	6060      	str	r0, [r4, #4]
 8031314:	dd08      	ble.n	8031328 <_svfprintf_r+0x1048>
 8031316:	9803      	ldr	r0, [sp, #12]
 8031318:	aa26      	add	r2, sp, #152	@ 0x98
 803131a:	4659      	mov	r1, fp
 803131c:	f7fd fb68 	bl	802e9f0 <__ssprint_r>
 8031320:	2800      	cmp	r0, #0
 8031322:	f040 8158 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031326:	a929      	add	r1, sp, #164	@ 0xa4
 8031328:	f1a8 0810 	sub.w	r8, r8, #16
 803132c:	460c      	mov	r4, r1
 803132e:	e762      	b.n	80311f6 <_svfprintf_r+0xf16>
 8031330:	460c      	mov	r4, r1
 8031332:	e77c      	b.n	803122e <_svfprintf_r+0xf4e>
 8031334:	2f00      	cmp	r7, #0
 8031336:	d04a      	beq.n	80313ce <_svfprintf_r+0x10ee>
 8031338:	3f01      	subs	r7, #1
 803133a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803133c:	6023      	str	r3, [r4, #0]
 803133e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8031340:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8031342:	6063      	str	r3, [r4, #4]
 8031344:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031346:	4413      	add	r3, r2
 8031348:	9328      	str	r3, [sp, #160]	@ 0xa0
 803134a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803134c:	3301      	adds	r3, #1
 803134e:	2b07      	cmp	r3, #7
 8031350:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031352:	dc43      	bgt.n	80313dc <_svfprintf_r+0x10fc>
 8031354:	3408      	adds	r4, #8
 8031356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031358:	781a      	ldrb	r2, [r3, #0]
 803135a:	9b06      	ldr	r3, [sp, #24]
 803135c:	eba3 0308 	sub.w	r3, r3, r8
 8031360:	429a      	cmp	r2, r3
 8031362:	bfa8      	it	ge
 8031364:	461a      	movge	r2, r3
 8031366:	2a00      	cmp	r2, #0
 8031368:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803136a:	4691      	mov	r9, r2
 803136c:	dd09      	ble.n	8031382 <_svfprintf_r+0x10a2>
 803136e:	4413      	add	r3, r2
 8031370:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031372:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8031374:	3301      	adds	r3, #1
 8031376:	2b07      	cmp	r3, #7
 8031378:	e9c4 8200 	strd	r8, r2, [r4]
 803137c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803137e:	dc37      	bgt.n	80313f0 <_svfprintf_r+0x1110>
 8031380:	3408      	adds	r4, #8
 8031382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8031384:	781e      	ldrb	r6, [r3, #0]
 8031386:	f1b9 0f00 	cmp.w	r9, #0
 803138a:	bfa8      	it	ge
 803138c:	eba6 0609 	subge.w	r6, r6, r9
 8031390:	2e00      	cmp	r6, #0
 8031392:	dd18      	ble.n	80313c6 <_svfprintf_r+0x10e6>
 8031394:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8031398:	482f      	ldr	r0, [pc, #188]	@ (8031458 <_svfprintf_r+0x1178>)
 803139a:	6020      	str	r0, [r4, #0]
 803139c:	2e10      	cmp	r6, #16
 803139e:	f103 0301 	add.w	r3, r3, #1
 80313a2:	f104 0108 	add.w	r1, r4, #8
 80313a6:	dc2d      	bgt.n	8031404 <_svfprintf_r+0x1124>
 80313a8:	6066      	str	r6, [r4, #4]
 80313aa:	2b07      	cmp	r3, #7
 80313ac:	4416      	add	r6, r2
 80313ae:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80313b2:	dd3a      	ble.n	803142a <_svfprintf_r+0x114a>
 80313b4:	9803      	ldr	r0, [sp, #12]
 80313b6:	aa26      	add	r2, sp, #152	@ 0x98
 80313b8:	4659      	mov	r1, fp
 80313ba:	f7fd fb19 	bl	802e9f0 <__ssprint_r>
 80313be:	2800      	cmp	r0, #0
 80313c0:	f040 8109 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 80313c4:	ac29      	add	r4, sp, #164	@ 0xa4
 80313c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80313c8:	781b      	ldrb	r3, [r3, #0]
 80313ca:	4498      	add	r8, r3
 80313cc:	e733      	b.n	8031236 <_svfprintf_r+0xf56>
 80313ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80313d0:	3b01      	subs	r3, #1
 80313d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80313d4:	9b08      	ldr	r3, [sp, #32]
 80313d6:	3b01      	subs	r3, #1
 80313d8:	9308      	str	r3, [sp, #32]
 80313da:	e7ae      	b.n	803133a <_svfprintf_r+0x105a>
 80313dc:	9803      	ldr	r0, [sp, #12]
 80313de:	aa26      	add	r2, sp, #152	@ 0x98
 80313e0:	4659      	mov	r1, fp
 80313e2:	f7fd fb05 	bl	802e9f0 <__ssprint_r>
 80313e6:	2800      	cmp	r0, #0
 80313e8:	f040 80f5 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 80313ec:	ac29      	add	r4, sp, #164	@ 0xa4
 80313ee:	e7b2      	b.n	8031356 <_svfprintf_r+0x1076>
 80313f0:	9803      	ldr	r0, [sp, #12]
 80313f2:	aa26      	add	r2, sp, #152	@ 0x98
 80313f4:	4659      	mov	r1, fp
 80313f6:	f7fd fafb 	bl	802e9f0 <__ssprint_r>
 80313fa:	2800      	cmp	r0, #0
 80313fc:	f040 80eb 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031400:	ac29      	add	r4, sp, #164	@ 0xa4
 8031402:	e7be      	b.n	8031382 <_svfprintf_r+0x10a2>
 8031404:	2010      	movs	r0, #16
 8031406:	4402      	add	r2, r0
 8031408:	2b07      	cmp	r3, #7
 803140a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 803140e:	6060      	str	r0, [r4, #4]
 8031410:	dd08      	ble.n	8031424 <_svfprintf_r+0x1144>
 8031412:	9803      	ldr	r0, [sp, #12]
 8031414:	aa26      	add	r2, sp, #152	@ 0x98
 8031416:	4659      	mov	r1, fp
 8031418:	f7fd faea 	bl	802e9f0 <__ssprint_r>
 803141c:	2800      	cmp	r0, #0
 803141e:	f040 80da 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031422:	a929      	add	r1, sp, #164	@ 0xa4
 8031424:	3e10      	subs	r6, #16
 8031426:	460c      	mov	r4, r1
 8031428:	e7b4      	b.n	8031394 <_svfprintf_r+0x10b4>
 803142a:	460c      	mov	r4, r1
 803142c:	e7cb      	b.n	80313c6 <_svfprintf_r+0x10e6>
 803142e:	9803      	ldr	r0, [sp, #12]
 8031430:	aa26      	add	r2, sp, #152	@ 0x98
 8031432:	4659      	mov	r1, fp
 8031434:	f7fd fadc 	bl	802e9f0 <__ssprint_r>
 8031438:	2800      	cmp	r0, #0
 803143a:	f040 80cc 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 803143e:	ac29      	add	r4, sp, #164	@ 0xa4
 8031440:	e717      	b.n	8031272 <_svfprintf_r+0xf92>
 8031442:	9803      	ldr	r0, [sp, #12]
 8031444:	aa26      	add	r2, sp, #152	@ 0x98
 8031446:	4659      	mov	r1, fp
 8031448:	f7fd fad2 	bl	802e9f0 <__ssprint_r>
 803144c:	2800      	cmp	r0, #0
 803144e:	f040 80c2 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031452:	ac29      	add	r4, sp, #164	@ 0xa4
 8031454:	e724      	b.n	80312a0 <_svfprintf_r+0xfc0>
 8031456:	bf00      	nop
 8031458:	0803b28a 	.word	0x0803b28a
 803145c:	9904      	ldr	r1, [sp, #16]
 803145e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8031460:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8031462:	2901      	cmp	r1, #1
 8031464:	f103 0301 	add.w	r3, r3, #1
 8031468:	f102 0201 	add.w	r2, r2, #1
 803146c:	f104 0608 	add.w	r6, r4, #8
 8031470:	dc02      	bgt.n	8031478 <_svfprintf_r+0x1198>
 8031472:	07e9      	lsls	r1, r5, #31
 8031474:	f140 8083 	bpl.w	803157e <_svfprintf_r+0x129e>
 8031478:	2101      	movs	r1, #1
 803147a:	2a07      	cmp	r2, #7
 803147c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031480:	f8c4 9000 	str.w	r9, [r4]
 8031484:	6061      	str	r1, [r4, #4]
 8031486:	dd08      	ble.n	803149a <_svfprintf_r+0x11ba>
 8031488:	9803      	ldr	r0, [sp, #12]
 803148a:	aa26      	add	r2, sp, #152	@ 0x98
 803148c:	4659      	mov	r1, fp
 803148e:	f7fd faaf 	bl	802e9f0 <__ssprint_r>
 8031492:	2800      	cmp	r0, #0
 8031494:	f040 809f 	bne.w	80315d6 <_svfprintf_r+0x12f6>
 8031498:	ae29      	add	r6, sp, #164	@ 0xa4
 803149a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803149c:	6033      	str	r3, [r6, #0]
 803149e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80314a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80314a2:	6073      	str	r3, [r6, #4]
 80314a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80314a6:	4413      	add	r3, r2
 80314a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80314aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80314ac:	3301      	adds	r3, #1
 80314ae:	2b07      	cmp	r3, #7
 80314b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80314b2:	dc33      	bgt.n	803151c <_svfprintf_r+0x123c>
 80314b4:	3608      	adds	r6, #8
 80314b6:	9b04      	ldr	r3, [sp, #16]
 80314b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80314bc:	1e5c      	subs	r4, r3, #1
 80314be:	2200      	movs	r2, #0
 80314c0:	2300      	movs	r3, #0
 80314c2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 80314c6:	f7df fb17 	bl	8010af8 <__aeabi_dcmpeq>
 80314ca:	2800      	cmp	r0, #0
 80314cc:	d12f      	bne.n	803152e <_svfprintf_r+0x124e>
 80314ce:	f109 0201 	add.w	r2, r9, #1
 80314d2:	e9c6 2400 	strd	r2, r4, [r6]
 80314d6:	9a04      	ldr	r2, [sp, #16]
 80314d8:	f108 0301 	add.w	r3, r8, #1
 80314dc:	3f01      	subs	r7, #1
 80314de:	4417      	add	r7, r2
 80314e0:	2b07      	cmp	r3, #7
 80314e2:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80314e6:	dd53      	ble.n	8031590 <_svfprintf_r+0x12b0>
 80314e8:	9803      	ldr	r0, [sp, #12]
 80314ea:	aa26      	add	r2, sp, #152	@ 0x98
 80314ec:	4659      	mov	r1, fp
 80314ee:	f7fd fa7f 	bl	802e9f0 <__ssprint_r>
 80314f2:	2800      	cmp	r0, #0
 80314f4:	d16f      	bne.n	80315d6 <_svfprintf_r+0x12f6>
 80314f6:	ae29      	add	r6, sp, #164	@ 0xa4
 80314f8:	ab22      	add	r3, sp, #136	@ 0x88
 80314fa:	6033      	str	r3, [r6, #0]
 80314fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80314fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8031500:	6073      	str	r3, [r6, #4]
 8031502:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8031504:	4413      	add	r3, r2
 8031506:	9328      	str	r3, [sp, #160]	@ 0xa0
 8031508:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803150a:	3301      	adds	r3, #1
 803150c:	2b07      	cmp	r3, #7
 803150e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8031510:	f73f ada0 	bgt.w	8031054 <_svfprintf_r+0xd74>
 8031514:	f106 0408 	add.w	r4, r6, #8
 8031518:	f7ff baec 	b.w	8030af4 <_svfprintf_r+0x814>
 803151c:	9803      	ldr	r0, [sp, #12]
 803151e:	aa26      	add	r2, sp, #152	@ 0x98
 8031520:	4659      	mov	r1, fp
 8031522:	f7fd fa65 	bl	802e9f0 <__ssprint_r>
 8031526:	2800      	cmp	r0, #0
 8031528:	d155      	bne.n	80315d6 <_svfprintf_r+0x12f6>
 803152a:	ae29      	add	r6, sp, #164	@ 0xa4
 803152c:	e7c3      	b.n	80314b6 <_svfprintf_r+0x11d6>
 803152e:	9b04      	ldr	r3, [sp, #16]
 8031530:	2b01      	cmp	r3, #1
 8031532:	dde1      	ble.n	80314f8 <_svfprintf_r+0x1218>
 8031534:	4f57      	ldr	r7, [pc, #348]	@ (8031694 <_svfprintf_r+0x13b4>)
 8031536:	f04f 0810 	mov.w	r8, #16
 803153a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 803153e:	2c10      	cmp	r4, #16
 8031540:	f103 0301 	add.w	r3, r3, #1
 8031544:	f106 0108 	add.w	r1, r6, #8
 8031548:	6037      	str	r7, [r6, #0]
 803154a:	dc07      	bgt.n	803155c <_svfprintf_r+0x127c>
 803154c:	6074      	str	r4, [r6, #4]
 803154e:	2b07      	cmp	r3, #7
 8031550:	4414      	add	r4, r2
 8031552:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8031556:	dcc7      	bgt.n	80314e8 <_svfprintf_r+0x1208>
 8031558:	460e      	mov	r6, r1
 803155a:	e7cd      	b.n	80314f8 <_svfprintf_r+0x1218>
 803155c:	3210      	adds	r2, #16
 803155e:	2b07      	cmp	r3, #7
 8031560:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8031564:	f8c6 8004 	str.w	r8, [r6, #4]
 8031568:	dd06      	ble.n	8031578 <_svfprintf_r+0x1298>
 803156a:	9803      	ldr	r0, [sp, #12]
 803156c:	aa26      	add	r2, sp, #152	@ 0x98
 803156e:	4659      	mov	r1, fp
 8031570:	f7fd fa3e 	bl	802e9f0 <__ssprint_r>
 8031574:	bb78      	cbnz	r0, 80315d6 <_svfprintf_r+0x12f6>
 8031576:	a929      	add	r1, sp, #164	@ 0xa4
 8031578:	3c10      	subs	r4, #16
 803157a:	460e      	mov	r6, r1
 803157c:	e7dd      	b.n	803153a <_svfprintf_r+0x125a>
 803157e:	2101      	movs	r1, #1
 8031580:	2a07      	cmp	r2, #7
 8031582:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8031586:	f8c4 9000 	str.w	r9, [r4]
 803158a:	6061      	str	r1, [r4, #4]
 803158c:	ddb4      	ble.n	80314f8 <_svfprintf_r+0x1218>
 803158e:	e7ab      	b.n	80314e8 <_svfprintf_r+0x1208>
 8031590:	3608      	adds	r6, #8
 8031592:	e7b1      	b.n	80314f8 <_svfprintf_r+0x1218>
 8031594:	460c      	mov	r4, r1
 8031596:	f7ff baad 	b.w	8030af4 <_svfprintf_r+0x814>
 803159a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803159c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803159e:	1a9d      	subs	r5, r3, r2
 80315a0:	2d00      	cmp	r5, #0
 80315a2:	f77f aaaa 	ble.w	8030afa <_svfprintf_r+0x81a>
 80315a6:	4e3c      	ldr	r6, [pc, #240]	@ (8031698 <_svfprintf_r+0x13b8>)
 80315a8:	2710      	movs	r7, #16
 80315aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80315ae:	2d10      	cmp	r5, #16
 80315b0:	f103 0301 	add.w	r3, r3, #1
 80315b4:	6026      	str	r6, [r4, #0]
 80315b6:	dc18      	bgt.n	80315ea <_svfprintf_r+0x130a>
 80315b8:	442a      	add	r2, r5
 80315ba:	2b07      	cmp	r3, #7
 80315bc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80315c0:	6065      	str	r5, [r4, #4]
 80315c2:	f77f aa9a 	ble.w	8030afa <_svfprintf_r+0x81a>
 80315c6:	9803      	ldr	r0, [sp, #12]
 80315c8:	aa26      	add	r2, sp, #152	@ 0x98
 80315ca:	4659      	mov	r1, fp
 80315cc:	f7fd fa10 	bl	802e9f0 <__ssprint_r>
 80315d0:	2800      	cmp	r0, #0
 80315d2:	f43f aa92 	beq.w	8030afa <_svfprintf_r+0x81a>
 80315d6:	f1ba 0f00 	cmp.w	sl, #0
 80315da:	f43f a89a 	beq.w	8030712 <_svfprintf_r+0x432>
 80315de:	9803      	ldr	r0, [sp, #12]
 80315e0:	4651      	mov	r1, sl
 80315e2:	f7fc fe43 	bl	802e26c <_free_r>
 80315e6:	f7ff b894 	b.w	8030712 <_svfprintf_r+0x432>
 80315ea:	3210      	adds	r2, #16
 80315ec:	2b07      	cmp	r3, #7
 80315ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80315f2:	6067      	str	r7, [r4, #4]
 80315f4:	dc02      	bgt.n	80315fc <_svfprintf_r+0x131c>
 80315f6:	3408      	adds	r4, #8
 80315f8:	3d10      	subs	r5, #16
 80315fa:	e7d6      	b.n	80315aa <_svfprintf_r+0x12ca>
 80315fc:	9803      	ldr	r0, [sp, #12]
 80315fe:	aa26      	add	r2, sp, #152	@ 0x98
 8031600:	4659      	mov	r1, fp
 8031602:	f7fd f9f5 	bl	802e9f0 <__ssprint_r>
 8031606:	2800      	cmp	r0, #0
 8031608:	d1e5      	bne.n	80315d6 <_svfprintf_r+0x12f6>
 803160a:	ac29      	add	r4, sp, #164	@ 0xa4
 803160c:	e7f4      	b.n	80315f8 <_svfprintf_r+0x1318>
 803160e:	9803      	ldr	r0, [sp, #12]
 8031610:	4651      	mov	r1, sl
 8031612:	f7fc fe2b 	bl	802e26c <_free_r>
 8031616:	f7ff ba88 	b.w	8030b2a <_svfprintf_r+0x84a>
 803161a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803161c:	2b00      	cmp	r3, #0
 803161e:	f43f a878 	beq.w	8030712 <_svfprintf_r+0x432>
 8031622:	9803      	ldr	r0, [sp, #12]
 8031624:	aa26      	add	r2, sp, #152	@ 0x98
 8031626:	4659      	mov	r1, fp
 8031628:	f7fd f9e2 	bl	802e9f0 <__ssprint_r>
 803162c:	f7ff b871 	b.w	8030712 <_svfprintf_r+0x432>
 8031630:	ea56 0207 	orrs.w	r2, r6, r7
 8031634:	9508      	str	r5, [sp, #32]
 8031636:	f43f ab7a 	beq.w	8030d2e <_svfprintf_r+0xa4e>
 803163a:	2b01      	cmp	r3, #1
 803163c:	f43f abfb 	beq.w	8030e36 <_svfprintf_r+0xb56>
 8031640:	2b02      	cmp	r3, #2
 8031642:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8031646:	f43f ac3f 	beq.w	8030ec8 <_svfprintf_r+0xbe8>
 803164a:	f006 0307 	and.w	r3, r6, #7
 803164e:	08f6      	lsrs	r6, r6, #3
 8031650:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8031654:	08ff      	lsrs	r7, r7, #3
 8031656:	3330      	adds	r3, #48	@ 0x30
 8031658:	ea56 0107 	orrs.w	r1, r6, r7
 803165c:	464a      	mov	r2, r9
 803165e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8031662:	d1f2      	bne.n	803164a <_svfprintf_r+0x136a>
 8031664:	9908      	ldr	r1, [sp, #32]
 8031666:	07c8      	lsls	r0, r1, #31
 8031668:	d506      	bpl.n	8031678 <_svfprintf_r+0x1398>
 803166a:	2b30      	cmp	r3, #48	@ 0x30
 803166c:	d004      	beq.n	8031678 <_svfprintf_r+0x1398>
 803166e:	2330      	movs	r3, #48	@ 0x30
 8031670:	f809 3c01 	strb.w	r3, [r9, #-1]
 8031674:	f1a2 0902 	sub.w	r9, r2, #2
 8031678:	ab52      	add	r3, sp, #328	@ 0x148
 803167a:	9d08      	ldr	r5, [sp, #32]
 803167c:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8031680:	f04f 0a00 	mov.w	sl, #0
 8031684:	eba3 0809 	sub.w	r8, r3, r9
 8031688:	4657      	mov	r7, sl
 803168a:	f8cd a020 	str.w	sl, [sp, #32]
 803168e:	4656      	mov	r6, sl
 8031690:	f7ff b97c 	b.w	803098c <_svfprintf_r+0x6ac>
 8031694:	0803b28a 	.word	0x0803b28a
 8031698:	0803b29a 	.word	0x0803b29a

0803169c <__swhatbuf_r>:
 803169c:	b570      	push	{r4, r5, r6, lr}
 803169e:	460c      	mov	r4, r1
 80316a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80316a4:	2900      	cmp	r1, #0
 80316a6:	b096      	sub	sp, #88	@ 0x58
 80316a8:	4615      	mov	r5, r2
 80316aa:	461e      	mov	r6, r3
 80316ac:	da07      	bge.n	80316be <__swhatbuf_r+0x22>
 80316ae:	89a1      	ldrh	r1, [r4, #12]
 80316b0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80316b4:	d117      	bne.n	80316e6 <__swhatbuf_r+0x4a>
 80316b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80316ba:	4608      	mov	r0, r1
 80316bc:	e00f      	b.n	80316de <__swhatbuf_r+0x42>
 80316be:	466a      	mov	r2, sp
 80316c0:	f003 f892 	bl	80347e8 <_fstat_r>
 80316c4:	2800      	cmp	r0, #0
 80316c6:	dbf2      	blt.n	80316ae <__swhatbuf_r+0x12>
 80316c8:	9901      	ldr	r1, [sp, #4]
 80316ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80316ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80316d2:	4259      	negs	r1, r3
 80316d4:	4159      	adcs	r1, r3
 80316d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80316da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80316de:	6031      	str	r1, [r6, #0]
 80316e0:	602b      	str	r3, [r5, #0]
 80316e2:	b016      	add	sp, #88	@ 0x58
 80316e4:	bd70      	pop	{r4, r5, r6, pc}
 80316e6:	2100      	movs	r1, #0
 80316e8:	2340      	movs	r3, #64	@ 0x40
 80316ea:	e7e6      	b.n	80316ba <__swhatbuf_r+0x1e>

080316ec <__smakebuf_r>:
 80316ec:	898b      	ldrh	r3, [r1, #12]
 80316ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80316f0:	079d      	lsls	r5, r3, #30
 80316f2:	4606      	mov	r6, r0
 80316f4:	460c      	mov	r4, r1
 80316f6:	d507      	bpl.n	8031708 <__smakebuf_r+0x1c>
 80316f8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80316fc:	6023      	str	r3, [r4, #0]
 80316fe:	6123      	str	r3, [r4, #16]
 8031700:	2301      	movs	r3, #1
 8031702:	6163      	str	r3, [r4, #20]
 8031704:	b003      	add	sp, #12
 8031706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8031708:	ab01      	add	r3, sp, #4
 803170a:	466a      	mov	r2, sp
 803170c:	f7ff ffc6 	bl	803169c <__swhatbuf_r>
 8031710:	9f00      	ldr	r7, [sp, #0]
 8031712:	4605      	mov	r5, r0
 8031714:	4639      	mov	r1, r7
 8031716:	4630      	mov	r0, r6
 8031718:	f7fc fec0 	bl	802e49c <_malloc_r>
 803171c:	b948      	cbnz	r0, 8031732 <__smakebuf_r+0x46>
 803171e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031722:	059a      	lsls	r2, r3, #22
 8031724:	d4ee      	bmi.n	8031704 <__smakebuf_r+0x18>
 8031726:	f023 0303 	bic.w	r3, r3, #3
 803172a:	f043 0302 	orr.w	r3, r3, #2
 803172e:	81a3      	strh	r3, [r4, #12]
 8031730:	e7e2      	b.n	80316f8 <__smakebuf_r+0xc>
 8031732:	89a3      	ldrh	r3, [r4, #12]
 8031734:	6020      	str	r0, [r4, #0]
 8031736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803173a:	81a3      	strh	r3, [r4, #12]
 803173c:	9b01      	ldr	r3, [sp, #4]
 803173e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8031742:	b15b      	cbz	r3, 803175c <__smakebuf_r+0x70>
 8031744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031748:	4630      	mov	r0, r6
 803174a:	f003 f85f 	bl	803480c <_isatty_r>
 803174e:	b128      	cbz	r0, 803175c <__smakebuf_r+0x70>
 8031750:	89a3      	ldrh	r3, [r4, #12]
 8031752:	f023 0303 	bic.w	r3, r3, #3
 8031756:	f043 0301 	orr.w	r3, r3, #1
 803175a:	81a3      	strh	r3, [r4, #12]
 803175c:	89a3      	ldrh	r3, [r4, #12]
 803175e:	431d      	orrs	r5, r3
 8031760:	81a5      	strh	r5, [r4, #12]
 8031762:	e7cf      	b.n	8031704 <__smakebuf_r+0x18>

08031764 <__ssvfscanf_r>:
 8031764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031768:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 803176c:	461d      	mov	r5, r3
 803176e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8031772:	af02      	add	r7, sp, #8
 8031774:	049e      	lsls	r6, r3, #18
 8031776:	62b8      	str	r0, [r7, #40]	@ 0x28
 8031778:	460c      	mov	r4, r1
 803177a:	617a      	str	r2, [r7, #20]
 803177c:	d406      	bmi.n	803178c <__ssvfscanf_r+0x28>
 803177e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8031782:	818b      	strh	r3, [r1, #12]
 8031784:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8031786:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 803178a:	664b      	str	r3, [r1, #100]	@ 0x64
 803178c:	2300      	movs	r3, #0
 803178e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8031792:	61bb      	str	r3, [r7, #24]
 8031794:	637b      	str	r3, [r7, #52]	@ 0x34
 8031796:	633b      	str	r3, [r7, #48]	@ 0x30
 8031798:	627b      	str	r3, [r7, #36]	@ 0x24
 803179a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 803179e:	f818 3b01 	ldrb.w	r3, [r8], #1
 80317a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80317a4:	2b00      	cmp	r3, #0
 80317a6:	f000 80d3 	beq.w	8031950 <__ssvfscanf_r+0x1ec>
 80317aa:	4a84      	ldr	r2, [pc, #528]	@ (80319bc <__ssvfscanf_r+0x258>)
 80317ac:	5cd6      	ldrb	r6, [r2, r3]
 80317ae:	f016 0608 	ands.w	r6, r6, #8
 80317b2:	d01b      	beq.n	80317ec <__ssvfscanf_r+0x88>
 80317b4:	6863      	ldr	r3, [r4, #4]
 80317b6:	2b00      	cmp	r3, #0
 80317b8:	dd08      	ble.n	80317cc <__ssvfscanf_r+0x68>
 80317ba:	6823      	ldr	r3, [r4, #0]
 80317bc:	497f      	ldr	r1, [pc, #508]	@ (80319bc <__ssvfscanf_r+0x258>)
 80317be:	781a      	ldrb	r2, [r3, #0]
 80317c0:	5c8a      	ldrb	r2, [r1, r2]
 80317c2:	0710      	lsls	r0, r2, #28
 80317c4:	d409      	bmi.n	80317da <__ssvfscanf_r+0x76>
 80317c6:	f8c7 8014 	str.w	r8, [r7, #20]
 80317ca:	e7e6      	b.n	803179a <__ssvfscanf_r+0x36>
 80317cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80317ce:	4621      	mov	r1, r4
 80317d0:	f7fd fe13 	bl	802f3fa <__ssrefill_r>
 80317d4:	2800      	cmp	r0, #0
 80317d6:	d0f0      	beq.n	80317ba <__ssvfscanf_r+0x56>
 80317d8:	e7f5      	b.n	80317c6 <__ssvfscanf_r+0x62>
 80317da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80317dc:	3201      	adds	r2, #1
 80317de:	633a      	str	r2, [r7, #48]	@ 0x30
 80317e0:	6862      	ldr	r2, [r4, #4]
 80317e2:	3301      	adds	r3, #1
 80317e4:	3a01      	subs	r2, #1
 80317e6:	6062      	str	r2, [r4, #4]
 80317e8:	6023      	str	r3, [r4, #0]
 80317ea:	e7e3      	b.n	80317b4 <__ssvfscanf_r+0x50>
 80317ec:	2b25      	cmp	r3, #37	@ 0x25
 80317ee:	d163      	bne.n	80318b8 <__ssvfscanf_r+0x154>
 80317f0:	62fe      	str	r6, [r7, #44]	@ 0x2c
 80317f2:	4642      	mov	r2, r8
 80317f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80317f8:	617a      	str	r2, [r7, #20]
 80317fa:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 80317fe:	2a55      	cmp	r2, #85	@ 0x55
 8031800:	f200 816e 	bhi.w	8031ae0 <__ssvfscanf_r+0x37c>
 8031804:	e8df f012 	tbh	[pc, r2, lsl #1]
 8031808:	016c0056 	.word	0x016c0056
 803180c:	016c016c 	.word	0x016c016c
 8031810:	007d016c 	.word	0x007d016c
 8031814:	016c016c 	.word	0x016c016c
 8031818:	016c016c 	.word	0x016c016c
 803181c:	00b9016c 	.word	0x00b9016c
 8031820:	00b900b9 	.word	0x00b900b9
 8031824:	00b900b9 	.word	0x00b900b9
 8031828:	00b900b9 	.word	0x00b900b9
 803182c:	00b900b9 	.word	0x00b900b9
 8031830:	016c00b9 	.word	0x016c00b9
 8031834:	016c016c 	.word	0x016c016c
 8031838:	016c016c 	.word	0x016c016c
 803183c:	016c016c 	.word	0x016c016c
 8031840:	016c00e0 	.word	0x016c00e0
 8031844:	00c3010a 	.word	0x00c3010a
 8031848:	00e000e0 	.word	0x00e000e0
 803184c:	016c00e0 	.word	0x016c00e0
 8031850:	016c016c 	.word	0x016c016c
 8031854:	00a2016c 	.word	0x00a2016c
 8031858:	016c016c 	.word	0x016c016c
 803185c:	016c00c7 	.word	0x016c00c7
 8031860:	016c016c 	.word	0x016c016c
 8031864:	016c00fa 	.word	0x016c00fa
 8031868:	016c016c 	.word	0x016c016c
 803186c:	00d4016c 	.word	0x00d4016c
 8031870:	016c016c 	.word	0x016c016c
 8031874:	016c00ff 	.word	0x016c00ff
 8031878:	016c016c 	.word	0x016c016c
 803187c:	016c016c 	.word	0x016c016c
 8031880:	016c00e0 	.word	0x016c00e0
 8031884:	00c5010c 	.word	0x00c5010c
 8031888:	00e000e0 	.word	0x00e000e0
 803188c:	009400e0 	.word	0x009400e0
 8031890:	00a20130 	.word	0x00a20130
 8031894:	0085016c 	.word	0x0085016c
 8031898:	011400ac 	.word	0x011400ac
 803189c:	011100c9 	.word	0x011100c9
 80318a0:	016c016c 	.word	0x016c016c
 80318a4:	00a900fc 	.word	0x00a900fc
 80318a8:	016c00d0 	.word	0x016c00d0
 80318ac:	00d4016c 	.word	0x00d4016c
 80318b0:	00a9016c 	.word	0x00a9016c
 80318b4:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80318b8:	6863      	ldr	r3, [r4, #4]
 80318ba:	2b00      	cmp	r3, #0
 80318bc:	dd0e      	ble.n	80318dc <__ssvfscanf_r+0x178>
 80318be:	6823      	ldr	r3, [r4, #0]
 80318c0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80318c4:	7819      	ldrb	r1, [r3, #0]
 80318c6:	4291      	cmp	r1, r2
 80318c8:	d142      	bne.n	8031950 <__ssvfscanf_r+0x1ec>
 80318ca:	3301      	adds	r3, #1
 80318cc:	6862      	ldr	r2, [r4, #4]
 80318ce:	6023      	str	r3, [r4, #0]
 80318d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80318d2:	3a01      	subs	r2, #1
 80318d4:	3301      	adds	r3, #1
 80318d6:	6062      	str	r2, [r4, #4]
 80318d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80318da:	e774      	b.n	80317c6 <__ssvfscanf_r+0x62>
 80318dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80318de:	4621      	mov	r1, r4
 80318e0:	f7fd fd8b 	bl	802f3fa <__ssrefill_r>
 80318e4:	2800      	cmp	r0, #0
 80318e6:	d0ea      	beq.n	80318be <__ssvfscanf_r+0x15a>
 80318e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80318ea:	b113      	cbz	r3, 80318f2 <__ssvfscanf_r+0x18e>
 80318ec:	89a3      	ldrh	r3, [r4, #12]
 80318ee:	065b      	lsls	r3, r3, #25
 80318f0:	d52e      	bpl.n	8031950 <__ssvfscanf_r+0x1ec>
 80318f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80318f4:	2b00      	cmp	r3, #0
 80318f6:	f041 809d 	bne.w	8032a34 <__ssvfscanf_r+0x12d0>
 80318fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80318fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8031900:	e0f9      	b.n	8031af6 <__ssvfscanf_r+0x392>
 8031902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031904:	4333      	orrs	r3, r6
 8031906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031908:	d122      	bne.n	8031950 <__ssvfscanf_r+0x1ec>
 803190a:	2610      	movs	r6, #16
 803190c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8031910:	e76f      	b.n	80317f2 <__ssvfscanf_r+0x8e>
 8031912:	0731      	lsls	r1, r6, #28
 8031914:	d11c      	bne.n	8031950 <__ssvfscanf_r+0x1ec>
 8031916:	f898 3001 	ldrb.w	r3, [r8, #1]
 803191a:	2b6c      	cmp	r3, #108	@ 0x6c
 803191c:	d105      	bne.n	803192a <__ssvfscanf_r+0x1c6>
 803191e:	f108 0302 	add.w	r3, r8, #2
 8031922:	617b      	str	r3, [r7, #20]
 8031924:	f046 0602 	orr.w	r6, r6, #2
 8031928:	e7f0      	b.n	803190c <__ssvfscanf_r+0x1a8>
 803192a:	f046 0601 	orr.w	r6, r6, #1
 803192e:	e7ed      	b.n	803190c <__ssvfscanf_r+0x1a8>
 8031930:	0732      	lsls	r2, r6, #28
 8031932:	d10d      	bne.n	8031950 <__ssvfscanf_r+0x1ec>
 8031934:	f898 3001 	ldrb.w	r3, [r8, #1]
 8031938:	2b68      	cmp	r3, #104	@ 0x68
 803193a:	bf03      	ittte	eq
 803193c:	f108 0302 	addeq.w	r3, r8, #2
 8031940:	617b      	streq	r3, [r7, #20]
 8031942:	f046 0608 	orreq.w	r6, r6, #8
 8031946:	f046 0604 	orrne.w	r6, r6, #4
 803194a:	e7df      	b.n	803190c <__ssvfscanf_r+0x1a8>
 803194c:	0733      	lsls	r3, r6, #28
 803194e:	d0e9      	beq.n	8031924 <__ssvfscanf_r+0x1c0>
 8031950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031952:	2b00      	cmp	r3, #0
 8031954:	f000 80cf 	beq.w	8031af6 <__ssvfscanf_r+0x392>
 8031958:	e0c8      	b.n	8031aec <__ssvfscanf_r+0x388>
 803195a:	0730      	lsls	r0, r6, #28
 803195c:	d0d6      	beq.n	803190c <__ssvfscanf_r+0x1a8>
 803195e:	e7f7      	b.n	8031950 <__ssvfscanf_r+0x1ec>
 8031960:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8031964:	d1f4      	bne.n	8031950 <__ssvfscanf_r+0x1ec>
 8031966:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8031968:	b922      	cbnz	r2, 8031974 <__ssvfscanf_r+0x210>
 803196a:	b082      	sub	sp, #8
 803196c:	aa02      	add	r2, sp, #8
 803196e:	e9c2 3300 	strd	r3, r3, [r2]
 8031972:	637a      	str	r2, [r7, #52]	@ 0x34
 8031974:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8031978:	e7c8      	b.n	803190c <__ssvfscanf_r+0x1a8>
 803197a:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 803197e:	d1e7      	bne.n	8031950 <__ssvfscanf_r+0x1ec>
 8031980:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8031982:	220a      	movs	r2, #10
 8031984:	fb02 3301 	mla	r3, r2, r1, r3
 8031988:	3b30      	subs	r3, #48	@ 0x30
 803198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803198c:	e7be      	b.n	803190c <__ssvfscanf_r+0x1a8>
 803198e:	f046 0601 	orr.w	r6, r6, #1
 8031992:	4b0b      	ldr	r3, [pc, #44]	@ (80319c0 <__ssvfscanf_r+0x25c>)
 8031994:	e009      	b.n	80319aa <__ssvfscanf_r+0x246>
 8031996:	f046 0601 	orr.w	r6, r6, #1
 803199a:	4b0a      	ldr	r3, [pc, #40]	@ (80319c4 <__ssvfscanf_r+0x260>)
 803199c:	61bb      	str	r3, [r7, #24]
 803199e:	2308      	movs	r3, #8
 80319a0:	61fb      	str	r3, [r7, #28]
 80319a2:	f04f 0803 	mov.w	r8, #3
 80319a6:	e011      	b.n	80319cc <__ssvfscanf_r+0x268>
 80319a8:	4b06      	ldr	r3, [pc, #24]	@ (80319c4 <__ssvfscanf_r+0x260>)
 80319aa:	61bb      	str	r3, [r7, #24]
 80319ac:	230a      	movs	r3, #10
 80319ae:	e7f7      	b.n	80319a0 <__ssvfscanf_r+0x23c>
 80319b0:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 80319b4:	4b03      	ldr	r3, [pc, #12]	@ (80319c4 <__ssvfscanf_r+0x260>)
 80319b6:	61bb      	str	r3, [r7, #24]
 80319b8:	2310      	movs	r3, #16
 80319ba:	e7f1      	b.n	80319a0 <__ssvfscanf_r+0x23c>
 80319bc:	0803b0d1 	.word	0x0803b0d1
 80319c0:	0802b6f9 	.word	0x0802b6f9
 80319c4:	080344f9 	.word	0x080344f9
 80319c8:	f04f 0804 	mov.w	r8, #4
 80319cc:	6863      	ldr	r3, [r4, #4]
 80319ce:	2b00      	cmp	r3, #0
 80319d0:	dd4e      	ble.n	8031a70 <__ssvfscanf_r+0x30c>
 80319d2:	0673      	lsls	r3, r6, #25
 80319d4:	d407      	bmi.n	80319e6 <__ssvfscanf_r+0x282>
 80319d6:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 8031cd4 <__ssvfscanf_r+0x570>
 80319da:	6823      	ldr	r3, [r4, #0]
 80319dc:	781a      	ldrb	r2, [r3, #0]
 80319de:	f819 2002 	ldrb.w	r2, [r9, r2]
 80319e2:	0710      	lsls	r0, r2, #28
 80319e4:	d44b      	bmi.n	8031a7e <__ssvfscanf_r+0x31a>
 80319e6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80319ea:	f1b8 0f03 	cmp.w	r8, #3
 80319ee:	d858      	bhi.n	8031aa2 <__ssvfscanf_r+0x33e>
 80319f0:	e8df f018 	tbh	[pc, r8, lsl #1]
 80319f4:	037801c1 	.word	0x037801c1
 80319f8:	05f30514 	.word	0x05f30514
 80319fc:	f046 0601 	orr.w	r6, r6, #1
 8031a00:	f04f 0802 	mov.w	r8, #2
 8031a04:	e7e2      	b.n	80319cc <__ssvfscanf_r+0x268>
 8031a06:	6979      	ldr	r1, [r7, #20]
 8031a08:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8031a0c:	f001 fd1d 	bl	803344a <__sccl>
 8031a10:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031a14:	6178      	str	r0, [r7, #20]
 8031a16:	f04f 0801 	mov.w	r8, #1
 8031a1a:	e7d7      	b.n	80319cc <__ssvfscanf_r+0x268>
 8031a1c:	f046 0601 	orr.w	r6, r6, #1
 8031a20:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8031a24:	f04f 0800 	mov.w	r8, #0
 8031a28:	e7d0      	b.n	80319cc <__ssvfscanf_r+0x268>
 8031a2a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8031a2e:	e7c1      	b.n	80319b4 <__ssvfscanf_r+0x250>
 8031a30:	06f1      	lsls	r1, r6, #27
 8031a32:	f53f aeb2 	bmi.w	803179a <__ssvfscanf_r+0x36>
 8031a36:	0732      	lsls	r2, r6, #28
 8031a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8031a3c:	d502      	bpl.n	8031a44 <__ssvfscanf_r+0x2e0>
 8031a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031a40:	701a      	strb	r2, [r3, #0]
 8031a42:	e6aa      	b.n	803179a <__ssvfscanf_r+0x36>
 8031a44:	0770      	lsls	r0, r6, #29
 8031a46:	d502      	bpl.n	8031a4e <__ssvfscanf_r+0x2ea>
 8031a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031a4a:	801a      	strh	r2, [r3, #0]
 8031a4c:	e6a5      	b.n	803179a <__ssvfscanf_r+0x36>
 8031a4e:	07f1      	lsls	r1, r6, #31
 8031a50:	d502      	bpl.n	8031a58 <__ssvfscanf_r+0x2f4>
 8031a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031a54:	601a      	str	r2, [r3, #0]
 8031a56:	e6a0      	b.n	803179a <__ssvfscanf_r+0x36>
 8031a58:	07b2      	lsls	r2, r6, #30
 8031a5a:	d5fa      	bpl.n	8031a52 <__ssvfscanf_r+0x2ee>
 8031a5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031a5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8031a60:	17d2      	asrs	r2, r2, #31
 8031a62:	e9c3 1200 	strd	r1, r2, [r3]
 8031a66:	e698      	b.n	803179a <__ssvfscanf_r+0x36>
 8031a68:	4b99      	ldr	r3, [pc, #612]	@ (8031cd0 <__ssvfscanf_r+0x56c>)
 8031a6a:	61bb      	str	r3, [r7, #24]
 8031a6c:	2300      	movs	r3, #0
 8031a6e:	e797      	b.n	80319a0 <__ssvfscanf_r+0x23c>
 8031a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031a72:	4621      	mov	r1, r4
 8031a74:	f7fd fcc1 	bl	802f3fa <__ssrefill_r>
 8031a78:	2800      	cmp	r0, #0
 8031a7a:	d0aa      	beq.n	80319d2 <__ssvfscanf_r+0x26e>
 8031a7c:	e734      	b.n	80318e8 <__ssvfscanf_r+0x184>
 8031a7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031a80:	3201      	adds	r2, #1
 8031a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8031a84:	6862      	ldr	r2, [r4, #4]
 8031a86:	3a01      	subs	r2, #1
 8031a88:	2a00      	cmp	r2, #0
 8031a8a:	6062      	str	r2, [r4, #4]
 8031a8c:	dd02      	ble.n	8031a94 <__ssvfscanf_r+0x330>
 8031a8e:	3301      	adds	r3, #1
 8031a90:	6023      	str	r3, [r4, #0]
 8031a92:	e7a2      	b.n	80319da <__ssvfscanf_r+0x276>
 8031a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031a96:	4621      	mov	r1, r4
 8031a98:	f7fd fcaf 	bl	802f3fa <__ssrefill_r>
 8031a9c:	2800      	cmp	r0, #0
 8031a9e:	d09c      	beq.n	80319da <__ssvfscanf_r+0x276>
 8031aa0:	e722      	b.n	80318e8 <__ssvfscanf_r+0x184>
 8031aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031aa4:	2b01      	cmp	r3, #1
 8031aa6:	bf38      	it	cc
 8031aa8:	2301      	movcc	r3, #1
 8031aaa:	4698      	mov	r8, r3
 8031aac:	f016 0301 	ands.w	r3, r6, #1
 8031ab0:	f006 0b10 	and.w	fp, r6, #16
 8031ab4:	f000 80eb 	beq.w	8031c8e <__ssvfscanf_r+0x52a>
 8031ab8:	f1bb 0f00 	cmp.w	fp, #0
 8031abc:	f040 8085 	bne.w	8031bca <__ssvfscanf_r+0x466>
 8031ac0:	462b      	mov	r3, r5
 8031ac2:	0631      	lsls	r1, r6, #24
 8031ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8031ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031aca:	f140 8085 	bpl.w	8031bd8 <__ssvfscanf_r+0x474>
 8031ace:	b13d      	cbz	r5, 8031ae0 <__ssvfscanf_r+0x37c>
 8031ad0:	2080      	movs	r0, #128	@ 0x80
 8031ad2:	f7fc fcd3 	bl	802e47c <malloc>
 8031ad6:	4606      	mov	r6, r0
 8031ad8:	b998      	cbnz	r0, 8031b02 <__ssvfscanf_r+0x39e>
 8031ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8031ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8031ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031ae2:	b143      	cbz	r3, 8031af6 <__ssvfscanf_r+0x392>
 8031ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031ae6:	3301      	adds	r3, #1
 8031ae8:	f000 87a4 	beq.w	8032a34 <__ssvfscanf_r+0x12d0>
 8031aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031aee:	6818      	ldr	r0, [r3, #0]
 8031af0:	b108      	cbz	r0, 8031af6 <__ssvfscanf_r+0x392>
 8031af2:	f7fc fccb 	bl	802e48c <free>
 8031af6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8031af8:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 8031afc:	46bd      	mov	sp, r7
 8031afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b04:	6028      	str	r0, [r5, #0]
 8031b06:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8031b0a:	889b      	ldrh	r3, [r3, #4]
 8031b0c:	4599      	cmp	r9, r3
 8031b0e:	d314      	bcc.n	8031b3a <__ssvfscanf_r+0x3d6>
 8031b10:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8031b14:	4293      	cmp	r3, r2
 8031b16:	f200 878d 	bhi.w	8032a34 <__ssvfscanf_r+0x12d0>
 8031b1a:	3308      	adds	r3, #8
 8031b1c:	fa1f fa83 	uxth.w	sl, r3
 8031b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b22:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8031b26:	6818      	ldr	r0, [r3, #0]
 8031b28:	f001 fc32 	bl	8033390 <realloc>
 8031b2c:	2800      	cmp	r0, #0
 8031b2e:	f000 8781 	beq.w	8032a34 <__ssvfscanf_r+0x12d0>
 8031b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b34:	6018      	str	r0, [r3, #0]
 8031b36:	f8a3 a004 	strh.w	sl, [r3, #4]
 8031b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031b3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031b3e:	681b      	ldr	r3, [r3, #0]
 8031b40:	f109 0201 	add.w	r2, r9, #1
 8031b44:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8031b48:	46aa      	mov	sl, r5
 8031b4a:	80ca      	strh	r2, [r1, #6]
 8031b4c:	4635      	mov	r5, r6
 8031b4e:	f04f 0920 	mov.w	r9, #32
 8031b52:	2200      	movs	r2, #0
 8031b54:	613a      	str	r2, [r7, #16]
 8031b56:	f7fb fbd3 	bl	802d300 <__locale_mb_cur_max>
 8031b5a:	693a      	ldr	r2, [r7, #16]
 8031b5c:	4290      	cmp	r0, r2
 8031b5e:	f43f aec3 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 8031b62:	6821      	ldr	r1, [r4, #0]
 8031b64:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 8031b68:	f811 0b01 	ldrb.w	r0, [r1], #1
 8031b6c:	f80c 0002 	strb.w	r0, [ip, r2]
 8031b70:	1c53      	adds	r3, r2, #1
 8031b72:	6862      	ldr	r2, [r4, #4]
 8031b74:	3a01      	subs	r2, #1
 8031b76:	e9c4 1200 	strd	r1, r2, [r4]
 8031b7a:	6a3a      	ldr	r2, [r7, #32]
 8031b7c:	2a03      	cmp	r2, #3
 8031b7e:	d102      	bne.n	8031b86 <__ssvfscanf_r+0x422>
 8031b80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8031b82:	2a04      	cmp	r2, #4
 8031b84:	d007      	beq.n	8031b96 <__ssvfscanf_r+0x432>
 8031b86:	2208      	movs	r2, #8
 8031b88:	2100      	movs	r1, #0
 8031b8a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8031b8e:	623b      	str	r3, [r7, #32]
 8031b90:	f7fa fa2e 	bl	802bff0 <memset>
 8031b94:	6a3b      	ldr	r3, [r7, #32]
 8031b96:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8031b9a:	9200      	str	r2, [sp, #0]
 8031b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031b9e:	613b      	str	r3, [r7, #16]
 8031ba0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8031ba4:	4629      	mov	r1, r5
 8031ba6:	f002 ffad 	bl	8034b04 <_mbrtowc_r>
 8031baa:	1c42      	adds	r2, r0, #1
 8031bac:	6238      	str	r0, [r7, #32]
 8031bae:	f43f ae9b 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 8031bb2:	693b      	ldr	r3, [r7, #16]
 8031bb4:	b9b8      	cbnz	r0, 8031be6 <__ssvfscanf_r+0x482>
 8031bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031bb8:	441a      	add	r2, r3
 8031bba:	4613      	mov	r3, r2
 8031bbc:	f1bb 0f00 	cmp.w	fp, #0
 8031bc0:	d00e      	beq.n	8031be0 <__ssvfscanf_r+0x47c>
 8031bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8031bc4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8031bc8:	e019      	b.n	8031bfe <__ssvfscanf_r+0x49a>
 8031bca:	f04f 0900 	mov.w	r9, #0
 8031bce:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8031bd0:	464e      	mov	r6, r9
 8031bd2:	46ca      	mov	sl, r9
 8031bd4:	464d      	mov	r5, r9
 8031bd6:	e7bc      	b.n	8031b52 <__ssvfscanf_r+0x3ee>
 8031bd8:	46d9      	mov	r9, fp
 8031bda:	465e      	mov	r6, fp
 8031bdc:	46da      	mov	sl, fp
 8031bde:	e7b8      	b.n	8031b52 <__ssvfscanf_r+0x3ee>
 8031be0:	f8c5 b000 	str.w	fp, [r5]
 8031be4:	e7ed      	b.n	8031bc2 <__ssvfscanf_r+0x45e>
 8031be6:	6a3a      	ldr	r2, [r7, #32]
 8031be8:	3202      	adds	r2, #2
 8031bea:	d025      	beq.n	8031c38 <__ssvfscanf_r+0x4d4>
 8031bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8031bee:	441a      	add	r2, r3
 8031bf0:	6a3b      	ldr	r3, [r7, #32]
 8031bf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8031bf4:	2b03      	cmp	r3, #3
 8031bf6:	d1e5      	bne.n	8031bc4 <__ssvfscanf_r+0x460>
 8031bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8031bfa:	2b04      	cmp	r3, #4
 8031bfc:	d1e2      	bne.n	8031bc4 <__ssvfscanf_r+0x460>
 8031bfe:	f1bb 0f00 	cmp.w	fp, #0
 8031c02:	d117      	bne.n	8031c34 <__ssvfscanf_r+0x4d0>
 8031c04:	f1ba 0f00 	cmp.w	sl, #0
 8031c08:	d013      	beq.n	8031c32 <__ssvfscanf_r+0x4ce>
 8031c0a:	1bab      	subs	r3, r5, r6
 8031c0c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8031c10:	d80f      	bhi.n	8031c32 <__ssvfscanf_r+0x4ce>
 8031c12:	4630      	mov	r0, r6
 8031c14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031c18:	613b      	str	r3, [r7, #16]
 8031c1a:	f001 fbb9 	bl	8033390 <realloc>
 8031c1e:	4606      	mov	r6, r0
 8031c20:	2800      	cmp	r0, #0
 8031c22:	f43f af5a 	beq.w	8031ada <__ssvfscanf_r+0x376>
 8031c26:	693b      	ldr	r3, [r7, #16]
 8031c28:	f8ca 0000 	str.w	r0, [sl]
 8031c2c:	18c5      	adds	r5, r0, r3
 8031c2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031c32:	3504      	adds	r5, #4
 8031c34:	2200      	movs	r2, #0
 8031c36:	e000      	b.n	8031c3a <__ssvfscanf_r+0x4d6>
 8031c38:	461a      	mov	r2, r3
 8031c3a:	6863      	ldr	r3, [r4, #4]
 8031c3c:	2b00      	cmp	r3, #0
 8031c3e:	dc14      	bgt.n	8031c6a <__ssvfscanf_r+0x506>
 8031c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031c42:	613a      	str	r2, [r7, #16]
 8031c44:	4621      	mov	r1, r4
 8031c46:	f7fd fbd8 	bl	802f3fa <__ssrefill_r>
 8031c4a:	693a      	ldr	r2, [r7, #16]
 8031c4c:	b168      	cbz	r0, 8031c6a <__ssvfscanf_r+0x506>
 8031c4e:	2a00      	cmp	r2, #0
 8031c50:	f47f ae4a 	bne.w	80318e8 <__ssvfscanf_r+0x184>
 8031c54:	f1ba 0f00 	cmp.w	sl, #0
 8031c58:	d10c      	bne.n	8031c74 <__ssvfscanf_r+0x510>
 8031c5a:	f1bb 0f00 	cmp.w	fp, #0
 8031c5e:	d102      	bne.n	8031c66 <__ssvfscanf_r+0x502>
 8031c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031c62:	3301      	adds	r3, #1
 8031c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8031c66:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8031c68:	e597      	b.n	803179a <__ssvfscanf_r+0x36>
 8031c6a:	f1b8 0f00 	cmp.w	r8, #0
 8031c6e:	f47f af71 	bne.w	8031b54 <__ssvfscanf_r+0x3f0>
 8031c72:	e7ef      	b.n	8031c54 <__ssvfscanf_r+0x4f0>
 8031c74:	1ba9      	subs	r1, r5, r6
 8031c76:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 8031c7a:	d9ee      	bls.n	8031c5a <__ssvfscanf_r+0x4f6>
 8031c7c:	f8da 0000 	ldr.w	r0, [sl]
 8031c80:	f001 fb86 	bl	8033390 <realloc>
 8031c84:	2800      	cmp	r0, #0
 8031c86:	d0e8      	beq.n	8031c5a <__ssvfscanf_r+0x4f6>
 8031c88:	f8ca 0000 	str.w	r0, [sl]
 8031c8c:	e7e5      	b.n	8031c5a <__ssvfscanf_r+0x4f6>
 8031c8e:	f1bb 0f00 	cmp.w	fp, #0
 8031c92:	d021      	beq.n	8031cd8 <__ssvfscanf_r+0x574>
 8031c94:	461e      	mov	r6, r3
 8031c96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8031c9a:	4598      	cmp	r8, r3
 8031c9c:	dd11      	ble.n	8031cc2 <__ssvfscanf_r+0x55e>
 8031c9e:	441a      	add	r2, r3
 8031ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031ca2:	6022      	str	r2, [r4, #0]
 8031ca4:	4621      	mov	r1, r4
 8031ca6:	441e      	add	r6, r3
 8031ca8:	eba8 0803 	sub.w	r8, r8, r3
 8031cac:	f7fd fba5 	bl	802f3fa <__ssrefill_r>
 8031cb0:	2800      	cmp	r0, #0
 8031cb2:	d0f0      	beq.n	8031c96 <__ssvfscanf_r+0x532>
 8031cb4:	2e00      	cmp	r6, #0
 8031cb6:	f43f ae17 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 8031cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031cbc:	4433      	add	r3, r6
 8031cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8031cc0:	e56b      	b.n	803179a <__ssvfscanf_r+0x36>
 8031cc2:	eba3 0308 	sub.w	r3, r3, r8
 8031cc6:	4442      	add	r2, r8
 8031cc8:	4446      	add	r6, r8
 8031cca:	6063      	str	r3, [r4, #4]
 8031ccc:	6022      	str	r2, [r4, #0]
 8031cce:	e7f4      	b.n	8031cba <__ssvfscanf_r+0x556>
 8031cd0:	0802b6f9 	.word	0x0802b6f9
 8031cd4:	0803b0d1 	.word	0x0803b0d1
 8031cd8:	46a9      	mov	r9, r5
 8031cda:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8031cde:	f859 5b04 	ldr.w	r5, [r9], #4
 8031ce2:	d02c      	beq.n	8031d3e <__ssvfscanf_r+0x5da>
 8031ce4:	2d00      	cmp	r5, #0
 8031ce6:	f43f ae33 	beq.w	8031950 <__ssvfscanf_r+0x1ec>
 8031cea:	4640      	mov	r0, r8
 8031cec:	f7fc fbc6 	bl	802e47c <malloc>
 8031cf0:	4682      	mov	sl, r0
 8031cf2:	2800      	cmp	r0, #0
 8031cf4:	f43f adfd 	beq.w	80318f2 <__ssvfscanf_r+0x18e>
 8031cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031cfa:	6028      	str	r0, [r5, #0]
 8031cfc:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8031d00:	889e      	ldrh	r6, [r3, #4]
 8031d02:	45b3      	cmp	fp, r6
 8031d04:	d311      	bcc.n	8031d2a <__ssvfscanf_r+0x5c6>
 8031d06:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8031d0a:	429e      	cmp	r6, r3
 8031d0c:	f200 8692 	bhi.w	8032a34 <__ssvfscanf_r+0x12d0>
 8031d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d12:	3608      	adds	r6, #8
 8031d14:	b2b6      	uxth	r6, r6
 8031d16:	6818      	ldr	r0, [r3, #0]
 8031d18:	00b1      	lsls	r1, r6, #2
 8031d1a:	f001 fb39 	bl	8033390 <realloc>
 8031d1e:	2800      	cmp	r0, #0
 8031d20:	f000 8688 	beq.w	8032a34 <__ssvfscanf_r+0x12d0>
 8031d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d26:	6018      	str	r0, [r3, #0]
 8031d28:	809e      	strh	r6, [r3, #4]
 8031d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031d2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031d2e:	681b      	ldr	r3, [r3, #0]
 8031d30:	f10b 0201 	add.w	r2, fp, #1
 8031d34:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8031d38:	462e      	mov	r6, r5
 8031d3a:	80ca      	strh	r2, [r1, #6]
 8031d3c:	4655      	mov	r5, sl
 8031d3e:	9400      	str	r4, [sp, #0]
 8031d40:	4629      	mov	r1, r5
 8031d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031d44:	4643      	mov	r3, r8
 8031d46:	2201      	movs	r2, #1
 8031d48:	f7fd fb74 	bl	802f434 <_sfread_r>
 8031d4c:	4605      	mov	r5, r0
 8031d4e:	2800      	cmp	r0, #0
 8031d50:	f43f adca 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 8031d54:	b13e      	cbz	r6, 8031d66 <__ssvfscanf_r+0x602>
 8031d56:	4580      	cmp	r8, r0
 8031d58:	d905      	bls.n	8031d66 <__ssvfscanf_r+0x602>
 8031d5a:	4601      	mov	r1, r0
 8031d5c:	6830      	ldr	r0, [r6, #0]
 8031d5e:	f001 fb17 	bl	8033390 <realloc>
 8031d62:	b100      	cbz	r0, 8031d66 <__ssvfscanf_r+0x602>
 8031d64:	6030      	str	r0, [r6, #0]
 8031d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031d68:	442b      	add	r3, r5
 8031d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8031d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031d6e:	3301      	adds	r3, #1
 8031d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8031d72:	464d      	mov	r5, r9
 8031d74:	e511      	b.n	803179a <__ssvfscanf_r+0x36>
 8031d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031d78:	2b00      	cmp	r3, #0
 8031d7a:	bf08      	it	eq
 8031d7c:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8031d80:	f016 0801 	ands.w	r8, r6, #1
 8031d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031d86:	f006 0a10 	and.w	sl, r6, #16
 8031d8a:	f000 8101 	beq.w	8031f90 <__ssvfscanf_r+0x82c>
 8031d8e:	f1ba 0f00 	cmp.w	sl, #0
 8031d92:	f040 80a4 	bne.w	8031ede <__ssvfscanf_r+0x77a>
 8031d96:	462b      	mov	r3, r5
 8031d98:	f853 5b04 	ldr.w	r5, [r3], #4
 8031d9c:	60fb      	str	r3, [r7, #12]
 8031d9e:	0633      	lsls	r3, r6, #24
 8031da0:	f140 80a5 	bpl.w	8031eee <__ssvfscanf_r+0x78a>
 8031da4:	2d00      	cmp	r5, #0
 8031da6:	f43f ae9b 	beq.w	8031ae0 <__ssvfscanf_r+0x37c>
 8031daa:	2080      	movs	r0, #128	@ 0x80
 8031dac:	f7fc fb66 	bl	802e47c <malloc>
 8031db0:	4680      	mov	r8, r0
 8031db2:	2800      	cmp	r0, #0
 8031db4:	f43f ae91 	beq.w	8031ada <__ssvfscanf_r+0x376>
 8031db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031dba:	6028      	str	r0, [r5, #0]
 8031dbc:	88de      	ldrh	r6, [r3, #6]
 8031dbe:	889b      	ldrh	r3, [r3, #4]
 8031dc0:	429e      	cmp	r6, r3
 8031dc2:	d314      	bcc.n	8031dee <__ssvfscanf_r+0x68a>
 8031dc4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8031dc8:	4293      	cmp	r3, r2
 8031dca:	f200 8633 	bhi.w	8032a34 <__ssvfscanf_r+0x12d0>
 8031dce:	3308      	adds	r3, #8
 8031dd0:	fa1f f983 	uxth.w	r9, r3
 8031dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031dd6:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8031dda:	6818      	ldr	r0, [r3, #0]
 8031ddc:	f001 fad8 	bl	8033390 <realloc>
 8031de0:	2800      	cmp	r0, #0
 8031de2:	f000 8627 	beq.w	8032a34 <__ssvfscanf_r+0x12d0>
 8031de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031de8:	6018      	str	r0, [r3, #0]
 8031dea:	f8a3 9004 	strh.w	r9, [r3, #4]
 8031dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031df0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8031df2:	681b      	ldr	r3, [r3, #0]
 8031df4:	1c72      	adds	r2, r6, #1
 8031df6:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8031dfa:	46ab      	mov	fp, r5
 8031dfc:	80ca      	strh	r2, [r1, #6]
 8031dfe:	4645      	mov	r5, r8
 8031e00:	f04f 0920 	mov.w	r9, #32
 8031e04:	2600      	movs	r6, #0
 8031e06:	f7fb fa7b 	bl	802d300 <__locale_mb_cur_max>
 8031e0a:	42b0      	cmp	r0, r6
 8031e0c:	f43f ad6c 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 8031e10:	1c73      	adds	r3, r6, #1
 8031e12:	613b      	str	r3, [r7, #16]
 8031e14:	6823      	ldr	r3, [r4, #0]
 8031e16:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8031e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031e1e:	558a      	strb	r2, [r1, r6]
 8031e20:	6862      	ldr	r2, [r4, #4]
 8031e22:	3a01      	subs	r2, #1
 8031e24:	e9c4 3200 	strd	r3, r2, [r4]
 8031e28:	6a3b      	ldr	r3, [r7, #32]
 8031e2a:	2b03      	cmp	r3, #3
 8031e2c:	d102      	bne.n	8031e34 <__ssvfscanf_r+0x6d0>
 8031e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8031e30:	2b04      	cmp	r3, #4
 8031e32:	d005      	beq.n	8031e40 <__ssvfscanf_r+0x6dc>
 8031e34:	2208      	movs	r2, #8
 8031e36:	2100      	movs	r1, #0
 8031e38:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8031e3c:	f7fa f8d8 	bl	802bff0 <memset>
 8031e40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8031e44:	9300      	str	r3, [sp, #0]
 8031e46:	693b      	ldr	r3, [r7, #16]
 8031e48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031e4a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8031e4e:	4629      	mov	r1, r5
 8031e50:	f002 fe58 	bl	8034b04 <_mbrtowc_r>
 8031e54:	1c46      	adds	r6, r0, #1
 8031e56:	6238      	str	r0, [r7, #32]
 8031e58:	f43f ad46 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 8031e5c:	2800      	cmp	r0, #0
 8031e5e:	d14a      	bne.n	8031ef6 <__ssvfscanf_r+0x792>
 8031e60:	6028      	str	r0, [r5, #0]
 8031e62:	682e      	ldr	r6, [r5, #0]
 8031e64:	1c70      	adds	r0, r6, #1
 8031e66:	d056      	beq.n	8031f16 <__ssvfscanf_r+0x7b2>
 8031e68:	2208      	movs	r2, #8
 8031e6a:	2100      	movs	r1, #0
 8031e6c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8031e70:	f7fa f8be 	bl	802bff0 <memset>
 8031e74:	4b9a      	ldr	r3, [pc, #616]	@ (80320e0 <__ssvfscanf_r+0x97c>)
 8031e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8031e7c:	60bb      	str	r3, [r7, #8]
 8031e7e:	4632      	mov	r2, r6
 8031e80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8031e84:	68be      	ldr	r6, [r7, #8]
 8031e86:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8031e8a:	47b0      	blx	r6
 8031e8c:	2801      	cmp	r0, #1
 8031e8e:	d144      	bne.n	8031f1a <__ssvfscanf_r+0x7b6>
 8031e90:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8031e94:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8031e98:	5c9b      	ldrb	r3, [r3, r2]
 8031e9a:	2b00      	cmp	r3, #0
 8031e9c:	d148      	bne.n	8031f30 <__ssvfscanf_r+0x7cc>
 8031e9e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8031ea2:	693b      	ldr	r3, [r7, #16]
 8031ea4:	2b00      	cmp	r3, #0
 8031ea6:	d13a      	bne.n	8031f1e <__ssvfscanf_r+0x7ba>
 8031ea8:	f1ba 0f00 	cmp.w	sl, #0
 8031eac:	d115      	bne.n	8031eda <__ssvfscanf_r+0x776>
 8031eae:	f8c5 a000 	str.w	sl, [r5]
 8031eb2:	f1bb 0f00 	cmp.w	fp, #0
 8031eb6:	d00d      	beq.n	8031ed4 <__ssvfscanf_r+0x770>
 8031eb8:	eba5 0108 	sub.w	r1, r5, r8
 8031ebc:	108b      	asrs	r3, r1, #2
 8031ebe:	3301      	adds	r3, #1
 8031ec0:	4599      	cmp	r9, r3
 8031ec2:	d907      	bls.n	8031ed4 <__ssvfscanf_r+0x770>
 8031ec4:	f8db 0000 	ldr.w	r0, [fp]
 8031ec8:	3104      	adds	r1, #4
 8031eca:	f001 fa61 	bl	8033390 <realloc>
 8031ece:	b108      	cbz	r0, 8031ed4 <__ssvfscanf_r+0x770>
 8031ed0:	f8cb 0000 	str.w	r0, [fp]
 8031ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8031ed6:	3301      	adds	r3, #1
 8031ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8031eda:	68fd      	ldr	r5, [r7, #12]
 8031edc:	e45d      	b.n	803179a <__ssvfscanf_r+0x36>
 8031ede:	f04f 0900 	mov.w	r9, #0
 8031ee2:	60fd      	str	r5, [r7, #12]
 8031ee4:	46c8      	mov	r8, r9
 8031ee6:	46cb      	mov	fp, r9
 8031ee8:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8031eec:	e78a      	b.n	8031e04 <__ssvfscanf_r+0x6a0>
 8031eee:	46d1      	mov	r9, sl
 8031ef0:	46d0      	mov	r8, sl
 8031ef2:	46d3      	mov	fp, sl
 8031ef4:	e786      	b.n	8031e04 <__ssvfscanf_r+0x6a0>
 8031ef6:	6a3b      	ldr	r3, [r7, #32]
 8031ef8:	3302      	adds	r3, #2
 8031efa:	d1b2      	bne.n	8031e62 <__ssvfscanf_r+0x6fe>
 8031efc:	693e      	ldr	r6, [r7, #16]
 8031efe:	6863      	ldr	r3, [r4, #4]
 8031f00:	2b00      	cmp	r3, #0
 8031f02:	dc40      	bgt.n	8031f86 <__ssvfscanf_r+0x822>
 8031f04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031f06:	4621      	mov	r1, r4
 8031f08:	f7fd fa77 	bl	802f3fa <__ssrefill_r>
 8031f0c:	2800      	cmp	r0, #0
 8031f0e:	d03a      	beq.n	8031f86 <__ssvfscanf_r+0x822>
 8031f10:	2e00      	cmp	r6, #0
 8031f12:	d0c9      	beq.n	8031ea8 <__ssvfscanf_r+0x744>
 8031f14:	e4e8      	b.n	80318e8 <__ssvfscanf_r+0x184>
 8031f16:	4632      	mov	r2, r6
 8031f18:	e7bc      	b.n	8031e94 <__ssvfscanf_r+0x730>
 8031f1a:	2200      	movs	r2, #0
 8031f1c:	e7ba      	b.n	8031e94 <__ssvfscanf_r+0x730>
 8031f1e:	693b      	ldr	r3, [r7, #16]
 8031f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031f22:	3b01      	subs	r3, #1
 8031f24:	4622      	mov	r2, r4
 8031f26:	5cf1      	ldrb	r1, [r6, r3]
 8031f28:	613b      	str	r3, [r7, #16]
 8031f2a:	f7fd fa2b 	bl	802f384 <_sungetc_r>
 8031f2e:	e7b8      	b.n	8031ea2 <__ssvfscanf_r+0x73e>
 8031f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031f32:	693a      	ldr	r2, [r7, #16]
 8031f34:	4413      	add	r3, r2
 8031f36:	633b      	str	r3, [r7, #48]	@ 0x30
 8031f38:	6a3b      	ldr	r3, [r7, #32]
 8031f3a:	2b03      	cmp	r3, #3
 8031f3c:	d102      	bne.n	8031f44 <__ssvfscanf_r+0x7e0>
 8031f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8031f40:	2b04      	cmp	r3, #4
 8031f42:	d002      	beq.n	8031f4a <__ssvfscanf_r+0x7e6>
 8031f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031f46:	3b01      	subs	r3, #1
 8031f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8031f4a:	f1ba 0f00 	cmp.w	sl, #0
 8031f4e:	d118      	bne.n	8031f82 <__ssvfscanf_r+0x81e>
 8031f50:	3504      	adds	r5, #4
 8031f52:	f1bb 0f00 	cmp.w	fp, #0
 8031f56:	d014      	beq.n	8031f82 <__ssvfscanf_r+0x81e>
 8031f58:	eba5 0608 	sub.w	r6, r5, r8
 8031f5c:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 8031f60:	d80d      	bhi.n	8031f7e <__ssvfscanf_r+0x81a>
 8031f62:	4640      	mov	r0, r8
 8031f64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8031f68:	f001 fa12 	bl	8033390 <realloc>
 8031f6c:	4680      	mov	r8, r0
 8031f6e:	2800      	cmp	r0, #0
 8031f70:	f43f adb3 	beq.w	8031ada <__ssvfscanf_r+0x376>
 8031f74:	1985      	adds	r5, r0, r6
 8031f76:	f8cb 0000 	str.w	r0, [fp]
 8031f7a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8031f7e:	4656      	mov	r6, sl
 8031f80:	e7bd      	b.n	8031efe <__ssvfscanf_r+0x79a>
 8031f82:	2600      	movs	r6, #0
 8031f84:	e7bb      	b.n	8031efe <__ssvfscanf_r+0x79a>
 8031f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031f88:	2b00      	cmp	r3, #0
 8031f8a:	f47f af3c 	bne.w	8031e06 <__ssvfscanf_r+0x6a2>
 8031f8e:	e78b      	b.n	8031ea8 <__ssvfscanf_r+0x744>
 8031f90:	f1ba 0f00 	cmp.w	sl, #0
 8031f94:	d01e      	beq.n	8031fd4 <__ssvfscanf_r+0x870>
 8031f96:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 8031f9a:	6823      	ldr	r3, [r4, #0]
 8031f9c:	781a      	ldrb	r2, [r3, #0]
 8031f9e:	5cb2      	ldrb	r2, [r6, r2]
 8031fa0:	b91a      	cbnz	r2, 8031faa <__ssvfscanf_r+0x846>
 8031fa2:	f1b8 0f00 	cmp.w	r8, #0
 8031fa6:	d112      	bne.n	8031fce <__ssvfscanf_r+0x86a>
 8031fa8:	e4d2      	b.n	8031950 <__ssvfscanf_r+0x1ec>
 8031faa:	3301      	adds	r3, #1
 8031fac:	6862      	ldr	r2, [r4, #4]
 8031fae:	6023      	str	r3, [r4, #0]
 8031fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8031fb2:	f108 0801 	add.w	r8, r8, #1
 8031fb6:	3a01      	subs	r2, #1
 8031fb8:	4543      	cmp	r3, r8
 8031fba:	6062      	str	r2, [r4, #4]
 8031fbc:	d007      	beq.n	8031fce <__ssvfscanf_r+0x86a>
 8031fbe:	2a00      	cmp	r2, #0
 8031fc0:	dceb      	bgt.n	8031f9a <__ssvfscanf_r+0x836>
 8031fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8031fc4:	4621      	mov	r1, r4
 8031fc6:	f7fd fa18 	bl	802f3fa <__ssrefill_r>
 8031fca:	2800      	cmp	r0, #0
 8031fcc:	d0e5      	beq.n	8031f9a <__ssvfscanf_r+0x836>
 8031fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8031fd0:	4443      	add	r3, r8
 8031fd2:	e674      	b.n	8031cbe <__ssvfscanf_r+0x55a>
 8031fd4:	46a9      	mov	r9, r5
 8031fd6:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8031fda:	f859 8b04 	ldr.w	r8, [r9], #4
 8031fde:	d07d      	beq.n	80320dc <__ssvfscanf_r+0x978>
 8031fe0:	f1b8 0f00 	cmp.w	r8, #0
 8031fe4:	f43f acb4 	beq.w	8031950 <__ssvfscanf_r+0x1ec>
 8031fe8:	2020      	movs	r0, #32
 8031fea:	f7fc fa47 	bl	802e47c <malloc>
 8031fee:	4606      	mov	r6, r0
 8031ff0:	2800      	cmp	r0, #0
 8031ff2:	f43f ac7e 	beq.w	80318f2 <__ssvfscanf_r+0x18e>
 8031ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8031ff8:	f8c8 0000 	str.w	r0, [r8]
 8031ffc:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8032000:	889d      	ldrh	r5, [r3, #4]
 8032002:	45aa      	cmp	sl, r5
 8032004:	d311      	bcc.n	803202a <__ssvfscanf_r+0x8c6>
 8032006:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 803200a:	429d      	cmp	r5, r3
 803200c:	f200 8512 	bhi.w	8032a34 <__ssvfscanf_r+0x12d0>
 8032010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032012:	3508      	adds	r5, #8
 8032014:	b2ad      	uxth	r5, r5
 8032016:	6818      	ldr	r0, [r3, #0]
 8032018:	00a9      	lsls	r1, r5, #2
 803201a:	f001 f9b9 	bl	8033390 <realloc>
 803201e:	2800      	cmp	r0, #0
 8032020:	f000 8508 	beq.w	8032a34 <__ssvfscanf_r+0x12d0>
 8032024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032026:	6018      	str	r0, [r3, #0]
 8032028:	809d      	strh	r5, [r3, #4]
 803202a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803202c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803202e:	681b      	ldr	r3, [r3, #0]
 8032030:	f10a 0201 	add.w	r2, sl, #1
 8032034:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 8032038:	80ca      	strh	r2, [r1, #6]
 803203a:	46c2      	mov	sl, r8
 803203c:	46b0      	mov	r8, r6
 803203e:	2620      	movs	r6, #32
 8032040:	4645      	mov	r5, r8
 8032042:	6823      	ldr	r3, [r4, #0]
 8032044:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8032048:	781a      	ldrb	r2, [r3, #0]
 803204a:	5c8a      	ldrb	r2, [r1, r2]
 803204c:	b35a      	cbz	r2, 80320a6 <__ssvfscanf_r+0x942>
 803204e:	6862      	ldr	r2, [r4, #4]
 8032050:	3a01      	subs	r2, #1
 8032052:	6062      	str	r2, [r4, #4]
 8032054:	1c5a      	adds	r2, r3, #1
 8032056:	6022      	str	r2, [r4, #0]
 8032058:	781b      	ldrb	r3, [r3, #0]
 803205a:	f808 3b01 	strb.w	r3, [r8], #1
 803205e:	f1ba 0f00 	cmp.w	sl, #0
 8032062:	d010      	beq.n	8032086 <__ssvfscanf_r+0x922>
 8032064:	eba8 0b05 	sub.w	fp, r8, r5
 8032068:	45b3      	cmp	fp, r6
 803206a:	d30c      	bcc.n	8032086 <__ssvfscanf_r+0x922>
 803206c:	0076      	lsls	r6, r6, #1
 803206e:	4628      	mov	r0, r5
 8032070:	4631      	mov	r1, r6
 8032072:	f001 f98d 	bl	8033390 <realloc>
 8032076:	4605      	mov	r5, r0
 8032078:	2800      	cmp	r0, #0
 803207a:	f43f ac3a 	beq.w	80318f2 <__ssvfscanf_r+0x18e>
 803207e:	eb00 080b 	add.w	r8, r0, fp
 8032082:	f8ca 0000 	str.w	r0, [sl]
 8032086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032088:	3b01      	subs	r3, #1
 803208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803208c:	d00b      	beq.n	80320a6 <__ssvfscanf_r+0x942>
 803208e:	6863      	ldr	r3, [r4, #4]
 8032090:	2b00      	cmp	r3, #0
 8032092:	dcd6      	bgt.n	8032042 <__ssvfscanf_r+0x8de>
 8032094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032096:	4621      	mov	r1, r4
 8032098:	f7fd f9af 	bl	802f3fa <__ssrefill_r>
 803209c:	2800      	cmp	r0, #0
 803209e:	d0d0      	beq.n	8032042 <__ssvfscanf_r+0x8de>
 80320a0:	45a8      	cmp	r8, r5
 80320a2:	f43f ac21 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 80320a6:	ebb8 0505 	subs.w	r5, r8, r5
 80320aa:	f43f ac51 	beq.w	8031950 <__ssvfscanf_r+0x1ec>
 80320ae:	2300      	movs	r3, #0
 80320b0:	f888 3000 	strb.w	r3, [r8]
 80320b4:	f1ba 0f00 	cmp.w	sl, #0
 80320b8:	d009      	beq.n	80320ce <__ssvfscanf_r+0x96a>
 80320ba:	1c69      	adds	r1, r5, #1
 80320bc:	428e      	cmp	r6, r1
 80320be:	d906      	bls.n	80320ce <__ssvfscanf_r+0x96a>
 80320c0:	f8da 0000 	ldr.w	r0, [sl]
 80320c4:	f001 f964 	bl	8033390 <realloc>
 80320c8:	b108      	cbz	r0, 80320ce <__ssvfscanf_r+0x96a>
 80320ca:	f8ca 0000 	str.w	r0, [sl]
 80320ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80320d0:	3301      	adds	r3, #1
 80320d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80320d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80320d6:	442b      	add	r3, r5
 80320d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80320da:	e64a      	b.n	8031d72 <__ssvfscanf_r+0x60e>
 80320dc:	46b2      	mov	sl, r6
 80320de:	e7af      	b.n	8032040 <__ssvfscanf_r+0x8dc>
 80320e0:	2000016c 	.word	0x2000016c
 80320e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80320e6:	2b00      	cmp	r3, #0
 80320e8:	bf08      	it	eq
 80320ea:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 80320ee:	f016 0901 	ands.w	r9, r6, #1
 80320f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80320f4:	f006 0810 	and.w	r8, r6, #16
 80320f8:	f000 80ef 	beq.w	80322da <__ssvfscanf_r+0xb76>
 80320fc:	f1b8 0f00 	cmp.w	r8, #0
 8032100:	f040 8098 	bne.w	8032234 <__ssvfscanf_r+0xad0>
 8032104:	462b      	mov	r3, r5
 8032106:	0631      	lsls	r1, r6, #24
 8032108:	f853 5b04 	ldr.w	r5, [r3], #4
 803210c:	613b      	str	r3, [r7, #16]
 803210e:	f140 8099 	bpl.w	8032244 <__ssvfscanf_r+0xae0>
 8032112:	2d00      	cmp	r5, #0
 8032114:	f43f ace4 	beq.w	8031ae0 <__ssvfscanf_r+0x37c>
 8032118:	2080      	movs	r0, #128	@ 0x80
 803211a:	f7fc f9af 	bl	802e47c <malloc>
 803211e:	4606      	mov	r6, r0
 8032120:	2800      	cmp	r0, #0
 8032122:	f43f acda 	beq.w	8031ada <__ssvfscanf_r+0x376>
 8032126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032128:	6028      	str	r0, [r5, #0]
 803212a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 803212e:	889b      	ldrh	r3, [r3, #4]
 8032130:	4599      	cmp	r9, r3
 8032132:	d314      	bcc.n	803215e <__ssvfscanf_r+0x9fa>
 8032134:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8032138:	4293      	cmp	r3, r2
 803213a:	f200 847b 	bhi.w	8032a34 <__ssvfscanf_r+0x12d0>
 803213e:	3308      	adds	r3, #8
 8032140:	fa1f fa83 	uxth.w	sl, r3
 8032144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032146:	ea4f 018a 	mov.w	r1, sl, lsl #2
 803214a:	6818      	ldr	r0, [r3, #0]
 803214c:	f001 f920 	bl	8033390 <realloc>
 8032150:	2800      	cmp	r0, #0
 8032152:	f000 846f 	beq.w	8032a34 <__ssvfscanf_r+0x12d0>
 8032156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032158:	6018      	str	r0, [r3, #0]
 803215a:	f8a3 a004 	strh.w	sl, [r3, #4]
 803215e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032160:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8032162:	681b      	ldr	r3, [r3, #0]
 8032164:	f109 0201 	add.w	r2, r9, #1
 8032168:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 803216c:	46aa      	mov	sl, r5
 803216e:	80ca      	strh	r2, [r1, #6]
 8032170:	4635      	mov	r5, r6
 8032172:	f04f 0920 	mov.w	r9, #32
 8032176:	2300      	movs	r3, #0
 8032178:	6822      	ldr	r2, [r4, #0]
 803217a:	49a7      	ldr	r1, [pc, #668]	@ (8032418 <__ssvfscanf_r+0xcb4>)
 803217c:	7812      	ldrb	r2, [r2, #0]
 803217e:	5c8a      	ldrb	r2, [r1, r2]
 8032180:	0710      	lsls	r0, r2, #28
 8032182:	d43c      	bmi.n	80321fe <__ssvfscanf_r+0xa9a>
 8032184:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032186:	2a00      	cmp	r2, #0
 8032188:	d039      	beq.n	80321fe <__ssvfscanf_r+0xa9a>
 803218a:	60fb      	str	r3, [r7, #12]
 803218c:	f7fb f8b8 	bl	802d300 <__locale_mb_cur_max>
 8032190:	68fb      	ldr	r3, [r7, #12]
 8032192:	4298      	cmp	r0, r3
 8032194:	f43f aba8 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 8032198:	6822      	ldr	r2, [r4, #0]
 803219a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 803219e:	f812 0b01 	ldrb.w	r0, [r2], #1
 80321a2:	54c8      	strb	r0, [r1, r3]
 80321a4:	f103 0b01 	add.w	fp, r3, #1
 80321a8:	6863      	ldr	r3, [r4, #4]
 80321aa:	3b01      	subs	r3, #1
 80321ac:	e9c4 2300 	strd	r2, r3, [r4]
 80321b0:	6a3b      	ldr	r3, [r7, #32]
 80321b2:	2b03      	cmp	r3, #3
 80321b4:	d102      	bne.n	80321bc <__ssvfscanf_r+0xa58>
 80321b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80321b8:	2b04      	cmp	r3, #4
 80321ba:	d005      	beq.n	80321c8 <__ssvfscanf_r+0xa64>
 80321bc:	2208      	movs	r2, #8
 80321be:	2100      	movs	r1, #0
 80321c0:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80321c4:	f7f9 ff14 	bl	802bff0 <memset>
 80321c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80321cc:	9300      	str	r3, [sp, #0]
 80321ce:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80321d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80321d4:	465b      	mov	r3, fp
 80321d6:	4629      	mov	r1, r5
 80321d8:	f002 fc94 	bl	8034b04 <_mbrtowc_r>
 80321dc:	1c42      	adds	r2, r0, #1
 80321de:	6238      	str	r0, [r7, #32]
 80321e0:	f43f ab82 	beq.w	80318e8 <__ssvfscanf_r+0x184>
 80321e4:	bb90      	cbnz	r0, 803224c <__ssvfscanf_r+0xae8>
 80321e6:	6028      	str	r0, [r5, #0]
 80321e8:	6828      	ldr	r0, [r5, #0]
 80321ea:	f002 fca5 	bl	8034b38 <iswspace>
 80321ee:	4603      	mov	r3, r0
 80321f0:	2800      	cmp	r0, #0
 80321f2:	d047      	beq.n	8032284 <__ssvfscanf_r+0xb20>
 80321f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80321f8:	f1bb 0f00 	cmp.w	fp, #0
 80321fc:	d139      	bne.n	8032272 <__ssvfscanf_r+0xb0e>
 80321fe:	f1b8 0f00 	cmp.w	r8, #0
 8032202:	d114      	bne.n	803222e <__ssvfscanf_r+0xaca>
 8032204:	f8c5 8000 	str.w	r8, [r5]
 8032208:	f1ba 0f00 	cmp.w	sl, #0
 803220c:	d00c      	beq.n	8032228 <__ssvfscanf_r+0xac4>
 803220e:	1ba9      	subs	r1, r5, r6
 8032210:	108b      	asrs	r3, r1, #2
 8032212:	3301      	adds	r3, #1
 8032214:	4599      	cmp	r9, r3
 8032216:	d907      	bls.n	8032228 <__ssvfscanf_r+0xac4>
 8032218:	f8da 0000 	ldr.w	r0, [sl]
 803221c:	3104      	adds	r1, #4
 803221e:	f001 f8b7 	bl	8033390 <realloc>
 8032222:	b108      	cbz	r0, 8032228 <__ssvfscanf_r+0xac4>
 8032224:	f8ca 0000 	str.w	r0, [sl]
 8032228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803222a:	3301      	adds	r3, #1
 803222c:	627b      	str	r3, [r7, #36]	@ 0x24
 803222e:	693d      	ldr	r5, [r7, #16]
 8032230:	f7ff bab3 	b.w	803179a <__ssvfscanf_r+0x36>
 8032234:	f04f 0900 	mov.w	r9, #0
 8032238:	613d      	str	r5, [r7, #16]
 803223a:	464e      	mov	r6, r9
 803223c:	46ca      	mov	sl, r9
 803223e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 8032242:	e798      	b.n	8032176 <__ssvfscanf_r+0xa12>
 8032244:	46c1      	mov	r9, r8
 8032246:	4646      	mov	r6, r8
 8032248:	46c2      	mov	sl, r8
 803224a:	e794      	b.n	8032176 <__ssvfscanf_r+0xa12>
 803224c:	6a3b      	ldr	r3, [r7, #32]
 803224e:	3302      	adds	r3, #2
 8032250:	d1ca      	bne.n	80321e8 <__ssvfscanf_r+0xa84>
 8032252:	465b      	mov	r3, fp
 8032254:	6862      	ldr	r2, [r4, #4]
 8032256:	2a00      	cmp	r2, #0
 8032258:	dc8e      	bgt.n	8032178 <__ssvfscanf_r+0xa14>
 803225a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803225c:	60fb      	str	r3, [r7, #12]
 803225e:	4621      	mov	r1, r4
 8032260:	f7fd f8cb 	bl	802f3fa <__ssrefill_r>
 8032264:	68fb      	ldr	r3, [r7, #12]
 8032266:	2800      	cmp	r0, #0
 8032268:	d086      	beq.n	8032178 <__ssvfscanf_r+0xa14>
 803226a:	2b00      	cmp	r3, #0
 803226c:	f47f ab3c 	bne.w	80318e8 <__ssvfscanf_r+0x184>
 8032270:	e7c5      	b.n	80321fe <__ssvfscanf_r+0xa9a>
 8032272:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8032276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032278:	f813 100b 	ldrb.w	r1, [r3, fp]
 803227c:	4622      	mov	r2, r4
 803227e:	f7fd f881 	bl	802f384 <_sungetc_r>
 8032282:	e7b7      	b.n	80321f4 <__ssvfscanf_r+0xa90>
 8032284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8032286:	445a      	add	r2, fp
 8032288:	633a      	str	r2, [r7, #48]	@ 0x30
 803228a:	6a3a      	ldr	r2, [r7, #32]
 803228c:	2a03      	cmp	r2, #3
 803228e:	d102      	bne.n	8032296 <__ssvfscanf_r+0xb32>
 8032290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8032292:	2a04      	cmp	r2, #4
 8032294:	d002      	beq.n	803229c <__ssvfscanf_r+0xb38>
 8032296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8032298:	3a01      	subs	r2, #1
 803229a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 803229c:	f1b8 0f00 	cmp.w	r8, #0
 80322a0:	d1d8      	bne.n	8032254 <__ssvfscanf_r+0xaf0>
 80322a2:	3504      	adds	r5, #4
 80322a4:	f1ba 0f00 	cmp.w	sl, #0
 80322a8:	d015      	beq.n	80322d6 <__ssvfscanf_r+0xb72>
 80322aa:	eba5 0b06 	sub.w	fp, r5, r6
 80322ae:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 80322b2:	d80e      	bhi.n	80322d2 <__ssvfscanf_r+0xb6e>
 80322b4:	4630      	mov	r0, r6
 80322b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80322ba:	f001 f869 	bl	8033390 <realloc>
 80322be:	4606      	mov	r6, r0
 80322c0:	2800      	cmp	r0, #0
 80322c2:	f43f ac0a 	beq.w	8031ada <__ssvfscanf_r+0x376>
 80322c6:	eb00 050b 	add.w	r5, r0, fp
 80322ca:	f8ca 0000 	str.w	r0, [sl]
 80322ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80322d2:	4643      	mov	r3, r8
 80322d4:	e7be      	b.n	8032254 <__ssvfscanf_r+0xaf0>
 80322d6:	4653      	mov	r3, sl
 80322d8:	e7bc      	b.n	8032254 <__ssvfscanf_r+0xaf0>
 80322da:	f1b8 0f00 	cmp.w	r8, #0
 80322de:	d01a      	beq.n	8032316 <__ssvfscanf_r+0xbb2>
 80322e0:	4e4d      	ldr	r6, [pc, #308]	@ (8032418 <__ssvfscanf_r+0xcb4>)
 80322e2:	6823      	ldr	r3, [r4, #0]
 80322e4:	781a      	ldrb	r2, [r3, #0]
 80322e6:	5cb2      	ldrb	r2, [r6, r2]
 80322e8:	0711      	lsls	r1, r2, #28
 80322ea:	d411      	bmi.n	8032310 <__ssvfscanf_r+0xbac>
 80322ec:	3301      	adds	r3, #1
 80322ee:	6862      	ldr	r2, [r4, #4]
 80322f0:	6023      	str	r3, [r4, #0]
 80322f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80322f4:	f109 0901 	add.w	r9, r9, #1
 80322f8:	3a01      	subs	r2, #1
 80322fa:	454b      	cmp	r3, r9
 80322fc:	6062      	str	r2, [r4, #4]
 80322fe:	d007      	beq.n	8032310 <__ssvfscanf_r+0xbac>
 8032300:	2a00      	cmp	r2, #0
 8032302:	dcee      	bgt.n	80322e2 <__ssvfscanf_r+0xb7e>
 8032304:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032306:	4621      	mov	r1, r4
 8032308:	f7fd f877 	bl	802f3fa <__ssrefill_r>
 803230c:	2800      	cmp	r0, #0
 803230e:	d0e8      	beq.n	80322e2 <__ssvfscanf_r+0xb7e>
 8032310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032312:	444b      	add	r3, r9
 8032314:	e4d3      	b.n	8031cbe <__ssvfscanf_r+0x55a>
 8032316:	46a8      	mov	r8, r5
 8032318:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 803231c:	f858 5b04 	ldr.w	r5, [r8], #4
 8032320:	d077      	beq.n	8032412 <__ssvfscanf_r+0xcae>
 8032322:	2d00      	cmp	r5, #0
 8032324:	f43f ab14 	beq.w	8031950 <__ssvfscanf_r+0x1ec>
 8032328:	2020      	movs	r0, #32
 803232a:	f7fc f8a7 	bl	802e47c <malloc>
 803232e:	4681      	mov	r9, r0
 8032330:	2800      	cmp	r0, #0
 8032332:	f43f aade 	beq.w	80318f2 <__ssvfscanf_r+0x18e>
 8032336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032338:	6028      	str	r0, [r5, #0]
 803233a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 803233e:	889e      	ldrh	r6, [r3, #4]
 8032340:	45b2      	cmp	sl, r6
 8032342:	d311      	bcc.n	8032368 <__ssvfscanf_r+0xc04>
 8032344:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8032348:	429e      	cmp	r6, r3
 803234a:	f200 8373 	bhi.w	8032a34 <__ssvfscanf_r+0x12d0>
 803234e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032350:	3608      	adds	r6, #8
 8032352:	b2b6      	uxth	r6, r6
 8032354:	6818      	ldr	r0, [r3, #0]
 8032356:	00b1      	lsls	r1, r6, #2
 8032358:	f001 f81a 	bl	8033390 <realloc>
 803235c:	2800      	cmp	r0, #0
 803235e:	f000 8369 	beq.w	8032a34 <__ssvfscanf_r+0x12d0>
 8032362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032364:	6018      	str	r0, [r3, #0]
 8032366:	809e      	strh	r6, [r3, #4]
 8032368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 803236a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 803236c:	681b      	ldr	r3, [r3, #0]
 803236e:	f10a 0201 	add.w	r2, sl, #1
 8032372:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8032376:	80ca      	strh	r2, [r1, #6]
 8032378:	46aa      	mov	sl, r5
 803237a:	2620      	movs	r6, #32
 803237c:	464d      	mov	r5, r9
 803237e:	46a9      	mov	r9, r5
 8032380:	6823      	ldr	r3, [r4, #0]
 8032382:	4925      	ldr	r1, [pc, #148]	@ (8032418 <__ssvfscanf_r+0xcb4>)
 8032384:	781a      	ldrb	r2, [r3, #0]
 8032386:	5c8a      	ldrb	r2, [r1, r2]
 8032388:	0712      	lsls	r2, r2, #28
 803238a:	d428      	bmi.n	80323de <__ssvfscanf_r+0xc7a>
 803238c:	6862      	ldr	r2, [r4, #4]
 803238e:	3a01      	subs	r2, #1
 8032390:	6062      	str	r2, [r4, #4]
 8032392:	1c5a      	adds	r2, r3, #1
 8032394:	6022      	str	r2, [r4, #0]
 8032396:	781b      	ldrb	r3, [r3, #0]
 8032398:	f805 3b01 	strb.w	r3, [r5], #1
 803239c:	f1ba 0f00 	cmp.w	sl, #0
 80323a0:	d010      	beq.n	80323c4 <__ssvfscanf_r+0xc60>
 80323a2:	eba5 0b09 	sub.w	fp, r5, r9
 80323a6:	45b3      	cmp	fp, r6
 80323a8:	d30c      	bcc.n	80323c4 <__ssvfscanf_r+0xc60>
 80323aa:	0076      	lsls	r6, r6, #1
 80323ac:	4648      	mov	r0, r9
 80323ae:	4631      	mov	r1, r6
 80323b0:	f000 ffee 	bl	8033390 <realloc>
 80323b4:	4681      	mov	r9, r0
 80323b6:	2800      	cmp	r0, #0
 80323b8:	f43f aa9b 	beq.w	80318f2 <__ssvfscanf_r+0x18e>
 80323bc:	eb00 050b 	add.w	r5, r0, fp
 80323c0:	f8ca 0000 	str.w	r0, [sl]
 80323c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80323c6:	3b01      	subs	r3, #1
 80323c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80323ca:	d008      	beq.n	80323de <__ssvfscanf_r+0xc7a>
 80323cc:	6863      	ldr	r3, [r4, #4]
 80323ce:	2b00      	cmp	r3, #0
 80323d0:	dcd6      	bgt.n	8032380 <__ssvfscanf_r+0xc1c>
 80323d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80323d4:	4621      	mov	r1, r4
 80323d6:	f7fd f810 	bl	802f3fa <__ssrefill_r>
 80323da:	2800      	cmp	r0, #0
 80323dc:	d0d0      	beq.n	8032380 <__ssvfscanf_r+0xc1c>
 80323de:	2300      	movs	r3, #0
 80323e0:	702b      	strb	r3, [r5, #0]
 80323e2:	eba5 0509 	sub.w	r5, r5, r9
 80323e6:	f1ba 0f00 	cmp.w	sl, #0
 80323ea:	d009      	beq.n	8032400 <__ssvfscanf_r+0xc9c>
 80323ec:	1c69      	adds	r1, r5, #1
 80323ee:	428e      	cmp	r6, r1
 80323f0:	d906      	bls.n	8032400 <__ssvfscanf_r+0xc9c>
 80323f2:	f8da 0000 	ldr.w	r0, [sl]
 80323f6:	f000 ffcb 	bl	8033390 <realloc>
 80323fa:	b108      	cbz	r0, 8032400 <__ssvfscanf_r+0xc9c>
 80323fc:	f8ca 0000 	str.w	r0, [sl]
 8032400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032402:	442b      	add	r3, r5
 8032404:	633b      	str	r3, [r7, #48]	@ 0x30
 8032406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8032408:	3301      	adds	r3, #1
 803240a:	627b      	str	r3, [r7, #36]	@ 0x24
 803240c:	4645      	mov	r5, r8
 803240e:	f7ff b9c4 	b.w	803179a <__ssvfscanf_r+0x36>
 8032412:	46b2      	mov	sl, r6
 8032414:	e7b3      	b.n	803237e <__ssvfscanf_r+0xc1a>
 8032416:	bf00      	nop
 8032418:	0803b0d1 	.word	0x0803b0d1
 803241c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803241e:	3b01      	subs	r3, #1
 8032420:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8032424:	bf81      	itttt	hi
 8032426:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8032428:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 803242c:	eb03 090c 	addhi.w	r9, r3, ip
 8032430:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8032434:	bf8c      	ite	hi
 8032436:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 8032438:	f04f 0900 	movls.w	r9, #0
 803243c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 8032440:	f04f 0a00 	mov.w	sl, #0
 8032444:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 8032448:	6822      	ldr	r2, [r4, #0]
 803244a:	7813      	ldrb	r3, [r2, #0]
 803244c:	2b39      	cmp	r3, #57	@ 0x39
 803244e:	d80f      	bhi.n	8032470 <__ssvfscanf_r+0xd0c>
 8032450:	2b2a      	cmp	r3, #42	@ 0x2a
 8032452:	d91a      	bls.n	803248a <__ssvfscanf_r+0xd26>
 8032454:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8032458:	290e      	cmp	r1, #14
 803245a:	d816      	bhi.n	803248a <__ssvfscanf_r+0xd26>
 803245c:	e8df f001 	tbb	[pc, r1]
 8032460:	15781578 	.word	0x15781578
 8032464:	68683f15 	.word	0x68683f15
 8032468:	68686868 	.word	0x68686868
 803246c:	7068      	.short	0x7068
 803246e:	70          	.byte	0x70
 803246f:	00          	.byte	0x00
 8032470:	2b66      	cmp	r3, #102	@ 0x66
 8032472:	d832      	bhi.n	80324da <__ssvfscanf_r+0xd76>
 8032474:	2b60      	cmp	r3, #96	@ 0x60
 8032476:	d803      	bhi.n	8032480 <__ssvfscanf_r+0xd1c>
 8032478:	2b46      	cmp	r3, #70	@ 0x46
 803247a:	d804      	bhi.n	8032486 <__ssvfscanf_r+0xd22>
 803247c:	2b40      	cmp	r3, #64	@ 0x40
 803247e:	d904      	bls.n	803248a <__ssvfscanf_r+0xd26>
 8032480:	69f9      	ldr	r1, [r7, #28]
 8032482:	290a      	cmp	r1, #10
 8032484:	e062      	b.n	803254c <__ssvfscanf_r+0xde8>
 8032486:	2b58      	cmp	r3, #88	@ 0x58
 8032488:	d068      	beq.n	803255c <__ssvfscanf_r+0xdf8>
 803248a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 803248e:	d011      	beq.n	80324b4 <__ssvfscanf_r+0xd50>
 8032490:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032494:	4598      	cmp	r8, r3
 8032496:	d908      	bls.n	80324aa <__ssvfscanf_r+0xd46>
 8032498:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 803249c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803249e:	4622      	mov	r2, r4
 80324a0:	f7fc ff70 	bl	802f384 <_sungetc_r>
 80324a4:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 80324a8:	46c8      	mov	r8, r9
 80324aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80324ae:	4598      	cmp	r8, r3
 80324b0:	f43f aa4e 	beq.w	8031950 <__ssvfscanf_r+0x1ec>
 80324b4:	f01b 0210 	ands.w	r2, fp, #16
 80324b8:	d16c      	bne.n	8032594 <__ssvfscanf_r+0xe30>
 80324ba:	69fb      	ldr	r3, [r7, #28]
 80324bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80324be:	69be      	ldr	r6, [r7, #24]
 80324c0:	f888 2000 	strb.w	r2, [r8]
 80324c4:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80324c8:	47b0      	blx	r6
 80324ca:	f01b 0f20 	tst.w	fp, #32
 80324ce:	f105 0904 	add.w	r9, r5, #4
 80324d2:	d056      	beq.n	8032582 <__ssvfscanf_r+0xe1e>
 80324d4:	682b      	ldr	r3, [r5, #0]
 80324d6:	6018      	str	r0, [r3, #0]
 80324d8:	e058      	b.n	803258c <__ssvfscanf_r+0xe28>
 80324da:	2b78      	cmp	r3, #120	@ 0x78
 80324dc:	e7d4      	b.n	8032488 <__ssvfscanf_r+0xd24>
 80324de:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 80324e2:	d00a      	beq.n	80324fa <__ssvfscanf_r+0xd96>
 80324e4:	69f9      	ldr	r1, [r7, #28]
 80324e6:	b919      	cbnz	r1, 80324f0 <__ssvfscanf_r+0xd8c>
 80324e8:	2108      	movs	r1, #8
 80324ea:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 80324ee:	61f9      	str	r1, [r7, #28]
 80324f0:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 80324f4:	d004      	beq.n	8032500 <__ssvfscanf_r+0xd9c>
 80324f6:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 80324fa:	f808 3b01 	strb.w	r3, [r8], #1
 80324fe:	e00b      	b.n	8032518 <__ssvfscanf_r+0xdb4>
 8032500:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8032504:	f1b9 0f00 	cmp.w	r9, #0
 8032508:	d004      	beq.n	8032514 <__ssvfscanf_r+0xdb0>
 803250a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 803250c:	3301      	adds	r3, #1
 803250e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8032512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8032514:	f10a 0a01 	add.w	sl, sl, #1
 8032518:	6863      	ldr	r3, [r4, #4]
 803251a:	3b01      	subs	r3, #1
 803251c:	2b00      	cmp	r3, #0
 803251e:	6063      	str	r3, [r4, #4]
 8032520:	dd28      	ble.n	8032574 <__ssvfscanf_r+0xe10>
 8032522:	3201      	adds	r2, #1
 8032524:	6022      	str	r2, [r4, #0]
 8032526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8032528:	3b01      	subs	r3, #1
 803252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 803252c:	d18c      	bne.n	8032448 <__ssvfscanf_r+0xce4>
 803252e:	e7ac      	b.n	803248a <__ssvfscanf_r+0xd26>
 8032530:	69f8      	ldr	r0, [r7, #28]
 8032532:	499b      	ldr	r1, [pc, #620]	@ (80327a0 <__ssvfscanf_r+0x103c>)
 8032534:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032538:	61f9      	str	r1, [r7, #28]
 803253a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 803253e:	e7dc      	b.n	80324fa <__ssvfscanf_r+0xd96>
 8032540:	69f8      	ldr	r0, [r7, #28]
 8032542:	4997      	ldr	r1, [pc, #604]	@ (80327a0 <__ssvfscanf_r+0x103c>)
 8032544:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8032548:	61f9      	str	r1, [r7, #28]
 803254a:	2908      	cmp	r1, #8
 803254c:	dcf5      	bgt.n	803253a <__ssvfscanf_r+0xdd6>
 803254e:	e79c      	b.n	803248a <__ssvfscanf_r+0xd26>
 8032550:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8032554:	d099      	beq.n	803248a <__ssvfscanf_r+0xd26>
 8032556:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 803255a:	e7ce      	b.n	80324fa <__ssvfscanf_r+0xd96>
 803255c:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8032560:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8032564:	d191      	bne.n	803248a <__ssvfscanf_r+0xd26>
 8032566:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 803256a:	2110      	movs	r1, #16
 803256c:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8032570:	61f9      	str	r1, [r7, #28]
 8032572:	e7c2      	b.n	80324fa <__ssvfscanf_r+0xd96>
 8032574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032576:	4621      	mov	r1, r4
 8032578:	f7fc ff3f 	bl	802f3fa <__ssrefill_r>
 803257c:	2800      	cmp	r0, #0
 803257e:	d0d2      	beq.n	8032526 <__ssvfscanf_r+0xdc2>
 8032580:	e783      	b.n	803248a <__ssvfscanf_r+0xd26>
 8032582:	f01b 0f08 	tst.w	fp, #8
 8032586:	d00b      	beq.n	80325a0 <__ssvfscanf_r+0xe3c>
 8032588:	682b      	ldr	r3, [r5, #0]
 803258a:	7018      	strb	r0, [r3, #0]
 803258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803258e:	3301      	adds	r3, #1
 8032590:	627b      	str	r3, [r7, #36]	@ 0x24
 8032592:	464d      	mov	r5, r9
 8032594:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8032598:	eba8 0803 	sub.w	r8, r8, r3
 803259c:	44d0      	add	r8, sl
 803259e:	e516      	b.n	8031fce <__ssvfscanf_r+0x86a>
 80325a0:	f01b 0f04 	tst.w	fp, #4
 80325a4:	d002      	beq.n	80325ac <__ssvfscanf_r+0xe48>
 80325a6:	682b      	ldr	r3, [r5, #0]
 80325a8:	8018      	strh	r0, [r3, #0]
 80325aa:	e7ef      	b.n	803258c <__ssvfscanf_r+0xe28>
 80325ac:	f01b 0201 	ands.w	r2, fp, #1
 80325b0:	d190      	bne.n	80324d4 <__ssvfscanf_r+0xd70>
 80325b2:	f01b 0f02 	tst.w	fp, #2
 80325b6:	d08d      	beq.n	80324d4 <__ssvfscanf_r+0xd70>
 80325b8:	4b7a      	ldr	r3, [pc, #488]	@ (80327a4 <__ssvfscanf_r+0x1040>)
 80325ba:	69b9      	ldr	r1, [r7, #24]
 80325bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80325be:	4299      	cmp	r1, r3
 80325c0:	69fb      	ldr	r3, [r7, #28]
 80325c2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80325c6:	d105      	bne.n	80325d4 <__ssvfscanf_r+0xe70>
 80325c8:	f002 fa9a 	bl	8034b00 <_strtoull_r>
 80325cc:	682b      	ldr	r3, [r5, #0]
 80325ce:	e9c3 0100 	strd	r0, r1, [r3]
 80325d2:	e7db      	b.n	803258c <__ssvfscanf_r+0xe28>
 80325d4:	f002 f9e8 	bl	80349a8 <_strtoll_r>
 80325d8:	e7f8      	b.n	80325cc <__ssvfscanf_r+0xe68>
 80325da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80325dc:	f7fa fe96 	bl	802d30c <_localeconv_r>
 80325e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80325e2:	6802      	ldr	r2, [r0, #0]
 80325e4:	3b01      	subs	r3, #1
 80325e6:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 80325ea:	f04f 0800 	mov.w	r8, #0
 80325ee:	bf88      	it	hi
 80325f0:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 80325f2:	f8c7 8010 	str.w	r8, [r7, #16]
 80325f6:	e9c7 8802 	strd	r8, r8, [r7, #8]
 80325fa:	bf81      	itttt	hi
 80325fc:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8032600:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8032604:	181b      	addhi	r3, r3, r0
 8032606:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8032608:	bf98      	it	ls
 803260a:	2300      	movls	r3, #0
 803260c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8032610:	46c3      	mov	fp, r8
 8032612:	46c2      	mov	sl, r8
 8032614:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8032618:	6821      	ldr	r1, [r4, #0]
 803261a:	6079      	str	r1, [r7, #4]
 803261c:	7808      	ldrb	r0, [r1, #0]
 803261e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8032622:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8032626:	f200 8123 	bhi.w	8032870 <__ssvfscanf_r+0x110c>
 803262a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 803262e:	0089      	.short	0x0089
 8032630:	00890121 	.word	0x00890121
 8032634:	01210121 	.word	0x01210121
 8032638:	006f004f 	.word	0x006f004f
 803263c:	006f006f 	.word	0x006f006f
 8032640:	006f006f 	.word	0x006f006f
 8032644:	006f006f 	.word	0x006f006f
 8032648:	006f006f 	.word	0x006f006f
 803264c:	01210121 	.word	0x01210121
 8032650:	01210121 	.word	0x01210121
 8032654:	01210121 	.word	0x01210121
 8032658:	00af0121 	.word	0x00af0121
 803265c:	006d006d 	.word	0x006d006d
 8032660:	011e006d 	.word	0x011e006d
 8032664:	012100ed 	.word	0x012100ed
 8032668:	00d60121 	.word	0x00d60121
 803266c:	01210121 	.word	0x01210121
 8032670:	01210121 	.word	0x01210121
 8032674:	01210090 	.word	0x01210090
 8032678:	01210104 	.word	0x01210104
 803267c:	01210121 	.word	0x01210121
 8032680:	012100f8 	.word	0x012100f8
 8032684:	01210121 	.word	0x01210121
 8032688:	00fe0073 	.word	0x00fe0073
 803268c:	01210121 	.word	0x01210121
 8032690:	01210121 	.word	0x01210121
 8032694:	01210121 	.word	0x01210121
 8032698:	00af0121 	.word	0x00af0121
 803269c:	006d006d 	.word	0x006d006d
 80326a0:	011e006d 	.word	0x011e006d
 80326a4:	012100ed 	.word	0x012100ed
 80326a8:	00d60121 	.word	0x00d60121
 80326ac:	01210121 	.word	0x01210121
 80326b0:	01210121 	.word	0x01210121
 80326b4:	01210090 	.word	0x01210090
 80326b8:	01210104 	.word	0x01210104
 80326bc:	01210121 	.word	0x01210121
 80326c0:	012100f8 	.word	0x012100f8
 80326c4:	01210121 	.word	0x01210121
 80326c8:	00fe0073 	.word	0x00fe0073
 80326cc:	05f1      	lsls	r1, r6, #23
 80326ce:	d51d      	bpl.n	803270c <__ssvfscanf_r+0xfa8>
 80326d0:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 80326d4:	f10a 0a01 	add.w	sl, sl, #1
 80326d8:	b11b      	cbz	r3, 80326e2 <__ssvfscanf_r+0xf7e>
 80326da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80326dc:	3001      	adds	r0, #1
 80326de:	3b01      	subs	r3, #1
 80326e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80326e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80326e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80326e6:	3001      	adds	r0, #1
 80326e8:	6338      	str	r0, [r7, #48]	@ 0x30
 80326ea:	6860      	ldr	r0, [r4, #4]
 80326ec:	3801      	subs	r0, #1
 80326ee:	3901      	subs	r1, #1
 80326f0:	2800      	cmp	r0, #0
 80326f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80326f4:	6060      	str	r0, [r4, #4]
 80326f6:	f340 80cc 	ble.w	8032892 <__ssvfscanf_r+0x112e>
 80326fa:	6879      	ldr	r1, [r7, #4]
 80326fc:	3101      	adds	r1, #1
 80326fe:	6021      	str	r1, [r4, #0]
 8032700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032702:	2900      	cmp	r1, #0
 8032704:	d188      	bne.n	8032618 <__ssvfscanf_r+0xeb4>
 8032706:	e052      	b.n	80327ae <__ssvfscanf_r+0x104a>
 8032708:	0531      	lsls	r1, r6, #20
 803270a:	d550      	bpl.n	80327ae <__ssvfscanf_r+0x104a>
 803270c:	eb1b 0c08 	adds.w	ip, fp, r8
 8032710:	d041      	beq.n	8032796 <__ssvfscanf_r+0x1032>
 8032712:	e04c      	b.n	80327ae <__ssvfscanf_r+0x104a>
 8032714:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8032718:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 803271c:	d147      	bne.n	80327ae <__ssvfscanf_r+0x104a>
 803271e:	f1ba 0f01 	cmp.w	sl, #1
 8032722:	d144      	bne.n	80327ae <__ssvfscanf_r+0x104a>
 8032724:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8032726:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 803272a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 803272e:	3901      	subs	r1, #1
 8032730:	f809 cb01 	strb.w	ip, [r9], #1
 8032734:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8032738:	62f9      	str	r1, [r7, #44]	@ 0x2c
 803273a:	f04f 0a00 	mov.w	sl, #0
 803273e:	e003      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 8032740:	0631      	lsls	r1, r6, #24
 8032742:	d534      	bpl.n	80327ae <__ssvfscanf_r+0x104a>
 8032744:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8032748:	f809 0b01 	strb.w	r0, [r9], #1
 803274c:	e7c9      	b.n	80326e2 <__ssvfscanf_r+0xf7e>
 803274e:	f1bb 0f00 	cmp.w	fp, #0
 8032752:	d10c      	bne.n	803276e <__ssvfscanf_r+0x100a>
 8032754:	f1ba 0f00 	cmp.w	sl, #0
 8032758:	d10d      	bne.n	8032776 <__ssvfscanf_r+0x1012>
 803275a:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 803275e:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8032762:	d108      	bne.n	8032776 <__ssvfscanf_r+0x1012>
 8032764:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8032768:	f04f 0b01 	mov.w	fp, #1
 803276c:	e7ec      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 803276e:	f1bb 0f02 	cmp.w	fp, #2
 8032772:	f000 8088 	beq.w	8032886 <__ssvfscanf_r+0x1122>
 8032776:	f1b8 0f01 	cmp.w	r8, #1
 803277a:	d002      	beq.n	8032782 <__ssvfscanf_r+0x101e>
 803277c:	f1b8 0f04 	cmp.w	r8, #4
 8032780:	d115      	bne.n	80327ae <__ssvfscanf_r+0x104a>
 8032782:	f108 0801 	add.w	r8, r8, #1
 8032786:	fa5f f888 	uxtb.w	r8, r8
 803278a:	e7dd      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 803278c:	0531      	lsls	r1, r6, #20
 803278e:	d50b      	bpl.n	80327a8 <__ssvfscanf_r+0x1044>
 8032790:	eb1b 0c08 	adds.w	ip, fp, r8
 8032794:	d108      	bne.n	80327a8 <__ssvfscanf_r+0x1044>
 8032796:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 803279a:	46e0      	mov	r8, ip
 803279c:	46e3      	mov	fp, ip
 803279e:	e7d3      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 80327a0:	0803b2b0 	.word	0x0803b2b0
 80327a4:	080344f9 	.word	0x080344f9
 80327a8:	f1bb 0f01 	cmp.w	fp, #1
 80327ac:	d06e      	beq.n	803288c <__ssvfscanf_r+0x1128>
 80327ae:	f1ba 0f00 	cmp.w	sl, #0
 80327b2:	d001      	beq.n	80327b8 <__ssvfscanf_r+0x1054>
 80327b4:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 80327b8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80327bc:	f1bb 0f01 	cmp.w	fp, #1
 80327c0:	d873      	bhi.n	80328aa <__ssvfscanf_r+0x1146>
 80327c2:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80327c6:	45a9      	cmp	r9, r5
 80327c8:	f67f a8c2 	bls.w	8031950 <__ssvfscanf_r+0x1ec>
 80327cc:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80327d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80327d2:	4622      	mov	r2, r4
 80327d4:	f7fc fdd6 	bl	802f384 <_sungetc_r>
 80327d8:	e7f5      	b.n	80327c6 <__ssvfscanf_r+0x1062>
 80327da:	f1b8 0f00 	cmp.w	r8, #0
 80327de:	d10d      	bne.n	80327fc <__ssvfscanf_r+0x1098>
 80327e0:	f1ba 0f00 	cmp.w	sl, #0
 80327e4:	d1e6      	bne.n	80327b4 <__ssvfscanf_r+0x1050>
 80327e6:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 80327ea:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 80327ee:	f040 8124 	bne.w	8032a3a <__ssvfscanf_r+0x12d6>
 80327f2:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 80327f6:	f04f 0801 	mov.w	r8, #1
 80327fa:	e7a5      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 80327fc:	f1b8 0f03 	cmp.w	r8, #3
 8032800:	d0bf      	beq.n	8032782 <__ssvfscanf_r+0x101e>
 8032802:	f1b8 0f05 	cmp.w	r8, #5
 8032806:	e7bb      	b.n	8032780 <__ssvfscanf_r+0x101c>
 8032808:	0531      	lsls	r1, r6, #20
 803280a:	d502      	bpl.n	8032812 <__ssvfscanf_r+0x10ae>
 803280c:	eb1b 0c08 	adds.w	ip, fp, r8
 8032810:	d0c1      	beq.n	8032796 <__ssvfscanf_r+0x1032>
 8032812:	f1b8 0f02 	cmp.w	r8, #2
 8032816:	d1ca      	bne.n	80327ae <__ssvfscanf_r+0x104a>
 8032818:	f04f 0803 	mov.w	r8, #3
 803281c:	e794      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 803281e:	f1b8 0f06 	cmp.w	r8, #6
 8032822:	d1c4      	bne.n	80327ae <__ssvfscanf_r+0x104a>
 8032824:	f04f 0807 	mov.w	r8, #7
 8032828:	e78e      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 803282a:	f1b8 0f07 	cmp.w	r8, #7
 803282e:	d1be      	bne.n	80327ae <__ssvfscanf_r+0x104a>
 8032830:	f04f 0808 	mov.w	r8, #8
 8032834:	e788      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 8032836:	0531      	lsls	r1, r6, #20
 8032838:	d5b9      	bpl.n	80327ae <__ssvfscanf_r+0x104a>
 803283a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 803283e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8032842:	d005      	beq.n	8032850 <__ssvfscanf_r+0x10ec>
 8032844:	0571      	lsls	r1, r6, #21
 8032846:	d5b2      	bpl.n	80327ae <__ssvfscanf_r+0x104a>
 8032848:	f1ba 0f00 	cmp.w	sl, #0
 803284c:	f000 80f5 	beq.w	8032a3a <__ssvfscanf_r+0x12d6>
 8032850:	05b1      	lsls	r1, r6, #22
 8032852:	bf58      	it	pl
 8032854:	6939      	ldrpl	r1, [r7, #16]
 8032856:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 803285a:	bf5c      	itt	pl
 803285c:	ebaa 0101 	subpl.w	r1, sl, r1
 8032860:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8032864:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8032868:	e767      	b.n	803273a <__ssvfscanf_r+0xfd6>
 803286a:	0531      	lsls	r1, r6, #20
 803286c:	d5e5      	bpl.n	803283a <__ssvfscanf_r+0x10d6>
 803286e:	e74d      	b.n	803270c <__ssvfscanf_r+0xfa8>
 8032870:	f892 c000 	ldrb.w	ip, [r2]
 8032874:	4584      	cmp	ip, r0
 8032876:	d19a      	bne.n	80327ae <__ssvfscanf_r+0x104a>
 8032878:	05b1      	lsls	r1, r6, #22
 803287a:	d598      	bpl.n	80327ae <__ssvfscanf_r+0x104a>
 803287c:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8032880:	f8c7 a010 	str.w	sl, [r7, #16]
 8032884:	e760      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 8032886:	f04f 0b03 	mov.w	fp, #3
 803288a:	e75d      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 803288c:	f04f 0b02 	mov.w	fp, #2
 8032890:	e75a      	b.n	8032748 <__ssvfscanf_r+0xfe4>
 8032892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032894:	4621      	mov	r1, r4
 8032896:	e9c7 2300 	strd	r2, r3, [r7]
 803289a:	f7fc fdae 	bl	802f3fa <__ssrefill_r>
 803289e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80328a2:	2800      	cmp	r0, #0
 80328a4:	f43f af2c 	beq.w	8032700 <__ssvfscanf_r+0xf9c>
 80328a8:	e781      	b.n	80327ae <__ssvfscanf_r+0x104a>
 80328aa:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80328ae:	2b06      	cmp	r3, #6
 80328b0:	d827      	bhi.n	8032902 <__ssvfscanf_r+0x119e>
 80328b2:	f1b8 0f02 	cmp.w	r8, #2
 80328b6:	d834      	bhi.n	8032922 <__ssvfscanf_r+0x11be>
 80328b8:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 80328bc:	45a9      	cmp	r9, r5
 80328be:	f67f a847 	bls.w	8031950 <__ssvfscanf_r+0x1ec>
 80328c2:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 80328c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80328c8:	4622      	mov	r2, r4
 80328ca:	f7fc fd5b 	bl	802f384 <_sungetc_r>
 80328ce:	e7f5      	b.n	80328bc <__ssvfscanf_r+0x1158>
 80328d0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80328d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80328d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80328d8:	4622      	mov	r2, r4
 80328da:	f7fc fd53 	bl	802f384 <_sungetc_r>
 80328de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80328e0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80328e4:	fa5f fb8b 	uxtb.w	fp, fp
 80328e8:	f1bb 0f02 	cmp.w	fp, #2
 80328ec:	d1f0      	bne.n	80328d0 <__ssvfscanf_r+0x116c>
 80328ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80328f0:	f1a8 0803 	sub.w	r8, r8, #3
 80328f4:	fa5f f888 	uxtb.w	r8, r8
 80328f8:	eba3 0308 	sub.w	r3, r3, r8
 80328fc:	eba9 0908 	sub.w	r9, r9, r8
 8032900:	633b      	str	r3, [r7, #48]	@ 0x30
 8032902:	05f3      	lsls	r3, r6, #23
 8032904:	d52d      	bpl.n	8032962 <__ssvfscanf_r+0x11fe>
 8032906:	0570      	lsls	r0, r6, #21
 8032908:	d50e      	bpl.n	8032928 <__ssvfscanf_r+0x11c4>
 803290a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 803290e:	45a9      	cmp	r9, r5
 8032910:	f67f a81e 	bls.w	8031950 <__ssvfscanf_r+0x1ec>
 8032914:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8032918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 803291a:	4622      	mov	r2, r4
 803291c:	f7fc fd32 	bl	802f384 <_sungetc_r>
 8032920:	e7f5      	b.n	803290e <__ssvfscanf_r+0x11aa>
 8032922:	46c3      	mov	fp, r8
 8032924:	464b      	mov	r3, r9
 8032926:	e7db      	b.n	80328e0 <__ssvfscanf_r+0x117c>
 8032928:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 803292c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 803292e:	2965      	cmp	r1, #101	@ 0x65
 8032930:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 8032934:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8032938:	d00c      	beq.n	8032954 <__ssvfscanf_r+0x11f0>
 803293a:	2945      	cmp	r1, #69	@ 0x45
 803293c:	d00a      	beq.n	8032954 <__ssvfscanf_r+0x11f0>
 803293e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032940:	4622      	mov	r2, r4
 8032942:	f7fc fd1f 	bl	802f384 <_sungetc_r>
 8032946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8032948:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 803294c:	f1a9 0802 	sub.w	r8, r9, #2
 8032950:	f1a3 0b02 	sub.w	fp, r3, #2
 8032954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032956:	4622      	mov	r2, r4
 8032958:	f7fc fd14 	bl	802f384 <_sungetc_r>
 803295c:	46c1      	mov	r9, r8
 803295e:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8032962:	f016 0210 	ands.w	r2, r6, #16
 8032966:	f47e af18 	bne.w	803179a <__ssvfscanf_r+0x36>
 803296a:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 803296e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8032972:	f889 2000 	strb.w	r2, [r9]
 8032976:	d119      	bne.n	80329ac <__ssvfscanf_r+0x1248>
 8032978:	693b      	ldr	r3, [r7, #16]
 803297a:	4553      	cmp	r3, sl
 803297c:	eba3 020a 	sub.w	r2, r3, sl
 8032980:	d121      	bne.n	80329c6 <__ssvfscanf_r+0x1262>
 8032982:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8032986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8032988:	2200      	movs	r2, #0
 803298a:	f001 fd41 	bl	8034410 <_strtod_r>
 803298e:	07f1      	lsls	r1, r6, #31
 8032990:	ec59 8b10 	vmov	r8, r9, d0
 8032994:	f105 0a04 	add.w	sl, r5, #4
 8032998:	d520      	bpl.n	80329dc <__ssvfscanf_r+0x1278>
 803299a:	682b      	ldr	r3, [r5, #0]
 803299c:	ed83 0b00 	vstr	d0, [r3]
 80329a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80329a2:	3301      	adds	r3, #1
 80329a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80329a6:	4655      	mov	r5, sl
 80329a8:	f7fe bef7 	b.w	803179a <__ssvfscanf_r+0x36>
 80329ac:	68fb      	ldr	r3, [r7, #12]
 80329ae:	2b00      	cmp	r3, #0
 80329b0:	d0e7      	beq.n	8032982 <__ssvfscanf_r+0x121e>
 80329b2:	68b9      	ldr	r1, [r7, #8]
 80329b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80329b6:	230a      	movs	r3, #10
 80329b8:	3101      	adds	r1, #1
 80329ba:	f7f8 fe9d 	bl	802b6f8 <_strtol_r>
 80329be:	68fb      	ldr	r3, [r7, #12]
 80329c0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80329c4:	1ac2      	subs	r2, r0, r3
 80329c6:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 80329ca:	4599      	cmp	r9, r3
 80329cc:	bf28      	it	cs
 80329ce:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 80329d2:	491b      	ldr	r1, [pc, #108]	@ (8032a40 <__ssvfscanf_r+0x12dc>)
 80329d4:	4648      	mov	r0, r9
 80329d6:	f7f8 ff49 	bl	802b86c <sprintf>
 80329da:	e7d2      	b.n	8032982 <__ssvfscanf_r+0x121e>
 80329dc:	07b2      	lsls	r2, r6, #30
 80329de:	682d      	ldr	r5, [r5, #0]
 80329e0:	d502      	bpl.n	80329e8 <__ssvfscanf_r+0x1284>
 80329e2:	ed85 0b00 	vstr	d0, [r5]
 80329e6:	e7db      	b.n	80329a0 <__ssvfscanf_r+0x123c>
 80329e8:	4642      	mov	r2, r8
 80329ea:	464b      	mov	r3, r9
 80329ec:	4640      	mov	r0, r8
 80329ee:	4649      	mov	r1, r9
 80329f0:	f7de f8b4 	bl	8010b5c <__aeabi_dcmpun>
 80329f4:	b128      	cbz	r0, 8032a02 <__ssvfscanf_r+0x129e>
 80329f6:	4813      	ldr	r0, [pc, #76]	@ (8032a44 <__ssvfscanf_r+0x12e0>)
 80329f8:	f002 f8f6 	bl	8034be8 <nanf>
 80329fc:	ed85 0a00 	vstr	s0, [r5]
 8032a00:	e7ce      	b.n	80329a0 <__ssvfscanf_r+0x123c>
 8032a02:	4640      	mov	r0, r8
 8032a04:	4649      	mov	r1, r9
 8032a06:	f7de f907 	bl	8010c18 <__aeabi_d2f>
 8032a0a:	6028      	str	r0, [r5, #0]
 8032a0c:	e7c8      	b.n	80329a0 <__ssvfscanf_r+0x123c>
 8032a0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032a12:	6818      	ldr	r0, [r3, #0]
 8032a14:	f7fb fd3a 	bl	802e48c <free>
 8032a18:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8032a1c:	3401      	adds	r4, #1
 8032a1e:	601e      	str	r6, [r3, #0]
 8032a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8032a22:	681d      	ldr	r5, [r3, #0]
 8032a24:	88db      	ldrh	r3, [r3, #6]
 8032a26:	42a3      	cmp	r3, r4
 8032a28:	dcf1      	bgt.n	8032a0e <__ssvfscanf_r+0x12aa>
 8032a2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8032a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8032a30:	f7ff b85c 	b.w	8031aec <__ssvfscanf_r+0x388>
 8032a34:	2400      	movs	r4, #0
 8032a36:	4626      	mov	r6, r4
 8032a38:	e7f2      	b.n	8032a20 <__ssvfscanf_r+0x12bc>
 8032a3a:	f04f 0a00 	mov.w	sl, #0
 8032a3e:	e6bb      	b.n	80327b8 <__ssvfscanf_r+0x1054>
 8032a40:	0803b2aa 	.word	0x0803b2aa
 8032a44:	0803ad12 	.word	0x0803ad12

08032a48 <_putc_r>:
 8032a48:	b570      	push	{r4, r5, r6, lr}
 8032a4a:	460d      	mov	r5, r1
 8032a4c:	4614      	mov	r4, r2
 8032a4e:	4606      	mov	r6, r0
 8032a50:	b118      	cbz	r0, 8032a5a <_putc_r+0x12>
 8032a52:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8032a54:	b90b      	cbnz	r3, 8032a5a <_putc_r+0x12>
 8032a56:	f7f9 f825 	bl	802baa4 <__sinit>
 8032a5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8032a5c:	07d8      	lsls	r0, r3, #31
 8032a5e:	d405      	bmi.n	8032a6c <_putc_r+0x24>
 8032a60:	89a3      	ldrh	r3, [r4, #12]
 8032a62:	0599      	lsls	r1, r3, #22
 8032a64:	d402      	bmi.n	8032a6c <_putc_r+0x24>
 8032a66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032a68:	f7fa fcfb 	bl	802d462 <__retarget_lock_acquire_recursive>
 8032a6c:	68a3      	ldr	r3, [r4, #8]
 8032a6e:	3b01      	subs	r3, #1
 8032a70:	2b00      	cmp	r3, #0
 8032a72:	60a3      	str	r3, [r4, #8]
 8032a74:	da05      	bge.n	8032a82 <_putc_r+0x3a>
 8032a76:	69a2      	ldr	r2, [r4, #24]
 8032a78:	4293      	cmp	r3, r2
 8032a7a:	db12      	blt.n	8032aa2 <_putc_r+0x5a>
 8032a7c:	b2eb      	uxtb	r3, r5
 8032a7e:	2b0a      	cmp	r3, #10
 8032a80:	d00f      	beq.n	8032aa2 <_putc_r+0x5a>
 8032a82:	6823      	ldr	r3, [r4, #0]
 8032a84:	1c5a      	adds	r2, r3, #1
 8032a86:	6022      	str	r2, [r4, #0]
 8032a88:	701d      	strb	r5, [r3, #0]
 8032a8a:	b2ed      	uxtb	r5, r5
 8032a8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8032a8e:	07da      	lsls	r2, r3, #31
 8032a90:	d405      	bmi.n	8032a9e <_putc_r+0x56>
 8032a92:	89a3      	ldrh	r3, [r4, #12]
 8032a94:	059b      	lsls	r3, r3, #22
 8032a96:	d402      	bmi.n	8032a9e <_putc_r+0x56>
 8032a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8032a9a:	f7fa fce4 	bl	802d466 <__retarget_lock_release_recursive>
 8032a9e:	4628      	mov	r0, r5
 8032aa0:	bd70      	pop	{r4, r5, r6, pc}
 8032aa2:	4629      	mov	r1, r5
 8032aa4:	4622      	mov	r2, r4
 8032aa6:	4630      	mov	r0, r6
 8032aa8:	f001 fd79 	bl	803459e <__swbuf_r>
 8032aac:	4605      	mov	r5, r0
 8032aae:	e7ed      	b.n	8032a8c <_putc_r+0x44>

08032ab0 <__malloc_lock>:
 8032ab0:	4801      	ldr	r0, [pc, #4]	@ (8032ab8 <__malloc_lock+0x8>)
 8032ab2:	f7fa bcd6 	b.w	802d462 <__retarget_lock_acquire_recursive>
 8032ab6:	bf00      	nop
 8032ab8:	200198ea 	.word	0x200198ea

08032abc <__malloc_unlock>:
 8032abc:	4801      	ldr	r0, [pc, #4]	@ (8032ac4 <__malloc_unlock+0x8>)
 8032abe:	f7fa bcd2 	b.w	802d466 <__retarget_lock_release_recursive>
 8032ac2:	bf00      	nop
 8032ac4:	200198ea 	.word	0x200198ea

08032ac8 <_Balloc>:
 8032ac8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8032aca:	b570      	push	{r4, r5, r6, lr}
 8032acc:	4605      	mov	r5, r0
 8032ace:	460c      	mov	r4, r1
 8032ad0:	b17b      	cbz	r3, 8032af2 <_Balloc+0x2a>
 8032ad2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8032ad4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8032ad8:	b9a0      	cbnz	r0, 8032b04 <_Balloc+0x3c>
 8032ada:	2101      	movs	r1, #1
 8032adc:	fa01 f604 	lsl.w	r6, r1, r4
 8032ae0:	1d72      	adds	r2, r6, #5
 8032ae2:	0092      	lsls	r2, r2, #2
 8032ae4:	4628      	mov	r0, r5
 8032ae6:	f002 f885 	bl	8034bf4 <_calloc_r>
 8032aea:	b148      	cbz	r0, 8032b00 <_Balloc+0x38>
 8032aec:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8032af0:	e00b      	b.n	8032b0a <_Balloc+0x42>
 8032af2:	2221      	movs	r2, #33	@ 0x21
 8032af4:	2104      	movs	r1, #4
 8032af6:	f002 f87d 	bl	8034bf4 <_calloc_r>
 8032afa:	6468      	str	r0, [r5, #68]	@ 0x44
 8032afc:	2800      	cmp	r0, #0
 8032afe:	d1e8      	bne.n	8032ad2 <_Balloc+0xa>
 8032b00:	2000      	movs	r0, #0
 8032b02:	bd70      	pop	{r4, r5, r6, pc}
 8032b04:	6802      	ldr	r2, [r0, #0]
 8032b06:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8032b0a:	2300      	movs	r3, #0
 8032b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8032b10:	e7f7      	b.n	8032b02 <_Balloc+0x3a>

08032b12 <_Bfree>:
 8032b12:	b131      	cbz	r1, 8032b22 <_Bfree+0x10>
 8032b14:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8032b16:	684a      	ldr	r2, [r1, #4]
 8032b18:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8032b1c:	6008      	str	r0, [r1, #0]
 8032b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8032b22:	4770      	bx	lr

08032b24 <__multadd>:
 8032b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032b28:	690d      	ldr	r5, [r1, #16]
 8032b2a:	4607      	mov	r7, r0
 8032b2c:	460c      	mov	r4, r1
 8032b2e:	461e      	mov	r6, r3
 8032b30:	f101 0c14 	add.w	ip, r1, #20
 8032b34:	2000      	movs	r0, #0
 8032b36:	f8dc 3000 	ldr.w	r3, [ip]
 8032b3a:	b299      	uxth	r1, r3
 8032b3c:	fb02 6101 	mla	r1, r2, r1, r6
 8032b40:	0c1e      	lsrs	r6, r3, #16
 8032b42:	0c0b      	lsrs	r3, r1, #16
 8032b44:	fb02 3306 	mla	r3, r2, r6, r3
 8032b48:	b289      	uxth	r1, r1
 8032b4a:	3001      	adds	r0, #1
 8032b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8032b50:	4285      	cmp	r5, r0
 8032b52:	f84c 1b04 	str.w	r1, [ip], #4
 8032b56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8032b5a:	dcec      	bgt.n	8032b36 <__multadd+0x12>
 8032b5c:	b30e      	cbz	r6, 8032ba2 <__multadd+0x7e>
 8032b5e:	68a3      	ldr	r3, [r4, #8]
 8032b60:	42ab      	cmp	r3, r5
 8032b62:	dc19      	bgt.n	8032b98 <__multadd+0x74>
 8032b64:	6861      	ldr	r1, [r4, #4]
 8032b66:	4638      	mov	r0, r7
 8032b68:	3101      	adds	r1, #1
 8032b6a:	f7ff ffad 	bl	8032ac8 <_Balloc>
 8032b6e:	4680      	mov	r8, r0
 8032b70:	b928      	cbnz	r0, 8032b7e <__multadd+0x5a>
 8032b72:	4602      	mov	r2, r0
 8032b74:	4b0c      	ldr	r3, [pc, #48]	@ (8032ba8 <__multadd+0x84>)
 8032b76:	480d      	ldr	r0, [pc, #52]	@ (8032bac <__multadd+0x88>)
 8032b78:	21ba      	movs	r1, #186	@ 0xba
 8032b7a:	f7f6 fce7 	bl	802954c <__assert_func>
 8032b7e:	6922      	ldr	r2, [r4, #16]
 8032b80:	3202      	adds	r2, #2
 8032b82:	f104 010c 	add.w	r1, r4, #12
 8032b86:	0092      	lsls	r2, r2, #2
 8032b88:	300c      	adds	r0, #12
 8032b8a:	f7fa fc6d 	bl	802d468 <memcpy>
 8032b8e:	4621      	mov	r1, r4
 8032b90:	4638      	mov	r0, r7
 8032b92:	f7ff ffbe 	bl	8032b12 <_Bfree>
 8032b96:	4644      	mov	r4, r8
 8032b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8032b9c:	3501      	adds	r5, #1
 8032b9e:	615e      	str	r6, [r3, #20]
 8032ba0:	6125      	str	r5, [r4, #16]
 8032ba2:	4620      	mov	r0, r4
 8032ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032ba8:	0803b1de 	.word	0x0803b1de
 8032bac:	0803b2d2 	.word	0x0803b2d2

08032bb0 <__s2b>:
 8032bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8032bb4:	460c      	mov	r4, r1
 8032bb6:	4615      	mov	r5, r2
 8032bb8:	461f      	mov	r7, r3
 8032bba:	2209      	movs	r2, #9
 8032bbc:	3308      	adds	r3, #8
 8032bbe:	4606      	mov	r6, r0
 8032bc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8032bc4:	2100      	movs	r1, #0
 8032bc6:	2201      	movs	r2, #1
 8032bc8:	429a      	cmp	r2, r3
 8032bca:	db09      	blt.n	8032be0 <__s2b+0x30>
 8032bcc:	4630      	mov	r0, r6
 8032bce:	f7ff ff7b 	bl	8032ac8 <_Balloc>
 8032bd2:	b940      	cbnz	r0, 8032be6 <__s2b+0x36>
 8032bd4:	4602      	mov	r2, r0
 8032bd6:	4b19      	ldr	r3, [pc, #100]	@ (8032c3c <__s2b+0x8c>)
 8032bd8:	4819      	ldr	r0, [pc, #100]	@ (8032c40 <__s2b+0x90>)
 8032bda:	21d3      	movs	r1, #211	@ 0xd3
 8032bdc:	f7f6 fcb6 	bl	802954c <__assert_func>
 8032be0:	0052      	lsls	r2, r2, #1
 8032be2:	3101      	adds	r1, #1
 8032be4:	e7f0      	b.n	8032bc8 <__s2b+0x18>
 8032be6:	9b08      	ldr	r3, [sp, #32]
 8032be8:	6143      	str	r3, [r0, #20]
 8032bea:	2d09      	cmp	r5, #9
 8032bec:	f04f 0301 	mov.w	r3, #1
 8032bf0:	6103      	str	r3, [r0, #16]
 8032bf2:	dd16      	ble.n	8032c22 <__s2b+0x72>
 8032bf4:	f104 0909 	add.w	r9, r4, #9
 8032bf8:	46c8      	mov	r8, r9
 8032bfa:	442c      	add	r4, r5
 8032bfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8032c00:	4601      	mov	r1, r0
 8032c02:	3b30      	subs	r3, #48	@ 0x30
 8032c04:	220a      	movs	r2, #10
 8032c06:	4630      	mov	r0, r6
 8032c08:	f7ff ff8c 	bl	8032b24 <__multadd>
 8032c0c:	45a0      	cmp	r8, r4
 8032c0e:	d1f5      	bne.n	8032bfc <__s2b+0x4c>
 8032c10:	f1a5 0408 	sub.w	r4, r5, #8
 8032c14:	444c      	add	r4, r9
 8032c16:	1b2d      	subs	r5, r5, r4
 8032c18:	1963      	adds	r3, r4, r5
 8032c1a:	42bb      	cmp	r3, r7
 8032c1c:	db04      	blt.n	8032c28 <__s2b+0x78>
 8032c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8032c22:	340a      	adds	r4, #10
 8032c24:	2509      	movs	r5, #9
 8032c26:	e7f6      	b.n	8032c16 <__s2b+0x66>
 8032c28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8032c2c:	4601      	mov	r1, r0
 8032c2e:	3b30      	subs	r3, #48	@ 0x30
 8032c30:	220a      	movs	r2, #10
 8032c32:	4630      	mov	r0, r6
 8032c34:	f7ff ff76 	bl	8032b24 <__multadd>
 8032c38:	e7ee      	b.n	8032c18 <__s2b+0x68>
 8032c3a:	bf00      	nop
 8032c3c:	0803b1de 	.word	0x0803b1de
 8032c40:	0803b2d2 	.word	0x0803b2d2

08032c44 <__hi0bits>:
 8032c44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8032c48:	4603      	mov	r3, r0
 8032c4a:	bf36      	itet	cc
 8032c4c:	0403      	lslcc	r3, r0, #16
 8032c4e:	2000      	movcs	r0, #0
 8032c50:	2010      	movcc	r0, #16
 8032c52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8032c56:	bf3c      	itt	cc
 8032c58:	021b      	lslcc	r3, r3, #8
 8032c5a:	3008      	addcc	r0, #8
 8032c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8032c60:	bf3c      	itt	cc
 8032c62:	011b      	lslcc	r3, r3, #4
 8032c64:	3004      	addcc	r0, #4
 8032c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8032c6a:	bf3c      	itt	cc
 8032c6c:	009b      	lslcc	r3, r3, #2
 8032c6e:	3002      	addcc	r0, #2
 8032c70:	2b00      	cmp	r3, #0
 8032c72:	db05      	blt.n	8032c80 <__hi0bits+0x3c>
 8032c74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8032c78:	f100 0001 	add.w	r0, r0, #1
 8032c7c:	bf08      	it	eq
 8032c7e:	2020      	moveq	r0, #32
 8032c80:	4770      	bx	lr

08032c82 <__lo0bits>:
 8032c82:	6803      	ldr	r3, [r0, #0]
 8032c84:	4602      	mov	r2, r0
 8032c86:	f013 0007 	ands.w	r0, r3, #7
 8032c8a:	d00b      	beq.n	8032ca4 <__lo0bits+0x22>
 8032c8c:	07d9      	lsls	r1, r3, #31
 8032c8e:	d421      	bmi.n	8032cd4 <__lo0bits+0x52>
 8032c90:	0798      	lsls	r0, r3, #30
 8032c92:	bf49      	itett	mi
 8032c94:	085b      	lsrmi	r3, r3, #1
 8032c96:	089b      	lsrpl	r3, r3, #2
 8032c98:	2001      	movmi	r0, #1
 8032c9a:	6013      	strmi	r3, [r2, #0]
 8032c9c:	bf5c      	itt	pl
 8032c9e:	6013      	strpl	r3, [r2, #0]
 8032ca0:	2002      	movpl	r0, #2
 8032ca2:	4770      	bx	lr
 8032ca4:	b299      	uxth	r1, r3
 8032ca6:	b909      	cbnz	r1, 8032cac <__lo0bits+0x2a>
 8032ca8:	0c1b      	lsrs	r3, r3, #16
 8032caa:	2010      	movs	r0, #16
 8032cac:	b2d9      	uxtb	r1, r3
 8032cae:	b909      	cbnz	r1, 8032cb4 <__lo0bits+0x32>
 8032cb0:	3008      	adds	r0, #8
 8032cb2:	0a1b      	lsrs	r3, r3, #8
 8032cb4:	0719      	lsls	r1, r3, #28
 8032cb6:	bf04      	itt	eq
 8032cb8:	091b      	lsreq	r3, r3, #4
 8032cba:	3004      	addeq	r0, #4
 8032cbc:	0799      	lsls	r1, r3, #30
 8032cbe:	bf04      	itt	eq
 8032cc0:	089b      	lsreq	r3, r3, #2
 8032cc2:	3002      	addeq	r0, #2
 8032cc4:	07d9      	lsls	r1, r3, #31
 8032cc6:	d403      	bmi.n	8032cd0 <__lo0bits+0x4e>
 8032cc8:	085b      	lsrs	r3, r3, #1
 8032cca:	f100 0001 	add.w	r0, r0, #1
 8032cce:	d003      	beq.n	8032cd8 <__lo0bits+0x56>
 8032cd0:	6013      	str	r3, [r2, #0]
 8032cd2:	4770      	bx	lr
 8032cd4:	2000      	movs	r0, #0
 8032cd6:	4770      	bx	lr
 8032cd8:	2020      	movs	r0, #32
 8032cda:	4770      	bx	lr

08032cdc <__i2b>:
 8032cdc:	b510      	push	{r4, lr}
 8032cde:	460c      	mov	r4, r1
 8032ce0:	2101      	movs	r1, #1
 8032ce2:	f7ff fef1 	bl	8032ac8 <_Balloc>
 8032ce6:	4602      	mov	r2, r0
 8032ce8:	b928      	cbnz	r0, 8032cf6 <__i2b+0x1a>
 8032cea:	4b05      	ldr	r3, [pc, #20]	@ (8032d00 <__i2b+0x24>)
 8032cec:	4805      	ldr	r0, [pc, #20]	@ (8032d04 <__i2b+0x28>)
 8032cee:	f240 1145 	movw	r1, #325	@ 0x145
 8032cf2:	f7f6 fc2b 	bl	802954c <__assert_func>
 8032cf6:	2301      	movs	r3, #1
 8032cf8:	6144      	str	r4, [r0, #20]
 8032cfa:	6103      	str	r3, [r0, #16]
 8032cfc:	bd10      	pop	{r4, pc}
 8032cfe:	bf00      	nop
 8032d00:	0803b1de 	.word	0x0803b1de
 8032d04:	0803b2d2 	.word	0x0803b2d2

08032d08 <__multiply>:
 8032d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032d0c:	4614      	mov	r4, r2
 8032d0e:	690a      	ldr	r2, [r1, #16]
 8032d10:	6923      	ldr	r3, [r4, #16]
 8032d12:	429a      	cmp	r2, r3
 8032d14:	bfa8      	it	ge
 8032d16:	4623      	movge	r3, r4
 8032d18:	460f      	mov	r7, r1
 8032d1a:	bfa4      	itt	ge
 8032d1c:	460c      	movge	r4, r1
 8032d1e:	461f      	movge	r7, r3
 8032d20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8032d24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8032d28:	68a3      	ldr	r3, [r4, #8]
 8032d2a:	6861      	ldr	r1, [r4, #4]
 8032d2c:	eb0a 0609 	add.w	r6, sl, r9
 8032d30:	42b3      	cmp	r3, r6
 8032d32:	b085      	sub	sp, #20
 8032d34:	bfb8      	it	lt
 8032d36:	3101      	addlt	r1, #1
 8032d38:	f7ff fec6 	bl	8032ac8 <_Balloc>
 8032d3c:	b930      	cbnz	r0, 8032d4c <__multiply+0x44>
 8032d3e:	4602      	mov	r2, r0
 8032d40:	4b44      	ldr	r3, [pc, #272]	@ (8032e54 <__multiply+0x14c>)
 8032d42:	4845      	ldr	r0, [pc, #276]	@ (8032e58 <__multiply+0x150>)
 8032d44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8032d48:	f7f6 fc00 	bl	802954c <__assert_func>
 8032d4c:	f100 0514 	add.w	r5, r0, #20
 8032d50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8032d54:	462b      	mov	r3, r5
 8032d56:	2200      	movs	r2, #0
 8032d58:	4543      	cmp	r3, r8
 8032d5a:	d321      	bcc.n	8032da0 <__multiply+0x98>
 8032d5c:	f107 0114 	add.w	r1, r7, #20
 8032d60:	f104 0214 	add.w	r2, r4, #20
 8032d64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8032d68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8032d6c:	9302      	str	r3, [sp, #8]
 8032d6e:	1b13      	subs	r3, r2, r4
 8032d70:	3b15      	subs	r3, #21
 8032d72:	f023 0303 	bic.w	r3, r3, #3
 8032d76:	3304      	adds	r3, #4
 8032d78:	f104 0715 	add.w	r7, r4, #21
 8032d7c:	42ba      	cmp	r2, r7
 8032d7e:	bf38      	it	cc
 8032d80:	2304      	movcc	r3, #4
 8032d82:	9301      	str	r3, [sp, #4]
 8032d84:	9b02      	ldr	r3, [sp, #8]
 8032d86:	9103      	str	r1, [sp, #12]
 8032d88:	428b      	cmp	r3, r1
 8032d8a:	d80c      	bhi.n	8032da6 <__multiply+0x9e>
 8032d8c:	2e00      	cmp	r6, #0
 8032d8e:	dd03      	ble.n	8032d98 <__multiply+0x90>
 8032d90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8032d94:	2b00      	cmp	r3, #0
 8032d96:	d05b      	beq.n	8032e50 <__multiply+0x148>
 8032d98:	6106      	str	r6, [r0, #16]
 8032d9a:	b005      	add	sp, #20
 8032d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032da0:	f843 2b04 	str.w	r2, [r3], #4
 8032da4:	e7d8      	b.n	8032d58 <__multiply+0x50>
 8032da6:	f8b1 a000 	ldrh.w	sl, [r1]
 8032daa:	f1ba 0f00 	cmp.w	sl, #0
 8032dae:	d024      	beq.n	8032dfa <__multiply+0xf2>
 8032db0:	f104 0e14 	add.w	lr, r4, #20
 8032db4:	46a9      	mov	r9, r5
 8032db6:	f04f 0c00 	mov.w	ip, #0
 8032dba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8032dbe:	f8d9 3000 	ldr.w	r3, [r9]
 8032dc2:	fa1f fb87 	uxth.w	fp, r7
 8032dc6:	b29b      	uxth	r3, r3
 8032dc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8032dcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8032dd0:	f8d9 7000 	ldr.w	r7, [r9]
 8032dd4:	4463      	add	r3, ip
 8032dd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8032dda:	fb0a c70b 	mla	r7, sl, fp, ip
 8032dde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8032de2:	b29b      	uxth	r3, r3
 8032de4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8032de8:	4572      	cmp	r2, lr
 8032dea:	f849 3b04 	str.w	r3, [r9], #4
 8032dee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8032df2:	d8e2      	bhi.n	8032dba <__multiply+0xb2>
 8032df4:	9b01      	ldr	r3, [sp, #4]
 8032df6:	f845 c003 	str.w	ip, [r5, r3]
 8032dfa:	9b03      	ldr	r3, [sp, #12]
 8032dfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8032e00:	3104      	adds	r1, #4
 8032e02:	f1b9 0f00 	cmp.w	r9, #0
 8032e06:	d021      	beq.n	8032e4c <__multiply+0x144>
 8032e08:	682b      	ldr	r3, [r5, #0]
 8032e0a:	f104 0c14 	add.w	ip, r4, #20
 8032e0e:	46ae      	mov	lr, r5
 8032e10:	f04f 0a00 	mov.w	sl, #0
 8032e14:	f8bc b000 	ldrh.w	fp, [ip]
 8032e18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8032e1c:	fb09 770b 	mla	r7, r9, fp, r7
 8032e20:	4457      	add	r7, sl
 8032e22:	b29b      	uxth	r3, r3
 8032e24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8032e28:	f84e 3b04 	str.w	r3, [lr], #4
 8032e2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8032e30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8032e34:	f8be 3000 	ldrh.w	r3, [lr]
 8032e38:	fb09 330a 	mla	r3, r9, sl, r3
 8032e3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8032e40:	4562      	cmp	r2, ip
 8032e42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8032e46:	d8e5      	bhi.n	8032e14 <__multiply+0x10c>
 8032e48:	9f01      	ldr	r7, [sp, #4]
 8032e4a:	51eb      	str	r3, [r5, r7]
 8032e4c:	3504      	adds	r5, #4
 8032e4e:	e799      	b.n	8032d84 <__multiply+0x7c>
 8032e50:	3e01      	subs	r6, #1
 8032e52:	e79b      	b.n	8032d8c <__multiply+0x84>
 8032e54:	0803b1de 	.word	0x0803b1de
 8032e58:	0803b2d2 	.word	0x0803b2d2

08032e5c <__pow5mult>:
 8032e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8032e60:	4615      	mov	r5, r2
 8032e62:	f012 0203 	ands.w	r2, r2, #3
 8032e66:	4607      	mov	r7, r0
 8032e68:	460e      	mov	r6, r1
 8032e6a:	d007      	beq.n	8032e7c <__pow5mult+0x20>
 8032e6c:	4c1a      	ldr	r4, [pc, #104]	@ (8032ed8 <__pow5mult+0x7c>)
 8032e6e:	3a01      	subs	r2, #1
 8032e70:	2300      	movs	r3, #0
 8032e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8032e76:	f7ff fe55 	bl	8032b24 <__multadd>
 8032e7a:	4606      	mov	r6, r0
 8032e7c:	10ad      	asrs	r5, r5, #2
 8032e7e:	d027      	beq.n	8032ed0 <__pow5mult+0x74>
 8032e80:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8032e82:	b944      	cbnz	r4, 8032e96 <__pow5mult+0x3a>
 8032e84:	f240 2171 	movw	r1, #625	@ 0x271
 8032e88:	4638      	mov	r0, r7
 8032e8a:	f7ff ff27 	bl	8032cdc <__i2b>
 8032e8e:	2300      	movs	r3, #0
 8032e90:	6438      	str	r0, [r7, #64]	@ 0x40
 8032e92:	4604      	mov	r4, r0
 8032e94:	6003      	str	r3, [r0, #0]
 8032e96:	f04f 0900 	mov.w	r9, #0
 8032e9a:	07eb      	lsls	r3, r5, #31
 8032e9c:	d50a      	bpl.n	8032eb4 <__pow5mult+0x58>
 8032e9e:	4631      	mov	r1, r6
 8032ea0:	4622      	mov	r2, r4
 8032ea2:	4638      	mov	r0, r7
 8032ea4:	f7ff ff30 	bl	8032d08 <__multiply>
 8032ea8:	4631      	mov	r1, r6
 8032eaa:	4680      	mov	r8, r0
 8032eac:	4638      	mov	r0, r7
 8032eae:	f7ff fe30 	bl	8032b12 <_Bfree>
 8032eb2:	4646      	mov	r6, r8
 8032eb4:	106d      	asrs	r5, r5, #1
 8032eb6:	d00b      	beq.n	8032ed0 <__pow5mult+0x74>
 8032eb8:	6820      	ldr	r0, [r4, #0]
 8032eba:	b938      	cbnz	r0, 8032ecc <__pow5mult+0x70>
 8032ebc:	4622      	mov	r2, r4
 8032ebe:	4621      	mov	r1, r4
 8032ec0:	4638      	mov	r0, r7
 8032ec2:	f7ff ff21 	bl	8032d08 <__multiply>
 8032ec6:	6020      	str	r0, [r4, #0]
 8032ec8:	f8c0 9000 	str.w	r9, [r0]
 8032ecc:	4604      	mov	r4, r0
 8032ece:	e7e4      	b.n	8032e9a <__pow5mult+0x3e>
 8032ed0:	4630      	mov	r0, r6
 8032ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8032ed6:	bf00      	nop
 8032ed8:	0803b32c 	.word	0x0803b32c

08032edc <__lshift>:
 8032edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8032ee0:	460c      	mov	r4, r1
 8032ee2:	6849      	ldr	r1, [r1, #4]
 8032ee4:	6923      	ldr	r3, [r4, #16]
 8032ee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8032eea:	68a3      	ldr	r3, [r4, #8]
 8032eec:	4607      	mov	r7, r0
 8032eee:	4691      	mov	r9, r2
 8032ef0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8032ef4:	f108 0601 	add.w	r6, r8, #1
 8032ef8:	42b3      	cmp	r3, r6
 8032efa:	db0b      	blt.n	8032f14 <__lshift+0x38>
 8032efc:	4638      	mov	r0, r7
 8032efe:	f7ff fde3 	bl	8032ac8 <_Balloc>
 8032f02:	4605      	mov	r5, r0
 8032f04:	b948      	cbnz	r0, 8032f1a <__lshift+0x3e>
 8032f06:	4602      	mov	r2, r0
 8032f08:	4b28      	ldr	r3, [pc, #160]	@ (8032fac <__lshift+0xd0>)
 8032f0a:	4829      	ldr	r0, [pc, #164]	@ (8032fb0 <__lshift+0xd4>)
 8032f0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8032f10:	f7f6 fb1c 	bl	802954c <__assert_func>
 8032f14:	3101      	adds	r1, #1
 8032f16:	005b      	lsls	r3, r3, #1
 8032f18:	e7ee      	b.n	8032ef8 <__lshift+0x1c>
 8032f1a:	2300      	movs	r3, #0
 8032f1c:	f100 0114 	add.w	r1, r0, #20
 8032f20:	f100 0210 	add.w	r2, r0, #16
 8032f24:	4618      	mov	r0, r3
 8032f26:	4553      	cmp	r3, sl
 8032f28:	db33      	blt.n	8032f92 <__lshift+0xb6>
 8032f2a:	6920      	ldr	r0, [r4, #16]
 8032f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8032f30:	f104 0314 	add.w	r3, r4, #20
 8032f34:	f019 091f 	ands.w	r9, r9, #31
 8032f38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8032f3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8032f40:	d02b      	beq.n	8032f9a <__lshift+0xbe>
 8032f42:	f1c9 0e20 	rsb	lr, r9, #32
 8032f46:	468a      	mov	sl, r1
 8032f48:	2200      	movs	r2, #0
 8032f4a:	6818      	ldr	r0, [r3, #0]
 8032f4c:	fa00 f009 	lsl.w	r0, r0, r9
 8032f50:	4310      	orrs	r0, r2
 8032f52:	f84a 0b04 	str.w	r0, [sl], #4
 8032f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8032f5a:	459c      	cmp	ip, r3
 8032f5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8032f60:	d8f3      	bhi.n	8032f4a <__lshift+0x6e>
 8032f62:	ebac 0304 	sub.w	r3, ip, r4
 8032f66:	3b15      	subs	r3, #21
 8032f68:	f023 0303 	bic.w	r3, r3, #3
 8032f6c:	3304      	adds	r3, #4
 8032f6e:	f104 0015 	add.w	r0, r4, #21
 8032f72:	4584      	cmp	ip, r0
 8032f74:	bf38      	it	cc
 8032f76:	2304      	movcc	r3, #4
 8032f78:	50ca      	str	r2, [r1, r3]
 8032f7a:	b10a      	cbz	r2, 8032f80 <__lshift+0xa4>
 8032f7c:	f108 0602 	add.w	r6, r8, #2
 8032f80:	3e01      	subs	r6, #1
 8032f82:	4638      	mov	r0, r7
 8032f84:	612e      	str	r6, [r5, #16]
 8032f86:	4621      	mov	r1, r4
 8032f88:	f7ff fdc3 	bl	8032b12 <_Bfree>
 8032f8c:	4628      	mov	r0, r5
 8032f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8032f92:	f842 0f04 	str.w	r0, [r2, #4]!
 8032f96:	3301      	adds	r3, #1
 8032f98:	e7c5      	b.n	8032f26 <__lshift+0x4a>
 8032f9a:	3904      	subs	r1, #4
 8032f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8032fa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8032fa4:	459c      	cmp	ip, r3
 8032fa6:	d8f9      	bhi.n	8032f9c <__lshift+0xc0>
 8032fa8:	e7ea      	b.n	8032f80 <__lshift+0xa4>
 8032faa:	bf00      	nop
 8032fac:	0803b1de 	.word	0x0803b1de
 8032fb0:	0803b2d2 	.word	0x0803b2d2

08032fb4 <__mcmp>:
 8032fb4:	690a      	ldr	r2, [r1, #16]
 8032fb6:	4603      	mov	r3, r0
 8032fb8:	6900      	ldr	r0, [r0, #16]
 8032fba:	1a80      	subs	r0, r0, r2
 8032fbc:	b530      	push	{r4, r5, lr}
 8032fbe:	d10e      	bne.n	8032fde <__mcmp+0x2a>
 8032fc0:	3314      	adds	r3, #20
 8032fc2:	3114      	adds	r1, #20
 8032fc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8032fc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8032fcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8032fd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8032fd4:	4295      	cmp	r5, r2
 8032fd6:	d003      	beq.n	8032fe0 <__mcmp+0x2c>
 8032fd8:	d205      	bcs.n	8032fe6 <__mcmp+0x32>
 8032fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8032fde:	bd30      	pop	{r4, r5, pc}
 8032fe0:	42a3      	cmp	r3, r4
 8032fe2:	d3f3      	bcc.n	8032fcc <__mcmp+0x18>
 8032fe4:	e7fb      	b.n	8032fde <__mcmp+0x2a>
 8032fe6:	2001      	movs	r0, #1
 8032fe8:	e7f9      	b.n	8032fde <__mcmp+0x2a>
	...

08032fec <__mdiff>:
 8032fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032ff0:	4689      	mov	r9, r1
 8032ff2:	4606      	mov	r6, r0
 8032ff4:	4611      	mov	r1, r2
 8032ff6:	4648      	mov	r0, r9
 8032ff8:	4614      	mov	r4, r2
 8032ffa:	f7ff ffdb 	bl	8032fb4 <__mcmp>
 8032ffe:	1e05      	subs	r5, r0, #0
 8033000:	d112      	bne.n	8033028 <__mdiff+0x3c>
 8033002:	4629      	mov	r1, r5
 8033004:	4630      	mov	r0, r6
 8033006:	f7ff fd5f 	bl	8032ac8 <_Balloc>
 803300a:	4602      	mov	r2, r0
 803300c:	b928      	cbnz	r0, 803301a <__mdiff+0x2e>
 803300e:	4b3f      	ldr	r3, [pc, #252]	@ (803310c <__mdiff+0x120>)
 8033010:	f240 2137 	movw	r1, #567	@ 0x237
 8033014:	483e      	ldr	r0, [pc, #248]	@ (8033110 <__mdiff+0x124>)
 8033016:	f7f6 fa99 	bl	802954c <__assert_func>
 803301a:	2301      	movs	r3, #1
 803301c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8033020:	4610      	mov	r0, r2
 8033022:	b003      	add	sp, #12
 8033024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033028:	bfbc      	itt	lt
 803302a:	464b      	movlt	r3, r9
 803302c:	46a1      	movlt	r9, r4
 803302e:	4630      	mov	r0, r6
 8033030:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8033034:	bfba      	itte	lt
 8033036:	461c      	movlt	r4, r3
 8033038:	2501      	movlt	r5, #1
 803303a:	2500      	movge	r5, #0
 803303c:	f7ff fd44 	bl	8032ac8 <_Balloc>
 8033040:	4602      	mov	r2, r0
 8033042:	b918      	cbnz	r0, 803304c <__mdiff+0x60>
 8033044:	4b31      	ldr	r3, [pc, #196]	@ (803310c <__mdiff+0x120>)
 8033046:	f240 2145 	movw	r1, #581	@ 0x245
 803304a:	e7e3      	b.n	8033014 <__mdiff+0x28>
 803304c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8033050:	6926      	ldr	r6, [r4, #16]
 8033052:	60c5      	str	r5, [r0, #12]
 8033054:	f109 0310 	add.w	r3, r9, #16
 8033058:	f109 0514 	add.w	r5, r9, #20
 803305c:	f104 0e14 	add.w	lr, r4, #20
 8033060:	f100 0b14 	add.w	fp, r0, #20
 8033064:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8033068:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 803306c:	9301      	str	r3, [sp, #4]
 803306e:	46d9      	mov	r9, fp
 8033070:	f04f 0c00 	mov.w	ip, #0
 8033074:	9b01      	ldr	r3, [sp, #4]
 8033076:	f85e 0b04 	ldr.w	r0, [lr], #4
 803307a:	f853 af04 	ldr.w	sl, [r3, #4]!
 803307e:	9301      	str	r3, [sp, #4]
 8033080:	fa1f f38a 	uxth.w	r3, sl
 8033084:	4619      	mov	r1, r3
 8033086:	b283      	uxth	r3, r0
 8033088:	1acb      	subs	r3, r1, r3
 803308a:	0c00      	lsrs	r0, r0, #16
 803308c:	4463      	add	r3, ip
 803308e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8033092:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8033096:	b29b      	uxth	r3, r3
 8033098:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803309c:	4576      	cmp	r6, lr
 803309e:	f849 3b04 	str.w	r3, [r9], #4
 80330a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80330a6:	d8e5      	bhi.n	8033074 <__mdiff+0x88>
 80330a8:	1b33      	subs	r3, r6, r4
 80330aa:	3b15      	subs	r3, #21
 80330ac:	f023 0303 	bic.w	r3, r3, #3
 80330b0:	3415      	adds	r4, #21
 80330b2:	3304      	adds	r3, #4
 80330b4:	42a6      	cmp	r6, r4
 80330b6:	bf38      	it	cc
 80330b8:	2304      	movcc	r3, #4
 80330ba:	441d      	add	r5, r3
 80330bc:	445b      	add	r3, fp
 80330be:	461e      	mov	r6, r3
 80330c0:	462c      	mov	r4, r5
 80330c2:	4544      	cmp	r4, r8
 80330c4:	d30e      	bcc.n	80330e4 <__mdiff+0xf8>
 80330c6:	f108 0103 	add.w	r1, r8, #3
 80330ca:	1b49      	subs	r1, r1, r5
 80330cc:	f021 0103 	bic.w	r1, r1, #3
 80330d0:	3d03      	subs	r5, #3
 80330d2:	45a8      	cmp	r8, r5
 80330d4:	bf38      	it	cc
 80330d6:	2100      	movcc	r1, #0
 80330d8:	440b      	add	r3, r1
 80330da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80330de:	b191      	cbz	r1, 8033106 <__mdiff+0x11a>
 80330e0:	6117      	str	r7, [r2, #16]
 80330e2:	e79d      	b.n	8033020 <__mdiff+0x34>
 80330e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80330e8:	46e6      	mov	lr, ip
 80330ea:	0c08      	lsrs	r0, r1, #16
 80330ec:	fa1c fc81 	uxtah	ip, ip, r1
 80330f0:	4471      	add	r1, lr
 80330f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80330f6:	b289      	uxth	r1, r1
 80330f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80330fc:	f846 1b04 	str.w	r1, [r6], #4
 8033100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8033104:	e7dd      	b.n	80330c2 <__mdiff+0xd6>
 8033106:	3f01      	subs	r7, #1
 8033108:	e7e7      	b.n	80330da <__mdiff+0xee>
 803310a:	bf00      	nop
 803310c:	0803b1de 	.word	0x0803b1de
 8033110:	0803b2d2 	.word	0x0803b2d2

08033114 <__ulp>:
 8033114:	b082      	sub	sp, #8
 8033116:	ed8d 0b00 	vstr	d0, [sp]
 803311a:	9a01      	ldr	r2, [sp, #4]
 803311c:	4b0f      	ldr	r3, [pc, #60]	@ (803315c <__ulp+0x48>)
 803311e:	4013      	ands	r3, r2
 8033120:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8033124:	2b00      	cmp	r3, #0
 8033126:	dc08      	bgt.n	803313a <__ulp+0x26>
 8033128:	425b      	negs	r3, r3
 803312a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 803312e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8033132:	da04      	bge.n	803313e <__ulp+0x2a>
 8033134:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8033138:	4113      	asrs	r3, r2
 803313a:	2200      	movs	r2, #0
 803313c:	e008      	b.n	8033150 <__ulp+0x3c>
 803313e:	f1a2 0314 	sub.w	r3, r2, #20
 8033142:	2b1e      	cmp	r3, #30
 8033144:	bfda      	itte	le
 8033146:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 803314a:	40da      	lsrle	r2, r3
 803314c:	2201      	movgt	r2, #1
 803314e:	2300      	movs	r3, #0
 8033150:	4619      	mov	r1, r3
 8033152:	4610      	mov	r0, r2
 8033154:	ec41 0b10 	vmov	d0, r0, r1
 8033158:	b002      	add	sp, #8
 803315a:	4770      	bx	lr
 803315c:	7ff00000 	.word	0x7ff00000

08033160 <__b2d>:
 8033160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033164:	6906      	ldr	r6, [r0, #16]
 8033166:	f100 0814 	add.w	r8, r0, #20
 803316a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 803316e:	1f37      	subs	r7, r6, #4
 8033170:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8033174:	4610      	mov	r0, r2
 8033176:	f7ff fd65 	bl	8032c44 <__hi0bits>
 803317a:	f1c0 0320 	rsb	r3, r0, #32
 803317e:	280a      	cmp	r0, #10
 8033180:	600b      	str	r3, [r1, #0]
 8033182:	491b      	ldr	r1, [pc, #108]	@ (80331f0 <__b2d+0x90>)
 8033184:	dc15      	bgt.n	80331b2 <__b2d+0x52>
 8033186:	f1c0 0c0b 	rsb	ip, r0, #11
 803318a:	fa22 f30c 	lsr.w	r3, r2, ip
 803318e:	45b8      	cmp	r8, r7
 8033190:	ea43 0501 	orr.w	r5, r3, r1
 8033194:	bf34      	ite	cc
 8033196:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 803319a:	2300      	movcs	r3, #0
 803319c:	3015      	adds	r0, #21
 803319e:	fa02 f000 	lsl.w	r0, r2, r0
 80331a2:	fa23 f30c 	lsr.w	r3, r3, ip
 80331a6:	4303      	orrs	r3, r0
 80331a8:	461c      	mov	r4, r3
 80331aa:	ec45 4b10 	vmov	d0, r4, r5
 80331ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80331b2:	45b8      	cmp	r8, r7
 80331b4:	bf3a      	itte	cc
 80331b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80331ba:	f1a6 0708 	subcc.w	r7, r6, #8
 80331be:	2300      	movcs	r3, #0
 80331c0:	380b      	subs	r0, #11
 80331c2:	d012      	beq.n	80331ea <__b2d+0x8a>
 80331c4:	f1c0 0120 	rsb	r1, r0, #32
 80331c8:	fa23 f401 	lsr.w	r4, r3, r1
 80331cc:	4082      	lsls	r2, r0
 80331ce:	4322      	orrs	r2, r4
 80331d0:	4547      	cmp	r7, r8
 80331d2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80331d6:	bf8c      	ite	hi
 80331d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80331dc:	2200      	movls	r2, #0
 80331de:	4083      	lsls	r3, r0
 80331e0:	40ca      	lsrs	r2, r1
 80331e2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80331e6:	4313      	orrs	r3, r2
 80331e8:	e7de      	b.n	80331a8 <__b2d+0x48>
 80331ea:	ea42 0501 	orr.w	r5, r2, r1
 80331ee:	e7db      	b.n	80331a8 <__b2d+0x48>
 80331f0:	3ff00000 	.word	0x3ff00000

080331f4 <__d2b>:
 80331f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80331f8:	460f      	mov	r7, r1
 80331fa:	2101      	movs	r1, #1
 80331fc:	ec59 8b10 	vmov	r8, r9, d0
 8033200:	4616      	mov	r6, r2
 8033202:	f7ff fc61 	bl	8032ac8 <_Balloc>
 8033206:	4604      	mov	r4, r0
 8033208:	b930      	cbnz	r0, 8033218 <__d2b+0x24>
 803320a:	4602      	mov	r2, r0
 803320c:	4b23      	ldr	r3, [pc, #140]	@ (803329c <__d2b+0xa8>)
 803320e:	4824      	ldr	r0, [pc, #144]	@ (80332a0 <__d2b+0xac>)
 8033210:	f240 310f 	movw	r1, #783	@ 0x30f
 8033214:	f7f6 f99a 	bl	802954c <__assert_func>
 8033218:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803321c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8033220:	b10d      	cbz	r5, 8033226 <__d2b+0x32>
 8033222:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8033226:	9301      	str	r3, [sp, #4]
 8033228:	f1b8 0300 	subs.w	r3, r8, #0
 803322c:	d023      	beq.n	8033276 <__d2b+0x82>
 803322e:	4668      	mov	r0, sp
 8033230:	9300      	str	r3, [sp, #0]
 8033232:	f7ff fd26 	bl	8032c82 <__lo0bits>
 8033236:	e9dd 1200 	ldrd	r1, r2, [sp]
 803323a:	b1d0      	cbz	r0, 8033272 <__d2b+0x7e>
 803323c:	f1c0 0320 	rsb	r3, r0, #32
 8033240:	fa02 f303 	lsl.w	r3, r2, r3
 8033244:	430b      	orrs	r3, r1
 8033246:	40c2      	lsrs	r2, r0
 8033248:	6163      	str	r3, [r4, #20]
 803324a:	9201      	str	r2, [sp, #4]
 803324c:	9b01      	ldr	r3, [sp, #4]
 803324e:	61a3      	str	r3, [r4, #24]
 8033250:	2b00      	cmp	r3, #0
 8033252:	bf0c      	ite	eq
 8033254:	2201      	moveq	r2, #1
 8033256:	2202      	movne	r2, #2
 8033258:	6122      	str	r2, [r4, #16]
 803325a:	b1a5      	cbz	r5, 8033286 <__d2b+0x92>
 803325c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8033260:	4405      	add	r5, r0
 8033262:	603d      	str	r5, [r7, #0]
 8033264:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8033268:	6030      	str	r0, [r6, #0]
 803326a:	4620      	mov	r0, r4
 803326c:	b003      	add	sp, #12
 803326e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8033272:	6161      	str	r1, [r4, #20]
 8033274:	e7ea      	b.n	803324c <__d2b+0x58>
 8033276:	a801      	add	r0, sp, #4
 8033278:	f7ff fd03 	bl	8032c82 <__lo0bits>
 803327c:	9b01      	ldr	r3, [sp, #4]
 803327e:	6163      	str	r3, [r4, #20]
 8033280:	3020      	adds	r0, #32
 8033282:	2201      	movs	r2, #1
 8033284:	e7e8      	b.n	8033258 <__d2b+0x64>
 8033286:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803328a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803328e:	6038      	str	r0, [r7, #0]
 8033290:	6918      	ldr	r0, [r3, #16]
 8033292:	f7ff fcd7 	bl	8032c44 <__hi0bits>
 8033296:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803329a:	e7e5      	b.n	8033268 <__d2b+0x74>
 803329c:	0803b1de 	.word	0x0803b1de
 80332a0:	0803b2d2 	.word	0x0803b2d2

080332a4 <__ratio>:
 80332a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80332a8:	b085      	sub	sp, #20
 80332aa:	e9cd 1000 	strd	r1, r0, [sp]
 80332ae:	a902      	add	r1, sp, #8
 80332b0:	f7ff ff56 	bl	8033160 <__b2d>
 80332b4:	9800      	ldr	r0, [sp, #0]
 80332b6:	a903      	add	r1, sp, #12
 80332b8:	ec55 4b10 	vmov	r4, r5, d0
 80332bc:	f7ff ff50 	bl	8033160 <__b2d>
 80332c0:	9b01      	ldr	r3, [sp, #4]
 80332c2:	6919      	ldr	r1, [r3, #16]
 80332c4:	9b00      	ldr	r3, [sp, #0]
 80332c6:	691b      	ldr	r3, [r3, #16]
 80332c8:	1ac9      	subs	r1, r1, r3
 80332ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80332ce:	1a9b      	subs	r3, r3, r2
 80332d0:	ec5b ab10 	vmov	sl, fp, d0
 80332d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80332d8:	2b00      	cmp	r3, #0
 80332da:	bfce      	itee	gt
 80332dc:	462a      	movgt	r2, r5
 80332de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80332e2:	465a      	movle	r2, fp
 80332e4:	462f      	mov	r7, r5
 80332e6:	46d9      	mov	r9, fp
 80332e8:	bfcc      	ite	gt
 80332ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80332ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80332f2:	464b      	mov	r3, r9
 80332f4:	4652      	mov	r2, sl
 80332f6:	4620      	mov	r0, r4
 80332f8:	4639      	mov	r1, r7
 80332fa:	f7dd fabf 	bl	801087c <__aeabi_ddiv>
 80332fe:	ec41 0b10 	vmov	d0, r0, r1
 8033302:	b005      	add	sp, #20
 8033304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08033308 <__copybits>:
 8033308:	3901      	subs	r1, #1
 803330a:	b570      	push	{r4, r5, r6, lr}
 803330c:	1149      	asrs	r1, r1, #5
 803330e:	6914      	ldr	r4, [r2, #16]
 8033310:	3101      	adds	r1, #1
 8033312:	f102 0314 	add.w	r3, r2, #20
 8033316:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 803331a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803331e:	1f05      	subs	r5, r0, #4
 8033320:	42a3      	cmp	r3, r4
 8033322:	d30c      	bcc.n	803333e <__copybits+0x36>
 8033324:	1aa3      	subs	r3, r4, r2
 8033326:	3b11      	subs	r3, #17
 8033328:	f023 0303 	bic.w	r3, r3, #3
 803332c:	3211      	adds	r2, #17
 803332e:	42a2      	cmp	r2, r4
 8033330:	bf88      	it	hi
 8033332:	2300      	movhi	r3, #0
 8033334:	4418      	add	r0, r3
 8033336:	2300      	movs	r3, #0
 8033338:	4288      	cmp	r0, r1
 803333a:	d305      	bcc.n	8033348 <__copybits+0x40>
 803333c:	bd70      	pop	{r4, r5, r6, pc}
 803333e:	f853 6b04 	ldr.w	r6, [r3], #4
 8033342:	f845 6f04 	str.w	r6, [r5, #4]!
 8033346:	e7eb      	b.n	8033320 <__copybits+0x18>
 8033348:	f840 3b04 	str.w	r3, [r0], #4
 803334c:	e7f4      	b.n	8033338 <__copybits+0x30>

0803334e <__any_on>:
 803334e:	f100 0214 	add.w	r2, r0, #20
 8033352:	6900      	ldr	r0, [r0, #16]
 8033354:	114b      	asrs	r3, r1, #5
 8033356:	4298      	cmp	r0, r3
 8033358:	b510      	push	{r4, lr}
 803335a:	db11      	blt.n	8033380 <__any_on+0x32>
 803335c:	dd0a      	ble.n	8033374 <__any_on+0x26>
 803335e:	f011 011f 	ands.w	r1, r1, #31
 8033362:	d007      	beq.n	8033374 <__any_on+0x26>
 8033364:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8033368:	fa24 f001 	lsr.w	r0, r4, r1
 803336c:	fa00 f101 	lsl.w	r1, r0, r1
 8033370:	428c      	cmp	r4, r1
 8033372:	d10b      	bne.n	803338c <__any_on+0x3e>
 8033374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8033378:	4293      	cmp	r3, r2
 803337a:	d803      	bhi.n	8033384 <__any_on+0x36>
 803337c:	2000      	movs	r0, #0
 803337e:	bd10      	pop	{r4, pc}
 8033380:	4603      	mov	r3, r0
 8033382:	e7f7      	b.n	8033374 <__any_on+0x26>
 8033384:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8033388:	2900      	cmp	r1, #0
 803338a:	d0f5      	beq.n	8033378 <__any_on+0x2a>
 803338c:	2001      	movs	r0, #1
 803338e:	e7f6      	b.n	803337e <__any_on+0x30>

08033390 <realloc>:
 8033390:	4b02      	ldr	r3, [pc, #8]	@ (803339c <realloc+0xc>)
 8033392:	460a      	mov	r2, r1
 8033394:	4601      	mov	r1, r0
 8033396:	6818      	ldr	r0, [r3, #0]
 8033398:	f000 b890 	b.w	80334bc <_realloc_r>
 803339c:	200002d8 	.word	0x200002d8

080333a0 <_fclose_r>:
 80333a0:	b570      	push	{r4, r5, r6, lr}
 80333a2:	4605      	mov	r5, r0
 80333a4:	460c      	mov	r4, r1
 80333a6:	b1b1      	cbz	r1, 80333d6 <_fclose_r+0x36>
 80333a8:	b118      	cbz	r0, 80333b2 <_fclose_r+0x12>
 80333aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80333ac:	b90b      	cbnz	r3, 80333b2 <_fclose_r+0x12>
 80333ae:	f7f8 fb79 	bl	802baa4 <__sinit>
 80333b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80333b4:	07de      	lsls	r6, r3, #31
 80333b6:	d405      	bmi.n	80333c4 <_fclose_r+0x24>
 80333b8:	89a3      	ldrh	r3, [r4, #12]
 80333ba:	0598      	lsls	r0, r3, #22
 80333bc:	d402      	bmi.n	80333c4 <_fclose_r+0x24>
 80333be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80333c0:	f7fa f84f 	bl	802d462 <__retarget_lock_acquire_recursive>
 80333c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80333c8:	b943      	cbnz	r3, 80333dc <_fclose_r+0x3c>
 80333ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80333cc:	07d9      	lsls	r1, r3, #31
 80333ce:	d402      	bmi.n	80333d6 <_fclose_r+0x36>
 80333d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80333d2:	f7fa f848 	bl	802d466 <__retarget_lock_release_recursive>
 80333d6:	2600      	movs	r6, #0
 80333d8:	4630      	mov	r0, r6
 80333da:	bd70      	pop	{r4, r5, r6, pc}
 80333dc:	4621      	mov	r1, r4
 80333de:	4628      	mov	r0, r5
 80333e0:	f7f8 f996 	bl	802b710 <__sflush_r>
 80333e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80333e6:	4606      	mov	r6, r0
 80333e8:	b133      	cbz	r3, 80333f8 <_fclose_r+0x58>
 80333ea:	69e1      	ldr	r1, [r4, #28]
 80333ec:	4628      	mov	r0, r5
 80333ee:	4798      	blx	r3
 80333f0:	2800      	cmp	r0, #0
 80333f2:	bfb8      	it	lt
 80333f4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 80333f8:	89a3      	ldrh	r3, [r4, #12]
 80333fa:	061a      	lsls	r2, r3, #24
 80333fc:	d503      	bpl.n	8033406 <_fclose_r+0x66>
 80333fe:	6921      	ldr	r1, [r4, #16]
 8033400:	4628      	mov	r0, r5
 8033402:	f7fa ff33 	bl	802e26c <_free_r>
 8033406:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8033408:	b141      	cbz	r1, 803341c <_fclose_r+0x7c>
 803340a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803340e:	4299      	cmp	r1, r3
 8033410:	d002      	beq.n	8033418 <_fclose_r+0x78>
 8033412:	4628      	mov	r0, r5
 8033414:	f7fa ff2a 	bl	802e26c <_free_r>
 8033418:	2300      	movs	r3, #0
 803341a:	6323      	str	r3, [r4, #48]	@ 0x30
 803341c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 803341e:	b121      	cbz	r1, 803342a <_fclose_r+0x8a>
 8033420:	4628      	mov	r0, r5
 8033422:	f7fa ff23 	bl	802e26c <_free_r>
 8033426:	2300      	movs	r3, #0
 8033428:	6463      	str	r3, [r4, #68]	@ 0x44
 803342a:	f7f8 fb2f 	bl	802ba8c <__sfp_lock_acquire>
 803342e:	2300      	movs	r3, #0
 8033430:	81a3      	strh	r3, [r4, #12]
 8033432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8033434:	07db      	lsls	r3, r3, #31
 8033436:	d402      	bmi.n	803343e <_fclose_r+0x9e>
 8033438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803343a:	f7fa f814 	bl	802d466 <__retarget_lock_release_recursive>
 803343e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8033440:	f7fa f80d 	bl	802d45e <__retarget_lock_close_recursive>
 8033444:	f7f8 fb28 	bl	802ba98 <__sfp_lock_release>
 8033448:	e7c6      	b.n	80333d8 <_fclose_r+0x38>

0803344a <__sccl>:
 803344a:	b570      	push	{r4, r5, r6, lr}
 803344c:	780b      	ldrb	r3, [r1, #0]
 803344e:	4604      	mov	r4, r0
 8033450:	2b5e      	cmp	r3, #94	@ 0x5e
 8033452:	bf0b      	itete	eq
 8033454:	784b      	ldrbeq	r3, [r1, #1]
 8033456:	1c4a      	addne	r2, r1, #1
 8033458:	1c8a      	addeq	r2, r1, #2
 803345a:	2100      	movne	r1, #0
 803345c:	bf08      	it	eq
 803345e:	2101      	moveq	r1, #1
 8033460:	3801      	subs	r0, #1
 8033462:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8033466:	f800 1f01 	strb.w	r1, [r0, #1]!
 803346a:	42a8      	cmp	r0, r5
 803346c:	d1fb      	bne.n	8033466 <__sccl+0x1c>
 803346e:	b90b      	cbnz	r3, 8033474 <__sccl+0x2a>
 8033470:	1e50      	subs	r0, r2, #1
 8033472:	bd70      	pop	{r4, r5, r6, pc}
 8033474:	f081 0101 	eor.w	r1, r1, #1
 8033478:	54e1      	strb	r1, [r4, r3]
 803347a:	4610      	mov	r0, r2
 803347c:	4602      	mov	r2, r0
 803347e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8033482:	2d2d      	cmp	r5, #45	@ 0x2d
 8033484:	d005      	beq.n	8033492 <__sccl+0x48>
 8033486:	2d5d      	cmp	r5, #93	@ 0x5d
 8033488:	d016      	beq.n	80334b8 <__sccl+0x6e>
 803348a:	2d00      	cmp	r5, #0
 803348c:	d0f1      	beq.n	8033472 <__sccl+0x28>
 803348e:	462b      	mov	r3, r5
 8033490:	e7f2      	b.n	8033478 <__sccl+0x2e>
 8033492:	7846      	ldrb	r6, [r0, #1]
 8033494:	2e5d      	cmp	r6, #93	@ 0x5d
 8033496:	d0fa      	beq.n	803348e <__sccl+0x44>
 8033498:	42b3      	cmp	r3, r6
 803349a:	dcf8      	bgt.n	803348e <__sccl+0x44>
 803349c:	3002      	adds	r0, #2
 803349e:	461a      	mov	r2, r3
 80334a0:	3201      	adds	r2, #1
 80334a2:	4296      	cmp	r6, r2
 80334a4:	54a1      	strb	r1, [r4, r2]
 80334a6:	dcfb      	bgt.n	80334a0 <__sccl+0x56>
 80334a8:	1af2      	subs	r2, r6, r3
 80334aa:	3a01      	subs	r2, #1
 80334ac:	1c5d      	adds	r5, r3, #1
 80334ae:	42b3      	cmp	r3, r6
 80334b0:	bfa8      	it	ge
 80334b2:	2200      	movge	r2, #0
 80334b4:	18ab      	adds	r3, r5, r2
 80334b6:	e7e1      	b.n	803347c <__sccl+0x32>
 80334b8:	4610      	mov	r0, r2
 80334ba:	e7da      	b.n	8033472 <__sccl+0x28>

080334bc <_realloc_r>:
 80334bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80334c0:	4682      	mov	sl, r0
 80334c2:	4693      	mov	fp, r2
 80334c4:	460c      	mov	r4, r1
 80334c6:	b929      	cbnz	r1, 80334d4 <_realloc_r+0x18>
 80334c8:	4611      	mov	r1, r2
 80334ca:	b003      	add	sp, #12
 80334cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80334d0:	f7fa bfe4 	b.w	802e49c <_malloc_r>
 80334d4:	f7ff faec 	bl	8032ab0 <__malloc_lock>
 80334d8:	f10b 080b 	add.w	r8, fp, #11
 80334dc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80334e0:	f1b8 0f16 	cmp.w	r8, #22
 80334e4:	f1a4 0908 	sub.w	r9, r4, #8
 80334e8:	f025 0603 	bic.w	r6, r5, #3
 80334ec:	d908      	bls.n	8033500 <_realloc_r+0x44>
 80334ee:	f038 0807 	bics.w	r8, r8, #7
 80334f2:	d507      	bpl.n	8033504 <_realloc_r+0x48>
 80334f4:	230c      	movs	r3, #12
 80334f6:	f8ca 3000 	str.w	r3, [sl]
 80334fa:	f04f 0b00 	mov.w	fp, #0
 80334fe:	e032      	b.n	8033566 <_realloc_r+0xaa>
 8033500:	f04f 0810 	mov.w	r8, #16
 8033504:	45c3      	cmp	fp, r8
 8033506:	d8f5      	bhi.n	80334f4 <_realloc_r+0x38>
 8033508:	4546      	cmp	r6, r8
 803350a:	f280 8174 	bge.w	80337f6 <_realloc_r+0x33a>
 803350e:	4b9e      	ldr	r3, [pc, #632]	@ (8033788 <_realloc_r+0x2cc>)
 8033510:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8033514:	eb09 0106 	add.w	r1, r9, r6
 8033518:	458c      	cmp	ip, r1
 803351a:	6848      	ldr	r0, [r1, #4]
 803351c:	d005      	beq.n	803352a <_realloc_r+0x6e>
 803351e:	f020 0201 	bic.w	r2, r0, #1
 8033522:	440a      	add	r2, r1
 8033524:	6852      	ldr	r2, [r2, #4]
 8033526:	07d7      	lsls	r7, r2, #31
 8033528:	d449      	bmi.n	80335be <_realloc_r+0x102>
 803352a:	f020 0003 	bic.w	r0, r0, #3
 803352e:	458c      	cmp	ip, r1
 8033530:	eb06 0700 	add.w	r7, r6, r0
 8033534:	d11b      	bne.n	803356e <_realloc_r+0xb2>
 8033536:	f108 0210 	add.w	r2, r8, #16
 803353a:	42ba      	cmp	r2, r7
 803353c:	dc41      	bgt.n	80335c2 <_realloc_r+0x106>
 803353e:	eb09 0208 	add.w	r2, r9, r8
 8033542:	eba7 0708 	sub.w	r7, r7, r8
 8033546:	f047 0701 	orr.w	r7, r7, #1
 803354a:	609a      	str	r2, [r3, #8]
 803354c:	6057      	str	r7, [r2, #4]
 803354e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8033552:	f003 0301 	and.w	r3, r3, #1
 8033556:	ea43 0308 	orr.w	r3, r3, r8
 803355a:	f844 3c04 	str.w	r3, [r4, #-4]
 803355e:	4650      	mov	r0, sl
 8033560:	f7ff faac 	bl	8032abc <__malloc_unlock>
 8033564:	46a3      	mov	fp, r4
 8033566:	4658      	mov	r0, fp
 8033568:	b003      	add	sp, #12
 803356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803356e:	45b8      	cmp	r8, r7
 8033570:	dc27      	bgt.n	80335c2 <_realloc_r+0x106>
 8033572:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033576:	60d3      	str	r3, [r2, #12]
 8033578:	609a      	str	r2, [r3, #8]
 803357a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 803357e:	eba7 0008 	sub.w	r0, r7, r8
 8033582:	280f      	cmp	r0, #15
 8033584:	f003 0301 	and.w	r3, r3, #1
 8033588:	eb09 0207 	add.w	r2, r9, r7
 803358c:	f240 8135 	bls.w	80337fa <_realloc_r+0x33e>
 8033590:	eb09 0108 	add.w	r1, r9, r8
 8033594:	ea48 0303 	orr.w	r3, r8, r3
 8033598:	f040 0001 	orr.w	r0, r0, #1
 803359c:	f8c9 3004 	str.w	r3, [r9, #4]
 80335a0:	6048      	str	r0, [r1, #4]
 80335a2:	6853      	ldr	r3, [r2, #4]
 80335a4:	f043 0301 	orr.w	r3, r3, #1
 80335a8:	6053      	str	r3, [r2, #4]
 80335aa:	3108      	adds	r1, #8
 80335ac:	4650      	mov	r0, sl
 80335ae:	f7fa fe5d 	bl	802e26c <_free_r>
 80335b2:	4650      	mov	r0, sl
 80335b4:	f7ff fa82 	bl	8032abc <__malloc_unlock>
 80335b8:	f109 0b08 	add.w	fp, r9, #8
 80335bc:	e7d3      	b.n	8033566 <_realloc_r+0xaa>
 80335be:	2000      	movs	r0, #0
 80335c0:	4601      	mov	r1, r0
 80335c2:	07ea      	lsls	r2, r5, #31
 80335c4:	f100 80c7 	bmi.w	8033756 <_realloc_r+0x29a>
 80335c8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80335cc:	eba9 0505 	sub.w	r5, r9, r5
 80335d0:	686a      	ldr	r2, [r5, #4]
 80335d2:	f022 0203 	bic.w	r2, r2, #3
 80335d6:	4432      	add	r2, r6
 80335d8:	9201      	str	r2, [sp, #4]
 80335da:	2900      	cmp	r1, #0
 80335dc:	f000 8086 	beq.w	80336ec <_realloc_r+0x230>
 80335e0:	458c      	cmp	ip, r1
 80335e2:	eb00 0702 	add.w	r7, r0, r2
 80335e6:	d149      	bne.n	803367c <_realloc_r+0x1c0>
 80335e8:	f108 0210 	add.w	r2, r8, #16
 80335ec:	42ba      	cmp	r2, r7
 80335ee:	dc7d      	bgt.n	80336ec <_realloc_r+0x230>
 80335f0:	46ab      	mov	fp, r5
 80335f2:	68ea      	ldr	r2, [r5, #12]
 80335f4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80335f8:	60ca      	str	r2, [r1, #12]
 80335fa:	6091      	str	r1, [r2, #8]
 80335fc:	1f32      	subs	r2, r6, #4
 80335fe:	2a24      	cmp	r2, #36	@ 0x24
 8033600:	d836      	bhi.n	8033670 <_realloc_r+0x1b4>
 8033602:	2a13      	cmp	r2, #19
 8033604:	d932      	bls.n	803366c <_realloc_r+0x1b0>
 8033606:	6821      	ldr	r1, [r4, #0]
 8033608:	60a9      	str	r1, [r5, #8]
 803360a:	6861      	ldr	r1, [r4, #4]
 803360c:	60e9      	str	r1, [r5, #12]
 803360e:	2a1b      	cmp	r2, #27
 8033610:	d81a      	bhi.n	8033648 <_realloc_r+0x18c>
 8033612:	3408      	adds	r4, #8
 8033614:	f105 0210 	add.w	r2, r5, #16
 8033618:	6821      	ldr	r1, [r4, #0]
 803361a:	6011      	str	r1, [r2, #0]
 803361c:	6861      	ldr	r1, [r4, #4]
 803361e:	6051      	str	r1, [r2, #4]
 8033620:	68a1      	ldr	r1, [r4, #8]
 8033622:	6091      	str	r1, [r2, #8]
 8033624:	eb05 0208 	add.w	r2, r5, r8
 8033628:	eba7 0708 	sub.w	r7, r7, r8
 803362c:	f047 0701 	orr.w	r7, r7, #1
 8033630:	609a      	str	r2, [r3, #8]
 8033632:	6057      	str	r7, [r2, #4]
 8033634:	686b      	ldr	r3, [r5, #4]
 8033636:	f003 0301 	and.w	r3, r3, #1
 803363a:	ea43 0308 	orr.w	r3, r3, r8
 803363e:	606b      	str	r3, [r5, #4]
 8033640:	4650      	mov	r0, sl
 8033642:	f7ff fa3b 	bl	8032abc <__malloc_unlock>
 8033646:	e78e      	b.n	8033566 <_realloc_r+0xaa>
 8033648:	68a1      	ldr	r1, [r4, #8]
 803364a:	6129      	str	r1, [r5, #16]
 803364c:	68e1      	ldr	r1, [r4, #12]
 803364e:	6169      	str	r1, [r5, #20]
 8033650:	2a24      	cmp	r2, #36	@ 0x24
 8033652:	bf01      	itttt	eq
 8033654:	6922      	ldreq	r2, [r4, #16]
 8033656:	61aa      	streq	r2, [r5, #24]
 8033658:	6961      	ldreq	r1, [r4, #20]
 803365a:	61e9      	streq	r1, [r5, #28]
 803365c:	bf19      	ittee	ne
 803365e:	3410      	addne	r4, #16
 8033660:	f105 0218 	addne.w	r2, r5, #24
 8033664:	f105 0220 	addeq.w	r2, r5, #32
 8033668:	3418      	addeq	r4, #24
 803366a:	e7d5      	b.n	8033618 <_realloc_r+0x15c>
 803366c:	465a      	mov	r2, fp
 803366e:	e7d3      	b.n	8033618 <_realloc_r+0x15c>
 8033670:	4621      	mov	r1, r4
 8033672:	4658      	mov	r0, fp
 8033674:	f7f8 fca2 	bl	802bfbc <memmove>
 8033678:	4b43      	ldr	r3, [pc, #268]	@ (8033788 <_realloc_r+0x2cc>)
 803367a:	e7d3      	b.n	8033624 <_realloc_r+0x168>
 803367c:	45b8      	cmp	r8, r7
 803367e:	dc35      	bgt.n	80336ec <_realloc_r+0x230>
 8033680:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8033684:	4628      	mov	r0, r5
 8033686:	60d3      	str	r3, [r2, #12]
 8033688:	609a      	str	r2, [r3, #8]
 803368a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 803368e:	68eb      	ldr	r3, [r5, #12]
 8033690:	60d3      	str	r3, [r2, #12]
 8033692:	609a      	str	r2, [r3, #8]
 8033694:	1f32      	subs	r2, r6, #4
 8033696:	2a24      	cmp	r2, #36	@ 0x24
 8033698:	d824      	bhi.n	80336e4 <_realloc_r+0x228>
 803369a:	2a13      	cmp	r2, #19
 803369c:	d908      	bls.n	80336b0 <_realloc_r+0x1f4>
 803369e:	6823      	ldr	r3, [r4, #0]
 80336a0:	60ab      	str	r3, [r5, #8]
 80336a2:	6863      	ldr	r3, [r4, #4]
 80336a4:	60eb      	str	r3, [r5, #12]
 80336a6:	2a1b      	cmp	r2, #27
 80336a8:	d80a      	bhi.n	80336c0 <_realloc_r+0x204>
 80336aa:	3408      	adds	r4, #8
 80336ac:	f105 0010 	add.w	r0, r5, #16
 80336b0:	6823      	ldr	r3, [r4, #0]
 80336b2:	6003      	str	r3, [r0, #0]
 80336b4:	6863      	ldr	r3, [r4, #4]
 80336b6:	6043      	str	r3, [r0, #4]
 80336b8:	68a3      	ldr	r3, [r4, #8]
 80336ba:	6083      	str	r3, [r0, #8]
 80336bc:	46a9      	mov	r9, r5
 80336be:	e75c      	b.n	803357a <_realloc_r+0xbe>
 80336c0:	68a3      	ldr	r3, [r4, #8]
 80336c2:	612b      	str	r3, [r5, #16]
 80336c4:	68e3      	ldr	r3, [r4, #12]
 80336c6:	616b      	str	r3, [r5, #20]
 80336c8:	2a24      	cmp	r2, #36	@ 0x24
 80336ca:	bf01      	itttt	eq
 80336cc:	6923      	ldreq	r3, [r4, #16]
 80336ce:	61ab      	streq	r3, [r5, #24]
 80336d0:	6963      	ldreq	r3, [r4, #20]
 80336d2:	61eb      	streq	r3, [r5, #28]
 80336d4:	bf19      	ittee	ne
 80336d6:	3410      	addne	r4, #16
 80336d8:	f105 0018 	addne.w	r0, r5, #24
 80336dc:	f105 0020 	addeq.w	r0, r5, #32
 80336e0:	3418      	addeq	r4, #24
 80336e2:	e7e5      	b.n	80336b0 <_realloc_r+0x1f4>
 80336e4:	4621      	mov	r1, r4
 80336e6:	f7f8 fc69 	bl	802bfbc <memmove>
 80336ea:	e7e7      	b.n	80336bc <_realloc_r+0x200>
 80336ec:	9b01      	ldr	r3, [sp, #4]
 80336ee:	4598      	cmp	r8, r3
 80336f0:	dc31      	bgt.n	8033756 <_realloc_r+0x29a>
 80336f2:	4628      	mov	r0, r5
 80336f4:	68eb      	ldr	r3, [r5, #12]
 80336f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80336fa:	60d3      	str	r3, [r2, #12]
 80336fc:	609a      	str	r2, [r3, #8]
 80336fe:	1f32      	subs	r2, r6, #4
 8033700:	2a24      	cmp	r2, #36	@ 0x24
 8033702:	d824      	bhi.n	803374e <_realloc_r+0x292>
 8033704:	2a13      	cmp	r2, #19
 8033706:	d908      	bls.n	803371a <_realloc_r+0x25e>
 8033708:	6823      	ldr	r3, [r4, #0]
 803370a:	60ab      	str	r3, [r5, #8]
 803370c:	6863      	ldr	r3, [r4, #4]
 803370e:	60eb      	str	r3, [r5, #12]
 8033710:	2a1b      	cmp	r2, #27
 8033712:	d80a      	bhi.n	803372a <_realloc_r+0x26e>
 8033714:	3408      	adds	r4, #8
 8033716:	f105 0010 	add.w	r0, r5, #16
 803371a:	6823      	ldr	r3, [r4, #0]
 803371c:	6003      	str	r3, [r0, #0]
 803371e:	6863      	ldr	r3, [r4, #4]
 8033720:	6043      	str	r3, [r0, #4]
 8033722:	68a3      	ldr	r3, [r4, #8]
 8033724:	6083      	str	r3, [r0, #8]
 8033726:	9f01      	ldr	r7, [sp, #4]
 8033728:	e7c8      	b.n	80336bc <_realloc_r+0x200>
 803372a:	68a3      	ldr	r3, [r4, #8]
 803372c:	612b      	str	r3, [r5, #16]
 803372e:	68e3      	ldr	r3, [r4, #12]
 8033730:	616b      	str	r3, [r5, #20]
 8033732:	2a24      	cmp	r2, #36	@ 0x24
 8033734:	bf01      	itttt	eq
 8033736:	6923      	ldreq	r3, [r4, #16]
 8033738:	61ab      	streq	r3, [r5, #24]
 803373a:	6963      	ldreq	r3, [r4, #20]
 803373c:	61eb      	streq	r3, [r5, #28]
 803373e:	bf19      	ittee	ne
 8033740:	3410      	addne	r4, #16
 8033742:	f105 0018 	addne.w	r0, r5, #24
 8033746:	f105 0020 	addeq.w	r0, r5, #32
 803374a:	3418      	addeq	r4, #24
 803374c:	e7e5      	b.n	803371a <_realloc_r+0x25e>
 803374e:	4621      	mov	r1, r4
 8033750:	f7f8 fc34 	bl	802bfbc <memmove>
 8033754:	e7e7      	b.n	8033726 <_realloc_r+0x26a>
 8033756:	4659      	mov	r1, fp
 8033758:	4650      	mov	r0, sl
 803375a:	f7fa fe9f 	bl	802e49c <_malloc_r>
 803375e:	4683      	mov	fp, r0
 8033760:	b918      	cbnz	r0, 803376a <_realloc_r+0x2ae>
 8033762:	4650      	mov	r0, sl
 8033764:	f7ff f9aa 	bl	8032abc <__malloc_unlock>
 8033768:	e6c7      	b.n	80334fa <_realloc_r+0x3e>
 803376a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 803376e:	f023 0301 	bic.w	r3, r3, #1
 8033772:	444b      	add	r3, r9
 8033774:	f1a0 0208 	sub.w	r2, r0, #8
 8033778:	4293      	cmp	r3, r2
 803377a:	d107      	bne.n	803378c <_realloc_r+0x2d0>
 803377c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8033780:	f027 0703 	bic.w	r7, r7, #3
 8033784:	4437      	add	r7, r6
 8033786:	e6f8      	b.n	803357a <_realloc_r+0xbe>
 8033788:	2000040c 	.word	0x2000040c
 803378c:	1f32      	subs	r2, r6, #4
 803378e:	2a24      	cmp	r2, #36	@ 0x24
 8033790:	d82d      	bhi.n	80337ee <_realloc_r+0x332>
 8033792:	2a13      	cmp	r2, #19
 8033794:	d928      	bls.n	80337e8 <_realloc_r+0x32c>
 8033796:	6823      	ldr	r3, [r4, #0]
 8033798:	6003      	str	r3, [r0, #0]
 803379a:	6863      	ldr	r3, [r4, #4]
 803379c:	6043      	str	r3, [r0, #4]
 803379e:	2a1b      	cmp	r2, #27
 80337a0:	d80e      	bhi.n	80337c0 <_realloc_r+0x304>
 80337a2:	f104 0208 	add.w	r2, r4, #8
 80337a6:	f100 0308 	add.w	r3, r0, #8
 80337aa:	6811      	ldr	r1, [r2, #0]
 80337ac:	6019      	str	r1, [r3, #0]
 80337ae:	6851      	ldr	r1, [r2, #4]
 80337b0:	6059      	str	r1, [r3, #4]
 80337b2:	6892      	ldr	r2, [r2, #8]
 80337b4:	609a      	str	r2, [r3, #8]
 80337b6:	4621      	mov	r1, r4
 80337b8:	4650      	mov	r0, sl
 80337ba:	f7fa fd57 	bl	802e26c <_free_r>
 80337be:	e73f      	b.n	8033640 <_realloc_r+0x184>
 80337c0:	68a3      	ldr	r3, [r4, #8]
 80337c2:	6083      	str	r3, [r0, #8]
 80337c4:	68e3      	ldr	r3, [r4, #12]
 80337c6:	60c3      	str	r3, [r0, #12]
 80337c8:	2a24      	cmp	r2, #36	@ 0x24
 80337ca:	bf01      	itttt	eq
 80337cc:	6923      	ldreq	r3, [r4, #16]
 80337ce:	6103      	streq	r3, [r0, #16]
 80337d0:	6961      	ldreq	r1, [r4, #20]
 80337d2:	6141      	streq	r1, [r0, #20]
 80337d4:	bf19      	ittee	ne
 80337d6:	f104 0210 	addne.w	r2, r4, #16
 80337da:	f100 0310 	addne.w	r3, r0, #16
 80337de:	f104 0218 	addeq.w	r2, r4, #24
 80337e2:	f100 0318 	addeq.w	r3, r0, #24
 80337e6:	e7e0      	b.n	80337aa <_realloc_r+0x2ee>
 80337e8:	4603      	mov	r3, r0
 80337ea:	4622      	mov	r2, r4
 80337ec:	e7dd      	b.n	80337aa <_realloc_r+0x2ee>
 80337ee:	4621      	mov	r1, r4
 80337f0:	f7f8 fbe4 	bl	802bfbc <memmove>
 80337f4:	e7df      	b.n	80337b6 <_realloc_r+0x2fa>
 80337f6:	4637      	mov	r7, r6
 80337f8:	e6bf      	b.n	803357a <_realloc_r+0xbe>
 80337fa:	431f      	orrs	r7, r3
 80337fc:	f8c9 7004 	str.w	r7, [r9, #4]
 8033800:	6853      	ldr	r3, [r2, #4]
 8033802:	f043 0301 	orr.w	r3, r3, #1
 8033806:	6053      	str	r3, [r2, #4]
 8033808:	e6d3      	b.n	80335b2 <_realloc_r+0xf6>
 803380a:	bf00      	nop

0803380c <sulp>:
 803380c:	b570      	push	{r4, r5, r6, lr}
 803380e:	4604      	mov	r4, r0
 8033810:	460d      	mov	r5, r1
 8033812:	ec45 4b10 	vmov	d0, r4, r5
 8033816:	4616      	mov	r6, r2
 8033818:	f7ff fc7c 	bl	8033114 <__ulp>
 803381c:	ec51 0b10 	vmov	r0, r1, d0
 8033820:	b17e      	cbz	r6, 8033842 <sulp+0x36>
 8033822:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8033826:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 803382a:	2b00      	cmp	r3, #0
 803382c:	dd09      	ble.n	8033842 <sulp+0x36>
 803382e:	051b      	lsls	r3, r3, #20
 8033830:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8033834:	2400      	movs	r4, #0
 8033836:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 803383a:	4622      	mov	r2, r4
 803383c:	462b      	mov	r3, r5
 803383e:	f7dc fef3 	bl	8010628 <__aeabi_dmul>
 8033842:	ec41 0b10 	vmov	d0, r0, r1
 8033846:	bd70      	pop	{r4, r5, r6, pc}

08033848 <_strtod_l>:
 8033848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803384c:	b09f      	sub	sp, #124	@ 0x7c
 803384e:	460c      	mov	r4, r1
 8033850:	9217      	str	r2, [sp, #92]	@ 0x5c
 8033852:	2200      	movs	r2, #0
 8033854:	921a      	str	r2, [sp, #104]	@ 0x68
 8033856:	9005      	str	r0, [sp, #20]
 8033858:	f04f 0a00 	mov.w	sl, #0
 803385c:	f04f 0b00 	mov.w	fp, #0
 8033860:	460a      	mov	r2, r1
 8033862:	9219      	str	r2, [sp, #100]	@ 0x64
 8033864:	7811      	ldrb	r1, [r2, #0]
 8033866:	292b      	cmp	r1, #43	@ 0x2b
 8033868:	d04a      	beq.n	8033900 <_strtod_l+0xb8>
 803386a:	d838      	bhi.n	80338de <_strtod_l+0x96>
 803386c:	290d      	cmp	r1, #13
 803386e:	d832      	bhi.n	80338d6 <_strtod_l+0x8e>
 8033870:	2908      	cmp	r1, #8
 8033872:	d832      	bhi.n	80338da <_strtod_l+0x92>
 8033874:	2900      	cmp	r1, #0
 8033876:	d03b      	beq.n	80338f0 <_strtod_l+0xa8>
 8033878:	2200      	movs	r2, #0
 803387a:	920b      	str	r2, [sp, #44]	@ 0x2c
 803387c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 803387e:	782a      	ldrb	r2, [r5, #0]
 8033880:	2a30      	cmp	r2, #48	@ 0x30
 8033882:	f040 80b3 	bne.w	80339ec <_strtod_l+0x1a4>
 8033886:	786a      	ldrb	r2, [r5, #1]
 8033888:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803388c:	2a58      	cmp	r2, #88	@ 0x58
 803388e:	d16e      	bne.n	803396e <_strtod_l+0x126>
 8033890:	9302      	str	r3, [sp, #8]
 8033892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8033894:	9301      	str	r3, [sp, #4]
 8033896:	ab1a      	add	r3, sp, #104	@ 0x68
 8033898:	9300      	str	r3, [sp, #0]
 803389a:	4a8e      	ldr	r2, [pc, #568]	@ (8033ad4 <_strtod_l+0x28c>)
 803389c:	9805      	ldr	r0, [sp, #20]
 803389e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80338a0:	a919      	add	r1, sp, #100	@ 0x64
 80338a2:	f001 fa51 	bl	8034d48 <__gethex>
 80338a6:	f010 060f 	ands.w	r6, r0, #15
 80338aa:	4604      	mov	r4, r0
 80338ac:	d005      	beq.n	80338ba <_strtod_l+0x72>
 80338ae:	2e06      	cmp	r6, #6
 80338b0:	d128      	bne.n	8033904 <_strtod_l+0xbc>
 80338b2:	3501      	adds	r5, #1
 80338b4:	2300      	movs	r3, #0
 80338b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80338b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80338ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80338bc:	2b00      	cmp	r3, #0
 80338be:	f040 858e 	bne.w	80343de <_strtod_l+0xb96>
 80338c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80338c4:	b1cb      	cbz	r3, 80338fa <_strtod_l+0xb2>
 80338c6:	4652      	mov	r2, sl
 80338c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80338cc:	ec43 2b10 	vmov	d0, r2, r3
 80338d0:	b01f      	add	sp, #124	@ 0x7c
 80338d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80338d6:	2920      	cmp	r1, #32
 80338d8:	d1ce      	bne.n	8033878 <_strtod_l+0x30>
 80338da:	3201      	adds	r2, #1
 80338dc:	e7c1      	b.n	8033862 <_strtod_l+0x1a>
 80338de:	292d      	cmp	r1, #45	@ 0x2d
 80338e0:	d1ca      	bne.n	8033878 <_strtod_l+0x30>
 80338e2:	2101      	movs	r1, #1
 80338e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80338e6:	1c51      	adds	r1, r2, #1
 80338e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80338ea:	7852      	ldrb	r2, [r2, #1]
 80338ec:	2a00      	cmp	r2, #0
 80338ee:	d1c5      	bne.n	803387c <_strtod_l+0x34>
 80338f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80338f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80338f4:	2b00      	cmp	r3, #0
 80338f6:	f040 8570 	bne.w	80343da <_strtod_l+0xb92>
 80338fa:	4652      	mov	r2, sl
 80338fc:	465b      	mov	r3, fp
 80338fe:	e7e5      	b.n	80338cc <_strtod_l+0x84>
 8033900:	2100      	movs	r1, #0
 8033902:	e7ef      	b.n	80338e4 <_strtod_l+0x9c>
 8033904:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8033906:	b13a      	cbz	r2, 8033918 <_strtod_l+0xd0>
 8033908:	2135      	movs	r1, #53	@ 0x35
 803390a:	a81c      	add	r0, sp, #112	@ 0x70
 803390c:	f7ff fcfc 	bl	8033308 <__copybits>
 8033910:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033912:	9805      	ldr	r0, [sp, #20]
 8033914:	f7ff f8fd 	bl	8032b12 <_Bfree>
 8033918:	3e01      	subs	r6, #1
 803391a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 803391c:	2e04      	cmp	r6, #4
 803391e:	d806      	bhi.n	803392e <_strtod_l+0xe6>
 8033920:	e8df f006 	tbb	[pc, r6]
 8033924:	201d0314 	.word	0x201d0314
 8033928:	14          	.byte	0x14
 8033929:	00          	.byte	0x00
 803392a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 803392e:	05e1      	lsls	r1, r4, #23
 8033930:	bf48      	it	mi
 8033932:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8033936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 803393a:	0d1b      	lsrs	r3, r3, #20
 803393c:	051b      	lsls	r3, r3, #20
 803393e:	2b00      	cmp	r3, #0
 8033940:	d1bb      	bne.n	80338ba <_strtod_l+0x72>
 8033942:	f7f9 fd59 	bl	802d3f8 <__errno>
 8033946:	2322      	movs	r3, #34	@ 0x22
 8033948:	6003      	str	r3, [r0, #0]
 803394a:	e7b6      	b.n	80338ba <_strtod_l+0x72>
 803394c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8033950:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8033954:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8033958:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803395c:	e7e7      	b.n	803392e <_strtod_l+0xe6>
 803395e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8033adc <_strtod_l+0x294>
 8033962:	e7e4      	b.n	803392e <_strtod_l+0xe6>
 8033964:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8033968:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 803396c:	e7df      	b.n	803392e <_strtod_l+0xe6>
 803396e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033970:	1c5a      	adds	r2, r3, #1
 8033972:	9219      	str	r2, [sp, #100]	@ 0x64
 8033974:	785b      	ldrb	r3, [r3, #1]
 8033976:	2b30      	cmp	r3, #48	@ 0x30
 8033978:	d0f9      	beq.n	803396e <_strtod_l+0x126>
 803397a:	2b00      	cmp	r3, #0
 803397c:	d09d      	beq.n	80338ba <_strtod_l+0x72>
 803397e:	2301      	movs	r3, #1
 8033980:	9309      	str	r3, [sp, #36]	@ 0x24
 8033982:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033984:	930c      	str	r3, [sp, #48]	@ 0x30
 8033986:	2300      	movs	r3, #0
 8033988:	9308      	str	r3, [sp, #32]
 803398a:	930a      	str	r3, [sp, #40]	@ 0x28
 803398c:	461f      	mov	r7, r3
 803398e:	220a      	movs	r2, #10
 8033990:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8033992:	7805      	ldrb	r5, [r0, #0]
 8033994:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8033998:	b2d9      	uxtb	r1, r3
 803399a:	2909      	cmp	r1, #9
 803399c:	d928      	bls.n	80339f0 <_strtod_l+0x1a8>
 803399e:	494e      	ldr	r1, [pc, #312]	@ (8033ad8 <_strtod_l+0x290>)
 80339a0:	2201      	movs	r2, #1
 80339a2:	f7f8 fb5a 	bl	802c05a <strncmp>
 80339a6:	2800      	cmp	r0, #0
 80339a8:	d032      	beq.n	8033a10 <_strtod_l+0x1c8>
 80339aa:	2000      	movs	r0, #0
 80339ac:	462a      	mov	r2, r5
 80339ae:	4681      	mov	r9, r0
 80339b0:	463d      	mov	r5, r7
 80339b2:	4603      	mov	r3, r0
 80339b4:	2a65      	cmp	r2, #101	@ 0x65
 80339b6:	d001      	beq.n	80339bc <_strtod_l+0x174>
 80339b8:	2a45      	cmp	r2, #69	@ 0x45
 80339ba:	d114      	bne.n	80339e6 <_strtod_l+0x19e>
 80339bc:	b91d      	cbnz	r5, 80339c6 <_strtod_l+0x17e>
 80339be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80339c0:	4302      	orrs	r2, r0
 80339c2:	d095      	beq.n	80338f0 <_strtod_l+0xa8>
 80339c4:	2500      	movs	r5, #0
 80339c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80339c8:	1c62      	adds	r2, r4, #1
 80339ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80339cc:	7862      	ldrb	r2, [r4, #1]
 80339ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80339d0:	d077      	beq.n	8033ac2 <_strtod_l+0x27a>
 80339d2:	2a2d      	cmp	r2, #45	@ 0x2d
 80339d4:	d07b      	beq.n	8033ace <_strtod_l+0x286>
 80339d6:	f04f 0c00 	mov.w	ip, #0
 80339da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80339de:	2909      	cmp	r1, #9
 80339e0:	f240 8082 	bls.w	8033ae8 <_strtod_l+0x2a0>
 80339e4:	9419      	str	r4, [sp, #100]	@ 0x64
 80339e6:	f04f 0800 	mov.w	r8, #0
 80339ea:	e0a2      	b.n	8033b32 <_strtod_l+0x2ea>
 80339ec:	2300      	movs	r3, #0
 80339ee:	e7c7      	b.n	8033980 <_strtod_l+0x138>
 80339f0:	2f08      	cmp	r7, #8
 80339f2:	bfd5      	itete	le
 80339f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80339f6:	9908      	ldrgt	r1, [sp, #32]
 80339f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80339fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8033a00:	f100 0001 	add.w	r0, r0, #1
 8033a04:	bfd4      	ite	le
 8033a06:	930a      	strle	r3, [sp, #40]	@ 0x28
 8033a08:	9308      	strgt	r3, [sp, #32]
 8033a0a:	3701      	adds	r7, #1
 8033a0c:	9019      	str	r0, [sp, #100]	@ 0x64
 8033a0e:	e7bf      	b.n	8033990 <_strtod_l+0x148>
 8033a10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033a12:	1c5a      	adds	r2, r3, #1
 8033a14:	9219      	str	r2, [sp, #100]	@ 0x64
 8033a16:	785a      	ldrb	r2, [r3, #1]
 8033a18:	b37f      	cbz	r7, 8033a7a <_strtod_l+0x232>
 8033a1a:	4681      	mov	r9, r0
 8033a1c:	463d      	mov	r5, r7
 8033a1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8033a22:	2b09      	cmp	r3, #9
 8033a24:	d912      	bls.n	8033a4c <_strtod_l+0x204>
 8033a26:	2301      	movs	r3, #1
 8033a28:	e7c4      	b.n	80339b4 <_strtod_l+0x16c>
 8033a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033a2c:	1c5a      	adds	r2, r3, #1
 8033a2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8033a30:	785a      	ldrb	r2, [r3, #1]
 8033a32:	3001      	adds	r0, #1
 8033a34:	2a30      	cmp	r2, #48	@ 0x30
 8033a36:	d0f8      	beq.n	8033a2a <_strtod_l+0x1e2>
 8033a38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8033a3c:	2b08      	cmp	r3, #8
 8033a3e:	f200 84d3 	bhi.w	80343e8 <_strtod_l+0xba0>
 8033a42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033a44:	930c      	str	r3, [sp, #48]	@ 0x30
 8033a46:	4681      	mov	r9, r0
 8033a48:	2000      	movs	r0, #0
 8033a4a:	4605      	mov	r5, r0
 8033a4c:	3a30      	subs	r2, #48	@ 0x30
 8033a4e:	f100 0301 	add.w	r3, r0, #1
 8033a52:	d02a      	beq.n	8033aaa <_strtod_l+0x262>
 8033a54:	4499      	add	r9, r3
 8033a56:	eb00 0c05 	add.w	ip, r0, r5
 8033a5a:	462b      	mov	r3, r5
 8033a5c:	210a      	movs	r1, #10
 8033a5e:	4563      	cmp	r3, ip
 8033a60:	d10d      	bne.n	8033a7e <_strtod_l+0x236>
 8033a62:	1c69      	adds	r1, r5, #1
 8033a64:	4401      	add	r1, r0
 8033a66:	4428      	add	r0, r5
 8033a68:	2808      	cmp	r0, #8
 8033a6a:	dc16      	bgt.n	8033a9a <_strtod_l+0x252>
 8033a6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8033a6e:	230a      	movs	r3, #10
 8033a70:	fb03 2300 	mla	r3, r3, r0, r2
 8033a74:	930a      	str	r3, [sp, #40]	@ 0x28
 8033a76:	2300      	movs	r3, #0
 8033a78:	e018      	b.n	8033aac <_strtod_l+0x264>
 8033a7a:	4638      	mov	r0, r7
 8033a7c:	e7da      	b.n	8033a34 <_strtod_l+0x1ec>
 8033a7e:	2b08      	cmp	r3, #8
 8033a80:	f103 0301 	add.w	r3, r3, #1
 8033a84:	dc03      	bgt.n	8033a8e <_strtod_l+0x246>
 8033a86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8033a88:	434e      	muls	r6, r1
 8033a8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8033a8c:	e7e7      	b.n	8033a5e <_strtod_l+0x216>
 8033a8e:	2b10      	cmp	r3, #16
 8033a90:	bfde      	ittt	le
 8033a92:	9e08      	ldrle	r6, [sp, #32]
 8033a94:	434e      	mulle	r6, r1
 8033a96:	9608      	strle	r6, [sp, #32]
 8033a98:	e7e1      	b.n	8033a5e <_strtod_l+0x216>
 8033a9a:	280f      	cmp	r0, #15
 8033a9c:	dceb      	bgt.n	8033a76 <_strtod_l+0x22e>
 8033a9e:	9808      	ldr	r0, [sp, #32]
 8033aa0:	230a      	movs	r3, #10
 8033aa2:	fb03 2300 	mla	r3, r3, r0, r2
 8033aa6:	9308      	str	r3, [sp, #32]
 8033aa8:	e7e5      	b.n	8033a76 <_strtod_l+0x22e>
 8033aaa:	4629      	mov	r1, r5
 8033aac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033aae:	1c50      	adds	r0, r2, #1
 8033ab0:	9019      	str	r0, [sp, #100]	@ 0x64
 8033ab2:	7852      	ldrb	r2, [r2, #1]
 8033ab4:	4618      	mov	r0, r3
 8033ab6:	460d      	mov	r5, r1
 8033ab8:	e7b1      	b.n	8033a1e <_strtod_l+0x1d6>
 8033aba:	f04f 0900 	mov.w	r9, #0
 8033abe:	2301      	movs	r3, #1
 8033ac0:	e77d      	b.n	80339be <_strtod_l+0x176>
 8033ac2:	f04f 0c00 	mov.w	ip, #0
 8033ac6:	1ca2      	adds	r2, r4, #2
 8033ac8:	9219      	str	r2, [sp, #100]	@ 0x64
 8033aca:	78a2      	ldrb	r2, [r4, #2]
 8033acc:	e785      	b.n	80339da <_strtod_l+0x192>
 8033ace:	f04f 0c01 	mov.w	ip, #1
 8033ad2:	e7f8      	b.n	8033ac6 <_strtod_l+0x27e>
 8033ad4:	0803b43c 	.word	0x0803b43c
 8033ad8:	0803aea6 	.word	0x0803aea6
 8033adc:	7ff00000 	.word	0x7ff00000
 8033ae0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033ae2:	1c51      	adds	r1, r2, #1
 8033ae4:	9119      	str	r1, [sp, #100]	@ 0x64
 8033ae6:	7852      	ldrb	r2, [r2, #1]
 8033ae8:	2a30      	cmp	r2, #48	@ 0x30
 8033aea:	d0f9      	beq.n	8033ae0 <_strtod_l+0x298>
 8033aec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8033af0:	2908      	cmp	r1, #8
 8033af2:	f63f af78 	bhi.w	80339e6 <_strtod_l+0x19e>
 8033af6:	3a30      	subs	r2, #48	@ 0x30
 8033af8:	920e      	str	r2, [sp, #56]	@ 0x38
 8033afa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033afc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8033afe:	f04f 080a 	mov.w	r8, #10
 8033b02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8033b04:	1c56      	adds	r6, r2, #1
 8033b06:	9619      	str	r6, [sp, #100]	@ 0x64
 8033b08:	7852      	ldrb	r2, [r2, #1]
 8033b0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8033b0e:	f1be 0f09 	cmp.w	lr, #9
 8033b12:	d939      	bls.n	8033b88 <_strtod_l+0x340>
 8033b14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8033b16:	1a76      	subs	r6, r6, r1
 8033b18:	2e08      	cmp	r6, #8
 8033b1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8033b1e:	dc03      	bgt.n	8033b28 <_strtod_l+0x2e0>
 8033b20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8033b22:	4588      	cmp	r8, r1
 8033b24:	bfa8      	it	ge
 8033b26:	4688      	movge	r8, r1
 8033b28:	f1bc 0f00 	cmp.w	ip, #0
 8033b2c:	d001      	beq.n	8033b32 <_strtod_l+0x2ea>
 8033b2e:	f1c8 0800 	rsb	r8, r8, #0
 8033b32:	2d00      	cmp	r5, #0
 8033b34:	d14e      	bne.n	8033bd4 <_strtod_l+0x38c>
 8033b36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8033b38:	4308      	orrs	r0, r1
 8033b3a:	f47f aebe 	bne.w	80338ba <_strtod_l+0x72>
 8033b3e:	2b00      	cmp	r3, #0
 8033b40:	f47f aed6 	bne.w	80338f0 <_strtod_l+0xa8>
 8033b44:	2a69      	cmp	r2, #105	@ 0x69
 8033b46:	d028      	beq.n	8033b9a <_strtod_l+0x352>
 8033b48:	dc25      	bgt.n	8033b96 <_strtod_l+0x34e>
 8033b4a:	2a49      	cmp	r2, #73	@ 0x49
 8033b4c:	d025      	beq.n	8033b9a <_strtod_l+0x352>
 8033b4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8033b50:	f47f aece 	bne.w	80338f0 <_strtod_l+0xa8>
 8033b54:	499b      	ldr	r1, [pc, #620]	@ (8033dc4 <_strtod_l+0x57c>)
 8033b56:	a819      	add	r0, sp, #100	@ 0x64
 8033b58:	f001 fb18 	bl	803518c <__match>
 8033b5c:	2800      	cmp	r0, #0
 8033b5e:	f43f aec7 	beq.w	80338f0 <_strtod_l+0xa8>
 8033b62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033b64:	781b      	ldrb	r3, [r3, #0]
 8033b66:	2b28      	cmp	r3, #40	@ 0x28
 8033b68:	d12e      	bne.n	8033bc8 <_strtod_l+0x380>
 8033b6a:	4997      	ldr	r1, [pc, #604]	@ (8033dc8 <_strtod_l+0x580>)
 8033b6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8033b6e:	a819      	add	r0, sp, #100	@ 0x64
 8033b70:	f001 fb20 	bl	80351b4 <__hexnan>
 8033b74:	2805      	cmp	r0, #5
 8033b76:	d127      	bne.n	8033bc8 <_strtod_l+0x380>
 8033b78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8033b7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8033b7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8033b82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8033b86:	e698      	b.n	80338ba <_strtod_l+0x72>
 8033b88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8033b8a:	fb08 2101 	mla	r1, r8, r1, r2
 8033b8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8033b92:	920e      	str	r2, [sp, #56]	@ 0x38
 8033b94:	e7b5      	b.n	8033b02 <_strtod_l+0x2ba>
 8033b96:	2a6e      	cmp	r2, #110	@ 0x6e
 8033b98:	e7da      	b.n	8033b50 <_strtod_l+0x308>
 8033b9a:	498c      	ldr	r1, [pc, #560]	@ (8033dcc <_strtod_l+0x584>)
 8033b9c:	a819      	add	r0, sp, #100	@ 0x64
 8033b9e:	f001 faf5 	bl	803518c <__match>
 8033ba2:	2800      	cmp	r0, #0
 8033ba4:	f43f aea4 	beq.w	80338f0 <_strtod_l+0xa8>
 8033ba8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033baa:	4989      	ldr	r1, [pc, #548]	@ (8033dd0 <_strtod_l+0x588>)
 8033bac:	3b01      	subs	r3, #1
 8033bae:	a819      	add	r0, sp, #100	@ 0x64
 8033bb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8033bb2:	f001 faeb 	bl	803518c <__match>
 8033bb6:	b910      	cbnz	r0, 8033bbe <_strtod_l+0x376>
 8033bb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8033bba:	3301      	adds	r3, #1
 8033bbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8033bbe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8033de0 <_strtod_l+0x598>
 8033bc2:	f04f 0a00 	mov.w	sl, #0
 8033bc6:	e678      	b.n	80338ba <_strtod_l+0x72>
 8033bc8:	4882      	ldr	r0, [pc, #520]	@ (8033dd4 <_strtod_l+0x58c>)
 8033bca:	f001 f805 	bl	8034bd8 <nan>
 8033bce:	ec5b ab10 	vmov	sl, fp, d0
 8033bd2:	e672      	b.n	80338ba <_strtod_l+0x72>
 8033bd4:	eba8 0309 	sub.w	r3, r8, r9
 8033bd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8033bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8033bdc:	2f00      	cmp	r7, #0
 8033bde:	bf08      	it	eq
 8033be0:	462f      	moveq	r7, r5
 8033be2:	2d10      	cmp	r5, #16
 8033be4:	462c      	mov	r4, r5
 8033be6:	bfa8      	it	ge
 8033be8:	2410      	movge	r4, #16
 8033bea:	f7dc fca3 	bl	8010534 <__aeabi_ui2d>
 8033bee:	2d09      	cmp	r5, #9
 8033bf0:	4682      	mov	sl, r0
 8033bf2:	468b      	mov	fp, r1
 8033bf4:	dc13      	bgt.n	8033c1e <_strtod_l+0x3d6>
 8033bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033bf8:	2b00      	cmp	r3, #0
 8033bfa:	f43f ae5e 	beq.w	80338ba <_strtod_l+0x72>
 8033bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033c00:	dd78      	ble.n	8033cf4 <_strtod_l+0x4ac>
 8033c02:	2b16      	cmp	r3, #22
 8033c04:	dc5f      	bgt.n	8033cc6 <_strtod_l+0x47e>
 8033c06:	4974      	ldr	r1, [pc, #464]	@ (8033dd8 <_strtod_l+0x590>)
 8033c08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8033c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033c10:	4652      	mov	r2, sl
 8033c12:	465b      	mov	r3, fp
 8033c14:	f7dc fd08 	bl	8010628 <__aeabi_dmul>
 8033c18:	4682      	mov	sl, r0
 8033c1a:	468b      	mov	fp, r1
 8033c1c:	e64d      	b.n	80338ba <_strtod_l+0x72>
 8033c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8033dd8 <_strtod_l+0x590>)
 8033c20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8033c24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8033c28:	f7dc fcfe 	bl	8010628 <__aeabi_dmul>
 8033c2c:	4682      	mov	sl, r0
 8033c2e:	9808      	ldr	r0, [sp, #32]
 8033c30:	468b      	mov	fp, r1
 8033c32:	f7dc fc7f 	bl	8010534 <__aeabi_ui2d>
 8033c36:	4602      	mov	r2, r0
 8033c38:	460b      	mov	r3, r1
 8033c3a:	4650      	mov	r0, sl
 8033c3c:	4659      	mov	r1, fp
 8033c3e:	f7dc fb3d 	bl	80102bc <__adddf3>
 8033c42:	2d0f      	cmp	r5, #15
 8033c44:	4682      	mov	sl, r0
 8033c46:	468b      	mov	fp, r1
 8033c48:	ddd5      	ble.n	8033bf6 <_strtod_l+0x3ae>
 8033c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033c4c:	1b2c      	subs	r4, r5, r4
 8033c4e:	441c      	add	r4, r3
 8033c50:	2c00      	cmp	r4, #0
 8033c52:	f340 8096 	ble.w	8033d82 <_strtod_l+0x53a>
 8033c56:	f014 030f 	ands.w	r3, r4, #15
 8033c5a:	d00a      	beq.n	8033c72 <_strtod_l+0x42a>
 8033c5c:	495e      	ldr	r1, [pc, #376]	@ (8033dd8 <_strtod_l+0x590>)
 8033c5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8033c62:	4652      	mov	r2, sl
 8033c64:	465b      	mov	r3, fp
 8033c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033c6a:	f7dc fcdd 	bl	8010628 <__aeabi_dmul>
 8033c6e:	4682      	mov	sl, r0
 8033c70:	468b      	mov	fp, r1
 8033c72:	f034 040f 	bics.w	r4, r4, #15
 8033c76:	d073      	beq.n	8033d60 <_strtod_l+0x518>
 8033c78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8033c7c:	dd48      	ble.n	8033d10 <_strtod_l+0x4c8>
 8033c7e:	2400      	movs	r4, #0
 8033c80:	46a0      	mov	r8, r4
 8033c82:	940a      	str	r4, [sp, #40]	@ 0x28
 8033c84:	46a1      	mov	r9, r4
 8033c86:	9a05      	ldr	r2, [sp, #20]
 8033c88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8033de0 <_strtod_l+0x598>
 8033c8c:	2322      	movs	r3, #34	@ 0x22
 8033c8e:	6013      	str	r3, [r2, #0]
 8033c90:	f04f 0a00 	mov.w	sl, #0
 8033c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8033c96:	2b00      	cmp	r3, #0
 8033c98:	f43f ae0f 	beq.w	80338ba <_strtod_l+0x72>
 8033c9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033c9e:	9805      	ldr	r0, [sp, #20]
 8033ca0:	f7fe ff37 	bl	8032b12 <_Bfree>
 8033ca4:	9805      	ldr	r0, [sp, #20]
 8033ca6:	4649      	mov	r1, r9
 8033ca8:	f7fe ff33 	bl	8032b12 <_Bfree>
 8033cac:	9805      	ldr	r0, [sp, #20]
 8033cae:	4641      	mov	r1, r8
 8033cb0:	f7fe ff2f 	bl	8032b12 <_Bfree>
 8033cb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8033cb6:	9805      	ldr	r0, [sp, #20]
 8033cb8:	f7fe ff2b 	bl	8032b12 <_Bfree>
 8033cbc:	9805      	ldr	r0, [sp, #20]
 8033cbe:	4621      	mov	r1, r4
 8033cc0:	f7fe ff27 	bl	8032b12 <_Bfree>
 8033cc4:	e5f9      	b.n	80338ba <_strtod_l+0x72>
 8033cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8033cc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8033ccc:	4293      	cmp	r3, r2
 8033cce:	dbbc      	blt.n	8033c4a <_strtod_l+0x402>
 8033cd0:	4c41      	ldr	r4, [pc, #260]	@ (8033dd8 <_strtod_l+0x590>)
 8033cd2:	f1c5 050f 	rsb	r5, r5, #15
 8033cd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8033cda:	4652      	mov	r2, sl
 8033cdc:	465b      	mov	r3, fp
 8033cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033ce2:	f7dc fca1 	bl	8010628 <__aeabi_dmul>
 8033ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033ce8:	1b5d      	subs	r5, r3, r5
 8033cea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8033cee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8033cf2:	e78f      	b.n	8033c14 <_strtod_l+0x3cc>
 8033cf4:	3316      	adds	r3, #22
 8033cf6:	dba8      	blt.n	8033c4a <_strtod_l+0x402>
 8033cf8:	4b37      	ldr	r3, [pc, #220]	@ (8033dd8 <_strtod_l+0x590>)
 8033cfa:	eba9 0808 	sub.w	r8, r9, r8
 8033cfe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8033d02:	e9d8 2300 	ldrd	r2, r3, [r8]
 8033d06:	4650      	mov	r0, sl
 8033d08:	4659      	mov	r1, fp
 8033d0a:	f7dc fdb7 	bl	801087c <__aeabi_ddiv>
 8033d0e:	e783      	b.n	8033c18 <_strtod_l+0x3d0>
 8033d10:	4b32      	ldr	r3, [pc, #200]	@ (8033ddc <_strtod_l+0x594>)
 8033d12:	9308      	str	r3, [sp, #32]
 8033d14:	2300      	movs	r3, #0
 8033d16:	1124      	asrs	r4, r4, #4
 8033d18:	4650      	mov	r0, sl
 8033d1a:	4659      	mov	r1, fp
 8033d1c:	461e      	mov	r6, r3
 8033d1e:	2c01      	cmp	r4, #1
 8033d20:	dc21      	bgt.n	8033d66 <_strtod_l+0x51e>
 8033d22:	b10b      	cbz	r3, 8033d28 <_strtod_l+0x4e0>
 8033d24:	4682      	mov	sl, r0
 8033d26:	468b      	mov	fp, r1
 8033d28:	492c      	ldr	r1, [pc, #176]	@ (8033ddc <_strtod_l+0x594>)
 8033d2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8033d2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8033d32:	4652      	mov	r2, sl
 8033d34:	465b      	mov	r3, fp
 8033d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8033d3a:	f7dc fc75 	bl	8010628 <__aeabi_dmul>
 8033d3e:	4b28      	ldr	r3, [pc, #160]	@ (8033de0 <_strtod_l+0x598>)
 8033d40:	460a      	mov	r2, r1
 8033d42:	400b      	ands	r3, r1
 8033d44:	4927      	ldr	r1, [pc, #156]	@ (8033de4 <_strtod_l+0x59c>)
 8033d46:	428b      	cmp	r3, r1
 8033d48:	4682      	mov	sl, r0
 8033d4a:	d898      	bhi.n	8033c7e <_strtod_l+0x436>
 8033d4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8033d50:	428b      	cmp	r3, r1
 8033d52:	bf86      	itte	hi
 8033d54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8033de8 <_strtod_l+0x5a0>
 8033d58:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8033d5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8033d60:	2300      	movs	r3, #0
 8033d62:	9308      	str	r3, [sp, #32]
 8033d64:	e07a      	b.n	8033e5c <_strtod_l+0x614>
 8033d66:	07e2      	lsls	r2, r4, #31
 8033d68:	d505      	bpl.n	8033d76 <_strtod_l+0x52e>
 8033d6a:	9b08      	ldr	r3, [sp, #32]
 8033d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8033d70:	f7dc fc5a 	bl	8010628 <__aeabi_dmul>
 8033d74:	2301      	movs	r3, #1
 8033d76:	9a08      	ldr	r2, [sp, #32]
 8033d78:	3208      	adds	r2, #8
 8033d7a:	3601      	adds	r6, #1
 8033d7c:	1064      	asrs	r4, r4, #1
 8033d7e:	9208      	str	r2, [sp, #32]
 8033d80:	e7cd      	b.n	8033d1e <_strtod_l+0x4d6>
 8033d82:	d0ed      	beq.n	8033d60 <_strtod_l+0x518>
 8033d84:	4264      	negs	r4, r4
 8033d86:	f014 020f 	ands.w	r2, r4, #15
 8033d8a:	d00a      	beq.n	8033da2 <_strtod_l+0x55a>
 8033d8c:	4b12      	ldr	r3, [pc, #72]	@ (8033dd8 <_strtod_l+0x590>)
 8033d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8033d92:	4650      	mov	r0, sl
 8033d94:	4659      	mov	r1, fp
 8033d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8033d9a:	f7dc fd6f 	bl	801087c <__aeabi_ddiv>
 8033d9e:	4682      	mov	sl, r0
 8033da0:	468b      	mov	fp, r1
 8033da2:	1124      	asrs	r4, r4, #4
 8033da4:	d0dc      	beq.n	8033d60 <_strtod_l+0x518>
 8033da6:	2c1f      	cmp	r4, #31
 8033da8:	dd20      	ble.n	8033dec <_strtod_l+0x5a4>
 8033daa:	2400      	movs	r4, #0
 8033dac:	46a0      	mov	r8, r4
 8033dae:	940a      	str	r4, [sp, #40]	@ 0x28
 8033db0:	46a1      	mov	r9, r4
 8033db2:	9a05      	ldr	r2, [sp, #20]
 8033db4:	2322      	movs	r3, #34	@ 0x22
 8033db6:	f04f 0a00 	mov.w	sl, #0
 8033dba:	f04f 0b00 	mov.w	fp, #0
 8033dbe:	6013      	str	r3, [r2, #0]
 8033dc0:	e768      	b.n	8033c94 <_strtod_l+0x44c>
 8033dc2:	bf00      	nop
 8033dc4:	0803aea9 	.word	0x0803aea9
 8033dc8:	0803b428 	.word	0x0803b428
 8033dcc:	0803ad18 	.word	0x0803ad18
 8033dd0:	0803b1d4 	.word	0x0803b1d4
 8033dd4:	0803ad12 	.word	0x0803ad12
 8033dd8:	0803b360 	.word	0x0803b360
 8033ddc:	0803b338 	.word	0x0803b338
 8033de0:	7ff00000 	.word	0x7ff00000
 8033de4:	7ca00000 	.word	0x7ca00000
 8033de8:	7fefffff 	.word	0x7fefffff
 8033dec:	f014 0310 	ands.w	r3, r4, #16
 8033df0:	bf18      	it	ne
 8033df2:	236a      	movne	r3, #106	@ 0x6a
 8033df4:	4ea9      	ldr	r6, [pc, #676]	@ (803409c <_strtod_l+0x854>)
 8033df6:	9308      	str	r3, [sp, #32]
 8033df8:	4650      	mov	r0, sl
 8033dfa:	4659      	mov	r1, fp
 8033dfc:	2300      	movs	r3, #0
 8033dfe:	07e2      	lsls	r2, r4, #31
 8033e00:	d504      	bpl.n	8033e0c <_strtod_l+0x5c4>
 8033e02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8033e06:	f7dc fc0f 	bl	8010628 <__aeabi_dmul>
 8033e0a:	2301      	movs	r3, #1
 8033e0c:	1064      	asrs	r4, r4, #1
 8033e0e:	f106 0608 	add.w	r6, r6, #8
 8033e12:	d1f4      	bne.n	8033dfe <_strtod_l+0x5b6>
 8033e14:	b10b      	cbz	r3, 8033e1a <_strtod_l+0x5d2>
 8033e16:	4682      	mov	sl, r0
 8033e18:	468b      	mov	fp, r1
 8033e1a:	9b08      	ldr	r3, [sp, #32]
 8033e1c:	b1b3      	cbz	r3, 8033e4c <_strtod_l+0x604>
 8033e1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8033e22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8033e26:	2b00      	cmp	r3, #0
 8033e28:	4659      	mov	r1, fp
 8033e2a:	dd0f      	ble.n	8033e4c <_strtod_l+0x604>
 8033e2c:	2b1f      	cmp	r3, #31
 8033e2e:	dd55      	ble.n	8033edc <_strtod_l+0x694>
 8033e30:	2b34      	cmp	r3, #52	@ 0x34
 8033e32:	bfde      	ittt	le
 8033e34:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8033e38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8033e3c:	4093      	lslle	r3, r2
 8033e3e:	f04f 0a00 	mov.w	sl, #0
 8033e42:	bfcc      	ite	gt
 8033e44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8033e48:	ea03 0b01 	andle.w	fp, r3, r1
 8033e4c:	2200      	movs	r2, #0
 8033e4e:	2300      	movs	r3, #0
 8033e50:	4650      	mov	r0, sl
 8033e52:	4659      	mov	r1, fp
 8033e54:	f7dc fe50 	bl	8010af8 <__aeabi_dcmpeq>
 8033e58:	2800      	cmp	r0, #0
 8033e5a:	d1a6      	bne.n	8033daa <_strtod_l+0x562>
 8033e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8033e5e:	9300      	str	r3, [sp, #0]
 8033e60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8033e62:	9805      	ldr	r0, [sp, #20]
 8033e64:	462b      	mov	r3, r5
 8033e66:	463a      	mov	r2, r7
 8033e68:	f7fe fea2 	bl	8032bb0 <__s2b>
 8033e6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8033e6e:	2800      	cmp	r0, #0
 8033e70:	f43f af05 	beq.w	8033c7e <_strtod_l+0x436>
 8033e74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8033e76:	2a00      	cmp	r2, #0
 8033e78:	eba9 0308 	sub.w	r3, r9, r8
 8033e7c:	bfa8      	it	ge
 8033e7e:	2300      	movge	r3, #0
 8033e80:	9312      	str	r3, [sp, #72]	@ 0x48
 8033e82:	2400      	movs	r4, #0
 8033e84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8033e88:	9316      	str	r3, [sp, #88]	@ 0x58
 8033e8a:	46a0      	mov	r8, r4
 8033e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8033e8e:	9805      	ldr	r0, [sp, #20]
 8033e90:	6859      	ldr	r1, [r3, #4]
 8033e92:	f7fe fe19 	bl	8032ac8 <_Balloc>
 8033e96:	4681      	mov	r9, r0
 8033e98:	2800      	cmp	r0, #0
 8033e9a:	f43f aef4 	beq.w	8033c86 <_strtod_l+0x43e>
 8033e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8033ea0:	691a      	ldr	r2, [r3, #16]
 8033ea2:	3202      	adds	r2, #2
 8033ea4:	f103 010c 	add.w	r1, r3, #12
 8033ea8:	0092      	lsls	r2, r2, #2
 8033eaa:	300c      	adds	r0, #12
 8033eac:	f7f9 fadc 	bl	802d468 <memcpy>
 8033eb0:	ec4b ab10 	vmov	d0, sl, fp
 8033eb4:	9805      	ldr	r0, [sp, #20]
 8033eb6:	aa1c      	add	r2, sp, #112	@ 0x70
 8033eb8:	a91b      	add	r1, sp, #108	@ 0x6c
 8033eba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8033ebe:	f7ff f999 	bl	80331f4 <__d2b>
 8033ec2:	901a      	str	r0, [sp, #104]	@ 0x68
 8033ec4:	2800      	cmp	r0, #0
 8033ec6:	f43f aede 	beq.w	8033c86 <_strtod_l+0x43e>
 8033eca:	9805      	ldr	r0, [sp, #20]
 8033ecc:	2101      	movs	r1, #1
 8033ece:	f7fe ff05 	bl	8032cdc <__i2b>
 8033ed2:	4680      	mov	r8, r0
 8033ed4:	b948      	cbnz	r0, 8033eea <_strtod_l+0x6a2>
 8033ed6:	f04f 0800 	mov.w	r8, #0
 8033eda:	e6d4      	b.n	8033c86 <_strtod_l+0x43e>
 8033edc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8033ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8033ee4:	ea03 0a0a 	and.w	sl, r3, sl
 8033ee8:	e7b0      	b.n	8033e4c <_strtod_l+0x604>
 8033eea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8033eec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8033eee:	2d00      	cmp	r5, #0
 8033ef0:	bfab      	itete	ge
 8033ef2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8033ef4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8033ef6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8033ef8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8033efa:	bfac      	ite	ge
 8033efc:	18ef      	addge	r7, r5, r3
 8033efe:	1b5e      	sublt	r6, r3, r5
 8033f00:	9b08      	ldr	r3, [sp, #32]
 8033f02:	1aed      	subs	r5, r5, r3
 8033f04:	4415      	add	r5, r2
 8033f06:	4b66      	ldr	r3, [pc, #408]	@ (80340a0 <_strtod_l+0x858>)
 8033f08:	3d01      	subs	r5, #1
 8033f0a:	429d      	cmp	r5, r3
 8033f0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8033f10:	da50      	bge.n	8033fb4 <_strtod_l+0x76c>
 8033f12:	1b5b      	subs	r3, r3, r5
 8033f14:	2b1f      	cmp	r3, #31
 8033f16:	eba2 0203 	sub.w	r2, r2, r3
 8033f1a:	f04f 0101 	mov.w	r1, #1
 8033f1e:	dc3d      	bgt.n	8033f9c <_strtod_l+0x754>
 8033f20:	fa01 f303 	lsl.w	r3, r1, r3
 8033f24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8033f26:	2300      	movs	r3, #0
 8033f28:	9310      	str	r3, [sp, #64]	@ 0x40
 8033f2a:	18bd      	adds	r5, r7, r2
 8033f2c:	9b08      	ldr	r3, [sp, #32]
 8033f2e:	42af      	cmp	r7, r5
 8033f30:	4416      	add	r6, r2
 8033f32:	441e      	add	r6, r3
 8033f34:	463b      	mov	r3, r7
 8033f36:	bfa8      	it	ge
 8033f38:	462b      	movge	r3, r5
 8033f3a:	42b3      	cmp	r3, r6
 8033f3c:	bfa8      	it	ge
 8033f3e:	4633      	movge	r3, r6
 8033f40:	2b00      	cmp	r3, #0
 8033f42:	bfc2      	ittt	gt
 8033f44:	1aed      	subgt	r5, r5, r3
 8033f46:	1af6      	subgt	r6, r6, r3
 8033f48:	1aff      	subgt	r7, r7, r3
 8033f4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8033f4c:	2b00      	cmp	r3, #0
 8033f4e:	dd16      	ble.n	8033f7e <_strtod_l+0x736>
 8033f50:	4641      	mov	r1, r8
 8033f52:	9805      	ldr	r0, [sp, #20]
 8033f54:	461a      	mov	r2, r3
 8033f56:	f7fe ff81 	bl	8032e5c <__pow5mult>
 8033f5a:	4680      	mov	r8, r0
 8033f5c:	2800      	cmp	r0, #0
 8033f5e:	d0ba      	beq.n	8033ed6 <_strtod_l+0x68e>
 8033f60:	4601      	mov	r1, r0
 8033f62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8033f64:	9805      	ldr	r0, [sp, #20]
 8033f66:	f7fe fecf 	bl	8032d08 <__multiply>
 8033f6a:	900e      	str	r0, [sp, #56]	@ 0x38
 8033f6c:	2800      	cmp	r0, #0
 8033f6e:	f43f ae8a 	beq.w	8033c86 <_strtod_l+0x43e>
 8033f72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033f74:	9805      	ldr	r0, [sp, #20]
 8033f76:	f7fe fdcc 	bl	8032b12 <_Bfree>
 8033f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033f7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8033f7e:	2d00      	cmp	r5, #0
 8033f80:	dc1d      	bgt.n	8033fbe <_strtod_l+0x776>
 8033f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033f84:	2b00      	cmp	r3, #0
 8033f86:	dd23      	ble.n	8033fd0 <_strtod_l+0x788>
 8033f88:	4649      	mov	r1, r9
 8033f8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8033f8c:	9805      	ldr	r0, [sp, #20]
 8033f8e:	f7fe ff65 	bl	8032e5c <__pow5mult>
 8033f92:	4681      	mov	r9, r0
 8033f94:	b9e0      	cbnz	r0, 8033fd0 <_strtod_l+0x788>
 8033f96:	f04f 0900 	mov.w	r9, #0
 8033f9a:	e674      	b.n	8033c86 <_strtod_l+0x43e>
 8033f9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8033fa0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8033fa4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8033fa8:	35e2      	adds	r5, #226	@ 0xe2
 8033faa:	fa01 f305 	lsl.w	r3, r1, r5
 8033fae:	9310      	str	r3, [sp, #64]	@ 0x40
 8033fb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8033fb2:	e7ba      	b.n	8033f2a <_strtod_l+0x6e2>
 8033fb4:	2300      	movs	r3, #0
 8033fb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8033fb8:	2301      	movs	r3, #1
 8033fba:	9313      	str	r3, [sp, #76]	@ 0x4c
 8033fbc:	e7b5      	b.n	8033f2a <_strtod_l+0x6e2>
 8033fbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033fc0:	9805      	ldr	r0, [sp, #20]
 8033fc2:	462a      	mov	r2, r5
 8033fc4:	f7fe ff8a 	bl	8032edc <__lshift>
 8033fc8:	901a      	str	r0, [sp, #104]	@ 0x68
 8033fca:	2800      	cmp	r0, #0
 8033fcc:	d1d9      	bne.n	8033f82 <_strtod_l+0x73a>
 8033fce:	e65a      	b.n	8033c86 <_strtod_l+0x43e>
 8033fd0:	2e00      	cmp	r6, #0
 8033fd2:	dd07      	ble.n	8033fe4 <_strtod_l+0x79c>
 8033fd4:	4649      	mov	r1, r9
 8033fd6:	9805      	ldr	r0, [sp, #20]
 8033fd8:	4632      	mov	r2, r6
 8033fda:	f7fe ff7f 	bl	8032edc <__lshift>
 8033fde:	4681      	mov	r9, r0
 8033fe0:	2800      	cmp	r0, #0
 8033fe2:	d0d8      	beq.n	8033f96 <_strtod_l+0x74e>
 8033fe4:	2f00      	cmp	r7, #0
 8033fe6:	dd08      	ble.n	8033ffa <_strtod_l+0x7b2>
 8033fe8:	4641      	mov	r1, r8
 8033fea:	9805      	ldr	r0, [sp, #20]
 8033fec:	463a      	mov	r2, r7
 8033fee:	f7fe ff75 	bl	8032edc <__lshift>
 8033ff2:	4680      	mov	r8, r0
 8033ff4:	2800      	cmp	r0, #0
 8033ff6:	f43f ae46 	beq.w	8033c86 <_strtod_l+0x43e>
 8033ffa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8033ffc:	9805      	ldr	r0, [sp, #20]
 8033ffe:	464a      	mov	r2, r9
 8034000:	f7fe fff4 	bl	8032fec <__mdiff>
 8034004:	4604      	mov	r4, r0
 8034006:	2800      	cmp	r0, #0
 8034008:	f43f ae3d 	beq.w	8033c86 <_strtod_l+0x43e>
 803400c:	68c3      	ldr	r3, [r0, #12]
 803400e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8034010:	2300      	movs	r3, #0
 8034012:	60c3      	str	r3, [r0, #12]
 8034014:	4641      	mov	r1, r8
 8034016:	f7fe ffcd 	bl	8032fb4 <__mcmp>
 803401a:	2800      	cmp	r0, #0
 803401c:	da46      	bge.n	80340ac <_strtod_l+0x864>
 803401e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034020:	ea53 030a 	orrs.w	r3, r3, sl
 8034024:	d16c      	bne.n	8034100 <_strtod_l+0x8b8>
 8034026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803402a:	2b00      	cmp	r3, #0
 803402c:	d168      	bne.n	8034100 <_strtod_l+0x8b8>
 803402e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034032:	0d1b      	lsrs	r3, r3, #20
 8034034:	051b      	lsls	r3, r3, #20
 8034036:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 803403a:	d961      	bls.n	8034100 <_strtod_l+0x8b8>
 803403c:	6963      	ldr	r3, [r4, #20]
 803403e:	b913      	cbnz	r3, 8034046 <_strtod_l+0x7fe>
 8034040:	6923      	ldr	r3, [r4, #16]
 8034042:	2b01      	cmp	r3, #1
 8034044:	dd5c      	ble.n	8034100 <_strtod_l+0x8b8>
 8034046:	4621      	mov	r1, r4
 8034048:	2201      	movs	r2, #1
 803404a:	9805      	ldr	r0, [sp, #20]
 803404c:	f7fe ff46 	bl	8032edc <__lshift>
 8034050:	4641      	mov	r1, r8
 8034052:	4604      	mov	r4, r0
 8034054:	f7fe ffae 	bl	8032fb4 <__mcmp>
 8034058:	2800      	cmp	r0, #0
 803405a:	dd51      	ble.n	8034100 <_strtod_l+0x8b8>
 803405c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8034060:	9a08      	ldr	r2, [sp, #32]
 8034062:	0d1b      	lsrs	r3, r3, #20
 8034064:	051b      	lsls	r3, r3, #20
 8034066:	2a00      	cmp	r2, #0
 8034068:	d06b      	beq.n	8034142 <_strtod_l+0x8fa>
 803406a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 803406e:	d868      	bhi.n	8034142 <_strtod_l+0x8fa>
 8034070:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8034074:	f67f ae9d 	bls.w	8033db2 <_strtod_l+0x56a>
 8034078:	4b0a      	ldr	r3, [pc, #40]	@ (80340a4 <_strtod_l+0x85c>)
 803407a:	4650      	mov	r0, sl
 803407c:	4659      	mov	r1, fp
 803407e:	2200      	movs	r2, #0
 8034080:	f7dc fad2 	bl	8010628 <__aeabi_dmul>
 8034084:	4b08      	ldr	r3, [pc, #32]	@ (80340a8 <_strtod_l+0x860>)
 8034086:	400b      	ands	r3, r1
 8034088:	4682      	mov	sl, r0
 803408a:	468b      	mov	fp, r1
 803408c:	2b00      	cmp	r3, #0
 803408e:	f47f ae05 	bne.w	8033c9c <_strtod_l+0x454>
 8034092:	9a05      	ldr	r2, [sp, #20]
 8034094:	2322      	movs	r3, #34	@ 0x22
 8034096:	6013      	str	r3, [r2, #0]
 8034098:	e600      	b.n	8033c9c <_strtod_l+0x454>
 803409a:	bf00      	nop
 803409c:	0803b450 	.word	0x0803b450
 80340a0:	fffffc02 	.word	0xfffffc02
 80340a4:	39500000 	.word	0x39500000
 80340a8:	7ff00000 	.word	0x7ff00000
 80340ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80340b0:	d165      	bne.n	803417e <_strtod_l+0x936>
 80340b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80340b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80340b8:	b35a      	cbz	r2, 8034112 <_strtod_l+0x8ca>
 80340ba:	4a9f      	ldr	r2, [pc, #636]	@ (8034338 <_strtod_l+0xaf0>)
 80340bc:	4293      	cmp	r3, r2
 80340be:	d12b      	bne.n	8034118 <_strtod_l+0x8d0>
 80340c0:	9b08      	ldr	r3, [sp, #32]
 80340c2:	4651      	mov	r1, sl
 80340c4:	b303      	cbz	r3, 8034108 <_strtod_l+0x8c0>
 80340c6:	4b9d      	ldr	r3, [pc, #628]	@ (803433c <_strtod_l+0xaf4>)
 80340c8:	465a      	mov	r2, fp
 80340ca:	4013      	ands	r3, r2
 80340cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80340d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80340d4:	d81b      	bhi.n	803410e <_strtod_l+0x8c6>
 80340d6:	0d1b      	lsrs	r3, r3, #20
 80340d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80340dc:	fa02 f303 	lsl.w	r3, r2, r3
 80340e0:	4299      	cmp	r1, r3
 80340e2:	d119      	bne.n	8034118 <_strtod_l+0x8d0>
 80340e4:	4b96      	ldr	r3, [pc, #600]	@ (8034340 <_strtod_l+0xaf8>)
 80340e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80340e8:	429a      	cmp	r2, r3
 80340ea:	d102      	bne.n	80340f2 <_strtod_l+0x8aa>
 80340ec:	3101      	adds	r1, #1
 80340ee:	f43f adca 	beq.w	8033c86 <_strtod_l+0x43e>
 80340f2:	4b92      	ldr	r3, [pc, #584]	@ (803433c <_strtod_l+0xaf4>)
 80340f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80340f6:	401a      	ands	r2, r3
 80340f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80340fc:	f04f 0a00 	mov.w	sl, #0
 8034100:	9b08      	ldr	r3, [sp, #32]
 8034102:	2b00      	cmp	r3, #0
 8034104:	d1b8      	bne.n	8034078 <_strtod_l+0x830>
 8034106:	e5c9      	b.n	8033c9c <_strtod_l+0x454>
 8034108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 803410c:	e7e8      	b.n	80340e0 <_strtod_l+0x898>
 803410e:	4613      	mov	r3, r2
 8034110:	e7e6      	b.n	80340e0 <_strtod_l+0x898>
 8034112:	ea53 030a 	orrs.w	r3, r3, sl
 8034116:	d0a1      	beq.n	803405c <_strtod_l+0x814>
 8034118:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803411a:	b1db      	cbz	r3, 8034154 <_strtod_l+0x90c>
 803411c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803411e:	4213      	tst	r3, r2
 8034120:	d0ee      	beq.n	8034100 <_strtod_l+0x8b8>
 8034122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034124:	9a08      	ldr	r2, [sp, #32]
 8034126:	4650      	mov	r0, sl
 8034128:	4659      	mov	r1, fp
 803412a:	b1bb      	cbz	r3, 803415c <_strtod_l+0x914>
 803412c:	f7ff fb6e 	bl	803380c <sulp>
 8034130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034134:	ec53 2b10 	vmov	r2, r3, d0
 8034138:	f7dc f8c0 	bl	80102bc <__adddf3>
 803413c:	4682      	mov	sl, r0
 803413e:	468b      	mov	fp, r1
 8034140:	e7de      	b.n	8034100 <_strtod_l+0x8b8>
 8034142:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8034146:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 803414a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 803414e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034152:	e7d5      	b.n	8034100 <_strtod_l+0x8b8>
 8034154:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8034156:	ea13 0f0a 	tst.w	r3, sl
 803415a:	e7e1      	b.n	8034120 <_strtod_l+0x8d8>
 803415c:	f7ff fb56 	bl	803380c <sulp>
 8034160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034164:	ec53 2b10 	vmov	r2, r3, d0
 8034168:	f7dc f8a6 	bl	80102b8 <__aeabi_dsub>
 803416c:	2200      	movs	r2, #0
 803416e:	2300      	movs	r3, #0
 8034170:	4682      	mov	sl, r0
 8034172:	468b      	mov	fp, r1
 8034174:	f7dc fcc0 	bl	8010af8 <__aeabi_dcmpeq>
 8034178:	2800      	cmp	r0, #0
 803417a:	d0c1      	beq.n	8034100 <_strtod_l+0x8b8>
 803417c:	e619      	b.n	8033db2 <_strtod_l+0x56a>
 803417e:	4641      	mov	r1, r8
 8034180:	4620      	mov	r0, r4
 8034182:	f7ff f88f 	bl	80332a4 <__ratio>
 8034186:	ec57 6b10 	vmov	r6, r7, d0
 803418a:	2200      	movs	r2, #0
 803418c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8034190:	4630      	mov	r0, r6
 8034192:	4639      	mov	r1, r7
 8034194:	f7dc fcc4 	bl	8010b20 <__aeabi_dcmple>
 8034198:	2800      	cmp	r0, #0
 803419a:	d06f      	beq.n	803427c <_strtod_l+0xa34>
 803419c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803419e:	2b00      	cmp	r3, #0
 80341a0:	d17a      	bne.n	8034298 <_strtod_l+0xa50>
 80341a2:	f1ba 0f00 	cmp.w	sl, #0
 80341a6:	d158      	bne.n	803425a <_strtod_l+0xa12>
 80341a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80341aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80341ae:	2b00      	cmp	r3, #0
 80341b0:	d15a      	bne.n	8034268 <_strtod_l+0xa20>
 80341b2:	4b64      	ldr	r3, [pc, #400]	@ (8034344 <_strtod_l+0xafc>)
 80341b4:	2200      	movs	r2, #0
 80341b6:	4630      	mov	r0, r6
 80341b8:	4639      	mov	r1, r7
 80341ba:	f7dc fca7 	bl	8010b0c <__aeabi_dcmplt>
 80341be:	2800      	cmp	r0, #0
 80341c0:	d159      	bne.n	8034276 <_strtod_l+0xa2e>
 80341c2:	4630      	mov	r0, r6
 80341c4:	4639      	mov	r1, r7
 80341c6:	4b60      	ldr	r3, [pc, #384]	@ (8034348 <_strtod_l+0xb00>)
 80341c8:	2200      	movs	r2, #0
 80341ca:	f7dc fa2d 	bl	8010628 <__aeabi_dmul>
 80341ce:	4606      	mov	r6, r0
 80341d0:	460f      	mov	r7, r1
 80341d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80341d6:	9606      	str	r6, [sp, #24]
 80341d8:	9307      	str	r3, [sp, #28]
 80341da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80341de:	4d57      	ldr	r5, [pc, #348]	@ (803433c <_strtod_l+0xaf4>)
 80341e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80341e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80341e6:	401d      	ands	r5, r3
 80341e8:	4b58      	ldr	r3, [pc, #352]	@ (803434c <_strtod_l+0xb04>)
 80341ea:	429d      	cmp	r5, r3
 80341ec:	f040 80b2 	bne.w	8034354 <_strtod_l+0xb0c>
 80341f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80341f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80341f6:	ec4b ab10 	vmov	d0, sl, fp
 80341fa:	f7fe ff8b 	bl	8033114 <__ulp>
 80341fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8034202:	ec51 0b10 	vmov	r0, r1, d0
 8034206:	f7dc fa0f 	bl	8010628 <__aeabi_dmul>
 803420a:	4652      	mov	r2, sl
 803420c:	465b      	mov	r3, fp
 803420e:	f7dc f855 	bl	80102bc <__adddf3>
 8034212:	460b      	mov	r3, r1
 8034214:	4949      	ldr	r1, [pc, #292]	@ (803433c <_strtod_l+0xaf4>)
 8034216:	4a4e      	ldr	r2, [pc, #312]	@ (8034350 <_strtod_l+0xb08>)
 8034218:	4019      	ands	r1, r3
 803421a:	4291      	cmp	r1, r2
 803421c:	4682      	mov	sl, r0
 803421e:	d942      	bls.n	80342a6 <_strtod_l+0xa5e>
 8034220:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8034222:	4b47      	ldr	r3, [pc, #284]	@ (8034340 <_strtod_l+0xaf8>)
 8034224:	429a      	cmp	r2, r3
 8034226:	d103      	bne.n	8034230 <_strtod_l+0x9e8>
 8034228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803422a:	3301      	adds	r3, #1
 803422c:	f43f ad2b 	beq.w	8033c86 <_strtod_l+0x43e>
 8034230:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8034340 <_strtod_l+0xaf8>
 8034234:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8034238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803423a:	9805      	ldr	r0, [sp, #20]
 803423c:	f7fe fc69 	bl	8032b12 <_Bfree>
 8034240:	9805      	ldr	r0, [sp, #20]
 8034242:	4649      	mov	r1, r9
 8034244:	f7fe fc65 	bl	8032b12 <_Bfree>
 8034248:	9805      	ldr	r0, [sp, #20]
 803424a:	4641      	mov	r1, r8
 803424c:	f7fe fc61 	bl	8032b12 <_Bfree>
 8034250:	9805      	ldr	r0, [sp, #20]
 8034252:	4621      	mov	r1, r4
 8034254:	f7fe fc5d 	bl	8032b12 <_Bfree>
 8034258:	e618      	b.n	8033e8c <_strtod_l+0x644>
 803425a:	f1ba 0f01 	cmp.w	sl, #1
 803425e:	d103      	bne.n	8034268 <_strtod_l+0xa20>
 8034260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034262:	2b00      	cmp	r3, #0
 8034264:	f43f ada5 	beq.w	8033db2 <_strtod_l+0x56a>
 8034268:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8034318 <_strtod_l+0xad0>
 803426c:	4f35      	ldr	r7, [pc, #212]	@ (8034344 <_strtod_l+0xafc>)
 803426e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8034272:	2600      	movs	r6, #0
 8034274:	e7b1      	b.n	80341da <_strtod_l+0x992>
 8034276:	4f34      	ldr	r7, [pc, #208]	@ (8034348 <_strtod_l+0xb00>)
 8034278:	2600      	movs	r6, #0
 803427a:	e7aa      	b.n	80341d2 <_strtod_l+0x98a>
 803427c:	4b32      	ldr	r3, [pc, #200]	@ (8034348 <_strtod_l+0xb00>)
 803427e:	4630      	mov	r0, r6
 8034280:	4639      	mov	r1, r7
 8034282:	2200      	movs	r2, #0
 8034284:	f7dc f9d0 	bl	8010628 <__aeabi_dmul>
 8034288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803428a:	4606      	mov	r6, r0
 803428c:	460f      	mov	r7, r1
 803428e:	2b00      	cmp	r3, #0
 8034290:	d09f      	beq.n	80341d2 <_strtod_l+0x98a>
 8034292:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8034296:	e7a0      	b.n	80341da <_strtod_l+0x992>
 8034298:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8034320 <_strtod_l+0xad8>
 803429c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80342a0:	ec57 6b17 	vmov	r6, r7, d7
 80342a4:	e799      	b.n	80341da <_strtod_l+0x992>
 80342a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80342aa:	9b08      	ldr	r3, [sp, #32]
 80342ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80342b0:	2b00      	cmp	r3, #0
 80342b2:	d1c1      	bne.n	8034238 <_strtod_l+0x9f0>
 80342b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80342b8:	0d1b      	lsrs	r3, r3, #20
 80342ba:	051b      	lsls	r3, r3, #20
 80342bc:	429d      	cmp	r5, r3
 80342be:	d1bb      	bne.n	8034238 <_strtod_l+0x9f0>
 80342c0:	4630      	mov	r0, r6
 80342c2:	4639      	mov	r1, r7
 80342c4:	f7dc fd74 	bl	8010db0 <__aeabi_d2lz>
 80342c8:	f7dc f980 	bl	80105cc <__aeabi_l2d>
 80342cc:	4602      	mov	r2, r0
 80342ce:	460b      	mov	r3, r1
 80342d0:	4630      	mov	r0, r6
 80342d2:	4639      	mov	r1, r7
 80342d4:	f7db fff0 	bl	80102b8 <__aeabi_dsub>
 80342d8:	460b      	mov	r3, r1
 80342da:	4602      	mov	r2, r0
 80342dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80342e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80342e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80342e6:	ea46 060a 	orr.w	r6, r6, sl
 80342ea:	431e      	orrs	r6, r3
 80342ec:	d06f      	beq.n	80343ce <_strtod_l+0xb86>
 80342ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8034328 <_strtod_l+0xae0>)
 80342f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80342f4:	f7dc fc0a 	bl	8010b0c <__aeabi_dcmplt>
 80342f8:	2800      	cmp	r0, #0
 80342fa:	f47f accf 	bne.w	8033c9c <_strtod_l+0x454>
 80342fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8034330 <_strtod_l+0xae8>)
 8034300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8034308:	f7dc fc1e 	bl	8010b48 <__aeabi_dcmpgt>
 803430c:	2800      	cmp	r0, #0
 803430e:	d093      	beq.n	8034238 <_strtod_l+0x9f0>
 8034310:	e4c4      	b.n	8033c9c <_strtod_l+0x454>
 8034312:	bf00      	nop
 8034314:	f3af 8000 	nop.w
 8034318:	00000000 	.word	0x00000000
 803431c:	bff00000 	.word	0xbff00000
 8034320:	00000000 	.word	0x00000000
 8034324:	3ff00000 	.word	0x3ff00000
 8034328:	94a03595 	.word	0x94a03595
 803432c:	3fdfffff 	.word	0x3fdfffff
 8034330:	35afe535 	.word	0x35afe535
 8034334:	3fe00000 	.word	0x3fe00000
 8034338:	000fffff 	.word	0x000fffff
 803433c:	7ff00000 	.word	0x7ff00000
 8034340:	7fefffff 	.word	0x7fefffff
 8034344:	3ff00000 	.word	0x3ff00000
 8034348:	3fe00000 	.word	0x3fe00000
 803434c:	7fe00000 	.word	0x7fe00000
 8034350:	7c9fffff 	.word	0x7c9fffff
 8034354:	9b08      	ldr	r3, [sp, #32]
 8034356:	b323      	cbz	r3, 80343a2 <_strtod_l+0xb5a>
 8034358:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 803435c:	d821      	bhi.n	80343a2 <_strtod_l+0xb5a>
 803435e:	a328      	add	r3, pc, #160	@ (adr r3, 8034400 <_strtod_l+0xbb8>)
 8034360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8034364:	4630      	mov	r0, r6
 8034366:	4639      	mov	r1, r7
 8034368:	f7dc fbda 	bl	8010b20 <__aeabi_dcmple>
 803436c:	b1a0      	cbz	r0, 8034398 <_strtod_l+0xb50>
 803436e:	4639      	mov	r1, r7
 8034370:	4630      	mov	r0, r6
 8034372:	f7dc fc31 	bl	8010bd8 <__aeabi_d2uiz>
 8034376:	2801      	cmp	r0, #1
 8034378:	bf38      	it	cc
 803437a:	2001      	movcc	r0, #1
 803437c:	f7dc f8da 	bl	8010534 <__aeabi_ui2d>
 8034380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034382:	4606      	mov	r6, r0
 8034384:	460f      	mov	r7, r1
 8034386:	b9fb      	cbnz	r3, 80343c8 <_strtod_l+0xb80>
 8034388:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803438c:	9014      	str	r0, [sp, #80]	@ 0x50
 803438e:	9315      	str	r3, [sp, #84]	@ 0x54
 8034390:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8034394:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8034398:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803439a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803439e:	1b5b      	subs	r3, r3, r5
 80343a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80343a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80343a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80343aa:	f7fe feb3 	bl	8033114 <__ulp>
 80343ae:	4650      	mov	r0, sl
 80343b0:	ec53 2b10 	vmov	r2, r3, d0
 80343b4:	4659      	mov	r1, fp
 80343b6:	f7dc f937 	bl	8010628 <__aeabi_dmul>
 80343ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80343be:	f7db ff7d 	bl	80102bc <__adddf3>
 80343c2:	4682      	mov	sl, r0
 80343c4:	468b      	mov	fp, r1
 80343c6:	e770      	b.n	80342aa <_strtod_l+0xa62>
 80343c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80343cc:	e7e0      	b.n	8034390 <_strtod_l+0xb48>
 80343ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8034408 <_strtod_l+0xbc0>)
 80343d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80343d4:	f7dc fb9a 	bl	8010b0c <__aeabi_dcmplt>
 80343d8:	e798      	b.n	803430c <_strtod_l+0xac4>
 80343da:	2300      	movs	r3, #0
 80343dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80343de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80343e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80343e2:	6013      	str	r3, [r2, #0]
 80343e4:	f7ff ba6d 	b.w	80338c2 <_strtod_l+0x7a>
 80343e8:	2a65      	cmp	r2, #101	@ 0x65
 80343ea:	f43f ab66 	beq.w	8033aba <_strtod_l+0x272>
 80343ee:	2a45      	cmp	r2, #69	@ 0x45
 80343f0:	f43f ab63 	beq.w	8033aba <_strtod_l+0x272>
 80343f4:	2301      	movs	r3, #1
 80343f6:	f7ff bb9e 	b.w	8033b36 <_strtod_l+0x2ee>
 80343fa:	bf00      	nop
 80343fc:	f3af 8000 	nop.w
 8034400:	ffc00000 	.word	0xffc00000
 8034404:	41dfffff 	.word	0x41dfffff
 8034408:	94a03595 	.word	0x94a03595
 803440c:	3fcfffff 	.word	0x3fcfffff

08034410 <_strtod_r>:
 8034410:	4b01      	ldr	r3, [pc, #4]	@ (8034418 <_strtod_r+0x8>)
 8034412:	f7ff ba19 	b.w	8033848 <_strtod_l>
 8034416:	bf00      	nop
 8034418:	2000016c 	.word	0x2000016c

0803441c <_strtoul_l.constprop.0>:
 803441c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8034420:	4e34      	ldr	r6, [pc, #208]	@ (80344f4 <_strtoul_l.constprop.0+0xd8>)
 8034422:	4686      	mov	lr, r0
 8034424:	460d      	mov	r5, r1
 8034426:	4628      	mov	r0, r5
 8034428:	f815 4b01 	ldrb.w	r4, [r5], #1
 803442c:	5d37      	ldrb	r7, [r6, r4]
 803442e:	f017 0708 	ands.w	r7, r7, #8
 8034432:	d1f8      	bne.n	8034426 <_strtoul_l.constprop.0+0xa>
 8034434:	2c2d      	cmp	r4, #45	@ 0x2d
 8034436:	d12f      	bne.n	8034498 <_strtoul_l.constprop.0+0x7c>
 8034438:	782c      	ldrb	r4, [r5, #0]
 803443a:	2701      	movs	r7, #1
 803443c:	1c85      	adds	r5, r0, #2
 803443e:	f033 0010 	bics.w	r0, r3, #16
 8034442:	d109      	bne.n	8034458 <_strtoul_l.constprop.0+0x3c>
 8034444:	2c30      	cmp	r4, #48	@ 0x30
 8034446:	d12c      	bne.n	80344a2 <_strtoul_l.constprop.0+0x86>
 8034448:	7828      	ldrb	r0, [r5, #0]
 803444a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 803444e:	2858      	cmp	r0, #88	@ 0x58
 8034450:	d127      	bne.n	80344a2 <_strtoul_l.constprop.0+0x86>
 8034452:	786c      	ldrb	r4, [r5, #1]
 8034454:	2310      	movs	r3, #16
 8034456:	3502      	adds	r5, #2
 8034458:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 803445c:	2600      	movs	r6, #0
 803445e:	fbb8 f8f3 	udiv	r8, r8, r3
 8034462:	fb03 f908 	mul.w	r9, r3, r8
 8034466:	ea6f 0909 	mvn.w	r9, r9
 803446a:	4630      	mov	r0, r6
 803446c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8034470:	f1bc 0f09 	cmp.w	ip, #9
 8034474:	d81c      	bhi.n	80344b0 <_strtoul_l.constprop.0+0x94>
 8034476:	4664      	mov	r4, ip
 8034478:	42a3      	cmp	r3, r4
 803447a:	dd2a      	ble.n	80344d2 <_strtoul_l.constprop.0+0xb6>
 803447c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8034480:	d007      	beq.n	8034492 <_strtoul_l.constprop.0+0x76>
 8034482:	4580      	cmp	r8, r0
 8034484:	d322      	bcc.n	80344cc <_strtoul_l.constprop.0+0xb0>
 8034486:	d101      	bne.n	803448c <_strtoul_l.constprop.0+0x70>
 8034488:	45a1      	cmp	r9, r4
 803448a:	db1f      	blt.n	80344cc <_strtoul_l.constprop.0+0xb0>
 803448c:	fb00 4003 	mla	r0, r0, r3, r4
 8034490:	2601      	movs	r6, #1
 8034492:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034496:	e7e9      	b.n	803446c <_strtoul_l.constprop.0+0x50>
 8034498:	2c2b      	cmp	r4, #43	@ 0x2b
 803449a:	bf04      	itt	eq
 803449c:	782c      	ldrbeq	r4, [r5, #0]
 803449e:	1c85      	addeq	r5, r0, #2
 80344a0:	e7cd      	b.n	803443e <_strtoul_l.constprop.0+0x22>
 80344a2:	2b00      	cmp	r3, #0
 80344a4:	d1d8      	bne.n	8034458 <_strtoul_l.constprop.0+0x3c>
 80344a6:	2c30      	cmp	r4, #48	@ 0x30
 80344a8:	bf0c      	ite	eq
 80344aa:	2308      	moveq	r3, #8
 80344ac:	230a      	movne	r3, #10
 80344ae:	e7d3      	b.n	8034458 <_strtoul_l.constprop.0+0x3c>
 80344b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80344b4:	f1bc 0f19 	cmp.w	ip, #25
 80344b8:	d801      	bhi.n	80344be <_strtoul_l.constprop.0+0xa2>
 80344ba:	3c37      	subs	r4, #55	@ 0x37
 80344bc:	e7dc      	b.n	8034478 <_strtoul_l.constprop.0+0x5c>
 80344be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80344c2:	f1bc 0f19 	cmp.w	ip, #25
 80344c6:	d804      	bhi.n	80344d2 <_strtoul_l.constprop.0+0xb6>
 80344c8:	3c57      	subs	r4, #87	@ 0x57
 80344ca:	e7d5      	b.n	8034478 <_strtoul_l.constprop.0+0x5c>
 80344cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80344d0:	e7df      	b.n	8034492 <_strtoul_l.constprop.0+0x76>
 80344d2:	1c73      	adds	r3, r6, #1
 80344d4:	d106      	bne.n	80344e4 <_strtoul_l.constprop.0+0xc8>
 80344d6:	2322      	movs	r3, #34	@ 0x22
 80344d8:	f8ce 3000 	str.w	r3, [lr]
 80344dc:	4630      	mov	r0, r6
 80344de:	b932      	cbnz	r2, 80344ee <_strtoul_l.constprop.0+0xd2>
 80344e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80344e4:	b107      	cbz	r7, 80344e8 <_strtoul_l.constprop.0+0xcc>
 80344e6:	4240      	negs	r0, r0
 80344e8:	2a00      	cmp	r2, #0
 80344ea:	d0f9      	beq.n	80344e0 <_strtoul_l.constprop.0+0xc4>
 80344ec:	b106      	cbz	r6, 80344f0 <_strtoul_l.constprop.0+0xd4>
 80344ee:	1e69      	subs	r1, r5, #1
 80344f0:	6011      	str	r1, [r2, #0]
 80344f2:	e7f5      	b.n	80344e0 <_strtoul_l.constprop.0+0xc4>
 80344f4:	0803b0d1 	.word	0x0803b0d1

080344f8 <_strtoul_r>:
 80344f8:	f7ff bf90 	b.w	803441c <_strtoul_l.constprop.0>

080344fc <strtoul>:
 80344fc:	4613      	mov	r3, r2
 80344fe:	460a      	mov	r2, r1
 8034500:	4601      	mov	r1, r0
 8034502:	4802      	ldr	r0, [pc, #8]	@ (803450c <strtoul+0x10>)
 8034504:	6800      	ldr	r0, [r0, #0]
 8034506:	f7ff bf89 	b.w	803441c <_strtoul_l.constprop.0>
 803450a:	bf00      	nop
 803450c:	200002d8 	.word	0x200002d8

08034510 <__submore>:
 8034510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8034514:	460c      	mov	r4, r1
 8034516:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8034518:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 803451c:	4299      	cmp	r1, r3
 803451e:	d11d      	bne.n	803455c <__submore+0x4c>
 8034520:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8034524:	f7f9 ffba 	bl	802e49c <_malloc_r>
 8034528:	b918      	cbnz	r0, 8034532 <__submore+0x22>
 803452a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 803452e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8034536:	6363      	str	r3, [r4, #52]	@ 0x34
 8034538:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 803453c:	6320      	str	r0, [r4, #48]	@ 0x30
 803453e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8034542:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8034546:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 803454a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 803454e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8034552:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8034556:	6020      	str	r0, [r4, #0]
 8034558:	2000      	movs	r0, #0
 803455a:	e7e8      	b.n	803452e <__submore+0x1e>
 803455c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 803455e:	0077      	lsls	r7, r6, #1
 8034560:	463a      	mov	r2, r7
 8034562:	f7fe ffab 	bl	80334bc <_realloc_r>
 8034566:	4605      	mov	r5, r0
 8034568:	2800      	cmp	r0, #0
 803456a:	d0de      	beq.n	803452a <__submore+0x1a>
 803456c:	eb00 0806 	add.w	r8, r0, r6
 8034570:	4601      	mov	r1, r0
 8034572:	4632      	mov	r2, r6
 8034574:	4640      	mov	r0, r8
 8034576:	f7f8 ff77 	bl	802d468 <memcpy>
 803457a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 803457e:	f8c4 8000 	str.w	r8, [r4]
 8034582:	e7e9      	b.n	8034558 <__submore+0x48>

08034584 <__ascii_wctomb>:
 8034584:	4603      	mov	r3, r0
 8034586:	4608      	mov	r0, r1
 8034588:	b141      	cbz	r1, 803459c <__ascii_wctomb+0x18>
 803458a:	2aff      	cmp	r2, #255	@ 0xff
 803458c:	d904      	bls.n	8034598 <__ascii_wctomb+0x14>
 803458e:	228a      	movs	r2, #138	@ 0x8a
 8034590:	601a      	str	r2, [r3, #0]
 8034592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034596:	4770      	bx	lr
 8034598:	700a      	strb	r2, [r1, #0]
 803459a:	2001      	movs	r0, #1
 803459c:	4770      	bx	lr

0803459e <__swbuf_r>:
 803459e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80345a0:	460e      	mov	r6, r1
 80345a2:	4614      	mov	r4, r2
 80345a4:	4605      	mov	r5, r0
 80345a6:	b118      	cbz	r0, 80345b0 <__swbuf_r+0x12>
 80345a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80345aa:	b90b      	cbnz	r3, 80345b0 <__swbuf_r+0x12>
 80345ac:	f7f7 fa7a 	bl	802baa4 <__sinit>
 80345b0:	69a3      	ldr	r3, [r4, #24]
 80345b2:	60a3      	str	r3, [r4, #8]
 80345b4:	89a3      	ldrh	r3, [r4, #12]
 80345b6:	0719      	lsls	r1, r3, #28
 80345b8:	d501      	bpl.n	80345be <__swbuf_r+0x20>
 80345ba:	6923      	ldr	r3, [r4, #16]
 80345bc:	b943      	cbnz	r3, 80345d0 <__swbuf_r+0x32>
 80345be:	4621      	mov	r1, r4
 80345c0:	4628      	mov	r0, r5
 80345c2:	f7f7 fc2b 	bl	802be1c <__swsetup_r>
 80345c6:	b118      	cbz	r0, 80345d0 <__swbuf_r+0x32>
 80345c8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80345cc:	4638      	mov	r0, r7
 80345ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80345d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80345d4:	b2f6      	uxtb	r6, r6
 80345d6:	049a      	lsls	r2, r3, #18
 80345d8:	4637      	mov	r7, r6
 80345da:	d406      	bmi.n	80345ea <__swbuf_r+0x4c>
 80345dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80345e0:	81a3      	strh	r3, [r4, #12]
 80345e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80345e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80345e8:	6663      	str	r3, [r4, #100]	@ 0x64
 80345ea:	6823      	ldr	r3, [r4, #0]
 80345ec:	6922      	ldr	r2, [r4, #16]
 80345ee:	1a98      	subs	r0, r3, r2
 80345f0:	6963      	ldr	r3, [r4, #20]
 80345f2:	4283      	cmp	r3, r0
 80345f4:	dc05      	bgt.n	8034602 <__swbuf_r+0x64>
 80345f6:	4621      	mov	r1, r4
 80345f8:	4628      	mov	r0, r5
 80345fa:	f7f7 f911 	bl	802b820 <_fflush_r>
 80345fe:	2800      	cmp	r0, #0
 8034600:	d1e2      	bne.n	80345c8 <__swbuf_r+0x2a>
 8034602:	68a3      	ldr	r3, [r4, #8]
 8034604:	3b01      	subs	r3, #1
 8034606:	60a3      	str	r3, [r4, #8]
 8034608:	6823      	ldr	r3, [r4, #0]
 803460a:	1c5a      	adds	r2, r3, #1
 803460c:	6022      	str	r2, [r4, #0]
 803460e:	701e      	strb	r6, [r3, #0]
 8034610:	6962      	ldr	r2, [r4, #20]
 8034612:	1c43      	adds	r3, r0, #1
 8034614:	429a      	cmp	r2, r3
 8034616:	d004      	beq.n	8034622 <__swbuf_r+0x84>
 8034618:	89a3      	ldrh	r3, [r4, #12]
 803461a:	07db      	lsls	r3, r3, #31
 803461c:	d5d6      	bpl.n	80345cc <__swbuf_r+0x2e>
 803461e:	2e0a      	cmp	r6, #10
 8034620:	d1d4      	bne.n	80345cc <__swbuf_r+0x2e>
 8034622:	4621      	mov	r1, r4
 8034624:	4628      	mov	r0, r5
 8034626:	f7f7 f8fb 	bl	802b820 <_fflush_r>
 803462a:	2800      	cmp	r0, #0
 803462c:	d0ce      	beq.n	80345cc <__swbuf_r+0x2e>
 803462e:	e7cb      	b.n	80345c8 <__swbuf_r+0x2a>

08034630 <_raise_r>:
 8034630:	291f      	cmp	r1, #31
 8034632:	b538      	push	{r3, r4, r5, lr}
 8034634:	4605      	mov	r5, r0
 8034636:	460c      	mov	r4, r1
 8034638:	d904      	bls.n	8034644 <_raise_r+0x14>
 803463a:	2316      	movs	r3, #22
 803463c:	6003      	str	r3, [r0, #0]
 803463e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034642:	bd38      	pop	{r3, r4, r5, pc}
 8034644:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8034648:	b112      	cbz	r2, 8034650 <_raise_r+0x20>
 803464a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803464e:	b94b      	cbnz	r3, 8034664 <_raise_r+0x34>
 8034650:	4628      	mov	r0, r5
 8034652:	f000 f8fd 	bl	8034850 <_getpid_r>
 8034656:	4622      	mov	r2, r4
 8034658:	4601      	mov	r1, r0
 803465a:	4628      	mov	r0, r5
 803465c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8034660:	f000 b8e4 	b.w	803482c <_kill_r>
 8034664:	2b01      	cmp	r3, #1
 8034666:	d00a      	beq.n	803467e <_raise_r+0x4e>
 8034668:	1c59      	adds	r1, r3, #1
 803466a:	d103      	bne.n	8034674 <_raise_r+0x44>
 803466c:	2316      	movs	r3, #22
 803466e:	6003      	str	r3, [r0, #0]
 8034670:	2001      	movs	r0, #1
 8034672:	e7e6      	b.n	8034642 <_raise_r+0x12>
 8034674:	2100      	movs	r1, #0
 8034676:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803467a:	4620      	mov	r0, r4
 803467c:	4798      	blx	r3
 803467e:	2000      	movs	r0, #0
 8034680:	e7df      	b.n	8034642 <_raise_r+0x12>
	...

08034684 <raise>:
 8034684:	4b02      	ldr	r3, [pc, #8]	@ (8034690 <raise+0xc>)
 8034686:	4601      	mov	r1, r0
 8034688:	6818      	ldr	r0, [r3, #0]
 803468a:	f7ff bfd1 	b.w	8034630 <_raise_r>
 803468e:	bf00      	nop
 8034690:	200002d8 	.word	0x200002d8

08034694 <__gettzinfo>:
 8034694:	4800      	ldr	r0, [pc, #0]	@ (8034698 <__gettzinfo+0x4>)
 8034696:	4770      	bx	lr
 8034698:	20000818 	.word	0x20000818

0803469c <gmtime_r>:
 803469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80346a0:	4a4d      	ldr	r2, [pc, #308]	@ (80347d8 <gmtime_r+0x13c>)
 80346a2:	460c      	mov	r4, r1
 80346a4:	2300      	movs	r3, #0
 80346a6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80346aa:	f7dc fb05 	bl	8010cb8 <__aeabi_ldivmod>
 80346ae:	2a00      	cmp	r2, #0
 80346b0:	bfbc      	itt	lt
 80346b2:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 80346b6:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 80346ba:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80346be:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80346c2:	fbb2 f3f1 	udiv	r3, r2, r1
 80346c6:	fb01 2213 	mls	r2, r1, r3, r2
 80346ca:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 80346ce:	bfac      	ite	ge
 80346d0:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 80346d4:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 80346d8:	60a3      	str	r3, [r4, #8]
 80346da:	fbb2 f3f1 	udiv	r3, r2, r1
 80346de:	fb01 2213 	mls	r2, r1, r3, r2
 80346e2:	6063      	str	r3, [r4, #4]
 80346e4:	6022      	str	r2, [r4, #0]
 80346e6:	1cc3      	adds	r3, r0, #3
 80346e8:	2207      	movs	r2, #7
 80346ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80346ee:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80346f2:	1a9b      	subs	r3, r3, r2
 80346f4:	bf48      	it	mi
 80346f6:	3307      	addmi	r3, #7
 80346f8:	2800      	cmp	r0, #0
 80346fa:	61a3      	str	r3, [r4, #24]
 80346fc:	bfb8      	it	lt
 80346fe:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8034702:	4936      	ldr	r1, [pc, #216]	@ (80347dc <gmtime_r+0x140>)
 8034704:	bfae      	itee	ge
 8034706:	fb90 f1f1 	sdivge	r1, r0, r1
 803470a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 803470e:	fb93 f1f1 	sdivlt	r1, r3, r1
 8034712:	4b33      	ldr	r3, [pc, #204]	@ (80347e0 <gmtime_r+0x144>)
 8034714:	fb03 0001 	mla	r0, r3, r1, r0
 8034718:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 803471c:	fbb0 f3f3 	udiv	r3, r0, r3
 8034720:	4403      	add	r3, r0
 8034722:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8034726:	fbb0 f2fc 	udiv	r2, r0, ip
 803472a:	1a9b      	subs	r3, r3, r2
 803472c:	f240 176d 	movw	r7, #365	@ 0x16d
 8034730:	4a2c      	ldr	r2, [pc, #176]	@ (80347e4 <gmtime_r+0x148>)
 8034732:	fbb0 f2f2 	udiv	r2, r0, r2
 8034736:	2664      	movs	r6, #100	@ 0x64
 8034738:	1a9b      	subs	r3, r3, r2
 803473a:	fbb3 f2f7 	udiv	r2, r3, r7
 803473e:	fbb3 f3fc 	udiv	r3, r3, ip
 8034742:	fbb2 f5f6 	udiv	r5, r2, r6
 8034746:	1aeb      	subs	r3, r5, r3
 8034748:	4403      	add	r3, r0
 803474a:	fb07 3312 	mls	r3, r7, r2, r3
 803474e:	2099      	movs	r0, #153	@ 0x99
 8034750:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8034754:	3702      	adds	r7, #2
 8034756:	f103 0e01 	add.w	lr, r3, #1
 803475a:	fbb7 fcf0 	udiv	ip, r7, r0
 803475e:	fb00 f00c 	mul.w	r0, r0, ip
 8034762:	3002      	adds	r0, #2
 8034764:	f04f 0805 	mov.w	r8, #5
 8034768:	fbb0 f0f8 	udiv	r0, r0, r8
 803476c:	ebae 0000 	sub.w	r0, lr, r0
 8034770:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8034774:	4577      	cmp	r7, lr
 8034776:	bf8c      	ite	hi
 8034778:	f06f 0709 	mvnhi.w	r7, #9
 803477c:	2702      	movls	r7, #2
 803477e:	4467      	add	r7, ip
 8034780:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8034784:	fb0c 2101 	mla	r1, ip, r1, r2
 8034788:	2f01      	cmp	r7, #1
 803478a:	bf98      	it	ls
 803478c:	3101      	addls	r1, #1
 803478e:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8034792:	d30c      	bcc.n	80347ae <gmtime_r+0x112>
 8034794:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8034798:	61e3      	str	r3, [r4, #28]
 803479a:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 803479e:	2300      	movs	r3, #0
 80347a0:	60e0      	str	r0, [r4, #12]
 80347a2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80347a6:	6223      	str	r3, [r4, #32]
 80347a8:	4620      	mov	r0, r4
 80347aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80347ae:	f012 0f03 	tst.w	r2, #3
 80347b2:	d102      	bne.n	80347ba <gmtime_r+0x11e>
 80347b4:	fb06 2515 	mls	r5, r6, r5, r2
 80347b8:	b95d      	cbnz	r5, 80347d2 <gmtime_r+0x136>
 80347ba:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 80347be:	fbb2 f6f5 	udiv	r6, r2, r5
 80347c2:	fb05 2216 	mls	r2, r5, r6, r2
 80347c6:	fab2 f282 	clz	r2, r2
 80347ca:	0952      	lsrs	r2, r2, #5
 80347cc:	333b      	adds	r3, #59	@ 0x3b
 80347ce:	4413      	add	r3, r2
 80347d0:	e7e2      	b.n	8034798 <gmtime_r+0xfc>
 80347d2:	2201      	movs	r2, #1
 80347d4:	e7fa      	b.n	80347cc <gmtime_r+0x130>
 80347d6:	bf00      	nop
 80347d8:	00015180 	.word	0x00015180
 80347dc:	00023ab1 	.word	0x00023ab1
 80347e0:	fffdc54f 	.word	0xfffdc54f
 80347e4:	00023ab0 	.word	0x00023ab0

080347e8 <_fstat_r>:
 80347e8:	b538      	push	{r3, r4, r5, lr}
 80347ea:	4d07      	ldr	r5, [pc, #28]	@ (8034808 <_fstat_r+0x20>)
 80347ec:	2300      	movs	r3, #0
 80347ee:	4604      	mov	r4, r0
 80347f0:	4608      	mov	r0, r1
 80347f2:	4611      	mov	r1, r2
 80347f4:	602b      	str	r3, [r5, #0]
 80347f6:	f7dd fd8c 	bl	8012312 <_fstat>
 80347fa:	1c43      	adds	r3, r0, #1
 80347fc:	d102      	bne.n	8034804 <_fstat_r+0x1c>
 80347fe:	682b      	ldr	r3, [r5, #0]
 8034800:	b103      	cbz	r3, 8034804 <_fstat_r+0x1c>
 8034802:	6023      	str	r3, [r4, #0]
 8034804:	bd38      	pop	{r3, r4, r5, pc}
 8034806:	bf00      	nop
 8034808:	200198e4 	.word	0x200198e4

0803480c <_isatty_r>:
 803480c:	b538      	push	{r3, r4, r5, lr}
 803480e:	4d06      	ldr	r5, [pc, #24]	@ (8034828 <_isatty_r+0x1c>)
 8034810:	2300      	movs	r3, #0
 8034812:	4604      	mov	r4, r0
 8034814:	4608      	mov	r0, r1
 8034816:	602b      	str	r3, [r5, #0]
 8034818:	f7dd fd80 	bl	801231c <_isatty>
 803481c:	1c43      	adds	r3, r0, #1
 803481e:	d102      	bne.n	8034826 <_isatty_r+0x1a>
 8034820:	682b      	ldr	r3, [r5, #0]
 8034822:	b103      	cbz	r3, 8034826 <_isatty_r+0x1a>
 8034824:	6023      	str	r3, [r4, #0]
 8034826:	bd38      	pop	{r3, r4, r5, pc}
 8034828:	200198e4 	.word	0x200198e4

0803482c <_kill_r>:
 803482c:	b538      	push	{r3, r4, r5, lr}
 803482e:	4d07      	ldr	r5, [pc, #28]	@ (803484c <_kill_r+0x20>)
 8034830:	2300      	movs	r3, #0
 8034832:	4604      	mov	r4, r0
 8034834:	4608      	mov	r0, r1
 8034836:	4611      	mov	r1, r2
 8034838:	602b      	str	r3, [r5, #0]
 803483a:	f7dd fd3b 	bl	80122b4 <_kill>
 803483e:	1c43      	adds	r3, r0, #1
 8034840:	d102      	bne.n	8034848 <_kill_r+0x1c>
 8034842:	682b      	ldr	r3, [r5, #0]
 8034844:	b103      	cbz	r3, 8034848 <_kill_r+0x1c>
 8034846:	6023      	str	r3, [r4, #0]
 8034848:	bd38      	pop	{r3, r4, r5, pc}
 803484a:	bf00      	nop
 803484c:	200198e4 	.word	0x200198e4

08034850 <_getpid_r>:
 8034850:	f7dd bd2e 	b.w	80122b0 <_getpid>

08034854 <_sbrk_r>:
 8034854:	b538      	push	{r3, r4, r5, lr}
 8034856:	4d06      	ldr	r5, [pc, #24]	@ (8034870 <_sbrk_r+0x1c>)
 8034858:	2300      	movs	r3, #0
 803485a:	4604      	mov	r4, r0
 803485c:	4608      	mov	r0, r1
 803485e:	602b      	str	r3, [r5, #0]
 8034860:	f7dd fd60 	bl	8012324 <_sbrk>
 8034864:	1c43      	adds	r3, r0, #1
 8034866:	d102      	bne.n	803486e <_sbrk_r+0x1a>
 8034868:	682b      	ldr	r3, [r5, #0]
 803486a:	b103      	cbz	r3, 803486e <_sbrk_r+0x1a>
 803486c:	6023      	str	r3, [r4, #0]
 803486e:	bd38      	pop	{r3, r4, r5, pc}
 8034870:	200198e4 	.word	0x200198e4

08034874 <sysconf>:
 8034874:	2808      	cmp	r0, #8
 8034876:	b508      	push	{r3, lr}
 8034878:	d006      	beq.n	8034888 <sysconf+0x14>
 803487a:	f7f8 fdbd 	bl	802d3f8 <__errno>
 803487e:	2316      	movs	r3, #22
 8034880:	6003      	str	r3, [r0, #0]
 8034882:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034886:	bd08      	pop	{r3, pc}
 8034888:	2080      	movs	r0, #128	@ 0x80
 803488a:	e7fc      	b.n	8034886 <sysconf+0x12>

0803488c <_strtoll_l.constprop.0>:
 803488c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034890:	b085      	sub	sp, #20
 8034892:	4690      	mov	r8, r2
 8034894:	4a43      	ldr	r2, [pc, #268]	@ (80349a4 <_strtoll_l.constprop.0+0x118>)
 8034896:	9002      	str	r0, [sp, #8]
 8034898:	4689      	mov	r9, r1
 803489a:	461e      	mov	r6, r3
 803489c:	460d      	mov	r5, r1
 803489e:	462b      	mov	r3, r5
 80348a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80348a4:	5d17      	ldrb	r7, [r2, r4]
 80348a6:	f017 0708 	ands.w	r7, r7, #8
 80348aa:	d1f8      	bne.n	803489e <_strtoll_l.constprop.0+0x12>
 80348ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80348ae:	d149      	bne.n	8034944 <_strtoll_l.constprop.0+0xb8>
 80348b0:	782c      	ldrb	r4, [r5, #0]
 80348b2:	2701      	movs	r7, #1
 80348b4:	1c9d      	adds	r5, r3, #2
 80348b6:	f036 0310 	bics.w	r3, r6, #16
 80348ba:	d109      	bne.n	80348d0 <_strtoll_l.constprop.0+0x44>
 80348bc:	2c30      	cmp	r4, #48	@ 0x30
 80348be:	d146      	bne.n	803494e <_strtoll_l.constprop.0+0xc2>
 80348c0:	782b      	ldrb	r3, [r5, #0]
 80348c2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80348c6:	2b58      	cmp	r3, #88	@ 0x58
 80348c8:	d141      	bne.n	803494e <_strtoll_l.constprop.0+0xc2>
 80348ca:	786c      	ldrb	r4, [r5, #1]
 80348cc:	2610      	movs	r6, #16
 80348ce:	3502      	adds	r5, #2
 80348d0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 80348d4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 80348d8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80348dc:	17f3      	asrs	r3, r6, #31
 80348de:	4632      	mov	r2, r6
 80348e0:	4658      	mov	r0, fp
 80348e2:	4651      	mov	r1, sl
 80348e4:	9303      	str	r3, [sp, #12]
 80348e6:	f7dc fa37 	bl	8010d58 <__aeabi_uldivmod>
 80348ea:	9201      	str	r2, [sp, #4]
 80348ec:	2200      	movs	r2, #0
 80348ee:	468e      	mov	lr, r1
 80348f0:	4684      	mov	ip, r0
 80348f2:	4611      	mov	r1, r2
 80348f4:	4610      	mov	r0, r2
 80348f6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80348fa:	2b09      	cmp	r3, #9
 80348fc:	d905      	bls.n	803490a <_strtoll_l.constprop.0+0x7e>
 80348fe:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8034902:	2b19      	cmp	r3, #25
 8034904:	d82a      	bhi.n	803495c <_strtoll_l.constprop.0+0xd0>
 8034906:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 803490a:	429e      	cmp	r6, r3
 803490c:	dd30      	ble.n	8034970 <_strtoll_l.constprop.0+0xe4>
 803490e:	1c54      	adds	r4, r2, #1
 8034910:	d015      	beq.n	803493e <_strtoll_l.constprop.0+0xb2>
 8034912:	4584      	cmp	ip, r0
 8034914:	eb7e 0201 	sbcs.w	r2, lr, r1
 8034918:	d327      	bcc.n	803496a <_strtoll_l.constprop.0+0xde>
 803491a:	458e      	cmp	lr, r1
 803491c:	bf08      	it	eq
 803491e:	4584      	cmpeq	ip, r0
 8034920:	d102      	bne.n	8034928 <_strtoll_l.constprop.0+0x9c>
 8034922:	9a01      	ldr	r2, [sp, #4]
 8034924:	429a      	cmp	r2, r3
 8034926:	db20      	blt.n	803496a <_strtoll_l.constprop.0+0xde>
 8034928:	9a03      	ldr	r2, [sp, #12]
 803492a:	4371      	muls	r1, r6
 803492c:	fb00 1102 	mla	r1, r0, r2, r1
 8034930:	fba6 0200 	umull	r0, r2, r6, r0
 8034934:	440a      	add	r2, r1
 8034936:	1818      	adds	r0, r3, r0
 8034938:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 803493c:	2201      	movs	r2, #1
 803493e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034942:	e7d8      	b.n	80348f6 <_strtoll_l.constprop.0+0x6a>
 8034944:	2c2b      	cmp	r4, #43	@ 0x2b
 8034946:	bf04      	itt	eq
 8034948:	782c      	ldrbeq	r4, [r5, #0]
 803494a:	1c9d      	addeq	r5, r3, #2
 803494c:	e7b3      	b.n	80348b6 <_strtoll_l.constprop.0+0x2a>
 803494e:	2e00      	cmp	r6, #0
 8034950:	d1be      	bne.n	80348d0 <_strtoll_l.constprop.0+0x44>
 8034952:	2c30      	cmp	r4, #48	@ 0x30
 8034954:	bf0c      	ite	eq
 8034956:	2608      	moveq	r6, #8
 8034958:	260a      	movne	r6, #10
 803495a:	e7b9      	b.n	80348d0 <_strtoll_l.constprop.0+0x44>
 803495c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8034960:	2b19      	cmp	r3, #25
 8034962:	d805      	bhi.n	8034970 <_strtoll_l.constprop.0+0xe4>
 8034964:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8034968:	e7cf      	b.n	803490a <_strtoll_l.constprop.0+0x7e>
 803496a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 803496e:	e7e6      	b.n	803493e <_strtoll_l.constprop.0+0xb2>
 8034970:	1c53      	adds	r3, r2, #1
 8034972:	d10a      	bne.n	803498a <_strtoll_l.constprop.0+0xfe>
 8034974:	9a02      	ldr	r2, [sp, #8]
 8034976:	2322      	movs	r3, #34	@ 0x22
 8034978:	6013      	str	r3, [r2, #0]
 803497a:	4658      	mov	r0, fp
 803497c:	4651      	mov	r1, sl
 803497e:	f1b8 0f00 	cmp.w	r8, #0
 8034982:	d10a      	bne.n	803499a <_strtoll_l.constprop.0+0x10e>
 8034984:	b005      	add	sp, #20
 8034986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803498a:	b117      	cbz	r7, 8034992 <_strtoll_l.constprop.0+0x106>
 803498c:	4240      	negs	r0, r0
 803498e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8034992:	f1b8 0f00 	cmp.w	r8, #0
 8034996:	d0f5      	beq.n	8034984 <_strtoll_l.constprop.0+0xf8>
 8034998:	b10a      	cbz	r2, 803499e <_strtoll_l.constprop.0+0x112>
 803499a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 803499e:	f8c8 9000 	str.w	r9, [r8]
 80349a2:	e7ef      	b.n	8034984 <_strtoll_l.constprop.0+0xf8>
 80349a4:	0803b0d1 	.word	0x0803b0d1

080349a8 <_strtoll_r>:
 80349a8:	f7ff bf70 	b.w	803488c <_strtoll_l.constprop.0>

080349ac <__libc_fini_array>:
 80349ac:	b538      	push	{r3, r4, r5, lr}
 80349ae:	4d07      	ldr	r5, [pc, #28]	@ (80349cc <__libc_fini_array+0x20>)
 80349b0:	4c07      	ldr	r4, [pc, #28]	@ (80349d0 <__libc_fini_array+0x24>)
 80349b2:	1b64      	subs	r4, r4, r5
 80349b4:	10a4      	asrs	r4, r4, #2
 80349b6:	b91c      	cbnz	r4, 80349c0 <__libc_fini_array+0x14>
 80349b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80349bc:	f000 bc9c 	b.w	80352f8 <_fini>
 80349c0:	3c01      	subs	r4, #1
 80349c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80349c6:	4798      	blx	r3
 80349c8:	e7f5      	b.n	80349b6 <__libc_fini_array+0xa>
 80349ca:	bf00      	nop
 80349cc:	0803b4e8 	.word	0x0803b4e8
 80349d0:	0803b4ec 	.word	0x0803b4ec

080349d4 <_strtoull_l.constprop.0>:
 80349d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80349d8:	4691      	mov	r9, r2
 80349da:	4a48      	ldr	r2, [pc, #288]	@ (8034afc <_strtoull_l.constprop.0+0x128>)
 80349dc:	9001      	str	r0, [sp, #4]
 80349de:	468a      	mov	sl, r1
 80349e0:	461e      	mov	r6, r3
 80349e2:	460d      	mov	r5, r1
 80349e4:	462b      	mov	r3, r5
 80349e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80349ea:	5d17      	ldrb	r7, [r2, r4]
 80349ec:	f017 0708 	ands.w	r7, r7, #8
 80349f0:	d1f8      	bne.n	80349e4 <_strtoull_l.constprop.0+0x10>
 80349f2:	2c2d      	cmp	r4, #45	@ 0x2d
 80349f4:	d14a      	bne.n	8034a8c <_strtoull_l.constprop.0+0xb8>
 80349f6:	782c      	ldrb	r4, [r5, #0]
 80349f8:	2701      	movs	r7, #1
 80349fa:	1c9d      	adds	r5, r3, #2
 80349fc:	f036 0310 	bics.w	r3, r6, #16
 8034a00:	d109      	bne.n	8034a16 <_strtoull_l.constprop.0+0x42>
 8034a02:	2c30      	cmp	r4, #48	@ 0x30
 8034a04:	d147      	bne.n	8034a96 <_strtoull_l.constprop.0+0xc2>
 8034a06:	782b      	ldrb	r3, [r5, #0]
 8034a08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8034a0c:	2b58      	cmp	r3, #88	@ 0x58
 8034a0e:	d142      	bne.n	8034a96 <_strtoull_l.constprop.0+0xc2>
 8034a10:	786c      	ldrb	r4, [r5, #1]
 8034a12:	2610      	movs	r6, #16
 8034a14:	3502      	adds	r5, #2
 8034a16:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8034a1a:	4632      	mov	r2, r6
 8034a1c:	465b      	mov	r3, fp
 8034a1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034a22:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8034a26:	f7dc f997 	bl	8010d58 <__aeabi_uldivmod>
 8034a2a:	4632      	mov	r2, r6
 8034a2c:	9000      	str	r0, [sp, #0]
 8034a2e:	4688      	mov	r8, r1
 8034a30:	465b      	mov	r3, fp
 8034a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034a36:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8034a3a:	f7dc f98d 	bl	8010d58 <__aeabi_uldivmod>
 8034a3e:	2300      	movs	r3, #0
 8034a40:	4618      	mov	r0, r3
 8034a42:	4619      	mov	r1, r3
 8034a44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8034a48:	f1bc 0f09 	cmp.w	ip, #9
 8034a4c:	d82a      	bhi.n	8034aa4 <_strtoull_l.constprop.0+0xd0>
 8034a4e:	4664      	mov	r4, ip
 8034a50:	42a6      	cmp	r6, r4
 8034a52:	dd38      	ble.n	8034ac6 <_strtoull_l.constprop.0+0xf2>
 8034a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8034a58:	d015      	beq.n	8034a86 <_strtoull_l.constprop.0+0xb2>
 8034a5a:	9b00      	ldr	r3, [sp, #0]
 8034a5c:	4283      	cmp	r3, r0
 8034a5e:	eb78 0301 	sbcs.w	r3, r8, r1
 8034a62:	d32d      	bcc.n	8034ac0 <_strtoull_l.constprop.0+0xec>
 8034a64:	9b00      	ldr	r3, [sp, #0]
 8034a66:	4588      	cmp	r8, r1
 8034a68:	bf08      	it	eq
 8034a6a:	4283      	cmpeq	r3, r0
 8034a6c:	d101      	bne.n	8034a72 <_strtoull_l.constprop.0+0x9e>
 8034a6e:	42a2      	cmp	r2, r4
 8034a70:	db26      	blt.n	8034ac0 <_strtoull_l.constprop.0+0xec>
 8034a72:	4371      	muls	r1, r6
 8034a74:	fb00 110b 	mla	r1, r0, fp, r1
 8034a78:	fba6 0300 	umull	r0, r3, r6, r0
 8034a7c:	4419      	add	r1, r3
 8034a7e:	1820      	adds	r0, r4, r0
 8034a80:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8034a84:	2301      	movs	r3, #1
 8034a86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8034a8a:	e7db      	b.n	8034a44 <_strtoull_l.constprop.0+0x70>
 8034a8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8034a8e:	bf04      	itt	eq
 8034a90:	782c      	ldrbeq	r4, [r5, #0]
 8034a92:	1c9d      	addeq	r5, r3, #2
 8034a94:	e7b2      	b.n	80349fc <_strtoull_l.constprop.0+0x28>
 8034a96:	2e00      	cmp	r6, #0
 8034a98:	d1bd      	bne.n	8034a16 <_strtoull_l.constprop.0+0x42>
 8034a9a:	2c30      	cmp	r4, #48	@ 0x30
 8034a9c:	bf0c      	ite	eq
 8034a9e:	2608      	moveq	r6, #8
 8034aa0:	260a      	movne	r6, #10
 8034aa2:	e7b8      	b.n	8034a16 <_strtoull_l.constprop.0+0x42>
 8034aa4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8034aa8:	f1bc 0f19 	cmp.w	ip, #25
 8034aac:	d801      	bhi.n	8034ab2 <_strtoull_l.constprop.0+0xde>
 8034aae:	3c37      	subs	r4, #55	@ 0x37
 8034ab0:	e7ce      	b.n	8034a50 <_strtoull_l.constprop.0+0x7c>
 8034ab2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8034ab6:	f1bc 0f19 	cmp.w	ip, #25
 8034aba:	d804      	bhi.n	8034ac6 <_strtoull_l.constprop.0+0xf2>
 8034abc:	3c57      	subs	r4, #87	@ 0x57
 8034abe:	e7c7      	b.n	8034a50 <_strtoull_l.constprop.0+0x7c>
 8034ac0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8034ac4:	e7df      	b.n	8034a86 <_strtoull_l.constprop.0+0xb2>
 8034ac6:	1c5a      	adds	r2, r3, #1
 8034ac8:	d10a      	bne.n	8034ae0 <_strtoull_l.constprop.0+0x10c>
 8034aca:	9901      	ldr	r1, [sp, #4]
 8034acc:	2222      	movs	r2, #34	@ 0x22
 8034ace:	600a      	str	r2, [r1, #0]
 8034ad0:	4618      	mov	r0, r3
 8034ad2:	4619      	mov	r1, r3
 8034ad4:	f1b9 0f00 	cmp.w	r9, #0
 8034ad8:	d10a      	bne.n	8034af0 <_strtoull_l.constprop.0+0x11c>
 8034ada:	b003      	add	sp, #12
 8034adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034ae0:	b117      	cbz	r7, 8034ae8 <_strtoull_l.constprop.0+0x114>
 8034ae2:	4240      	negs	r0, r0
 8034ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8034ae8:	f1b9 0f00 	cmp.w	r9, #0
 8034aec:	d0f5      	beq.n	8034ada <_strtoull_l.constprop.0+0x106>
 8034aee:	b10b      	cbz	r3, 8034af4 <_strtoull_l.constprop.0+0x120>
 8034af0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8034af4:	f8c9 a000 	str.w	sl, [r9]
 8034af8:	e7ef      	b.n	8034ada <_strtoull_l.constprop.0+0x106>
 8034afa:	bf00      	nop
 8034afc:	0803b0d1 	.word	0x0803b0d1

08034b00 <_strtoull_r>:
 8034b00:	f7ff bf68 	b.w	80349d4 <_strtoull_l.constprop.0>

08034b04 <_mbrtowc_r>:
 8034b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8034b06:	4c0a      	ldr	r4, [pc, #40]	@ (8034b30 <_mbrtowc_r+0x2c>)
 8034b08:	9e08      	ldr	r6, [sp, #32]
 8034b0a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 8034b0e:	9600      	str	r6, [sp, #0]
 8034b10:	4605      	mov	r5, r0
 8034b12:	4614      	mov	r4, r2
 8034b14:	b912      	cbnz	r2, 8034b1c <_mbrtowc_r+0x18>
 8034b16:	4a07      	ldr	r2, [pc, #28]	@ (8034b34 <_mbrtowc_r+0x30>)
 8034b18:	2301      	movs	r3, #1
 8034b1a:	4621      	mov	r1, r4
 8034b1c:	47b8      	blx	r7
 8034b1e:	1c43      	adds	r3, r0, #1
 8034b20:	bf01      	itttt	eq
 8034b22:	2300      	moveq	r3, #0
 8034b24:	6033      	streq	r3, [r6, #0]
 8034b26:	238a      	moveq	r3, #138	@ 0x8a
 8034b28:	602b      	streq	r3, [r5, #0]
 8034b2a:	b003      	add	sp, #12
 8034b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8034b2e:	bf00      	nop
 8034b30:	2000016c 	.word	0x2000016c
 8034b34:	0803ad12 	.word	0x0803ad12

08034b38 <iswspace>:
 8034b38:	2100      	movs	r1, #0
 8034b3a:	f000 b801 	b.w	8034b40 <iswspace_l>
	...

08034b40 <iswspace_l>:
 8034b40:	28ff      	cmp	r0, #255	@ 0xff
 8034b42:	bf9d      	ittte	ls
 8034b44:	4b02      	ldrls	r3, [pc, #8]	@ (8034b50 <iswspace_l+0x10>)
 8034b46:	5c18      	ldrbls	r0, [r3, r0]
 8034b48:	f000 0008 	andls.w	r0, r0, #8
 8034b4c:	2000      	movhi	r0, #0
 8034b4e:	4770      	bx	lr
 8034b50:	0803b0d1 	.word	0x0803b0d1

08034b54 <__register_exitproc>:
 8034b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8034b58:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8034bd0 <__register_exitproc+0x7c>
 8034b5c:	4606      	mov	r6, r0
 8034b5e:	f8da 0000 	ldr.w	r0, [sl]
 8034b62:	4698      	mov	r8, r3
 8034b64:	460f      	mov	r7, r1
 8034b66:	4691      	mov	r9, r2
 8034b68:	f7f8 fc7b 	bl	802d462 <__retarget_lock_acquire_recursive>
 8034b6c:	4b16      	ldr	r3, [pc, #88]	@ (8034bc8 <__register_exitproc+0x74>)
 8034b6e:	681c      	ldr	r4, [r3, #0]
 8034b70:	b90c      	cbnz	r4, 8034b76 <__register_exitproc+0x22>
 8034b72:	4c16      	ldr	r4, [pc, #88]	@ (8034bcc <__register_exitproc+0x78>)
 8034b74:	601c      	str	r4, [r3, #0]
 8034b76:	6865      	ldr	r5, [r4, #4]
 8034b78:	f8da 0000 	ldr.w	r0, [sl]
 8034b7c:	2d1f      	cmp	r5, #31
 8034b7e:	dd05      	ble.n	8034b8c <__register_exitproc+0x38>
 8034b80:	f7f8 fc71 	bl	802d466 <__retarget_lock_release_recursive>
 8034b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8034b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8034b8c:	b19e      	cbz	r6, 8034bb6 <__register_exitproc+0x62>
 8034b8e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8034b92:	2201      	movs	r2, #1
 8034b94:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8034b98:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8034b9c:	40aa      	lsls	r2, r5
 8034b9e:	4313      	orrs	r3, r2
 8034ba0:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8034ba4:	2e02      	cmp	r6, #2
 8034ba6:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8034baa:	bf02      	ittt	eq
 8034bac:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8034bb0:	4313      	orreq	r3, r2
 8034bb2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8034bb6:	1c6b      	adds	r3, r5, #1
 8034bb8:	3502      	adds	r5, #2
 8034bba:	6063      	str	r3, [r4, #4]
 8034bbc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8034bc0:	f7f8 fc51 	bl	802d466 <__retarget_lock_release_recursive>
 8034bc4:	2000      	movs	r0, #0
 8034bc6:	e7df      	b.n	8034b88 <__register_exitproc+0x34>
 8034bc8:	200198f0 	.word	0x200198f0
 8034bcc:	20019928 	.word	0x20019928
 8034bd0:	20000400 	.word	0x20000400
 8034bd4:	00000000 	.word	0x00000000

08034bd8 <nan>:
 8034bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8034be0 <nan+0x8>
 8034bdc:	4770      	bx	lr
 8034bde:	bf00      	nop
 8034be0:	00000000 	.word	0x00000000
 8034be4:	7ff80000 	.word	0x7ff80000

08034be8 <nanf>:
 8034be8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8034bf0 <nanf+0x8>
 8034bec:	4770      	bx	lr
 8034bee:	bf00      	nop
 8034bf0:	7fc00000 	.word	0x7fc00000

08034bf4 <_calloc_r>:
 8034bf4:	b538      	push	{r3, r4, r5, lr}
 8034bf6:	fba1 1502 	umull	r1, r5, r1, r2
 8034bfa:	b935      	cbnz	r5, 8034c0a <_calloc_r+0x16>
 8034bfc:	f7f9 fc4e 	bl	802e49c <_malloc_r>
 8034c00:	4604      	mov	r4, r0
 8034c02:	b938      	cbnz	r0, 8034c14 <_calloc_r+0x20>
 8034c04:	2400      	movs	r4, #0
 8034c06:	4620      	mov	r0, r4
 8034c08:	bd38      	pop	{r3, r4, r5, pc}
 8034c0a:	f7f8 fbf5 	bl	802d3f8 <__errno>
 8034c0e:	230c      	movs	r3, #12
 8034c10:	6003      	str	r3, [r0, #0]
 8034c12:	e7f7      	b.n	8034c04 <_calloc_r+0x10>
 8034c14:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8034c18:	f022 0203 	bic.w	r2, r2, #3
 8034c1c:	3a04      	subs	r2, #4
 8034c1e:	2a24      	cmp	r2, #36	@ 0x24
 8034c20:	d819      	bhi.n	8034c56 <_calloc_r+0x62>
 8034c22:	2a13      	cmp	r2, #19
 8034c24:	d915      	bls.n	8034c52 <_calloc_r+0x5e>
 8034c26:	2a1b      	cmp	r2, #27
 8034c28:	e9c0 5500 	strd	r5, r5, [r0]
 8034c2c:	d806      	bhi.n	8034c3c <_calloc_r+0x48>
 8034c2e:	f100 0308 	add.w	r3, r0, #8
 8034c32:	2200      	movs	r2, #0
 8034c34:	e9c3 2200 	strd	r2, r2, [r3]
 8034c38:	609a      	str	r2, [r3, #8]
 8034c3a:	e7e4      	b.n	8034c06 <_calloc_r+0x12>
 8034c3c:	2a24      	cmp	r2, #36	@ 0x24
 8034c3e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8034c42:	bf11      	iteee	ne
 8034c44:	f100 0310 	addne.w	r3, r0, #16
 8034c48:	6105      	streq	r5, [r0, #16]
 8034c4a:	f100 0318 	addeq.w	r3, r0, #24
 8034c4e:	6145      	streq	r5, [r0, #20]
 8034c50:	e7ef      	b.n	8034c32 <_calloc_r+0x3e>
 8034c52:	4603      	mov	r3, r0
 8034c54:	e7ed      	b.n	8034c32 <_calloc_r+0x3e>
 8034c56:	4629      	mov	r1, r5
 8034c58:	f7f7 f9ca 	bl	802bff0 <memset>
 8034c5c:	e7d3      	b.n	8034c06 <_calloc_r+0x12>
	...

08034c60 <__env_lock>:
 8034c60:	4801      	ldr	r0, [pc, #4]	@ (8034c68 <__env_lock+0x8>)
 8034c62:	f7f8 bbfe 	b.w	802d462 <__retarget_lock_acquire_recursive>
 8034c66:	bf00      	nop
 8034c68:	200198e9 	.word	0x200198e9

08034c6c <__env_unlock>:
 8034c6c:	4801      	ldr	r0, [pc, #4]	@ (8034c74 <__env_unlock+0x8>)
 8034c6e:	f7f8 bbfa 	b.w	802d466 <__retarget_lock_release_recursive>
 8034c72:	bf00      	nop
 8034c74:	200198e9 	.word	0x200198e9

08034c78 <rshift>:
 8034c78:	6903      	ldr	r3, [r0, #16]
 8034c7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8034c7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8034c82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8034c86:	f100 0414 	add.w	r4, r0, #20
 8034c8a:	dd45      	ble.n	8034d18 <rshift+0xa0>
 8034c8c:	f011 011f 	ands.w	r1, r1, #31
 8034c90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8034c94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8034c98:	d10c      	bne.n	8034cb4 <rshift+0x3c>
 8034c9a:	f100 0710 	add.w	r7, r0, #16
 8034c9e:	4629      	mov	r1, r5
 8034ca0:	42b1      	cmp	r1, r6
 8034ca2:	d334      	bcc.n	8034d0e <rshift+0x96>
 8034ca4:	1a9b      	subs	r3, r3, r2
 8034ca6:	009b      	lsls	r3, r3, #2
 8034ca8:	1eea      	subs	r2, r5, #3
 8034caa:	4296      	cmp	r6, r2
 8034cac:	bf38      	it	cc
 8034cae:	2300      	movcc	r3, #0
 8034cb0:	4423      	add	r3, r4
 8034cb2:	e015      	b.n	8034ce0 <rshift+0x68>
 8034cb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8034cb8:	f1c1 0820 	rsb	r8, r1, #32
 8034cbc:	40cf      	lsrs	r7, r1
 8034cbe:	f105 0e04 	add.w	lr, r5, #4
 8034cc2:	46a1      	mov	r9, r4
 8034cc4:	4576      	cmp	r6, lr
 8034cc6:	46f4      	mov	ip, lr
 8034cc8:	d815      	bhi.n	8034cf6 <rshift+0x7e>
 8034cca:	1a9a      	subs	r2, r3, r2
 8034ccc:	0092      	lsls	r2, r2, #2
 8034cce:	3a04      	subs	r2, #4
 8034cd0:	3501      	adds	r5, #1
 8034cd2:	42ae      	cmp	r6, r5
 8034cd4:	bf38      	it	cc
 8034cd6:	2200      	movcc	r2, #0
 8034cd8:	18a3      	adds	r3, r4, r2
 8034cda:	50a7      	str	r7, [r4, r2]
 8034cdc:	b107      	cbz	r7, 8034ce0 <rshift+0x68>
 8034cde:	3304      	adds	r3, #4
 8034ce0:	1b1a      	subs	r2, r3, r4
 8034ce2:	42a3      	cmp	r3, r4
 8034ce4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8034ce8:	bf08      	it	eq
 8034cea:	2300      	moveq	r3, #0
 8034cec:	6102      	str	r2, [r0, #16]
 8034cee:	bf08      	it	eq
 8034cf0:	6143      	streq	r3, [r0, #20]
 8034cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034cf6:	f8dc c000 	ldr.w	ip, [ip]
 8034cfa:	fa0c fc08 	lsl.w	ip, ip, r8
 8034cfe:	ea4c 0707 	orr.w	r7, ip, r7
 8034d02:	f849 7b04 	str.w	r7, [r9], #4
 8034d06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8034d0a:	40cf      	lsrs	r7, r1
 8034d0c:	e7da      	b.n	8034cc4 <rshift+0x4c>
 8034d0e:	f851 cb04 	ldr.w	ip, [r1], #4
 8034d12:	f847 cf04 	str.w	ip, [r7, #4]!
 8034d16:	e7c3      	b.n	8034ca0 <rshift+0x28>
 8034d18:	4623      	mov	r3, r4
 8034d1a:	e7e1      	b.n	8034ce0 <rshift+0x68>

08034d1c <__hexdig_fun>:
 8034d1c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8034d20:	2b09      	cmp	r3, #9
 8034d22:	d802      	bhi.n	8034d2a <__hexdig_fun+0xe>
 8034d24:	3820      	subs	r0, #32
 8034d26:	b2c0      	uxtb	r0, r0
 8034d28:	4770      	bx	lr
 8034d2a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8034d2e:	2b05      	cmp	r3, #5
 8034d30:	d801      	bhi.n	8034d36 <__hexdig_fun+0x1a>
 8034d32:	3847      	subs	r0, #71	@ 0x47
 8034d34:	e7f7      	b.n	8034d26 <__hexdig_fun+0xa>
 8034d36:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8034d3a:	2b05      	cmp	r3, #5
 8034d3c:	d801      	bhi.n	8034d42 <__hexdig_fun+0x26>
 8034d3e:	3827      	subs	r0, #39	@ 0x27
 8034d40:	e7f1      	b.n	8034d26 <__hexdig_fun+0xa>
 8034d42:	2000      	movs	r0, #0
 8034d44:	4770      	bx	lr
	...

08034d48 <__gethex>:
 8034d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034d4c:	b085      	sub	sp, #20
 8034d4e:	468a      	mov	sl, r1
 8034d50:	9302      	str	r3, [sp, #8]
 8034d52:	680b      	ldr	r3, [r1, #0]
 8034d54:	9001      	str	r0, [sp, #4]
 8034d56:	4690      	mov	r8, r2
 8034d58:	1c9c      	adds	r4, r3, #2
 8034d5a:	46a1      	mov	r9, r4
 8034d5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8034d60:	2830      	cmp	r0, #48	@ 0x30
 8034d62:	d0fa      	beq.n	8034d5a <__gethex+0x12>
 8034d64:	eba9 0303 	sub.w	r3, r9, r3
 8034d68:	f1a3 0b02 	sub.w	fp, r3, #2
 8034d6c:	f7ff ffd6 	bl	8034d1c <__hexdig_fun>
 8034d70:	4605      	mov	r5, r0
 8034d72:	2800      	cmp	r0, #0
 8034d74:	d168      	bne.n	8034e48 <__gethex+0x100>
 8034d76:	49a0      	ldr	r1, [pc, #640]	@ (8034ff8 <__gethex+0x2b0>)
 8034d78:	2201      	movs	r2, #1
 8034d7a:	4648      	mov	r0, r9
 8034d7c:	f7f7 f96d 	bl	802c05a <strncmp>
 8034d80:	4607      	mov	r7, r0
 8034d82:	2800      	cmp	r0, #0
 8034d84:	d167      	bne.n	8034e56 <__gethex+0x10e>
 8034d86:	f899 0001 	ldrb.w	r0, [r9, #1]
 8034d8a:	4626      	mov	r6, r4
 8034d8c:	f7ff ffc6 	bl	8034d1c <__hexdig_fun>
 8034d90:	2800      	cmp	r0, #0
 8034d92:	d062      	beq.n	8034e5a <__gethex+0x112>
 8034d94:	4623      	mov	r3, r4
 8034d96:	7818      	ldrb	r0, [r3, #0]
 8034d98:	2830      	cmp	r0, #48	@ 0x30
 8034d9a:	4699      	mov	r9, r3
 8034d9c:	f103 0301 	add.w	r3, r3, #1
 8034da0:	d0f9      	beq.n	8034d96 <__gethex+0x4e>
 8034da2:	f7ff ffbb 	bl	8034d1c <__hexdig_fun>
 8034da6:	fab0 f580 	clz	r5, r0
 8034daa:	096d      	lsrs	r5, r5, #5
 8034dac:	f04f 0b01 	mov.w	fp, #1
 8034db0:	464a      	mov	r2, r9
 8034db2:	4616      	mov	r6, r2
 8034db4:	3201      	adds	r2, #1
 8034db6:	7830      	ldrb	r0, [r6, #0]
 8034db8:	f7ff ffb0 	bl	8034d1c <__hexdig_fun>
 8034dbc:	2800      	cmp	r0, #0
 8034dbe:	d1f8      	bne.n	8034db2 <__gethex+0x6a>
 8034dc0:	498d      	ldr	r1, [pc, #564]	@ (8034ff8 <__gethex+0x2b0>)
 8034dc2:	2201      	movs	r2, #1
 8034dc4:	4630      	mov	r0, r6
 8034dc6:	f7f7 f948 	bl	802c05a <strncmp>
 8034dca:	2800      	cmp	r0, #0
 8034dcc:	d13f      	bne.n	8034e4e <__gethex+0x106>
 8034dce:	b944      	cbnz	r4, 8034de2 <__gethex+0x9a>
 8034dd0:	1c74      	adds	r4, r6, #1
 8034dd2:	4622      	mov	r2, r4
 8034dd4:	4616      	mov	r6, r2
 8034dd6:	3201      	adds	r2, #1
 8034dd8:	7830      	ldrb	r0, [r6, #0]
 8034dda:	f7ff ff9f 	bl	8034d1c <__hexdig_fun>
 8034dde:	2800      	cmp	r0, #0
 8034de0:	d1f8      	bne.n	8034dd4 <__gethex+0x8c>
 8034de2:	1ba4      	subs	r4, r4, r6
 8034de4:	00a7      	lsls	r7, r4, #2
 8034de6:	7833      	ldrb	r3, [r6, #0]
 8034de8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8034dec:	2b50      	cmp	r3, #80	@ 0x50
 8034dee:	d13e      	bne.n	8034e6e <__gethex+0x126>
 8034df0:	7873      	ldrb	r3, [r6, #1]
 8034df2:	2b2b      	cmp	r3, #43	@ 0x2b
 8034df4:	d033      	beq.n	8034e5e <__gethex+0x116>
 8034df6:	2b2d      	cmp	r3, #45	@ 0x2d
 8034df8:	d034      	beq.n	8034e64 <__gethex+0x11c>
 8034dfa:	1c71      	adds	r1, r6, #1
 8034dfc:	2400      	movs	r4, #0
 8034dfe:	7808      	ldrb	r0, [r1, #0]
 8034e00:	f7ff ff8c 	bl	8034d1c <__hexdig_fun>
 8034e04:	1e43      	subs	r3, r0, #1
 8034e06:	b2db      	uxtb	r3, r3
 8034e08:	2b18      	cmp	r3, #24
 8034e0a:	d830      	bhi.n	8034e6e <__gethex+0x126>
 8034e0c:	f1a0 0210 	sub.w	r2, r0, #16
 8034e10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8034e14:	f7ff ff82 	bl	8034d1c <__hexdig_fun>
 8034e18:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8034e1c:	fa5f fc8c 	uxtb.w	ip, ip
 8034e20:	f1bc 0f18 	cmp.w	ip, #24
 8034e24:	f04f 030a 	mov.w	r3, #10
 8034e28:	d91e      	bls.n	8034e68 <__gethex+0x120>
 8034e2a:	b104      	cbz	r4, 8034e2e <__gethex+0xe6>
 8034e2c:	4252      	negs	r2, r2
 8034e2e:	4417      	add	r7, r2
 8034e30:	f8ca 1000 	str.w	r1, [sl]
 8034e34:	b1ed      	cbz	r5, 8034e72 <__gethex+0x12a>
 8034e36:	f1bb 0f00 	cmp.w	fp, #0
 8034e3a:	bf0c      	ite	eq
 8034e3c:	2506      	moveq	r5, #6
 8034e3e:	2500      	movne	r5, #0
 8034e40:	4628      	mov	r0, r5
 8034e42:	b005      	add	sp, #20
 8034e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034e48:	2500      	movs	r5, #0
 8034e4a:	462c      	mov	r4, r5
 8034e4c:	e7b0      	b.n	8034db0 <__gethex+0x68>
 8034e4e:	2c00      	cmp	r4, #0
 8034e50:	d1c7      	bne.n	8034de2 <__gethex+0x9a>
 8034e52:	4627      	mov	r7, r4
 8034e54:	e7c7      	b.n	8034de6 <__gethex+0x9e>
 8034e56:	464e      	mov	r6, r9
 8034e58:	462f      	mov	r7, r5
 8034e5a:	2501      	movs	r5, #1
 8034e5c:	e7c3      	b.n	8034de6 <__gethex+0x9e>
 8034e5e:	2400      	movs	r4, #0
 8034e60:	1cb1      	adds	r1, r6, #2
 8034e62:	e7cc      	b.n	8034dfe <__gethex+0xb6>
 8034e64:	2401      	movs	r4, #1
 8034e66:	e7fb      	b.n	8034e60 <__gethex+0x118>
 8034e68:	fb03 0002 	mla	r0, r3, r2, r0
 8034e6c:	e7ce      	b.n	8034e0c <__gethex+0xc4>
 8034e6e:	4631      	mov	r1, r6
 8034e70:	e7de      	b.n	8034e30 <__gethex+0xe8>
 8034e72:	eba6 0309 	sub.w	r3, r6, r9
 8034e76:	3b01      	subs	r3, #1
 8034e78:	4629      	mov	r1, r5
 8034e7a:	2b07      	cmp	r3, #7
 8034e7c:	dc0a      	bgt.n	8034e94 <__gethex+0x14c>
 8034e7e:	9801      	ldr	r0, [sp, #4]
 8034e80:	f7fd fe22 	bl	8032ac8 <_Balloc>
 8034e84:	4604      	mov	r4, r0
 8034e86:	b940      	cbnz	r0, 8034e9a <__gethex+0x152>
 8034e88:	4b5c      	ldr	r3, [pc, #368]	@ (8034ffc <__gethex+0x2b4>)
 8034e8a:	4602      	mov	r2, r0
 8034e8c:	21e4      	movs	r1, #228	@ 0xe4
 8034e8e:	485c      	ldr	r0, [pc, #368]	@ (8035000 <__gethex+0x2b8>)
 8034e90:	f7f4 fb5c 	bl	802954c <__assert_func>
 8034e94:	3101      	adds	r1, #1
 8034e96:	105b      	asrs	r3, r3, #1
 8034e98:	e7ef      	b.n	8034e7a <__gethex+0x132>
 8034e9a:	f100 0a14 	add.w	sl, r0, #20
 8034e9e:	2300      	movs	r3, #0
 8034ea0:	4655      	mov	r5, sl
 8034ea2:	469b      	mov	fp, r3
 8034ea4:	45b1      	cmp	r9, r6
 8034ea6:	d337      	bcc.n	8034f18 <__gethex+0x1d0>
 8034ea8:	f845 bb04 	str.w	fp, [r5], #4
 8034eac:	eba5 050a 	sub.w	r5, r5, sl
 8034eb0:	10ad      	asrs	r5, r5, #2
 8034eb2:	6125      	str	r5, [r4, #16]
 8034eb4:	4658      	mov	r0, fp
 8034eb6:	f7fd fec5 	bl	8032c44 <__hi0bits>
 8034eba:	016d      	lsls	r5, r5, #5
 8034ebc:	f8d8 6000 	ldr.w	r6, [r8]
 8034ec0:	1a2d      	subs	r5, r5, r0
 8034ec2:	42b5      	cmp	r5, r6
 8034ec4:	dd54      	ble.n	8034f70 <__gethex+0x228>
 8034ec6:	1bad      	subs	r5, r5, r6
 8034ec8:	4629      	mov	r1, r5
 8034eca:	4620      	mov	r0, r4
 8034ecc:	f7fe fa3f 	bl	803334e <__any_on>
 8034ed0:	4681      	mov	r9, r0
 8034ed2:	b178      	cbz	r0, 8034ef4 <__gethex+0x1ac>
 8034ed4:	1e6b      	subs	r3, r5, #1
 8034ed6:	1159      	asrs	r1, r3, #5
 8034ed8:	f003 021f 	and.w	r2, r3, #31
 8034edc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8034ee0:	f04f 0901 	mov.w	r9, #1
 8034ee4:	fa09 f202 	lsl.w	r2, r9, r2
 8034ee8:	420a      	tst	r2, r1
 8034eea:	d003      	beq.n	8034ef4 <__gethex+0x1ac>
 8034eec:	454b      	cmp	r3, r9
 8034eee:	dc36      	bgt.n	8034f5e <__gethex+0x216>
 8034ef0:	f04f 0902 	mov.w	r9, #2
 8034ef4:	4629      	mov	r1, r5
 8034ef6:	4620      	mov	r0, r4
 8034ef8:	f7ff febe 	bl	8034c78 <rshift>
 8034efc:	442f      	add	r7, r5
 8034efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8034f02:	42bb      	cmp	r3, r7
 8034f04:	da42      	bge.n	8034f8c <__gethex+0x244>
 8034f06:	9801      	ldr	r0, [sp, #4]
 8034f08:	4621      	mov	r1, r4
 8034f0a:	f7fd fe02 	bl	8032b12 <_Bfree>
 8034f0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034f10:	2300      	movs	r3, #0
 8034f12:	6013      	str	r3, [r2, #0]
 8034f14:	25a3      	movs	r5, #163	@ 0xa3
 8034f16:	e793      	b.n	8034e40 <__gethex+0xf8>
 8034f18:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8034f1c:	2a2e      	cmp	r2, #46	@ 0x2e
 8034f1e:	d012      	beq.n	8034f46 <__gethex+0x1fe>
 8034f20:	2b20      	cmp	r3, #32
 8034f22:	d104      	bne.n	8034f2e <__gethex+0x1e6>
 8034f24:	f845 bb04 	str.w	fp, [r5], #4
 8034f28:	f04f 0b00 	mov.w	fp, #0
 8034f2c:	465b      	mov	r3, fp
 8034f2e:	7830      	ldrb	r0, [r6, #0]
 8034f30:	9303      	str	r3, [sp, #12]
 8034f32:	f7ff fef3 	bl	8034d1c <__hexdig_fun>
 8034f36:	9b03      	ldr	r3, [sp, #12]
 8034f38:	f000 000f 	and.w	r0, r0, #15
 8034f3c:	4098      	lsls	r0, r3
 8034f3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8034f42:	3304      	adds	r3, #4
 8034f44:	e7ae      	b.n	8034ea4 <__gethex+0x15c>
 8034f46:	45b1      	cmp	r9, r6
 8034f48:	d8ea      	bhi.n	8034f20 <__gethex+0x1d8>
 8034f4a:	492b      	ldr	r1, [pc, #172]	@ (8034ff8 <__gethex+0x2b0>)
 8034f4c:	9303      	str	r3, [sp, #12]
 8034f4e:	2201      	movs	r2, #1
 8034f50:	4630      	mov	r0, r6
 8034f52:	f7f7 f882 	bl	802c05a <strncmp>
 8034f56:	9b03      	ldr	r3, [sp, #12]
 8034f58:	2800      	cmp	r0, #0
 8034f5a:	d1e1      	bne.n	8034f20 <__gethex+0x1d8>
 8034f5c:	e7a2      	b.n	8034ea4 <__gethex+0x15c>
 8034f5e:	1ea9      	subs	r1, r5, #2
 8034f60:	4620      	mov	r0, r4
 8034f62:	f7fe f9f4 	bl	803334e <__any_on>
 8034f66:	2800      	cmp	r0, #0
 8034f68:	d0c2      	beq.n	8034ef0 <__gethex+0x1a8>
 8034f6a:	f04f 0903 	mov.w	r9, #3
 8034f6e:	e7c1      	b.n	8034ef4 <__gethex+0x1ac>
 8034f70:	da09      	bge.n	8034f86 <__gethex+0x23e>
 8034f72:	1b75      	subs	r5, r6, r5
 8034f74:	4621      	mov	r1, r4
 8034f76:	9801      	ldr	r0, [sp, #4]
 8034f78:	462a      	mov	r2, r5
 8034f7a:	f7fd ffaf 	bl	8032edc <__lshift>
 8034f7e:	1b7f      	subs	r7, r7, r5
 8034f80:	4604      	mov	r4, r0
 8034f82:	f100 0a14 	add.w	sl, r0, #20
 8034f86:	f04f 0900 	mov.w	r9, #0
 8034f8a:	e7b8      	b.n	8034efe <__gethex+0x1b6>
 8034f8c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8034f90:	42bd      	cmp	r5, r7
 8034f92:	dd6f      	ble.n	8035074 <__gethex+0x32c>
 8034f94:	1bed      	subs	r5, r5, r7
 8034f96:	42ae      	cmp	r6, r5
 8034f98:	dc34      	bgt.n	8035004 <__gethex+0x2bc>
 8034f9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8034f9e:	2b02      	cmp	r3, #2
 8034fa0:	d022      	beq.n	8034fe8 <__gethex+0x2a0>
 8034fa2:	2b03      	cmp	r3, #3
 8034fa4:	d024      	beq.n	8034ff0 <__gethex+0x2a8>
 8034fa6:	2b01      	cmp	r3, #1
 8034fa8:	d115      	bne.n	8034fd6 <__gethex+0x28e>
 8034faa:	42ae      	cmp	r6, r5
 8034fac:	d113      	bne.n	8034fd6 <__gethex+0x28e>
 8034fae:	2e01      	cmp	r6, #1
 8034fb0:	d10b      	bne.n	8034fca <__gethex+0x282>
 8034fb2:	9a02      	ldr	r2, [sp, #8]
 8034fb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8034fb8:	6013      	str	r3, [r2, #0]
 8034fba:	2301      	movs	r3, #1
 8034fbc:	6123      	str	r3, [r4, #16]
 8034fbe:	f8ca 3000 	str.w	r3, [sl]
 8034fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034fc4:	2562      	movs	r5, #98	@ 0x62
 8034fc6:	601c      	str	r4, [r3, #0]
 8034fc8:	e73a      	b.n	8034e40 <__gethex+0xf8>
 8034fca:	1e71      	subs	r1, r6, #1
 8034fcc:	4620      	mov	r0, r4
 8034fce:	f7fe f9be 	bl	803334e <__any_on>
 8034fd2:	2800      	cmp	r0, #0
 8034fd4:	d1ed      	bne.n	8034fb2 <__gethex+0x26a>
 8034fd6:	9801      	ldr	r0, [sp, #4]
 8034fd8:	4621      	mov	r1, r4
 8034fda:	f7fd fd9a 	bl	8032b12 <_Bfree>
 8034fde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8034fe0:	2300      	movs	r3, #0
 8034fe2:	6013      	str	r3, [r2, #0]
 8034fe4:	2550      	movs	r5, #80	@ 0x50
 8034fe6:	e72b      	b.n	8034e40 <__gethex+0xf8>
 8034fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034fea:	2b00      	cmp	r3, #0
 8034fec:	d1f3      	bne.n	8034fd6 <__gethex+0x28e>
 8034fee:	e7e0      	b.n	8034fb2 <__gethex+0x26a>
 8034ff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8034ff2:	2b00      	cmp	r3, #0
 8034ff4:	d1dd      	bne.n	8034fb2 <__gethex+0x26a>
 8034ff6:	e7ee      	b.n	8034fd6 <__gethex+0x28e>
 8034ff8:	0803aea6 	.word	0x0803aea6
 8034ffc:	0803b1de 	.word	0x0803b1de
 8035000:	0803b478 	.word	0x0803b478
 8035004:	1e6f      	subs	r7, r5, #1
 8035006:	f1b9 0f00 	cmp.w	r9, #0
 803500a:	d130      	bne.n	803506e <__gethex+0x326>
 803500c:	b127      	cbz	r7, 8035018 <__gethex+0x2d0>
 803500e:	4639      	mov	r1, r7
 8035010:	4620      	mov	r0, r4
 8035012:	f7fe f99c 	bl	803334e <__any_on>
 8035016:	4681      	mov	r9, r0
 8035018:	117a      	asrs	r2, r7, #5
 803501a:	2301      	movs	r3, #1
 803501c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8035020:	f007 071f 	and.w	r7, r7, #31
 8035024:	40bb      	lsls	r3, r7
 8035026:	4213      	tst	r3, r2
 8035028:	4629      	mov	r1, r5
 803502a:	4620      	mov	r0, r4
 803502c:	bf18      	it	ne
 803502e:	f049 0902 	orrne.w	r9, r9, #2
 8035032:	f7ff fe21 	bl	8034c78 <rshift>
 8035036:	f8d8 7004 	ldr.w	r7, [r8, #4]
 803503a:	1b76      	subs	r6, r6, r5
 803503c:	2502      	movs	r5, #2
 803503e:	f1b9 0f00 	cmp.w	r9, #0
 8035042:	d047      	beq.n	80350d4 <__gethex+0x38c>
 8035044:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8035048:	2b02      	cmp	r3, #2
 803504a:	d015      	beq.n	8035078 <__gethex+0x330>
 803504c:	2b03      	cmp	r3, #3
 803504e:	d017      	beq.n	8035080 <__gethex+0x338>
 8035050:	2b01      	cmp	r3, #1
 8035052:	d109      	bne.n	8035068 <__gethex+0x320>
 8035054:	f019 0f02 	tst.w	r9, #2
 8035058:	d006      	beq.n	8035068 <__gethex+0x320>
 803505a:	f8da 3000 	ldr.w	r3, [sl]
 803505e:	ea49 0903 	orr.w	r9, r9, r3
 8035062:	f019 0f01 	tst.w	r9, #1
 8035066:	d10e      	bne.n	8035086 <__gethex+0x33e>
 8035068:	f045 0510 	orr.w	r5, r5, #16
 803506c:	e032      	b.n	80350d4 <__gethex+0x38c>
 803506e:	f04f 0901 	mov.w	r9, #1
 8035072:	e7d1      	b.n	8035018 <__gethex+0x2d0>
 8035074:	2501      	movs	r5, #1
 8035076:	e7e2      	b.n	803503e <__gethex+0x2f6>
 8035078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803507a:	f1c3 0301 	rsb	r3, r3, #1
 803507e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8035080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8035082:	2b00      	cmp	r3, #0
 8035084:	d0f0      	beq.n	8035068 <__gethex+0x320>
 8035086:	f8d4 b010 	ldr.w	fp, [r4, #16]
 803508a:	f104 0314 	add.w	r3, r4, #20
 803508e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8035092:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8035096:	f04f 0c00 	mov.w	ip, #0
 803509a:	4618      	mov	r0, r3
 803509c:	f853 2b04 	ldr.w	r2, [r3], #4
 80350a0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80350a4:	d01b      	beq.n	80350de <__gethex+0x396>
 80350a6:	3201      	adds	r2, #1
 80350a8:	6002      	str	r2, [r0, #0]
 80350aa:	2d02      	cmp	r5, #2
 80350ac:	f104 0314 	add.w	r3, r4, #20
 80350b0:	d13c      	bne.n	803512c <__gethex+0x3e4>
 80350b2:	f8d8 2000 	ldr.w	r2, [r8]
 80350b6:	3a01      	subs	r2, #1
 80350b8:	42b2      	cmp	r2, r6
 80350ba:	d109      	bne.n	80350d0 <__gethex+0x388>
 80350bc:	1171      	asrs	r1, r6, #5
 80350be:	2201      	movs	r2, #1
 80350c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80350c4:	f006 061f 	and.w	r6, r6, #31
 80350c8:	fa02 f606 	lsl.w	r6, r2, r6
 80350cc:	421e      	tst	r6, r3
 80350ce:	d13a      	bne.n	8035146 <__gethex+0x3fe>
 80350d0:	f045 0520 	orr.w	r5, r5, #32
 80350d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80350d6:	601c      	str	r4, [r3, #0]
 80350d8:	9b02      	ldr	r3, [sp, #8]
 80350da:	601f      	str	r7, [r3, #0]
 80350dc:	e6b0      	b.n	8034e40 <__gethex+0xf8>
 80350de:	4299      	cmp	r1, r3
 80350e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80350e4:	d8d9      	bhi.n	803509a <__gethex+0x352>
 80350e6:	68a3      	ldr	r3, [r4, #8]
 80350e8:	459b      	cmp	fp, r3
 80350ea:	db17      	blt.n	803511c <__gethex+0x3d4>
 80350ec:	6861      	ldr	r1, [r4, #4]
 80350ee:	9801      	ldr	r0, [sp, #4]
 80350f0:	3101      	adds	r1, #1
 80350f2:	f7fd fce9 	bl	8032ac8 <_Balloc>
 80350f6:	4681      	mov	r9, r0
 80350f8:	b918      	cbnz	r0, 8035102 <__gethex+0x3ba>
 80350fa:	4b1a      	ldr	r3, [pc, #104]	@ (8035164 <__gethex+0x41c>)
 80350fc:	4602      	mov	r2, r0
 80350fe:	2184      	movs	r1, #132	@ 0x84
 8035100:	e6c5      	b.n	8034e8e <__gethex+0x146>
 8035102:	6922      	ldr	r2, [r4, #16]
 8035104:	3202      	adds	r2, #2
 8035106:	f104 010c 	add.w	r1, r4, #12
 803510a:	0092      	lsls	r2, r2, #2
 803510c:	300c      	adds	r0, #12
 803510e:	f7f8 f9ab 	bl	802d468 <memcpy>
 8035112:	4621      	mov	r1, r4
 8035114:	9801      	ldr	r0, [sp, #4]
 8035116:	f7fd fcfc 	bl	8032b12 <_Bfree>
 803511a:	464c      	mov	r4, r9
 803511c:	6923      	ldr	r3, [r4, #16]
 803511e:	1c5a      	adds	r2, r3, #1
 8035120:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8035124:	6122      	str	r2, [r4, #16]
 8035126:	2201      	movs	r2, #1
 8035128:	615a      	str	r2, [r3, #20]
 803512a:	e7be      	b.n	80350aa <__gethex+0x362>
 803512c:	6922      	ldr	r2, [r4, #16]
 803512e:	455a      	cmp	r2, fp
 8035130:	dd0b      	ble.n	803514a <__gethex+0x402>
 8035132:	2101      	movs	r1, #1
 8035134:	4620      	mov	r0, r4
 8035136:	f7ff fd9f 	bl	8034c78 <rshift>
 803513a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803513e:	3701      	adds	r7, #1
 8035140:	42bb      	cmp	r3, r7
 8035142:	f6ff aee0 	blt.w	8034f06 <__gethex+0x1be>
 8035146:	2501      	movs	r5, #1
 8035148:	e7c2      	b.n	80350d0 <__gethex+0x388>
 803514a:	f016 061f 	ands.w	r6, r6, #31
 803514e:	d0fa      	beq.n	8035146 <__gethex+0x3fe>
 8035150:	4453      	add	r3, sl
 8035152:	f1c6 0620 	rsb	r6, r6, #32
 8035156:	f853 0c04 	ldr.w	r0, [r3, #-4]
 803515a:	f7fd fd73 	bl	8032c44 <__hi0bits>
 803515e:	42b0      	cmp	r0, r6
 8035160:	dbe7      	blt.n	8035132 <__gethex+0x3ea>
 8035162:	e7f0      	b.n	8035146 <__gethex+0x3fe>
 8035164:	0803b1de 	.word	0x0803b1de

08035168 <L_shift>:
 8035168:	f1c2 0208 	rsb	r2, r2, #8
 803516c:	0092      	lsls	r2, r2, #2
 803516e:	b570      	push	{r4, r5, r6, lr}
 8035170:	f1c2 0620 	rsb	r6, r2, #32
 8035174:	6843      	ldr	r3, [r0, #4]
 8035176:	6804      	ldr	r4, [r0, #0]
 8035178:	fa03 f506 	lsl.w	r5, r3, r6
 803517c:	432c      	orrs	r4, r5
 803517e:	40d3      	lsrs	r3, r2
 8035180:	6004      	str	r4, [r0, #0]
 8035182:	f840 3f04 	str.w	r3, [r0, #4]!
 8035186:	4288      	cmp	r0, r1
 8035188:	d3f4      	bcc.n	8035174 <L_shift+0xc>
 803518a:	bd70      	pop	{r4, r5, r6, pc}

0803518c <__match>:
 803518c:	b530      	push	{r4, r5, lr}
 803518e:	6803      	ldr	r3, [r0, #0]
 8035190:	3301      	adds	r3, #1
 8035192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8035196:	b914      	cbnz	r4, 803519e <__match+0x12>
 8035198:	6003      	str	r3, [r0, #0]
 803519a:	2001      	movs	r0, #1
 803519c:	bd30      	pop	{r4, r5, pc}
 803519e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80351a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80351a6:	2d19      	cmp	r5, #25
 80351a8:	bf98      	it	ls
 80351aa:	3220      	addls	r2, #32
 80351ac:	42a2      	cmp	r2, r4
 80351ae:	d0f0      	beq.n	8035192 <__match+0x6>
 80351b0:	2000      	movs	r0, #0
 80351b2:	e7f3      	b.n	803519c <__match+0x10>

080351b4 <__hexnan>:
 80351b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80351b8:	680b      	ldr	r3, [r1, #0]
 80351ba:	6801      	ldr	r1, [r0, #0]
 80351bc:	115e      	asrs	r6, r3, #5
 80351be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80351c2:	f013 031f 	ands.w	r3, r3, #31
 80351c6:	b087      	sub	sp, #28
 80351c8:	bf18      	it	ne
 80351ca:	3604      	addne	r6, #4
 80351cc:	2500      	movs	r5, #0
 80351ce:	1f37      	subs	r7, r6, #4
 80351d0:	4682      	mov	sl, r0
 80351d2:	4690      	mov	r8, r2
 80351d4:	9301      	str	r3, [sp, #4]
 80351d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80351da:	46b9      	mov	r9, r7
 80351dc:	463c      	mov	r4, r7
 80351de:	9502      	str	r5, [sp, #8]
 80351e0:	46ab      	mov	fp, r5
 80351e2:	784a      	ldrb	r2, [r1, #1]
 80351e4:	1c4b      	adds	r3, r1, #1
 80351e6:	9303      	str	r3, [sp, #12]
 80351e8:	b342      	cbz	r2, 803523c <__hexnan+0x88>
 80351ea:	4610      	mov	r0, r2
 80351ec:	9105      	str	r1, [sp, #20]
 80351ee:	9204      	str	r2, [sp, #16]
 80351f0:	f7ff fd94 	bl	8034d1c <__hexdig_fun>
 80351f4:	2800      	cmp	r0, #0
 80351f6:	d151      	bne.n	803529c <__hexnan+0xe8>
 80351f8:	9a04      	ldr	r2, [sp, #16]
 80351fa:	9905      	ldr	r1, [sp, #20]
 80351fc:	2a20      	cmp	r2, #32
 80351fe:	d818      	bhi.n	8035232 <__hexnan+0x7e>
 8035200:	9b02      	ldr	r3, [sp, #8]
 8035202:	459b      	cmp	fp, r3
 8035204:	dd13      	ble.n	803522e <__hexnan+0x7a>
 8035206:	454c      	cmp	r4, r9
 8035208:	d206      	bcs.n	8035218 <__hexnan+0x64>
 803520a:	2d07      	cmp	r5, #7
 803520c:	dc04      	bgt.n	8035218 <__hexnan+0x64>
 803520e:	462a      	mov	r2, r5
 8035210:	4649      	mov	r1, r9
 8035212:	4620      	mov	r0, r4
 8035214:	f7ff ffa8 	bl	8035168 <L_shift>
 8035218:	4544      	cmp	r4, r8
 803521a:	d952      	bls.n	80352c2 <__hexnan+0x10e>
 803521c:	2300      	movs	r3, #0
 803521e:	f1a4 0904 	sub.w	r9, r4, #4
 8035222:	f844 3c04 	str.w	r3, [r4, #-4]
 8035226:	f8cd b008 	str.w	fp, [sp, #8]
 803522a:	464c      	mov	r4, r9
 803522c:	461d      	mov	r5, r3
 803522e:	9903      	ldr	r1, [sp, #12]
 8035230:	e7d7      	b.n	80351e2 <__hexnan+0x2e>
 8035232:	2a29      	cmp	r2, #41	@ 0x29
 8035234:	d157      	bne.n	80352e6 <__hexnan+0x132>
 8035236:	3102      	adds	r1, #2
 8035238:	f8ca 1000 	str.w	r1, [sl]
 803523c:	f1bb 0f00 	cmp.w	fp, #0
 8035240:	d051      	beq.n	80352e6 <__hexnan+0x132>
 8035242:	454c      	cmp	r4, r9
 8035244:	d206      	bcs.n	8035254 <__hexnan+0xa0>
 8035246:	2d07      	cmp	r5, #7
 8035248:	dc04      	bgt.n	8035254 <__hexnan+0xa0>
 803524a:	462a      	mov	r2, r5
 803524c:	4649      	mov	r1, r9
 803524e:	4620      	mov	r0, r4
 8035250:	f7ff ff8a 	bl	8035168 <L_shift>
 8035254:	4544      	cmp	r4, r8
 8035256:	d936      	bls.n	80352c6 <__hexnan+0x112>
 8035258:	f1a8 0204 	sub.w	r2, r8, #4
 803525c:	4623      	mov	r3, r4
 803525e:	f853 1b04 	ldr.w	r1, [r3], #4
 8035262:	f842 1f04 	str.w	r1, [r2, #4]!
 8035266:	429f      	cmp	r7, r3
 8035268:	d2f9      	bcs.n	803525e <__hexnan+0xaa>
 803526a:	1b3b      	subs	r3, r7, r4
 803526c:	f023 0303 	bic.w	r3, r3, #3
 8035270:	3304      	adds	r3, #4
 8035272:	3401      	adds	r4, #1
 8035274:	3e03      	subs	r6, #3
 8035276:	42b4      	cmp	r4, r6
 8035278:	bf88      	it	hi
 803527a:	2304      	movhi	r3, #4
 803527c:	4443      	add	r3, r8
 803527e:	2200      	movs	r2, #0
 8035280:	f843 2b04 	str.w	r2, [r3], #4
 8035284:	429f      	cmp	r7, r3
 8035286:	d2fb      	bcs.n	8035280 <__hexnan+0xcc>
 8035288:	683b      	ldr	r3, [r7, #0]
 803528a:	b91b      	cbnz	r3, 8035294 <__hexnan+0xe0>
 803528c:	4547      	cmp	r7, r8
 803528e:	d128      	bne.n	80352e2 <__hexnan+0x12e>
 8035290:	2301      	movs	r3, #1
 8035292:	603b      	str	r3, [r7, #0]
 8035294:	2005      	movs	r0, #5
 8035296:	b007      	add	sp, #28
 8035298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803529c:	3501      	adds	r5, #1
 803529e:	2d08      	cmp	r5, #8
 80352a0:	f10b 0b01 	add.w	fp, fp, #1
 80352a4:	dd06      	ble.n	80352b4 <__hexnan+0x100>
 80352a6:	4544      	cmp	r4, r8
 80352a8:	d9c1      	bls.n	803522e <__hexnan+0x7a>
 80352aa:	2300      	movs	r3, #0
 80352ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80352b0:	2501      	movs	r5, #1
 80352b2:	3c04      	subs	r4, #4
 80352b4:	6822      	ldr	r2, [r4, #0]
 80352b6:	f000 000f 	and.w	r0, r0, #15
 80352ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80352be:	6020      	str	r0, [r4, #0]
 80352c0:	e7b5      	b.n	803522e <__hexnan+0x7a>
 80352c2:	2508      	movs	r5, #8
 80352c4:	e7b3      	b.n	803522e <__hexnan+0x7a>
 80352c6:	9b01      	ldr	r3, [sp, #4]
 80352c8:	2b00      	cmp	r3, #0
 80352ca:	d0dd      	beq.n	8035288 <__hexnan+0xd4>
 80352cc:	f1c3 0320 	rsb	r3, r3, #32
 80352d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80352d4:	40da      	lsrs	r2, r3
 80352d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80352da:	4013      	ands	r3, r2
 80352dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80352e0:	e7d2      	b.n	8035288 <__hexnan+0xd4>
 80352e2:	3f04      	subs	r7, #4
 80352e4:	e7d0      	b.n	8035288 <__hexnan+0xd4>
 80352e6:	2004      	movs	r0, #4
 80352e8:	e7d5      	b.n	8035296 <__hexnan+0xe2>
	...

080352ec <_init>:
 80352ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80352ee:	bf00      	nop
 80352f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80352f2:	bc08      	pop	{r3}
 80352f4:	469e      	mov	lr, r3
 80352f6:	4770      	bx	lr

080352f8 <_fini>:
 80352f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80352fa:	bf00      	nop
 80352fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80352fe:	bc08      	pop	{r3}
 8035300:	469e      	mov	lr, r3
 8035302:	4770      	bx	lr
