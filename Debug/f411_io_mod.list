
f411_io_mod.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002eec4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e40  0802f068  0802f068  00030068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034ea8  08034ea8  000369c8  2**0
                  CONTENTS
  4 .ARM          00000008  08034ea8  08034ea8  00035ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034eb0  08034eb0  000369c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08034eb0  08034eb0  00035eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08034eb8  08034eb8  00035eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009c8  20000000  08034ebc  00036000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017ae4  200009c8  08035884  000369c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  200184ac  08035884  000374ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000369c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003500d  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006233  00000000  00000000  0006ba05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ed0  00000000  00000000  00071c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000027a9  00000000  00000000  00074b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f719  00000000  00000000  000772b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033777  00000000  00000000  000969ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a84b2  00000000  00000000  000ca141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001725f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f0a4  00000000  00000000  00172638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001816dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009c8 	.word	0x200009c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0802f04c 	.word	0x0802f04c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009cc 	.word	0x200009cc
 80001dc:	0802f04c 	.word	0x0802f04c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd6:	f000 b9ff 	b.w	80010d8 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f897 	bl	8000e1c <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f88a 	bl	8000e1c <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f879 	bl	8000e1c <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f86b 	bl	8000e1c <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d6c:	f000 b9b4 	b.w	80010d8 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f850 	bl	8000e1c <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__popcountsi2>:
 8000d88:	0843      	lsrs	r3, r0, #1
 8000d8a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8000d8e:	1ac0      	subs	r0, r0, r3
 8000d90:	0883      	lsrs	r3, r0, #2
 8000d92:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000d96:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8000d9a:	4418      	add	r0, r3
 8000d9c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000da0:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000da4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000da8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000dac:	0e00      	lsrs	r0, r0, #24
 8000dae:	4770      	bx	lr

08000db0 <__aeabi_d2lz>:
 8000db0:	b538      	push	{r3, r4, r5, lr}
 8000db2:	2200      	movs	r2, #0
 8000db4:	2300      	movs	r3, #0
 8000db6:	4604      	mov	r4, r0
 8000db8:	460d      	mov	r5, r1
 8000dba:	f7ff fea7 	bl	8000b0c <__aeabi_dcmplt>
 8000dbe:	b928      	cbnz	r0, 8000dcc <__aeabi_d2lz+0x1c>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dc8:	f000 b80a 	b.w	8000de0 <__aeabi_d2ulz>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dd2:	f000 f805 	bl	8000de0 <__aeabi_d2ulz>
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ddc:	bd38      	pop	{r3, r4, r5, pc}
 8000dde:	bf00      	nop

08000de0 <__aeabi_d2ulz>:
 8000de0:	b5d0      	push	{r4, r6, r7, lr}
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <__aeabi_d2ulz+0x34>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	4606      	mov	r6, r0
 8000de8:	460f      	mov	r7, r1
 8000dea:	f7ff fc1d 	bl	8000628 <__aeabi_dmul>
 8000dee:	f7ff fef3 	bl	8000bd8 <__aeabi_d2uiz>
 8000df2:	4604      	mov	r4, r0
 8000df4:	f7ff fb9e 	bl	8000534 <__aeabi_ui2d>
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <__aeabi_d2ulz+0x38>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f7ff fc14 	bl	8000628 <__aeabi_dmul>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4630      	mov	r0, r6
 8000e06:	4639      	mov	r1, r7
 8000e08:	f7ff fa56 	bl	80002b8 <__aeabi_dsub>
 8000e0c:	f7ff fee4 	bl	8000bd8 <__aeabi_d2uiz>
 8000e10:	4621      	mov	r1, r4
 8000e12:	bdd0      	pop	{r4, r6, r7, pc}
 8000e14:	3df00000 	.word	0x3df00000
 8000e18:	41f00000 	.word	0x41f00000

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of SPI2Mutex */
  SPI2MutexHandle = osMutexNew(&SPI2Mutex_attributes);
 80010e0:	482f      	ldr	r0, [pc, #188]	@ (80011a0 <MX_FREERTOS_Init+0xc4>)
 80010e2:	f007 ffdf 	bl	80090a4 <osMutexNew>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a2e      	ldr	r2, [pc, #184]	@ (80011a4 <MX_FREERTOS_Init+0xc8>)
 80010ea:	6013      	str	r3, [r2, #0]

  /* creation of FSMutex */
  FSMutexHandle = osMutexNew(&FSMutex_attributes);
 80010ec:	482e      	ldr	r0, [pc, #184]	@ (80011a8 <MX_FREERTOS_Init+0xcc>)
 80010ee:	f007 ffd9 	bl	80090a4 <osMutexNew>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a2d      	ldr	r2, [pc, #180]	@ (80011ac <MX_FREERTOS_Init+0xd0>)
 80010f6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inputReadQ */
  inputReadQHandle = osMessageQueueNew (1, sizeof(inputs_state_t), &inputReadQ_attributes);
 80010f8:	4a2d      	ldr	r2, [pc, #180]	@ (80011b0 <MX_FREERTOS_Init+0xd4>)
 80010fa:	2103      	movs	r1, #3
 80010fc:	2001      	movs	r0, #1
 80010fe:	f008 f8df 	bl	80092c0 <osMessageQueueNew>
 8001102:	4603      	mov	r3, r0
 8001104:	4a2b      	ldr	r2, [pc, #172]	@ (80011b4 <MX_FREERTOS_Init+0xd8>)
 8001106:	6013      	str	r3, [r2, #0]

  /* creation of outputReadQ */
  outputReadQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputReadQ_attributes);
 8001108:	4a2b      	ldr	r2, [pc, #172]	@ (80011b8 <MX_FREERTOS_Init+0xdc>)
 800110a:	2103      	movs	r1, #3
 800110c:	2001      	movs	r0, #1
 800110e:	f008 f8d7 	bl	80092c0 <osMessageQueueNew>
 8001112:	4603      	mov	r3, r0
 8001114:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <MX_FREERTOS_Init+0xe0>)
 8001116:	6013      	str	r3, [r2, #0]

  /* creation of outputWriteQ */
  outputWriteQHandle = osMessageQueueNew (1, sizeof(outputs_state_t), &outputWriteQ_attributes);
 8001118:	4a29      	ldr	r2, [pc, #164]	@ (80011c0 <MX_FREERTOS_Init+0xe4>)
 800111a:	2103      	movs	r1, #3
 800111c:	2001      	movs	r0, #1
 800111e:	f008 f8cf 	bl	80092c0 <osMessageQueueNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <MX_FREERTOS_Init+0xe8>)
 8001126:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8001128:	4a27      	ldr	r2, [pc, #156]	@ (80011c8 <MX_FREERTOS_Init+0xec>)
 800112a:	21c6      	movs	r1, #198	@ 0xc6
 800112c:	2001      	movs	r0, #1
 800112e:	f008 f8c7 	bl	80092c0 <osMessageQueueNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a25      	ldr	r2, [pc, #148]	@ (80011cc <MX_FREERTOS_Init+0xf0>)
 8001136:	6013      	str	r3, [r2, #0]

  /* creation of loggingQ */
  loggingQHandle = osMessageQueueNew (15, sizeof(log_message_t), &loggingQ_attributes);
 8001138:	4a25      	ldr	r2, [pc, #148]	@ (80011d0 <MX_FREERTOS_Init+0xf4>)
 800113a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800113e:	200f      	movs	r0, #15
 8001140:	f008 f8be 	bl	80092c0 <osMessageQueueNew>
 8001144:	4603      	mov	r3, r0
 8001146:	4a23      	ldr	r2, [pc, #140]	@ (80011d4 <MX_FREERTOS_Init+0xf8>)
 8001148:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ethTask */
  ethTaskHandle = osThreadNew(StartEthTask, NULL, &ethTask_attributes);
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <MX_FREERTOS_Init+0xfc>)
 800114c:	2100      	movs	r1, #0
 800114e:	4823      	ldr	r0, [pc, #140]	@ (80011dc <MX_FREERTOS_Init+0x100>)
 8001150:	f007 fefa 	bl	8008f48 <osThreadNew>
 8001154:	4603      	mov	r3, r0
 8001156:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <MX_FREERTOS_Init+0x104>)
 8001158:	6013      	str	r3, [r2, #0]

  /* creation of IOTask */
  IOTaskHandle = osThreadNew(StartIOTask, NULL, &IOTask_attributes);
 800115a:	4a22      	ldr	r2, [pc, #136]	@ (80011e4 <MX_FREERTOS_Init+0x108>)
 800115c:	2100      	movs	r1, #0
 800115e:	4822      	ldr	r0, [pc, #136]	@ (80011e8 <MX_FREERTOS_Init+0x10c>)
 8001160:	f007 fef2 	bl	8008f48 <osThreadNew>
 8001164:	4603      	mov	r3, r0
 8001166:	4a21      	ldr	r2, [pc, #132]	@ (80011ec <MX_FREERTOS_Init+0x110>)
 8001168:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(StartDisplayTask, NULL, &displayTask_attributes);
 800116a:	4a21      	ldr	r2, [pc, #132]	@ (80011f0 <MX_FREERTOS_Init+0x114>)
 800116c:	2100      	movs	r1, #0
 800116e:	4821      	ldr	r0, [pc, #132]	@ (80011f4 <MX_FREERTOS_Init+0x118>)
 8001170:	f007 feea 	bl	8008f48 <osThreadNew>
 8001174:	4603      	mov	r3, r0
 8001176:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <MX_FREERTOS_Init+0x11c>)
 8001178:	6013      	str	r3, [r2, #0]

  /* creation of settingsTask */
  settingsTaskHandle = osThreadNew(StartSettingsTask, NULL, &settingsTask_attributes);
 800117a:	4a20      	ldr	r2, [pc, #128]	@ (80011fc <MX_FREERTOS_Init+0x120>)
 800117c:	2100      	movs	r1, #0
 800117e:	4820      	ldr	r0, [pc, #128]	@ (8001200 <MX_FREERTOS_Init+0x124>)
 8001180:	f007 fee2 	bl	8008f48 <osThreadNew>
 8001184:	4603      	mov	r3, r0
 8001186:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <MX_FREERTOS_Init+0x128>)
 8001188:	6013      	str	r3, [r2, #0]

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(StartLoggingTask, NULL, &loggingTask_attributes);
 800118a:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <MX_FREERTOS_Init+0x12c>)
 800118c:	2100      	movs	r1, #0
 800118e:	481f      	ldr	r0, [pc, #124]	@ (800120c <MX_FREERTOS_Init+0x130>)
 8001190:	f007 feda 	bl	8008f48 <osThreadNew>
 8001194:	4603      	mov	r3, r0
 8001196:	4a1e      	ldr	r2, [pc, #120]	@ (8001210 <MX_FREERTOS_Init+0x134>)
 8001198:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08033628 	.word	0x08033628
 80011a4:	20000a14 	.word	0x20000a14
 80011a8:	08033638 	.word	0x08033638
 80011ac:	20000a18 	.word	0x20000a18
 80011b0:	080335b0 	.word	0x080335b0
 80011b4:	20000a00 	.word	0x20000a00
 80011b8:	080335c8 	.word	0x080335c8
 80011bc:	20000a04 	.word	0x20000a04
 80011c0:	080335e0 	.word	0x080335e0
 80011c4:	20000a08 	.word	0x20000a08
 80011c8:	080335f8 	.word	0x080335f8
 80011cc:	20000a0c 	.word	0x20000a0c
 80011d0:	08033610 	.word	0x08033610
 80011d4:	20000a10 	.word	0x20000a10
 80011d8:	080334fc 	.word	0x080334fc
 80011dc:	08001215 	.word	0x08001215
 80011e0:	200009ec 	.word	0x200009ec
 80011e4:	08033520 	.word	0x08033520
 80011e8:	080014e5 	.word	0x080014e5
 80011ec:	200009f0 	.word	0x200009f0
 80011f0:	08033544 	.word	0x08033544
 80011f4:	080016ad 	.word	0x080016ad
 80011f8:	200009f4 	.word	0x200009f4
 80011fc:	08033568 	.word	0x08033568
 8001200:	080018dd 	.word	0x080018dd
 8001204:	200009f8 	.word	0x200009f8
 8001208:	0803358c 	.word	0x0803358c
 800120c:	08001a45 	.word	0x08001a45
 8001210:	200009fc 	.word	0x200009fc

08001214 <StartEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEthTask */
void StartEthTask(void *argument)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b0f1      	sub	sp, #452	@ 0x1c4
 8001218:	af02      	add	r7, sp, #8
 800121a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800121e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001222:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartEthTask */
  void 		           *web_handler;
  struct 			   mg_mgr mgr; // Initialise
  MQTT_cred_struct	   mqtt_conf;
  struct mg_connection *mqtt_conn;
  struct               mg_tcpip_spi spi = {
 8001224:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001228:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800122c:	4aa0      	ldr	r2, [pc, #640]	@ (80014b0 <StartEthTask+0x29c>)
 800122e:	461c      	mov	r4, r3
 8001230:	4613      	mov	r3, r2
 8001232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
											  .begin = EthBegin,
											  .end = EthEnd,
											  .txn = EthTxn,
											  .spi = &hspi2,
										  };
  struct              mg_tcpip_if   mif = {
 8001238:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800123c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001240:	4618      	mov	r0, r3
 8001242:	2380      	movs	r3, #128	@ 0x80
 8001244:	461a      	mov	r2, r3
 8001246:	2100      	movs	r1, #0
 8001248:	f024 fd82 	bl	8025d50 <memset>
 800124c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001250:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001254:	2240      	movs	r2, #64	@ 0x40
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800125c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001260:	2222      	movs	r2, #34	@ 0x22
 8001262:	705a      	strb	r2, [r3, #1]
											  .mac = {
													  0x40,
													  0x22,
													  *(uint8_t*)(UID_BASE),
 8001264:	4b93      	ldr	r3, [pc, #588]	@ (80014b4 <StartEthTask+0x2a0>)
 8001266:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001268:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800126c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001270:	709a      	strb	r2, [r3, #2]
													  *(uint8_t*)(UID_BASE + 0x02),
 8001272:	4b91      	ldr	r3, [pc, #580]	@ (80014b8 <StartEthTask+0x2a4>)
 8001274:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001276:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800127a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800127e:	70da      	strb	r2, [r3, #3]
													  *(uint8_t*)(UID_BASE + 0x04),
 8001280:	4b8e      	ldr	r3, [pc, #568]	@ (80014bc <StartEthTask+0x2a8>)
 8001282:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001284:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001288:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800128c:	711a      	strb	r2, [r3, #4]
													  *(uint8_t*)(UID_BASE + 0x08)
 800128e:	4b8c      	ldr	r3, [pc, #560]	@ (80014c0 <StartEthTask+0x2ac>)
 8001290:	781a      	ldrb	r2, [r3, #0]
  struct              mg_tcpip_if   mif = {
 8001292:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001296:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800129a:	715a      	strb	r2, [r3, #5]
 800129c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012a4:	2201      	movs	r2, #1
 80012a6:	77da      	strb	r2, [r3, #31]
 80012a8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012ac:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]
 80012b6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012ba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012be:	4a81      	ldr	r2, [pc, #516]	@ (80014c4 <StartEthTask+0x2b0>)
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80012c2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80012c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80012ca:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
											  .enable_req_sntp = true,
											  .driver = &mg_tcpip_driver_w5500,
											  .driver_data = &spi
										  };

  mg_full_info.mgr =  &mgr;
 80012d0:	4a7d      	ldr	r2, [pc, #500]	@ (80014c8 <StartEthTask+0x2b4>)
 80012d2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012d6:	6013      	str	r3, [r2, #0]
  mg_full_info.mgr_if =  &mif;
 80012d8:	4a7b      	ldr	r2, [pc, #492]	@ (80014c8 <StartEthTask+0x2b4>)
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	6053      	str	r3, [r2, #4]



  mg_mgr_init(&mgr);        // Mongoose event manager
 80012e0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012e4:	4618      	mov	r0, r3
 80012e6:	f01c fceb 	bl	801dcc0 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 80012ea:	4b78      	ldr	r3, [pc, #480]	@ (80014cc <StartEthTask+0x2b8>)
 80012ec:	2203      	movs	r2, #3
 80012ee:	601a      	str	r2, [r3, #0]

  web_handler = dash_hdl(); // Get dashboard handler
 80012f0:	f002 fd08 	bl	8003d04 <dash_hdl>
 80012f4:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

  while(mif.mtu == 0){
 80012f8:	e013      	b.n	8001322 <StartEthTask+0x10e>
	  EthResetBegin();
 80012fa:	f000 fc7d 	bl	8001bf8 <EthResetBegin>
	  osDelay(500);
 80012fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001302:	f007 feb4 	bl	800906e <osDelay>
	  EthResetEnd();
 8001306:	f000 fc83 	bl	8001c10 <EthResetEnd>
	  osDelay(2000);
 800130a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800130e:	f007 feae 	bl	800906e <osDelay>
	  mg_tcpip_init(&mgr, &mif);  // Initialize TCP/IP stack
 8001312:	f107 0208 	add.w	r2, r7, #8
 8001316:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f01f fa57 	bl	80207d0 <mg_tcpip_init>
  while(mif.mtu == 0){
 8001322:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001326:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800132a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0e3      	beq.n	80012fa <StartEthTask+0xe6>
  }
  set_device_id(mif.mac, sizeof(mif.mac));
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	2106      	movs	r1, #6
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fa1d 	bl	8004778 <set_device_id>
  reg_parameter_handler(RW_parameters_from_queue);
 800133e:	4864      	ldr	r0, [pc, #400]	@ (80014d0 <StartEthTask+0x2bc>)
 8001340:	f002 fcea 	bl	8003d18 <reg_parameter_handler>
  mg_http_listen(&mgr, "http://0.0.0.0:80", web_handler, &mg_full_info);
 8001344:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001348:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 800134c:	4b5e      	ldr	r3, [pc, #376]	@ (80014c8 <StartEthTask+0x2b4>)
 800134e:	4961      	ldr	r1, [pc, #388]	@ (80014d4 <StartEthTask+0x2c0>)
 8001350:	f018 fece 	bl	801a0f0 <mg_http_listen>

  while (mif.state != MG_TCPIP_STATE_READY) {
 8001354:	e008      	b.n	8001368 <StartEthTask+0x154>
    mg_mgr_poll(&mgr, 1);
 8001356:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800135a:	2101      	movs	r1, #1
 800135c:	4618      	mov	r0, r3
 800135e:	f01f fd4b 	bl	8020df8 <mg_mgr_poll>
    osDelay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f007 fe83 	bl	800906e <osDelay>
  while (mif.state != MG_TCPIP_STATE_READY) {
 8001368:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800136c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001370:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001374:	2b03      	cmp	r3, #3
 8001376:	d1ee      	bne.n	8001356 <StartEthTask+0x142>
  }

  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001378:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <StartEthTask+0x2b4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	b2d9      	uxtb	r1, r3
 8001380:	4b51      	ldr	r3, [pc, #324]	@ (80014c8 <StartEthTask+0x2b4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	b2d8      	uxtb	r0, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 800138a:	4b4f      	ldr	r3, [pc, #316]	@ (80014c8 <StartEthTask+0x2b4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	0c1b      	lsrs	r3, r3, #16
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001392:	b2db      	uxtb	r3, r3
			(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001394:	4a4c      	ldr	r2, [pc, #304]	@ (80014c8 <StartEthTask+0x2b4>)
 8001396:	6852      	ldr	r2, [r2, #4]
 8001398:	6892      	ldr	r2, [r2, #8]
 800139a:	0e12      	lsrs	r2, r2, #24
  logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu", (mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4603      	mov	r3, r0
 80013a2:	460a      	mov	r2, r1
 80013a4:	494c      	ldr	r1, [pc, #304]	@ (80014d8 <StartEthTask+0x2c4>)
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 fed0 	bl	800214c <logging>

  RW_parameters_from_queue(&mqtt_conf, S_MQTT, S_READ);
 80013ac:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fcf3 	bl	8001da0 <RW_parameters_from_queue>
  if (mqtt_conf.enable){
 80013ba:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80013be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d018      	beq.n	80013fa <StartEthTask+0x1e6>
	  logging(L_INFO, "MQTT function enabled.");
 80013c8:	4944      	ldr	r1, [pc, #272]	@ (80014dc <StartEthTask+0x2c8>)
 80013ca:	2001      	movs	r0, #1
 80013cc:	f000 febe 	bl	800214c <logging>
	  mqtt_init(&mgr, &mif, mqtt_conf.uri, mqtt_conf.login, mqtt_conf.pass, RW_parameters_from_queue);
 80013d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013d4:	f103 0484 	add.w	r4, r3, #132	@ 0x84
 80013d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013dc:	1c9a      	adds	r2, r3, #2
 80013de:	f107 0108 	add.w	r1, r7, #8
 80013e2:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80013e6:	4b3a      	ldr	r3, [pc, #232]	@ (80014d0 <StartEthTask+0x2bc>)
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013ee:	33a5      	adds	r3, #165	@ 0xa5
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4623      	mov	r3, r4
 80013f4:	f003 f8ca 	bl	800458c <mqtt_init>
 80013f8:	e003      	b.n	8001402 <StartEthTask+0x1ee>
  }else{
	  logging(L_INFO, "MQTT function disabled");
 80013fa:	4939      	ldr	r1, [pc, #228]	@ (80014e0 <StartEthTask+0x2cc>)
 80013fc:	2001      	movs	r0, #1
 80013fe:	f000 fea5 	bl	800214c <logging>
  }
  start_sntp(&mgr);
 8001402:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001406:	4618      	mov	r0, r3
 8001408:	f003 feac 	bl	8005164 <start_sntp>
  ssdp_start_server(&mgr, &mif);
 800140c:	f107 0208 	add.w	r2, r7, #8
 8001410:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f004 f804 	bl	8005424 <ssdp_start_server>
  TickType_t last_tick = xTaskGetTickCount(); // начальное значение тиков
 800141c:	f009 fda0 	bl	800af60 <xTaskGetTickCount>
 8001420:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4

  /* Infinite loop */
  for(;;)
  {
	  TickType_t current_tick = xTaskGetTickCount();
 8001424:	f009 fd9c 	bl	800af60 <xTaskGetTickCount>
 8001428:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac
	  uint32_t elapsed_ms = (current_tick - last_tick) * portTICK_PERIOD_MS; // количество миллисекунд, прошедших с последнего вызова
 800142c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001430:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	  last_tick = current_tick; // обновляем значение тиков
 800143a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800143e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4

	  mg_mgr_poll(&mgr, elapsed_ms); // передаем фактическое время в миллисекундах
 8001442:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8001446:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f01f fcd3 	bl	8020df8 <mg_mgr_poll>

      while (mif.driver->up(&mif) == false){
 8001452:	e018      	b.n	8001486 <StartEthTask+0x272>
    	  EthResetBegin(); //enable reset state w5500
 8001454:	f000 fbd0 	bl	8001bf8 <EthResetBegin>
    	  osDelay(100);
 8001458:	2064      	movs	r0, #100	@ 0x64
 800145a:	f007 fe08 	bl	800906e <osDelay>
    	  EthResetEnd(); //disable reset state w5500
 800145e:	f000 fbd7 	bl	8001c10 <EthResetEnd>
    	  osDelay(3000);
 8001462:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001466:	f007 fe02 	bl	800906e <osDelay>
    	  mif.driver->init(&mif);
 800146a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800146e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f107 0208 	add.w	r2, r7, #8
 800147a:	4610      	mov	r0, r2
 800147c:	4798      	blx	r3
    	  osDelay(7000);
 800147e:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001482:	f007 fdf4 	bl	800906e <osDelay>
      while (mif.driver->up(&mif) == false){
 8001486:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800148a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f107 0208 	add.w	r2, r7, #8
 8001496:	4610      	mov	r0, r2
 8001498:	4798      	blx	r3
 800149a:	4603      	mov	r3, r0
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1d6      	bne.n	8001454 <StartEthTask+0x240>
      }
      osDelay(1);
 80014a6:	2001      	movs	r0, #1
 80014a8:	f007 fde1 	bl	800906e <osDelay>
  {
 80014ac:	e7ba      	b.n	8001424 <StartEthTask+0x210>
 80014ae:	bf00      	nop
 80014b0:	0802f150 	.word	0x0802f150
 80014b4:	1fff7a10 	.word	0x1fff7a10
 80014b8:	1fff7a12 	.word	0x1fff7a12
 80014bc:	1fff7a14 	.word	0x1fff7a14
 80014c0:	1fff7a18 	.word	0x1fff7a18
 80014c4:	200002a0 	.word	0x200002a0
 80014c8:	200009e4 	.word	0x200009e4
 80014cc:	20000298 	.word	0x20000298
 80014d0:	08001da1 	.word	0x08001da1
 80014d4:	0802f0f0 	.word	0x0802f0f0
 80014d8:	0802f104 	.word	0x0802f104
 80014dc:	0802f120 	.word	0x0802f120
 80014e0:	0802f138 	.word	0x0802f138

080014e4 <StartIOTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIOTask */
void StartIOTask(void *argument)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b091      	sub	sp, #68	@ 0x44
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIOTask */
	uint16_t pinCoils[] = {coil1_Pin, coil2_Pin, coil3_Pin};
 80014ec:	4a69      	ldr	r2, [pc, #420]	@ (8001694 <StartIOTask+0x1b0>)
 80014ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014f6:	6018      	str	r0, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portCoils[] = {coil1_GPIO_Port, coil2_GPIO_Port, coil3_GPIO_Port};
 80014fc:	4a66      	ldr	r2, [pc, #408]	@ (8001698 <StartIOTask+0x1b4>)
 80014fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001502:	ca07      	ldmia	r2, {r0, r1, r2}
 8001504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t pinInputs[] = {input1_Pin, input2_Pin, input3_Pin};
 8001508:	4a64      	ldr	r2, [pc, #400]	@ (800169c <StartIOTask+0x1b8>)
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001512:	6018      	str	r0, [r3, #0]
 8001514:	3304      	adds	r3, #4
 8001516:	8019      	strh	r1, [r3, #0]
	GPIO_TypeDef* portInputs[] = {input1_GPIO_Port, input2_GPIO_Port, input3_GPIO_Port};
 8001518:	4a5f      	ldr	r2, [pc, #380]	@ (8001698 <StartIOTask+0x1b4>)
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001520:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
  /* Infinite loop */
  for(;;)
  {
	 // write outputs
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8001524:	4b5e      	ldr	r3, [pc, #376]	@ (80016a0 <StartIOTask+0x1bc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f007 fffb 	bl	8009524 <osMessageQueueGetCount>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d041      	beq.n	80015b8 <StartIOTask+0xd4>
		 osMessageQueueGet(outputWriteQHandle, &pinOutputs_w, 0, 0);
 8001534:	4b5a      	ldr	r3, [pc, #360]	@ (80016a0 <StartIOTask+0x1bc>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f107 010c 	add.w	r1, r7, #12
 800153c:	2300      	movs	r3, #0
 800153e:	2200      	movs	r2, #0
 8001540:	f007 ff92 	bl	8009468 <osMessageQueueGet>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 8001544:	2300      	movs	r3, #0
 8001546:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800154a:	e031      	b.n	80015b0 <StartIOTask+0xcc>
		     if (pinOutputs_w[i]) {
 800154c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001550:	3340      	adds	r3, #64	@ 0x40
 8001552:	443b      	add	r3, r7
 8001554:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d012      	beq.n	8001582 <StartIOTask+0x9e>
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_SET);
 800155c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	3340      	adds	r3, #64	@ 0x40
 8001564:	443b      	add	r3, r7
 8001566:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800156a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	3340      	adds	r3, #64	@ 0x40
 8001572:	443b      	add	r3, r7
 8001574:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	f004 fe7c 	bl	8006278 <HAL_GPIO_WritePin>
 8001580:	e011      	b.n	80015a6 <StartIOTask+0xc2>
		     } else {
		         HAL_GPIO_WritePin(portCoils[i], pinCoils[i], GPIO_PIN_RESET);
 8001582:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	3340      	adds	r3, #64	@ 0x40
 800158a:	443b      	add	r3, r7
 800158c:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8001590:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	3340      	adds	r3, #64	@ 0x40
 8001598:	443b      	add	r3, r7
 800159a:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	f004 fe69 	bl	8006278 <HAL_GPIO_WritePin>
		 for (i = 0; i < OUTPUTS_COUNT; i++) {
 80015a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015aa:	3301      	adds	r3, #1
 80015ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d9c9      	bls.n	800154c <StartIOTask+0x68>
		     }
		 }
	 }

	 // read outputs status
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80015be:	e01f      	b.n	8001600 <StartIOTask+0x11c>
		pinOutputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portCoils[i], pinCoils[i]);
 80015c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	3340      	adds	r3, #64	@ 0x40
 80015c8:	443b      	add	r3, r7
 80015ca:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80015ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	3340      	adds	r3, #64	@ 0x40
 80015d6:	443b      	add	r3, r7
 80015d8:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 80015dc:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 80015e0:	4619      	mov	r1, r3
 80015e2:	4610      	mov	r0, r2
 80015e4:	f004 fe30 	bl	8006248 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80015f0:	443b      	add	r3, r7
 80015f2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (i = 0; i < OUTPUTS_COUNT; i++) {
 80015f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015fa:	3301      	adds	r3, #1
 80015fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001600:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001604:	2b02      	cmp	r3, #2
 8001606:	d9db      	bls.n	80015c0 <StartIOTask+0xdc>
	}
	//xQueueOverwrite(outputReadQHandle, &pinOutputs_r);
	osMessageQueueReset(outputReadQHandle);
 8001608:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <StartIOTask+0x1c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f007 ffa9 	bl	8009564 <osMessageQueueReset>
	osMessageQueuePut(outputReadQHandle, &pinOutputs_r, 0, 0);
 8001612:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <StartIOTask+0x1c0>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	f107 0110 	add.w	r1, r7, #16
 800161a:	2300      	movs	r3, #0
 800161c:	2200      	movs	r2, #0
 800161e:	f007 fec3 	bl	80093a8 <osMessageQueuePut>

	// read inputs status
	for (i = 0; i < INPUTS_COUNT; i++) {
 8001622:	2300      	movs	r3, #0
 8001624:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001628:	e01f      	b.n	800166a <StartIOTask+0x186>
		pinInputs_r[i] = (uint8_t)HAL_GPIO_ReadPin(portInputs[i], pinInputs[i]);
 800162a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	3340      	adds	r3, #64	@ 0x40
 8001632:	443b      	add	r3, r7
 8001634:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8001638:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	3340      	adds	r3, #64	@ 0x40
 8001640:	443b      	add	r3, r7
 8001642:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001646:	f897 403f 	ldrb.w	r4, [r7, #63]	@ 0x3f
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f004 fdfb 	bl	8006248 <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800165a:	443b      	add	r3, r7
 800165c:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (i = 0; i < INPUTS_COUNT; i++) {
 8001660:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001664:	3301      	adds	r3, #1
 8001666:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800166a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800166e:	2b02      	cmp	r3, #2
 8001670:	d9db      	bls.n	800162a <StartIOTask+0x146>
	}
	//xQueueOverwrite(inputReadQHandle, &pinInputs_r);
	osMessageQueueReset(inputReadQHandle);
 8001672:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <StartIOTask+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f007 ff74 	bl	8009564 <osMessageQueueReset>
	osMessageQueuePut(inputReadQHandle, &pinInputs_r, 0, 0);
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <StartIOTask+0x1c4>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	f107 0114 	add.w	r1, r7, #20
 8001684:	2300      	movs	r3, #0
 8001686:	2200      	movs	r2, #0
 8001688:	f007 fe8e 	bl	80093a8 <osMessageQueuePut>

    osDelay(1);
 800168c:	2001      	movs	r0, #1
 800168e:	f007 fcee 	bl	800906e <osDelay>
	 if(osMessageQueueGetCount(outputWriteQHandle)){
 8001692:	e747      	b.n	8001524 <StartIOTask+0x40>
 8001694:	0802f160 	.word	0x0802f160
 8001698:	0802f168 	.word	0x0802f168
 800169c:	0802f174 	.word	0x0802f174
 80016a0:	20000a08 	.word	0x20000a08
 80016a4:	20000a04 	.word	0x20000a04
 80016a8:	20000a00 	.word	0x20000a00

080016ac <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	b08f      	sub	sp, #60	@ 0x3c
 80016b0:	af04      	add	r7, sp, #16
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
	uint8_t x,y;
	char buf[20];
	osDelay(1000);//
 80016b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016b8:	f007 fcd9 	bl	800906e <osDelay>

	SSD1306_Init (); // initialise the display
 80016bc:	f007 f902 	bl	80088c4 <SSD1306_Init>
	osDelay(100);//
 80016c0:	2064      	movs	r0, #100	@ 0x64
 80016c2:	f007 fcd4 	bl	800906e <osDelay>
    SSD1306_GotoXY(x=1,y=0);
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016d2:	2100      	movs	r1, #0
 80016d4:	2001      	movs	r0, #1
 80016d6:	f007 fa55 	bl	8008b84 <SSD1306_GotoXY>
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016da:	2000      	movs	r0, #0
 80016dc:	f007 f9da 	bl	8008a94 <SSD1306_Fill>
    SSD1306_Puts("Compiled: ", &Font_7x10, SSD1306_COLOR_WHITE);
 80016e0:	2201      	movs	r2, #1
 80016e2:	4972      	ldr	r1, [pc, #456]	@ (80018ac <StartDisplayTask+0x200>)
 80016e4:	4872      	ldr	r0, [pc, #456]	@ (80018b0 <StartDisplayTask+0x204>)
 80016e6:	f007 fae1 	bl	8008cac <SSD1306_Puts>
    //SSD1306_GotoXY(x=1,y=y+11);
    SSD1306_Puts(__TIME__, &Font_7x10, SSD1306_COLOR_WHITE);
 80016ea:	2201      	movs	r2, #1
 80016ec:	496f      	ldr	r1, [pc, #444]	@ (80018ac <StartDisplayTask+0x200>)
 80016ee:	4871      	ldr	r0, [pc, #452]	@ (80018b4 <StartDisplayTask+0x208>)
 80016f0:	f007 fadc 	bl	8008cac <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 80016f4:	2301      	movs	r3, #1
 80016f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80016fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016fe:	330b      	adds	r3, #11
 8001700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001704:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001708:	b29b      	uxth	r3, r3
 800170a:	4619      	mov	r1, r3
 800170c:	2001      	movs	r0, #1
 800170e:	f007 fa39 	bl	8008b84 <SSD1306_GotoXY>
    SSD1306_Puts(__DATE__, &Font_7x10, SSD1306_COLOR_WHITE);
 8001712:	2201      	movs	r2, #1
 8001714:	4965      	ldr	r1, [pc, #404]	@ (80018ac <StartDisplayTask+0x200>)
 8001716:	4868      	ldr	r0, [pc, #416]	@ (80018b8 <StartDisplayTask+0x20c>)
 8001718:	f007 fac8 	bl	8008cac <SSD1306_Puts>
    SSD1306_GotoXY(x=1,y=y+11);
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001722:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001726:	330b      	adds	r3, #11
 8001728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800172c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001730:	b29b      	uxth	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	2001      	movs	r0, #1
 8001736:	f007 fa25 	bl	8008b84 <SSD1306_GotoXY>
	SSD1306_Puts("MAC: ", &Font_7x10, SSD1306_COLOR_WHITE);
 800173a:	2201      	movs	r2, #1
 800173c:	495b      	ldr	r1, [pc, #364]	@ (80018ac <StartDisplayTask+0x200>)
 800173e:	485f      	ldr	r0, [pc, #380]	@ (80018bc <StartDisplayTask+0x210>)
 8001740:	f007 fab4 	bl	8008cac <SSD1306_Puts>
	SSD1306_GotoXY(x=1,y=y+11);
 8001744:	2301      	movs	r3, #1
 8001746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800174a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800174e:	330b      	adds	r3, #11
 8001750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001754:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001758:	b29b      	uxth	r3, r3
 800175a:	4619      	mov	r1, r3
 800175c:	2001      	movs	r0, #1
 800175e:	f007 fa11 	bl	8008b84 <SSD1306_GotoXY>
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001762:	4b57      	ldr	r3, [pc, #348]	@ (80018c0 <StartDisplayTask+0x214>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	781b      	ldrb	r3, [r3, #0]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001768:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 800176a:	4b55      	ldr	r3, [pc, #340]	@ (80018c0 <StartDisplayTask+0x214>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	785b      	ldrb	r3, [r3, #1]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001770:	461e      	mov	r6, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <StartDisplayTask+0x214>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	789b      	ldrb	r3, [r3, #2]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001778:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 800177a:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <StartDisplayTask+0x214>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	78db      	ldrb	r3, [r3, #3]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001780:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001782:	4b4f      	ldr	r3, [pc, #316]	@ (80018c0 <StartDisplayTask+0x214>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	791b      	ldrb	r3, [r3, #4]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001788:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 800178a:	4b4d      	ldr	r3, [pc, #308]	@ (80018c0 <StartDisplayTask+0x214>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	795b      	ldrb	r3, [r3, #5]
	sprintf((char *)buf,"%02X:%02X:%02X:%02X:%02X:%02X",
 8001790:	f107 000c 	add.w	r0, r7, #12
 8001794:	9303      	str	r3, [sp, #12]
 8001796:	9402      	str	r4, [sp, #8]
 8001798:	9101      	str	r1, [sp, #4]
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	4633      	mov	r3, r6
 800179e:	462a      	mov	r2, r5
 80017a0:	4948      	ldr	r1, [pc, #288]	@ (80018c4 <StartDisplayTask+0x218>)
 80017a2:	f023 ff13 	bl	80255cc <sprintf>
	SSD1306_Puts((char *)buf, &Font_7x10, SSD1306_COLOR_WHITE);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2201      	movs	r2, #1
 80017ac:	493f      	ldr	r1, [pc, #252]	@ (80018ac <StartDisplayTask+0x200>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	f007 fa7c 	bl	8008cac <SSD1306_Puts>

    SSD1306_UpdateScreen();
 80017b4:	f007 f940 	bl	8008a38 <SSD1306_UpdateScreen>
    vTaskDelay(3000);
 80017b8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017bc:	f009 fa7e 	bl	800acbc <vTaskDelay>
    int i=0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Infinite loop */
  for(;;)
  {
		SSD1306_GotoXY(x=1,y=0);
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80017d0:	2100      	movs	r1, #0
 80017d2:	2001      	movs	r0, #1
 80017d4:	f007 f9d6 	bl	8008b84 <SSD1306_GotoXY>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017d8:	2000      	movs	r0, #0
 80017da:	f007 f95b 	bl	8008a94 <SSD1306_Fill>
		SSD1306_Puts("IP:", &Font_7x10, SSD1306_COLOR_WHITE);
 80017de:	2201      	movs	r2, #1
 80017e0:	4932      	ldr	r1, [pc, #200]	@ (80018ac <StartDisplayTask+0x200>)
 80017e2:	4839      	ldr	r0, [pc, #228]	@ (80018c8 <StartDisplayTask+0x21c>)
 80017e4:	f007 fa62 	bl	8008cac <SSD1306_Puts>
	    sprintf(buf,"%lu.%lu.%lu.%lu",
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80017e8:	4b35      	ldr	r3, [pc, #212]	@ (80018c0 <StartDisplayTask+0x214>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017ee:	b2d9      	uxtb	r1, r3
	    		(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 80017f0:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <StartDisplayTask+0x214>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0a1b      	lsrs	r3, r3, #8
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 80017f8:	b2dc      	uxtb	r4, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 80017fa:	4b31      	ldr	r3, [pc, #196]	@ (80018c0 <StartDisplayTask+0x214>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	0c1b      	lsrs	r3, r3, #16
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 8001802:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001804:	4a2e      	ldr	r2, [pc, #184]	@ (80018c0 <StartDisplayTask+0x214>)
 8001806:	6852      	ldr	r2, [r2, #4]
 8001808:	6892      	ldr	r2, [r2, #8]
 800180a:	0e12      	lsrs	r2, r2, #24
	    sprintf(buf,"%lu.%lu.%lu.%lu",
 800180c:	f107 000c 	add.w	r0, r7, #12
 8001810:	9201      	str	r2, [sp, #4]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4623      	mov	r3, r4
 8001816:	460a      	mov	r2, r1
 8001818:	492c      	ldr	r1, [pc, #176]	@ (80018cc <StartDisplayTask+0x220>)
 800181a:	f023 fed7 	bl	80255cc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	2201      	movs	r2, #1
 8001824:	4921      	ldr	r1, [pc, #132]	@ (80018ac <StartDisplayTask+0x200>)
 8001826:	4618      	mov	r0, r3
 8001828:	f007 fa40 	bl	8008cac <SSD1306_Puts>
	    SSD1306_GotoXY(x=1,y=10);
 800182c:	2301      	movs	r3, #1
 800182e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001832:	230a      	movs	r3, #10
 8001834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001838:	210a      	movs	r1, #10
 800183a:	2001      	movs	r0, #1
 800183c:	f007 f9a2 	bl	8008b84 <SSD1306_GotoXY>
	    SSD1306_Puts("I=", &Font_7x10, SSD1306_COLOR_WHITE);
 8001840:	2201      	movs	r2, #1
 8001842:	491a      	ldr	r1, [pc, #104]	@ (80018ac <StartDisplayTask+0x200>)
 8001844:	4822      	ldr	r0, [pc, #136]	@ (80018d0 <StartDisplayTask+0x224>)
 8001846:	f007 fa31 	bl	8008cac <SSD1306_Puts>
	    sprintf(buf,"%d", ++i);
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	3301      	adds	r3, #1
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001856:	491f      	ldr	r1, [pc, #124]	@ (80018d4 <StartDisplayTask+0x228>)
 8001858:	4618      	mov	r0, r3
 800185a:	f023 feb7 	bl	80255cc <sprintf>
	    SSD1306_Puts(buf, &Font_7x10, SSD1306_COLOR_WHITE);
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	2201      	movs	r2, #1
 8001864:	4911      	ldr	r1, [pc, #68]	@ (80018ac <StartDisplayTask+0x200>)
 8001866:	4618      	mov	r0, r3
 8001868:	f007 fa20 	bl	8008cac <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800186c:	f007 f8e4 	bl	8008a38 <SSD1306_UpdateScreen>

		if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 8001870:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001874:	2201      	movs	r2, #1
 8001876:	2178      	movs	r1, #120	@ 0x78
 8001878:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <StartDisplayTask+0x22c>)
 800187a:	f004 ff89 	bl	8006790 <HAL_I2C_IsDeviceReady>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00e      	beq.n	80018a2 <StartDisplayTask+0x1f6>
			HAL_I2C_DeInit(&hi2c1);
 8001884:	4814      	ldr	r0, [pc, #80]	@ (80018d8 <StartDisplayTask+0x22c>)
 8001886:	f004 fe55 	bl	8006534 <HAL_I2C_DeInit>
			vTaskDelay(1000);
 800188a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800188e:	f009 fa15 	bl	800acbc <vTaskDelay>
			MX_I2C1_Init();
 8001892:	f000 fb85 	bl	8001fa0 <MX_I2C1_Init>
			vTaskDelay(1000);
 8001896:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800189a:	f009 fa0f 	bl	800acbc <vTaskDelay>
			SSD1306_Init ();
 800189e:	f007 f811 	bl	80088c4 <SSD1306_Init>
		}
		osDelay(1000);
 80018a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a6:	f007 fbe2 	bl	800906e <osDelay>
		SSD1306_GotoXY(x=1,y=0);
 80018aa:	e78b      	b.n	80017c4 <StartDisplayTask+0x118>
 80018ac:	2000007c 	.word	0x2000007c
 80018b0:	0802f17c 	.word	0x0802f17c
 80018b4:	0802f188 	.word	0x0802f188
 80018b8:	0802f194 	.word	0x0802f194
 80018bc:	0802f1a0 	.word	0x0802f1a0
 80018c0:	200009e4 	.word	0x200009e4
 80018c4:	0802f1a8 	.word	0x0802f1a8
 80018c8:	0802f1c8 	.word	0x0802f1c8
 80018cc:	0802f1cc 	.word	0x0802f1cc
 80018d0:	0802f1dc 	.word	0x0802f1dc
 80018d4:	0802f1e0 	.word	0x0802f1e0
 80018d8:	20000a1c 	.word	0x20000a1c

080018dc <StartSettingsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSettingsTask */
void StartSettingsTask(void *argument)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0b6      	sub	sp, #216	@ 0xd8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSettingsTask */
	size_t  f_size = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	void *  f_pointer = NULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	MQTT_cred_struct mqtt_config;

  SPI_flash_reg_cb(FlashBegin, FlashEnd, RecvBuffSPI2, SendByteSPI2);
 80018f0:	4b46      	ldr	r3, [pc, #280]	@ (8001a0c <StartSettingsTask+0x130>)
 80018f2:	4a47      	ldr	r2, [pc, #284]	@ (8001a10 <StartSettingsTask+0x134>)
 80018f4:	4947      	ldr	r1, [pc, #284]	@ (8001a14 <StartSettingsTask+0x138>)
 80018f6:	4848      	ldr	r0, [pc, #288]	@ (8001a18 <StartSettingsTask+0x13c>)
 80018f8:	f003 fde2 	bl	80054c0 <SPI_flash_reg_cb>
  if (lfs_fs_ll_init(FS_Lock, FS_Unlock) < 0){
 80018fc:	4947      	ldr	r1, [pc, #284]	@ (8001a1c <StartSettingsTask+0x140>)
 80018fe:	4848      	ldr	r0, [pc, #288]	@ (8001a20 <StartSettingsTask+0x144>)
 8001900:	f00b fa02 	bl	800cd08 <lfs_fs_ll_init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	da01      	bge.n	800190e <StartSettingsTask+0x32>
	  HAL_NVIC_SystemReset();
 800190a:	f004 fa30 	bl	8005d6e <HAL_NVIC_SystemReset>
  }

  mg_fs_lfs_mkdir("/web");
 800190e:	4845      	ldr	r0, [pc, #276]	@ (8001a24 <StartSettingsTask+0x148>)
 8001910:	f00b f9e6 	bl	800cce0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_remove("/firmware");
 8001914:	4844      	ldr	r0, [pc, #272]	@ (8001a28 <StartSettingsTask+0x14c>)
 8001916:	f00b f9cf 	bl	800ccb8 <mg_fs_lfs_remove>
  mg_fs_lfs_remove("/firmware.bin");
 800191a:	4844      	ldr	r0, [pc, #272]	@ (8001a2c <StartSettingsTask+0x150>)
 800191c:	f00b f9cc 	bl	800ccb8 <mg_fs_lfs_remove>
  mg_fs_lfs_mkdir("/firmware");
 8001920:	4841      	ldr	r0, [pc, #260]	@ (8001a28 <StartSettingsTask+0x14c>)
 8001922:	f00b f9dd 	bl	800cce0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/settings");
 8001926:	4842      	ldr	r0, [pc, #264]	@ (8001a30 <StartSettingsTask+0x154>)
 8001928:	f00b f9da 	bl	800cce0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/certs");
 800192c:	4841      	ldr	r0, [pc, #260]	@ (8001a34 <StartSettingsTask+0x158>)
 800192e:	f00b f9d7 	bl	800cce0 <mg_fs_lfs_mkdir>
  mg_fs_lfs_mkdir("/log");
 8001932:	4841      	ldr	r0, [pc, #260]	@ (8001a38 <StartSettingsTask+0x15c>)
 8001934:	f00b f9d4 	bl	800cce0 <mg_fs_lfs_mkdir>



  if (mg_fs_lfs_status("/settings/mqtt.conf", &f_size, NULL)){//file found
 8001938:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800193c:	2200      	movs	r2, #0
 800193e:	4619      	mov	r1, r3
 8001940:	483e      	ldr	r0, [pc, #248]	@ (8001a3c <StartSettingsTask+0x160>)
 8001942:	f00b f861 	bl	800ca08 <mg_fs_lfs_status>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01c      	beq.n	8001986 <StartSettingsTask+0xaa>
	  f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_READ);
 800194c:	2101      	movs	r1, #1
 800194e:	483b      	ldr	r0, [pc, #236]	@ (8001a3c <StartSettingsTask+0x160>)
 8001950:	f00b f8f8 	bl	800cb44 <mg_fs_lfs_open>
 8001954:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	  mg_fs_lfs_read(f_pointer, &mqtt_config, sizeof(mqtt_config));
 8001958:	f107 0308 	add.w	r3, r7, #8
 800195c:	22c6      	movs	r2, #198	@ 0xc6
 800195e:	4619      	mov	r1, r3
 8001960:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001964:	f00b f93c 	bl	800cbe0 <mg_fs_lfs_read>
	  mg_fs_lfs_close(f_pointer);
 8001968:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800196c:	f00b f924 	bl	800cbb8 <mg_fs_lfs_close>
	  mqtt_config.save = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	723b      	strb	r3, [r7, #8]
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8001974:	4b32      	ldr	r3, [pc, #200]	@ (8001a40 <StartSettingsTask+0x164>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	f107 0108 	add.w	r1, r7, #8
 800197c:	2302      	movs	r3, #2
 800197e:	2200      	movs	r2, #0
 8001980:	f008 f8f8 	bl	8009b74 <xQueueGenericSend>
 8001984:	e00e      	b.n	80019a4 <StartSettingsTask+0xc8>
  }else{
	  memset(&mqtt_config, 0, sizeof(mqtt_config));
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	22c6      	movs	r2, #198	@ 0xc6
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f024 f9de 	bl	8025d50 <memset>
	  xQueueOverwrite(mqttQHandle, &mqtt_config);
 8001994:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <StartSettingsTask+0x164>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	f107 0108 	add.w	r1, r7, #8
 800199c:	2302      	movs	r3, #2
 800199e:	2200      	movs	r2, #0
 80019a0:	f008 f8e8 	bl	8009b74 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 80019a4:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <StartSettingsTask+0x164>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f107 0108 	add.w	r1, r7, #8
 80019ac:	2200      	movs	r2, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f008 fc72 	bl	800a298 <xQueuePeek>
	  if(mqtt_config.save){
 80019b4:	7a3b      	ldrb	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d022      	beq.n	8001a00 <StartSettingsTask+0x124>
		  mg_fs_lfs_remove("/settings/mqtt.conf");
 80019ba:	4820      	ldr	r0, [pc, #128]	@ (8001a3c <StartSettingsTask+0x160>)
 80019bc:	f00b f97c 	bl	800ccb8 <mg_fs_lfs_remove>
		  if((f_pointer = mg_fs_lfs_open("/settings/mqtt.conf", MG_FS_WRITE))){
 80019c0:	2102      	movs	r1, #2
 80019c2:	481e      	ldr	r0, [pc, #120]	@ (8001a3c <StartSettingsTask+0x160>)
 80019c4:	f00b f8be 	bl	800cb44 <mg_fs_lfs_open>
 80019c8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 80019cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d015      	beq.n	8001a00 <StartSettingsTask+0x124>
			  //mg_fs_lfs_seek(f_pointer, 0);
			  mg_fs_lfs_write(f_pointer, &mqtt_config, sizeof(mqtt_config));
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	22c6      	movs	r2, #198	@ 0xc6
 80019da:	4619      	mov	r1, r3
 80019dc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80019e0:	f00b f916 	bl	800cc10 <mg_fs_lfs_write>
			  mg_fs_lfs_close(f_pointer);
 80019e4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80019e8:	f00b f8e6 	bl	800cbb8 <mg_fs_lfs_close>
			  mqtt_config.save = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	723b      	strb	r3, [r7, #8]
			  xQueueOverwrite(mqttQHandle, &mqtt_config);
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <StartSettingsTask+0x164>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	f107 0108 	add.w	r1, r7, #8
 80019f8:	2302      	movs	r3, #2
 80019fa:	2200      	movs	r2, #0
 80019fc:	f008 f8ba 	bl	8009b74 <xQueueGenericSend>
		  }
	  }

    osDelay(1000);
 8001a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a04:	f007 fb33 	bl	800906e <osDelay>
	  xQueuePeek(mqttQHandle, &mqtt_config, 0);
 8001a08:	e7cc      	b.n	80019a4 <StartSettingsTask+0xc8>
 8001a0a:	bf00      	nop
 8001a0c:	08001d11 	.word	0x08001d11
 8001a10:	08001d35 	.word	0x08001d35
 8001a14:	08001ce9 	.word	0x08001ce9
 8001a18:	08001cbd 	.word	0x08001cbd
 8001a1c:	08001d81 	.word	0x08001d81
 8001a20:	08001d5d 	.word	0x08001d5d
 8001a24:	0802f1e4 	.word	0x0802f1e4
 8001a28:	0802f1ec 	.word	0x0802f1ec
 8001a2c:	0802f1f8 	.word	0x0802f1f8
 8001a30:	0802f208 	.word	0x0802f208
 8001a34:	0802f214 	.word	0x0802f214
 8001a38:	0802f21c 	.word	0x0802f21c
 8001a3c:	0802f224 	.word	0x0802f224
 8001a40:	20000a0c 	.word	0x20000a0c

08001a44 <StartLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggingTask */
void StartLoggingTask(void *argument)
{
 8001a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a46:	b0d5      	sub	sp, #340	@ 0x154
 8001a48:	af06      	add	r7, sp, #24
 8001a4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a4e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a52:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartLoggingTask */

	uint32_t count = 2000;
 8001a54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a58:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	void *  f_pointer = NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	size_t fs_size;
	HeapStats_t heap_status;

	osDelay(2000);
 8001a62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a66:	f007 fb02 	bl	800906e <osDelay>
	reg_logging_fn(add_log_mess_to_q);
 8001a6a:	4859      	ldr	r0, [pc, #356]	@ (8001bd0 <StartLoggingTask+0x18c>)
 8001a6c:	f000 fb5c 	bl	8002128 <reg_logging_fn>

	logging(L_INFO, "Device started...");
 8001a70:	4958      	ldr	r1, [pc, #352]	@ (8001bd4 <StartLoggingTask+0x190>)
 8001a72:	2001      	movs	r0, #1
 8001a74:	f000 fb6a 	bl	800214c <logging>
  /* Infinite loop */
  for(;;)
  {
	  //--------logging
	  if (osMessageQueueGetCount(loggingQHandle)){
 8001a78:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <StartLoggingTask+0x194>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f007 fd51 	bl	8009524 <osMessageQueueGetCount>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <StartLoggingTask+0x86>
		  log_message_t log;
		  osMessageQueueGet(loggingQHandle, &log, 0, 0);
 8001a88:	4b53      	ldr	r3, [pc, #332]	@ (8001bd8 <StartLoggingTask+0x194>)
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	f107 010c 	add.w	r1, r7, #12
 8001a90:	2300      	movs	r3, #0
 8001a92:	2200      	movs	r2, #0
 8001a94:	f007 fce8 	bl	8009468 <osMessageQueueGet>
		  f_pointer = mg_fs_lfs_open(LOG_FILE_LOCATION, MG_FS_WRITE);
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4850      	ldr	r0, [pc, #320]	@ (8001bdc <StartLoggingTask+0x198>)
 8001a9c:	f00b f852 	bl	800cb44 <mg_fs_lfs_open>
 8001aa0:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
		  mg_fs_lfs_write(f_pointer, &log.log_text, log.log_len); //
 8001aa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001aa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001aac:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001abe:	f00b f8a7 	bl	800cc10 <mg_fs_lfs_write>
		  mg_fs_lfs_close(f_pointer);
 8001ac2:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001ac6:	f00b f877 	bl	800cbb8 <mg_fs_lfs_close>
	  }
	  //--------logging
    osDelay(500);
 8001aca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ace:	f007 face 	bl	800906e <osDelay>


    if (count == 2000){
 8001ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001ad6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ada:	d173      	bne.n	8001bc4 <StartLoggingTask+0x180>
    	mg_fs_lfs_status(LOG_FILE_LOCATION, &fs_size, NULL);
 8001adc:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	483d      	ldr	r0, [pc, #244]	@ (8001bdc <StartLoggingTask+0x198>)
 8001ae6:	f00a ff8f 	bl	800ca08 <mg_fs_lfs_status>
    	if (fs_size > LOG_FILE_MAX_SIZE){
 8001aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001aee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d90a      	bls.n	8001b0c <StartLoggingTask+0xc8>
    		mg_fs_lfs_remove(LOG_FILE_LOCATION_OLD);
 8001af6:	483a      	ldr	r0, [pc, #232]	@ (8001be0 <StartLoggingTask+0x19c>)
 8001af8:	f00b f8de 	bl	800ccb8 <mg_fs_lfs_remove>
    		mg_fs_lfs_rename(LOG_FILE_LOCATION, LOG_FILE_LOCATION_OLD);
 8001afc:	4938      	ldr	r1, [pc, #224]	@ (8001be0 <StartLoggingTask+0x19c>)
 8001afe:	4837      	ldr	r0, [pc, #220]	@ (8001bdc <StartLoggingTask+0x198>)
 8001b00:	f00b f8c4 	bl	800cc8c <mg_fs_lfs_rename>
    		logging(L_INFO, "Log file rotated");
 8001b04:	4937      	ldr	r1, [pc, #220]	@ (8001be4 <StartLoggingTask+0x1a0>)
 8001b06:	2001      	movs	r0, #1
 8001b08:	f000 fb20 	bl	800214c <logging>
    	}

    	count = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    	vPortGetHeapStats(&heap_status);
 8001b12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b16:	4618      	mov	r0, r3
 8001b18:	f00a fef8 	bl	800c90c <vPortGetHeapStats>
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
                (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 8001b1c:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
                (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8001b20:	f8d7 6114 	ldr.w	r6, [r7, #276]	@ 0x114
                (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8001b24:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
                (unsigned int)heap_status.xNumberOfFreeBlocks,
 8001b28:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
                (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8001b2c:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
                (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8001b30:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
                (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 8001b34:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
    	logging(L_INFO, "Free Heap: %u, LargestFreeBlock: %u, SmallestFeeBlock: %u, NumFreeBlock: %u,  MinEverFreeBytes: %u, NumOfSuccessAlloc: %u, NumOfSuccessFree: %u ",
 8001b38:	9404      	str	r4, [sp, #16]
 8001b3a:	9003      	str	r0, [sp, #12]
 8001b3c:	9102      	str	r1, [sp, #8]
 8001b3e:	9201      	str	r2, [sp, #4]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4633      	mov	r3, r6
 8001b44:	462a      	mov	r2, r5
 8001b46:	4928      	ldr	r1, [pc, #160]	@ (8001be8 <StartLoggingTask+0x1a4>)
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f000 faff 	bl	800214c <logging>

    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001b4e:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b54:	b2d9      	uxtb	r1, r3
    			(mg_full_info.mgr_if->ip) & 0xFF, (mg_full_info.mgr_if->ip >> 8) & 0xFF,
 8001b56:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b5e:	b2d8      	uxtb	r0, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001b60:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0c1b      	lsrs	r3, r3, #16
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b68:	b2db      	uxtb	r3, r3
				(mg_full_info.mgr_if->ip >> 16) & 0xFF, (mg_full_info.mgr_if->ip >> 24) & 0xFF);
 8001b6a:	4a20      	ldr	r2, [pc, #128]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001b6c:	6852      	ldr	r2, [r2, #4]
 8001b6e:	6892      	ldr	r2, [r2, #8]
 8001b70:	0e12      	lsrs	r2, r2, #24
    	logging(L_INFO, "IP addr: %lu.%lu.%lu.%lu",
 8001b72:	9201      	str	r2, [sp, #4]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	491d      	ldr	r1, [pc, #116]	@ (8001bf0 <StartLoggingTask+0x1ac>)
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f000 fae5 	bl	800214c <logging>

    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001b82:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	781b      	ldrb	r3, [r3, #0]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b88:	461c      	mov	r4, r3
			mg_full_info.mgr_if->mac[0], mg_full_info.mgr_if->mac[1],
 8001b8a:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	785b      	ldrb	r3, [r3, #1]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b90:	461d      	mov	r5, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001b92:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	789b      	ldrb	r3, [r3, #2]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001b98:	461a      	mov	r2, r3
			mg_full_info.mgr_if->mac[2], mg_full_info.mgr_if->mac[3],
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	78db      	ldrb	r3, [r3, #3]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001ba0:	4619      	mov	r1, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001ba2:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	791b      	ldrb	r3, [r3, #4]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001ba8:	4618      	mov	r0, r3
			mg_full_info.mgr_if->mac[4], mg_full_info.mgr_if->mac[5]);
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <StartLoggingTask+0x1a8>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	795b      	ldrb	r3, [r3, #5]
    	logging(L_INFO, "MAC addr: %02X:%02X:%02X:%02X:%02X:%02X",
 8001bb0:	9303      	str	r3, [sp, #12]
 8001bb2:	9002      	str	r0, [sp, #8]
 8001bb4:	9101      	str	r1, [sp, #4]
 8001bb6:	9200      	str	r2, [sp, #0]
 8001bb8:	462b      	mov	r3, r5
 8001bba:	4622      	mov	r2, r4
 8001bbc:	490d      	ldr	r1, [pc, #52]	@ (8001bf4 <StartLoggingTask+0x1b0>)
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f000 fac4 	bl	800214c <logging>

    }
    count ++;
 8001bc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  if (osMessageQueueGetCount(loggingQHandle)){
 8001bce:	e753      	b.n	8001a78 <StartLoggingTask+0x34>
 8001bd0:	08001e5d 	.word	0x08001e5d
 8001bd4:	0802f238 	.word	0x0802f238
 8001bd8:	20000a10 	.word	0x20000a10
 8001bdc:	0802f24c 	.word	0x0802f24c
 8001be0:	0802f25c 	.word	0x0802f25c
 8001be4:	0802f26c 	.word	0x0802f26c
 8001be8:	0802f280 	.word	0x0802f280
 8001bec:	200009e4 	.word	0x200009e4
 8001bf0:	0802f104 	.word	0x0802f104
 8001bf4:	0802f314 	.word	0x0802f314

08001bf8 <EthResetBegin>:
  /* USER CODE END StartLoggingTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void EthResetBegin(void){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c02:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <EthResetBegin+0x14>)
 8001c04:	f004 fb38 	bl	8006278 <HAL_GPIO_WritePin>
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40020000 	.word	0x40020000

08001c10 <EthResetEnd>:

void EthResetEnd(void){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ETH_RST_GPIO_Port, ETH_RST_Pin, GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c1a:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <EthResetEnd+0x14>)
 8001c1c:	f004 fb2c 	bl	8006278 <HAL_GPIO_WritePin>
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40020000 	.word	0x40020000

08001c28 <EthBegin>:

void EthBegin(void * param){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <EthBegin+0x2c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f007 fab9 	bl	80091b0 <osMutexAcquire>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c44:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <EthBegin+0x30>)
 8001c46:	f004 fb17 	bl	8006278 <HAL_GPIO_WritePin>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000a14 	.word	0x20000a14
 8001c58:	40020400 	.word	0x40020400

08001c5c <EthEnd>:

void EthEnd(void * param){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	//osDelay(1);
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c6a:	4806      	ldr	r0, [pc, #24]	@ (8001c84 <EthEnd+0x28>)
 8001c6c:	f004 fb04 	bl	8006278 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <EthEnd+0x2c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f007 fae6 	bl	8009246 <osMutexRelease>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020400 	.word	0x40020400
 8001c88:	20000a14 	.word	0x20000a14

08001c8c <EthTxn>:

uint8_t EthTxn(void *spi, uint8_t data) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  uint8_t rx_data;
  HAL_SPI_TransmitReceive(&hspi2, &data, &rx_data, 1, HAL_MAX_DELAY);
 8001c98:	f107 020f 	add.w	r2, r7, #15
 8001c9c:	1cf9      	adds	r1, r7, #3
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	4804      	ldr	r0, [pc, #16]	@ (8001cb8 <EthTxn+0x2c>)
 8001ca8:	f006 f8ac 	bl	8007e04 <HAL_SPI_TransmitReceive>
  return rx_data;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000a70 	.word	0x20000a70

08001cbc <FlashBegin>:

void FlashBegin(void){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	osMutexAcquire(SPI2MutexHandle, osWaitForever);
 8001cc0:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <FlashBegin+0x24>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f007 fa71 	bl	80091b0 <osMutexAcquire>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cd4:	4803      	ldr	r0, [pc, #12]	@ (8001ce4 <FlashBegin+0x28>)
 8001cd6:	f004 facf 	bl	8006278 <HAL_GPIO_WritePin>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000a14 	.word	0x20000a14
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <FlashEnd>:

void FlashEnd(void){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <FlashEnd+0x20>)
 8001cf4:	f004 fac0 	bl	8006278 <HAL_GPIO_WritePin>
	osMutexRelease(SPI2MutexHandle);
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <FlashEnd+0x24>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f007 faa2 	bl	8009246 <osMutexRelease>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	20000a14 	.word	0x20000a14

08001d10 <SendByteSPI2>:

void SendByteSPI2(uint8_t byte){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &byte, 1, HAL_MAX_DELAY);
 8001d1a:	1df9      	adds	r1, r7, #7
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d20:	2201      	movs	r2, #1
 8001d22:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <SendByteSPI2+0x20>)
 8001d24:	f005 fe11 	bl	800794a <HAL_SPI_Transmit>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000a70 	.word	0x20000a70

08001d34 <RecvBuffSPI2>:

int RecvBuffSPI2(uint8_t * buffer, uint16_t size){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
	return HAL_SPI_Receive(&hspi2, buffer, size, HAL_MAX_DELAY);
 8001d40:	887a      	ldrh	r2, [r7, #2]
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <RecvBuffSPI2+0x24>)
 8001d4a:	f005 ff42 	bl	8007bd2 <HAL_SPI_Receive>
 8001d4e:	4603      	mov	r3, r0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000a70 	.word	0x20000a70

08001d5c <FS_Lock>:

void FS_Lock(void * param){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	osMutexAcquire(FSMutexHandle, HAL_MAX_DELAY);
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <FS_Lock+0x20>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f007 fa1f 	bl	80091b0 <osMutexAcquire>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000a18 	.word	0x20000a18

08001d80 <FS_Unlock>:

void FS_Unlock(void * param){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	osMutexRelease(FSMutexHandle);
 8001d88:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <FS_Unlock+0x1c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f007 fa5a 	bl	8009246 <osMutexRelease>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000a18 	.word	0x20000a18

08001da0 <RW_parameters_from_queue>:

    // �?спользуем функцию отправки и приема байта
    return SPI_SendReceiveByte(hspi, data);
}

void RW_parameters_from_queue(void * param, sett_type_t param_type,  sett_direction_t direction){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
 8001dac:	4613      	mov	r3, r2
 8001dae:	70bb      	strb	r3, [r7, #2]
	switch (param_type) {
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d02b      	beq.n	8001e0e <RW_parameters_from_queue+0x6e>
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	dc44      	bgt.n	8001e44 <RW_parameters_from_queue+0xa4>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <RW_parameters_from_queue+0x24>
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d018      	beq.n	8001df4 <RW_parameters_from_queue+0x54>
				xQueuePeek(outputReadQHandle, output, 0);
			}else if(direction == S_WRITE){
				xQueueOverwrite(outputWriteQHandle, output);
			}
	}
}
 8001dc2:	e03f      	b.n	8001e44 <RW_parameters_from_queue+0xa4>
			MQTT_cred_struct * pr = (MQTT_cred_struct *) param;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]
			if (direction == S_READ){
 8001dc8:	78bb      	ldrb	r3, [r7, #2]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <RW_parameters_from_queue+0x3e>
				xQueuePeek(mqttQHandle, pr, 0);
 8001dce:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <RW_parameters_from_queue+0xac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f008 fa5e 	bl	800a298 <xQueuePeek>
			break;
 8001ddc:	e02f      	b.n	8001e3e <RW_parameters_from_queue+0x9e>
			}else if (direction == S_WRITE){
 8001dde:	78bb      	ldrb	r3, [r7, #2]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d12c      	bne.n	8001e3e <RW_parameters_from_queue+0x9e>
				xQueueOverwrite(mqttQHandle, pr);
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <RW_parameters_from_queue+0xac>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	2302      	movs	r3, #2
 8001dea:	2200      	movs	r2, #0
 8001dec:	68f9      	ldr	r1, [r7, #12]
 8001dee:	f007 fec1 	bl	8009b74 <xQueueGenericSend>
			break;
 8001df2:	e024      	b.n	8001e3e <RW_parameters_from_queue+0x9e>
			inputs_state_t * input = (inputs_state_t *) param;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	613b      	str	r3, [r7, #16]
			if (direction == S_READ){
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d121      	bne.n	8001e42 <RW_parameters_from_queue+0xa2>
				xQueuePeek(inputReadQHandle, input, 0);
 8001dfe:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <RW_parameters_from_queue+0xb0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	6939      	ldr	r1, [r7, #16]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f008 fa46 	bl	800a298 <xQueuePeek>
			break;
 8001e0c:	e019      	b.n	8001e42 <RW_parameters_from_queue+0xa2>
			inputs_state_t * output = (inputs_state_t *) param;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	617b      	str	r3, [r7, #20]
			if (direction == S_READ){
 8001e12:	78bb      	ldrb	r3, [r7, #2]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <RW_parameters_from_queue+0x88>
				xQueuePeek(outputReadQHandle, output, 0);
 8001e18:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <RW_parameters_from_queue+0xb4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6979      	ldr	r1, [r7, #20]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f008 fa39 	bl	800a298 <xQueuePeek>
}
 8001e26:	e00d      	b.n	8001e44 <RW_parameters_from_queue+0xa4>
			}else if(direction == S_WRITE){
 8001e28:	78bb      	ldrb	r3, [r7, #2]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10a      	bne.n	8001e44 <RW_parameters_from_queue+0xa4>
				xQueueOverwrite(outputWriteQHandle, output);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <RW_parameters_from_queue+0xb8>)
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	2302      	movs	r3, #2
 8001e34:	2200      	movs	r2, #0
 8001e36:	6979      	ldr	r1, [r7, #20]
 8001e38:	f007 fe9c 	bl	8009b74 <xQueueGenericSend>
}
 8001e3c:	e002      	b.n	8001e44 <RW_parameters_from_queue+0xa4>
			break;
 8001e3e:	bf00      	nop
 8001e40:	e000      	b.n	8001e44 <RW_parameters_from_queue+0xa4>
			break;
 8001e42:	bf00      	nop
}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000a0c 	.word	0x20000a0c
 8001e50:	20000a00 	.word	0x20000a00
 8001e54:	20000a04 	.word	0x20000a04
 8001e58:	20000a08 	.word	0x20000a08

08001e5c <add_log_mess_to_q>:

void add_log_mess_to_q(struct log_message mess){
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	f107 0c08 	add.w	ip, r7, #8
 8001e66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	osMessageQueuePut(loggingQHandle,  &mess, 0, 0);
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <add_log_mess_to_q+0x2c>)
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2200      	movs	r2, #0
 8001e72:	f107 0108 	add.w	r1, r7, #8
 8001e76:	f007 fa97 	bl	80093a8 <osMessageQueuePut>

}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e82:	b004      	add	sp, #16
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000a10 	.word	0x20000a10

08001e8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a3a      	ldr	r2, [pc, #232]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b38      	ldr	r3, [pc, #224]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a33      	ldr	r2, [pc, #204]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4b2d      	ldr	r3, [pc, #180]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <MX_GPIO_Init+0x108>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, coil1_Pin|coil2_Pin|coil3_Pin|ETH_RST_Pin, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001efc:	4826      	ldr	r0, [pc, #152]	@ (8001f98 <MX_GPIO_Init+0x10c>)
 8001efe:	f004 f9bb 	bl	8006278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8001f02:	2201      	movs	r2, #1
 8001f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f08:	4824      	ldr	r0, [pc, #144]	@ (8001f9c <MX_GPIO_Init+0x110>)
 8001f0a:	f004 f9b5 	bl	8006278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f14:	4820      	ldr	r0, [pc, #128]	@ (8001f98 <MX_GPIO_Init+0x10c>)
 8001f16:	f004 f9af 	bl	8006278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = input1_Pin|input2_Pin|input3_Pin;
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f22:	2302      	movs	r3, #2
 8001f24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481a      	ldr	r0, [pc, #104]	@ (8001f98 <MX_GPIO_Init+0x10c>)
 8001f2e:	f003 ff23 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = coil1_Pin|coil2_Pin|coil3_Pin;
 8001f32:	23e0      	movs	r3, #224	@ 0xe0
 8001f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 030c 	add.w	r3, r7, #12
 8001f46:	4619      	mov	r1, r3
 8001f48:	4813      	ldr	r0, [pc, #76]	@ (8001f98 <MX_GPIO_Init+0x10c>)
 8001f4a:	f003 ff15 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8001f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	4619      	mov	r1, r3
 8001f66:	480d      	ldr	r0, [pc, #52]	@ (8001f9c <MX_GPIO_Init+0x110>)
 8001f68:	f003 ff06 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ETH_RST_Pin|FLASH_CS_Pin;
 8001f6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4619      	mov	r1, r3
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_GPIO_Init+0x10c>)
 8001f86:	f003 fef7 	bl	8005d78 <HAL_GPIO_Init>

}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400

08001fa0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fa6:	4a13      	ldr	r2, [pc, #76]	@ (8001ff4 <MX_I2C1_Init+0x54>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 200000;
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fac:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <MX_I2C1_Init+0x58>)
 8001fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	@ (8001ff0 <MX_I2C1_Init+0x50>)
 8001fde:	f004 f965 	bl	80062ac <HAL_I2C_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fe8:	f000 fa54 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000a1c 	.word	0x20000a1c
 8001ff4:	40005400 	.word	0x40005400
 8001ff8:	00030d40 	.word	0x00030d40

08001ffc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <HAL_I2C_MspInit+0x84>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12b      	bne.n	8002076 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <HAL_I2C_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <HAL_I2C_MspInit+0x88>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_I2C_MspInit+0x88>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203a:	23c0      	movs	r3, #192	@ 0xc0
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203e:	2312      	movs	r3, #18
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002042:	2301      	movs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800204a:	2304      	movs	r3, #4
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	480c      	ldr	r0, [pc, #48]	@ (8002088 <HAL_I2C_MspInit+0x8c>)
 8002056:	f003 fe8f 	bl	8005d78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_I2C_MspInit+0x88>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	4a08      	ldr	r2, [pc, #32]	@ (8002084 <HAL_I2C_MspInit+0x88>)
 8002064:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002068:	6413      	str	r3, [r2, #64]	@ 0x40
 800206a:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_I2C_MspInit+0x88>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	@ 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005400 	.word	0x40005400
 8002084:	40023800 	.word	0x40023800
 8002088:	40020400 	.word	0x40020400

0800208c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_I2C_MspDeInit+0x38>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10d      	bne.n	80020ba <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_I2C_MspDeInit+0x3c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a09      	ldr	r2, [pc, #36]	@ (80020c8 <HAL_I2C_MspDeInit+0x3c>)
 80020a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80020aa:	2140      	movs	r1, #64	@ 0x40
 80020ac:	4807      	ldr	r0, [pc, #28]	@ (80020cc <HAL_I2C_MspDeInit+0x40>)
 80020ae:	f003 ffe7 	bl	8006080 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80020b2:	2180      	movs	r1, #128	@ 0x80
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <HAL_I2C_MspDeInit+0x40>)
 80020b6:	f003 ffe3 	bl	8006080 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400

080020d0 <mg_calloc>:
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)
#define strdup(s) ((char *) mg_strdup(mg_str(s)).buf)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *mg_calloc(size_t cnt, size_t size) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f00a fa22 	bl	800c52c <pvPortMalloc>
 80020e8:	4603      	mov	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <mg_calloc+0x34>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	2100      	movs	r1, #0
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f023 fe26 	bl	8025d50 <memset>
  return p;
 8002104:	68fb      	ldr	r3, [r7, #12]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <proto>:

#include "mongoose.h"

#define time_ms_now() mg_now()

static void proto(struct log_message mess ){};
 800210e:	b084      	sub	sp, #16
 8002110:	b490      	push	{r4, r7}
 8002112:	af00      	add	r7, sp, #0
 8002114:	f107 0408 	add.w	r4, r7, #8
 8002118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	bc90      	pop	{r4, r7}
 8002122:	b004      	add	sp, #16
 8002124:	4770      	bx	lr
	...

08002128 <reg_logging_fn>:

void (*_send_log_mess)(struct log_message mess) = proto;


void reg_logging_fn(void (* fn)(struct log_message)){
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	if (fn != NULL){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <reg_logging_fn+0x14>
		_send_log_mess = fn;
 8002136:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <reg_logging_fn+0x20>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6013      	str	r3, [r2, #0]
	}
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000000 	.word	0x20000000

0800214c <logging>:

void logging(uint8_t level, const char *format, ...){
 800214c:	b40e      	push	{r1, r2, r3}
 800214e:	b5b0      	push	{r4, r5, r7, lr}
 8002150:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8002154:	af3e      	add	r7, sp, #248	@ 0xf8
 8002156:	4602      	mov	r2, r0
 8002158:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800215c:	f2a3 1399 	subw	r3, r3, #409	@ 0x199
 8002160:	701a      	strb	r2, [r3, #0]
    va_list args;

    int formatted_len;
    int time_len;

    char * tmp_buf = NULL;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    tmp_buf = calloc(LOG_MES_TEXT_LEN, sizeof(char));
 8002168:	2101      	movs	r1, #1
 800216a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800216e:	f7ff ffaf 	bl	80020d0 <mg_calloc>
 8002172:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

    if (!tmp_buf){
 8002176:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80e8 	beq.w	8002350 <logging+0x204>
    	return;
    }

    // Инициализация структуры нулями
    memset(&mess, 0, sizeof(log_message_t));
 8002180:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002184:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f023 fde0 	bl	8025d50 <memset>

    // Установка уровня логирования
    mess.log_level = level;
 8002190:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002194:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002198:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800219c:	f2a2 1299 	subw	r2, r2, #409	@ 0x199
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	701a      	strb	r2, [r3, #0]


    // Получение текущего времени в миллисекундах
    double ms_now = time_ms_now();
 80021a4:	f01f f9f8 	bl	8021598 <mg_now>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fa04 	bl	80005bc <__aeabi_ul2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190

    // Преобразование миллисекунд в секунды для time_t
    time_t now = (time_t)(ms_now / 1000.0);
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	4b67      	ldr	r3, [pc, #412]	@ (8002360 <logging+0x214>)
 80021c2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80021c6:	f7fe fb59 	bl	800087c <__aeabi_ddiv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fded 	bl	8000db0 <__aeabi_d2lz>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    // Получение локального времени
    struct tm tm_info;
    localtime_r(&now, &tm_info);
 80021de:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80021e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f023 fe47 	bl	8025e7c <localtime_r>

    // Форматирование времени
    char time_str[64];
    time_len = strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", &tm_info);
 80021ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80021f2:	f107 000c 	add.w	r0, r7, #12
 80021f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002364 <logging+0x218>)
 80021f8:	2140      	movs	r1, #64	@ 0x40
 80021fa:	f024 fc51 	bl	8026aa0 <strftime>
 80021fe:	4603      	mov	r3, r0
 8002200:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Вычисление миллисекунд
    int millis = (int)(ms_now) % 1000;
 8002204:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002208:	f7fe fcbe 	bl	8000b88 <__aeabi_d2iz>
 800220c:	4603      	mov	r3, r0
 800220e:	4a56      	ldr	r2, [pc, #344]	@ (8002368 <logging+0x21c>)
 8002210:	fb82 1203 	smull	r1, r2, r2, r3
 8002214:	1191      	asrs	r1, r2, #6
 8002216:	17da      	asrs	r2, r3, #31
 8002218:	1a8a      	subs	r2, r1, r2
 800221a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800221e:	fb01 f202 	mul.w	r2, r1, r2
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

    // Добавление миллисекунд к строке времени
    time_len += snprintf(time_str + time_len, sizeof(time_str) - time_len, ".%03d", millis);
 8002228:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800222c:	f107 020c 	add.w	r2, r7, #12
 8002230:	18d0      	adds	r0, r2, r3
 8002232:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002236:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 800223a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800223e:	4a4b      	ldr	r2, [pc, #300]	@ (800236c <logging+0x220>)
 8002240:	f023 f85c 	bl	80252fc <snprintf>
 8002244:	4602      	mov	r2, r0
 8002246:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800224a:	4413      	add	r3, r2
 800224c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Добавление разделителя, например, пробела
    time_str[time_len++] = ' ';
 8002250:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800225a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800225e:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8002262:	2120      	movs	r1, #32
 8002264:	54d1      	strb	r1, [r2, r3]
    time_str[time_len++] = '\0';
 8002266:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8002270:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8002274:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8002278:	2100      	movs	r1, #0
 800227a:	54d1      	strb	r1, [r2, r3]
    time_len += 1;
 800227c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002280:	3301      	adds	r3, #1
 8002282:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

    // Инициализация списка аргументов
    va_start(args, format);
 8002286:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 800228a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800228e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002292:	601a      	str	r2, [r3, #0]

    // Форматирование строки с ограничением на размер log_text
    formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN - 3, format, args);
 8002294:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002298:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800229c:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80022a0:	1c50      	adds	r0, r2, #1
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80022a8:	21fd      	movs	r1, #253	@ 0xfd
 80022aa:	f023 faef 	bl	802588c <vsnprintf>
 80022ae:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    //formatted_len = vsnprintf(mess.log_text, LOG_MES_TEXT_LEN  - 3, format, args);

    // Завершение работы со списком аргументов
    va_end(args);

    snprintf(tmp_buf ,LOG_MES_TEXT_LEN, "%s %s\r\n", time_str, mess.log_text);
 80022b2:	f107 020c 	add.w	r2, r7, #12
 80022b6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80022ba:	3301      	adds	r3, #1
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002370 <logging+0x224>)
 80022c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022c6:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 80022ca:	f023 f817 	bl	80252fc <snprintf>
    // Проверка длины отформатированной строки
     if (formatted_len >= 0 && formatted_len < LOG_MES_TEXT_LEN - 3) {
 80022ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db12      	blt.n	80022fc <logging+0x1b0>
 80022d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022da:	2bfc      	cmp	r3, #252	@ 0xfc
 80022dc:	dc0e      	bgt.n	80022fc <logging+0x1b0>
         mess.log_len = time_len + formatted_len;
 80022de:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80022f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022f6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
 80022fa:	e006      	b.n	800230a <logging+0x1be>
     } else {
         mess.log_len = LOG_MES_TEXT_LEN - 3;
 80022fc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002300:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002304:	22fd      	movs	r2, #253	@ 0xfd
 8002306:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
     }

     strncpy(mess.log_text, tmp_buf, LOG_MES_TEXT_LEN);
 800230a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800230e:	3301      	adds	r3, #1
 8002310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002314:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8002318:	4618      	mov	r0, r3
 800231a:	f023 fd60 	bl	8025dde <strncpy>
//     mess.log_text[mess.log_len + 1] = '\n';
//     mess.log_text[mess.log_len + 2] = '\0';
//     mess.log_len += 2;  // Обновление длины для учёта \r\n

    // Проверка на существование функции перед вызовом
    if (_send_log_mess) {
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <logging+0x228>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00f      	beq.n	8002346 <logging+0x1fa>
        _send_log_mess(mess);
 8002326:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <logging+0x228>)
 8002328:	681d      	ldr	r5, [r3, #0]
 800232a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800232e:	f5a3 7490 	sub.w	r4, r3, #288	@ 0x120
 8002332:	4668      	mov	r0, sp
 8002334:	f104 0310 	add.w	r3, r4, #16
 8002338:	22f2      	movs	r2, #242	@ 0xf2
 800233a:	4619      	mov	r1, r3
 800233c:	f024 ff44 	bl	80271c8 <memcpy>
 8002340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002344:	47a8      	blx	r5
    }

    free(tmp_buf);
 8002346:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800234a:	f00a f9bd 	bl	800c6c8 <vPortFree>
 800234e:	e000      	b.n	8002352 <logging+0x206>
    	return;
 8002350:	bf00      	nop
}
 8002352:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8002356:	46bd      	mov	sp, r7
 8002358:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800235c:	b003      	add	sp, #12
 800235e:	4770      	bx	lr
 8002360:	408f4000 	.word	0x408f4000
 8002364:	0802f33c 	.word	0x0802f33c
 8002368:	10624dd3 	.word	0x10624dd3
 800236c:	0802f350 	.word	0x0802f350
 8002370:	0802f358 	.word	0x0802f358
 8002374:	20000000 	.word	0x20000000

08002378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800237c:	f003 fb98 	bl	8005ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002380:	f000 f80e 	bl	80023a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002384:	f7ff fd82 	bl	8001e8c <MX_GPIO_Init>
  MX_SPI2_Init();
 8002388:	f000 f88a 	bl	80024a0 <MX_SPI2_Init>
  MX_I2C1_Init();
 800238c:	f7ff fe08 	bl	8001fa0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002390:	f006 fd90 	bl	8008eb4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002394:	f7fe fea2 	bl	80010dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002398:	f006 fdb0 	bl	8008efc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <main+0x24>

080023a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b094      	sub	sp, #80	@ 0x50
 80023a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	2230      	movs	r2, #48	@ 0x30
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f023 fcce 	bl	8025d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	4b27      	ldr	r3, [pc, #156]	@ (8002468 <SystemClock_Config+0xc8>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	4a26      	ldr	r2, [pc, #152]	@ (8002468 <SystemClock_Config+0xc8>)
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d4:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <SystemClock_Config+0xc8>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e0:	2300      	movs	r3, #0
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	4b21      	ldr	r3, [pc, #132]	@ (800246c <SystemClock_Config+0xcc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a20      	ldr	r2, [pc, #128]	@ (800246c <SystemClock_Config+0xcc>)
 80023ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <SystemClock_Config+0xcc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023fc:	2301      	movs	r3, #1
 80023fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002400:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002406:	2302      	movs	r3, #2
 8002408:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800240a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800240e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002410:	2304      	movs	r3, #4
 8002412:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002414:	2364      	movs	r3, #100	@ 0x64
 8002416:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002418:	2302      	movs	r3, #2
 800241a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800241c:	2304      	movs	r3, #4
 800241e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002420:	f107 0320 	add.w	r3, r7, #32
 8002424:	4618      	mov	r0, r3
 8002426:	f004 fd3d 	bl	8006ea4 <HAL_RCC_OscConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002430:	f000 f830 	bl	8002494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002434:	230f      	movs	r3, #15
 8002436:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002438:	2302      	movs	r3, #2
 800243a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002444:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	2103      	movs	r1, #3
 8002450:	4618      	mov	r0, r3
 8002452:	f004 ff9f 	bl	8007394 <HAL_RCC_ClockConfig>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800245c:	f000 f81a 	bl	8002494 <Error_Handler>
  }
}
 8002460:	bf00      	nop
 8002462:	3750      	adds	r7, #80	@ 0x50
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000

08002470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002482:	f003 fb37 	bl	8005af4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40014000 	.word	0x40014000

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <Error_Handler+0x8>

080024a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80024a4:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024a6:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <MX_SPI2_Init+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024aa:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024b8:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024be:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024d4:	2210      	movs	r2, #16
 80024d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024da:	2200      	movs	r2, #0
 80024dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024e4:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024ec:	220a      	movs	r2, #10
 80024ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024f0:	4804      	ldr	r0, [pc, #16]	@ (8002504 <MX_SPI2_Init+0x64>)
 80024f2:	f005 f9a1 	bl	8007838 <HAL_SPI_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024fc:	f7ff ffca 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000a70 	.word	0x20000a70
 8002508:	40003800 	.word	0x40003800

0800250c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a19      	ldr	r2, [pc, #100]	@ (8002590 <HAL_SPI_MspInit+0x84>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12c      	bne.n	8002588 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <HAL_SPI_MspInit+0x88>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <HAL_SPI_MspInit+0x88>)
 8002538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253c:	6413      	str	r3, [r2, #64]	@ 0x40
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <HAL_SPI_MspInit+0x88>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_SPI_MspInit+0x88>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a10      	ldr	r2, [pc, #64]	@ (8002594 <HAL_SPI_MspInit+0x88>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_SPI_MspInit+0x88>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002566:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002574:	2302      	movs	r3, #2
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002578:	2305      	movs	r3, #5
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <HAL_SPI_MspInit+0x8c>)
 8002584:	f003 fbf8 	bl	8005d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002588:	bf00      	nop
 800258a:	3728      	adds	r7, #40	@ 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40003800 	.word	0x40003800
 8002594:	40023800 	.word	0x40023800
 8002598:	40020400 	.word	0x40020400

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_MspInit+0x54>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <HAL_MspInit+0x54>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <HAL_MspInit+0x54>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_MspInit+0x54>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <HAL_MspInit+0x54>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ce:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_MspInit+0x54>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	210f      	movs	r1, #15
 80025de:	f06f 0001 	mvn.w	r0, #1
 80025e2:	f003 fb9a 	bl	8005d1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08c      	sub	sp, #48	@ 0x30
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	4b2e      	ldr	r3, [pc, #184]	@ (80026c4 <HAL_InitTick+0xd0>)
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	4a2d      	ldr	r2, [pc, #180]	@ (80026c4 <HAL_InitTick+0xd0>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002612:	6453      	str	r3, [r2, #68]	@ 0x44
 8002614:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <HAL_InitTick+0xd0>)
 8002616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002620:	f107 020c 	add.w	r2, r7, #12
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f005 f8d2 	bl	80077d4 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002630:	f005 f8bc 	bl	80077ac <HAL_RCC_GetPCLK2Freq>
 8002634:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002638:	4a23      	ldr	r2, [pc, #140]	@ (80026c8 <HAL_InitTick+0xd4>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9b      	lsrs	r3, r3, #18
 8002640:	3b01      	subs	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8002644:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <HAL_InitTick+0xd8>)
 8002646:	4a22      	ldr	r2, [pc, #136]	@ (80026d0 <HAL_InitTick+0xdc>)
 8002648:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_InitTick+0xd8>)
 800264c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002650:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8002652:	4a1e      	ldr	r2, [pc, #120]	@ (80026cc <HAL_InitTick+0xd8>)
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8002658:	4b1c      	ldr	r3, [pc, #112]	@ (80026cc <HAL_InitTick+0xd8>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265e:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <HAL_InitTick+0xd8>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_InitTick+0xd8>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800266a:	4818      	ldr	r0, [pc, #96]	@ (80026cc <HAL_InitTick+0xd8>)
 800266c:	f005 feb6 	bl	80083dc <HAL_TIM_Base_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002676:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11b      	bne.n	80026b6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800267e:	4813      	ldr	r0, [pc, #76]	@ (80026cc <HAL_InitTick+0xd8>)
 8002680:	f005 ff06 	bl	8008490 <HAL_TIM_Base_Start_IT>
 8002684:	4603      	mov	r3, r0
 8002686:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800268a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800268e:	2b00      	cmp	r3, #0
 8002690:	d111      	bne.n	80026b6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002692:	2018      	movs	r0, #24
 8002694:	f003 fb5d 	bl	8005d52 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b0f      	cmp	r3, #15
 800269c:	d808      	bhi.n	80026b0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800269e:	2200      	movs	r2, #0
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	2018      	movs	r0, #24
 80026a4:	f003 fb39 	bl	8005d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026a8:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <HAL_InitTick+0xe0>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e002      	b.n	80026b6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3730      	adds	r7, #48	@ 0x30
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	431bde83 	.word	0x431bde83
 80026cc:	20000ac8 	.word	0x20000ac8
 80026d0:	40014000 	.word	0x40014000
 80026d4:	20000074 	.word	0x20000074

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <NMI_Handler+0x4>

080026e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <HardFault_Handler+0x4>

080026e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <MemManage_Handler+0x4>

080026f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <BusFault_Handler+0x4>

080026f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <UsageFault_Handler+0x4>

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002716:	f005 ff1d 	bl	8008554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000ac8 	.word	0x20000ac8

08002724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return 1;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_kill>:

int _kill(int pid, int sig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800273e:	f024 fd0b 	bl	8027158 <__errno>
 8002742:	4603      	mov	r3, r0
 8002744:	2216      	movs	r2, #22
 8002746:	601a      	str	r2, [r3, #0]
  return -1;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_exit>:

void _exit (int status)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800275c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ffe7 	bl	8002734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <_exit+0x12>

0800276a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e00a      	b.n	8002792 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800277c:	f3af 8000 	nop.w
 8002780:	4601      	mov	r1, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	60ba      	str	r2, [r7, #8]
 8002788:	b2ca      	uxtb	r2, r1
 800278a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	dbf0      	blt.n	800277c <_read+0x12>
  }

  return len;
 800279a:	687b      	ldr	r3, [r7, #4]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e009      	b.n	80027ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	60ba      	str	r2, [r7, #8]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3301      	adds	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	dbf1      	blt.n	80027b6 <_write+0x12>
  }
  return len;
 80027d2:	687b      	ldr	r3, [r7, #4]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <_close>:

int _close(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002804:	605a      	str	r2, [r3, #4]
  return 0;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_isatty>:

int _isatty(int file)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800281c:	2301      	movs	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800284c:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <_sbrk+0x5c>)
 800284e:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <_sbrk+0x60>)
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <_sbrk+0x64>)
 8002862:	4a12      	ldr	r2, [pc, #72]	@ (80028ac <_sbrk+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d207      	bcs.n	8002884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002874:	f024 fc70 	bl	8027158 <__errno>
 8002878:	4603      	mov	r3, r0
 800287a:	220c      	movs	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002882:	e009      	b.n	8002898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002884:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288a:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	4a05      	ldr	r2, [pc, #20]	@ (80028a8 <_sbrk+0x64>)
 8002894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20020000 	.word	0x20020000
 80028a4:	00000800 	.word	0x00000800
 80028a8:	20000b14 	.word	0x20000b14
 80028ac:	200184b0 	.word	0x200184b0

080028b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <SystemInit+0x20>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <SystemInit+0x20>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800290c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d8:	f7ff ffea 	bl	80028b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028dc:	480c      	ldr	r0, [pc, #48]	@ (8002910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028de:	490d      	ldr	r1, [pc, #52]	@ (8002914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e4:	e002      	b.n	80028ec <LoopCopyDataInit>

080028e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ea:	3304      	adds	r3, #4

080028ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f0:	d3f9      	bcc.n	80028e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f2:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f8:	e001      	b.n	80028fe <LoopFillZerobss>

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028fc:	3204      	adds	r2, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002902:	f024 fc37 	bl	8027174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002906:	f7ff fd37 	bl	8002378 <main>
  bx  lr    
 800290a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800290c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	200009c8 	.word	0x200009c8
  ldr r2, =_sidata
 8002918:	08034ebc 	.word	0x08034ebc
  ldr r2, =_sbss
 800291c:	200009c8 	.word	0x200009c8
  ldr r4, =_ebss
 8002920:	200184ac 	.word	0x200184ac

08002924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC_IRQHandler>

08002926 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	4618      	mov	r0, r3
 800293a:	f009 fdf7 	bl	800c52c <pvPortMalloc>
 800293e:	4603      	mov	r3, r0
 8002940:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <mg_calloc+0x34>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	fb02 f303 	mul.w	r3, r2, r3
 8002950:	461a      	mov	r2, r3
 8002952:	2100      	movs	r1, #0
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f023 f9fb 	bl	8025d50 <memset>
  return p;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <handle_ram_status_get>:

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;



static void handle_ram_status_get(struct mg_connection *c){
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002966:	b093      	sub	sp, #76	@ 0x4c
 8002968:	af08      	add	r7, sp, #32
 800296a:	6078      	str	r0, [r7, #4]
	HeapStats_t heap_status;
	vPortGetHeapStats(&heap_status);
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	4618      	mov	r0, r3
 8002972:	f009 ffcb 	bl	800c90c <vPortGetHeapStats>

	logging(1, "Start execute API RAM status");
 8002976:	490e      	ldr	r1, [pc, #56]	@ (80029b0 <handle_ram_status_get+0x4c>)
 8002978:	2001      	movs	r0, #1
 800297a:	f7ff fbe7 	bl	800214c <logging>
                  "\"xNumberOfFreeBlocks\": \"%u\","
                  "\"xMinimumEverFreeBytesRemaining\": \"%u\","
                  "\"xNumberOfSuccessfulAllocations\": \"%u\","
                  "\"xNumberOfSuccessfulFrees\": \"%u\""
                  "}\r\n",
                  (unsigned int)heap_status.xAvailableHeapSpaceInBytes,
 800297e:	68fb      	ldr	r3, [r7, #12]
                  (unsigned int)heap_status.xSizeOfLargestFreeBlockInBytes,
 8002980:	693a      	ldr	r2, [r7, #16]
                  (unsigned int)heap_status.xSizeOfSmallestFreeBlockInBytes,
 8002982:	6979      	ldr	r1, [r7, #20]
                  (unsigned int)heap_status.xNumberOfFreeBlocks,
 8002984:	69b8      	ldr	r0, [r7, #24]
                  (unsigned int)heap_status.xMinimumEverFreeBytesRemaining,
 8002986:	69fc      	ldr	r4, [r7, #28]
                  (unsigned int)heap_status.xNumberOfSuccessfulAllocations,
 8002988:	6a3d      	ldr	r5, [r7, #32]
                  (unsigned int)heap_status.xNumberOfSuccessfulFrees);
 800298a:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
    mg_http_reply(c, 200, "Content-Type: application/json\r\n"
 800298c:	9606      	str	r6, [sp, #24]
 800298e:	9505      	str	r5, [sp, #20]
 8002990:	9404      	str	r4, [sp, #16]
 8002992:	9003      	str	r0, [sp, #12]
 8002994:	9102      	str	r1, [sp, #8]
 8002996:	9201      	str	r2, [sp, #4]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <handle_ram_status_get+0x50>)
 800299c:	4a06      	ldr	r2, [pc, #24]	@ (80029b8 <handle_ram_status_get+0x54>)
 800299e:	21c8      	movs	r1, #200	@ 0xc8
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f015 fc23 	bl	80181ec <mg_http_reply>
}
 80029a6:	bf00      	nop
 80029a8:	372c      	adds	r7, #44	@ 0x2c
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	0802f360 	.word	0x0802f360
 80029b4:	0802f380 	.word	0x0802f380
 80029b8:	0802f484 	.word	0x0802f484

080029bc <calc_file_md5sum>:

static int calc_file_md5sum(const char * path, char md5_str[static 33]){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b0a0      	sub	sp, #128	@ 0x80
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	uint32_t md5_str_size = 33; // 32 символа для MD5 + 1 символ для '\0'
 80029c6:	2321      	movs	r3, #33	@ 0x21
 80029c8:	67bb      	str	r3, [r7, #120]	@ 0x78
	uint16_t  buff_len = 1024;
 80029ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	uint8_t	  digest_len = 16;
 80029d2:	2310      	movs	r3, #16
 80029d4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
	char * buff = calloc(buff_len, 1);
 80029d8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ffa1 	bl	8002926 <mg_calloc>
 80029e4:	6738      	str	r0, [r7, #112]	@ 0x70
	if (buff == NULL){
 80029e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <calc_file_md5sum+0x3c>
		free(buff);
 80029ec:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80029ee:	f009 fe6b 	bl	800c6c8 <vPortFree>
		return -1;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029f6:	e067      	b.n	8002ac8 <calc_file_md5sum+0x10c>
	}


	struct mg_fd *fd = mg_fs_open(&mg_fs_lfs, path, MG_FS_READ); //Try to open file
 80029f8:	2201      	movs	r2, #1
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4834      	ldr	r0, [pc, #208]	@ (8002ad0 <calc_file_md5sum+0x114>)
 80029fe:	f014 f88d 	bl	8016b1c <mg_fs_open>
 8002a02:	66f8      	str	r0, [r7, #108]	@ 0x6c
	if (fd==NULL){
 8002a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <calc_file_md5sum+0x60>
		mg_fs_close(fd);
 8002a0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002a0c:	f014 f8ad 	bl	8016b6a <mg_fs_close>
		free(buff);
 8002a10:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a12:	f009 fe59 	bl	800c6c8 <vPortFree>
		return -2;
 8002a16:	f06f 0301 	mvn.w	r3, #1
 8002a1a:	e055      	b.n	8002ac8 <calc_file_md5sum+0x10c>
		}


	mg_md5_ctx md5_ctx;
	mg_md5_init(&md5_ctx);
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	4618      	mov	r0, r3
 8002a22:	f018 fcf5 	bl	801b410 <mg_md5_init>
	size_t bytes_read;
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8002a26:	e006      	b.n	8002a36 <calc_file_md5sum+0x7a>
		mg_md5_update(&md5_ctx, (const unsigned char *)buff, bytes_read);
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a2e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a30:	4618      	mov	r0, r3
 8002a32:	f019 fb99 	bl	801c168 <mg_md5_update>
	while ((bytes_read = mg_fs_lfs.rd(fd->fd, buff, buff_len)) > 0) {
 8002a36:	4b26      	ldr	r3, [pc, #152]	@ (8002ad0 <calc_file_md5sum+0x114>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a3c:	6810      	ldr	r0, [r2, #0]
 8002a3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8002a42:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002a44:	4798      	blx	r3
 8002a46:	66b8      	str	r0, [r7, #104]	@ 0x68
 8002a48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ec      	bne.n	8002a28 <calc_file_md5sum+0x6c>
	}

	mg_fs_close(fd);
 8002a4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002a50:	f014 f88b 	bl	8016b6a <mg_fs_close>

	uint8_t * digest = calloc(digest_len, 1);
 8002a54:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff63 	bl	8002926 <mg_calloc>
 8002a60:	6678      	str	r0, [r7, #100]	@ 0x64
	if (digest == NULL){
 8002a62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d108      	bne.n	8002a7a <calc_file_md5sum+0xbe>
		free(buff);
 8002a68:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002a6a:	f009 fe2d 	bl	800c6c8 <vPortFree>
		free(digest);
 8002a6e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002a70:	f009 fe2a 	bl	800c6c8 <vPortFree>
		return -1;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a78:	e026      	b.n	8002ac8 <calc_file_md5sum+0x10c>
	}

	mg_md5_final(&md5_ctx, digest);
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002a80:	4618      	mov	r0, r3
 8002a82:	f019 fbef 	bl	801c264 <mg_md5_final>
	// Преобразование контрольной суммы в строку
	for (int i = 0; i < 16; ++i) {
 8002a86:	2300      	movs	r3, #0
 8002a88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a8a:	e013      	b.n	8002ab4 <calc_file_md5sum+0xf8>
		snprintf(md5_str + (i * 2), md5_str_size - (i * 2), "%02x", digest[i]);
 8002a8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	461a      	mov	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	1898      	adds	r0, r3, r2
 8002a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a9e:	1a99      	subs	r1, r3, r2
 8002aa0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002aa2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <calc_file_md5sum+0x118>)
 8002aaa:	f022 fc27 	bl	80252fc <snprintf>
	for (int i = 0; i < 16; ++i) {
 8002aae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	dde8      	ble.n	8002a8c <calc_file_md5sum+0xd0>
	}

	free(buff);
 8002aba:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002abc:	f009 fe04 	bl	800c6c8 <vPortFree>
	free(digest);
 8002ac0:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002ac2:	f009 fe01 	bl	800c6c8 <vPortFree>

	return 0;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3780      	adds	r7, #128	@ 0x80
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	2000000c 	.word	0x2000000c
 8002ad4:	0802f4c8 	.word	0x0802f4c8

08002ad8 <handle_io_status_get>:

static void handle_io_status_get(struct mg_connection *c, struct mg_http_message *hm){
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	b094      	sub	sp, #80	@ 0x50
 8002adc:	af06      	add	r7, sp, #24
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]


	//Processing GET request
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae6:	4960      	ldr	r1, [pc, #384]	@ (8002c68 <handle_io_status_get+0x190>)
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f01f f82b 	bl	8021b44 <mg_str_s>
 8002aee:	6839      	ldr	r1, [r7, #0]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af8:	cb0c      	ldmia	r3, {r2, r3}
 8002afa:	c903      	ldmia	r1, {r0, r1}
 8002afc:	f01f f8f5 	bl	8021cea <mg_match>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d023      	beq.n	8002b4e <handle_io_status_get+0x76>
		struct DeviceStatus status;

		r_w_parameter(status.inputs, S_INPUTS, S_READ);
 8002b06:	4b59      	ldr	r3, [pc, #356]	@ (8002c6c <handle_io_status_get+0x194>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f107 001c 	add.w	r0, r7, #28
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2101      	movs	r1, #1
 8002b12:	4798      	blx	r3
		r_w_parameter(status.outputs, S_OUTPUTS, S_READ);
 8002b14:	4b55      	ldr	r3, [pc, #340]	@ (8002c6c <handle_io_status_get+0x194>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f107 021c 	add.w	r2, r7, #28
 8002b1c:	1cd0      	adds	r0, r2, #3
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2102      	movs	r1, #2
 8002b22:	4798      	blx	r3
		mg_http_reply(c, 200, headers, //TODO delete for release,
						"{"
						"\"inputs\": [%d, %d, %d], \"outputs\": [%d, %d, %d]"
						"}\r\n",
						status.inputs[0], status.inputs[1], status.inputs[2],
 8002b24:	7f3b      	ldrb	r3, [r7, #28]
 8002b26:	7f7a      	ldrb	r2, [r7, #29]
 8002b28:	7fb9      	ldrb	r1, [r7, #30]
						status.outputs[0], status.outputs[1], status.outputs[2]
 8002b2a:	7ff8      	ldrb	r0, [r7, #31]
 8002b2c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8002b30:	f897 5021 	ldrb.w	r5, [r7, #33]	@ 0x21
		mg_http_reply(c, 200, headers, //TODO delete for release,
 8002b34:	9505      	str	r5, [sp, #20]
 8002b36:	9404      	str	r4, [sp, #16]
 8002b38:	9003      	str	r0, [sp, #12]
 8002b3a:	9102      	str	r1, [sp, #8]
 8002b3c:	9201      	str	r2, [sp, #4]
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4b4b      	ldr	r3, [pc, #300]	@ (8002c70 <handle_io_status_get+0x198>)
 8002b42:	4a4c      	ldr	r2, [pc, #304]	@ (8002c74 <handle_io_status_get+0x19c>)
 8002b44:	21c8      	movs	r1, #200	@ 0xc8
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f015 fb50 	bl	80181ec <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");

	}
}
 8002b4c:	e087      	b.n	8002c5e <handle_io_status_get+0x186>
	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8002b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b52:	4949      	ldr	r1, [pc, #292]	@ (8002c78 <handle_io_status_get+0x1a0>)
 8002b54:	4618      	mov	r0, r3
 8002b56:	f01e fff5 	bl	8021b44 <mg_str_s>
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b64:	cb0c      	ldmia	r3, {r2, r3}
 8002b66:	c903      	ldmia	r1, {r0, r1}
 8002b68:	f01f f8bf 	bl	8021cea <mg_match>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d06d      	beq.n	8002c4e <handle_io_status_get+0x176>
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	6839      	ldr	r1, [r7, #0]
 8002b78:	4a40      	ldr	r2, [pc, #256]	@ (8002c7c <handle_io_status_get+0x1a4>)
 8002b7a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002b7e:	c903      	ldmia	r1, {r0, r1}
 8002b80:	f018 f94e 	bl	801ae20 <mg_json_get_num>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d059      	beq.n	8002c3e <handle_io_status_get+0x166>
			mg_json_get_num(hm->body, "$.state", &tmp2) > 0){
 8002b8a:	f107 0308 	add.w	r3, r7, #8
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	4a3b      	ldr	r2, [pc, #236]	@ (8002c80 <handle_io_status_get+0x1a8>)
 8002b92:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002b96:	c903      	ldmia	r1, {r0, r1}
 8002b98:	f018 f942 	bl	801ae20 <mg_json_get_num>
 8002b9c:	4603      	mov	r3, r0
		if (mg_json_get_num(hm->body, "$.relay_id", &tmp1) > 0 &&
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04d      	beq.n	8002c3e <handle_io_status_get+0x166>
			relay_id = (uint8_t) tmp1;
 8002ba2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fe f815 	bl	8000bd8 <__aeabi_d2uiz>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			state = (uint8_t) tmp2;
 8002bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7fe f80c 	bl	8000bd8 <__aeabi_d2uiz>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002bc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d02f      	beq.n	8002c2e <handle_io_status_get+0x156>
 8002bce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d82b      	bhi.n	8002c2e <handle_io_status_get+0x156>
 8002bd6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <handle_io_status_get+0x10e>
 8002bde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d123      	bne.n	8002c2e <handle_io_status_get+0x156>
				r_w_parameter(output_status, S_OUTPUTS, S_READ);
 8002be6:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <handle_io_status_get+0x194>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f107 0018 	add.w	r0, r7, #24
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	4798      	blx	r3
				output_status[relay_id-1] = state;  // make -1 for make human understandable
 8002bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	3338      	adds	r3, #56	@ 0x38
 8002bfc:	443b      	add	r3, r7
 8002bfe:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002c02:	f803 2c20 	strb.w	r2, [r3, #-32]
				r_w_parameter(output_status, S_OUTPUTS, S_WRITE);
 8002c06:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <handle_io_status_get+0x194>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f107 0018 	add.w	r0, r7, #24
 8002c0e:	2201      	movs	r2, #1
 8002c10:	2102      	movs	r1, #2
 8002c12:	4798      	blx	r3
				mg_http_reply(c, 200, headers , //TODO delete for release,
 8002c14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c18:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002c1c:	9201      	str	r2, [sp, #4]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <handle_io_status_get+0x1ac>)
 8002c22:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <handle_io_status_get+0x19c>)
 8002c24:	21c8      	movs	r1, #200	@ 0xc8
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f015 fae0 	bl	80181ec <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002c2c:	e017      	b.n	8002c5e <handle_io_status_get+0x186>
                mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c2e:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <handle_io_status_get+0x1b0>)
 8002c30:	4a10      	ldr	r2, [pc, #64]	@ (8002c74 <handle_io_status_get+0x19c>)
 8002c32:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f015 fad8 	bl	80181ec <mg_http_reply>
			if (relay_id > 0 && relay_id <= OUTPUTS_COUNT && (state == 0 || state == 1)) {
 8002c3c:	e00f      	b.n	8002c5e <handle_io_status_get+0x186>
            mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c3e:	4b13      	ldr	r3, [pc, #76]	@ (8002c8c <handle_io_status_get+0x1b4>)
 8002c40:	4a0c      	ldr	r2, [pc, #48]	@ (8002c74 <handle_io_status_get+0x19c>)
 8002c42:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f015 fad0 	bl	80181ec <mg_http_reply>
}
 8002c4c:	e007      	b.n	8002c5e <handle_io_status_get+0x186>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <handle_io_status_get+0x1b8>)
 8002c50:	4a08      	ldr	r2, [pc, #32]	@ (8002c74 <handle_io_status_get+0x19c>)
 8002c52:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f015 fac8 	bl	80181ec <mg_http_reply>
}
 8002c5c:	e7ff      	b.n	8002c5e <handle_io_status_get+0x186>
 8002c5e:	bf00      	nop
 8002c60:	3738      	adds	r7, #56	@ 0x38
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bdb0      	pop	{r4, r5, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	0802f4d0 	.word	0x0802f4d0
 8002c6c:	20000b18 	.word	0x20000b18
 8002c70:	0802f4d4 	.word	0x0802f4d4
 8002c74:	0802f508 	.word	0x0802f508
 8002c78:	0802f578 	.word	0x0802f578
 8002c7c:	0802f580 	.word	0x0802f580
 8002c80:	0802f58c 	.word	0x0802f58c
 8002c84:	0802f594 	.word	0x0802f594
 8002c88:	0802f5cc 	.word	0x0802f5cc
 8002c8c:	0802f608 	.word	0x0802f608
 8002c90:	0802f644 	.word	0x0802f644

08002c94 <handle_mqtt_conf>:

static void handle_mqtt_conf(struct mg_connection *c, struct mg_http_message *hm){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b092      	sub	sp, #72	@ 0x48
 8002c98:	af04      	add	r7, sp, #16
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	49a7      	ldr	r1, [pc, #668]	@ (8002f40 <handle_mqtt_conf+0x2ac>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f01e ff4d 	bl	8021b44 <mg_str_s>
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	f107 030c 	add.w	r3, r7, #12
 8002cb4:	cb0c      	ldmia	r3, {r2, r3}
 8002cb6:	c903      	ldmia	r1, {r0, r1}
 8002cb8:	f01f f817 	bl	8021cea <mg_match>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04d      	beq.n	8002d5e <handle_mqtt_conf+0xca>

		uint8_t pass_len = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8002cc8:	21c6      	movs	r1, #198	@ 0xc6
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7ff fe2b 	bl	8002926 <mg_calloc>
 8002cd0:	61f8      	str	r0, [r7, #28]
		if (mqtt_config == NULL) {
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <handle_mqtt_conf+0x5a>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002cd8:	4b9a      	ldr	r3, [pc, #616]	@ (8002f44 <handle_mqtt_conf+0x2b0>)
 8002cda:	4a9b      	ldr	r2, [pc, #620]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002cdc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f015 fa83 	bl	80181ec <mg_http_reply>
			free(mqtt_config);
 8002ce6:	69f8      	ldr	r0, [r7, #28]
 8002ce8:	f009 fcee 	bl	800c6c8 <vPortFree>
			return;
 8002cec:	e124      	b.n	8002f38 <handle_mqtt_conf+0x2a4>
		}

		r_w_parameter(mqtt_config, S_MQTT, S_READ);
 8002cee:	4b97      	ldr	r3, [pc, #604]	@ (8002f4c <handle_mqtt_conf+0x2b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	69f8      	ldr	r0, [r7, #28]
 8002cf8:	4798      	blx	r3
		pass_len = strlen(mqtt_config->pass);
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	33a5      	adds	r3, #165	@ 0xa5
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd face 	bl	80002a0 <strlen>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		memset(mqtt_config->pass, 42,pass_len); // маскируем пароль
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	33a5      	adds	r3, #165	@ 0xa5
 8002d0e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d12:	212a      	movs	r1, #42	@ 0x2a
 8002d14:	4618      	mov	r0, r3
 8002d16:	f023 f81b 	bl	8025d50 <memset>
		mqtt_config->pass[pass_len] = '\0'; // добавляем null-terminator
 8002d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5


		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	785b      	ldrb	r3, [r3, #1]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <handle_mqtt_conf+0xa0>
 8002d30:	4b87      	ldr	r3, [pc, #540]	@ (8002f50 <handle_mqtt_conf+0x2bc>)
 8002d32:	e000      	b.n	8002d36 <handle_mqtt_conf+0xa2>
 8002d34:	4b87      	ldr	r3, [pc, #540]	@ (8002f54 <handle_mqtt_conf+0x2c0>)
						mqtt_config->uri, mqtt_config->login, mqtt_config->pass);
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	3202      	adds	r2, #2
 8002d3a:	69f9      	ldr	r1, [r7, #28]
 8002d3c:	3184      	adds	r1, #132	@ 0x84
 8002d3e:	69f8      	ldr	r0, [r7, #28]
 8002d40:	30a5      	adds	r0, #165	@ 0xa5
		mg_http_reply(c, 200, headers, mqtt_conf_answ, mqtt_config->enable ? "true" : "false",
 8002d42:	9003      	str	r0, [sp, #12]
 8002d44:	9102      	str	r1, [sp, #8]
 8002d46:	9201      	str	r2, [sp, #4]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4b83      	ldr	r3, [pc, #524]	@ (8002f58 <handle_mqtt_conf+0x2c4>)
 8002d4c:	4a7e      	ldr	r2, [pc, #504]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002d4e:	21c8      	movs	r1, #200	@ 0xc8
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f015 fa4b 	bl	80181ec <mg_http_reply>

		free(mqtt_config);
 8002d56:	69f8      	ldr	r0, [r7, #28]
 8002d58:	f009 fcb6 	bl	800c6c8 <vPortFree>
 8002d5c:	e0ec      	b.n	8002f38 <handle_mqtt_conf+0x2a4>

	}else if(mg_match(hm->method, mg_str("POST"), NULL)){
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	497e      	ldr	r1, [pc, #504]	@ (8002f5c <handle_mqtt_conf+0x2c8>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f01e feed 	bl	8021b44 <mg_str_s>
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	cb0c      	ldmia	r3, {r2, r3}
 8002d76:	c903      	ldmia	r1, {r0, r1}
 8002d78:	f01e ffb7 	bl	8021cea <mg_match>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80d3 	beq.w	8002f2a <handle_mqtt_conf+0x296>

		MQTT_cred_struct * mqtt_config = (MQTT_cred_struct *) calloc(1, sizeof(MQTT_cred_struct));
 8002d84:	21c6      	movs	r1, #198	@ 0xc6
 8002d86:	2001      	movs	r0, #1
 8002d88:	f7ff fdcd 	bl	8002926 <mg_calloc>
 8002d8c:	6378      	str	r0, [r7, #52]	@ 0x34
		if (mqtt_config == NULL) {
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <handle_mqtt_conf+0x116>
			mg_http_reply(c, 500, headers, "{\"status\":\"error\",\"message\":\"Memory allocation failed\"}\r\n");
 8002d94:	4b6b      	ldr	r3, [pc, #428]	@ (8002f44 <handle_mqtt_conf+0x2b0>)
 8002d96:	4a6c      	ldr	r2, [pc, #432]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002d98:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f015 fa25 	bl	80181ec <mg_http_reply>
			free(mqtt_config);
 8002da2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002da4:	f009 fc90 	bl	800c6c8 <vPortFree>
			return;
 8002da8:	e0c6      	b.n	8002f38 <handle_mqtt_conf+0x2a4>
		}
		int length;
		if(mg_json_get(hm->body, "$", &length) < 0){//JSON validation err
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	6839      	ldr	r1, [r7, #0]
 8002db0:	4a6b      	ldr	r2, [pc, #428]	@ (8002f60 <handle_mqtt_conf+0x2cc>)
 8002db2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002db6:	c903      	ldmia	r1, {r0, r1}
 8002db8:	f017 fcf8 	bl	801a7ac <mg_json_get>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da07      	bge.n	8002dd2 <handle_mqtt_conf+0x13e>

			mg_http_reply(c, 400, headers, //TODO delete for release,
 8002dc2:	4b68      	ldr	r3, [pc, #416]	@ (8002f64 <handle_mqtt_conf+0x2d0>)
 8002dc4:	4a60      	ldr	r2, [pc, #384]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002dc6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f015 fa0e 	bl	80181ec <mg_http_reply>
 8002dd0:	e0a7      	b.n	8002f22 <handle_mqtt_conf+0x28e>
					"{\"status\":\"error\",\"message\":\"Incorrect JSON\"}\r\n");

		}else{//JSON validation success
			mg_json_get_bool(hm->body, "$.enabled", &mqtt_config->enable);
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	4a63      	ldr	r2, [pc, #396]	@ (8002f68 <handle_mqtt_conf+0x2d4>)
 8002dda:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8002dde:	c903      	ldmia	r1, {r0, r1}
 8002de0:	f018 f865 	bl	801aeae <mg_json_get_bool>

			char * broker = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	633b      	str	r3, [r7, #48]	@ 0x30
			if ((broker = mg_json_get_str(hm->body, "$.broker"))){
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4a60      	ldr	r2, [pc, #384]	@ (8002f6c <handle_mqtt_conf+0x2d8>)
 8002dec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002df0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002df4:	f018 f925 	bl	801b042 <mg_json_get_str>
 8002df8:	6338      	str	r0, [r7, #48]	@ 0x30
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d04e      	beq.n	8002e9e <handle_mqtt_conf+0x20a>
				int err = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if((err=is_valid_mqtt_url(broker))==0){  //Validate MQTT URI
 8002e04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e06:	f020 f9d7 	bl	80231b8 <is_valid_mqtt_url>
 8002e0a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d107      	bne.n	8002e22 <handle_mqtt_conf+0x18e>
					strncpy(mqtt_config->uri, broker, MAX_MQTT_URL_LEN -1);
 8002e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e14:	3302      	adds	r3, #2
 8002e16:	227f      	movs	r2, #127	@ 0x7f
 8002e18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f022 ffdf 	bl	8025dde <strncpy>
 8002e20:	e03d      	b.n	8002e9e <handle_mqtt_conf+0x20a>
				}else{
					switch (err) {
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	3304      	adds	r3, #4
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d82a      	bhi.n	8002e80 <handle_mqtt_conf+0x1ec>
 8002e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002e30 <handle_mqtt_conf+0x19c>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e71 	.word	0x08002e71
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e51 	.word	0x08002e51
 8002e3c:	08002e41 	.word	0x08002e41
						case -1:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e40:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <handle_mqtt_conf+0x2dc>)
 8002e42:	4a41      	ldr	r2, [pc, #260]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002e44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f015 f9cf 	bl	80181ec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not start with 'mqtt://'\"}\r\n");
							break;
 8002e4e:	e01f      	b.n	8002e90 <handle_mqtt_conf+0x1fc>
						case -2:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e50:	4b48      	ldr	r3, [pc, #288]	@ (8002f74 <handle_mqtt_conf+0x2e0>)
 8002e52:	4a3d      	ldr	r2, [pc, #244]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002e54:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f015 f9c7 	bl	80181ec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"URL does not contain a port separator ':'\"}\r\n");
							break;
 8002e5e:	e017      	b.n	8002e90 <handle_mqtt_conf+0x1fc>
						case -3:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e60:	4b45      	ldr	r3, [pc, #276]	@ (8002f78 <handle_mqtt_conf+0x2e4>)
 8002e62:	4a39      	ldr	r2, [pc, #228]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002e64:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f015 f9bf 	bl	80181ec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid domain or IP address\"}\r\n");
							break;
 8002e6e:	e00f      	b.n	8002e90 <handle_mqtt_conf+0x1fc>
						case -4:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e70:	4b42      	ldr	r3, [pc, #264]	@ (8002f7c <handle_mqtt_conf+0x2e8>)
 8002e72:	4a35      	ldr	r2, [pc, #212]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002e74:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f015 f9b7 	bl	80181ec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid port number\"}\r\n");
							break;
 8002e7e:	e007      	b.n	8002e90 <handle_mqtt_conf+0x1fc>
						default:
							mg_http_reply(c, 400, headers, //TODO delete for release,
 8002e80:	4b3f      	ldr	r3, [pc, #252]	@ (8002f80 <handle_mqtt_conf+0x2ec>)
 8002e82:	4a31      	ldr	r2, [pc, #196]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002e84:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f015 f9af 	bl	80181ec <mg_http_reply>
									"{\"status\":\"error\",\"message\":\"Invalid MQTT_URI\"}\r\n");

							break;
 8002e8e:	bf00      	nop
					}
					free(broker);
 8002e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e92:	f009 fc19 	bl	800c6c8 <vPortFree>
					free(mqtt_config);
 8002e96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e98:	f009 fc16 	bl	800c6c8 <vPortFree>
					return;
 8002e9c:	e04c      	b.n	8002f38 <handle_mqtt_conf+0x2a4>
				}

			}
			free(broker);
 8002e9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ea0:	f009 fc12 	bl	800c6c8 <vPortFree>

			char * username = NULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if((username = mg_json_get_str(hm->body, "$.username"))){
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4a36      	ldr	r2, [pc, #216]	@ (8002f84 <handle_mqtt_conf+0x2f0>)
 8002eac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002eb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002eb4:	f018 f8c5 	bl	801b042 <mg_json_get_str>
 8002eb8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <handle_mqtt_conf+0x23a>
				strncpy(mqtt_config->login, username, MAX_MQTT_LOGIN_LEN -1);
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec2:	3384      	adds	r3, #132	@ 0x84
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f022 ff88 	bl	8025dde <strncpy>
			}
			free(username);
 8002ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ed0:	f009 fbfa 	bl	800c6c8 <vPortFree>

			char * password = NULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
			if((password = mg_json_get_str(hm->body, "$.password"))){
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <handle_mqtt_conf+0x2f4>)
 8002edc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ee0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ee4:	f018 f8ad 	bl	801b042 <mg_json_get_str>
 8002ee8:	6278      	str	r0, [r7, #36]	@ 0x24
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <handle_mqtt_conf+0x26a>
				strncpy(mqtt_config->pass, password, MAX_MQTT_PASS_LEN -1);
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef2:	33a5      	adds	r3, #165	@ 0xa5
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f022 ff70 	bl	8025dde <strncpy>
			}
			free(password);
 8002efe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f00:	f009 fbe2 	bl	800c6c8 <vPortFree>

			mqtt_config->save = 1;
 8002f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]

			r_w_parameter(mqtt_config, S_MQTT, S_WRITE);
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <handle_mqtt_conf+0x2b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2100      	movs	r1, #0
 8002f12:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f14:	4798      	blx	r3

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8002f16:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <handle_mqtt_conf+0x2f8>)
 8002f18:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002f1a:	21c8      	movs	r1, #200	@ 0xc8
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f015 f965 	bl	80181ec <mg_http_reply>
				"{\"status\":\"success\",\"message\":\"MQTT settings updated!\"}\r\n");

		}

		free(mqtt_config);
 8002f22:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f24:	f009 fbd0 	bl	800c6c8 <vPortFree>
 8002f28:	e006      	b.n	8002f38 <handle_mqtt_conf+0x2a4>

	}else{//error, unsupported method
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8002f2a:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <handle_mqtt_conf+0x2fc>)
 8002f2c:	4a06      	ldr	r2, [pc, #24]	@ (8002f48 <handle_mqtt_conf+0x2b4>)
 8002f2e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f015 f95a 	bl	80181ec <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
	}
}
 8002f38:	3738      	adds	r7, #56	@ 0x38
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	0802f4d0 	.word	0x0802f4d0
 8002f44:	0802f698 	.word	0x0802f698
 8002f48:	0802f508 	.word	0x0802f508
 8002f4c:	20000b18 	.word	0x20000b18
 8002f50:	0802f6d4 	.word	0x0802f6d4
 8002f54:	0802f6dc 	.word	0x0802f6dc
 8002f58:	0802f6e4 	.word	0x0802f6e4
 8002f5c:	0802f578 	.word	0x0802f578
 8002f60:	0802f72c 	.word	0x0802f72c
 8002f64:	0802f730 	.word	0x0802f730
 8002f68:	0802f760 	.word	0x0802f760
 8002f6c:	0802f76c 	.word	0x0802f76c
 8002f70:	0802f778 	.word	0x0802f778
 8002f74:	0802f7bc 	.word	0x0802f7bc
 8002f78:	0802f808 	.word	0x0802f808
 8002f7c:	0802f848 	.word	0x0802f848
 8002f80:	0802f880 	.word	0x0802f880
 8002f84:	0802f8b4 	.word	0x0802f8b4
 8002f88:	0802f8c0 	.word	0x0802f8c0
 8002f8c:	0802f8cc 	.word	0x0802f8cc
 8002f90:	0802f644 	.word	0x0802f644

08002f94 <handle_dev_status>:

static void handle_dev_status(struct mg_connection *c, struct mg_http_message *hm){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b0d2      	sub	sp, #328	@ 0x148
 8002f98:	af06      	add	r7, sp, #24
 8002f9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002fa2:	6018      	str	r0, [r3, #0]
 8002fa4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002fa8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002fac:	6019      	str	r1, [r3, #0]

	char   dev_status_template[] = "{\"mqtt_conn_status\": \"%s\", \"local_addr\": \"%s\", \"server_addr\": \"%s\" , \"pub_topics\": [%s], \"subscr_topics\": [%s]}\r\n";
 8002fae:	4acf      	ldr	r2, [pc, #828]	@ (80032ec <handle_dev_status+0x358>)
 8002fb0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	2272      	movs	r2, #114	@ 0x72
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f024 f905 	bl	80271c8 <memcpy>
	struct mg_connection* mqtt_connection = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	int    str_part_len = 30;
 8002fc4:	231e      	movs	r3, #30
 8002fc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	char  *mqtt_status_str   = calloc(str_part_len, sizeof(char));
 8002fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fca8 	bl	8002926 <mg_calloc>
 8002fd6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
	char  *mqtt_server_addr  = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002fda:	2101      	movs	r1, #1
 8002fdc:	202e      	movs	r0, #46	@ 0x2e
 8002fde:	f7ff fca2 	bl	8002926 <mg_calloc>
 8002fe2:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	char  *mqtt_local_addr   = calloc(IP_v6_STR_LEN + IP_PORT_STR_LEN, sizeof(char));
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	202e      	movs	r0, #46	@ 0x2e
 8002fea:	f7ff fc9c 	bl	8002926 <mg_calloc>
 8002fee:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	char  *pub_topics_str    = calloc((OUTPUTS_COUNT+ INPUTS_COUNT) * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002ff8:	f7ff fc95 	bl	8002926 <mg_calloc>
 8002ffc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	char  *subscr_topics_str = calloc(OUTPUTS_COUNT * MQTT_TOPIK_MAX_LEN, sizeof(char));
 8003000:	2101      	movs	r1, #1
 8003002:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8003006:	f7ff fc8e 	bl	8002926 <mg_calloc>
 800300a:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (mqtt_status_str && mqtt_server_addr && mqtt_local_addr && pub_topics_str && subscr_topics_str){
 800300e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8182 	beq.w	800331c <handle_dev_status+0x388>
 8003018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 817d 	beq.w	800331c <handle_dev_status+0x388>
 8003022:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8178 	beq.w	800331c <handle_dev_status+0x388>
 800302c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8173 	beq.w	800331c <handle_dev_status+0x388>
 8003036:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 816e 	beq.w	800331c <handle_dev_status+0x388>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003040:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8003044:	49aa      	ldr	r1, [pc, #680]	@ (80032f0 <handle_dev_status+0x35c>)
 8003046:	4618      	mov	r0, r3
 8003048:	f01e fd7c 	bl	8021b44 <mg_str_s>
 800304c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003050:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800305e:	cb0c      	ldmia	r3, {r2, r3}
 8003060:	c903      	ldmia	r1, {r0, r1}
 8003062:	f01e fe42 	bl	8021cea <mg_match>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8132 	beq.w	80032d2 <handle_dev_status+0x33e>
			mqtt_connection =  get_mqtt_connection();
 800306e:	f001 fa81 	bl	8004574 <get_mqtt_connection>
 8003072:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

			if(!mqtt_connection){
 8003076:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <handle_dev_status+0xfc>
				strncpy(mqtt_status_str, "closed", str_part_len);
 800307e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003082:	461a      	mov	r2, r3
 8003084:	499b      	ldr	r1, [pc, #620]	@ (80032f4 <handle_dev_status+0x360>)
 8003086:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 800308a:	f022 fea8 	bl	8025dde <strncpy>
 800308e:	e041      	b.n	8003114 <handle_dev_status+0x180>
			}else{
				if (mqtt_connection->is_connecting){
 8003090:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003094:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <handle_dev_status+0x120>
					strncpy(mqtt_status_str, "connecting", str_part_len);
 80030a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a6:	461a      	mov	r2, r3
 80030a8:	4993      	ldr	r1, [pc, #588]	@ (80032f8 <handle_dev_status+0x364>)
 80030aa:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80030ae:	f022 fe96 	bl	8025dde <strncpy>
 80030b2:	e019      	b.n	80030e8 <handle_dev_status+0x154>
				}else if(mqtt_connection->is_closing){
 80030b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030b8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <handle_dev_status+0x144>
					strncpy(mqtt_status_str, "closing",str_part_len);
 80030c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ca:	461a      	mov	r2, r3
 80030cc:	498b      	ldr	r1, [pc, #556]	@ (80032fc <handle_dev_status+0x368>)
 80030ce:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80030d2:	f022 fe84 	bl	8025dde <strncpy>
 80030d6:	e007      	b.n	80030e8 <handle_dev_status+0x154>
				}else{
					strncpy(mqtt_status_str, "established", str_part_len);
 80030d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030dc:	461a      	mov	r2, r3
 80030de:	4988      	ldr	r1, [pc, #544]	@ (8003300 <handle_dev_status+0x36c>)
 80030e0:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 80030e4:	f022 fe7b 	bl	8025dde <strncpy>
				}

				mg_snprintf(mqtt_local_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->loc);
 80030e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030ec:	3308      	adds	r3, #8
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4b84      	ldr	r3, [pc, #528]	@ (8003304 <handle_dev_status+0x370>)
 80030f2:	4a85      	ldr	r2, [pc, #532]	@ (8003308 <handle_dev_status+0x374>)
 80030f4:	212e      	movs	r1, #46	@ 0x2e
 80030f6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80030fa:	f01e f83b 	bl	8021174 <mg_snprintf>
				mg_snprintf(mqtt_server_addr, IP_v6_STR_LEN + IP_PORT_STR_LEN, "%M", mg_print_ip_port, &mqtt_connection->rem);
 80030fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003102:	331c      	adds	r3, #28
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4b7f      	ldr	r3, [pc, #508]	@ (8003304 <handle_dev_status+0x370>)
 8003108:	4a7f      	ldr	r2, [pc, #508]	@ (8003308 <handle_dev_status+0x374>)
 800310a:	212e      	movs	r1, #46	@ 0x2e
 800310c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8003110:	f01e f830 	bl	8021174 <mg_snprintf>

			}

			char topic[MQTT_TOPIK_MAX_LEN];
			strcat(pub_topics_str, "\"");
 8003114:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8003118:	f7fd f8c2 	bl	80002a0 <strlen>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003124:	4413      	add	r3, r2
 8003126:	4979      	ldr	r1, [pc, #484]	@ (800330c <handle_dev_status+0x378>)
 8003128:	461a      	mov	r2, r3
 800312a:	460b      	mov	r3, r1
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков состояний для INPUT_SENSOR
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8003130:	2301      	movs	r3, #1
 8003132:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003136:	e022      	b.n	800317e <handle_dev_status+0x1ea>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i);
 8003138:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f107 000c 	add.w	r0, r7, #12
 8003142:	2201      	movs	r2, #1
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	f001 ff2f 	bl	8004fa8 <generate_status_topik>
				strcat(pub_topics_str, topic);
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4619      	mov	r1, r3
 8003150:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8003154:	f022 fe04 	bl	8025d60 <strcat>
				strcat(pub_topics_str, "\", \"");
 8003158:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800315c:	f7fd f8a0 	bl	80002a0 <strlen>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003168:	4413      	add	r3, r2
 800316a:	4a69      	ldr	r2, [pc, #420]	@ (8003310 <handle_dev_status+0x37c>)
 800316c:	6810      	ldr	r0, [r2, #0]
 800316e:	6018      	str	r0, [r3, #0]
 8003170:	7912      	ldrb	r2, [r2, #4]
 8003172:	711a      	strb	r2, [r3, #4]
			for (int i = 1; i <= INPUTS_COUNT; i++){
 8003174:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003178:	3301      	adds	r3, #1
 800317a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800317e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003182:	2b03      	cmp	r3, #3
 8003184:	ddd8      	ble.n	8003138 <handle_dev_status+0x1a4>
			}

			// Формируем список топиков состояний для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8003186:	2301      	movs	r3, #1
 8003188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800318c:	e035      	b.n	80031fa <handle_dev_status+0x266>
				generate_status_topik(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 800318e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f107 000c 	add.w	r0, r7, #12
 8003198:	2202      	movs	r2, #2
 800319a:	2180      	movs	r1, #128	@ 0x80
 800319c:	f001 ff04 	bl	8004fa8 <generate_status_topik>
				strcat(pub_topics_str, topic);
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	4619      	mov	r1, r3
 80031a6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80031aa:	f022 fdd9 	bl	8025d60 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 80031ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	dc0e      	bgt.n	80031d4 <handle_dev_status+0x240>
					strcat(pub_topics_str, "\", \"");
 80031b6:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80031ba:	f7fd f871 	bl	80002a0 <strlen>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031c6:	4413      	add	r3, r2
 80031c8:	4a51      	ldr	r2, [pc, #324]	@ (8003310 <handle_dev_status+0x37c>)
 80031ca:	6810      	ldr	r0, [r2, #0]
 80031cc:	6018      	str	r0, [r3, #0]
 80031ce:	7912      	ldrb	r2, [r2, #4]
 80031d0:	711a      	strb	r2, [r3, #4]
 80031d2:	e00d      	b.n	80031f0 <handle_dev_status+0x25c>
				}else{
					strcat(pub_topics_str, "\"");
 80031d4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80031d8:	f7fd f862 	bl	80002a0 <strlen>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031e4:	4413      	add	r3, r2
 80031e6:	4949      	ldr	r1, [pc, #292]	@ (800330c <handle_dev_status+0x378>)
 80031e8:	461a      	mov	r2, r3
 80031ea:	460b      	mov	r3, r1
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 80031f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031f4:	3301      	adds	r3, #1
 80031f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80031fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031fe:	2b03      	cmp	r3, #3
 8003200:	ddc5      	ble.n	800318e <handle_dev_status+0x1fa>
				}
			}

			strcat(subscr_topics_str, "\"");
 8003202:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003206:	f7fd f84b 	bl	80002a0 <strlen>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003212:	4413      	add	r3, r2
 8003214:	493d      	ldr	r1, [pc, #244]	@ (800330c <handle_dev_status+0x378>)
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	8013      	strh	r3, [r2, #0]
			// Формируем список топиков подписки для OUTPUT_SENSOR
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 800321e:	2301      	movs	r3, #1
 8003220:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003224:	e035      	b.n	8003292 <handle_dev_status+0x2fe>
				generate_comand_topik_for_subscrabe(topic, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i);
 8003226:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f107 000c 	add.w	r0, r7, #12
 8003230:	2202      	movs	r2, #2
 8003232:	2180      	movs	r1, #128	@ 0x80
 8003234:	f001 fe8e 	bl	8004f54 <generate_comand_topik_for_subscrabe>
				strcat(subscr_topics_str, topic);
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	4619      	mov	r1, r3
 800323e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003242:	f022 fd8d 	bl	8025d60 <strcat>
				// Добавляем запятую между топиками, кроме последнего
				if (i < OUTPUTS_COUNT) {
 8003246:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800324a:	2b02      	cmp	r3, #2
 800324c:	dc0e      	bgt.n	800326c <handle_dev_status+0x2d8>
					strcat(subscr_topics_str, "\", \"");
 800324e:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003252:	f7fd f825 	bl	80002a0 <strlen>
 8003256:	4603      	mov	r3, r0
 8003258:	461a      	mov	r2, r3
 800325a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800325e:	4413      	add	r3, r2
 8003260:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <handle_dev_status+0x37c>)
 8003262:	6810      	ldr	r0, [r2, #0]
 8003264:	6018      	str	r0, [r3, #0]
 8003266:	7912      	ldrb	r2, [r2, #4]
 8003268:	711a      	strb	r2, [r3, #4]
 800326a:	e00d      	b.n	8003288 <handle_dev_status+0x2f4>
				}else{
					strcat(subscr_topics_str, "\"");
 800326c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003270:	f7fd f816 	bl	80002a0 <strlen>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800327c:	4413      	add	r3, r2
 800327e:	4923      	ldr	r1, [pc, #140]	@ (800330c <handle_dev_status+0x378>)
 8003280:	461a      	mov	r2, r3
 8003282:	460b      	mov	r3, r1
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	8013      	strh	r3, [r2, #0]
			for (int i = 1; i <= OUTPUTS_COUNT; i++){
 8003288:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800328c:	3301      	adds	r3, #1
 800328e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003292:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003296:	2b03      	cmp	r3, #3
 8003298:	ddc5      	ble.n	8003226 <handle_dev_status+0x292>
				}
			}


			mg_http_reply(c, 200, headers, //TODO delete for release,
 800329a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 800329e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80032a2:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 80032a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80032aa:	9304      	str	r3, [sp, #16]
 80032ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032b0:	9303      	str	r3, [sp, #12]
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	9302      	str	r3, [sp, #8]
 80032b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	4a13      	ldr	r2, [pc, #76]	@ (8003314 <handle_dev_status+0x380>)
 80032c8:	21c8      	movs	r1, #200	@ 0xc8
 80032ca:	6800      	ldr	r0, [r0, #0]
 80032cc:	f014 ff8e 	bl	80181ec <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80032d0:	e02f      	b.n	8003332 <handle_dev_status+0x39e>
					dev_status_template, mqtt_status_str, mqtt_local_addr, mqtt_server_addr, pub_topics_str, subscr_topics_str);

		}else{//error, unsupported method
			mg_http_reply(c, 400, headers, //TODO delete for release,
 80032d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80032d6:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 80032da:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <handle_dev_status+0x384>)
 80032dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003314 <handle_dev_status+0x380>)
 80032de:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80032e2:	6800      	ldr	r0, [r0, #0]
 80032e4:	f014 ff82 	bl	80181ec <mg_http_reply>
		if (mg_match(hm->method, mg_str("GET"), NULL)){
 80032e8:	e023      	b.n	8003332 <handle_dev_status+0x39e>
 80032ea:	bf00      	nop
 80032ec:	0802f97c 	.word	0x0802f97c
 80032f0:	0802f4d0 	.word	0x0802f4d0
 80032f4:	0802f908 	.word	0x0802f908
 80032f8:	0802f910 	.word	0x0802f910
 80032fc:	0802f91c 	.word	0x0802f91c
 8003300:	0802f924 	.word	0x0802f924
 8003304:	080213a5 	.word	0x080213a5
 8003308:	0802f930 	.word	0x0802f930
 800330c:	0802f934 	.word	0x0802f934
 8003310:	0802f938 	.word	0x0802f938
 8003314:	0802f508 	.word	0x0802f508
 8003318:	0802f644 	.word	0x0802f644
					"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET, POST methods\"}\r\n");
		}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800331c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003320:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8003324:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <handle_dev_status+0x3d0>)
 8003326:	4a10      	ldr	r2, [pc, #64]	@ (8003368 <handle_dev_status+0x3d4>)
 8003328:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800332c:	6800      	ldr	r0, [r0, #0]
 800332e:	f014 ff5d 	bl	80181ec <mg_http_reply>
				"{\"status\":\"error\",\"message\":\"Memory allocation error\"}\r\n");

	}

	free(mqtt_status_str);
 8003332:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8003336:	f009 f9c7 	bl	800c6c8 <vPortFree>
	free(mqtt_server_addr);
 800333a:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800333e:	f009 f9c3 	bl	800c6c8 <vPortFree>
	free(mqtt_local_addr);
 8003342:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8003346:	f009 f9bf 	bl	800c6c8 <vPortFree>
	free(pub_topics_str);
 800334a:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800334e:	f009 f9bb 	bl	800c6c8 <vPortFree>
	free(subscr_topics_str);
 8003352:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8003356:	f009 f9b7 	bl	800c6c8 <vPortFree>
}
 800335a:	bf00      	nop
 800335c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	0802f940 	.word	0x0802f940
 8003368:	0802f508 	.word	0x0802f508

0800336c <handle_OPTIONS_method>:


static void handle_OPTIONS_method(struct mg_connection *c){
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

	mg_http_reply(c, 200,
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <handle_OPTIONS_method+0x1c>)
 8003376:	4a05      	ldr	r2, [pc, #20]	@ (800338c <handle_OPTIONS_method+0x20>)
 8003378:	21c8      	movs	r1, #200	@ 0xc8
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f014 ff36 	bl	80181ec <mg_http_reply>
	    "Access-Control-Allow-Origin: *\r\n"  // Или конкретный домен
	    "Access-Control-Allow-Methods: GET, POST, OPTIONS\r\n"
	    "Access-Control-Allow-Headers: Content-Type\r\n"
	    "Access-Control-Max-Age: 86400\r\n","\r\n");  // Без тела ответа
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	0802f9f0 	.word	0x0802f9f0
 800338c:	0802f9f4 	.word	0x0802f9f4

08003390 <handle_restart_mcu>:

static void handle_restart_mcu(struct mg_connection *c, struct mg_http_message *hm){
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	@ 0x28
 8003394:	af04      	add	r7, sp, #16
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]

	//HAL_NVIC_SystemReset();
    if (mg_match(hm->method, mg_str("POST"), NULL)){
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	491a      	ldr	r1, [pc, #104]	@ (8003408 <handle_restart_mcu+0x78>)
 80033a0:	4618      	mov	r0, r3
 80033a2:	f01e fbcf 	bl	8021b44 <mg_str_s>
 80033a6:	6839      	ldr	r1, [r7, #0]
 80033a8:	2300      	movs	r3, #0
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	cb0c      	ldmia	r3, {r2, r3}
 80033b2:	c903      	ldmia	r1, {r0, r1}
 80033b4:	f01e fc99 	bl	8021cea <mg_match>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d018      	beq.n	80033f0 <handle_restart_mcu+0x60>
		struct mg_full_net_info * param = (struct mg_full_net_info *)c->fn_data;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033c2:	617b      	str	r3, [r7, #20]


		mg_timer_add(param->mgr, 2000 /* 05 seconds */, MG_TIMER_REPEAT, HAL_NVIC_SystemReset, NULL);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	9302      	str	r3, [sp, #8]
 80033cc:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <handle_restart_mcu+0x7c>)
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	2301      	movs	r3, #1
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	4608      	mov	r0, r1
 80033de:	f01a fc47 	bl	801dc70 <mg_timer_add>

		mg_http_reply(c, 200, headers, //TODO delete for release,
 80033e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <handle_restart_mcu+0x80>)
 80033e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003414 <handle_restart_mcu+0x84>)
 80033e6:	21c8      	movs	r1, #200	@ 0xc8
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f014 feff 	bl	80181ec <mg_http_reply>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
				"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80033ee:	e006      	b.n	80033fe <handle_restart_mcu+0x6e>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <handle_restart_mcu+0x88>)
 80033f2:	4a08      	ldr	r2, [pc, #32]	@ (8003414 <handle_restart_mcu+0x84>)
 80033f4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f014 fef7 	bl	80181ec <mg_http_reply>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	0802f578 	.word	0x0802f578
 800340c:	08005d6f 	.word	0x08005d6f
 8003410:	0802fa94 	.word	0x0802fa94
 8003414:	0802f508 	.word	0x0802f508
 8003418:	0802fac8 	.word	0x0802fac8

0800341c <handle_firmware_upload>:

static void handle_firmware_upload(struct mg_connection *c, struct mg_http_message *hm){
 800341c:	b580      	push	{r7, lr}
 800341e:	b0a6      	sub	sp, #152	@ 0x98
 8003420:	af02      	add	r7, sp, #8
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003426:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800342a:	4920      	ldr	r1, [pc, #128]	@ (80034ac <handle_firmware_upload+0x90>)
 800342c:	4618      	mov	r0, r3
 800342e:	f01e fb89 	bl	8021b44 <mg_str_s>
 8003432:	6839      	ldr	r1, [r7, #0]
 8003434:	2300      	movs	r3, #0
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800343c:	cb0c      	ldmia	r3, {r2, r3}
 800343e:	c903      	ldmia	r1, {r0, r1}
 8003440:	f01e fc53 	bl	8021cea <mg_match>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d024      	beq.n	8003494 <handle_firmware_upload+0x78>
		char file[MG_PATH_MAX];
		mg_http_get_var(&hm->query, "file", file, sizeof(file));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f103 0010 	add.w	r0, r3, #16
 8003450:	f107 0208 	add.w	r2, r7, #8
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <handle_firmware_upload+0x94>)
 8003458:	f013 fd3a 	bl	8016ed0 <mg_http_get_var>
		if(strcmp(file, FIRMWARE_FILE_NAME) == 0){
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	4914      	ldr	r1, [pc, #80]	@ (80034b4 <handle_firmware_upload+0x98>)
 8003462:	4618      	mov	r0, r3
 8003464:	f7fc febc 	bl	80001e0 <strcmp>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d108      	bne.n	8003480 <handle_firmware_upload+0x64>
			mg_http_upload(c, hm, &mg_fs_lfs, "/firmware", FIRMWARE_FILE_MAX_SIZE);
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <handle_firmware_upload+0x9c>)
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4b12      	ldr	r3, [pc, #72]	@ (80034bc <handle_firmware_upload+0xa0>)
 8003474:	4a12      	ldr	r2, [pc, #72]	@ (80034c0 <handle_firmware_upload+0xa4>)
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f016 f873 	bl	8019564 <mg_http_upload>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 800347e:	e010      	b.n	80034a2 <handle_firmware_upload+0x86>
			mg_http_reply(c, 400, headers, //TODO delete for release,
 8003480:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <handle_firmware_upload+0x98>)
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4b0f      	ldr	r3, [pc, #60]	@ (80034c4 <handle_firmware_upload+0xa8>)
 8003486:	4a10      	ldr	r2, [pc, #64]	@ (80034c8 <handle_firmware_upload+0xac>)
 8003488:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f014 fead 	bl	80181ec <mg_http_reply>
}
 8003492:	e006      	b.n	80034a2 <handle_firmware_upload+0x86>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003494:	4b0d      	ldr	r3, [pc, #52]	@ (80034cc <handle_firmware_upload+0xb0>)
 8003496:	4a0c      	ldr	r2, [pc, #48]	@ (80034c8 <handle_firmware_upload+0xac>)
 8003498:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f014 fea5 	bl	80181ec <mg_http_reply>
}
 80034a2:	bf00      	nop
 80034a4:	3790      	adds	r7, #144	@ 0x90
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	0802f578 	.word	0x0802f578
 80034b0:	0802fb18 	.word	0x0802fb18
 80034b4:	0802fb20 	.word	0x0802fb20
 80034b8:	00030d40 	.word	0x00030d40
 80034bc:	0802fb30 	.word	0x0802fb30
 80034c0:	2000000c 	.word	0x2000000c
 80034c4:	0802fb3c 	.word	0x0802fb3c
 80034c8:	0802f508 	.word	0x0802f508
 80034cc:	0802fac8 	.word	0x0802fac8

080034d0 <handle_firmware_md5>:

static void handle_firmware_md5(struct mg_connection *c, struct mg_http_message *hm){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	491d      	ldr	r1, [pc, #116]	@ (8003554 <handle_firmware_md5+0x84>)
 80034e0:	4618      	mov	r0, r3
 80034e2:	f01e fb2f 	bl	8021b44 <mg_str_s>
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	2300      	movs	r3, #0
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	f107 030c 	add.w	r3, r7, #12
 80034f0:	cb0c      	ldmia	r3, {r2, r3}
 80034f2:	c903      	ldmia	r1, {r0, r1}
 80034f4:	f01e fbf9 	bl	8021cea <mg_match>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01f      	beq.n	800353e <handle_firmware_md5+0x6e>
		char * md5_str = calloc(MD5_STR_LEN, sizeof(char));
 80034fe:	2101      	movs	r1, #1
 8003500:	2021      	movs	r0, #33	@ 0x21
 8003502:	f7ff fa10 	bl	8002926 <mg_calloc>
 8003506:	6178      	str	r0, [r7, #20]
		if(calc_file_md5sum("/firmware/firmware.bin", md5_str) == 0){
 8003508:	6979      	ldr	r1, [r7, #20]
 800350a:	4813      	ldr	r0, [pc, #76]	@ (8003558 <handle_firmware_md5+0x88>)
 800350c:	f7ff fa56 	bl	80029bc <calc_file_md5sum>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <handle_firmware_md5+0x58>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <handle_firmware_md5+0x8c>)
 800351c:	4a10      	ldr	r2, [pc, #64]	@ (8003560 <handle_firmware_md5+0x90>)
 800351e:	21c8      	movs	r1, #200	@ 0xc8
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f014 fe63 	bl	80181ec <mg_http_reply>
 8003526:	e006      	b.n	8003536 <handle_firmware_md5+0x66>
						"{\"status\":\"success\",\"md5\":\" %s\"}\r\n", md5_str);
		}else{
			mg_http_reply(c, 404, headers, //TODO delete for release,
 8003528:	4b0e      	ldr	r3, [pc, #56]	@ (8003564 <handle_firmware_md5+0x94>)
 800352a:	4a0d      	ldr	r2, [pc, #52]	@ (8003560 <handle_firmware_md5+0x90>)
 800352c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f014 fe5b 	bl	80181ec <mg_http_reply>
							"{\"status\":\"error\",\"message\":\"Firmware update file not found\"}\r\n");
		}

		free(md5_str);
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f009 f8c6 	bl	800c6c8 <vPortFree>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET method\"}\r\n");
	}
}
 800353c:	e006      	b.n	800354c <handle_firmware_md5+0x7c>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <handle_firmware_md5+0x98>)
 8003540:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <handle_firmware_md5+0x90>)
 8003542:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f014 fe50 	bl	80181ec <mg_http_reply>
}
 800354c:	bf00      	nop
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	0802f4d0 	.word	0x0802f4d0
 8003558:	0802fb88 	.word	0x0802fb88
 800355c:	0802fba0 	.word	0x0802fba0
 8003560:	0802f508 	.word	0x0802f508
 8003564:	0802fbc4 	.word	0x0802fbc4
 8003568:	0802fc04 	.word	0x0802fc04

0800356c <handle_firmware_activate>:

static void handle_firmware_activate(struct mg_connection *c, struct mg_http_message *hm){
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	492e      	ldr	r1, [pc, #184]	@ (8003634 <handle_firmware_activate+0xc8>)
 800357c:	4618      	mov	r0, r3
 800357e:	f01e fae1 	bl	8021b44 <mg_str_s>
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	cb0c      	ldmia	r3, {r2, r3}
 800358e:	c903      	ldmia	r1, {r0, r1}
 8003590:	f01e fbab 	bl	8021cea <mg_match>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d017      	beq.n	80035ca <handle_firmware_activate+0x5e>
		size_t  size;

		if (mg_fs_lfs.st("/firmware.bin", &size, NULL)){ //Check if file exist
 800359a:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <handle_firmware_activate+0xcc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f107 010c 	add.w	r1, r7, #12
 80035a2:	2200      	movs	r2, #0
 80035a4:	4825      	ldr	r0, [pc, #148]	@ (800363c <handle_firmware_activate+0xd0>)
 80035a6:	4798      	blx	r3
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d006      	beq.n	80035bc <handle_firmware_activate+0x50>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80035ae:	4b24      	ldr	r3, [pc, #144]	@ (8003640 <handle_firmware_activate+0xd4>)
 80035b0:	4a24      	ldr	r2, [pc, #144]	@ (8003644 <handle_firmware_activate+0xd8>)
 80035b2:	21c8      	movs	r1, #200	@ 0xc8
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f014 fe19 	bl	80181ec <mg_http_reply>
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");

	}
}
 80035ba:	e036      	b.n	800362a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80035bc:	4b22      	ldr	r3, [pc, #136]	@ (8003648 <handle_firmware_activate+0xdc>)
 80035be:	4a21      	ldr	r2, [pc, #132]	@ (8003644 <handle_firmware_activate+0xd8>)
 80035c0:	21c8      	movs	r1, #200	@ 0xc8
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f014 fe12 	bl	80181ec <mg_http_reply>
}
 80035c8:	e02f      	b.n	800362a <handle_firmware_activate+0xbe>
	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 80035ca:	f107 0318 	add.w	r3, r7, #24
 80035ce:	491f      	ldr	r1, [pc, #124]	@ (800364c <handle_firmware_activate+0xe0>)
 80035d0:	4618      	mov	r0, r3
 80035d2:	f01e fab7 	bl	8021b44 <mg_str_s>
 80035d6:	6839      	ldr	r1, [r7, #0]
 80035d8:	2300      	movs	r3, #0
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	f107 0318 	add.w	r3, r7, #24
 80035e0:	cb0c      	ldmia	r3, {r2, r3}
 80035e2:	c903      	ldmia	r1, {r0, r1}
 80035e4:	f01e fb81 	bl	8021cea <mg_match>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <handle_firmware_activate+0xb0>
	    if (mg_fs_lfs.mv("/firmware/firmware.bin", "/firmware.bin")){
 80035ee:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <handle_firmware_activate+0xcc>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4912      	ldr	r1, [pc, #72]	@ (800363c <handle_firmware_activate+0xd0>)
 80035f4:	4816      	ldr	r0, [pc, #88]	@ (8003650 <handle_firmware_activate+0xe4>)
 80035f6:	4798      	blx	r3
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d006      	beq.n	800360c <handle_firmware_activate+0xa0>
			mg_http_reply(c, 200, headers, //TODO delete for release,
 80035fe:	4b10      	ldr	r3, [pc, #64]	@ (8003640 <handle_firmware_activate+0xd4>)
 8003600:	4a10      	ldr	r2, [pc, #64]	@ (8003644 <handle_firmware_activate+0xd8>)
 8003602:	21c8      	movs	r1, #200	@ 0xc8
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f014 fdf1 	bl	80181ec <mg_http_reply>
}
 800360a:	e00e      	b.n	800362a <handle_firmware_activate+0xbe>
			mg_http_reply(c, 500, headers, //TODO delete for release,
 800360c:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <handle_firmware_activate+0xe8>)
 800360e:	4a0d      	ldr	r2, [pc, #52]	@ (8003644 <handle_firmware_activate+0xd8>)
 8003610:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f014 fde9 	bl	80181ec <mg_http_reply>
}
 800361a:	e006      	b.n	800362a <handle_firmware_activate+0xbe>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800361c:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <handle_firmware_activate+0xec>)
 800361e:	4a09      	ldr	r2, [pc, #36]	@ (8003644 <handle_firmware_activate+0xd8>)
 8003620:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f014 fde1 	bl	80181ec <mg_http_reply>
}
 800362a:	bf00      	nop
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	0802f4d0 	.word	0x0802f4d0
 8003638:	2000000c 	.word	0x2000000c
 800363c:	0802fc54 	.word	0x0802fc54
 8003640:	0802fc64 	.word	0x0802fc64
 8003644:	0802f508 	.word	0x0802f508
 8003648:	0802fc9c 	.word	0x0802fc9c
 800364c:	0802f578 	.word	0x0802f578
 8003650:	0802fb88 	.word	0x0802fb88
 8003654:	0802fcd8 	.word	0x0802fcd8
 8003658:	0802fd1c 	.word	0x0802fd1c

0800365c <handle_firmware_deactivate>:

static void handle_firmware_deactivate(struct mg_connection *c, struct mg_http_message *hm){
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003666:	f107 0308 	add.w	r3, r7, #8
 800366a:	4918      	ldr	r1, [pc, #96]	@ (80036cc <handle_firmware_deactivate+0x70>)
 800366c:	4618      	mov	r0, r3
 800366e:	f01e fa69 	bl	8021b44 <mg_str_s>
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	f107 0308 	add.w	r3, r7, #8
 800367c:	cb0c      	ldmia	r3, {r2, r3}
 800367e:	c903      	ldmia	r1, {r0, r1}
 8003680:	f01e fb33 	bl	8021cea <mg_match>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d014      	beq.n	80036b4 <handle_firmware_deactivate+0x58>
		if (mg_fs_lfs.rm("/firmware.bin")){ //if firmware delete saccess
 800368a:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <handle_firmware_deactivate+0x74>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4811      	ldr	r0, [pc, #68]	@ (80036d4 <handle_firmware_deactivate+0x78>)
 8003690:	4798      	blx	r3
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d006      	beq.n	80036a6 <handle_firmware_deactivate+0x4a>

			mg_http_reply(c, 200, headers, //TODO delete for release,
 8003698:	4b0f      	ldr	r3, [pc, #60]	@ (80036d8 <handle_firmware_deactivate+0x7c>)
 800369a:	4a10      	ldr	r2, [pc, #64]	@ (80036dc <handle_firmware_deactivate+0x80>)
 800369c:	21c8      	movs	r1, #200	@ 0xc8
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f014 fda4 	bl	80181ec <mg_http_reply>
				}
	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
	}
}
 80036a4:	e00d      	b.n	80036c2 <handle_firmware_deactivate+0x66>
					mg_http_reply(c, 200, headers, //TODO delete for release,
 80036a6:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <handle_firmware_deactivate+0x84>)
 80036a8:	4a0c      	ldr	r2, [pc, #48]	@ (80036dc <handle_firmware_deactivate+0x80>)
 80036aa:	21c8      	movs	r1, #200	@ 0xc8
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f014 fd9d 	bl	80181ec <mg_http_reply>
}
 80036b2:	e006      	b.n	80036c2 <handle_firmware_deactivate+0x66>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <handle_firmware_deactivate+0x88>)
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <handle_firmware_deactivate+0x80>)
 80036b8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f014 fd95 	bl	80181ec <mg_http_reply>
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	0802f578 	.word	0x0802f578
 80036d0:	2000000c 	.word	0x2000000c
 80036d4:	0802fc54 	.word	0x0802fc54
 80036d8:	0802fd74 	.word	0x0802fd74
 80036dc:	0802f508 	.word	0x0802f508
 80036e0:	0802fdb0 	.word	0x0802fdb0
 80036e4:	0802fac8 	.word	0x0802fac8

080036e8 <handle_web_files_remove>:

static void handle_web_files_remove(struct mg_connection *c, struct mg_http_message *hm){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]

	if (mg_match(hm->method, mg_str("POST"), NULL)){
 80036f2:	f107 0308 	add.w	r3, r7, #8
 80036f6:	4915      	ldr	r1, [pc, #84]	@ (800374c <handle_web_files_remove+0x64>)
 80036f8:	4618      	mov	r0, r3
 80036fa:	f01e fa23 	bl	8021b44 <mg_str_s>
 80036fe:	6839      	ldr	r1, [r7, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	cb0c      	ldmia	r3, {r2, r3}
 800370a:	c903      	ldmia	r1, {r0, r1}
 800370c:	f01e faed 	bl	8021cea <mg_match>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00e      	beq.n	8003734 <handle_web_files_remove+0x4c>
			mg_fs_lfs.rm("/web");
 8003716:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <handle_web_files_remove+0x68>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	480e      	ldr	r0, [pc, #56]	@ (8003754 <handle_web_files_remove+0x6c>)
 800371c:	4798      	blx	r3
	        mg_fs_lfs.mkd("/web");
 800371e:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <handle_web_files_remove+0x68>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	480c      	ldr	r0, [pc, #48]	@ (8003754 <handle_web_files_remove+0x6c>)
 8003724:	4798      	blx	r3
	        mg_http_reply(c, 200, headers, //TODO delete for release,
 8003726:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <handle_web_files_remove+0x70>)
 8003728:	4a0c      	ldr	r2, [pc, #48]	@ (800375c <handle_web_files_remove+0x74>)
 800372a:	21c8      	movs	r1, #200	@ 0xc8
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f014 fd5d 	bl	80181ec <mg_http_reply>
			    "{\"status\":\"success\",\"message\":\"All web interface files are deleted\"}\r\n");
    }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
    }
}
 8003732:	e006      	b.n	8003742 <handle_web_files_remove+0x5a>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003734:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <handle_web_files_remove+0x78>)
 8003736:	4a09      	ldr	r2, [pc, #36]	@ (800375c <handle_web_files_remove+0x74>)
 8003738:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f014 fd55 	bl	80181ec <mg_http_reply>
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	0802f578 	.word	0x0802f578
 8003750:	2000000c 	.word	0x2000000c
 8003754:	0802fdf4 	.word	0x0802fdf4
 8003758:	0802fdfc 	.word	0x0802fdfc
 800375c:	0802f508 	.word	0x0802f508
 8003760:	0802fac8 	.word	0x0802fac8

08003764 <handle_fs_mkdir>:

// Функция для создания папки
static void handle_fs_mkdir(struct mg_connection *c, struct mg_http_message *hm) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b0c6      	sub	sp, #280	@ 0x118
 8003768:	af02      	add	r7, sp, #8
 800376a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800376e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003772:	6018      	str	r0, [r3, #0]
 8003774:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003778:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800377c:	6019      	str	r1, [r3, #0]
  char name[123];
  char path[MG_PATH_MAX];

  if (mg_match(hm->method, mg_str("POST"), NULL)){
 800377e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003782:	4934      	ldr	r1, [pc, #208]	@ (8003854 <handle_fs_mkdir+0xf0>)
 8003784:	4618      	mov	r0, r3
 8003786:	f01e f9dd 	bl	8021b44 <mg_str_s>
 800378a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800378e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800379c:	cb0c      	ldmia	r3, {r2, r3}
 800379e:	c903      	ldmia	r1, {r0, r1}
 80037a0:	f01e faa3 	bl	8021cea <mg_match>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d043      	beq.n	8003832 <handle_fs_mkdir+0xce>
			// Получаем имя папки из параметра запроса
	  if (mg_http_get_var(&hm->body, "name", name, sizeof(name)) > 0) {
 80037aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037ae:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f503 7000 	add.w	r0, r3, #512	@ 0x200
 80037b8:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80037bc:	237b      	movs	r3, #123	@ 0x7b
 80037be:	4926      	ldr	r1, [pc, #152]	@ (8003858 <handle_fs_mkdir+0xf4>)
 80037c0:	f013 fb86 	bl	8016ed0 <mg_http_get_var>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	dd27      	ble.n	800381a <handle_fs_mkdir+0xb6>
		// Формируем полный путь
		snprintf(path, sizeof(path), "/web/%s", name);
 80037ca:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80037ce:	f107 000c 	add.w	r0, r7, #12
 80037d2:	4a22      	ldr	r2, [pc, #136]	@ (800385c <handle_fs_mkdir+0xf8>)
 80037d4:	2180      	movs	r1, #128	@ 0x80
 80037d6:	f021 fd91 	bl	80252fc <snprintf>

		// Создаем папку
		if (mg_fs_lfs.mkd(path)) {
 80037da:	4b21      	ldr	r3, [pc, #132]	@ (8003860 <handle_fs_mkdir+0xfc>)
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037de:	f107 020c 	add.w	r2, r7, #12
 80037e2:	4610      	mov	r0, r2
 80037e4:	4798      	blx	r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00a      	beq.n	8003802 <handle_fs_mkdir+0x9e>
		  // Если создание успешно, отправляем положительный ответ
		  mg_http_reply(c, 200, headers, //TODO delete for release,
 80037ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80037f0:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 80037f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <handle_fs_mkdir+0x100>)
 80037f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <handle_fs_mkdir+0x104>)
 80037f8:	21c8      	movs	r1, #200	@ 0xc8
 80037fa:	6800      	ldr	r0, [r0, #0]
 80037fc:	f014 fcf6 	bl	80181ec <mg_http_reply>
	  }
  }else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only POST method\"}\r\n");
  }
}
 8003800:	e022      	b.n	8003848 <handle_fs_mkdir+0xe4>
		  mg_http_reply(c, 500, headers, //TODO delete for release,
 8003802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003806:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800380a:	4b18      	ldr	r3, [pc, #96]	@ (800386c <handle_fs_mkdir+0x108>)
 800380c:	4a16      	ldr	r2, [pc, #88]	@ (8003868 <handle_fs_mkdir+0x104>)
 800380e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003812:	6800      	ldr	r0, [r0, #0]
 8003814:	f014 fcea 	bl	80181ec <mg_http_reply>
}
 8003818:	e016      	b.n	8003848 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 800381a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800381e:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8003822:	4b13      	ldr	r3, [pc, #76]	@ (8003870 <handle_fs_mkdir+0x10c>)
 8003824:	4a10      	ldr	r2, [pc, #64]	@ (8003868 <handle_fs_mkdir+0x104>)
 8003826:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800382a:	6800      	ldr	r0, [r0, #0]
 800382c:	f014 fcde 	bl	80181ec <mg_http_reply>
}
 8003830:	e00a      	b.n	8003848 <handle_fs_mkdir+0xe4>
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003832:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003836:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 800383a:	4b0e      	ldr	r3, [pc, #56]	@ (8003874 <handle_fs_mkdir+0x110>)
 800383c:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <handle_fs_mkdir+0x104>)
 800383e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	f014 fcd2 	bl	80181ec <mg_http_reply>
}
 8003848:	bf00      	nop
 800384a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	0802f578 	.word	0x0802f578
 8003858:	0802fe44 	.word	0x0802fe44
 800385c:	0802fe4c 	.word	0x0802fe4c
 8003860:	2000000c 	.word	0x2000000c
 8003864:	0802fe54 	.word	0x0802fe54
 8003868:	0802f508 	.word	0x0802f508
 800386c:	0802fe88 	.word	0x0802fe88
 8003870:	0802fec4 	.word	0x0802fec4
 8003874:	0802fac8 	.word	0x0802fac8

08003878 <handle_fs_get_log>:

// function for show logging
// function for show logging
static void handle_fs_get_log(struct mg_connection *c, struct mg_http_message *hm, int number){
 8003878:	b580      	push	{r7, lr}
 800387a:	b090      	sub	sp, #64	@ 0x40
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]

	if (mg_match(hm->method, mg_str("GET"), NULL)){
 8003884:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003888:	492c      	ldr	r1, [pc, #176]	@ (800393c <handle_fs_get_log+0xc4>)
 800388a:	4618      	mov	r0, r3
 800388c:	f01e f95a 	bl	8021b44 <mg_str_s>
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	2300      	movs	r3, #0
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800389a:	cb0c      	ldmia	r3, {r2, r3}
 800389c:	c903      	ldmia	r1, {r0, r1}
 800389e:	f01e fa24 	bl	8021cea <mg_match>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d02b      	beq.n	8003900 <handle_fs_get_log+0x88>

		struct mg_http_serve_opts opts = {
 80038a8:	f107 0310 	add.w	r3, r7, #16
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
 80038b8:	615a      	str	r2, [r3, #20]
 80038ba:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <handle_fs_get_log+0xc8>)
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <handle_fs_get_log+0xcc>)
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
			.root_dir = "/log",
			.fs = &mg_fs_lfs
		};

		switch (number) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <handle_fs_get_log+0x58>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d008      	beq.n	80038e0 <handle_fs_get_log+0x68>
 80038ce:	e00f      	b.n	80038f0 <handle_fs_get_log+0x78>
			case 0:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 80038d0:	f107 0310 	add.w	r3, r7, #16
 80038d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <handle_fs_get_log+0xd0>)
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f014 fe7b 	bl	80185d4 <mg_http_serve_file>
				break;
 80038de:	e029      	b.n	8003934 <handle_fs_get_log+0xbc>
			case 1:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION_OLD, &opts);
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	4a19      	ldr	r2, [pc, #100]	@ (800394c <handle_fs_get_log+0xd4>)
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f014 fe73 	bl	80185d4 <mg_http_serve_file>
				break;
 80038ee:	e021      	b.n	8003934 <handle_fs_get_log+0xbc>
			default:
				mg_http_serve_file(c, hm, LOG_FILE_LOCATION, &opts);
 80038f0:	f107 0310 	add.w	r3, r7, #16
 80038f4:	4a14      	ldr	r2, [pc, #80]	@ (8003948 <handle_fs_get_log+0xd0>)
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f014 fe6b 	bl	80185d4 <mg_http_serve_file>
				break;
 80038fe:	e019      	b.n	8003934 <handle_fs_get_log+0xbc>
		}


	}else if (mg_match(hm->method, mg_str("POST"), NULL)){
 8003900:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003904:	4912      	ldr	r1, [pc, #72]	@ (8003950 <handle_fs_get_log+0xd8>)
 8003906:	4618      	mov	r0, r3
 8003908:	f01e f91c 	bl	8021b44 <mg_str_s>
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	2300      	movs	r3, #0
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003916:	cb0c      	ldmia	r3, {r2, r3}
 8003918:	c903      	ldmia	r1, {r0, r1}
 800391a:	f01e f9e6 	bl	8021cea <mg_match>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <handle_fs_get_log+0xbc>

	}else{
		mg_http_reply(c, 400, headers, //TODO delete for release,
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <handle_fs_get_log+0xdc>)
 8003926:	4a0c      	ldr	r2, [pc, #48]	@ (8003958 <handle_fs_get_log+0xe0>)
 8003928:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f014 fc5d 	bl	80181ec <mg_http_reply>
						"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}
}
 8003932:	e7ff      	b.n	8003934 <handle_fs_get_log+0xbc>
 8003934:	bf00      	nop
 8003936:	3738      	adds	r7, #56	@ 0x38
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	0802f4d0 	.word	0x0802f4d0
 8003940:	0802ff00 	.word	0x0802ff00
 8003944:	2000000c 	.word	0x2000000c
 8003948:	0802ff08 	.word	0x0802ff08
 800394c:	0802ff18 	.word	0x0802ff18
 8003950:	0802f578 	.word	0x0802f578
 8003954:	0802fd1c 	.word	0x0802fd1c
 8003958:	0802f508 	.word	0x0802f508

0800395c <dashboard>:

static void dashboard(struct mg_connection *c, int ev, void *ev_data) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b0ac      	sub	sp, #176	@ 0xb0
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b0b      	cmp	r3, #11
 800396c:	f040 81c0 	bne.w	8003cf0 <dashboard+0x394>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

        if (mg_match(hm->method, mg_str("OPTIONS"), NULL)) {
 8003976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800397a:	49b5      	ldr	r1, [pc, #724]	@ (8003c50 <dashboard+0x2f4>)
 800397c:	4618      	mov	r0, r3
 800397e:	f01e f8e1 	bl	8021b44 <mg_str_s>
 8003982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003986:	2300      	movs	r3, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800398e:	cb0c      	ldmia	r3, {r2, r3}
 8003990:	c903      	ldmia	r1, {r0, r1}
 8003992:	f01e f9aa 	bl	8021cea <mg_match>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <dashboard+0x48>
            	handle_OPTIONS_method(c);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fce5 	bl	800336c <handle_OPTIONS_method>
				.fs = &mg_fs_lfs
			};
			mg_http_serve_dir(c, ev_data, &opts);
		}
	}
}
 80039a2:	e1a5      	b.n	8003cf0 <dashboard+0x394>
        }else if (mg_match(hm->uri, mg_str("/api/ram/status"), NULL)) { // Get free and allocated RAM space
 80039a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039a8:	49aa      	ldr	r1, [pc, #680]	@ (8003c54 <dashboard+0x2f8>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	f01e f8ca 	bl	8021b44 <mg_str_s>
 80039b0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039b4:	2300      	movs	r3, #0
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80039bc:	cb0c      	ldmia	r3, {r2, r3}
 80039be:	3108      	adds	r1, #8
 80039c0:	c903      	ldmia	r1, {r0, r1}
 80039c2:	f01e f992 	bl	8021cea <mg_match>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <dashboard+0x78>
			handle_ram_status_get(c);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7fe ffc9 	bl	8002964 <handle_ram_status_get>
}
 80039d2:	e18d      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/io/status"), NULL)){
 80039d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039d8:	499f      	ldr	r1, [pc, #636]	@ (8003c58 <dashboard+0x2fc>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f01e f8b2 	bl	8021b44 <mg_str_s>
 80039e0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039e4:	2300      	movs	r3, #0
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80039ec:	cb0c      	ldmia	r3, {r2, r3}
 80039ee:	3108      	adds	r1, #8
 80039f0:	c903      	ldmia	r1, {r0, r1}
 80039f2:	f01e f97a 	bl	8021cea <mg_match>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <dashboard+0xac>
			handle_io_status_get(c, hm);
 80039fc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff f869 	bl	8002ad8 <handle_io_status_get>
}
 8003a06:	e173      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/mqtt/settings"), NULL)){
 8003a08:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003a0c:	4993      	ldr	r1, [pc, #588]	@ (8003c5c <dashboard+0x300>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f01e f898 	bl	8021b44 <mg_str_s>
 8003a14:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003a20:	cb0c      	ldmia	r3, {r2, r3}
 8003a22:	3108      	adds	r1, #8
 8003a24:	c903      	ldmia	r1, {r0, r1}
 8003a26:	f01e f960 	bl	8021cea <mg_match>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <dashboard+0xe0>
			handle_mqtt_conf(c, hm);
 8003a30:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7ff f92d 	bl	8002c94 <handle_mqtt_conf>
}
 8003a3a:	e159      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/status"), NULL)){
 8003a3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003a40:	4987      	ldr	r1, [pc, #540]	@ (8003c60 <dashboard+0x304>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	f01e f87e 	bl	8021b44 <mg_str_s>
 8003a48:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003a54:	cb0c      	ldmia	r3, {r2, r3}
 8003a56:	3108      	adds	r1, #8
 8003a58:	c903      	ldmia	r1, {r0, r1}
 8003a5a:	f01e f946 	bl	8021cea <mg_match>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <dashboard+0x114>
			handle_dev_status(c, hm);
 8003a64:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7ff fa93 	bl	8002f94 <handle_dev_status>
}
 8003a6e:	e13f      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log"), NULL)){
 8003a70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a74:	497b      	ldr	r1, [pc, #492]	@ (8003c64 <dashboard+0x308>)
 8003a76:	4618      	mov	r0, r3
 8003a78:	f01e f864 	bl	8021b44 <mg_str_s>
 8003a7c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a80:	2300      	movs	r3, #0
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a88:	cb0c      	ldmia	r3, {r2, r3}
 8003a8a:	3108      	adds	r1, #8
 8003a8c:	c903      	ldmia	r1, {r0, r1}
 8003a8e:	f01e f92c 	bl	8021cea <mg_match>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <dashboard+0x14a>
			handle_fs_get_log(c, hm, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7ff feea 	bl	8003878 <handle_fs_get_log>
}
 8003aa4:	e124      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/log_old"), NULL)){
 8003aa6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003aaa:	496f      	ldr	r1, [pc, #444]	@ (8003c68 <dashboard+0x30c>)
 8003aac:	4618      	mov	r0, r3
 8003aae:	f01e f849 	bl	8021b44 <mg_str_s>
 8003ab2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003abe:	cb0c      	ldmia	r3, {r2, r3}
 8003ac0:	3108      	adds	r1, #8
 8003ac2:	c903      	ldmia	r1, {r0, r1}
 8003ac4:	f01e f911 	bl	8021cea <mg_match>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <dashboard+0x180>
			handle_fs_get_log(c, hm, 1);
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff fecf 	bl	8003878 <handle_fs_get_log>
}
 8003ada:	e109      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/device/restart"), NULL)){
 8003adc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ae0:	4962      	ldr	r1, [pc, #392]	@ (8003c6c <dashboard+0x310>)
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f01e f82e 	bl	8021b44 <mg_str_s>
 8003ae8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003aec:	2300      	movs	r3, #0
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003af4:	cb0c      	ldmia	r3, {r2, r3}
 8003af6:	3108      	adds	r1, #8
 8003af8:	c903      	ldmia	r1, {r0, r1}
 8003afa:	f01e f8f6 	bl	8021cea <mg_match>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <dashboard+0x1b4>
			handle_restart_mcu(c, hm);
 8003b04:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff fc41 	bl	8003390 <handle_restart_mcu>
}
 8003b0e:	e0ef      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/upload"), NULL)){
 8003b10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b14:	4956      	ldr	r1, [pc, #344]	@ (8003c70 <dashboard+0x314>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f01e f814 	bl	8021b44 <mg_str_s>
 8003b1c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b20:	2300      	movs	r3, #0
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b28:	cb0c      	ldmia	r3, {r2, r3}
 8003b2a:	3108      	adds	r1, #8
 8003b2c:	c903      	ldmia	r1, {r0, r1}
 8003b2e:	f01e f8dc 	bl	8021cea <mg_match>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <dashboard+0x1e8>
			handle_firmware_upload(c, hm);
 8003b38:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fc6d 	bl	800341c <handle_firmware_upload>
}
 8003b42:	e0d5      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/md5"), NULL)){
 8003b44:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b48:	494a      	ldr	r1, [pc, #296]	@ (8003c74 <dashboard+0x318>)
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f01d fffa 	bl	8021b44 <mg_str_s>
 8003b50:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b54:	2300      	movs	r3, #0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b5c:	cb0c      	ldmia	r3, {r2, r3}
 8003b5e:	3108      	adds	r1, #8
 8003b60:	c903      	ldmia	r1, {r0, r1}
 8003b62:	f01e f8c2 	bl	8021cea <mg_match>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <dashboard+0x21c>
			handle_firmware_md5(c, hm);
 8003b6c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff fcad 	bl	80034d0 <handle_firmware_md5>
}
 8003b76:	e0bb      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/activate_and_reboot"), NULL)){
 8003b78:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b7c:	493e      	ldr	r1, [pc, #248]	@ (8003c78 <dashboard+0x31c>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f01d ffe0 	bl	8021b44 <mg_str_s>
 8003b84:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b90:	cb0c      	ldmia	r3, {r2, r3}
 8003b92:	3108      	adds	r1, #8
 8003b94:	c903      	ldmia	r1, {r0, r1}
 8003b96:	f01e f8a8 	bl	8021cea <mg_match>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <dashboard+0x250>
			handle_firmware_activate(c, hm);
 8003ba0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fce1 	bl	800356c <handle_firmware_activate>
}
 8003baa:	e0a1      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/firmware/deactivate"), NULL)){
 8003bac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003bb0:	4932      	ldr	r1, [pc, #200]	@ (8003c7c <dashboard+0x320>)
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f01d ffc6 	bl	8021b44 <mg_str_s>
 8003bb8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003bc4:	cb0c      	ldmia	r3, {r2, r3}
 8003bc6:	3108      	adds	r1, #8
 8003bc8:	c903      	ldmia	r1, {r0, r1}
 8003bca:	f01e f88e 	bl	8021cea <mg_match>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <dashboard+0x284>
			handle_firmware_deactivate(c, hm);
 8003bd4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff fd3f 	bl	800365c <handle_firmware_deactivate>
}
 8003bde:	e087      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/remove"), NULL)){
 8003be0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003be4:	4926      	ldr	r1, [pc, #152]	@ (8003c80 <dashboard+0x324>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f01d ffac 	bl	8021b44 <mg_str_s>
 8003bec:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8003bf8:	cb0c      	ldmia	r3, {r2, r3}
 8003bfa:	3108      	adds	r1, #8
 8003bfc:	c903      	ldmia	r1, {r0, r1}
 8003bfe:	f01e f874 	bl	8021cea <mg_match>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <dashboard+0x2b8>
			 handle_web_files_remove(c, hm);
 8003c08:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff fd6b 	bl	80036e8 <handle_web_files_remove>
}
 8003c12:	e06d      	b.n	8003cf0 <dashboard+0x394>
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/upload"), NULL)){
 8003c14:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c18:	491a      	ldr	r1, [pc, #104]	@ (8003c84 <dashboard+0x328>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f01d ff92 	bl	8021b44 <mg_str_s>
 8003c20:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c24:	2300      	movs	r3, #0
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c2c:	cb0c      	ldmia	r3, {r2, r3}
 8003c2e:	3108      	adds	r1, #8
 8003c30:	c903      	ldmia	r1, {r0, r1}
 8003c32:	f01e f85a 	bl	8021cea <mg_match>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02b      	beq.n	8003c94 <dashboard+0x338>
			 mg_http_upload(c, hm, &mg_fs_lfs, "/web", 1500000);
 8003c3c:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <dashboard+0x32c>)
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	4b12      	ldr	r3, [pc, #72]	@ (8003c8c <dashboard+0x330>)
 8003c42:	4a13      	ldr	r2, [pc, #76]	@ (8003c90 <dashboard+0x334>)
 8003c44:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f015 fc8b 	bl	8019564 <mg_http_upload>
}
 8003c4e:	e04f      	b.n	8003cf0 <dashboard+0x394>
 8003c50:	0802ff28 	.word	0x0802ff28
 8003c54:	0802ff30 	.word	0x0802ff30
 8003c58:	0802ff40 	.word	0x0802ff40
 8003c5c:	0802ff50 	.word	0x0802ff50
 8003c60:	0802ff64 	.word	0x0802ff64
 8003c64:	0802ff78 	.word	0x0802ff78
 8003c68:	0802ff88 	.word	0x0802ff88
 8003c6c:	0802ff9c 	.word	0x0802ff9c
 8003c70:	0802ffb0 	.word	0x0802ffb0
 8003c74:	0802ffc8 	.word	0x0802ffc8
 8003c78:	0802ffdc 	.word	0x0802ffdc
 8003c7c:	08030000 	.word	0x08030000
 8003c80:	0803001c 	.word	0x0803001c
 8003c84:	08030038 	.word	0x08030038
 8003c88:	0016e360 	.word	0x0016e360
 8003c8c:	0802fdf4 	.word	0x0802fdf4
 8003c90:	2000000c 	.word	0x2000000c
		}else if(mg_match(hm->uri, mg_str("/api/web_interface/mkdir"), NULL)){
 8003c94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003c98:	4917      	ldr	r1, [pc, #92]	@ (8003cf8 <dashboard+0x39c>)
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f01d ff52 	bl	8021b44 <mg_str_s>
 8003ca0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003cac:	cb0c      	ldmia	r3, {r2, r3}
 8003cae:	3108      	adds	r1, #8
 8003cb0:	c903      	ldmia	r1, {r0, r1}
 8003cb2:	f01e f81a 	bl	8021cea <mg_match>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <dashboard+0x36c>
			 handle_fs_mkdir(c, hm);
 8003cbc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7ff fd4f 	bl	8003764 <handle_fs_mkdir>
}
 8003cc6:	e013      	b.n	8003cf0 <dashboard+0x394>
			struct mg_http_serve_opts opts = {
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
 8003cd8:	615a      	str	r2, [r3, #20]
 8003cda:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <dashboard+0x3a0>)
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <dashboard+0x3a4>)
 8003ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
			mg_http_serve_dir(c, ev_data, &opts);
 8003ce2:	f107 0314 	add.w	r3, r7, #20
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f015 fb4c 	bl	8019388 <mg_http_serve_dir>
}
 8003cf0:	bf00      	nop
 8003cf2:	37a8      	adds	r7, #168	@ 0xa8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	08030054 	.word	0x08030054
 8003cfc:	0802fdf4 	.word	0x0802fdf4
 8003d00:	2000000c 	.word	0x2000000c

08003d04 <dash_hdl>:

void * dash_hdl (void){
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
	return &dashboard;
 8003d08:	4b02      	ldr	r3, [pc, #8]	@ (8003d14 <dash_hdl+0x10>)
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	0800395d 	.word	0x0800395d

08003d18 <reg_parameter_handler>:

// Реализация функции, которая принимает указатель на функцию чтения и записи параметров
void reg_parameter_handler(void (*func)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction)) {
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    r_w_parameter = func;
 8003d20:	4a04      	ldr	r2, [pc, #16]	@ (8003d34 <reg_parameter_handler+0x1c>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6013      	str	r3, [r2, #0]
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000b18 	.word	0x20000b18

08003d38 <_ZL9my_callocjj>:
#define calloc(a, b) my_calloc(a, b)
#define free(a) vPortFree(a)
#define malloc(a) pvPortMalloc(a)

// Re-route calloc/free to the FreeRTOS's functions, don't use stdlib
static inline void *my_calloc(size_t cnt, size_t size) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f008 fbee 	bl	800c52c <pvPortMalloc>
 8003d50:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <_ZL9my_callocjj+0x32>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	fb02 f303 	mul.w	r3, r2, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	2100      	movs	r1, #0
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f021 fff3 	bl	8025d50 <memset>
  return p;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>:
		{OUTPUT_SENSOR, 3}
    };

static void (*r_w_parameter)(void * parameter, sett_type_t parameter_type,  sett_direction_t direction) = NULL;

static void mqtt_send_registration_data(struct mg_connection * arg, const SensorInfo * sensors, const size_t sensor_count){
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b08d      	sub	sp, #52	@ 0x34
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6178      	str	r0, [r7, #20]
 8003d7c:	6139      	str	r1, [r7, #16]
 8003d7e:	60fa      	str	r2, [r7, #12]

	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, &arg->loc);
 8003d80:	4b3a      	ldr	r3, [pc, #232]	@ (8003e6c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3308      	adds	r3, #8
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	4b39      	ldr	r3, [pc, #228]	@ (8003e70 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xfc>)
 8003d8c:	4a39      	ldr	r2, [pc, #228]	@ (8003e74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x100>)
 8003d8e:	2128      	movs	r1, #40	@ 0x28
 8003d90:	f01d f9f0 	bl	8021174 <mg_snprintf>
	set_device_conf_ip(ip_addr_str, strlen(ip_addr_str));
 8003d94:	4b35      	ldr	r3, [pc, #212]	@ (8003e6c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d96:	681c      	ldr	r4, [r3, #0]
 8003d98:	4b34      	ldr	r3, [pc, #208]	@ (8003e6c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xf8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fa7f 	bl	80002a0 <strlen>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4619      	mov	r1, r3
 8003da6:	4620      	mov	r0, r4
 8003da8:	f000 fd26 	bl	80047f8 <set_device_conf_ip>


	for (size_t i = 0; i < sensor_count; i++) {
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db0:	e052      	b.n	8003e58 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0xe4>
	        int sensor_type = sensors[i].sensor_type;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4413      	add	r3, r2
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	623b      	str	r3, [r7, #32]
	        int sensor_number = sensors[i].sensor_number;
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	61fb      	str	r3, [r7, #28]
			get_config_topik_string(topik_buff, MQTT_TOPIK_MAX_LEN, sensor_type, sensor_number);
 8003dca:	4b2b      	ldr	r3, [pc, #172]	@ (8003e78 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2180      	movs	r1, #128	@ 0x80
 8003dd8:	f000 fd40 	bl	800485c <get_config_topik_string>

			get_config_payload_string(payload_buff, MQTT_PAYLOAD_MAX_LEN, sensor_type, sensor_number);
 8003ddc:	4b27      	ldr	r3, [pc, #156]	@ (8003e7c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003dec:	f000 fe10 	bl	8004a10 <get_config_payload_string>
			mqtt_opts.topic = mg_str(topik_buff);
 8003df0:	4b21      	ldr	r3, [pc, #132]	@ (8003e78 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4c22      	ldr	r4, [pc, #136]	@ (8003e80 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003df6:	463b      	mov	r3, r7
 8003df8:	4611      	mov	r1, r2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f01d fea2 	bl	8021b44 <mg_str_s>
 8003e00:	f104 0318 	add.w	r3, r4, #24
 8003e04:	463a      	mov	r2, r7
 8003e06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e0a:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload_buff);
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x108>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4c1b      	ldr	r4, [pc, #108]	@ (8003e80 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e14:	463b      	mov	r3, r7
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f01d fe93 	bl	8021b44 <mg_str_s>
 8003e1e:	f104 0320 	add.w	r3, r4, #32
 8003e22:	463a      	mov	r2, r7
 8003e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e28:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 1;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 1;
 8003e34:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003e3c:	4910      	ldr	r1, [pc, #64]	@ (8003e80 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x10c>)
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f018 fed2 	bl	801cbe8 <mg_mqtt_pub>

			logging(L_INFO, "Sending registration data to: %s", topik_buff);
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x104>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	490e      	ldr	r1, [pc, #56]	@ (8003e84 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x110>)
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f7fe f97d 	bl	800214c <logging>
	for (size_t i = 0; i < sensor_count; i++) {
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	3301      	adds	r3, #1
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d3a8      	bcc.n	8003db2 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj+0x3e>

	}
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	372c      	adds	r7, #44	@ 0x2c
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd90      	pop	{r4, r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000b7c 	.word	0x20000b7c
 8003e70:	0802135b 	.word	0x0802135b
 8003e74:	08030070 	.word	0x08030070
 8003e78:	20000b28 	.word	0x20000b28
 8003e7c:	20000b2c 	.word	0x20000b2c
 8003e80:	20000b38 	.word	0x20000b38
 8003e84:	08030074 	.word	0x08030074

08003e88 <_ZL19mqtt_send_io_statusP13mg_connectionb>:


static void mqtt_send_io_status(struct mg_connection * arg, bool force_update){
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b08d      	sub	sp, #52	@ 0x34
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	460b      	mov	r3, r1
 8003e92:	72fb      	strb	r3, [r7, #11]

	struct   DeviceStatus status;
	static struct DeviceStatus prev_status;
	uint8_t  i;
	char *   payload = NULL;
 8003e94:	2300      	movs	r3, #0
 8003e96:	623b      	str	r3, [r7, #32]
	char *   topik = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]

	r_w_parameter(status.inputs,  (sett_type_t)INPUT_SENSOR,  S_READ);
 8003e9c:	4b70      	ldr	r3, [pc, #448]	@ (8004060 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f107 0014 	add.w	r0, r7, #20
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4798      	blx	r3
	r_w_parameter(status.outputs, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8003eaa:	4b6d      	ldr	r3, [pc, #436]	@ (8004060 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1d8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f107 0214 	add.w	r2, r7, #20
 8003eb2:	1cd0      	adds	r0, r2, #3
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4798      	blx	r3

	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8003eba:	f107 0314 	add.w	r3, r7, #20
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	4968      	ldr	r1, [pc, #416]	@ (8004064 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f021 feb0 	bl	8025c28 <memcmp>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10e      	bne.n	8003eec <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	3303      	adds	r3, #3
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	4964      	ldr	r1, [pc, #400]	@ (8004068 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e0>)
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f021 fea5 	bl	8025c28 <memcmp>
 8003ede:	4603      	mov	r3, r0
	if (memcmp(status.inputs, prev_status.inputs, sizeof(inputs_state_t)) != 0 ||
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d103      	bne.n	8003eec <_ZL19mqtt_send_io_statusP13mg_connectionb+0x64>
	    memcmp(status.outputs, prev_status.outputs, sizeof(outputs_state_t)) != 0 || force_update) {
 8003ee4:	7afb      	ldrb	r3, [r7, #11]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80b5 	beq.w	8004056 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ce>
	    // Состояние изменилось, продолжаем
		memcpy(&prev_status, &status, sizeof(status));
 8003eec:	4b5d      	ldr	r3, [pc, #372]	@ (8004064 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1dc>)
 8003eee:	f107 0214 	add.w	r2, r7, #20
 8003ef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ef6:	6018      	str	r0, [r3, #0]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	8019      	strh	r1, [r3, #0]

		//logging(L_INFO, "Send io status data to MQTT server");

		payload = (char * )calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 8003efc:	2101      	movs	r1, #1
 8003efe:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003f02:	f7ff ff19 	bl	8003d38 <_ZL9my_callocjj>
 8003f06:	6238      	str	r0, [r7, #32]
		topik   = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8003f08:	2101      	movs	r1, #1
 8003f0a:	2080      	movs	r0, #128	@ 0x80
 8003f0c:	f7ff ff14 	bl	8003d38 <_ZL9my_callocjj>
 8003f10:	61f8      	str	r0, [r7, #28]

		for (i = 0; i < INPUTS_COUNT; i++){
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003f18:	e045      	b.n	8003fa6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x11e>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, INPUT_SENSOR, i+1, status.inputs[i]);
 8003f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f1e:	3301      	adds	r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f26:	3328      	adds	r3, #40	@ 0x28
 8003f28:	443b      	add	r3, r7
 8003f2a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	2201      	movs	r2, #1
 8003f34:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003f38:	6a38      	ldr	r0, [r7, #32]
 8003f3a:	f000 ffc7 	bl	8004ecc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, INPUT_SENSOR, i+1);
 8003f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f42:	3301      	adds	r3, #1
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2201      	movs	r2, #1
 8003f48:	2180      	movs	r1, #128	@ 0x80
 8003f4a:	69f8      	ldr	r0, [r7, #28]
 8003f4c:	f001 f82c 	bl	8004fa8 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8003f50:	4c46      	ldr	r4, [pc, #280]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f52:	463b      	mov	r3, r7
 8003f54:	69f9      	ldr	r1, [r7, #28]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f01d fdf4 	bl	8021b44 <mg_str_s>
 8003f5c:	f104 0318 	add.w	r3, r4, #24
 8003f60:	463a      	mov	r2, r7
 8003f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f66:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8003f6a:	4c40      	ldr	r4, [pc, #256]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	6a39      	ldr	r1, [r7, #32]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f01d fde7 	bl	8021b44 <mg_str_s>
 8003f76:	f104 0320 	add.w	r3, r4, #32
 8003f7a:	463a      	mov	r2, r7
 8003f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f80:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8003f84:	4b39      	ldr	r3, [pc, #228]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8003f8c:	4b37      	ldr	r3, [pc, #220]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8003f94:	4935      	ldr	r1, [pc, #212]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f018 fe26 	bl	801cbe8 <mg_mqtt_pub>
		for (i = 0; i < INPUTS_COUNT; i++){
 8003f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d9b5      	bls.n	8003f1a <_ZL19mqtt_send_io_statusP13mg_connectionb+0x92>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}

		for (i = 0; i < OUTPUTS_COUNT; i++){
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003fb4:	e045      	b.n	8004042 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1ba>
			gen_bin_sensor_status_payload_JSON(payload, MQTT_PAYLOAD_MAX_LEN, OUTPUT_SENSOR, i+1, status.outputs[i]);
 8003fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fba:	3301      	adds	r3, #1
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fc2:	3328      	adds	r3, #40	@ 0x28
 8003fc4:	443b      	add	r3, r7
 8003fc6:	f813 3c11 	ldrb.w	r3, [r3, #-17]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8003fd4:	6a38      	ldr	r0, [r7, #32]
 8003fd6:	f000 ff79 	bl	8004ecc <gen_bin_sensor_status_payload_JSON>
			generate_status_topik(topik,   MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, i+1);
 8003fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	2180      	movs	r1, #128	@ 0x80
 8003fe6:	69f8      	ldr	r0, [r7, #28]
 8003fe8:	f000 ffde 	bl	8004fa8 <generate_status_topik>
			mqtt_opts.topic = mg_str(topik);
 8003fec:	4c1f      	ldr	r4, [pc, #124]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8003fee:	463b      	mov	r3, r7
 8003ff0:	69f9      	ldr	r1, [r7, #28]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f01d fda6 	bl	8021b44 <mg_str_s>
 8003ff8:	f104 0318 	add.w	r3, r4, #24
 8003ffc:	463a      	mov	r2, r7
 8003ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004002:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.message = mg_str(payload);
 8004006:	4c19      	ldr	r4, [pc, #100]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8004008:	463b      	mov	r3, r7
 800400a:	6a39      	ldr	r1, [r7, #32]
 800400c:	4618      	mov	r0, r3
 800400e:	f01d fd99 	bl	8021b44 <mg_str_s>
 8004012:	f104 0320 	add.w	r3, r4, #32
 8004016:	463a      	mov	r2, r7
 8004018:	e892 0003 	ldmia.w	r2, {r0, r1}
 800401c:	e883 0003 	stmia.w	r3, {r0, r1}
			mqtt_opts.qos = 0;
 8004020:	4b12      	ldr	r3, [pc, #72]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.retain = 0;
 8004028:	4b10      	ldr	r3, [pc, #64]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 800402a:	2200      	movs	r2, #0
 800402c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			mg_mqtt_pub(arg, &mqtt_opts);
 8004030:	490e      	ldr	r1, [pc, #56]	@ (800406c <_ZL19mqtt_send_io_statusP13mg_connectionb+0x1e4>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f018 fdd8 	bl	801cbe8 <mg_mqtt_pub>
		for (i = 0; i < OUTPUTS_COUNT; i++){
 8004038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800403c:	3301      	adds	r3, #1
 800403e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004046:	2b02      	cmp	r3, #2
 8004048:	d9b5      	bls.n	8003fb6 <_ZL19mqtt_send_io_statusP13mg_connectionb+0x12e>
			//strcpy(payload, "\0");
			//strcpy(topik, "\0");
		}


		free(payload);
 800404a:	6a38      	ldr	r0, [r7, #32]
 800404c:	f008 fb3c 	bl	800c6c8 <vPortFree>
		free(topik);
 8004050:	69f8      	ldr	r0, [r7, #28]
 8004052:	f008 fb39 	bl	800c6c8 <vPortFree>
	}
}
 8004056:	bf00      	nop
 8004058:	372c      	adds	r7, #44	@ 0x2c
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}
 800405e:	bf00      	nop
 8004060:	20000b90 	.word	0x20000b90
 8004064:	20000b94 	.word	0x20000b94
 8004068:	20000b97 	.word	0x20000b97
 800406c:	20000b38 	.word	0x20000b38

08004070 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>:

static void mqtt_subscrabe_on_sw(struct mg_connection *conn, const SensorInfo * sensors, const size_t sensor_count){
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b089      	sub	sp, #36	@ 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6178      	str	r0, [r7, #20]
 8004078:	6139      	str	r1, [r7, #16]
 800407a:	60fa      	str	r2, [r7, #12]

	char * topik = NULL;
 800407c:	2300      	movs	r3, #0
 800407e:	61bb      	str	r3, [r7, #24]

	for (size_t i = 0; i < sensor_count; i++) {
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]
 8004084:	e036      	b.n	80040f4 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x84>
		if(sensors[i].sensor_type == OUTPUT_SENSOR){
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d12c      	bne.n	80040ee <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x7e>
			topik = (char * )calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 8004094:	2101      	movs	r1, #1
 8004096:	2080      	movs	r0, #128	@ 0x80
 8004098:	f7ff fe4e 	bl	8003d38 <_ZL9my_callocjj>
 800409c:	61b8      	str	r0, [r7, #24]
			generate_comand_topik_for_subscrabe(topik, MQTT_TOPIK_MAX_LEN, OUTPUT_SENSOR, sensors[i].sensor_number);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2202      	movs	r2, #2
 80040ac:	2180      	movs	r1, #128	@ 0x80
 80040ae:	69b8      	ldr	r0, [r7, #24]
 80040b0:	f000 ff50 	bl	8004f54 <generate_comand_topik_for_subscrabe>

			mqtt_opts.qos = 1;
 80040b4:	4b14      	ldr	r3, [pc, #80]	@ (8004108 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			mqtt_opts.topic = mg_str(topik);
 80040bc:	4c12      	ldr	r4, [pc, #72]	@ (8004108 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80040be:	463b      	mov	r3, r7
 80040c0:	69b9      	ldr	r1, [r7, #24]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f01d fd3e 	bl	8021b44 <mg_str_s>
 80040c8:	f104 0318 	add.w	r3, r4, #24
 80040cc:	463a      	mov	r2, r7
 80040ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040d2:	e883 0003 	stmia.w	r3, {r0, r1}
			mg_mqtt_sub(conn, &mqtt_opts);
 80040d6:	490c      	ldr	r1, [pc, #48]	@ (8004108 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x98>)
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	f018 fe53 	bl	801cd84 <mg_mqtt_sub>

			logging(L_INFO, "Subscribe on MQTT topik: %s", topik);
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	490a      	ldr	r1, [pc, #40]	@ (800410c <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x9c>)
 80040e2:	2001      	movs	r0, #1
 80040e4:	f7fe f832 	bl	800214c <logging>
			free(topik);
 80040e8:	69b8      	ldr	r0, [r7, #24]
 80040ea:	f008 faed 	bl	800c6c8 <vPortFree>
	for (size_t i = 0; i < sensor_count; i++) {
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	3301      	adds	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d3c4      	bcc.n	8004086 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj+0x16>
		}
	}
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3724      	adds	r7, #36	@ 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd90      	pop	{r4, r7, pc}
 8004106:	bf00      	nop
 8004108:	20000b38 	.word	0x20000b38
 800410c:	08030098 	.word	0x08030098

08004110 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>:

static void mqtt_subscrabe_recv_cmd_parce(mg_mqtt_message * mess){
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

	inputs_state_t  sw_r, sw_w;
	int relay_number = 0;  // Переменная для хранения номера реле
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
    //char *state = NULL;  // Строка для хранения состояния (ON/OFF)

    //Топик выглядит как "cedar_4022422E1436/switch0/set"
    const char *topic = mess->topic.buf;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61fb      	str	r3, [r7, #28]
    const char *message = mess->data.buf;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	61bb      	str	r3, [r7, #24]

    if(message == NULL || topic == NULL){
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10e      	bne.n	8004152 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x42>
    	MG_ERROR(("Error: topik or message id NULL.\n"));
 8004134:	4b7e      	ldr	r3, [pc, #504]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f340 80f5 	ble.w	8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
 800413e:	4b7d      	ldr	r3, [pc, #500]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8004140:	2292      	movs	r2, #146	@ 0x92
 8004142:	497d      	ldr	r1, [pc, #500]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004144:	2001      	movs	r0, #1
 8004146:	f016 fff9 	bl	801b13c <mg_log_prefix>
 800414a:	487c      	ldr	r0, [pc, #496]	@ (800433c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x22c>)
 800414c:	f017 f846 	bl	801b1dc <mg_log>
    	return;
 8004150:	e0ea      	b.n	8004328 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x218>
    }

    r_w_parameter(sw_r, (sett_type_t)OUTPUT_SENSOR, S_READ);
 8004152:	4b7b      	ldr	r3, [pc, #492]	@ (8004340 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f107 0010 	add.w	r0, r7, #16
 800415a:	2200      	movs	r2, #0
 800415c:	2102      	movs	r1, #2
 800415e:	4798      	blx	r3
    memcpy(sw_w, sw_r, sizeof(sw_r));
 8004160:	f107 030c 	add.w	r3, r7, #12
 8004164:	f107 0210 	add.w	r2, r7, #16
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	4611      	mov	r1, r2
 800416c:	8019      	strh	r1, [r3, #0]
 800416e:	3302      	adds	r3, #2
 8004170:	0c12      	lsrs	r2, r2, #16
 8004172:	701a      	strb	r2, [r3, #0]

    // Ищем "switch" в топике и затем извлекаем номер реле
    const char *switch_position = strstr(topic, "switch");
 8004174:	4973      	ldr	r1, [pc, #460]	@ (8004344 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x234>)
 8004176:	69f8      	ldr	r0, [r7, #28]
 8004178:	f021 fe6a 	bl	8025e50 <strstr>
 800417c:	6178      	str	r0, [r7, #20]

    if (switch_position != NULL) {
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80bd 	beq.w	8004300 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1f0>
    	// Извлекаем номер реле (например, "3" из "switch3")
    	if (sscanf(switch_position, "switch%d", &relay_number) == 1){
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	461a      	mov	r2, r3
 800418c:	496e      	ldr	r1, [pc, #440]	@ (8004348 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x238>)
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f021 fa3c 	bl	802560c <sscanf>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	bf0c      	ite	eq
 800419a:	2301      	moveq	r3, #1
 800419c:	2300      	movne	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 809b 	beq.w	80042dc <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1cc>
    		MG_INFO(("Getting relay number %d, from topik %s.\n", relay_number, topic));
 80041a6:	4b62      	ldr	r3, [pc, #392]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	dd0b      	ble.n	80041c6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xb6>
 80041ae:	4b61      	ldr	r3, [pc, #388]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80041b0:	229f      	movs	r2, #159	@ 0x9f
 80041b2:	4961      	ldr	r1, [pc, #388]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80041b4:	2002      	movs	r0, #2
 80041b6:	f016 ffc1 	bl	801b13c <mg_log_prefix>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	4619      	mov	r1, r3
 80041c0:	4862      	ldr	r0, [pc, #392]	@ (800434c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x23c>)
 80041c2:	f017 f80b 	bl	801b1dc <mg_log>

    		logging(L_INFO, "Getting relay number %d, from topik %s.", relay_number, topic);
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4961      	ldr	r1, [pc, #388]	@ (8004350 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x240>)
 80041cc:	2001      	movs	r0, #1
 80041ce:	f7fd ffbd 	bl	800214c <logging>

    		if(relay_number < 1 || relay_number > OUTPUTS_COUNT){
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	dd02      	ble.n	80041de <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xce>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	dd16      	ble.n	800420c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xfc>
    			MG_ERROR(("Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number));
 80041de:	4b54      	ldr	r3, [pc, #336]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	dd0b      	ble.n	80041fe <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0xee>
 80041e6:	4b53      	ldr	r3, [pc, #332]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80041e8:	22a4      	movs	r2, #164	@ 0xa4
 80041ea:	4953      	ldr	r1, [pc, #332]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80041ec:	2001      	movs	r0, #1
 80041ee:	f016 ffa5 	bl	801b13c <mg_log_prefix>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	461a      	mov	r2, r3
 80041f6:	2103      	movs	r1, #3
 80041f8:	4856      	ldr	r0, [pc, #344]	@ (8004354 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 80041fa:	f016 ffef 	bl	801b1dc <mg_log>

    			logging(L_ERR, "Error: invalid relay number. Relay number should be between 1 and %d. Got %d.\n", OUTPUTS_COUNT, relay_number);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2203      	movs	r2, #3
 8004202:	4954      	ldr	r1, [pc, #336]	@ (8004354 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x244>)
 8004204:	2003      	movs	r0, #3
 8004206:	f7fd ffa1 	bl	800214c <logging>

    			return;
 800420a:	e08e      	b.n	800432a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    		}

    		// Получаем состояние реле (ON или OFF) из данных сообщения
			if (mess->data.len == 2 && strncmp(message, "ON", 2) == 0) {
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d125      	bne.n	8004260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
 8004214:	2202      	movs	r2, #2
 8004216:	4950      	ldr	r1, [pc, #320]	@ (8004358 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x248>)
 8004218:	69b8      	ldr	r0, [r7, #24]
 800421a:	f021 fdce 	bl	8025dba <strncmp>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d11d      	bne.n	8004260 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x150>
				sw_w[relay_number-1] = 1;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	3b01      	subs	r3, #1
 8004228:	3320      	adds	r3, #32
 800422a:	443b      	add	r3, r7
 800422c:	2201      	movs	r2, #1
 800422e:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is ON.\n", relay_number));
 8004232:	4b3f      	ldr	r3, [pc, #252]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	dd0a      	ble.n	8004250 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x140>
 800423a:	4b3e      	ldr	r3, [pc, #248]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 800423c:	22ae      	movs	r2, #174	@ 0xae
 800423e:	493e      	ldr	r1, [pc, #248]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004240:	2002      	movs	r0, #2
 8004242:	f016 ff7b 	bl	801b13c <mg_log_prefix>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4619      	mov	r1, r3
 800424a:	4844      	ldr	r0, [pc, #272]	@ (800435c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x24c>)
 800424c:	f016 ffc6 	bl	801b1dc <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 8004250:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f107 000c 	add.w	r0, r7, #12
 8004258:	2201      	movs	r2, #1
 800425a:	2102      	movs	r1, #2
 800425c:	4798      	blx	r3
 800425e:	e064      	b.n	800432a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			} else if (mess->data.len == 3 && strncmp(message, "OFF", 3) == 0) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d125      	bne.n	80042b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
 8004268:	2203      	movs	r2, #3
 800426a:	493d      	ldr	r1, [pc, #244]	@ (8004360 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x250>)
 800426c:	69b8      	ldr	r0, [r7, #24]
 800426e:	f021 fda4 	bl	8025dba <strncmp>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d11d      	bne.n	80042b4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1a4>
				sw_w[relay_number-1] = 0;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	3b01      	subs	r3, #1
 800427c:	3320      	adds	r3, #32
 800427e:	443b      	add	r3, r7
 8004280:	2200      	movs	r2, #0
 8004282:	f803 2c14 	strb.w	r2, [r3, #-20]
				MG_INFO(("Relay %d is OFF.\n", relay_number));
 8004286:	4b2a      	ldr	r3, [pc, #168]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b01      	cmp	r3, #1
 800428c:	dd0a      	ble.n	80042a4 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x194>
 800428e:	4b29      	ldr	r3, [pc, #164]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 8004290:	22b2      	movs	r2, #178	@ 0xb2
 8004292:	4929      	ldr	r1, [pc, #164]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 8004294:	2002      	movs	r0, #2
 8004296:	f016 ff51 	bl	801b13c <mg_log_prefix>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4619      	mov	r1, r3
 800429e:	4831      	ldr	r0, [pc, #196]	@ (8004364 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x254>)
 80042a0:	f016 ff9c 	bl	801b1dc <mg_log>
				r_w_parameter(sw_w, (sett_type_t)OUTPUT_SENSOR, S_WRITE);
 80042a4:	4b26      	ldr	r3, [pc, #152]	@ (8004340 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x230>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f107 000c 	add.w	r0, r7, #12
 80042ac:	2201      	movs	r2, #1
 80042ae:	2102      	movs	r1, #2
 80042b0:	4798      	blx	r3
 80042b2:	e03a      	b.n	800432a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>

			}else{
				MG_ERROR(("Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message));
 80042b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dd09      	ble.n	80042d0 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1c0>
 80042bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80042be:	22b6      	movs	r2, #182	@ 0xb6
 80042c0:	491d      	ldr	r1, [pc, #116]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80042c2:	2001      	movs	r0, #1
 80042c4:	f016 ff3a 	bl	801b13c <mg_log_prefix>
 80042c8:	69b9      	ldr	r1, [r7, #24]
 80042ca:	4827      	ldr	r0, [pc, #156]	@ (8004368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80042cc:	f016 ff86 	bl	801b1dc <mg_log>
				logging(L_ERR, "Error: expected message \"ON\" or \"OFF\" but got message: %s \n", message);
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4925      	ldr	r1, [pc, #148]	@ (8004368 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x258>)
 80042d4:	2003      	movs	r0, #3
 80042d6:	f7fd ff39 	bl	800214c <logging>
 80042da:	e026      	b.n	800432a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
			}

    	}else{
    		MG_ERROR(("Error: relay number is not found, or incorrect format.\n"));
 80042dc:	4b14      	ldr	r3, [pc, #80]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dd08      	ble.n	80042f6 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x1e6>
 80042e4:	4b13      	ldr	r3, [pc, #76]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 80042e6:	22bb      	movs	r2, #187	@ 0xbb
 80042e8:	4913      	ldr	r1, [pc, #76]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 80042ea:	2001      	movs	r0, #1
 80042ec:	f016 ff26 	bl	801b13c <mg_log_prefix>
 80042f0:	481e      	ldr	r0, [pc, #120]	@ (800436c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x25c>)
 80042f2:	f016 ff73 	bl	801b1dc <mg_log>
			logging(L_ERR, "Error: relay number is not found, or incorrect format.");
 80042f6:	491e      	ldr	r1, [pc, #120]	@ (8004370 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x260>)
 80042f8:	2003      	movs	r0, #3
 80042fa:	f7fd ff27 	bl	800214c <logging>
 80042fe:	e014      	b.n	800432a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	}
    }else{
    	MG_ERROR(("Substring \"switch\" is not fount in topik %s. \n", topic));
 8004300:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x220>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	dd09      	ble.n	800431c <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x20c>
 8004308:	4b0a      	ldr	r3, [pc, #40]	@ (8004334 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x224>)
 800430a:	22bf      	movs	r2, #191	@ 0xbf
 800430c:	490a      	ldr	r1, [pc, #40]	@ (8004338 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x228>)
 800430e:	2001      	movs	r0, #1
 8004310:	f016 ff14 	bl	801b13c <mg_log_prefix>
 8004314:	69f9      	ldr	r1, [r7, #28]
 8004316:	4817      	ldr	r0, [pc, #92]	@ (8004374 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8004318:	f016 ff60 	bl	801b1dc <mg_log>
    	logging(L_ERR, "Substring \"switch\" is not fount in topik %s. \n", topic);
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	4915      	ldr	r1, [pc, #84]	@ (8004374 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x264>)
 8004320:	2003      	movs	r0, #3
 8004322:	f7fd ff13 	bl	800214c <logging>
 8004326:	e000      	b.n	800432a <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message+0x21a>
    	return;
 8004328:	bf00      	nop
    }
}
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000298 	.word	0x20000298
 8004334:	080300b4 	.word	0x080300b4
 8004338:	080300d4 	.word	0x080300d4
 800433c:	08030100 	.word	0x08030100
 8004340:	20000b90 	.word	0x20000b90
 8004344:	08030124 	.word	0x08030124
 8004348:	0803012c 	.word	0x0803012c
 800434c:	08030138 	.word	0x08030138
 8004350:	08030164 	.word	0x08030164
 8004354:	0803018c 	.word	0x0803018c
 8004358:	080301dc 	.word	0x080301dc
 800435c:	080301e0 	.word	0x080301e0
 8004360:	080301f4 	.word	0x080301f4
 8004364:	080301f8 	.word	0x080301f8
 8004368:	0803020c 	.word	0x0803020c
 800436c:	08030248 	.word	0x08030248
 8004370:	08030280 	.word	0x08030280
 8004374:	080302b8 	.word	0x080302b8

08004378 <_ZL39mqtt_pereodic_status_send_timer_handlerPv>:


static void mqtt_pereodic_status_send_timer_handler(void *arg){
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	if(is_registered){
 8004380:	4b06      	ldr	r3, [pc, #24]	@ (800439c <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x24>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x1c>
		mqtt_send_io_status(mqtt_conn, 1);
 8004388:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <_ZL39mqtt_pereodic_status_send_timer_handlerPv+0x28>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2101      	movs	r1, #1
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fd7a 	bl	8003e88 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000b8c 	.word	0x20000b8c
 80043a0:	20000b78 	.word	0x20000b78

080043a4 <_ZL18mqtt_event_handlerP13mg_connectioniPv>:

static void mqtt_event_handler(struct mg_connection *conn, int ev, void *ev_data){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	if (ev == MG_EV_MQTT_OPEN) {// MQTT connect is successful
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b11      	cmp	r3, #17
 80043b4:	d132      	bne.n	800441c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x78>
		MG_DEBUG(("MQTT_open_connection"));
 80043b6:	4b2d      	ldr	r3, [pc, #180]	@ (800446c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xc8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	dd08      	ble.n	80043d0 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x2c>
 80043be:	4b2c      	ldr	r3, [pc, #176]	@ (8004470 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xcc>)
 80043c0:	22cd      	movs	r2, #205	@ 0xcd
 80043c2:	492c      	ldr	r1, [pc, #176]	@ (8004474 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd0>)
 80043c4:	2003      	movs	r0, #3
 80043c6:	f016 feb9 	bl	801b13c <mg_log_prefix>
 80043ca:	482b      	ldr	r0, [pc, #172]	@ (8004478 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd4>)
 80043cc:	f016 ff06 	bl	801b1dc <mg_log>
		logging(L_INFO, "MQTT Open connection");
 80043d0:	492a      	ldr	r1, [pc, #168]	@ (800447c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xd8>)
 80043d2:	2001      	movs	r0, #1
 80043d4:	f7fd feba 	bl	800214c <logging>
		mqtt_conn = conn;
 80043d8:	4a29      	ldr	r2, [pc, #164]	@ (8004480 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6013      	str	r3, [r2, #0]
		if(!is_registered){
 80043de:	4b29      	ldr	r3, [pc, #164]	@ (8004484 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	f083 0301 	eor.w	r3, r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d03a      	beq.n	8004462 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
			mqtt_send_registration_data(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 80043ec:	4b24      	ldr	r3, [pc, #144]	@ (8004480 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2206      	movs	r2, #6
 80043f2:	4925      	ldr	r1, [pc, #148]	@ (8004488 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fcbd 	bl	8003d74 <_ZL27mqtt_send_registration_dataP13mg_connectionPK10SensorInfoj>
			mqtt_send_io_status(mqtt_conn, 1);
 80043fa:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fd41 	bl	8003e88 <_ZL19mqtt_send_io_statusP13mg_connectionb>
			mqtt_subscrabe_on_sw(mqtt_conn, sensors, sizeof(sensors)/sizeof(SensorInfo));
 8004406:	4b1e      	ldr	r3, [pc, #120]	@ (8004480 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2206      	movs	r2, #6
 800440c:	491e      	ldr	r1, [pc, #120]	@ (8004488 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe4>)
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fe2e 	bl	8004070 <_ZL20mqtt_subscrabe_on_swP13mg_connectionPK10SensorInfoj>
			is_registered = true;
 8004414:	4b1b      	ldr	r3, [pc, #108]	@ (8004484 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 8004416:	2201      	movs	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]
	}else if (ev == MG_EV_CLOSE){
		logging(L_INFO, "MQTT Close connection");
		mqtt_conn     = NULL;
		is_registered = false;
	}
}
 800441a:	e022      	b.n	8004462 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_MSG){
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d10f      	bne.n	8004442 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0x9e>
		logging(L_INFO, "Receive message from MQTT server");
 8004422:	491a      	ldr	r1, [pc, #104]	@ (800448c <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe8>)
 8004424:	2001      	movs	r0, #1
 8004426:	f7fd fe91 	bl	800214c <logging>
		 struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	617b      	str	r3, [r7, #20]
		 mqtt_subscrabe_recv_cmd_parce(mm);
 800442e:	6978      	ldr	r0, [r7, #20]
 8004430:	f7ff fe6e 	bl	8004110 <_ZL29mqtt_subscrabe_recv_cmd_parceP15mg_mqtt_message>
		 mqtt_send_io_status(mqtt_conn, 0);
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fd24 	bl	8003e88 <_ZL19mqtt_send_io_statusP13mg_connectionb>
}
 8004440:	e00f      	b.n	8004462 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_MQTT_CMD){
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b0f      	cmp	r3, #15
 8004446:	d00c      	beq.n	8004462 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
	}else if (ev == MG_EV_CLOSE){
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b09      	cmp	r3, #9
 800444c:	d109      	bne.n	8004462 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xbe>
		logging(L_INFO, "MQTT Close connection");
 800444e:	4910      	ldr	r1, [pc, #64]	@ (8004490 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xec>)
 8004450:	2001      	movs	r0, #1
 8004452:	f7fd fe7b 	bl	800214c <logging>
		mqtt_conn     = NULL;
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xdc>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
		is_registered = false;
 800445c:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <_ZL18mqtt_event_handlerP13mg_connectioniPv+0xe0>)
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
}
 8004462:	bf00      	nop
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000298 	.word	0x20000298
 8004470:	080302e8 	.word	0x080302e8
 8004474:	080300d4 	.word	0x080300d4
 8004478:	080302fc 	.word	0x080302fc
 800447c:	08030314 	.word	0x08030314
 8004480:	20000b78 	.word	0x20000b78
 8004484:	20000b8c 	.word	0x20000b8c
 8004488:	20000034 	.word	0x20000034
 800448c:	0803032c 	.word	0x0803032c
 8004490:	08030350 	.word	0x08030350

08004494 <_ZL18mqtt_timer_handlerPv>:

// Таймер для установления и поддержания соединения.
static void mqtt_timer_handler(void *arg){
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b087      	sub	sp, #28
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
	if (!mqtt_conn){
 800449c:	4b20      	ldr	r3, [pc, #128]	@ (8004520 <_ZL18mqtt_timer_handlerPv+0x8c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d136      	bne.n	8004512 <_ZL18mqtt_timer_handlerPv+0x7e>
		logging(L_INFO, "Try to connect to MQTT server");
 80044a4:	491f      	ldr	r1, [pc, #124]	@ (8004524 <_ZL18mqtt_timer_handlerPv+0x90>)
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7fd fe50 	bl	800214c <logging>
		memset(&mqtt_opts, 0, sizeof(mqtt_opts));
 80044ac:	2240      	movs	r2, #64	@ 0x40
 80044ae:	2100      	movs	r1, #0
 80044b0:	481d      	ldr	r0, [pc, #116]	@ (8004528 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044b2:	f021 fc4d 	bl	8025d50 <memset>
		mqtt_opts.user 		    = mg_str(mqtt_username);
 80044b6:	4b1d      	ldr	r3, [pc, #116]	@ (800452c <_ZL18mqtt_timer_handlerPv+0x98>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4c1b      	ldr	r4, [pc, #108]	@ (8004528 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044bc:	463b      	mov	r3, r7
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f01d fb3f 	bl	8021b44 <mg_str_s>
 80044c6:	4622      	mov	r2, r4
 80044c8:	463b      	mov	r3, r7
 80044ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044ce:	e882 0003 	stmia.w	r2, {r0, r1}
		mqtt_opts.pass		    = mg_str(mqtt_password);
 80044d2:	4b17      	ldr	r3, [pc, #92]	@ (8004530 <_ZL18mqtt_timer_handlerPv+0x9c>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4c14      	ldr	r4, [pc, #80]	@ (8004528 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044d8:	463b      	mov	r3, r7
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f01d fb31 	bl	8021b44 <mg_str_s>
 80044e2:	f104 0308 	add.w	r3, r4, #8
 80044e6:	463a      	mov	r2, r7
 80044e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ec:	e883 0003 	stmia.w	r3, {r0, r1}
		mqtt_opts.keepalive 	= 60;
 80044f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <_ZL18mqtt_timer_handlerPv+0x94>)
 80044f2:	223c      	movs	r2, #60	@ 0x3c
 80044f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
		mqtt_conn = mg_mqtt_connect(mgr, mqtt_broker_url, &mqtt_opts, mqtt_event_handler, NULL);
 80044f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <_ZL18mqtt_timer_handlerPv+0xa0>)
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004538 <_ZL18mqtt_timer_handlerPv+0xa4>)
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	2300      	movs	r3, #0
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <_ZL18mqtt_timer_handlerPv+0xa8>)
 8004504:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <_ZL18mqtt_timer_handlerPv+0x94>)
 8004506:	f018 ff17 	bl	801d338 <mg_mqtt_connect>
 800450a:	4603      	mov	r3, r0
 800450c:	4a04      	ldr	r2, [pc, #16]	@ (8004520 <_ZL18mqtt_timer_handlerPv+0x8c>)
 800450e:	6013      	str	r3, [r2, #0]
		//is_registered = true;
		//SEND REG DATA
	    //mqtt_send_registration_data(mqtt_conn);
	}

}//void * param, sett_type_t param_type,  sett_direction_t direction
 8004510:	e002      	b.n	8004518 <_ZL18mqtt_timer_handlerPv+0x84>
	}else if(mqtt_conn && is_registered){ //connection established and registered sensors
 8004512:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <_ZL18mqtt_timer_handlerPv+0x8c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
}//void * param, sett_type_t param_type,  sett_direction_t direction
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	20000b78 	.word	0x20000b78
 8004524:	08030368 	.word	0x08030368
 8004528:	20000b38 	.word	0x20000b38
 800452c:	20000b20 	.word	0x20000b20
 8004530:	20000b24 	.word	0x20000b24
 8004534:	20000b30 	.word	0x20000b30
 8004538:	20000b1c 	.word	0x20000b1c
 800453c:	080043a5 	.word	0x080043a5

08004540 <_ZL33mqtt_timer_handler_cher_io_statusPv>:

static void mqtt_timer_handler_cher_io_status(void *arg){
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	if(mqtt_conn && is_registered){
 8004548:	4b08      	ldr	r3, [pc, #32]	@ (800456c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
 8004550:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x30>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <_ZL33mqtt_timer_handler_cher_io_statusPv+0x24>
		mqtt_send_io_status(mqtt_conn, 0);
 8004558:	4b04      	ldr	r3, [pc, #16]	@ (800456c <_ZL33mqtt_timer_handler_cher_io_statusPv+0x2c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fc92 	bl	8003e88 <_ZL19mqtt_send_io_statusP13mg_connectionb>
	}
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000b78 	.word	0x20000b78
 8004570:	20000b8c 	.word	0x20000b8c

08004574 <get_mqtt_connection>:

// Getter для mqtt_conn
struct mg_connection* get_mqtt_connection(void){
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
    return mqtt_conn;
 8004578:	4b03      	ldr	r3, [pc, #12]	@ (8004588 <get_mqtt_connection+0x14>)
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000b78 	.word	0x20000b78

0800458c <mqtt_init>:


void mqtt_init(void *mgr_parameter, void * mif_parameter, void * broker_url, void *username, void *password, void (*fn)(void*, sett_type_t, sett_direction_t)){
 800458c:	b590      	push	{r4, r7, lr}
 800458e:	b08b      	sub	sp, #44	@ 0x2c
 8004590:	af04      	add	r7, sp, #16
 8004592:	6178      	str	r0, [r7, #20]
 8004594:	6139      	str	r1, [r7, #16]
 8004596:	60fa      	str	r2, [r7, #12]
 8004598:	60bb      	str	r3, [r7, #8]

	mqtt_broker_url = (char *) calloc(MAX_MQTT_URL_LEN,     sizeof(char));
 800459a:	2101      	movs	r1, #1
 800459c:	2080      	movs	r0, #128	@ 0x80
 800459e:	f7ff fbcb 	bl	8003d38 <_ZL9my_callocjj>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4a54      	ldr	r2, [pc, #336]	@ (80046f8 <mqtt_init+0x16c>)
 80045a6:	6013      	str	r3, [r2, #0]
	mqtt_username   = (char *) calloc(MAX_MQTT_LOGIN_LEN,   sizeof(char));
 80045a8:	2101      	movs	r1, #1
 80045aa:	2021      	movs	r0, #33	@ 0x21
 80045ac:	f7ff fbc4 	bl	8003d38 <_ZL9my_callocjj>
 80045b0:	4603      	mov	r3, r0
 80045b2:	4a52      	ldr	r2, [pc, #328]	@ (80046fc <mqtt_init+0x170>)
 80045b4:	6013      	str	r3, [r2, #0]
	mqtt_password   = (char *) calloc(MAX_MQTT_PASS_LEN,    sizeof(char));
 80045b6:	2101      	movs	r1, #1
 80045b8:	2021      	movs	r0, #33	@ 0x21
 80045ba:	f7ff fbbd 	bl	8003d38 <_ZL9my_callocjj>
 80045be:	4603      	mov	r3, r0
 80045c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004700 <mqtt_init+0x174>)
 80045c2:	6013      	str	r3, [r2, #0]
	topik_buff      = (char *) calloc(MQTT_TOPIK_MAX_LEN,   sizeof(char));
 80045c4:	2101      	movs	r1, #1
 80045c6:	2080      	movs	r0, #128	@ 0x80
 80045c8:	f7ff fbb6 	bl	8003d38 <_ZL9my_callocjj>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004704 <mqtt_init+0x178>)
 80045d0:	6013      	str	r3, [r2, #0]
	payload_buff    = (char *) calloc(MQTT_PAYLOAD_MAX_LEN, sizeof(char));
 80045d2:	2101      	movs	r1, #1
 80045d4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80045d8:	f7ff fbae 	bl	8003d38 <_ZL9my_callocjj>
 80045dc:	4603      	mov	r3, r0
 80045de:	4a4a      	ldr	r2, [pc, #296]	@ (8004708 <mqtt_init+0x17c>)
 80045e0:	6013      	str	r3, [r2, #0]
	ip_addr_str     = (char *) calloc(IP_v6_STR_LEN,        sizeof(char));
 80045e2:	2101      	movs	r1, #1
 80045e4:	2028      	movs	r0, #40	@ 0x28
 80045e6:	f7ff fba7 	bl	8003d38 <_ZL9my_callocjj>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a47      	ldr	r2, [pc, #284]	@ (800470c <mqtt_init+0x180>)
 80045ee:	6013      	str	r3, [r2, #0]
	r_w_parameter   = fn;
 80045f0:	4a47      	ldr	r2, [pc, #284]	@ (8004710 <mqtt_init+0x184>)
 80045f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f4:	6013      	str	r3, [r2, #0]

	strcpy(mqtt_broker_url, (char *)broker_url);
 80045f6:	4b40      	ldr	r3, [pc, #256]	@ (80046f8 <mqtt_init+0x16c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f022 fdb1 	bl	8027164 <strcpy>
	strcpy(mqtt_username,   (char *)username);
 8004602:	4b3e      	ldr	r3, [pc, #248]	@ (80046fc <mqtt_init+0x170>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	4618      	mov	r0, r3
 800460a:	f022 fdab 	bl	8027164 <strcpy>
	strcpy(mqtt_password,   (char *)password);
 800460e:	4b3c      	ldr	r3, [pc, #240]	@ (8004700 <mqtt_init+0x174>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004614:	4618      	mov	r0, r3
 8004616:	f022 fda5 	bl	8027164 <strcpy>

	logging(L_INFO, "Start MQTT task, server: %s, username: %s", mqtt_broker_url, mqtt_username);
 800461a:	4b37      	ldr	r3, [pc, #220]	@ (80046f8 <mqtt_init+0x16c>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <mqtt_init+0x170>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	493c      	ldr	r1, [pc, #240]	@ (8004714 <mqtt_init+0x188>)
 8004624:	2001      	movs	r0, #1
 8004626:	f7fd fd91 	bl	800214c <logging>

	mgr = (struct mg_mgr *)     mgr_parameter;
 800462a:	4a3b      	ldr	r2, [pc, #236]	@ (8004718 <mqtt_init+0x18c>)
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	6013      	str	r3, [r2, #0]
	mif = (struct mg_tcpip_if*) mif_parameter;
 8004630:	4a3a      	ldr	r2, [pc, #232]	@ (800471c <mqtt_init+0x190>)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6013      	str	r3, [r2, #0]

	set_device_id(mif->mac, sizeof(mif->mac));
 8004636:	4b39      	ldr	r3, [pc, #228]	@ (800471c <mqtt_init+0x190>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2106      	movs	r1, #6
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f89b 	bl	8004778 <set_device_id>

	mqtt_opts.user 		    = mg_str(mqtt_username);
 8004642:	4b2e      	ldr	r3, [pc, #184]	@ (80046fc <mqtt_init+0x170>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4c36      	ldr	r4, [pc, #216]	@ (8004720 <mqtt_init+0x194>)
 8004648:	463b      	mov	r3, r7
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f01d fa79 	bl	8021b44 <mg_str_s>
 8004652:	4622      	mov	r2, r4
 8004654:	463b      	mov	r3, r7
 8004656:	e893 0003 	ldmia.w	r3, {r0, r1}
 800465a:	e882 0003 	stmia.w	r2, {r0, r1}
	mqtt_opts.pass		    = mg_str(mqtt_password);
 800465e:	4b28      	ldr	r3, [pc, #160]	@ (8004700 <mqtt_init+0x174>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4c2f      	ldr	r4, [pc, #188]	@ (8004720 <mqtt_init+0x194>)
 8004664:	463b      	mov	r3, r7
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f01d fa6b 	bl	8021b44 <mg_str_s>
 800466e:	f104 0308 	add.w	r3, r4, #8
 8004672:	463a      	mov	r2, r7
 8004674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004678:	e883 0003 	stmia.w	r3, {r0, r1}
	mqtt_opts.keepalive 	= 60;
 800467c:	4b28      	ldr	r3, [pc, #160]	@ (8004720 <mqtt_init+0x194>)
 800467e:	223c      	movs	r2, #60	@ 0x3c
 8004680:	855a      	strh	r2, [r3, #42]	@ 0x2a

	mqtt_timer =                      mg_timer_add(mgr, 10000 /* 10 seconds */, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, mqtt_timer_handler,                      NULL); // Timer for following connection and reconnect every 10 seconds if needed
 8004682:	4b25      	ldr	r3, [pc, #148]	@ (8004718 <mqtt_init+0x18c>)
 8004684:	6819      	ldr	r1, [r3, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	9302      	str	r3, [sp, #8]
 800468a:	4b26      	ldr	r3, [pc, #152]	@ (8004724 <mqtt_init+0x198>)
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	2303      	movs	r3, #3
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	4608      	mov	r0, r1
 800469c:	f019 fae8 	bl	801dc70 <mg_timer_add>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4a21      	ldr	r2, [pc, #132]	@ (8004728 <mqtt_init+0x19c>)
 80046a4:	6013      	str	r3, [r2, #0]
	mqtt_timer_periodic_status_send = mg_timer_add(mgr, 15000 /* 15 seconds */, MG_TIMER_REPEAT,                mqtt_pereodic_status_send_timer_handler, NULL); // Timer for send io statuses every ~150 seconds
 80046a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004718 <mqtt_init+0x18c>)
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	4b1f      	ldr	r3, [pc, #124]	@ (800472c <mqtt_init+0x1a0>)
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	2301      	movs	r3, #1
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	4608      	mov	r0, r1
 80046c0:	f019 fad6 	bl	801dc70 <mg_timer_add>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004730 <mqtt_init+0x1a4>)
 80046c8:	6013      	str	r3, [r2, #0]
	mqtt_timer_io_sheck	=             mg_timer_add(mgr,	500 /* 0.5 seconds */, MG_TIMER_REPEAT,                    mqtt_timer_handler_cher_io_status,       NULL); // timer for follow io status every 0.5 seconds
 80046ca:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <mqtt_init+0x18c>)
 80046cc:	6819      	ldr	r1, [r3, #0]
 80046ce:	2300      	movs	r3, #0
 80046d0:	9302      	str	r3, [sp, #8]
 80046d2:	4b18      	ldr	r3, [pc, #96]	@ (8004734 <mqtt_init+0x1a8>)
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	2301      	movs	r3, #1
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	4608      	mov	r0, r1
 80046e4:	f019 fac4 	bl	801dc70 <mg_timer_add>
 80046e8:	4603      	mov	r3, r0
 80046ea:	4a13      	ldr	r2, [pc, #76]	@ (8004738 <mqtt_init+0x1ac>)
 80046ec:	6013      	str	r3, [r2, #0]

}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd90      	pop	{r4, r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000b1c 	.word	0x20000b1c
 80046fc:	20000b20 	.word	0x20000b20
 8004700:	20000b24 	.word	0x20000b24
 8004704:	20000b28 	.word	0x20000b28
 8004708:	20000b2c 	.word	0x20000b2c
 800470c:	20000b7c 	.word	0x20000b7c
 8004710:	20000b90 	.word	0x20000b90
 8004714:	08030388 	.word	0x08030388
 8004718:	20000b30 	.word	0x20000b30
 800471c:	20000b34 	.word	0x20000b34
 8004720:	20000b38 	.word	0x20000b38
 8004724:	08004495 	.word	0x08004495
 8004728:	20000b80 	.word	0x20000b80
 800472c:	08004379 	.word	0x08004379
 8004730:	20000b84 	.word	0x20000b84
 8004734:	08004541 	.word	0x08004541
 8004738:	20000b88 	.word	0x20000b88

0800473c <_ZL9my_callocjj>:
static inline void *my_calloc(size_t cnt, size_t size) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	4618      	mov	r0, r3
 8004750:	f007 feec 	bl	800c52c <pvPortMalloc>
 8004754:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <_ZL9my_callocjj+0x32>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	fb02 f303 	mul.w	r3, r2, r3
 8004764:	461a      	mov	r2, r3
 8004766:	2100      	movs	r1, #0
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f021 faf1 	bl	8025d50 <memset>
  return p;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <set_device_id>:
//char subscr_topik_template[] 	= {"%s_%s/sw%u/set"	};
char input_status_topik_temp[] 	= {"%s_%s/inputs"	};
char switch_status_topik_temp[] = {"%s_%s/switches"	};
const char io_template[] = {"{\"%s%u\" : \"%s\"}"};

mqtt_config_error set_device_id(const uint8_t* id, unsigned const int id_len){
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]

	if ( unical_id){
 8004782:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <set_device_id+0x78>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <set_device_id+0x1c>
		free(unical_id);
 800478a:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <set_device_id+0x78>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f007 ff9a 	bl	800c6c8 <vPortFree>
	}
    // Каждый байт будет преобразован в два символа + 1 символ для окончания строки
    unical_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	3301      	adds	r3, #1
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ffcd 	bl	800473c <_ZL9my_callocjj>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4a12      	ldr	r2, [pc, #72]	@ (80047f0 <set_device_id+0x78>)
 80047a6:	6013      	str	r3, [r2, #0]


	if (unical_id){
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <set_device_id+0x78>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d017      	beq.n	80047e0 <set_device_id+0x68>
        // Проходим по каждому байту идентификатора
        for (unsigned int i = 0; i < id_len; i++) {
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e00f      	b.n	80047d6 <set_device_id+0x5e>
            // Конвертируем каждый байт в два символа и добавляем в строку
            sprintf(&unical_id[i * 2], "%02X", id[i]);
 80047b6:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <set_device_id+0x78>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	18d0      	adds	r0, r2, r3
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	490a      	ldr	r1, [pc, #40]	@ (80047f4 <set_device_id+0x7c>)
 80047cc:	f020 fefe 	bl	80255cc <sprintf>
        for (unsigned int i = 0; i < id_len; i++) {
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3eb      	bcc.n	80047b6 <set_device_id+0x3e>
 80047de:	e002      	b.n	80047e6 <set_device_id+0x6e>
        }
	}else{
        return MEM_ALLOC_ERR; // Ошибка выделения памяти
 80047e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047e4:	e000      	b.n	80047e8 <set_device_id+0x70>
	}

	return NO_ERR; // Успешно
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000b9c 	.word	0x20000b9c
 80047f4:	080303b4 	.word	0x080303b4

080047f8 <set_device_conf_ip>:

mqtt_config_error set_device_conf_ip(char * chr_ip, unsigned int ip_len){
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]

	if(dev_conf_ip){
 8004802:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <set_device_conf_ip+0x60>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d004      	beq.n	8004814 <set_device_conf_ip+0x1c>
		free(dev_conf_ip);
 800480a:	4b13      	ldr	r3, [pc, #76]	@ (8004858 <set_device_conf_ip+0x60>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f007 ff5a 	bl	800c6c8 <vPortFree>
	}

	dev_conf_ip = (char *)calloc(ip_len+1, sizeof(char)); // +1 для нулевого символа
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	2101      	movs	r1, #1
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff ff8e 	bl	800473c <_ZL9my_callocjj>
 8004820:	4603      	mov	r3, r0
 8004822:	4a0d      	ldr	r2, [pc, #52]	@ (8004858 <set_device_conf_ip+0x60>)
 8004824:	6013      	str	r3, [r2, #0]

	if(dev_conf_ip){
 8004826:	4b0c      	ldr	r3, [pc, #48]	@ (8004858 <set_device_conf_ip+0x60>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00e      	beq.n	800484c <set_device_conf_ip+0x54>
		strncpy(dev_conf_ip, chr_ip, ip_len);
 800482e:	4b0a      	ldr	r3, [pc, #40]	@ (8004858 <set_device_conf_ip+0x60>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	f021 fad1 	bl	8025dde <strncpy>
		dev_conf_ip[ip_len] = '\0'; // Явно добавляем нулевой символ
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <set_device_conf_ip+0x60>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4413      	add	r3, r2
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
	}else{
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
	}

	return NO_ERR; // Успешно
 8004848:	2300      	movs	r3, #0
 800484a:	e001      	b.n	8004850 <set_device_conf_ip+0x58>
		return MEM_ALLOC_ERR; // Ошибка выделения памяти
 800484c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000ba0 	.word	0x20000ba0

0800485c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint32_t buff_len, uint8_t topik_type, uint8_t obj_number){
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	@ 0x28
 8004860:	af06      	add	r7, sp, #24
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	4611      	mov	r1, r2
 8004868:	461a      	mov	r2, r3
 800486a:	460b      	mov	r3, r1
 800486c:	71fb      	strb	r3, [r7, #7]
 800486e:	4613      	mov	r3, r2
 8004870:	71bb      	strb	r3, [r7, #6]

	strcpy(buff, "");
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
	switch (topik_type) {//%s/%s/%s_%s/%s%u/config
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	3b01      	subs	r3, #1
 800487c:	2b07      	cmp	r3, #7
 800487e:	f200 80a3 	bhi.w	80049c8 <get_config_topik_string+0x16c>
 8004882:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <get_config_topik_string+0x2c>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048a9 	.word	0x080048a9
 800488c:	080048cd 	.word	0x080048cd
 8004890:	080048f1 	.word	0x080048f1
 8004894:	08004939 	.word	0x08004939
 8004898:	08004915 	.word	0x08004915
 800489c:	08004981 	.word	0x08004981
 80048a0:	080049a5 	.word	0x080049a5
 80048a4:	0800495d 	.word	0x0800495d
		case INPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_binary_sensor, dev_system, unical_id, component_input, obj_number);
 80048a8:	4b4b      	ldr	r3, [pc, #300]	@ (80049d8 <get_config_topik_string+0x17c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	79ba      	ldrb	r2, [r7, #6]
 80048ae:	9204      	str	r2, [sp, #16]
 80048b0:	4a4a      	ldr	r2, [pc, #296]	@ (80049dc <get_config_topik_string+0x180>)
 80048b2:	9203      	str	r2, [sp, #12]
 80048b4:	9302      	str	r3, [sp, #8]
 80048b6:	4b4a      	ldr	r3, [pc, #296]	@ (80049e0 <get_config_topik_string+0x184>)
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	4b4a      	ldr	r3, [pc, #296]	@ (80049e4 <get_config_topik_string+0x188>)
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4b4a      	ldr	r3, [pc, #296]	@ (80049e8 <get_config_topik_string+0x18c>)
 80048c0:	4a4a      	ldr	r2, [pc, #296]	@ (80049ec <get_config_topik_string+0x190>)
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f020 fd19 	bl	80252fc <snprintf>
			break;
 80048ca:	e080      	b.n	80049ce <get_config_topik_string+0x172>
		case OUTPUT_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_switch, dev_system, unical_id, dev_class_switch, obj_number);
 80048cc:	4b42      	ldr	r3, [pc, #264]	@ (80049d8 <get_config_topik_string+0x17c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	79ba      	ldrb	r2, [r7, #6]
 80048d2:	9204      	str	r2, [sp, #16]
 80048d4:	4a46      	ldr	r2, [pc, #280]	@ (80049f0 <get_config_topik_string+0x194>)
 80048d6:	9203      	str	r2, [sp, #12]
 80048d8:	9302      	str	r3, [sp, #8]
 80048da:	4b41      	ldr	r3, [pc, #260]	@ (80049e0 <get_config_topik_string+0x184>)
 80048dc:	9301      	str	r3, [sp, #4]
 80048de:	4b44      	ldr	r3, [pc, #272]	@ (80049f0 <get_config_topik_string+0x194>)
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4b41      	ldr	r3, [pc, #260]	@ (80049e8 <get_config_topik_string+0x18c>)
 80048e4:	4a41      	ldr	r2, [pc, #260]	@ (80049ec <get_config_topik_string+0x190>)
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f020 fd07 	bl	80252fc <snprintf>
			break;
 80048ee:	e06e      	b.n	80049ce <get_config_topik_string+0x172>
		case ENERGY_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy, obj_number);
 80048f0:	4b39      	ldr	r3, [pc, #228]	@ (80049d8 <get_config_topik_string+0x17c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	79ba      	ldrb	r2, [r7, #6]
 80048f6:	9204      	str	r2, [sp, #16]
 80048f8:	4a3e      	ldr	r2, [pc, #248]	@ (80049f4 <get_config_topik_string+0x198>)
 80048fa:	9203      	str	r2, [sp, #12]
 80048fc:	9302      	str	r3, [sp, #8]
 80048fe:	4b38      	ldr	r3, [pc, #224]	@ (80049e0 <get_config_topik_string+0x184>)
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	4b3d      	ldr	r3, [pc, #244]	@ (80049f8 <get_config_topik_string+0x19c>)
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	4b38      	ldr	r3, [pc, #224]	@ (80049e8 <get_config_topik_string+0x18c>)
 8004908:	4a38      	ldr	r2, [pc, #224]	@ (80049ec <get_config_topik_string+0x190>)
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f020 fcf5 	bl	80252fc <snprintf>
			break;
 8004912:	e05c      	b.n	80049ce <get_config_topik_string+0x172>
		case VOLTAGE_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage, obj_number);
 8004914:	4b30      	ldr	r3, [pc, #192]	@ (80049d8 <get_config_topik_string+0x17c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	79ba      	ldrb	r2, [r7, #6]
 800491a:	9204      	str	r2, [sp, #16]
 800491c:	4a37      	ldr	r2, [pc, #220]	@ (80049fc <get_config_topik_string+0x1a0>)
 800491e:	9203      	str	r2, [sp, #12]
 8004920:	9302      	str	r3, [sp, #8]
 8004922:	4b2f      	ldr	r3, [pc, #188]	@ (80049e0 <get_config_topik_string+0x184>)
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	4b34      	ldr	r3, [pc, #208]	@ (80049f8 <get_config_topik_string+0x19c>)
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	4b2f      	ldr	r3, [pc, #188]	@ (80049e8 <get_config_topik_string+0x18c>)
 800492c:	4a2f      	ldr	r2, [pc, #188]	@ (80049ec <get_config_topik_string+0x190>)
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f020 fce3 	bl	80252fc <snprintf>
			break;
 8004936:	e04a      	b.n	80049ce <get_config_topik_string+0x172>
		case POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power, obj_number);
 8004938:	4b27      	ldr	r3, [pc, #156]	@ (80049d8 <get_config_topik_string+0x17c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	79ba      	ldrb	r2, [r7, #6]
 800493e:	9204      	str	r2, [sp, #16]
 8004940:	4a2f      	ldr	r2, [pc, #188]	@ (8004a00 <get_config_topik_string+0x1a4>)
 8004942:	9203      	str	r2, [sp, #12]
 8004944:	9302      	str	r3, [sp, #8]
 8004946:	4b26      	ldr	r3, [pc, #152]	@ (80049e0 <get_config_topik_string+0x184>)
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	4b2b      	ldr	r3, [pc, #172]	@ (80049f8 <get_config_topik_string+0x19c>)
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4b26      	ldr	r3, [pc, #152]	@ (80049e8 <get_config_topik_string+0x18c>)
 8004950:	4a26      	ldr	r2, [pc, #152]	@ (80049ec <get_config_topik_string+0x190>)
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f020 fcd1 	bl	80252fc <snprintf>
			break;
 800495a:	e038      	b.n	80049ce <get_config_topik_string+0x172>
		case APPARENT_POWER_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power, obj_number);
 800495c:	4b1e      	ldr	r3, [pc, #120]	@ (80049d8 <get_config_topik_string+0x17c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	79ba      	ldrb	r2, [r7, #6]
 8004962:	9204      	str	r2, [sp, #16]
 8004964:	4a27      	ldr	r2, [pc, #156]	@ (8004a04 <get_config_topik_string+0x1a8>)
 8004966:	9203      	str	r2, [sp, #12]
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <get_config_topik_string+0x184>)
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	4b22      	ldr	r3, [pc, #136]	@ (80049f8 <get_config_topik_string+0x19c>)
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4b1d      	ldr	r3, [pc, #116]	@ (80049e8 <get_config_topik_string+0x18c>)
 8004974:	4a1d      	ldr	r2, [pc, #116]	@ (80049ec <get_config_topik_string+0x190>)
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f020 fcbf 	bl	80252fc <snprintf>
			break;
 800497e:	e026      	b.n	80049ce <get_config_topik_string+0x172>
		case POWER_FACTOR_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor, obj_number);
 8004980:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <get_config_topik_string+0x17c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	79ba      	ldrb	r2, [r7, #6]
 8004986:	9204      	str	r2, [sp, #16]
 8004988:	4a1f      	ldr	r2, [pc, #124]	@ (8004a08 <get_config_topik_string+0x1ac>)
 800498a:	9203      	str	r2, [sp, #12]
 800498c:	9302      	str	r3, [sp, #8]
 800498e:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <get_config_topik_string+0x184>)
 8004990:	9301      	str	r3, [sp, #4]
 8004992:	4b19      	ldr	r3, [pc, #100]	@ (80049f8 <get_config_topik_string+0x19c>)
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	4b14      	ldr	r3, [pc, #80]	@ (80049e8 <get_config_topik_string+0x18c>)
 8004998:	4a14      	ldr	r2, [pc, #80]	@ (80049ec <get_config_topik_string+0x190>)
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f020 fcad 	bl	80252fc <snprintf>
			break;
 80049a2:	e014      	b.n	80049ce <get_config_topik_string+0x172>
		case CURRENT_SENSOR_TOPIK:
			snprintf(buff, buff_len, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current, obj_number);
 80049a4:	4b0c      	ldr	r3, [pc, #48]	@ (80049d8 <get_config_topik_string+0x17c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	79ba      	ldrb	r2, [r7, #6]
 80049aa:	9204      	str	r2, [sp, #16]
 80049ac:	4a17      	ldr	r2, [pc, #92]	@ (8004a0c <get_config_topik_string+0x1b0>)
 80049ae:	9203      	str	r2, [sp, #12]
 80049b0:	9302      	str	r3, [sp, #8]
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <get_config_topik_string+0x184>)
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	4b10      	ldr	r3, [pc, #64]	@ (80049f8 <get_config_topik_string+0x19c>)
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <get_config_topik_string+0x18c>)
 80049bc:	4a0b      	ldr	r2, [pc, #44]	@ (80049ec <get_config_topik_string+0x190>)
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f020 fc9b 	bl	80252fc <snprintf>
			break;
 80049c6:	e002      	b.n	80049ce <get_config_topik_string+0x172>
		default:
			return -1;
 80049c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049cc:	e000      	b.n	80049d0 <get_config_topik_string+0x174>
			break;
	}


	return 0;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000b9c 	.word	0x20000b9c
 80049dc:	080303d4 	.word	0x080303d4
 80049e0:	080303dc 	.word	0x080303dc
 80049e4:	080303e4 	.word	0x080303e4
 80049e8:	20000064 	.word	0x20000064
 80049ec:	080303bc 	.word	0x080303bc
 80049f0:	080303f4 	.word	0x080303f4
 80049f4:	080303fc 	.word	0x080303fc
 80049f8:	08030404 	.word	0x08030404
 80049fc:	0803040c 	.word	0x0803040c
 8004a00:	08030414 	.word	0x08030414
 8004a04:	0803041c 	.word	0x0803041c
 8004a08:	0803042c 	.word	0x0803042c
 8004a0c:	0803043c 	.word	0x0803043c

08004a10 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint32_t payload_len, uint8_t payload_type, uint8_t obj_number){
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	b09f      	sub	sp, #124	@ 0x7c
 8004a14:	af16      	add	r7, sp, #88	@ 0x58
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	460b      	mov	r3, r1
 8004a20:	71fb      	strb	r3, [r7, #7]
 8004a22:	4613      	mov	r3, r2
 8004a24:	71bb      	strb	r3, [r7, #6]

	uint8_t len = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	77fb      	strb	r3, [r7, #31]
	char * name      = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
	char * com_topik = NULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
	memset(payload, 0, payload_len * sizeof(char));
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	2100      	movs	r1, #0
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f021 f98a 	bl	8025d50 <memset>

	switch (payload_type) {
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	2b07      	cmp	r3, #7
 8004a42:	f200 820f 	bhi.w	8004e64 <get_config_payload_string+0x454>
 8004a46:	a201      	add	r2, pc, #4	@ (adr r2, 8004a4c <get_config_payload_string+0x3c>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a6d 	.word	0x08004a6d
 8004a50:	08004afd 	.word	0x08004afd
 8004a54:	08004bc7 	.word	0x08004bc7
 8004a58:	08004ced 	.word	0x08004ced
 8004a5c:	08004c25 	.word	0x08004c25
 8004a60:	08004da9 	.word	0x08004da9
 8004a64:	08004e07 	.word	0x08004e07
 8004a68:	08004d4b 	.word	0x08004d4b

		case INP_CONF_PAYLOAD:

			name = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	2080      	movs	r0, #128	@ 0x80
 8004a70:	f7ff fe64 	bl	800473c <_ZL9my_callocjj>
 8004a74:	61b8      	str	r0, [r7, #24]
			snprintf(name, MQTT_TOPIK_MAX_LEN, "%s %u", component_input_human, obj_number);
 8004a76:	79bb      	ldrb	r3, [r7, #6]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	4b82      	ldr	r3, [pc, #520]	@ (8004c84 <get_config_payload_string+0x274>)
 8004a7c:	4a82      	ldr	r2, [pc, #520]	@ (8004c88 <get_config_payload_string+0x278>)
 8004a7e:	2180      	movs	r1, #128	@ 0x80
 8004a80:	69b8      	ldr	r0, [r7, #24]
 8004a82:	f020 fc3b 	bl	80252fc <snprintf>

		    len = snprintf(payload, payload_len, universal_conf_template, dev_class_power, dev_system, \
 8004a86:	4b81      	ldr	r3, [pc, #516]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	79ba      	ldrb	r2, [r7, #6]
 8004a8c:	79b9      	ldrb	r1, [r7, #6]
 8004a8e:	487f      	ldr	r0, [pc, #508]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004a90:	6800      	ldr	r0, [r0, #0]
 8004a92:	79bc      	ldrb	r4, [r7, #6]
 8004a94:	4d7d      	ldr	r5, [pc, #500]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004a96:	682d      	ldr	r5, [r5, #0]
 8004a98:	4e7d      	ldr	r6, [pc, #500]	@ (8004c90 <get_config_payload_string+0x280>)
 8004a9a:	6836      	ldr	r6, [r6, #0]
 8004a9c:	9614      	str	r6, [sp, #80]	@ 0x50
 8004a9e:	4e7d      	ldr	r6, [pc, #500]	@ (8004c94 <get_config_payload_string+0x284>)
 8004aa0:	9613      	str	r6, [sp, #76]	@ 0x4c
 8004aa2:	4e7c      	ldr	r6, [pc, #496]	@ (8004c94 <get_config_payload_string+0x284>)
 8004aa4:	9612      	str	r6, [sp, #72]	@ 0x48
 8004aa6:	4e7c      	ldr	r6, [pc, #496]	@ (8004c98 <get_config_payload_string+0x288>)
 8004aa8:	9611      	str	r6, [sp, #68]	@ 0x44
 8004aaa:	4e7c      	ldr	r6, [pc, #496]	@ (8004c9c <get_config_payload_string+0x28c>)
 8004aac:	9610      	str	r6, [sp, #64]	@ 0x40
 8004aae:	4e7c      	ldr	r6, [pc, #496]	@ (8004ca0 <get_config_payload_string+0x290>)
 8004ab0:	960f      	str	r6, [sp, #60]	@ 0x3c
 8004ab2:	950e      	str	r5, [sp, #56]	@ 0x38
 8004ab4:	4d7b      	ldr	r5, [pc, #492]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004ab6:	950d      	str	r5, [sp, #52]	@ 0x34
 8004ab8:	4d7b      	ldr	r5, [pc, #492]	@ (8004ca8 <get_config_payload_string+0x298>)
 8004aba:	950c      	str	r5, [sp, #48]	@ 0x30
 8004abc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004abe:	4c7b      	ldr	r4, [pc, #492]	@ (8004cac <get_config_payload_string+0x29c>)
 8004ac0:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ac2:	9009      	str	r0, [sp, #36]	@ 0x24
 8004ac4:	4877      	ldr	r0, [pc, #476]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004ac6:	9008      	str	r0, [sp, #32]
 8004ac8:	69b8      	ldr	r0, [r7, #24]
 8004aca:	9007      	str	r0, [sp, #28]
 8004acc:	4878      	ldr	r0, [pc, #480]	@ (8004cb0 <get_config_payload_string+0x2a0>)
 8004ace:	9006      	str	r0, [sp, #24]
 8004ad0:	9105      	str	r1, [sp, #20]
 8004ad2:	4976      	ldr	r1, [pc, #472]	@ (8004cac <get_config_payload_string+0x29c>)
 8004ad4:	9104      	str	r1, [sp, #16]
 8004ad6:	9203      	str	r2, [sp, #12]
 8004ad8:	4a74      	ldr	r2, [pc, #464]	@ (8004cac <get_config_payload_string+0x29c>)
 8004ada:	9202      	str	r2, [sp, #8]
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	4b71      	ldr	r3, [pc, #452]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4b74      	ldr	r3, [pc, #464]	@ (8004cb4 <get_config_payload_string+0x2a4>)
 8004ae4:	4a74      	ldr	r2, [pc, #464]	@ (8004cb8 <get_config_payload_string+0x2a8>)
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f020 fc07 	bl	80252fc <snprintf>
 8004aee:	4603      	mov	r3, r0
 8004af0:	77fb      	strb	r3, [r7, #31]
							unical_id, component_input, obj_number, component_input, obj_number, "\n", \
							name, dev_system, unical_id, \
		                    component_input, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
		                    dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
		    free(name);
 8004af2:	69b8      	ldr	r0, [r7, #24]
 8004af4:	f007 fde8 	bl	800c6c8 <vPortFree>

			return len;
 8004af8:	7ffb      	ldrb	r3, [r7, #31]
 8004afa:	e1b6      	b.n	8004e6a <get_config_payload_string+0x45a>
			break;

		case OUT_CONF_PAYLOAD:

			name =      (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004afc:	2101      	movs	r1, #1
 8004afe:	2080      	movs	r0, #128	@ 0x80
 8004b00:	f7ff fe1c 	bl	800473c <_ZL9my_callocjj>
 8004b04:	61b8      	str	r0, [r7, #24]
			com_topik = (char *) calloc(MQTT_TOPIK_MAX_LEN, sizeof(char));
 8004b06:	2101      	movs	r1, #1
 8004b08:	2080      	movs	r0, #128	@ 0x80
 8004b0a:	f7ff fe17 	bl	800473c <_ZL9my_callocjj>
 8004b0e:	6178      	str	r0, [r7, #20]

			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s%u", component_switch, obj_number);
 8004b10:	79bb      	ldrb	r3, [r7, #6]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	4b69      	ldr	r3, [pc, #420]	@ (8004cbc <get_config_payload_string+0x2ac>)
 8004b16:	4a6a      	ldr	r2, [pc, #424]	@ (8004cc0 <get_config_payload_string+0x2b0>)
 8004b18:	2180      	movs	r1, #128	@ 0x80
 8004b1a:	69b8      	ldr	r0, [r7, #24]
 8004b1c:	f020 fbee 	bl	80252fc <snprintf>
			snprintf(com_topik, MQTT_TOPIK_MAX_LEN, universal_conf_template_comand_topik_part, dev_system, unical_id, name, "");
 8004b20:	4b5a      	ldr	r3, [pc, #360]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a60      	ldr	r2, [pc, #384]	@ (8004ca8 <get_config_payload_string+0x298>)
 8004b26:	9202      	str	r2, [sp, #8]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	9201      	str	r2, [sp, #4]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004b30:	4a64      	ldr	r2, [pc, #400]	@ (8004cc4 <get_config_payload_string+0x2b4>)
 8004b32:	2180      	movs	r1, #128	@ 0x80
 8004b34:	6978      	ldr	r0, [r7, #20]
 8004b36:	f020 fbe1 	bl	80252fc <snprintf>
			snprintf(name,      MQTT_TOPIK_MAX_LEN, "%s %u", dev_class_switch_human, obj_number);
 8004b3a:	79bb      	ldrb	r3, [r7, #6]
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	4b62      	ldr	r3, [pc, #392]	@ (8004cc8 <get_config_payload_string+0x2b8>)
 8004b40:	4a51      	ldr	r2, [pc, #324]	@ (8004c88 <get_config_payload_string+0x278>)
 8004b42:	2180      	movs	r1, #128	@ 0x80
 8004b44:	69b8      	ldr	r0, [r7, #24]
 8004b46:	f020 fbd9 	bl	80252fc <snprintf>

			len = snprintf(payload, payload_len, universal_conf_template, dev_class_switch, dev_system, \
 8004b4a:	4b50      	ldr	r3, [pc, #320]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	79ba      	ldrb	r2, [r7, #6]
 8004b50:	79b9      	ldrb	r1, [r7, #6]
 8004b52:	484e      	ldr	r0, [pc, #312]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004b54:	6800      	ldr	r0, [r0, #0]
 8004b56:	79bc      	ldrb	r4, [r7, #6]
 8004b58:	4d4c      	ldr	r5, [pc, #304]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004b5a:	682d      	ldr	r5, [r5, #0]
 8004b5c:	4e4c      	ldr	r6, [pc, #304]	@ (8004c90 <get_config_payload_string+0x280>)
 8004b5e:	6836      	ldr	r6, [r6, #0]
 8004b60:	9614      	str	r6, [sp, #80]	@ 0x50
 8004b62:	4e4c      	ldr	r6, [pc, #304]	@ (8004c94 <get_config_payload_string+0x284>)
 8004b64:	9613      	str	r6, [sp, #76]	@ 0x4c
 8004b66:	4e4b      	ldr	r6, [pc, #300]	@ (8004c94 <get_config_payload_string+0x284>)
 8004b68:	9612      	str	r6, [sp, #72]	@ 0x48
 8004b6a:	4e4b      	ldr	r6, [pc, #300]	@ (8004c98 <get_config_payload_string+0x288>)
 8004b6c:	9611      	str	r6, [sp, #68]	@ 0x44
 8004b6e:	4e4b      	ldr	r6, [pc, #300]	@ (8004c9c <get_config_payload_string+0x28c>)
 8004b70:	9610      	str	r6, [sp, #64]	@ 0x40
 8004b72:	4e4b      	ldr	r6, [pc, #300]	@ (8004ca0 <get_config_payload_string+0x290>)
 8004b74:	960f      	str	r6, [sp, #60]	@ 0x3c
 8004b76:	950e      	str	r5, [sp, #56]	@ 0x38
 8004b78:	4d4a      	ldr	r5, [pc, #296]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004b7a:	950d      	str	r5, [sp, #52]	@ 0x34
 8004b7c:	4d4a      	ldr	r5, [pc, #296]	@ (8004ca8 <get_config_payload_string+0x298>)
 8004b7e:	950c      	str	r5, [sp, #48]	@ 0x30
 8004b80:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b82:	4c4e      	ldr	r4, [pc, #312]	@ (8004cbc <get_config_payload_string+0x2ac>)
 8004b84:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b86:	9009      	str	r0, [sp, #36]	@ 0x24
 8004b88:	4846      	ldr	r0, [pc, #280]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004b8a:	9008      	str	r0, [sp, #32]
 8004b8c:	69b8      	ldr	r0, [r7, #24]
 8004b8e:	9007      	str	r0, [sp, #28]
 8004b90:	6978      	ldr	r0, [r7, #20]
 8004b92:	9006      	str	r0, [sp, #24]
 8004b94:	9105      	str	r1, [sp, #20]
 8004b96:	4949      	ldr	r1, [pc, #292]	@ (8004cbc <get_config_payload_string+0x2ac>)
 8004b98:	9104      	str	r1, [sp, #16]
 8004b9a:	9203      	str	r2, [sp, #12]
 8004b9c:	4a47      	ldr	r2, [pc, #284]	@ (8004cbc <get_config_payload_string+0x2ac>)
 8004b9e:	9202      	str	r2, [sp, #8]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	4b40      	ldr	r3, [pc, #256]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	4b45      	ldr	r3, [pc, #276]	@ (8004cbc <get_config_payload_string+0x2ac>)
 8004ba8:	4a43      	ldr	r2, [pc, #268]	@ (8004cb8 <get_config_payload_string+0x2a8>)
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f020 fba5 	bl	80252fc <snprintf>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	77fb      	strb	r3, [r7, #31]
							unical_id, component_switch, obj_number, component_switch, obj_number, com_topik, \
							name, dev_system, unical_id, \
							component_switch, obj_number,"",dev_system, unical_id, dev_common_name, dev_model_name, \
							dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			//len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
			free(name);
 8004bb6:	69b8      	ldr	r0, [r7, #24]
 8004bb8:	f007 fd86 	bl	800c6c8 <vPortFree>
			free(com_topik);
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f007 fd83 	bl	800c6c8 <vPortFree>

			return len;
 8004bc2:	7ffb      	ldrb	r3, [r7, #31]
 8004bc4:	e151      	b.n	8004e6a <get_config_payload_string+0x45a>
			break;

		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8004bc6:	4b31      	ldr	r3, [pc, #196]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a30      	ldr	r2, [pc, #192]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	492f      	ldr	r1, [pc, #188]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004bd0:	6809      	ldr	r1, [r1, #0]
 8004bd2:	482f      	ldr	r0, [pc, #188]	@ (8004c90 <get_config_payload_string+0x280>)
 8004bd4:	6800      	ldr	r0, [r0, #0]
 8004bd6:	9010      	str	r0, [sp, #64]	@ 0x40
 8004bd8:	482e      	ldr	r0, [pc, #184]	@ (8004c94 <get_config_payload_string+0x284>)
 8004bda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004bdc:	482d      	ldr	r0, [pc, #180]	@ (8004c94 <get_config_payload_string+0x284>)
 8004bde:	900e      	str	r0, [sp, #56]	@ 0x38
 8004be0:	482d      	ldr	r0, [pc, #180]	@ (8004c98 <get_config_payload_string+0x288>)
 8004be2:	900d      	str	r0, [sp, #52]	@ 0x34
 8004be4:	482d      	ldr	r0, [pc, #180]	@ (8004c9c <get_config_payload_string+0x28c>)
 8004be6:	900c      	str	r0, [sp, #48]	@ 0x30
 8004be8:	482d      	ldr	r0, [pc, #180]	@ (8004ca0 <get_config_payload_string+0x290>)
 8004bea:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004bec:	910a      	str	r1, [sp, #40]	@ 0x28
 8004bee:	492d      	ldr	r1, [pc, #180]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004bf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bf2:	4936      	ldr	r1, [pc, #216]	@ (8004ccc <get_config_payload_string+0x2bc>)
 8004bf4:	9108      	str	r1, [sp, #32]
 8004bf6:	4936      	ldr	r1, [pc, #216]	@ (8004cd0 <get_config_payload_string+0x2c0>)
 8004bf8:	9107      	str	r1, [sp, #28]
 8004bfa:	9206      	str	r2, [sp, #24]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004bfe:	9205      	str	r2, [sp, #20]
 8004c00:	4a34      	ldr	r2, [pc, #208]	@ (8004cd4 <get_config_payload_string+0x2c4>)
 8004c02:	9204      	str	r2, [sp, #16]
 8004c04:	4a34      	ldr	r2, [pc, #208]	@ (8004cd8 <get_config_payload_string+0x2c8>)
 8004c06:	9203      	str	r2, [sp, #12]
 8004c08:	4a31      	ldr	r2, [pc, #196]	@ (8004cd0 <get_config_payload_string+0x2c0>)
 8004c0a:	9202      	str	r2, [sp, #8]
 8004c0c:	4a33      	ldr	r2, [pc, #204]	@ (8004cdc <get_config_payload_string+0x2cc>)
 8004c0e:	9201      	str	r2, [sp, #4]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	4b24      	ldr	r3, [pc, #144]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004c14:	4a2e      	ldr	r2, [pc, #184]	@ (8004cd0 <get_config_payload_string+0x2c0>)
 8004c16:	4928      	ldr	r1, [pc, #160]	@ (8004cb8 <get_config_payload_string+0x2a8>)
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f020 fcd7 	bl	80255cc <sprintf>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004c22:	e122      	b.n	8004e6a <get_config_payload_string+0x45a>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8004c24:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	4917      	ldr	r1, [pc, #92]	@ (8004c8c <get_config_payload_string+0x27c>)
 8004c2e:	6809      	ldr	r1, [r1, #0]
 8004c30:	4817      	ldr	r0, [pc, #92]	@ (8004c90 <get_config_payload_string+0x280>)
 8004c32:	6800      	ldr	r0, [r0, #0]
 8004c34:	9010      	str	r0, [sp, #64]	@ 0x40
 8004c36:	4817      	ldr	r0, [pc, #92]	@ (8004c94 <get_config_payload_string+0x284>)
 8004c38:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004c3a:	4816      	ldr	r0, [pc, #88]	@ (8004c94 <get_config_payload_string+0x284>)
 8004c3c:	900e      	str	r0, [sp, #56]	@ 0x38
 8004c3e:	4816      	ldr	r0, [pc, #88]	@ (8004c98 <get_config_payload_string+0x288>)
 8004c40:	900d      	str	r0, [sp, #52]	@ 0x34
 8004c42:	4816      	ldr	r0, [pc, #88]	@ (8004c9c <get_config_payload_string+0x28c>)
 8004c44:	900c      	str	r0, [sp, #48]	@ 0x30
 8004c46:	4816      	ldr	r0, [pc, #88]	@ (8004ca0 <get_config_payload_string+0x290>)
 8004c48:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004c4a:	910a      	str	r1, [sp, #40]	@ 0x28
 8004c4c:	4915      	ldr	r1, [pc, #84]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004c4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c50:	4923      	ldr	r1, [pc, #140]	@ (8004ce0 <get_config_payload_string+0x2d0>)
 8004c52:	9108      	str	r1, [sp, #32]
 8004c54:	4923      	ldr	r1, [pc, #140]	@ (8004ce4 <get_config_payload_string+0x2d4>)
 8004c56:	9107      	str	r1, [sp, #28]
 8004c58:	9206      	str	r2, [sp, #24]
 8004c5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004c5c:	9205      	str	r2, [sp, #20]
 8004c5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ce8 <get_config_payload_string+0x2d8>)
 8004c60:	9204      	str	r2, [sp, #16]
 8004c62:	4a13      	ldr	r2, [pc, #76]	@ (8004cb0 <get_config_payload_string+0x2a0>)
 8004c64:	9203      	str	r2, [sp, #12]
 8004c66:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <get_config_payload_string+0x2d4>)
 8004c68:	9202      	str	r2, [sp, #8]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cdc <get_config_payload_string+0x2cc>)
 8004c6c:	9201      	str	r2, [sp, #4]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca4 <get_config_payload_string+0x294>)
 8004c72:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce4 <get_config_payload_string+0x2d4>)
 8004c74:	4910      	ldr	r1, [pc, #64]	@ (8004cb8 <get_config_payload_string+0x2a8>)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f020 fca8 	bl	80255cc <sprintf>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004c80:	e0f3      	b.n	8004e6a <get_config_payload_string+0x45a>
 8004c82:	bf00      	nop
 8004c84:	08030444 	.word	0x08030444
 8004c88:	08030450 	.word	0x08030450
 8004c8c:	20000b9c 	.word	0x20000b9c
 8004c90:	20000ba0 	.word	0x20000ba0
 8004c94:	08030458 	.word	0x08030458
 8004c98:	0803045c 	.word	0x0803045c
 8004c9c:	0803046c 	.word	0x0803046c
 8004ca0:	08030480 	.word	0x08030480
 8004ca4:	080303dc 	.word	0x080303dc
 8004ca8:	0803048c 	.word	0x0803048c
 8004cac:	080303d4 	.word	0x080303d4
 8004cb0:	08030490 	.word	0x08030490
 8004cb4:	08030414 	.word	0x08030414
 8004cb8:	08033660 	.word	0x08033660
 8004cbc:	080303f4 	.word	0x080303f4
 8004cc0:	08030494 	.word	0x08030494
 8004cc4:	080337e0 	.word	0x080337e0
 8004cc8:	0803049c 	.word	0x0803049c
 8004ccc:	080304b0 	.word	0x080304b0
 8004cd0:	080303fc 	.word	0x080303fc
 8004cd4:	080304b4 	.word	0x080304b4
 8004cd8:	080304c4 	.word	0x080304c4
 8004cdc:	080304e8 	.word	0x080304e8
 8004ce0:	080304f0 	.word	0x080304f0
 8004ce4:	0803040c 	.word	0x0803040c
 8004ce8:	080304f4 	.word	0x080304f4
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8004cec:	4b61      	ldr	r3, [pc, #388]	@ (8004e74 <get_config_payload_string+0x464>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a60      	ldr	r2, [pc, #384]	@ (8004e74 <get_config_payload_string+0x464>)
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	495f      	ldr	r1, [pc, #380]	@ (8004e74 <get_config_payload_string+0x464>)
 8004cf6:	6809      	ldr	r1, [r1, #0]
 8004cf8:	485f      	ldr	r0, [pc, #380]	@ (8004e78 <get_config_payload_string+0x468>)
 8004cfa:	6800      	ldr	r0, [r0, #0]
 8004cfc:	9010      	str	r0, [sp, #64]	@ 0x40
 8004cfe:	485f      	ldr	r0, [pc, #380]	@ (8004e7c <get_config_payload_string+0x46c>)
 8004d00:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d02:	485e      	ldr	r0, [pc, #376]	@ (8004e7c <get_config_payload_string+0x46c>)
 8004d04:	900e      	str	r0, [sp, #56]	@ 0x38
 8004d06:	485e      	ldr	r0, [pc, #376]	@ (8004e80 <get_config_payload_string+0x470>)
 8004d08:	900d      	str	r0, [sp, #52]	@ 0x34
 8004d0a:	485e      	ldr	r0, [pc, #376]	@ (8004e84 <get_config_payload_string+0x474>)
 8004d0c:	900c      	str	r0, [sp, #48]	@ 0x30
 8004d0e:	485e      	ldr	r0, [pc, #376]	@ (8004e88 <get_config_payload_string+0x478>)
 8004d10:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004d12:	910a      	str	r1, [sp, #40]	@ 0x28
 8004d14:	495d      	ldr	r1, [pc, #372]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004d16:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d18:	495d      	ldr	r1, [pc, #372]	@ (8004e90 <get_config_payload_string+0x480>)
 8004d1a:	9108      	str	r1, [sp, #32]
 8004d1c:	495d      	ldr	r1, [pc, #372]	@ (8004e94 <get_config_payload_string+0x484>)
 8004d1e:	9107      	str	r1, [sp, #28]
 8004d20:	9206      	str	r2, [sp, #24]
 8004d22:	4a5a      	ldr	r2, [pc, #360]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004d24:	9205      	str	r2, [sp, #20]
 8004d26:	4a5c      	ldr	r2, [pc, #368]	@ (8004e98 <get_config_payload_string+0x488>)
 8004d28:	9204      	str	r2, [sp, #16]
 8004d2a:	4a5c      	ldr	r2, [pc, #368]	@ (8004e9c <get_config_payload_string+0x48c>)
 8004d2c:	9203      	str	r2, [sp, #12]
 8004d2e:	4a59      	ldr	r2, [pc, #356]	@ (8004e94 <get_config_payload_string+0x484>)
 8004d30:	9202      	str	r2, [sp, #8]
 8004d32:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea0 <get_config_payload_string+0x490>)
 8004d34:	9201      	str	r2, [sp, #4]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4b54      	ldr	r3, [pc, #336]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004d3a:	4a56      	ldr	r2, [pc, #344]	@ (8004e94 <get_config_payload_string+0x484>)
 8004d3c:	4959      	ldr	r1, [pc, #356]	@ (8004ea4 <get_config_payload_string+0x494>)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f020 fc44 	bl	80255cc <sprintf>
 8004d44:	4603      	mov	r3, r0
 8004d46:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004d48:	e08f      	b.n	8004e6a <get_config_payload_string+0x45a>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8004d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e74 <get_config_payload_string+0x464>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a49      	ldr	r2, [pc, #292]	@ (8004e74 <get_config_payload_string+0x464>)
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	4948      	ldr	r1, [pc, #288]	@ (8004e74 <get_config_payload_string+0x464>)
 8004d54:	6809      	ldr	r1, [r1, #0]
 8004d56:	4848      	ldr	r0, [pc, #288]	@ (8004e78 <get_config_payload_string+0x468>)
 8004d58:	6800      	ldr	r0, [r0, #0]
 8004d5a:	9010      	str	r0, [sp, #64]	@ 0x40
 8004d5c:	4847      	ldr	r0, [pc, #284]	@ (8004e7c <get_config_payload_string+0x46c>)
 8004d5e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004d60:	4846      	ldr	r0, [pc, #280]	@ (8004e7c <get_config_payload_string+0x46c>)
 8004d62:	900e      	str	r0, [sp, #56]	@ 0x38
 8004d64:	4846      	ldr	r0, [pc, #280]	@ (8004e80 <get_config_payload_string+0x470>)
 8004d66:	900d      	str	r0, [sp, #52]	@ 0x34
 8004d68:	4846      	ldr	r0, [pc, #280]	@ (8004e84 <get_config_payload_string+0x474>)
 8004d6a:	900c      	str	r0, [sp, #48]	@ 0x30
 8004d6c:	4846      	ldr	r0, [pc, #280]	@ (8004e88 <get_config_payload_string+0x478>)
 8004d6e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004d70:	910a      	str	r1, [sp, #40]	@ 0x28
 8004d72:	4946      	ldr	r1, [pc, #280]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004d74:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d76:	494c      	ldr	r1, [pc, #304]	@ (8004ea8 <get_config_payload_string+0x498>)
 8004d78:	9108      	str	r1, [sp, #32]
 8004d7a:	494c      	ldr	r1, [pc, #304]	@ (8004eac <get_config_payload_string+0x49c>)
 8004d7c:	9107      	str	r1, [sp, #28]
 8004d7e:	9206      	str	r2, [sp, #24]
 8004d80:	4a42      	ldr	r2, [pc, #264]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004d82:	9205      	str	r2, [sp, #20]
 8004d84:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb0 <get_config_payload_string+0x4a0>)
 8004d86:	9204      	str	r2, [sp, #16]
 8004d88:	4a44      	ldr	r2, [pc, #272]	@ (8004e9c <get_config_payload_string+0x48c>)
 8004d8a:	9203      	str	r2, [sp, #12]
 8004d8c:	4a47      	ldr	r2, [pc, #284]	@ (8004eac <get_config_payload_string+0x49c>)
 8004d8e:	9202      	str	r2, [sp, #8]
 8004d90:	4a43      	ldr	r2, [pc, #268]	@ (8004ea0 <get_config_payload_string+0x490>)
 8004d92:	9201      	str	r2, [sp, #4]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	4b3d      	ldr	r3, [pc, #244]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004d98:	4a44      	ldr	r2, [pc, #272]	@ (8004eac <get_config_payload_string+0x49c>)
 8004d9a:	4942      	ldr	r1, [pc, #264]	@ (8004ea4 <get_config_payload_string+0x494>)
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f020 fc15 	bl	80255cc <sprintf>
 8004da2:	4603      	mov	r3, r0
 8004da4:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004da6:	e060      	b.n	8004e6a <get_config_payload_string+0x45a>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8004da8:	4b32      	ldr	r3, [pc, #200]	@ (8004e74 <get_config_payload_string+0x464>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a31      	ldr	r2, [pc, #196]	@ (8004e74 <get_config_payload_string+0x464>)
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	4930      	ldr	r1, [pc, #192]	@ (8004e74 <get_config_payload_string+0x464>)
 8004db2:	6809      	ldr	r1, [r1, #0]
 8004db4:	4830      	ldr	r0, [pc, #192]	@ (8004e78 <get_config_payload_string+0x468>)
 8004db6:	6800      	ldr	r0, [r0, #0]
 8004db8:	9010      	str	r0, [sp, #64]	@ 0x40
 8004dba:	4830      	ldr	r0, [pc, #192]	@ (8004e7c <get_config_payload_string+0x46c>)
 8004dbc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004dbe:	482f      	ldr	r0, [pc, #188]	@ (8004e7c <get_config_payload_string+0x46c>)
 8004dc0:	900e      	str	r0, [sp, #56]	@ 0x38
 8004dc2:	482f      	ldr	r0, [pc, #188]	@ (8004e80 <get_config_payload_string+0x470>)
 8004dc4:	900d      	str	r0, [sp, #52]	@ 0x34
 8004dc6:	482f      	ldr	r0, [pc, #188]	@ (8004e84 <get_config_payload_string+0x474>)
 8004dc8:	900c      	str	r0, [sp, #48]	@ 0x30
 8004dca:	482f      	ldr	r0, [pc, #188]	@ (8004e88 <get_config_payload_string+0x478>)
 8004dcc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004dce:	910a      	str	r1, [sp, #40]	@ 0x28
 8004dd0:	492e      	ldr	r1, [pc, #184]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004dd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dd4:	4937      	ldr	r1, [pc, #220]	@ (8004eb4 <get_config_payload_string+0x4a4>)
 8004dd6:	9108      	str	r1, [sp, #32]
 8004dd8:	4937      	ldr	r1, [pc, #220]	@ (8004eb8 <get_config_payload_string+0x4a8>)
 8004dda:	9107      	str	r1, [sp, #28]
 8004ddc:	9206      	str	r2, [sp, #24]
 8004dde:	4a2b      	ldr	r2, [pc, #172]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004de0:	9205      	str	r2, [sp, #20]
 8004de2:	4a36      	ldr	r2, [pc, #216]	@ (8004ebc <get_config_payload_string+0x4ac>)
 8004de4:	9204      	str	r2, [sp, #16]
 8004de6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e9c <get_config_payload_string+0x48c>)
 8004de8:	9203      	str	r2, [sp, #12]
 8004dea:	4a33      	ldr	r2, [pc, #204]	@ (8004eb8 <get_config_payload_string+0x4a8>)
 8004dec:	9202      	str	r2, [sp, #8]
 8004dee:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea0 <get_config_payload_string+0x490>)
 8004df0:	9201      	str	r2, [sp, #4]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	4b25      	ldr	r3, [pc, #148]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004df6:	4a30      	ldr	r2, [pc, #192]	@ (8004eb8 <get_config_payload_string+0x4a8>)
 8004df8:	492a      	ldr	r1, [pc, #168]	@ (8004ea4 <get_config_payload_string+0x494>)
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f020 fbe6 	bl	80255cc <sprintf>
 8004e00:	4603      	mov	r3, r0
 8004e02:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004e04:	e031      	b.n	8004e6a <get_config_payload_string+0x45a>
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8004e06:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <get_config_payload_string+0x464>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004e74 <get_config_payload_string+0x464>)
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	4919      	ldr	r1, [pc, #100]	@ (8004e74 <get_config_payload_string+0x464>)
 8004e10:	6809      	ldr	r1, [r1, #0]
 8004e12:	4819      	ldr	r0, [pc, #100]	@ (8004e78 <get_config_payload_string+0x468>)
 8004e14:	6800      	ldr	r0, [r0, #0]
 8004e16:	9010      	str	r0, [sp, #64]	@ 0x40
 8004e18:	4818      	ldr	r0, [pc, #96]	@ (8004e7c <get_config_payload_string+0x46c>)
 8004e1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004e1c:	4817      	ldr	r0, [pc, #92]	@ (8004e7c <get_config_payload_string+0x46c>)
 8004e1e:	900e      	str	r0, [sp, #56]	@ 0x38
 8004e20:	4817      	ldr	r0, [pc, #92]	@ (8004e80 <get_config_payload_string+0x470>)
 8004e22:	900d      	str	r0, [sp, #52]	@ 0x34
 8004e24:	4817      	ldr	r0, [pc, #92]	@ (8004e84 <get_config_payload_string+0x474>)
 8004e26:	900c      	str	r0, [sp, #48]	@ 0x30
 8004e28:	4817      	ldr	r0, [pc, #92]	@ (8004e88 <get_config_payload_string+0x478>)
 8004e2a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004e2c:	910a      	str	r1, [sp, #40]	@ 0x28
 8004e2e:	4917      	ldr	r1, [pc, #92]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004e30:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e32:	4923      	ldr	r1, [pc, #140]	@ (8004ec0 <get_config_payload_string+0x4b0>)
 8004e34:	9108      	str	r1, [sp, #32]
 8004e36:	4923      	ldr	r1, [pc, #140]	@ (8004ec4 <get_config_payload_string+0x4b4>)
 8004e38:	9107      	str	r1, [sp, #28]
 8004e3a:	9206      	str	r2, [sp, #24]
 8004e3c:	4a13      	ldr	r2, [pc, #76]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004e3e:	9205      	str	r2, [sp, #20]
 8004e40:	4a21      	ldr	r2, [pc, #132]	@ (8004ec8 <get_config_payload_string+0x4b8>)
 8004e42:	9204      	str	r2, [sp, #16]
 8004e44:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <get_config_payload_string+0x48c>)
 8004e46:	9203      	str	r2, [sp, #12]
 8004e48:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec4 <get_config_payload_string+0x4b4>)
 8004e4a:	9202      	str	r2, [sp, #8]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <get_config_payload_string+0x490>)
 8004e4e:	9201      	str	r2, [sp, #4]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	4b0e      	ldr	r3, [pc, #56]	@ (8004e8c <get_config_payload_string+0x47c>)
 8004e54:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec4 <get_config_payload_string+0x4b4>)
 8004e56:	4913      	ldr	r1, [pc, #76]	@ (8004ea4 <get_config_payload_string+0x494>)
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f020 fbb7 	bl	80255cc <sprintf>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	77fb      	strb	r3, [r7, #31]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8004e62:	e002      	b.n	8004e6a <get_config_payload_string+0x45a>

		default:
			return -1;
 8004e64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e68:	e7ff      	b.n	8004e6a <get_config_payload_string+0x45a>
			break;
	}
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3724      	adds	r7, #36	@ 0x24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000b9c 	.word	0x20000b9c
 8004e78:	20000ba0 	.word	0x20000ba0
 8004e7c:	08030458 	.word	0x08030458
 8004e80:	0803045c 	.word	0x0803045c
 8004e84:	0803046c 	.word	0x0803046c
 8004e88:	08030480 	.word	0x08030480
 8004e8c:	080303dc 	.word	0x080303dc
 8004e90:	08030504 	.word	0x08030504
 8004e94:	08030414 	.word	0x08030414
 8004e98:	08030508 	.word	0x08030508
 8004e9c:	08030490 	.word	0x08030490
 8004ea0:	080304e8 	.word	0x080304e8
 8004ea4:	08033660 	.word	0x08033660
 8004ea8:	0803052c 	.word	0x0803052c
 8004eac:	0803041c 	.word	0x0803041c
 8004eb0:	08030530 	.word	0x08030530
 8004eb4:	08030550 	.word	0x08030550
 8004eb8:	0803042c 	.word	0x0803042c
 8004ebc:	08030554 	.word	0x08030554
 8004ec0:	08030580 	.word	0x08030580
 8004ec4:	0803043c 	.word	0x0803043c
 8004ec8:	08030584 	.word	0x08030584

08004ecc <gen_bin_sensor_status_payload_JSON>:


int gen_bin_sensor_status_payload_JSON(char * payload, uint32_t payload_len, uint8_t sensor_type, uint8_t sensor_number, uint8_t state){
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	460b      	mov	r3, r1
 8004edc:	71fb      	strb	r3, [r7, #7]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	71bb      	strb	r3, [r7, #6]

	char * sens_name = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
	switch (sensor_type) {
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d002      	beq.n	8004ef2 <gen_bin_sensor_status_payload_JSON+0x26>
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d003      	beq.n	8004ef8 <gen_bin_sensor_status_payload_JSON+0x2c>
			break;
		case OUTPUT_SENSOR:
			sens_name = (char *)dev_class_switch;
			break;
		default:
			break;
 8004ef0:	e005      	b.n	8004efe <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)component_input;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <gen_bin_sensor_status_payload_JSON+0x74>)
 8004ef4:	617b      	str	r3, [r7, #20]
			break;
 8004ef6:	e002      	b.n	8004efe <gen_bin_sensor_status_payload_JSON+0x32>
			sens_name = (char *)dev_class_switch;
 8004ef8:	4b12      	ldr	r3, [pc, #72]	@ (8004f44 <gen_bin_sensor_status_payload_JSON+0x78>)
 8004efa:	617b      	str	r3, [r7, #20]
			break;
 8004efc:	bf00      	nop
	}

	if (state){
 8004efe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <gen_bin_sensor_status_payload_JSON+0x52>
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_on);
 8004f06:	79bb      	ldrb	r3, [r7, #6]
 8004f08:	4a0f      	ldr	r2, [pc, #60]	@ (8004f48 <gen_bin_sensor_status_payload_JSON+0x7c>)
 8004f0a:	9201      	str	r2, [sp, #4]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4a0e      	ldr	r2, [pc, #56]	@ (8004f4c <gen_bin_sensor_status_payload_JSON+0x80>)
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f020 f9f1 	bl	80252fc <snprintf>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	e00b      	b.n	8004f36 <gen_bin_sensor_status_payload_JSON+0x6a>
	}else{
		return snprintf(payload, payload_len, io_template, sens_name, sensor_number, sensor_state_off);
 8004f1e:	79bb      	ldrb	r3, [r7, #6]
 8004f20:	4a0b      	ldr	r2, [pc, #44]	@ (8004f50 <gen_bin_sensor_status_payload_JSON+0x84>)
 8004f22:	9201      	str	r2, [sp, #4]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4a08      	ldr	r2, [pc, #32]	@ (8004f4c <gen_bin_sensor_status_payload_JSON+0x80>)
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f020 f9e5 	bl	80252fc <snprintf>
 8004f32:	4603      	mov	r3, r0
 8004f34:	bf00      	nop
	}
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	080303d4 	.word	0x080303d4
 8004f44:	080303f4 	.word	0x080303f4
 8004f48:	08030590 	.word	0x08030590
 8004f4c:	08033808 	.word	0x08033808
 8004f50:	08030594 	.word	0x08030594

08004f54 <generate_comand_topik_for_subscrabe>:
//	strcat(buff, "\n}");
//
//	return 0;
//}

int generate_comand_topik_for_subscrabe(char * topik, uint32_t topik_len, uint8_t sensor_type, uint8_t sensor_number){
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af04      	add	r7, sp, #16
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4611      	mov	r1, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	460b      	mov	r3, r1
 8004f64:	71fb      	strb	r3, [r7, #7]
 8004f66:	4613      	mov	r3, r2
 8004f68:	71bb      	strb	r3, [r7, #6]

	switch(sensor_type){
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d10e      	bne.n	8004f8e <generate_comand_topik_for_subscrabe+0x3a>

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_control_topik_template, dev_system, unical_id, dev_class_switch, sensor_number );
 8004f70:	4b09      	ldr	r3, [pc, #36]	@ (8004f98 <generate_comand_topik_for_subscrabe+0x44>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	79ba      	ldrb	r2, [r7, #6]
 8004f76:	9202      	str	r2, [sp, #8]
 8004f78:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <generate_comand_topik_for_subscrabe+0x48>)
 8004f7a:	9201      	str	r2, [sp, #4]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <generate_comand_topik_for_subscrabe+0x4c>)
 8004f80:	4a08      	ldr	r2, [pc, #32]	@ (8004fa4 <generate_comand_topik_for_subscrabe+0x50>)
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f020 f9b9 	bl	80252fc <snprintf>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	e7ff      	b.n	8004f8e <generate_comand_topik_for_subscrabe+0x3a>
			break;
	}
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000b9c 	.word	0x20000b9c
 8004f9c:	080303f4 	.word	0x080303f4
 8004fa0:	080303dc 	.word	0x080303dc
 8004fa4:	08030598 	.word	0x08030598

08004fa8 <generate_status_topik>:

int generate_status_topik(char * topik, const uint32_t topik_len, const mqtt_sensor_type_t sensor_type, const uint8_t sensor_number){
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af04      	add	r7, sp, #16
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	71fb      	strb	r3, [r7, #7]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71bb      	strb	r3, [r7, #6]

	strcpy(topik, "\0");
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]

	switch (sensor_type) {
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d002      	beq.n	8004fd0 <generate_status_topik+0x28>
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d00f      	beq.n	8004fee <generate_status_topik+0x46>
 8004fce:	e01d      	b.n	800500c <generate_status_topik+0x64>
		case INPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, component_input, sensor_number);
 8004fd0:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <generate_status_topik+0x70>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	79ba      	ldrb	r2, [r7, #6]
 8004fd6:	9202      	str	r2, [sp, #8]
 8004fd8:	4a10      	ldr	r2, [pc, #64]	@ (800501c <generate_status_topik+0x74>)
 8004fda:	9201      	str	r2, [sp, #4]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <generate_status_topik+0x78>)
 8004fe0:	4a10      	ldr	r2, [pc, #64]	@ (8005024 <generate_status_topik+0x7c>)
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f020 f989 	bl	80252fc <snprintf>
 8004fea:	4603      	mov	r3, r0
 8004fec:	e010      	b.n	8005010 <generate_status_topik+0x68>
			break;

		case OUTPUT_SENSOR:
			return snprintf(topik, topik_len, universal_status_topik_template, dev_system, unical_id, dev_class_switch, sensor_number);
 8004fee:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <generate_status_topik+0x70>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	79ba      	ldrb	r2, [r7, #6]
 8004ff4:	9202      	str	r2, [sp, #8]
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8005028 <generate_status_topik+0x80>)
 8004ff8:	9201      	str	r2, [sp, #4]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4b08      	ldr	r3, [pc, #32]	@ (8005020 <generate_status_topik+0x78>)
 8004ffe:	4a09      	ldr	r2, [pc, #36]	@ (8005024 <generate_status_topik+0x7c>)
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f020 f97a 	bl	80252fc <snprintf>
 8005008:	4603      	mov	r3, r0
 800500a:	e001      	b.n	8005010 <generate_status_topik+0x68>
			break;

		default:
			return -1;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
			break;
	}

	return 0;
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20000b9c 	.word	0x20000b9c
 800501c:	080303d4 	.word	0x080303d4
 8005020:	080303dc 	.word	0x080303dc
 8005024:	080305a8 	.word	0x080305a8
 8005028:	080303f4 	.word	0x080303f4

0800502c <sfn>:

// SNTP client connection
static struct mg_connection *s_sntp_conn = NULL;

// SNTP client callback
static void sfn(struct mg_connection *c, int ev, void *ev_data) {
 800502c:	b5b0      	push	{r4, r5, r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_SNTP_TIME) {
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b12      	cmp	r3, #18
 800503c:	d14b      	bne.n	80050d6 <sfn+0xaa>
	  logging(L_INFO, "Response from NTP server received");
 800503e:	492d      	ldr	r1, [pc, #180]	@ (80050f4 <sfn+0xc8>)
 8005040:	2001      	movs	r0, #1
 8005042:	f7fd f883 	bl	800214c <logging>
    // Time received, the internal protocol handler updates what mg_now() returns
    uint64_t curtime = mg_now();
 8005046:	f01c faa7 	bl	8021598 <mg_now>
 800504a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    MG_INFO(("SNTP-updated current time is: %llu ms from epoch", curtime));
 800504e:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <sfn+0xcc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	dd0a      	ble.n	800506c <sfn+0x40>
 8005056:	4b29      	ldr	r3, [pc, #164]	@ (80050fc <sfn+0xd0>)
 8005058:	221b      	movs	r2, #27
 800505a:	4929      	ldr	r1, [pc, #164]	@ (8005100 <sfn+0xd4>)
 800505c:	2002      	movs	r0, #2
 800505e:	f016 f86d 	bl	801b13c <mg_log_prefix>
 8005062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005066:	4827      	ldr	r0, [pc, #156]	@ (8005104 <sfn+0xd8>)
 8005068:	f016 f8b8 	bl	801b1dc <mg_log>
    logging(L_INFO,"SNTP-updated current time is: %" PRIu64 " ms from epoch", curtime);
 800506c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005070:	4924      	ldr	r1, [pc, #144]	@ (8005104 <sfn+0xd8>)
 8005072:	2001      	movs	r0, #1
 8005074:	f7fd f86a 	bl	800214c <logging>
    // otherwise, you can process the server returned data yourself
    {
      uint64_t t = *(uint64_t *) ev_data;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      s_boot_timestamp = (time_t) ((t - mg_millis()) / 1000);
 8005082:	f01d fd93 	bl	8022bac <mg_millis>
 8005086:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800508a:	1a14      	subs	r4, r2, r0
 800508c:	eb63 0501 	sbc.w	r5, r3, r1
 8005090:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	4620      	mov	r0, r4
 800509a:	4629      	mov	r1, r5
 800509c:	f7fb fe5c 	bl	8000d58 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4918      	ldr	r1, [pc, #96]	@ (8005108 <sfn+0xdc>)
 80050a6:	e9c1 2300 	strd	r2, r3, [r1]
      MG_INFO(("Got SNTP time: %llu ms from epoch, ", t));
 80050aa:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <sfn+0xcc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	dd0a      	ble.n	80050c8 <sfn+0x9c>
 80050b2:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <sfn+0xd0>)
 80050b4:	2221      	movs	r2, #33	@ 0x21
 80050b6:	4912      	ldr	r1, [pc, #72]	@ (8005100 <sfn+0xd4>)
 80050b8:	2002      	movs	r0, #2
 80050ba:	f016 f83f 	bl	801b13c <mg_log_prefix>
 80050be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050c2:	4812      	ldr	r0, [pc, #72]	@ (800510c <sfn+0xe0>)
 80050c4:	f016 f88a 	bl	801b1dc <mg_log>
      logging(L_INFO,"Got SNTP time: %" PRIu64 " ms from epoch", t);
 80050c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050cc:	4910      	ldr	r1, [pc, #64]	@ (8005110 <sfn+0xe4>)
 80050ce:	2001      	movs	r0, #1
 80050d0:	f7fd f83c 	bl	800214c <logging>
  } else if (ev == MG_EV_CLOSE) {
	  logging(L_ERR, "NTP connection is closed");
    s_sntp_conn = NULL;
  }
  (void) c;
}
 80050d4:	e009      	b.n	80050ea <sfn+0xbe>
  } else if (ev == MG_EV_CLOSE) {
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d106      	bne.n	80050ea <sfn+0xbe>
	  logging(L_ERR, "NTP connection is closed");
 80050dc:	490d      	ldr	r1, [pc, #52]	@ (8005114 <sfn+0xe8>)
 80050de:	2003      	movs	r0, #3
 80050e0:	f7fd f834 	bl	800214c <logging>
    s_sntp_conn = NULL;
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <sfn+0xec>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
}
 80050ea:	bf00      	nop
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bdb0      	pop	{r4, r5, r7, pc}
 80050f2:	bf00      	nop
 80050f4:	080305cc 	.word	0x080305cc
 80050f8:	20000298 	.word	0x20000298
 80050fc:	08033818 	.word	0x08033818
 8005100:	080305f0 	.word	0x080305f0
 8005104:	08030610 	.word	0x08030610
 8005108:	20000ba8 	.word	0x20000ba8
 800510c:	08030644 	.word	0x08030644
 8005110:	08030668 	.word	0x08030668
 8005114:	0803068c 	.word	0x0803068c
 8005118:	20000bb0 	.word	0x20000bb0

0800511c <timer_fn>:


void timer_fn(void *arg) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  struct mg_mgr *mgr = (struct mg_mgr *) arg;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60fb      	str	r3, [r7, #12]
  if (s_sntp_conn == NULL) s_sntp_conn = mg_sntp_connect(mgr, NULL, sfn, NULL);
 8005128:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <timer_fn+0x40>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d108      	bne.n	8005142 <timer_fn+0x26>
 8005130:	2300      	movs	r3, #0
 8005132:	4a0b      	ldr	r2, [pc, #44]	@ (8005160 <timer_fn+0x44>)
 8005134:	2100      	movs	r1, #0
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f01c fcc6 	bl	8021ac8 <mg_sntp_connect>
 800513c:	4603      	mov	r3, r0
 800513e:	4a07      	ldr	r2, [pc, #28]	@ (800515c <timer_fn+0x40>)
 8005140:	6013      	str	r3, [r2, #0]
  if (s_sntp_conn != NULL) mg_sntp_request(s_sntp_conn);
 8005142:	4b06      	ldr	r3, [pc, #24]	@ (800515c <timer_fn+0x40>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <timer_fn+0x38>
 800514a:	4b04      	ldr	r3, [pc, #16]	@ (800515c <timer_fn+0x40>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f01c fc2e 	bl	80219b0 <mg_sntp_request>
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000bb0 	.word	0x20000bb0
 8005160:	0800502d 	.word	0x0800502d

08005164 <start_sntp>:

void start_sntp(void *arg){
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af04      	add	r7, sp, #16
 800516a:	6078      	str	r0, [r7, #4]
	logging(L_INFO, "starting NTP client service");
 800516c:	4911      	ldr	r1, [pc, #68]	@ (80051b4 <start_sntp+0x50>)
 800516e:	2001      	movs	r0, #1
 8005170:	f7fc ffec 	bl	800214c <logging>
	struct mg_mgr *mgr = (struct mg_mgr*)arg;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60fb      	str	r3, [r7, #12]

	mg_timer_add(mgr, 20000,  MG_TIMER_ONCE, timer_fn, mgr); //Run once with delay 20 seconds
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	9302      	str	r3, [sp, #8]
 800517c:	4b0e      	ldr	r3, [pc, #56]	@ (80051b8 <start_sntp+0x54>)
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	2300      	movs	r3, #0
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f018 fd6f 	bl	801dc70 <mg_timer_add>
	mg_timer_add(mgr, 1080000, MG_TIMER_REPEAT, timer_fn, mgr); //Repeat every 30 minutes 1080 seconds
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	9302      	str	r3, [sp, #8]
 8005196:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <start_sntp+0x54>)
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	2301      	movs	r3, #1
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	4a07      	ldr	r2, [pc, #28]	@ (80051bc <start_sntp+0x58>)
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f018 fd63 	bl	801dc70 <mg_timer_add>

}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	080306a8 	.word	0x080306a8
 80051b8:	0800511d 	.word	0x0800511d
 80051bc:	00107ac0 	.word	0x00107ac0

080051c0 <my_calloc>:
static inline void *my_calloc(size_t cnt, size_t size) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	4618      	mov	r0, r3
 80051d4:	f007 f9aa 	bl	800c52c <pvPortMalloc>
 80051d8:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <my_calloc+0x32>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	2100      	movs	r1, #0
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f020 fdaf 	bl	8025d50 <memset>
  return p;
 80051f2:	68fb      	ldr	r3, [r7, #12]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <send_ssdp_notify>:
    "\r\n";



// Функция отправки SSDP NOTIFY
static void send_ssdp_notify(void *param) {
 80051fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fe:	b08d      	sub	sp, #52	@ 0x34
 8005200:	af06      	add	r7, sp, #24
 8005202:	6078      	str	r0, [r7, #4]

	struct mg_mgr *mgr = (struct mg_mgr *)param;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	617b      	str	r3, [r7, #20]
	struct mg_connection *udp_conn = mg_connect(mgr, ssdp_addr, NULL, NULL);
 8005208:	2300      	movs	r3, #0
 800520a:	2200      	movs	r2, #0
 800520c:	4923      	ldr	r1, [pc, #140]	@ (800529c <send_ssdp_notify+0xa0>)
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f018 fbfe 	bl	801da10 <mg_connect>
 8005214:	6138      	str	r0, [r7, #16]

	size_t buff_len = (strlen(ssdp_notify_template) + IP_v6_STR_LEN  + strlen(ssdp_web_port) + 20);
 8005216:	f240 1367 	movw	r3, #359	@ 0x167
 800521a:	60fb      	str	r3, [r7, #12]
	buff = calloc(buff_len, sizeof(char));  // +1 для '\0'
 800521c:	2101      	movs	r1, #1
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff ffce 	bl	80051c0 <my_calloc>
 8005224:	4603      	mov	r3, r0
 8005226:	4a1e      	ldr	r2, [pc, #120]	@ (80052a0 <send_ssdp_notify+0xa4>)
 8005228:	6013      	str	r3, [r2, #0]
	if (!buff) return; //TODO add log
 800522a:	4b1d      	ldr	r3, [pc, #116]	@ (80052a0 <send_ssdp_notify+0xa4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d02f      	beq.n	8005292 <send_ssdp_notify+0x96>
	mg_snprintf(ip_addr_str, sizeof(char) * IP_v6_STR_LEN, "%M", mg_print_ip, udp_conn->loc);
 8005232:	4b1c      	ldr	r3, [pc, #112]	@ (80052a4 <send_ssdp_notify+0xa8>)
 8005234:	681e      	ldr	r6, [r3, #0]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	466d      	mov	r5, sp
 800523a:	f103 0408 	add.w	r4, r3, #8
 800523e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	602b      	str	r3, [r5, #0]
 8005246:	4b18      	ldr	r3, [pc, #96]	@ (80052a8 <send_ssdp_notify+0xac>)
 8005248:	4a18      	ldr	r2, [pc, #96]	@ (80052ac <send_ssdp_notify+0xb0>)
 800524a:	2128      	movs	r1, #40	@ 0x28
 800524c:	4630      	mov	r0, r6
 800524e:	f01b ff91 	bl	8021174 <mg_snprintf>

	snprintf(buff, buff_len, ssdp_notify_template, ip_addr_str, ssdp_web_port, dev_id);
 8005252:	4b13      	ldr	r3, [pc, #76]	@ (80052a0 <send_ssdp_notify+0xa4>)
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	4b13      	ldr	r3, [pc, #76]	@ (80052a4 <send_ssdp_notify+0xa8>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <send_ssdp_notify+0xb4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	4b14      	ldr	r3, [pc, #80]	@ (80052b4 <send_ssdp_notify+0xb8>)
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	4a14      	ldr	r2, [pc, #80]	@ (80052b8 <send_ssdp_notify+0xbc>)
 8005268:	68f9      	ldr	r1, [r7, #12]
 800526a:	f020 f847 	bl	80252fc <snprintf>

    if (udp_conn != NULL) {
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <send_ssdp_notify+0x8a>
        mg_send(udp_conn, ssdp_notify_template, strlen(ssdp_notify_template));
 8005274:	f240 1227 	movw	r2, #295	@ 0x127
 8005278:	490f      	ldr	r1, [pc, #60]	@ (80052b8 <send_ssdp_notify+0xbc>)
 800527a:	6938      	ldr	r0, [r7, #16]
 800527c:	f01b fe8c 	bl	8020f98 <mg_send>
        mg_close_conn(udp_conn);
 8005280:	6938      	ldr	r0, [r7, #16]
 8005282:	f018 fb5d 	bl	801d940 <mg_close_conn>
    }
    free(buff);
 8005286:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <send_ssdp_notify+0xa4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f007 fa1c 	bl	800c6c8 <vPortFree>
 8005290:	e000      	b.n	8005294 <send_ssdp_notify+0x98>
	if (!buff) return; //TODO add log
 8005292:	bf00      	nop
}
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529a:	bf00      	nop
 800529c:	0803381c 	.word	0x0803381c
 80052a0:	20000bb8 	.word	0x20000bb8
 80052a4:	20000bbc 	.word	0x20000bbc
 80052a8:	0802135b 	.word	0x0802135b
 80052ac:	080306c4 	.word	0x080306c4
 80052b0:	20000bb4 	.word	0x20000bb4
 80052b4:	080306c8 	.word	0x080306c8
 80052b8:	080339d4 	.word	0x080339d4

080052bc <ssdp_set_id>:

void ssdp_set_id(const uint8_t* id, uint8_t id_len){
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]

	if (id && (id_len > 0)){
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d032      	beq.n	8005334 <ssdp_set_id+0x78>
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02f      	beq.n	8005334 <ssdp_set_id+0x78>
		if(dev_id) free(dev_id);
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <ssdp_set_id+0x80>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <ssdp_set_id+0x2a>
 80052dc:	4b17      	ldr	r3, [pc, #92]	@ (800533c <ssdp_set_id+0x80>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f007 f9f1 	bl	800c6c8 <vPortFree>
		dev_id = (char *) calloc(id_len * 2 + 1, sizeof(char));  // +1 для '\0'
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	3301      	adds	r3, #1
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ff66 	bl	80051c0 <my_calloc>
 80052f4:	4603      	mov	r3, r0
 80052f6:	4a11      	ldr	r2, [pc, #68]	@ (800533c <ssdp_set_id+0x80>)
 80052f8:	6013      	str	r3, [r2, #0]
		if (dev_id ){
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <ssdp_set_id+0x80>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d017      	beq.n	8005332 <ssdp_set_id+0x76>
	        // Проходим по каждому байту идентификатора
	        for (unsigned int i = 0; i < id_len; i++) {
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e00f      	b.n	8005328 <ssdp_set_id+0x6c>
	            // Конвертируем каждый байт в два символа и добавляем в строку
	            sprintf(&dev_id[i * 2], "%02X", id[i]);
 8005308:	4b0c      	ldr	r3, [pc, #48]	@ (800533c <ssdp_set_id+0x80>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	18d0      	adds	r0, r2, r3
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	4908      	ldr	r1, [pc, #32]	@ (8005340 <ssdp_set_id+0x84>)
 800531e:	f020 f955 	bl	80255cc <sprintf>
	        for (unsigned int i = 0; i < id_len; i++) {
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3301      	adds	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	429a      	cmp	r2, r3
 800532e:	d3eb      	bcc.n	8005308 <ssdp_set_id+0x4c>
 8005330:	e000      	b.n	8005334 <ssdp_set_id+0x78>
	        }
		}else{
			return ;
 8005332:	bf00      	nop
		}
	}
}
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000bb4 	.word	0x20000bb4
 8005340:	080306d0 	.word	0x080306d0

08005344 <dev_description_handler>:


static void dev_description_handler(struct mg_connection *c, struct mg_http_message *hm){
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	@ 0x28
 8005348:	af06      	add	r7, sp, #24
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
	if (mg_match(hm->method, mg_str("GET"), NULL)){
 800534e:	f107 0308 	add.w	r3, r7, #8
 8005352:	4917      	ldr	r1, [pc, #92]	@ (80053b0 <dev_description_handler+0x6c>)
 8005354:	4618      	mov	r0, r3
 8005356:	f01c fbf5 	bl	8021b44 <mg_str_s>
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	cb0c      	ldmia	r3, {r2, r3}
 8005366:	c903      	ldmia	r1, {r0, r1}
 8005368:	f01c fcbf 	bl	8021cea <mg_match>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d012      	beq.n	8005398 <dev_description_handler+0x54>
		mg_http_reply(c, 200, "", device_description, ssdp_dev_name, ssdp_dev_manufacturer_name, ssdp_dev_model_name, dev_id, ip_addr_str);
 8005372:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <dev_description_handler+0x70>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a10      	ldr	r2, [pc, #64]	@ (80053b8 <dev_description_handler+0x74>)
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	9204      	str	r2, [sp, #16]
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	4b0f      	ldr	r3, [pc, #60]	@ (80053bc <dev_description_handler+0x78>)
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	4b0f      	ldr	r3, [pc, #60]	@ (80053c0 <dev_description_handler+0x7c>)
 8005384:	9301      	str	r3, [sp, #4]
 8005386:	4b0f      	ldr	r3, [pc, #60]	@ (80053c4 <dev_description_handler+0x80>)
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	4b0f      	ldr	r3, [pc, #60]	@ (80053c8 <dev_description_handler+0x84>)
 800538c:	4a0f      	ldr	r2, [pc, #60]	@ (80053cc <dev_description_handler+0x88>)
 800538e:	21c8      	movs	r1, #200	@ 0xc8
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f012 ff2b 	bl	80181ec <mg_http_reply>
	}else{
		mg_http_reply(c, 400, "", //TODO delete for release,
								"{\"status\":\"error\",\"message\":\"Unsupported method, support only GET and POST methods\"}\r\n");
	}

}
 8005396:	e006      	b.n	80053a6 <dev_description_handler+0x62>
		mg_http_reply(c, 400, "", //TODO delete for release,
 8005398:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <dev_description_handler+0x8c>)
 800539a:	4a0c      	ldr	r2, [pc, #48]	@ (80053cc <dev_description_handler+0x88>)
 800539c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f012 ff23 	bl	80181ec <mg_http_reply>
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	080306d8 	.word	0x080306d8
 80053b4:	20000bb4 	.word	0x20000bb4
 80053b8:	20000bbc 	.word	0x20000bbc
 80053bc:	080306e0 	.word	0x080306e0
 80053c0:	080306f4 	.word	0x080306f4
 80053c4:	08030704 	.word	0x08030704
 80053c8:	08033838 	.word	0x08033838
 80053cc:	080306dc 	.word	0x080306dc
 80053d0:	08030710 	.word	0x08030710

080053d4 <ssdp_web_handler>:

static void ssdp_web_handler(struct mg_connection *c, int ev, void *ev_data){
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	@ 0x28
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]

	if (ev == MG_EV_HTTP_MSG) {
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b0b      	cmp	r3, #11
 80053e4:	d118      	bne.n	8005418 <ssdp_web_handler+0x44>
		struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	61fb      	str	r3, [r7, #28]

		if (mg_match(hm->uri, mg_str("/device_description.xml"), NULL)) {
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	490c      	ldr	r1, [pc, #48]	@ (8005420 <ssdp_web_handler+0x4c>)
 80053f0:	4618      	mov	r0, r3
 80053f2:	f01c fba7 	bl	8021b44 <mg_str_s>
 80053f6:	69f9      	ldr	r1, [r7, #28]
 80053f8:	2300      	movs	r3, #0
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	cb0c      	ldmia	r3, {r2, r3}
 8005402:	3108      	adds	r1, #8
 8005404:	c903      	ldmia	r1, {r0, r1}
 8005406:	f01c fc70 	bl	8021cea <mg_match>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <ssdp_web_handler+0x44>
			dev_description_handler(c, hm);
 8005410:	69f9      	ldr	r1, [r7, #28]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff ff96 	bl	8005344 <dev_description_handler>
		}
	}
}
 8005418:	bf00      	nop
 800541a:	3720      	adds	r7, #32
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	08030768 	.word	0x08030768

08005424 <ssdp_start_server>:


void ssdp_start_server(void * param_mgr, void * param_mif){
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af04      	add	r7, sp, #16
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
	mgr 		= (struct mg_mgr *)param_mgr;
 800542e:	4a1a      	ldr	r2, [pc, #104]	@ (8005498 <ssdp_start_server+0x74>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6013      	str	r3, [r2, #0]
	mif			= (struct mg_tcpip_if *)param_mif;
 8005434:	4a19      	ldr	r2, [pc, #100]	@ (800549c <ssdp_start_server+0x78>)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6013      	str	r3, [r2, #0]
	ip_addr_str = (char *) calloc(IP_v6_STR_LEN, sizeof(char));
 800543a:	2101      	movs	r1, #1
 800543c:	2028      	movs	r0, #40	@ 0x28
 800543e:	f7ff febf 	bl	80051c0 <my_calloc>
 8005442:	4603      	mov	r3, r0
 8005444:	4a16      	ldr	r2, [pc, #88]	@ (80054a0 <ssdp_start_server+0x7c>)
 8005446:	6013      	str	r3, [r2, #0]
	if (!ip_addr_str) return; //TODO add logging
 8005448:	4b15      	ldr	r3, [pc, #84]	@ (80054a0 <ssdp_start_server+0x7c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01e      	beq.n	800548e <ssdp_start_server+0x6a>

	ssdp_set_id(mif->mac, mac_len);
 8005450:	4b12      	ldr	r3, [pc, #72]	@ (800549c <ssdp_start_server+0x78>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2106      	movs	r1, #6
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff30 	bl	80052bc <ssdp_set_id>

	mg_timer_add(mgr, 30000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, &send_ssdp_notify, mgr);
 800545c:	4b0e      	ldr	r3, [pc, #56]	@ (8005498 <ssdp_start_server+0x74>)
 800545e:	6819      	ldr	r1, [r3, #0]
 8005460:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <ssdp_start_server+0x74>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	9302      	str	r3, [sp, #8]
 8005466:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <ssdp_start_server+0x80>)
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	2303      	movs	r3, #3
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	4608      	mov	r0, r1
 8005478:	f018 fbfa 	bl	801dc70 <mg_timer_add>
	mg_http_listen(mgr, "http://0.0.0.0:8080", ssdp_web_handler, mif);
 800547c:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <ssdp_start_server+0x74>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	4b06      	ldr	r3, [pc, #24]	@ (800549c <ssdp_start_server+0x78>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a08      	ldr	r2, [pc, #32]	@ (80054a8 <ssdp_start_server+0x84>)
 8005486:	4909      	ldr	r1, [pc, #36]	@ (80054ac <ssdp_start_server+0x88>)
 8005488:	f014 fe32 	bl	801a0f0 <mg_http_listen>
 800548c:	e000      	b.n	8005490 <ssdp_start_server+0x6c>
	if (!ip_addr_str) return; //TODO add logging
 800548e:	bf00      	nop
}
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000bc0 	.word	0x20000bc0
 800549c:	20000bc4 	.word	0x20000bc4
 80054a0:	20000bbc 	.word	0x20000bbc
 80054a4:	080051fd 	.word	0x080051fd
 80054a8:	080053d5 	.word	0x080053d5
 80054ac:	08030780 	.word	0x08030780

080054b0 <function_prototype>:
static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	bf00      	nop
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), int (*receive_buffer)(uint8_t * buffer, uint16_t size), void (*send_byte)(uint8_t)){
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]

	if (chip_select){
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 80054d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005510 <SPI_flash_reg_cb+0x50>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	60d3      	str	r3, [r2, #12]
 80054da:	e002      	b.n	80054e2 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 80054dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005510 <SPI_flash_reg_cb+0x50>)
 80054de:	4a0d      	ldr	r2, [pc, #52]	@ (8005514 <SPI_flash_reg_cb+0x54>)
 80054e0:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 80054e8:	4a09      	ldr	r2, [pc, #36]	@ (8005510 <SPI_flash_reg_cb+0x50>)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	6113      	str	r3, [r2, #16]
 80054ee:	e002      	b.n	80054f6 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 80054f0:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <SPI_flash_reg_cb+0x50>)
 80054f2:	4a08      	ldr	r2, [pc, #32]	@ (8005514 <SPI_flash_reg_cb+0x54>)
 80054f4:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_buffer	= receive_buffer;
 80054f6:	4a06      	ldr	r2, [pc, #24]	@ (8005510 <SPI_flash_reg_cb+0x50>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 80054fc:	4a04      	ldr	r2, [pc, #16]	@ (8005510 <SPI_flash_reg_cb+0x50>)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6093      	str	r3, [r2, #8]

}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000bc8 	.word	0x20000bc8
 8005514:	080054b1 	.word	0x080054b1

08005518 <sFLASH_Reset>:

void SPI_flash_io_init(void){

}

void sFLASH_Reset(void){
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
    sFLASH_CS_LOW();
 800551c:	f000 f8d2 	bl	80056c4 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8005520:	2066      	movs	r0, #102	@ 0x66
 8005522:	f000 fa8d 	bl	8005a40 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8005526:	2099      	movs	r0, #153	@ 0x99
 8005528:	f000 fa8a 	bl	8005a40 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 800552c:	f000 f8d4 	bl	80056d8 <sFLASH_CS_HIGH>
}
 8005530:	bf00      	nop
 8005532:	bd80      	pop	{r7, pc}

08005534 <sFLASH_Init>:

void sFLASH_Init(void){
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 8005538:	2064      	movs	r0, #100	@ 0x64
 800553a:	f000 fafb 	bl	8005b34 <HAL_Delay>
    sFLASH_Reset();
 800553e:	f7ff ffeb 	bl	8005518 <sFLASH_Reset>
    HAL_Delay(100);
 8005542:	2064      	movs	r0, #100	@ 0x64
 8005544:	f000 faf6 	bl	8005b34 <HAL_Delay>
    HAL_Delay(100);
 8005548:	2064      	movs	r0, #100	@ 0x64
 800554a:	f000 faf3 	bl	8005b34 <HAL_Delay>
}
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <sFLASH_GetInfo>:

struct SPI_flash_info sFLASH_GetInfo(void){
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

	sFLASH_Init();
 800555c:	f7ff ffea 	bl	8005534 <sFLASH_Init>

	flash_id = sFLASH_ReadID();
 8005560:	f000 fa18 	bl	8005994 <sFLASH_ReadID>
 8005564:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4a4f      	ldr	r2, [pc, #316]	@ (80056a8 <sFLASH_GetInfo+0x154>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d076      	beq.n	800565c <sFLASH_GetInfo+0x108>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a4d      	ldr	r2, [pc, #308]	@ (80056a8 <sFLASH_GetInfo+0x154>)
 8005572:	4293      	cmp	r3, r2
 8005574:	f0c0 8088 	bcc.w	8005688 <sFLASH_GetInfo+0x134>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a4c      	ldr	r2, [pc, #304]	@ (80056ac <sFLASH_GetInfo+0x158>)
 800557c:	4293      	cmp	r3, r2
 800557e:	f200 8083 	bhi.w	8005688 <sFLASH_GetInfo+0x134>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a4a      	ldr	r2, [pc, #296]	@ (80056b0 <sFLASH_GetInfo+0x15c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d37e      	bcc.n	8005688 <sFLASH_GetInfo+0x134>
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <sFLASH_GetInfo+0x160>)
 800558e:	4413      	add	r3, r2
 8005590:	2b03      	cmp	r3, #3
 8005592:	d879      	bhi.n	8005688 <sFLASH_GetInfo+0x134>
 8005594:	a201      	add	r2, pc, #4	@ (adr r2, 800559c <sFLASH_GetInfo+0x48>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055ad 	.word	0x080055ad
 80055a0:	080055d9 	.word	0x080055d9
 80055a4:	08005605 	.word	0x08005605
 80055a8:	08005631 	.word	0x08005631
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 80055ac:	4b42      	ldr	r3, [pc, #264]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055ae:	4a40      	ldr	r2, [pc, #256]	@ (80056b0 <sFLASH_GetInfo+0x15c>)
 80055b0:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80055b2:	4b41      	ldr	r3, [pc, #260]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80055b8:	4b3f      	ldr	r3, [pc, #252]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80055be:	4b3e      	ldr	r3, [pc, #248]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80055c4:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80055c6:	4b3c      	ldr	r3, [pc, #240]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055cc:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 80055ce:	4b3a      	ldr	r3, [pc, #232]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055d4:	819a      	strh	r2, [r3, #12]
			break;
 80055d6:	e05b      	b.n	8005690 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80055d8:	4b37      	ldr	r3, [pc, #220]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055da:	4a38      	ldr	r2, [pc, #224]	@ (80056bc <sFLASH_GetInfo+0x168>)
 80055dc:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80055de:	4b36      	ldr	r3, [pc, #216]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80055e4:	4b34      	ldr	r3, [pc, #208]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80055ea:	4b33      	ldr	r3, [pc, #204]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80055f0:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80055f2:	4b31      	ldr	r3, [pc, #196]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055f8:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80055fa:	4b2f      	ldr	r3, [pc, #188]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 80055fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005600:	819a      	strh	r2, [r3, #12]
			break;
 8005602:	e045      	b.n	8005690 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8005604:	4b2c      	ldr	r3, [pc, #176]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005606:	4a2e      	ldr	r2, [pc, #184]	@ (80056c0 <sFLASH_GetInfo+0x16c>)
 8005608:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 800560a:	4b2b      	ldr	r3, [pc, #172]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 800560c:	2201      	movs	r2, #1
 800560e:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8005610:	4b29      	ldr	r3, [pc, #164]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005612:	2201      	movs	r2, #1
 8005614:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8005616:	4b28      	ldr	r3, [pc, #160]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005618:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800561c:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800561e:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005624:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8005626:	4b24      	ldr	r3, [pc, #144]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005628:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800562c:	819a      	strh	r2, [r3, #12]
			break;
 800562e:	e02f      	b.n	8005690 <sFLASH_GetInfo+0x13c>
		case sFLASH_W25Q128BV_ID:
			flash_info.flash_id = sFLASH_W25Q128BV_ID;
 8005630:	4b21      	ldr	r3, [pc, #132]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005632:	4a1e      	ldr	r2, [pc, #120]	@ (80056ac <sFLASH_GetInfo+0x158>)
 8005634:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005638:	2201      	movs	r2, #1
 800563a:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 800563c:	4b1e      	ldr	r3, [pc, #120]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 800563e:	2201      	movs	r2, #1
 8005640:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8005642:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005644:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005648:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 800564a:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 800564c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005650:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 4096;
 8005652:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005654:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005658:	819a      	strh	r2, [r3, #12]
			break;
 800565a:	e019      	b.n	8005690 <sFLASH_GetInfo+0x13c>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 800565c:	4b16      	ldr	r3, [pc, #88]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 800565e:	4a12      	ldr	r2, [pc, #72]	@ (80056a8 <sFLASH_GetInfo+0x154>)
 8005660:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8005662:	4b15      	ldr	r3, [pc, #84]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005664:	2201      	movs	r2, #1
 8005666:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8005668:	4b13      	ldr	r3, [pc, #76]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 800566a:	2201      	movs	r2, #1
 800566c:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 800566e:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005670:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005674:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8005676:	4b10      	ldr	r3, [pc, #64]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005678:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800567c:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 800567e:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005680:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005684:	819a      	strh	r2, [r3, #12]
			break;
 8005686:	e003      	b.n	8005690 <sFLASH_GetInfo+0x13c>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8005688:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
			break;
 800568e:	bf00      	nop
	}

	return flash_info;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a09      	ldr	r2, [pc, #36]	@ (80056b8 <sFLASH_GetInfo+0x164>)
 8005694:	461c      	mov	r4, r3
 8005696:	4613      	mov	r3, r2
 8005698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800569a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}
 80056a6:	bf00      	nop
 80056a8:	00c22016 	.word	0x00c22016
 80056ac:	00ef4018 	.word	0x00ef4018
 80056b0:	00ef4015 	.word	0x00ef4015
 80056b4:	ff10bfeb 	.word	0xff10bfeb
 80056b8:	20000bdc 	.word	0x20000bdc
 80056bc:	00ef4016 	.word	0x00ef4016
 80056c0:	00ef4017 	.word	0x00ef4017

080056c4 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80056c8:	4b02      	ldr	r3, [pc, #8]	@ (80056d4 <sFLASH_CS_LOW+0x10>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4798      	blx	r3

}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000bc8 	.word	0x20000bc8

080056d8 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 80056dc:	4b02      	ldr	r3, [pc, #8]	@ (80056e8 <sFLASH_CS_HIGH+0x10>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	4798      	blx	r3
}
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000bc8 	.word	0x20000bc8

080056ec <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 80056f4:	f000 f9b4 	bl	8005a60 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80056f8:	f7ff ffe4 	bl	80056c4 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 80056fc:	2020      	movs	r0, #32
 80056fe:	f000 f99f 	bl	8005a40 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f999 	bl	8005a40 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	0a1b      	lsrs	r3, r3, #8
 8005712:	b2db      	uxtb	r3, r3
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f993 	bl	8005a40 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f98e 	bl	8005a40 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005724:	f7ff ffd8 	bl	80056d8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8005728:	f000 f9a5 	bl	8005a76 <sFLASH_WaitForWriteEnd>
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8005742:	f000 f98d 	bl	8005a60 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005746:	f7ff ffbd 	bl	80056c4 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 800574a:	2002      	movs	r0, #2
 800574c:	f000 f978 	bl	8005a40 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	0c1b      	lsrs	r3, r3, #16
 8005754:	b2db      	uxtb	r3, r3
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f972 	bl	8005a40 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f96c 	bl	8005a40 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f967 	bl	8005a40 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8005772:	e007      	b.n	8005784 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 f961 	bl	8005a40 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	80fa      	strh	r2, [r7, #6]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f2      	bne.n	8005774 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800578e:	f7ff ffa3 	bl	80056d8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8005792:	f000 f970 	bl	8005a76 <sFLASH_WaitForWriteEnd>
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	75fb      	strb	r3, [r7, #23]
 80057b0:	2300      	movs	r3, #0
 80057b2:	75bb      	strb	r3, [r7, #22]
 80057b4:	2300      	movs	r3, #0
 80057b6:	757b      	strb	r3, [r7, #21]
 80057b8:	2300      	movs	r3, #0
 80057ba:	753b      	strb	r3, [r7, #20]
 80057bc:	2300      	movs	r3, #0
 80057be:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 80057c4:	7d7b      	ldrb	r3, [r7, #21]
 80057c6:	425b      	negs	r3, r3
 80057c8:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	0a1b      	lsrs	r3, r3, #8
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80057d6:	7d7b      	ldrb	r3, [r7, #21]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d124      	bne.n	8005826 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d114      	bne.n	800580c <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	461a      	mov	r2, r3
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff ffa3 	bl	8005734 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 80057ee:	e07b      	b.n	80058e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80057f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f7ff ff9c 	bl	8005734 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005802:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800580a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	1e5a      	subs	r2, r3, #1
 8005810:	75fa      	strb	r2, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1ec      	bne.n	80057f0 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8005816:	7dbb      	ldrb	r3, [r7, #22]
 8005818:	b29b      	uxth	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7ff ff88 	bl	8005734 <sFLASH_WritePage>
}
 8005824:	e060      	b.n	80058e8 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d125      	bne.n	8005878 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 800582c:	7dba      	ldrb	r2, [r7, #22]
 800582e:	7d3b      	ldrb	r3, [r7, #20]
 8005830:	429a      	cmp	r2, r3
 8005832:	d91a      	bls.n	800586a <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8005834:	7dba      	ldrb	r2, [r7, #22]
 8005836:	7d3b      	ldrb	r3, [r7, #20]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 800583c:	7d3b      	ldrb	r3, [r7, #20]
 800583e:	b29b      	uxth	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff ff75 	bl	8005734 <sFLASH_WritePage>
        WriteAddr +=  count;
 800584a:	7d3b      	ldrb	r3, [r7, #20]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	4413      	add	r3, r2
 8005850:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8005852:	7d3b      	ldrb	r3, [r7, #20]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 800585a:	7cfb      	ldrb	r3, [r7, #19]
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f7ff ff66 	bl	8005734 <sFLASH_WritePage>
}
 8005868:	e03e      	b.n	80058e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	461a      	mov	r2, r3
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff ff5f 	bl	8005734 <sFLASH_WritePage>
}
 8005876:	e037      	b.n	80058e8 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8005878:	7d3b      	ldrb	r3, [r7, #20]
 800587a:	b29b      	uxth	r3, r3
 800587c:	88fa      	ldrh	r2, [r7, #6]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	b29b      	uxth	r3, r3
 8005888:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 800588e:	7d3b      	ldrb	r3, [r7, #20]
 8005890:	b29b      	uxth	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7ff ff4c 	bl	8005734 <sFLASH_WritePage>
      WriteAddr +=  count;
 800589c:	7d3b      	ldrb	r3, [r7, #20]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4413      	add	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 80058a4:	7d3b      	ldrb	r3, [r7, #20]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80058ac:	e00d      	b.n	80058ca <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80058ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff ff3d 	bl	8005734 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80058c0:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80058c8:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	1e5a      	subs	r2, r3, #1
 80058ce:	75fa      	strb	r2, [r7, #23]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1ec      	bne.n	80058ae <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 80058d4:	7dbb      	ldrb	r3, [r7, #22]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d006      	beq.n	80058e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80058da:	7dbb      	ldrb	r3, [r7, #22]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff ff26 	bl	8005734 <sFLASH_WritePage>
}
 80058e8:	bf00      	nop
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
//#include "cmsis_os.h"
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80058fe:	f7ff fee1 	bl	80056c4 <sFLASH_CS_LOW>

  if (NumByteToRead > 16){
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	2b10      	cmp	r3, #16
 8005906:	d91c      	bls.n	8005942 <sFLASH_ReadBuffer+0x52>
	  //Send "Fast read" inctruction
	  sFLASH_SendByte(sFLASH_CMD_FAST_READ);
 8005908:	200b      	movs	r0, #11
 800590a:	f000 f899 	bl	8005a40 <sFLASH_SendByte>
	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f893 	bl	8005a40 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF00) >> 8);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	b2db      	uxtb	r3, r3
 8005920:	4618      	mov	r0, r3
 8005922:	f000 f88d 	bl	8005a40 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f888 	bl	8005a40 <sFLASH_SendByte>

	  sFLASH_SendByte(0x00);
 8005930:	2000      	movs	r0, #0
 8005932:	f000 f885 	bl	8005a40 <sFLASH_SendByte>
	  sFLASH_SPI_ReadBuffer(pBuffer, NumByteToRead);
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	4619      	mov	r1, r3
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f86e 	bl	8005a1c <sFLASH_SPI_ReadBuffer>
 8005940:	e022      	b.n	8005988 <sFLASH_ReadBuffer+0x98>


  }else{
	  /*!< Send "Read from Memory " instruction */
	  sFLASH_SendByte(sFLASH_CMD_READ);
 8005942:	2003      	movs	r0, #3
 8005944:	f000 f87c 	bl	8005a40 <sFLASH_SendByte>

	  /*!< Send ReadAddr high nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	0c1b      	lsrs	r3, r3, #16
 800594c:	b2db      	uxtb	r3, r3
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f876 	bl	8005a40 <sFLASH_SendByte>
	  /*!< Send ReadAddr medium nibble address byte to read from */
	  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	b2db      	uxtb	r3, r3
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f870 	bl	8005a40 <sFLASH_SendByte>
	  /*!< Send ReadAddr low nibble address byte to read from */
	  sFLASH_SendByte(ReadAddr & 0xFF);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f86b 	bl	8005a40 <sFLASH_SendByte>

	  while (NumByteToRead--) /*!< while there is data to be read */
 800596a:	e008      	b.n	800597e <sFLASH_ReadBuffer+0x8e>
	  {
		/*!< Read a byte from the FLASH */
		//*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
		  *pBuffer = sFLASH_ReadByte();
 800596c:	f000 f846 	bl	80059fc <sFLASH_ReadByte>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	701a      	strb	r2, [r3, #0]
		/*!< Point to the next location where the byte read will be saved */
		pBuffer++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
	  while (NumByteToRead--) /*!< while there is data to be read */
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	1e5a      	subs	r2, r3, #1
 8005982:	80fa      	strh	r2, [r7, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f1      	bne.n	800596c <sFLASH_ReadBuffer+0x7c>
	  }
  }
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005988:	f7ff fea6 	bl	80056d8 <sFLASH_CS_HIGH>
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	2300      	movs	r3, #0
 80059a8:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80059aa:	f7ff fe8b 	bl	80056c4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80059ae:	f7ff fe93 	bl	80056d8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80059b2:	f7ff fe87 	bl	80056c4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80059b6:	f7ff fe8f 	bl	80056d8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80059ba:	f7ff fe83 	bl	80056c4 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80059be:	209f      	movs	r0, #159	@ 0x9f
 80059c0:	f000 f83e 	bl	8005a40 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 80059c4:	f000 f81a 	bl	80059fc <sFLASH_ReadByte>
 80059c8:	4603      	mov	r3, r0
 80059ca:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 80059cc:	f000 f816 	bl	80059fc <sFLASH_ReadByte>
 80059d0:	4603      	mov	r3, r0
 80059d2:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 80059d4:	f000 f812 	bl	80059fc <sFLASH_ReadByte>
 80059d8:	4603      	mov	r3, r0
 80059da:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80059dc:	f7ff fe7c 	bl	80056d8 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	041a      	lsls	r2, r3, #16
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	4313      	orrs	r3, r2
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  return Temp;
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
	uint8_t byte;
	flash_conf.receive_buffer(&byte, 1);
 8005a02:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <sFLASH_ReadByte+0x1c>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	1dfa      	adds	r2, r7, #7
 8005a08:	2101      	movs	r1, #1
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4798      	blx	r3
	return byte;
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000bc8 	.word	0x20000bc8

08005a1c <sFLASH_SPI_ReadBuffer>:


static void sFLASH_SPI_ReadBuffer(uint8_t * buffer, uint16_t size){
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]
	flash_conf.receive_buffer(buffer, size);
 8005a28:	4b04      	ldr	r3, [pc, #16]	@ (8005a3c <sFLASH_SPI_ReadBuffer+0x20>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	887a      	ldrh	r2, [r7, #2]
 8005a2e:	4611      	mov	r1, r2
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	4798      	blx	r3
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000bc8 	.word	0x20000bc8

08005a40 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 8005a4a:	4b04      	ldr	r3, [pc, #16]	@ (8005a5c <sFLASH_SendByte+0x1c>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	79fa      	ldrb	r2, [r7, #7]
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000bc8 	.word	0x20000bc8

08005a60 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005a64:	f7ff fe2e 	bl	80056c4 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8005a68:	2006      	movs	r0, #6
 8005a6a:	f7ff ffe9 	bl	8005a40 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005a6e:	f7ff fe33 	bl	80056d8 <sFLASH_CS_HIGH>
}
 8005a72:	bf00      	nop
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8005a80:	f7ff fe20 	bl	80056c4 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8005a84:	2005      	movs	r0, #5
 8005a86:	f7ff ffdb 	bl	8005a40 <sFLASH_SendByte>

  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
	  /*!< Send "Read Status Register" instruction */
	  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8005a8a:	2005      	movs	r0, #5
 8005a8c:	f7ff ffd8 	bl	8005a40 <sFLASH_SendByte>

	  /*!< Send a dummy byte to generate the clock needed by the FLASH
	  and put the value of the status register in FLASH_Status variable */
	  flashstatus = sFLASH_ReadByte();
 8005a90:	f7ff ffb4 	bl	80059fc <sFLASH_ReadByte>
 8005a94:	4603      	mov	r3, r0
 8005a96:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f3      	bne.n	8005a8a <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8005aa2:	f7ff fe19 	bl	80056d8 <sFLASH_CS_HIGH>
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <HAL_Init+0x40>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8005af0 <HAL_Init+0x40>)
 8005aba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <HAL_Init+0x40>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8005af0 <HAL_Init+0x40>)
 8005ac6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005acc:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <HAL_Init+0x40>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a07      	ldr	r2, [pc, #28]	@ (8005af0 <HAL_Init+0x40>)
 8005ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ad8:	2003      	movs	r0, #3
 8005ada:	f000 f913 	bl	8005d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ade:	200f      	movs	r0, #15
 8005ae0:	f7fc fd88 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ae4:	f7fc fd5a 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40023c00 	.word	0x40023c00

08005af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005af8:	4b06      	ldr	r3, [pc, #24]	@ (8005b14 <HAL_IncTick+0x20>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <HAL_IncTick+0x24>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4413      	add	r3, r2
 8005b04:	4a04      	ldr	r2, [pc, #16]	@ (8005b18 <HAL_IncTick+0x24>)
 8005b06:	6013      	str	r3, [r2, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000078 	.word	0x20000078
 8005b18:	20000bec 	.word	0x20000bec

08005b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b20:	4b03      	ldr	r3, [pc, #12]	@ (8005b30 <HAL_GetTick+0x14>)
 8005b22:	681b      	ldr	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000bec 	.word	0x20000bec

08005b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b3c:	f7ff ffee 	bl	8005b1c <HAL_GetTick>
 8005b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4c:	d005      	beq.n	8005b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <HAL_Delay+0x44>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b5a:	bf00      	nop
 8005b5c:	f7ff ffde 	bl	8005b1c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d8f7      	bhi.n	8005b5c <HAL_Delay+0x28>
  {
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000078 	.word	0x20000078

08005b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b98:	4013      	ands	r3, r2
 8005b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bae:	4a04      	ldr	r2, [pc, #16]	@ (8005bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	60d3      	str	r3, [r2, #12]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	e000ed00 	.word	0xe000ed00

08005bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bc8:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <__NVIC_GetPriorityGrouping+0x18>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	0a1b      	lsrs	r3, r3, #8
 8005bce:	f003 0307 	and.w	r3, r3, #7
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	e000ed00 	.word	0xe000ed00

08005be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	db0b      	blt.n	8005c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	f003 021f 	and.w	r2, r3, #31
 8005bf8:	4907      	ldr	r1, [pc, #28]	@ (8005c18 <__NVIC_EnableIRQ+0x38>)
 8005bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	2001      	movs	r0, #1
 8005c02:	fa00 f202 	lsl.w	r2, r0, r2
 8005c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000e100 	.word	0xe000e100

08005c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	6039      	str	r1, [r7, #0]
 8005c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	db0a      	blt.n	8005c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	490c      	ldr	r1, [pc, #48]	@ (8005c68 <__NVIC_SetPriority+0x4c>)
 8005c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3a:	0112      	lsls	r2, r2, #4
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	440b      	add	r3, r1
 8005c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c44:	e00a      	b.n	8005c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4908      	ldr	r1, [pc, #32]	@ (8005c6c <__NVIC_SetPriority+0x50>)
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	3b04      	subs	r3, #4
 8005c54:	0112      	lsls	r2, r2, #4
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	440b      	add	r3, r1
 8005c5a:	761a      	strb	r2, [r3, #24]
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	e000e100 	.word	0xe000e100
 8005c6c:	e000ed00 	.word	0xe000ed00

08005c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	@ 0x24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f1c3 0307 	rsb	r3, r3, #7
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	bf28      	it	cs
 8005c8e:	2304      	movcs	r3, #4
 8005c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3304      	adds	r3, #4
 8005c96:	2b06      	cmp	r3, #6
 8005c98:	d902      	bls.n	8005ca0 <NVIC_EncodePriority+0x30>
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3b03      	subs	r3, #3
 8005c9e:	e000      	b.n	8005ca2 <NVIC_EncodePriority+0x32>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cae:	43da      	mvns	r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	43d9      	mvns	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc8:	4313      	orrs	r3, r2
         );
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3724      	adds	r7, #36	@ 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005cdc:	f3bf 8f4f 	dsb	sy
}
 8005ce0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005ce2:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <__NVIC_SystemReset+0x24>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005cea:	4904      	ldr	r1, [pc, #16]	@ (8005cfc <__NVIC_SystemReset+0x24>)
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <__NVIC_SystemReset+0x28>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005cf2:	f3bf 8f4f 	dsb	sy
}
 8005cf6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <__NVIC_SystemReset+0x20>
 8005cfc:	e000ed00 	.word	0xe000ed00
 8005d00:	05fa0004 	.word	0x05fa0004

08005d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ff35 	bl	8005b7c <__NVIC_SetPriorityGrouping>
}
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	4603      	mov	r3, r0
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d2c:	f7ff ff4a 	bl	8005bc4 <__NVIC_GetPriorityGrouping>
 8005d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	6978      	ldr	r0, [r7, #20]
 8005d38:	f7ff ff9a 	bl	8005c70 <NVIC_EncodePriority>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d42:	4611      	mov	r1, r2
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ff69 	bl	8005c1c <__NVIC_SetPriority>
}
 8005d4a:	bf00      	nop
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	4603      	mov	r3, r0
 8005d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff ff3d 	bl	8005be0 <__NVIC_EnableIRQ>
}
 8005d66:	bf00      	nop
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005d72:	f7ff ffb1 	bl	8005cd8 <__NVIC_SystemReset>
	...

08005d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b089      	sub	sp, #36	@ 0x24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	e159      	b.n	8006048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d94:	2201      	movs	r2, #1
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4013      	ands	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	f040 8148 	bne.w	8006042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d005      	beq.n	8005dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d130      	bne.n	8005e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4013      	ands	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e00:	2201      	movs	r2, #1
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f003 0201 	and.w	r2, r3, #1
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d017      	beq.n	8005e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	2203      	movs	r2, #3
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d123      	bne.n	8005ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	08da      	lsrs	r2, r3, #3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3208      	adds	r2, #8
 8005e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	220f      	movs	r2, #15
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	43db      	mvns	r3, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4013      	ands	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	08da      	lsrs	r2, r3, #3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3208      	adds	r2, #8
 8005eb6:	69b9      	ldr	r1, [r7, #24]
 8005eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	2203      	movs	r2, #3
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f003 0203 	and.w	r2, r3, #3
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80a2 	beq.w	8006042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	4b57      	ldr	r3, [pc, #348]	@ (8006060 <HAL_GPIO_Init+0x2e8>)
 8005f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f06:	4a56      	ldr	r2, [pc, #344]	@ (8006060 <HAL_GPIO_Init+0x2e8>)
 8005f08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f0e:	4b54      	ldr	r3, [pc, #336]	@ (8006060 <HAL_GPIO_Init+0x2e8>)
 8005f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f1a:	4a52      	ldr	r2, [pc, #328]	@ (8006064 <HAL_GPIO_Init+0x2ec>)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	089b      	lsrs	r3, r3, #2
 8005f20:	3302      	adds	r3, #2
 8005f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	220f      	movs	r2, #15
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	43db      	mvns	r3, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a49      	ldr	r2, [pc, #292]	@ (8006068 <HAL_GPIO_Init+0x2f0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d019      	beq.n	8005f7a <HAL_GPIO_Init+0x202>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a48      	ldr	r2, [pc, #288]	@ (800606c <HAL_GPIO_Init+0x2f4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_GPIO_Init+0x1fe>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a47      	ldr	r2, [pc, #284]	@ (8006070 <HAL_GPIO_Init+0x2f8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00d      	beq.n	8005f72 <HAL_GPIO_Init+0x1fa>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a46      	ldr	r2, [pc, #280]	@ (8006074 <HAL_GPIO_Init+0x2fc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <HAL_GPIO_Init+0x1f6>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a45      	ldr	r2, [pc, #276]	@ (8006078 <HAL_GPIO_Init+0x300>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d101      	bne.n	8005f6a <HAL_GPIO_Init+0x1f2>
 8005f66:	2304      	movs	r3, #4
 8005f68:	e008      	b.n	8005f7c <HAL_GPIO_Init+0x204>
 8005f6a:	2307      	movs	r3, #7
 8005f6c:	e006      	b.n	8005f7c <HAL_GPIO_Init+0x204>
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e004      	b.n	8005f7c <HAL_GPIO_Init+0x204>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e002      	b.n	8005f7c <HAL_GPIO_Init+0x204>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <HAL_GPIO_Init+0x204>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	f002 0203 	and.w	r2, r2, #3
 8005f82:	0092      	lsls	r2, r2, #2
 8005f84:	4093      	lsls	r3, r2
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f8c:	4935      	ldr	r1, [pc, #212]	@ (8006064 <HAL_GPIO_Init+0x2ec>)
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	3302      	adds	r3, #2
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f9a:	4b38      	ldr	r3, [pc, #224]	@ (800607c <HAL_GPIO_Init+0x304>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800607c <HAL_GPIO_Init+0x304>)
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	@ (800607c <HAL_GPIO_Init+0x304>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fe8:	4a24      	ldr	r2, [pc, #144]	@ (800607c <HAL_GPIO_Init+0x304>)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fee:	4b23      	ldr	r3, [pc, #140]	@ (800607c <HAL_GPIO_Init+0x304>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006012:	4a1a      	ldr	r2, [pc, #104]	@ (800607c <HAL_GPIO_Init+0x304>)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006018:	4b18      	ldr	r3, [pc, #96]	@ (800607c <HAL_GPIO_Init+0x304>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	43db      	mvns	r3, r3
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	4013      	ands	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800603c:	4a0f      	ldr	r2, [pc, #60]	@ (800607c <HAL_GPIO_Init+0x304>)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3301      	adds	r3, #1
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	2b0f      	cmp	r3, #15
 800604c:	f67f aea2 	bls.w	8005d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	3724      	adds	r7, #36	@ 0x24
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800
 8006064:	40013800 	.word	0x40013800
 8006068:	40020000 	.word	0x40020000
 800606c:	40020400 	.word	0x40020400
 8006070:	40020800 	.word	0x40020800
 8006074:	40020c00 	.word	0x40020c00
 8006078:	40021000 	.word	0x40021000
 800607c:	40013c00 	.word	0x40013c00

08006080 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e0bb      	b.n	8006214 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800609c:	2201      	movs	r2, #1
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4013      	ands	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	f040 80ab 	bne.w	800620e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80060b8:	4a5c      	ldr	r2, [pc, #368]	@ (800622c <HAL_GPIO_DeInit+0x1ac>)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	089b      	lsrs	r3, r3, #2
 80060be:	3302      	adds	r3, #2
 80060c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f003 0303 	and.w	r3, r3, #3
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	220f      	movs	r2, #15
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	4013      	ands	r3, r2
 80060d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a54      	ldr	r2, [pc, #336]	@ (8006230 <HAL_GPIO_DeInit+0x1b0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d019      	beq.n	8006116 <HAL_GPIO_DeInit+0x96>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a53      	ldr	r2, [pc, #332]	@ (8006234 <HAL_GPIO_DeInit+0x1b4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d013      	beq.n	8006112 <HAL_GPIO_DeInit+0x92>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a52      	ldr	r2, [pc, #328]	@ (8006238 <HAL_GPIO_DeInit+0x1b8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00d      	beq.n	800610e <HAL_GPIO_DeInit+0x8e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a51      	ldr	r2, [pc, #324]	@ (800623c <HAL_GPIO_DeInit+0x1bc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <HAL_GPIO_DeInit+0x8a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a50      	ldr	r2, [pc, #320]	@ (8006240 <HAL_GPIO_DeInit+0x1c0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d101      	bne.n	8006106 <HAL_GPIO_DeInit+0x86>
 8006102:	2304      	movs	r3, #4
 8006104:	e008      	b.n	8006118 <HAL_GPIO_DeInit+0x98>
 8006106:	2307      	movs	r3, #7
 8006108:	e006      	b.n	8006118 <HAL_GPIO_DeInit+0x98>
 800610a:	2303      	movs	r3, #3
 800610c:	e004      	b.n	8006118 <HAL_GPIO_DeInit+0x98>
 800610e:	2302      	movs	r3, #2
 8006110:	e002      	b.n	8006118 <HAL_GPIO_DeInit+0x98>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <HAL_GPIO_DeInit+0x98>
 8006116:	2300      	movs	r3, #0
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	f002 0203 	and.w	r2, r2, #3
 800611e:	0092      	lsls	r2, r2, #2
 8006120:	4093      	lsls	r3, r2
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d132      	bne.n	800618e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006128:	4b46      	ldr	r3, [pc, #280]	@ (8006244 <HAL_GPIO_DeInit+0x1c4>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	43db      	mvns	r3, r3
 8006130:	4944      	ldr	r1, [pc, #272]	@ (8006244 <HAL_GPIO_DeInit+0x1c4>)
 8006132:	4013      	ands	r3, r2
 8006134:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006136:	4b43      	ldr	r3, [pc, #268]	@ (8006244 <HAL_GPIO_DeInit+0x1c4>)
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	43db      	mvns	r3, r3
 800613e:	4941      	ldr	r1, [pc, #260]	@ (8006244 <HAL_GPIO_DeInit+0x1c4>)
 8006140:	4013      	ands	r3, r2
 8006142:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006144:	4b3f      	ldr	r3, [pc, #252]	@ (8006244 <HAL_GPIO_DeInit+0x1c4>)
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	43db      	mvns	r3, r3
 800614c:	493d      	ldr	r1, [pc, #244]	@ (8006244 <HAL_GPIO_DeInit+0x1c4>)
 800614e:	4013      	ands	r3, r2
 8006150:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006152:	4b3c      	ldr	r3, [pc, #240]	@ (8006244 <HAL_GPIO_DeInit+0x1c4>)
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	43db      	mvns	r3, r3
 800615a:	493a      	ldr	r1, [pc, #232]	@ (8006244 <HAL_GPIO_DeInit+0x1c4>)
 800615c:	4013      	ands	r3, r2
 800615e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	220f      	movs	r2, #15
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006170:	4a2e      	ldr	r2, [pc, #184]	@ (800622c <HAL_GPIO_DeInit+0x1ac>)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	3302      	adds	r3, #2
 8006178:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	43da      	mvns	r2, r3
 8006180:	482a      	ldr	r0, [pc, #168]	@ (800622c <HAL_GPIO_DeInit+0x1ac>)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	089b      	lsrs	r3, r3, #2
 8006186:	400a      	ands	r2, r1
 8006188:	3302      	adds	r3, #2
 800618a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	2103      	movs	r1, #3
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	401a      	ands	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	08da      	lsrs	r2, r3, #3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3208      	adds	r2, #8
 80061ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	220f      	movs	r2, #15
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	08d2      	lsrs	r2, r2, #3
 80061c4:	4019      	ands	r1, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3208      	adds	r2, #8
 80061ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	2103      	movs	r1, #3
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	401a      	ands	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	2101      	movs	r1, #1
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	fa01 f303 	lsl.w	r3, r1, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	401a      	ands	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	2103      	movs	r1, #3
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	43db      	mvns	r3, r3
 8006208:	401a      	ands	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	3301      	adds	r3, #1
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b0f      	cmp	r3, #15
 8006218:	f67f af40 	bls.w	800609c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40013800 	.word	0x40013800
 8006230:	40020000 	.word	0x40020000
 8006234:	40020400 	.word	0x40020400
 8006238:	40020800 	.word	0x40020800
 800623c:	40020c00 	.word	0x40020c00
 8006240:	40021000 	.word	0x40021000
 8006244:	40013c00 	.word	0x40013c00

08006248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	887b      	ldrh	r3, [r7, #2]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e001      	b.n	800626a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
 8006284:	4613      	mov	r3, r2
 8006286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006288:	787b      	ldrb	r3, [r7, #1]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800628e:	887a      	ldrh	r2, [r7, #2]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006294:	e003      	b.n	800629e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006296:	887b      	ldrh	r3, [r7, #2]
 8006298:	041a      	lsls	r2, r3, #16
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	619a      	str	r2, [r3, #24]
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e12b      	b.n	8006516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fb fe92 	bl	8001ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2224      	movs	r2, #36	@ 0x24
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0201 	bic.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800630e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006310:	f001 fa38 	bl	8007784 <HAL_RCC_GetPCLK1Freq>
 8006314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	4a81      	ldr	r2, [pc, #516]	@ (8006520 <HAL_I2C_Init+0x274>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d807      	bhi.n	8006330 <HAL_I2C_Init+0x84>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4a80      	ldr	r2, [pc, #512]	@ (8006524 <HAL_I2C_Init+0x278>)
 8006324:	4293      	cmp	r3, r2
 8006326:	bf94      	ite	ls
 8006328:	2301      	movls	r3, #1
 800632a:	2300      	movhi	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	e006      	b.n	800633e <HAL_I2C_Init+0x92>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a7d      	ldr	r2, [pc, #500]	@ (8006528 <HAL_I2C_Init+0x27c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	bf94      	ite	ls
 8006338:	2301      	movls	r3, #1
 800633a:	2300      	movhi	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e0e7      	b.n	8006516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a78      	ldr	r2, [pc, #480]	@ (800652c <HAL_I2C_Init+0x280>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0c9b      	lsrs	r3, r3, #18
 8006350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4a6a      	ldr	r2, [pc, #424]	@ (8006520 <HAL_I2C_Init+0x274>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d802      	bhi.n	8006380 <HAL_I2C_Init+0xd4>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	3301      	adds	r3, #1
 800637e:	e009      	b.n	8006394 <HAL_I2C_Init+0xe8>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	4a69      	ldr	r2, [pc, #420]	@ (8006530 <HAL_I2C_Init+0x284>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	099b      	lsrs	r3, r3, #6
 8006392:	3301      	adds	r3, #1
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	430b      	orrs	r3, r1
 800639a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80063a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	495c      	ldr	r1, [pc, #368]	@ (8006520 <HAL_I2C_Init+0x274>)
 80063b0:	428b      	cmp	r3, r1
 80063b2:	d819      	bhi.n	80063e8 <HAL_I2C_Init+0x13c>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	1e59      	subs	r1, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	fbb1 f3f3 	udiv	r3, r1, r3
 80063c2:	1c59      	adds	r1, r3, #1
 80063c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80063c8:	400b      	ands	r3, r1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <HAL_I2C_Init+0x138>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1e59      	subs	r1, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80063dc:	3301      	adds	r3, #1
 80063de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e2:	e051      	b.n	8006488 <HAL_I2C_Init+0x1dc>
 80063e4:	2304      	movs	r3, #4
 80063e6:	e04f      	b.n	8006488 <HAL_I2C_Init+0x1dc>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d111      	bne.n	8006414 <HAL_I2C_Init+0x168>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	1e58      	subs	r0, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	440b      	add	r3, r1
 80063fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006402:	3301      	adds	r3, #1
 8006404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	e012      	b.n	800643a <HAL_I2C_Init+0x18e>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	1e58      	subs	r0, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6859      	ldr	r1, [r3, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	0099      	lsls	r1, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	fbb0 f3f3 	udiv	r3, r0, r3
 800642a:	3301      	adds	r3, #1
 800642c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006430:	2b00      	cmp	r3, #0
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <HAL_I2C_Init+0x196>
 800643e:	2301      	movs	r3, #1
 8006440:	e022      	b.n	8006488 <HAL_I2C_Init+0x1dc>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10e      	bne.n	8006468 <HAL_I2C_Init+0x1bc>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1e58      	subs	r0, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6859      	ldr	r1, [r3, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	440b      	add	r3, r1
 8006458:	fbb0 f3f3 	udiv	r3, r0, r3
 800645c:	3301      	adds	r3, #1
 800645e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006466:	e00f      	b.n	8006488 <HAL_I2C_Init+0x1dc>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	1e58      	subs	r0, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6859      	ldr	r1, [r3, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	0099      	lsls	r1, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	fbb0 f3f3 	udiv	r3, r0, r3
 800647e:	3301      	adds	r3, #1
 8006480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006484:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	6809      	ldr	r1, [r1, #0]
 800648c:	4313      	orrs	r3, r2
 800648e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80064b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6911      	ldr	r1, [r2, #16]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68d2      	ldr	r2, [r2, #12]
 80064c2:	4311      	orrs	r1, r2
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	000186a0 	.word	0x000186a0
 8006524:	001e847f 	.word	0x001e847f
 8006528:	003d08ff 	.word	0x003d08ff
 800652c:	431bde83 	.word	0x431bde83
 8006530:	10624dd3 	.word	0x10624dd3

08006534 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e021      	b.n	800658a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2224      	movs	r2, #36	@ 0x24
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0201 	bic.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fb fd94 	bl	800208c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
	...

08006594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	607a      	str	r2, [r7, #4]
 800659e:	461a      	mov	r2, r3
 80065a0:	460b      	mov	r3, r1
 80065a2:	817b      	strh	r3, [r7, #10]
 80065a4:	4613      	mov	r3, r2
 80065a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065a8:	f7ff fab8 	bl	8005b1c <HAL_GetTick>
 80065ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	f040 80e0 	bne.w	800677c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	2319      	movs	r3, #25
 80065c2:	2201      	movs	r2, #1
 80065c4:	4970      	ldr	r1, [pc, #448]	@ (8006788 <HAL_I2C_Master_Transmit+0x1f4>)
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fa92 	bl	8006af0 <I2C_WaitOnFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065d2:	2302      	movs	r3, #2
 80065d4:	e0d3      	b.n	800677e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_I2C_Master_Transmit+0x50>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e0cc      	b.n	800677e <HAL_I2C_Master_Transmit+0x1ea>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d007      	beq.n	800660a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2221      	movs	r2, #33	@ 0x21
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2210      	movs	r2, #16
 8006626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	893a      	ldrh	r2, [r7, #8]
 800663a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4a50      	ldr	r2, [pc, #320]	@ (800678c <HAL_I2C_Master_Transmit+0x1f8>)
 800664a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800664c:	8979      	ldrh	r1, [r7, #10]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	6a3a      	ldr	r2, [r7, #32]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f9ca 	bl	80069ec <I2C_MasterRequestWrite>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e08d      	b.n	800677e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006678:	e066      	b.n	8006748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	6a39      	ldr	r1, [r7, #32]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fb50 	bl	8006d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00d      	beq.n	80066a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668e:	2b04      	cmp	r3, #4
 8006690:	d107      	bne.n	80066a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e06b      	b.n	800677e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d11b      	bne.n	800671c <HAL_I2C_Master_Transmit+0x188>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d017      	beq.n	800671c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	6a39      	ldr	r1, [r7, #32]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fb47 	bl	8006db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00d      	beq.n	8006748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006730:	2b04      	cmp	r3, #4
 8006732:	d107      	bne.n	8006744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e01a      	b.n	800677e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674c:	2b00      	cmp	r3, #0
 800674e:	d194      	bne.n	800667a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800675e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	e000      	b.n	800677e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800677c:	2302      	movs	r3, #2
  }
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	00100002 	.word	0x00100002
 800678c:	ffff0000 	.word	0xffff0000

08006790 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	@ 0x28
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	460b      	mov	r3, r1
 800679e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80067a0:	f7ff f9bc 	bl	8005b1c <HAL_GetTick>
 80067a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	f040 8111 	bne.w	80069da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	2319      	movs	r3, #25
 80067be:	2201      	movs	r2, #1
 80067c0:	4988      	ldr	r1, [pc, #544]	@ (80069e4 <HAL_I2C_IsDeviceReady+0x254>)
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f994 	bl	8006af0 <I2C_WaitOnFlagUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80067ce:	2302      	movs	r3, #2
 80067d0:	e104      	b.n	80069dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_I2C_IsDeviceReady+0x50>
 80067dc:	2302      	movs	r3, #2
 80067de:	e0fd      	b.n	80069dc <HAL_I2C_IsDeviceReady+0x24c>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d007      	beq.n	8006806 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006814:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2224      	movs	r2, #36	@ 0x24
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4a70      	ldr	r2, [pc, #448]	@ (80069e8 <HAL_I2C_IsDeviceReady+0x258>)
 8006828:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006838:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2200      	movs	r2, #0
 8006842:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f952 	bl	8006af0 <I2C_WaitOnFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006860:	d103      	bne.n	800686a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006868:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e0b6      	b.n	80069dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800686e:	897b      	ldrh	r3, [r7, #10]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800687c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800687e:	f7ff f94d 	bl	8005b1c <HAL_GetTick>
 8006882:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b02      	cmp	r3, #2
 8006890:	bf0c      	ite	eq
 8006892:	2301      	moveq	r3, #1
 8006894:	2300      	movne	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a8:	bf0c      	ite	eq
 80068aa:	2301      	moveq	r3, #1
 80068ac:	2300      	movne	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80068b2:	e025      	b.n	8006900 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068b4:	f7ff f932 	bl	8005b1c <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <HAL_I2C_IsDeviceReady+0x13a>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d103      	bne.n	80068d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	22a0      	movs	r2, #160	@ 0xa0
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f6:	bf0c      	ite	eq
 80068f8:	2301      	moveq	r3, #1
 80068fa:	2300      	movne	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2ba0      	cmp	r3, #160	@ 0xa0
 800690a:	d005      	beq.n	8006918 <HAL_I2C_IsDeviceReady+0x188>
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d102      	bne.n	8006918 <HAL_I2C_IsDeviceReady+0x188>
 8006912:	7dbb      	ldrb	r3, [r7, #22]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0cd      	beq.n	80068b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d129      	bne.n	8006982 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800693c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	2319      	movs	r3, #25
 800695a:	2201      	movs	r2, #1
 800695c:	4921      	ldr	r1, [pc, #132]	@ (80069e4 <HAL_I2C_IsDeviceReady+0x254>)
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 f8c6 	bl	8006af0 <I2C_WaitOnFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e036      	b.n	80069dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	e02c      	b.n	80069dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006990:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800699a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	2319      	movs	r3, #25
 80069a2:	2201      	movs	r2, #1
 80069a4:	490f      	ldr	r1, [pc, #60]	@ (80069e4 <HAL_I2C_IsDeviceReady+0x254>)
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f8a2 	bl	8006af0 <I2C_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e012      	b.n	80069dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	3301      	adds	r3, #1
 80069ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	f4ff af32 	bcc.w	800682a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	00100002 	.word	0x00100002
 80069e8:	ffff0000 	.word	0xffff0000

080069ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	607a      	str	r2, [r7, #4]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	460b      	mov	r3, r1
 80069fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d006      	beq.n	8006a16 <I2C_MasterRequestWrite+0x2a>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d003      	beq.n	8006a16 <I2C_MasterRequestWrite+0x2a>
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a14:	d108      	bne.n	8006a28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e00b      	b.n	8006a40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2c:	2b12      	cmp	r3, #18
 8006a2e:	d107      	bne.n	8006a40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f84f 	bl	8006af0 <I2C_WaitOnFlagUntilTimeout>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00d      	beq.n	8006a74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a66:	d103      	bne.n	8006a70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e035      	b.n	8006ae0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a7c:	d108      	bne.n	8006a90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a7e:	897b      	ldrh	r3, [r7, #10]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a8c:	611a      	str	r2, [r3, #16]
 8006a8e:	e01b      	b.n	8006ac8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a90:	897b      	ldrh	r3, [r7, #10]
 8006a92:	11db      	asrs	r3, r3, #7
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	f003 0306 	and.w	r3, r3, #6
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	f063 030f 	orn	r3, r3, #15
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	490e      	ldr	r1, [pc, #56]	@ (8006ae8 <I2C_MasterRequestWrite+0xfc>)
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f898 	bl	8006be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e010      	b.n	8006ae0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006abe:	897b      	ldrh	r3, [r7, #10]
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4907      	ldr	r1, [pc, #28]	@ (8006aec <I2C_MasterRequestWrite+0x100>)
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 f888 	bl	8006be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	00010008 	.word	0x00010008
 8006aec:	00010002 	.word	0x00010002

08006af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	603b      	str	r3, [r7, #0]
 8006afc:	4613      	mov	r3, r2
 8006afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b00:	e048      	b.n	8006b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b08:	d044      	beq.n	8006b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0a:	f7ff f807 	bl	8005b1c <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d302      	bcc.n	8006b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d139      	bne.n	8006b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d10d      	bne.n	8006b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	43da      	mvns	r2, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4013      	ands	r3, r2
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	e00c      	b.n	8006b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	43da      	mvns	r2, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4013      	ands	r3, r2
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bf0c      	ite	eq
 8006b58:	2301      	moveq	r3, #1
 8006b5a:	2300      	movne	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d116      	bne.n	8006b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	f043 0220 	orr.w	r2, r3, #32
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e023      	b.n	8006bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	0c1b      	lsrs	r3, r3, #16
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d10d      	bne.n	8006bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	43da      	mvns	r2, r3
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bf0c      	ite	eq
 8006bb0:	2301      	moveq	r3, #1
 8006bb2:	2300      	movne	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	e00c      	b.n	8006bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	43da      	mvns	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bf0c      	ite	eq
 8006bcc:	2301      	moveq	r3, #1
 8006bce:	2300      	movne	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d093      	beq.n	8006b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bf2:	e071      	b.n	8006cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c02:	d123      	bne.n	8006c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c38:	f043 0204 	orr.w	r2, r3, #4
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e067      	b.n	8006d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c52:	d041      	beq.n	8006cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c54:	f7fe ff62 	bl	8005b1c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d302      	bcc.n	8006c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d136      	bne.n	8006cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d10c      	bne.n	8006c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	43da      	mvns	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bf14      	ite	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	2300      	moveq	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	e00b      	b.n	8006ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	43da      	mvns	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bf14      	ite	ne
 8006ca0:	2301      	movne	r3, #1
 8006ca2:	2300      	moveq	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d016      	beq.n	8006cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc4:	f043 0220 	orr.w	r2, r3, #32
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e021      	b.n	8006d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	0c1b      	lsrs	r3, r3, #16
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d10c      	bne.n	8006cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	43da      	mvns	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	4013      	ands	r3, r2
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bf14      	ite	ne
 8006cf4:	2301      	movne	r3, #1
 8006cf6:	2300      	moveq	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	e00b      	b.n	8006d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	43da      	mvns	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4013      	ands	r3, r2
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f47f af6d 	bne.w	8006bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d30:	e034      	b.n	8006d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f886 	bl	8006e44 <I2C_IsAcknowledgeFailed>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e034      	b.n	8006dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d48:	d028      	beq.n	8006d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4a:	f7fe fee7 	bl	8005b1c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d302      	bcc.n	8006d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11d      	bne.n	8006d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6a:	2b80      	cmp	r3, #128	@ 0x80
 8006d6c:	d016      	beq.n	8006d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e007      	b.n	8006dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da6:	2b80      	cmp	r3, #128	@ 0x80
 8006da8:	d1c3      	bne.n	8006d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dc0:	e034      	b.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f83e 	bl	8006e44 <I2C_IsAcknowledgeFailed>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e034      	b.n	8006e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dd8:	d028      	beq.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dda:	f7fe fe9f 	bl	8005b1c <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d302      	bcc.n	8006df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11d      	bne.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d016      	beq.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e18:	f043 0220 	orr.w	r2, r3, #32
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e007      	b.n	8006e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d1c3      	bne.n	8006dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5a:	d11b      	bne.n	8006e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	f043 0204 	orr.w	r2, r3, #4
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e267      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d075      	beq.n	8006fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ec2:	4b88      	ldr	r3, [pc, #544]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d00c      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ece:	4b85      	ldr	r3, [pc, #532]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d112      	bne.n	8006f00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eda:	4b82      	ldr	r3, [pc, #520]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ee6:	d10b      	bne.n	8006f00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05b      	beq.n	8006fac <HAL_RCC_OscConfig+0x108>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d157      	bne.n	8006fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e242      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f08:	d106      	bne.n	8006f18 <HAL_RCC_OscConfig+0x74>
 8006f0a:	4b76      	ldr	r3, [pc, #472]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a75      	ldr	r2, [pc, #468]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	e01d      	b.n	8006f54 <HAL_RCC_OscConfig+0xb0>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCC_OscConfig+0x98>
 8006f22:	4b70      	ldr	r3, [pc, #448]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6f      	ldr	r2, [pc, #444]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a6c      	ldr	r2, [pc, #432]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCC_OscConfig+0xb0>
 8006f3c:	4b69      	ldr	r3, [pc, #420]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a68      	ldr	r2, [pc, #416]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b66      	ldr	r3, [pc, #408]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a65      	ldr	r2, [pc, #404]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d013      	beq.n	8006f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5c:	f7fe fdde 	bl	8005b1c <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f64:	f7fe fdda 	bl	8005b1c <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b64      	cmp	r3, #100	@ 0x64
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e207      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f76:	4b5b      	ldr	r3, [pc, #364]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0f0      	beq.n	8006f64 <HAL_RCC_OscConfig+0xc0>
 8006f82:	e014      	b.n	8006fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fe fdca 	bl	8005b1c <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f8c:	f7fe fdc6 	bl	8005b1c <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b64      	cmp	r3, #100	@ 0x64
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e1f3      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f9e:	4b51      	ldr	r3, [pc, #324]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0xe8>
 8006faa:	e000      	b.n	8006fae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d063      	beq.n	8007082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006fba:	4b4a      	ldr	r3, [pc, #296]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 030c 	and.w	r3, r3, #12
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fc6:	4b47      	ldr	r3, [pc, #284]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d11c      	bne.n	800700c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fd2:	4b44      	ldr	r3, [pc, #272]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fde:	4b41      	ldr	r3, [pc, #260]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x152>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d001      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e1c7      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4937      	ldr	r1, [pc, #220]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007006:	4313      	orrs	r3, r2
 8007008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800700a:	e03a      	b.n	8007082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d020      	beq.n	8007056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007014:	4b34      	ldr	r3, [pc, #208]	@ (80070e8 <HAL_RCC_OscConfig+0x244>)
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701a:	f7fe fd7f 	bl	8005b1c <HAL_GetTick>
 800701e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007020:	e008      	b.n	8007034 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007022:	f7fe fd7b 	bl	8005b1c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e1a8      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007034:	4b2b      	ldr	r3, [pc, #172]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f0      	beq.n	8007022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007040:	4b28      	ldr	r3, [pc, #160]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4925      	ldr	r1, [pc, #148]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]
 8007054:	e015      	b.n	8007082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007056:	4b24      	ldr	r3, [pc, #144]	@ (80070e8 <HAL_RCC_OscConfig+0x244>)
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705c:	f7fe fd5e 	bl	8005b1c <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007064:	f7fe fd5a 	bl	8005b1c <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b02      	cmp	r3, #2
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e187      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007076:	4b1b      	ldr	r3, [pc, #108]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d036      	beq.n	80070fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d016      	beq.n	80070c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007096:	4b15      	ldr	r3, [pc, #84]	@ (80070ec <HAL_RCC_OscConfig+0x248>)
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709c:	f7fe fd3e 	bl	8005b1c <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070a4:	f7fe fd3a 	bl	8005b1c <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e167      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070b6:	4b0b      	ldr	r3, [pc, #44]	@ (80070e4 <HAL_RCC_OscConfig+0x240>)
 80070b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0f0      	beq.n	80070a4 <HAL_RCC_OscConfig+0x200>
 80070c2:	e01b      	b.n	80070fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070c4:	4b09      	ldr	r3, [pc, #36]	@ (80070ec <HAL_RCC_OscConfig+0x248>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070ca:	f7fe fd27 	bl	8005b1c <HAL_GetTick>
 80070ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070d0:	e00e      	b.n	80070f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070d2:	f7fe fd23 	bl	8005b1c <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d907      	bls.n	80070f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e150      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
 80070e4:	40023800 	.word	0x40023800
 80070e8:	42470000 	.word	0x42470000
 80070ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f0:	4b88      	ldr	r3, [pc, #544]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80070f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1ea      	bne.n	80070d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 8097 	beq.w	8007238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800710e:	4b81      	ldr	r3, [pc, #516]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10f      	bne.n	800713a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800711a:	2300      	movs	r3, #0
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	4b7d      	ldr	r3, [pc, #500]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007122:	4a7c      	ldr	r2, [pc, #496]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007128:	6413      	str	r3, [r2, #64]	@ 0x40
 800712a:	4b7a      	ldr	r3, [pc, #488]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007132:	60bb      	str	r3, [r7, #8]
 8007134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713a:	4b77      	ldr	r3, [pc, #476]	@ (8007318 <HAL_RCC_OscConfig+0x474>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007142:	2b00      	cmp	r3, #0
 8007144:	d118      	bne.n	8007178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007146:	4b74      	ldr	r3, [pc, #464]	@ (8007318 <HAL_RCC_OscConfig+0x474>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a73      	ldr	r2, [pc, #460]	@ (8007318 <HAL_RCC_OscConfig+0x474>)
 800714c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007152:	f7fe fce3 	bl	8005b1c <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800715a:	f7fe fcdf 	bl	8005b1c <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e10c      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800716c:	4b6a      	ldr	r3, [pc, #424]	@ (8007318 <HAL_RCC_OscConfig+0x474>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d106      	bne.n	800718e <HAL_RCC_OscConfig+0x2ea>
 8007180:	4b64      	ldr	r3, [pc, #400]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007184:	4a63      	ldr	r2, [pc, #396]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	6713      	str	r3, [r2, #112]	@ 0x70
 800718c:	e01c      	b.n	80071c8 <HAL_RCC_OscConfig+0x324>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b05      	cmp	r3, #5
 8007194:	d10c      	bne.n	80071b0 <HAL_RCC_OscConfig+0x30c>
 8007196:	4b5f      	ldr	r3, [pc, #380]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800719a:	4a5e      	ldr	r2, [pc, #376]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 800719c:	f043 0304 	orr.w	r3, r3, #4
 80071a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80071a2:	4b5c      	ldr	r3, [pc, #368]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80071a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80071a8:	f043 0301 	orr.w	r3, r3, #1
 80071ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ae:	e00b      	b.n	80071c8 <HAL_RCC_OscConfig+0x324>
 80071b0:	4b58      	ldr	r3, [pc, #352]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80071b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b4:	4a57      	ldr	r2, [pc, #348]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80071bc:	4b55      	ldr	r3, [pc, #340]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80071be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c0:	4a54      	ldr	r2, [pc, #336]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80071c2:	f023 0304 	bic.w	r3, r3, #4
 80071c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d015      	beq.n	80071fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d0:	f7fe fca4 	bl	8005b1c <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d6:	e00a      	b.n	80071ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d8:	f7fe fca0 	bl	8005b1c <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e0cb      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ee:	4b49      	ldr	r3, [pc, #292]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80071f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0ee      	beq.n	80071d8 <HAL_RCC_OscConfig+0x334>
 80071fa:	e014      	b.n	8007226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071fc:	f7fe fc8e 	bl	8005b1c <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007202:	e00a      	b.n	800721a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007204:	f7fe fc8a 	bl	8005b1c <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e0b5      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800721a:	4b3e      	ldr	r3, [pc, #248]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 800721c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1ee      	bne.n	8007204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d105      	bne.n	8007238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800722c:	4b39      	ldr	r3, [pc, #228]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 800722e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007230:	4a38      	ldr	r2, [pc, #224]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007236:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80a1 	beq.w	8007384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007242:	4b34      	ldr	r3, [pc, #208]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 030c 	and.w	r3, r3, #12
 800724a:	2b08      	cmp	r3, #8
 800724c:	d05c      	beq.n	8007308 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d141      	bne.n	80072da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007256:	4b31      	ldr	r3, [pc, #196]	@ (800731c <HAL_RCC_OscConfig+0x478>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725c:	f7fe fc5e 	bl	8005b1c <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007264:	f7fe fc5a 	bl	8005b1c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e087      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007276:	4b27      	ldr	r3, [pc, #156]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69da      	ldr	r2, [r3, #28]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007290:	019b      	lsls	r3, r3, #6
 8007292:	431a      	orrs	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	3b01      	subs	r3, #1
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	491b      	ldr	r1, [pc, #108]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072ac:	4b1b      	ldr	r3, [pc, #108]	@ (800731c <HAL_RCC_OscConfig+0x478>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b2:	f7fe fc33 	bl	8005b1c <HAL_GetTick>
 80072b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ba:	f7fe fc2f 	bl	8005b1c <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e05c      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072cc:	4b11      	ldr	r3, [pc, #68]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0f0      	beq.n	80072ba <HAL_RCC_OscConfig+0x416>
 80072d8:	e054      	b.n	8007384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072da:	4b10      	ldr	r3, [pc, #64]	@ (800731c <HAL_RCC_OscConfig+0x478>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072e0:	f7fe fc1c 	bl	8005b1c <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e8:	f7fe fc18 	bl	8005b1c <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e045      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072fa:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <HAL_RCC_OscConfig+0x470>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x444>
 8007306:	e03d      	b.n	8007384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d107      	bne.n	8007320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e038      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
 8007314:	40023800 	.word	0x40023800
 8007318:	40007000 	.word	0x40007000
 800731c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007320:	4b1b      	ldr	r3, [pc, #108]	@ (8007390 <HAL_RCC_OscConfig+0x4ec>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d028      	beq.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007338:	429a      	cmp	r2, r3
 800733a:	d121      	bne.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d11a      	bne.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007350:	4013      	ands	r3, r2
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007358:	4293      	cmp	r3, r2
 800735a:	d111      	bne.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	3b01      	subs	r3, #1
 800736a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800736c:	429a      	cmp	r2, r3
 800736e:	d107      	bne.n	8007380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800737c:	429a      	cmp	r2, r3
 800737e:	d001      	beq.n	8007384 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	40023800 	.word	0x40023800

08007394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e0cc      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073a8:	4b68      	ldr	r3, [pc, #416]	@ (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d90c      	bls.n	80073d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b6:	4b65      	ldr	r3, [pc, #404]	@ (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073be:	4b63      	ldr	r3, [pc, #396]	@ (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d001      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0b8      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d020      	beq.n	800741e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073e8:	4b59      	ldr	r3, [pc, #356]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	4a58      	ldr	r2, [pc, #352]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80073ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80073f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007400:	4b53      	ldr	r3, [pc, #332]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	4a52      	ldr	r2, [pc, #328]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007406:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800740a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800740c:	4b50      	ldr	r3, [pc, #320]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	494d      	ldr	r1, [pc, #308]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 800741a:	4313      	orrs	r3, r2
 800741c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d044      	beq.n	80074b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d107      	bne.n	8007442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007432:	4b47      	ldr	r3, [pc, #284]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d119      	bne.n	8007472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e07f      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d003      	beq.n	8007452 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800744e:	2b03      	cmp	r3, #3
 8007450:	d107      	bne.n	8007462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007452:	4b3f      	ldr	r3, [pc, #252]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e06f      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007462:	4b3b      	ldr	r3, [pc, #236]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e067      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007472:	4b37      	ldr	r3, [pc, #220]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f023 0203 	bic.w	r2, r3, #3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4934      	ldr	r1, [pc, #208]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007480:	4313      	orrs	r3, r2
 8007482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007484:	f7fe fb4a 	bl	8005b1c <HAL_GetTick>
 8007488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800748a:	e00a      	b.n	80074a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800748c:	f7fe fb46 	bl	8005b1c <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800749a:	4293      	cmp	r3, r2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e04f      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 020c 	and.w	r2, r3, #12
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d1eb      	bne.n	800748c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074b4:	4b25      	ldr	r3, [pc, #148]	@ (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d20c      	bcs.n	80074dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c2:	4b22      	ldr	r3, [pc, #136]	@ (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ca:	4b20      	ldr	r3, [pc, #128]	@ (800754c <HAL_RCC_ClockConfig+0x1b8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d001      	beq.n	80074dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e032      	b.n	8007542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0304 	and.w	r3, r3, #4
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074e8:	4b19      	ldr	r3, [pc, #100]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4916      	ldr	r1, [pc, #88]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d009      	beq.n	800751a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007506:	4b12      	ldr	r3, [pc, #72]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	490e      	ldr	r1, [pc, #56]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007516:	4313      	orrs	r3, r2
 8007518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800751a:	f000 f821 	bl	8007560 <HAL_RCC_GetSysClockFreq>
 800751e:	4602      	mov	r2, r0
 8007520:	4b0b      	ldr	r3, [pc, #44]	@ (8007550 <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	490a      	ldr	r1, [pc, #40]	@ (8007554 <HAL_RCC_ClockConfig+0x1c0>)
 800752c:	5ccb      	ldrb	r3, [r1, r3]
 800752e:	fa22 f303 	lsr.w	r3, r2, r3
 8007532:	4a09      	ldr	r2, [pc, #36]	@ (8007558 <HAL_RCC_ClockConfig+0x1c4>)
 8007534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007536:	4b09      	ldr	r3, [pc, #36]	@ (800755c <HAL_RCC_ClockConfig+0x1c8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7fb f85a 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	40023c00 	.word	0x40023c00
 8007550:	40023800 	.word	0x40023800
 8007554:	08033648 	.word	0x08033648
 8007558:	20000008 	.word	0x20000008
 800755c:	20000074 	.word	0x20000074

08007560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007564:	b094      	sub	sp, #80	@ 0x50
 8007566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007578:	4b79      	ldr	r3, [pc, #484]	@ (8007760 <HAL_RCC_GetSysClockFreq+0x200>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 030c 	and.w	r3, r3, #12
 8007580:	2b08      	cmp	r3, #8
 8007582:	d00d      	beq.n	80075a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007584:	2b08      	cmp	r3, #8
 8007586:	f200 80e1 	bhi.w	800774c <HAL_RCC_GetSysClockFreq+0x1ec>
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <HAL_RCC_GetSysClockFreq+0x34>
 800758e:	2b04      	cmp	r3, #4
 8007590:	d003      	beq.n	800759a <HAL_RCC_GetSysClockFreq+0x3a>
 8007592:	e0db      	b.n	800774c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007594:	4b73      	ldr	r3, [pc, #460]	@ (8007764 <HAL_RCC_GetSysClockFreq+0x204>)
 8007596:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007598:	e0db      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800759a:	4b73      	ldr	r3, [pc, #460]	@ (8007768 <HAL_RCC_GetSysClockFreq+0x208>)
 800759c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800759e:	e0d8      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007760 <HAL_RCC_GetSysClockFreq+0x200>)
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007760 <HAL_RCC_GetSysClockFreq+0x200>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d063      	beq.n	800767e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007760 <HAL_RCC_GetSysClockFreq+0x200>)
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	099b      	lsrs	r3, r3, #6
 80075bc:	2200      	movs	r2, #0
 80075be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80075c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ca:	2300      	movs	r3, #0
 80075cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f04f 0000 	mov.w	r0, #0
 80075da:	f04f 0100 	mov.w	r1, #0
 80075de:	0159      	lsls	r1, r3, #5
 80075e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075e4:	0150      	lsls	r0, r2, #5
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4621      	mov	r1, r4
 80075ec:	1a51      	subs	r1, r2, r1
 80075ee:	6139      	str	r1, [r7, #16]
 80075f0:	4629      	mov	r1, r5
 80075f2:	eb63 0301 	sbc.w	r3, r3, r1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007604:	4659      	mov	r1, fp
 8007606:	018b      	lsls	r3, r1, #6
 8007608:	4651      	mov	r1, sl
 800760a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800760e:	4651      	mov	r1, sl
 8007610:	018a      	lsls	r2, r1, #6
 8007612:	4651      	mov	r1, sl
 8007614:	ebb2 0801 	subs.w	r8, r2, r1
 8007618:	4659      	mov	r1, fp
 800761a:	eb63 0901 	sbc.w	r9, r3, r1
 800761e:	f04f 0200 	mov.w	r2, #0
 8007622:	f04f 0300 	mov.w	r3, #0
 8007626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800762a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800762e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007632:	4690      	mov	r8, r2
 8007634:	4699      	mov	r9, r3
 8007636:	4623      	mov	r3, r4
 8007638:	eb18 0303 	adds.w	r3, r8, r3
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	462b      	mov	r3, r5
 8007640:	eb49 0303 	adc.w	r3, r9, r3
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007652:	4629      	mov	r1, r5
 8007654:	024b      	lsls	r3, r1, #9
 8007656:	4621      	mov	r1, r4
 8007658:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800765c:	4621      	mov	r1, r4
 800765e:	024a      	lsls	r2, r1, #9
 8007660:	4610      	mov	r0, r2
 8007662:	4619      	mov	r1, r3
 8007664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007666:	2200      	movs	r2, #0
 8007668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800766a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800766c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007670:	f7f9 fb72 	bl	8000d58 <__aeabi_uldivmod>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4613      	mov	r3, r2
 800767a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800767c:	e058      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767e:	4b38      	ldr	r3, [pc, #224]	@ (8007760 <HAL_RCC_GetSysClockFreq+0x200>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	099b      	lsrs	r3, r3, #6
 8007684:	2200      	movs	r2, #0
 8007686:	4618      	mov	r0, r3
 8007688:	4611      	mov	r1, r2
 800768a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800768e:	623b      	str	r3, [r7, #32]
 8007690:	2300      	movs	r3, #0
 8007692:	627b      	str	r3, [r7, #36]	@ 0x24
 8007694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	f04f 0000 	mov.w	r0, #0
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	0159      	lsls	r1, r3, #5
 80076a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076aa:	0150      	lsls	r0, r2, #5
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4641      	mov	r1, r8
 80076b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80076b6:	4649      	mov	r1, r9
 80076b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80076c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80076cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80076d0:	ebb2 040a 	subs.w	r4, r2, sl
 80076d4:	eb63 050b 	sbc.w	r5, r3, fp
 80076d8:	f04f 0200 	mov.w	r2, #0
 80076dc:	f04f 0300 	mov.w	r3, #0
 80076e0:	00eb      	lsls	r3, r5, #3
 80076e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076e6:	00e2      	lsls	r2, r4, #3
 80076e8:	4614      	mov	r4, r2
 80076ea:	461d      	mov	r5, r3
 80076ec:	4643      	mov	r3, r8
 80076ee:	18e3      	adds	r3, r4, r3
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	464b      	mov	r3, r9
 80076f4:	eb45 0303 	adc.w	r3, r5, r3
 80076f8:	607b      	str	r3, [r7, #4]
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007706:	4629      	mov	r1, r5
 8007708:	028b      	lsls	r3, r1, #10
 800770a:	4621      	mov	r1, r4
 800770c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007710:	4621      	mov	r1, r4
 8007712:	028a      	lsls	r2, r1, #10
 8007714:	4610      	mov	r0, r2
 8007716:	4619      	mov	r1, r3
 8007718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800771a:	2200      	movs	r2, #0
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	61fa      	str	r2, [r7, #28]
 8007720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007724:	f7f9 fb18 	bl	8000d58 <__aeabi_uldivmod>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4613      	mov	r3, r2
 800772e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007730:	4b0b      	ldr	r3, [pc, #44]	@ (8007760 <HAL_RCC_GetSysClockFreq+0x200>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	0c1b      	lsrs	r3, r3, #16
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	3301      	adds	r3, #1
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007740:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007744:	fbb2 f3f3 	udiv	r3, r2, r3
 8007748:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800774a:	e002      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800774c:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <HAL_RCC_GetSysClockFreq+0x204>)
 800774e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007754:	4618      	mov	r0, r3
 8007756:	3750      	adds	r7, #80	@ 0x50
 8007758:	46bd      	mov	sp, r7
 800775a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800775e:	bf00      	nop
 8007760:	40023800 	.word	0x40023800
 8007764:	00f42400 	.word	0x00f42400
 8007768:	007a1200 	.word	0x007a1200

0800776c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007770:	4b03      	ldr	r3, [pc, #12]	@ (8007780 <HAL_RCC_GetHCLKFreq+0x14>)
 8007772:	681b      	ldr	r3, [r3, #0]
}
 8007774:	4618      	mov	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	20000008 	.word	0x20000008

08007784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007788:	f7ff fff0 	bl	800776c <HAL_RCC_GetHCLKFreq>
 800778c:	4602      	mov	r2, r0
 800778e:	4b05      	ldr	r3, [pc, #20]	@ (80077a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	0a9b      	lsrs	r3, r3, #10
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	4903      	ldr	r1, [pc, #12]	@ (80077a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800779a:	5ccb      	ldrb	r3, [r1, r3]
 800779c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40023800 	.word	0x40023800
 80077a8:	08033658 	.word	0x08033658

080077ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077b0:	f7ff ffdc 	bl	800776c <HAL_RCC_GetHCLKFreq>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4b05      	ldr	r3, [pc, #20]	@ (80077cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	0b5b      	lsrs	r3, r3, #13
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	4903      	ldr	r1, [pc, #12]	@ (80077d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077c2:	5ccb      	ldrb	r3, [r1, r3]
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40023800 	.word	0x40023800
 80077d0:	08033658 	.word	0x08033658

080077d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	220f      	movs	r2, #15
 80077e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077e4:	4b12      	ldr	r3, [pc, #72]	@ (8007830 <HAL_RCC_GetClockConfig+0x5c>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 0203 	and.w	r2, r3, #3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80077f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007830 <HAL_RCC_GetClockConfig+0x5c>)
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80077fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007830 <HAL_RCC_GetClockConfig+0x5c>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007808:	4b09      	ldr	r3, [pc, #36]	@ (8007830 <HAL_RCC_GetClockConfig+0x5c>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	08db      	lsrs	r3, r3, #3
 800780e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007816:	4b07      	ldr	r3, [pc, #28]	@ (8007834 <HAL_RCC_GetClockConfig+0x60>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0207 	and.w	r2, r3, #7
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	601a      	str	r2, [r3, #0]
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40023800 	.word	0x40023800
 8007834:	40023c00 	.word	0x40023c00

08007838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e07b      	b.n	8007942 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d108      	bne.n	8007864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800785a:	d009      	beq.n	8007870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	61da      	str	r2, [r3, #28]
 8007862:	e005      	b.n	8007870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fa fe3e 	bl	800250c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078f4:	ea42 0103 	orr.w	r1, r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	0c1b      	lsrs	r3, r3, #16
 800790e:	f003 0104 	and.w	r1, r3, #4
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007916:	f003 0210 	and.w	r2, r3, #16
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69da      	ldr	r2, [r3, #28]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007930:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b088      	sub	sp, #32
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	603b      	str	r3, [r7, #0]
 8007956:	4613      	mov	r3, r2
 8007958:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800795a:	f7fe f8df 	bl	8005b1c <HAL_GetTick>
 800795e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007960:	88fb      	ldrh	r3, [r7, #6]
 8007962:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b01      	cmp	r3, #1
 800796e:	d001      	beq.n	8007974 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007970:	2302      	movs	r3, #2
 8007972:	e12a      	b.n	8007bca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_SPI_Transmit+0x36>
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e122      	b.n	8007bca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_SPI_Transmit+0x48>
 800798e:	2302      	movs	r3, #2
 8007990:	e11b      	b.n	8007bca <HAL_SPI_Transmit+0x280>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2203      	movs	r2, #3
 800799e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e0:	d10f      	bne.n	8007a02 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0c:	2b40      	cmp	r3, #64	@ 0x40
 8007a0e:	d007      	beq.n	8007a20 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a28:	d152      	bne.n	8007ad0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Transmit+0xee>
 8007a32:	8b7b      	ldrh	r3, [r7, #26]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d145      	bne.n	8007ac4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3c:	881a      	ldrh	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a48:	1c9a      	adds	r2, r3, #2
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a5c:	e032      	b.n	8007ac4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d112      	bne.n	8007a92 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a70:	881a      	ldrh	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7c:	1c9a      	adds	r2, r3, #2
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a90:	e018      	b.n	8007ac4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a92:	f7fe f843 	bl	8005b1c <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d803      	bhi.n	8007aaa <HAL_SPI_Transmit+0x160>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aa8:	d102      	bne.n	8007ab0 <HAL_SPI_Transmit+0x166>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d109      	bne.n	8007ac4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e082      	b.n	8007bca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1c7      	bne.n	8007a5e <HAL_SPI_Transmit+0x114>
 8007ace:	e053      	b.n	8007b78 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <HAL_SPI_Transmit+0x194>
 8007ad8:	8b7b      	ldrh	r3, [r7, #26]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d147      	bne.n	8007b6e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	330c      	adds	r3, #12
 8007ae8:	7812      	ldrb	r2, [r2, #0]
 8007aea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b04:	e033      	b.n	8007b6e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d113      	bne.n	8007b3c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	7812      	ldrb	r2, [r2, #0]
 8007b20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007b3a:	e018      	b.n	8007b6e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b3c:	f7fd ffee 	bl	8005b1c <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d803      	bhi.n	8007b54 <HAL_SPI_Transmit+0x20a>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b52:	d102      	bne.n	8007b5a <HAL_SPI_Transmit+0x210>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e02d      	b.n	8007bca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1c6      	bne.n	8007b06 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 fbd9 	bl	8008334 <SPI_EndRxTxTransaction>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10a      	bne.n	8007bac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
  }
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3720      	adds	r7, #32
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b088      	sub	sp, #32
 8007bd6:	af02      	add	r7, sp, #8
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	4613      	mov	r3, r2
 8007be0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d001      	beq.n	8007bf2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e104      	b.n	8007dfc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bfa:	d112      	bne.n	8007c22 <HAL_SPI_Receive+0x50>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10e      	bne.n	8007c22 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2204      	movs	r2, #4
 8007c08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007c0c:	88fa      	ldrh	r2, [r7, #6]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	4613      	mov	r3, r2
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f8f3 	bl	8007e04 <HAL_SPI_TransmitReceive>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	e0ec      	b.n	8007dfc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c22:	f7fd ff7b 	bl	8005b1c <HAL_GetTick>
 8007c26:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <HAL_SPI_Receive+0x62>
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0e1      	b.n	8007dfc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_SPI_Receive+0x74>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e0da      	b.n	8007dfc <HAL_SPI_Receive+0x22a>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2204      	movs	r2, #4
 8007c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	88fa      	ldrh	r2, [r7, #6]
 8007c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c94:	d10f      	bne.n	8007cb6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ca4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007cb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc0:	2b40      	cmp	r3, #64	@ 0x40
 8007cc2:	d007      	beq.n	8007cd4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d170      	bne.n	8007dbe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007cdc:	e035      	b.n	8007d4a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d115      	bne.n	8007d18 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f103 020c 	add.w	r2, r3, #12
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	7812      	ldrb	r2, [r2, #0]
 8007cfa:	b2d2      	uxtb	r2, r2
 8007cfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d16:	e018      	b.n	8007d4a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d18:	f7fd ff00 	bl	8005b1c <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d803      	bhi.n	8007d30 <HAL_SPI_Receive+0x15e>
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d2e:	d102      	bne.n	8007d36 <HAL_SPI_Receive+0x164>
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e058      	b.n	8007dfc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1c4      	bne.n	8007cde <HAL_SPI_Receive+0x10c>
 8007d54:	e038      	b.n	8007dc8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d113      	bne.n	8007d8c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6e:	b292      	uxth	r2, r2
 8007d70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d76:	1c9a      	adds	r2, r3, #2
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d8a:	e018      	b.n	8007dbe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d8c:	f7fd fec6 	bl	8005b1c <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d803      	bhi.n	8007da4 <HAL_SPI_Receive+0x1d2>
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007da2:	d102      	bne.n	8007daa <HAL_SPI_Receive+0x1d8>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e01e      	b.n	8007dfc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1c6      	bne.n	8007d56 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fa4b 	bl	8008268 <SPI_EndRxTransaction>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
  }
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	@ 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e12:	2301      	movs	r3, #1
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e16:	f7fd fe81 	bl	8005b1c <HAL_GetTick>
 8007e1a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e22:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007e2a:	887b      	ldrh	r3, [r7, #2]
 8007e2c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e2e:	7ffb      	ldrb	r3, [r7, #31]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d00c      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x4a>
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e3a:	d106      	bne.n	8007e4a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <HAL_SPI_TransmitReceive+0x46>
 8007e44:	7ffb      	ldrb	r3, [r7, #31]
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d001      	beq.n	8007e4e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e17f      	b.n	800814e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_SPI_TransmitReceive+0x5c>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <HAL_SPI_TransmitReceive+0x5c>
 8007e5a:	887b      	ldrh	r3, [r7, #2]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d101      	bne.n	8007e64 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e174      	b.n	800814e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_SPI_TransmitReceive+0x6e>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e16d      	b.n	800814e <HAL_SPI_TransmitReceive+0x34a>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d003      	beq.n	8007e8e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2205      	movs	r2, #5
 8007e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	887a      	ldrh	r2, [r7, #2]
 8007e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	887a      	ldrh	r2, [r7, #2]
 8007ea4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	887a      	ldrh	r2, [r7, #2]
 8007eb0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	887a      	ldrh	r2, [r7, #2]
 8007eb6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ece:	2b40      	cmp	r3, #64	@ 0x40
 8007ed0:	d007      	beq.n	8007ee2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ee0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eea:	d17e      	bne.n	8007fea <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_SPI_TransmitReceive+0xf6>
 8007ef4:	8afb      	ldrh	r3, [r7, #22]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d16c      	bne.n	8007fd4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007efe:	881a      	ldrh	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0a:	1c9a      	adds	r2, r3, #2
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1e:	e059      	b.n	8007fd4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d11b      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x162>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d016      	beq.n	8007f66 <HAL_SPI_TransmitReceive+0x162>
 8007f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d113      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f42:	881a      	ldrh	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4e:	1c9a      	adds	r2, r3, #2
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d119      	bne.n	8007fa8 <HAL_SPI_TransmitReceive+0x1a4>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d014      	beq.n	8007fa8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f88:	b292      	uxth	r2, r2
 8007f8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f90:	1c9a      	adds	r2, r3, #2
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007fa8:	f7fd fdb8 	bl	8005b1c <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d80d      	bhi.n	8007fd4 <HAL_SPI_TransmitReceive+0x1d0>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fbe:	d009      	beq.n	8007fd4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e0bc      	b.n	800814e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1a0      	bne.n	8007f20 <HAL_SPI_TransmitReceive+0x11c>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d19b      	bne.n	8007f20 <HAL_SPI_TransmitReceive+0x11c>
 8007fe8:	e082      	b.n	80080f0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_SPI_TransmitReceive+0x1f4>
 8007ff2:	8afb      	ldrh	r3, [r7, #22]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d171      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	330c      	adds	r3, #12
 8008002:	7812      	ldrb	r2, [r2, #0]
 8008004:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800801e:	e05d      	b.n	80080dc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b02      	cmp	r3, #2
 800802c:	d11c      	bne.n	8008068 <HAL_SPI_TransmitReceive+0x264>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008032:	b29b      	uxth	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d017      	beq.n	8008068 <HAL_SPI_TransmitReceive+0x264>
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	2b01      	cmp	r3, #1
 800803c:	d114      	bne.n	8008068 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	330c      	adds	r3, #12
 8008048:	7812      	ldrb	r2, [r2, #0]
 800804a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b01      	cmp	r3, #1
 8008074:	d119      	bne.n	80080aa <HAL_SPI_TransmitReceive+0x2a6>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800807a:	b29b      	uxth	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d014      	beq.n	80080aa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080a6:	2301      	movs	r3, #1
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080aa:	f7fd fd37 	bl	8005b1c <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d803      	bhi.n	80080c2 <HAL_SPI_TransmitReceive+0x2be>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080c0:	d102      	bne.n	80080c8 <HAL_SPI_TransmitReceive+0x2c4>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e038      	b.n	800814e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d19c      	bne.n	8008020 <HAL_SPI_TransmitReceive+0x21c>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d197      	bne.n	8008020 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080f0:	6a3a      	ldr	r2, [r7, #32]
 80080f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f91d 	bl	8008334 <SPI_EndRxTxTransaction>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2220      	movs	r2, #32
 8008104:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e01d      	b.n	800814e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800811a:	2300      	movs	r3, #0
 800811c:	613b      	str	r3, [r7, #16]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	613b      	str	r3, [r7, #16]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	613b      	str	r3, [r7, #16]
 800812e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800814c:	2300      	movs	r3, #0
  }
}
 800814e:	4618      	mov	r0, r3
 8008150:	3728      	adds	r7, #40	@ 0x28
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	4613      	mov	r3, r2
 8008166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008168:	f7fd fcd8 	bl	8005b1c <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4413      	add	r3, r2
 8008176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008178:	f7fd fcd0 	bl	8005b1c <HAL_GetTick>
 800817c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800817e:	4b39      	ldr	r3, [pc, #228]	@ (8008264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	015b      	lsls	r3, r3, #5
 8008184:	0d1b      	lsrs	r3, r3, #20
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	fb02 f303 	mul.w	r3, r2, r3
 800818c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800818e:	e054      	b.n	800823a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008196:	d050      	beq.n	800823a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008198:	f7fd fcc0 	bl	8005b1c <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d902      	bls.n	80081ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d13d      	bne.n	800822a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081c6:	d111      	bne.n	80081ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081d0:	d004      	beq.n	80081dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081da:	d107      	bne.n	80081ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f4:	d10f      	bne.n	8008216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e017      	b.n	800825a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	3b01      	subs	r3, #1
 8008238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4013      	ands	r3, r2
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	429a      	cmp	r2, r3
 8008248:	bf0c      	ite	eq
 800824a:	2301      	moveq	r3, #1
 800824c:	2300      	movne	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	461a      	mov	r2, r3
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	429a      	cmp	r2, r3
 8008256:	d19b      	bne.n	8008190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3720      	adds	r7, #32
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20000008 	.word	0x20000008

08008268 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af02      	add	r7, sp, #8
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800827c:	d111      	bne.n	80082a2 <SPI_EndRxTransaction+0x3a>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008286:	d004      	beq.n	8008292 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008290:	d107      	bne.n	80082a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082aa:	d12a      	bne.n	8008302 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082b4:	d012      	beq.n	80082dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	2180      	movs	r1, #128	@ 0x80
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f7ff ff49 	bl	8008158 <SPI_WaitFlagStateUntilTimeout>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d02d      	beq.n	8008328 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d0:	f043 0220 	orr.w	r2, r3, #32
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e026      	b.n	800832a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	2101      	movs	r1, #1
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff ff36 	bl	8008158 <SPI_WaitFlagStateUntilTimeout>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d01a      	beq.n	8008328 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f6:	f043 0220 	orr.w	r2, r3, #32
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e013      	b.n	800832a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2200      	movs	r2, #0
 800830a:	2101      	movs	r1, #1
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7ff ff23 	bl	8008158 <SPI_WaitFlagStateUntilTimeout>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800831c:	f043 0220 	orr.w	r2, r3, #32
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e000      	b.n	800832a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af02      	add	r7, sp, #8
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2201      	movs	r2, #1
 8008348:	2102      	movs	r1, #2
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff ff04 	bl	8008158 <SPI_WaitFlagStateUntilTimeout>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800835a:	f043 0220 	orr.w	r2, r3, #32
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e032      	b.n	80083cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008366:	4b1b      	ldr	r3, [pc, #108]	@ (80083d4 <SPI_EndRxTxTransaction+0xa0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1b      	ldr	r2, [pc, #108]	@ (80083d8 <SPI_EndRxTxTransaction+0xa4>)
 800836c:	fba2 2303 	umull	r2, r3, r2, r3
 8008370:	0d5b      	lsrs	r3, r3, #21
 8008372:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008376:	fb02 f303 	mul.w	r3, r2, r3
 800837a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008384:	d112      	bne.n	80083ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	2180      	movs	r1, #128	@ 0x80
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fee1 	bl	8008158 <SPI_WaitFlagStateUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d016      	beq.n	80083ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083a0:	f043 0220 	orr.w	r2, r3, #32
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e00f      	b.n	80083cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00a      	beq.n	80083c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c2:	2b80      	cmp	r3, #128	@ 0x80
 80083c4:	d0f2      	beq.n	80083ac <SPI_EndRxTxTransaction+0x78>
 80083c6:	e000      	b.n	80083ca <SPI_EndRxTxTransaction+0x96>
        break;
 80083c8:	bf00      	nop
  }

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000008 	.word	0x20000008
 80083d8:	165e9f81 	.word	0x165e9f81

080083dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e041      	b.n	8008472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f839 	bl	800847a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f000 f9b2 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d001      	beq.n	80084a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e044      	b.n	8008532 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0201 	orr.w	r2, r2, #1
 80084be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008540 <HAL_TIM_Base_Start_IT+0xb0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d018      	beq.n	80084fc <HAL_TIM_Base_Start_IT+0x6c>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d2:	d013      	beq.n	80084fc <HAL_TIM_Base_Start_IT+0x6c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1a      	ldr	r2, [pc, #104]	@ (8008544 <HAL_TIM_Base_Start_IT+0xb4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00e      	beq.n	80084fc <HAL_TIM_Base_Start_IT+0x6c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a19      	ldr	r2, [pc, #100]	@ (8008548 <HAL_TIM_Base_Start_IT+0xb8>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d009      	beq.n	80084fc <HAL_TIM_Base_Start_IT+0x6c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a17      	ldr	r2, [pc, #92]	@ (800854c <HAL_TIM_Base_Start_IT+0xbc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d004      	beq.n	80084fc <HAL_TIM_Base_Start_IT+0x6c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a16      	ldr	r2, [pc, #88]	@ (8008550 <HAL_TIM_Base_Start_IT+0xc0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d111      	bne.n	8008520 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0307 	and.w	r3, r3, #7
 8008506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b06      	cmp	r3, #6
 800850c:	d010      	beq.n	8008530 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f042 0201 	orr.w	r2, r2, #1
 800851c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800851e:	e007      	b.n	8008530 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40010000 	.word	0x40010000
 8008544:	40000400 	.word	0x40000400
 8008548:	40000800 	.word	0x40000800
 800854c:	40000c00 	.word	0x40000c00
 8008550:	40014000 	.word	0x40014000

08008554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d020      	beq.n	80085b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01b      	beq.n	80085b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0202 	mvn.w	r2, #2
 8008588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f8d2 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 80085a4:	e005      	b.n	80085b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f8c4 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f8d5 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d020      	beq.n	8008604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01b      	beq.n	8008604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0204 	mvn.w	r2, #4
 80085d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8ac 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 80085f0:	e005      	b.n	80085fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f89e 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f8af 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f003 0308 	and.w	r3, r3, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d020      	beq.n	8008650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01b      	beq.n	8008650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f06f 0208 	mvn.w	r2, #8
 8008620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2204      	movs	r2, #4
 8008626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f886 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 800863c:	e005      	b.n	800864a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f878 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f889 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f003 0310 	and.w	r3, r3, #16
 8008656:	2b00      	cmp	r3, #0
 8008658:	d020      	beq.n	800869c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f003 0310 	and.w	r3, r3, #16
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01b      	beq.n	800869c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0210 	mvn.w	r2, #16
 800866c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2208      	movs	r2, #8
 8008672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f860 	bl	8008748 <HAL_TIM_IC_CaptureCallback>
 8008688:	e005      	b.n	8008696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f852 	bl	8008734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f863 	bl	800875c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00c      	beq.n	80086c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0201 	mvn.w	r2, #1
 80086b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7f9 fed8 	bl	8002470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00c      	beq.n	80086e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80086dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f8e6 	bl	80088b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f834 	bl	8008770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00c      	beq.n	800872c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	2b00      	cmp	r3, #0
 800871a:	d007      	beq.n	800872c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f06f 0220 	mvn.w	r2, #32
 8008724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f8b8 	bl	800889c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a3a      	ldr	r2, [pc, #232]	@ (8008880 <TIM_Base_SetConfig+0xfc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00f      	beq.n	80087bc <TIM_Base_SetConfig+0x38>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a2:	d00b      	beq.n	80087bc <TIM_Base_SetConfig+0x38>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a37      	ldr	r2, [pc, #220]	@ (8008884 <TIM_Base_SetConfig+0x100>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d007      	beq.n	80087bc <TIM_Base_SetConfig+0x38>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a36      	ldr	r2, [pc, #216]	@ (8008888 <TIM_Base_SetConfig+0x104>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_Base_SetConfig+0x38>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a35      	ldr	r2, [pc, #212]	@ (800888c <TIM_Base_SetConfig+0x108>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d108      	bne.n	80087ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008880 <TIM_Base_SetConfig+0xfc>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d01b      	beq.n	800880e <TIM_Base_SetConfig+0x8a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087dc:	d017      	beq.n	800880e <TIM_Base_SetConfig+0x8a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a28      	ldr	r2, [pc, #160]	@ (8008884 <TIM_Base_SetConfig+0x100>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d013      	beq.n	800880e <TIM_Base_SetConfig+0x8a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a27      	ldr	r2, [pc, #156]	@ (8008888 <TIM_Base_SetConfig+0x104>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00f      	beq.n	800880e <TIM_Base_SetConfig+0x8a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a26      	ldr	r2, [pc, #152]	@ (800888c <TIM_Base_SetConfig+0x108>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00b      	beq.n	800880e <TIM_Base_SetConfig+0x8a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a25      	ldr	r2, [pc, #148]	@ (8008890 <TIM_Base_SetConfig+0x10c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d007      	beq.n	800880e <TIM_Base_SetConfig+0x8a>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a24      	ldr	r2, [pc, #144]	@ (8008894 <TIM_Base_SetConfig+0x110>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d003      	beq.n	800880e <TIM_Base_SetConfig+0x8a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a23      	ldr	r2, [pc, #140]	@ (8008898 <TIM_Base_SetConfig+0x114>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d108      	bne.n	8008820 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a0e      	ldr	r2, [pc, #56]	@ (8008880 <TIM_Base_SetConfig+0xfc>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d103      	bne.n	8008854 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	691a      	ldr	r2, [r3, #16]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b01      	cmp	r3, #1
 8008864:	d105      	bne.n	8008872 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f023 0201 	bic.w	r2, r3, #1
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	611a      	str	r2, [r3, #16]
  }
}
 8008872:	bf00      	nop
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40000400 	.word	0x40000400
 8008888:	40000800 	.word	0x40000800
 800888c:	40000c00 	.word	0x40000c00
 8008890:	40014000 	.word	0x40014000
 8008894:	40014400 	.word	0x40014400
 8008898:	40014800 	.word	0x40014800

0800889c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80088ca:	f000 fa15 	bl	8008cf8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80088ce:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80088d2:	2201      	movs	r2, #1
 80088d4:	2178      	movs	r1, #120	@ 0x78
 80088d6:	4856      	ldr	r0, [pc, #344]	@ (8008a30 <SSD1306_Init+0x16c>)
 80088d8:	f7fd ff5a 	bl	8006790 <HAL_I2C_IsDeviceReady>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	e09f      	b.n	8008a26 <SSD1306_Init+0x162>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80088e6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80088ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80088ec:	e002      	b.n	80088f4 <SSD1306_Init+0x30>
		p--;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1f9      	bne.n	80088ee <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80088fa:	22ae      	movs	r2, #174	@ 0xae
 80088fc:	2100      	movs	r1, #0
 80088fe:	2078      	movs	r0, #120	@ 0x78
 8008900:	f000 fa76 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8008904:	2220      	movs	r2, #32
 8008906:	2100      	movs	r1, #0
 8008908:	2078      	movs	r0, #120	@ 0x78
 800890a:	f000 fa71 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800890e:	2210      	movs	r2, #16
 8008910:	2100      	movs	r1, #0
 8008912:	2078      	movs	r0, #120	@ 0x78
 8008914:	f000 fa6c 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008918:	22b0      	movs	r2, #176	@ 0xb0
 800891a:	2100      	movs	r1, #0
 800891c:	2078      	movs	r0, #120	@ 0x78
 800891e:	f000 fa67 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8008922:	22c8      	movs	r2, #200	@ 0xc8
 8008924:	2100      	movs	r1, #0
 8008926:	2078      	movs	r0, #120	@ 0x78
 8008928:	f000 fa62 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800892c:	2200      	movs	r2, #0
 800892e:	2100      	movs	r1, #0
 8008930:	2078      	movs	r0, #120	@ 0x78
 8008932:	f000 fa5d 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8008936:	2210      	movs	r2, #16
 8008938:	2100      	movs	r1, #0
 800893a:	2078      	movs	r0, #120	@ 0x78
 800893c:	f000 fa58 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8008940:	2240      	movs	r2, #64	@ 0x40
 8008942:	2100      	movs	r1, #0
 8008944:	2078      	movs	r0, #120	@ 0x78
 8008946:	f000 fa53 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800894a:	2281      	movs	r2, #129	@ 0x81
 800894c:	2100      	movs	r1, #0
 800894e:	2078      	movs	r0, #120	@ 0x78
 8008950:	f000 fa4e 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8008954:	22ff      	movs	r2, #255	@ 0xff
 8008956:	2100      	movs	r1, #0
 8008958:	2078      	movs	r0, #120	@ 0x78
 800895a:	f000 fa49 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800895e:	22a1      	movs	r2, #161	@ 0xa1
 8008960:	2100      	movs	r1, #0
 8008962:	2078      	movs	r0, #120	@ 0x78
 8008964:	f000 fa44 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8008968:	22a6      	movs	r2, #166	@ 0xa6
 800896a:	2100      	movs	r1, #0
 800896c:	2078      	movs	r0, #120	@ 0x78
 800896e:	f000 fa3f 	bl	8008df0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008972:	22a8      	movs	r2, #168	@ 0xa8
 8008974:	2100      	movs	r1, #0
 8008976:	2078      	movs	r0, #120	@ 0x78
 8008978:	f000 fa3a 	bl	8008df0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 800897c:	223f      	movs	r2, #63	@ 0x3f
 800897e:	2100      	movs	r1, #0
 8008980:	2078      	movs	r0, #120	@ 0x78
 8008982:	f000 fa35 	bl	8008df0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008986:	22a4      	movs	r2, #164	@ 0xa4
 8008988:	2100      	movs	r1, #0
 800898a:	2078      	movs	r0, #120	@ 0x78
 800898c:	f000 fa30 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8008990:	22d3      	movs	r2, #211	@ 0xd3
 8008992:	2100      	movs	r1, #0
 8008994:	2078      	movs	r0, #120	@ 0x78
 8008996:	f000 fa2b 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800899a:	2200      	movs	r2, #0
 800899c:	2100      	movs	r1, #0
 800899e:	2078      	movs	r0, #120	@ 0x78
 80089a0:	f000 fa26 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80089a4:	22d5      	movs	r2, #213	@ 0xd5
 80089a6:	2100      	movs	r1, #0
 80089a8:	2078      	movs	r0, #120	@ 0x78
 80089aa:	f000 fa21 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80089ae:	22f0      	movs	r2, #240	@ 0xf0
 80089b0:	2100      	movs	r1, #0
 80089b2:	2078      	movs	r0, #120	@ 0x78
 80089b4:	f000 fa1c 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80089b8:	22d9      	movs	r2, #217	@ 0xd9
 80089ba:	2100      	movs	r1, #0
 80089bc:	2078      	movs	r0, #120	@ 0x78
 80089be:	f000 fa17 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80089c2:	2222      	movs	r2, #34	@ 0x22
 80089c4:	2100      	movs	r1, #0
 80089c6:	2078      	movs	r0, #120	@ 0x78
 80089c8:	f000 fa12 	bl	8008df0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80089cc:	22da      	movs	r2, #218	@ 0xda
 80089ce:	2100      	movs	r1, #0
 80089d0:	2078      	movs	r0, #120	@ 0x78
 80089d2:	f000 fa0d 	bl	8008df0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80089d6:	2212      	movs	r2, #18
 80089d8:	2100      	movs	r1, #0
 80089da:	2078      	movs	r0, #120	@ 0x78
 80089dc:	f000 fa08 	bl	8008df0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80089e0:	22db      	movs	r2, #219	@ 0xdb
 80089e2:	2100      	movs	r1, #0
 80089e4:	2078      	movs	r0, #120	@ 0x78
 80089e6:	f000 fa03 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80089ea:	2220      	movs	r2, #32
 80089ec:	2100      	movs	r1, #0
 80089ee:	2078      	movs	r0, #120	@ 0x78
 80089f0:	f000 f9fe 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80089f4:	228d      	movs	r2, #141	@ 0x8d
 80089f6:	2100      	movs	r1, #0
 80089f8:	2078      	movs	r0, #120	@ 0x78
 80089fa:	f000 f9f9 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80089fe:	2214      	movs	r2, #20
 8008a00:	2100      	movs	r1, #0
 8008a02:	2078      	movs	r0, #120	@ 0x78
 8008a04:	f000 f9f4 	bl	8008df0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8008a08:	22af      	movs	r2, #175	@ 0xaf
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	2078      	movs	r0, #120	@ 0x78
 8008a0e:	f000 f9ef 	bl	8008df0 <ssd1306_I2C_Write>
	
	/* Update screen */
	//SSD1306_UpdateScreen();
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8008a12:	4b08      	ldr	r3, [pc, #32]	@ (8008a34 <SSD1306_Init+0x170>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8008a18:	4b06      	ldr	r3, [pc, #24]	@ (8008a34 <SSD1306_Init+0x170>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8008a1e:	4b05      	ldr	r3, [pc, #20]	@ (8008a34 <SSD1306_Init+0x170>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8008a24:	2301      	movs	r3, #1
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000a1c 	.word	0x20000a1c
 8008a34:	20000ff0 	.word	0x20000ff0

08008a38 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8008a3e:	2300      	movs	r3, #0
 8008a40:	71fb      	strb	r3, [r7, #7]
 8008a42:	e01d      	b.n	8008a80 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	3b50      	subs	r3, #80	@ 0x50
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	2078      	movs	r0, #120	@ 0x78
 8008a50:	f000 f9ce 	bl	8008df0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8008a54:	2200      	movs	r2, #0
 8008a56:	2100      	movs	r1, #0
 8008a58:	2078      	movs	r0, #120	@ 0x78
 8008a5a:	f000 f9c9 	bl	8008df0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8008a5e:	2210      	movs	r2, #16
 8008a60:	2100      	movs	r1, #0
 8008a62:	2078      	movs	r0, #120	@ 0x78
 8008a64:	f000 f9c4 	bl	8008df0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	01db      	lsls	r3, r3, #7
 8008a6c:	4a08      	ldr	r2, [pc, #32]	@ (8008a90 <SSD1306_UpdateScreen+0x58>)
 8008a6e:	441a      	add	r2, r3
 8008a70:	2380      	movs	r3, #128	@ 0x80
 8008a72:	2140      	movs	r1, #64	@ 0x40
 8008a74:	2078      	movs	r0, #120	@ 0x78
 8008a76:	f000 f955 	bl	8008d24 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	71fb      	strb	r3, [r7, #7]
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	2b07      	cmp	r3, #7
 8008a84:	d9de      	bls.n	8008a44 <SSD1306_UpdateScreen+0xc>
	}
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20000bf0 	.word	0x20000bf0

08008a94 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8008a9e:	79fb      	ldrb	r3, [r7, #7]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <SSD1306_Fill+0x14>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e000      	b.n	8008aaa <SSD1306_Fill+0x16>
 8008aa8:	23ff      	movs	r3, #255	@ 0xff
 8008aaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4803      	ldr	r0, [pc, #12]	@ (8008ac0 <SSD1306_Fill+0x2c>)
 8008ab2:	f01d f94d 	bl	8025d50 <memset>
}
 8008ab6:	bf00      	nop
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000bf0 	.word	0x20000bf0

08008ac4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	80fb      	strh	r3, [r7, #6]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	80bb      	strh	r3, [r7, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	70fb      	strb	r3, [r7, #3]
	if (
 8008ad6:	88fb      	ldrh	r3, [r7, #6]
 8008ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ada:	d848      	bhi.n	8008b6e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8008adc:	88bb      	ldrh	r3, [r7, #4]
 8008ade:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ae0:	d845      	bhi.n	8008b6e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8008ae2:	4b26      	ldr	r3, [pc, #152]	@ (8008b7c <SSD1306_DrawPixel+0xb8>)
 8008ae4:	791b      	ldrb	r3, [r3, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d006      	beq.n	8008af8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bf0c      	ite	eq
 8008af0:	2301      	moveq	r3, #1
 8008af2:	2300      	movne	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8008af8:	78fb      	ldrb	r3, [r7, #3]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d11a      	bne.n	8008b34 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008afe:	88fa      	ldrh	r2, [r7, #6]
 8008b00:	88bb      	ldrh	r3, [r7, #4]
 8008b02:	08db      	lsrs	r3, r3, #3
 8008b04:	b298      	uxth	r0, r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	01db      	lsls	r3, r3, #7
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008b80 <SSD1306_DrawPixel+0xbc>)
 8008b0e:	5cd3      	ldrb	r3, [r2, r3]
 8008b10:	b25a      	sxtb	r2, r3
 8008b12:	88bb      	ldrh	r3, [r7, #4]
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	2101      	movs	r1, #1
 8008b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1e:	b25b      	sxtb	r3, r3
 8008b20:	4313      	orrs	r3, r2
 8008b22:	b259      	sxtb	r1, r3
 8008b24:	88fa      	ldrh	r2, [r7, #6]
 8008b26:	4603      	mov	r3, r0
 8008b28:	01db      	lsls	r3, r3, #7
 8008b2a:	4413      	add	r3, r2
 8008b2c:	b2c9      	uxtb	r1, r1
 8008b2e:	4a14      	ldr	r2, [pc, #80]	@ (8008b80 <SSD1306_DrawPixel+0xbc>)
 8008b30:	54d1      	strb	r1, [r2, r3]
 8008b32:	e01d      	b.n	8008b70 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008b34:	88fa      	ldrh	r2, [r7, #6]
 8008b36:	88bb      	ldrh	r3, [r7, #4]
 8008b38:	08db      	lsrs	r3, r3, #3
 8008b3a:	b298      	uxth	r0, r3
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	01db      	lsls	r3, r3, #7
 8008b40:	4413      	add	r3, r2
 8008b42:	4a0f      	ldr	r2, [pc, #60]	@ (8008b80 <SSD1306_DrawPixel+0xbc>)
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
 8008b46:	b25a      	sxtb	r2, r3
 8008b48:	88bb      	ldrh	r3, [r7, #4]
 8008b4a:	f003 0307 	and.w	r3, r3, #7
 8008b4e:	2101      	movs	r1, #1
 8008b50:	fa01 f303 	lsl.w	r3, r1, r3
 8008b54:	b25b      	sxtb	r3, r3
 8008b56:	43db      	mvns	r3, r3
 8008b58:	b25b      	sxtb	r3, r3
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	b259      	sxtb	r1, r3
 8008b5e:	88fa      	ldrh	r2, [r7, #6]
 8008b60:	4603      	mov	r3, r0
 8008b62:	01db      	lsls	r3, r3, #7
 8008b64:	4413      	add	r3, r2
 8008b66:	b2c9      	uxtb	r1, r1
 8008b68:	4a05      	ldr	r2, [pc, #20]	@ (8008b80 <SSD1306_DrawPixel+0xbc>)
 8008b6a:	54d1      	strb	r1, [r2, r3]
 8008b6c:	e000      	b.n	8008b70 <SSD1306_DrawPixel+0xac>
		return;
 8008b6e:	bf00      	nop
	}
}
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000ff0 	.word	0x20000ff0
 8008b80:	20000bf0 	.word	0x20000bf0

08008b84 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	80fb      	strh	r3, [r7, #6]
 8008b90:	4613      	mov	r3, r2
 8008b92:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8008b94:	4a05      	ldr	r2, [pc, #20]	@ (8008bac <SSD1306_GotoXY+0x28>)
 8008b96:	88fb      	ldrh	r3, [r7, #6]
 8008b98:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8008b9a:	4a04      	ldr	r2, [pc, #16]	@ (8008bac <SSD1306_GotoXY+0x28>)
 8008b9c:	88bb      	ldrh	r3, [r7, #4]
 8008b9e:	8053      	strh	r3, [r2, #2]
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	20000ff0 	.word	0x20000ff0

08008bb0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8008bc0:	4b39      	ldr	r3, [pc, #228]	@ (8008ca8 <SSD1306_Putc+0xf8>)
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	4413      	add	r3, r2
	if (
 8008bcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bce:	dc07      	bgt.n	8008be0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8008bd0:	4b35      	ldr	r3, [pc, #212]	@ (8008ca8 <SSD1306_Putc+0xf8>)
 8008bd2:	885b      	ldrh	r3, [r3, #2]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8008bdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8008bde:	dd01      	ble.n	8008be4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	e05d      	b.n	8008ca0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8008be4:	2300      	movs	r3, #0
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	e04b      	b.n	8008c82 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	3b20      	subs	r3, #32
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	7849      	ldrb	r1, [r1, #1]
 8008bf6:	fb01 f303 	mul.w	r3, r1, r3
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	440b      	add	r3, r1
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4413      	add	r3, r2
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8008c08:	2300      	movs	r3, #0
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	e030      	b.n	8008c70 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d010      	beq.n	8008c40 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8008c1e:	4b22      	ldr	r3, [pc, #136]	@ (8008ca8 <SSD1306_Putc+0xf8>)
 8008c20:	881a      	ldrh	r2, [r3, #0]
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	b298      	uxth	r0, r3
 8008c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ca8 <SSD1306_Putc+0xf8>)
 8008c2c:	885a      	ldrh	r2, [r3, #2]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	4413      	add	r3, r2
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	79ba      	ldrb	r2, [r7, #6]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f7ff ff43 	bl	8008ac4 <SSD1306_DrawPixel>
 8008c3e:	e014      	b.n	8008c6a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8008c40:	4b19      	ldr	r3, [pc, #100]	@ (8008ca8 <SSD1306_Putc+0xf8>)
 8008c42:	881a      	ldrh	r2, [r3, #0]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	4413      	add	r3, r2
 8008c4a:	b298      	uxth	r0, r3
 8008c4c:	4b16      	ldr	r3, [pc, #88]	@ (8008ca8 <SSD1306_Putc+0xf8>)
 8008c4e:	885a      	ldrh	r2, [r3, #2]
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	4413      	add	r3, r2
 8008c56:	b299      	uxth	r1, r3
 8008c58:	79bb      	ldrb	r3, [r7, #6]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bf0c      	ite	eq
 8008c5e:	2301      	moveq	r3, #1
 8008c60:	2300      	movne	r3, #0
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	461a      	mov	r2, r3
 8008c66:	f7ff ff2d 	bl	8008ac4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d3c8      	bcc.n	8008c0e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	617b      	str	r3, [r7, #20]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	461a      	mov	r2, r3
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d3ad      	bcc.n	8008bea <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8008c8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ca8 <SSD1306_Putc+0xf8>)
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	7812      	ldrb	r2, [r2, #0]
 8008c96:	4413      	add	r3, r2
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	4b03      	ldr	r3, [pc, #12]	@ (8008ca8 <SSD1306_Putc+0xf8>)
 8008c9c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20000ff0 	.word	0x20000ff0

08008cac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8008cba:	e012      	b.n	8008ce2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	79fa      	ldrb	r2, [r7, #7]
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff ff73 	bl	8008bb0 <SSD1306_Putc>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	461a      	mov	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d002      	beq.n	8008cdc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	e008      	b.n	8008cee <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1e8      	bne.n	8008cbc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	781b      	ldrb	r3, [r3, #0]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8008cfe:	4b08      	ldr	r3, [pc, #32]	@ (8008d20 <ssd1306_I2C_Init+0x28>)
 8008d00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008d02:	e002      	b.n	8008d0a <ssd1306_I2C_Init+0x12>
		p--;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1f9      	bne.n	8008d04 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	0003d090 	.word	0x0003d090

08008d24 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b0c7      	sub	sp, #284	@ 0x11c
 8008d28:	af02      	add	r7, sp, #8
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8008d32:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8008d36:	600a      	str	r2, [r1, #0]
 8008d38:	4619      	mov	r1, r3
 8008d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d3e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008d42:	4622      	mov	r2, r4
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d4a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8008d4e:	4602      	mov	r2, r0
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008d5a:	460a      	mov	r2, r1
 8008d5c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8008d5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d66:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008d6a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8008d6e:	7812      	ldrb	r2, [r2, #0]
 8008d70:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8008d72:	2300      	movs	r3, #0
 8008d74:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8008d78:	e015      	b.n	8008da6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8008d7a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008d7e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008d82:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8008d86:	6812      	ldr	r2, [r2, #0]
 8008d88:	441a      	add	r2, r3
 8008d8a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008d8e:	3301      	adds	r3, #1
 8008d90:	7811      	ldrb	r1, [r2, #0]
 8008d92:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008d96:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8008d9a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8008d9c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008da0:	3301      	adds	r3, #1
 8008da2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8008da6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8008db0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8008db4:	8812      	ldrh	r2, [r2, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d8df      	bhi.n	8008d7a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8008dba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dbe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	b299      	uxth	r1, r3
 8008dc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008dca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	f107 020c 	add.w	r2, r7, #12
 8008dd8:	200a      	movs	r0, #10
 8008dda:	9000      	str	r0, [sp, #0]
 8008ddc:	4803      	ldr	r0, [pc, #12]	@ (8008dec <ssd1306_I2C_WriteMulti+0xc8>)
 8008dde:	f7fd fbd9 	bl	8006594 <HAL_I2C_Master_Transmit>
}
 8008de2:	bf00      	nop
 8008de4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd90      	pop	{r4, r7, pc}
 8008dec:	20000a1c 	.word	0x20000a1c

08008df0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	4603      	mov	r3, r0
 8008df8:	71fb      	strb	r3, [r7, #7]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	71bb      	strb	r3, [r7, #6]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8008e02:	79bb      	ldrb	r3, [r7, #6]
 8008e04:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8008e06:	797b      	ldrb	r3, [r7, #5]
 8008e08:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	b299      	uxth	r1, r3
 8008e0e:	f107 020c 	add.w	r2, r7, #12
 8008e12:	230a      	movs	r3, #10
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	2302      	movs	r3, #2
 8008e18:	4803      	ldr	r0, [pc, #12]	@ (8008e28 <ssd1306_I2C_Write+0x38>)
 8008e1a:	f7fd fbbb 	bl	8006594 <HAL_I2C_Master_Transmit>
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000a1c 	.word	0x20000a1c

08008e2c <__NVIC_SetPriority>:
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	6039      	str	r1, [r7, #0]
 8008e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	db0a      	blt.n	8008e56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	490c      	ldr	r1, [pc, #48]	@ (8008e78 <__NVIC_SetPriority+0x4c>)
 8008e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e4a:	0112      	lsls	r2, r2, #4
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	440b      	add	r3, r1
 8008e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008e54:	e00a      	b.n	8008e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	4908      	ldr	r1, [pc, #32]	@ (8008e7c <__NVIC_SetPriority+0x50>)
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	3b04      	subs	r3, #4
 8008e64:	0112      	lsls	r2, r2, #4
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	440b      	add	r3, r1
 8008e6a:	761a      	strb	r2, [r3, #24]
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	e000e100 	.word	0xe000e100
 8008e7c:	e000ed00 	.word	0xe000ed00

08008e80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e80:	b580      	push	{r7, lr}
 8008e82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e84:	4b05      	ldr	r3, [pc, #20]	@ (8008e9c <SysTick_Handler+0x1c>)
 8008e86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e88:	f002 fbc2 	bl	800b610 <xTaskGetSchedulerState>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d001      	beq.n	8008e96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e92:	f003 fab9 	bl	800c408 <xPortSysTickHandler>
  }
}
 8008e96:	bf00      	nop
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	e000e010 	.word	0xe000e010

08008ea0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	f06f 0004 	mvn.w	r0, #4
 8008eaa:	f7ff ffbf 	bl	8008e2c <__NVIC_SetPriority>
#endif
}
 8008eae:	bf00      	nop
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eba:	f3ef 8305 	mrs	r3, IPSR
 8008ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8008ec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008ec6:	f06f 0305 	mvn.w	r3, #5
 8008eca:	607b      	str	r3, [r7, #4]
 8008ecc:	e00c      	b.n	8008ee8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ece:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef8 <osKernelInitialize+0x44>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d105      	bne.n	8008ee2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ed6:	4b08      	ldr	r3, [pc, #32]	@ (8008ef8 <osKernelInitialize+0x44>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	607b      	str	r3, [r7, #4]
 8008ee0:	e002      	b.n	8008ee8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ee8:	687b      	ldr	r3, [r7, #4]
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20000ff8 	.word	0x20000ff8

08008efc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f02:	f3ef 8305 	mrs	r3, IPSR
 8008f06:	603b      	str	r3, [r7, #0]
  return(result);
 8008f08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f0e:	f06f 0305 	mvn.w	r3, #5
 8008f12:	607b      	str	r3, [r7, #4]
 8008f14:	e010      	b.n	8008f38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <osKernelStart+0x48>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d109      	bne.n	8008f32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f1e:	f7ff ffbf 	bl	8008ea0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f22:	4b08      	ldr	r3, [pc, #32]	@ (8008f44 <osKernelStart+0x48>)
 8008f24:	2202      	movs	r2, #2
 8008f26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f28:	f001 fefe 	bl	800ad28 <vTaskStartScheduler>
      stat = osOK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	607b      	str	r3, [r7, #4]
 8008f30:	e002      	b.n	8008f38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f38:	687b      	ldr	r3, [r7, #4]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20000ff8 	.word	0x20000ff8

08008f48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08e      	sub	sp, #56	@ 0x38
 8008f4c:	af04      	add	r7, sp, #16
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f54:	2300      	movs	r3, #0
 8008f56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f58:	f3ef 8305 	mrs	r3, IPSR
 8008f5c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d17f      	bne.n	8009064 <osThreadNew+0x11c>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d07c      	beq.n	8009064 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008f6a:	2380      	movs	r3, #128	@ 0x80
 8008f6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f6e:	2318      	movs	r3, #24
 8008f70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d046      	beq.n	8009010 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <osThreadNew+0x48>
        name = attr->name;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d008      	beq.n	8008fb6 <osThreadNew+0x6e>
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2b38      	cmp	r3, #56	@ 0x38
 8008fa8:	d805      	bhi.n	8008fb6 <osThreadNew+0x6e>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <osThreadNew+0x72>
        return (NULL);
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e055      	b.n	8009066 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	089b      	lsrs	r3, r3, #2
 8008fc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00f      	beq.n	8008ff2 <osThreadNew+0xaa>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8008fda:	d30a      	bcc.n	8008ff2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d006      	beq.n	8008ff2 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <osThreadNew+0xaa>
        mem = 1;
 8008fec:	2301      	movs	r3, #1
 8008fee:	61bb      	str	r3, [r7, #24]
 8008ff0:	e010      	b.n	8009014 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10c      	bne.n	8009014 <osThreadNew+0xcc>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d108      	bne.n	8009014 <osThreadNew+0xcc>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <osThreadNew+0xcc>
          mem = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	61bb      	str	r3, [r7, #24]
 800900e:	e001      	b.n	8009014 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d110      	bne.n	800903c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009022:	9202      	str	r2, [sp, #8]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6a3a      	ldr	r2, [r7, #32]
 800902e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f001 fc5b 	bl	800a8ec <xTaskCreateStatic>
 8009036:	4603      	mov	r3, r0
 8009038:	613b      	str	r3, [r7, #16]
 800903a:	e013      	b.n	8009064 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d110      	bne.n	8009064 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	b29a      	uxth	r2, r3
 8009046:	f107 0310 	add.w	r3, r7, #16
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f001 fcab 	bl	800a9b0 <xTaskCreate>
 800905a:	4603      	mov	r3, r0
 800905c:	2b01      	cmp	r3, #1
 800905e:	d001      	beq.n	8009064 <osThreadNew+0x11c>
            hTask = NULL;
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009064:	693b      	ldr	r3, [r7, #16]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3728      	adds	r7, #40	@ 0x28
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009076:	f3ef 8305 	mrs	r3, IPSR
 800907a:	60bb      	str	r3, [r7, #8]
  return(result);
 800907c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <osDelay+0x1c>
    stat = osErrorISR;
 8009082:	f06f 0305 	mvn.w	r3, #5
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e007      	b.n	800909a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d002      	beq.n	800909a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 fe11 	bl	800acbc <vTaskDelay>
    }
  }

  return (stat);
 800909a:	68fb      	ldr	r3, [r7, #12]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80090ac:	2300      	movs	r3, #0
 80090ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090b0:	f3ef 8305 	mrs	r3, IPSR
 80090b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80090b6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d174      	bne.n	80091a6 <osMutexNew+0x102>
    if (attr != NULL) {
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <osMutexNew+0x26>
      type = attr->attr_bits;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	e001      	b.n	80090ce <osMutexNew+0x2a>
    } else {
      type = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <osMutexNew+0x3a>
      rmtx = 1U;
 80090d8:	2301      	movs	r3, #1
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	e001      	b.n	80090e2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	f003 0308 	and.w	r3, r3, #8
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d15c      	bne.n	80091a6 <osMutexNew+0x102>
      mem = -1;
 80090ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090f0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d015      	beq.n	8009124 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d006      	beq.n	800910e <osMutexNew+0x6a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	2b4f      	cmp	r3, #79	@ 0x4f
 8009106:	d902      	bls.n	800910e <osMutexNew+0x6a>
          mem = 1;
 8009108:	2301      	movs	r3, #1
 800910a:	613b      	str	r3, [r7, #16]
 800910c:	e00c      	b.n	8009128 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d108      	bne.n	8009128 <osMutexNew+0x84>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d104      	bne.n	8009128 <osMutexNew+0x84>
            mem = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	613b      	str	r3, [r7, #16]
 8009122:	e001      	b.n	8009128 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009124:	2300      	movs	r3, #0
 8009126:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d112      	bne.n	8009154 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	4619      	mov	r1, r3
 800913a:	2004      	movs	r0, #4
 800913c:	f000 fc93 	bl	8009a66 <xQueueCreateMutexStatic>
 8009140:	61f8      	str	r0, [r7, #28]
 8009142:	e016      	b.n	8009172 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	4619      	mov	r1, r3
 800914a:	2001      	movs	r0, #1
 800914c:	f000 fc8b 	bl	8009a66 <xQueueCreateMutexStatic>
 8009150:	61f8      	str	r0, [r7, #28]
 8009152:	e00e      	b.n	8009172 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d004      	beq.n	800916a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009160:	2004      	movs	r0, #4
 8009162:	f000 fc68 	bl	8009a36 <xQueueCreateMutex>
 8009166:	61f8      	str	r0, [r7, #28]
 8009168:	e003      	b.n	8009172 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800916a:	2001      	movs	r0, #1
 800916c:	f000 fc63 	bl	8009a36 <xQueueCreateMutex>
 8009170:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00c      	beq.n	8009192 <osMutexNew+0xee>
        if (attr != NULL) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <osMutexNew+0xe2>
          name = attr->name;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	e001      	b.n	800918a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800918a:	68f9      	ldr	r1, [r7, #12]
 800918c:	69f8      	ldr	r0, [r7, #28]
 800918e:	f001 fb4f 	bl	800a830 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <osMutexNew+0x102>
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f043 0301 	orr.w	r3, r3, #1
 80091a4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80091a6:	69fb      	ldr	r3, [r7, #28]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f023 0301 	bic.w	r3, r3, #1
 80091c0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ce:	f3ef 8305 	mrs	r3, IPSR
 80091d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80091d4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d003      	beq.n	80091e2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80091da:	f06f 0305 	mvn.w	r3, #5
 80091de:	617b      	str	r3, [r7, #20]
 80091e0:	e02c      	b.n	800923c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d103      	bne.n	80091f0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80091e8:	f06f 0303 	mvn.w	r3, #3
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	e025      	b.n	800923c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d011      	beq.n	800921a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6938      	ldr	r0, [r7, #16]
 80091fa:	f000 fc84 	bl	8009b06 <xQueueTakeMutexRecursive>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b01      	cmp	r3, #1
 8009202:	d01b      	beq.n	800923c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800920a:	f06f 0301 	mvn.w	r3, #1
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	e014      	b.n	800923c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009212:	f06f 0302 	mvn.w	r3, #2
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	e010      	b.n	800923c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6938      	ldr	r0, [r7, #16]
 800921e:	f000 ff2b 	bl	800a078 <xQueueSemaphoreTake>
 8009222:	4603      	mov	r3, r0
 8009224:	2b01      	cmp	r3, #1
 8009226:	d009      	beq.n	800923c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800922e:	f06f 0301 	mvn.w	r3, #1
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	e002      	b.n	800923c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009236:	f06f 0302 	mvn.w	r3, #2
 800923a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800923c:	697b      	ldr	r3, [r7, #20]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009246:	b580      	push	{r7, lr}
 8009248:	b086      	sub	sp, #24
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800925e:	2300      	movs	r3, #0
 8009260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009262:	f3ef 8305 	mrs	r3, IPSR
 8009266:	60bb      	str	r3, [r7, #8]
  return(result);
 8009268:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <osMutexRelease+0x30>
    stat = osErrorISR;
 800926e:	f06f 0305 	mvn.w	r3, #5
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	e01f      	b.n	80092b6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d103      	bne.n	8009284 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800927c:	f06f 0303 	mvn.w	r3, #3
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	e018      	b.n	80092b6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800928a:	6938      	ldr	r0, [r7, #16]
 800928c:	f000 fc06 	bl	8009a9c <xQueueGiveMutexRecursive>
 8009290:	4603      	mov	r3, r0
 8009292:	2b01      	cmp	r3, #1
 8009294:	d00f      	beq.n	80092b6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009296:	f06f 0302 	mvn.w	r3, #2
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	e00b      	b.n	80092b6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800929e:	2300      	movs	r3, #0
 80092a0:	2200      	movs	r2, #0
 80092a2:	2100      	movs	r1, #0
 80092a4:	6938      	ldr	r0, [r7, #16]
 80092a6:	f000 fc65 	bl	8009b74 <xQueueGenericSend>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d002      	beq.n	80092b6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80092b0:	f06f 0302 	mvn.w	r3, #2
 80092b4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80092b6:	697b      	ldr	r3, [r7, #20]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b08a      	sub	sp, #40	@ 0x28
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80092cc:	2300      	movs	r3, #0
 80092ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092d0:	f3ef 8305 	mrs	r3, IPSR
 80092d4:	613b      	str	r3, [r7, #16]
  return(result);
 80092d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d15f      	bne.n	800939c <osMessageQueueNew+0xdc>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d05c      	beq.n	800939c <osMessageQueueNew+0xdc>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d059      	beq.n	800939c <osMessageQueueNew+0xdc>
    mem = -1;
 80092e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d029      	beq.n	8009348 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d012      	beq.n	8009322 <osMessageQueueNew+0x62>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b4f      	cmp	r3, #79	@ 0x4f
 8009302:	d90e      	bls.n	8009322 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	695a      	ldr	r2, [r3, #20]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	fb01 f303 	mul.w	r3, r1, r3
 8009318:	429a      	cmp	r2, r3
 800931a:	d302      	bcc.n	8009322 <osMessageQueueNew+0x62>
        mem = 1;
 800931c:	2301      	movs	r3, #1
 800931e:	61bb      	str	r3, [r7, #24]
 8009320:	e014      	b.n	800934c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d110      	bne.n	800934c <osMessageQueueNew+0x8c>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10c      	bne.n	800934c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009336:	2b00      	cmp	r3, #0
 8009338:	d108      	bne.n	800934c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d104      	bne.n	800934c <osMessageQueueNew+0x8c>
          mem = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	61bb      	str	r3, [r7, #24]
 8009346:	e001      	b.n	800934c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d10b      	bne.n	800936a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	691a      	ldr	r2, [r3, #16]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	2100      	movs	r1, #0
 800935c:	9100      	str	r1, [sp, #0]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fa73 	bl	800984c <xQueueGenericCreateStatic>
 8009366:	61f8      	str	r0, [r7, #28]
 8009368:	e008      	b.n	800937c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d105      	bne.n	800937c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009370:	2200      	movs	r2, #0
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 fae6 	bl	8009946 <xQueueGenericCreate>
 800937a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00c      	beq.n	800939c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <osMessageQueueNew+0xd0>
        name = attr->name;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	617b      	str	r3, [r7, #20]
 800938e:	e001      	b.n	8009394 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009394:	6979      	ldr	r1, [r7, #20]
 8009396:	69f8      	ldr	r0, [r7, #28]
 8009398:	f001 fa4a 	bl	800a830 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800939c:	69fb      	ldr	r3, [r7, #28]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3720      	adds	r7, #32
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	603b      	str	r3, [r7, #0]
 80093b4:	4613      	mov	r3, r2
 80093b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80093bc:	2300      	movs	r3, #0
 80093be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093c0:	f3ef 8305 	mrs	r3, IPSR
 80093c4:	617b      	str	r3, [r7, #20]
  return(result);
 80093c6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d028      	beq.n	800941e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <osMessageQueuePut+0x36>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <osMessageQueuePut+0x36>
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80093de:	f06f 0303 	mvn.w	r3, #3
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	e038      	b.n	8009458 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80093ea:	f107 0210 	add.w	r2, r7, #16
 80093ee:	2300      	movs	r3, #0
 80093f0:	68b9      	ldr	r1, [r7, #8]
 80093f2:	69b8      	ldr	r0, [r7, #24]
 80093f4:	f000 fcc0 	bl	8009d78 <xQueueGenericSendFromISR>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d003      	beq.n	8009406 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80093fe:	f06f 0302 	mvn.w	r3, #2
 8009402:	61fb      	str	r3, [r7, #28]
 8009404:	e028      	b.n	8009458 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d025      	beq.n	8009458 <osMessageQueuePut+0xb0>
 800940c:	4b15      	ldr	r3, [pc, #84]	@ (8009464 <osMessageQueuePut+0xbc>)
 800940e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	e01c      	b.n	8009458 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <osMessageQueuePut+0x82>
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d103      	bne.n	8009432 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800942a:	f06f 0303 	mvn.w	r3, #3
 800942e:	61fb      	str	r3, [r7, #28]
 8009430:	e012      	b.n	8009458 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009432:	2300      	movs	r3, #0
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	69b8      	ldr	r0, [r7, #24]
 800943a:	f000 fb9b 	bl	8009b74 <xQueueGenericSend>
 800943e:	4603      	mov	r3, r0
 8009440:	2b01      	cmp	r3, #1
 8009442:	d009      	beq.n	8009458 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800944a:	f06f 0301 	mvn.w	r3, #1
 800944e:	61fb      	str	r3, [r7, #28]
 8009450:	e002      	b.n	8009458 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009452:	f06f 0302 	mvn.w	r3, #2
 8009456:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009458:	69fb      	ldr	r3, [r7, #28]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3720      	adds	r7, #32
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800947e:	f3ef 8305 	mrs	r3, IPSR
 8009482:	617b      	str	r3, [r7, #20]
  return(result);
 8009484:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009486:	2b00      	cmp	r3, #0
 8009488:	d028      	beq.n	80094dc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d005      	beq.n	800949c <osMessageQueueGet+0x34>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <osMessageQueueGet+0x34>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800949c:	f06f 0303 	mvn.w	r3, #3
 80094a0:	61fb      	str	r3, [r7, #28]
 80094a2:	e037      	b.n	8009514 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80094a4:	2300      	movs	r3, #0
 80094a6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80094a8:	f107 0310 	add.w	r3, r7, #16
 80094ac:	461a      	mov	r2, r3
 80094ae:	68b9      	ldr	r1, [r7, #8]
 80094b0:	69b8      	ldr	r0, [r7, #24]
 80094b2:	f000 ffd5 	bl	800a460 <xQueueReceiveFromISR>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d003      	beq.n	80094c4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80094bc:	f06f 0302 	mvn.w	r3, #2
 80094c0:	61fb      	str	r3, [r7, #28]
 80094c2:	e027      	b.n	8009514 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d024      	beq.n	8009514 <osMessageQueueGet+0xac>
 80094ca:	4b15      	ldr	r3, [pc, #84]	@ (8009520 <osMessageQueueGet+0xb8>)
 80094cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	e01b      	b.n	8009514 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <osMessageQueueGet+0x80>
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d103      	bne.n	80094f0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80094e8:	f06f 0303 	mvn.w	r3, #3
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	e011      	b.n	8009514 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	69b8      	ldr	r0, [r7, #24]
 80094f6:	f000 fcdd 	bl	8009eb4 <xQueueReceive>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d009      	beq.n	8009514 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d003      	beq.n	800950e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009506:	f06f 0301 	mvn.w	r3, #1
 800950a:	61fb      	str	r3, [r7, #28]
 800950c:	e002      	b.n	8009514 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800950e:	f06f 0302 	mvn.w	r3, #2
 8009512:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009514:	69fb      	ldr	r3, [r7, #28]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3720      	adds	r7, #32
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	e000ed04 	.word	0xe000ed04

08009524 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <osMessageQueueGetCount+0x18>
    count = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	e00e      	b.n	800955a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800953c:	f3ef 8305 	mrs	r3, IPSR
 8009540:	60fb      	str	r3, [r7, #12]
  return(result);
 8009542:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009544:	2b00      	cmp	r3, #0
 8009546:	d004      	beq.n	8009552 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009548:	6938      	ldr	r0, [r7, #16]
 800954a:	f001 f82a 	bl	800a5a2 <uxQueueMessagesWaitingFromISR>
 800954e:	6178      	str	r0, [r7, #20]
 8009550:	e003      	b.n	800955a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009552:	6938      	ldr	r0, [r7, #16]
 8009554:	f001 f806 	bl	800a564 <uxQueueMessagesWaiting>
 8009558:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800955a:	697b      	ldr	r3, [r7, #20]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009570:	f3ef 8305 	mrs	r3, IPSR
 8009574:	60fb      	str	r3, [r7, #12]
  return(result);
 8009576:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009578:	2b00      	cmp	r3, #0
 800957a:	d003      	beq.n	8009584 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800957c:	f06f 0305 	mvn.w	r3, #5
 8009580:	617b      	str	r3, [r7, #20]
 8009582:	e00c      	b.n	800959e <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d103      	bne.n	8009592 <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800958a:	f06f 0303 	mvn.w	r3, #3
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	e005      	b.n	800959e <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 8009596:	2100      	movs	r1, #0
 8009598:	6938      	ldr	r0, [r7, #16]
 800959a:	f000 f8ed 	bl	8009778 <xQueueGenericReset>
  }

  return (stat);
 800959e:	697b      	ldr	r3, [r7, #20]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3718      	adds	r7, #24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4a07      	ldr	r2, [pc, #28]	@ (80095d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80095b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	4a06      	ldr	r2, [pc, #24]	@ (80095d8 <vApplicationGetIdleTaskMemory+0x30>)
 80095be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2280      	movs	r2, #128	@ 0x80
 80095c4:	601a      	str	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20001000 	.word	0x20001000
 80095d8:	20001180 	.word	0x20001180

080095dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4a07      	ldr	r2, [pc, #28]	@ (8009608 <vApplicationGetTimerTaskMemory+0x2c>)
 80095ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	4a06      	ldr	r2, [pc, #24]	@ (800960c <vApplicationGetTimerTaskMemory+0x30>)
 80095f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095fa:	601a      	str	r2, [r3, #0]
}
 80095fc:	bf00      	nop
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	20001380 	.word	0x20001380
 800960c:	20001500 	.word	0x20001500

08009610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f103 0208 	add.w	r2, r3, #8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f103 0208 	add.w	r2, r3, #8
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f103 0208 	add.w	r2, r3, #8
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800966a:	b480      	push	{r7}
 800966c:	b085      	sub	sp, #20
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	1c5a      	adds	r2, r3, #1
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	601a      	str	r2, [r3, #0]
}
 80096a6:	bf00      	nop
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096c8:	d103      	bne.n	80096d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e00c      	b.n	80096ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3308      	adds	r3, #8
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	e002      	b.n	80096e0 <vListInsert+0x2e>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d2f6      	bcs.n	80096da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	601a      	str	r2, [r3, #0]
}
 8009718:	bf00      	nop
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	6892      	ldr	r2, [r2, #8]
 800973a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	6852      	ldr	r2, [r2, #4]
 8009744:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d103      	bne.n	8009758 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	1e5a      	subs	r2, r3, #1
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10b      	bne.n	80097a4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80097a4:	f002 fda0 	bl	800c2e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b0:	68f9      	ldr	r1, [r7, #12]
 80097b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	441a      	add	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097d4:	3b01      	subs	r3, #1
 80097d6:	68f9      	ldr	r1, [r7, #12]
 80097d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80097da:	fb01 f303 	mul.w	r3, r1, r3
 80097de:	441a      	add	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	22ff      	movs	r2, #255	@ 0xff
 80097e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	22ff      	movs	r2, #255	@ 0xff
 80097f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d114      	bne.n	8009824 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d01a      	beq.n	8009838 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3310      	adds	r3, #16
 8009806:	4618      	mov	r0, r3
 8009808:	f001 fd2c 	bl	800b264 <xTaskRemoveFromEventList>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d012      	beq.n	8009838 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009812:	4b0d      	ldr	r3, [pc, #52]	@ (8009848 <xQueueGenericReset+0xd0>)
 8009814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	e009      	b.n	8009838 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3310      	adds	r3, #16
 8009828:	4618      	mov	r0, r3
 800982a:	f7ff fef1 	bl	8009610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3324      	adds	r3, #36	@ 0x24
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff feec 	bl	8009610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009838:	f002 fd88 	bl	800c34c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800983c:	2301      	movs	r3, #1
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08e      	sub	sp, #56	@ 0x38
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10b      	bne.n	8009878 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009872:	bf00      	nop
 8009874:	bf00      	nop
 8009876:	e7fd      	b.n	8009874 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10b      	bne.n	8009896 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	e7fd      	b.n	8009892 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d002      	beq.n	80098a2 <xQueueGenericCreateStatic+0x56>
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <xQueueGenericCreateStatic+0x5a>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <xQueueGenericCreateStatic+0x5c>
 80098a6:	2300      	movs	r3, #0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10b      	bne.n	80098c4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	623b      	str	r3, [r7, #32]
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	e7fd      	b.n	80098c0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d102      	bne.n	80098d0 <xQueueGenericCreateStatic+0x84>
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <xQueueGenericCreateStatic+0x88>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e000      	b.n	80098d6 <xQueueGenericCreateStatic+0x8a>
 80098d4:	2300      	movs	r3, #0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10b      	bne.n	80098f2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	61fb      	str	r3, [r7, #28]
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098f2:	2350      	movs	r3, #80	@ 0x50
 80098f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	2b50      	cmp	r3, #80	@ 0x50
 80098fa:	d00b      	beq.n	8009914 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	61bb      	str	r3, [r7, #24]
}
 800990e:	bf00      	nop
 8009910:	bf00      	nop
 8009912:	e7fd      	b.n	8009910 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009914:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800991a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00d      	beq.n	800993c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009928:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800992c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	4613      	mov	r3, r2
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	68b9      	ldr	r1, [r7, #8]
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 f840 	bl	80099bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800993c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800993e:	4618      	mov	r0, r3
 8009940:	3730      	adds	r7, #48	@ 0x30
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009946:	b580      	push	{r7, lr}
 8009948:	b08a      	sub	sp, #40	@ 0x28
 800994a:	af02      	add	r7, sp, #8
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	4613      	mov	r3, r2
 8009952:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10b      	bne.n	8009972 <xQueueGenericCreate+0x2c>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	613b      	str	r3, [r7, #16]
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	e7fd      	b.n	800996e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	fb02 f303 	mul.w	r3, r2, r3
 800997a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	3350      	adds	r3, #80	@ 0x50
 8009980:	4618      	mov	r0, r3
 8009982:	f002 fdd3 	bl	800c52c <pvPortMalloc>
 8009986:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d011      	beq.n	80099b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	3350      	adds	r3, #80	@ 0x50
 8009996:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099a0:	79fa      	ldrb	r2, [r7, #7]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	4613      	mov	r3, r2
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 f805 	bl	80099bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80099b2:	69bb      	ldr	r3, [r7, #24]
	}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
 80099c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d103      	bne.n	80099d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	69ba      	ldr	r2, [r7, #24]
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	e002      	b.n	80099de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099e4:	69bb      	ldr	r3, [r7, #24]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099ea:	2101      	movs	r1, #1
 80099ec:	69b8      	ldr	r0, [r7, #24]
 80099ee:	f7ff fec3 	bl	8009778 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80099fa:	bf00      	nop
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b082      	sub	sp, #8
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00e      	beq.n	8009a2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009a22:	2300      	movs	r3, #0
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f8a3 	bl	8009b74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009a2e:	bf00      	nop
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b086      	sub	sp, #24
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a40:	2301      	movs	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	2300      	movs	r3, #0
 8009a46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009a48:	79fb      	ldrb	r3, [r7, #7]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6939      	ldr	r1, [r7, #16]
 8009a4e:	6978      	ldr	r0, [r7, #20]
 8009a50:	f7ff ff79 	bl	8009946 <xQueueGenericCreate>
 8009a54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff ffd3 	bl	8009a02 <prvInitialiseMutex>

		return xNewQueue;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
	}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b088      	sub	sp, #32
 8009a6a:	af02      	add	r7, sp, #8
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	6039      	str	r1, [r7, #0]
 8009a70:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009a72:	2301      	movs	r3, #1
 8009a74:	617b      	str	r3, [r7, #20]
 8009a76:	2300      	movs	r3, #0
 8009a78:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2200      	movs	r2, #0
 8009a82:	6939      	ldr	r1, [r7, #16]
 8009a84:	6978      	ldr	r0, [r7, #20]
 8009a86:	f7ff fee1 	bl	800984c <xQueueGenericCreateStatic>
 8009a8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff ffb8 	bl	8009a02 <prvInitialiseMutex>

		return xNewQueue;
 8009a92:	68fb      	ldr	r3, [r7, #12]
	}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10b      	bne.n	8009ac6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	60fb      	str	r3, [r7, #12]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	689c      	ldr	r4, [r3, #8]
 8009aca:	f001 fd91 	bl	800b5f0 <xTaskGetCurrentTaskHandle>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d111      	bne.n	8009af8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	1e5a      	subs	r2, r3, #1
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d105      	bne.n	8009af2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2100      	movs	r1, #0
 8009aec:	6938      	ldr	r0, [r7, #16]
 8009aee:	f000 f841 	bl	8009b74 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009af2:	2301      	movs	r3, #1
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e001      	b.n	8009afc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009afc:	697b      	ldr	r3, [r7, #20]
	}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}

08009b06 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b087      	sub	sp, #28
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10b      	bne.n	8009b32 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	60fb      	str	r3, [r7, #12]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	689c      	ldr	r4, [r3, #8]
 8009b36:	f001 fd5b 	bl	800b5f0 <xTaskGetCurrentTaskHandle>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	d107      	bne.n	8009b50 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	617b      	str	r3, [r7, #20]
 8009b4e:	e00c      	b.n	8009b6a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6938      	ldr	r0, [r7, #16]
 8009b54:	f000 fa90 	bl	800a078 <xQueueSemaphoreTake>
 8009b58:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009b6a:	697b      	ldr	r3, [r7, #20]
	}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd90      	pop	{r4, r7, pc}

08009b74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08e      	sub	sp, #56	@ 0x38
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b82:	2300      	movs	r3, #0
 8009b84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10b      	bne.n	8009ba8 <xQueueGenericSend+0x34>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009ba2:	bf00      	nop
 8009ba4:	bf00      	nop
 8009ba6:	e7fd      	b.n	8009ba4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d103      	bne.n	8009bb6 <xQueueGenericSend+0x42>
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <xQueueGenericSend+0x46>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <xQueueGenericSend+0x48>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10b      	bne.n	8009bd8 <xQueueGenericSend+0x64>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	e7fd      	b.n	8009bd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d103      	bne.n	8009be6 <xQueueGenericSend+0x72>
 8009bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d101      	bne.n	8009bea <xQueueGenericSend+0x76>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <xQueueGenericSend+0x78>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10b      	bne.n	8009c08 <xQueueGenericSend+0x94>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	623b      	str	r3, [r7, #32]
}
 8009c02:	bf00      	nop
 8009c04:	bf00      	nop
 8009c06:	e7fd      	b.n	8009c04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c08:	f001 fd02 	bl	800b610 <xTaskGetSchedulerState>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d102      	bne.n	8009c18 <xQueueGenericSend+0xa4>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <xQueueGenericSend+0xa8>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e000      	b.n	8009c1e <xQueueGenericSend+0xaa>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <xQueueGenericSend+0xc6>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	61fb      	str	r3, [r7, #28]
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	e7fd      	b.n	8009c36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c3a:	f002 fb55 	bl	800c2e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d302      	bcc.n	8009c50 <xQueueGenericSend+0xdc>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d129      	bne.n	8009ca4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	68b9      	ldr	r1, [r7, #8]
 8009c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c56:	f000 fcdb 	bl	800a610 <prvCopyDataToQueue>
 8009c5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d010      	beq.n	8009c86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c66:	3324      	adds	r3, #36	@ 0x24
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fafb 	bl	800b264 <xTaskRemoveFromEventList>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d013      	beq.n	8009c9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c74:	4b3f      	ldr	r3, [pc, #252]	@ (8009d74 <xQueueGenericSend+0x200>)
 8009c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	e00a      	b.n	8009c9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d007      	beq.n	8009c9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c8c:	4b39      	ldr	r3, [pc, #228]	@ (8009d74 <xQueueGenericSend+0x200>)
 8009c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c92:	601a      	str	r2, [r3, #0]
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c9c:	f002 fb56 	bl	800c34c <vPortExitCritical>
				return pdPASS;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e063      	b.n	8009d6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d103      	bne.n	8009cb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009caa:	f002 fb4f 	bl	800c34c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e05c      	b.n	8009d6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d106      	bne.n	8009cc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cb8:	f107 0314 	add.w	r3, r7, #20
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f001 fb35 	bl	800b32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cc6:	f002 fb41 	bl	800c34c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cca:	f001 f89d 	bl	800ae08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cce:	f002 fb0b 	bl	800c2e8 <vPortEnterCritical>
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cd8:	b25b      	sxtb	r3, r3
 8009cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cde:	d103      	bne.n	8009ce8 <xQueueGenericSend+0x174>
 8009ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cee:	b25b      	sxtb	r3, r3
 8009cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cf4:	d103      	bne.n	8009cfe <xQueueGenericSend+0x18a>
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cfe:	f002 fb25 	bl	800c34c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d02:	1d3a      	adds	r2, r7, #4
 8009d04:	f107 0314 	add.w	r3, r7, #20
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fb24 	bl	800b358 <xTaskCheckForTimeOut>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d124      	bne.n	8009d60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d18:	f000 fd72 	bl	800a800 <prvIsQueueFull>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d018      	beq.n	8009d54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	3310      	adds	r3, #16
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	4611      	mov	r1, r2
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f001 fa48 	bl	800b1c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d32:	f000 fcfd 	bl	800a730 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d36:	f001 f875 	bl	800ae24 <xTaskResumeAll>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f47f af7c 	bne.w	8009c3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009d42:	4b0c      	ldr	r3, [pc, #48]	@ (8009d74 <xQueueGenericSend+0x200>)
 8009d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	e772      	b.n	8009c3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d56:	f000 fceb 	bl	800a730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d5a:	f001 f863 	bl	800ae24 <xTaskResumeAll>
 8009d5e:	e76c      	b.n	8009c3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d62:	f000 fce5 	bl	800a730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d66:	f001 f85d 	bl	800ae24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3738      	adds	r7, #56	@ 0x38
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b090      	sub	sp, #64	@ 0x40
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
 8009d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10b      	bne.n	8009da8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009da2:	bf00      	nop
 8009da4:	bf00      	nop
 8009da6:	e7fd      	b.n	8009da4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d103      	bne.n	8009db6 <xQueueGenericSendFromISR+0x3e>
 8009dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <xQueueGenericSendFromISR+0x42>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <xQueueGenericSendFromISR+0x44>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10b      	bne.n	8009dd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009dd2:	bf00      	nop
 8009dd4:	bf00      	nop
 8009dd6:	e7fd      	b.n	8009dd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d103      	bne.n	8009de6 <xQueueGenericSendFromISR+0x6e>
 8009dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <xQueueGenericSendFromISR+0x72>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e000      	b.n	8009dec <xQueueGenericSendFromISR+0x74>
 8009dea:	2300      	movs	r3, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10b      	bne.n	8009e08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	623b      	str	r3, [r7, #32]
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	e7fd      	b.n	8009e04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e08:	f002 fb4e 	bl	800c4a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e0c:	f3ef 8211 	mrs	r2, BASEPRI
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	61fa      	str	r2, [r7, #28]
 8009e22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d302      	bcc.n	8009e3a <xQueueGenericSendFromISR+0xc2>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d12f      	bne.n	8009e9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e4a:	683a      	ldr	r2, [r7, #0]
 8009e4c:	68b9      	ldr	r1, [r7, #8]
 8009e4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e50:	f000 fbde 	bl	800a610 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009e58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e5c:	d112      	bne.n	8009e84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d016      	beq.n	8009e94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e68:	3324      	adds	r3, #36	@ 0x24
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 f9fa 	bl	800b264 <xTaskRemoveFromEventList>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00e      	beq.n	8009e94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	e007      	b.n	8009e94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009e88:	3301      	adds	r3, #1
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	b25a      	sxtb	r2, r3
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009e94:	2301      	movs	r3, #1
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009e98:	e001      	b.n	8009e9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ea8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3740      	adds	r7, #64	@ 0x40
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b08c      	sub	sp, #48	@ 0x30
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10b      	bne.n	8009ee6 <xQueueReceive+0x32>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	623b      	str	r3, [r7, #32]
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	e7fd      	b.n	8009ee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d103      	bne.n	8009ef4 <xQueueReceive+0x40>
 8009eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <xQueueReceive+0x44>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e000      	b.n	8009efa <xQueueReceive+0x46>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10b      	bne.n	8009f16 <xQueueReceive+0x62>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	61fb      	str	r3, [r7, #28]
}
 8009f10:	bf00      	nop
 8009f12:	bf00      	nop
 8009f14:	e7fd      	b.n	8009f12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f16:	f001 fb7b 	bl	800b610 <xTaskGetSchedulerState>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <xQueueReceive+0x72>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <xQueueReceive+0x76>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e000      	b.n	8009f2c <xQueueReceive+0x78>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10b      	bne.n	8009f48 <xQueueReceive+0x94>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	61bb      	str	r3, [r7, #24]
}
 8009f42:	bf00      	nop
 8009f44:	bf00      	nop
 8009f46:	e7fd      	b.n	8009f44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f48:	f002 f9ce 	bl	800c2e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01f      	beq.n	8009f98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f58:	68b9      	ldr	r1, [r7, #8]
 8009f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f5c:	f000 fbc2 	bl	800a6e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f62:	1e5a      	subs	r2, r3, #1
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00f      	beq.n	8009f90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f72:	3310      	adds	r3, #16
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 f975 	bl	800b264 <xTaskRemoveFromEventList>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d007      	beq.n	8009f90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009f80:	4b3c      	ldr	r3, [pc, #240]	@ (800a074 <xQueueReceive+0x1c0>)
 8009f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009f90:	f002 f9dc 	bl	800c34c <vPortExitCritical>
				return pdPASS;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e069      	b.n	800a06c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d103      	bne.n	8009fa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f9e:	f002 f9d5 	bl	800c34c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e062      	b.n	800a06c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d106      	bne.n	8009fba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fac:	f107 0310 	add.w	r3, r7, #16
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f001 f9bb 	bl	800b32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fba:	f002 f9c7 	bl	800c34c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fbe:	f000 ff23 	bl	800ae08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fc2:	f002 f991 	bl	800c2e8 <vPortEnterCritical>
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fcc:	b25b      	sxtb	r3, r3
 8009fce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fd2:	d103      	bne.n	8009fdc <xQueueReceive+0x128>
 8009fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fe2:	b25b      	sxtb	r3, r3
 8009fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fe8:	d103      	bne.n	8009ff2 <xQueueReceive+0x13e>
 8009fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ff2:	f002 f9ab 	bl	800c34c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ff6:	1d3a      	adds	r2, r7, #4
 8009ff8:	f107 0310 	add.w	r3, r7, #16
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4618      	mov	r0, r3
 800a000:	f001 f9aa 	bl	800b358 <xTaskCheckForTimeOut>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d123      	bne.n	800a052 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a00a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a00c:	f000 fbe2 	bl	800a7d4 <prvIsQueueEmpty>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d017      	beq.n	800a046 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a018:	3324      	adds	r3, #36	@ 0x24
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f001 f8ce 	bl	800b1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a026:	f000 fb83 	bl	800a730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a02a:	f000 fefb 	bl	800ae24 <xTaskResumeAll>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d189      	bne.n	8009f48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a034:	4b0f      	ldr	r3, [pc, #60]	@ (800a074 <xQueueReceive+0x1c0>)
 800a036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	e780      	b.n	8009f48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a048:	f000 fb72 	bl	800a730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a04c:	f000 feea 	bl	800ae24 <xTaskResumeAll>
 800a050:	e77a      	b.n	8009f48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a054:	f000 fb6c 	bl	800a730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a058:	f000 fee4 	bl	800ae24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a05c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a05e:	f000 fbb9 	bl	800a7d4 <prvIsQueueEmpty>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	f43f af6f 	beq.w	8009f48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a06a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3730      	adds	r7, #48	@ 0x30
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	e000ed04 	.word	0xe000ed04

0800a078 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08e      	sub	sp, #56	@ 0x38
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a082:	2300      	movs	r3, #0
 800a084:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a08a:	2300      	movs	r3, #0
 800a08c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	623b      	str	r3, [r7, #32]
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00b      	beq.n	800a0cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	61fb      	str	r3, [r7, #28]
}
 800a0c6:	bf00      	nop
 800a0c8:	bf00      	nop
 800a0ca:	e7fd      	b.n	800a0c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0cc:	f001 faa0 	bl	800b610 <xTaskGetSchedulerState>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <xQueueSemaphoreTake+0x64>
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <xQueueSemaphoreTake+0x68>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e000      	b.n	800a0e2 <xQueueSemaphoreTake+0x6a>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	61bb      	str	r3, [r7, #24]
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	e7fd      	b.n	800a0fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0fe:	f002 f8f3 	bl	800c2e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a106:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d024      	beq.n	800a158 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a110:	1e5a      	subs	r2, r3, #1
 800a112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a114:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d104      	bne.n	800a128 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a11e:	f001 fbf1 	bl	800b904 <pvTaskIncrementMutexHeldCount>
 800a122:	4602      	mov	r2, r0
 800a124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a126:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00f      	beq.n	800a150 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a132:	3310      	adds	r3, #16
 800a134:	4618      	mov	r0, r3
 800a136:	f001 f895 	bl	800b264 <xTaskRemoveFromEventList>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d007      	beq.n	800a150 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a140:	4b54      	ldr	r3, [pc, #336]	@ (800a294 <xQueueSemaphoreTake+0x21c>)
 800a142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a150:	f002 f8fc 	bl	800c34c <vPortExitCritical>
				return pdPASS;
 800a154:	2301      	movs	r3, #1
 800a156:	e098      	b.n	800a28a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d112      	bne.n	800a184 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00b      	beq.n	800a17c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	617b      	str	r3, [r7, #20]
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a17c:	f002 f8e6 	bl	800c34c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a180:	2300      	movs	r3, #0
 800a182:	e082      	b.n	800a28a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a18a:	f107 030c 	add.w	r3, r7, #12
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 f8cc 	bl	800b32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a194:	2301      	movs	r3, #1
 800a196:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a198:	f002 f8d8 	bl	800c34c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a19c:	f000 fe34 	bl	800ae08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1a0:	f002 f8a2 	bl	800c2e8 <vPortEnterCritical>
 800a1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1aa:	b25b      	sxtb	r3, r3
 800a1ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1b0:	d103      	bne.n	800a1ba <xQueueSemaphoreTake+0x142>
 800a1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1c0:	b25b      	sxtb	r3, r3
 800a1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1c6:	d103      	bne.n	800a1d0 <xQueueSemaphoreTake+0x158>
 800a1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1d0:	f002 f8bc 	bl	800c34c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1d4:	463a      	mov	r2, r7
 800a1d6:	f107 030c 	add.w	r3, r7, #12
 800a1da:	4611      	mov	r1, r2
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f001 f8bb 	bl	800b358 <xTaskCheckForTimeOut>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d132      	bne.n	800a24e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a1ea:	f000 faf3 	bl	800a7d4 <prvIsQueueEmpty>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d026      	beq.n	800a242 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d109      	bne.n	800a210 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a1fc:	f002 f874 	bl	800c2e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	4618      	mov	r0, r3
 800a206:	f001 fa21 	bl	800b64c <xTaskPriorityInherit>
 800a20a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a20c:	f002 f89e 	bl	800c34c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a212:	3324      	adds	r3, #36	@ 0x24
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	4611      	mov	r1, r2
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 ffd1 	bl	800b1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a21e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a220:	f000 fa86 	bl	800a730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a224:	f000 fdfe 	bl	800ae24 <xTaskResumeAll>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f47f af67 	bne.w	800a0fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a230:	4b18      	ldr	r3, [pc, #96]	@ (800a294 <xQueueSemaphoreTake+0x21c>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	e75d      	b.n	800a0fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a244:	f000 fa74 	bl	800a730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a248:	f000 fdec 	bl	800ae24 <xTaskResumeAll>
 800a24c:	e757      	b.n	800a0fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a24e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a250:	f000 fa6e 	bl	800a730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a254:	f000 fde6 	bl	800ae24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a25a:	f000 fabb 	bl	800a7d4 <prvIsQueueEmpty>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	f43f af4c 	beq.w	800a0fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00d      	beq.n	800a288 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a26c:	f002 f83c 	bl	800c2e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a270:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a272:	f000 f9b5 	bl	800a5e0 <prvGetDisinheritPriorityAfterTimeout>
 800a276:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a27e:	4618      	mov	r0, r3
 800a280:	f001 fabc 	bl	800b7fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a284:	f002 f862 	bl	800c34c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a288:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3738      	adds	r7, #56	@ 0x38
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	e000ed04 	.word	0xe000ed04

0800a298 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08e      	sub	sp, #56	@ 0x38
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10b      	bne.n	800a2ca <xQueuePeek+0x32>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	e7fd      	b.n	800a2c6 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d103      	bne.n	800a2d8 <xQueuePeek+0x40>
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <xQueuePeek+0x44>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e000      	b.n	800a2de <xQueuePeek+0x46>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10b      	bne.n	800a2fa <xQueuePeek+0x62>
	__asm volatile
 800a2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	623b      	str	r3, [r7, #32]
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop
 800a2f8:	e7fd      	b.n	800a2f6 <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2fa:	f001 f989 	bl	800b610 <xTaskGetSchedulerState>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d102      	bne.n	800a30a <xQueuePeek+0x72>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <xQueuePeek+0x76>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <xQueuePeek+0x78>
 800a30e:	2300      	movs	r3, #0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10b      	bne.n	800a32c <xQueuePeek+0x94>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	61fb      	str	r3, [r7, #28]
}
 800a326:	bf00      	nop
 800a328:	bf00      	nop
 800a32a:	e7fd      	b.n	800a328 <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a32c:	f001 ffdc 	bl	800c2e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a334:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d021      	beq.n	800a380 <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a346:	f000 f9cd 	bl	800a6e4 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a34e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00f      	beq.n	800a378 <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35a:	3324      	adds	r3, #36	@ 0x24
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 ff81 	bl	800b264 <xTaskRemoveFromEventList>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d007      	beq.n	800a378 <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 800a368:	4b3c      	ldr	r3, [pc, #240]	@ (800a45c <xQueuePeek+0x1c4>)
 800a36a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a378:	f001 ffe8 	bl	800c34c <vPortExitCritical>
				return pdPASS;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e069      	b.n	800a454 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a386:	f001 ffe1 	bl	800c34c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e062      	b.n	800a454 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a390:	2b00      	cmp	r3, #0
 800a392:	d106      	bne.n	800a3a2 <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a394:	f107 0314 	add.w	r3, r7, #20
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 ffc7 	bl	800b32c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3a2:	f001 ffd3 	bl	800c34c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3a6:	f000 fd2f 	bl	800ae08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3aa:	f001 ff9d 	bl	800c2e8 <vPortEnterCritical>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3b4:	b25b      	sxtb	r3, r3
 800a3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3ba:	d103      	bne.n	800a3c4 <xQueuePeek+0x12c>
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3ca:	b25b      	sxtb	r3, r3
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3d0:	d103      	bne.n	800a3da <xQueuePeek+0x142>
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3da:	f001 ffb7 	bl	800c34c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3de:	1d3a      	adds	r2, r7, #4
 800a3e0:	f107 0314 	add.w	r3, r7, #20
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 ffb6 	bl	800b358 <xTaskCheckForTimeOut>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d123      	bne.n	800a43a <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3f4:	f000 f9ee 	bl	800a7d4 <prvIsQueueEmpty>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d017      	beq.n	800a42e <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a400:	3324      	adds	r3, #36	@ 0x24
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f000 feda 	bl	800b1c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a40c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a40e:	f000 f98f 	bl	800a730 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a412:	f000 fd07 	bl	800ae24 <xTaskResumeAll>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d187      	bne.n	800a32c <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 800a41c:	4b0f      	ldr	r3, [pc, #60]	@ (800a45c <xQueuePeek+0x1c4>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	e77e      	b.n	800a32c <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 800a42e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a430:	f000 f97e 	bl	800a730 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a434:	f000 fcf6 	bl	800ae24 <xTaskResumeAll>
 800a438:	e778      	b.n	800a32c <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 800a43a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a43c:	f000 f978 	bl	800a730 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a440:	f000 fcf0 	bl	800ae24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a446:	f000 f9c5 	bl	800a7d4 <prvIsQueueEmpty>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f43f af6d 	beq.w	800a32c <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a452:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a454:	4618      	mov	r0, r3
 800a456:	3738      	adds	r7, #56	@ 0x38
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	e000ed04 	.word	0xe000ed04

0800a460 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08e      	sub	sp, #56	@ 0x38
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10b      	bne.n	800a48e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	623b      	str	r3, [r7, #32]
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	e7fd      	b.n	800a48a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d103      	bne.n	800a49c <xQueueReceiveFromISR+0x3c>
 800a494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <xQueueReceiveFromISR+0x40>
 800a49c:	2301      	movs	r3, #1
 800a49e:	e000      	b.n	800a4a2 <xQueueReceiveFromISR+0x42>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10b      	bne.n	800a4be <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	61fb      	str	r3, [r7, #28]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4be:	f001 fff3 	bl	800c4a8 <vPortValidateInterruptPriority>
	__asm volatile
 800a4c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	61ba      	str	r2, [r7, #24]
 800a4d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d02f      	beq.n	800a54a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4f4:	68b9      	ldr	r1, [r7, #8]
 800a4f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4f8:	f000 f8f4 	bl	800a6e4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	1e5a      	subs	r2, r3, #1
 800a500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a502:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a504:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a50c:	d112      	bne.n	800a534 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d016      	beq.n	800a544 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a518:	3310      	adds	r3, #16
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fea2 	bl	800b264 <xTaskRemoveFromEventList>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00e      	beq.n	800a544 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00b      	beq.n	800a544 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	e007      	b.n	800a544 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a538:	3301      	adds	r3, #1
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	b25a      	sxtb	r2, r3
 800a53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a544:	2301      	movs	r3, #1
 800a546:	637b      	str	r3, [r7, #52]	@ 0x34
 800a548:	e001      	b.n	800a54e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a550:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	f383 8811 	msr	BASEPRI, r3
}
 800a558:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3738      	adds	r7, #56	@ 0x38
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10b      	bne.n	800a58a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	60bb      	str	r3, [r7, #8]
}
 800a584:	bf00      	nop
 800a586:	bf00      	nop
 800a588:	e7fd      	b.n	800a586 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a58a:	f001 fead 	bl	800c2e8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a592:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a594:	f001 feda 	bl	800c34c <vPortExitCritical>

	return uxReturn;
 800a598:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b087      	sub	sp, #28
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10b      	bne.n	800a5cc <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	60fb      	str	r3, [r7, #12]
}
 800a5c6:	bf00      	nop
 800a5c8:	bf00      	nop
 800a5ca:	e7fd      	b.n	800a5c8 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a5d2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	371c      	adds	r7, #28
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d006      	beq.n	800a5fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	e001      	b.n	800a602 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a602:	68fb      	ldr	r3, [r7, #12]
	}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a624:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10d      	bne.n	800a64a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d14d      	bne.n	800a6d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 f86e 	bl	800b71c <xTaskPriorityDisinherit>
 800a640:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	609a      	str	r2, [r3, #8]
 800a648:	e043      	b.n	800a6d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d119      	bne.n	800a684 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6858      	ldr	r0, [r3, #4]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a658:	461a      	mov	r2, r3
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	f01c fdb4 	bl	80271c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a668:	441a      	add	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	429a      	cmp	r2, r3
 800a678:	d32b      	bcc.n	800a6d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	e026      	b.n	800a6d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68d8      	ldr	r0, [r3, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68c:	461a      	mov	r2, r3
 800a68e:	68b9      	ldr	r1, [r7, #8]
 800a690:	f01c fd9a 	bl	80271c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68da      	ldr	r2, [r3, #12]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a69c:	425b      	negs	r3, r3
 800a69e:	441a      	add	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68da      	ldr	r2, [r3, #12]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d207      	bcs.n	800a6c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	689a      	ldr	r2, [r3, #8]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6b8:	425b      	negs	r3, r3
 800a6ba:	441a      	add	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d105      	bne.n	800a6d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	1c5a      	adds	r2, r3, #1
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a6da:	697b      	ldr	r3, [r7, #20]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d018      	beq.n	800a728 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68da      	ldr	r2, [r3, #12]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6fe:	441a      	add	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68da      	ldr	r2, [r3, #12]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d303      	bcc.n	800a718 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68d9      	ldr	r1, [r3, #12]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a720:	461a      	mov	r2, r3
 800a722:	6838      	ldr	r0, [r7, #0]
 800a724:	f01c fd50 	bl	80271c8 <memcpy>
	}
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a738:	f001 fdd6 	bl	800c2e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a742:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a744:	e011      	b.n	800a76a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d012      	beq.n	800a774 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3324      	adds	r3, #36	@ 0x24
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fd86 	bl	800b264 <xTaskRemoveFromEventList>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a75e:	f000 fe5f 	bl	800b420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	3b01      	subs	r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	dce9      	bgt.n	800a746 <prvUnlockQueue+0x16>
 800a772:	e000      	b.n	800a776 <prvUnlockQueue+0x46>
					break;
 800a774:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	22ff      	movs	r2, #255	@ 0xff
 800a77a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a77e:	f001 fde5 	bl	800c34c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a782:	f001 fdb1 	bl	800c2e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a78c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a78e:	e011      	b.n	800a7b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d012      	beq.n	800a7be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3310      	adds	r3, #16
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fd61 	bl	800b264 <xTaskRemoveFromEventList>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7a8:	f000 fe3a 	bl	800b420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dce9      	bgt.n	800a790 <prvUnlockQueue+0x60>
 800a7bc:	e000      	b.n	800a7c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	22ff      	movs	r2, #255	@ 0xff
 800a7c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a7c8:	f001 fdc0 	bl	800c34c <vPortExitCritical>
}
 800a7cc:	bf00      	nop
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7dc:	f001 fd84 	bl	800c2e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	e001      	b.n	800a7f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f2:	f001 fdab 	bl	800c34c <vPortExitCritical>

	return xReturn;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a808:	f001 fd6e 	bl	800c2e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a814:	429a      	cmp	r2, r3
 800a816:	d102      	bne.n	800a81e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a818:	2301      	movs	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e001      	b.n	800a822 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a81e:	2300      	movs	r3, #0
 800a820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a822:	f001 fd93 	bl	800c34c <vPortExitCritical>

	return xReturn;
 800a826:	68fb      	ldr	r3, [r7, #12]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	e014      	b.n	800a86a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a840:	4a0f      	ldr	r2, [pc, #60]	@ (800a880 <vQueueAddToRegistry+0x50>)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10b      	bne.n	800a864 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a84c:	490c      	ldr	r1, [pc, #48]	@ (800a880 <vQueueAddToRegistry+0x50>)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a856:	4a0a      	ldr	r2, [pc, #40]	@ (800a880 <vQueueAddToRegistry+0x50>)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	4413      	add	r3, r2
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a862:	e006      	b.n	800a872 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3301      	adds	r3, #1
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b07      	cmp	r3, #7
 800a86e:	d9e7      	bls.n	800a840 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a870:	bf00      	nop
 800a872:	bf00      	nop
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	20001900 	.word	0x20001900

0800a884 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a894:	f001 fd28 	bl	800c2e8 <vPortEnterCritical>
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a89e:	b25b      	sxtb	r3, r3
 800a8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8a4:	d103      	bne.n	800a8ae <vQueueWaitForMessageRestricted+0x2a>
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8b4:	b25b      	sxtb	r3, r3
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8ba:	d103      	bne.n	800a8c4 <vQueueWaitForMessageRestricted+0x40>
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8c4:	f001 fd42 	bl	800c34c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d106      	bne.n	800a8de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	3324      	adds	r3, #36	@ 0x24
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	68b9      	ldr	r1, [r7, #8]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f000 fc97 	bl	800b20c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8de:	6978      	ldr	r0, [r7, #20]
 800a8e0:	f7ff ff26 	bl	800a730 <prvUnlockQueue>
	}
 800a8e4:	bf00      	nop
 800a8e6:	3718      	adds	r7, #24
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08e      	sub	sp, #56	@ 0x38
 800a8f0:	af04      	add	r7, sp, #16
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10b      	bne.n	800a918 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	623b      	str	r3, [r7, #32]
}
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	e7fd      	b.n	800a914 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10b      	bne.n	800a936 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	61fb      	str	r3, [r7, #28]
}
 800a930:	bf00      	nop
 800a932:	bf00      	nop
 800a934:	e7fd      	b.n	800a932 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a936:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800a93a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800a942:	d00b      	beq.n	800a95c <xTaskCreateStatic+0x70>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	61bb      	str	r3, [r7, #24]
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	e7fd      	b.n	800a958 <xTaskCreateStatic+0x6c>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a95c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01e      	beq.n	800a9a2 <xTaskCreateStatic+0xb6>
 800a964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a966:	2b00      	cmp	r3, #0
 800a968:	d01b      	beq.n	800a9a2 <xTaskCreateStatic+0xb6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a970:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a972:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a976:	2202      	movs	r2, #2
 800a978:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a97c:	2300      	movs	r3, #0
 800a97e:	9303      	str	r3, [sp, #12]
 800a980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a982:	9302      	str	r3, [sp, #8]
 800a984:	f107 0314 	add.w	r3, r7, #20
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 f851 	bl	800aa3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a99a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a99c:	f000 f91e 	bl	800abdc <prvAddNewTaskToReadyList>
 800a9a0:	e001      	b.n	800a9a6 <xTaskCreateStatic+0xba>
		}
		else
		{
			xReturn = NULL;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9a6:	697b      	ldr	r3, [r7, #20]
	}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3728      	adds	r7, #40	@ 0x28
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08c      	sub	sp, #48	@ 0x30
 800a9b4:	af04      	add	r7, sp, #16
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	603b      	str	r3, [r7, #0]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9c0:	88fb      	ldrh	r3, [r7, #6]
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f001 fdb1 	bl	800c52c <pvPortMalloc>
 800a9ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00f      	beq.n	800a9f2 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9d2:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800a9d6:	f001 fda9 	bl	800c52c <pvPortMalloc>
 800a9da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	631a      	str	r2, [r3, #48]	@ 0x30
 800a9e8:	e005      	b.n	800a9f6 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9ea:	6978      	ldr	r0, [r7, #20]
 800a9ec:	f001 fe6c 	bl	800c6c8 <vPortFree>
 800a9f0:	e001      	b.n	800a9f6 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d017      	beq.n	800aa2c <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 217d 	strb.w	r2, [r3, #381]	@ 0x17d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa04:	88fa      	ldrh	r2, [r7, #6]
 800aa06:	2300      	movs	r3, #0
 800aa08:	9303      	str	r3, [sp, #12]
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	9302      	str	r3, [sp, #8]
 800aa0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	68b9      	ldr	r1, [r7, #8]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 f80e 	bl	800aa3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa20:	69f8      	ldr	r0, [r7, #28]
 800aa22:	f000 f8db 	bl	800abdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa26:	2301      	movs	r3, #1
 800aa28:	61bb      	str	r3, [r7, #24]
 800aa2a:	e002      	b.n	800aa32 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa32:	69bb      	ldr	r3, [r7, #24]
	}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3720      	adds	r7, #32
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b088      	sub	sp, #32
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	461a      	mov	r2, r3
 800aa54:	21a5      	movs	r1, #165	@ 0xa5
 800aa56:	f01b f97b 	bl	8025d50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa64:	3b01      	subs	r3, #1
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	f023 0307 	bic.w	r3, r3, #7
 800aa72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	617b      	str	r3, [r7, #20]
}
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	e7fd      	b.n	800aa92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01f      	beq.n	800aadc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]
 800aaa0:	e012      	b.n	800aac8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	7819      	ldrb	r1, [r3, #0]
 800aaaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	4413      	add	r3, r2
 800aab0:	3334      	adds	r3, #52	@ 0x34
 800aab2:	460a      	mov	r2, r1
 800aab4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	4413      	add	r3, r2
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d006      	beq.n	800aad0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	3301      	adds	r3, #1
 800aac6:	61fb      	str	r3, [r7, #28]
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	2b0f      	cmp	r3, #15
 800aacc:	d9e9      	bls.n	800aaa2 <prvInitialiseNewTask+0x66>
 800aace:	e000      	b.n	800aad2 <prvInitialiseNewTask+0x96>
			{
				break;
 800aad0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aada:	e003      	b.n	800aae4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae6:	2b37      	cmp	r3, #55	@ 0x37
 800aae8:	d901      	bls.n	800aaee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aaea:	2337      	movs	r3, #55	@ 0x37
 800aaec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaf2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaf8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafc:	2200      	movs	r2, #0
 800aafe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab02:	3304      	adds	r3, #4
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe fda3 	bl	8009650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0c:	3318      	adds	r3, #24
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fe fd9e 	bl	8009650 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3c:	3358      	adds	r3, #88	@ 0x58
 800ab3e:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800ab42:	2100      	movs	r1, #0
 800ab44:	4618      	mov	r0, r3
 800ab46:	f01b f903 	bl	8025d50 <memset>
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4c:	4a20      	ldr	r2, [pc, #128]	@ (800abd0 <prvInitialiseNewTask+0x194>)
 800ab4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	4a20      	ldr	r2, [pc, #128]	@ (800abd4 <prvInitialiseNewTask+0x198>)
 800ab54:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab58:	4a1f      	ldr	r2, [pc, #124]	@ (800abd8 <prvInitialiseNewTask+0x19c>)
 800ab5a:	665a      	str	r2, [r3, #100]	@ 0x64
 800ab5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab5e:	f04f 0201 	mov.w	r2, #1
 800ab62:	f04f 0300 	mov.w	r3, #0
 800ab66:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6c:	f243 320e 	movw	r2, #13070	@ 0x330e
 800ab70:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 800ab74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab76:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 800ab7a:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab80:	f241 2234 	movw	r2, #4660	@ 0x1234
 800ab84:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
 800ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8a:	f24e 626d 	movw	r2, #58989	@ 0xe66d
 800ab8e:	f8a3 20fe 	strh.w	r2, [r3, #254]	@ 0xfe
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	f64d 62ec 	movw	r2, #57068	@ 0xdeec
 800ab98:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	2205      	movs	r2, #5
 800aba0:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
 800aba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba6:	220b      	movs	r2, #11
 800aba8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	69b8      	ldr	r0, [r7, #24]
 800abb2:	f001 fa69 	bl	800c088 <pxPortInitialiseStack>
 800abb6:	4602      	mov	r2, r0
 800abb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <prvInitialiseNewTask+0x18c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abc8:	bf00      	nop
 800abca:	3720      	adds	r7, #32
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20018178 	.word	0x20018178
 800abd4:	200181e0 	.word	0x200181e0
 800abd8:	20018248 	.word	0x20018248

0800abdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abe4:	f001 fb80 	bl	800c2e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abe8:	4b2d      	ldr	r3, [pc, #180]	@ (800aca0 <prvAddNewTaskToReadyList+0xc4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3301      	adds	r3, #1
 800abee:	4a2c      	ldr	r2, [pc, #176]	@ (800aca0 <prvAddNewTaskToReadyList+0xc4>)
 800abf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abf2:	4b2c      	ldr	r3, [pc, #176]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abfa:	4a2a      	ldr	r2, [pc, #168]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac00:	4b27      	ldr	r3, [pc, #156]	@ (800aca0 <prvAddNewTaskToReadyList+0xc4>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d110      	bne.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac08:	f000 fc2e 	bl	800b468 <prvInitialiseTaskLists>
 800ac0c:	e00d      	b.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac0e:	4b26      	ldr	r3, [pc, #152]	@ (800aca8 <prvAddNewTaskToReadyList+0xcc>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac16:	4b23      	ldr	r3, [pc, #140]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d802      	bhi.n	800ac2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac24:	4a1f      	ldr	r2, [pc, #124]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac2a:	4b20      	ldr	r3, [pc, #128]	@ (800acac <prvAddNewTaskToReadyList+0xd0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	4a1e      	ldr	r2, [pc, #120]	@ (800acac <prvAddNewTaskToReadyList+0xd0>)
 800ac32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac34:	4b1d      	ldr	r3, [pc, #116]	@ (800acac <prvAddNewTaskToReadyList+0xd0>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac40:	4b1b      	ldr	r3, [pc, #108]	@ (800acb0 <prvAddNewTaskToReadyList+0xd4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d903      	bls.n	800ac50 <prvAddNewTaskToReadyList+0x74>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac4c:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <prvAddNewTaskToReadyList+0xd4>)
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4a15      	ldr	r2, [pc, #84]	@ (800acb4 <prvAddNewTaskToReadyList+0xd8>)
 800ac5e:	441a      	add	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f7fe fcff 	bl	800966a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac6c:	f001 fb6e 	bl	800c34c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac70:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <prvAddNewTaskToReadyList+0xcc>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac78:	4b0a      	ldr	r3, [pc, #40]	@ (800aca4 <prvAddNewTaskToReadyList+0xc8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d207      	bcs.n	800ac96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac86:	4b0c      	ldr	r3, [pc, #48]	@ (800acb8 <prvAddNewTaskToReadyList+0xdc>)
 800ac88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20001e14 	.word	0x20001e14
 800aca4:	20001940 	.word	0x20001940
 800aca8:	20001e20 	.word	0x20001e20
 800acac:	20001e30 	.word	0x20001e30
 800acb0:	20001e1c 	.word	0x20001e1c
 800acb4:	20001944 	.word	0x20001944
 800acb8:	e000ed04 	.word	0xe000ed04

0800acbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800acc4:	2300      	movs	r3, #0
 800acc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d018      	beq.n	800ad00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800acce:	4b14      	ldr	r3, [pc, #80]	@ (800ad20 <vTaskDelay+0x64>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00b      	beq.n	800acee <vTaskDelay+0x32>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	60bb      	str	r3, [r7, #8]
}
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
 800acec:	e7fd      	b.n	800acea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800acee:	f000 f88b 	bl	800ae08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800acf2:	2100      	movs	r1, #0
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fe19 	bl	800b92c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acfa:	f000 f893 	bl	800ae24 <xTaskResumeAll>
 800acfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d107      	bne.n	800ad16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ad06:	4b07      	ldr	r3, [pc, #28]	@ (800ad24 <vTaskDelay+0x68>)
 800ad08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20001e3c 	.word	0x20001e3c
 800ad24:	e000ed04 	.word	0xe000ed04

0800ad28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08a      	sub	sp, #40	@ 0x28
 800ad2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad36:	463a      	mov	r2, r7
 800ad38:	1d39      	adds	r1, r7, #4
 800ad3a:	f107 0308 	add.w	r3, r7, #8
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fc32 	bl	80095a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	9202      	str	r2, [sp, #8]
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	2300      	movs	r3, #0
 800ad54:	460a      	mov	r2, r1
 800ad56:	4924      	ldr	r1, [pc, #144]	@ (800ade8 <vTaskStartScheduler+0xc0>)
 800ad58:	4824      	ldr	r0, [pc, #144]	@ (800adec <vTaskStartScheduler+0xc4>)
 800ad5a:	f7ff fdc7 	bl	800a8ec <xTaskCreateStatic>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	4a23      	ldr	r2, [pc, #140]	@ (800adf0 <vTaskStartScheduler+0xc8>)
 800ad62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad64:	4b22      	ldr	r3, [pc, #136]	@ (800adf0 <vTaskStartScheduler+0xc8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d002      	beq.n	800ad72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	617b      	str	r3, [r7, #20]
 800ad70:	e001      	b.n	800ad76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad72:	2300      	movs	r3, #0
 800ad74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d102      	bne.n	800ad82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad7c:	f000 fe2a 	bl	800b9d4 <xTimerCreateTimerTask>
 800ad80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d11b      	bne.n	800adc0 <vTaskStartScheduler+0x98>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	613b      	str	r3, [r7, #16]
}
 800ad9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad9c:	4b15      	ldr	r3, [pc, #84]	@ (800adf4 <vTaskStartScheduler+0xcc>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3358      	adds	r3, #88	@ 0x58
 800ada2:	4a15      	ldr	r2, [pc, #84]	@ (800adf8 <vTaskStartScheduler+0xd0>)
 800ada4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ada6:	4b15      	ldr	r3, [pc, #84]	@ (800adfc <vTaskStartScheduler+0xd4>)
 800ada8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adae:	4b14      	ldr	r3, [pc, #80]	@ (800ae00 <vTaskStartScheduler+0xd8>)
 800adb0:	2201      	movs	r2, #1
 800adb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800adb4:	4b13      	ldr	r3, [pc, #76]	@ (800ae04 <vTaskStartScheduler+0xdc>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800adba:	f001 f9f1 	bl	800c1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800adbe:	e00f      	b.n	800ade0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adc6:	d10b      	bne.n	800ade0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	60fb      	str	r3, [r7, #12]
}
 800adda:	bf00      	nop
 800addc:	bf00      	nop
 800adde:	e7fd      	b.n	800addc <vTaskStartScheduler+0xb4>
}
 800ade0:	bf00      	nop
 800ade2:	3718      	adds	r7, #24
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	08030794 	.word	0x08030794
 800adec:	0800b439 	.word	0x0800b439
 800adf0:	20001e38 	.word	0x20001e38
 800adf4:	20001940 	.word	0x20001940
 800adf8:	20000430 	.word	0x20000430
 800adfc:	20001e34 	.word	0x20001e34
 800ae00:	20001e20 	.word	0x20001e20
 800ae04:	20001e18 	.word	0x20001e18

0800ae08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae0c:	4b04      	ldr	r3, [pc, #16]	@ (800ae20 <vTaskSuspendAll+0x18>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3301      	adds	r3, #1
 800ae12:	4a03      	ldr	r2, [pc, #12]	@ (800ae20 <vTaskSuspendAll+0x18>)
 800ae14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae16:	bf00      	nop
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	20001e3c 	.word	0x20001e3c

0800ae24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae32:	4b42      	ldr	r3, [pc, #264]	@ (800af3c <xTaskResumeAll+0x118>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10b      	bne.n	800ae52 <xTaskResumeAll+0x2e>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	603b      	str	r3, [r7, #0]
}
 800ae4c:	bf00      	nop
 800ae4e:	bf00      	nop
 800ae50:	e7fd      	b.n	800ae4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae52:	f001 fa49 	bl	800c2e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae56:	4b39      	ldr	r3, [pc, #228]	@ (800af3c <xTaskResumeAll+0x118>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	4a37      	ldr	r2, [pc, #220]	@ (800af3c <xTaskResumeAll+0x118>)
 800ae5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae60:	4b36      	ldr	r3, [pc, #216]	@ (800af3c <xTaskResumeAll+0x118>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d162      	bne.n	800af2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae68:	4b35      	ldr	r3, [pc, #212]	@ (800af40 <xTaskResumeAll+0x11c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d05e      	beq.n	800af2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae70:	e02f      	b.n	800aed2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae72:	4b34      	ldr	r3, [pc, #208]	@ (800af44 <xTaskResumeAll+0x120>)
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3318      	adds	r3, #24
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fc50 	bl	8009724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	3304      	adds	r3, #4
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe fc4b 	bl	8009724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae92:	4b2d      	ldr	r3, [pc, #180]	@ (800af48 <xTaskResumeAll+0x124>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d903      	bls.n	800aea2 <xTaskResumeAll+0x7e>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9e:	4a2a      	ldr	r2, [pc, #168]	@ (800af48 <xTaskResumeAll+0x124>)
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4a27      	ldr	r2, [pc, #156]	@ (800af4c <xTaskResumeAll+0x128>)
 800aeb0:	441a      	add	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	4610      	mov	r0, r2
 800aeba:	f7fe fbd6 	bl	800966a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aec2:	4b23      	ldr	r3, [pc, #140]	@ (800af50 <xTaskResumeAll+0x12c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d302      	bcc.n	800aed2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aecc:	4b21      	ldr	r3, [pc, #132]	@ (800af54 <xTaskResumeAll+0x130>)
 800aece:	2201      	movs	r2, #1
 800aed0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aed2:	4b1c      	ldr	r3, [pc, #112]	@ (800af44 <xTaskResumeAll+0x120>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1cb      	bne.n	800ae72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aee0:	f000 fb66 	bl	800b5b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aee4:	4b1c      	ldr	r3, [pc, #112]	@ (800af58 <xTaskResumeAll+0x134>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d010      	beq.n	800af12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aef0:	f000 f846 	bl	800af80 <xTaskIncrementTick>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aefa:	4b16      	ldr	r3, [pc, #88]	@ (800af54 <xTaskResumeAll+0x130>)
 800aefc:	2201      	movs	r2, #1
 800aefe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3b01      	subs	r3, #1
 800af04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1f1      	bne.n	800aef0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800af0c:	4b12      	ldr	r3, [pc, #72]	@ (800af58 <xTaskResumeAll+0x134>)
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af12:	4b10      	ldr	r3, [pc, #64]	@ (800af54 <xTaskResumeAll+0x130>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d009      	beq.n	800af2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af1a:	2301      	movs	r3, #1
 800af1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af1e:	4b0f      	ldr	r3, [pc, #60]	@ (800af5c <xTaskResumeAll+0x138>)
 800af20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af2e:	f001 fa0d 	bl	800c34c <vPortExitCritical>

	return xAlreadyYielded;
 800af32:	68bb      	ldr	r3, [r7, #8]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	20001e3c 	.word	0x20001e3c
 800af40:	20001e14 	.word	0x20001e14
 800af44:	20001dd4 	.word	0x20001dd4
 800af48:	20001e1c 	.word	0x20001e1c
 800af4c:	20001944 	.word	0x20001944
 800af50:	20001940 	.word	0x20001940
 800af54:	20001e28 	.word	0x20001e28
 800af58:	20001e24 	.word	0x20001e24
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af66:	4b05      	ldr	r3, [pc, #20]	@ (800af7c <xTaskGetTickCount+0x1c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af6c:	687b      	ldr	r3, [r7, #4]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	20001e18 	.word	0x20001e18

0800af80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af8a:	4b4f      	ldr	r3, [pc, #316]	@ (800b0c8 <xTaskIncrementTick+0x148>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f040 8090 	bne.w	800b0b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af94:	4b4d      	ldr	r3, [pc, #308]	@ (800b0cc <xTaskIncrementTick+0x14c>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3301      	adds	r3, #1
 800af9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af9c:	4a4b      	ldr	r2, [pc, #300]	@ (800b0cc <xTaskIncrementTick+0x14c>)
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d121      	bne.n	800afec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800afa8:	4b49      	ldr	r3, [pc, #292]	@ (800b0d0 <xTaskIncrementTick+0x150>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00b      	beq.n	800afca <xTaskIncrementTick+0x4a>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	603b      	str	r3, [r7, #0]
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	e7fd      	b.n	800afc6 <xTaskIncrementTick+0x46>
 800afca:	4b41      	ldr	r3, [pc, #260]	@ (800b0d0 <xTaskIncrementTick+0x150>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	4b40      	ldr	r3, [pc, #256]	@ (800b0d4 <xTaskIncrementTick+0x154>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a3e      	ldr	r2, [pc, #248]	@ (800b0d0 <xTaskIncrementTick+0x150>)
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	4a3e      	ldr	r2, [pc, #248]	@ (800b0d4 <xTaskIncrementTick+0x154>)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	6013      	str	r3, [r2, #0]
 800afde:	4b3e      	ldr	r3, [pc, #248]	@ (800b0d8 <xTaskIncrementTick+0x158>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3301      	adds	r3, #1
 800afe4:	4a3c      	ldr	r2, [pc, #240]	@ (800b0d8 <xTaskIncrementTick+0x158>)
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	f000 fae2 	bl	800b5b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afec:	4b3b      	ldr	r3, [pc, #236]	@ (800b0dc <xTaskIncrementTick+0x15c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d349      	bcc.n	800b08a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aff6:	4b36      	ldr	r3, [pc, #216]	@ (800b0d0 <xTaskIncrementTick+0x150>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d104      	bne.n	800b00a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b000:	4b36      	ldr	r3, [pc, #216]	@ (800b0dc <xTaskIncrementTick+0x15c>)
 800b002:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b006:	601a      	str	r2, [r3, #0]
					break;
 800b008:	e03f      	b.n	800b08a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00a:	4b31      	ldr	r3, [pc, #196]	@ (800b0d0 <xTaskIncrementTick+0x150>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d203      	bcs.n	800b02a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b022:	4a2e      	ldr	r2, [pc, #184]	@ (800b0dc <xTaskIncrementTick+0x15c>)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b028:	e02f      	b.n	800b08a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	3304      	adds	r3, #4
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fe fb78 	bl	8009724 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d004      	beq.n	800b046 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	3318      	adds	r3, #24
 800b040:	4618      	mov	r0, r3
 800b042:	f7fe fb6f 	bl	8009724 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b04a:	4b25      	ldr	r3, [pc, #148]	@ (800b0e0 <xTaskIncrementTick+0x160>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d903      	bls.n	800b05a <xTaskIncrementTick+0xda>
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b056:	4a22      	ldr	r2, [pc, #136]	@ (800b0e0 <xTaskIncrementTick+0x160>)
 800b058:	6013      	str	r3, [r2, #0]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b05e:	4613      	mov	r3, r2
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	4413      	add	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4a1f      	ldr	r2, [pc, #124]	@ (800b0e4 <xTaskIncrementTick+0x164>)
 800b068:	441a      	add	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	3304      	adds	r3, #4
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f7fe fafa 	bl	800966a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b07a:	4b1b      	ldr	r3, [pc, #108]	@ (800b0e8 <xTaskIncrementTick+0x168>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b080:	429a      	cmp	r2, r3
 800b082:	d3b8      	bcc.n	800aff6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b084:	2301      	movs	r3, #1
 800b086:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b088:	e7b5      	b.n	800aff6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b08a:	4b17      	ldr	r3, [pc, #92]	@ (800b0e8 <xTaskIncrementTick+0x168>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b090:	4914      	ldr	r1, [pc, #80]	@ (800b0e4 <xTaskIncrementTick+0x164>)
 800b092:	4613      	mov	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	440b      	add	r3, r1
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d901      	bls.n	800b0a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0a6:	4b11      	ldr	r3, [pc, #68]	@ (800b0ec <xTaskIncrementTick+0x16c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d007      	beq.n	800b0be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	617b      	str	r3, [r7, #20]
 800b0b2:	e004      	b.n	800b0be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0b4:	4b0e      	ldr	r3, [pc, #56]	@ (800b0f0 <xTaskIncrementTick+0x170>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	4a0d      	ldr	r2, [pc, #52]	@ (800b0f0 <xTaskIncrementTick+0x170>)
 800b0bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b0be:	697b      	ldr	r3, [r7, #20]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3718      	adds	r7, #24
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	20001e3c 	.word	0x20001e3c
 800b0cc:	20001e18 	.word	0x20001e18
 800b0d0:	20001dcc 	.word	0x20001dcc
 800b0d4:	20001dd0 	.word	0x20001dd0
 800b0d8:	20001e2c 	.word	0x20001e2c
 800b0dc:	20001e34 	.word	0x20001e34
 800b0e0:	20001e1c 	.word	0x20001e1c
 800b0e4:	20001944 	.word	0x20001944
 800b0e8:	20001940 	.word	0x20001940
 800b0ec:	20001e28 	.word	0x20001e28
 800b0f0:	20001e24 	.word	0x20001e24

0800b0f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0fa:	4b2b      	ldr	r3, [pc, #172]	@ (800b1a8 <vTaskSwitchContext+0xb4>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b102:	4b2a      	ldr	r3, [pc, #168]	@ (800b1ac <vTaskSwitchContext+0xb8>)
 800b104:	2201      	movs	r2, #1
 800b106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b108:	e047      	b.n	800b19a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b10a:	4b28      	ldr	r3, [pc, #160]	@ (800b1ac <vTaskSwitchContext+0xb8>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b110:	4b27      	ldr	r3, [pc, #156]	@ (800b1b0 <vTaskSwitchContext+0xbc>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	e011      	b.n	800b13c <vTaskSwitchContext+0x48>
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10b      	bne.n	800b136 <vTaskSwitchContext+0x42>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	607b      	str	r3, [r7, #4]
}
 800b130:	bf00      	nop
 800b132:	bf00      	nop
 800b134:	e7fd      	b.n	800b132 <vTaskSwitchContext+0x3e>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3b01      	subs	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	491d      	ldr	r1, [pc, #116]	@ (800b1b4 <vTaskSwitchContext+0xc0>)
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	4613      	mov	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d0e3      	beq.n	800b118 <vTaskSwitchContext+0x24>
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4a16      	ldr	r2, [pc, #88]	@ (800b1b4 <vTaskSwitchContext+0xc0>)
 800b15c:	4413      	add	r3, r2
 800b15e:	60bb      	str	r3, [r7, #8]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	605a      	str	r2, [r3, #4]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	3308      	adds	r3, #8
 800b172:	429a      	cmp	r2, r3
 800b174:	d104      	bne.n	800b180 <vTaskSwitchContext+0x8c>
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	605a      	str	r2, [r3, #4]
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	4a0c      	ldr	r2, [pc, #48]	@ (800b1b8 <vTaskSwitchContext+0xc4>)
 800b188:	6013      	str	r3, [r2, #0]
 800b18a:	4a09      	ldr	r2, [pc, #36]	@ (800b1b0 <vTaskSwitchContext+0xbc>)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b190:	4b09      	ldr	r3, [pc, #36]	@ (800b1b8 <vTaskSwitchContext+0xc4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3358      	adds	r3, #88	@ 0x58
 800b196:	4a09      	ldr	r2, [pc, #36]	@ (800b1bc <vTaskSwitchContext+0xc8>)
 800b198:	6013      	str	r3, [r2, #0]
}
 800b19a:	bf00      	nop
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	20001e3c 	.word	0x20001e3c
 800b1ac:	20001e28 	.word	0x20001e28
 800b1b0:	20001e1c 	.word	0x20001e1c
 800b1b4:	20001944 	.word	0x20001944
 800b1b8:	20001940 	.word	0x20001940
 800b1bc:	20000430 	.word	0x20000430

0800b1c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10b      	bne.n	800b1e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60fb      	str	r3, [r7, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	bf00      	nop
 800b1e6:	e7fd      	b.n	800b1e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1e8:	4b07      	ldr	r3, [pc, #28]	@ (800b208 <vTaskPlaceOnEventList+0x48>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3318      	adds	r3, #24
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7fe fa5e 	bl	80096b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	6838      	ldr	r0, [r7, #0]
 800b1fa:	f000 fb97 	bl	800b92c <prvAddCurrentTaskToDelayedList>
}
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20001940 	.word	0x20001940

0800b20c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10b      	bne.n	800b236 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	617b      	str	r3, [r7, #20]
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	e7fd      	b.n	800b232 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b236:	4b0a      	ldr	r3, [pc, #40]	@ (800b260 <vTaskPlaceOnEventListRestricted+0x54>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3318      	adds	r3, #24
 800b23c:	4619      	mov	r1, r3
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7fe fa13 	bl	800966a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b24a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b24e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	68b8      	ldr	r0, [r7, #8]
 800b254:	f000 fb6a 	bl	800b92c <prvAddCurrentTaskToDelayedList>
	}
 800b258:	bf00      	nop
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20001940 	.word	0x20001940

0800b264 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10b      	bne.n	800b292 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	60fb      	str	r3, [r7, #12]
}
 800b28c:	bf00      	nop
 800b28e:	bf00      	nop
 800b290:	e7fd      	b.n	800b28e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	3318      	adds	r3, #24
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe fa44 	bl	8009724 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b29c:	4b1d      	ldr	r3, [pc, #116]	@ (800b314 <xTaskRemoveFromEventList+0xb0>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d11d      	bne.n	800b2e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe fa3b 	bl	8009724 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b2:	4b19      	ldr	r3, [pc, #100]	@ (800b318 <xTaskRemoveFromEventList+0xb4>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d903      	bls.n	800b2c2 <xTaskRemoveFromEventList+0x5e>
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2be:	4a16      	ldr	r2, [pc, #88]	@ (800b318 <xTaskRemoveFromEventList+0xb4>)
 800b2c0:	6013      	str	r3, [r2, #0]
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4a13      	ldr	r2, [pc, #76]	@ (800b31c <xTaskRemoveFromEventList+0xb8>)
 800b2d0:	441a      	add	r2, r3
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4610      	mov	r0, r2
 800b2da:	f7fe f9c6 	bl	800966a <vListInsertEnd>
 800b2de:	e005      	b.n	800b2ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	3318      	adds	r3, #24
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	480e      	ldr	r0, [pc, #56]	@ (800b320 <xTaskRemoveFromEventList+0xbc>)
 800b2e8:	f7fe f9bf 	bl	800966a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b324 <xTaskRemoveFromEventList+0xc0>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d905      	bls.n	800b306 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b328 <xTaskRemoveFromEventList+0xc4>)
 800b300:	2201      	movs	r2, #1
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	e001      	b.n	800b30a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b30a:	697b      	ldr	r3, [r7, #20]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	20001e3c 	.word	0x20001e3c
 800b318:	20001e1c 	.word	0x20001e1c
 800b31c:	20001944 	.word	0x20001944
 800b320:	20001dd4 	.word	0x20001dd4
 800b324:	20001940 	.word	0x20001940
 800b328:	20001e28 	.word	0x20001e28

0800b32c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b334:	4b06      	ldr	r3, [pc, #24]	@ (800b350 <vTaskInternalSetTimeOutState+0x24>)
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b33c:	4b05      	ldr	r3, [pc, #20]	@ (800b354 <vTaskInternalSetTimeOutState+0x28>)
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	605a      	str	r2, [r3, #4]
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	20001e2c 	.word	0x20001e2c
 800b354:	20001e18 	.word	0x20001e18

0800b358 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10b      	bne.n	800b380 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36c:	f383 8811 	msr	BASEPRI, r3
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	f3bf 8f4f 	dsb	sy
 800b378:	613b      	str	r3, [r7, #16]
}
 800b37a:	bf00      	nop
 800b37c:	bf00      	nop
 800b37e:	e7fd      	b.n	800b37c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10b      	bne.n	800b39e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	60fb      	str	r3, [r7, #12]
}
 800b398:	bf00      	nop
 800b39a:	bf00      	nop
 800b39c:	e7fd      	b.n	800b39a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b39e:	f000 ffa3 	bl	800c2e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3a2:	4b1d      	ldr	r3, [pc, #116]	@ (800b418 <xTaskCheckForTimeOut+0xc0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3ba:	d102      	bne.n	800b3c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	61fb      	str	r3, [r7, #28]
 800b3c0:	e023      	b.n	800b40a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	4b15      	ldr	r3, [pc, #84]	@ (800b41c <xTaskCheckForTimeOut+0xc4>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d007      	beq.n	800b3de <xTaskCheckForTimeOut+0x86>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	69ba      	ldr	r2, [r7, #24]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d302      	bcc.n	800b3de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	61fb      	str	r3, [r7, #28]
 800b3dc:	e015      	b.n	800b40a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d20b      	bcs.n	800b400 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	1ad2      	subs	r2, r2, r3
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7ff ff99 	bl	800b32c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61fb      	str	r3, [r7, #28]
 800b3fe:	e004      	b.n	800b40a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b406:	2301      	movs	r3, #1
 800b408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b40a:	f000 ff9f 	bl	800c34c <vPortExitCritical>

	return xReturn;
 800b40e:	69fb      	ldr	r3, [r7, #28]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3720      	adds	r7, #32
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20001e18 	.word	0x20001e18
 800b41c:	20001e2c 	.word	0x20001e2c

0800b420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b424:	4b03      	ldr	r3, [pc, #12]	@ (800b434 <vTaskMissedYield+0x14>)
 800b426:	2201      	movs	r2, #1
 800b428:	601a      	str	r2, [r3, #0]
}
 800b42a:	bf00      	nop
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	20001e28 	.word	0x20001e28

0800b438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b440:	f000 f852 	bl	800b4e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b444:	4b06      	ldr	r3, [pc, #24]	@ (800b460 <prvIdleTask+0x28>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d9f9      	bls.n	800b440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b44c:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <prvIdleTask+0x2c>)
 800b44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b45c:	e7f0      	b.n	800b440 <prvIdleTask+0x8>
 800b45e:	bf00      	nop
 800b460:	20001944 	.word	0x20001944
 800b464:	e000ed04 	.word	0xe000ed04

0800b468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b46e:	2300      	movs	r3, #0
 800b470:	607b      	str	r3, [r7, #4]
 800b472:	e00c      	b.n	800b48e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	4613      	mov	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	4a12      	ldr	r2, [pc, #72]	@ (800b4c8 <prvInitialiseTaskLists+0x60>)
 800b480:	4413      	add	r3, r2
 800b482:	4618      	mov	r0, r3
 800b484:	f7fe f8c4 	bl	8009610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3301      	adds	r3, #1
 800b48c:	607b      	str	r3, [r7, #4]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b37      	cmp	r3, #55	@ 0x37
 800b492:	d9ef      	bls.n	800b474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b494:	480d      	ldr	r0, [pc, #52]	@ (800b4cc <prvInitialiseTaskLists+0x64>)
 800b496:	f7fe f8bb 	bl	8009610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b49a:	480d      	ldr	r0, [pc, #52]	@ (800b4d0 <prvInitialiseTaskLists+0x68>)
 800b49c:	f7fe f8b8 	bl	8009610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4a0:	480c      	ldr	r0, [pc, #48]	@ (800b4d4 <prvInitialiseTaskLists+0x6c>)
 800b4a2:	f7fe f8b5 	bl	8009610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4a6:	480c      	ldr	r0, [pc, #48]	@ (800b4d8 <prvInitialiseTaskLists+0x70>)
 800b4a8:	f7fe f8b2 	bl	8009610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4ac:	480b      	ldr	r0, [pc, #44]	@ (800b4dc <prvInitialiseTaskLists+0x74>)
 800b4ae:	f7fe f8af 	bl	8009610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b4e0 <prvInitialiseTaskLists+0x78>)
 800b4b4:	4a05      	ldr	r2, [pc, #20]	@ (800b4cc <prvInitialiseTaskLists+0x64>)
 800b4b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b4e4 <prvInitialiseTaskLists+0x7c>)
 800b4ba:	4a05      	ldr	r2, [pc, #20]	@ (800b4d0 <prvInitialiseTaskLists+0x68>)
 800b4bc:	601a      	str	r2, [r3, #0]
}
 800b4be:	bf00      	nop
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20001944 	.word	0x20001944
 800b4cc:	20001da4 	.word	0x20001da4
 800b4d0:	20001db8 	.word	0x20001db8
 800b4d4:	20001dd4 	.word	0x20001dd4
 800b4d8:	20001de8 	.word	0x20001de8
 800b4dc:	20001e00 	.word	0x20001e00
 800b4e0:	20001dcc 	.word	0x20001dcc
 800b4e4:	20001dd0 	.word	0x20001dd0

0800b4e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4ee:	e019      	b.n	800b524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b4f0:	f000 fefa 	bl	800c2e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f4:	4b10      	ldr	r3, [pc, #64]	@ (800b538 <prvCheckTasksWaitingTermination+0x50>)
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3304      	adds	r3, #4
 800b500:	4618      	mov	r0, r3
 800b502:	f7fe f90f 	bl	8009724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b506:	4b0d      	ldr	r3, [pc, #52]	@ (800b53c <prvCheckTasksWaitingTermination+0x54>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	4a0b      	ldr	r2, [pc, #44]	@ (800b53c <prvCheckTasksWaitingTermination+0x54>)
 800b50e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b510:	4b0b      	ldr	r3, [pc, #44]	@ (800b540 <prvCheckTasksWaitingTermination+0x58>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3b01      	subs	r3, #1
 800b516:	4a0a      	ldr	r2, [pc, #40]	@ (800b540 <prvCheckTasksWaitingTermination+0x58>)
 800b518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b51a:	f000 ff17 	bl	800c34c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f810 	bl	800b544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b524:	4b06      	ldr	r3, [pc, #24]	@ (800b540 <prvCheckTasksWaitingTermination+0x58>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1e1      	bne.n	800b4f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b52c:	bf00      	nop
 800b52e:	bf00      	nop
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20001de8 	.word	0x20001de8
 800b53c:	20001e14 	.word	0x20001e14
 800b540:	20001dfc 	.word	0x20001dfc

0800b544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3358      	adds	r3, #88	@ 0x58
 800b550:	4618      	mov	r0, r3
 800b552:	f01b fd9f 	bl	8027094 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d108      	bne.n	800b572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b564:	4618      	mov	r0, r3
 800b566:	f001 f8af 	bl	800c6c8 <vPortFree>
				vPortFree( pxTCB );
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f001 f8ac 	bl	800c6c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b570:	e019      	b.n	800b5a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d103      	bne.n	800b584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 f8a3 	bl	800c6c8 <vPortFree>
	}
 800b582:	e010      	b.n	800b5a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 317d 	ldrb.w	r3, [r3, #381]	@ 0x17d
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d00b      	beq.n	800b5a6 <prvDeleteTCB+0x62>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	60fb      	str	r3, [r7, #12]
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	e7fd      	b.n	800b5a2 <prvDeleteTCB+0x5e>
	}
 800b5a6:	bf00      	nop
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
	...

0800b5b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e8 <prvResetNextTaskUnblockTime+0x38>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d104      	bne.n	800b5ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5ec <prvResetNextTaskUnblockTime+0x3c>)
 800b5c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5c8:	e008      	b.n	800b5dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ca:	4b07      	ldr	r3, [pc, #28]	@ (800b5e8 <prvResetNextTaskUnblockTime+0x38>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	4a04      	ldr	r2, [pc, #16]	@ (800b5ec <prvResetNextTaskUnblockTime+0x3c>)
 800b5da:	6013      	str	r3, [r2, #0]
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	20001dcc 	.word	0x20001dcc
 800b5ec:	20001e34 	.word	0x20001e34

0800b5f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b5f6:	4b05      	ldr	r3, [pc, #20]	@ (800b60c <xTaskGetCurrentTaskHandle+0x1c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b5fc:	687b      	ldr	r3, [r7, #4]
	}
 800b5fe:	4618      	mov	r0, r3
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	20001940 	.word	0x20001940

0800b610 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b616:	4b0b      	ldr	r3, [pc, #44]	@ (800b644 <xTaskGetSchedulerState+0x34>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d102      	bne.n	800b624 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b61e:	2301      	movs	r3, #1
 800b620:	607b      	str	r3, [r7, #4]
 800b622:	e008      	b.n	800b636 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b624:	4b08      	ldr	r3, [pc, #32]	@ (800b648 <xTaskGetSchedulerState+0x38>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d102      	bne.n	800b632 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b62c:	2302      	movs	r3, #2
 800b62e:	607b      	str	r3, [r7, #4]
 800b630:	e001      	b.n	800b636 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b632:	2300      	movs	r3, #0
 800b634:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b636:	687b      	ldr	r3, [r7, #4]
	}
 800b638:	4618      	mov	r0, r3
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr
 800b644:	20001e20 	.word	0x20001e20
 800b648:	20001e3c 	.word	0x20001e3c

0800b64c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d051      	beq.n	800b706 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b666:	4b2a      	ldr	r3, [pc, #168]	@ (800b710 <xTaskPriorityInherit+0xc4>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d241      	bcs.n	800b6f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	2b00      	cmp	r3, #0
 800b676:	db06      	blt.n	800b686 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b678:	4b25      	ldr	r3, [pc, #148]	@ (800b710 <xTaskPriorityInherit+0xc4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6959      	ldr	r1, [r3, #20]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b68e:	4613      	mov	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4a1f      	ldr	r2, [pc, #124]	@ (800b714 <xTaskPriorityInherit+0xc8>)
 800b698:	4413      	add	r3, r2
 800b69a:	4299      	cmp	r1, r3
 800b69c:	d122      	bne.n	800b6e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7fe f83e 	bl	8009724 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6a8:	4b19      	ldr	r3, [pc, #100]	@ (800b710 <xTaskPriorityInherit+0xc4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6b6:	4b18      	ldr	r3, [pc, #96]	@ (800b718 <xTaskPriorityInherit+0xcc>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d903      	bls.n	800b6c6 <xTaskPriorityInherit+0x7a>
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c2:	4a15      	ldr	r2, [pc, #84]	@ (800b718 <xTaskPriorityInherit+0xcc>)
 800b6c4:	6013      	str	r3, [r2, #0]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4a10      	ldr	r2, [pc, #64]	@ (800b714 <xTaskPriorityInherit+0xc8>)
 800b6d4:	441a      	add	r2, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	3304      	adds	r3, #4
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4610      	mov	r0, r2
 800b6de:	f7fd ffc4 	bl	800966a <vListInsertEnd>
 800b6e2:	e004      	b.n	800b6ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b710 <xTaskPriorityInherit+0xc4>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	60fb      	str	r3, [r7, #12]
 800b6f2:	e008      	b.n	800b706 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6f8:	4b05      	ldr	r3, [pc, #20]	@ (800b710 <xTaskPriorityInherit+0xc4>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d201      	bcs.n	800b706 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b702:	2301      	movs	r3, #1
 800b704:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b706:	68fb      	ldr	r3, [r7, #12]
	}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	20001940 	.word	0x20001940
 800b714:	20001944 	.word	0x20001944
 800b718:	20001e1c 	.word	0x20001e1c

0800b71c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b728:	2300      	movs	r3, #0
 800b72a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d058      	beq.n	800b7e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b732:	4b2f      	ldr	r3, [pc, #188]	@ (800b7f0 <xTaskPriorityDisinherit+0xd4>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d00b      	beq.n	800b754 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	60fb      	str	r3, [r7, #12]
}
 800b74e:	bf00      	nop
 800b750:	bf00      	nop
 800b752:	e7fd      	b.n	800b750 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d10b      	bne.n	800b774 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	60bb      	str	r3, [r7, #8]
}
 800b76e:	bf00      	nop
 800b770:	bf00      	nop
 800b772:	e7fd      	b.n	800b770 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b778:	1e5a      	subs	r2, r3, #1
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b786:	429a      	cmp	r2, r3
 800b788:	d02c      	beq.n	800b7e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d128      	bne.n	800b7e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	3304      	adds	r3, #4
 800b796:	4618      	mov	r0, r3
 800b798:	f7fd ffc4 	bl	8009724 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f4 <xTaskPriorityDisinherit+0xd8>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d903      	bls.n	800b7c4 <xTaskPriorityDisinherit+0xa8>
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c0:	4a0c      	ldr	r2, [pc, #48]	@ (800b7f4 <xTaskPriorityDisinherit+0xd8>)
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4a09      	ldr	r2, [pc, #36]	@ (800b7f8 <xTaskPriorityDisinherit+0xdc>)
 800b7d2:	441a      	add	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4610      	mov	r0, r2
 800b7dc:	f7fd ff45 	bl	800966a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7e4:	697b      	ldr	r3, [r7, #20]
	}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20001940 	.word	0x20001940
 800b7f4:	20001e1c 	.word	0x20001e1c
 800b7f8:	20001944 	.word	0x20001944

0800b7fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b80a:	2301      	movs	r3, #1
 800b80c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d06c      	beq.n	800b8ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10b      	bne.n	800b834 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	60fb      	str	r3, [r7, #12]
}
 800b82e:	bf00      	nop
 800b830:	bf00      	nop
 800b832:	e7fd      	b.n	800b830 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d902      	bls.n	800b844 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	61fb      	str	r3, [r7, #28]
 800b842:	e002      	b.n	800b84a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b848:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84e:	69fa      	ldr	r2, [r7, #28]
 800b850:	429a      	cmp	r2, r3
 800b852:	d04c      	beq.n	800b8ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d147      	bne.n	800b8ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b85e:	4b26      	ldr	r3, [pc, #152]	@ (800b8f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	69ba      	ldr	r2, [r7, #24]
 800b864:	429a      	cmp	r2, r3
 800b866:	d10b      	bne.n	800b880 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	60bb      	str	r3, [r7, #8]
}
 800b87a:	bf00      	nop
 800b87c:	bf00      	nop
 800b87e:	e7fd      	b.n	800b87c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b884:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	69fa      	ldr	r2, [r7, #28]
 800b88a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	2b00      	cmp	r3, #0
 800b892:	db04      	blt.n	800b89e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	6959      	ldr	r1, [r3, #20]
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4a13      	ldr	r2, [pc, #76]	@ (800b8fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b8ae:	4413      	add	r3, r2
 800b8b0:	4299      	cmp	r1, r3
 800b8b2:	d11c      	bne.n	800b8ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	3304      	adds	r3, #4
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fd ff33 	bl	8009724 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8c2:	4b0f      	ldr	r3, [pc, #60]	@ (800b900 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d903      	bls.n	800b8d2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b900 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4a07      	ldr	r2, [pc, #28]	@ (800b8fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b8e0:	441a      	add	r2, r3
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	f7fd febe 	bl	800966a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8ee:	bf00      	nop
 800b8f0:	3720      	adds	r7, #32
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20001940 	.word	0x20001940
 800b8fc:	20001944 	.word	0x20001944
 800b900:	20001e1c 	.word	0x20001e1c

0800b904 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b904:	b480      	push	{r7}
 800b906:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b908:	4b07      	ldr	r3, [pc, #28]	@ (800b928 <pvTaskIncrementMutexHeldCount+0x24>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d004      	beq.n	800b91a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b910:	4b05      	ldr	r3, [pc, #20]	@ (800b928 <pvTaskIncrementMutexHeldCount+0x24>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b916:	3201      	adds	r2, #1
 800b918:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b91a:	4b03      	ldr	r3, [pc, #12]	@ (800b928 <pvTaskIncrementMutexHeldCount+0x24>)
 800b91c:	681b      	ldr	r3, [r3, #0]
	}
 800b91e:	4618      	mov	r0, r3
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	20001940 	.word	0x20001940

0800b92c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b936:	4b21      	ldr	r3, [pc, #132]	@ (800b9bc <prvAddCurrentTaskToDelayedList+0x90>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b93c:	4b20      	ldr	r3, [pc, #128]	@ (800b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3304      	adds	r3, #4
 800b942:	4618      	mov	r0, r3
 800b944:	f7fd feee 	bl	8009724 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b94e:	d10a      	bne.n	800b966 <prvAddCurrentTaskToDelayedList+0x3a>
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d007      	beq.n	800b966 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b956:	4b1a      	ldr	r3, [pc, #104]	@ (800b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3304      	adds	r3, #4
 800b95c:	4619      	mov	r1, r3
 800b95e:	4819      	ldr	r0, [pc, #100]	@ (800b9c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b960:	f7fd fe83 	bl	800966a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b964:	e026      	b.n	800b9b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4413      	add	r3, r2
 800b96c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b96e:	4b14      	ldr	r3, [pc, #80]	@ (800b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d209      	bcs.n	800b992 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b97e:	4b12      	ldr	r3, [pc, #72]	@ (800b9c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	4b0f      	ldr	r3, [pc, #60]	@ (800b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3304      	adds	r3, #4
 800b988:	4619      	mov	r1, r3
 800b98a:	4610      	mov	r0, r2
 800b98c:	f7fd fe91 	bl	80096b2 <vListInsert>
}
 800b990:	e010      	b.n	800b9b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b992:	4b0e      	ldr	r3, [pc, #56]	@ (800b9cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	4b0a      	ldr	r3, [pc, #40]	@ (800b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4619      	mov	r1, r3
 800b99e:	4610      	mov	r0, r2
 800b9a0:	f7fd fe87 	bl	80096b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d202      	bcs.n	800b9b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9ae:	4a08      	ldr	r2, [pc, #32]	@ (800b9d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	6013      	str	r3, [r2, #0]
}
 800b9b4:	bf00      	nop
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20001e18 	.word	0x20001e18
 800b9c0:	20001940 	.word	0x20001940
 800b9c4:	20001e00 	.word	0x20001e00
 800b9c8:	20001dd0 	.word	0x20001dd0
 800b9cc:	20001dcc 	.word	0x20001dcc
 800b9d0:	20001e34 	.word	0x20001e34

0800b9d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b08a      	sub	sp, #40	@ 0x28
 800b9d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9de:	f000 fb13 	bl	800c008 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9e2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba58 <xTimerCreateTimerTask+0x84>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d021      	beq.n	800ba2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9f2:	1d3a      	adds	r2, r7, #4
 800b9f4:	f107 0108 	add.w	r1, r7, #8
 800b9f8:	f107 030c 	add.w	r3, r7, #12
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7fd fded 	bl	80095dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba02:	6879      	ldr	r1, [r7, #4]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	9202      	str	r2, [sp, #8]
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	2302      	movs	r3, #2
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	2300      	movs	r3, #0
 800ba12:	460a      	mov	r2, r1
 800ba14:	4911      	ldr	r1, [pc, #68]	@ (800ba5c <xTimerCreateTimerTask+0x88>)
 800ba16:	4812      	ldr	r0, [pc, #72]	@ (800ba60 <xTimerCreateTimerTask+0x8c>)
 800ba18:	f7fe ff68 	bl	800a8ec <xTaskCreateStatic>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	4a11      	ldr	r2, [pc, #68]	@ (800ba64 <xTimerCreateTimerTask+0x90>)
 800ba20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba22:	4b10      	ldr	r3, [pc, #64]	@ (800ba64 <xTimerCreateTimerTask+0x90>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10b      	bne.n	800ba4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ba34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba38:	f383 8811 	msr	BASEPRI, r3
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	613b      	str	r3, [r7, #16]
}
 800ba46:	bf00      	nop
 800ba48:	bf00      	nop
 800ba4a:	e7fd      	b.n	800ba48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba4c:	697b      	ldr	r3, [r7, #20]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20001e70 	.word	0x20001e70
 800ba5c:	0803079c 	.word	0x0803079c
 800ba60:	0800bba1 	.word	0x0800bba1
 800ba64:	20001e74 	.word	0x20001e74

0800ba68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08a      	sub	sp, #40	@ 0x28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10b      	bne.n	800ba98 <xTimerGenericCommand+0x30>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	623b      	str	r3, [r7, #32]
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	e7fd      	b.n	800ba94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba98:	4b19      	ldr	r3, [pc, #100]	@ (800bb00 <xTimerGenericCommand+0x98>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d02a      	beq.n	800baf6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	2b05      	cmp	r3, #5
 800bab0:	dc18      	bgt.n	800bae4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bab2:	f7ff fdad 	bl	800b610 <xTaskGetSchedulerState>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d109      	bne.n	800bad0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800babc:	4b10      	ldr	r3, [pc, #64]	@ (800bb00 <xTimerGenericCommand+0x98>)
 800babe:	6818      	ldr	r0, [r3, #0]
 800bac0:	f107 0110 	add.w	r1, r7, #16
 800bac4:	2300      	movs	r3, #0
 800bac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bac8:	f7fe f854 	bl	8009b74 <xQueueGenericSend>
 800bacc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bace:	e012      	b.n	800baf6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bad0:	4b0b      	ldr	r3, [pc, #44]	@ (800bb00 <xTimerGenericCommand+0x98>)
 800bad2:	6818      	ldr	r0, [r3, #0]
 800bad4:	f107 0110 	add.w	r1, r7, #16
 800bad8:	2300      	movs	r3, #0
 800bada:	2200      	movs	r2, #0
 800badc:	f7fe f84a 	bl	8009b74 <xQueueGenericSend>
 800bae0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bae2:	e008      	b.n	800baf6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bae4:	4b06      	ldr	r3, [pc, #24]	@ (800bb00 <xTimerGenericCommand+0x98>)
 800bae6:	6818      	ldr	r0, [r3, #0]
 800bae8:	f107 0110 	add.w	r1, r7, #16
 800baec:	2300      	movs	r3, #0
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	f7fe f942 	bl	8009d78 <xQueueGenericSendFromISR>
 800baf4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800baf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3728      	adds	r7, #40	@ 0x28
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20001e70 	.word	0x20001e70

0800bb04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af02      	add	r7, sp, #8
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb0e:	4b23      	ldr	r3, [pc, #140]	@ (800bb9c <prvProcessExpiredTimer+0x98>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fd fe01 	bl	8009724 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb28:	f003 0304 	and.w	r3, r3, #4
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d023      	beq.n	800bb78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	699a      	ldr	r2, [r3, #24]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	18d1      	adds	r1, r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	6978      	ldr	r0, [r7, #20]
 800bb3e:	f000 f8d5 	bl	800bcec <prvInsertTimerInActiveList>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d020      	beq.n	800bb8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb48:	2300      	movs	r3, #0
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	2100      	movs	r1, #0
 800bb52:	6978      	ldr	r0, [r7, #20]
 800bb54:	f7ff ff88 	bl	800ba68 <xTimerGenericCommand>
 800bb58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d114      	bne.n	800bb8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	bf00      	nop
 800bb76:	e7fd      	b.n	800bb74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb7e:	f023 0301 	bic.w	r3, r3, #1
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	6978      	ldr	r0, [r7, #20]
 800bb90:	4798      	blx	r3
}
 800bb92:	bf00      	nop
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20001e68 	.word	0x20001e68

0800bba0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bba8:	f107 0308 	add.w	r3, r7, #8
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 f859 	bl	800bc64 <prvGetNextExpireTime>
 800bbb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 f805 	bl	800bbc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbbe:	f000 f8d7 	bl	800bd70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbc2:	bf00      	nop
 800bbc4:	e7f0      	b.n	800bba8 <prvTimerTask+0x8>
	...

0800bbc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbd2:	f7ff f919 	bl	800ae08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbd6:	f107 0308 	add.w	r3, r7, #8
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 f866 	bl	800bcac <prvSampleTimeNow>
 800bbe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d130      	bne.n	800bc4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10a      	bne.n	800bc04 <prvProcessTimerOrBlockTask+0x3c>
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d806      	bhi.n	800bc04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbf6:	f7ff f915 	bl	800ae24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbfa:	68f9      	ldr	r1, [r7, #12]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff ff81 	bl	800bb04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc02:	e024      	b.n	800bc4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d008      	beq.n	800bc1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc0a:	4b13      	ldr	r3, [pc, #76]	@ (800bc58 <prvProcessTimerOrBlockTask+0x90>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <prvProcessTimerOrBlockTask+0x50>
 800bc14:	2301      	movs	r3, #1
 800bc16:	e000      	b.n	800bc1a <prvProcessTimerOrBlockTask+0x52>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc1c:	4b0f      	ldr	r3, [pc, #60]	@ (800bc5c <prvProcessTimerOrBlockTask+0x94>)
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f7fe fe2b 	bl	800a884 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc2e:	f7ff f8f9 	bl	800ae24 <xTaskResumeAll>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10a      	bne.n	800bc4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc38:	4b09      	ldr	r3, [pc, #36]	@ (800bc60 <prvProcessTimerOrBlockTask+0x98>)
 800bc3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	f3bf 8f6f 	isb	sy
}
 800bc48:	e001      	b.n	800bc4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc4a:	f7ff f8eb 	bl	800ae24 <xTaskResumeAll>
}
 800bc4e:	bf00      	nop
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20001e6c 	.word	0x20001e6c
 800bc5c:	20001e70 	.word	0x20001e70
 800bc60:	e000ed04 	.word	0xe000ed04

0800bc64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc6c:	4b0e      	ldr	r3, [pc, #56]	@ (800bca8 <prvGetNextExpireTime+0x44>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <prvGetNextExpireTime+0x16>
 800bc76:	2201      	movs	r2, #1
 800bc78:	e000      	b.n	800bc7c <prvGetNextExpireTime+0x18>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d105      	bne.n	800bc94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc88:	4b07      	ldr	r3, [pc, #28]	@ (800bca8 <prvGetNextExpireTime+0x44>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	e001      	b.n	800bc98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc98:	68fb      	ldr	r3, [r7, #12]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	20001e68 	.word	0x20001e68

0800bcac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcb4:	f7ff f954 	bl	800af60 <xTaskGetTickCount>
 800bcb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcba:	4b0b      	ldr	r3, [pc, #44]	@ (800bce8 <prvSampleTimeNow+0x3c>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d205      	bcs.n	800bcd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcc4:	f000 f93a 	bl	800bf3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e002      	b.n	800bcd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcd6:	4a04      	ldr	r2, [pc, #16]	@ (800bce8 <prvSampleTimeNow+0x3c>)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	20001e78 	.word	0x20001e78

0800bcec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d812      	bhi.n	800bd38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	1ad2      	subs	r2, r2, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d302      	bcc.n	800bd26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd20:	2301      	movs	r3, #1
 800bd22:	617b      	str	r3, [r7, #20]
 800bd24:	e01b      	b.n	800bd5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd26:	4b10      	ldr	r3, [pc, #64]	@ (800bd68 <prvInsertTimerInActiveList+0x7c>)
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4610      	mov	r0, r2
 800bd32:	f7fd fcbe 	bl	80096b2 <vListInsert>
 800bd36:	e012      	b.n	800bd5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d206      	bcs.n	800bd4e <prvInsertTimerInActiveList+0x62>
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d302      	bcc.n	800bd4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	e007      	b.n	800bd5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd4e:	4b07      	ldr	r3, [pc, #28]	@ (800bd6c <prvInsertTimerInActiveList+0x80>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	3304      	adds	r3, #4
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f7fd fcaa 	bl	80096b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd5e:	697b      	ldr	r3, [r7, #20]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	20001e6c 	.word	0x20001e6c
 800bd6c:	20001e68 	.word	0x20001e68

0800bd70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b08e      	sub	sp, #56	@ 0x38
 800bd74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd76:	e0ce      	b.n	800bf16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	da19      	bge.n	800bdb2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd7e:	1d3b      	adds	r3, r7, #4
 800bd80:	3304      	adds	r3, #4
 800bd82:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10b      	bne.n	800bda2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	61fb      	str	r3, [r7, #28]
}
 800bd9c:	bf00      	nop
 800bd9e:	bf00      	nop
 800bda0:	e7fd      	b.n	800bd9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bda8:	6850      	ldr	r0, [r2, #4]
 800bdaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdac:	6892      	ldr	r2, [r2, #8]
 800bdae:	4611      	mov	r1, r2
 800bdb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f2c0 80ae 	blt.w	800bf16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d004      	beq.n	800bdd0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc8:	3304      	adds	r3, #4
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fcaa 	bl	8009724 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdd0:	463b      	mov	r3, r7
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff ff6a 	bl	800bcac <prvSampleTimeNow>
 800bdd8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b09      	cmp	r3, #9
 800bdde:	f200 8097 	bhi.w	800bf10 <prvProcessReceivedCommands+0x1a0>
 800bde2:	a201      	add	r2, pc, #4	@ (adr r2, 800bde8 <prvProcessReceivedCommands+0x78>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800be11 	.word	0x0800be11
 800bdec:	0800be11 	.word	0x0800be11
 800bdf0:	0800be11 	.word	0x0800be11
 800bdf4:	0800be87 	.word	0x0800be87
 800bdf8:	0800be9b 	.word	0x0800be9b
 800bdfc:	0800bee7 	.word	0x0800bee7
 800be00:	0800be11 	.word	0x0800be11
 800be04:	0800be11 	.word	0x0800be11
 800be08:	0800be87 	.word	0x0800be87
 800be0c:	0800be9b 	.word	0x0800be9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be16:	f043 0301 	orr.w	r3, r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	18d1      	adds	r1, r2, r3
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be30:	f7ff ff5c 	bl	800bcec <prvInsertTimerInActiveList>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d06c      	beq.n	800bf14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d061      	beq.n	800bf14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be54:	699b      	ldr	r3, [r3, #24]
 800be56:	441a      	add	r2, r3
 800be58:	2300      	movs	r3, #0
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	2300      	movs	r3, #0
 800be5e:	2100      	movs	r1, #0
 800be60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be62:	f7ff fe01 	bl	800ba68 <xTimerGenericCommand>
 800be66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d152      	bne.n	800bf14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	61bb      	str	r3, [r7, #24]
}
 800be80:	bf00      	nop
 800be82:	bf00      	nop
 800be84:	e7fd      	b.n	800be82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be8c:	f023 0301 	bic.w	r3, r3, #1
 800be90:	b2da      	uxtb	r2, r3
 800be92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800be98:	e03d      	b.n	800bf16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bea0:	f043 0301 	orr.w	r3, r3, #1
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	617b      	str	r3, [r7, #20]
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	e7fd      	b.n	800bece <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed4:	699a      	ldr	r2, [r3, #24]
 800bed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed8:	18d1      	adds	r1, r2, r3
 800beda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bede:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bee0:	f7ff ff04 	bl	800bcec <prvInsertTimerInActiveList>
					break;
 800bee4:	e017      	b.n	800bf16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d103      	bne.n	800befc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bef4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bef6:	f000 fbe7 	bl	800c6c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800befa:	e00c      	b.n	800bf16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800befc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800befe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf02:	f023 0301 	bic.w	r3, r3, #1
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf0e:	e002      	b.n	800bf16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bf10:	bf00      	nop
 800bf12:	e000      	b.n	800bf16 <prvProcessReceivedCommands+0x1a6>
					break;
 800bf14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf16:	4b08      	ldr	r3, [pc, #32]	@ (800bf38 <prvProcessReceivedCommands+0x1c8>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	1d39      	adds	r1, r7, #4
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fd ffc8 	bl	8009eb4 <xQueueReceive>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f47f af26 	bne.w	800bd78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	3730      	adds	r7, #48	@ 0x30
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20001e70 	.word	0x20001e70

0800bf3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf42:	e049      	b.n	800bfd8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf44:	4b2e      	ldr	r3, [pc, #184]	@ (800c000 <prvSwitchTimerLists+0xc4>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf4e:	4b2c      	ldr	r3, [pc, #176]	@ (800c000 <prvSwitchTimerLists+0xc4>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fd fbe1 	bl	8009724 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf70:	f003 0304 	and.w	r3, r3, #4
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d02f      	beq.n	800bfd8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	4413      	add	r3, r2
 800bf80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d90e      	bls.n	800bfa8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf96:	4b1a      	ldr	r3, [pc, #104]	@ (800c000 <prvSwitchTimerLists+0xc4>)
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	f7fd fb86 	bl	80096b2 <vListInsert>
 800bfa6:	e017      	b.n	800bfd8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	2300      	movs	r3, #0
 800bfae:	693a      	ldr	r2, [r7, #16]
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f7ff fd58 	bl	800ba68 <xTimerGenericCommand>
 800bfb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10b      	bne.n	800bfd8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	603b      	str	r3, [r7, #0]
}
 800bfd2:	bf00      	nop
 800bfd4:	bf00      	nop
 800bfd6:	e7fd      	b.n	800bfd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfd8:	4b09      	ldr	r3, [pc, #36]	@ (800c000 <prvSwitchTimerLists+0xc4>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1b0      	bne.n	800bf44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfe2:	4b07      	ldr	r3, [pc, #28]	@ (800c000 <prvSwitchTimerLists+0xc4>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfe8:	4b06      	ldr	r3, [pc, #24]	@ (800c004 <prvSwitchTimerLists+0xc8>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a04      	ldr	r2, [pc, #16]	@ (800c000 <prvSwitchTimerLists+0xc4>)
 800bfee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bff0:	4a04      	ldr	r2, [pc, #16]	@ (800c004 <prvSwitchTimerLists+0xc8>)
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	6013      	str	r3, [r2, #0]
}
 800bff6:	bf00      	nop
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	20001e68 	.word	0x20001e68
 800c004:	20001e6c 	.word	0x20001e6c

0800c008 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c00e:	f000 f96b 	bl	800c2e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c012:	4b15      	ldr	r3, [pc, #84]	@ (800c068 <prvCheckForValidListAndQueue+0x60>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d120      	bne.n	800c05c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c01a:	4814      	ldr	r0, [pc, #80]	@ (800c06c <prvCheckForValidListAndQueue+0x64>)
 800c01c:	f7fd faf8 	bl	8009610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c020:	4813      	ldr	r0, [pc, #76]	@ (800c070 <prvCheckForValidListAndQueue+0x68>)
 800c022:	f7fd faf5 	bl	8009610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c026:	4b13      	ldr	r3, [pc, #76]	@ (800c074 <prvCheckForValidListAndQueue+0x6c>)
 800c028:	4a10      	ldr	r2, [pc, #64]	@ (800c06c <prvCheckForValidListAndQueue+0x64>)
 800c02a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c02c:	4b12      	ldr	r3, [pc, #72]	@ (800c078 <prvCheckForValidListAndQueue+0x70>)
 800c02e:	4a10      	ldr	r2, [pc, #64]	@ (800c070 <prvCheckForValidListAndQueue+0x68>)
 800c030:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c032:	2300      	movs	r3, #0
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	4b11      	ldr	r3, [pc, #68]	@ (800c07c <prvCheckForValidListAndQueue+0x74>)
 800c038:	4a11      	ldr	r2, [pc, #68]	@ (800c080 <prvCheckForValidListAndQueue+0x78>)
 800c03a:	2110      	movs	r1, #16
 800c03c:	200a      	movs	r0, #10
 800c03e:	f7fd fc05 	bl	800984c <xQueueGenericCreateStatic>
 800c042:	4603      	mov	r3, r0
 800c044:	4a08      	ldr	r2, [pc, #32]	@ (800c068 <prvCheckForValidListAndQueue+0x60>)
 800c046:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c048:	4b07      	ldr	r3, [pc, #28]	@ (800c068 <prvCheckForValidListAndQueue+0x60>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d005      	beq.n	800c05c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c050:	4b05      	ldr	r3, [pc, #20]	@ (800c068 <prvCheckForValidListAndQueue+0x60>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	490b      	ldr	r1, [pc, #44]	@ (800c084 <prvCheckForValidListAndQueue+0x7c>)
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe fbea 	bl	800a830 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c05c:	f000 f976 	bl	800c34c <vPortExitCritical>
}
 800c060:	bf00      	nop
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20001e70 	.word	0x20001e70
 800c06c:	20001e40 	.word	0x20001e40
 800c070:	20001e54 	.word	0x20001e54
 800c074:	20001e68 	.word	0x20001e68
 800c078:	20001e6c 	.word	0x20001e6c
 800c07c:	20001f1c 	.word	0x20001f1c
 800c080:	20001e7c 	.word	0x20001e7c
 800c084:	080307a4 	.word	0x080307a4

0800c088 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	3b04      	subs	r3, #4
 800c098:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3b04      	subs	r3, #4
 800c0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	f023 0201 	bic.w	r2, r3, #1
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3b04      	subs	r3, #4
 800c0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0b8:	4a0c      	ldr	r2, [pc, #48]	@ (800c0ec <pxPortInitialiseStack+0x64>)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3b14      	subs	r3, #20
 800c0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3b04      	subs	r3, #4
 800c0ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f06f 0202 	mvn.w	r2, #2
 800c0d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3b20      	subs	r3, #32
 800c0dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0de:	68fb      	ldr	r3, [r7, #12]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr
 800c0ec:	0800c0f1 	.word	0x0800c0f1

0800c0f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0fa:	4b13      	ldr	r3, [pc, #76]	@ (800c148 <prvTaskExitError+0x58>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c102:	d00b      	beq.n	800c11c <prvTaskExitError+0x2c>
	__asm volatile
 800c104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	60fb      	str	r3, [r7, #12]
}
 800c116:	bf00      	nop
 800c118:	bf00      	nop
 800c11a:	e7fd      	b.n	800c118 <prvTaskExitError+0x28>
	__asm volatile
 800c11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	60bb      	str	r3, [r7, #8]
}
 800c12e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c130:	bf00      	nop
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d0fc      	beq.n	800c132 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	3714      	adds	r7, #20
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	20000084 	.word	0x20000084
 800c14c:	00000000 	.word	0x00000000

0800c150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c150:	4b07      	ldr	r3, [pc, #28]	@ (800c170 <pxCurrentTCBConst2>)
 800c152:	6819      	ldr	r1, [r3, #0]
 800c154:	6808      	ldr	r0, [r1, #0]
 800c156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15a:	f380 8809 	msr	PSP, r0
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f04f 0000 	mov.w	r0, #0
 800c166:	f380 8811 	msr	BASEPRI, r0
 800c16a:	4770      	bx	lr
 800c16c:	f3af 8000 	nop.w

0800c170 <pxCurrentTCBConst2>:
 800c170:	20001940 	.word	0x20001940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop

0800c178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c178:	4808      	ldr	r0, [pc, #32]	@ (800c19c <prvPortStartFirstTask+0x24>)
 800c17a:	6800      	ldr	r0, [r0, #0]
 800c17c:	6800      	ldr	r0, [r0, #0]
 800c17e:	f380 8808 	msr	MSP, r0
 800c182:	f04f 0000 	mov.w	r0, #0
 800c186:	f380 8814 	msr	CONTROL, r0
 800c18a:	b662      	cpsie	i
 800c18c:	b661      	cpsie	f
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	df00      	svc	0
 800c198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c19a:	bf00      	nop
 800c19c:	e000ed08 	.word	0xe000ed08

0800c1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1a6:	4b47      	ldr	r3, [pc, #284]	@ (800c2c4 <xPortStartScheduler+0x124>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a47      	ldr	r2, [pc, #284]	@ (800c2c8 <xPortStartScheduler+0x128>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d10b      	bne.n	800c1c8 <xPortStartScheduler+0x28>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	613b      	str	r3, [r7, #16]
}
 800c1c2:	bf00      	nop
 800c1c4:	bf00      	nop
 800c1c6:	e7fd      	b.n	800c1c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c2c4 <xPortStartScheduler+0x124>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a3f      	ldr	r2, [pc, #252]	@ (800c2cc <xPortStartScheduler+0x12c>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d10b      	bne.n	800c1ea <xPortStartScheduler+0x4a>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	60fb      	str	r3, [r7, #12]
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop
 800c1e8:	e7fd      	b.n	800c1e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1ea:	4b39      	ldr	r3, [pc, #228]	@ (800c2d0 <xPortStartScheduler+0x130>)
 800c1ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	22ff      	movs	r2, #255	@ 0xff
 800c1fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	b2db      	uxtb	r3, r3
 800c202:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	4b31      	ldr	r3, [pc, #196]	@ (800c2d4 <xPortStartScheduler+0x134>)
 800c210:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c212:	4b31      	ldr	r3, [pc, #196]	@ (800c2d8 <xPortStartScheduler+0x138>)
 800c214:	2207      	movs	r2, #7
 800c216:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c218:	e009      	b.n	800c22e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c21a:	4b2f      	ldr	r3, [pc, #188]	@ (800c2d8 <xPortStartScheduler+0x138>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	3b01      	subs	r3, #1
 800c220:	4a2d      	ldr	r2, [pc, #180]	@ (800c2d8 <xPortStartScheduler+0x138>)
 800c222:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c224:	78fb      	ldrb	r3, [r7, #3]
 800c226:	b2db      	uxtb	r3, r3
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c22e:	78fb      	ldrb	r3, [r7, #3]
 800c230:	b2db      	uxtb	r3, r3
 800c232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c236:	2b80      	cmp	r3, #128	@ 0x80
 800c238:	d0ef      	beq.n	800c21a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c23a:	4b27      	ldr	r3, [pc, #156]	@ (800c2d8 <xPortStartScheduler+0x138>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f1c3 0307 	rsb	r3, r3, #7
 800c242:	2b04      	cmp	r3, #4
 800c244:	d00b      	beq.n	800c25e <xPortStartScheduler+0xbe>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24a:	f383 8811 	msr	BASEPRI, r3
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	f3bf 8f4f 	dsb	sy
 800c256:	60bb      	str	r3, [r7, #8]
}
 800c258:	bf00      	nop
 800c25a:	bf00      	nop
 800c25c:	e7fd      	b.n	800c25a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c25e:	4b1e      	ldr	r3, [pc, #120]	@ (800c2d8 <xPortStartScheduler+0x138>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	021b      	lsls	r3, r3, #8
 800c264:	4a1c      	ldr	r2, [pc, #112]	@ (800c2d8 <xPortStartScheduler+0x138>)
 800c266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c268:	4b1b      	ldr	r3, [pc, #108]	@ (800c2d8 <xPortStartScheduler+0x138>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c270:	4a19      	ldr	r2, [pc, #100]	@ (800c2d8 <xPortStartScheduler+0x138>)
 800c272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	b2da      	uxtb	r2, r3
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c27c:	4b17      	ldr	r3, [pc, #92]	@ (800c2dc <xPortStartScheduler+0x13c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a16      	ldr	r2, [pc, #88]	@ (800c2dc <xPortStartScheduler+0x13c>)
 800c282:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c288:	4b14      	ldr	r3, [pc, #80]	@ (800c2dc <xPortStartScheduler+0x13c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a13      	ldr	r2, [pc, #76]	@ (800c2dc <xPortStartScheduler+0x13c>)
 800c28e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c294:	f000 f8da 	bl	800c44c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c298:	4b11      	ldr	r3, [pc, #68]	@ (800c2e0 <xPortStartScheduler+0x140>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c29e:	f000 f8f9 	bl	800c494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2a2:	4b10      	ldr	r3, [pc, #64]	@ (800c2e4 <xPortStartScheduler+0x144>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a0f      	ldr	r2, [pc, #60]	@ (800c2e4 <xPortStartScheduler+0x144>)
 800c2a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c2ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2ae:	f7ff ff63 	bl	800c178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2b2:	f7fe ff1f 	bl	800b0f4 <vTaskSwitchContext>
	prvTaskExitError();
 800c2b6:	f7ff ff1b 	bl	800c0f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2ba:	2300      	movs	r3, #0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3718      	adds	r7, #24
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	e000ed00 	.word	0xe000ed00
 800c2c8:	410fc271 	.word	0x410fc271
 800c2cc:	410fc270 	.word	0x410fc270
 800c2d0:	e000e400 	.word	0xe000e400
 800c2d4:	20001f6c 	.word	0x20001f6c
 800c2d8:	20001f70 	.word	0x20001f70
 800c2dc:	e000ed20 	.word	0xe000ed20
 800c2e0:	20000084 	.word	0x20000084
 800c2e4:	e000ef34 	.word	0xe000ef34

0800c2e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	607b      	str	r3, [r7, #4]
}
 800c300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c302:	4b10      	ldr	r3, [pc, #64]	@ (800c344 <vPortEnterCritical+0x5c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3301      	adds	r3, #1
 800c308:	4a0e      	ldr	r2, [pc, #56]	@ (800c344 <vPortEnterCritical+0x5c>)
 800c30a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c30c:	4b0d      	ldr	r3, [pc, #52]	@ (800c344 <vPortEnterCritical+0x5c>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d110      	bne.n	800c336 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c314:	4b0c      	ldr	r3, [pc, #48]	@ (800c348 <vPortEnterCritical+0x60>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00b      	beq.n	800c336 <vPortEnterCritical+0x4e>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	603b      	str	r3, [r7, #0]
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	e7fd      	b.n	800c332 <vPortEnterCritical+0x4a>
	}
}
 800c336:	bf00      	nop
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	20000084 	.word	0x20000084
 800c348:	e000ed04 	.word	0xe000ed04

0800c34c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c352:	4b12      	ldr	r3, [pc, #72]	@ (800c39c <vPortExitCritical+0x50>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10b      	bne.n	800c372 <vPortExitCritical+0x26>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	607b      	str	r3, [r7, #4]
}
 800c36c:	bf00      	nop
 800c36e:	bf00      	nop
 800c370:	e7fd      	b.n	800c36e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c372:	4b0a      	ldr	r3, [pc, #40]	@ (800c39c <vPortExitCritical+0x50>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	3b01      	subs	r3, #1
 800c378:	4a08      	ldr	r2, [pc, #32]	@ (800c39c <vPortExitCritical+0x50>)
 800c37a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c37c:	4b07      	ldr	r3, [pc, #28]	@ (800c39c <vPortExitCritical+0x50>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d105      	bne.n	800c390 <vPortExitCritical+0x44>
 800c384:	2300      	movs	r3, #0
 800c386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	f383 8811 	msr	BASEPRI, r3
}
 800c38e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c390:	bf00      	nop
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr
 800c39c:	20000084 	.word	0x20000084

0800c3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3a0:	f3ef 8009 	mrs	r0, PSP
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	4b15      	ldr	r3, [pc, #84]	@ (800c400 <pxCurrentTCBConst>)
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	f01e 0f10 	tst.w	lr, #16
 800c3b0:	bf08      	it	eq
 800c3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ba:	6010      	str	r0, [r2, #0]
 800c3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c3c4:	f380 8811 	msr	BASEPRI, r0
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f7fe fe90 	bl	800b0f4 <vTaskSwitchContext>
 800c3d4:	f04f 0000 	mov.w	r0, #0
 800c3d8:	f380 8811 	msr	BASEPRI, r0
 800c3dc:	bc09      	pop	{r0, r3}
 800c3de:	6819      	ldr	r1, [r3, #0]
 800c3e0:	6808      	ldr	r0, [r1, #0]
 800c3e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e6:	f01e 0f10 	tst.w	lr, #16
 800c3ea:	bf08      	it	eq
 800c3ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3f0:	f380 8809 	msr	PSP, r0
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	f3af 8000 	nop.w

0800c400 <pxCurrentTCBConst>:
 800c400:	20001940 	.word	0x20001940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop

0800c408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	607b      	str	r3, [r7, #4]
}
 800c420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c422:	f7fe fdad 	bl	800af80 <xTaskIncrementTick>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d003      	beq.n	800c434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c42c:	4b06      	ldr	r3, [pc, #24]	@ (800c448 <xPortSysTickHandler+0x40>)
 800c42e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	2300      	movs	r3, #0
 800c436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	f383 8811 	msr	BASEPRI, r3
}
 800c43e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	e000ed04 	.word	0xe000ed04

0800c44c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c44c:	b480      	push	{r7}
 800c44e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c450:	4b0b      	ldr	r3, [pc, #44]	@ (800c480 <vPortSetupTimerInterrupt+0x34>)
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c456:	4b0b      	ldr	r3, [pc, #44]	@ (800c484 <vPortSetupTimerInterrupt+0x38>)
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c45c:	4b0a      	ldr	r3, [pc, #40]	@ (800c488 <vPortSetupTimerInterrupt+0x3c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a0a      	ldr	r2, [pc, #40]	@ (800c48c <vPortSetupTimerInterrupt+0x40>)
 800c462:	fba2 2303 	umull	r2, r3, r2, r3
 800c466:	099b      	lsrs	r3, r3, #6
 800c468:	4a09      	ldr	r2, [pc, #36]	@ (800c490 <vPortSetupTimerInterrupt+0x44>)
 800c46a:	3b01      	subs	r3, #1
 800c46c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c46e:	4b04      	ldr	r3, [pc, #16]	@ (800c480 <vPortSetupTimerInterrupt+0x34>)
 800c470:	2207      	movs	r2, #7
 800c472:	601a      	str	r2, [r3, #0]
}
 800c474:	bf00      	nop
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	e000e010 	.word	0xe000e010
 800c484:	e000e018 	.word	0xe000e018
 800c488:	20000008 	.word	0x20000008
 800c48c:	10624dd3 	.word	0x10624dd3
 800c490:	e000e014 	.word	0xe000e014

0800c494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c494:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4a4 <vPortEnableVFP+0x10>
 800c498:	6801      	ldr	r1, [r0, #0]
 800c49a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c49e:	6001      	str	r1, [r0, #0]
 800c4a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4a2:	bf00      	nop
 800c4a4:	e000ed88 	.word	0xe000ed88

0800c4a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4ae:	f3ef 8305 	mrs	r3, IPSR
 800c4b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b0f      	cmp	r3, #15
 800c4b8:	d915      	bls.n	800c4e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4ba:	4a18      	ldr	r2, [pc, #96]	@ (800c51c <vPortValidateInterruptPriority+0x74>)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4413      	add	r3, r2
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4c4:	4b16      	ldr	r3, [pc, #88]	@ (800c520 <vPortValidateInterruptPriority+0x78>)
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	7afa      	ldrb	r2, [r7, #11]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d20b      	bcs.n	800c4e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	607b      	str	r3, [r7, #4]
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	e7fd      	b.n	800c4e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c524 <vPortValidateInterruptPriority+0x7c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c528 <vPortValidateInterruptPriority+0x80>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d90b      	bls.n	800c50e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	603b      	str	r3, [r7, #0]
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	e7fd      	b.n	800c50a <vPortValidateInterruptPriority+0x62>
	}
 800c50e:	bf00      	nop
 800c510:	3714      	adds	r7, #20
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	e000e3f0 	.word	0xe000e3f0
 800c520:	20001f6c 	.word	0x20001f6c
 800c524:	e000ed0c 	.word	0xe000ed0c
 800c528:	20001f70 	.word	0x20001f70

0800c52c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b08a      	sub	sp, #40	@ 0x28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c534:	2300      	movs	r3, #0
 800c536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c538:	f7fe fc66 	bl	800ae08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c53c:	4b5c      	ldr	r3, [pc, #368]	@ (800c6b0 <pvPortMalloc+0x184>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c544:	f000 f924 	bl	800c790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c548:	4b5a      	ldr	r3, [pc, #360]	@ (800c6b4 <pvPortMalloc+0x188>)
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4013      	ands	r3, r2
 800c550:	2b00      	cmp	r3, #0
 800c552:	f040 8095 	bne.w	800c680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d01e      	beq.n	800c59a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c55c:	2208      	movs	r2, #8
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4413      	add	r3, r2
 800c562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d015      	beq.n	800c59a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f023 0307 	bic.w	r3, r3, #7
 800c574:	3308      	adds	r3, #8
 800c576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f003 0307 	and.w	r3, r3, #7
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00b      	beq.n	800c59a <pvPortMalloc+0x6e>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	617b      	str	r3, [r7, #20]
}
 800c594:	bf00      	nop
 800c596:	bf00      	nop
 800c598:	e7fd      	b.n	800c596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d06f      	beq.n	800c680 <pvPortMalloc+0x154>
 800c5a0:	4b45      	ldr	r3, [pc, #276]	@ (800c6b8 <pvPortMalloc+0x18c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d86a      	bhi.n	800c680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5aa:	4b44      	ldr	r3, [pc, #272]	@ (800c6bc <pvPortMalloc+0x190>)
 800c5ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5ae:	4b43      	ldr	r3, [pc, #268]	@ (800c6bc <pvPortMalloc+0x190>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5b4:	e004      	b.n	800c5c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d903      	bls.n	800c5d2 <pvPortMalloc+0xa6>
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1f1      	bne.n	800c5b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5d2:	4b37      	ldr	r3, [pc, #220]	@ (800c6b0 <pvPortMalloc+0x184>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d051      	beq.n	800c680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2208      	movs	r2, #8
 800c5e2:	4413      	add	r3, r2
 800c5e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	1ad2      	subs	r2, r2, r3
 800c5f6:	2308      	movs	r3, #8
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d920      	bls.n	800c640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4413      	add	r3, r2
 800c604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	f003 0307 	and.w	r3, r3, #7
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00b      	beq.n	800c628 <pvPortMalloc+0xfc>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	613b      	str	r3, [r7, #16]
}
 800c622:	bf00      	nop
 800c624:	bf00      	nop
 800c626:	e7fd      	b.n	800c624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	1ad2      	subs	r2, r2, r3
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c63a:	69b8      	ldr	r0, [r7, #24]
 800c63c:	f000 f90c 	bl	800c858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c640:	4b1d      	ldr	r3, [pc, #116]	@ (800c6b8 <pvPortMalloc+0x18c>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6b8 <pvPortMalloc+0x18c>)
 800c64c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c64e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6b8 <pvPortMalloc+0x18c>)
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	4b1b      	ldr	r3, [pc, #108]	@ (800c6c0 <pvPortMalloc+0x194>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	429a      	cmp	r2, r3
 800c658:	d203      	bcs.n	800c662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c65a:	4b17      	ldr	r3, [pc, #92]	@ (800c6b8 <pvPortMalloc+0x18c>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a18      	ldr	r2, [pc, #96]	@ (800c6c0 <pvPortMalloc+0x194>)
 800c660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c664:	685a      	ldr	r2, [r3, #4]
 800c666:	4b13      	ldr	r3, [pc, #76]	@ (800c6b4 <pvPortMalloc+0x188>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	431a      	orrs	r2, r3
 800c66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c676:	4b13      	ldr	r3, [pc, #76]	@ (800c6c4 <pvPortMalloc+0x198>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3301      	adds	r3, #1
 800c67c:	4a11      	ldr	r2, [pc, #68]	@ (800c6c4 <pvPortMalloc+0x198>)
 800c67e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c680:	f7fe fbd0 	bl	800ae24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00b      	beq.n	800c6a6 <pvPortMalloc+0x17a>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	60fb      	str	r3, [r7, #12]
}
 800c6a0:	bf00      	nop
 800c6a2:	bf00      	nop
 800c6a4:	e7fd      	b.n	800c6a2 <pvPortMalloc+0x176>
	return pvReturn;
 800c6a6:	69fb      	ldr	r3, [r7, #28]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3728      	adds	r7, #40	@ 0x28
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20018074 	.word	0x20018074
 800c6b4:	20018088 	.word	0x20018088
 800c6b8:	20018078 	.word	0x20018078
 800c6bc:	2001806c 	.word	0x2001806c
 800c6c0:	2001807c 	.word	0x2001807c
 800c6c4:	20018080 	.word	0x20018080

0800c6c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b086      	sub	sp, #24
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d04f      	beq.n	800c77a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6da:	2308      	movs	r3, #8
 800c6dc:	425b      	negs	r3, r3
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	685a      	ldr	r2, [r3, #4]
 800c6ec:	4b25      	ldr	r3, [pc, #148]	@ (800c784 <vPortFree+0xbc>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10b      	bne.n	800c70e <vPortFree+0x46>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	60fb      	str	r3, [r7, #12]
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	e7fd      	b.n	800c70a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00b      	beq.n	800c72e <vPortFree+0x66>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	60bb      	str	r3, [r7, #8]
}
 800c728:	bf00      	nop
 800c72a:	bf00      	nop
 800c72c:	e7fd      	b.n	800c72a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	4b14      	ldr	r3, [pc, #80]	@ (800c784 <vPortFree+0xbc>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4013      	ands	r3, r2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d01e      	beq.n	800c77a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d11a      	bne.n	800c77a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	685a      	ldr	r2, [r3, #4]
 800c748:	4b0e      	ldr	r3, [pc, #56]	@ (800c784 <vPortFree+0xbc>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	43db      	mvns	r3, r3
 800c74e:	401a      	ands	r2, r3
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c754:	f7fe fb58 	bl	800ae08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	4b0a      	ldr	r3, [pc, #40]	@ (800c788 <vPortFree+0xc0>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4413      	add	r3, r2
 800c762:	4a09      	ldr	r2, [pc, #36]	@ (800c788 <vPortFree+0xc0>)
 800c764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c766:	6938      	ldr	r0, [r7, #16]
 800c768:	f000 f876 	bl	800c858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c76c:	4b07      	ldr	r3, [pc, #28]	@ (800c78c <vPortFree+0xc4>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3301      	adds	r3, #1
 800c772:	4a06      	ldr	r2, [pc, #24]	@ (800c78c <vPortFree+0xc4>)
 800c774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c776:	f7fe fb55 	bl	800ae24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c77a:	bf00      	nop
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	20018088 	.word	0x20018088
 800c788:	20018078 	.word	0x20018078
 800c78c:	20018084 	.word	0x20018084

0800c790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c796:	4b29      	ldr	r3, [pc, #164]	@ (800c83c <prvHeapInit+0xac>)
 800c798:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c79a:	4b29      	ldr	r3, [pc, #164]	@ (800c840 <prvHeapInit+0xb0>)
 800c79c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f003 0307 	and.w	r3, r3, #7
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00c      	beq.n	800c7c2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	3307      	adds	r3, #7
 800c7ac:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f023 0307 	bic.w	r3, r3, #7
 800c7b4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7b6:	68ba      	ldr	r2, [r7, #8]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	4a20      	ldr	r2, [pc, #128]	@ (800c840 <prvHeapInit+0xb0>)
 800c7be:	4413      	add	r3, r2
 800c7c0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7c6:	4a1f      	ldr	r2, [pc, #124]	@ (800c844 <prvHeapInit+0xb4>)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c844 <prvHeapInit+0xb4>)
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7da:	2208      	movs	r2, #8
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f023 0307 	bic.w	r3, r3, #7
 800c7e8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	4a16      	ldr	r2, [pc, #88]	@ (800c848 <prvHeapInit+0xb8>)
 800c7ee:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7f0:	4b15      	ldr	r3, [pc, #84]	@ (800c848 <prvHeapInit+0xb8>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7f8:	4b13      	ldr	r3, [pc, #76]	@ (800c848 <prvHeapInit+0xb8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	1ad2      	subs	r2, r2, r3
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c80e:	4b0e      	ldr	r3, [pc, #56]	@ (800c848 <prvHeapInit+0xb8>)
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	4a0c      	ldr	r2, [pc, #48]	@ (800c84c <prvHeapInit+0xbc>)
 800c81c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	4a0b      	ldr	r2, [pc, #44]	@ (800c850 <prvHeapInit+0xc0>)
 800c824:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c826:	4b0b      	ldr	r3, [pc, #44]	@ (800c854 <prvHeapInit+0xc4>)
 800c828:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c82c:	601a      	str	r2, [r3, #0]
}
 800c82e:	bf00      	nop
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	000160f8 	.word	0x000160f8
 800c840:	20001f74 	.word	0x20001f74
 800c844:	2001806c 	.word	0x2001806c
 800c848:	20018074 	.word	0x20018074
 800c84c:	2001807c 	.word	0x2001807c
 800c850:	20018078 	.word	0x20018078
 800c854:	20018088 	.word	0x20018088

0800c858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c860:	4b28      	ldr	r3, [pc, #160]	@ (800c904 <prvInsertBlockIntoFreeList+0xac>)
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	e002      	b.n	800c86c <prvInsertBlockIntoFreeList+0x14>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	429a      	cmp	r2, r3
 800c874:	d8f7      	bhi.n	800c866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	4413      	add	r3, r2
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	429a      	cmp	r2, r3
 800c886:	d108      	bne.n	800c89a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	441a      	add	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	441a      	add	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d118      	bne.n	800c8e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4b15      	ldr	r3, [pc, #84]	@ (800c908 <prvInsertBlockIntoFreeList+0xb0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d00d      	beq.n	800c8d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	441a      	add	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	e008      	b.n	800c8e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c908 <prvInsertBlockIntoFreeList+0xb0>)
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	e003      	b.n	800c8e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d002      	beq.n	800c8f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8f6:	bf00      	nop
 800c8f8:	3714      	adds	r7, #20
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	2001806c 	.word	0x2001806c
 800c908:	20018074 	.word	0x20018074

0800c90c <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 800c914:	2300      	movs	r3, #0
 800c916:	613b      	str	r3, [r7, #16]
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]
 800c91c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c920:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800c922:	f7fe fa71 	bl	800ae08 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 800c926:	4b22      	ldr	r3, [pc, #136]	@ (800c9b0 <vPortGetHeapStats+0xa4>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d01a      	beq.n	800c968 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	3301      	adds	r3, #1
 800c936:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d202      	bcs.n	800c948 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d902      	bls.n	800c958 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 800c95e:	4b15      	ldr	r3, [pc, #84]	@ (800c9b4 <vPortGetHeapStats+0xa8>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	429a      	cmp	r2, r3
 800c966:	d1e4      	bne.n	800c932 <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 800c968:	f7fe fa5c 	bl	800ae24 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	68ba      	ldr	r2, [r7, #8]
 800c976:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 800c97e:	f7ff fcb3 	bl	800c2e8 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 800c982:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b8 <vPortGetHeapStats+0xac>)
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 800c98a:	4b0c      	ldr	r3, [pc, #48]	@ (800c9bc <vPortGetHeapStats+0xb0>)
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 800c992:	4b0b      	ldr	r3, [pc, #44]	@ (800c9c0 <vPortGetHeapStats+0xb4>)
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 800c99a:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c4 <vPortGetHeapStats+0xb8>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 800c9a2:	f7ff fcd3 	bl	800c34c <vPortExitCritical>
}
 800c9a6:	bf00      	nop
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	2001806c 	.word	0x2001806c
 800c9b4:	20018074 	.word	0x20018074
 800c9b8:	20018078 	.word	0x20018078
 800c9bc:	20018080 	.word	0x20018080
 800c9c0:	20018084 	.word	0x20018084
 800c9c4:	2001807c 	.word	0x2001807c

0800c9c8 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	fb02 f303 	mul.w	r3, r2, r3
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff fda6 	bl	800c52c <pvPortMalloc>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	60fb      	str	r3, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d008      	beq.n	800c9fc <mg_calloc+0x34>
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	fb02 f303 	mul.w	r3, r2, r3
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f019 f9aa 	bl	8025d50 <memset>
  return p;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <mg_fs_lfs_status>:
//struct mg_fs *mg_fs;

void fs_proto(void){}; //function prototype

// Получение информации о файле
int mg_fs_lfs_status(const char *path, size_t *size, time_t *mtime) {
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b0c6      	sub	sp, #280	@ 0x118
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca16:	6018      	str	r0, [r3, #0]
 800ca18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ca20:	6019      	str	r1, [r3, #0]
 800ca22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca26:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ca2a:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    if (lfs_stat(&lfs, path, &info) == 0) {
 800ca2c:	f107 0210 	add.w	r2, r7, #16
 800ca30:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ca38:	6819      	ldr	r1, [r3, #0]
 800ca3a:	481d      	ldr	r0, [pc, #116]	@ (800cab0 <mg_fs_lfs_status+0xa8>)
 800ca3c:	f007 ff3c 	bl	80148b8 <lfs_stat>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d12e      	bne.n	800caa4 <mg_fs_lfs_status+0x9c>
        if (size) *size = info.size;
 800ca46:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00a      	beq.n	800ca6a <mg_fs_lfs_status+0x62>
 800ca54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca5c:	685a      	ldr	r2, [r3, #4]
 800ca5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca62:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	601a      	str	r2, [r3, #0]
        if (mtime) *mtime = 0;  // LittleFS не поддерживает время модификации
 800ca6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d00a      	beq.n	800ca8e <mg_fs_lfs_status+0x86>
 800ca78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca7c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ca80:	6819      	ldr	r1, [r3, #0]
 800ca82:	f04f 0200 	mov.w	r2, #0
 800ca86:	f04f 0300 	mov.w	r3, #0
 800ca8a:	e9c1 2300 	strd	r2, r3, [r1]
        return (info.type == LFS_TYPE_DIR) ? MG_FS_DIR : MG_FS_READ;
 800ca8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800ca92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d101      	bne.n	800caa0 <mg_fs_lfs_status+0x98>
 800ca9c:	2304      	movs	r3, #4
 800ca9e:	e002      	b.n	800caa6 <mg_fs_lfs_status+0x9e>
 800caa0:	2301      	movs	r3, #1
 800caa2:	e000      	b.n	800caa6 <mg_fs_lfs_status+0x9e>
    }
    return 0;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	2001808c 	.word	0x2001808c

0800cab4 <mg_fs_lfs_list>:

// Список файлов в директории
void mg_fs_lfs_list(const char *path, void (*fn)(const char *, void *), void *userdata) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b0d4      	sub	sp, #336	@ 0x150
 800cab8:	af00      	add	r7, sp, #0
 800caba:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800cabe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800cac2:	6018      	str	r0, [r3, #0]
 800cac4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800cac8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800cacc:	6019      	str	r1, [r3, #0]
 800cace:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800cad2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800cad6:	601a      	str	r2, [r3, #0]
    struct lfs_info info;
    lfs_dir_t dir;
    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 800cad8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800cadc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800cae0:	f107 0114 	add.w	r1, r7, #20
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	4816      	ldr	r0, [pc, #88]	@ (800cb40 <mg_fs_lfs_list+0x8c>)
 800cae8:	f008 f89e 	bl	8014c28 <lfs_dir_open>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d120      	bne.n	800cb34 <mg_fs_lfs_list+0x80>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800caf2:	e00e      	b.n	800cb12 <mg_fs_lfs_list+0x5e>
            fn(info.name, userdata);
 800caf4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800caf8:	f5a3 72a6 	sub.w	r2, r3, #332	@ 0x14c
 800cafc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cb00:	f103 0008 	add.w	r0, r3, #8
 800cb04:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800cb08:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	6811      	ldr	r1, [r2, #0]
 800cb10:	4798      	blx	r3
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 800cb12:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800cb16:	f107 0314 	add.w	r3, r7, #20
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	4808      	ldr	r0, [pc, #32]	@ (800cb40 <mg_fs_lfs_list+0x8c>)
 800cb1e:	f008 f8e4 	bl	8014cea <lfs_dir_read>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dce5      	bgt.n	800caf4 <mg_fs_lfs_list+0x40>
        }
        lfs_dir_close(&lfs, &dir);
 800cb28:	f107 0314 	add.w	r3, r7, #20
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4804      	ldr	r0, [pc, #16]	@ (800cb40 <mg_fs_lfs_list+0x8c>)
 800cb30:	f008 f8b8 	bl	8014ca4 <lfs_dir_close>
    }
}
 800cb34:	bf00      	nop
 800cb36:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	2001808c 	.word	0x2001808c

0800cb44 <mg_fs_lfs_open>:

// Открытие файла
void *mg_fs_lfs_open(const char *path, int flags) {
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *fd = (struct lfs_file_data *) malloc(sizeof(struct lfs_file_data));
 800cb4e:	2054      	movs	r0, #84	@ 0x54
 800cb50:	f7ff fcec 	bl	800c52c <pvPortMalloc>
 800cb54:	4603      	mov	r3, r0
 800cb56:	60bb      	str	r3, [r7, #8]
    if (fd == NULL) return NULL;
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <mg_fs_lfs_open+0x1e>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e024      	b.n	800cbac <mg_fs_lfs_open+0x68>

    int lfs_flags = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_READ) lfs_flags |= LFS_O_RDONLY;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d003      	beq.n	800cb78 <mg_fs_lfs_open+0x34>
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f043 0301 	orr.w	r3, r3, #1
 800cb76:	60fb      	str	r3, [r7, #12]
    if (flags & MG_FS_WRITE) lfs_flags |= LFS_O_WRONLY | LFS_O_CREAT | LFS_O_APPEND;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	f003 0302 	and.w	r3, r3, #2
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d005      	beq.n	800cb8e <mg_fs_lfs_open+0x4a>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f443 6310 	orr.w	r3, r3, #2304	@ 0x900
 800cb88:	f043 0302 	orr.w	r3, r3, #2
 800cb8c:	60fb      	str	r3, [r7, #12]

    if (lfs_file_open(&lfs, &fd->file, path, lfs_flags) < 0) {
 800cb8e:	68b9      	ldr	r1, [r7, #8]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	4807      	ldr	r0, [pc, #28]	@ (800cbb4 <mg_fs_lfs_open+0x70>)
 800cb96:	f007 feb5 	bl	8014904 <lfs_file_open>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	da04      	bge.n	800cbaa <mg_fs_lfs_open+0x66>
        free(fd);
 800cba0:	68b8      	ldr	r0, [r7, #8]
 800cba2:	f7ff fd91 	bl	800c6c8 <vPortFree>
        return NULL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	e000      	b.n	800cbac <mg_fs_lfs_open+0x68>
    }
    return fd;
 800cbaa:	68bb      	ldr	r3, [r7, #8]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	2001808c 	.word	0x2001808c

0800cbb8 <mg_fs_lfs_close>:

// Закрытие файла
void mg_fs_lfs_close(void *fd) {
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	60fb      	str	r3, [r7, #12]
    lfs_file_close(&lfs, &file->file);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	4804      	ldr	r0, [pc, #16]	@ (800cbdc <mg_fs_lfs_close+0x24>)
 800cbca:	f007 fedb 	bl	8014984 <lfs_file_close>
    free(file);
 800cbce:	68f8      	ldr	r0, [r7, #12]
 800cbd0:	f7ff fd7a 	bl	800c6c8 <vPortFree>
}
 800cbd4:	bf00      	nop
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	2001808c 	.word	0x2001808c

0800cbe0 <mg_fs_lfs_read>:

// Чтение из файла
size_t mg_fs_lfs_read(void *fd, void *buf, size_t len) {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	617b      	str	r3, [r7, #20]
    int res = lfs_file_read(&lfs, &file->file, buf, len);
 800cbf0:	6979      	ldr	r1, [r7, #20]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	4805      	ldr	r0, [pc, #20]	@ (800cc0c <mg_fs_lfs_read+0x2c>)
 800cbf8:	f007 fefe 	bl	80149f8 <lfs_file_read>
 800cbfc:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	2001808c 	.word	0x2001808c

0800cc10 <mg_fs_lfs_write>:

// Запись в файл
size_t mg_fs_lfs_write(void *fd, const void *buf, size_t len) {
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	617b      	str	r3, [r7, #20]
    int res = lfs_file_write(&lfs, &file->file, buf, len);
 800cc20:	6979      	ldr	r1, [r7, #20]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	4805      	ldr	r0, [pc, #20]	@ (800cc3c <mg_fs_lfs_write+0x2c>)
 800cc28:	f007 ff24 	bl	8014a74 <lfs_file_write>
 800cc2c:	6138      	str	r0, [r7, #16]
    return res < 0 ? 0 : res;
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3718      	adds	r7, #24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	2001808c 	.word	0x2001808c

0800cc40 <mg_fs_lfs_seek>:

// Установка позиции в файле
size_t mg_fs_lfs_seek(void *fd, size_t offset) {
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
    struct lfs_file_data *file = (struct lfs_file_data *) fd;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	60fb      	str	r3, [r7, #12]

    // Попытка установить позицию в файле
    if (lfs_file_seek(&lfs, &file->file, offset, LFS_SEEK_SET) < 0) {
 800cc4e:	68f9      	ldr	r1, [r7, #12]
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	2300      	movs	r3, #0
 800cc54:	480c      	ldr	r0, [pc, #48]	@ (800cc88 <mg_fs_lfs_seek+0x48>)
 800cc56:	f007 ff4b 	bl	8014af0 <lfs_file_seek>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	da02      	bge.n	800cc66 <mg_fs_lfs_seek+0x26>
        return (size_t)-1;  // Ошибка при перемещении
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc64:	e00c      	b.n	800cc80 <mg_fs_lfs_seek+0x40>
    }

    // Получение текущей позиции в файле
    lfs_soff_t pos = lfs_file_tell(&lfs, &file->file);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	4807      	ldr	r0, [pc, #28]	@ (800cc88 <mg_fs_lfs_seek+0x48>)
 800cc6c:	f007 ff7e 	bl	8014b6c <lfs_file_tell>
 800cc70:	60b8      	str	r0, [r7, #8]

    // Проверка ошибки
     if (pos < 0) {
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	da02      	bge.n	800cc7e <mg_fs_lfs_seek+0x3e>
         return (size_t)-1;  // Ошибка при получении позиции
 800cc78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc7c:	e000      	b.n	800cc80 <mg_fs_lfs_seek+0x40>
     }

     return (size_t)pos;  // Возвращаем текущую позицию
 800cc7e:	68bb      	ldr	r3, [r7, #8]

}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	2001808c 	.word	0x2001808c

0800cc8c <mg_fs_lfs_rename>:

// Переименование файла
bool mg_fs_lfs_rename(const char *from, const char *to) {
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
    return lfs_rename(&lfs, from, to) == 0;
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	4806      	ldr	r0, [pc, #24]	@ (800ccb4 <mg_fs_lfs_rename+0x28>)
 800cc9c:	f007 fde7 	bl	801486e <lfs_rename>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	bf0c      	ite	eq
 800cca6:	2301      	moveq	r3, #1
 800cca8:	2300      	movne	r3, #0
 800ccaa:	b2db      	uxtb	r3, r3
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	2001808c 	.word	0x2001808c

0800ccb8 <mg_fs_lfs_remove>:

// Удаление файла
bool mg_fs_lfs_remove(const char *path) {
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
    return lfs_remove(&lfs, path) == 0;
 800ccc0:	6879      	ldr	r1, [r7, #4]
 800ccc2:	4806      	ldr	r0, [pc, #24]	@ (800ccdc <mg_fs_lfs_remove+0x24>)
 800ccc4:	f007 fdb0 	bl	8014828 <lfs_remove>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	bf0c      	ite	eq
 800ccce:	2301      	moveq	r3, #1
 800ccd0:	2300      	movne	r3, #0
 800ccd2:	b2db      	uxtb	r3, r3
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	2001808c 	.word	0x2001808c

0800cce0 <mg_fs_lfs_mkdir>:
    // Удаление пустой директории
    return lfs_remove(&lfs, path);
}

// Создание директории
bool mg_fs_lfs_mkdir(const char *path) {
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
    return lfs_mkdir(&lfs, path) == 0;
 800cce8:	6879      	ldr	r1, [r7, #4]
 800ccea:	4806      	ldr	r0, [pc, #24]	@ (800cd04 <mg_fs_lfs_mkdir+0x24>)
 800ccec:	f007 ff78 	bl	8014be0 <lfs_mkdir>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	bf0c      	ite	eq
 800ccf6:	2301      	moveq	r3, #1
 800ccf8:	2300      	movne	r3, #0
 800ccfa:	b2db      	uxtb	r3, r3
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	2001808c 	.word	0x2001808c

0800cd08 <lfs_fs_ll_init>:
int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size);
int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size);
int block_device_erase(const struct lfs_config *c, lfs_block_t block);
int block_device_sync(const struct lfs_config *c);

int lfs_fs_ll_init(void (*lock)(void *), void (*unlock)(void *)){
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	@ 0x28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]

	struct SPI_flash_info	flash_info;

	flash_info = sFLASH_GetInfo();
 800cd12:	f107 030c 	add.w	r3, r7, #12
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7f8 fc1c 	bl	8005554 <sFLASH_GetInfo>
	if (flash_info.flash_id == 0x0) return -1;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d102      	bne.n	800cd28 <lfs_fs_ll_init+0x20>
 800cd22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd26:	e066      	b.n	800cdf6 <lfs_fs_ll_init+0xee>

	uint8_t *read_buff   = calloc(1, flash_info.page_size);
 800cd28:	8afb      	ldrh	r3, [r7, #22]
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	2001      	movs	r0, #1
 800cd2e:	f7ff fe4b 	bl	800c9c8 <mg_calloc>
 800cd32:	6278      	str	r0, [r7, #36]	@ 0x24
	uint8_t *write_buff  = calloc(1, flash_info.page_size);
 800cd34:	8afb      	ldrh	r3, [r7, #22]
 800cd36:	4619      	mov	r1, r3
 800cd38:	2001      	movs	r0, #1
 800cd3a:	f7ff fe45 	bl	800c9c8 <mg_calloc>
 800cd3e:	6238      	str	r0, [r7, #32]
	void * lookahead_buff = calloc(1, flash_info.page_size);
 800cd40:	8afb      	ldrh	r3, [r7, #22]
 800cd42:	4619      	mov	r1, r3
 800cd44:	2001      	movs	r0, #1
 800cd46:	f7ff fe3f 	bl	800c9c8 <mg_calloc>
 800cd4a:	61f8      	str	r0, [r7, #28]

	if (!(read_buff || write_buff || lookahead_buff)){
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d108      	bne.n	800cd64 <lfs_fs_ll_init+0x5c>
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d105      	bne.n	800cd64 <lfs_fs_ll_init+0x5c>
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d102      	bne.n	800cd64 <lfs_fs_ll_init+0x5c>
		return -2;
 800cd5e:	f06f 0301 	mvn.w	r3, #1
 800cd62:	e048      	b.n	800cdf6 <lfs_fs_ll_init+0xee>
	}

	cfg.read_size         = flash_info.read_size;
 800cd64:	8a3b      	ldrh	r3, [r7, #16]
 800cd66:	461a      	mov	r2, r3
 800cd68:	4b25      	ldr	r3, [pc, #148]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cd6a:	61da      	str	r2, [r3, #28]
	cfg.prog_size         = flash_info.write_size;
 800cd6c:	8a7b      	ldrh	r3, [r7, #18]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	4b23      	ldr	r3, [pc, #140]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cd72:	621a      	str	r2, [r3, #32]
    cfg.block_size        = flash_info.erase_size;
 800cd74:	8abb      	ldrh	r3, [r7, #20]
 800cd76:	461a      	mov	r2, r3
 800cd78:	4b21      	ldr	r3, [pc, #132]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cd7a:	625a      	str	r2, [r3, #36]	@ 0x24
    cfg.block_count       = flash_info.block_count;
 800cd7c:	8b3b      	ldrh	r3, [r7, #24]
 800cd7e:	461a      	mov	r2, r3
 800cd80:	4b1f      	ldr	r3, [pc, #124]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cd82:	629a      	str	r2, [r3, #40]	@ 0x28

    cfg.lookahead_size    = flash_info.page_size;
 800cd84:	8afb      	ldrh	r3, [r7, #22]
 800cd86:	461a      	mov	r2, r3
 800cd88:	4b1d      	ldr	r3, [pc, #116]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cd8a:	635a      	str	r2, [r3, #52]	@ 0x34
    cfg.cache_size        = flash_info.page_size;
 800cd8c:	8afb      	ldrh	r3, [r7, #22]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	4b1b      	ldr	r3, [pc, #108]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cd92:	631a      	str	r2, [r3, #48]	@ 0x30

    cfg.read_buffer       = read_buff;
 800cd94:	4a1a      	ldr	r2, [pc, #104]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd98:	63d3      	str	r3, [r2, #60]	@ 0x3c
    cfg.prog_buffer       = write_buff;
 800cd9a:	4a19      	ldr	r2, [pc, #100]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	6413      	str	r3, [r2, #64]	@ 0x40
    cfg.lookahead_buffer  = lookahead_buff;
 800cda0:	4a17      	ldr	r2, [pc, #92]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	6453      	str	r3, [r2, #68]	@ 0x44

    cfg.read   = block_device_read;
 800cda6:	4b16      	ldr	r3, [pc, #88]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cda8:	4a16      	ldr	r2, [pc, #88]	@ (800ce04 <lfs_fs_ll_init+0xfc>)
 800cdaa:	605a      	str	r2, [r3, #4]
    cfg.prog   = block_device_prog;
 800cdac:	4b14      	ldr	r3, [pc, #80]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cdae:	4a16      	ldr	r2, [pc, #88]	@ (800ce08 <lfs_fs_ll_init+0x100>)
 800cdb0:	609a      	str	r2, [r3, #8]
    cfg.erase  = block_device_erase;
 800cdb2:	4b13      	ldr	r3, [pc, #76]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cdb4:	4a15      	ldr	r2, [pc, #84]	@ (800ce0c <lfs_fs_ll_init+0x104>)
 800cdb6:	60da      	str	r2, [r3, #12]
    cfg.sync   = block_device_sync;
 800cdb8:	4b11      	ldr	r3, [pc, #68]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cdba:	4a15      	ldr	r2, [pc, #84]	@ (800ce10 <lfs_fs_ll_init+0x108>)
 800cdbc:	611a      	str	r2, [r3, #16]

    cfg.lock 	= lock;
 800cdbe:	4a10      	ldr	r2, [pc, #64]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6153      	str	r3, [r2, #20]
	cfg.unlock	= unlock;
 800cdc4:	4a0e      	ldr	r2, [pc, #56]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	6193      	str	r3, [r2, #24]

#ifdef LFS_THREADSAFE
#endif

    cfg.block_cycles 	= FLASH_BLOCK_CYCLES;
 800cdca:	4b0d      	ldr	r3, [pc, #52]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cdcc:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cdd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (lfs_mount(&lfs, &cfg)< 0){
 800cdd2:	490b      	ldr	r1, [pc, #44]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cdd4:	480f      	ldr	r0, [pc, #60]	@ (800ce14 <lfs_fs_ll_init+0x10c>)
 800cdd6:	f007 fd0a 	bl	80147ee <lfs_mount>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	da09      	bge.n	800cdf4 <lfs_fs_ll_init+0xec>
    	lfs_format(&lfs, &cfg);
 800cde0:	4907      	ldr	r1, [pc, #28]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cde2:	480c      	ldr	r0, [pc, #48]	@ (800ce14 <lfs_fs_ll_init+0x10c>)
 800cde4:	f007 fce6 	bl	80147b4 <lfs_format>
    	return lfs_mount(&lfs, &cfg);
 800cde8:	4905      	ldr	r1, [pc, #20]	@ (800ce00 <lfs_fs_ll_init+0xf8>)
 800cdea:	480a      	ldr	r0, [pc, #40]	@ (800ce14 <lfs_fs_ll_init+0x10c>)
 800cdec:	f007 fcff 	bl	80147ee <lfs_mount>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	e000      	b.n	800cdf6 <lfs_fs_ll_init+0xee>
    }

	return 0;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3728      	adds	r7, #40	@ 0x28
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	2001810c 	.word	0x2001810c
 800ce04:	0800ce19 	.word	0x0800ce19
 800ce08:	0800ceb9 	.word	0x0800ceb9
 800ce0c:	0800ce71 	.word	0x0800ce71
 800ce10:	0800cf11 	.word	0x0800cf11
 800ce14:	2001808c 	.word	0x2001808c

0800ce18 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
 800ce24:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d306      	bcc.n	800ce3e <block_device_read+0x26>
 800ce30:	4b0c      	ldr	r3, [pc, #48]	@ (800ce64 <block_device_read+0x4c>)
 800ce32:	4a0d      	ldr	r2, [pc, #52]	@ (800ce68 <block_device_read+0x50>)
 800ce34:	f240 1111 	movw	r1, #273	@ 0x111
 800ce38:	480c      	ldr	r0, [pc, #48]	@ (800ce6c <block_device_read+0x54>)
 800ce3a:	f016 fa35 	bl	80232a8 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	fb03 f202 	mul.w	r2, r3, r2
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	69ba      	ldr	r2, [r7, #24]
 800ce4e:	b292      	uxth	r2, r2
 800ce50:	4619      	mov	r1, r3
 800ce52:	6838      	ldr	r0, [r7, #0]
 800ce54:	f7f8 fd4c 	bl	80058f0 <sFLASH_ReadBuffer>
	return 0;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	080307bc 	.word	0x080307bc
 800ce68:	08034268 	.word	0x08034268
 800ce6c:	080307d4 	.word	0x080307d4

0800ce70 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d306      	bcc.n	800ce92 <block_device_erase+0x22>
 800ce84:	4b09      	ldr	r3, [pc, #36]	@ (800ceac <block_device_erase+0x3c>)
 800ce86:	4a0a      	ldr	r2, [pc, #40]	@ (800ceb0 <block_device_erase+0x40>)
 800ce88:	f240 1119 	movw	r1, #281	@ 0x119
 800ce8c:	4809      	ldr	r0, [pc, #36]	@ (800ceb4 <block_device_erase+0x44>)
 800ce8e:	f016 fa0b 	bl	80232a8 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	fb02 f303 	mul.w	r3, r2, r3
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7f8 fc25 	bl	80056ec <sFLASH_EraseSector>
	return 0;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	080307bc 	.word	0x080307bc
 800ceb0:	0803427c 	.word	0x0803427c
 800ceb4:	080307d4 	.word	0x080307d4

0800ceb8 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d306      	bcc.n	800cede <block_device_prog+0x26>
 800ced0:	4b0c      	ldr	r3, [pc, #48]	@ (800cf04 <block_device_prog+0x4c>)
 800ced2:	4a0d      	ldr	r2, [pc, #52]	@ (800cf08 <block_device_prog+0x50>)
 800ced4:	f240 1121 	movw	r1, #289	@ 0x121
 800ced8:	480c      	ldr	r0, [pc, #48]	@ (800cf0c <block_device_prog+0x54>)
 800ceda:	f016 f9e5 	bl	80232a8 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	fb03 f202 	mul.w	r2, r3, r2
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4413      	add	r3, r2
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	b292      	uxth	r2, r2
 800cef0:	4619      	mov	r1, r3
 800cef2:	6838      	ldr	r0, [r7, #0]
 800cef4:	f7f8 fc53 	bl	800579e <sFLASH_WriteBuffer>
	return 0;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	080307bc 	.word	0x080307bc
 800cf08:	08034290 	.word	0x08034290
 800cf0c:	080307d4 	.word	0x080307d4

0800cf10 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
	return 0;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800cf26:	b480      	push	{r7}
 800cf28:	b083      	sub	sp, #12
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4293      	cmp	r3, r2
 800cf36:	bf38      	it	cc
 800cf38:	4613      	movcc	r3, r2
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800cf46:	b480      	push	{r7}
 800cf48:	b083      	sub	sp, #12
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800cf50:	683a      	ldr	r2, [r7, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4293      	cmp	r3, r2
 800cf56:	bf28      	it	cs
 800cf58:	4613      	movcs	r3, r2
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800cf66:	b480      	push	{r7}
 800cf68:	b083      	sub	sp, #12
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
 800cf6e:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	fb01 f202 	mul.w	r2, r1, r2
 800cf7e:	1a9b      	subs	r3, r3, r2
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	1ad3      	subs	r3, r2, r3
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff ffde 	bl	800cf66 <lfs_aligndown>
 800cfaa:	4603      	mov	r3, r0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	fab3 f383 	clz	r3, r3
 800cfc4:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	fa93 f3a3 	rbit	r3, r3
 800cfe2:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7f3 fec4 	bl	8000d88 <__popcountsi2>
 800d000:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800d00a:	b480      	push	{r7}
 800d00c:	b083      	sub	sp, #12
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	1ad3      	subs	r3, r2, r3
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr

0800d026 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800d026:	b480      	push	{r7}
 800d028:	b083      	sub	sp, #12
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 800d02e:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800d030:	4618      	mov	r0, r3
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff ffee 	bl	800d026 <lfs_fromle32>
 800d04a:	4603      	mov	r3, r0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800d060:	4618      	mov	r0, r3
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff ffed 	bl	800d054 <lfs_frombe32>
 800d07a:	4603      	mov	r3, r0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <lfs_malloc>:

// Allocate memory, only used if buffers are not provided to littlefs
//
// littlefs current has no alignment requirements, as it only allocates
// byte-level buffers.
static inline void *lfs_malloc(size_t size) {
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
#if defined(LFS_MALLOC)
    return LFS_MALLOC(size);
#elif !defined(LFS_NO_MALLOC)
    return malloc(size);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7ff fa4d 	bl	800c52c <pvPortMalloc>
 800d092:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800d094:	4618      	mov	r0, r3
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7ff fb0f 	bl	800c6c8 <vPortFree>
#else
    (void)p;
#endif
}
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800d0b2:	b480      	push	{r7}
 800d0b4:	b083      	sub	sp, #12
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
 800d0ba:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0c2:	601a      	str	r2, [r3, #0]
}
 800d0c4:	bf00      	nop
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	68d8      	ldr	r0, [r3, #12]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	21ff      	movs	r1, #255	@ 0xff
 800d0e8:	f018 fe32 	bl	8025d50 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0f2:	601a      	str	r2, [r3, #0]
}
 800d0f4:	bf00      	nop
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800d0fc:	b5b0      	push	{r4, r5, r7, lr}
 800d0fe:	b08a      	sub	sp, #40	@ 0x28
 800d100:	af02      	add	r7, sp, #8
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800d10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10c:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size
 800d10e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d112:	441a      	add	r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d80a      	bhi.n	800d134 <lfs_bd_read+0x38>
            || (lfs->block_count && block >= lfs->block_count)) {
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 8124 	beq.w	800d370 <lfs_bd_read+0x274>
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d12e:	429a      	cmp	r2, r3
 800d130:	f0c0 811e 	bcc.w	800d370 <lfs_bd_read+0x274>
        return LFS_ERR_CORRUPT;
 800d134:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800d138:	e11f      	b.n	800d37a <lfs_bd_read+0x27e>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800d13a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d13c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d03f      	beq.n	800d1c4 <lfs_bd_read+0xc8>
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d13a      	bne.n	800d1c4 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	685a      	ldr	r2, [r3, #4]
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800d158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d232      	bcs.n	800d1c4 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d164:	429a      	cmp	r2, r3
 800d166:	d324      	bcc.n	800d1b2 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	689a      	ldr	r2, [r3, #8]
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	6859      	ldr	r1, [r3, #4]
 800d170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d172:	1acb      	subs	r3, r1, r3
 800d174:	4413      	add	r3, r2
 800d176:	4619      	mov	r1, r3
 800d178:	69b8      	ldr	r0, [r7, #24]
 800d17a:	f7ff fee4 	bl	800cf46 <lfs_min>
 800d17e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	68da      	ldr	r2, [r3, #12]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d18a:	1acb      	subs	r3, r1, r3
 800d18c:	4413      	add	r3, r2
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	4619      	mov	r1, r3
 800d192:	69f8      	ldr	r0, [r7, #28]
 800d194:	f01a f818 	bl	80271c8 <memcpy>

                data += diff;
 800d198:	69fa      	ldr	r2, [r7, #28]
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	4413      	add	r3, r2
 800d19e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800d1a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800d1a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800d1b0:	e0de      	b.n	800d370 <lfs_bd_read+0x274>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	69b8      	ldr	r0, [r7, #24]
 800d1be:	f7ff fec2 	bl	800cf46 <lfs_min>
 800d1c2:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d13a      	bne.n	800d244 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	4413      	add	r3, r2
        if (block == rcache->block &&
 800d1d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d232      	bcs.n	800d244 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	685b      	ldr	r3, [r3, #4]
 800d1e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d324      	bcc.n	800d232 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	689a      	ldr	r2, [r3, #8]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6859      	ldr	r1, [r3, #4]
 800d1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1f2:	1acb      	subs	r3, r1, r3
 800d1f4:	4413      	add	r3, r2
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	69b8      	ldr	r0, [r7, #24]
 800d1fa:	f7ff fea4 	bl	800cf46 <lfs_min>
 800d1fe:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	68da      	ldr	r2, [r3, #12]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d20a:	1acb      	subs	r3, r1, r3
 800d20c:	4413      	add	r3, r2
 800d20e:	69ba      	ldr	r2, [r7, #24]
 800d210:	4619      	mov	r1, r3
 800d212:	69f8      	ldr	r0, [r7, #28]
 800d214:	f019 ffd8 	bl	80271c8 <memcpy>

                data += diff;
 800d218:	69fa      	ldr	r2, [r7, #28]
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	4413      	add	r3, r2
 800d21e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800d220:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	4413      	add	r3, r2
 800d226:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800d228:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800d230:	e09e      	b.n	800d370 <lfs_bd_read+0x274>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	4619      	mov	r1, r3
 800d23c:	69b8      	ldr	r0, [r7, #24]
 800d23e:	f7ff fe82 	bl	800cf46 <lfs_min>
 800d242:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800d244:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d336      	bcc.n	800d2ba <lfs_bd_read+0x1be>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d250:	69da      	ldr	r2, [r3, #28]
 800d252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d254:	fbb3 f1f2 	udiv	r1, r3, r2
 800d258:	fb01 f202 	mul.w	r2, r1, r2
 800d25c:	1a9b      	subs	r3, r3, r2
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d12b      	bne.n	800d2ba <lfs_bd_read+0x1be>
                size >= lfs->cfg->read_size) {
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d266:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800d268:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d325      	bcc.n	800d2ba <lfs_bd_read+0x1be>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d272:	69db      	ldr	r3, [r3, #28]
 800d274:	4619      	mov	r1, r3
 800d276:	69b8      	ldr	r0, [r7, #24]
 800d278:	f7ff fe75 	bl	800cf66 <lfs_aligndown>
 800d27c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d282:	685c      	ldr	r4, [r3, #4]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d292:	47a0      	blx	r4
 800d294:	6178      	str	r0, [r7, #20]
            if (err) {
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <lfs_bd_read+0x1a4>
                return err;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	e06c      	b.n	800d37a <lfs_bd_read+0x27e>
            }

            data += diff;
 800d2a0:	69fa      	ldr	r2, [r7, #28]
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	61fb      	str	r3, [r7, #28]
            off += diff;
 800d2a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 800d2b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 800d2b8:	e05a      	b.n	800d370 <lfs_bd_read+0x274>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00a      	beq.n	800d2d8 <lfs_bd_read+0x1dc>
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d305      	bcc.n	800d2d8 <lfs_bd_read+0x1dc>
 800d2cc:	4b2d      	ldr	r3, [pc, #180]	@ (800d384 <lfs_bd_read+0x288>)
 800d2ce:	4a2e      	ldr	r2, [pc, #184]	@ (800d388 <lfs_bd_read+0x28c>)
 800d2d0:	216b      	movs	r1, #107	@ 0x6b
 800d2d2:	482e      	ldr	r0, [pc, #184]	@ (800d38c <lfs_bd_read+0x290>)
 800d2d4:	f015 ffe8 	bl	80232a8 <__assert_func>
        rcache->block = block;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2dc:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2e2:	69db      	ldr	r3, [r3, #28]
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d2e8:	f7ff fe3d 	bl	800cf66 <lfs_aligndown>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800d2f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2fc:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800d2fe:	4619      	mov	r1, r3
 800d300:	4610      	mov	r0, r2
 800d302:	f7ff fe45 	bl	800cf90 <lfs_alignup>
 800d306:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                lfs_min(
 800d30e:	4619      	mov	r1, r3
 800d310:	4610      	mov	r0, r2
 800d312:	f7ff fe18 	bl	800cf46 <lfs_min>
 800d316:	4602      	mov	r2, r0
                - rcache->off,
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800d31c:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(
 800d324:	4619      	mov	r1, r3
 800d326:	4610      	mov	r0, r2
 800d328:	f7ff fe0d 	bl	800cf46 <lfs_min>
 800d32c:	4602      	mov	r2, r0
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d336:	685c      	ldr	r4, [r3, #4]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6819      	ldr	r1, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	462b      	mov	r3, r5
 800d350:	47a0      	blx	r4
 800d352:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	2b00      	cmp	r3, #0
 800d358:	dd05      	ble.n	800d366 <lfs_bd_read+0x26a>
 800d35a:	4b0d      	ldr	r3, [pc, #52]	@ (800d390 <lfs_bd_read+0x294>)
 800d35c:	4a0a      	ldr	r2, [pc, #40]	@ (800d388 <lfs_bd_read+0x28c>)
 800d35e:	2176      	movs	r1, #118	@ 0x76
 800d360:	480a      	ldr	r0, [pc, #40]	@ (800d38c <lfs_bd_read+0x290>)
 800d362:	f015 ffa1 	bl	80232a8 <__assert_func>
        if (err) {
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <lfs_bd_read+0x274>
            return err;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	e004      	b.n	800d37a <lfs_bd_read+0x27e>
    while (size > 0) {
 800d370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d372:	2b00      	cmp	r3, #0
 800d374:	f47f aee1 	bne.w	800d13a <lfs_bd_read+0x3e>
        }
    }

    return 0;
 800d378:	2300      	movs	r3, #0
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3720      	adds	r7, #32
 800d37e:	46bd      	mov	sp, r7
 800d380:	bdb0      	pop	{r4, r5, r7, pc}
 800d382:	bf00      	nop
 800d384:	08030810 	.word	0x08030810
 800d388:	080342a4 	.word	0x080342a4
 800d38c:	08030840 	.word	0x08030840
 800d390:	08030870 	.word	0x08030870

0800d394 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800d394:	b580      	push	{r7, lr}
 800d396:	b090      	sub	sp, #64	@ 0x40
 800d398:	af04      	add	r7, sp, #16
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
 800d3a0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800d3a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    lfs_size_t diff = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	627b      	str	r3, [r7, #36]	@ 0x24

    for (lfs_off_t i = 0; i < size; i += diff) {
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3ae:	e039      	b.n	800d424 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800d3b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	2108      	movs	r1, #8
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7ff fdc4 	bl	800cf46 <lfs_min>
 800d3be:	6278      	str	r0, [r7, #36]	@ 0x24
        int err = lfs_bd_read(lfs,
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c4:	1ad1      	subs	r1, r2, r3
 800d3c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ca:	4413      	add	r3, r2
 800d3cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3ce:	9203      	str	r2, [sp, #12]
 800d3d0:	f107 0214 	add.w	r2, r7, #20
 800d3d4:	9202      	str	r2, [sp, #8]
 800d3d6:	9301      	str	r3, [sp, #4]
 800d3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f7ff fe8a 	bl	800d0fc <lfs_bd_read>
 800d3e8:	6238      	str	r0, [r7, #32]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <lfs_bd_cmp+0x60>
            return err;
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	e01c      	b.n	800d42e <lfs_bd_cmp+0x9a>
        }

        int res = memcmp(dat, data + i, diff);
 800d3f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f8:	18d1      	adds	r1, r2, r3
 800d3fa:	f107 0314 	add.w	r3, r7, #20
 800d3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d400:	4618      	mov	r0, r3
 800d402:	f018 fc11 	bl	8025c28 <memcmp>
 800d406:	61f8      	str	r0, [r7, #28]
        if (res) {
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d006      	beq.n	800d41c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	2b00      	cmp	r3, #0
 800d412:	da01      	bge.n	800d418 <lfs_bd_cmp+0x84>
 800d414:	2301      	movs	r3, #1
 800d416:	e00a      	b.n	800d42e <lfs_bd_cmp+0x9a>
 800d418:	2302      	movs	r3, #2
 800d41a:	e008      	b.n	800d42e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800d41c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d420:	4413      	add	r3, r2
 800d422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d428:	429a      	cmp	r2, r3
 800d42a:	d3c1      	bcc.n	800d3b0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3730      	adds	r7, #48	@ 0x30
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <lfs_bd_crc>:

static int lfs_bd_crc(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc) {
 800d436:	b580      	push	{r7, lr}
 800d438:	b08e      	sub	sp, #56	@ 0x38
 800d43a:	af04      	add	r7, sp, #16
 800d43c:	60f8      	str	r0, [r7, #12]
 800d43e:	60b9      	str	r1, [r7, #8]
 800d440:	607a      	str	r2, [r7, #4]
 800d442:	603b      	str	r3, [r7, #0]
    lfs_size_t diff = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	623b      	str	r3, [r7, #32]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800d448:	2300      	movs	r3, #0
 800d44a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d44c:	e030      	b.n	800d4b0 <lfs_bd_crc+0x7a>
        uint8_t dat[8];
        diff = lfs_min(size-i, sizeof(dat));
 800d44e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	2108      	movs	r1, #8
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff fd75 	bl	800cf46 <lfs_min>
 800d45c:	6238      	str	r0, [r7, #32]
        int err = lfs_bd_read(lfs,
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d462:	1ad1      	subs	r1, r2, r3
 800d464:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d468:	4413      	add	r3, r2
 800d46a:	6a3a      	ldr	r2, [r7, #32]
 800d46c:	9203      	str	r2, [sp, #12]
 800d46e:	f107 0214 	add.w	r2, r7, #20
 800d472:	9202      	str	r2, [sp, #8]
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	460b      	mov	r3, r1
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	68b9      	ldr	r1, [r7, #8]
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f7ff fe3b 	bl	800d0fc <lfs_bd_read>
 800d486:	61f8      	str	r0, [r7, #28]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (err) {
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <lfs_bd_crc+0x5c>
            return err;
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	e013      	b.n	800d4ba <lfs_bd_crc+0x84>
        }

        *crc = lfs_crc(*crc, &dat, diff);
 800d492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f107 0114 	add.w	r1, r7, #20
 800d49a:	6a3a      	ldr	r2, [r7, #32]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f007 fc49 	bl	8014d34 <lfs_crc>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4a6:	601a      	str	r2, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 800d4a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d3ca      	bcc.n	800d44e <lfs_bd_crc+0x18>
    }

    return 0;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3728      	adds	r7, #40	@ 0x28
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
	...

0800d4c4 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800d4c4:	b5b0      	push	{r4, r5, r7, lr}
 800d4c6:	b08c      	sub	sp, #48	@ 0x30
 800d4c8:	af04      	add	r7, sp, #16
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4da:	d060      	beq.n	800d59e <lfs_bd_flush+0xda>
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f113 0f02 	cmn.w	r3, #2
 800d4e4:	d05b      	beq.n	800d59e <lfs_bd_flush+0xda>
        LFS_ASSERT(pcache->block < lfs->block_count);
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d305      	bcc.n	800d4fe <lfs_bd_flush+0x3a>
 800d4f2:	4b2d      	ldr	r3, [pc, #180]	@ (800d5a8 <lfs_bd_flush+0xe4>)
 800d4f4:	4a2d      	ldr	r2, [pc, #180]	@ (800d5ac <lfs_bd_flush+0xe8>)
 800d4f6:	21b3      	movs	r1, #179	@ 0xb3
 800d4f8:	482d      	ldr	r0, [pc, #180]	@ (800d5b0 <lfs_bd_flush+0xec>)
 800d4fa:	f015 fed5 	bl	80232a8 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	689a      	ldr	r2, [r3, #8]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d506:	6a1b      	ldr	r3, [r3, #32]
 800d508:	4619      	mov	r1, r3
 800d50a:	4610      	mov	r0, r2
 800d50c:	f7ff fd40 	bl	800cf90 <lfs_alignup>
 800d510:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d516:	689c      	ldr	r4, [r3, #8]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	6819      	ldr	r1, [r3, #0]
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	462b      	mov	r3, r5
 800d52e:	47a0      	blx	r4
 800d530:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	2b00      	cmp	r3, #0
 800d536:	dd05      	ble.n	800d544 <lfs_bd_flush+0x80>
 800d538:	4b1e      	ldr	r3, [pc, #120]	@ (800d5b4 <lfs_bd_flush+0xf0>)
 800d53a:	4a1c      	ldr	r2, [pc, #112]	@ (800d5ac <lfs_bd_flush+0xe8>)
 800d53c:	21b7      	movs	r1, #183	@ 0xb7
 800d53e:	481c      	ldr	r0, [pc, #112]	@ (800d5b0 <lfs_bd_flush+0xec>)
 800d540:	f015 feb2 	bl	80232a8 <__assert_func>
        if (err) {
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d001      	beq.n	800d54e <lfs_bd_flush+0x8a>
            return err;
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	e028      	b.n	800d5a0 <lfs_bd_flush+0xdc>
        }

        if (validate) {
 800d54e:	78fb      	ldrb	r3, [r7, #3]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d020      	beq.n	800d596 <lfs_bd_flush+0xd2>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800d554:	6879      	ldr	r1, [r7, #4]
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f7ff fdab 	bl	800d0b2 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800d564:	68b9      	ldr	r1, [r7, #8]
 800d566:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800d568:	69f8      	ldr	r0, [r7, #28]
 800d56a:	9003      	str	r0, [sp, #12]
 800d56c:	9102      	str	r1, [sp, #8]
 800d56e:	9201      	str	r2, [sp, #4]
 800d570:	9300      	str	r3, [sp, #0]
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	2100      	movs	r1, #0
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f7ff ff0b 	bl	800d394 <lfs_bd_cmp>
 800d57e:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	da01      	bge.n	800d58a <lfs_bd_flush+0xc6>
                return res;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	e00a      	b.n	800d5a0 <lfs_bd_flush+0xdc>
            }

            if (res != LFS_CMP_EQ) {
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d002      	beq.n	800d596 <lfs_bd_flush+0xd2>
                return LFS_ERR_CORRUPT;
 800d590:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800d594:	e004      	b.n	800d5a0 <lfs_bd_flush+0xdc>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800d596:	68b9      	ldr	r1, [r7, #8]
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f7ff fd99 	bl	800d0d0 <lfs_cache_zero>
    }

    return 0;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3720      	adds	r7, #32
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bdb0      	pop	{r4, r5, r7, pc}
 800d5a8:	0803087c 	.word	0x0803087c
 800d5ac:	080342b0 	.word	0x080342b0
 800d5b0:	08030840 	.word	0x08030840
 800d5b4:	08030870 	.word	0x08030870

0800d5b8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
 800d5c4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7ff fd72 	bl	800d0b2 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800d5ce:	78fb      	ldrb	r3, [r7, #3]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	68b9      	ldr	r1, [r7, #8]
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f7ff ff75 	bl	800d4c4 <lfs_bd_flush>
 800d5da:	6178      	str	r0, [r7, #20]
    if (err) {
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <lfs_bd_sync+0x2e>
        return err;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	e011      	b.n	800d60a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	4798      	blx	r3
 800d5f4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	dd05      	ble.n	800d608 <lfs_bd_sync+0x50>
 800d5fc:	4b05      	ldr	r3, [pc, #20]	@ (800d614 <lfs_bd_sync+0x5c>)
 800d5fe:	4a06      	ldr	r2, [pc, #24]	@ (800d618 <lfs_bd_sync+0x60>)
 800d600:	21dd      	movs	r1, #221	@ 0xdd
 800d602:	4806      	ldr	r0, [pc, #24]	@ (800d61c <lfs_bd_sync+0x64>)
 800d604:	f015 fe50 	bl	80232a8 <__assert_func>
    return err;
 800d608:	697b      	ldr	r3, [r7, #20]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3718      	adds	r7, #24
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	08030870 	.word	0x08030870
 800d618:	080342c0 	.word	0x080342c0
 800d61c:	08030840 	.word	0x08030840

0800d620 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800d620:	b580      	push	{r7, lr}
 800d622:	b088      	sub	sp, #32
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
 800d62c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800d62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d630:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 800d632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d634:	f113 0f02 	cmn.w	r3, #2
 800d638:	d00a      	beq.n	800d650 <lfs_bd_prog+0x30>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d63e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d640:	429a      	cmp	r2, r3
 800d642:	d305      	bcc.n	800d650 <lfs_bd_prog+0x30>
 800d644:	4b48      	ldr	r3, [pc, #288]	@ (800d768 <lfs_bd_prog+0x148>)
 800d646:	4a49      	ldr	r2, [pc, #292]	@ (800d76c <lfs_bd_prog+0x14c>)
 800d648:	21e8      	movs	r1, #232	@ 0xe8
 800d64a:	4849      	ldr	r0, [pc, #292]	@ (800d770 <lfs_bd_prog+0x150>)
 800d64c:	f015 fe2c 	bl	80232a8 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800d650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d654:	441a      	add	r2, r3
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d97a      	bls.n	800d756 <lfs_bd_prog+0x136>
 800d660:	4b44      	ldr	r3, [pc, #272]	@ (800d774 <lfs_bd_prog+0x154>)
 800d662:	4a42      	ldr	r2, [pc, #264]	@ (800d76c <lfs_bd_prog+0x14c>)
 800d664:	21e9      	movs	r1, #233	@ 0xe9
 800d666:	4842      	ldr	r0, [pc, #264]	@ (800d770 <lfs_bd_prog+0x150>)
 800d668:	f015 fe1e 	bl	80232a8 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d672:	429a      	cmp	r2, r3
 800d674:	d151      	bne.n	800d71a <lfs_bd_prog+0xfa>
                off >= pcache->off &&
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800d67a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d34c      	bcc.n	800d71a <lfs_bd_prog+0xfa>
                off < pcache->off + lfs->cfg->cache_size) {
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d68a:	4413      	add	r3, r2
                off >= pcache->off &&
 800d68c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d68e:	429a      	cmp	r2, r3
 800d690:	d243      	bcs.n	800d71a <lfs_bd_prog+0xfa>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	6859      	ldr	r1, [r3, #4]
 800d69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69e:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800d6a0:	4413      	add	r3, r2
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d6a6:	f7ff fc4e 	bl	800cf46 <lfs_min>
 800d6aa:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	68da      	ldr	r2, [r3, #12]
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6b6:	1acb      	subs	r3, r1, r3
 800d6b8:	4413      	add	r3, r2
 800d6ba:	69ba      	ldr	r2, [r7, #24]
 800d6bc:	69f9      	ldr	r1, [r7, #28]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f019 fd82 	bl	80271c8 <memcpy>

            data += diff;
 800d6c4:	69fa      	ldr	r2, [r7, #28]
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	61fb      	str	r3, [r7, #28]
            off += diff;
 800d6cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 800d6d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	6898      	ldr	r0, [r3, #8]
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	f7ff fc1c 	bl	800cf26 <lfs_max>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	689a      	ldr	r2, [r3, #8]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d6fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d128      	bne.n	800d754 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800d702:	78fb      	ldrb	r3, [r7, #3]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	68b9      	ldr	r1, [r7, #8]
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f7ff fedb 	bl	800d4c4 <lfs_bd_flush>
 800d70e:	6178      	str	r0, [r7, #20]
                if (err) {
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d01e      	beq.n	800d754 <lfs_bd_prog+0x134>
                    return err;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	e021      	b.n	800d75e <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d722:	d006      	beq.n	800d732 <lfs_bd_prog+0x112>
 800d724:	4b14      	ldr	r3, [pc, #80]	@ (800d778 <lfs_bd_prog+0x158>)
 800d726:	4a11      	ldr	r2, [pc, #68]	@ (800d76c <lfs_bd_prog+0x14c>)
 800d728:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800d72c:	4810      	ldr	r0, [pc, #64]	@ (800d770 <lfs_bd_prog+0x150>)
 800d72e:	f015 fdbb 	bl	80232a8 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d736:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d73c:	6a1b      	ldr	r3, [r3, #32]
 800d73e:	4619      	mov	r1, r3
 800d740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d742:	f7ff fc10 	bl	800cf66 <lfs_aligndown>
 800d746:	4602      	mov	r2, r0
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	2200      	movs	r2, #0
 800d750:	609a      	str	r2, [r3, #8]
 800d752:	e000      	b.n	800d756 <lfs_bd_prog+0x136>
            continue;
 800d754:	bf00      	nop
    while (size > 0) {
 800d756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d187      	bne.n	800d66c <lfs_bd_prog+0x4c>
    }

    return 0;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3720      	adds	r7, #32
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	080308a0 	.word	0x080308a0
 800d76c:	080342cc 	.word	0x080342cc
 800d770:	08030840 	.word	0x08030840
 800d774:	080308d8 	.word	0x080308d8
 800d778:	080308fc 	.word	0x080308fc

0800d77c <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->block_count);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d306      	bcc.n	800d79e <lfs_bd_erase+0x22>
 800d790:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d0 <lfs_bd_erase+0x54>)
 800d792:	4a10      	ldr	r2, [pc, #64]	@ (800d7d4 <lfs_bd_erase+0x58>)
 800d794:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800d798:	480f      	ldr	r0, [pc, #60]	@ (800d7d8 <lfs_bd_erase+0x5c>)
 800d79a:	f015 fd85 	bl	80232a8 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d7a8:	6839      	ldr	r1, [r7, #0]
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	4798      	blx	r3
 800d7ae:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	dd06      	ble.n	800d7c4 <lfs_bd_erase+0x48>
 800d7b6:	4b09      	ldr	r3, [pc, #36]	@ (800d7dc <lfs_bd_erase+0x60>)
 800d7b8:	4a06      	ldr	r2, [pc, #24]	@ (800d7d4 <lfs_bd_erase+0x58>)
 800d7ba:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800d7be:	4806      	ldr	r0, [pc, #24]	@ (800d7d8 <lfs_bd_erase+0x5c>)
 800d7c0:	f015 fd72 	bl	80232a8 <__assert_func>
    return err;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	08030920 	.word	0x08030920
 800d7d4:	080342d8 	.word	0x080342d8
 800d7d8:	08030840 	.word	0x08030840
 800d7dc:	08030870 	.word	0x08030870

0800d7e0 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	685a      	ldr	r2, [r3, #4]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	601a      	str	r2, [r3, #0]
}
 800d7fe:	bf00      	nop
 800d800:	3714      	adds	r7, #20
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800d80a:	b480      	push	{r7}
 800d80c:	b083      	sub	sp, #12
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d81a:	d005      	beq.n	800d828 <lfs_pair_isnull+0x1e>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	3304      	adds	r3, #4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d826:	d101      	bne.n	800d82c <lfs_pair_isnull+0x22>
 800d828:	2301      	movs	r3, #1
 800d82a:	e000      	b.n	800d82e <lfs_pair_isnull+0x24>
 800d82c:	2300      	movs	r3, #0
 800d82e:	f003 0301 	and.w	r3, r3, #1
 800d832:	b2db      	uxtb	r3, r3
}
 800d834:	4618      	mov	r0, r3
 800d836:	370c      	adds	r7, #12
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	429a      	cmp	r2, r3
 800d854:	d017      	beq.n	800d886 <lfs_pair_cmp+0x46>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	3304      	adds	r3, #4
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	3304      	adds	r3, #4
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	429a      	cmp	r2, r3
 800d864:	d00f      	beq.n	800d886 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	3304      	adds	r3, #4
 800d86e:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d870:	429a      	cmp	r2, r3
 800d872:	d008      	beq.n	800d886 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	3304      	adds	r3, #4
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d87e:	429a      	cmp	r2, r3
 800d880:	d001      	beq.n	800d886 <lfs_pair_cmp+0x46>
 800d882:	2301      	movs	r3, #1
 800d884:	e000      	b.n	800d888 <lfs_pair_cmp+0x48>
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
 800d89c:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d107      	bne.n	800d8ba <lfs_pair_issync+0x26>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	3304      	adds	r3, #4
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d00d      	beq.n	800d8d6 <lfs_pair_issync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d108      	bne.n	800d8da <lfs_pair_issync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d101      	bne.n	800d8da <lfs_pair_issync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e000      	b.n	800d8dc <lfs_pair_issync+0x48>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f003 0301 	and.w	r3, r3, #1
 800d8e0:	b2db      	uxtb	r3, r3
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	370c      	adds	r7, #12
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ec:	4770      	bx	lr

0800d8ee <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800d8ee:	b590      	push	{r4, r7, lr}
 800d8f0:	b083      	sub	sp, #12
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7ff fb93 	bl	800d026 <lfs_fromle32>
 800d900:	4602      	mov	r2, r0
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	3304      	adds	r3, #4
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	1d1c      	adds	r4, r3, #4
 800d910:	4610      	mov	r0, r2
 800d912:	f7ff fb88 	bl	800d026 <lfs_fromle32>
 800d916:	4603      	mov	r3, r0
 800d918:	6023      	str	r3, [r4, #0]
}
 800d91a:	bf00      	nop
 800d91c:	370c      	adds	r7, #12
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd90      	pop	{r4, r7, pc}

0800d922 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800d922:	b590      	push	{r4, r7, lr}
 800d924:	b083      	sub	sp, #12
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4618      	mov	r0, r3
 800d930:	f7ff fb84 	bl	800d03c <lfs_tole32>
 800d934:	4602      	mov	r2, r0
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	3304      	adds	r3, #4
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	1d1c      	adds	r4, r3, #4
 800d944:	4610      	mov	r0, r2
 800d946:	f7ff fb79 	bl	800d03c <lfs_tole32>
 800d94a:	4603      	mov	r3, r0
 800d94c:	6023      	str	r3, [r4, #0]
}
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	bd90      	pop	{r4, r7, pc}

0800d956 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800d956:	b480      	push	{r7}
 800d958:	b083      	sub	sp, #12
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	43db      	mvns	r3, r3
 800d962:	0fdb      	lsrs	r3, r3, #31
 800d964:	b2db      	uxtb	r3, r3
}
 800d966:	4618      	mov	r0, r3
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800d972:	b480      	push	{r7}
 800d974:	b083      	sub	sp, #12
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	059b      	lsls	r3, r3, #22
 800d97e:	159b      	asrs	r3, r3, #22
 800d980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d984:	bf0c      	ite	eq
 800d986:	2301      	moveq	r3, #1
 800d988:	2300      	movne	r3, #0
 800d98a:	b2db      	uxtb	r3, r3
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	0d1b      	lsrs	r3, r3, #20
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d9aa:	b29b      	uxth	r3, r3
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <lfs_tag_type2>:

static inline uint16_t lfs_tag_type2(lfs_tag_t tag) {
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
    return (tag & 0x78000000) >> 20;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	0d1b      	lsrs	r3, r3, #20
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 800d9ca:	b29b      	uxth	r3, r3
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	0d1b      	lsrs	r3, r3, #20
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d9ea:	b29b      	uxth	r3, r3
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	0d1b      	lsrs	r3, r3, #20
 800da04:	b2db      	uxtb	r3, r3
}
 800da06:	4618      	mov	r0, r3
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800da12:	b580      	push	{r7, lr}
 800da14:	b082      	sub	sp, #8
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff ffec 	bl	800d9f8 <lfs_tag_chunk>
 800da20:	4603      	mov	r3, r0
 800da22:	b25b      	sxtb	r3, r3
}
 800da24:	4618      	mov	r0, r3
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	0a9b      	lsrs	r3, r3, #10
 800da38:	b29b      	uxth	r3, r3
 800da3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da3e:	b29b      	uxth	r3, r3
}
 800da40:	4618      	mov	r0, r3
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800da66:	b580      	push	{r7, lr}
 800da68:	b082      	sub	sp, #8
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff ff7f 	bl	800d972 <lfs_tag_isdelete>
 800da74:	4603      	mov	r3, r0
 800da76:	461a      	mov	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4413      	add	r3, r2
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff ffe5 	bl	800da4c <lfs_tag_size>
 800da82:	4603      	mov	r3, r0
 800da84:	3304      	adds	r3, #4
}
 800da86:	4618      	mov	r0, r3
 800da88:	3708      	adds	r7, #8
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800da8e:	b480      	push	{r7}
 800da90:	b085      	sub	sp, #20
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800da98:	2300      	movs	r3, #0
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	e012      	b.n	800dac4 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	4413      	add	r3, r2
 800daa6:	6819      	ldr	r1, [r3, #0]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	4413      	add	r3, r2
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	4403      	add	r3, r0
 800daba:	404a      	eors	r2, r1
 800dabc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	3301      	adds	r3, #1
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	dde9      	ble.n	800da9e <lfs_gstate_xor+0x10>
    }
}
 800daca:	bf00      	nop
 800dacc:	bf00      	nop
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800dae0:	2300      	movs	r3, #0
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	e00b      	b.n	800dafe <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	4413      	add	r3, r2
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <lfs_gstate_iszero+0x20>
            return false;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e006      	b.n	800db06 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	3301      	adds	r3, #1
 800dafc:	60fb      	str	r3, [r7, #12]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b02      	cmp	r3, #2
 800db02:	ddf0      	ble.n	800dae6 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800db04:	2301      	movs	r3, #1
}
 800db06:	4618      	mov	r0, r3
 800db08:	3714      	adds	r7, #20
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	f7ff ff94 	bl	800da4c <lfs_tag_size>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	bf14      	ite	ne
 800db2a:	2301      	movne	r3, #1
 800db2c:	2300      	moveq	r3, #0
 800db2e:	b2db      	uxtb	r3, r3
}
 800db30:	4618      	mov	r0, r3
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) & 0x1ff;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff ff81 	bl	800da4c <lfs_tag_size>
 800db4a:	4603      	mov	r3, r0
 800db4c:	b2db      	uxtb	r3, r3
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3708      	adds	r7, #8
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800db56:	b580      	push	{r7, lr}
 800db58:	b082      	sub	sp, #8
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4618      	mov	r0, r3
 800db64:	f7ff ff18 	bl	800d998 <lfs_tag_type1>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	bf14      	ite	ne
 800db6e:	2301      	movne	r3, #1
 800db70:	2300      	moveq	r3, #0
 800db72:	b2db      	uxtb	r3, r3
}
 800db74:	4618      	mov	r0, r3
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <lfs_gstate_needssuperblock>:
#endif

static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag) >> 9;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff ff5f 	bl	800da4c <lfs_tag_size>
 800db8e:	4603      	mov	r3, r0
 800db90:	0a5b      	lsrs	r3, r3, #9
 800db92:	2b00      	cmp	r3, #0
 800db94:	bf14      	ite	ne
 800db96:	2301      	movne	r3, #1
 800db98:	2300      	moveq	r3, #0
 800db9a:	b2db      	uxtb	r3, r3
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7ff fef0 	bl	800d998 <lfs_tag_type1>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00a      	beq.n	800dbd4 <lfs_gstate_hasmovehere+0x30>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fe3b 	bl	800d840 <lfs_pair_cmp>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d101      	bne.n	800dbd4 <lfs_gstate_hasmovehere+0x30>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e000      	b.n	800dbd6 <lfs_gstate_hasmovehere+0x32>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f003 0301 	and.w	r3, r3, #1
 800dbda:	b2db      	uxtb	r3, r3
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff fa18 	bl	800d026 <lfs_fromle32>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff fa10 	bl	800d026 <lfs_fromle32>
 800dc06:	4602      	mov	r2, r0
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7ff fa08 	bl	800d026 <lfs_fromle32>
 800dc16:	4602      	mov	r2, r0
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	609a      	str	r2, [r3, #8]
}
 800dc1c:	bf00      	nop
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7ff fa03 	bl	800d03c <lfs_tole32>
 800dc36:	4602      	mov	r2, r0
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff f9fb 	bl	800d03c <lfs_tole32>
 800dc46:	4602      	mov	r2, r0
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7ff f9f3 	bl	800d03c <lfs_tole32>
 800dc56:	4602      	mov	r2, r0
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	609a      	str	r2, [r3, #8]
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <lfs_fcrc_fromle32>:
struct lfs_fcrc {
    lfs_size_t size;
    uint32_t crc;
};

static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_fromle32(fcrc->size);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7ff f9d8 	bl	800d026 <lfs_fromle32>
 800dc76:	4602      	mov	r2, r0
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_fromle32(fcrc->crc);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7ff f9d0 	bl	800d026 <lfs_fromle32>
 800dc86:	4602      	mov	r2, r0
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	605a      	str	r2, [r3, #4]
}
 800dc8c:	bf00      	nop
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <lfs_fcrc_tole32>:

#ifndef LFS_READONLY
static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc) {
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
    fcrc->size = lfs_tole32(fcrc->size);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7ff f9cb 	bl	800d03c <lfs_tole32>
 800dca6:	4602      	mov	r2, r0
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	601a      	str	r2, [r3, #0]
    fcrc->crc = lfs_tole32(fcrc->crc);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7ff f9c3 	bl	800d03c <lfs_tole32>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	605a      	str	r2, [r3, #4]
}
 800dcbc:	bf00      	nop
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff f9a8 	bl	800d026 <lfs_fromle32>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff f9a0 	bl	800d026 <lfs_fromle32>
 800dce6:	4602      	mov	r2, r0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	605a      	str	r2, [r3, #4]
}
 800dcec:	bf00      	nop
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7ff f99b 	bl	800d03c <lfs_tole32>
 800dd06:	4602      	mov	r2, r0
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff f993 	bl	800d03c <lfs_tole32>
 800dd16:	4602      	mov	r2, r0
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	605a      	str	r2, [r3, #4]
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff f978 	bl	800d026 <lfs_fromle32>
 800dd36:	4602      	mov	r2, r0
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff f970 	bl	800d026 <lfs_fromle32>
 800dd46:	4602      	mov	r2, r0
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff f968 	bl	800d026 <lfs_fromle32>
 800dd56:	4602      	mov	r2, r0
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7ff f960 	bl	800d026 <lfs_fromle32>
 800dd66:	4602      	mov	r2, r0
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	691b      	ldr	r3, [r3, #16]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7ff f958 	bl	800d026 <lfs_fromle32>
 800dd76:	4602      	mov	r2, r0
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	695b      	ldr	r3, [r3, #20]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff f950 	bl	800d026 <lfs_fromle32>
 800dd86:	4602      	mov	r2, r0
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	615a      	str	r2, [r3, #20]
}
 800dd8c:	bf00      	nop
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7ff f94b 	bl	800d03c <lfs_tole32>
 800dda6:	4602      	mov	r2, r0
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f7ff f943 	bl	800d03c <lfs_tole32>
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7ff f93b 	bl	800d03c <lfs_tole32>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7ff f933 	bl	800d03c <lfs_tole32>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	691b      	ldr	r3, [r3, #16]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff f92b 	bl	800d03c <lfs_tole32>
 800dde6:	4602      	mov	r2, r0
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff f923 	bl	800d03c <lfs_tole32>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	615a      	str	r2, [r3, #20]
}
 800ddfc:	bf00      	nop
 800ddfe:	3708      	adds	r7, #8
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800de0e:	1d3b      	adds	r3, r7, #4
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	e009      	b.n	800de28 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	683a      	ldr	r2, [r7, #0]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d101      	bne.n	800de22 <lfs_mlist_isopen+0x1e>
            return true;
 800de1e:	2301      	movs	r3, #1
 800de20:	e007      	b.n	800de32 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	60fb      	str	r3, [r7, #12]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1f1      	bne.n	800de14 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3714      	adds	r7, #20
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800de3e:	b480      	push	{r7}
 800de40:	b085      	sub	sp, #20
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
 800de46:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	3328      	adds	r3, #40	@ 0x28
 800de4c:	60fb      	str	r3, [r7, #12]
 800de4e:	e00d      	b.n	800de6c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	683a      	ldr	r2, [r7, #0]
 800de56:	429a      	cmp	r2, r3
 800de58:	d105      	bne.n	800de66 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	601a      	str	r2, [r3, #0]
            break;
 800de64:	e007      	b.n	800de76 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	60fb      	str	r3, [r7, #12]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d1ed      	bne.n	800de50 <lfs_mlist_remove+0x12>
        }
    }
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop
 800de78:	3714      	adds	r7, #20
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800de82:	b480      	push	{r7}
 800de84:	b083      	sub	sp, #12
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
 800de8a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800de9a:	bf00      	nop
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
	...

0800dea8 <lfs_fs_disk_version>:

// some other filesystem operations
static uint32_t lfs_fs_disk_version(lfs_t *lfs) {
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
    if (lfs->cfg->disk_version) {
        return lfs->cfg->disk_version;
    } else
#endif
    {
        return LFS_DISK_VERSION;
 800deb0:	4b03      	ldr	r3, [pc, #12]	@ (800dec0 <lfs_fs_disk_version+0x18>)
    }
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	370c      	adds	r7, #12
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	00020001 	.word	0x00020001

0800dec4 <lfs_fs_disk_version_major>:

static uint16_t lfs_fs_disk_version_major(lfs_t *lfs) {
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 16);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff ffeb 	bl	800dea8 <lfs_fs_disk_version>
 800ded2:	4603      	mov	r3, r0
 800ded4:	0c1b      	lsrs	r3, r3, #16
 800ded6:	b29b      	uxth	r3, r3

}
 800ded8:	4618      	mov	r0, r3
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <lfs_fs_disk_version_minor>:

static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs) {
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
    return 0xffff & (lfs_fs_disk_version(lfs) >> 0);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f7ff ffdd 	bl	800dea8 <lfs_fs_disk_version>
 800deee:	4603      	mov	r3, r0
 800def0:	b29b      	uxth	r3, r3
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <lfs_alloc_ckpoint>:

// allocations should call this when all allocated blocks are committed to
// the filesystem
//
// after a checkpoint, the block allocator may realloc any untracked blocks
static void lfs_alloc_ckpoint(lfs_t *lfs) {
 800defa:	b480      	push	{r7}
 800defc:	b083      	sub	sp, #12
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
    lfs->lookahead.ckpoint = lfs->block_count;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800df0a:	bf00      	nop
 800df0c:	370c      	adds	r7, #12
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800df16:	b580      	push	{r7, lr}
 800df18:	b082      	sub	sp, #8
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
    lfs->lookahead.size = 0;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->lookahead.next = 0;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ckpoint(lfs);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7ff ffe5 	bl	800defa <lfs_alloc_ckpoint>
}
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->lookahead.start)
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df4a:	683a      	ldr	r2, [r7, #0]
 800df4c:	1ad2      	subs	r2, r2, r3
            + lfs->block_count) % lfs->block_count;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df52:	4413      	add	r3, r2
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    lfs_block_t off = ((block - lfs->lookahead.start)
 800df58:	fbb3 f1f2 	udiv	r1, r3, r2
 800df5c:	fb01 f202 	mul.w	r2, r1, r2
 800df60:	1a9b      	subs	r3, r3, r2
 800df62:	60bb      	str	r3, [r7, #8]

    if (off < lfs->lookahead.size) {
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d212      	bcs.n	800df94 <lfs_alloc_lookahead+0x5c>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	08db      	lsrs	r3, r3, #3
 800df76:	441a      	add	r2, r3
 800df78:	7811      	ldrb	r1, [r2, #0]
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	f002 0207 	and.w	r2, r2, #7
 800df80:	2001      	movs	r0, #1
 800df82:	fa00 f202 	lsl.w	r2, r0, r2
 800df86:	b2d2      	uxtb	r2, r2
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800df8c:	4403      	add	r3, r0
 800df8e:	430a      	orrs	r2, r1
 800df90:	b2d2      	uxtb	r2, r2
 800df92:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	3714      	adds	r7, #20
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
	...

0800dfa4 <lfs_alloc_scan>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc_scan(lfs_t *lfs) {
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
    // move lookahead buffer to the first unused block
    //
    // note we limit the lookahead buffer to at most the amount of blocks
    // checkpointed, this prevents the math in lfs_alloc from underflowing
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfb4:	4413      	add	r3, r2
            % lfs->block_count;
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800dfba:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfbe:	fb01 f202 	mul.w	r2, r1, r2
 800dfc2:	1a9a      	subs	r2, r3, r2
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs->lookahead.next = 0;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs->lookahead.size = lfs_min(
            8*lfs->cfg->lookahead_size,
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dfd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    lfs->lookahead.size = lfs_min(
 800dfd4:	00da      	lsls	r2, r3, #3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4610      	mov	r0, r2
 800dfde:	f7fe ffb2 	bl	800cf46 <lfs_min>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	659a      	str	r2, [r3, #88]	@ 0x58
            lfs->lookahead.ckpoint);

    // find mask of free blocks from tree
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dff2:	461a      	mov	r2, r3
 800dff4:	2100      	movs	r1, #0
 800dff6:	f017 feab 	bl	8025d50 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 800dffa:	2301      	movs	r3, #1
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	4909      	ldr	r1, [pc, #36]	@ (800e024 <lfs_alloc_scan+0x80>)
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f005 fdc9 	bl	8013b98 <lfs_fs_traverse_>
 800e006:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d004      	beq.n	800e018 <lfs_alloc_scan+0x74>
        lfs_alloc_drop(lfs);
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff ff81 	bl	800df16 <lfs_alloc_drop>
        return err;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	e000      	b.n	800e01a <lfs_alloc_scan+0x76>
    }

    return 0;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	0800df39 	.word	0x0800df39

0800e028 <lfs_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
    while (true) {
        // scan our lookahead buffer for free blocks
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800e032:	e04d      	b.n	800e0d0 <lfs_alloc+0xa8>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e03c:	08db      	lsrs	r3, r3, #3
 800e03e:	4413      	add	r3, r2
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	461a      	mov	r2, r3
                    & (1U << (lfs->lookahead.next % 8)))) {
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e048:	f003 0307 	and.w	r3, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800e04c:	fa22 f303 	lsr.w	r3, r2, r3
 800e050:	f003 0301 	and.w	r3, r3, #1
 800e054:	2b00      	cmp	r3, #0
 800e056:	d131      	bne.n	800e0bc <lfs_alloc+0x94>
                // found a free block
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e060:	4413      	add	r3, r2
                        % lfs->block_count;
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800e066:	fbb3 f1f2 	udiv	r1, r3, r2
 800e06a:	fb01 f202 	mul.w	r2, r1, r2
 800e06e:	1a9a      	subs	r2, r3, r2
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	601a      	str	r2, [r3, #0]

                // eagerly find next free block to maximize how many blocks
                // lfs_alloc_ckpoint makes available for scanning
                while (true) {
                    lfs->lookahead.next += 1;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e082:	1e5a      	subs	r2, r3, #1
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	661a      	str	r2, [r3, #96]	@ 0x60

                    if (lfs->lookahead.next >= lfs->lookahead.size
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e090:	429a      	cmp	r2, r3
 800e092:	d211      	bcs.n	800e0b8 <lfs_alloc+0x90>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e09c:	08db      	lsrs	r3, r3, #3
 800e09e:	4413      	add	r3, r2
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	461a      	mov	r2, r3
                                & (1U << (lfs->lookahead.next % 8)))) {
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0a8:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 800e0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b0:	f003 0301 	and.w	r3, r3, #1
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1dd      	bne.n	800e074 <lfs_alloc+0x4c>
                        return 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	e032      	b.n	800e122 <lfs_alloc+0xfa>
                    }
                }
            }

            lfs->lookahead.next += 1;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0ca:	1e5a      	subs	r2, r3, #1
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	661a      	str	r2, [r3, #96]	@ 0x60
        while (lfs->lookahead.next < lfs->lookahead.size) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d3ab      	bcc.n	800e034 <lfs_alloc+0xc>
        // allocations with a checkpoint before starting a set of allocations.
        //
        // If we've looked at all blocks since the last checkpoint, we report
        // the filesystem as out of storage.
        //
        if (lfs->lookahead.ckpoint <= 0) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d116      	bne.n	800e112 <lfs_alloc+0xea>
            LFS_ERROR("No more free space 0x%"PRIx32,
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e0ec:	4413      	add	r3, r2
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800e0f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0f6:	fb01 f202 	mul.w	r2, r1, r2
 800e0fa:	1a9b      	subs	r3, r3, r2
 800e0fc:	4a0b      	ldr	r2, [pc, #44]	@ (800e12c <lfs_alloc+0x104>)
 800e0fe:	9200      	str	r2, [sp, #0]
 800e100:	f240 22b1 	movw	r2, #689	@ 0x2b1
 800e104:	490a      	ldr	r1, [pc, #40]	@ (800e130 <lfs_alloc+0x108>)
 800e106:	480b      	ldr	r0, [pc, #44]	@ (800e134 <lfs_alloc+0x10c>)
 800e108:	f015 f902 	bl	8023310 <printf>
                    (lfs->lookahead.start + lfs->lookahead.next)
                        % lfs->block_count);
            return LFS_ERR_NOSPC;
 800e10c:	f06f 031b 	mvn.w	r3, #27
 800e110:	e007      	b.n	800e122 <lfs_alloc+0xfa>
        }

        // No blocks in our lookahead buffer, we need to scan the filesystem for
        // unused blocks in the next lookahead window.
        int err = lfs_alloc_scan(lfs);
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7ff ff46 	bl	800dfa4 <lfs_alloc_scan>
 800e118:	60f8      	str	r0, [r7, #12]
        if(err) {
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d088      	beq.n	800e032 <lfs_alloc+0xa>
            return err;
 800e120:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	08030968 	.word	0x08030968
 800e130:	08030840 	.word	0x08030840
 800e134:	0803093c 	.word	0x0803093c

0800e138 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b08f      	sub	sp, #60	@ 0x3c
 800e13c:	af04      	add	r7, sp, #16
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
 800e144:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800e152:	2300      	movs	r3, #0
 800e154:	623b      	str	r3, [r7, #32]

    // synthetic moves
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	333c      	adds	r3, #60	@ 0x3c
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	4611      	mov	r1, r2
 800e15e:	4618      	mov	r0, r3
 800e160:	f7ff fd20 	bl	800dba4 <lfs_gstate_hasmovehere>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	f000 80ca 	beq.w	800e300 <lfs_dir_getslice+0x1c8>
            lfs_tag_id(gmask) != 0) {
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff fc5d 	bl	800da2c <lfs_tag_id>
 800e172:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800e174:	2b00      	cmp	r3, #0
 800e176:	f000 80c3 	beq.w	800e300 <lfs_dir_getslice+0x1c8>
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e17e:	4618      	mov	r0, r3
 800e180:	f7ff fc54 	bl	800da2c <lfs_tag_id>
 800e184:	4603      	mov	r3, r0
 800e186:	461c      	mov	r4, r3
 800e188:	6838      	ldr	r0, [r7, #0]
 800e18a:	f7ff fc4f 	bl	800da2c <lfs_tag_id>
 800e18e:	4603      	mov	r3, r0
 800e190:	429c      	cmp	r4, r3
 800e192:	d102      	bne.n	800e19a <lfs_dir_getslice+0x62>
            return LFS_ERR_NOENT;
 800e194:	f06f 0301 	mvn.w	r3, #1
 800e198:	e0be      	b.n	800e318 <lfs_dir_getslice+0x1e0>
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff fc44 	bl	800da2c <lfs_tag_id>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	461c      	mov	r4, r3
 800e1a8:	6838      	ldr	r0, [r7, #0]
 800e1aa:	f7ff fc3f 	bl	800da2c <lfs_tag_id>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	429c      	cmp	r4, r3
 800e1b2:	f080 80a5 	bcs.w	800e300 <lfs_dir_getslice+0x1c8>
            gdiff -= LFS_MKTAG(0, 1, 0);
 800e1b6:	6a3b      	ldr	r3, [r7, #32]
 800e1b8:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800e1bc:	623b      	str	r3, [r7, #32]
        }
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800e1be:	e09f      	b.n	800e300 <lfs_dir_getslice+0x1c8>
        off -= lfs_tag_dsize(ntag);
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff fc4f 	bl	800da66 <lfs_tag_dsize>
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1cc:	1a9b      	subs	r3, r3, r2
 800e1ce:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800e1d4:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800e1da:	2204      	movs	r2, #4
 800e1dc:	9203      	str	r2, [sp, #12]
 800e1de:	f107 0210 	add.w	r2, r7, #16
 800e1e2:	9202      	str	r2, [sp, #8]
 800e1e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1e6:	9201      	str	r2, [sp, #4]
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	2304      	movs	r3, #4
 800e1ec:	460a      	mov	r2, r1
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7fe ff83 	bl	800d0fc <lfs_bd_read>
 800e1f6:	61b8      	str	r0, [r7, #24]
        if (err) {
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <lfs_dir_getslice+0xca>
            return err;
 800e1fe:	69bb      	ldr	r3, [r7, #24]
 800e200:	e08a      	b.n	800e318 <lfs_dir_getslice+0x1e0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	4618      	mov	r0, r3
 800e206:	f7fe ff25 	bl	800d054 <lfs_frombe32>
 800e20a:	4602      	mov	r2, r0
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	4053      	eors	r3, r2
 800e210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e214:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7ff fc08 	bl	800da2c <lfs_tag_id>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d02b      	beq.n	800e27a <lfs_dir_getslice+0x142>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e222:	69f8      	ldr	r0, [r7, #28]
 800e224:	f7ff fbb8 	bl	800d998 <lfs_tag_type1>
 800e228:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800e22a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e22e:	d124      	bne.n	800e27a <lfs_dir_getslice+0x142>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800e230:	69f8      	ldr	r0, [r7, #28]
 800e232:	f7ff fbfb 	bl	800da2c <lfs_tag_id>
 800e236:	4603      	mov	r3, r0
 800e238:	461c      	mov	r4, r3
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	1ad3      	subs	r3, r2, r3
 800e240:	4618      	mov	r0, r3
 800e242:	f7ff fbf3 	bl	800da2c <lfs_tag_id>
 800e246:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e248:	429c      	cmp	r4, r3
 800e24a:	d816      	bhi.n	800e27a <lfs_dir_getslice+0x142>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	1ad2      	subs	r2, r2, r3
 800e252:	4b33      	ldr	r3, [pc, #204]	@ (800e320 <lfs_dir_getslice+0x1e8>)
 800e254:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800e256:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e25a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e25e:	69fa      	ldr	r2, [r7, #28]
 800e260:	429a      	cmp	r2, r3
 800e262:	d102      	bne.n	800e26a <lfs_dir_getslice+0x132>
                // found where we were created
                return LFS_ERR_NOENT;
 800e264:	f06f 0301 	mvn.w	r3, #1
 800e268:	e056      	b.n	800e318 <lfs_dir_getslice+0x1e0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800e26a:	69f8      	ldr	r0, [r7, #28]
 800e26c:	f7ff fbd1 	bl	800da12 <lfs_tag_splice>
 800e270:	4603      	mov	r3, r0
 800e272:	029a      	lsls	r2, r3, #10
 800e274:	6a3b      	ldr	r3, [r7, #32]
 800e276:	4413      	add	r3, r2
 800e278:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	401a      	ands	r2, r3
 800e280:	6a3b      	ldr	r3, [r7, #32]
 800e282:	6839      	ldr	r1, [r7, #0]
 800e284:	1ac9      	subs	r1, r1, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	400b      	ands	r3, r1
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d138      	bne.n	800e300 <lfs_dir_getslice+0x1c8>
            if (lfs_tag_isdelete(tag)) {
 800e28e:	69f8      	ldr	r0, [r7, #28]
 800e290:	f7ff fb6f 	bl	800d972 <lfs_tag_isdelete>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <lfs_dir_getslice+0x168>
                return LFS_ERR_NOENT;
 800e29a:	f06f 0301 	mvn.w	r3, #1
 800e29e:	e03b      	b.n	800e318 <lfs_dir_getslice+0x1e0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800e2a0:	69f8      	ldr	r0, [r7, #28]
 800e2a2:	f7ff fbd3 	bl	800da4c <lfs_tag_size>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fe fe4b 	bl	800cf46 <lfs_min>
 800e2b0:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800e2b2:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2bc:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800e2be:	3204      	adds	r2, #4
 800e2c0:	6979      	ldr	r1, [r7, #20]
 800e2c2:	9103      	str	r1, [sp, #12]
 800e2c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e2c6:	9102      	str	r1, [sp, #8]
 800e2c8:	9201      	str	r2, [sp, #4]
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	68f8      	ldr	r0, [r7, #12]
 800e2d4:	f7fe ff12 	bl	800d0fc <lfs_bd_read>
 800e2d8:	61b8      	str	r0, [r7, #24]
            if (err) {
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d001      	beq.n	800e2e4 <lfs_dir_getslice+0x1ac>
                return err;
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	e019      	b.n	800e318 <lfs_dir_getslice+0x1e0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800e2e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	18d0      	adds	r0, r2, r3
 800e2ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	f017 fd2c 	bl	8025d50 <memset>

            return tag + gdiff;
 800e2f8:	6a3a      	ldr	r2, [r7, #32]
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	4413      	add	r3, r2
 800e2fe:	e00b      	b.n	800e318 <lfs_dir_getslice+0x1e0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff fbaf 	bl	800da66 <lfs_tag_dsize>
 800e308:	4603      	mov	r3, r0
 800e30a:	3304      	adds	r3, #4
 800e30c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e30e:	429a      	cmp	r2, r3
 800e310:	f4bf af56 	bcs.w	800e1c0 <lfs_dir_getslice+0x88>
        }
    }

    return LFS_ERR_NOENT;
 800e314:	f06f 0301 	mvn.w	r3, #1
}
 800e318:	4618      	mov	r0, r3
 800e31a:	372c      	adds	r7, #44	@ 0x2c
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd90      	pop	{r4, r7, pc}
 800e320:	000ffc00 	.word	0x000ffc00

0800e324 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800e324:	b580      	push	{r7, lr}
 800e326:	b088      	sub	sp, #32
 800e328:	af04      	add	r7, sp, #16
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800e332:	6838      	ldr	r0, [r7, #0]
 800e334:	f7ff fb8a 	bl	800da4c <lfs_tag_size>
 800e338:	4603      	mov	r3, r0
 800e33a:	9302      	str	r3, [sp, #8]
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	9301      	str	r3, [sp, #4]
 800e340:	2300      	movs	r3, #0
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	68b9      	ldr	r1, [r7, #8]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f7ff fef4 	bl	800e138 <lfs_dir_getslice>
 800e350:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b08c      	sub	sp, #48	@ 0x30
 800e35e:	af04      	add	r7, sp, #16
 800e360:	60f8      	str	r0, [r7, #12]
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	607a      	str	r2, [r7, #4]
 800e366:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800e368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e36a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800e36c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e370:	441a      	add	r2, r3
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e378:	429a      	cmp	r2, r3
 800e37a:	f240 80c0 	bls.w	800e4fe <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800e37e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800e382:	e0c1      	b.n	800e508 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800e384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e386:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d03f      	beq.n	800e40e <lfs_dir_getread+0xb4>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f113 0f02 	cmn.w	r3, #2
 800e396:	d13a      	bne.n	800e40e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685a      	ldr	r2, [r3, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800e3a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d232      	bcs.n	800e40e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d324      	bcc.n	800e3fc <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	689a      	ldr	r2, [r3, #8]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6859      	ldr	r1, [r3, #4]
 800e3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3bc:	1acb      	subs	r3, r1, r3
 800e3be:	4413      	add	r3, r2
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	69b8      	ldr	r0, [r7, #24]
 800e3c4:	f7fe fdbf 	bl	800cf46 <lfs_min>
 800e3c8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	68da      	ldr	r2, [r3, #12]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e3d4:	1acb      	subs	r3, r1, r3
 800e3d6:	4413      	add	r3, r2
 800e3d8:	69ba      	ldr	r2, [r7, #24]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	69f8      	ldr	r0, [r7, #28]
 800e3de:	f018 fef3 	bl	80271c8 <memcpy>

                data += diff;
 800e3e2:	69fa      	ldr	r2, [r7, #28]
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e3ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800e3f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800e3fa:	e080      	b.n	800e4fe <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	685a      	ldr	r2, [r3, #4]
 800e400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	4619      	mov	r1, r3
 800e406:	69b8      	ldr	r0, [r7, #24]
 800e408:	f7fe fd9d 	bl	800cf46 <lfs_min>
 800e40c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f113 0f02 	cmn.w	r3, #2
 800e416:	d13a      	bne.n	800e48e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	685a      	ldr	r2, [r3, #4]
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800e422:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e424:	429a      	cmp	r2, r3
 800e426:	d232      	bcs.n	800e48e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e42e:	429a      	cmp	r2, r3
 800e430:	d324      	bcc.n	800e47c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	689a      	ldr	r2, [r3, #8]
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	6859      	ldr	r1, [r3, #4]
 800e43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e43c:	1acb      	subs	r3, r1, r3
 800e43e:	4413      	add	r3, r2
 800e440:	4619      	mov	r1, r3
 800e442:	69b8      	ldr	r0, [r7, #24]
 800e444:	f7fe fd7f 	bl	800cf46 <lfs_min>
 800e448:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	68da      	ldr	r2, [r3, #12]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e454:	1acb      	subs	r3, r1, r3
 800e456:	4413      	add	r3, r2
 800e458:	69ba      	ldr	r2, [r7, #24]
 800e45a:	4619      	mov	r1, r3
 800e45c:	69f8      	ldr	r0, [r7, #28]
 800e45e:	f018 feb3 	bl	80271c8 <memcpy>

                data += diff;
 800e462:	69fa      	ldr	r2, [r7, #28]
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	4413      	add	r3, r2
 800e468:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e46a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	4413      	add	r3, r2
 800e470:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 800e472:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 800e47a:	e040      	b.n	800e4fe <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e482:	1ad3      	subs	r3, r2, r3
 800e484:	4619      	mov	r1, r3
 800e486:	69b8      	ldr	r0, [r7, #24]
 800e488:	f7fe fd5d 	bl	800cf46 <lfs_min>
 800e48c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	f06f 0201 	mvn.w	r2, #1
 800e494:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e49a:	69db      	ldr	r3, [r3, #28]
 800e49c:	4619      	mov	r1, r3
 800e49e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e4a0:	f7fe fd61 	bl	800cf66 <lfs_aligndown>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800e4aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ae:	441a      	add	r2, r3
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4b4:	69db      	ldr	r3, [r3, #28]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	f7fe fd69 	bl	800cf90 <lfs_alignup>
 800e4be:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	f7fe fd3c 	bl	800cf46 <lfs_min>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800e4d8:	683a      	ldr	r2, [r7, #0]
 800e4da:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800e4dc:	6839      	ldr	r1, [r7, #0]
 800e4de:	6889      	ldr	r1, [r1, #8]
 800e4e0:	9102      	str	r1, [sp, #8]
 800e4e2:	9201      	str	r2, [sp, #4]
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4ea:	68b9      	ldr	r1, [r7, #8]
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f7ff fe23 	bl	800e138 <lfs_dir_getslice>
 800e4f2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	da01      	bge.n	800e4fe <lfs_dir_getread+0x1a4>
            return err;
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	e004      	b.n	800e508 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800e4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e500:	2b00      	cmp	r3, #0
 800e502:	f47f af3f 	bne.w	800e384 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3720      	adds	r7, #32
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800e510:	b590      	push	{r4, r7, lr}
 800e512:	b087      	sub	sp, #28
 800e514:	af00      	add	r7, sp, #0
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <lfs_dir_traverse_filter+0x1e>
 800e52a:	4b24      	ldr	r3, [pc, #144]	@ (800e5bc <lfs_dir_traverse_filter+0xac>)
 800e52c:	e000      	b.n	800e530 <lfs_dir_traverse_filter+0x20>
 800e52e:	4b24      	ldr	r3, [pc, #144]	@ (800e5c0 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800e530:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	405a      	eors	r2, r3
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	4013      	ands	r3, r2
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d014      	beq.n	800e56c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4618      	mov	r0, r3
 800e548:	f7ff fa13 	bl	800d972 <lfs_tag_isdelete>
 800e54c:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10c      	bne.n	800e56c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	4a19      	ldr	r2, [pc, #100]	@ (800e5bc <lfs_dir_traverse_filter+0xac>)
 800e556:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	6819      	ldr	r1, [r3, #0]
 800e55c:	4b19      	ldr	r3, [pc, #100]	@ (800e5c4 <lfs_dir_traverse_filter+0xb4>)
 800e55e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800e560:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800e564:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800e568:	429a      	cmp	r2, r3
 800e56a:	d104      	bne.n	800e576 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	2200      	movs	r2, #0
 800e570:	601a      	str	r2, [r3, #0]
        return true;
 800e572:	2301      	movs	r3, #1
 800e574:	e01e      	b.n	800e5b4 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e576:	68b8      	ldr	r0, [r7, #8]
 800e578:	f7ff fa0e 	bl	800d998 <lfs_tag_type1>
 800e57c:	4603      	mov	r3, r0
 800e57e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e582:	d116      	bne.n	800e5b2 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800e584:	68b8      	ldr	r0, [r7, #8]
 800e586:	f7ff fa51 	bl	800da2c <lfs_tag_id>
 800e58a:	4603      	mov	r3, r0
 800e58c:	461c      	mov	r4, r3
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4618      	mov	r0, r3
 800e594:	f7ff fa4a 	bl	800da2c <lfs_tag_id>
 800e598:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e59a:	429c      	cmp	r4, r3
 800e59c:	d809      	bhi.n	800e5b2 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800e59e:	68b8      	ldr	r0, [r7, #8]
 800e5a0:	f7ff fa37 	bl	800da12 <lfs_tag_splice>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	029a      	lsls	r2, r3, #10
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	441a      	add	r2, r3
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	601a      	str	r2, [r3, #0]
    }

    return false;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	371c      	adds	r7, #28
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd90      	pop	{r4, r7, pc}
 800e5bc:	7ffffc00 	.word	0x7ffffc00
 800e5c0:	700ffc00 	.word	0x700ffc00
 800e5c4:	000ffc00 	.word	0x000ffc00

0800e5c8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800e5c8:	b590      	push	{r4, r7, lr}
 800e5ca:	b0c1      	sub	sp, #260	@ 0x104
 800e5cc:	af04      	add	r7, sp, #16
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
 800e5d4:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    int res;

    // iterate over directory and attrs
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk = {0};
 800e5dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	605a      	str	r2, [r3, #4]
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 800e5e6:	6838      	ldr	r0, [r7, #0]
 800e5e8:	f7ff fa3d 	bl	800da66 <lfs_tag_dsize>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	441a      	add	r2, r3
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d237      	bcs.n	800e66a <lfs_dir_traverse+0xa2>
                off += lfs_tag_dsize(ptag);
 800e5fa:	6838      	ldr	r0, [r7, #0]
 800e5fc:	f7ff fa33 	bl	800da66 <lfs_tag_dsize>
 800e600:	4602      	mov	r2, r0
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	4413      	add	r3, r2
 800e606:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 800e608:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 800e60e:	2204      	movs	r2, #4
 800e610:	9203      	str	r2, [sp, #12]
 800e612:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800e616:	9202      	str	r2, [sp, #8]
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	9201      	str	r2, [sp, #4]
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	2304      	movs	r3, #4
 800e620:	460a      	mov	r2, r1
 800e622:	2100      	movs	r1, #0
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f7fe fd69 	bl	800d0fc <lfs_bd_read>
 800e62a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 800e62e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <lfs_dir_traverse+0x74>
                    return err;
 800e636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e63a:	e3a5      	b.n	800ed88 <lfs_dir_traverse+0x7c0>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800e63c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fd08 	bl	800d054 <lfs_frombe32>
 800e644:	4602      	mov	r2, r0
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	4053      	eors	r3, r2
 800e64a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e64e:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	3304      	adds	r3, #4
 800e65a:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 800e65c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800e660:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 800e664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e666:	603b      	str	r3, [r7, #0]
 800e668:	e01b      	b.n	800e6a2 <lfs_dir_traverse+0xda>
            } else if (attrcount > 0) {
 800e66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e66e:	2b00      	cmp	r3, #0
 800e670:	dd13      	ble.n	800e69a <lfs_dir_traverse+0xd2>
                tag = attrs[0].tag;
 800e672:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 800e67a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 800e684:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e688:	3308      	adds	r3, #8
 800e68a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 800e68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e692:	3b01      	subs	r3, #1
 800e694:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e698:	e003      	b.n	800e6a2 <lfs_dir_traverse+0xda>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 800e6a0:	e2a1      	b.n	800ebe6 <lfs_dir_traverse+0x61e>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800e6a2:	4b7e      	ldr	r3, [pc, #504]	@ (800e89c <lfs_dir_traverse+0x2d4>)
 800e6a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800e6a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e6aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e6ae:	405a      	eors	r2, r3
 800e6b0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800e6b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800e6b8:	400b      	ands	r3, r1
 800e6ba:	4013      	ands	r3, r2
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f040 8284 	bne.w	800ebca <lfs_dir_traverse+0x602>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 800e6c2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800e6c6:	f7ff f9b1 	bl	800da2c <lfs_tag_id>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f000 80ef 	beq.w	800e8b0 <lfs_dir_traverse+0x2e8>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 800e6d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	d906      	bls.n	800e6e8 <lfs_dir_traverse+0x120>
 800e6da:	4b71      	ldr	r3, [pc, #452]	@ (800e8a0 <lfs_dir_traverse+0x2d8>)
 800e6dc:	4a71      	ldr	r2, [pc, #452]	@ (800e8a4 <lfs_dir_traverse+0x2dc>)
 800e6de:	f240 31b6 	movw	r1, #950	@ 0x3b6
 800e6e2:	4871      	ldr	r0, [pc, #452]	@ (800e8a8 <lfs_dir_traverse+0x2e0>)
 800e6e4:	f014 fde0 	bl	80232a8 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 800e6e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e6ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	011b      	lsls	r3, r3, #4
 800e6f2:	1a9b      	subs	r3, r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	33f0      	adds	r3, #240	@ 0xf0
 800e6f8:	443b      	add	r3, r7
 800e6fa:	3b98      	subs	r3, #152	@ 0x98
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	601a      	str	r2, [r3, #0]
 800e700:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e704:	4613      	mov	r3, r2
 800e706:	011b      	lsls	r3, r3, #4
 800e708:	1a9b      	subs	r3, r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	33f0      	adds	r3, #240	@ 0xf0
 800e70e:	443b      	add	r3, r7
 800e710:	3b94      	subs	r3, #148	@ 0x94
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	601a      	str	r2, [r3, #0]
 800e716:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e71a:	4613      	mov	r3, r2
 800e71c:	011b      	lsls	r3, r3, #4
 800e71e:	1a9b      	subs	r3, r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	33f0      	adds	r3, #240	@ 0xf0
 800e724:	443b      	add	r3, r7
 800e726:	3b90      	subs	r3, #144	@ 0x90
 800e728:	683a      	ldr	r2, [r7, #0]
 800e72a:	601a      	str	r2, [r3, #0]
 800e72c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e730:	4613      	mov	r3, r2
 800e732:	011b      	lsls	r3, r3, #4
 800e734:	1a9b      	subs	r3, r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	33f0      	adds	r3, #240	@ 0xf0
 800e73a:	443b      	add	r3, r7
 800e73c:	3b8c      	subs	r3, #140	@ 0x8c
 800e73e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800e742:	601a      	str	r2, [r3, #0]
 800e744:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e748:	4613      	mov	r3, r2
 800e74a:	011b      	lsls	r3, r3, #4
 800e74c:	1a9b      	subs	r3, r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	33f0      	adds	r3, #240	@ 0xf0
 800e752:	443b      	add	r3, r7
 800e754:	3b88      	subs	r3, #136	@ 0x88
 800e756:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e75a:	601a      	str	r2, [r3, #0]
 800e75c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e760:	4613      	mov	r3, r2
 800e762:	011b      	lsls	r3, r3, #4
 800e764:	1a9b      	subs	r3, r3, r2
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	33f0      	adds	r3, #240	@ 0xf0
 800e76a:	443b      	add	r3, r7
 800e76c:	3b84      	subs	r3, #132	@ 0x84
 800e76e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e778:	4613      	mov	r3, r2
 800e77a:	011b      	lsls	r3, r3, #4
 800e77c:	1a9b      	subs	r3, r3, r2
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	33f0      	adds	r3, #240	@ 0xf0
 800e782:	443b      	add	r3, r7
 800e784:	3b80      	subs	r3, #128	@ 0x80
 800e786:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e78a:	601a      	str	r2, [r3, #0]
 800e78c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e790:	4613      	mov	r3, r2
 800e792:	011b      	lsls	r3, r3, #4
 800e794:	1a9b      	subs	r3, r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	33f0      	adds	r3, #240	@ 0xf0
 800e79a:	443b      	add	r3, r7
 800e79c:	3b7c      	subs	r3, #124	@ 0x7c
 800e79e:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800e7a2:	801a      	strh	r2, [r3, #0]
 800e7a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	011b      	lsls	r3, r3, #4
 800e7ac:	1a9b      	subs	r3, r3, r2
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	33f0      	adds	r3, #240	@ 0xf0
 800e7b2:	443b      	add	r3, r7
 800e7b4:	3b7a      	subs	r3, #122	@ 0x7a
 800e7b6:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800e7ba:	801a      	strh	r2, [r3, #0]
 800e7bc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	011b      	lsls	r3, r3, #4
 800e7c4:	1a9b      	subs	r3, r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	33f0      	adds	r3, #240	@ 0xf0
 800e7ca:	443b      	add	r3, r7
 800e7cc:	3b78      	subs	r3, #120	@ 0x78
 800e7ce:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800e7d2:	801a      	strh	r2, [r3, #0]
 800e7d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e7d8:	4613      	mov	r3, r2
 800e7da:	011b      	lsls	r3, r3, #4
 800e7dc:	1a9b      	subs	r3, r3, r2
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	33f0      	adds	r3, #240	@ 0xf0
 800e7e2:	443b      	add	r3, r7
 800e7e4:	3b74      	subs	r3, #116	@ 0x74
 800e7e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e7ea:	601a      	str	r2, [r3, #0]
 800e7ec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	011b      	lsls	r3, r3, #4
 800e7f4:	1a9b      	subs	r3, r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	33f0      	adds	r3, #240	@ 0xf0
 800e7fa:	443b      	add	r3, r7
 800e7fc:	3b70      	subs	r3, #112	@ 0x70
 800e7fe:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e802:	601a      	str	r2, [r3, #0]
 800e804:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e808:	4613      	mov	r3, r2
 800e80a:	011b      	lsls	r3, r3, #4
 800e80c:	1a9b      	subs	r3, r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	33f0      	adds	r3, #240	@ 0xf0
 800e812:	443b      	add	r3, r7
 800e814:	3b6c      	subs	r3, #108	@ 0x6c
 800e816:	6019      	str	r1, [r3, #0]
 800e818:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e81c:	4613      	mov	r3, r2
 800e81e:	011b      	lsls	r3, r3, #4
 800e820:	1a9b      	subs	r3, r3, r2
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	33f0      	adds	r3, #240	@ 0xf0
 800e826:	443b      	add	r3, r7
 800e828:	3b68      	subs	r3, #104	@ 0x68
 800e82a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e82e:	601a      	str	r2, [r3, #0]
 800e830:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e834:	4613      	mov	r3, r2
 800e836:	011b      	lsls	r3, r3, #4
 800e838:	1a9b      	subs	r3, r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	33f0      	adds	r3, #240	@ 0xf0
 800e83e:	443b      	add	r3, r7
 800e840:	3b68      	subs	r3, #104	@ 0x68
 800e842:	3304      	adds	r3, #4
 800e844:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800e848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e84c:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 800e850:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e854:	3301      	adds	r3, #1
 800e856:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 800e860:	2300      	movs	r3, #0
 800e862:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 800e878:	4b0c      	ldr	r3, [pc, #48]	@ (800e8ac <lfs_dir_traverse+0x2e4>)
 800e87a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 800e87e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e882:	1e5a      	subs	r2, r3, #1
 800e884:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e888:	4613      	mov	r3, r2
 800e88a:	011b      	lsls	r3, r3, #4
 800e88c:	1a9b      	subs	r3, r3, r2
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	3328      	adds	r3, #40	@ 0x28
 800e892:	440b      	add	r3, r1
 800e894:	3304      	adds	r3, #4
 800e896:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 800e89a:	e19d      	b.n	800ebd8 <lfs_dir_traverse+0x610>
 800e89c:	7ff00000 	.word	0x7ff00000
 800e8a0:	0803096c 	.word	0x0803096c
 800e8a4:	080342e8 	.word	0x080342e8
 800e8a8:	08030840 	.word	0x08030840
 800e8ac:	0800e511 	.word	0x0800e511
            }
        }

popped:
 800e8b0:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 800e8b2:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800e8b6:	f7ff f8b9 	bl	800da2c <lfs_tag_id>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d015      	beq.n	800e8ec <lfs_dir_traverse+0x324>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800e8c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7ff f8b2 	bl	800da2c <lfs_tag_id>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 800e8cc:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	f200 817c 	bhi.w	800ebce <lfs_dir_traverse+0x606>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800e8d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7ff f8a7 	bl	800da2c <lfs_tag_id>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	f240 8171 	bls.w	800ebce <lfs_dir_traverse+0x606>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800e8ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7ff f872 	bl	800d9d8 <lfs_tag_type3>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f43f ae75 	beq.w	800e5e6 <lfs_dir_traverse+0x1e>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800e8fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7ff f86a 	bl	800d9d8 <lfs_tag_type3>
 800e904:	4603      	mov	r3, r0
 800e906:	461a      	mov	r2, r3
 800e908:	f240 1301 	movw	r3, #257	@ 0x101
 800e90c:	429a      	cmp	r2, r3
 800e90e:	f040 80e0 	bne.w	800ead2 <lfs_dir_traverse+0x50a>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 800e912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e916:	4ab1      	ldr	r2, [pc, #708]	@ (800ebdc <lfs_dir_traverse+0x614>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	f000 815a 	beq.w	800ebd2 <lfs_dir_traverse+0x60a>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 800e91e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e922:	4613      	mov	r3, r2
 800e924:	011b      	lsls	r3, r3, #4
 800e926:	1a9b      	subs	r3, r3, r2
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	33f0      	adds	r3, #240	@ 0xf0
 800e92c:	443b      	add	r3, r7
 800e92e:	3b98      	subs	r3, #152	@ 0x98
 800e930:	4618      	mov	r0, r3
 800e932:	233c      	movs	r3, #60	@ 0x3c
 800e934:	461a      	mov	r2, r3
 800e936:	2100      	movs	r1, #0
 800e938:	f017 fa0a 	bl	8025d50 <memset>
 800e93c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e940:	4613      	mov	r3, r2
 800e942:	011b      	lsls	r3, r3, #4
 800e944:	1a9b      	subs	r3, r3, r2
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	33f0      	adds	r3, #240	@ 0xf0
 800e94a:	443b      	add	r3, r7
 800e94c:	3b98      	subs	r3, #152	@ 0x98
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e956:	4613      	mov	r3, r2
 800e958:	011b      	lsls	r3, r3, #4
 800e95a:	1a9b      	subs	r3, r3, r2
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	33f0      	adds	r3, #240	@ 0xf0
 800e960:	443b      	add	r3, r7
 800e962:	3b94      	subs	r3, #148	@ 0x94
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	601a      	str	r2, [r3, #0]
 800e968:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e96c:	4613      	mov	r3, r2
 800e96e:	011b      	lsls	r3, r3, #4
 800e970:	1a9b      	subs	r3, r3, r2
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	33f0      	adds	r3, #240	@ 0xf0
 800e976:	443b      	add	r3, r7
 800e978:	3b90      	subs	r3, #144	@ 0x90
 800e97a:	683a      	ldr	r2, [r7, #0]
 800e97c:	601a      	str	r2, [r3, #0]
 800e97e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e982:	4613      	mov	r3, r2
 800e984:	011b      	lsls	r3, r3, #4
 800e986:	1a9b      	subs	r3, r3, r2
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	33f0      	adds	r3, #240	@ 0xf0
 800e98c:	443b      	add	r3, r7
 800e98e:	3b8c      	subs	r3, #140	@ 0x8c
 800e990:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800e994:	601a      	str	r2, [r3, #0]
 800e996:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e99a:	4613      	mov	r3, r2
 800e99c:	011b      	lsls	r3, r3, #4
 800e99e:	1a9b      	subs	r3, r3, r2
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	33f0      	adds	r3, #240	@ 0xf0
 800e9a4:	443b      	add	r3, r7
 800e9a6:	3b88      	subs	r3, #136	@ 0x88
 800e9a8:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800e9ac:	601a      	str	r2, [r3, #0]
 800e9ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	011b      	lsls	r3, r3, #4
 800e9b6:	1a9b      	subs	r3, r3, r2
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	33f0      	adds	r3, #240	@ 0xf0
 800e9bc:	443b      	add	r3, r7
 800e9be:	3b84      	subs	r3, #132	@ 0x84
 800e9c0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	011b      	lsls	r3, r3, #4
 800e9ce:	1a9b      	subs	r3, r3, r2
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	33f0      	adds	r3, #240	@ 0xf0
 800e9d4:	443b      	add	r3, r7
 800e9d6:	3b80      	subs	r3, #128	@ 0x80
 800e9d8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800e9dc:	601a      	str	r2, [r3, #0]
 800e9de:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	011b      	lsls	r3, r3, #4
 800e9e6:	1a9b      	subs	r3, r3, r2
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	33f0      	adds	r3, #240	@ 0xf0
 800e9ec:	443b      	add	r3, r7
 800e9ee:	3b7c      	subs	r3, #124	@ 0x7c
 800e9f0:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 800e9f4:	801a      	strh	r2, [r3, #0]
 800e9f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	011b      	lsls	r3, r3, #4
 800e9fe:	1a9b      	subs	r3, r3, r2
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	33f0      	adds	r3, #240	@ 0xf0
 800ea04:	443b      	add	r3, r7
 800ea06:	3b7a      	subs	r3, #122	@ 0x7a
 800ea08:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 800ea0c:	801a      	strh	r2, [r3, #0]
 800ea0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ea12:	4613      	mov	r3, r2
 800ea14:	011b      	lsls	r3, r3, #4
 800ea16:	1a9b      	subs	r3, r3, r2
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	33f0      	adds	r3, #240	@ 0xf0
 800ea1c:	443b      	add	r3, r7
 800ea1e:	3b78      	subs	r3, #120	@ 0x78
 800ea20:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 800ea24:	801a      	strh	r2, [r3, #0]
 800ea26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	011b      	lsls	r3, r3, #4
 800ea2e:	1a9b      	subs	r3, r3, r2
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	33f0      	adds	r3, #240	@ 0xf0
 800ea34:	443b      	add	r3, r7
 800ea36:	3b74      	subs	r3, #116	@ 0x74
 800ea38:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800ea3c:	601a      	str	r2, [r3, #0]
 800ea3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ea42:	4613      	mov	r3, r2
 800ea44:	011b      	lsls	r3, r3, #4
 800ea46:	1a9b      	subs	r3, r3, r2
 800ea48:	009b      	lsls	r3, r3, #2
 800ea4a:	33f0      	adds	r3, #240	@ 0xf0
 800ea4c:	443b      	add	r3, r7
 800ea4e:	3b70      	subs	r3, #112	@ 0x70
 800ea50:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800ea54:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 800ea56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 800ea60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fe fff2 	bl	800da4c <lfs_tag_size>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 800ea6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fe ffdb 	bl	800da2c <lfs_tag_id>
 800ea76:	4603      	mov	r3, r0
 800ea78:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 800ea7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea80:	60bb      	str	r3, [r7, #8]
            off = 0;
 800ea82:	2300      	movs	r3, #0
 800ea84:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 800ea86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea8a:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 800ea98:	4b51      	ldr	r3, [pc, #324]	@ (800ebe0 <lfs_dir_traverse+0x618>)
 800ea9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 800ea9e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800eaa2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 800eaa6:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800eaaa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 800eaae:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800eab2:	3301      	adds	r3, #1
 800eab4:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 800eab8:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 800eabc:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 800eac8:	4413      	add	r3, r2
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 800ead0:	e589      	b.n	800e5e6 <lfs_dir_traverse+0x1e>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800ead2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fe ff7f 	bl	800d9d8 <lfs_tag_type3>
 800eada:	4603      	mov	r3, r0
 800eadc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800eae0:	d159      	bne.n	800eb96 <lfs_dir_traverse+0x5ce>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800eae2:	2300      	movs	r3, #0
 800eae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eae8:	e04b      	b.n	800eb82 <lfs_dir_traverse+0x5ba>
                const struct lfs_attr *a = buffer;
 800eaea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800eaf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	005b      	lsls	r3, r3, #1
 800eafa:	4413      	add	r3, r2
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	461a      	mov	r2, r3
 800eb00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb04:	4413      	add	r3, r2
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800eb0c:	051c      	lsls	r4, r3, #20
 800eb0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe ff8b 	bl	800da2c <lfs_tag_id>
 800eb16:	4603      	mov	r3, r0
 800eb18:	461a      	mov	r2, r3
 800eb1a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800eb1e:	4413      	add	r3, r2
 800eb20:	029b      	lsls	r3, r3, #10
 800eb22:	ea44 0103 	orr.w	r1, r4, r3
 800eb26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	005b      	lsls	r3, r3, #1
 800eb2e:	4413      	add	r3, r2
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	461a      	mov	r2, r3
 800eb34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb38:	4413      	add	r3, r2
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800eb3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800eb42:	4613      	mov	r3, r2
 800eb44:	005b      	lsls	r3, r3, #1
 800eb46:	4413      	add	r3, r2
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb50:	4413      	add	r3, r2
 800eb52:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800eb54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800eb58:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800eb5c:	4798      	blx	r3
 800eb5e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 800eb62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	da02      	bge.n	800eb70 <lfs_dir_traverse+0x5a8>
                    return res;
 800eb6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800eb6e:	e10b      	b.n	800ed88 <lfs_dir_traverse+0x7c0>
                }

                if (res) {
 800eb70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d12e      	bne.n	800ebd6 <lfs_dir_traverse+0x60e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800eb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eb82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb84:	4618      	mov	r0, r3
 800eb86:	f7fe ff61 	bl	800da4c <lfs_tag_size>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d3aa      	bcc.n	800eaea <lfs_dir_traverse+0x522>
 800eb94:	e527      	b.n	800e5e6 <lfs_dir_traverse+0x1e>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800eb96:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 800eb9a:	029a      	lsls	r2, r3, #10
 800eb9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb9e:	18d1      	adds	r1, r2, r3
 800eba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800eba4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eba8:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800ebac:	4798      	blx	r3
 800ebae:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 800ebb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	da02      	bge.n	800ebc0 <lfs_dir_traverse+0x5f8>
                return res;
 800ebba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ebbe:	e0e3      	b.n	800ed88 <lfs_dir_traverse+0x7c0>
            }

            if (res) {
 800ebc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10d      	bne.n	800ebe4 <lfs_dir_traverse+0x61c>
 800ebc8:	e50d      	b.n	800e5e6 <lfs_dir_traverse+0x1e>
                continue;
 800ebca:	bf00      	nop
 800ebcc:	e50b      	b.n	800e5e6 <lfs_dir_traverse+0x1e>
            continue;
 800ebce:	bf00      	nop
 800ebd0:	e509      	b.n	800e5e6 <lfs_dir_traverse+0x1e>
                continue;
 800ebd2:	bf00      	nop
 800ebd4:	e507      	b.n	800e5e6 <lfs_dir_traverse+0x1e>
                    break;
 800ebd6:	bf00      	nop
        {
 800ebd8:	e505      	b.n	800e5e6 <lfs_dir_traverse+0x1e>
 800ebda:	bf00      	nop
 800ebdc:	0800e511 	.word	0x0800e511
 800ebe0:	600ffc00 	.word	0x600ffc00
                break;
 800ebe4:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 800ebe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f000 80ca 	beq.w	800ed84 <lfs_dir_traverse+0x7bc>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 800ebf0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ebf4:	1e5a      	subs	r2, r3, #1
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	011b      	lsls	r3, r3, #4
 800ebfa:	1a9b      	subs	r3, r3, r2
 800ebfc:	009b      	lsls	r3, r3, #2
 800ebfe:	33f0      	adds	r3, #240	@ 0xf0
 800ec00:	443b      	add	r3, r7
 800ec02:	3b98      	subs	r3, #152	@ 0x98
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 800ec08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec0c:	1e5a      	subs	r2, r3, #1
 800ec0e:	4613      	mov	r3, r2
 800ec10:	011b      	lsls	r3, r3, #4
 800ec12:	1a9b      	subs	r3, r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	33f0      	adds	r3, #240	@ 0xf0
 800ec18:	443b      	add	r3, r7
 800ec1a:	3b94      	subs	r3, #148	@ 0x94
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 800ec20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec24:	1e5a      	subs	r2, r3, #1
 800ec26:	4613      	mov	r3, r2
 800ec28:	011b      	lsls	r3, r3, #4
 800ec2a:	1a9b      	subs	r3, r3, r2
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	33f0      	adds	r3, #240	@ 0xf0
 800ec30:	443b      	add	r3, r7
 800ec32:	3b90      	subs	r3, #144	@ 0x90
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 800ec38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec3c:	1e5a      	subs	r2, r3, #1
 800ec3e:	4613      	mov	r3, r2
 800ec40:	011b      	lsls	r3, r3, #4
 800ec42:	1a9b      	subs	r3, r3, r2
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	33f0      	adds	r3, #240	@ 0xf0
 800ec48:	443b      	add	r3, r7
 800ec4a:	3b8c      	subs	r3, #140	@ 0x8c
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 800ec52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec56:	1e5a      	subs	r2, r3, #1
 800ec58:	4613      	mov	r3, r2
 800ec5a:	011b      	lsls	r3, r3, #4
 800ec5c:	1a9b      	subs	r3, r3, r2
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	33f0      	adds	r3, #240	@ 0xf0
 800ec62:	443b      	add	r3, r7
 800ec64:	3b88      	subs	r3, #136	@ 0x88
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 800ec6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec70:	1e5a      	subs	r2, r3, #1
 800ec72:	4613      	mov	r3, r2
 800ec74:	011b      	lsls	r3, r3, #4
 800ec76:	1a9b      	subs	r3, r3, r2
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	33f0      	adds	r3, #240	@ 0xf0
 800ec7c:	443b      	add	r3, r7
 800ec7e:	3b84      	subs	r3, #132	@ 0x84
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 800ec86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ec8a:	1e5a      	subs	r2, r3, #1
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	011b      	lsls	r3, r3, #4
 800ec90:	1a9b      	subs	r3, r3, r2
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	33f0      	adds	r3, #240	@ 0xf0
 800ec96:	443b      	add	r3, r7
 800ec98:	3b80      	subs	r3, #128	@ 0x80
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 800eca0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800eca4:	1e5a      	subs	r2, r3, #1
 800eca6:	4613      	mov	r3, r2
 800eca8:	011b      	lsls	r3, r3, #4
 800ecaa:	1a9b      	subs	r3, r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	33f0      	adds	r3, #240	@ 0xf0
 800ecb0:	443b      	add	r3, r7
 800ecb2:	3b7c      	subs	r3, #124	@ 0x7c
 800ecb4:	881b      	ldrh	r3, [r3, #0]
 800ecb6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 800ecba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecbe:	1e5a      	subs	r2, r3, #1
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	011b      	lsls	r3, r3, #4
 800ecc4:	1a9b      	subs	r3, r3, r2
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	33f0      	adds	r3, #240	@ 0xf0
 800ecca:	443b      	add	r3, r7
 800eccc:	3b7a      	subs	r3, #122	@ 0x7a
 800ecce:	881b      	ldrh	r3, [r3, #0]
 800ecd0:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 800ecd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecd8:	1e5a      	subs	r2, r3, #1
 800ecda:	4613      	mov	r3, r2
 800ecdc:	011b      	lsls	r3, r3, #4
 800ecde:	1a9b      	subs	r3, r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	33f0      	adds	r3, #240	@ 0xf0
 800ece4:	443b      	add	r3, r7
 800ece6:	3b78      	subs	r3, #120	@ 0x78
 800ece8:	881b      	ldrh	r3, [r3, #0]
 800ecea:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 800ecee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ecf2:	1e5a      	subs	r2, r3, #1
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	011b      	lsls	r3, r3, #4
 800ecf8:	1a9b      	subs	r3, r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	33f0      	adds	r3, #240	@ 0xf0
 800ecfe:	443b      	add	r3, r7
 800ed00:	3b74      	subs	r3, #116	@ 0x74
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 800ed08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed0c:	1e5a      	subs	r2, r3, #1
 800ed0e:	4613      	mov	r3, r2
 800ed10:	011b      	lsls	r3, r3, #4
 800ed12:	1a9b      	subs	r3, r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	33f0      	adds	r3, #240	@ 0xf0
 800ed18:	443b      	add	r3, r7
 800ed1a:	3b70      	subs	r3, #112	@ 0x70
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 800ed22:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed26:	1e5a      	subs	r2, r3, #1
 800ed28:	4613      	mov	r3, r2
 800ed2a:	011b      	lsls	r3, r3, #4
 800ed2c:	1a9b      	subs	r3, r3, r2
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	33f0      	adds	r3, #240	@ 0xf0
 800ed32:	443b      	add	r3, r7
 800ed34:	3b6c      	subs	r3, #108	@ 0x6c
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 800ed3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed3e:	1e5a      	subs	r2, r3, #1
 800ed40:	4613      	mov	r3, r2
 800ed42:	011b      	lsls	r3, r3, #4
 800ed44:	1a9b      	subs	r3, r3, r2
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	33f0      	adds	r3, #240	@ 0xf0
 800ed4a:	443b      	add	r3, r7
 800ed4c:	3b68      	subs	r3, #104	@ 0x68
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 800ed54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed58:	1e5a      	subs	r2, r3, #1
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	011b      	lsls	r3, r3, #4
 800ed5e:	1a9b      	subs	r3, r3, r2
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	33f0      	adds	r3, #240	@ 0xf0
 800ed64:	443b      	add	r3, r7
 800ed66:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 800ed6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ed6e:	3204      	adds	r2, #4
 800ed70:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed74:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 800ed78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 800ed82:	e596      	b.n	800e8b2 <lfs_dir_traverse+0x2ea>
    } else {
        return res;
 800ed84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	37f4      	adds	r7, #244	@ 0xf4
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd90      	pop	{r4, r7, pc}

0800ed90 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800ed90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed92:	b0a5      	sub	sp, #148	@ 0x94
 800ed94:	af04      	add	r7, sp, #16
 800ed96:	6178      	str	r0, [r7, #20]
 800ed98:	6139      	str	r1, [r7, #16]
 800ed9a:	60fa      	str	r2, [r7, #12]
 800ed9c:	60bb      	str	r3, [r7, #8]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eda2:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (lfs->block_count 
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00f      	beq.n	800edcc <lfs_dir_fetchmatch+0x3c>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d206      	bcs.n	800edc6 <lfs_dir_fetchmatch+0x36>
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	3304      	adds	r3, #4
 800edbc:	681a      	ldr	r2, [r3, #0]
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d302      	bcc.n	800edcc <lfs_dir_fetchmatch+0x3c>
        return LFS_ERR_CORRUPT;
 800edc6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800edca:	e3a4      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800edcc:	2300      	movs	r3, #0
 800edce:	647b      	str	r3, [r7, #68]	@ 0x44
 800edd0:	2300      	movs	r3, #0
 800edd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    int r = 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800edd8:	2300      	movs	r3, #0
 800edda:	677b      	str	r3, [r7, #116]	@ 0x74
 800eddc:	e05a      	b.n	800ee94 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 800edde:	6978      	ldr	r0, [r7, #20]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800ede0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	68fa      	ldr	r2, [r7, #12]
 800ede6:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800ede8:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800edea:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800edee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800edf0:	0092      	lsls	r2, r2, #2
 800edf2:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800edf4:	2104      	movs	r1, #4
 800edf6:	9103      	str	r1, [sp, #12]
 800edf8:	9202      	str	r2, [sp, #8]
 800edfa:	2200      	movs	r2, #0
 800edfc:	9201      	str	r2, [sp, #4]
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	2304      	movs	r3, #4
 800ee02:	4602      	mov	r2, r0
 800ee04:	2100      	movs	r1, #0
 800ee06:	6978      	ldr	r0, [r7, #20]
 800ee08:	f7fe f978 	bl	800d0fc <lfs_bd_read>
 800ee0c:	64f8      	str	r0, [r7, #76]	@ 0x4c
        revs[i] = lfs_fromle32(revs[i]);
 800ee0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	3378      	adds	r3, #120	@ 0x78
 800ee14:	f107 0208 	add.w	r2, r7, #8
 800ee18:	4413      	add	r3, r2
 800ee1a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fe f901 	bl	800d026 <lfs_fromle32>
 800ee24:	4602      	mov	r2, r0
 800ee26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	3378      	adds	r3, #120	@ 0x78
 800ee2c:	f107 0108 	add.w	r1, r7, #8
 800ee30:	440b      	add	r3, r1
 800ee32:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800ee36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d005      	beq.n	800ee48 <lfs_dir_fetchmatch+0xb8>
 800ee3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee3e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ee42:	d001      	beq.n	800ee48 <lfs_dir_fetchmatch+0xb8>
            return err;
 800ee44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee46:	e366      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
        }

        if (err != LFS_ERR_CORRUPT &&
 800ee48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee4a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800ee4e:	d01e      	beq.n	800ee8e <lfs_dir_fetchmatch+0xfe>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800ee50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	3378      	adds	r3, #120	@ 0x78
 800ee56:	f107 0208 	add.w	r2, r7, #8
 800ee5a:	4413      	add	r3, r2
 800ee5c:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800ee60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee62:	3301      	adds	r3, #1
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	bfb8      	it	lt
 800ee6c:	425b      	neglt	r3, r3
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	3378      	adds	r3, #120	@ 0x78
 800ee72:	f107 0108 	add.w	r1, r7, #8
 800ee76:	440b      	add	r3, r1
 800ee78:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4610      	mov	r0, r2
 800ee80:	f7fe f8c3 	bl	800d00a <lfs_scmp>
 800ee84:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	dd01      	ble.n	800ee8e <lfs_dir_fetchmatch+0xfe>
            r = i;
 800ee8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee8c:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0; i < 2; i++) {
 800ee8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee90:	3301      	adds	r3, #1
 800ee92:	677b      	str	r3, [r7, #116]	@ 0x74
 800ee94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	dda1      	ble.n	800edde <lfs_dir_fetchmatch+0x4e>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800ee9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f003 0301 	and.w	r3, r3, #1
 800eea2:	bfb8      	it	lt
 800eea4:	425b      	neglt	r3, r3
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	4413      	add	r3, r2
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800eeb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f003 0301 	and.w	r3, r3, #1
 800eebc:	bfb8      	it	lt
 800eebe:	425b      	neglt	r3, r3
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	4413      	add	r3, r2
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800eecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eece:	2b00      	cmp	r3, #0
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	bfb8      	it	lt
 800eed6:	425b      	neglt	r3, r3
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	3378      	adds	r3, #120	@ 0x78
 800eedc:	f107 0208 	add.w	r2, r7, #8
 800eee0:	4413      	add	r3, r2
 800eee2:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	2200      	movs	r2, #0
 800eeee:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800eef0:	2300      	movs	r3, #0
 800eef2:	673b      	str	r3, [r7, #112]	@ 0x70
 800eef4:	e2fb      	b.n	800f4ee <lfs_dir_fetchmatch+0x75e>
        lfs_off_t off = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
        lfs_tag_t ptag = 0xffffffff;
 800eefa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eefe:	66bb      	str	r3, [r7, #104]	@ 0x68

        uint16_t tempcount = 0;
 800ef00:	2300      	movs	r3, #0
 800ef02:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800ef06:	4aa9      	ldr	r2, [pc, #676]	@ (800f1ac <lfs_dir_fetchmatch+0x41c>)
 800ef08:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ef0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef10:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800ef14:	2300      	movs	r3, #0
 800ef16:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        lfs_stag_t tempbesttag = besttag;
 800ef1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ef1c:	663b      	str	r3, [r7, #96]	@ 0x60

        // assume not erased until proven otherwise
        bool maybeerased = false;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        bool hasfcrc = false;
 800ef24:	2300      	movs	r3, #0
 800ef26:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        struct lfs_fcrc fcrc;

        dir->rev = lfs_tole32(dir->rev);
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fe f884 	bl	800d03c <lfs_tole32>
 800ef34:	4602      	mov	r2, r0
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	3308      	adds	r3, #8
 800ef3e:	2204      	movs	r2, #4
 800ef40:	4619      	mov	r1, r3
 800ef42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef46:	f005 fef5 	bl	8014d34 <lfs_crc>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	633b      	str	r3, [r7, #48]	@ 0x30
        dir->rev = lfs_fromle32(dir->rev);
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fe f867 	bl	800d026 <lfs_fromle32>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800ef5e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ef60:	f7fe fd81 	bl	800da66 <lfs_tag_dsize>
 800ef64:	4602      	mov	r2, r0
 800ef66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ef68:	4413      	add	r3, r2
 800ef6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            int err = lfs_bd_read(lfs,
 800ef6c:	6979      	ldr	r1, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ef72:	6a58      	ldr	r0, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2204      	movs	r2, #4
 800ef7a:	9203      	str	r2, [sp, #12]
 800ef7c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ef80:	9202      	str	r2, [sp, #8]
 800ef82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef84:	9201      	str	r2, [sp, #4]
 800ef86:	9300      	str	r3, [sp, #0]
 800ef88:	4603      	mov	r3, r0
 800ef8a:	460a      	mov	r2, r1
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	6978      	ldr	r0, [r7, #20]
 800ef90:	f7fe f8b4 	bl	800d0fc <lfs_bd_read>
 800ef94:	65b8      	str	r0, [r7, #88]	@ 0x58
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800ef96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d006      	beq.n	800efaa <lfs_dir_fetchmatch+0x21a>
                if (err == LFS_ERR_CORRUPT) {
 800ef9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef9e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800efa2:	f000 81d6 	beq.w	800f352 <lfs_dir_fetchmatch+0x5c2>
                    // can't continue?
                    break;
                }
                return err;
 800efa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800efa8:	e2b5      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800efaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efac:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800efb0:	2204      	movs	r2, #4
 800efb2:	4618      	mov	r0, r3
 800efb4:	f005 febe 	bl	8014d34 <lfs_crc>
 800efb8:	4603      	mov	r3, r0
 800efba:	633b      	str	r3, [r7, #48]	@ 0x30
            tag = lfs_frombe32(tag) ^ ptag;
 800efbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fe f848 	bl	800d054 <lfs_frombe32>
 800efc4:	4602      	mov	r2, r0
 800efc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800efc8:	4053      	eors	r3, r2
 800efca:	62fb      	str	r3, [r7, #44]	@ 0x2c

            // next commit not yet programmed?
            if (!lfs_tag_isvalid(tag)) {
 800efcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fe fcc1 	bl	800d956 <lfs_tag_isvalid>
 800efd4:	4603      	mov	r3, r0
 800efd6:	f083 0301 	eor.w	r3, r3, #1
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00b      	beq.n	800eff8 <lfs_dir_fetchmatch+0x268>
                // we only might be erased if the last tag was a crc
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 800efe0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800efe2:	f7fe fce9 	bl	800d9b8 <lfs_tag_type2>
 800efe6:	4603      	mov	r3, r0
 800efe8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800efec:	bf0c      	ite	eq
 800efee:	2301      	moveq	r3, #1
 800eff0:	2300      	movne	r3, #0
 800eff2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                break;
 800eff6:	e1bb      	b.n	800f370 <lfs_dir_fetchmatch+0x5e0>
            // out of range?
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800eff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe fd33 	bl	800da66 <lfs_tag_dsize>
 800f000:	4602      	mov	r2, r0
 800f002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f004:	441a      	add	r2, r3
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f00c:	429a      	cmp	r2, r3
 800f00e:	f200 81a2 	bhi.w	800f356 <lfs_dir_fetchmatch+0x5c6>
                break;
            }

            ptag = tag;
 800f012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f014:	66bb      	str	r3, [r7, #104]	@ 0x68

            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 800f016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fe fccd 	bl	800d9b8 <lfs_tag_type2>
 800f01e:	4603      	mov	r3, r0
 800f020:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800f024:	d15e      	bne.n	800f0e4 <lfs_dir_fetchmatch+0x354>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800f026:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f02c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f034:	3204      	adds	r2, #4
 800f036:	2104      	movs	r1, #4
 800f038:	9103      	str	r1, [sp, #12]
 800f03a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f03e:	9102      	str	r1, [sp, #8]
 800f040:	9201      	str	r2, [sp, #4]
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	4623      	mov	r3, r4
 800f046:	4602      	mov	r2, r0
 800f048:	2100      	movs	r1, #0
 800f04a:	6978      	ldr	r0, [r7, #20]
 800f04c:	f7fe f856 	bl	800d0fc <lfs_bd_read>
 800f050:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800f052:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f054:	2b00      	cmp	r3, #0
 800f056:	d006      	beq.n	800f066 <lfs_dir_fetchmatch+0x2d6>
                    if (err == LFS_ERR_CORRUPT) {
 800f058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f05a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f05e:	f000 817c 	beq.w	800f35a <lfs_dir_fetchmatch+0x5ca>
                        break;
                    }
                    return err;
 800f062:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                return err;
 800f064:	e257      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
                }
                dcrc = lfs_fromle32(dcrc);
 800f066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fd ffdc 	bl	800d026 <lfs_fromle32>
 800f06e:	4603      	mov	r3, r0
 800f070:	62bb      	str	r3, [r7, #40]	@ 0x28

                if (crc != dcrc) {
 800f072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f076:	429a      	cmp	r2, r3
 800f078:	f040 8171 	bne.w	800f35e <lfs_dir_fetchmatch+0x5ce>
                    break;
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800f07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fe fcba 	bl	800d9f8 <lfs_tag_chunk>
 800f084:	4603      	mov	r3, r0
 800f086:	07db      	lsls	r3, r3, #31
 800f088:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f08a:	4053      	eors	r3, r2
 800f08c:	66bb      	str	r3, [r7, #104]	@ 0x68

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f092:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800f096:	2204      	movs	r2, #4
 800f098:	4618      	mov	r0, r3
 800f09a:	f005 fe4b 	bl	8014d34 <lfs_crc>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800f0a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
                dir->off = off + lfs_tag_dsize(tag);
 800f0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fe fcdb 	bl	800da66 <lfs_tag_dsize>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f0b4:	441a      	add	r2, r3
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f0be:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800f0c6:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800f0c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800f0ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800f0da:	75da      	strb	r2, [r3, #23]

                // reset crc, hasfcrc
                crc = 0xffffffff;
 800f0dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f0e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0e2:	e73c      	b.n	800ef5e <lfs_dir_fetchmatch+0x1ce>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            err = lfs_bd_crc(lfs,
 800f0e4:	697e      	ldr	r6, [r7, #20]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ec:	607b      	str	r3, [r7, #4]
            err = lfs_bd_crc(lfs,
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	681c      	ldr	r4, [r3, #0]
 800f0f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f0f4:	1d1d      	adds	r5, r3, #4
                    dir->pair[0], off+sizeof(tag),
                    lfs_tag_dsize(tag)-sizeof(tag), &crc);
 800f0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fe fcb4 	bl	800da66 <lfs_tag_dsize>
 800f0fe:	4603      	mov	r3, r0
            err = lfs_bd_crc(lfs,
 800f100:	3b04      	subs	r3, #4
 800f102:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800f106:	9203      	str	r2, [sp, #12]
 800f108:	9302      	str	r3, [sp, #8]
 800f10a:	9501      	str	r5, [sp, #4]
 800f10c:	9400      	str	r4, [sp, #0]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4632      	mov	r2, r6
 800f112:	2100      	movs	r1, #0
 800f114:	6978      	ldr	r0, [r7, #20]
 800f116:	f7fe f98e 	bl	800d436 <lfs_bd_crc>
 800f11a:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (err) {
 800f11c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d006      	beq.n	800f130 <lfs_dir_fetchmatch+0x3a0>
                if (err == LFS_ERR_CORRUPT) {
 800f122:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f124:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f128:	f000 811b 	beq.w	800f362 <lfs_dir_fetchmatch+0x5d2>
                    break;
                }
                return err;
 800f12c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f12e:	e1f2      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800f130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f132:	4618      	mov	r0, r3
 800f134:	f7fe fc30 	bl	800d998 <lfs_tag_type1>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d113      	bne.n	800f166 <lfs_dir_fetchmatch+0x3d6>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800f13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f140:	4618      	mov	r0, r3
 800f142:	f7fe fc73 	bl	800da2c <lfs_tag_id>
 800f146:	4603      	mov	r3, r0
 800f148:	461a      	mov	r2, r3
 800f14a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800f14e:	4293      	cmp	r3, r2
 800f150:	f200 80b6 	bhi.w	800f2c0 <lfs_dir_fetchmatch+0x530>
                    tempcount = lfs_tag_id(tag) + 1;
 800f154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f156:	4618      	mov	r0, r3
 800f158:	f7fe fc68 	bl	800da2c <lfs_tag_id>
 800f15c:	4603      	mov	r3, r0
 800f15e:	3301      	adds	r3, #1
 800f160:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800f164:	e0ac      	b.n	800f2c0 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800f166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fe fc15 	bl	800d998 <lfs_tag_type1>
 800f16e:	4603      	mov	r3, r0
 800f170:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f174:	d13a      	bne.n	800f1ec <lfs_dir_fetchmatch+0x45c>
                tempcount += lfs_tag_splice(tag);
 800f176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fe fc4a 	bl	800da12 <lfs_tag_splice>
 800f17e:	4603      	mov	r3, r0
 800f180:	b29a      	uxth	r2, r3
 800f182:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800f186:	4413      	add	r3, r2
 800f188:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800f18c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f18e:	4b08      	ldr	r3, [pc, #32]	@ (800f1b0 <lfs_dir_fetchmatch+0x420>)
 800f190:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800f192:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 800f196:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 800f19a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d109      	bne.n	800f1b4 <lfs_dir_fetchmatch+0x424>
                    tempbesttag |= 0x80000000;
 800f1a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f1a6:	663b      	str	r3, [r7, #96]	@ 0x60
 800f1a8:	e08a      	b.n	800f2c0 <lfs_dir_fetchmatch+0x530>
 800f1aa:	bf00      	nop
 800f1ac:	080309ac 	.word	0x080309ac
 800f1b0:	000ffc00 	.word	0x000ffc00
                } else if (tempbesttag != -1 &&
 800f1b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f1ba:	f000 8081 	beq.w	800f2c0 <lfs_dir_fetchmatch+0x530>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800f1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fe fc33 	bl	800da2c <lfs_tag_id>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	461c      	mov	r4, r3
 800f1ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fe fc2d 	bl	800da2c <lfs_tag_id>
 800f1d2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800f1d4:	429c      	cmp	r4, r3
 800f1d6:	d873      	bhi.n	800f2c0 <lfs_dir_fetchmatch+0x530>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800f1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fe fc19 	bl	800da12 <lfs_tag_splice>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	029a      	lsls	r2, r3, #10
 800f1e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1e6:	4413      	add	r3, r2
 800f1e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800f1ea:	e069      	b.n	800f2c0 <lfs_dir_fetchmatch+0x530>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800f1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fe fbd2 	bl	800d998 <lfs_tag_type1>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f1fa:	d132      	bne.n	800f262 <lfs_dir_fetchmatch+0x4d2>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800f1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fe fbfa 	bl	800d9f8 <lfs_tag_chunk>
 800f204:	4603      	mov	r3, r0
 800f206:	f003 0301 	and.w	r3, r3, #1
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bf14      	ite	ne
 800f20e:	2301      	movne	r3, #1
 800f210:	2300      	moveq	r3, #0
 800f212:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

                err = lfs_bd_read(lfs,
 800f216:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f21c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f224:	3204      	adds	r2, #4
 800f226:	2108      	movs	r1, #8
 800f228:	9103      	str	r1, [sp, #12]
 800f22a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800f22e:	9102      	str	r1, [sp, #8]
 800f230:	9201      	str	r2, [sp, #4]
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	4623      	mov	r3, r4
 800f236:	4602      	mov	r2, r0
 800f238:	2100      	movs	r1, #0
 800f23a:	6978      	ldr	r0, [r7, #20]
 800f23c:	f7fd ff5e 	bl	800d0fc <lfs_bd_read>
 800f240:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800f242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f244:	2b00      	cmp	r3, #0
 800f246:	d006      	beq.n	800f256 <lfs_dir_fetchmatch+0x4c6>
                    if (err == LFS_ERR_CORRUPT) {
 800f248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f24a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f24e:	f000 808a 	beq.w	800f366 <lfs_dir_fetchmatch+0x5d6>
                        break;
                    }
                    return err;
 800f252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f254:	e15f      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
                }
                lfs_pair_fromle32(temptail);
 800f256:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fe fb47 	bl	800d8ee <lfs_pair_fromle32>
 800f260:	e02e      	b.n	800f2c0 <lfs_dir_fetchmatch+0x530>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 800f262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f264:	4618      	mov	r0, r3
 800f266:	f7fe fbb7 	bl	800d9d8 <lfs_tag_type3>
 800f26a:	4603      	mov	r3, r0
 800f26c:	461a      	mov	r2, r3
 800f26e:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 800f272:	429a      	cmp	r2, r3
 800f274:	d124      	bne.n	800f2c0 <lfs_dir_fetchmatch+0x530>
                err = lfs_bd_read(lfs,
 800f276:	6978      	ldr	r0, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f27c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
                err = lfs_bd_read(lfs,
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f284:	3204      	adds	r2, #4
 800f286:	2108      	movs	r1, #8
 800f288:	9103      	str	r1, [sp, #12]
 800f28a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800f28e:	9102      	str	r1, [sp, #8]
 800f290:	9201      	str	r2, [sp, #4]
 800f292:	9300      	str	r3, [sp, #0]
 800f294:	4623      	mov	r3, r4
 800f296:	4602      	mov	r2, r0
 800f298:	2100      	movs	r1, #0
 800f29a:	6978      	ldr	r0, [r7, #20]
 800f29c:	f7fd ff2e 	bl	800d0fc <lfs_bd_read>
 800f2a0:	65b8      	str	r0, [r7, #88]	@ 0x58
                        dir->pair[0], off+sizeof(tag),
                        &fcrc, sizeof(fcrc));
                if (err) {
 800f2a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d003      	beq.n	800f2b0 <lfs_dir_fetchmatch+0x520>
                    if (err == LFS_ERR_CORRUPT) {
 800f2a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f2aa:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f2ae:	d05c      	beq.n	800f36a <lfs_dir_fetchmatch+0x5da>
                        break;
                    }
                }

                lfs_fcrc_fromle32(&fcrc);
 800f2b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fe fcd5 	bl	800dc64 <lfs_fcrc_fromle32>
                hasfcrc = true;
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800f2c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f2c6:	405a      	eors	r2, r3
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f47f ae46 	bne.w	800ef5e <lfs_dir_fetchmatch+0x1ce>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800f2d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
                        dir->pair[0], off+sizeof(tag)});
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800f2d8:	623b      	str	r3, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800f2da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2dc:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800f2de:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2e0:	f107 0220 	add.w	r2, r7, #32
 800f2e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f2e8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800f2ec:	4798      	blx	r3
 800f2ee:	6578      	str	r0, [r7, #84]	@ 0x54
                if (res < 0) {
 800f2f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	da05      	bge.n	800f302 <lfs_dir_fetchmatch+0x572>
                    if (res == LFS_ERR_CORRUPT) {
 800f2f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f2f8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f2fc:	d037      	beq.n	800f36e <lfs_dir_fetchmatch+0x5de>
                        break;
                    }
                    return res;
 800f2fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                return err;
 800f300:	e109      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
                }

                if (res == LFS_CMP_EQ) {
 800f302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f304:	2b00      	cmp	r3, #0
 800f306:	d102      	bne.n	800f30e <lfs_dir_fetchmatch+0x57e>
                    // found a match
                    tempbesttag = tag;
 800f308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f30a:	663b      	str	r3, [r7, #96]	@ 0x60
 800f30c:	e627      	b.n	800ef5e <lfs_dir_fetchmatch+0x1ce>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800f30e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f310:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f312:	405a      	eors	r2, r3
 800f314:	4b82      	ldr	r3, [pc, #520]	@ (800f520 <lfs_dir_fetchmatch+0x790>)
 800f316:	4013      	ands	r3, r2
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d103      	bne.n	800f324 <lfs_dir_fetchmatch+0x594>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800f31c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f320:	663b      	str	r3, [r7, #96]	@ 0x60
 800f322:	e61c      	b.n	800ef5e <lfs_dir_fetchmatch+0x1ce>
                } else if (res == LFS_CMP_GT &&
 800f324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f326:	2b02      	cmp	r3, #2
 800f328:	f47f ae19 	bne.w	800ef5e <lfs_dir_fetchmatch+0x1ce>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800f32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe fb7c 	bl	800da2c <lfs_tag_id>
 800f334:	4603      	mov	r3, r0
 800f336:	461c      	mov	r4, r3
 800f338:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fe fb76 	bl	800da2c <lfs_tag_id>
 800f340:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800f342:	429c      	cmp	r4, r3
 800f344:	f63f ae0b 	bhi.w	800ef5e <lfs_dir_fetchmatch+0x1ce>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800f348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f34a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f34e:	663b      	str	r3, [r7, #96]	@ 0x60
 800f350:	e605      	b.n	800ef5e <lfs_dir_fetchmatch+0x1ce>
                    break;
 800f352:	bf00      	nop
 800f354:	e00c      	b.n	800f370 <lfs_dir_fetchmatch+0x5e0>
                break;
 800f356:	bf00      	nop
 800f358:	e00a      	b.n	800f370 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f35a:	bf00      	nop
 800f35c:	e008      	b.n	800f370 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800f35e:	bf00      	nop
 800f360:	e006      	b.n	800f370 <lfs_dir_fetchmatch+0x5e0>
                    break;
 800f362:	bf00      	nop
 800f364:	e004      	b.n	800f370 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f366:	bf00      	nop
 800f368:	e002      	b.n	800f370 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f36a:	bf00      	nop
 800f36c:	e000      	b.n	800f370 <lfs_dir_fetchmatch+0x5e0>
                        break;
 800f36e:	bf00      	nop
                }
            }
        }

        // found no valid commits?
        if (dir->off == 0) {
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d000      	beq.n	800f37a <lfs_dir_fetchmatch+0x5ea>
 800f378:	e017      	b.n	800f3aa <lfs_dir_fetchmatch+0x61a>
            // try the other block?
            lfs_pair_swap(dir->pair);
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fe fa2f 	bl	800d7e0 <lfs_pair_swap>
            dir->rev = revs[(r+1)%2];
 800f382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f384:	3301      	adds	r3, #1
 800f386:	2b00      	cmp	r3, #0
 800f388:	f003 0301 	and.w	r3, r3, #1
 800f38c:	bfb8      	it	lt
 800f38e:	425b      	neglt	r3, r3
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	3378      	adds	r3, #120	@ 0x78
 800f394:	f107 0208 	add.w	r2, r7, #8
 800f398:	4413      	add	r3, r2
 800f39a:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800f3a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800f3a8:	e0a1      	b.n	800f4ee <lfs_dir_fetchmatch+0x75e>
            continue;
        }

        // did we end on a valid commit? we may have an erased block
        dir->erased = false;
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	759a      	strb	r2, [r3, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 800f3b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d03a      	beq.n	800f42e <lfs_dir_fetchmatch+0x69e>
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	697a      	ldr	r2, [r7, #20]
 800f3be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800f3c0:	6a12      	ldr	r2, [r2, #32]
 800f3c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3c6:	fb01 f202 	mul.w	r2, r1, r2
 800f3ca:	1a9b      	subs	r3, r3, r2
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d12e      	bne.n	800f42e <lfs_dir_fetchmatch+0x69e>
            if (lfs_fs_disk_version(lfs) < 0x00020001) {
                dir->erased = true;

            } else
        #endif
            if (hasfcrc) {
 800f3d0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d02a      	beq.n	800f42e <lfs_dir_fetchmatch+0x69e>
                // check for an fcrc matching the next prog's erased state, if
                // this failed most likely a previous prog was interrupted, we
                // need a new erase
                uint32_t fcrc_ = 0xffffffff;
 800f3d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3dc:	61fb      	str	r3, [r7, #28]
                int err = lfs_bd_crc(lfs,
 800f3de:	697c      	ldr	r4, [r7, #20]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f3e4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
                int err = lfs_bd_crc(lfs,
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	693a      	ldr	r2, [r7, #16]
 800f3ec:	68d2      	ldr	r2, [r2, #12]
 800f3ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f3f0:	f107 001c 	add.w	r0, r7, #28
 800f3f4:	9003      	str	r0, [sp, #12]
 800f3f6:	9102      	str	r1, [sp, #8]
 800f3f8:	9201      	str	r2, [sp, #4]
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	462b      	mov	r3, r5
 800f3fe:	4622      	mov	r2, r4
 800f400:	2100      	movs	r1, #0
 800f402:	6978      	ldr	r0, [r7, #20]
 800f404:	f7fe f817 	bl	800d436 <lfs_bd_crc>
 800f408:	6538      	str	r0, [r7, #80]	@ 0x50
                        dir->pair[0], dir->off, fcrc.size, &fcrc_);
                if (err && err != LFS_ERR_CORRUPT) {
 800f40a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d005      	beq.n	800f41c <lfs_dir_fetchmatch+0x68c>
 800f410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f412:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800f416:	d001      	beq.n	800f41c <lfs_dir_fetchmatch+0x68c>
                    return err;
 800f418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f41a:	e07c      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
                }

                // found beginning of erased part?
                dir->erased = (fcrc_ == fcrc.crc);
 800f41c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	429a      	cmp	r2, r3
 800f422:	bf0c      	ite	eq
 800f424:	2301      	moveq	r3, #1
 800f426:	2300      	movne	r3, #0
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	759a      	strb	r2, [r3, #22]
            }
        }

        // synthetic move
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	333c      	adds	r3, #60	@ 0x3c
 800f432:	693a      	ldr	r2, [r7, #16]
 800f434:	4611      	mov	r1, r2
 800f436:	4618      	mov	r0, r3
 800f438:	f7fe fbb4 	bl	800dba4 <lfs_gstate_hasmovehere>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d028      	beq.n	800f494 <lfs_dir_fetchmatch+0x704>
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe faf0 	bl	800da2c <lfs_tag_id>
 800f44c:	4603      	mov	r3, r0
 800f44e:	461c      	mov	r4, r3
 800f450:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f452:	4618      	mov	r0, r3
 800f454:	f7fe faea 	bl	800da2c <lfs_tag_id>
 800f458:	4603      	mov	r3, r0
 800f45a:	429c      	cmp	r4, r3
 800f45c:	d104      	bne.n	800f468 <lfs_dir_fetchmatch+0x6d8>
                besttag |= 0x80000000;
 800f45e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f460:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f464:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f466:	e015      	b.n	800f494 <lfs_dir_fetchmatch+0x704>
            } else if (besttag != -1 &&
 800f468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f46a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f46e:	d011      	beq.n	800f494 <lfs_dir_fetchmatch+0x704>
                    lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f474:	4618      	mov	r0, r3
 800f476:	f7fe fad9 	bl	800da2c <lfs_tag_id>
 800f47a:	4603      	mov	r3, r0
 800f47c:	461c      	mov	r4, r3
 800f47e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f480:	4618      	mov	r0, r3
 800f482:	f7fe fad3 	bl	800da2c <lfs_tag_id>
 800f486:	4603      	mov	r3, r0
            } else if (besttag != -1 &&
 800f488:	429c      	cmp	r4, r3
 800f48a:	d203      	bcs.n	800f494 <lfs_dir_fetchmatch+0x704>
                besttag -= LFS_MKTAG(0, 1, 0);
 800f48c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f48e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800f492:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }

        // found tag? or found best id?
        if (id) {
 800f494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d010      	beq.n	800f4be <lfs_dir_fetchmatch+0x72e>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800f49c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fac4 	bl	800da2c <lfs_tag_id>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	8a9b      	ldrh	r3, [r3, #20]
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	4610      	mov	r0, r2
 800f4b0:	f7fd fd49 	bl	800cf46 <lfs_min>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f4bc:	801a      	strh	r2, [r3, #0]
        }

        if (lfs_tag_isvalid(besttag)) {
 800f4be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7fe fa48 	bl	800d956 <lfs_tag_isvalid>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d001      	beq.n	800f4d0 <lfs_dir_fetchmatch+0x740>
            return besttag;
 800f4cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4ce:	e022      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
        } else if (lfs_tag_id(besttag) < dir->count) {
 800f4d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fe faaa 	bl	800da2c <lfs_tag_id>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	461a      	mov	r2, r3
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	8a9b      	ldrh	r3, [r3, #20]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d202      	bcs.n	800f4ea <lfs_dir_fetchmatch+0x75a>
            return LFS_ERR_NOENT;
 800f4e4:	f06f 0301 	mvn.w	r3, #1
 800f4e8:	e015      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
        } else {
            return 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	e013      	b.n	800f516 <lfs_dir_fetchmatch+0x786>
    for (int i = 0; i < 2; i++) {
 800f4ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	f77f ad00 	ble.w	800eef6 <lfs_dir_fetchmatch+0x166>
        }
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	4909      	ldr	r1, [pc, #36]	@ (800f524 <lfs_dir_fetchmatch+0x794>)
 800f500:	9101      	str	r1, [sp, #4]
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	4613      	mov	r3, r2
 800f506:	f240 5259 	movw	r2, #1369	@ 0x559
 800f50a:	4907      	ldr	r1, [pc, #28]	@ (800f528 <lfs_dir_fetchmatch+0x798>)
 800f50c:	4807      	ldr	r0, [pc, #28]	@ (800f52c <lfs_dir_fetchmatch+0x79c>)
 800f50e:	f013 feff 	bl	8023310 <printf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800f512:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 800f516:	4618      	mov	r0, r3
 800f518:	3784      	adds	r7, #132	@ 0x84
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f51e:	bf00      	nop
 800f520:	7ffffc00 	.word	0x7ffffc00
 800f524:	08030968 	.word	0x08030968
 800f528:	08030840 	.word	0x08030840
 800f52c:	08030974 	.word	0x08030974

0800f530 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800f530:	b580      	push	{r7, lr}
 800f532:	b088      	sub	sp, #32
 800f534:	af04      	add	r7, sp, #16
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800f53c:	2300      	movs	r3, #0
 800f53e:	9303      	str	r3, [sp, #12]
 800f540:	2300      	movs	r3, #0
 800f542:	9302      	str	r3, [sp, #8]
 800f544:	2300      	movs	r3, #0
 800f546:	9301      	str	r3, [sp, #4]
 800f548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f54c:	9300      	str	r3, [sp, #0]
 800f54e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	68b9      	ldr	r1, [r7, #8]
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f7ff fc1a 	bl	800ed90 <lfs_dir_fetchmatch>
 800f55c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
	...

0800f568 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800f568:	b580      	push	{r7, lr}
 800f56a:	b08a      	sub	sp, #40	@ 0x28
 800f56c:	af02      	add	r7, sp, #8
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800f574:	f107 0310 	add.w	r3, r7, #16
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	4b12      	ldr	r3, [pc, #72]	@ (800f5c4 <lfs_dir_getgstate+0x5c>)
 800f57c:	4a12      	ldr	r2, [pc, #72]	@ (800f5c8 <lfs_dir_getgstate+0x60>)
 800f57e:	68b9      	ldr	r1, [r7, #8]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f7fe fecf 	bl	800e324 <lfs_dir_get>
 800f586:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	da05      	bge.n	800f59a <lfs_dir_getgstate+0x32>
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	f113 0f02 	cmn.w	r3, #2
 800f594:	d001      	beq.n	800f59a <lfs_dir_getgstate+0x32>
        return res;
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	e00f      	b.n	800f5ba <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	f113 0f02 	cmn.w	r3, #2
 800f5a0:	d00a      	beq.n	800f5b8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800f5a2:	f107 0310 	add.w	r3, r7, #16
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fe fb1c 	bl	800dbe4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800f5ac:	f107 0310 	add.w	r3, r7, #16
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f7fe fa6b 	bl	800da8e <lfs_gstate_xor>
    }

    return 0;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3720      	adds	r7, #32
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
 800f5c2:	bf00      	nop
 800f5c4:	7ff0000c 	.word	0x7ff0000c
 800f5c8:	7ff00000 	.word	0x7ff00000

0800f5cc <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b08a      	sub	sp, #40	@ 0x28
 800f5d0:	af02      	add	r7, sp, #8
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	603b      	str	r3, [r7, #0]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800f5dc:	88fb      	ldrh	r3, [r7, #6]
 800f5de:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d10b      	bne.n	800f5fe <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	3308      	adds	r3, #8
 800f5ea:	4932      	ldr	r1, [pc, #200]	@ (800f6b4 <lfs_dir_getinfo+0xe8>)
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	881b      	ldrh	r3, [r3, #0]
 800f5f2:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	701a      	strb	r2, [r3, #0]
        return 0;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	e055      	b.n	800f6aa <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800f5fe:	88fb      	ldrh	r3, [r7, #6]
 800f600:	029a      	lsls	r2, r3, #10
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f606:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800f608:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	4613      	mov	r3, r2
 800f612:	4a29      	ldr	r2, [pc, #164]	@ (800f6b8 <lfs_dir_getinfo+0xec>)
 800f614:	68b9      	ldr	r1, [r7, #8]
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f7fe fe84 	bl	800e324 <lfs_dir_get>
 800f61c:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	2b00      	cmp	r3, #0
 800f622:	da01      	bge.n	800f628 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	e040      	b.n	800f6aa <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fe f9d4 	bl	800d9d8 <lfs_tag_type3>
 800f630:	4603      	mov	r3, r0
 800f632:	b2da      	uxtb	r2, r3
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800f638:	88fb      	ldrh	r3, [r7, #6]
 800f63a:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f63c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f640:	f043 0308 	orr.w	r3, r3, #8
 800f644:	f107 0214 	add.w	r2, r7, #20
 800f648:	9200      	str	r2, [sp, #0]
 800f64a:	4a1c      	ldr	r2, [pc, #112]	@ (800f6bc <lfs_dir_getinfo+0xf0>)
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f7fe fe68 	bl	800e324 <lfs_dir_get>
 800f654:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	da01      	bge.n	800f660 <lfs_dir_getinfo+0x94>
        return (int)tag;
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	e024      	b.n	800f6aa <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800f660:	f107 0314 	add.w	r3, r7, #20
 800f664:	4618      	mov	r0, r3
 800f666:	f7fe fb2d 	bl	800dcc4 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fe f9b3 	bl	800d9d8 <lfs_tag_type3>
 800f672:	4603      	mov	r3, r0
 800f674:	461a      	mov	r2, r3
 800f676:	f240 2302 	movw	r3, #514	@ 0x202
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d103      	bne.n	800f686 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800f67e:	69ba      	ldr	r2, [r7, #24]
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	605a      	str	r2, [r3, #4]
 800f684:	e010      	b.n	800f6a8 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fe f9a5 	bl	800d9d8 <lfs_tag_type3>
 800f68e:	4603      	mov	r3, r0
 800f690:	461a      	mov	r2, r3
 800f692:	f240 2301 	movw	r3, #513	@ 0x201
 800f696:	429a      	cmp	r2, r3
 800f698:	d106      	bne.n	800f6a8 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7fe f9d5 	bl	800da4c <lfs_tag_size>
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3720      	adds	r7, #32
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	080309b4 	.word	0x080309b4
 800f6b8:	780ffc00 	.word	0x780ffc00
 800f6bc:	700ffc00 	.word	0x700ffc00

0800f6c0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800f6c0:	b590      	push	{r4, r7, lr}
 800f6c2:	b08f      	sub	sp, #60	@ 0x3c
 800f6c4:	af04      	add	r7, sp, #16
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 800f6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800f6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6dc:	689c      	ldr	r4, [r3, #8]
 800f6de:	68b8      	ldr	r0, [r7, #8]
 800f6e0:	f7fe f9b4 	bl	800da4c <lfs_tag_size>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f7fd fc2c 	bl	800cf46 <lfs_min>
 800f6ee:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800f6f0:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	69fa      	ldr	r2, [r7, #28]
 800f6f8:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800f6fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f6fc:	6849      	ldr	r1, [r1, #4]
 800f6fe:	69b8      	ldr	r0, [r7, #24]
 800f700:	9003      	str	r0, [sp, #12]
 800f702:	9102      	str	r1, [sp, #8]
 800f704:	9201      	str	r2, [sp, #4]
 800f706:	9300      	str	r3, [sp, #0]
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	4622      	mov	r2, r4
 800f70c:	2100      	movs	r1, #0
 800f70e:	6a38      	ldr	r0, [r7, #32]
 800f710:	f7fd fe40 	bl	800d394 <lfs_bd_cmp>
 800f714:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d001      	beq.n	800f720 <lfs_dir_find_match+0x60>
        return res;
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	e014      	b.n	800f74a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800f720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f722:	689c      	ldr	r4, [r3, #8]
 800f724:	68b8      	ldr	r0, [r7, #8]
 800f726:	f7fe f991 	bl	800da4c <lfs_tag_size>
 800f72a:	4603      	mov	r3, r0
 800f72c:	429c      	cmp	r4, r3
 800f72e:	d00b      	beq.n	800f748 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800f730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f732:	689c      	ldr	r4, [r3, #8]
 800f734:	68b8      	ldr	r0, [r7, #8]
 800f736:	f7fe f989 	bl	800da4c <lfs_tag_size>
 800f73a:	4603      	mov	r3, r0
 800f73c:	429c      	cmp	r4, r3
 800f73e:	d201      	bcs.n	800f744 <lfs_dir_find_match+0x84>
 800f740:	2301      	movs	r3, #1
 800f742:	e002      	b.n	800f74a <lfs_dir_find_match+0x8a>
 800f744:	2302      	movs	r3, #2
 800f746:	e000      	b.n	800f74a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	372c      	adds	r7, #44	@ 0x2c
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd90      	pop	{r4, r7, pc}
	...

0800f754 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800f754:	b590      	push	{r4, r7, lr}
 800f756:	b093      	sub	sp, #76	@ 0x4c
 800f758:	af04      	add	r7, sp, #16
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d003      	beq.n	800f776 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800f774:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800f776:	4b6e      	ldr	r3, [pc, #440]	@ (800f930 <lfs_dir_find+0x1dc>)
 800f778:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6a1a      	ldr	r2, [r3, #32]
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800f78a:	496a      	ldr	r1, [pc, #424]	@ (800f934 <lfs_dir_find+0x1e0>)
 800f78c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f78e:	f016 fb4f 	bl	8025e30 <strspn>
 800f792:	4602      	mov	r2, r0
 800f794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f796:	4413      	add	r3, r2
 800f798:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800f79a:	4966      	ldr	r1, [pc, #408]	@ (800f934 <lfs_dir_find+0x1e0>)
 800f79c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f79e:	f016 fafb 	bl	8025d98 <strcspn>
 800f7a2:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800f7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d105      	bne.n	800f7b6 <lfs_dir_find+0x62>
 800f7aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ac:	781a      	ldrb	r2, [r3, #0]
 800f7ae:	4b62      	ldr	r3, [pc, #392]	@ (800f938 <lfs_dir_find+0x1e4>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d00a      	beq.n	800f7cc <lfs_dir_find+0x78>
 800f7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	d10c      	bne.n	800f7d6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800f7bc:	2202      	movs	r2, #2
 800f7be:	495f      	ldr	r1, [pc, #380]	@ (800f93c <lfs_dir_find+0x1e8>)
 800f7c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f7c2:	f016 fa31 	bl	8025c28 <memcmp>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d104      	bne.n	800f7d6 <lfs_dir_find+0x82>
            name += namelen;
 800f7cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d0:	4413      	add	r3, r2
 800f7d2:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 800f7d4:	e7d9      	b.n	800f78a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800f7d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7da:	4413      	add	r3, r2
 800f7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800f7e2:	4954      	ldr	r1, [pc, #336]	@ (800f934 <lfs_dir_find+0x1e0>)
 800f7e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7e6:	f016 fb23 	bl	8025e30 <strspn>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ee:	4413      	add	r3, r2
 800f7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 800f7f2:	4950      	ldr	r1, [pc, #320]	@ (800f934 <lfs_dir_find+0x1e0>)
 800f7f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f7f6:	f016 facf 	bl	8025d98 <strcspn>
 800f7fa:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800f7fc:	6a3b      	ldr	r3, [r7, #32]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d01d      	beq.n	800f83e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800f802:	6a3b      	ldr	r3, [r7, #32]
 800f804:	2b02      	cmp	r3, #2
 800f806:	d112      	bne.n	800f82e <lfs_dir_find+0xda>
 800f808:	2202      	movs	r2, #2
 800f80a:	494c      	ldr	r1, [pc, #304]	@ (800f93c <lfs_dir_find+0x1e8>)
 800f80c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f80e:	f016 fa0b 	bl	8025c28 <memcmp>
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	d10a      	bne.n	800f82e <lfs_dir_find+0xda>
                depth -= 1;
 800f818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81a:	3b01      	subs	r3, #1
 800f81c:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 800f81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f820:	2b00      	cmp	r3, #0
 800f822:	d107      	bne.n	800f834 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800f824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f826:	6a3b      	ldr	r3, [r7, #32]
 800f828:	4413      	add	r3, r2
 800f82a:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 800f82c:	e7ad      	b.n	800f78a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800f82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f830:	3301      	adds	r3, #1
 800f832:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 800f834:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	4413      	add	r3, r2
 800f83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 800f83c:	e7d1      	b.n	800f7e2 <lfs_dir_find+0x8e>
                break;
 800f83e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800f840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d101      	bne.n	800f84c <lfs_dir_find+0xf8>
            return tag;
 800f848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f84a:	e06c      	b.n	800f926 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f850:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800f852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f854:	4618      	mov	r0, r3
 800f856:	f7fe f8bf 	bl	800d9d8 <lfs_tag_type3>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b02      	cmp	r3, #2
 800f85e:	d002      	beq.n	800f866 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800f860:	f06f 0313 	mvn.w	r3, #19
 800f864:	e05f      	b.n	800f926 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800f866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fe f8df 	bl	800da2c <lfs_tag_id>
 800f86e:	4603      	mov	r3, r0
 800f870:	461a      	mov	r2, r3
 800f872:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800f876:	429a      	cmp	r2, r3
 800f878:	d01c      	beq.n	800f8b4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fe f8d5 	bl	800da2c <lfs_tag_id>
 800f882:	4603      	mov	r3, r0
 800f884:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f886:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f88a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f892:	9200      	str	r2, [sp, #0]
 800f894:	4a2a      	ldr	r2, [pc, #168]	@ (800f940 <lfs_dir_find+0x1ec>)
 800f896:	68b9      	ldr	r1, [r7, #8]
 800f898:	68f8      	ldr	r0, [r7, #12]
 800f89a:	f7fe fd43 	bl	800e324 <lfs_dir_get>
 800f89e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	da01      	bge.n	800f8aa <lfs_dir_find+0x156>
                return res;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	e03d      	b.n	800f926 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	3318      	adds	r3, #24
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fe f81d 	bl	800d8ee <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800f8ba:	212f      	movs	r1, #47	@ 0x2f
 800f8bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f8be:	f016 fa5e 	bl	8025d7e <strchr>
 800f8c2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <lfs_dir_find+0x178>
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	e000      	b.n	800f8ce <lfs_dir_find+0x17a>
 800f8cc:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	613a      	str	r2, [r7, #16]
 800f8d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8d4:	617a      	str	r2, [r7, #20]
 800f8d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8d8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f8da:	f107 0210 	add.w	r2, r7, #16
 800f8de:	9203      	str	r2, [sp, #12]
 800f8e0:	4a18      	ldr	r2, [pc, #96]	@ (800f944 <lfs_dir_find+0x1f0>)
 800f8e2:	9202      	str	r2, [sp, #8]
 800f8e4:	9301      	str	r3, [sp, #4]
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 800f8ee:	4622      	mov	r2, r4
 800f8f0:	68b9      	ldr	r1, [r7, #8]
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f7ff fa4c 	bl	800ed90 <lfs_dir_fetchmatch>
 800f8f8:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	da01      	bge.n	800f904 <lfs_dir_find+0x1b0>
                return tag;
 800f900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f902:	e010      	b.n	800f926 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800f904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f906:	2b00      	cmp	r3, #0
 800f908:	d004      	beq.n	800f914 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800f90a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f90e:	4413      	add	r3, r2
 800f910:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 800f912:	e73a      	b.n	800f78a <lfs_dir_find+0x36>
            if (!dir->split) {
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	7ddb      	ldrb	r3, [r3, #23]
 800f918:	f083 0301 	eor.w	r3, r3, #1
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d0c8      	beq.n	800f8b4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800f922:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f926:	4618      	mov	r0, r3
 800f928:	373c      	adds	r7, #60	@ 0x3c
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd90      	pop	{r4, r7, pc}
 800f92e:	bf00      	nop
 800f930:	002ffc00 	.word	0x002ffc00
 800f934:	080309b4 	.word	0x080309b4
 800f938:	080309b8 	.word	0x080309b8
 800f93c:	080309bc 	.word	0x080309bc
 800f940:	700ffc00 	.word	0x700ffc00
 800f944:	0800f6c1 	.word	0x0800f6c1

0800f948 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800f948:	b590      	push	{r4, r7, lr}
 800f94a:	b08b      	sub	sp, #44	@ 0x2c
 800f94c:	af04      	add	r7, sp, #16
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
 800f954:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f103 0010 	add.w	r0, r3, #16
 800f95c:	68fc      	ldr	r4, [r7, #12]
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	68ba      	ldr	r2, [r7, #8]
 800f964:	6852      	ldr	r2, [r2, #4]
 800f966:	6839      	ldr	r1, [r7, #0]
 800f968:	9103      	str	r1, [sp, #12]
 800f96a:	6879      	ldr	r1, [r7, #4]
 800f96c:	9102      	str	r1, [sp, #8]
 800f96e:	9201      	str	r2, [sp, #4]
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	2300      	movs	r3, #0
 800f974:	4622      	mov	r2, r4
 800f976:	4601      	mov	r1, r0
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7fd fe51 	bl	800d620 <lfs_bd_prog>
 800f97e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <lfs_dir_commitprog+0x42>
        return err;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	e010      	b.n	800f9ac <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	683a      	ldr	r2, [r7, #0]
 800f990:	6879      	ldr	r1, [r7, #4]
 800f992:	4618      	mov	r0, r3
 800f994:	f005 f9ce 	bl	8014d34 <lfs_crc>
 800f998:	4602      	mov	r2, r0
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	685a      	ldr	r2, [r3, #4]
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	441a      	add	r2, r3
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	605a      	str	r2, [r3, #4]
    return 0;
 800f9aa:	2300      	movs	r3, #0
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	371c      	adds	r7, #28
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd90      	pop	{r4, r7, pc}

0800f9b4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800f9b4:	b590      	push	{r4, r7, lr}
 800f9b6:	b08f      	sub	sp, #60	@ 0x3c
 800f9b8:	af04      	add	r7, sp, #16
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	607a      	str	r2, [r7, #4]
 800f9c0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7fe f84f 	bl	800da66 <lfs_tag_dsize>
 800f9c8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	685a      	ldr	r2, [r3, #4]
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	441a      	add	r2, r3
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d902      	bls.n	800f9e0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800f9da:	f06f 031b 	mvn.w	r3, #27
 800f9de:	e065      	b.n	800faac <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	4053      	eors	r3, r2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fd fb3d 	bl	800d06c <lfs_tobe32>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800f9f6:	f107 0214 	add.w	r2, r7, #20
 800f9fa:	2304      	movs	r3, #4
 800f9fc:	68b9      	ldr	r1, [r7, #8]
 800f9fe:	68f8      	ldr	r0, [r7, #12]
 800fa00:	f7ff ffa2 	bl	800f948 <lfs_dir_commitprog>
 800fa04:	61f8      	str	r0, [r7, #28]
    if (err) {
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <lfs_dir_commitattr+0x5c>
        return err;
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	e04d      	b.n	800faac <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	db0c      	blt.n	800fa30 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	3b04      	subs	r3, #4
 800fa1a:	683a      	ldr	r2, [r7, #0]
 800fa1c:	68b9      	ldr	r1, [r7, #8]
 800fa1e:	68f8      	ldr	r0, [r7, #12]
 800fa20:	f7ff ff92 	bl	800f948 <lfs_dir_commitprog>
 800fa24:	61f8      	str	r0, [r7, #28]
        if (err) {
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d039      	beq.n	800faa0 <lfs_dir_commitattr+0xec>
            return err;
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	e03d      	b.n	800faac <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800fa34:	2300      	movs	r3, #0
 800fa36:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa38:	e02d      	b.n	800fa96 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800fa3a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800fa3c:	6a3a      	ldr	r2, [r7, #32]
 800fa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa40:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800fa42:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	69ba      	ldr	r2, [r7, #24]
 800fa4a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800fa4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa4e:	440a      	add	r2, r1
 800fa50:	2101      	movs	r1, #1
 800fa52:	9103      	str	r1, [sp, #12]
 800fa54:	f107 0113 	add.w	r1, r7, #19
 800fa58:	9102      	str	r1, [sp, #8]
 800fa5a:	9201      	str	r2, [sp, #4]
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	4623      	mov	r3, r4
 800fa60:	4602      	mov	r2, r0
 800fa62:	2100      	movs	r1, #0
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f7fd fb49 	bl	800d0fc <lfs_bd_read>
 800fa6a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <lfs_dir_commitattr+0xc2>
                return err;
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	e01a      	b.n	800faac <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800fa76:	f107 0213 	add.w	r2, r7, #19
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	68b9      	ldr	r1, [r7, #8]
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f7ff ff62 	bl	800f948 <lfs_dir_commitprog>
 800fa84:	61f8      	str	r0, [r7, #28]
            if (err) {
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d001      	beq.n	800fa90 <lfs_dir_commitattr+0xdc>
                return err;
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	e00d      	b.n	800faac <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800fa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa92:	3301      	adds	r3, #1
 800fa94:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	3b04      	subs	r3, #4
 800fa9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d3cc      	bcc.n	800fa3a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	609a      	str	r2, [r3, #8]
    return 0;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	372c      	adds	r7, #44	@ 0x2c
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd90      	pop	{r4, r7, pc}

0800fab4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800fab4:	b590      	push	{r4, r7, lr}
 800fab6:	b097      	sub	sp, #92	@ 0x5c
 800fab8:	af04      	add	r7, sp, #16
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
    //
    // this gets a bit complex as we have two types of crcs:
    // - 5-word crc with fcrc to check following prog (middle of block)
    // - 2-word crc with no following prog (end of block)
    const lfs_off_t end = lfs_alignup(
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	685b      	ldr	r3, [r3, #4]
    const lfs_off_t end = lfs_alignup(
 800fac2:	f103 0214 	add.w	r2, r3, #20
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800faca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    const lfs_off_t end = lfs_alignup(
 800facc:	4619      	mov	r1, r3
 800face:	4610      	mov	r0, r2
 800fad0:	f7fd fa39 	bl	800cf46 <lfs_min>
 800fad4:	4602      	mov	r2, r0
            lfs->cfg->prog_size);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fada:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(
 800fadc:	4619      	mov	r1, r3
 800fade:	4610      	mov	r0, r2
 800fae0:	f7fd fa56 	bl	800cf90 <lfs_alignup>
 800fae4:	63b8      	str	r0, [r7, #56]	@ 0x38

    lfs_off_t off1 = 0;
 800fae6:	2300      	movs	r3, #0
 800fae8:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 800faea:	2300      	movs	r3, #0
 800faec:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800faee:	e0fe      	b.n	800fcee <lfs_dir_commitcrc+0x23a>
        lfs_off_t noff = (
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800faf6:	1ad3      	subs	r3, r2, r3
 800faf8:	3b04      	subs	r3, #4
 800fafa:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fd fa21 	bl	800cf46 <lfs_min>
 800fb04:	4602      	mov	r2, r0
                + (commit->off+sizeof(lfs_tag_t)));
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	685b      	ldr	r3, [r3, #4]
 800fb0a:	4413      	add	r3, r2
        lfs_off_t noff = (
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // too large for crc tag? need padding commits
        if (noff < end) {
 800fb10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d206      	bcs.n	800fb26 <lfs_dir_commitcrc+0x72>
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 800fb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb1a:	3b14      	subs	r3, #20
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fb20:	f7fd fa11 	bl	800cf46 <lfs_min>
 800fb24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // space for fcrc?
        uint8_t eperturb = (uint8_t)-1;
 800fb26:	23ff      	movs	r3, #255	@ 0xff
 800fb28:	76fb      	strb	r3, [r7, #27]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 800fb2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d35f      	bcc.n	800fbf2 <lfs_dir_commitcrc+0x13e>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb3c:	6a1b      	ldr	r3, [r3, #32]
 800fb3e:	1ad3      	subs	r3, r2, r3
 800fb40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d855      	bhi.n	800fbf2 <lfs_dir_commitcrc+0x13e>
            // first read the leading byte, this always contains a bit
            // we can perturb to avoid writes that don't change the fcrc
            int err = lfs_bd_read(lfs,
 800fb46:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, lfs->cfg->prog_size,
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb4c:	6a18      	ldr	r0, [r3, #32]
            int err = lfs_bd_read(lfs,
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2201      	movs	r2, #1
 800fb54:	9203      	str	r2, [sp, #12]
 800fb56:	f107 021b 	add.w	r2, r7, #27
 800fb5a:	9202      	str	r2, [sp, #8]
 800fb5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fb5e:	9201      	str	r2, [sp, #4]
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	4603      	mov	r3, r0
 800fb64:	460a      	mov	r2, r1
 800fb66:	2100      	movs	r1, #0
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7fd fac7 	bl	800d0fc <lfs_bd_read>
 800fb6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    commit->block, noff, &eperturb, 1);
            if (err && err != LFS_ERR_CORRUPT) {
 800fb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d005      	beq.n	800fb82 <lfs_dir_commitcrc+0xce>
 800fb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb78:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fb7c:	d001      	beq.n	800fb82 <lfs_dir_commitcrc+0xce>
                return err;
 800fb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb80:	e101      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
        #endif
            {
                // find the expected fcrc, don't bother avoiding a reread
                // of the eperturb, it should still be in our cache
                struct lfs_fcrc fcrc = {
                    .size = lfs->cfg->prog_size,
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb86:	6a1b      	ldr	r3, [r3, #32]
                struct lfs_fcrc fcrc = {
 800fb88:	60bb      	str	r3, [r7, #8]
 800fb8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fb8e:	60fb      	str	r3, [r7, #12]
                    .crc = 0xffffffff
                };
                err = lfs_bd_crc(lfs,
 800fb90:	6878      	ldr	r0, [r7, #4]
                        NULL, &lfs->rcache, lfs->cfg->prog_size,
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb96:	6a1c      	ldr	r4, [r3, #32]
                err = lfs_bd_crc(lfs,
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	f107 0108 	add.w	r1, r7, #8
 800fba2:	3104      	adds	r1, #4
 800fba4:	9103      	str	r1, [sp, #12]
 800fba6:	9202      	str	r2, [sp, #8]
 800fba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fbaa:	9201      	str	r2, [sp, #4]
 800fbac:	9300      	str	r3, [sp, #0]
 800fbae:	4623      	mov	r3, r4
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7fd fc3e 	bl	800d436 <lfs_bd_crc>
 800fbba:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        commit->block, noff, fcrc.size, &fcrc.crc);
                if (err && err != LFS_ERR_CORRUPT) {
 800fbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d005      	beq.n	800fbce <lfs_dir_commitcrc+0x11a>
 800fbc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fbc8:	d001      	beq.n	800fbce <lfs_dir_commitcrc+0x11a>
                    return err;
 800fbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbcc:	e0db      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
                }

                lfs_fcrc_tole32(&fcrc);
 800fbce:	f107 0308 	add.w	r3, r7, #8
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fe f85e 	bl	800dc94 <lfs_fcrc_tole32>
                err = lfs_dir_commitattr(lfs, commit,
 800fbd8:	f107 0308 	add.w	r3, r7, #8
 800fbdc:	4a6c      	ldr	r2, [pc, #432]	@ (800fd90 <lfs_dir_commitcrc+0x2dc>)
 800fbde:	6839      	ldr	r1, [r7, #0]
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f7ff fee7 	bl	800f9b4 <lfs_dir_commitattr>
 800fbe6:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        LFS_MKTAG(LFS_TYPE_FCRC, 0x3ff, sizeof(struct lfs_fcrc)),
                        &fcrc);
                if (err) {
 800fbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d001      	beq.n	800fbf2 <lfs_dir_commitcrc+0x13e>
                    return err;
 800fbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf0:	e0c9      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
        // build commit crc
        struct {
            lfs_tag_t tag;
            uint32_t crc;
        } ccrc;
        lfs_tag_t ntag = LFS_MKTAG(
 800fbf2:	7efb      	ldrb	r3, [r7, #27]
 800fbf4:	43db      	mvns	r3, r3
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	09db      	lsrs	r3, r3, #7
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fc00:	051a      	lsls	r2, r3, #20
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc08:	1acb      	subs	r3, r1, r3
 800fc0a:	3b04      	subs	r3, #4
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 800fc12:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800fc16:	62bb      	str	r3, [r7, #40]	@ 0x28
                LFS_TYPE_CCRC + (((uint8_t)~eperturb) >> 7), 0x3ff,
                noff - (commit->off+sizeof(lfs_tag_t)));
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	689a      	ldr	r2, [r3, #8]
 800fc1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc1e:	4053      	eors	r3, r2
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fd fa23 	bl	800d06c <lfs_tobe32>
 800fc26:	4603      	mov	r3, r0
 800fc28:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	f107 0110 	add.w	r1, r7, #16
 800fc32:	2204      	movs	r2, #4
 800fc34:	4618      	mov	r0, r3
 800fc36:	f005 f87d 	bl	8014d34 <lfs_crc>
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	60da      	str	r2, [r3, #12]
        ccrc.crc = lfs_tole32(commit->crc);
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fd f9f9 	bl	800d03c <lfs_tole32>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	617b      	str	r3, [r7, #20]

        int err = lfs_bd_prog(lfs,
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f103 0010 	add.w	r0, r3, #16
 800fc54:	687c      	ldr	r4, [r7, #4]
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	683a      	ldr	r2, [r7, #0]
 800fc5c:	6852      	ldr	r2, [r2, #4]
 800fc5e:	2108      	movs	r1, #8
 800fc60:	9103      	str	r1, [sp, #12]
 800fc62:	f107 0110 	add.w	r1, r7, #16
 800fc66:	9102      	str	r1, [sp, #8]
 800fc68:	9201      	str	r2, [sp, #4]
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	4622      	mov	r2, r4
 800fc70:	4601      	mov	r1, r0
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7fd fcd4 	bl	800d620 <lfs_bd_prog>
 800fc78:	6278      	str	r0, [r7, #36]	@ 0x24
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &ccrc, sizeof(ccrc));
        if (err) {
 800fc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <lfs_dir_commitcrc+0x1d0>
            return err;
 800fc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc82:	e080      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800fc84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d106      	bne.n	800fc98 <lfs_dir_commitcrc+0x1e4>
            off1 = commit->off + sizeof(lfs_tag_t);
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	3304      	adds	r3, #4
 800fc90:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off = noff;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fc9c:	605a      	str	r2, [r3, #4]
        // perturb valid bit?
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 800fc9e:	7efb      	ldrb	r3, [r7, #27]
 800fca0:	43db      	mvns	r3, r3
 800fca2:	061b      	lsls	r3, r3, #24
 800fca4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800fca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcaa:	405a      	eors	r2, r3
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	609a      	str	r2, [r3, #8]
        // reset crc for next commit
        commit->crc = 0xffffffff;
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fcb6:	60da      	str	r2, [r3, #12]

        // manually flush here since we don't prog the padding, this confuses
        // the caching layer
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 800fcb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d208      	bcs.n	800fcd2 <lfs_dir_commitcrc+0x21e>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	695a      	ldr	r2, [r3, #20]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fcc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcca:	4413      	add	r3, r2
 800fccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d30d      	bcc.n	800fcee <lfs_dir_commitcrc+0x23a>
            // flush buffers
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f103 0110 	add.w	r1, r3, #16
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	2300      	movs	r3, #0
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7fd fc6b 	bl	800d5b8 <lfs_bd_sync>
 800fce2:	6238      	str	r0, [r7, #32]
            if (err) {
 800fce4:	6a3b      	ldr	r3, [r7, #32]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d001      	beq.n	800fcee <lfs_dir_commitcrc+0x23a>
                return err;
 800fcea:	6a3b      	ldr	r3, [r7, #32]
 800fcec:	e04b      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
    while (commit->off < end) {
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	685b      	ldr	r3, [r3, #4]
 800fcf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	f63f aefb 	bhi.w	800faf0 <lfs_dir_commitcrc+0x3c>

    // successful commit, check checksums to make sure
    //
    // note that we don't need to check padding commits, worst
    // case if they are corrupted we would have had to compact anyways
    lfs_off_t off = commit->begin;
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	691b      	ldr	r3, [r3, #16]
 800fcfe:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t crc = 0xffffffff;
 800fd00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd04:	61fb      	str	r3, [r7, #28]
    int err = lfs_bd_crc(lfs,
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd0a:	1d1c      	adds	r4, r3, #4
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fd12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd14:	1a8a      	subs	r2, r1, r2
 800fd16:	f107 011c 	add.w	r1, r7, #28
 800fd1a:	9103      	str	r1, [sp, #12]
 800fd1c:	9202      	str	r2, [sp, #8]
 800fd1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd20:	9201      	str	r2, [sp, #4]
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	4623      	mov	r3, r4
 800fd26:	4602      	mov	r2, r0
 800fd28:	2100      	movs	r1, #0
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7fd fb83 	bl	800d436 <lfs_bd_crc>
 800fd30:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, off1+sizeof(uint32_t),
            commit->block, off, off1-off, &crc);
    if (err) {
 800fd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d001      	beq.n	800fd3c <lfs_dir_commitcrc+0x288>
        return err;
 800fd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd3a:	e024      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
    }

    // check non-padding commits against known crc
    if (crc != crc1) {
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d002      	beq.n	800fd4a <lfs_dir_commitcrc+0x296>
        return LFS_ERR_CORRUPT;
 800fd44:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800fd48:	e01d      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
    }

    // make sure to check crc in case we happen to pick
    // up an unrelated crc (frozen block?)
    err = lfs_bd_crc(lfs,
 800fd4a:	6879      	ldr	r1, [r7, #4]
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f107 021c 	add.w	r2, r7, #28
 800fd54:	9203      	str	r2, [sp, #12]
 800fd56:	2204      	movs	r2, #4
 800fd58:	9202      	str	r2, [sp, #8]
 800fd5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fd5c:	9201      	str	r2, [sp, #4]
 800fd5e:	9300      	str	r3, [sp, #0]
 800fd60:	2304      	movs	r3, #4
 800fd62:	460a      	mov	r2, r1
 800fd64:	2100      	movs	r1, #0
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f7fd fb65 	bl	800d436 <lfs_bd_crc>
 800fd6c:	6338      	str	r0, [r7, #48]	@ 0x30
            NULL, &lfs->rcache, sizeof(uint32_t),
            commit->block, off1, sizeof(uint32_t), &crc);
    if (err) {
 800fd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d001      	beq.n	800fd78 <lfs_dir_commitcrc+0x2c4>
        return err;
 800fd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd76:	e006      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
    }

    if (crc != 0) {
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d002      	beq.n	800fd84 <lfs_dir_commitcrc+0x2d0>
        return LFS_ERR_CORRUPT;
 800fd7e:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 800fd82:	e000      	b.n	800fd86 <lfs_dir_commitcrc+0x2d2>
    }

    return 0;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	374c      	adds	r7, #76	@ 0x4c
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd90      	pop	{r4, r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	5ffffc08 	.word	0x5ffffc08

0800fd94 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b08a      	sub	sp, #40	@ 0x28
 800fd98:	af04      	add	r7, sp, #16
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800fd9e:	2300      	movs	r3, #0
 800fda0:	617b      	str	r3, [r7, #20]
 800fda2:	e016      	b.n	800fdd2 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	3301      	adds	r3, #1
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	bfb8      	it	lt
 800fdb0:	425b      	neglt	r3, r3
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	683a      	ldr	r2, [r7, #0]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	4619      	mov	r1, r3
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7fe f934 	bl	800e028 <lfs_alloc>
 800fdc0:	60f8      	str	r0, [r7, #12]
        if (err) {
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d001      	beq.n	800fdcc <lfs_dir_alloc+0x38>
            return err;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	e058      	b.n	800fe7e <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	617b      	str	r3, [r7, #20]
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	dde5      	ble.n	800fda4 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	2200      	movs	r2, #0
 800fddc:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800fdde:	6879      	ldr	r1, [r7, #4]
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800fde4:	683a      	ldr	r2, [r7, #0]
 800fde6:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800fde8:	2004      	movs	r0, #4
 800fdea:	9003      	str	r0, [sp, #12]
 800fdec:	9202      	str	r2, [sp, #8]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	9201      	str	r2, [sp, #4]
 800fdf2:	9300      	str	r3, [sp, #0]
 800fdf4:	2304      	movs	r3, #4
 800fdf6:	460a      	mov	r2, r1
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7fd f97e 	bl	800d0fc <lfs_bd_read>
 800fe00:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	689b      	ldr	r3, [r3, #8]
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fd f90d 	bl	800d026 <lfs_fromle32>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d005      	beq.n	800fe24 <lfs_dir_alloc+0x90>
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 800fe1e:	d001      	beq.n	800fe24 <lfs_dir_alloc+0x90>
        return err;
 800fe20:	693b      	ldr	r3, [r7, #16]
 800fe22:	e02c      	b.n	800fe7e <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fe28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	dd0e      	ble.n	800fe4c <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	689a      	ldr	r2, [r3, #8]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fe36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe38:	3301      	adds	r3, #1
 800fe3a:	f043 0301 	orr.w	r3, r3, #1
 800fe3e:	4619      	mov	r1, r3
 800fe40:	4610      	mov	r0, r2
 800fe42:	f7fd f8a5 	bl	800cf90 <lfs_alignup>
 800fe46:	4602      	mov	r2, r0
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	2204      	movs	r2, #4
 800fe50:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe58:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe66:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe6e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	2200      	movs	r2, #0
 800fe74:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b08a      	sub	sp, #40	@ 0x28
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	3348      	adds	r3, #72	@ 0x48
 800fe98:	461a      	mov	r2, r3
 800fe9a:	6879      	ldr	r1, [r7, #4]
 800fe9c:	68f8      	ldr	r0, [r7, #12]
 800fe9e:	f7ff fb63 	bl	800f568 <lfs_dir_getgstate>
 800fea2:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 800fea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <lfs_dir_drop+0x26>
        return err;
 800feaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feac:	e022      	b.n	800fef4 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	3318      	adds	r3, #24
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fd fd35 	bl	800d922 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	7ddb      	ldrb	r3, [r3, #23]
 800febc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800fec0:	051a      	lsls	r2, r3, #20
 800fec2:	4b0e      	ldr	r3, [pc, #56]	@ (800fefc <lfs_dir_drop+0x74>)
 800fec4:	4313      	orrs	r3, r2
 800fec6:	61fb      	str	r3, [r7, #28]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	3318      	adds	r3, #24
 800fecc:	623b      	str	r3, [r7, #32]
 800fece:	f107 021c 	add.w	r2, r7, #28
 800fed2:	2301      	movs	r3, #1
 800fed4:	68b9      	ldr	r1, [r7, #8]
 800fed6:	68f8      	ldr	r0, [r7, #12]
 800fed8:	f001 f984 	bl	80111e4 <lfs_dir_commit>
 800fedc:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	3318      	adds	r3, #24
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7fd fd03 	bl	800d8ee <lfs_pair_fromle32>
    if (err) {
 800fee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feea:	2b00      	cmp	r3, #0
 800feec:	d001      	beq.n	800fef2 <lfs_dir_drop+0x6a>
        return err;
 800feee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef0:	e000      	b.n	800fef4 <lfs_dir_drop+0x6c>
    }

    return 0;
 800fef2:	2300      	movs	r3, #0
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3728      	adds	r7, #40	@ 0x28
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	000ffc08 	.word	0x000ffc08

0800ff00 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b092      	sub	sp, #72	@ 0x48
 800ff04:	af04      	add	r7, sp, #16
 800ff06:	60f8      	str	r0, [r7, #12]
 800ff08:	60b9      	str	r1, [r7, #8]
 800ff0a:	607a      	str	r2, [r7, #4]
 800ff0c:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800ff0e:	f107 0310 	add.w	r3, r7, #16
 800ff12:	4619      	mov	r1, r3
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f7ff ff3d 	bl	800fd94 <lfs_dir_alloc>
 800ff1a:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 800ff1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d001      	beq.n	800ff26 <lfs_dir_split+0x26>
        return err;
 800ff22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff24:	e03c      	b.n	800ffa0 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	7ddb      	ldrb	r3, [r3, #23]
 800ff2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	699b      	ldr	r3, [r3, #24]
 800ff32:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	69db      	ldr	r3, [r3, #28]
 800ff38:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800ff3a:	f107 0110 	add.w	r1, r7, #16
 800ff3e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800ff42:	9302      	str	r3, [sp, #8]
 800ff44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ff48:	9301      	str	r3, [sp, #4]
 800ff4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff4c:	9300      	str	r3, [sp, #0]
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	68f8      	ldr	r0, [r7, #12]
 800ff54:	f000 f87a 	bl	801004c <lfs_dir_compact>
 800ff58:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	da01      	bge.n	800ff64 <lfs_dir_split+0x64>
        return res;
 800ff60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff62:	e01d      	b.n	800ffa0 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 800ff64:	693a      	ldr	r2, [r7, #16]
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800ff6a:	697a      	ldr	r2, [r7, #20]
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	2201      	movs	r2, #1
 800ff74:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800ff76:	68ba      	ldr	r2, [r7, #8]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	3320      	adds	r3, #32
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	4610      	mov	r0, r2
 800ff80:	f7fd fc5e 	bl	800d840 <lfs_pair_cmp>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d109      	bne.n	800ff9e <lfs_dir_split+0x9e>
 800ff8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d105      	bne.n	800ff9e <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 800ff92:	693a      	ldr	r2, [r7, #16]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800ff98:	697a      	ldr	r2, [r7, #20]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3738      	adds	r7, #56	@ 0x38
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b086      	sub	sp, #24
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800ffb8:	68b8      	ldr	r0, [r7, #8]
 800ffba:	f7fd fd54 	bl	800da66 <lfs_tag_dsize>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	441a      	add	r2, r3
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	601a      	str	r2, [r3, #0]
    return 0;
 800ffca:	2300      	movs	r3, #0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3718      	adds	r7, #24
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b086      	sub	sp, #24
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	6818      	ldr	r0, [r3, #0]
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	6859      	ldr	r1, [r3, #4]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	f7ff fce0 	bl	800f9b4 <lfs_dir_commitattr>
 800fff4:	4603      	mov	r3, r0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3718      	adds	r7, #24
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 800fffe:	b480      	push	{r7}
 8010000:	b083      	sub	sp, #12
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
 8010006:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801000c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 801000e:	2b00      	cmp	r3, #0
 8010010:	dd11      	ble.n	8010036 <lfs_dir_needsrelocation+0x38>
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	3301      	adds	r3, #1
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801001c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801001e:	3201      	adds	r2, #1
 8010020:	f042 0201 	orr.w	r2, r2, #1
 8010024:	fbb3 f1f2 	udiv	r1, r3, r2
 8010028:	fb01 f202 	mul.w	r2, r1, r2
 801002c:	1a9b      	subs	r3, r3, r2
 801002e:	2b00      	cmp	r3, #0
 8010030:	d101      	bne.n	8010036 <lfs_dir_needsrelocation+0x38>
 8010032:	2301      	movs	r3, #1
 8010034:	e000      	b.n	8010038 <lfs_dir_needsrelocation+0x3a>
 8010036:	2300      	movs	r3, #0
 8010038:	f003 0301 	and.w	r3, r3, #1
 801003c:	b2db      	uxtb	r3, r3
}
 801003e:	4618      	mov	r0, r3
 8010040:	370c      	adds	r7, #12
 8010042:	46bd      	mov	sp, r7
 8010044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010048:	4770      	bx	lr
	...

0801004c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801004c:	b580      	push	{r7, lr}
 801004e:	b0a4      	sub	sp, #144	@ 0x90
 8010050:	af0a      	add	r7, sp, #40	@ 0x28
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
 8010058:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 801005a:	2300      	movs	r3, #0
 801005c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 8010060:	68b9      	ldr	r1, [r7, #8]
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7ff ffcb 	bl	800fffe <lfs_dir_needsrelocation>
 8010068:	4603      	mov	r3, r0
 801006a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	1c5a      	adds	r2, r3, #1
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8010078:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 801007c:	2b00      	cmp	r3, #0
 801007e:	d00e      	beq.n	801009e <lfs_dir_compact+0x52>
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	2200      	movs	r2, #0
 8010084:	657a      	str	r2, [r7, #84]	@ 0x54
 8010086:	2201      	movs	r2, #1
 8010088:	65ba      	str	r2, [r7, #88]	@ 0x58
 801008a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801008e:	4611      	mov	r1, r2
 8010090:	4618      	mov	r0, r3
 8010092:	f7fd fbd5 	bl	800d840 <lfs_pair_cmp>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	f040 8155 	bne.w	8010348 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80100a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100a4:	2300      	movs	r3, #0
 80100a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80100a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80100ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80100ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80100b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100b4:	2300      	movs	r3, #0
 80100b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80100bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d004      	beq.n	80100cc <lfs_dir_compact+0x80>
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80100c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100c8:	3b08      	subs	r3, #8
 80100ca:	e003      	b.n	80100d4 <lfs_dir_compact+0x88>
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80100d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d2:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80100d4:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	4619      	mov	r1, r3
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f7fd fb4d 	bl	800d77c <lfs_bd_erase>
 80100e2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80100e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d006      	beq.n	80100f8 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 80100ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80100ec:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80100f0:	f000 812c 	beq.w	801034c <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 80100f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80100f6:	e188      	b.n	801040a <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fc ff9d 	bl	800d03c <lfs_tole32>
 8010102:	4602      	mov	r2, r0
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 801010e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8010112:	2304      	movs	r3, #4
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f7ff fc17 	bl	800f948 <lfs_dir_commitprog>
 801011a:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	4618      	mov	r0, r3
 8010122:	f7fc ff80 	bl	800d026 <lfs_fromle32>
 8010126:	4602      	mov	r2, r0
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	609a      	str	r2, [r3, #8]
            if (err) {
 801012c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801012e:	2b00      	cmp	r3, #0
 8010130:	d006      	beq.n	8010140 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8010132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010134:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010138:	f000 810a 	beq.w	8010350 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 801013c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801013e:	e164      	b.n	801040a <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8010140:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8010144:	425b      	negs	r3, r3
 8010146:	b29b      	uxth	r3, r3
 8010148:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801014a:	68fa      	ldr	r2, [r7, #12]
 801014c:	637a      	str	r2, [r7, #52]	@ 0x34
 801014e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8010152:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8010154:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010158:	9208      	str	r2, [sp, #32]
 801015a:	4aae      	ldr	r2, [pc, #696]	@ (8010414 <lfs_dir_compact+0x3c8>)
 801015c:	9207      	str	r2, [sp, #28]
 801015e:	9306      	str	r3, [sp, #24]
 8010160:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8010164:	9305      	str	r3, [sp, #20]
 8010166:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 801016a:	9304      	str	r3, [sp, #16]
 801016c:	2300      	movs	r3, #0
 801016e:	9303      	str	r3, [sp, #12]
 8010170:	4ba9      	ldr	r3, [pc, #676]	@ (8010418 <lfs_dir_compact+0x3cc>)
 8010172:	9302      	str	r3, [sp, #8]
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	9301      	str	r3, [sp, #4]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010180:	2200      	movs	r2, #0
 8010182:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f7fe fa1f 	bl	800e5c8 <lfs_dir_traverse>
 801018a:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 801018c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801018e:	2b00      	cmp	r3, #0
 8010190:	d006      	beq.n	80101a0 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 8010192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010194:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010198:	f000 80dc 	beq.w	8010354 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 801019c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801019e:	e134      	b.n	801040a <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	3318      	adds	r3, #24
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fd fb30 	bl	800d80a <lfs_pair_isnull>
 80101aa:	4603      	mov	r3, r0
 80101ac:	f083 0301 	eor.w	r3, r3, #1
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d022      	beq.n	80101fc <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	3318      	adds	r3, #24
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fd fbb1 	bl	800d922 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	7ddb      	ldrb	r3, [r3, #23]
 80101c4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80101c8:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80101ca:	4a94      	ldr	r2, [pc, #592]	@ (801041c <lfs_dir_compact+0x3d0>)
 80101cc:	431a      	orrs	r2, r3
                        dir->tail);
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80101d2:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80101d6:	68f8      	ldr	r0, [r7, #12]
 80101d8:	f7ff fbec 	bl	800f9b4 <lfs_dir_commitattr>
 80101dc:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	3318      	adds	r3, #24
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fd fb83 	bl	800d8ee <lfs_pair_fromle32>
                if (err) {
 80101e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d006      	beq.n	80101fc <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 80101ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101f0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80101f4:	f000 80b0 	beq.w	8010358 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 80101f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101fa:	e106      	b.n	801040a <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 80101fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010200:	2200      	movs	r2, #0
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	605a      	str	r2, [r3, #4]
 8010206:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8010208:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801020c:	f083 0301 	eor.w	r3, r3, #1
 8010210:	b2db      	uxtb	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	d011      	beq.n	801023a <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801021c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010220:	4611      	mov	r1, r2
 8010222:	4618      	mov	r0, r3
 8010224:	f7fd fc33 	bl	800da8e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801022e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010232:	4611      	mov	r1, r2
 8010234:	4618      	mov	r0, r3
 8010236:	f7fd fc2a 	bl	800da8e <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8010240:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010244:	4611      	mov	r1, r2
 8010246:	4618      	mov	r0, r3
 8010248:	f7fd fc21 	bl	800da8e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801024c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801024e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8010252:	f023 0303 	bic.w	r3, r3, #3
 8010256:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8010258:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801025c:	461a      	mov	r2, r3
 801025e:	68b9      	ldr	r1, [r7, #8]
 8010260:	68f8      	ldr	r0, [r7, #12]
 8010262:	f7ff f981 	bl	800f568 <lfs_dir_getgstate>
 8010266:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8010268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801026a:	2b00      	cmp	r3, #0
 801026c:	d001      	beq.n	8010272 <lfs_dir_compact+0x226>
                return err;
 801026e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010270:	e0cb      	b.n	801040a <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8010272:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010276:	4618      	mov	r0, r3
 8010278:	f7fd fc2e 	bl	800dad8 <lfs_gstate_iszero>
 801027c:	4603      	mov	r3, r0
 801027e:	f083 0301 	eor.w	r3, r3, #1
 8010282:	b2db      	uxtb	r3, r3
 8010284:	2b00      	cmp	r3, #0
 8010286:	d016      	beq.n	80102b6 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8010288:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801028c:	4618      	mov	r0, r3
 801028e:	f7fd fcc9 	bl	800dc24 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 8010292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010296:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 801029a:	4a61      	ldr	r2, [pc, #388]	@ (8010420 <lfs_dir_compact+0x3d4>)
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f7ff fb89 	bl	800f9b4 <lfs_dir_commitattr>
 80102a2:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80102a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d005      	beq.n	80102b6 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80102aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102ac:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80102b0:	d054      	beq.n	801035c <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80102b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102b4:	e0a9      	b.n	801040a <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80102b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80102ba:	4619      	mov	r1, r3
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f7ff fbf9 	bl	800fab4 <lfs_dir_commitcrc>
 80102c2:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80102c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d005      	beq.n	80102d6 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80102ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102cc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80102d0:	d046      	beq.n	8010360 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80102d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80102d4:	e099      	b.n	801040a <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80102d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80102dc:	6a12      	ldr	r2, [r2, #32]
 80102de:	fbb3 f1f2 	udiv	r1, r3, r2
 80102e2:	fb01 f202 	mul.w	r2, r1, r2
 80102e6:	1a9b      	subs	r3, r3, r2
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d006      	beq.n	80102fa <lfs_dir_compact+0x2ae>
 80102ec:	4b4d      	ldr	r3, [pc, #308]	@ (8010424 <lfs_dir_compact+0x3d8>)
 80102ee:	4a4e      	ldr	r2, [pc, #312]	@ (8010428 <lfs_dir_compact+0x3dc>)
 80102f0:	f640 0106 	movw	r1, #2054	@ 0x806
 80102f4:	484d      	ldr	r0, [pc, #308]	@ (801042c <lfs_dir_compact+0x3e0>)
 80102f6:	f012 ffd7 	bl	80232a8 <__assert_func>
            lfs_pair_swap(dir->pair);
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fd fa6f 	bl	800d7e0 <lfs_pair_swap>
            dir->count = end - begin;
 8010302:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8010306:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	b29a      	uxth	r2, r3
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8010312:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8010318:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3348      	adds	r3, #72	@ 0x48
 8010322:	2200      	movs	r2, #0
 8010324:	601a      	str	r2, [r3, #0]
 8010326:	605a      	str	r2, [r3, #4]
 8010328:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 801032a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801032e:	f083 0301 	eor.w	r3, r3, #1
 8010332:	b2db      	uxtb	r3, r3
 8010334:	2b00      	cmp	r3, #0
 8010336:	d065      	beq.n	8010404 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	68fa      	ldr	r2, [r7, #12]
 801033c:	333c      	adds	r3, #60	@ 0x3c
 801033e:	3230      	adds	r2, #48	@ 0x30
 8010340:	ca07      	ldmia	r2, {r0, r1, r2}
 8010342:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8010346:	e05d      	b.n	8010404 <lfs_dir_compact+0x3b8>
        goto relocate;
 8010348:	bf00      	nop
 801034a:	e00a      	b.n	8010362 <lfs_dir_compact+0x316>
                    goto relocate;
 801034c:	bf00      	nop
 801034e:	e008      	b.n	8010362 <lfs_dir_compact+0x316>
                    goto relocate;
 8010350:	bf00      	nop
 8010352:	e006      	b.n	8010362 <lfs_dir_compact+0x316>
                    goto relocate;
 8010354:	bf00      	nop
 8010356:	e004      	b.n	8010362 <lfs_dir_compact+0x316>
                        goto relocate;
 8010358:	bf00      	nop
 801035a:	e002      	b.n	8010362 <lfs_dir_compact+0x316>
                        goto relocate;
 801035c:	bf00      	nop
 801035e:	e000      	b.n	8010362 <lfs_dir_compact+0x316>
                    goto relocate;
 8010360:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8010362:	2301      	movs	r3, #1
 8010364:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	3310      	adds	r3, #16
 801036c:	4619      	mov	r1, r3
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f7fc fe9f 	bl	800d0b2 <lfs_cache_drop>
        if (!tired) {
 8010374:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8010378:	f083 0301 	eor.w	r3, r3, #1
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d009      	beq.n	8010396 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	4a2a      	ldr	r2, [pc, #168]	@ (8010430 <lfs_dir_compact+0x3e4>)
 8010388:	9200      	str	r2, [sp, #0]
 801038a:	f640 0218 	movw	r2, #2072	@ 0x818
 801038e:	4927      	ldr	r1, [pc, #156]	@ (801042c <lfs_dir_compact+0x3e0>)
 8010390:	4828      	ldr	r0, [pc, #160]	@ (8010434 <lfs_dir_compact+0x3e8>)
 8010392:	f012 ffbd 	bl	8023310 <printf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	2200      	movs	r2, #0
 801039a:	617a      	str	r2, [r7, #20]
 801039c:	2201      	movs	r2, #1
 801039e:	61ba      	str	r2, [r7, #24]
 80103a0:	f107 0214 	add.w	r2, r7, #20
 80103a4:	4611      	mov	r1, r2
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fd fa4a 	bl	800d840 <lfs_pair_cmp>
 80103ac:	4603      	mov	r3, r0
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d10c      	bne.n	80103cc <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	4a1e      	ldr	r2, [pc, #120]	@ (8010430 <lfs_dir_compact+0x3e4>)
 80103b8:	9200      	str	r2, [sp, #0]
 80103ba:	f640 021d 	movw	r2, #2077	@ 0x81d
 80103be:	491b      	ldr	r1, [pc, #108]	@ (801042c <lfs_dir_compact+0x3e0>)
 80103c0:	481d      	ldr	r0, [pc, #116]	@ (8010438 <lfs_dir_compact+0x3ec>)
 80103c2:	f012 ffa5 	bl	8023310 <printf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80103c6:	f06f 031b 	mvn.w	r3, #27
 80103ca:	e01e      	b.n	801040a <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	3304      	adds	r3, #4
 80103d0:	4619      	mov	r1, r3
 80103d2:	68f8      	ldr	r0, [r7, #12]
 80103d4:	f7fd fe28 	bl	800e028 <lfs_alloc>
 80103d8:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80103da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d00c      	beq.n	80103fa <lfs_dir_compact+0x3ae>
 80103e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103e2:	f113 0f1c 	cmn.w	r3, #28
 80103e6:	d106      	bne.n	80103f6 <lfs_dir_compact+0x3aa>
 80103e8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80103ec:	f083 0301 	eor.w	r3, r3, #1
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d001      	beq.n	80103fa <lfs_dir_compact+0x3ae>
            return err;
 80103f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103f8:	e007      	b.n	801040a <lfs_dir_compact+0x3be>
        }

        tired = false;
 80103fa:	2300      	movs	r3, #0
 80103fc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8010400:	bf00      	nop
    while (true) {
 8010402:	e64c      	b.n	801009e <lfs_dir_compact+0x52>
        break;
 8010404:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8010406:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801040a:	4618      	mov	r0, r3
 801040c:	3768      	adds	r7, #104	@ 0x68
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	0800ffd5 	.word	0x0800ffd5
 8010418:	400ffc00 	.word	0x400ffc00
 801041c:	000ffc08 	.word	0x000ffc08
 8010420:	7ffffc0c 	.word	0x7ffffc0c
 8010424:	080309c0 	.word	0x080309c0
 8010428:	080342fc 	.word	0x080342fc
 801042c:	08030840 	.word	0x08030840
 8010430:	08030968 	.word	0x08030968
 8010434:	080309e8 	.word	0x080309e8
 8010438:	08030a0c 	.word	0x08030a0c

0801043c <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801043c:	b590      	push	{r4, r7, lr}
 801043e:	b097      	sub	sp, #92	@ 0x5c
 8010440:	af0a      	add	r7, sp, #40	@ 0x28
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
 8010448:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 801044a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801044e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8010450:	e058      	b.n	8010504 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8010452:	2300      	movs	r3, #0
 8010454:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8010456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010458:	b29b      	uxth	r3, r3
 801045a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801045c:	b292      	uxth	r2, r2
 801045e:	4252      	negs	r2, r2
 8010460:	b292      	uxth	r2, r2
 8010462:	b212      	sxth	r2, r2
 8010464:	f107 0118 	add.w	r1, r7, #24
 8010468:	9108      	str	r1, [sp, #32]
 801046a:	4979      	ldr	r1, [pc, #484]	@ (8010650 <lfs_dir_splittingcompact+0x214>)
 801046c:	9107      	str	r1, [sp, #28]
 801046e:	9206      	str	r2, [sp, #24]
 8010470:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010474:	9205      	str	r2, [sp, #20]
 8010476:	9304      	str	r3, [sp, #16]
 8010478:	2300      	movs	r3, #0
 801047a:	9303      	str	r3, [sp, #12]
 801047c:	4b75      	ldr	r3, [pc, #468]	@ (8010654 <lfs_dir_splittingcompact+0x218>)
 801047e:	9302      	str	r3, [sp, #8]
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	9301      	str	r3, [sp, #4]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801048c:	2200      	movs	r2, #0
 801048e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f7fe f899 	bl	800e5c8 <lfs_dir_traverse>
 8010496:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8010498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801049a:	2b00      	cmp	r3, #0
 801049c:	d001      	beq.n	80104a2 <lfs_dir_splittingcompact+0x66>
                return err;
 801049e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104a0:	e0d2      	b.n	8010648 <lfs_dir_splittingcompact+0x20c>
            //                 total = 40 bytes
            //
            // And we cap at half a block to avoid degenerate cases with
            // nearly-full metadata blocks.
            //
            if (end - split < 0xff
 80104a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80104a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80104ac:	d822      	bhi.n	80104f4 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(
                        lfs->cfg->block_size - 40,
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 80104b4:	f1a3 0428 	sub.w	r4, r3, #40	@ 0x28
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d004      	beq.n	80104cc <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    && size <= lfs_min(
 80104c8:	085b      	lsrs	r3, r3, #1
 80104ca:	e003      	b.n	80104d4 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    && size <= lfs_min(
 80104d2:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 80104d4:	68fa      	ldr	r2, [r7, #12]
 80104d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80104d8:	6a12      	ldr	r2, [r2, #32]
                    && size <= lfs_min(
 80104da:	4611      	mov	r1, r2
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fc fd57 	bl	800cf90 <lfs_alignup>
 80104e2:	4603      	mov	r3, r0
 80104e4:	4619      	mov	r1, r3
 80104e6:	4620      	mov	r0, r4
 80104e8:	f7fc fd2d 	bl	800cf46 <lfs_min>
 80104ec:	4602      	mov	r2, r0
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d20e      	bcs.n	8010512 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 80104f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80104f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	085b      	lsrs	r3, r3, #1
 80104fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010500:	4413      	add	r3, r2
 8010502:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8010504:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	2b01      	cmp	r3, #1
 801050e:	d8a0      	bhi.n	8010452 <lfs_dir_splittingcompact+0x16>
 8010510:	e000      	b.n	8010514 <lfs_dir_splittingcompact+0xd8>
                break;
 8010512:	bf00      	nop
        }

        if (split == begin) {
 8010514:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801051a:	429a      	cmp	r2, r3
 801051c:	d02d      	beq.n	801057a <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801051e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010520:	b29b      	uxth	r3, r3
 8010522:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8010526:	9202      	str	r2, [sp, #8]
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	68b9      	ldr	r1, [r7, #8]
 8010534:	68f8      	ldr	r0, [r7, #12]
 8010536:	f7ff fce3 	bl	800ff00 <lfs_dir_split>
 801053a:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 801053c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053e:	2b00      	cmp	r3, #0
 8010540:	d005      	beq.n	801054e <lfs_dir_splittingcompact+0x112>
 8010542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010544:	f113 0f1c 	cmn.w	r3, #28
 8010548:	d001      	beq.n	801054e <lfs_dir_splittingcompact+0x112>
            return err;
 801054a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054c:	e07c      	b.n	8010648 <lfs_dir_splittingcompact+0x20c>
        }

        if (err) {
 801054e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00e      	beq.n	8010572 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	493e      	ldr	r1, [pc, #248]	@ (8010658 <lfs_dir_splittingcompact+0x21c>)
 801055e:	9101      	str	r1, [sp, #4]
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	4613      	mov	r3, r2
 8010564:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 8010568:	493c      	ldr	r1, [pc, #240]	@ (801065c <lfs_dir_splittingcompact+0x220>)
 801056a:	483d      	ldr	r0, [pc, #244]	@ (8010660 <lfs_dir_splittingcompact+0x224>)
 801056c:	f012 fed0 	bl	8023310 <printf>
                    dir->pair[0], dir->pair[1]);
            break;
 8010570:	e004      	b.n	801057c <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8010572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010574:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8010578:	e767      	b.n	801044a <lfs_dir_splittingcompact+0xe>
            break;
 801057a:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 801057c:	68b9      	ldr	r1, [r7, #8]
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f7ff fd3d 	bl	800fffe <lfs_dir_needsrelocation>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d04f      	beq.n	801062a <lfs_dir_splittingcompact+0x1ee>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	2200      	movs	r2, #0
 801058e:	613a      	str	r2, [r7, #16]
 8010590:	2201      	movs	r2, #1
 8010592:	617a      	str	r2, [r7, #20]
 8010594:	f107 0210 	add.w	r2, r7, #16
 8010598:	4611      	mov	r1, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f7fd f950 	bl	800d840 <lfs_pair_cmp>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d141      	bne.n	801062a <lfs_dir_splittingcompact+0x1ee>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_size_(lfs);
 80105a6:	68f8      	ldr	r0, [r7, #12]
 80105a8:	f004 f8ea 	bl	8014780 <lfs_fs_size_>
 80105ac:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 80105ae:	6a3b      	ldr	r3, [r7, #32]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	da01      	bge.n	80105b8 <lfs_dir_splittingcompact+0x17c>
            return size;
 80105b4:	6a3b      	ldr	r3, [r7, #32]
 80105b6:	e047      	b.n	8010648 <lfs_dir_splittingcompact+0x20c>

        // littlefs cannot reclaim expanded superblocks, so expand cautiously
        //
        // if our filesystem is more than ~88% full, don't expand, this is
        // somewhat arbitrary
        if (lfs->block_count - size > lfs->block_count/8) {
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80105bc:	6a3b      	ldr	r3, [r7, #32]
 80105be:	1ad2      	subs	r2, r2, r3
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105c4:	08db      	lsrs	r3, r3, #3
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d92f      	bls.n	801062a <lfs_dir_splittingcompact+0x1ee>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	689b      	ldr	r3, [r3, #8]
 80105ce:	4a22      	ldr	r2, [pc, #136]	@ (8010658 <lfs_dir_splittingcompact+0x21c>)
 80105d0:	9200      	str	r2, [sp, #0]
 80105d2:	f640 0286 	movw	r2, #2182	@ 0x886
 80105d6:	4921      	ldr	r1, [pc, #132]	@ (801065c <lfs_dir_splittingcompact+0x220>)
 80105d8:	4822      	ldr	r0, [pc, #136]	@ (8010664 <lfs_dir_splittingcompact+0x228>)
 80105da:	f012 fe99 	bl	8023310 <printf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80105de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80105e2:	9302      	str	r3, [sp, #8]
 80105e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105ec:	9300      	str	r3, [sp, #0]
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	68b9      	ldr	r1, [r7, #8]
 80105f4:	68f8      	ldr	r0, [r7, #12]
 80105f6:	f7ff fc83 	bl	800ff00 <lfs_dir_split>
 80105fa:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 80105fc:	69fb      	ldr	r3, [r7, #28]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d005      	beq.n	801060e <lfs_dir_splittingcompact+0x1d2>
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	f113 0f1c 	cmn.w	r3, #28
 8010608:	d001      	beq.n	801060e <lfs_dir_splittingcompact+0x1d2>
                return err;
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	e01c      	b.n	8010648 <lfs_dir_splittingcompact+0x20c>
            }

            if (err) {
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d007      	beq.n	8010624 <lfs_dir_splittingcompact+0x1e8>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8010614:	4b10      	ldr	r3, [pc, #64]	@ (8010658 <lfs_dir_splittingcompact+0x21c>)
 8010616:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 801061a:	4910      	ldr	r1, [pc, #64]	@ (801065c <lfs_dir_splittingcompact+0x220>)
 801061c:	4812      	ldr	r0, [pc, #72]	@ (8010668 <lfs_dir_splittingcompact+0x22c>)
 801061e:	f012 fe77 	bl	8023310 <printf>
 8010622:	e002      	b.n	801062a <lfs_dir_splittingcompact+0x1ee>
            } else {
                // duplicate the superblock entry into the new superblock
                end = 1;
 8010624:	2301      	movs	r3, #1
 8010626:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 801062a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801062e:	9302      	str	r3, [sp, #8]
 8010630:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010634:	9301      	str	r3, [sp, #4]
 8010636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	68b9      	ldr	r1, [r7, #8]
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	f7ff fd03 	bl	801004c <lfs_dir_compact>
 8010646:	4603      	mov	r3, r0
}
 8010648:	4618      	mov	r0, r3
 801064a:	3734      	adds	r7, #52	@ 0x34
 801064c:	46bd      	mov	sp, r7
 801064e:	bd90      	pop	{r4, r7, pc}
 8010650:	0800ffa9 	.word	0x0800ffa9
 8010654:	400ffc00 	.word	0x400ffc00
 8010658:	08030968 	.word	0x08030968
 801065c:	08030840 	.word	0x08030840
 8010660:	08030a44 	.word	0x08030a44
 8010664:	08030a74 	.word	0x08030a74
 8010668:	08030aa4 	.word	0x08030aa4

0801066c <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 801066c:	b5b0      	push	{r4, r5, r7, lr}
 801066e:	b0a6      	sub	sp, #152	@ 0x98
 8010670:	af0a      	add	r7, sp, #40	@ 0x28
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
 8010678:	603b      	str	r3, [r7, #0]
    int state = 0;
 801067a:	2300      	movs	r3, #0
 801067c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 801067e:	2300      	movs	r3, #0
 8010680:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8010684:	2300      	movs	r3, #0
 8010686:	667b      	str	r3, [r7, #100]	@ 0x64
 8010688:	e06d      	b.n	8010766 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801068a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801068c:	00db      	lsls	r3, r3, #3
 801068e:	683a      	ldr	r2, [r7, #0]
 8010690:	4413      	add	r3, r2
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4618      	mov	r0, r3
 8010696:	f7fd f99f 	bl	800d9d8 <lfs_tag_type3>
 801069a:	4603      	mov	r3, r0
 801069c:	461a      	mov	r2, r3
 801069e:	f240 4301 	movw	r3, #1025	@ 0x401
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d106      	bne.n	80106b4 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	8a9b      	ldrh	r3, [r3, #20]
 80106aa:	3301      	adds	r3, #1
 80106ac:	b29a      	uxth	r2, r3
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	829a      	strh	r2, [r3, #20]
 80106b2:	e055      	b.n	8010760 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 80106b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80106b6:	00db      	lsls	r3, r3, #3
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	4413      	add	r3, r2
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fd f98a 	bl	800d9d8 <lfs_tag_type3>
 80106c4:	4603      	mov	r3, r0
 80106c6:	461a      	mov	r2, r3
 80106c8:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d114      	bne.n	80106fa <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	8a9b      	ldrh	r3, [r3, #20]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d106      	bne.n	80106e6 <lfs_dir_relocatingcommit+0x7a>
 80106d8:	4ba4      	ldr	r3, [pc, #656]	@ (801096c <lfs_dir_relocatingcommit+0x300>)
 80106da:	4aa5      	ldr	r2, [pc, #660]	@ (8010970 <lfs_dir_relocatingcommit+0x304>)
 80106dc:	f640 01a9 	movw	r1, #2217	@ 0x8a9
 80106e0:	48a4      	ldr	r0, [pc, #656]	@ (8010974 <lfs_dir_relocatingcommit+0x308>)
 80106e2:	f012 fde1 	bl	80232a8 <__assert_func>
            dir->count -= 1;
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	8a9b      	ldrh	r3, [r3, #20]
 80106ea:	3b01      	subs	r3, #1
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80106f2:	2301      	movs	r3, #1
 80106f4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 80106f8:	e032      	b.n	8010760 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80106fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80106fc:	00db      	lsls	r3, r3, #3
 80106fe:	683a      	ldr	r2, [r7, #0]
 8010700:	4413      	add	r3, r2
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4618      	mov	r0, r3
 8010706:	f7fd f947 	bl	800d998 <lfs_tag_type1>
 801070a:	4603      	mov	r3, r0
 801070c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8010710:	d126      	bne.n	8010760 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8010712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010714:	00db      	lsls	r3, r3, #3
 8010716:	683a      	ldr	r2, [r7, #0]
 8010718:	4413      	add	r3, r2
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8010722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010724:	00db      	lsls	r3, r3, #3
 8010726:	683a      	ldr	r2, [r7, #0]
 8010728:	4413      	add	r3, r2
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	685a      	ldr	r2, [r3, #4]
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8010732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010734:	00db      	lsls	r3, r3, #3
 8010736:	683a      	ldr	r2, [r7, #0]
 8010738:	4413      	add	r3, r2
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	4618      	mov	r0, r3
 801073e:	f7fd f95b 	bl	800d9f8 <lfs_tag_chunk>
 8010742:	4603      	mov	r3, r0
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	2b00      	cmp	r3, #0
 801074a:	bf14      	ite	ne
 801074c:	2301      	movne	r3, #1
 801074e:	2300      	moveq	r3, #0
 8010750:	b2da      	uxtb	r2, r3
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	3318      	adds	r3, #24
 801075a:	4618      	mov	r0, r3
 801075c:	f7fd f8c7 	bl	800d8ee <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8010760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010762:	3301      	adds	r3, #1
 8010764:	667b      	str	r3, [r7, #100]	@ 0x64
 8010766:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010768:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801076c:	429a      	cmp	r2, r3
 801076e:	db8c      	blt.n	801068a <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8010770:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010774:	2b00      	cmp	r3, #0
 8010776:	d02b      	beq.n	80107d0 <lfs_dir_relocatingcommit+0x164>
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	8a9b      	ldrh	r3, [r3, #20]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d127      	bne.n	80107d0 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8010780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010784:	2b00      	cmp	r3, #0
 8010786:	d106      	bne.n	8010796 <lfs_dir_relocatingcommit+0x12a>
 8010788:	4b7b      	ldr	r3, [pc, #492]	@ (8010978 <lfs_dir_relocatingcommit+0x30c>)
 801078a:	4a79      	ldr	r2, [pc, #484]	@ (8010970 <lfs_dir_relocatingcommit+0x304>)
 801078c:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 8010790:	4878      	ldr	r0, [pc, #480]	@ (8010974 <lfs_dir_relocatingcommit+0x308>)
 8010792:	f012 fd89 	bl	80232a8 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801079c:	4619      	mov	r1, r3
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f003 fb4a 	bl	8013e38 <lfs_fs_pred>
 80107a4:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 80107a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d005      	beq.n	80107b8 <lfs_dir_relocatingcommit+0x14c>
 80107ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80107ae:	f113 0f02 	cmn.w	r3, #2
 80107b2:	d001      	beq.n	80107b8 <lfs_dir_relocatingcommit+0x14c>
            return err;
 80107b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80107b6:	e210      	b.n	8010bda <lfs_dir_relocatingcommit+0x56e>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 80107b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80107ba:	f113 0f02 	cmn.w	r3, #2
 80107be:	d007      	beq.n	80107d0 <lfs_dir_relocatingcommit+0x164>
 80107c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80107c4:	7ddb      	ldrb	r3, [r3, #23]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d002      	beq.n	80107d0 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 80107ca:	2302      	movs	r3, #2
 80107cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 80107ce:	e121      	b.n	8010a14 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	7d9b      	ldrb	r3, [r3, #22]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f000 80fb 	beq.w	80109d0 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 80107de:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80107e4:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 80107ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80107ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 80107f6:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80107fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d004      	beq.n	801080c <lfs_dir_relocatingcommit+0x1a0>
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010808:	3b08      	subs	r3, #8
 801080a:	e003      	b.n	8010814 <lfs_dir_relocatingcommit+0x1a8>
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010812:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8010814:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	3318      	adds	r3, #24
 801081a:	4618      	mov	r0, r3
 801081c:	f7fd f881 	bl	800d922 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	68da      	ldr	r2, [r3, #12]
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801082c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010830:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8010832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010836:	9308      	str	r3, [sp, #32]
 8010838:	4b50      	ldr	r3, [pc, #320]	@ (801097c <lfs_dir_relocatingcommit+0x310>)
 801083a:	9307      	str	r3, [sp, #28]
 801083c:	2300      	movs	r3, #0
 801083e:	9306      	str	r3, [sp, #24]
 8010840:	2300      	movs	r3, #0
 8010842:	9305      	str	r3, [sp, #20]
 8010844:	2300      	movs	r3, #0
 8010846:	9304      	str	r3, [sp, #16]
 8010848:	2300      	movs	r3, #0
 801084a:	9303      	str	r3, [sp, #12]
 801084c:	2300      	movs	r3, #0
 801084e:	9302      	str	r3, [sp, #8]
 8010850:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010854:	9301      	str	r3, [sp, #4]
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	9300      	str	r3, [sp, #0]
 801085a:	460b      	mov	r3, r1
 801085c:	68b9      	ldr	r1, [r7, #8]
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f7fd feb2 	bl	800e5c8 <lfs_dir_traverse>
 8010864:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	3318      	adds	r3, #24
 801086a:	4618      	mov	r0, r3
 801086c:	f7fd f83f 	bl	800d8ee <lfs_pair_fromle32>
        if (err) {
 8010870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010872:	2b00      	cmp	r3, #0
 8010874:	d00b      	beq.n	801088e <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010878:	f113 0f1c 	cmn.w	r3, #28
 801087c:	f000 80aa 	beq.w	80109d4 <lfs_dir_relocatingcommit+0x368>
 8010880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010882:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010886:	f000 80a5 	beq.w	80109d4 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 801088a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801088c:	e1a5      	b.n	8010bda <lfs_dir_relocatingcommit+0x56e>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 801088e:	f107 031c 	add.w	r3, r7, #28
 8010892:	2200      	movs	r2, #0
 8010894:	601a      	str	r2, [r3, #0]
 8010896:	605a      	str	r2, [r3, #4]
 8010898:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80108a0:	f107 031c 	add.w	r3, r7, #28
 80108a4:	4611      	mov	r1, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fd f8f1 	bl	800da8e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80108b2:	f107 031c 	add.w	r3, r7, #28
 80108b6:	4611      	mov	r1, r2
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fd f8e8 	bl	800da8e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80108c4:	f107 031c 	add.w	r3, r7, #28
 80108c8:	4611      	mov	r1, r2
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fd f8df 	bl	800da8e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80108d6:	f023 0303 	bic.w	r3, r3, #3
 80108da:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 80108dc:	f107 031c 	add.w	r3, r7, #28
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fd f8f9 	bl	800dad8 <lfs_gstate_iszero>
 80108e6:	4603      	mov	r3, r0
 80108e8:	f083 0301 	eor.w	r3, r3, #1
 80108ec:	b2db      	uxtb	r3, r3
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d027      	beq.n	8010942 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 80108f2:	f107 031c 	add.w	r3, r7, #28
 80108f6:	461a      	mov	r2, r3
 80108f8:	68b9      	ldr	r1, [r7, #8]
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	f7fe fe34 	bl	800f568 <lfs_dir_getgstate>
 8010900:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 8010902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010904:	2b00      	cmp	r3, #0
 8010906:	d001      	beq.n	801090c <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8010908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801090a:	e166      	b.n	8010bda <lfs_dir_relocatingcommit+0x56e>
            }

            lfs_gstate_tole32(&delta);
 801090c:	f107 031c 	add.w	r3, r7, #28
 8010910:	4618      	mov	r0, r3
 8010912:	f7fd f987 	bl	800dc24 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8010916:	f107 031c 	add.w	r3, r7, #28
 801091a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801091e:	4a18      	ldr	r2, [pc, #96]	@ (8010980 <lfs_dir_relocatingcommit+0x314>)
 8010920:	68f8      	ldr	r0, [r7, #12]
 8010922:	f7ff f847 	bl	800f9b4 <lfs_dir_commitattr>
 8010926:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8010928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801092a:	2b00      	cmp	r3, #0
 801092c:	d009      	beq.n	8010942 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801092e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010930:	f113 0f1c 	cmn.w	r3, #28
 8010934:	d050      	beq.n	80109d8 <lfs_dir_relocatingcommit+0x36c>
 8010936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010938:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801093c:	d04c      	beq.n	80109d8 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 801093e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010940:	e14b      	b.n	8010bda <lfs_dir_relocatingcommit+0x56e>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8010942:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010946:	4619      	mov	r1, r3
 8010948:	68f8      	ldr	r0, [r7, #12]
 801094a:	f7ff f8b3 	bl	800fab4 <lfs_dir_commitcrc>
 801094e:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 8010950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010952:	2b00      	cmp	r3, #0
 8010954:	d016      	beq.n	8010984 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010958:	f113 0f1c 	cmn.w	r3, #28
 801095c:	d03e      	beq.n	80109dc <lfs_dir_relocatingcommit+0x370>
 801095e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010960:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8010964:	d03a      	beq.n	80109dc <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8010966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010968:	e137      	b.n	8010bda <lfs_dir_relocatingcommit+0x56e>
 801096a:	bf00      	nop
 801096c:	08030ad0 	.word	0x08030ad0
 8010970:	0803430c 	.word	0x0803430c
 8010974:	08030840 	.word	0x08030840
 8010978:	08030ae0 	.word	0x08030ae0
 801097c:	0800ffd5 	.word	0x0800ffd5
 8010980:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8010984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010986:	68fa      	ldr	r2, [r7, #12]
 8010988:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801098a:	6a12      	ldr	r2, [r2, #32]
 801098c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010990:	fb01 f202 	mul.w	r2, r1, r2
 8010994:	1a9b      	subs	r3, r3, r2
 8010996:	2b00      	cmp	r3, #0
 8010998:	d006      	beq.n	80109a8 <lfs_dir_relocatingcommit+0x33c>
 801099a:	4b92      	ldr	r3, [pc, #584]	@ (8010be4 <lfs_dir_relocatingcommit+0x578>)
 801099c:	4a92      	ldr	r2, [pc, #584]	@ (8010be8 <lfs_dir_relocatingcommit+0x57c>)
 801099e:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80109a2:	4892      	ldr	r0, [pc, #584]	@ (8010bec <lfs_dir_relocatingcommit+0x580>)
 80109a4:	f012 fc80 	bl	80232a8 <__assert_func>
        dir->off = commit.off;
 80109a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80109ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	68fa      	ldr	r2, [r7, #12]
 80109b8:	333c      	adds	r3, #60	@ 0x3c
 80109ba:	3230      	adds	r2, #48	@ 0x30
 80109bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80109be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	3348      	adds	r3, #72	@ 0x48
 80109c6:	2200      	movs	r2, #0
 80109c8:	601a      	str	r2, [r3, #0]
 80109ca:	605a      	str	r2, [r3, #4]
 80109cc:	609a      	str	r2, [r3, #8]
 80109ce:	e021      	b.n	8010a14 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 80109d0:	bf00      	nop
 80109d2:	e004      	b.n	80109de <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80109d4:	bf00      	nop
 80109d6:	e002      	b.n	80109de <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 80109d8:	bf00      	nop
 80109da:	e000      	b.n	80109de <lfs_dir_relocatingcommit+0x372>
                goto compact;
 80109dc:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	3310      	adds	r3, #16
 80109e2:	4619      	mov	r1, r3
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7fc fb64 	bl	800d0b2 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	8a9b      	ldrh	r3, [r3, #20]
 80109ee:	9302      	str	r3, [sp, #8]
 80109f0:	2300      	movs	r3, #0
 80109f2:	9301      	str	r3, [sp, #4]
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80109fc:	683a      	ldr	r2, [r7, #0]
 80109fe:	68b9      	ldr	r1, [r7, #8]
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f7ff fd1b 	bl	801043c <lfs_dir_splittingcompact>
 8010a06:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8010a08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	da01      	bge.n	8010a12 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8010a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010a10:	e0e3      	b.n	8010bda <lfs_dir_relocatingcommit+0x56e>
    }

    goto fixmlist;
 8010a12:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8010a28:	e0d2      	b.n	8010bd0 <lfs_dir_relocatingcommit+0x564>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8010a2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a2c:	3308      	adds	r3, #8
 8010a2e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8010a32:	4611      	mov	r1, r2
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7fc ff03 	bl	800d840 <lfs_pair_cmp>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f040 80c4 	bne.w	8010bca <lfs_dir_relocatingcommit+0x55e>
            d->m = *dir;
 8010a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a44:	68ba      	ldr	r2, [r7, #8]
 8010a46:	f103 0408 	add.w	r4, r3, #8
 8010a4a:	4615      	mov	r5, r2
 8010a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8010a58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a5a:	3308      	adds	r3, #8
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	f000 80a9 	beq.w	8010bb6 <lfs_dir_relocatingcommit+0x54a>
                for (int i = 0; i < attrcount; i++) {
 8010a64:	2300      	movs	r3, #0
 8010a66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010a68:	e07b      	b.n	8010b62 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a6c:	00db      	lsls	r3, r3, #3
 8010a6e:	683a      	ldr	r2, [r7, #0]
 8010a70:	4413      	add	r3, r2
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fc ffaf 	bl	800d9d8 <lfs_tag_type3>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d115      	bne.n	8010ab2 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8010a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010a88:	889c      	ldrh	r4, [r3, #4]
 8010a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a8c:	00db      	lsls	r3, r3, #3
 8010a8e:	683a      	ldr	r2, [r7, #0]
 8010a90:	4413      	add	r3, r2
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fc ffc9 	bl	800da2c <lfs_tag_id>
 8010a9a:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010a9c:	429c      	cmp	r4, r3
 8010a9e:	d108      	bne.n	8010ab2 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8010aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010aa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010aa6:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8010aa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010aaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010aae:	60da      	str	r2, [r3, #12]
 8010ab0:	e054      	b.n	8010b5c <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ab4:	00db      	lsls	r3, r3, #3
 8010ab6:	683a      	ldr	r2, [r7, #0]
 8010ab8:	4413      	add	r3, r2
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fc ff8b 	bl	800d9d8 <lfs_tag_type3>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d11c      	bne.n	8010b08 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8010ace:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ad0:	889c      	ldrh	r4, [r3, #4]
 8010ad2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ad4:	00db      	lsls	r3, r3, #3
 8010ad6:	683a      	ldr	r2, [r7, #0]
 8010ad8:	4413      	add	r3, r2
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fc ffa5 	bl	800da2c <lfs_tag_id>
 8010ae2:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010ae4:	429c      	cmp	r4, r3
 8010ae6:	d90f      	bls.n	8010b08 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8010ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010aea:	889b      	ldrh	r3, [r3, #4]
 8010aec:	3b01      	subs	r3, #1
 8010aee:	b29a      	uxth	r2, r3
 8010af0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010af2:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8010af4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010af6:	799b      	ldrb	r3, [r3, #6]
 8010af8:	2b02      	cmp	r3, #2
 8010afa:	d12f      	bne.n	8010b5c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8010afc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b00:	1e5a      	subs	r2, r3, #1
 8010b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b04:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8010b06:	e029      	b.n	8010b5c <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8010b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	683a      	ldr	r2, [r7, #0]
 8010b0e:	4413      	add	r3, r2
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fc ff60 	bl	800d9d8 <lfs_tag_type3>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	f240 4301 	movw	r3, #1025	@ 0x401
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d11b      	bne.n	8010b5c <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8010b24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b26:	889c      	ldrh	r4, [r3, #4]
 8010b28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	683a      	ldr	r2, [r7, #0]
 8010b2e:	4413      	add	r3, r2
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fc ff7a 	bl	800da2c <lfs_tag_id>
 8010b38:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8010b3a:	429c      	cmp	r4, r3
 8010b3c:	d30e      	bcc.n	8010b5c <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8010b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b40:	889b      	ldrh	r3, [r3, #4]
 8010b42:	3301      	adds	r3, #1
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b48:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8010b4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b4c:	799b      	ldrb	r3, [r3, #6]
 8010b4e:	2b02      	cmp	r3, #2
 8010b50:	d104      	bne.n	8010b5c <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8010b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b56:	1c5a      	adds	r2, r3, #1
 8010b58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b5a:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 8010b5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010b5e:	3301      	adds	r3, #1
 8010b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010b62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	f6ff af7e 	blt.w	8010a6a <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8010b6e:	e022      	b.n	8010bb6 <lfs_dir_relocatingcommit+0x54a>
                // we split and id is on tail now
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 8010b70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b72:	f103 0220 	add.w	r2, r3, #32
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	3320      	adds	r3, #32
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	4610      	mov	r0, r2
 8010b7e:	f7fc fe5f 	bl	800d840 <lfs_pair_cmp>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d007      	beq.n	8010b98 <lfs_dir_relocatingcommit+0x52c>
                    d->id -= d->m.count;
 8010b88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b8a:	889a      	ldrh	r2, [r3, #4]
 8010b8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b8e:	8b9b      	ldrh	r3, [r3, #28]
 8010b90:	1ad3      	subs	r3, r2, r3
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b96:	809a      	strh	r2, [r3, #4]
                }
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8010b98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010b9a:	f103 0108 	add.w	r1, r3, #8
 8010b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ba0:	3320      	adds	r3, #32
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	68f8      	ldr	r0, [r7, #12]
 8010ba6:	f7fe fcc3 	bl	800f530 <lfs_dir_fetch>
 8010baa:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 8010bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <lfs_dir_relocatingcommit+0x54a>
                    return err;
 8010bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bb4:	e011      	b.n	8010bda <lfs_dir_relocatingcommit+0x56e>
            while (d->id >= d->m.count && d->m.split) {
 8010bb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010bb8:	889a      	ldrh	r2, [r3, #4]
 8010bba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010bbc:	8b9b      	ldrh	r3, [r3, #28]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d303      	bcc.n	8010bca <lfs_dir_relocatingcommit+0x55e>
 8010bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010bc4:	7fdb      	ldrb	r3, [r3, #31]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1d2      	bne.n	8010b70 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	663b      	str	r3, [r7, #96]	@ 0x60
 8010bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f47f af29 	bne.w	8010a2a <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8010bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3770      	adds	r7, #112	@ 0x70
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bdb0      	pop	{r4, r5, r7, pc}
 8010be2:	bf00      	nop
 8010be4:	080309c0 	.word	0x080309c0
 8010be8:	0803430c 	.word	0x0803430c
 8010bec:	08030840 	.word	0x08030840

08010bf0 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8010bf0:	b5b0      	push	{r4, r5, r7, lr}
 8010bf2:	b0bc      	sub	sp, #240	@ 0xf0
 8010bf4:	af04      	add	r7, sp, #16
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
 8010bfc:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010c06:	e045      	b.n	8010c94 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8010c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c0c:	3308      	adds	r3, #8
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d03a      	beq.n	8010c8a <lfs_dir_orphaningcommit+0x9a>
 8010c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c18:	3308      	adds	r3, #8
 8010c1a:	68ba      	ldr	r2, [r7, #8]
 8010c1c:	4611      	mov	r1, r2
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fc fe0e 	bl	800d840 <lfs_pair_cmp>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d12f      	bne.n	8010c8a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8010c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c2e:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d12a      	bne.n	8010c8a <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8010c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d023      	beq.n	8010c8a <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8010c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d91b      	bls.n	8010c8a <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8010c52:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f001 fa3e 	bl	80120d8 <lfs_file_outline>
 8010c5c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8010c60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <lfs_dir_orphaningcommit+0x7e>
                return err;
 8010c68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010c6c:	e2ad      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8010c6e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f001 fa52 	bl	801211c <lfs_file_flush>
 8010c78:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 8010c7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d002      	beq.n	8010c8a <lfs_dir_orphaningcommit+0x9a>
                return err;
 8010c84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010c88:	e29f      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8010c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d1b5      	bne.n	8010c08 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010cb2:	461d      	mov	r5, r3
 8010cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8010cc0:	68ba      	ldr	r2, [r7, #8]
 8010cc2:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8010cc6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8010cca:	9301      	str	r3, [sp, #4]
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	68f8      	ldr	r0, [r7, #12]
 8010cd4:	f7ff fcca 	bl	801066c <lfs_dir_relocatingcommit>
 8010cd8:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8010cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	da02      	bge.n	8010cea <lfs_dir_orphaningcommit+0xfa>
        return state;
 8010ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010ce8:	e26f      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8010cf0:	4611      	mov	r1, r2
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fc fda4 	bl	800d840 <lfs_pair_cmp>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d109      	bne.n	8010d12 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	461d      	mov	r5, r3
 8010d02:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010d0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8010d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010d16:	2b02      	cmp	r3, #2
 8010d18:	d14a      	bne.n	8010db0 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	3348      	adds	r3, #72	@ 0x48
 8010d1e:	461a      	mov	r2, r3
 8010d20:	68b9      	ldr	r1, [r7, #8]
 8010d22:	68f8      	ldr	r0, [r7, #12]
 8010d24:	f7fe fc20 	bl	800f568 <lfs_dir_getgstate>
 8010d28:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8010d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <lfs_dir_orphaningcommit+0x14a>
            return err;
 8010d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8010d38:	e247      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8010d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 8010d40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	3318      	adds	r3, #24
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fc fde9 	bl	800d922 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	7ddb      	ldrb	r3, [r3, #23]
 8010d54:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8010d58:	051a      	lsls	r2, r3, #20
 8010d5a:	4bc2      	ldr	r3, [pc, #776]	@ (8011064 <lfs_dir_orphaningcommit+0x474>)
 8010d5c:	4313      	orrs	r3, r2
 8010d5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	3318      	adds	r3, #24
 8010d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010d66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010d6a:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8010d6e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010d72:	2000      	movs	r0, #0
 8010d74:	9001      	str	r0, [sp, #4]
 8010d76:	2001      	movs	r0, #1
 8010d78:	9000      	str	r0, [sp, #0]
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	f7ff fc76 	bl	801066c <lfs_dir_relocatingcommit>
 8010d80:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	3318      	adds	r3, #24
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fc fdb0 	bl	800d8ee <lfs_pair_fromle32>
        if (state < 0) {
 8010d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	da02      	bge.n	8010d9c <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8010d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010d9a:	e216      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8010d9c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010da0:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8010da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010da8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8010db0:	2300      	movs	r3, #0
 8010db2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 8010db6:	e1fc      	b.n	80111b2 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8010db8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8010dbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8010dc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010dc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010dc8:	4ca7      	ldr	r4, [pc, #668]	@ (8011068 <lfs_dir_orphaningcommit+0x478>)
 8010dca:	9403      	str	r4, [sp, #12]
 8010dcc:	9102      	str	r1, [sp, #8]
 8010dce:	9201      	str	r2, [sp, #4]
 8010dd0:	9300      	str	r3, [sp, #0]
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	f640 128c 	movw	r2, #2444	@ 0x98c
 8010dd8:	49a4      	ldr	r1, [pc, #656]	@ (801106c <lfs_dir_orphaningcommit+0x47c>)
 8010dda:	48a5      	ldr	r0, [pc, #660]	@ (8011070 <lfs_dir_orphaningcommit+0x480>)
 8010ddc:	f012 fa98 	bl	8023310 <printf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8010de0:	2300      	movs	r3, #0
 8010de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	f103 0220 	add.w	r2, r3, #32
 8010dec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010df0:	4611      	mov	r1, r2
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7fc fd24 	bl	800d840 <lfs_pair_cmp>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d107      	bne.n	8010e0e <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8010dfe:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8010e06:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010e16:	e037      	b.n	8010e88 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8010e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e1c:	f103 0208 	add.w	r2, r3, #8
 8010e20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010e24:	4611      	mov	r1, r2
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fc fd0a 	bl	800d840 <lfs_pair_cmp>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d109      	bne.n	8010e46 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8010e32:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010e36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e3a:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8010e3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010e40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e44:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8010e46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e4a:	799b      	ldrb	r3, [r3, #6]
 8010e4c:	2b02      	cmp	r3, #2
 8010e4e:	d116      	bne.n	8010e7e <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8010e50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e54:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8010e58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fc fcee 	bl	800d840 <lfs_pair_cmp>
 8010e64:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d109      	bne.n	8010e7e <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8010e6a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e72:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8010e74:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8010e78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010e7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010e88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d1c3      	bne.n	8010e18 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 8010e90:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010e94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8010e98:	4619      	mov	r1, r3
 8010e9a:	68f8      	ldr	r0, [r7, #12]
 8010e9c:	f003 f87e 	bl	8013f9c <lfs_fs_parent>
 8010ea0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8010ea4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	da07      	bge.n	8010ebc <lfs_dir_orphaningcommit+0x2cc>
 8010eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010eb0:	f113 0f02 	cmn.w	r3, #2
 8010eb4:	d002      	beq.n	8010ebc <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 8010eb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010eba:	e186      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8010ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010ec0:	f113 0f02 	cmn.w	r3, #2
 8010ec4:	bf14      	ite	ne
 8010ec6:	2301      	movne	r3, #1
 8010ec8:	2300      	moveq	r3, #0
 8010eca:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 8010ece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010ed2:	f113 0f02 	cmn.w	r3, #2
 8010ed6:	f000 809e 	beq.w	8011016 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8010eda:	2101      	movs	r1, #1
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f003 f8f5 	bl	80140cc <lfs_fs_preporphans>
 8010ee2:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8010ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d002      	beq.n	8010ef4 <lfs_dir_orphaningcommit+0x304>
                return err;
 8010eee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8010ef2:	e16a      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8010ef4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8010ef8:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	3330      	adds	r3, #48	@ 0x30
 8010f00:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8010f04:	4611      	mov	r1, r2
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fc fe4c 	bl	800dba4 <lfs_gstate_hasmovehere>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d02d      	beq.n	8010f6e <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fc fd88 	bl	800da2c <lfs_tag_id>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 8010f22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010f24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010f26:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8010f2a:	484f      	ldr	r0, [pc, #316]	@ (8011068 <lfs_dir_orphaningcommit+0x478>)
 8010f2c:	9002      	str	r0, [sp, #8]
 8010f2e:	9201      	str	r2, [sp, #4]
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	460b      	mov	r3, r1
 8010f34:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 8010f38:	494c      	ldr	r1, [pc, #304]	@ (801106c <lfs_dir_orphaningcommit+0x47c>)
 8010f3a:	484e      	ldr	r0, [pc, #312]	@ (8011074 <lfs_dir_orphaningcommit+0x484>)
 8010f3c:	f012 f9e8 	bl	8023310 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8010f40:	2200      	movs	r2, #0
 8010f42:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f003 f910 	bl	801416c <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8010f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7fc fd6b 	bl	800da2c <lfs_tag_id>
 8010f56:	4603      	mov	r3, r0
 8010f58:	461a      	mov	r2, r3
 8010f5a:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d205      	bcs.n	8010f6e <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8010f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010f66:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8010f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8010f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010f70:	657b      	str	r3, [r7, #84]	@ 0x54
 8010f72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010f74:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 8010f76:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fc fcd1 	bl	800d922 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8010f80:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010f84:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010f88:	4293      	cmp	r3, r2
 8010f8a:	d007      	beq.n	8010f9c <lfs_dir_orphaningcommit+0x3ac>
 8010f8c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8010f90:	029b      	lsls	r3, r3, #10
 8010f92:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8010f96:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8010f9a:	e000      	b.n	8010f9e <lfs_dir_orphaningcommit+0x3ae>
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8010fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010faa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8010fb0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8010fb4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8010fb8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8010fbc:	2000      	movs	r0, #0
 8010fbe:	9001      	str	r0, [sp, #4]
 8010fc0:	2002      	movs	r0, #2
 8010fc2:	9000      	str	r0, [sp, #0]
 8010fc4:	68f8      	ldr	r0, [r7, #12]
 8010fc6:	f7ff fb51 	bl	801066c <lfs_dir_relocatingcommit>
 8010fca:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8010fce:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fc fc8b 	bl	800d8ee <lfs_pair_fromle32>
            if (state < 0) {
 8010fd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	da02      	bge.n	8010fe6 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8010fe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010fe4:	e0f1      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8010fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d113      	bne.n	8011016 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8010fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8010ff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8010ffa:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8010ffe:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 8011002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011006:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801100a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 801100e:	2301      	movs	r3, #1
 8011010:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8011014:	e0cd      	b.n	80111b2 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8011016:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 801101a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801101e:	4619      	mov	r1, r3
 8011020:	68f8      	ldr	r0, [r7, #12]
 8011022:	f002 ff09 	bl	8013e38 <lfs_fs_pred>
 8011026:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 801102a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801102e:	2b00      	cmp	r3, #0
 8011030:	d007      	beq.n	8011042 <lfs_dir_orphaningcommit+0x452>
 8011032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011036:	f113 0f02 	cmn.w	r3, #2
 801103a:	d002      	beq.n	8011042 <lfs_dir_orphaningcommit+0x452>
            return err;
 801103c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011040:	e0c3      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8011042:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8011046:	2b00      	cmp	r3, #0
 8011048:	d01a      	beq.n	8011080 <lfs_dir_orphaningcommit+0x490>
 801104a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801104e:	f113 0f02 	cmn.w	r3, #2
 8011052:	d115      	bne.n	8011080 <lfs_dir_orphaningcommit+0x490>
 8011054:	4b08      	ldr	r3, [pc, #32]	@ (8011078 <lfs_dir_orphaningcommit+0x488>)
 8011056:	4a09      	ldr	r2, [pc, #36]	@ (801107c <lfs_dir_orphaningcommit+0x48c>)
 8011058:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 801105c:	4803      	ldr	r0, [pc, #12]	@ (801106c <lfs_dir_orphaningcommit+0x47c>)
 801105e:	f012 f923 	bl	80232a8 <__assert_func>
 8011062:	bf00      	nop
 8011064:	000ffc08 	.word	0x000ffc08
 8011068:	08030968 	.word	0x08030968
 801106c:	08030840 	.word	0x08030840
 8011070:	08030ae8 	.word	0x08030ae8
 8011074:	08030b24 	.word	0x08030b24
 8011078:	08030b68 	.word	0x08030b68
 801107c:	08034328 	.word	0x08034328

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8011080:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011084:	f113 0f02 	cmn.w	r3, #2
 8011088:	f000 8093 	beq.w	80111b2 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	3330      	adds	r3, #48	@ 0x30
 8011090:	4618      	mov	r0, r3
 8011092:	f7fc fd3e 	bl	800db12 <lfs_gstate_hasorphans>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d011      	beq.n	80110c0 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 801109c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80110a0:	425b      	negs	r3, r3
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	b25b      	sxtb	r3, r3
 80110a6:	4619      	mov	r1, r3
 80110a8:	68f8      	ldr	r0, [r7, #12]
 80110aa:	f003 f80f 	bl	80140cc <lfs_fs_preporphans>
 80110ae:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 80110b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d002      	beq.n	80110c0 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80110ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80110be:	e084      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80110c0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80110c4:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	3330      	adds	r3, #48	@ 0x30
 80110cc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80110d0:	4611      	mov	r1, r2
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7fc fd66 	bl	800dba4 <lfs_gstate_hasmovehere>
 80110d8:	4603      	mov	r3, r0
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d01c      	beq.n	8011118 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7fc fca2 	bl	800da2c <lfs_tag_id>
 80110e8:	4603      	mov	r3, r0
 80110ea:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 80110ee:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80110f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80110f2:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 80110f6:	4837      	ldr	r0, [pc, #220]	@ (80111d4 <lfs_dir_orphaningcommit+0x5e4>)
 80110f8:	9002      	str	r0, [sp, #8]
 80110fa:	9201      	str	r2, [sp, #4]
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	460b      	mov	r3, r1
 8011100:	f640 12ed 	movw	r2, #2541	@ 0x9ed
 8011104:	4934      	ldr	r1, [pc, #208]	@ (80111d8 <lfs_dir_orphaningcommit+0x5e8>)
 8011106:	4835      	ldr	r0, [pc, #212]	@ (80111dc <lfs_dir_orphaningcommit+0x5ec>)
 8011108:	f012 f902 	bl	8023310 <printf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 801110c:	2200      	movs	r2, #0
 801110e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8011112:	68f8      	ldr	r0, [r7, #12]
 8011114:	f003 f82a 	bl	801416c <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8011118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801111a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 801111e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8011124:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011128:	4618      	mov	r0, r3
 801112a:	f7fc fbfa 	bl	800d922 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 801112e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8011132:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011136:	4293      	cmp	r3, r2
 8011138:	d007      	beq.n	801114a <lfs_dir_orphaningcommit+0x55a>
 801113a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801113e:	029b      	lsls	r3, r3, #10
 8011140:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8011144:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8011148:	e000      	b.n	801114c <lfs_dir_orphaningcommit+0x55c>
 801114a:	2300      	movs	r3, #0
 801114c:	627b      	str	r3, [r7, #36]	@ 0x24
 801114e:	2300      	movs	r3, #0
 8011150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011152:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011156:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 801115a:	051a      	lsls	r2, r3, #20
 801115c:	4b20      	ldr	r3, [pc, #128]	@ (80111e0 <lfs_dir_orphaningcommit+0x5f0>)
 801115e:	4313      	orrs	r3, r2
 8011160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011162:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011166:	633b      	str	r3, [r7, #48]	@ 0x30
 8011168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801116c:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8011170:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8011174:	2000      	movs	r0, #0
 8011176:	9001      	str	r0, [sp, #4]
 8011178:	2002      	movs	r0, #2
 801117a:	9000      	str	r0, [sp, #0]
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f7ff fa75 	bl	801066c <lfs_dir_relocatingcommit>
 8011182:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8011186:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801118a:	4618      	mov	r0, r3
 801118c:	f7fc fbaf 	bl	800d8ee <lfs_pair_fromle32>
            if (state < 0) {
 8011190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011194:	2b00      	cmp	r3, #0
 8011196:	da02      	bge.n	801119e <lfs_dir_orphaningcommit+0x5ae>
                return state;
 8011198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801119c:	e015      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 801119e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80111a2:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80111a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80111aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80111ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80111b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80111b6:	2b01      	cmp	r3, #1
 80111b8:	f43f adfe 	beq.w	8010db8 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80111bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d001      	beq.n	80111c8 <lfs_dir_orphaningcommit+0x5d8>
 80111c4:	2303      	movs	r3, #3
 80111c6:	e000      	b.n	80111ca <lfs_dir_orphaningcommit+0x5da>
 80111c8:	2300      	movs	r3, #0
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	37e0      	adds	r7, #224	@ 0xe0
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bdb0      	pop	{r4, r5, r7, pc}
 80111d2:	bf00      	nop
 80111d4:	08030968 	.word	0x08030968
 80111d8:	08030840 	.word	0x08030840
 80111dc:	08030b24 	.word	0x08030b24
 80111e0:	000ffc08 	.word	0x000ffc08

080111e4 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b086      	sub	sp, #24
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	60f8      	str	r0, [r7, #12]
 80111ec:	60b9      	str	r1, [r7, #8]
 80111ee:	607a      	str	r2, [r7, #4]
 80111f0:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	68b9      	ldr	r1, [r7, #8]
 80111f8:	68f8      	ldr	r0, [r7, #12]
 80111fa:	f7ff fcf9 	bl	8010bf0 <lfs_dir_orphaningcommit>
 80111fe:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	2b00      	cmp	r3, #0
 8011204:	da01      	bge.n	801120a <lfs_dir_commit+0x26>
        return orphans;
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	e00d      	b.n	8011226 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d009      	beq.n	8011224 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8011210:	2100      	movs	r1, #0
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f003 f8cc 	bl	80143b0 <lfs_fs_deorphan>
 8011218:	6138      	str	r0, [r7, #16]
        if (err) {
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <lfs_dir_commit+0x40>
            return err;
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	e000      	b.n	8011226 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3718      	adds	r7, #24
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
	...

08011230 <lfs_mkdir_>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_mkdir_(lfs_t *lfs, const char *path) {
 8011230:	b5b0      	push	{r4, r5, r7, lr}
 8011232:	b0b8      	sub	sp, #224	@ 0xe0
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f003 fa68 	bl	8014710 <lfs_fs_forceconsistency>
 8011240:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8011244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011248:	2b00      	cmp	r3, #0
 801124a:	d002      	beq.n	8011252 <lfs_mkdir_+0x22>
        return err;
 801124c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011250:	e128      	b.n	80114a4 <lfs_mkdir_+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801125a:	f107 00ae 	add.w	r0, r7, #174	@ 0xae
 801125e:	463a      	mov	r2, r7
 8011260:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8011264:	f103 0108 	add.w	r1, r3, #8
 8011268:	4603      	mov	r3, r0
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f7fe fa72 	bl	800f754 <lfs_dir_find>
 8011270:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8011274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011278:	f113 0f02 	cmn.w	r3, #2
 801127c:	d105      	bne.n	801128a <lfs_mkdir_+0x5a>
 801127e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8011282:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011286:	4293      	cmp	r3, r2
 8011288:	d109      	bne.n	801129e <lfs_mkdir_+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801128a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801128e:	2b00      	cmp	r3, #0
 8011290:	da02      	bge.n	8011298 <lfs_mkdir_+0x68>
 8011292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011296:	e105      	b.n	80114a4 <lfs_mkdir_+0x274>
 8011298:	f06f 0310 	mvn.w	r3, #16
 801129c:	e102      	b.n	80114a4 <lfs_mkdir_+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7ee fffd 	bl	80002a0 <strlen>
 80112a6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    if (nlen > lfs->name_max) {
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112ae:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d902      	bls.n	80112bc <lfs_mkdir_+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80112b6:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80112ba:	e0f3      	b.n	80114a4 <lfs_mkdir_+0x274>
    }

    // build up new directory
    lfs_alloc_ckpoint(lfs);
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7fc fe1c 	bl	800defa <lfs_alloc_ckpoint>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80112c2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80112c6:	4619      	mov	r1, r3
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f7fe fd63 	bl	800fd94 <lfs_dir_alloc>
 80112ce:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 80112d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d002      	beq.n	80112e0 <lfs_mkdir_+0xb0>
        return err;
 80112da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80112de:	e0e1      	b.n	80114a4 <lfs_mkdir_+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 80112e0:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 80112e4:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
 80112e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80112f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 80112f4:	e012      	b.n	801131c <lfs_mkdir_+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 80112f6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80112fa:	f103 0218 	add.w	r2, r3, #24
 80112fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011302:	4619      	mov	r1, r3
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7fe f913 	bl	800f530 <lfs_dir_fetch>
 801130a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 801130e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011312:	2b00      	cmp	r3, #0
 8011314:	d002      	beq.n	801131c <lfs_mkdir_+0xec>
            return err;
 8011316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801131a:	e0c3      	b.n	80114a4 <lfs_mkdir_+0x274>
    while (pred.split) {
 801131c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1e8      	bne.n	80112f6 <lfs_mkdir_+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8011324:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011328:	3318      	adds	r3, #24
 801132a:	4618      	mov	r0, r3
 801132c:	f7fc faf9 	bl	800d922 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8011330:	4b5e      	ldr	r3, [pc, #376]	@ (80114ac <lfs_mkdir_+0x27c>)
 8011332:	667b      	str	r3, [r7, #100]	@ 0x64
 8011334:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011338:	3318      	adds	r3, #24
 801133a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801133c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8011340:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8011344:	2301      	movs	r3, #1
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f7ff ff4c 	bl	80111e4 <lfs_dir_commit>
 801134c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8011350:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8011354:	3318      	adds	r3, #24
 8011356:	4618      	mov	r0, r3
 8011358:	f7fc fac9 	bl	800d8ee <lfs_pair_fromle32>
    if (err) {
 801135c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011360:	2b00      	cmp	r3, #0
 8011362:	d002      	beq.n	801136a <lfs_mkdir_+0x13a>
        return err;
 8011364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011368:	e09c      	b.n	80114a4 <lfs_mkdir_+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 801136a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 801136e:	2b00      	cmp	r3, #0
 8011370:	d04c      	beq.n	801140c <lfs_mkdir_+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8011372:	2101      	movs	r1, #1
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f002 fea9 	bl	80140cc <lfs_fs_preporphans>
 801137a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 801137e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011382:	2b00      	cmp	r3, #0
 8011384:	d002      	beq.n	801138c <lfs_mkdir_+0x15c>
            return err;
 8011386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801138a:	e08b      	b.n	80114a4 <lfs_mkdir_+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 801138c:	2300      	movs	r3, #0
 801138e:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
        cwd.id = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        lfs->mlist = &cwd;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 801139e:	629a      	str	r2, [r3, #40]	@ 0x28

        lfs_pair_tole32(dir.pair);
 80113a0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80113a4:	4618      	mov	r0, r3
 80113a6:	f7fc fabc 	bl	800d922 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 80113aa:	4b40      	ldr	r3, [pc, #256]	@ (80114ac <lfs_mkdir_+0x27c>)
 80113ac:	617b      	str	r3, [r7, #20]
 80113ae:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80113b2:	61bb      	str	r3, [r7, #24]
 80113b4:	f107 0214 	add.w	r2, r7, #20
 80113b8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80113bc:	2301      	movs	r3, #1
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7ff ff10 	bl	80111e4 <lfs_dir_commit>
 80113c4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80113c8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7fc fa8e 	bl	800d8ee <lfs_pair_fromle32>
        if (err) {
 80113d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d006      	beq.n	80113e8 <lfs_mkdir_+0x1b8>
            lfs->mlist = cwd.next;
 80113da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 80113e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80113e6:	e05d      	b.n	80114a4 <lfs_mkdir_+0x274>
        }

        lfs->mlist = cwd.next;
 80113e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	629a      	str	r2, [r3, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 80113f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f002 fe69 	bl	80140cc <lfs_fs_preporphans>
 80113fa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 80113fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011402:	2b00      	cmp	r3, #0
 8011404:	d002      	beq.n	801140c <lfs_mkdir_+0x1dc>
            return err;
 8011406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801140a:	e04b      	b.n	80114a4 <lfs_mkdir_+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 801140c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011410:	4618      	mov	r0, r3
 8011412:	f7fc fa86 	bl	800d922 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8011416:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 801141a:	029b      	lsls	r3, r3, #10
 801141c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011420:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011426:	2300      	movs	r3, #0
 8011428:	643b      	str	r3, [r7, #64]	@ 0x40
 801142a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 801142e:	029a      	lsls	r2, r3, #10
 8011430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011434:	4313      	orrs	r3, r2
 8011436:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801143a:	647b      	str	r3, [r7, #68]	@ 0x44
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011440:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8011444:	029b      	lsls	r3, r3, #10
 8011446:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801144a:	f043 0308 	orr.w	r3, r3, #8
 801144e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011450:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011454:	653b      	str	r3, [r7, #80]	@ 0x50
 8011456:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 801145a:	f083 0301 	eor.w	r3, r3, #1
 801145e:	b2db      	uxtb	r3, r3
 8011460:	2b00      	cmp	r3, #0
 8011462:	d001      	beq.n	8011468 <lfs_mkdir_+0x238>
 8011464:	4b11      	ldr	r3, [pc, #68]	@ (80114ac <lfs_mkdir_+0x27c>)
 8011466:	e000      	b.n	801146a <lfs_mkdir_+0x23a>
 8011468:	2300      	movs	r3, #0
 801146a:	657b      	str	r3, [r7, #84]	@ 0x54
 801146c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011470:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011472:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8011476:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 801147a:	f103 0108 	add.w	r1, r3, #8
 801147e:	2304      	movs	r3, #4
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff feaf 	bl	80111e4 <lfs_dir_commit>
 8011486:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 801148a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801148e:	4618      	mov	r0, r3
 8011490:	f7fc fa2d 	bl	800d8ee <lfs_pair_fromle32>
    if (err) {
 8011494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011498:	2b00      	cmp	r3, #0
 801149a:	d002      	beq.n	80114a2 <lfs_mkdir_+0x272>
        return err;
 801149c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80114a0:	e000      	b.n	80114a4 <lfs_mkdir_+0x274>
    }

    return 0;
 80114a2:	2300      	movs	r3, #0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	37e0      	adds	r7, #224	@ 0xe0
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bdb0      	pop	{r4, r5, r7, pc}
 80114ac:	600ffc08 	.word	0x600ffc08

080114b0 <lfs_dir_open_>:
#endif

static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80114b0:	b590      	push	{r4, r7, lr}
 80114b2:	b08d      	sub	sp, #52	@ 0x34
 80114b4:	af02      	add	r7, sp, #8
 80114b6:	60f8      	str	r0, [r7, #12]
 80114b8:	60b9      	str	r1, [r7, #8]
 80114ba:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	f103 0108 	add.w	r1, r3, #8
 80114c2:	1d3a      	adds	r2, r7, #4
 80114c4:	2300      	movs	r3, #0
 80114c6:	68f8      	ldr	r0, [r7, #12]
 80114c8:	f7fe f944 	bl	800f754 <lfs_dir_find>
 80114cc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tag < 0) {
 80114ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	da01      	bge.n	80114d8 <lfs_dir_open_+0x28>
        return tag;
 80114d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d6:	e05e      	b.n	8011596 <lfs_dir_open_+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80114d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114da:	4618      	mov	r0, r3
 80114dc:	f7fc fa7c 	bl	800d9d8 <lfs_tag_type3>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b02      	cmp	r3, #2
 80114e4:	d002      	beq.n	80114ec <lfs_dir_open_+0x3c>
        return LFS_ERR_NOTDIR;
 80114e6:	f06f 0313 	mvn.w	r3, #19
 80114ea:	e054      	b.n	8011596 <lfs_dir_open_+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 80114ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7fc fa9c 	bl	800da2c <lfs_tag_id>
 80114f4:	4603      	mov	r3, r0
 80114f6:	461a      	mov	r2, r3
 80114f8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80114fc:	429a      	cmp	r2, r3
 80114fe:	d106      	bne.n	801150e <lfs_dir_open_+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6a1b      	ldr	r3, [r3, #32]
 8011504:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801150a:	61bb      	str	r3, [r7, #24]
 801150c:	e01f      	b.n	801154e <lfs_dir_open_+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8011514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011516:	4618      	mov	r0, r3
 8011518:	f7fc fa88 	bl	800da2c <lfs_tag_id>
 801151c:	4603      	mov	r3, r0
 801151e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011520:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011524:	f043 0308 	orr.w	r3, r3, #8
 8011528:	f107 0214 	add.w	r2, r7, #20
 801152c:	9200      	str	r2, [sp, #0]
 801152e:	4a1c      	ldr	r2, [pc, #112]	@ (80115a0 <lfs_dir_open_+0xf0>)
 8011530:	4621      	mov	r1, r4
 8011532:	68f8      	ldr	r0, [r7, #12]
 8011534:	f7fc fef6 	bl	800e324 <lfs_dir_get>
 8011538:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	2b00      	cmp	r3, #0
 801153e:	da01      	bge.n	8011544 <lfs_dir_open_+0x94>
            return res;
 8011540:	6a3b      	ldr	r3, [r7, #32]
 8011542:	e028      	b.n	8011596 <lfs_dir_open_+0xe6>
        }
        lfs_pair_fromle32(pair);
 8011544:	f107 0314 	add.w	r3, r7, #20
 8011548:	4618      	mov	r0, r3
 801154a:	f7fc f9d0 	bl	800d8ee <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	3308      	adds	r3, #8
 8011552:	f107 0214 	add.w	r2, r7, #20
 8011556:	4619      	mov	r1, r3
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f7fd ffe9 	bl	800f530 <lfs_dir_fetch>
 801155e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8011560:	69fb      	ldr	r3, [r7, #28]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d001      	beq.n	801156a <lfs_dir_open_+0xba>
        return err;
 8011566:	69fb      	ldr	r3, [r7, #28]
 8011568:	e015      	b.n	8011596 <lfs_dir_open_+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	689a      	ldr	r2, [r3, #8]
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	62da      	str	r2, [r3, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	68da      	ldr	r2, [r3, #12]
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	631a      	str	r2, [r3, #48]	@ 0x30
    dir->id = 0;
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	2200      	movs	r2, #0
 801157e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2200      	movs	r2, #0
 8011584:	629a      	str	r2, [r3, #40]	@ 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	2202      	movs	r2, #2
 801158a:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801158c:	68b9      	ldr	r1, [r7, #8]
 801158e:	68f8      	ldr	r0, [r7, #12]
 8011590:	f7fc fc77 	bl	800de82 <lfs_mlist_append>

    return 0;
 8011594:	2300      	movs	r3, #0
}
 8011596:	4618      	mov	r0, r3
 8011598:	372c      	adds	r7, #44	@ 0x2c
 801159a:	46bd      	mov	sp, r7
 801159c:	bd90      	pop	{r4, r7, pc}
 801159e:	bf00      	nop
 80115a0:	700ffc00 	.word	0x700ffc00

080115a4 <lfs_dir_close_>:

static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 80115ae:	6839      	ldr	r1, [r7, #0]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f7fc fc44 	bl	800de3e <lfs_mlist_remove>

    return 0;
 80115b6:	2300      	movs	r3, #0
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <lfs_dir_read_>:

static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b086      	sub	sp, #24
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 80115cc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80115d0:	2100      	movs	r1, #0
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f014 fbbc 	bl	8025d50 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d110      	bne.n	8011602 <lfs_dir_read_+0x42>
        info->type = LFS_TYPE_DIR;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2202      	movs	r2, #2
 80115e4:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	3308      	adds	r3, #8
 80115ea:	4935      	ldr	r1, [pc, #212]	@ (80116c0 <lfs_dir_read_+0x100>)
 80115ec:	461a      	mov	r2, r3
 80115ee:	460b      	mov	r3, r1
 80115f0:	881b      	ldrh	r3, [r3, #0]
 80115f2:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115f8:	1c5a      	adds	r2, r3, #1
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 80115fe:	2301      	movs	r3, #1
 8011600:	e05a      	b.n	80116b8 <lfs_dir_read_+0xf8>
    } else if (dir->pos == 1) {
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011606:	2b01      	cmp	r3, #1
 8011608:	d110      	bne.n	801162c <lfs_dir_read_+0x6c>
        info->type = LFS_TYPE_DIR;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2202      	movs	r2, #2
 801160e:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	3308      	adds	r3, #8
 8011614:	4a2b      	ldr	r2, [pc, #172]	@ (80116c4 <lfs_dir_read_+0x104>)
 8011616:	8811      	ldrh	r1, [r2, #0]
 8011618:	7892      	ldrb	r2, [r2, #2]
 801161a:	8019      	strh	r1, [r3, #0]
 801161c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011622:	1c5a      	adds	r2, r3, #1
 8011624:	68bb      	ldr	r3, [r7, #8]
 8011626:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 8011628:	2301      	movs	r3, #1
 801162a:	e045      	b.n	80116b8 <lfs_dir_read_+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	889a      	ldrh	r2, [r3, #4]
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	8b9b      	ldrh	r3, [r3, #28]
 8011634:	429a      	cmp	r2, r3
 8011636:	d11a      	bne.n	801166e <lfs_dir_read_+0xae>
            if (!dir->m.split) {
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	7fdb      	ldrb	r3, [r3, #31]
 801163c:	f083 0301 	eor.w	r3, r3, #1
 8011640:	b2db      	uxtb	r3, r3
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <lfs_dir_read_+0x8a>
                return false;
 8011646:	2300      	movs	r3, #0
 8011648:	e036      	b.n	80116b8 <lfs_dir_read_+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801164a:	68bb      	ldr	r3, [r7, #8]
 801164c:	f103 0108 	add.w	r1, r3, #8
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	3320      	adds	r3, #32
 8011654:	461a      	mov	r2, r3
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f7fd ff6a 	bl	800f530 <lfs_dir_fetch>
 801165c:	6178      	str	r0, [r7, #20]
            if (err) {
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d001      	beq.n	8011668 <lfs_dir_read_+0xa8>
                return err;
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	e027      	b.n	80116b8 <lfs_dir_read_+0xf8>
            }

            dir->id = 0;
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	2200      	movs	r2, #0
 801166c:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	f103 0108 	add.w	r1, r3, #8
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	889a      	ldrh	r2, [r3, #4]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	68f8      	ldr	r0, [r7, #12]
 801167c:	f7fd ffa6 	bl	800f5cc <lfs_dir_getinfo>
 8011680:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d005      	beq.n	8011694 <lfs_dir_read_+0xd4>
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	f113 0f02 	cmn.w	r3, #2
 801168e:	d001      	beq.n	8011694 <lfs_dir_read_+0xd4>
            return err;
 8011690:	693b      	ldr	r3, [r7, #16]
 8011692:	e011      	b.n	80116b8 <lfs_dir_read_+0xf8>
        }

        dir->id += 1;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	889b      	ldrh	r3, [r3, #4]
 8011698:	3301      	adds	r3, #1
 801169a:	b29a      	uxth	r2, r3
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	f113 0f02 	cmn.w	r3, #2
 80116a6:	d100      	bne.n	80116aa <lfs_dir_read_+0xea>
    while (true) {
 80116a8:	e7c0      	b.n	801162c <lfs_dir_read_+0x6c>
            break;
 80116aa:	bf00      	nop
        }
    }

    dir->pos += 1;
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116b0:	1c5a      	adds	r2, r3, #1
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	629a      	str	r2, [r3, #40]	@ 0x28
    return true;
 80116b6:	2301      	movs	r3, #1
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3718      	adds	r7, #24
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	080309b8 	.word	0x080309b8
 80116c4:	080309bc 	.word	0x080309bc

080116c8 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80116c8:	b590      	push	{r4, r7, lr}
 80116ca:	b087      	sub	sp, #28
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116de:	3b08      	subs	r3, #8
 80116e0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80116ea:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d101      	bne.n	80116f6 <lfs_ctz_index+0x2e>
        return 0;
 80116f2:	2300      	movs	r3, #0
 80116f4:	e01c      	b.n	8011730 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	3b01      	subs	r3, #1
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fb fc79 	bl	800cff2 <lfs_popc>
 8011700:	4603      	mov	r3, r0
 8011702:	3302      	adds	r3, #2
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	697a      	ldr	r2, [r7, #20]
 8011708:	1ad2      	subs	r2, r2, r3
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011710:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	fb02 f303 	mul.w	r3, r2, r3
 801171a:	697a      	ldr	r2, [r7, #20]
 801171c:	1ad4      	subs	r4, r2, r3
 801171e:	68f8      	ldr	r0, [r7, #12]
 8011720:	f7fb fc67 	bl	800cff2 <lfs_popc>
 8011724:	4603      	mov	r3, r0
 8011726:	009b      	lsls	r3, r3, #2
 8011728:	1ae2      	subs	r2, r4, r3
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	601a      	str	r2, [r3, #0]
    return i;
 801172e:	68fb      	ldr	r3, [r7, #12]
}
 8011730:	4618      	mov	r0, r3
 8011732:	371c      	adds	r7, #28
 8011734:	46bd      	mov	sp, r7
 8011736:	bd90      	pop	{r4, r7, pc}

08011738 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8011738:	b590      	push	{r4, r7, lr}
 801173a:	b08f      	sub	sp, #60	@ 0x3c
 801173c:	af04      	add	r7, sp, #16
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8011746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011748:	2b00      	cmp	r3, #0
 801174a:	d108      	bne.n	801175e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 801174c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801174e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011752:	601a      	str	r2, [r3, #0]
        *off = 0;
 8011754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011756:	2200      	movs	r2, #0
 8011758:	601a      	str	r2, [r3, #0]
        return 0;
 801175a:	2300      	movs	r3, #0
 801175c:	e053      	b.n	8011806 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801175e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011760:	3b01      	subs	r3, #1
 8011762:	617b      	str	r3, [r7, #20]
 8011764:	f107 0314 	add.w	r3, r7, #20
 8011768:	4619      	mov	r1, r3
 801176a:	68f8      	ldr	r0, [r7, #12]
 801176c:	f7ff ffac 	bl	80116c8 <lfs_ctz_index>
 8011770:	4603      	mov	r3, r0
 8011772:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8011774:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011778:	4619      	mov	r1, r3
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f7ff ffa4 	bl	80116c8 <lfs_ctz_index>
 8011780:	4603      	mov	r3, r0
 8011782:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8011784:	e034      	b.n	80117f0 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8011786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011788:	6a3b      	ldr	r3, [r7, #32]
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	3301      	adds	r3, #1
 801178e:	4618      	mov	r0, r3
 8011790:	f7fb fc10 	bl	800cfb4 <lfs_npw2>
 8011794:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8011796:	1e5c      	subs	r4, r3, #1
 8011798:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801179a:	f7fb fc1b 	bl	800cfd4 <lfs_ctz>
 801179e:	4603      	mov	r3, r0
 80117a0:	4619      	mov	r1, r3
 80117a2:	4620      	mov	r0, r4
 80117a4:	f7fb fbcf 	bl	800cf46 <lfs_min>
 80117a8:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	69fa      	ldr	r2, [r7, #28]
 80117ae:	0092      	lsls	r2, r2, #2
 80117b0:	2104      	movs	r1, #4
 80117b2:	9103      	str	r1, [sp, #12]
 80117b4:	4639      	mov	r1, r7
 80117b6:	9102      	str	r1, [sp, #8]
 80117b8:	9201      	str	r2, [sp, #4]
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	2304      	movs	r3, #4
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	68b9      	ldr	r1, [r7, #8]
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	f7fb fc9a 	bl	800d0fc <lfs_bd_read>
 80117c8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fb fc2a 	bl	800d026 <lfs_fromle32>
 80117d2:	4603      	mov	r3, r0
 80117d4:	603b      	str	r3, [r7, #0]
        if (err) {
 80117d6:	69bb      	ldr	r3, [r7, #24]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d001      	beq.n	80117e0 <lfs_ctz_find+0xa8>
            return err;
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	e012      	b.n	8011806 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80117e0:	2201      	movs	r2, #1
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	fa02 f303 	lsl.w	r3, r2, r3
 80117e8:	461a      	mov	r2, r3
 80117ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ec:	1a9b      	subs	r3, r3, r2
 80117ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 80117f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117f2:	6a3b      	ldr	r3, [r7, #32]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d8c6      	bhi.n	8011786 <lfs_ctz_find+0x4e>
    }

    *block = head;
 80117f8:	683a      	ldr	r2, [r7, #0]
 80117fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117fc:	601a      	str	r2, [r3, #0]
    *off = pos;
 80117fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011802:	601a      	str	r2, [r3, #0]
    return 0;
 8011804:	2300      	movs	r3, #0
}
 8011806:	4618      	mov	r0, r3
 8011808:	372c      	adds	r7, #44	@ 0x2c
 801180a:	46bd      	mov	sp, r7
 801180c:	bd90      	pop	{r4, r7, pc}
	...

08011810 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8011810:	b580      	push	{r7, lr}
 8011812:	b092      	sub	sp, #72	@ 0x48
 8011814:	af04      	add	r7, sp, #16
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	607a      	str	r2, [r7, #4]
 801181c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 801181e:	f107 0320 	add.w	r3, r7, #32
 8011822:	4619      	mov	r1, r3
 8011824:	68f8      	ldr	r0, [r7, #12]
 8011826:	f7fc fbff 	bl	800e028 <lfs_alloc>
 801182a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 801182c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801182e:	2b00      	cmp	r3, #0
 8011830:	d001      	beq.n	8011836 <lfs_ctz_extend+0x26>
            return err;
 8011832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011834:	e0e9      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8011836:	6a3b      	ldr	r3, [r7, #32]
 8011838:	4619      	mov	r1, r3
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f7fb ff9e 	bl	800d77c <lfs_bd_erase>
 8011840:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8011842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011844:	2b00      	cmp	r3, #0
 8011846:	d006      	beq.n	8011856 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8011848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801184a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 801184e:	f000 80cb 	beq.w	80119e8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8011852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011854:	e0d9      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8011856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011858:	2b00      	cmp	r3, #0
 801185a:	d107      	bne.n	801186c <lfs_ctz_extend+0x5c>
                *block = nblock;
 801185c:	6a3a      	ldr	r2, [r7, #32]
 801185e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011860:	601a      	str	r2, [r3, #0]
                *off = 0;
 8011862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011864:	2200      	movs	r2, #0
 8011866:	601a      	str	r2, [r3, #0]
                return 0;
 8011868:	2300      	movs	r3, #0
 801186a:	e0ce      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 801186c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801186e:	3b01      	subs	r3, #1
 8011870:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8011872:	f107 031c 	add.w	r3, r7, #28
 8011876:	4619      	mov	r1, r3
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f7ff ff25 	bl	80116c8 <lfs_ctz_index>
 801187e:	4603      	mov	r3, r0
 8011880:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8011882:	69fb      	ldr	r3, [r7, #28]
 8011884:	3301      	adds	r3, #1
 8011886:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801188c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	429a      	cmp	r2, r3
 8011892:	d044      	beq.n	801191e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8011894:	2300      	movs	r3, #0
 8011896:	637b      	str	r3, [r7, #52]	@ 0x34
 8011898:	e035      	b.n	8011906 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 801189a:	69fa      	ldr	r2, [r7, #28]
 801189c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801189e:	1ad2      	subs	r2, r2, r3
 80118a0:	2301      	movs	r3, #1
 80118a2:	9303      	str	r3, [sp, #12]
 80118a4:	f107 0317 	add.w	r3, r7, #23
 80118a8:	9302      	str	r3, [sp, #8]
 80118aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118ac:	9301      	str	r3, [sp, #4]
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	9300      	str	r3, [sp, #0]
 80118b2:	4613      	mov	r3, r2
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	2100      	movs	r1, #0
 80118b8:	68f8      	ldr	r0, [r7, #12]
 80118ba:	f7fb fc1f 	bl	800d0fc <lfs_bd_read>
 80118be:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 80118c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d001      	beq.n	80118ca <lfs_ctz_extend+0xba>
                        return err;
 80118c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c8:	e09f      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 80118ca:	6a3b      	ldr	r3, [r7, #32]
 80118cc:	2201      	movs	r2, #1
 80118ce:	9203      	str	r2, [sp, #12]
 80118d0:	f107 0217 	add.w	r2, r7, #23
 80118d4:	9202      	str	r2, [sp, #8]
 80118d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80118d8:	9201      	str	r2, [sp, #4]
 80118da:	9300      	str	r3, [sp, #0]
 80118dc:	2301      	movs	r3, #1
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	68b9      	ldr	r1, [r7, #8]
 80118e2:	68f8      	ldr	r0, [r7, #12]
 80118e4:	f7fb fe9c 	bl	800d620 <lfs_bd_prog>
 80118e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80118ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d007      	beq.n	8011900 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80118f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80118f6:	d101      	bne.n	80118fc <lfs_ctz_extend+0xec>
                            goto relocate;
 80118f8:	bf00      	nop
                    goto relocate;
 80118fa:	e075      	b.n	80119e8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80118fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 80118fe:	e084      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8011900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011902:	3301      	adds	r3, #1
 8011904:	637b      	str	r3, [r7, #52]	@ 0x34
 8011906:	69fb      	ldr	r3, [r7, #28]
 8011908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801190a:	429a      	cmp	r2, r3
 801190c:	d3c5      	bcc.n	801189a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 801190e:	6a3a      	ldr	r2, [r7, #32]
 8011910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011912:	601a      	str	r2, [r3, #0]
                *off = noff;
 8011914:	69fa      	ldr	r2, [r7, #28]
 8011916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011918:	601a      	str	r2, [r3, #0]
                return 0;
 801191a:	2300      	movs	r3, #0
 801191c:	e075      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 801191e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011920:	3301      	adds	r3, #1
 8011922:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8011924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011926:	f7fb fb55 	bl	800cfd4 <lfs_ctz>
 801192a:	4603      	mov	r3, r0
 801192c:	3301      	adds	r3, #1
 801192e:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8011934:	2300      	movs	r3, #0
 8011936:	633b      	str	r3, [r7, #48]	@ 0x30
 8011938:	e049      	b.n	80119ce <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 801193a:	69bb      	ldr	r3, [r7, #24]
 801193c:	4618      	mov	r0, r3
 801193e:	f7fb fb7d 	bl	800d03c <lfs_tole32>
 8011942:	4603      	mov	r3, r0
 8011944:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8011946:	6a3b      	ldr	r3, [r7, #32]
 8011948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801194a:	0092      	lsls	r2, r2, #2
 801194c:	2104      	movs	r1, #4
 801194e:	9103      	str	r1, [sp, #12]
 8011950:	f107 0118 	add.w	r1, r7, #24
 8011954:	9102      	str	r1, [sp, #8]
 8011956:	9201      	str	r2, [sp, #4]
 8011958:	9300      	str	r3, [sp, #0]
 801195a:	2301      	movs	r3, #1
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	68b9      	ldr	r1, [r7, #8]
 8011960:	68f8      	ldr	r0, [r7, #12]
 8011962:	f7fb fe5d 	bl	800d620 <lfs_bd_prog>
 8011966:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8011968:	69bb      	ldr	r3, [r7, #24]
 801196a:	4618      	mov	r0, r3
 801196c:	f7fb fb5b 	bl	800d026 <lfs_fromle32>
 8011970:	4603      	mov	r3, r0
 8011972:	61bb      	str	r3, [r7, #24]
                if (err) {
 8011974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011976:	2b00      	cmp	r3, #0
 8011978:	d005      	beq.n	8011986 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 801197a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801197c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011980:	d034      	beq.n	80119ec <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8011982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011984:	e041      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8011986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011988:	3b01      	subs	r3, #1
 801198a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801198c:	429a      	cmp	r2, r3
 801198e:	d01b      	beq.n	80119c8 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8011990:	69bb      	ldr	r3, [r7, #24]
 8011992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011994:	0092      	lsls	r2, r2, #2
 8011996:	2104      	movs	r1, #4
 8011998:	9103      	str	r1, [sp, #12]
 801199a:	f107 0118 	add.w	r1, r7, #24
 801199e:	9102      	str	r1, [sp, #8]
 80119a0:	9201      	str	r2, [sp, #4]
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	2304      	movs	r3, #4
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	2100      	movs	r1, #0
 80119aa:	68f8      	ldr	r0, [r7, #12]
 80119ac:	f7fb fba6 	bl	800d0fc <lfs_bd_read>
 80119b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80119b2:	69bb      	ldr	r3, [r7, #24]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7fb fb36 	bl	800d026 <lfs_fromle32>
 80119ba:	4603      	mov	r3, r0
 80119bc:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80119be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d001      	beq.n	80119c8 <lfs_ctz_extend+0x1b8>
                        return err;
 80119c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119c6:	e020      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80119c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ca:	3301      	adds	r3, #1
 80119cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80119ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d3b1      	bcc.n	801193a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80119d6:	6a3a      	ldr	r2, [r7, #32]
 80119d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119da:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80119dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119de:	009a      	lsls	r2, r3, #2
 80119e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119e2:	601a      	str	r2, [r3, #0]
            return 0;
 80119e4:	2300      	movs	r3, #0
 80119e6:	e010      	b.n	8011a0a <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80119e8:	bf00      	nop
 80119ea:	e000      	b.n	80119ee <lfs_ctz_extend+0x1de>
                        goto relocate;
 80119ec:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80119ee:	6a3b      	ldr	r3, [r7, #32]
 80119f0:	4a08      	ldr	r2, [pc, #32]	@ (8011a14 <lfs_ctz_extend+0x204>)
 80119f2:	9200      	str	r2, [sp, #0]
 80119f4:	f640 32a6 	movw	r2, #2982	@ 0xba6
 80119f8:	4907      	ldr	r1, [pc, #28]	@ (8011a18 <lfs_ctz_extend+0x208>)
 80119fa:	4808      	ldr	r0, [pc, #32]	@ (8011a1c <lfs_ctz_extend+0x20c>)
 80119fc:	f011 fc88 	bl	8023310 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8011a00:	68b9      	ldr	r1, [r7, #8]
 8011a02:	68f8      	ldr	r0, [r7, #12]
 8011a04:	f7fb fb55 	bl	800d0b2 <lfs_cache_drop>
    while (true) {
 8011a08:	e709      	b.n	801181e <lfs_ctz_extend+0xe>
    }
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3738      	adds	r7, #56	@ 0x38
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	08030968 	.word	0x08030968
 8011a18:	08030840 	.word	0x08030840
 8011a1c:	080309e8 	.word	0x080309e8

08011a20 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b090      	sub	sp, #64	@ 0x40
 8011a24:	af04      	add	r7, sp, #16
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
 8011a2c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8011a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d101      	bne.n	8011a38 <lfs_ctz_traverse+0x18>
        return 0;
 8011a34:	2300      	movs	r3, #0
 8011a36:	e06b      	b.n	8011b10 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8011a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a3a:	3b01      	subs	r3, #1
 8011a3c:	61fb      	str	r3, [r7, #28]
 8011a3e:	f107 031c 	add.w	r3, r7, #28
 8011a42:	4619      	mov	r1, r3
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f7ff fe3f 	bl	80116c8 <lfs_ctz_index>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 8011a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a50:	6839      	ldr	r1, [r7, #0]
 8011a52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011a54:	4798      	blx	r3
 8011a56:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8011a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d001      	beq.n	8011a62 <lfs_ctz_traverse+0x42>
            return err;
 8011a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a60:	e056      	b.n	8011b10 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8011a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d101      	bne.n	8011a6c <lfs_ctz_traverse+0x4c>
            return 0;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	e051      	b.n	8011b10 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8011a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a6e:	f003 0301 	and.w	r3, r3, #1
 8011a72:	f1c3 0302 	rsb	r3, r3, #2
 8011a76:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8011a78:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8011a7a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8011a7c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8011a7e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8011a80:	9303      	str	r3, [sp, #12]
 8011a82:	f107 0314 	add.w	r3, r7, #20
 8011a86:	9302      	str	r3, [sp, #8]
 8011a88:	2300      	movs	r3, #0
 8011a8a:	9301      	str	r3, [sp, #4]
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	4613      	mov	r3, r2
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	68b9      	ldr	r1, [r7, #8]
 8011a96:	68f8      	ldr	r0, [r7, #12]
 8011a98:	f7fb fb30 	bl	800d0fc <lfs_bd_read>
 8011a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7fb fac0 	bl	800d026 <lfs_fromle32>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7fb faba 	bl	800d026 <lfs_fromle32>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	61bb      	str	r3, [r7, #24]
        if (err) {
 8011ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d001      	beq.n	8011ac0 <lfs_ctz_traverse+0xa0>
            return err;
 8011abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011abe:	e027      	b.n	8011b10 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ac4:	e012      	b.n	8011aec <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8011ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ac8:	009b      	lsls	r3, r3, #2
 8011aca:	3330      	adds	r3, #48	@ 0x30
 8011acc:	443b      	add	r3, r7
 8011ace:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8011ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ad4:	4611      	mov	r1, r2
 8011ad6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011ad8:	4798      	blx	r3
 8011ada:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8011adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d001      	beq.n	8011ae6 <lfs_ctz_traverse+0xc6>
                return err;
 8011ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae4:	e014      	b.n	8011b10 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8011ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae8:	3301      	adds	r3, #1
 8011aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011aec:	6a3b      	ldr	r3, [r7, #32]
 8011aee:	3b01      	subs	r3, #1
 8011af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011af2:	429a      	cmp	r2, r3
 8011af4:	dbe7      	blt.n	8011ac6 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8011af6:	6a3b      	ldr	r3, [r7, #32]
 8011af8:	3b01      	subs	r3, #1
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	3330      	adds	r3, #48	@ 0x30
 8011afe:	443b      	add	r3, r7
 8011b00:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011b04:	603b      	str	r3, [r7, #0]
        index -= count;
 8011b06:	6a3b      	ldr	r3, [r7, #32]
 8011b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b0a:	1ad3      	subs	r3, r2, r3
 8011b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 8011b0e:	e79e      	b.n	8011a4e <lfs_ctz_traverse+0x2e>
    }
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3730      	adds	r7, #48	@ 0x30
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <lfs_file_opencfg_>:


/// Top level file operations ///
static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8011b18:	b5b0      	push	{r4, r5, r7, lr}
 8011b1a:	b09a      	sub	sp, #104	@ 0x68
 8011b1c:	af02      	add	r7, sp, #8
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
 8011b24:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	f003 0302 	and.w	r3, r3, #2
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d008      	beq.n	8011b42 <lfs_file_opencfg_+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8011b30:	68f8      	ldr	r0, [r7, #12]
 8011b32:	f002 fded 	bl	8014710 <lfs_fs_forceconsistency>
 8011b36:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8011b38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d001      	beq.n	8011b42 <lfs_file_opencfg_+0x2a>
            return err;
 8011b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b40:	e1b0      	b.n	8011ea4 <lfs_file_opencfg_+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011b46:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8011b48:	683a      	ldr	r2, [r7, #0]
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	2200      	movs	r2, #0
 8011b52:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	2200      	movs	r2, #0
 8011b58:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	f103 0108 	add.w	r1, r3, #8
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	3304      	adds	r3, #4
 8011b6a:	1d3a      	adds	r2, r7, #4
 8011b6c:	68f8      	ldr	r0, [r7, #12]
 8011b6e:	f7fd fdf1 	bl	800f754 <lfs_dir_find>
 8011b72:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8011b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	da0c      	bge.n	8011b94 <lfs_file_opencfg_+0x7c>
 8011b7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b7c:	f113 0f02 	cmn.w	r3, #2
 8011b80:	d105      	bne.n	8011b8e <lfs_file_opencfg_+0x76>
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	889b      	ldrh	r3, [r3, #4]
 8011b86:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d102      	bne.n	8011b94 <lfs_file_opencfg_+0x7c>
        err = tag;
 8011b8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8011b92:	e17c      	b.n	8011e8e <lfs_file_opencfg_+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	2201      	movs	r2, #1
 8011b98:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8011b9a:	68b9      	ldr	r1, [r7, #8]
 8011b9c:	68f8      	ldr	r0, [r7, #12]
 8011b9e:	f7fc f970 	bl	800de82 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8011ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ba4:	f113 0f02 	cmn.w	r3, #2
 8011ba8:	d14e      	bne.n	8011c48 <lfs_file_opencfg_+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d103      	bne.n	8011bbc <lfs_file_opencfg_+0xa4>
            err = LFS_ERR_NOENT;
 8011bb4:	f06f 0301 	mvn.w	r3, #1
 8011bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8011bba:	e168      	b.n	8011e8e <lfs_file_opencfg_+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7ee fb6e 	bl	80002a0 <strlen>
 8011bc4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011bca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d903      	bls.n	8011bd8 <lfs_file_opencfg_+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8011bd0:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8011bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8011bd6:	e15a      	b.n	8011e8e <lfs_file_opencfg_+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	f103 0108 	add.w	r1, r3, #8
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	889b      	ldrh	r3, [r3, #4]
 8011be2:	029b      	lsls	r3, r3, #10
 8011be4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011be8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011bee:	2300      	movs	r3, #0
 8011bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bf2:	68bb      	ldr	r3, [r7, #8]
 8011bf4:	889b      	ldrh	r3, [r3, #4]
 8011bf6:	029a      	lsls	r2, r3, #10
 8011bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bfa:	4313      	orrs	r3, r2
 8011bfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	889b      	ldrh	r3, [r3, #4]
 8011c0a:	029b      	lsls	r3, r3, #10
 8011c0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011c10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c16:	2300      	movs	r3, #0
 8011c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c1a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011c1e:	2303      	movs	r3, #3
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f7ff fadf 	bl	80111e4 <lfs_dir_commit>
 8011c26:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8011c28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c2a:	f113 0f1c 	cmn.w	r3, #28
 8011c2e:	d001      	beq.n	8011c34 <lfs_file_opencfg_+0x11c>
 8011c30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c32:	e001      	b.n	8011c38 <lfs_file_opencfg_+0x120>
 8011c34:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8011c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8011c3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f040 8125 	bne.w	8011e8c <lfs_file_opencfg_+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8011c42:	4b9a      	ldr	r3, [pc, #616]	@ (8011eac <lfs_file_opencfg_+0x394>)
 8011c44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c46:	e044      	b.n	8011cd2 <lfs_file_opencfg_+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d003      	beq.n	8011c5a <lfs_file_opencfg_+0x142>
        err = LFS_ERR_EXIST;
 8011c52:	f06f 0310 	mvn.w	r3, #16
 8011c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8011c58:	e119      	b.n	8011e8e <lfs_file_opencfg_+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8011c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7fb febb 	bl	800d9d8 <lfs_tag_type3>
 8011c62:	4603      	mov	r3, r0
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d003      	beq.n	8011c70 <lfs_file_opencfg_+0x158>
        err = LFS_ERR_ISDIR;
 8011c68:	f06f 0314 	mvn.w	r3, #20
 8011c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8011c6e:	e10e      	b.n	8011e8e <lfs_file_opencfg_+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d00e      	beq.n	8011c98 <lfs_file_opencfg_+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	889b      	ldrh	r3, [r3, #4]
 8011c7e:	029b      	lsls	r3, r3, #10
 8011c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011c84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c88:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c96:	e01c      	b.n	8011cd2 <lfs_file_opencfg_+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	889b      	ldrh	r3, [r3, #4]
 8011ca2:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011ca4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011ca8:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8011cac:	68ba      	ldr	r2, [r7, #8]
 8011cae:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011cb0:	9200      	str	r2, [sp, #0]
 8011cb2:	4a7f      	ldr	r2, [pc, #508]	@ (8011eb0 <lfs_file_opencfg_+0x398>)
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	f7fc fb35 	bl	800e324 <lfs_dir_get>
 8011cba:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 8011cbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	da02      	bge.n	8011cc8 <lfs_file_opencfg_+0x1b0>
            err = tag;
 8011cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8011cc6:	e0e2      	b.n	8011e8e <lfs_file_opencfg_+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	3328      	adds	r3, #40	@ 0x28
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fb fff9 	bl	800dcc4 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8011cd6:	e063      	b.n	8011da0 <lfs_file_opencfg_+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cdc:	f003 0301 	and.w	r3, r3, #1
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d03c      	beq.n	8011d5e <lfs_file_opencfg_+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011cee:	6859      	ldr	r1, [r3, #4]
 8011cf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011cf2:	4613      	mov	r3, r2
 8011cf4:	005b      	lsls	r3, r3, #1
 8011cf6:	4413      	add	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	440b      	add	r3, r1
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8011d02:	051a      	lsls	r2, r3, #20
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	889b      	ldrh	r3, [r3, #4]
 8011d08:	029b      	lsls	r3, r3, #10
 8011d0a:	ea42 0103 	orr.w	r1, r2, r3
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d12:	6858      	ldr	r0, [r3, #4]
 8011d14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d16:	4613      	mov	r3, r2
 8011d18:	005b      	lsls	r3, r3, #1
 8011d1a:	4413      	add	r3, r2
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	4403      	add	r3, r0
 8011d20:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011d22:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d2a:	6859      	ldr	r1, [r3, #4]
 8011d2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d2e:	4613      	mov	r3, r2
 8011d30:	005b      	lsls	r3, r3, #1
 8011d32:	4413      	add	r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	9300      	str	r3, [sp, #0]
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	4a5d      	ldr	r2, [pc, #372]	@ (8011eb4 <lfs_file_opencfg_+0x39c>)
 8011d40:	4621      	mov	r1, r4
 8011d42:	68f8      	ldr	r0, [r7, #12]
 8011d44:	f7fc faee 	bl	800e324 <lfs_dir_get>
 8011d48:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8011d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	da06      	bge.n	8011d5e <lfs_file_opencfg_+0x246>
 8011d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d52:	f113 0f02 	cmn.w	r3, #2
 8011d56:	d002      	beq.n	8011d5e <lfs_file_opencfg_+0x246>
                err = res;
 8011d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011d5c:	e097      	b.n	8011e8e <lfs_file_opencfg_+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d62:	f003 0302 	and.w	r3, r3, #2
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d017      	beq.n	8011d9a <lfs_file_opencfg_+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d6e:	6859      	ldr	r1, [r3, #4]
 8011d70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d72:	4613      	mov	r3, r2
 8011d74:	005b      	lsls	r3, r3, #1
 8011d76:	4413      	add	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	440b      	add	r3, r1
 8011d7c:	689a      	ldr	r2, [r3, #8]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d903      	bls.n	8011d8e <lfs_file_opencfg_+0x276>
                err = LFS_ERR_NOSPC;
 8011d86:	f06f 031b 	mvn.w	r3, #27
 8011d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011d8c:	e07f      	b.n	8011e8e <lfs_file_opencfg_+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8011d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d395      	bcc.n	8011cd8 <lfs_file_opencfg_+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d005      	beq.n	8011dc2 <lfs_file_opencfg_+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8011dc0:	e010      	b.n	8011de4 <lfs_file_opencfg_+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fb f95b 	bl	800d084 <lfs_malloc>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d103      	bne.n	8011de4 <lfs_file_opencfg_+0x2cc>
            err = LFS_ERR_NOMEM;
 8011ddc:	f06f 030b 	mvn.w	r3, #11
 8011de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8011de2:	e054      	b.n	8011e8e <lfs_file_opencfg_+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	3340      	adds	r3, #64	@ 0x40
 8011de8:	4619      	mov	r1, r3
 8011dea:	68f8      	ldr	r0, [r7, #12]
 8011dec:	f7fb f970 	bl	800d0d0 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8011df0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fb fdf0 	bl	800d9d8 <lfs_tag_type3>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	f240 2301 	movw	r3, #513	@ 0x201
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d141      	bne.n	8011e88 <lfs_file_opencfg_+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	f06f 0201 	mvn.w	r2, #1
 8011e0a:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8011e0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7fb fe1c 	bl	800da4c <lfs_tag_size>
 8011e14:	4602      	mov	r2, r0
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	2200      	movs	r2, #0
 8011e32:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d020      	beq.n	8011e88 <lfs_file_opencfg_+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	889b      	ldrh	r3, [r3, #4]
 8011e50:	029c      	lsls	r4, r3, #10
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011e56:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fb f873 	bl	800cf46 <lfs_min>
 8011e60:	4603      	mov	r3, r0
 8011e62:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011e64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011e6c:	9300      	str	r3, [sp, #0]
 8011e6e:	4613      	mov	r3, r2
 8011e70:	4a0f      	ldr	r2, [pc, #60]	@ (8011eb0 <lfs_file_opencfg_+0x398>)
 8011e72:	4629      	mov	r1, r5
 8011e74:	68f8      	ldr	r0, [r7, #12]
 8011e76:	f7fc fa55 	bl	800e324 <lfs_dir_get>
 8011e7a:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 8011e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	da02      	bge.n	8011e88 <lfs_file_opencfg_+0x370>
                err = res;
 8011e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8011e86:	e002      	b.n	8011e8e <lfs_file_opencfg_+0x376>
            }
        }
    }

    return 0;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	e00b      	b.n	8011ea4 <lfs_file_opencfg_+0x38c>
            goto cleanup;
 8011e8c:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e92:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_close_(lfs, file);
 8011e9a:	68b9      	ldr	r1, [r7, #8]
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f000 f823 	bl	8011ee8 <lfs_file_close_>
    return err;
 8011ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3760      	adds	r7, #96	@ 0x60
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8011eac:	20100000 	.word	0x20100000
 8011eb0:	700ffc00 	.word	0x700ffc00
 8011eb4:	7ffffc00 	.word	0x7ffffc00

08011eb8 <lfs_file_open_>:

#ifndef LFS_NO_MALLOC
static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b088      	sub	sp, #32
 8011ebc:	af02      	add	r7, sp, #8
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	607a      	str	r2, [r7, #4]
 8011ec4:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8011ec6:	4b07      	ldr	r3, [pc, #28]	@ (8011ee4 <lfs_file_open_+0x2c>)
 8011ec8:	9300      	str	r3, [sp, #0]
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	687a      	ldr	r2, [r7, #4]
 8011ece:	68b9      	ldr	r1, [r7, #8]
 8011ed0:	68f8      	ldr	r0, [r7, #12]
 8011ed2:	f7ff fe21 	bl	8011b18 <lfs_file_opencfg_>
 8011ed6:	6178      	str	r0, [r7, #20]
    return err;
 8011ed8:	697b      	ldr	r3, [r7, #20]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3718      	adds	r7, #24
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	08034340 	.word	0x08034340

08011ee8 <lfs_file_close_>:
#endif

static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_sync_(lfs, file);
 8011ef2:	6839      	ldr	r1, [r7, #0]
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f000 f9e5 	bl	80122c4 <lfs_file_sync_>
 8011efa:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8011efc:	6839      	ldr	r1, [r7, #0]
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7fb ff9d 	bl	800de3e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d104      	bne.n	8011f18 <lfs_file_close_+0x30>
        lfs_free(file->cache.buffer);
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fb f8c2 	bl	800d09c <lfs_free>
    }

    return err;
 8011f18:	68fb      	ldr	r3, [r7, #12]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
	...

08011f24 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8011f24:	b590      	push	{r4, r7, lr}
 8011f26:	b08d      	sub	sp, #52	@ 0x34
 8011f28:	af06      	add	r7, sp, #24
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8011f2e:	f107 030c 	add.w	r3, r7, #12
 8011f32:	4619      	mov	r1, r3
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7fc f877 	bl	800e028 <lfs_alloc>
 8011f3a:	6138      	str	r0, [r7, #16]
        if (err) {
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d001      	beq.n	8011f46 <lfs_file_relocate+0x22>
            return err;
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	e0bb      	b.n	80120be <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	4619      	mov	r1, r3
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7fb fc16 	bl	800d77c <lfs_bd_erase>
 8011f50:	6138      	str	r0, [r7, #16]
        if (err) {
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d006      	beq.n	8011f66 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8011f5e:	f000 809b 	beq.w	8012098 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	e0ab      	b.n	80120be <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011f66:	2300      	movs	r3, #0
 8011f68:	617b      	str	r3, [r7, #20]
 8011f6a:	e069      	b.n	8012040 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d027      	beq.n	8011fc8 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	f103 0008 	add.w	r0, r3, #8
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	889b      	ldrh	r3, [r3, #4]
 8011f90:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8011f92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011f9a:	2101      	movs	r1, #1
 8011f9c:	9105      	str	r1, [sp, #20]
 8011f9e:	f107 010b 	add.w	r1, r7, #11
 8011fa2:	9104      	str	r1, [sp, #16]
 8011fa4:	6979      	ldr	r1, [r7, #20]
 8011fa6:	9103      	str	r1, [sp, #12]
 8011fa8:	9302      	str	r3, [sp, #8]
 8011faa:	4b47      	ldr	r3, [pc, #284]	@ (80120c8 <lfs_file_relocate+0x1a4>)
 8011fac:	9301      	str	r3, [sp, #4]
 8011fae:	9200      	str	r2, [sp, #0]
 8011fb0:	4623      	mov	r3, r4
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	4601      	mov	r1, r0
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f7fc f9cf 	bl	800e35a <lfs_dir_getread>
 8011fbc:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8011fbe:	693b      	ldr	r3, [r7, #16]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d01e      	beq.n	8012002 <lfs_file_relocate+0xde>
                    return err;
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	e07a      	b.n	80120be <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 8011fce:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	1ad4      	subs	r4, r2, r3
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fdc:	2201      	movs	r2, #1
 8011fde:	9203      	str	r2, [sp, #12]
 8011fe0:	f107 020b 	add.w	r2, r7, #11
 8011fe4:	9202      	str	r2, [sp, #8]
 8011fe6:	697a      	ldr	r2, [r7, #20]
 8011fe8:	9201      	str	r2, [sp, #4]
 8011fea:	9300      	str	r3, [sp, #0]
 8011fec:	4623      	mov	r3, r4
 8011fee:	4602      	mov	r2, r0
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f7fb f883 	bl	800d0fc <lfs_bd_read>
 8011ff6:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d001      	beq.n	8012002 <lfs_file_relocate+0xde>
                    return err;
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	e05d      	b.n	80120be <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f103 0110 	add.w	r1, r3, #16
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2201      	movs	r2, #1
 801200e:	9203      	str	r2, [sp, #12]
 8012010:	f107 020b 	add.w	r2, r7, #11
 8012014:	9202      	str	r2, [sp, #8]
 8012016:	697a      	ldr	r2, [r7, #20]
 8012018:	9201      	str	r2, [sp, #4]
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	2301      	movs	r3, #1
 801201e:	4602      	mov	r2, r0
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f7fb fafd 	bl	800d620 <lfs_bd_prog>
 8012026:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d005      	beq.n	801203a <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8012034:	d032      	beq.n	801209c <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	e041      	b.n	80120be <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	3301      	adds	r3, #1
 801203e:	617b      	str	r3, [r7, #20]
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012044:	697a      	ldr	r2, [r7, #20]
 8012046:	429a      	cmp	r2, r3
 8012048:	d390      	bcc.n	8011f6c <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	69d9      	ldr	r1, [r3, #28]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012058:	461a      	mov	r2, r3
 801205a:	f015 f8b5 	bl	80271c8 <memcpy>
        file->cache.block = lfs->pcache.block;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	691a      	ldr	r2, [r3, #16]
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	695a      	ldr	r2, [r3, #20]
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	699a      	ldr	r2, [r3, #24]
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	3310      	adds	r3, #16
 801207a:	4619      	mov	r1, r3
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7fb f827 	bl	800d0d0 <lfs_cache_zero>

        file->block = nblock;
 8012082:	68fa      	ldr	r2, [r7, #12]
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801208c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8012094:	2300      	movs	r3, #0
 8012096:	e012      	b.n	80120be <lfs_file_relocate+0x19a>
                goto relocate;
 8012098:	bf00      	nop
 801209a:	e000      	b.n	801209e <lfs_file_relocate+0x17a>
                    goto relocate;
 801209c:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	4a0a      	ldr	r2, [pc, #40]	@ (80120cc <lfs_file_relocate+0x1a8>)
 80120a2:	9200      	str	r2, [sp, #0]
 80120a4:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 80120a8:	4909      	ldr	r1, [pc, #36]	@ (80120d0 <lfs_file_relocate+0x1ac>)
 80120aa:	480a      	ldr	r0, [pc, #40]	@ (80120d4 <lfs_file_relocate+0x1b0>)
 80120ac:	f011 f930 	bl	8023310 <printf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	3310      	adds	r3, #16
 80120b4:	4619      	mov	r1, r3
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7fa fffb 	bl	800d0b2 <lfs_cache_drop>
    while (true) {
 80120bc:	e737      	b.n	8011f2e <lfs_file_relocate+0xa>
    }
}
 80120be:	4618      	mov	r0, r3
 80120c0:	371c      	adds	r7, #28
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd90      	pop	{r4, r7, pc}
 80120c6:	bf00      	nop
 80120c8:	fff7fc00 	.word	0xfff7fc00
 80120cc:	08030968 	.word	0x08030968
 80120d0:	08030840 	.word	0x08030840
 80120d4:	080309e8 	.word	0x080309e8

080120d8 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80120d8:	b580      	push	{r7, lr}
 80120da:	b084      	sub	sp, #16
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ckpoint(lfs);
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f7fb ff05 	bl	800defa <lfs_alloc_ckpoint>
    int err = lfs_file_relocate(lfs, file);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f7ff ff16 	bl	8011f24 <lfs_file_relocate>
 80120f8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d001      	beq.n	8012104 <lfs_file_outline+0x2c>
        return err;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	e006      	b.n	8012112 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012108:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 8012110:	2300      	movs	r3, #0
}
 8012112:	4618      	mov	r0, r3
 8012114:	3710      	adds	r7, #16
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
	...

0801211c <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 801211c:	b590      	push	{r4, r7, lr}
 801211e:	b09f      	sub	sp, #124	@ 0x7c
 8012120:	af02      	add	r7, sp, #8
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801212a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801212e:	2b00      	cmp	r3, #0
 8012130:	d011      	beq.n	8012156 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801213a:	2b00      	cmp	r3, #0
 801213c:	d105      	bne.n	801214a <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	3340      	adds	r3, #64	@ 0x40
 8012142:	4619      	mov	r1, r3
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7fa ffb4 	bl	800d0b2 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801214e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801215a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801215e:	2b00      	cmp	r3, #0
 8012160:	f000 80a4 	beq.w	80122ac <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012168:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801216e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012172:	2b00      	cmp	r3, #0
 8012174:	d176      	bne.n	8012264 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8012176:	f107 030c 	add.w	r3, r7, #12
 801217a:	2254      	movs	r2, #84	@ 0x54
 801217c:	2100      	movs	r1, #0
 801217e:	4618      	mov	r0, r3
 8012180:	f013 fde6 	bl	8025d50 <memset>
                .ctz.head = file->ctz.head,
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8012188:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 801218e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012190:	2301      	movs	r3, #1
 8012192:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8012198:	643b      	str	r3, [r7, #64]	@ 0x40
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80121a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80121a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4619      	mov	r1, r3
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7fa ff81 	bl	800d0b2 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80121b0:	e02b      	b.n	801220a <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80121b2:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80121b6:	f107 010c 	add.w	r1, r7, #12
 80121ba:	2301      	movs	r3, #1
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f000 f921 	bl	8012404 <lfs_file_flushedread>
 80121c2:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80121c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	da01      	bge.n	80121ce <lfs_file_flush+0xb2>
                    return res;
 80121ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80121cc:	e06f      	b.n	80122ae <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80121ce:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80121d2:	2301      	movs	r3, #1
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 fa1c 	bl	8012614 <lfs_file_flushedwrite>
 80121dc:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80121de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	da01      	bge.n	80121e8 <lfs_file_flush+0xcc>
                    return res;
 80121e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80121e6:	e062      	b.n	80122ae <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80121f0:	d00b      	beq.n	801220a <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80121f2:	f107 030c 	add.w	r3, r7, #12
 80121f6:	3340      	adds	r3, #64	@ 0x40
 80121f8:	4619      	mov	r1, r3
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f7fa ff59 	bl	800d0b2 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	4619      	mov	r1, r3
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7fa ff54 	bl	800d0b2 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012212:	429a      	cmp	r2, r3
 8012214:	d3cd      	bcc.n	80121b2 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	2301      	movs	r3, #1
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7fb f94f 	bl	800d4c4 <lfs_bd_flush>
 8012226:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8012228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801222a:	2b00      	cmp	r3, #0
 801222c:	d026      	beq.n	801227c <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 801222e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012230:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8012234:	d001      	beq.n	801223a <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8012236:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012238:	e039      	b.n	80122ae <lfs_file_flush+0x192>
                        goto relocate;
 801223a:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012240:	4a1d      	ldr	r2, [pc, #116]	@ (80122b8 <lfs_file_flush+0x19c>)
 8012242:	9200      	str	r2, [sp, #0]
 8012244:	f640 522b 	movw	r2, #3371	@ 0xd2b
 8012248:	491c      	ldr	r1, [pc, #112]	@ (80122bc <lfs_file_flush+0x1a0>)
 801224a:	481d      	ldr	r0, [pc, #116]	@ (80122c0 <lfs_file_flush+0x1a4>)
 801224c:	f011 f860 	bl	8023310 <printf>
                err = lfs_file_relocate(lfs, file);
 8012250:	6839      	ldr	r1, [r7, #0]
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f7ff fe66 	bl	8011f24 <lfs_file_relocate>
 8012258:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 801225a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801225c:	2b00      	cmp	r3, #0
 801225e:	d0da      	beq.n	8012216 <lfs_file_flush+0xfa>
                    return err;
 8012260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012262:	e024      	b.n	80122ae <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801226c:	4619      	mov	r1, r3
 801226e:	4610      	mov	r0, r2
 8012270:	f7fa fe59 	bl	800cf26 <lfs_max>
 8012274:	4602      	mov	r2, r0
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	635a      	str	r2, [r3, #52]	@ 0x34
 801227a:	e000      	b.n	801227e <lfs_file_flush+0x162>
                break;
 801227c:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012292:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801229e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80122aa:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 80122ac:	2300      	movs	r3, #0
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3774      	adds	r7, #116	@ 0x74
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd90      	pop	{r4, r7, pc}
 80122b6:	bf00      	nop
 80122b8:	08030968 	.word	0x08030968
 80122bc:	08030840 	.word	0x08030840
 80122c0:	080309e8 	.word	0x080309e8

080122c4 <lfs_file_sync_>:

#ifndef LFS_READONLY
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b090      	sub	sp, #64	@ 0x40
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
 80122cc:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d001      	beq.n	80122de <lfs_file_sync_+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80122da:	2300      	movs	r3, #0
 80122dc:	e08e      	b.n	80123fc <lfs_file_sync_+0x138>
    }

    int err = lfs_file_flush(lfs, file);
 80122de:	6839      	ldr	r1, [r7, #0]
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ff ff1b 	bl	801211c <lfs_file_flush>
 80122e6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 80122e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d007      	beq.n	80122fe <lfs_file_sync_+0x3a>
        file->flags |= LFS_F_ERRED;
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122f2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 80122fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122fc:	e07e      	b.n	80123fc <lfs_file_sync_+0x138>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012306:	2b00      	cmp	r3, #0
 8012308:	d077      	beq.n	80123fa <lfs_file_sync_+0x136>
            !lfs_pair_isnull(file->m.pair)) {
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	3308      	adds	r3, #8
 801230e:	4618      	mov	r0, r3
 8012310:	f7fb fa7b 	bl	800d80a <lfs_pair_isnull>
 8012314:	4603      	mov	r3, r0
 8012316:	f083 0301 	eor.w	r3, r3, #1
 801231a:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 801231c:	2b00      	cmp	r3, #0
 801231e:	d06c      	beq.n	80123fa <lfs_file_sync_+0x136>
        // before we commit metadata, we need sync the disk to make sure
        // data writes don't complete after metadata writes
        if (!(file->flags & LFS_F_INLINE)) {
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10d      	bne.n	8012348 <lfs_file_sync_+0x84>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f103 0110 	add.w	r1, r3, #16
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	2300      	movs	r3, #0
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7fb f93e 	bl	800d5b8 <lfs_bd_sync>
 801233c:	6338      	str	r0, [r7, #48]	@ 0x30
            if (err) {
 801233e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012340:	2b00      	cmp	r3, #0
 8012342:	d001      	beq.n	8012348 <lfs_file_sync_+0x84>
                return err;
 8012344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012346:	e059      	b.n	80123fc <lfs_file_sync_+0x138>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801234c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012350:	2b00      	cmp	r3, #0
 8012352:	d009      	beq.n	8012368 <lfs_file_sync_+0xa4>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8012354:	f240 2301 	movw	r3, #513	@ 0x201
 8012358:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801235e:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012364:	637b      	str	r3, [r7, #52]	@ 0x34
 8012366:	e014      	b.n	8012392 <lfs_file_sync_+0xce>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8012368:	f240 2302 	movw	r3, #514	@ 0x202
 801236c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 801236e:	683a      	ldr	r2, [r7, #0]
 8012370:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012374:	3228      	adds	r2, #40	@ 0x28
 8012376:	e892 0003 	ldmia.w	r2, {r0, r1}
 801237a:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 801237e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012382:	4618      	mov	r0, r3
 8012384:	f7fb fcb6 	bl	800dcf4 <lfs_ctz_tole32>
            buffer = &ctz;
 8012388:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801238c:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 801238e:	2308      	movs	r3, #8
 8012390:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	f103 0108 	add.w	r1, r3, #8
 8012398:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801239a:	051a      	lsls	r2, r3, #20
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	889b      	ldrh	r3, [r3, #4]
 80123a0:	029b      	lsls	r3, r3, #10
 80123a2:	431a      	orrs	r2, r3
 80123a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123a6:	4313      	orrs	r3, r2
 80123a8:	61bb      	str	r3, [r7, #24]
 80123aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ac:	61fb      	str	r3, [r7, #28]
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	889b      	ldrh	r3, [r3, #4]
 80123b2:	029a      	lsls	r2, r3, #10
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123b8:	689b      	ldr	r3, [r3, #8]
 80123ba:	4313      	orrs	r3, r2
 80123bc:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 80123c0:	623b      	str	r3, [r7, #32]
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80123ca:	f107 0218 	add.w	r2, r7, #24
 80123ce:	2302      	movs	r3, #2
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f7fe ff07 	bl	80111e4 <lfs_dir_commit>
 80123d6:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80123d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d007      	beq.n	80123ee <lfs_file_sync_+0x12a>
            file->flags |= LFS_F_ERRED;
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 80123ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ec:	e006      	b.n	80123fc <lfs_file_sync_+0x138>
        }

        file->flags &= ~LFS_F_DIRTY;
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 80123fa:	2300      	movs	r3, #0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3740      	adds	r7, #64	@ 0x40
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8012404:	b5b0      	push	{r4, r5, r7, lr}
 8012406:	b090      	sub	sp, #64	@ 0x40
 8012408:	af06      	add	r7, sp, #24
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
 8012410:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012422:	429a      	cmp	r2, r3
 8012424:	d301      	bcc.n	801242a <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8012426:	2300      	movs	r3, #0
 8012428:	e0b7      	b.n	801259a <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012432:	1ad3      	subs	r3, r2, r3
 8012434:	4619      	mov	r1, r3
 8012436:	6838      	ldr	r0, [r7, #0]
 8012438:	f7fa fd85 	bl	800cf46 <lfs_min>
 801243c:	6038      	str	r0, [r7, #0]
    nsize = size;
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8012442:	e0a5      	b.n	8012590 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801244c:	2b00      	cmp	r3, #0
 801244e:	d006      	beq.n	801245e <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_READING) ||
 801245a:	429a      	cmp	r2, r3
 801245c:	d130      	bne.n	80124c0 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012466:	2b00      	cmp	r3, #0
 8012468:	d11c      	bne.n	80124a4 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012478:	68ba      	ldr	r2, [r7, #8]
 801247a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801247c:	68b9      	ldr	r1, [r7, #8]
 801247e:	3138      	adds	r1, #56	@ 0x38
 8012480:	68b8      	ldr	r0, [r7, #8]
 8012482:	303c      	adds	r0, #60	@ 0x3c
 8012484:	9003      	str	r0, [sp, #12]
 8012486:	9102      	str	r1, [sp, #8]
 8012488:	9201      	str	r2, [sp, #4]
 801248a:	9300      	str	r3, [sp, #0]
 801248c:	462b      	mov	r3, r5
 801248e:	4622      	mov	r2, r4
 8012490:	2100      	movs	r1, #0
 8012492:	68f8      	ldr	r0, [r7, #12]
 8012494:	f7ff f950 	bl	8011738 <lfs_ctz_find>
 8012498:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d009      	beq.n	80124b4 <lfs_file_flushedread+0xb0>
                    return err;
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	e07a      	b.n	801259a <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	f06f 0201 	mvn.w	r2, #1
 80124aa:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80124c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124ca:	1ad3      	subs	r3, r2, r3
 80124cc:	4619      	mov	r1, r3
 80124ce:	6a38      	ldr	r0, [r7, #32]
 80124d0:	f7fa fd39 	bl	800cf46 <lfs_min>
 80124d4:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d026      	beq.n	8012530 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	f103 0408 	add.w	r4, r3, #8
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80124f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	889b      	ldrh	r3, [r3, #4]
 80124f8:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80124fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80124fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012502:	68b9      	ldr	r1, [r7, #8]
 8012504:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8012506:	69b8      	ldr	r0, [r7, #24]
 8012508:	9005      	str	r0, [sp, #20]
 801250a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801250c:	9004      	str	r0, [sp, #16]
 801250e:	9103      	str	r1, [sp, #12]
 8012510:	9302      	str	r3, [sp, #8]
 8012512:	4b24      	ldr	r3, [pc, #144]	@ (80125a4 <lfs_file_flushedread+0x1a0>)
 8012514:	9301      	str	r3, [sp, #4]
 8012516:	9200      	str	r2, [sp, #0]
 8012518:	462b      	mov	r3, r5
 801251a:	2200      	movs	r2, #0
 801251c:	4621      	mov	r1, r4
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	f7fb ff1b 	bl	800e35a <lfs_dir_getread>
 8012524:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d01d      	beq.n	8012568 <lfs_file_flushedread+0x164>
                return err;
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	e034      	b.n	801259a <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801253a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
            int err = lfs_bd_read(lfs,
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012540:	68ba      	ldr	r2, [r7, #8]
 8012542:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012544:	69b9      	ldr	r1, [r7, #24]
 8012546:	9103      	str	r1, [sp, #12]
 8012548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801254a:	9102      	str	r1, [sp, #8]
 801254c:	9201      	str	r2, [sp, #4]
 801254e:	9300      	str	r3, [sp, #0]
 8012550:	4623      	mov	r3, r4
 8012552:	4602      	mov	r2, r0
 8012554:	2100      	movs	r1, #0
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	f7fa fdd0 	bl	800d0fc <lfs_bd_read>
 801255c:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d001      	beq.n	8012568 <lfs_file_flushedread+0x164>
                return err;
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	e018      	b.n	801259a <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801256c:	69bb      	ldr	r3, [r7, #24]
 801256e:	441a      	add	r2, r3
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	441a      	add	r2, r3
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8012580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012582:	69bb      	ldr	r3, [r7, #24]
 8012584:	4413      	add	r3, r2
 8012586:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8012588:	6a3a      	ldr	r2, [r7, #32]
 801258a:	69bb      	ldr	r3, [r7, #24]
 801258c:	1ad3      	subs	r3, r2, r3
 801258e:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	2b00      	cmp	r3, #0
 8012594:	f47f af56 	bne.w	8012444 <lfs_file_flushedread+0x40>
    }

    return size;
 8012598:	683b      	ldr	r3, [r7, #0]
}
 801259a:	4618      	mov	r0, r3
 801259c:	3728      	adds	r7, #40	@ 0x28
 801259e:	46bd      	mov	sp, r7
 80125a0:	bdb0      	pop	{r4, r5, r7, pc}
 80125a2:	bf00      	nop
 80125a4:	fff7fc00 	.word	0xfff7fc00

080125a8 <lfs_file_read_>:

static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b086      	sub	sp, #24
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
 80125b4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d106      	bne.n	80125d0 <lfs_file_read_+0x28>
 80125c2:	4b11      	ldr	r3, [pc, #68]	@ (8012608 <lfs_file_read_+0x60>)
 80125c4:	4a11      	ldr	r2, [pc, #68]	@ (801260c <lfs_file_read_+0x64>)
 80125c6:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 80125ca:	4811      	ldr	r0, [pc, #68]	@ (8012610 <lfs_file_read_+0x68>)
 80125cc:	f010 fe6c 	bl	80232a8 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d009      	beq.n	80125f0 <lfs_file_read_+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80125dc:	68b9      	ldr	r1, [r7, #8]
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f7ff fd9c 	bl	801211c <lfs_file_flush>
 80125e4:	6178      	str	r0, [r7, #20]
        if (err) {
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d001      	beq.n	80125f0 <lfs_file_read_+0x48>
            return err;
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	e006      	b.n	80125fe <lfs_file_read_+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	687a      	ldr	r2, [r7, #4]
 80125f4:	68b9      	ldr	r1, [r7, #8]
 80125f6:	68f8      	ldr	r0, [r7, #12]
 80125f8:	f7ff ff04 	bl	8012404 <lfs_file_flushedread>
 80125fc:	4603      	mov	r3, r0
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3718      	adds	r7, #24
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	08030b90 	.word	0x08030b90
 801260c:	0803434c 	.word	0x0803434c
 8012610:	08030840 	.word	0x08030840

08012614 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8012614:	b5b0      	push	{r4, r5, r7, lr}
 8012616:	b090      	sub	sp, #64	@ 0x40
 8012618:	af04      	add	r7, sp, #16
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	607a      	str	r2, [r7, #4]
 8012620:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801262e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012632:	2b00      	cmp	r3, #0
 8012634:	f000 80f4 	beq.w	8012820 <lfs_file_flushedwrite+0x20c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801263e:	441a      	add	r2, r3
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012644:	4619      	mov	r1, r3
 8012646:	4610      	mov	r0, r2
 8012648:	f7fa fc6d 	bl	800cf26 <lfs_max>
 801264c:	4602      	mov	r2, r0
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((file->flags & LFS_F_INLINE) &&
 8012652:	429a      	cmp	r2, r3
 8012654:	f240 80e4 	bls.w	8012820 <lfs_file_flushedwrite+0x20c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8012658:	68b9      	ldr	r1, [r7, #8]
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	f7ff fd3c 	bl	80120d8 <lfs_file_outline>
 8012660:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8012662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012664:	2b00      	cmp	r3, #0
 8012666:	f000 80db 	beq.w	8012820 <lfs_file_flushedwrite+0x20c>
            file->flags |= LFS_F_ERRED;
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801266e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8012676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012678:	e0d7      	b.n	801282a <lfs_file_flushedwrite+0x216>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012682:	2b00      	cmp	r3, #0
 8012684:	d006      	beq.n	8012694 <lfs_file_flushedwrite+0x80>
                file->off == lfs->cfg->block_size) {
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 8012690:	429a      	cmp	r2, r3
 8012692:	d16d      	bne.n	8012770 <lfs_file_flushedwrite+0x15c>
            if (!(file->flags & LFS_F_INLINE)) {
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d159      	bne.n	8012754 <lfs_file_flushedwrite+0x140>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d12f      	bne.n	801270c <lfs_file_flushedwrite+0xf8>
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d02b      	beq.n	801270c <lfs_file_flushedwrite+0xf8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80126c6:	3a01      	subs	r2, #1
 80126c8:	68b9      	ldr	r1, [r7, #8]
 80126ca:	3138      	adds	r1, #56	@ 0x38
                            file->pos-1, &file->block, &(lfs_off_t){0});
 80126cc:	2000      	movs	r0, #0
 80126ce:	6138      	str	r0, [r7, #16]
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80126d0:	f107 0010 	add.w	r0, r7, #16
 80126d4:	9003      	str	r0, [sp, #12]
 80126d6:	9102      	str	r1, [sp, #8]
 80126d8:	9201      	str	r2, [sp, #4]
 80126da:	9300      	str	r3, [sp, #0]
 80126dc:	462b      	mov	r3, r5
 80126de:	4622      	mov	r2, r4
 80126e0:	2100      	movs	r1, #0
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f7ff f828 	bl	8011738 <lfs_ctz_find>
 80126e8:	6238      	str	r0, [r7, #32]
                    if (err) {
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d007      	beq.n	8012700 <lfs_file_flushedwrite+0xec>
                        file->flags |= LFS_F_ERRED;
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80126f8:	68bb      	ldr	r3, [r7, #8]
 80126fa:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 80126fc:	6a3b      	ldr	r3, [r7, #32]
 80126fe:	e094      	b.n	801282a <lfs_file_flushedwrite+0x216>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	3340      	adds	r3, #64	@ 0x40
 8012704:	4619      	mov	r1, r3
 8012706:	68f8      	ldr	r0, [r7, #12]
 8012708:	f7fa fce2 	bl	800d0d0 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ckpoint(lfs);
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	f7fb fbf4 	bl	800defa <lfs_alloc_ckpoint>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8012718:	68fc      	ldr	r4, [r7, #12]
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012722:	68ba      	ldr	r2, [r7, #8]
 8012724:	3238      	adds	r2, #56	@ 0x38
 8012726:	68b9      	ldr	r1, [r7, #8]
 8012728:	313c      	adds	r1, #60	@ 0x3c
 801272a:	9102      	str	r1, [sp, #8]
 801272c:	9201      	str	r2, [sp, #4]
 801272e:	9300      	str	r3, [sp, #0]
 8012730:	462b      	mov	r3, r5
 8012732:	4622      	mov	r2, r4
 8012734:	4601      	mov	r1, r0
 8012736:	68f8      	ldr	r0, [r7, #12]
 8012738:	f7ff f86a 	bl	8011810 <lfs_ctz_extend>
 801273c:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d00f      	beq.n	8012764 <lfs_file_flushedwrite+0x150>
                    file->flags |= LFS_F_ERRED;
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012748:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8012750:	69fb      	ldr	r3, [r7, #28]
 8012752:	e06a      	b.n	801282a <lfs_file_flushedwrite+0x216>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	f06f 0201 	mvn.w	r2, #1
 801275a:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012768:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801277a:	1ad3      	subs	r3, r2, r3
 801277c:	4619      	mov	r1, r3
 801277e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012780:	f7fa fbe1 	bl	800cf46 <lfs_min>
 8012784:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 801278c:	68fc      	ldr	r4, [r7, #12]
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012792:	68ba      	ldr	r2, [r7, #8]
 8012794:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8012796:	69b9      	ldr	r1, [r7, #24]
 8012798:	9103      	str	r1, [sp, #12]
 801279a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801279c:	9102      	str	r1, [sp, #8]
 801279e:	9201      	str	r2, [sp, #4]
 80127a0:	9300      	str	r3, [sp, #0]
 80127a2:	2301      	movs	r3, #1
 80127a4:	4622      	mov	r2, r4
 80127a6:	4601      	mov	r1, r0
 80127a8:	68f8      	ldr	r0, [r7, #12]
 80127aa:	f7fa ff39 	bl	800d620 <lfs_bd_prog>
 80127ae:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d01c      	beq.n	80127f0 <lfs_file_flushedwrite+0x1dc>
                if (err == LFS_ERR_CORRUPT) {
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80127bc:	d007      	beq.n	80127ce <lfs_file_flushedwrite+0x1ba>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127c2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	e02d      	b.n	801282a <lfs_file_flushedwrite+0x216>
                    goto relocate;
 80127ce:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 80127d0:	68b9      	ldr	r1, [r7, #8]
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	f7ff fba6 	bl	8011f24 <lfs_file_relocate>
 80127d8:	6178      	str	r0, [r7, #20]
            if (err) {
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d0d2      	beq.n	8012786 <lfs_file_flushedwrite+0x172>
                file->flags |= LFS_F_ERRED;
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	e01c      	b.n	801282a <lfs_file_flushedwrite+0x216>
            break;
 80127f0:	bf00      	nop
            }
        }

        file->pos += diff;
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80127f6:	69bb      	ldr	r3, [r7, #24]
 80127f8:	441a      	add	r2, r3
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	441a      	add	r2, r3
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 801280a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	4413      	add	r3, r2
 8012810:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8012812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	1ad3      	subs	r3, r2, r3
 8012818:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ckpoint(lfs);
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f7fb fb6d 	bl	800defa <lfs_alloc_ckpoint>
    while (nsize > 0) {
 8012820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012822:	2b00      	cmp	r3, #0
 8012824:	f47f af29 	bne.w	801267a <lfs_file_flushedwrite+0x66>
    }

    return size;
 8012828:	683b      	ldr	r3, [r7, #0]
}
 801282a:	4618      	mov	r0, r3
 801282c:	3730      	adds	r7, #48	@ 0x30
 801282e:	46bd      	mov	sp, r7
 8012830:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012834 <lfs_file_write_>:

static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8012834:	b580      	push	{r7, lr}
 8012836:	b08a      	sub	sp, #40	@ 0x28
 8012838:	af00      	add	r7, sp, #0
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
 8012840:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012846:	f003 0302 	and.w	r3, r3, #2
 801284a:	2b00      	cmp	r3, #0
 801284c:	d106      	bne.n	801285c <lfs_file_write_+0x28>
 801284e:	4b38      	ldr	r3, [pc, #224]	@ (8012930 <lfs_file_write_+0xfc>)
 8012850:	4a38      	ldr	r2, [pc, #224]	@ (8012934 <lfs_file_write_+0x100>)
 8012852:	f640 6126 	movw	r1, #3622	@ 0xe26
 8012856:	4838      	ldr	r0, [pc, #224]	@ (8012938 <lfs_file_write_+0x104>)
 8012858:	f010 fd26 	bl	80232a8 <__assert_func>

    if (file->flags & LFS_F_READING) {
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012860:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8012864:	2b00      	cmp	r3, #0
 8012866:	d009      	beq.n	801287c <lfs_file_write_+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8012868:	68b9      	ldr	r1, [r7, #8]
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f7ff fc56 	bl	801211c <lfs_file_flush>
 8012870:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8012872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012874:	2b00      	cmp	r3, #0
 8012876:	d001      	beq.n	801287c <lfs_file_write_+0x48>
            return err;
 8012878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287a:	e055      	b.n	8012928 <lfs_file_write_+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012884:	2b00      	cmp	r3, #0
 8012886:	d009      	beq.n	801289c <lfs_file_write_+0x68>
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012890:	429a      	cmp	r2, r3
 8012892:	d203      	bcs.n	801289c <lfs_file_write_+0x68>
        file->pos = file->ctz.size;
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	441a      	add	r2, r3
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d902      	bls.n	80128b2 <lfs_file_write_+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 80128ac:	f06f 031a 	mvn.w	r3, #26
 80128b0:	e03a      	b.n	8012928 <lfs_file_write_+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d121      	bne.n	8012902 <lfs_file_write_+0xce>
 80128be:	68bb      	ldr	r3, [r7, #8]
 80128c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d91b      	bls.n	8012902 <lfs_file_write_+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128ce:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 80128d8:	e00e      	b.n	80128f8 <lfs_file_write_+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 80128da:	2300      	movs	r3, #0
 80128dc:	75fb      	strb	r3, [r7, #23]
 80128de:	f107 0217 	add.w	r2, r7, #23
 80128e2:	2301      	movs	r3, #1
 80128e4:	68b9      	ldr	r1, [r7, #8]
 80128e6:	68f8      	ldr	r0, [r7, #12]
 80128e8:	f7ff fe94 	bl	8012614 <lfs_file_flushedwrite>
 80128ec:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 80128ee:	69fb      	ldr	r3, [r7, #28]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	da01      	bge.n	80128f8 <lfs_file_write_+0xc4>
                return res;
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	e017      	b.n	8012928 <lfs_file_write_+0xf4>
        while (file->pos < pos) {
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128fc:	6a3a      	ldr	r2, [r7, #32]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d8eb      	bhi.n	80128da <lfs_file_write_+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	687a      	ldr	r2, [r7, #4]
 8012906:	68b9      	ldr	r1, [r7, #8]
 8012908:	68f8      	ldr	r0, [r7, #12]
 801290a:	f7ff fe83 	bl	8012614 <lfs_file_flushedwrite>
 801290e:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8012910:	69bb      	ldr	r3, [r7, #24]
 8012912:	2b00      	cmp	r3, #0
 8012914:	da01      	bge.n	801291a <lfs_file_write_+0xe6>
        return nsize;
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	e006      	b.n	8012928 <lfs_file_write_+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801291e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 8012926:	69bb      	ldr	r3, [r7, #24]
}
 8012928:	4618      	mov	r0, r3
 801292a:	3728      	adds	r7, #40	@ 0x28
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}
 8012930:	08030bc0 	.word	0x08030bc0
 8012934:	0803435c 	.word	0x0803435c
 8012938:	08030840 	.word	0x08030840

0801293c <lfs_file_seek_>:
#endif

static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801293c:	b580      	push	{r7, lr}
 801293e:	b08c      	sub	sp, #48	@ 0x30
 8012940:	af00      	add	r7, sp, #0
 8012942:	60f8      	str	r0, [r7, #12]
 8012944:	60b9      	str	r1, [r7, #8]
 8012946:	607a      	str	r2, [r7, #4]
 8012948:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d102      	bne.n	801295c <lfs_file_seek_+0x20>
        npos = off;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801295a:	e025      	b.n	80129a8 <lfs_file_seek_+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	2b01      	cmp	r3, #1
 8012960:	d10f      	bne.n	8012982 <lfs_file_seek_+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012966:	461a      	mov	r2, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	4413      	add	r3, r2
 801296c:	2b00      	cmp	r3, #0
 801296e:	da02      	bge.n	8012976 <lfs_file_seek_+0x3a>
            return LFS_ERR_INVAL;
 8012970:	f06f 0315 	mvn.w	r3, #21
 8012974:	e067      	b.n	8012a46 <lfs_file_seek_+0x10a>
        } else {
            npos = file->pos + off;
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	4413      	add	r3, r2
 801297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012980:	e012      	b.n	80129a8 <lfs_file_seek_+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	2b02      	cmp	r3, #2
 8012986:	d10f      	bne.n	80129a8 <lfs_file_seek_+0x6c>
        lfs_soff_t res = lfs_file_size_(lfs, file) + off;
 8012988:	68b9      	ldr	r1, [r7, #8]
 801298a:	68f8      	ldr	r0, [r7, #12]
 801298c:	f000 f86c 	bl	8012a68 <lfs_file_size_>
 8012990:	4602      	mov	r2, r0
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	4413      	add	r3, r2
 8012996:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 8012998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801299a:	2b00      	cmp	r3, #0
 801299c:	da02      	bge.n	80129a4 <lfs_file_seek_+0x68>
            return LFS_ERR_INVAL;
 801299e:	f06f 0315 	mvn.w	r3, #21
 80129a2:	e050      	b.n	8012a46 <lfs_file_seek_+0x10a>
        } else {
            npos = res;
 80129a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d902      	bls.n	80129b8 <lfs_file_seek_+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80129b2:	f06f 0315 	mvn.w	r3, #21
 80129b6:	e046      	b.n	8012a46 <lfs_file_seek_+0x10a>
    }

    if (file->pos == npos) {
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80129bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80129be:	429a      	cmp	r2, r3
 80129c0:	d101      	bne.n	80129c6 <lfs_file_seek_+0x8a>
        // noop - position has not changed
        return npos;
 80129c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129c4:	e03f      	b.n	8012a46 <lfs_file_seek_+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d12b      	bne.n	8012a2a <lfs_file_seek_+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80129d6:	61bb      	str	r3, [r7, #24]
 80129d8:	f107 0318 	add.w	r3, r7, #24
 80129dc:	4619      	mov	r1, r3
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	f7fe fe72 	bl	80116c8 <lfs_ctz_index>
 80129e4:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 80129e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129e8:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80129ea:	f107 0314 	add.w	r3, r7, #20
 80129ee:	4619      	mov	r1, r3
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f7fe fe69 	bl	80116c8 <lfs_ctz_index>
 80129f6:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80129f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129fa:	6a3b      	ldr	r3, [r7, #32]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d114      	bne.n	8012a2a <lfs_file_seek_+0xee>
                && noff >= file->cache.off
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d80f      	bhi.n	8012a2a <lfs_file_seek_+0xee>
                && noff < file->cache.off + file->cache.size) {
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a12:	441a      	add	r2, r3
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d907      	bls.n	8012a2a <lfs_file_seek_+0xee>
            file->pos = npos;
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a1e:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8012a20:	697a      	ldr	r2, [r7, #20]
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 8012a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a28:	e00d      	b.n	8012a46 <lfs_file_seek_+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8012a2a:	68b9      	ldr	r1, [r7, #8]
 8012a2c:	68f8      	ldr	r0, [r7, #12]
 8012a2e:	f7ff fb75 	bl	801211c <lfs_file_flush>
 8012a32:	61f8      	str	r0, [r7, #28]
    if (err) {
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d001      	beq.n	8012a3e <lfs_file_seek_+0x102>
        return err;
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	e003      	b.n	8012a46 <lfs_file_seek_+0x10a>
    }

    // update pos
    file->pos = npos;
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a42:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8012a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	3730      	adds	r7, #48	@ 0x30
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}

08012a4e <lfs_file_tell_>:

    return 0;
}
#endif

static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file) {
 8012a4e:	b480      	push	{r7}
 8012a50:	b083      	sub	sp, #12
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
 8012a56:	6039      	str	r1, [r7, #0]
    (void)lfs;
    return file->pos;
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	370c      	adds	r7, #12
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr

08012a68 <lfs_file_size_>:
    }

    return 0;
}

static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d009      	beq.n	8012a92 <lfs_file_size_+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a86:	4619      	mov	r1, r3
 8012a88:	4610      	mov	r0, r2
 8012a8a:	f7fa fa4c 	bl	800cf26 <lfs_max>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	e001      	b.n	8012a96 <lfs_file_size_+0x2e>
    }
#endif

    return file->ctz.size;
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3708      	adds	r7, #8
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}

08012a9e <lfs_stat_>:


/// General fs operations ///
static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8012a9e:	b580      	push	{r7, lr}
 8012aa0:	b08e      	sub	sp, #56	@ 0x38
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	60f8      	str	r0, [r7, #12]
 8012aa6:	60b9      	str	r1, [r7, #8]
 8012aa8:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8012aaa:	f107 0208 	add.w	r2, r7, #8
 8012aae:	f107 0114 	add.w	r1, r7, #20
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	68f8      	ldr	r0, [r7, #12]
 8012ab6:	f7fc fe4d 	bl	800f754 <lfs_dir_find>
 8012aba:	6378      	str	r0, [r7, #52]	@ 0x34
    if (tag < 0) {
 8012abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	da01      	bge.n	8012ac6 <lfs_stat_+0x28>
        return (int)tag;
 8012ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ac4:	e00c      	b.n	8012ae0 <lfs_stat_+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8012ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7fa ffaf 	bl	800da2c <lfs_tag_id>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	461a      	mov	r2, r3
 8012ad2:	f107 0114 	add.w	r1, r7, #20
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	68f8      	ldr	r0, [r7, #12]
 8012ada:	f7fc fd77 	bl	800f5cc <lfs_dir_getinfo>
 8012ade:	4603      	mov	r3, r0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3738      	adds	r7, #56	@ 0x38
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}

08012ae8 <lfs_remove_>:

#ifndef LFS_READONLY
static int lfs_remove_(lfs_t *lfs, const char *path) {
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b0a0      	sub	sp, #128	@ 0x80
 8012aec:	af02      	add	r7, sp, #8
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f001 fe0c 	bl	8014710 <lfs_fs_forceconsistency>
 8012af8:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 8012afa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <lfs_remove_+0x1c>
        return err;
 8012b00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012b02:	e0bc      	b.n	8012c7e <lfs_remove_+0x196>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8012b04:	463a      	mov	r2, r7
 8012b06:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7fc fe21 	bl	800f754 <lfs_dir_find>
 8012b12:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8012b14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	db09      	blt.n	8012b2e <lfs_remove_+0x46>
 8012b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7fa ff85 	bl	800da2c <lfs_tag_id>
 8012b22:	4603      	mov	r3, r0
 8012b24:	461a      	mov	r2, r3
 8012b26:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	d107      	bne.n	8012b3e <lfs_remove_+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8012b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	da01      	bge.n	8012b38 <lfs_remove_+0x50>
 8012b34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b36:	e0a2      	b.n	8012c7e <lfs_remove_+0x196>
 8012b38:	f06f 0315 	mvn.w	r3, #21
 8012b3c:	e09f      	b.n	8012c7e <lfs_remove_+0x196>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b42:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8012b44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7fa ff46 	bl	800d9d8 <lfs_tag_type3>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	2b02      	cmp	r3, #2
 8012b50:	d142      	bne.n	8012bd8 <lfs_remove_+0xf0>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8012b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b54:	4618      	mov	r0, r3
 8012b56:	f7fa ff69 	bl	800da2c <lfs_tag_id>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8012b5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012b62:	f043 0308 	orr.w	r3, r3, #8
 8012b66:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8012b6a:	f107 020c 	add.w	r2, r7, #12
 8012b6e:	9200      	str	r2, [sp, #0]
 8012b70:	4a45      	ldr	r2, [pc, #276]	@ (8012c88 <lfs_remove_+0x1a0>)
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f7fb fbd6 	bl	800e324 <lfs_dir_get>
 8012b78:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 8012b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	da01      	bge.n	8012b84 <lfs_remove_+0x9c>
            return (int)res;
 8012b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b82:	e07c      	b.n	8012c7e <lfs_remove_+0x196>
        }
        lfs_pair_fromle32(pair);
 8012b84:	f107 030c 	add.w	r3, r7, #12
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fa feb0 	bl	800d8ee <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8012b8e:	f107 020c 	add.w	r2, r7, #12
 8012b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012b96:	3308      	adds	r3, #8
 8012b98:	4619      	mov	r1, r3
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f7fc fcc8 	bl	800f530 <lfs_dir_fetch>
 8012ba0:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012ba2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d001      	beq.n	8012bac <lfs_remove_+0xc4>
            return err;
 8012ba8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012baa:	e068      	b.n	8012c7e <lfs_remove_+0x196>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8012bac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012bb0:	2b00      	cmp	r3, #0
//            return LFS_ERR_NOTEMPTY;  COMMENT make possible to remove directory iven if not epty.
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8012bb2:	2101      	movs	r1, #1
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f001 fa89 	bl	80140cc <lfs_fs_preporphans>
 8012bba:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012bbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d001      	beq.n	8012bc6 <lfs_remove_+0xde>
            return err;
 8012bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012bc4:	e05b      	b.n	8012c7e <lfs_remove_+0x196>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012bd6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8012bd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fa ff26 	bl	800da2c <lfs_tag_id>
 8012be0:	4603      	mov	r3, r0
 8012be2:	029b      	lsls	r3, r3, #10
 8012be4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012be8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012bec:	61fb      	str	r3, [r7, #28]
 8012bee:	2300      	movs	r3, #0
 8012bf0:	623b      	str	r3, [r7, #32]
 8012bf2:	f107 021c 	add.w	r2, r7, #28
 8012bf6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7fe faf1 	bl	80111e4 <lfs_dir_commit>
 8012c02:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8012c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d004      	beq.n	8012c14 <lfs_remove_+0x12c>
        lfs->mlist = dir.next;
 8012c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8012c10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c12:	e034      	b.n	8012c7e <lfs_remove_+0x196>
    }

    lfs->mlist = dir.next;
 8012c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8012c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7fa fedb 	bl	800d9d8 <lfs_tag_type3>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	d129      	bne.n	8012c7c <lfs_remove_+0x194>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8012c28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f001 fa4d 	bl	80140cc <lfs_fs_preporphans>
 8012c32:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d001      	beq.n	8012c3e <lfs_remove_+0x156>
            return err;
 8012c3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c3c:	e01f      	b.n	8012c7e <lfs_remove_+0x196>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8012c3e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8012c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c46:	3308      	adds	r3, #8
 8012c48:	4619      	mov	r1, r3
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f001 f8f4 	bl	8013e38 <lfs_fs_pred>
 8012c50:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d001      	beq.n	8012c5c <lfs_remove_+0x174>
            return err;
 8012c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c5a:	e010      	b.n	8012c7e <lfs_remove_+0x196>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8012c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c60:	f103 0208 	add.w	r2, r3, #8
 8012c64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c68:	4619      	mov	r1, r3
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f7fd f90c 	bl	800fe88 <lfs_dir_drop>
 8012c70:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8012c72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <lfs_remove_+0x194>
            return err;
 8012c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012c7a:	e000      	b.n	8012c7e <lfs_remove_+0x196>
        }
    }

    return 0;
 8012c7c:	2300      	movs	r3, #0
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3778      	adds	r7, #120	@ 0x78
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	700ffc00 	.word	0x700ffc00

08012c8c <lfs_rename_>:
#endif

#ifndef LFS_READONLY
static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8012c8c:	b590      	push	{r4, r7, lr}
 8012c8e:	b0c3      	sub	sp, #268	@ 0x10c
 8012c90:	af02      	add	r7, sp, #8
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8012c98:	68f8      	ldr	r0, [r7, #12]
 8012c9a:	f001 fd39 	bl	8014710 <lfs_fs_forceconsistency>
 8012c9e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    if (err) {
 8012ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d002      	beq.n	8012cb0 <lfs_rename_+0x24>
        return err;
 8012caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012cae:	e203      	b.n	80130b8 <lfs_rename_+0x42c>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8012cb0:	f107 0208 	add.w	r2, r7, #8
 8012cb4:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8012cb8:	2300      	movs	r3, #0
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f7fc fd4a 	bl	800f754 <lfs_dir_find>
 8012cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8012cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	db0a      	blt.n	8012ce2 <lfs_rename_+0x56>
 8012ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7fa feab 	bl	800da2c <lfs_tag_id>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	461a      	mov	r2, r3
 8012cda:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d109      	bne.n	8012cf6 <lfs_rename_+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8012ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	da02      	bge.n	8012cf0 <lfs_rename_+0x64>
 8012cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012cee:	e1e3      	b.n	80130b8 <lfs_rename_+0x42c>
 8012cf0:	f06f 0315 	mvn.w	r3, #21
 8012cf4:	e1e0      	b.n	80130b8 <lfs_rename_+0x42c>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8012cf6:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 8012cfa:	1d3a      	adds	r2, r7, #4
 8012cfc:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f7fc fd27 	bl	800f754 <lfs_dir_find>
 8012d06:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8012d0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	db0a      	blt.n	8012d28 <lfs_rename_+0x9c>
 8012d12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fa fe88 	bl	800da2c <lfs_tag_id>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	461a      	mov	r2, r3
 8012d20:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d114      	bne.n	8012d52 <lfs_rename_+0xc6>
 8012d28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d2c:	f113 0f02 	cmn.w	r3, #2
 8012d30:	d105      	bne.n	8012d3e <lfs_rename_+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8012d32:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012d36:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d109      	bne.n	8012d52 <lfs_rename_+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8012d3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	da02      	bge.n	8012d4c <lfs_rename_+0xc0>
 8012d46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d4a:	e1b5      	b.n	80130b8 <lfs_rename_+0x42c>
 8012d4c:	f06f 0315 	mvn.w	r3, #21
 8012d50:	e1b2      	b.n	80130b8 <lfs_rename_+0x42c>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8012d52:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8012d56:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8012d5a:	4611      	mov	r1, r2
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7fa fd6f 	bl	800d840 <lfs_pair_cmp>
 8012d62:	4603      	mov	r3, r0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	bf0c      	ite	eq
 8012d68:	2301      	moveq	r3, #1
 8012d6a:	2300      	movne	r3, #0
 8012d6c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8012d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7fa fe59 	bl	800da2c <lfs_tag_id>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d84:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8012d86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012d8a:	f113 0f02 	cmn.w	r3, #2
 8012d8e:	d120      	bne.n	8012dd2 <lfs_rename_+0x146>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7ed fa84 	bl	80002a0 <strlen>
 8012d98:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (nlen > lfs->name_max) {
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012da0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d902      	bls.n	8012dae <lfs_rename_+0x122>
            return LFS_ERR_NAMETOOLONG;
 8012da8:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8012dac:	e184      	b.n	80130b8 <lfs_rename_+0x42c>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8012dae:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	f000 8090 	beq.w	8012ed8 <lfs_rename_+0x24c>
 8012db8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012dbc:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	f0c0 8089 	bcc.w	8012ed8 <lfs_rename_+0x24c>
            newoldid += 1;
 8012dc6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012dca:	3301      	adds	r3, #1
 8012dcc:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 8012dd0:	e082      	b.n	8012ed8 <lfs_rename_+0x24c>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8012dd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7fa fdfe 	bl	800d9d8 <lfs_tag_type3>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	461c      	mov	r4, r3
 8012de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7fa fdf7 	bl	800d9d8 <lfs_tag_type3>
 8012dea:	4603      	mov	r3, r0
 8012dec:	429c      	cmp	r4, r3
 8012dee:	d00d      	beq.n	8012e0c <lfs_rename_+0x180>
        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)
 8012df0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7fa fdef 	bl	800d9d8 <lfs_tag_type3>
 8012dfa:	4603      	mov	r3, r0
                ? LFS_ERR_ISDIR
                : LFS_ERR_NOTDIR;
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	d102      	bne.n	8012e06 <lfs_rename_+0x17a>
 8012e00:	f06f 0314 	mvn.w	r3, #20
 8012e04:	e158      	b.n	80130b8 <lfs_rename_+0x42c>
 8012e06:	f06f 0313 	mvn.w	r3, #19
 8012e0a:	e155      	b.n	80130b8 <lfs_rename_+0x42c>
    } else if (samepair && newid == newoldid) {
 8012e0c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d007      	beq.n	8012e24 <lfs_rename_+0x198>
 8012e14:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012e18:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d101      	bne.n	8012e24 <lfs_rename_+0x198>
        // we're renaming to ourselves??
        return 0;
 8012e20:	2300      	movs	r3, #0
 8012e22:	e149      	b.n	80130b8 <lfs_rename_+0x42c>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8012e24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f7fa fdd5 	bl	800d9d8 <lfs_tag_type3>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b02      	cmp	r3, #2
 8012e32:	d151      	bne.n	8012ed8 <lfs_rename_+0x24c>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8012e34:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012e38:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8012e3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8012e3e:	f043 0308 	orr.w	r3, r3, #8
 8012e42:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012e46:	f107 0220 	add.w	r2, r7, #32
 8012e4a:	9200      	str	r2, [sp, #0]
 8012e4c:	4a9d      	ldr	r2, [pc, #628]	@ (80130c4 <lfs_rename_+0x438>)
 8012e4e:	68f8      	ldr	r0, [r7, #12]
 8012e50:	f7fb fa68 	bl	800e324 <lfs_dir_get>
 8012e54:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        if (res < 0) {
 8012e58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	da02      	bge.n	8012e66 <lfs_rename_+0x1da>
            return (int)res;
 8012e60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8012e64:	e128      	b.n	80130b8 <lfs_rename_+0x42c>
        }
        lfs_pair_fromle32(prevpair);
 8012e66:	f107 0320 	add.w	r3, r7, #32
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7fa fd3f 	bl	800d8ee <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 8012e70:	f107 0220 	add.w	r2, r7, #32
 8012e74:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8012e78:	3308      	adds	r3, #8
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f7fc fb57 	bl	800f530 <lfs_dir_fetch>
 8012e82:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012e86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d002      	beq.n	8012e94 <lfs_rename_+0x208>
            return err;
 8012e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012e92:	e111      	b.n	80130b8 <lfs_rename_+0x42c>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8012e94:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d103      	bne.n	8012ea4 <lfs_rename_+0x218>
 8012e9c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d002      	beq.n	8012eaa <lfs_rename_+0x21e>
            return LFS_ERR_NOTEMPTY;
 8012ea4:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 8012ea8:	e106      	b.n	80130b8 <lfs_rename_+0x42c>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8012eaa:	2101      	movs	r1, #1
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	f001 f90d 	bl	80140cc <lfs_fs_preporphans>
 8012eb2:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8012eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d002      	beq.n	8012ec4 <lfs_rename_+0x238>
            return err;
 8012ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012ec2:	e0f9      	b.n	80130b8 <lfs_rename_+0x42c>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        prevdir.id = 0;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        lfs->mlist = &prevdir;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8012ed6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (!samepair) {
 8012ed8:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012edc:	f083 0301 	eor.w	r3, r3, #1
 8012ee0:	b2db      	uxtb	r3, r3
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d007      	beq.n	8012ef6 <lfs_rename_+0x26a>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8012ee6:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8012eea:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012eee:	4619      	mov	r1, r3
 8012ef0:	68f8      	ldr	r0, [r7, #12]
 8012ef2:	f001 f93b 	bl	801416c <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8012ef6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8012efa:	f113 0f02 	cmn.w	r3, #2
 8012efe:	d007      	beq.n	8012f10 <lfs_rename_+0x284>
 8012f00:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012f04:	029b      	lsls	r3, r3, #10
 8012f06:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012f0a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012f0e:	e000      	b.n	8012f12 <lfs_rename_+0x286>
 8012f10:	2300      	movs	r3, #0
 8012f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8012f14:	2300      	movs	r3, #0
 8012f16:	657b      	str	r3, [r7, #84]	@ 0x54
 8012f18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012f1c:	029b      	lsls	r3, r3, #10
 8012f1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012f26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012f28:	2300      	movs	r3, #0
 8012f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7fa fd51 	bl	800d9d8 <lfs_tag_type3>
 8012f36:	4603      	mov	r3, r0
 8012f38:	051a      	lsls	r2, r3, #20
 8012f3a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012f3e:	029b      	lsls	r3, r3, #10
 8012f40:	ea42 0403 	orr.w	r4, r2, r3
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7ed f9aa 	bl	80002a0 <strlen>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	4323      	orrs	r3, r4
 8012f50:	663b      	str	r3, [r7, #96]	@ 0x60
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	667b      	str	r3, [r7, #100]	@ 0x64
 8012f56:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8012f5a:	029c      	lsls	r4, r3, #10
 8012f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7fa fd63 	bl	800da2c <lfs_tag_id>
 8012f66:	4603      	mov	r3, r0
 8012f68:	4323      	orrs	r3, r4
 8012f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012f72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012f74:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8012f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012f7a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d007      	beq.n	8012f92 <lfs_rename_+0x306>
 8012f82:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8012f86:	029b      	lsls	r3, r3, #10
 8012f88:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012f8c:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8012f90:	e000      	b.n	8012f94 <lfs_rename_+0x308>
 8012f92:	2300      	movs	r3, #0
 8012f94:	673b      	str	r3, [r7, #112]	@ 0x70
 8012f96:	2300      	movs	r3, #0
 8012f98:	677b      	str	r3, [r7, #116]	@ 0x74
 8012f9a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012f9e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8012fa2:	2305      	movs	r3, #5
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f7fe f91d 	bl	80111e4 <lfs_dir_commit>
 8012faa:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 8012fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d005      	beq.n	8012fc2 <lfs_rename_+0x336>
        lfs->mlist = prevdir.next;
 8012fb6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 8012fbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8012fc0:	e07a      	b.n	80130b8 <lfs_rename_+0x42c>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 8012fc2:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8012fc6:	f083 0301 	eor.w	r3, r3, #1
 8012fca:	b2db      	uxtb	r3, r3
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d02f      	beq.n	8013030 <lfs_rename_+0x3a4>
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	3330      	adds	r3, #48	@ 0x30
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7fa fdbe 	bl	800db56 <lfs_gstate_hasmove>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d027      	beq.n	8013030 <lfs_rename_+0x3a4>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f001 f8c0 	bl	801416c <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8012fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7fa fd1b 	bl	800da2c <lfs_tag_id>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	029b      	lsls	r3, r3, #10
 8012ffa:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8012ffe:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8013002:	61bb      	str	r3, [r7, #24]
 8013004:	2300      	movs	r3, #0
 8013006:	61fb      	str	r3, [r7, #28]
 8013008:	f107 0218 	add.w	r2, r7, #24
 801300c:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8013010:	2301      	movs	r3, #1
 8013012:	68f8      	ldr	r0, [r7, #12]
 8013014:	f7fe f8e6 	bl	80111e4 <lfs_dir_commit>
 8013018:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 801301c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013020:	2b00      	cmp	r3, #0
 8013022:	d005      	beq.n	8013030 <lfs_rename_+0x3a4>
            lfs->mlist = prevdir.next;
 8013024:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 801302a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801302e:	e043      	b.n	80130b8 <lfs_rename_+0x42c>
        }
    }

    lfs->mlist = prevdir.next;
 8013030:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	629a      	str	r2, [r3, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 8013036:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 801303a:	f113 0f02 	cmn.w	r3, #2
 801303e:	d03a      	beq.n	80130b6 <lfs_rename_+0x42a>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8013040:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8013044:	4618      	mov	r0, r3
 8013046:	f7fa fcc7 	bl	800d9d8 <lfs_tag_type3>
 801304a:	4603      	mov	r3, r0
 801304c:	2b02      	cmp	r3, #2
 801304e:	d132      	bne.n	80130b6 <lfs_rename_+0x42a>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8013050:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	f001 f839 	bl	80140cc <lfs_fs_preporphans>
 801305a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 801305e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013062:	2b00      	cmp	r3, #0
 8013064:	d002      	beq.n	801306c <lfs_rename_+0x3e0>
            return err;
 8013066:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801306a:	e025      	b.n	80130b8 <lfs_rename_+0x42c>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 801306c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8013070:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8013074:	3308      	adds	r3, #8
 8013076:	4619      	mov	r1, r3
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f000 fedd 	bl	8013e38 <lfs_fs_pred>
 801307e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8013082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8013086:	2b00      	cmp	r3, #0
 8013088:	d002      	beq.n	8013090 <lfs_rename_+0x404>
            return err;
 801308a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801308e:	e013      	b.n	80130b8 <lfs_rename_+0x42c>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 8013090:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8013094:	f103 0208 	add.w	r2, r3, #8
 8013098:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801309c:	4619      	mov	r1, r3
 801309e:	68f8      	ldr	r0, [r7, #12]
 80130a0:	f7fc fef2 	bl	800fe88 <lfs_dir_drop>
 80130a4:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 80130a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d002      	beq.n	80130b6 <lfs_rename_+0x42a>
            return err;
 80130b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80130b4:	e000      	b.n	80130b8 <lfs_rename_+0x42c>
        }
    }

    return 0;
 80130b6:	2300      	movs	r3, #0
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd90      	pop	{r4, r7, pc}
 80130c2:	bf00      	nop
 80130c4:	700ffc00 	.word	0x700ffc00

080130c8 <lfs_init>:
#if LFS_ATTR_MAX > 1022
#error "Invalid LFS_ATTR_MAX, must be <= 1022"
#endif

// common filesystem initialization
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80130c8:	b590      	push	{r4, r7, lr}
 80130ca:	b08d      	sub	sp, #52	@ 0x34
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	683a      	ldr	r2, [r7, #0]
 80130d6:	669a      	str	r2, [r3, #104]	@ 0x68
    lfs->block_count = cfg->block_count;  // May be 0
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	66da      	str	r2, [r3, #108]	@ 0x6c
    int err = 0;
 80130e0:	2300      	movs	r3, #0
 80130e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // which littlefs currently does not support
    LFS_ASSERT((bool)0x80000000);

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130e8:	69db      	ldr	r3, [r3, #28]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d106      	bne.n	80130fc <lfs_init+0x34>
 80130ee:	4b96      	ldr	r3, [pc, #600]	@ (8013348 <lfs_init+0x280>)
 80130f0:	4a96      	ldr	r2, [pc, #600]	@ (801334c <lfs_init+0x284>)
 80130f2:	f241 0152 	movw	r1, #4178	@ 0x1052
 80130f6:	4896      	ldr	r0, [pc, #600]	@ (8013350 <lfs_init+0x288>)
 80130f8:	f010 f8d6 	bl	80232a8 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013100:	6a1b      	ldr	r3, [r3, #32]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d106      	bne.n	8013114 <lfs_init+0x4c>
 8013106:	4b93      	ldr	r3, [pc, #588]	@ (8013354 <lfs_init+0x28c>)
 8013108:	4a90      	ldr	r2, [pc, #576]	@ (801334c <lfs_init+0x284>)
 801310a:	f241 0153 	movw	r1, #4179	@ 0x1053
 801310e:	4890      	ldr	r0, [pc, #576]	@ (8013350 <lfs_init+0x288>)
 8013110:	f010 f8ca 	bl	80232a8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801311a:	2b00      	cmp	r3, #0
 801311c:	d106      	bne.n	801312c <lfs_init+0x64>
 801311e:	4b8e      	ldr	r3, [pc, #568]	@ (8013358 <lfs_init+0x290>)
 8013120:	4a8a      	ldr	r2, [pc, #552]	@ (801334c <lfs_init+0x284>)
 8013122:	f241 0154 	movw	r1, #4180	@ 0x1054
 8013126:	488a      	ldr	r0, [pc, #552]	@ (8013350 <lfs_init+0x288>)
 8013128:	f010 f8be 	bl	80232a8 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013132:	687a      	ldr	r2, [r7, #4]
 8013134:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013136:	69d2      	ldr	r2, [r2, #28]
 8013138:	fbb3 f1f2 	udiv	r1, r3, r2
 801313c:	fb01 f202 	mul.w	r2, r1, r2
 8013140:	1a9b      	subs	r3, r3, r2
 8013142:	2b00      	cmp	r3, #0
 8013144:	d006      	beq.n	8013154 <lfs_init+0x8c>
 8013146:	4b85      	ldr	r3, [pc, #532]	@ (801335c <lfs_init+0x294>)
 8013148:	4a80      	ldr	r2, [pc, #512]	@ (801334c <lfs_init+0x284>)
 801314a:	f241 0158 	movw	r1, #4184	@ 0x1058
 801314e:	4880      	ldr	r0, [pc, #512]	@ (8013350 <lfs_init+0x288>)
 8013150:	f010 f8aa 	bl	80232a8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801315e:	6a12      	ldr	r2, [r2, #32]
 8013160:	fbb3 f1f2 	udiv	r1, r3, r2
 8013164:	fb01 f202 	mul.w	r2, r1, r2
 8013168:	1a9b      	subs	r3, r3, r2
 801316a:	2b00      	cmp	r3, #0
 801316c:	d006      	beq.n	801317c <lfs_init+0xb4>
 801316e:	4b7c      	ldr	r3, [pc, #496]	@ (8013360 <lfs_init+0x298>)
 8013170:	4a76      	ldr	r2, [pc, #472]	@ (801334c <lfs_init+0x284>)
 8013172:	f241 0159 	movw	r1, #4185	@ 0x1059
 8013176:	4876      	ldr	r0, [pc, #472]	@ (8013350 <lfs_init+0x288>)
 8013178:	f010 f896 	bl	80232a8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013186:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8013188:	fbb3 f1f2 	udiv	r1, r3, r2
 801318c:	fb01 f202 	mul.w	r2, r1, r2
 8013190:	1a9b      	subs	r3, r3, r2
 8013192:	2b00      	cmp	r3, #0
 8013194:	d006      	beq.n	80131a4 <lfs_init+0xdc>
 8013196:	4b73      	ldr	r3, [pc, #460]	@ (8013364 <lfs_init+0x29c>)
 8013198:	4a6c      	ldr	r2, [pc, #432]	@ (801334c <lfs_init+0x284>)
 801319a:	f241 015a 	movw	r1, #4186	@ 0x105a
 801319e:	486c      	ldr	r0, [pc, #432]	@ (8013350 <lfs_init+0x288>)
 80131a0:	f010 f882 	bl	80232a8 <__assert_func>

    // check that the block size is large enough to fit all ctz pointers
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80131ac:	d806      	bhi.n	80131bc <lfs_init+0xf4>
 80131ae:	4b6e      	ldr	r3, [pc, #440]	@ (8013368 <lfs_init+0x2a0>)
 80131b0:	4a66      	ldr	r2, [pc, #408]	@ (801334c <lfs_init+0x284>)
 80131b2:	f241 015d 	movw	r1, #4189	@ 0x105d
 80131b6:	4866      	ldr	r0, [pc, #408]	@ (8013350 <lfs_init+0x288>)
 80131b8:	f010 f876 	bl	80232a8 <__assert_func>
    // this is the exact calculation for all ctz pointers, if this fails
    // and the simpler assert above does not, math must be broken
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131c2:	3b08      	subs	r3, #8
 80131c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80131c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7f9 fef1 	bl	800cfb4 <lfs_npw2>
 80131d2:	4603      	mov	r3, r0
 80131d4:	009a      	lsls	r2, r3, #2
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131dc:	429a      	cmp	r2, r3
 80131de:	d906      	bls.n	80131ee <lfs_init+0x126>
 80131e0:	4b62      	ldr	r3, [pc, #392]	@ (801336c <lfs_init+0x2a4>)
 80131e2:	4a5a      	ldr	r2, [pc, #360]	@ (801334c <lfs_init+0x284>)
 80131e4:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 80131e8:	4859      	ldr	r0, [pc, #356]	@ (8013350 <lfs_init+0x288>)
 80131ea:	f010 f85d 	bl	80232a8 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d106      	bne.n	8013206 <lfs_init+0x13e>
 80131f8:	4b5d      	ldr	r3, [pc, #372]	@ (8013370 <lfs_init+0x2a8>)
 80131fa:	4a54      	ldr	r2, [pc, #336]	@ (801334c <lfs_init+0x284>)
 80131fc:	f241 0169 	movw	r1, #4201	@ 0x1069
 8013200:	4853      	ldr	r0, [pc, #332]	@ (8013350 <lfs_init+0x288>)
 8013202:	f010 f851 	bl	80232a8 <__assert_func>

    // check that compact_thresh makes sense
    //
    // metadata can't be compacted below block_size/2, and metadata can't
    // exceed a block_size
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801320c:	2b00      	cmp	r3, #0
 801320e:	d00f      	beq.n	8013230 <lfs_init+0x168>
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801321c:	085b      	lsrs	r3, r3, #1
 801321e:	429a      	cmp	r2, r3
 8013220:	d206      	bcs.n	8013230 <lfs_init+0x168>
 8013222:	4b54      	ldr	r3, [pc, #336]	@ (8013374 <lfs_init+0x2ac>)
 8013224:	4a49      	ldr	r2, [pc, #292]	@ (801334c <lfs_init+0x284>)
 8013226:	f241 016f 	movw	r1, #4207	@ 0x106f
 801322a:	4849      	ldr	r0, [pc, #292]	@ (8013350 <lfs_init+0x288>)
 801322c:	f010 f83c 	bl	80232a8 <__assert_func>
            || lfs->cfg->compact_thresh >= lfs->cfg->block_size/2);
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801323a:	d00e      	beq.n	801325a <lfs_init+0x192>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013248:	429a      	cmp	r2, r3
 801324a:	d906      	bls.n	801325a <lfs_init+0x192>
 801324c:	4b4a      	ldr	r3, [pc, #296]	@ (8013378 <lfs_init+0x2b0>)
 801324e:	4a3f      	ldr	r2, [pc, #252]	@ (801334c <lfs_init+0x284>)
 8013250:	f241 0171 	movw	r1, #4209	@ 0x1071
 8013254:	483e      	ldr	r0, [pc, #248]	@ (8013350 <lfs_init+0x288>)
 8013256:	f010 f827 	bl	80232a8 <__assert_func>
            || lfs->cfg->compact_thresh <= lfs->cfg->block_size);

    // setup read cache
    if (lfs->cfg->read_buffer) {
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013260:	2b00      	cmp	r3, #0
 8013262:	d005      	beq.n	8013270 <lfs_init+0x1a8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	60da      	str	r2, [r3, #12]
 801326e:	e010      	b.n	8013292 <lfs_init+0x1ca>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013276:	4618      	mov	r0, r3
 8013278:	f7f9 ff04 	bl	800d084 <lfs_malloc>
 801327c:	4602      	mov	r2, r0
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	68db      	ldr	r3, [r3, #12]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d103      	bne.n	8013292 <lfs_init+0x1ca>
            err = LFS_ERR_NOMEM;
 801328a:	f06f 030b 	mvn.w	r3, #11
 801328e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8013290:	e163      	b.n	801355a <lfs_init+0x492>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013298:	2b00      	cmp	r3, #0
 801329a:	d005      	beq.n	80132a8 <lfs_init+0x1e0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80132a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	61da      	str	r2, [r3, #28]
 80132a6:	e010      	b.n	80132ca <lfs_init+0x202>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80132ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7f9 fee8 	bl	800d084 <lfs_malloc>
 80132b4:	4602      	mov	r2, r0
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	69db      	ldr	r3, [r3, #28]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d103      	bne.n	80132ca <lfs_init+0x202>
            err = LFS_ERR_NOMEM;
 80132c2:	f06f 030b 	mvn.w	r3, #11
 80132c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80132c8:	e147      	b.n	801355a <lfs_init+0x492>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	4619      	mov	r1, r3
 80132ce:	6878      	ldr	r0, [r7, #4]
 80132d0:	f7f9 fefe 	bl	800d0d0 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	3310      	adds	r3, #16
 80132d8:	4619      	mov	r1, r3
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f7f9 fef8 	bl	800d0d0 <lfs_cache_zero>

    // setup lookahead buffer, note mount finishes initializing this after
    // we establish a decent pseudo-random seed
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80132e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d106      	bne.n	80132f8 <lfs_init+0x230>
 80132ea:	4b24      	ldr	r3, [pc, #144]	@ (801337c <lfs_init+0x2b4>)
 80132ec:	4a17      	ldr	r2, [pc, #92]	@ (801334c <lfs_init+0x284>)
 80132ee:	f241 0190 	movw	r1, #4240	@ 0x1090
 80132f2:	4817      	ldr	r0, [pc, #92]	@ (8013350 <lfs_init+0x288>)
 80132f4:	f00f ffd8 	bl	80232a8 <__assert_func>
    if (lfs->cfg->lookahead_buffer) {
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80132fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d005      	beq.n	801330e <lfs_init+0x246>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	665a      	str	r2, [r3, #100]	@ 0x64
 801330c:	e010      	b.n	8013330 <lfs_init+0x268>
    } else {
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013314:	4618      	mov	r0, r3
 8013316:	f7f9 feb5 	bl	800d084 <lfs_malloc>
 801331a:	4602      	mov	r2, r0
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013324:	2b00      	cmp	r3, #0
 8013326:	d103      	bne.n	8013330 <lfs_init+0x268>
            err = LFS_ERR_NOMEM;
 8013328:	f06f 030b 	mvn.w	r3, #11
 801332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 801332e:	e114      	b.n	801355a <lfs_init+0x492>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013336:	2bff      	cmp	r3, #255	@ 0xff
 8013338:	d924      	bls.n	8013384 <lfs_init+0x2bc>
 801333a:	4b11      	ldr	r3, [pc, #68]	@ (8013380 <lfs_init+0x2b8>)
 801333c:	4a03      	ldr	r2, [pc, #12]	@ (801334c <lfs_init+0x284>)
 801333e:	f241 019c 	movw	r1, #4252	@ 0x109c
 8013342:	4803      	ldr	r0, [pc, #12]	@ (8013350 <lfs_init+0x288>)
 8013344:	f00f ffb0 	bl	80232a8 <__assert_func>
 8013348:	08030bf0 	.word	0x08030bf0
 801334c:	0803436c 	.word	0x0803436c
 8013350:	08030840 	.word	0x08030840
 8013354:	08030c0c 	.word	0x08030c0c
 8013358:	08030c28 	.word	0x08030c28
 801335c:	08030c44 	.word	0x08030c44
 8013360:	08030c74 	.word	0x08030c74
 8013364:	08030ca4 	.word	0x08030ca4
 8013368:	08030cd8 	.word	0x08030cd8
 801336c:	08030cf4 	.word	0x08030cf4
 8013370:	08030d40 	.word	0x08030d40
 8013374:	08030d5c 	.word	0x08030d5c
 8013378:	08030db0 	.word	0x08030db0
 801337c:	08030e10 	.word	0x08030e10
 8013380:	08030e30 	.word	0x08030e30
    lfs->name_max = lfs->cfg->name_max;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013388:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->name_max) {
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013392:	2b00      	cmp	r3, #0
 8013394:	d102      	bne.n	801339c <lfs_init+0x2d4>
        lfs->name_max = LFS_NAME_MAX;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	22ff      	movs	r2, #255	@ 0xff
 801339a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80133a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	da06      	bge.n	80133b4 <lfs_init+0x2ec>
 80133a6:	4b71      	ldr	r3, [pc, #452]	@ (801356c <lfs_init+0x4a4>)
 80133a8:	4a71      	ldr	r2, [pc, #452]	@ (8013570 <lfs_init+0x4a8>)
 80133aa:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 80133ae:	4871      	ldr	r0, [pc, #452]	@ (8013574 <lfs_init+0x4ac>)
 80133b0:	f00f ff7a 	bl	80232a8 <__assert_func>
    lfs->file_max = lfs->cfg->file_max;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80133b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->file_max) {
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d103      	bne.n	80133ce <lfs_init+0x306>
        lfs->file_max = LFS_FILE_MAX;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80133cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80133d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133d4:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80133d8:	4293      	cmp	r3, r2
 80133da:	d906      	bls.n	80133ea <lfs_init+0x322>
 80133dc:	4b66      	ldr	r3, [pc, #408]	@ (8013578 <lfs_init+0x4b0>)
 80133de:	4a64      	ldr	r2, [pc, #400]	@ (8013570 <lfs_init+0x4a8>)
 80133e0:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 80133e4:	4863      	ldr	r0, [pc, #396]	@ (8013574 <lfs_init+0x4ac>)
 80133e6:	f00f ff5f 	bl	80232a8 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80133ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	679a      	str	r2, [r3, #120]	@ 0x78
    if (!lfs->attr_max) {
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d103      	bne.n	8013404 <lfs_init+0x33c>
        lfs->attr_max = LFS_ATTR_MAX;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8013402:	679a      	str	r2, [r3, #120]	@ 0x78
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013410:	429a      	cmp	r2, r3
 8013412:	d906      	bls.n	8013422 <lfs_init+0x35a>
 8013414:	4b59      	ldr	r3, [pc, #356]	@ (801357c <lfs_init+0x4b4>)
 8013416:	4a56      	ldr	r2, [pc, #344]	@ (8013570 <lfs_init+0x4a8>)
 8013418:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 801341c:	4855      	ldr	r0, [pc, #340]	@ (8013574 <lfs_init+0x4ac>)
 801341e:	f00f ff43 	bl	80232a8 <__assert_func>

    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801342c:	d00e      	beq.n	801344c <lfs_init+0x384>
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013432:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801343a:	429a      	cmp	r2, r3
 801343c:	d906      	bls.n	801344c <lfs_init+0x384>
 801343e:	4b50      	ldr	r3, [pc, #320]	@ (8013580 <lfs_init+0x4b8>)
 8013440:	4a4b      	ldr	r2, [pc, #300]	@ (8013570 <lfs_init+0x4a8>)
 8013442:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8013446:	484b      	ldr	r0, [pc, #300]	@ (8013574 <lfs_init+0x4ac>)
 8013448:	f00f ff2e 	bl	80232a8 <__assert_func>
            || lfs->cfg->inline_max <= lfs->cfg->cache_size);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013456:	d00d      	beq.n	8013474 <lfs_init+0x3ac>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801345c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013462:	429a      	cmp	r2, r3
 8013464:	d906      	bls.n	8013474 <lfs_init+0x3ac>
 8013466:	4b47      	ldr	r3, [pc, #284]	@ (8013584 <lfs_init+0x4bc>)
 8013468:	4a41      	ldr	r2, [pc, #260]	@ (8013570 <lfs_init+0x4a8>)
 801346a:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 801346e:	4841      	ldr	r0, [pc, #260]	@ (8013574 <lfs_init+0x4ac>)
 8013470:	f00f ff1a 	bl	80232a8 <__assert_func>
            || lfs->cfg->inline_max <= lfs->attr_max);
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801347a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801347e:	d019      	beq.n	80134b4 <lfs_init+0x3ec>
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013484:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801348c:	2b00      	cmp	r3, #0
 801348e:	d004      	beq.n	801349a <lfs_init+0x3d2>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013496:	08db      	lsrs	r3, r3, #3
 8013498:	e003      	b.n	80134a2 <lfs_init+0x3da>
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134a0:	08db      	lsrs	r3, r3, #3
 80134a2:	4293      	cmp	r3, r2
 80134a4:	d206      	bcs.n	80134b4 <lfs_init+0x3ec>
 80134a6:	4b38      	ldr	r3, [pc, #224]	@ (8013588 <lfs_init+0x4c0>)
 80134a8:	4a31      	ldr	r2, [pc, #196]	@ (8013570 <lfs_init+0x4a8>)
 80134aa:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 80134ae:	4831      	ldr	r0, [pc, #196]	@ (8013574 <lfs_init+0x4ac>)
 80134b0:	f00f fefa 	bl	80232a8 <__assert_func>
            || lfs->cfg->inline_max <= ((lfs->cfg->metadata_max)
                ? lfs->cfg->metadata_max
                : lfs->cfg->block_size)/8);
    lfs->inline_max = lfs->cfg->inline_max;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80134b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	67da      	str	r2, [r3, #124]	@ 0x7c
    if (lfs->inline_max == (lfs_size_t)-1) {
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80134c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80134c6:	d103      	bne.n	80134d0 <lfs_init+0x408>
        lfs->inline_max = 0;
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2200      	movs	r2, #0
 80134cc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80134ce:	e022      	b.n	8013516 <lfs_init+0x44e>
    } else if (lfs->inline_max == 0) {
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d11e      	bne.n	8013516 <lfs_init+0x44e>
        lfs->inline_max = lfs_min(
                lfs->cfg->cache_size,
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80134dc:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
        lfs->inline_max = lfs_min(
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                lfs_min(
                    lfs->attr_max,
                    ((lfs->cfg->metadata_max)
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80134e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d004      	beq.n	80134f6 <lfs_init+0x42e>
                        ? lfs->cfg->metadata_max
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80134f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
        lfs->inline_max = lfs_min(
 80134f2:	08db      	lsrs	r3, r3, #3
 80134f4:	e003      	b.n	80134fe <lfs_init+0x436>
                        : lfs->cfg->block_size)/8));
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80134fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs->inline_max = lfs_min(
 80134fc:	08db      	lsrs	r3, r3, #3
 80134fe:	4619      	mov	r1, r3
 8013500:	4610      	mov	r0, r2
 8013502:	f7f9 fd20 	bl	800cf46 <lfs_min>
 8013506:	4603      	mov	r3, r0
 8013508:	4619      	mov	r1, r3
 801350a:	4620      	mov	r0, r4
 801350c:	f7f9 fd1b 	bl	800cf46 <lfs_min>
 8013510:	4602      	mov	r2, r0
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801351c:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013524:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2200      	movs	r2, #0
 801352a:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	333c      	adds	r3, #60	@ 0x3c
 8013536:	2200      	movs	r2, #0
 8013538:	601a      	str	r2, [r3, #0]
 801353a:	605a      	str	r2, [r3, #4]
 801353c:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	3330      	adds	r3, #48	@ 0x30
 8013542:	2200      	movs	r2, #0
 8013544:	601a      	str	r2, [r3, #0]
 8013546:	605a      	str	r2, [r3, #4]
 8013548:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	3348      	adds	r3, #72	@ 0x48
 801354e:	2200      	movs	r2, #0
 8013550:	601a      	str	r2, [r3, #0]
 8013552:	605a      	str	r2, [r3, #4]
 8013554:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8013556:	2300      	movs	r3, #0
 8013558:	e003      	b.n	8013562 <lfs_init+0x49a>

cleanup:
    lfs_deinit(lfs);
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f000 f816 	bl	801358c <lfs_deinit>
    return err;
 8013560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8013562:	4618      	mov	r0, r3
 8013564:	3734      	adds	r7, #52	@ 0x34
 8013566:	46bd      	mov	sp, r7
 8013568:	bd90      	pop	{r4, r7, pc}
 801356a:	bf00      	nop
 801356c:	08030e4c 	.word	0x08030e4c
 8013570:	0803436c 	.word	0x0803436c
 8013574:	08030840 	.word	0x08030840
 8013578:	08030e70 	.word	0x08030e70
 801357c:	08030e8c 	.word	0x08030e8c
 8013580:	08030ebc 	.word	0x08030ebc
 8013584:	08030f14 	.word	0x08030f14
 8013588:	08030f64 	.word	0x08030f64

0801358c <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 801358c:	b580      	push	{r7, lr}
 801358e:	b082      	sub	sp, #8
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801359a:	2b00      	cmp	r3, #0
 801359c:	d104      	bne.n	80135a8 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7f9 fd7a 	bl	800d09c <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80135ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d104      	bne.n	80135bc <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	69db      	ldr	r3, [r3, #28]
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7f9 fd70 	bl	800d09c <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80135c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d104      	bne.n	80135d0 <lfs_deinit+0x44>
        lfs_free(lfs->lookahead.buffer);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7f9 fd66 	bl	800d09c <lfs_free>
    }

    return 0;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3708      	adds	r7, #8
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
	...

080135dc <lfs_format_>:



#ifndef LFS_READONLY
static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg) {
 80135dc:	b580      	push	{r7, lr}
 80135de:	b0a0      	sub	sp, #128	@ 0x80
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
    int err = 0;
 80135e6:	2300      	movs	r3, #0
 80135e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f7ff fd6b 	bl	80130c8 <lfs_init>
 80135f2:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80135f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d001      	beq.n	80135fe <lfs_format_+0x22>
            return err;
 80135fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80135fc:	e08d      	b.n	801371a <lfs_format_+0x13e>
        }

        LFS_ASSERT(cfg->block_count != 0);
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013602:	2b00      	cmp	r3, #0
 8013604:	d106      	bne.n	8013614 <lfs_format_+0x38>
 8013606:	4b47      	ldr	r3, [pc, #284]	@ (8013724 <lfs_format_+0x148>)
 8013608:	4a47      	ldr	r2, [pc, #284]	@ (8013728 <lfs_format_+0x14c>)
 801360a:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 801360e:	4847      	ldr	r0, [pc, #284]	@ (801372c <lfs_format_+0x150>)
 8013610:	f00f fe4a 	bl	80232a8 <__assert_func>

        // create free lookahead
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801361c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801361e:	461a      	mov	r2, r3
 8013620:	2100      	movs	r1, #0
 8013622:	f012 fb95 	bl	8025d50 <memset>
        lfs->lookahead.start = 0;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2200      	movs	r2, #0
 801362a:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013632:	00da      	lsls	r2, r3, #3
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013638:	4619      	mov	r1, r3
 801363a:	4610      	mov	r0, r2
 801363c:	f7f9 fc83 	bl	800cf46 <lfs_min>
 8013640:	4602      	mov	r2, r0
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	659a      	str	r2, [r3, #88]	@ 0x58
                lfs->block_count);
        lfs->lookahead.next = 0;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2200      	movs	r2, #0
 801364a:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ckpoint(lfs);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f7fa fc54 	bl	800defa <lfs_alloc_ckpoint>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8013652:	f107 030c 	add.w	r3, r7, #12
 8013656:	4619      	mov	r1, r3
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f7fc fb9b 	bl	800fd94 <lfs_dir_alloc>
 801365e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8013660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013662:	2b00      	cmp	r3, #0
 8013664:	d150      	bne.n	8013708 <lfs_format_+0x12c>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
            .version     = lfs_fs_disk_version(lfs),
 8013666:	6878      	ldr	r0, [r7, #4]
 8013668:	f7fa fc1e 	bl	800dea8 <lfs_fs_disk_version>
 801366c:	4603      	mov	r3, r0
        lfs_superblock_t superblock = {
 801366e:	667b      	str	r3, [r7, #100]	@ 0x64
            .block_size  = lfs->cfg->block_size,
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        lfs_superblock_t superblock = {
 8013676:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->block_count,
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 801367c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8013682:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8013688:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
        lfs_superblock_t superblock = {
 801368e:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8013690:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013694:	4618      	mov	r0, r3
 8013696:	f7fa fb7d 	bl	800dd94 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 801369a:	4b25      	ldr	r3, [pc, #148]	@ (8013730 <lfs_format_+0x154>)
 801369c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801369e:	2300      	movs	r3, #0
 80136a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80136a2:	4b24      	ldr	r3, [pc, #144]	@ (8013734 <lfs_format_+0x158>)
 80136a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80136a6:	4b24      	ldr	r3, [pc, #144]	@ (8013738 <lfs_format_+0x15c>)
 80136a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80136aa:	4b24      	ldr	r3, [pc, #144]	@ (801373c <lfs_format_+0x160>)
 80136ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80136ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80136b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80136b4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80136b8:	f107 010c 	add.w	r1, r7, #12
 80136bc:	2303      	movs	r3, #3
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7fd fd90 	bl	80111e4 <lfs_dir_commit>
 80136c4:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 80136c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d11f      	bne.n	801370c <lfs_format_+0x130>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80136cc:	2300      	movs	r3, #0
 80136ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80136d2:	f107 010c 	add.w	r1, r7, #12
 80136d6:	2300      	movs	r3, #0
 80136d8:	2200      	movs	r2, #0
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f7fd fd82 	bl	80111e4 <lfs_dir_commit>
 80136e0:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 80136e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d113      	bne.n	8013710 <lfs_format_+0x134>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80136e8:	2300      	movs	r3, #0
 80136ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80136ec:	2301      	movs	r3, #1
 80136ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80136f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80136f4:	f107 030c 	add.w	r3, r7, #12
 80136f8:	4619      	mov	r1, r3
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f7fb ff18 	bl	800f530 <lfs_dir_fetch>
 8013700:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8013702:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013704:	2b00      	cmp	r3, #0
 8013706:	e004      	b.n	8013712 <lfs_format_+0x136>
            goto cleanup;
 8013708:	bf00      	nop
 801370a:	e002      	b.n	8013712 <lfs_format_+0x136>
            goto cleanup;
 801370c:	bf00      	nop
 801370e:	e000      	b.n	8013712 <lfs_format_+0x136>
            goto cleanup;
 8013710:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7ff ff3a 	bl	801358c <lfs_deinit>
    return err;
 8013718:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 801371a:	4618      	mov	r0, r3
 801371c:	3780      	adds	r7, #128	@ 0x80
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	08030ff4 	.word	0x08030ff4
 8013728:	08034378 	.word	0x08034378
 801372c:	08030840 	.word	0x08030840
 8013730:	40100000 	.word	0x40100000
 8013734:	0ff00008 	.word	0x0ff00008
 8013738:	0803100c 	.word	0x0803100c
 801373c:	20100018 	.word	0x20100018

08013740 <lfs_mount_>:
#endif

static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg) {
 8013740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013742:	b0a1      	sub	sp, #132	@ 0x84
 8013744:	af04      	add	r7, sp, #16
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 801374a:	6839      	ldr	r1, [r7, #0]
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f7ff fcbb 	bl	80130c8 <lfs_init>
 8013752:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (err) {
 8013754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013756:	2b00      	cmp	r3, #0
 8013758:	d001      	beq.n	801375e <lfs_mount_+0x1e>
        return err;
 801375a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801375c:	e202      	b.n	8013b64 <lfs_mount_+0x424>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 801375e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013762:	2220      	movs	r2, #32
 8013764:	2100      	movs	r1, #0
 8013766:	4618      	mov	r0, r3
 8013768:	f012 faf2 	bl	8025d50 <memset>
 801376c:	2301      	movs	r3, #1
 801376e:	657b      	str	r3, [r7, #84]	@ 0x54
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013770:	4a9a      	ldr	r2, [pc, #616]	@ (80139dc <lfs_mount_+0x29c>)
 8013772:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013776:	e892 0003 	ldmia.w	r2, {r0, r1}
 801377a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 801377e:	2301      	movs	r3, #1
 8013780:	66bb      	str	r3, [r7, #104]	@ 0x68
    lfs_size_t tortoise_period = 1;
 8013782:	2301      	movs	r3, #1
 8013784:	667b      	str	r3, [r7, #100]	@ 0x64
    while (!lfs_pair_isnull(dir.tail)) {
 8013786:	e199      	b.n	8013abc <lfs_mount_+0x37c>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8013788:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801378c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013790:	3318      	adds	r3, #24
 8013792:	4611      	mov	r1, r2
 8013794:	4618      	mov	r0, r3
 8013796:	f7fa f87d 	bl	800d894 <lfs_pair_issync>
 801379a:	4603      	mov	r3, r0
 801379c:	2b00      	cmp	r3, #0
 801379e:	d00a      	beq.n	80137b6 <lfs_mount_+0x76>
            LFS_WARN("Cycle detected in tail list");
 80137a0:	4b8f      	ldr	r3, [pc, #572]	@ (80139e0 <lfs_mount_+0x2a0>)
 80137a2:	f241 123d 	movw	r2, #4413	@ 0x113d
 80137a6:	498f      	ldr	r1, [pc, #572]	@ (80139e4 <lfs_mount_+0x2a4>)
 80137a8:	488f      	ldr	r0, [pc, #572]	@ (80139e8 <lfs_mount_+0x2a8>)
 80137aa:	f00f fdb1 	bl	8023310 <printf>
            err = LFS_ERR_CORRUPT;
 80137ae:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80137b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 80137b4:	e1d2      	b.n	8013b5c <lfs_mount_+0x41c>
        }
        if (tortoise_i == tortoise_period) {
 80137b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80137b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d108      	bne.n	80137d0 <lfs_mount_+0x90>
            tortoise[0] = dir.tail[0];
 80137be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80137c0:	633b      	str	r3, [r7, #48]	@ 0x30
            tortoise[1] = dir.tail[1];
 80137c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137c4:	637b      	str	r3, [r7, #52]	@ 0x34
            tortoise_i = 0;
 80137c6:	2300      	movs	r3, #0
 80137c8:	66bb      	str	r3, [r7, #104]	@ 0x68
            tortoise_period *= 2;
 80137ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80137cc:	005b      	lsls	r3, r3, #1
 80137ce:	667b      	str	r3, [r7, #100]	@ 0x64
        }
        tortoise_i += 1;
 80137d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80137d2:	3301      	adds	r3, #1
 80137d4:	66bb      	str	r3, [r7, #104]	@ 0x68
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80137da:	4b84      	ldr	r3, [pc, #528]	@ (80139ec <lfs_mount_+0x2ac>)
 80137dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80137de:	2308      	movs	r3, #8
 80137e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 80137e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80137e6:	f103 0218 	add.w	r2, r3, #24
 80137ea:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80137ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80137f2:	9303      	str	r3, [sp, #12]
 80137f4:	4b7e      	ldr	r3, [pc, #504]	@ (80139f0 <lfs_mount_+0x2b0>)
 80137f6:	9302      	str	r3, [sp, #8]
 80137f8:	2300      	movs	r3, #0
 80137fa:	9301      	str	r3, [sp, #4]
 80137fc:	4b7d      	ldr	r3, [pc, #500]	@ (80139f4 <lfs_mount_+0x2b4>)
 80137fe:	9300      	str	r3, [sp, #0]
 8013800:	4b7d      	ldr	r3, [pc, #500]	@ (80139f8 <lfs_mount_+0x2b8>)
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f7fb fac4 	bl	800ed90 <lfs_dir_fetchmatch>
 8013808:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    lfs, "littlefs", 8});
        if (tag < 0) {
 801380a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801380c:	2b00      	cmp	r3, #0
 801380e:	da02      	bge.n	8013816 <lfs_mount_+0xd6>
            err = tag;
 8013810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013812:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto cleanup;
 8013814:	e1a2      	b.n	8013b5c <lfs_mount_+0x41c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8013816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013818:	2b00      	cmp	r3, #0
 801381a:	f000 8142 	beq.w	8013aa2 <lfs_mount_+0x362>
 801381e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013820:	4618      	mov	r0, r3
 8013822:	f7fa f8a6 	bl	800d972 <lfs_tag_isdelete>
 8013826:	4603      	mov	r3, r0
 8013828:	f083 0301 	eor.w	r3, r3, #1
 801382c:	b2db      	uxtb	r3, r3
 801382e:	2b00      	cmp	r3, #0
 8013830:	f000 8137 	beq.w	8013aa2 <lfs_mount_+0x362>
            // update root
            lfs->root[0] = dir.pair[0];
 8013834:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 801383a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8013840:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8013844:	f107 030c 	add.w	r3, r7, #12
 8013848:	9300      	str	r3, [sp, #0]
 801384a:	4b6c      	ldr	r3, [pc, #432]	@ (80139fc <lfs_mount_+0x2bc>)
 801384c:	4a6a      	ldr	r2, [pc, #424]	@ (80139f8 <lfs_mount_+0x2b8>)
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f7fa fd68 	bl	800e324 <lfs_dir_get>
 8013854:	65f8      	str	r0, [r7, #92]	@ 0x5c
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8013856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013858:	2b00      	cmp	r3, #0
 801385a:	da02      	bge.n	8013862 <lfs_mount_+0x122>
                err = tag;
 801385c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801385e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013860:	e17c      	b.n	8013b5c <lfs_mount_+0x41c>
            }
            lfs_superblock_fromle32(&superblock);
 8013862:	f107 030c 	add.w	r3, r7, #12
 8013866:	4618      	mov	r0, r3
 8013868:	f7fa fa5c 	bl	800dd24 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	0c1b      	lsrs	r3, r3, #16
 8013870:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            if (major_version != lfs_fs_disk_version_major(lfs)
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f7fa fb22 	bl	800dec4 <lfs_fs_disk_version_major>
 8013880:	4603      	mov	r3, r0
 8013882:	461a      	mov	r2, r3
 8013884:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8013888:	4293      	cmp	r3, r2
 801388a:	d108      	bne.n	801389e <lfs_mount_+0x15e>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	f7fa fb27 	bl	800dee0 <lfs_fs_disk_version_minor>
 8013892:	4603      	mov	r3, r0
 8013894:	461a      	mov	r2, r3
 8013896:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 801389a:	4293      	cmp	r3, r2
 801389c:	d91d      	bls.n	80138da <lfs_mount_+0x19a>
                LFS_ERROR("Invalid version "
 801389e:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80138a2:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80138a6:	6878      	ldr	r0, [r7, #4]
 80138a8:	f7fa fb0c 	bl	800dec4 <lfs_fs_disk_version_major>
 80138ac:	4603      	mov	r3, r0
 80138ae:	461e      	mov	r6, r3
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f7fa fb15 	bl	800dee0 <lfs_fs_disk_version_minor>
 80138b6:	4603      	mov	r3, r0
 80138b8:	461a      	mov	r2, r3
 80138ba:	4b49      	ldr	r3, [pc, #292]	@ (80139e0 <lfs_mount_+0x2a0>)
 80138bc:	9303      	str	r3, [sp, #12]
 80138be:	9202      	str	r2, [sp, #8]
 80138c0:	9601      	str	r6, [sp, #4]
 80138c2:	9400      	str	r4, [sp, #0]
 80138c4:	462b      	mov	r3, r5
 80138c6:	f241 126b 	movw	r2, #4459	@ 0x116b
 80138ca:	4946      	ldr	r1, [pc, #280]	@ (80139e4 <lfs_mount_+0x2a4>)
 80138cc:	484c      	ldr	r0, [pc, #304]	@ (8013a00 <lfs_mount_+0x2c0>)
 80138ce:	f00f fd1f 	bl	8023310 <printf>
                        "v%"PRIu16".%"PRIu16" != v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                err = LFS_ERR_INVAL;
 80138d2:	f06f 0315 	mvn.w	r3, #21
 80138d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 80138d8:	e0e2      	b.n	8013aa0 <lfs_mount_+0x360>
            }

            // found older minor version? set an in-device only bit in the
            // gstate so we know we need to rewrite the superblock before
            // the first write
            bool needssuperblock = false;
 80138da:	2300      	movs	r3, #0
 80138dc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            if (minor_version < lfs_fs_disk_version_minor(lfs)) {
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7fa fafd 	bl	800dee0 <lfs_fs_disk_version_minor>
 80138e6:	4603      	mov	r3, r0
 80138e8:	461a      	mov	r2, r3
 80138ea:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d21c      	bcs.n	801392c <lfs_mount_+0x1ec>
                LFS_DEBUG("Found older minor version "
 80138f2:	f8b7 505a 	ldrh.w	r5, [r7, #90]	@ 0x5a
 80138f6:	f8b7 4058 	ldrh.w	r4, [r7, #88]	@ 0x58
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f7fa fae2 	bl	800dec4 <lfs_fs_disk_version_major>
 8013900:	4603      	mov	r3, r0
 8013902:	461e      	mov	r6, r3
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f7fa faeb 	bl	800dee0 <lfs_fs_disk_version_minor>
 801390a:	4603      	mov	r3, r0
 801390c:	461a      	mov	r2, r3
 801390e:	4b34      	ldr	r3, [pc, #208]	@ (80139e0 <lfs_mount_+0x2a0>)
 8013910:	9303      	str	r3, [sp, #12]
 8013912:	9202      	str	r2, [sp, #8]
 8013914:	9601      	str	r6, [sp, #4]
 8013916:	9400      	str	r4, [sp, #0]
 8013918:	462b      	mov	r3, r5
 801391a:	f241 127a 	movw	r2, #4474	@ 0x117a
 801391e:	4931      	ldr	r1, [pc, #196]	@ (80139e4 <lfs_mount_+0x2a4>)
 8013920:	4838      	ldr	r0, [pc, #224]	@ (8013a04 <lfs_mount_+0x2c4>)
 8013922:	f00f fcf5 	bl	8023310 <printf>
                        "v%"PRIu16".%"PRIu16" < v%"PRIu16".%"PRIu16,
                        major_version,
                        minor_version,
                        lfs_fs_disk_version_major(lfs),
                        lfs_fs_disk_version_minor(lfs));
                needssuperblock = true;
 8013926:	2301      	movs	r3, #1
 8013928:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
            }
            // note this bit is reserved on disk, so fetching more gstate
            // will not interfere here
            lfs_fs_prepsuperblock(lfs, needssuperblock);
 801392c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8013930:	4619      	mov	r1, r3
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f000 fbb4 	bl	80140a0 <lfs_fs_prepsuperblock>

            // check superblock configuration
            if (superblock.name_max) {
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d018      	beq.n	8013970 <lfs_mount_+0x230>
                if (superblock.name_max > lfs->name_max) {
 801393e:	69ba      	ldr	r2, [r7, #24]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013944:	429a      	cmp	r2, r3
 8013946:	d910      	bls.n	801396a <lfs_mount_+0x22a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8013948:	69ba      	ldr	r2, [r7, #24]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801394e:	4924      	ldr	r1, [pc, #144]	@ (80139e0 <lfs_mount_+0x2a0>)
 8013950:	9101      	str	r1, [sp, #4]
 8013952:	9300      	str	r3, [sp, #0]
 8013954:	4613      	mov	r3, r2
 8013956:	f241 1289 	movw	r2, #4489	@ 0x1189
 801395a:	4922      	ldr	r1, [pc, #136]	@ (80139e4 <lfs_mount_+0x2a4>)
 801395c:	482a      	ldr	r0, [pc, #168]	@ (8013a08 <lfs_mount_+0x2c8>)
 801395e:	f00f fcd7 	bl	8023310 <printf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8013962:	f06f 0315 	mvn.w	r3, #21
 8013966:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 8013968:	e09a      	b.n	8013aa0 <lfs_mount_+0x360>
                }

                lfs->name_max = superblock.name_max;
 801396a:	69ba      	ldr	r2, [r7, #24]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.file_max) {
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d018      	beq.n	80139a8 <lfs_mount_+0x268>
                if (superblock.file_max > lfs->file_max) {
 8013976:	69fa      	ldr	r2, [r7, #28]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801397c:	429a      	cmp	r2, r3
 801397e:	d910      	bls.n	80139a2 <lfs_mount_+0x262>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8013980:	69fa      	ldr	r2, [r7, #28]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013986:	4916      	ldr	r1, [pc, #88]	@ (80139e0 <lfs_mount_+0x2a0>)
 8013988:	9101      	str	r1, [sp, #4]
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	4613      	mov	r3, r2
 801398e:	f241 1294 	movw	r2, #4500	@ 0x1194
 8013992:	4914      	ldr	r1, [pc, #80]	@ (80139e4 <lfs_mount_+0x2a4>)
 8013994:	481d      	ldr	r0, [pc, #116]	@ (8013a0c <lfs_mount_+0x2cc>)
 8013996:	f00f fcbb 	bl	8023310 <printf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 801399a:	f06f 0315 	mvn.w	r3, #21
 801399e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80139a0:	e07e      	b.n	8013aa0 <lfs_mount_+0x360>
                }

                lfs->file_max = superblock.file_max;
 80139a2:	69fa      	ldr	r2, [r7, #28]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.attr_max) {
 80139a8:	6a3b      	ldr	r3, [r7, #32]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d040      	beq.n	8013a30 <lfs_mount_+0x2f0>
                if (superblock.attr_max > lfs->attr_max) {
 80139ae:	6a3a      	ldr	r2, [r7, #32]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d92d      	bls.n	8013a14 <lfs_mount_+0x2d4>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80139b8:	6a3a      	ldr	r2, [r7, #32]
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80139be:	4908      	ldr	r1, [pc, #32]	@ (80139e0 <lfs_mount_+0x2a0>)
 80139c0:	9101      	str	r1, [sp, #4]
 80139c2:	9300      	str	r3, [sp, #0]
 80139c4:	4613      	mov	r3, r2
 80139c6:	f241 129f 	movw	r2, #4511	@ 0x119f
 80139ca:	4906      	ldr	r1, [pc, #24]	@ (80139e4 <lfs_mount_+0x2a4>)
 80139cc:	4810      	ldr	r0, [pc, #64]	@ (8013a10 <lfs_mount_+0x2d0>)
 80139ce:	f00f fc9f 	bl	8023310 <printf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80139d2:	f06f 0315 	mvn.w	r3, #21
 80139d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    goto cleanup;
 80139d8:	e062      	b.n	8013aa0 <lfs_mount_+0x360>
 80139da:	bf00      	nop
 80139dc:	080309ac 	.word	0x080309ac
 80139e0:	08030968 	.word	0x08030968
 80139e4:	08030840 	.word	0x08030840
 80139e8:	08031018 	.word	0x08031018
 80139ec:	0803100c 	.word	0x0803100c
 80139f0:	0800f6c1 	.word	0x0800f6c1
 80139f4:	0ff00008 	.word	0x0ff00008
 80139f8:	7ffffc00 	.word	0x7ffffc00
 80139fc:	20100018 	.word	0x20100018
 8013a00:	08031044 	.word	0x08031044
 8013a04:	0803107c 	.word	0x0803107c
 8013a08:	080310bc 	.word	0x080310bc
 8013a0c:	080310f0 	.word	0x080310f0
 8013a10:	08031124 	.word	0x08031124
                }

                lfs->attr_max = superblock.attr_max;
 8013a14:	6a3a      	ldr	r2, [r7, #32]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	679a      	str	r2, [r3, #120]	@ 0x78

                // we also need to update inline_max in case attr_max changed
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013a22:	4619      	mov	r1, r3
 8013a24:	4610      	mov	r0, r2
 8013a26:	f7f9 fa8e 	bl	800cf46 <lfs_min>
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            // this is where we get the block_count from disk if block_count=0
            if (lfs->cfg->block_count
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d017      	beq.n	8013a6a <lfs_mount_+0x32a>
                    && superblock.block_count != lfs->cfg->block_count) {
 8013a3a:	697a      	ldr	r2, [r7, #20]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d011      	beq.n	8013a6a <lfs_mount_+0x32a>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8013a46:	697a      	ldr	r2, [r7, #20]
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a4e:	4947      	ldr	r1, [pc, #284]	@ (8013b6c <lfs_mount_+0x42c>)
 8013a50:	9101      	str	r1, [sp, #4]
 8013a52:	9300      	str	r3, [sp, #0]
 8013a54:	4613      	mov	r3, r2
 8013a56:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 8013a5a:	4945      	ldr	r1, [pc, #276]	@ (8013b70 <lfs_mount_+0x430>)
 8013a5c:	4845      	ldr	r0, [pc, #276]	@ (8013b74 <lfs_mount_+0x434>)
 8013a5e:	f00f fc57 	bl	8023310 <printf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8013a62:	f06f 0315 	mvn.w	r3, #21
 8013a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013a68:	e01a      	b.n	8013aa0 <lfs_mount_+0x360>
            }

            lfs->block_count = superblock.block_count;
 8013a6a:	697a      	ldr	r2, [r7, #20]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	66da      	str	r2, [r3, #108]	@ 0x6c

            if (superblock.block_size != lfs->cfg->block_size) {
 8013a70:	693a      	ldr	r2, [r7, #16]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d012      	beq.n	8013aa2 <lfs_mount_+0x362>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8013a7c:	693a      	ldr	r2, [r7, #16]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a84:	4939      	ldr	r1, [pc, #228]	@ (8013b6c <lfs_mount_+0x42c>)
 8013a86:	9101      	str	r1, [sp, #4]
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 8013a90:	4937      	ldr	r1, [pc, #220]	@ (8013b70 <lfs_mount_+0x430>)
 8013a92:	4839      	ldr	r0, [pc, #228]	@ (8013b78 <lfs_mount_+0x438>)
 8013a94:	f00f fc3c 	bl	8023310 <printf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8013a98:	f06f 0315 	mvn.w	r3, #21
 8013a9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                goto cleanup;
 8013a9e:	bf00      	nop
            goto cleanup;
 8013aa0:	e05c      	b.n	8013b5c <lfs_mount_+0x41c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013aa8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013aac:	4619      	mov	r1, r3
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f7fb fd5a 	bl	800f568 <lfs_dir_getgstate>
 8013ab4:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (err) {
 8013ab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d14e      	bne.n	8013b5a <lfs_mount_+0x41a>
    while (!lfs_pair_isnull(dir.tail)) {
 8013abc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013ac0:	3318      	adds	r3, #24
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7f9 fea1 	bl	800d80a <lfs_pair_isnull>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	f083 0301 	eor.w	r3, r3, #1
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f47f ae59 	bne.w	8013788 <lfs_mount_+0x48>
            goto cleanup;
        }
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	3330      	adds	r3, #48	@ 0x30
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7f9 fffc 	bl	800dad8 <lfs_gstate_iszero>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	f083 0301 	eor.w	r3, r3, #1
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d010      	beq.n	8013b0e <lfs_mount_+0x3ce>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8013af8:	481c      	ldr	r0, [pc, #112]	@ (8013b6c <lfs_mount_+0x42c>)
 8013afa:	9002      	str	r0, [sp, #8]
 8013afc:	9201      	str	r2, [sp, #4]
 8013afe:	9300      	str	r3, [sp, #0]
 8013b00:	460b      	mov	r3, r1
 8013b02:	f241 12c7 	movw	r2, #4551	@ 0x11c7
 8013b06:	491a      	ldr	r1, [pc, #104]	@ (8013b70 <lfs_mount_+0x430>)
 8013b08:	481c      	ldr	r0, [pc, #112]	@ (8013b7c <lfs_mount_+0x43c>)
 8013b0a:	f00f fc01 	bl	8023310 <printf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7f9 ff1f 	bl	800d956 <lfs_tag_isvalid>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	f083 0301 	eor.w	r3, r3, #1
 8013b1e:	b2db      	uxtb	r3, r3
 8013b20:	461a      	mov	r2, r3
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b26:	441a      	add	r2, r3
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	333c      	adds	r3, #60	@ 0x3c
 8013b32:	3230      	adds	r2, #48	@ 0x30
 8013b34:	ca07      	ldmia	r2, {r0, r1, r2}
 8013b36:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8013b42:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b46:	fb01 f202 	mul.w	r2, r1, r2
 8013b4a:	1a9a      	subs	r2, r3, r2
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f7fa f9e0 	bl	800df16 <lfs_alloc_drop>

    return 0;
 8013b56:	2300      	movs	r3, #0
 8013b58:	e004      	b.n	8013b64 <lfs_mount_+0x424>
            goto cleanup;
 8013b5a:	bf00      	nop

cleanup:
    lfs_unmount_(lfs);
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f000 f80f 	bl	8013b80 <lfs_unmount_>
    return err;
 8013b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3774      	adds	r7, #116	@ 0x74
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b6c:	08030968 	.word	0x08030968
 8013b70:	08030840 	.word	0x08030840
 8013b74:	08031158 	.word	0x08031158
 8013b78:	0803118c 	.word	0x0803118c
 8013b7c:	080311bc 	.word	0x080311bc

08013b80 <lfs_unmount_>:

static int lfs_unmount_(lfs_t *lfs) {
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f7ff fcff 	bl	801358c <lfs_deinit>
 8013b8e:	4603      	mov	r3, r0
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <lfs_fs_traverse_>:
    return 0;
}

int lfs_fs_traverse_(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8013b98:	b590      	push	{r4, r7, lr}
 8013b9a:	b0a1      	sub	sp, #132	@ 0x84
 8013b9c:	af04      	add	r7, sp, #16
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
 8013ba4:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8013ba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013baa:	2220      	movs	r2, #32
 8013bac:	2100      	movs	r1, #0
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f012 f8ce 	bl	8025d50 <memset>
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	643b      	str	r3, [r7, #64]	@ 0x40
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013bb8:	4a9a      	ldr	r2, [pc, #616]	@ (8013e24 <lfs_fs_traverse_+0x28c>)
 8013bba:	f107 031c 	add.w	r3, r7, #28
 8013bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bc2:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    lfs_size_t tortoise_period = 1;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    while (!lfs_pair_isnull(dir.tail)) {
 8013bce:	e0c0      	b.n	8013d52 <lfs_fs_traverse_+0x1ba>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8013bd0:	f107 021c 	add.w	r2, r7, #28
 8013bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013bd8:	3318      	adds	r3, #24
 8013bda:	4611      	mov	r1, r2
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7f9 fe59 	bl	800d894 <lfs_pair_issync>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d009      	beq.n	8013bfc <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8013be8:	4b8f      	ldr	r3, [pc, #572]	@ (8013e28 <lfs_fs_traverse_+0x290>)
 8013bea:	f241 2222 	movw	r2, #4642	@ 0x1222
 8013bee:	498f      	ldr	r1, [pc, #572]	@ (8013e2c <lfs_fs_traverse_+0x294>)
 8013bf0:	488f      	ldr	r0, [pc, #572]	@ (8013e30 <lfs_fs_traverse_+0x298>)
 8013bf2:	f00f fb8d 	bl	8023310 <printf>
            return LFS_ERR_CORRUPT;
 8013bf6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013bfa:	e10f      	b.n	8013e1c <lfs_fs_traverse_+0x284>
        }
        if (tortoise_i == tortoise_period) {
 8013bfc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d108      	bne.n	8013c16 <lfs_fs_traverse_+0x7e>
            tortoise[0] = dir.tail[0];
 8013c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c06:	61fb      	str	r3, [r7, #28]
            tortoise[1] = dir.tail[1];
 8013c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c0a:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            tortoise_period *= 2;
 8013c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013c12:	005b      	lsls	r3, r3, #1
 8013c14:	66bb      	str	r3, [r7, #104]	@ 0x68
        }
        tortoise_i += 1;
 8013c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013c18:	3301      	adds	r3, #1
 8013c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        for (int i = 0; i < 2; i++) {
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8013c20:	e013      	b.n	8013c4a <lfs_fs_traverse_+0xb2>
            int err = cb(data, dir.tail[i]);
 8013c22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013c24:	3306      	adds	r3, #6
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	3370      	adds	r3, #112	@ 0x70
 8013c2a:	443b      	add	r3, r7
 8013c2c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	4611      	mov	r1, r2
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	4798      	blx	r3
 8013c38:	6478      	str	r0, [r7, #68]	@ 0x44
            if (err) {
 8013c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d001      	beq.n	8013c44 <lfs_fs_traverse_+0xac>
                return err;
 8013c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c42:	e0eb      	b.n	8013e1c <lfs_fs_traverse_+0x284>
        for (int i = 0; i < 2; i++) {
 8013c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013c46:	3301      	adds	r3, #1
 8013c48:	667b      	str	r3, [r7, #100]	@ 0x64
 8013c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	dde8      	ble.n	8013c22 <lfs_fs_traverse_+0x8a>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8013c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013c54:	f103 0218 	add.w	r2, r3, #24
 8013c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013c5c:	4619      	mov	r1, r3
 8013c5e:	68f8      	ldr	r0, [r7, #12]
 8013c60:	f7fb fc66 	bl	800f530 <lfs_dir_fetch>
 8013c64:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (err) {
 8013c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d001      	beq.n	8013c70 <lfs_fs_traverse_+0xd8>
            return err;
 8013c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c6e:	e0d5      	b.n	8013e1c <lfs_fs_traverse_+0x284>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8013c70:	2300      	movs	r3, #0
 8013c72:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8013c76:	e067      	b.n	8013d48 <lfs_fs_traverse_+0x1b0>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8013c78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8013c7c:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8013c7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8013c82:	f043 0308 	orr.w	r3, r3, #8
 8013c86:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8013c8a:	f107 0214 	add.w	r2, r7, #20
 8013c8e:	9200      	str	r2, [sp, #0]
 8013c90:	4a68      	ldr	r2, [pc, #416]	@ (8013e34 <lfs_fs_traverse_+0x29c>)
 8013c92:	68f8      	ldr	r0, [r7, #12]
 8013c94:	f7fa fb46 	bl	800e324 <lfs_dir_get>
 8013c98:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (tag < 0) {
 8013c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	da05      	bge.n	8013cac <lfs_fs_traverse_+0x114>
                if (tag == LFS_ERR_NOENT) {
 8013ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013ca2:	f113 0f02 	cmn.w	r3, #2
 8013ca6:	d049      	beq.n	8013d3c <lfs_fs_traverse_+0x1a4>
                    continue;
                }
                return tag;
 8013ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013caa:	e0b7      	b.n	8013e1c <lfs_fs_traverse_+0x284>
            }
            lfs_ctz_fromle32(&ctz);
 8013cac:	f107 0314 	add.w	r3, r7, #20
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f7fa f807 	bl	800dcc4 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8013cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7f9 fe8d 	bl	800d9d8 <lfs_tag_type3>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	f240 2302 	movw	r3, #514	@ 0x202
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d113      	bne.n	8013cf2 <lfs_fs_traverse_+0x15a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8013cca:	68f9      	ldr	r1, [r7, #12]
 8013ccc:	6978      	ldr	r0, [r7, #20]
 8013cce:	69bb      	ldr	r3, [r7, #24]
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	9202      	str	r2, [sp, #8]
 8013cd4:	68ba      	ldr	r2, [r7, #8]
 8013cd6:	9201      	str	r2, [sp, #4]
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	4603      	mov	r3, r0
 8013cdc:	460a      	mov	r2, r1
 8013cde:	2100      	movs	r1, #0
 8013ce0:	68f8      	ldr	r0, [r7, #12]
 8013ce2:	f7fd fe9d 	bl	8011a20 <lfs_ctz_traverse>
 8013ce6:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8013ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d027      	beq.n	8013d3e <lfs_fs_traverse_+0x1a6>
                    return err;
 8013cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cf0:	e094      	b.n	8013e1c <lfs_fs_traverse_+0x284>
                }
            } else if (includeorphans &&
 8013cf2:	78fb      	ldrb	r3, [r7, #3]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d022      	beq.n	8013d3e <lfs_fs_traverse_+0x1a6>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8013cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7f9 fe6c 	bl	800d9d8 <lfs_tag_type3>
 8013d00:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8013d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d06:	d11a      	bne.n	8013d3e <lfs_fs_traverse_+0x1a6>
                for (int i = 0; i < 2; i++) {
 8013d08:	2300      	movs	r3, #0
 8013d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d0c:	e012      	b.n	8013d34 <lfs_fs_traverse_+0x19c>
                    err = cb(data, (&ctz.head)[i]);
 8013d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	f107 0214 	add.w	r2, r7, #20
 8013d16:	4413      	add	r3, r2
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	4611      	mov	r1, r2
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	4798      	blx	r3
 8013d22:	64f8      	str	r0, [r7, #76]	@ 0x4c
                    if (err) {
 8013d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d001      	beq.n	8013d2e <lfs_fs_traverse_+0x196>
                        return err;
 8013d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d2c:	e076      	b.n	8013e1c <lfs_fs_traverse_+0x284>
                for (int i = 0; i < 2; i++) {
 8013d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d30:	3301      	adds	r3, #1
 8013d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d36:	2b01      	cmp	r3, #1
 8013d38:	dde9      	ble.n	8013d0e <lfs_fs_traverse_+0x176>
 8013d3a:	e000      	b.n	8013d3e <lfs_fs_traverse_+0x1a6>
                    continue;
 8013d3c:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8013d3e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8013d42:	3301      	adds	r3, #1
 8013d44:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8013d48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8013d4a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d392      	bcc.n	8013c78 <lfs_fs_traverse_+0xe0>
    while (!lfs_pair_isnull(dir.tail)) {
 8013d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d56:	3318      	adds	r3, #24
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7f9 fd56 	bl	800d80a <lfs_pair_isnull>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	f083 0301 	eor.w	r3, r3, #1
 8013d64:	b2db      	uxtb	r3, r3
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	f47f af32 	bne.w	8013bd0 <lfs_fs_traverse_+0x38>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013d72:	e04f      	b.n	8013e14 <lfs_fs_traverse_+0x27c>
        if (f->type != LFS_TYPE_REG) {
 8013d74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d76:	799b      	ldrb	r3, [r3, #6]
 8013d78:	2b01      	cmp	r3, #1
 8013d7a:	d147      	bne.n	8013e0c <lfs_fs_traverse_+0x274>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8013d7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d01d      	beq.n	8013dc4 <lfs_fs_traverse_+0x22c>
 8013d88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d117      	bne.n	8013dc4 <lfs_fs_traverse_+0x22c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8013d94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d96:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8013d9a:	68f8      	ldr	r0, [r7, #12]
 8013d9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d9e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8013da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013da4:	687a      	ldr	r2, [r7, #4]
 8013da6:	9202      	str	r2, [sp, #8]
 8013da8:	68ba      	ldr	r2, [r7, #8]
 8013daa:	9201      	str	r2, [sp, #4]
 8013dac:	9300      	str	r3, [sp, #0]
 8013dae:	4623      	mov	r3, r4
 8013db0:	4602      	mov	r2, r0
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f7fd fe34 	bl	8011a20 <lfs_ctz_traverse>
 8013db8:	6578      	str	r0, [r7, #84]	@ 0x54
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8013dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d001      	beq.n	8013dc4 <lfs_fs_traverse_+0x22c>
                return err;
 8013dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dc2:	e02b      	b.n	8013e1c <lfs_fs_traverse_+0x284>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8013dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d01e      	beq.n	8013e0e <lfs_fs_traverse_+0x276>
 8013dd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013dd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d118      	bne.n	8013e0e <lfs_fs_traverse_+0x276>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8013ddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dde:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8013de2:	68f8      	ldr	r0, [r7, #12]
 8013de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013de6:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8013de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013dec:	687a      	ldr	r2, [r7, #4]
 8013dee:	9202      	str	r2, [sp, #8]
 8013df0:	68ba      	ldr	r2, [r7, #8]
 8013df2:	9201      	str	r2, [sp, #4]
 8013df4:	9300      	str	r3, [sp, #0]
 8013df6:	4623      	mov	r3, r4
 8013df8:	4602      	mov	r2, r0
 8013dfa:	68f8      	ldr	r0, [r7, #12]
 8013dfc:	f7fd fe10 	bl	8011a20 <lfs_ctz_traverse>
 8013e00:	6538      	str	r0, [r7, #80]	@ 0x50
                    f->block, f->pos, cb, data);
            if (err) {
 8013e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d002      	beq.n	8013e0e <lfs_fs_traverse_+0x276>
                return err;
 8013e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e0a:	e007      	b.n	8013e1c <lfs_fs_traverse_+0x284>
            continue;
 8013e0c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8013e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d1ac      	bne.n	8013d74 <lfs_fs_traverse_+0x1dc>
            }
        }
    }
#endif

    return 0;
 8013e1a:	2300      	movs	r3, #0
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3774      	adds	r7, #116	@ 0x74
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd90      	pop	{r4, r7, pc}
 8013e24:	080309ac 	.word	0x080309ac
 8013e28:	08030968 	.word	0x08030968
 8013e2c:	08030840 	.word	0x08030840
 8013e30:	08031018 	.word	0x08031018
 8013e34:	700ffc00 	.word	0x700ffc00

08013e38 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b08a      	sub	sp, #40	@ 0x28
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	60b9      	str	r1, [r7, #8]
 8013e42:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2200      	movs	r2, #0
 8013e48:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2201      	movs	r2, #1
 8013e4e:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013e50:	4a2d      	ldr	r2, [pc, #180]	@ (8013f08 <lfs_fs_pred+0xd0>)
 8013e52:	f107 0314 	add.w	r3, r7, #20
 8013e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e5a:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8013e5e:	2301      	movs	r3, #1
 8013e60:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t tortoise_period = 1;
 8013e62:	2301      	movs	r3, #1
 8013e64:	623b      	str	r3, [r7, #32]
    while (!lfs_pair_isnull(pdir->tail)) {
 8013e66:	e03e      	b.n	8013ee6 <lfs_fs_pred+0xae>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	3318      	adds	r3, #24
 8013e6c:	f107 0214 	add.w	r2, r7, #20
 8013e70:	4611      	mov	r1, r2
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7f9 fd0e 	bl	800d894 <lfs_pair_issync>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d009      	beq.n	8013e92 <lfs_fs_pred+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8013e7e:	4b23      	ldr	r3, [pc, #140]	@ (8013f0c <lfs_fs_pred+0xd4>)
 8013e80:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8013e84:	4922      	ldr	r1, [pc, #136]	@ (8013f10 <lfs_fs_pred+0xd8>)
 8013e86:	4823      	ldr	r0, [pc, #140]	@ (8013f14 <lfs_fs_pred+0xdc>)
 8013e88:	f00f fa42 	bl	8023310 <printf>
            return LFS_ERR_CORRUPT;
 8013e8c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013e90:	e036      	b.n	8013f00 <lfs_fs_pred+0xc8>
        }
        if (tortoise_i == tortoise_period) {
 8013e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e94:	6a3b      	ldr	r3, [r7, #32]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d10a      	bne.n	8013eb0 <lfs_fs_pred+0x78>
            tortoise[0] = pdir->tail[0];
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	699b      	ldr	r3, [r3, #24]
 8013e9e:	617b      	str	r3, [r7, #20]
            tortoise[1] = pdir->tail[1];
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	69db      	ldr	r3, [r3, #28]
 8013ea4:	61bb      	str	r3, [r7, #24]
            tortoise_i = 0;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	627b      	str	r3, [r7, #36]	@ 0x24
            tortoise_period *= 2;
 8013eaa:	6a3b      	ldr	r3, [r7, #32]
 8013eac:	005b      	lsls	r3, r3, #1
 8013eae:	623b      	str	r3, [r7, #32]
        }
        tortoise_i += 1;
 8013eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	627b      	str	r3, [r7, #36]	@ 0x24

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	3318      	adds	r3, #24
 8013eba:	68b9      	ldr	r1, [r7, #8]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7f9 fcbf 	bl	800d840 <lfs_pair_cmp>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d101      	bne.n	8013ecc <lfs_fs_pred+0x94>
            return 0;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	e019      	b.n	8013f00 <lfs_fs_pred+0xc8>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	3318      	adds	r3, #24
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	6879      	ldr	r1, [r7, #4]
 8013ed4:	68f8      	ldr	r0, [r7, #12]
 8013ed6:	f7fb fb2b 	bl	800f530 <lfs_dir_fetch>
 8013eda:	61f8      	str	r0, [r7, #28]
        if (err) {
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d001      	beq.n	8013ee6 <lfs_fs_pred+0xae>
            return err;
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	e00c      	b.n	8013f00 <lfs_fs_pred+0xc8>
    while (!lfs_pair_isnull(pdir->tail)) {
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	3318      	adds	r3, #24
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7f9 fc8d 	bl	800d80a <lfs_pair_isnull>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	f083 0301 	eor.w	r3, r3, #1
 8013ef6:	b2db      	uxtb	r3, r3
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1b5      	bne.n	8013e68 <lfs_fs_pred+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8013efc:	f06f 0301 	mvn.w	r3, #1
}
 8013f00:	4618      	mov	r0, r3
 8013f02:	3728      	adds	r7, #40	@ 0x28
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	080309ac 	.word	0x080309ac
 8013f0c:	08030968 	.word	0x08030968
 8013f10:	08030840 	.word	0x08030840
 8013f14:	08031018 	.word	0x08031018

08013f18 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8013f18:	b5b0      	push	{r4, r5, r7, lr}
 8013f1a:	b08e      	sub	sp, #56	@ 0x38
 8013f1c:	af04      	add	r7, sp, #16
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	60b9      	str	r1, [r7, #8]
 8013f22:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 8013f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8013f32:	6a3b      	ldr	r3, [r7, #32]
 8013f34:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8013f38:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8013f3a:	6a3b      	ldr	r3, [r7, #32]
 8013f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013f3e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
            disk->block, disk->off, &child, sizeof(child));
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	69fa      	ldr	r2, [r7, #28]
 8013f46:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8013f48:	2108      	movs	r1, #8
 8013f4a:	9103      	str	r1, [sp, #12]
 8013f4c:	f107 0110 	add.w	r1, r7, #16
 8013f50:	9102      	str	r1, [sp, #8]
 8013f52:	9201      	str	r2, [sp, #4]
 8013f54:	9300      	str	r3, [sp, #0]
 8013f56:	462b      	mov	r3, r5
 8013f58:	4622      	mov	r2, r4
 8013f5a:	4601      	mov	r1, r0
 8013f5c:	6a38      	ldr	r0, [r7, #32]
 8013f5e:	f7f9 f8cd 	bl	800d0fc <lfs_bd_read>
 8013f62:	61b8      	str	r0, [r7, #24]
    if (err) {
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d001      	beq.n	8013f6e <lfs_fs_parent_match+0x56>
        return err;
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	e012      	b.n	8013f94 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8013f6e:	f107 0310 	add.w	r3, r7, #16
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7f9 fcbb 	bl	800d8ee <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8013f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f7a:	1d1a      	adds	r2, r3, #4
 8013f7c:	f107 0310 	add.w	r3, r7, #16
 8013f80:	4611      	mov	r1, r2
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7f9 fc5c 	bl	800d840 <lfs_pair_cmp>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	bf14      	ite	ne
 8013f8e:	2301      	movne	r3, #1
 8013f90:	2300      	moveq	r3, #0
 8013f92:	b2db      	uxtb	r3, r3
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3728      	adds	r7, #40	@ 0x28
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bdb0      	pop	{r4, r5, r7, pc}

08013f9c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b090      	sub	sp, #64	@ 0x40
 8013fa0:	af04      	add	r7, sp, #16
 8013fa2:	60f8      	str	r0, [r7, #12]
 8013fa4:	60b9      	str	r1, [r7, #8]
 8013fa6:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2200      	movs	r2, #0
 8013fac:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2201      	movs	r2, #1
 8013fb2:	61da      	str	r2, [r3, #28]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8013fb4:	4a33      	ldr	r2, [pc, #204]	@ (8014084 <lfs_fs_parent+0xe8>)
 8013fb6:	f107 031c 	add.w	r3, r7, #28
 8013fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013fbe:	e883 0003 	stmia.w	r3, {r0, r1}
    lfs_size_t tortoise_i = 1;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t tortoise_period = 1;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (!lfs_pair_isnull(parent->tail)) {
 8013fca:	e04a      	b.n	8014062 <lfs_fs_parent+0xc6>
        // detect cycles with Brent's algorithm
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	3318      	adds	r3, #24
 8013fd0:	f107 021c 	add.w	r2, r7, #28
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7f9 fc5c 	bl	800d894 <lfs_pair_issync>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d009      	beq.n	8013ff6 <lfs_fs_parent+0x5a>
            LFS_WARN("Cycle detected in tail list");
 8013fe2:	4b29      	ldr	r3, [pc, #164]	@ (8014088 <lfs_fs_parent+0xec>)
 8013fe4:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 8013fe8:	4928      	ldr	r1, [pc, #160]	@ (801408c <lfs_fs_parent+0xf0>)
 8013fea:	4829      	ldr	r0, [pc, #164]	@ (8014090 <lfs_fs_parent+0xf4>)
 8013fec:	f00f f990 	bl	8023310 <printf>
            return LFS_ERR_CORRUPT;
 8013ff0:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8013ff4:	e042      	b.n	801407c <lfs_fs_parent+0xe0>
        }
        if (tortoise_i == tortoise_period) {
 8013ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d10a      	bne.n	8014014 <lfs_fs_parent+0x78>
            tortoise[0] = parent->tail[0];
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	699b      	ldr	r3, [r3, #24]
 8014002:	61fb      	str	r3, [r7, #28]
            tortoise[1] = parent->tail[1];
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	69db      	ldr	r3, [r3, #28]
 8014008:	623b      	str	r3, [r7, #32]
            tortoise_i = 0;
 801400a:	2300      	movs	r3, #0
 801400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            tortoise_period *= 2;
 801400e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014010:	005b      	lsls	r3, r3, #1
 8014012:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        tortoise_i += 1;
 8014014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014016:	3301      	adds	r3, #1
 8014018:	62fb      	str	r3, [r7, #44]	@ 0x2c

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8014028:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	3304      	adds	r3, #4
 801402e:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8014030:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8014032:	f107 0310 	add.w	r3, r7, #16
 8014036:	9303      	str	r3, [sp, #12]
 8014038:	4b16      	ldr	r3, [pc, #88]	@ (8014094 <lfs_fs_parent+0xf8>)
 801403a:	9302      	str	r3, [sp, #8]
 801403c:	2300      	movs	r3, #0
 801403e:	9301      	str	r3, [sp, #4]
 8014040:	4b15      	ldr	r3, [pc, #84]	@ (8014098 <lfs_fs_parent+0xfc>)
 8014042:	9300      	str	r3, [sp, #0]
 8014044:	4b15      	ldr	r3, [pc, #84]	@ (801409c <lfs_fs_parent+0x100>)
 8014046:	6879      	ldr	r1, [r7, #4]
 8014048:	68f8      	ldr	r0, [r7, #12]
 801404a:	f7fa fea1 	bl	800ed90 <lfs_dir_fetchmatch>
 801404e:	6278      	str	r0, [r7, #36]	@ 0x24
        if (tag && tag != LFS_ERR_NOENT) {
 8014050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014052:	2b00      	cmp	r3, #0
 8014054:	d005      	beq.n	8014062 <lfs_fs_parent+0xc6>
 8014056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014058:	f113 0f02 	cmn.w	r3, #2
 801405c:	d001      	beq.n	8014062 <lfs_fs_parent+0xc6>
            return tag;
 801405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014060:	e00c      	b.n	801407c <lfs_fs_parent+0xe0>
    while (!lfs_pair_isnull(parent->tail)) {
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	3318      	adds	r3, #24
 8014066:	4618      	mov	r0, r3
 8014068:	f7f9 fbcf 	bl	800d80a <lfs_pair_isnull>
 801406c:	4603      	mov	r3, r0
 801406e:	f083 0301 	eor.w	r3, r3, #1
 8014072:	b2db      	uxtb	r3, r3
 8014074:	2b00      	cmp	r3, #0
 8014076:	d1a9      	bne.n	8013fcc <lfs_fs_parent+0x30>
        }
    }

    return LFS_ERR_NOENT;
 8014078:	f06f 0301 	mvn.w	r3, #1
}
 801407c:	4618      	mov	r0, r3
 801407e:	3730      	adds	r7, #48	@ 0x30
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}
 8014084:	080309ac 	.word	0x080309ac
 8014088:	08030968 	.word	0x08030968
 801408c:	08030840 	.word	0x08030840
 8014090:	08031018 	.word	0x08031018
 8014094:	08013f19 	.word	0x08013f19
 8014098:	20000008 	.word	0x20000008
 801409c:	7ff003ff 	.word	0x7ff003ff

080140a0 <lfs_fs_prepsuperblock>:
#endif

static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock) {
 80140a0:	b480      	push	{r7}
 80140a2:	b083      	sub	sp, #12
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	460b      	mov	r3, r1
 80140aa:	70fb      	strb	r3, [r7, #3]
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 80140b4:	78fb      	ldrb	r3, [r7, #3]
 80140b6:	025b      	lsls	r3, r3, #9
 80140b8:	431a      	orrs	r2, r3
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80140be:	bf00      	nop
 80140c0:	370c      	adds	r7, #12
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr
	...

080140cc <lfs_fs_preporphans>:

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80140cc:	b590      	push	{r4, r7, lr}
 80140ce:	b083      	sub	sp, #12
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	460b      	mov	r3, r1
 80140d6:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140dc:	4618      	mov	r0, r3
 80140de:	f7f9 fcb5 	bl	800da4c <lfs_tag_size>
 80140e2:	4603      	mov	r3, r0
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d10a      	bne.n	80140fe <lfs_fs_preporphans+0x32>
 80140e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	da06      	bge.n	80140fe <lfs_fs_preporphans+0x32>
 80140f0:	4b1a      	ldr	r3, [pc, #104]	@ (801415c <lfs_fs_preporphans+0x90>)
 80140f2:	4a1b      	ldr	r2, [pc, #108]	@ (8014160 <lfs_fs_preporphans+0x94>)
 80140f4:	f241 21e2 	movw	r1, #4834	@ 0x12e2
 80140f8:	481a      	ldr	r0, [pc, #104]	@ (8014164 <lfs_fs_preporphans+0x98>)
 80140fa:	f00f f8d5 	bl	80232a8 <__assert_func>
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014102:	4618      	mov	r0, r3
 8014104:	f7f9 fca2 	bl	800da4c <lfs_tag_size>
 8014108:	4603      	mov	r3, r0
 801410a:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 801410e:	d90a      	bls.n	8014126 <lfs_fs_preporphans+0x5a>
 8014110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014114:	2b00      	cmp	r3, #0
 8014116:	dd06      	ble.n	8014126 <lfs_fs_preporphans+0x5a>
 8014118:	4b13      	ldr	r3, [pc, #76]	@ (8014168 <lfs_fs_preporphans+0x9c>)
 801411a:	4a11      	ldr	r2, [pc, #68]	@ (8014160 <lfs_fs_preporphans+0x94>)
 801411c:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 8014120:	4810      	ldr	r0, [pc, #64]	@ (8014164 <lfs_fs_preporphans+0x98>)
 8014122:	f00f f8c1 	bl	80232a8 <__assert_func>
    lfs->gstate.tag += orphans;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801412a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801412e:	441a      	add	r2, r3
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014138:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	3330      	adds	r3, #48	@ 0x30
 8014140:	4618      	mov	r0, r3
 8014142:	f7f9 fce6 	bl	800db12 <lfs_gstate_hasorphans>
 8014146:	4603      	mov	r3, r0
 8014148:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 801414a:	ea44 0203 	orr.w	r2, r4, r3
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8014152:	2300      	movs	r3, #0
}
 8014154:	4618      	mov	r0, r3
 8014156:	370c      	adds	r7, #12
 8014158:	46bd      	mov	sp, r7
 801415a:	bd90      	pop	{r4, r7, pc}
 801415c:	080311f4 	.word	0x080311f4
 8014160:	08034384 	.word	0x08034384
 8014164:	08030840 	.word	0x08030840
 8014168:	0803122c 	.word	0x0803122c

0801416c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 801416c:	b480      	push	{r7}
 801416e:	b085      	sub	sp, #20
 8014170:	af00      	add	r7, sp, #0
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	460b      	mov	r3, r1
 8014176:	607a      	str	r2, [r7, #4]
 8014178:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801417e:	4a17      	ldr	r2, [pc, #92]	@ (80141dc <lfs_fs_prepmove+0x70>)
 8014180:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8014182:	897b      	ldrh	r3, [r7, #10]
 8014184:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8014188:	428b      	cmp	r3, r1
 801418a:	d006      	beq.n	801419a <lfs_fs_prepmove+0x2e>
 801418c:	897b      	ldrh	r3, [r7, #10]
 801418e:	029b      	lsls	r3, r3, #10
 8014190:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8014194:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8014198:	e000      	b.n	801419c <lfs_fs_prepmove+0x30>
 801419a:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 801419c:	431a      	orrs	r2, r3
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80141a2:	897b      	ldrh	r3, [r7, #10]
 80141a4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80141a8:	4293      	cmp	r3, r2
 80141aa:	d002      	beq.n	80141b2 <lfs_fs_prepmove+0x46>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	e000      	b.n	80141b4 <lfs_fs_prepmove+0x48>
 80141b2:	2300      	movs	r3, #0
 80141b4:	68fa      	ldr	r2, [r7, #12]
 80141b6:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80141b8:	897b      	ldrh	r3, [r7, #10]
 80141ba:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80141be:	4293      	cmp	r3, r2
 80141c0:	d003      	beq.n	80141ca <lfs_fs_prepmove+0x5e>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	3304      	adds	r3, #4
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	e000      	b.n	80141cc <lfs_fs_prepmove+0x60>
 80141ca:	2300      	movs	r3, #0
 80141cc:	68fa      	ldr	r2, [r7, #12]
 80141ce:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80141d0:	bf00      	nop
 80141d2:	3714      	adds	r7, #20
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr
 80141dc:	800003ff 	.word	0x800003ff

080141e0 <lfs_fs_desuperblock>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_desuperblock(lfs_t *lfs) {
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b098      	sub	sp, #96	@ 0x60
 80141e4:	af02      	add	r7, sp, #8
 80141e6:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	3330      	adds	r3, #48	@ 0x30
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7f9 fcc5 	bl	800db7c <lfs_gstate_needssuperblock>
 80141f2:	4603      	mov	r3, r0
 80141f4:	f083 0301 	eor.w	r3, r3, #1
 80141f8:	b2db      	uxtb	r3, r3
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d001      	beq.n	8014202 <lfs_fs_desuperblock+0x22>
        return 0;
 80141fe:	2300      	movs	r3, #0
 8014200:	e04e      	b.n	80142a0 <lfs_fs_desuperblock+0xc0>
    }

    LFS_DEBUG("Rewriting superblock {0x%"PRIx32", 0x%"PRIx32"}",
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6a1a      	ldr	r2, [r3, #32]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801420a:	4927      	ldr	r1, [pc, #156]	@ (80142a8 <lfs_fs_desuperblock+0xc8>)
 801420c:	9101      	str	r1, [sp, #4]
 801420e:	9300      	str	r3, [sp, #0]
 8014210:	4613      	mov	r3, r2
 8014212:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 8014216:	4925      	ldr	r1, [pc, #148]	@ (80142ac <lfs_fs_desuperblock+0xcc>)
 8014218:	4825      	ldr	r0, [pc, #148]	@ (80142b0 <lfs_fs_desuperblock+0xd0>)
 801421a:	f00f f879 	bl	8023310 <printf>
            lfs->root[0],
            lfs->root[1]);

    lfs_mdir_t root;
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	f103 0220 	add.w	r2, r3, #32
 8014224:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014228:	4619      	mov	r1, r3
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f7fb f980 	bl	800f530 <lfs_dir_fetch>
 8014230:	6578      	str	r0, [r7, #84]	@ 0x54
    if (err) {
 8014232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014234:	2b00      	cmp	r3, #0
 8014236:	d001      	beq.n	801423c <lfs_fs_desuperblock+0x5c>
        return err;
 8014238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801423a:	e031      	b.n	80142a0 <lfs_fs_desuperblock+0xc0>
    }

    // write a new superblock
    lfs_superblock_t superblock = {
        .version     = lfs_fs_disk_version(lfs),
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f7f9 fe33 	bl	800dea8 <lfs_fs_disk_version>
 8014242:	4603      	mov	r3, r0
    lfs_superblock_t superblock = {
 8014244:	61fb      	str	r3, [r7, #28]
        .block_size  = lfs->cfg->block_size,
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    lfs_superblock_t superblock = {
 801424c:	623b      	str	r3, [r7, #32]
        .block_count = lfs->block_count,
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
    lfs_superblock_t superblock = {
 8014252:	627b      	str	r3, [r7, #36]	@ 0x24
        .name_max    = lfs->name_max,
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    lfs_superblock_t superblock = {
 8014258:	62bb      	str	r3, [r7, #40]	@ 0x28
        .file_max    = lfs->file_max,
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
    lfs_superblock_t superblock = {
 801425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .attr_max    = lfs->attr_max,
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
    lfs_superblock_t superblock = {
 8014264:	633b      	str	r3, [r7, #48]	@ 0x30
    };

    lfs_superblock_tole32(&superblock);
 8014266:	f107 031c 	add.w	r3, r7, #28
 801426a:	4618      	mov	r0, r3
 801426c:	f7f9 fd92 	bl	800dd94 <lfs_superblock_tole32>
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8014270:	4b10      	ldr	r3, [pc, #64]	@ (80142b4 <lfs_fs_desuperblock+0xd4>)
 8014272:	617b      	str	r3, [r7, #20]
 8014274:	f107 031c 	add.w	r3, r7, #28
 8014278:	61bb      	str	r3, [r7, #24]
 801427a:	f107 0214 	add.w	r2, r7, #20
 801427e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8014282:	2301      	movs	r3, #1
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f7fc ffad 	bl	80111e4 <lfs_dir_commit>
 801428a:	6578      	str	r0, [r7, #84]	@ 0x54
            {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                &superblock}));
    if (err) {
 801428c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801428e:	2b00      	cmp	r3, #0
 8014290:	d001      	beq.n	8014296 <lfs_fs_desuperblock+0xb6>
        return err;
 8014292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014294:	e004      	b.n	80142a0 <lfs_fs_desuperblock+0xc0>
    }

    lfs_fs_prepsuperblock(lfs, false);
 8014296:	2100      	movs	r1, #0
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7ff ff01 	bl	80140a0 <lfs_fs_prepsuperblock>
    return 0;
 801429e:	2300      	movs	r3, #0
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3758      	adds	r7, #88	@ 0x58
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}
 80142a8:	08030968 	.word	0x08030968
 80142ac:	08030840 	.word	0x08030840
 80142b0:	08031264 	.word	0x08031264
 80142b4:	20100018 	.word	0x20100018

080142b8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 80142b8:	b5b0      	push	{r4, r5, r7, lr}
 80142ba:	b094      	sub	sp, #80	@ 0x50
 80142bc:	af04      	add	r7, sp, #16
 80142be:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	333c      	adds	r3, #60	@ 0x3c
 80142c4:	4618      	mov	r0, r3
 80142c6:	f7f9 fc46 	bl	800db56 <lfs_gstate_hasmove>
 80142ca:	4603      	mov	r3, r0
 80142cc:	f083 0301 	eor.w	r3, r3, #1
 80142d0:	b2db      	uxtb	r3, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d001      	beq.n	80142da <lfs_fs_demove+0x22>
        return 0;
 80142d6:	2300      	movs	r3, #0
 80142d8:	e05b      	b.n	8014392 <lfs_fs_demove+0xda>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80142e6:	4618      	mov	r0, r3
 80142e8:	f7f9 fba0 	bl	800da2c <lfs_tag_id>
 80142ec:	4603      	mov	r3, r0
 80142ee:	461a      	mov	r2, r3
 80142f0:	4b2a      	ldr	r3, [pc, #168]	@ (801439c <lfs_fs_demove+0xe4>)
 80142f2:	9302      	str	r3, [sp, #8]
 80142f4:	9201      	str	r2, [sp, #4]
 80142f6:	9400      	str	r4, [sp, #0]
 80142f8:	462b      	mov	r3, r5
 80142fa:	f241 3224 	movw	r2, #4900	@ 0x1324
 80142fe:	4928      	ldr	r1, [pc, #160]	@ (80143a0 <lfs_fs_demove+0xe8>)
 8014300:	4828      	ldr	r0, [pc, #160]	@ (80143a4 <lfs_fs_demove+0xec>)
 8014302:	f00f f805 	bl	8023310 <printf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // no other gstate is supported at this time, so if we found something else
    // something most likely went wrong in gstate calculation
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801430a:	4618      	mov	r0, r3
 801430c:	f7f9 fb64 	bl	800d9d8 <lfs_tag_type3>
 8014310:	4603      	mov	r3, r0
 8014312:	461a      	mov	r2, r3
 8014314:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8014318:	429a      	cmp	r2, r3
 801431a:	d006      	beq.n	801432a <lfs_fs_demove+0x72>
 801431c:	4b22      	ldr	r3, [pc, #136]	@ (80143a8 <lfs_fs_demove+0xf0>)
 801431e:	4a23      	ldr	r2, [pc, #140]	@ (80143ac <lfs_fs_demove+0xf4>)
 8014320:	f241 312b 	movw	r1, #4907	@ 0x132b
 8014324:	481e      	ldr	r0, [pc, #120]	@ (80143a0 <lfs_fs_demove+0xe8>)
 8014326:	f00e ffbf 	bl	80232a8 <__assert_func>

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8014330:	f107 0318 	add.w	r3, r7, #24
 8014334:	4619      	mov	r1, r3
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f7fb f8fa 	bl	800f530 <lfs_dir_fetch>
 801433c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 801433e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014340:	2b00      	cmp	r3, #0
 8014342:	d001      	beq.n	8014348 <lfs_fs_demove+0x90>
        return err;
 8014344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014346:	e024      	b.n	8014392 <lfs_fs_demove+0xda>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801434c:	4618      	mov	r0, r3
 801434e:	f7f9 fb6d 	bl	800da2c <lfs_tag_id>
 8014352:	4603      	mov	r3, r0
 8014354:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8014356:	2200      	movs	r2, #0
 8014358:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f7ff ff05 	bl	801416c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8014362:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014364:	029b      	lsls	r3, r3, #10
 8014366:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 801436a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 801436e:	613b      	str	r3, [r7, #16]
 8014370:	2300      	movs	r3, #0
 8014372:	617b      	str	r3, [r7, #20]
 8014374:	f107 0210 	add.w	r2, r7, #16
 8014378:	f107 0118 	add.w	r1, r7, #24
 801437c:	2301      	movs	r3, #1
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f7fc ff30 	bl	80111e4 <lfs_dir_commit>
 8014384:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8014386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014388:	2b00      	cmp	r3, #0
 801438a:	d001      	beq.n	8014390 <lfs_fs_demove+0xd8>
        return err;
 801438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801438e:	e000      	b.n	8014392 <lfs_fs_demove+0xda>
    }

    return 0;
 8014390:	2300      	movs	r3, #0
}
 8014392:	4618      	mov	r0, r3
 8014394:	3740      	adds	r7, #64	@ 0x40
 8014396:	46bd      	mov	sp, r7
 8014398:	bdb0      	pop	{r4, r5, r7, pc}
 801439a:	bf00      	nop
 801439c:	08030968 	.word	0x08030968
 80143a0:	08030840 	.word	0x08030840
 80143a4:	08031298 	.word	0x08031298
 80143a8:	080312cc 	.word	0x080312cc
 80143ac:	08034398 	.word	0x08034398

080143b0 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 80143b0:	b5b0      	push	{r4, r5, r7, lr}
 80143b2:	b0b2      	sub	sp, #200	@ 0xc8
 80143b4:	af04      	add	r7, sp, #16
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	460b      	mov	r3, r1
 80143ba:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	3330      	adds	r3, #48	@ 0x30
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7f9 fba6 	bl	800db12 <lfs_gstate_hasorphans>
 80143c6:	4603      	mov	r3, r0
 80143c8:	f083 0301 	eor.w	r3, r3, #1
 80143cc:	b2db      	uxtb	r3, r3
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d001      	beq.n	80143d6 <lfs_fs_deorphan+0x26>
        return 0;
 80143d2:	2300      	movs	r3, #0
 80143d4:	e187      	b.n	80146e6 <lfs_fs_deorphan+0x336>
    //
    // Two separate passes are needed as half-orphans can contain outdated
    // references to full-orphans, effectively hiding them from the deorphan
    // search.
    //
    int pass = 0;
 80143d6:	2300      	movs	r3, #0
 80143d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80143dc:	e170      	b.n	80146c0 <lfs_fs_deorphan+0x310>
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80143de:	f107 0308 	add.w	r3, r7, #8
 80143e2:	2220      	movs	r2, #32
 80143e4:	2100      	movs	r1, #0
 80143e6:	4618      	mov	r0, r3
 80143e8:	f011 fcb2 	bl	8025d50 <memset>
 80143ec:	2301      	movs	r3, #1
 80143ee:	77fb      	strb	r3, [r7, #31]
 80143f0:	2301      	movs	r3, #1
 80143f2:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_mdir_t dir;
        bool moreorphans = false;
 80143f4:	2300      	movs	r3, #0
 80143f6:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 80143fa:	e149      	b.n	8014690 <lfs_fs_deorphan+0x2e0>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80143fc:	f107 0308 	add.w	r3, r7, #8
 8014400:	f103 0218 	add.w	r2, r3, #24
 8014404:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014408:	4619      	mov	r1, r3
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f7fb f890 	bl	800f530 <lfs_dir_fetch>
 8014410:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
            if (err) {
 8014414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014418:	2b00      	cmp	r3, #0
 801441a:	d002      	beq.n	8014422 <lfs_fs_deorphan+0x72>
                return err;
 801441c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014420:	e161      	b.n	80146e6 <lfs_fs_deorphan+0x336>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 8014422:	7ffb      	ldrb	r3, [r7, #31]
 8014424:	f083 0301 	eor.w	r3, r3, #1
 8014428:	b2db      	uxtb	r3, r3
 801442a:	2b00      	cmp	r3, #0
 801442c:	f000 8124 	beq.w	8014678 <lfs_fs_deorphan+0x2c8>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8014430:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8014434:	f107 0308 	add.w	r3, r7, #8
 8014438:	3318      	adds	r3, #24
 801443a:	4619      	mov	r1, r3
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7ff fdad 	bl	8013f9c <lfs_fs_parent>
 8014442:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 8014446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801444a:	2b00      	cmp	r3, #0
 801444c:	da07      	bge.n	801445e <lfs_fs_deorphan+0xae>
 801444e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014452:	f113 0f02 	cmn.w	r3, #2
 8014456:	d002      	beq.n	801445e <lfs_fs_deorphan+0xae>
                    return tag;
 8014458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801445c:	e143      	b.n	80146e6 <lfs_fs_deorphan+0x336>
                }

                if (pass == 0 && tag != LFS_ERR_NOENT) {
 801445e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014462:	2b00      	cmp	r3, #0
 8014464:	f040 80ac 	bne.w	80145c0 <lfs_fs_deorphan+0x210>
 8014468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801446c:	f113 0f02 	cmn.w	r3, #2
 8014470:	f000 80a6 	beq.w	80145c0 <lfs_fs_deorphan+0x210>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 8014474:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8014478:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801447c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014480:	9300      	str	r3, [sp, #0]
 8014482:	4613      	mov	r3, r2
 8014484:	4a9a      	ldr	r2, [pc, #616]	@ (80146f0 <lfs_fs_deorphan+0x340>)
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f7f9 ff4c 	bl	800e324 <lfs_dir_get>
 801448c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 8014490:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014494:	2b00      	cmp	r3, #0
 8014496:	da02      	bge.n	801449e <lfs_fs_deorphan+0xee>
                        return state;
 8014498:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801449c:	e0eb      	b.n	8014676 <lfs_fs_deorphan+0x2c6>
                    }
                    lfs_pair_fromle32(pair);
 801449e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7f9 fa23 	bl	800d8ee <lfs_pair_fromle32>

                    if (!lfs_pair_issync(pair, pdir.tail)) {
 80144a8:	f107 0308 	add.w	r3, r7, #8
 80144ac:	f103 0218 	add.w	r2, r3, #24
 80144b0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80144b4:	4611      	mov	r1, r2
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7f9 f9ec 	bl	800d894 <lfs_pair_issync>
 80144bc:	4603      	mov	r3, r0
 80144be:	f083 0301 	eor.w	r3, r3, #1
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d07b      	beq.n	80145c0 <lfs_fs_deorphan+0x210>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 80144c8:	6a38      	ldr	r0, [r7, #32]
 80144ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80144d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80144d4:	4c87      	ldr	r4, [pc, #540]	@ (80146f4 <lfs_fs_deorphan+0x344>)
 80144d6:	9403      	str	r4, [sp, #12]
 80144d8:	9102      	str	r1, [sp, #8]
 80144da:	9201      	str	r2, [sp, #4]
 80144dc:	9300      	str	r3, [sp, #0]
 80144de:	4603      	mov	r3, r0
 80144e0:	f241 3271 	movw	r2, #4977	@ 0x1371
 80144e4:	4984      	ldr	r1, [pc, #528]	@ (80146f8 <lfs_fs_deorphan+0x348>)
 80144e6:	4885      	ldr	r0, [pc, #532]	@ (80146fc <lfs_fs_deorphan+0x34c>)
 80144e8:	f00e ff12 	bl	8023310 <printf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 80144ec:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80144f0:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	3330      	adds	r3, #48	@ 0x30
 80144f8:	f107 0208 	add.w	r2, r7, #8
 80144fc:	4611      	mov	r1, r2
 80144fe:	4618      	mov	r0, r3
 8014500:	f7f9 fb50 	bl	800dba4 <lfs_gstate_hasmovehere>
 8014504:	4603      	mov	r3, r0
 8014506:	2b00      	cmp	r3, #0
 8014508:	d01c      	beq.n	8014544 <lfs_fs_deorphan+0x194>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801450e:	4618      	mov	r0, r3
 8014510:	f7f9 fa8c 	bl	800da2c <lfs_tag_id>
 8014514:	4603      	mov	r3, r0
 8014516:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
                            LFS_DEBUG("Fixing move while fixing orphans "
 801451a:	68b9      	ldr	r1, [r7, #8]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8014522:	4874      	ldr	r0, [pc, #464]	@ (80146f4 <lfs_fs_deorphan+0x344>)
 8014524:	9002      	str	r0, [sp, #8]
 8014526:	9201      	str	r2, [sp, #4]
 8014528:	9300      	str	r3, [sp, #0]
 801452a:	460b      	mov	r3, r1
 801452c:	f241 327c 	movw	r2, #4988	@ 0x137c
 8014530:	4971      	ldr	r1, [pc, #452]	@ (80146f8 <lfs_fs_deorphan+0x348>)
 8014532:	4873      	ldr	r0, [pc, #460]	@ (8014700 <lfs_fs_deorphan+0x350>)
 8014534:	f00e feec 	bl	8023310 <printf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8014538:	2200      	movs	r2, #0
 801453a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f7ff fe14 	bl	801416c <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 8014544:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014548:	4618      	mov	r0, r3
 801454a:	f7f9 f9ea 	bl	800d922 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 801454e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8014552:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8014556:	4293      	cmp	r3, r2
 8014558:	d007      	beq.n	801456a <lfs_fs_deorphan+0x1ba>
 801455a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 801455e:	029b      	lsls	r3, r3, #10
 8014560:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8014564:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8014568:	e000      	b.n	801456c <lfs_fs_deorphan+0x1bc>
 801456a:	2300      	movs	r3, #0
 801456c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014570:	2300      	movs	r3, #0
 8014572:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014576:	4b63      	ldr	r3, [pc, #396]	@ (8014704 <lfs_fs_deorphan+0x354>)
 8014578:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801457c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8014580:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014584:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8014588:	f107 0108 	add.w	r1, r7, #8
 801458c:	2302      	movs	r3, #2
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f7fc fb2e 	bl	8010bf0 <lfs_dir_orphaningcommit>
 8014594:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 8014598:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801459c:	4618      	mov	r0, r3
 801459e:	f7f9 f9a6 	bl	800d8ee <lfs_pair_fromle32>
                        if (state < 0) {
 80145a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	da02      	bge.n	80145b0 <lfs_fs_deorphan+0x200>
                            return state;
 80145aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 80145ae:	e062      	b.n	8014676 <lfs_fs_deorphan+0x2c6>
                        }

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 80145b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80145b4:	2b03      	cmp	r3, #3
 80145b6:	d16b      	bne.n	8014690 <lfs_fs_deorphan+0x2e0>
                            moreorphans = true;
 80145b8:	2301      	movs	r3, #1
 80145ba:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80145be:	e067      	b.n	8014690 <lfs_fs_deorphan+0x2e0>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80145c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80145c4:	2b01      	cmp	r3, #1
 80145c6:	d157      	bne.n	8014678 <lfs_fs_deorphan+0x2c8>
 80145c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80145cc:	f113 0f02 	cmn.w	r3, #2
 80145d0:	d152      	bne.n	8014678 <lfs_fs_deorphan+0x2c8>
 80145d2:	78fb      	ldrb	r3, [r7, #3]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d04f      	beq.n	8014678 <lfs_fs_deorphan+0x2c8>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 80145d8:	6a3a      	ldr	r2, [r7, #32]
 80145da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145dc:	4945      	ldr	r1, [pc, #276]	@ (80146f4 <lfs_fs_deorphan+0x344>)
 80145de:	9101      	str	r1, [sp, #4]
 80145e0:	9300      	str	r3, [sp, #0]
 80145e2:	4613      	mov	r3, r2
 80145e4:	f241 329c 	movw	r2, #5020	@ 0x139c
 80145e8:	4943      	ldr	r1, [pc, #268]	@ (80146f8 <lfs_fs_deorphan+0x348>)
 80145ea:	4847      	ldr	r0, [pc, #284]	@ (8014708 <lfs_fs_deorphan+0x358>)
 80145ec:	f00e fe90 	bl	8023310 <printf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80145f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80145fa:	4619      	mov	r1, r3
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f7fa ffb3 	bl	800f568 <lfs_dir_getgstate>
 8014602:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                    if (err) {
 8014606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801460a:	2b00      	cmp	r3, #0
 801460c:	d002      	beq.n	8014614 <lfs_fs_deorphan+0x264>
                        return err;
 801460e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014612:	e030      	b.n	8014676 <lfs_fs_deorphan+0x2c6>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 8014614:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014618:	3318      	adds	r3, #24
 801461a:	4618      	mov	r0, r3
 801461c:	f7f9 f981 	bl	800d922 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8014620:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014624:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8014628:	051a      	lsls	r2, r3, #20
 801462a:	4b38      	ldr	r3, [pc, #224]	@ (801470c <lfs_fs_deorphan+0x35c>)
 801462c:	4313      	orrs	r3, r2
 801462e:	673b      	str	r3, [r7, #112]	@ 0x70
 8014630:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014634:	3318      	adds	r3, #24
 8014636:	677b      	str	r3, [r7, #116]	@ 0x74
 8014638:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801463c:	f107 0108 	add.w	r1, r7, #8
 8014640:	2301      	movs	r3, #1
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7fc fad4 	bl	8010bf0 <lfs_dir_orphaningcommit>
 8014648:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 801464c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014650:	3318      	adds	r3, #24
 8014652:	4618      	mov	r0, r3
 8014654:	f7f9 f94b 	bl	800d8ee <lfs_pair_fromle32>
                    if (state < 0) {
 8014658:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801465c:	2b00      	cmp	r3, #0
 801465e:	da02      	bge.n	8014666 <lfs_fs_deorphan+0x2b6>
                        return state;
 8014660:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
                    return tag;
 8014664:	e03f      	b.n	80146e6 <lfs_fs_deorphan+0x336>
                    }

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 8014666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801466a:	2b03      	cmp	r3, #3
 801466c:	d10f      	bne.n	801468e <lfs_fs_deorphan+0x2de>
                        moreorphans = true;
 801466e:	2301      	movs	r3, #1
 8014670:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8014674:	e00c      	b.n	8014690 <lfs_fs_deorphan+0x2e0>
                return err;
 8014676:	e036      	b.n	80146e6 <lfs_fs_deorphan+0x336>
                    // refetch tail
                    continue;
                }
            }

            pdir = dir;
 8014678:	f107 0408 	add.w	r4, r7, #8
 801467c:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8014680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014684:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014688:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801468c:	e000      	b.n	8014690 <lfs_fs_deorphan+0x2e0>
                    continue;
 801468e:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 8014690:	f107 0308 	add.w	r3, r7, #8
 8014694:	3318      	adds	r3, #24
 8014696:	4618      	mov	r0, r3
 8014698:	f7f9 f8b7 	bl	800d80a <lfs_pair_isnull>
 801469c:	4603      	mov	r3, r0
 801469e:	f083 0301 	eor.w	r3, r3, #1
 80146a2:	b2db      	uxtb	r3, r3
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	f47f aea9 	bne.w	80143fc <lfs_fs_deorphan+0x4c>
        }

        pass = moreorphans ? 0 : pass+1;
 80146aa:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d001      	beq.n	80146b6 <lfs_fs_deorphan+0x306>
 80146b2:	2300      	movs	r3, #0
 80146b4:	e002      	b.n	80146bc <lfs_fs_deorphan+0x30c>
 80146b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80146ba:	3301      	adds	r3, #1
 80146bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    while (pass < 2) {
 80146c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80146c4:	2b01      	cmp	r3, #1
 80146c6:	f77f ae8a 	ble.w	80143de <lfs_fs_deorphan+0x2e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	3330      	adds	r3, #48	@ 0x30
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7f9 fa32 	bl	800db38 <lfs_gstate_getorphans>
 80146d4:	4603      	mov	r3, r0
 80146d6:	425b      	negs	r3, r3
 80146d8:	b2db      	uxtb	r3, r3
 80146da:	b25b      	sxtb	r3, r3
 80146dc:	4619      	mov	r1, r3
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f7ff fcf4 	bl	80140cc <lfs_fs_preporphans>
 80146e4:	4603      	mov	r3, r0
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	37b8      	adds	r7, #184	@ 0xb8
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bdb0      	pop	{r4, r5, r7, pc}
 80146ee:	bf00      	nop
 80146f0:	7ffffc00 	.word	0x7ffffc00
 80146f4:	08030968 	.word	0x08030968
 80146f8:	08030840 	.word	0x08030840
 80146fc:	08031300 	.word	0x08031300
 8014700:	08031344 	.word	0x08031344
 8014704:	600ffc08 	.word	0x600ffc08
 8014708:	0803138c 	.word	0x0803138c
 801470c:	000ffc08 	.word	0x000ffc08

08014710 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_desuperblock(lfs);
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f7ff fd61 	bl	80141e0 <lfs_fs_desuperblock>
 801471e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d001      	beq.n	801472a <lfs_fs_forceconsistency+0x1a>
        return err;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	e013      	b.n	8014752 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_demove(lfs);
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f7ff fdc4 	bl	80142b8 <lfs_fs_demove>
 8014730:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d001      	beq.n	801473c <lfs_fs_forceconsistency+0x2c>
        return err;
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	e00a      	b.n	8014752 <lfs_fs_forceconsistency+0x42>
    }

    err = lfs_fs_deorphan(lfs, true);
 801473c:	2101      	movs	r1, #1
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7ff fe36 	bl	80143b0 <lfs_fs_deorphan>
 8014744:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d001      	beq.n	8014750 <lfs_fs_forceconsistency+0x40>
        return err;
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	e000      	b.n	8014752 <lfs_fs_forceconsistency+0x42>
    }

    return 0;
 8014750:	2300      	movs	r3, #0
}
 8014752:	4618      	mov	r0, r3
 8014754:	3710      	adds	r7, #16
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}

0801475a <lfs_fs_size_count>:

    return 0;
}
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 801475a:	b480      	push	{r7}
 801475c:	b085      	sub	sp, #20
 801475e:	af00      	add	r7, sp, #0
 8014760:	6078      	str	r0, [r7, #4]
 8014762:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	1c5a      	adds	r2, r3, #1
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	601a      	str	r2, [r3, #0]
    return 0;
 8014772:	2300      	movs	r3, #0
}
 8014774:	4618      	mov	r0, r3
 8014776:	3714      	adds	r7, #20
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8014780:	b580      	push	{r7, lr}
 8014782:	b084      	sub	sp, #16
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8014788:	2300      	movs	r3, #0
 801478a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 801478c:	f107 0208 	add.w	r2, r7, #8
 8014790:	2300      	movs	r3, #0
 8014792:	4907      	ldr	r1, [pc, #28]	@ (80147b0 <lfs_fs_size_+0x30>)
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f7ff f9ff 	bl	8013b98 <lfs_fs_traverse_>
 801479a:	60f8      	str	r0, [r7, #12]
    if (err) {
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d001      	beq.n	80147a6 <lfs_fs_size_+0x26>
        return err;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	e000      	b.n	80147a8 <lfs_fs_size_+0x28>
    }

    return size;
 80147a6:	68bb      	ldr	r3, [r7, #8]
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3710      	adds	r7, #16
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	0801475b 	.word	0x0801475b

080147b4 <lfs_format>:
//#define LFS_UNLOCK(cfg) ((void)cfg)
//#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b084      	sub	sp, #16
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	695b      	ldr	r3, [r3, #20]
 80147c2:	6838      	ldr	r0, [r7, #0]
 80147c4:	4798      	blx	r3
 80147c6:	60f8      	str	r0, [r7, #12]
    if (err) {
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d001      	beq.n	80147d2 <lfs_format+0x1e>
        return err;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	e009      	b.n	80147e6 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_format_(lfs, cfg);
 80147d2:	6839      	ldr	r1, [r7, #0]
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f7fe ff01 	bl	80135dc <lfs_format_>
 80147da:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	699b      	ldr	r3, [r3, #24]
 80147e0:	6838      	ldr	r0, [r7, #0]
 80147e2:	4798      	blx	r3
    return err;
 80147e4:	68fb      	ldr	r3, [r7, #12]
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3710      	adds	r7, #16
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}

080147ee <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80147ee:	b580      	push	{r7, lr}
 80147f0:	b084      	sub	sp, #16
 80147f2:	af00      	add	r7, sp, #0
 80147f4:	6078      	str	r0, [r7, #4]
 80147f6:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	695b      	ldr	r3, [r3, #20]
 80147fc:	6838      	ldr	r0, [r7, #0]
 80147fe:	4798      	blx	r3
 8014800:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d001      	beq.n	801480c <lfs_mount+0x1e>
        return err;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	e009      	b.n	8014820 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_mount_(lfs, cfg);
 801480c:	6839      	ldr	r1, [r7, #0]
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f7fe ff96 	bl	8013740 <lfs_mount_>
 8014814:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	699b      	ldr	r3, [r3, #24]
 801481a:	6838      	ldr	r0, [r7, #0]
 801481c:	4798      	blx	r3
    return err;
 801481e:	68fb      	ldr	r3, [r7, #12]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 8014828:	b580      	push	{r7, lr}
 801482a:	b084      	sub	sp, #16
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014836:	695b      	ldr	r3, [r3, #20]
 8014838:	687a      	ldr	r2, [r7, #4]
 801483a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801483c:	4610      	mov	r0, r2
 801483e:	4798      	blx	r3
 8014840:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d001      	beq.n	801484c <lfs_remove+0x24>
        return err;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	e00c      	b.n	8014866 <lfs_remove+0x3e>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_remove_(lfs, path);
 801484c:	6839      	ldr	r1, [r7, #0]
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f7fe f94a 	bl	8012ae8 <lfs_remove_>
 8014854:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801485a:	699b      	ldr	r3, [r3, #24]
 801485c:	687a      	ldr	r2, [r7, #4]
 801485e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014860:	4610      	mov	r0, r2
 8014862:	4798      	blx	r3
    return err;
 8014864:	68fb      	ldr	r3, [r7, #12]
}
 8014866:	4618      	mov	r0, r3
 8014868:	3710      	adds	r7, #16
 801486a:	46bd      	mov	sp, r7
 801486c:	bd80      	pop	{r7, pc}

0801486e <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 801486e:	b580      	push	{r7, lr}
 8014870:	b086      	sub	sp, #24
 8014872:	af00      	add	r7, sp, #0
 8014874:	60f8      	str	r0, [r7, #12]
 8014876:	60b9      	str	r1, [r7, #8]
 8014878:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801487e:	695b      	ldr	r3, [r3, #20]
 8014880:	68fa      	ldr	r2, [r7, #12]
 8014882:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014884:	4610      	mov	r0, r2
 8014886:	4798      	blx	r3
 8014888:	6178      	str	r0, [r7, #20]
    if (err) {
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d001      	beq.n	8014894 <lfs_rename+0x26>
        return err;
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	e00d      	b.n	80148b0 <lfs_rename+0x42>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rename_(lfs, oldpath, newpath);
 8014894:	687a      	ldr	r2, [r7, #4]
 8014896:	68b9      	ldr	r1, [r7, #8]
 8014898:	68f8      	ldr	r0, [r7, #12]
 801489a:	f7fe f9f7 	bl	8012c8c <lfs_rename_>
 801489e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80148a4:	699b      	ldr	r3, [r3, #24]
 80148a6:	68fa      	ldr	r2, [r7, #12]
 80148a8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80148aa:	4610      	mov	r0, r2
 80148ac:	4798      	blx	r3
    return err;
 80148ae:	697b      	ldr	r3, [r7, #20]
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3718      	adds	r7, #24
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b086      	sub	sp, #24
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80148c8:	695b      	ldr	r3, [r3, #20]
 80148ca:	68fa      	ldr	r2, [r7, #12]
 80148cc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80148ce:	4610      	mov	r0, r2
 80148d0:	4798      	blx	r3
 80148d2:	6178      	str	r0, [r7, #20]
    if (err) {
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d001      	beq.n	80148de <lfs_stat+0x26>
        return err;
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	e00d      	b.n	80148fa <lfs_stat+0x42>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_stat_(lfs, path, info);
 80148de:	687a      	ldr	r2, [r7, #4]
 80148e0:	68b9      	ldr	r1, [r7, #8]
 80148e2:	68f8      	ldr	r0, [r7, #12]
 80148e4:	f7fe f8db 	bl	8012a9e <lfs_stat_>
 80148e8:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80148ee:	699b      	ldr	r3, [r3, #24]
 80148f0:	68fa      	ldr	r2, [r7, #12]
 80148f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80148f4:	4610      	mov	r0, r2
 80148f6:	4798      	blx	r3
    return err;
 80148f8:	697b      	ldr	r3, [r7, #20]
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3718      	adds	r7, #24
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
	...

08014904 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8014904:	b580      	push	{r7, lr}
 8014906:	b086      	sub	sp, #24
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	607a      	str	r2, [r7, #4]
 8014910:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014916:	695b      	ldr	r3, [r3, #20]
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801491c:	4610      	mov	r0, r2
 801491e:	4798      	blx	r3
 8014920:	6178      	str	r0, [r7, #20]
    if (err) {
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d001      	beq.n	801492c <lfs_file_open+0x28>
        return err;
 8014928:	697b      	ldr	r3, [r7, #20]
 801492a:	e021      	b.n	8014970 <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014930:	68b9      	ldr	r1, [r7, #8]
 8014932:	4618      	mov	r0, r3
 8014934:	f7f9 fa66 	bl	800de04 <lfs_mlist_isopen>
 8014938:	4603      	mov	r3, r0
 801493a:	f083 0301 	eor.w	r3, r3, #1
 801493e:	b2db      	uxtb	r3, r3
 8014940:	2b00      	cmp	r3, #0
 8014942:	d106      	bne.n	8014952 <lfs_file_open+0x4e>
 8014944:	4b0c      	ldr	r3, [pc, #48]	@ (8014978 <lfs_file_open+0x74>)
 8014946:	4a0d      	ldr	r2, [pc, #52]	@ (801497c <lfs_file_open+0x78>)
 8014948:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 801494c:	480c      	ldr	r0, [pc, #48]	@ (8014980 <lfs_file_open+0x7c>)
 801494e:	f00e fcab 	bl	80232a8 <__assert_func>

    err = lfs_file_open_(lfs, file, path, flags);
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	68b9      	ldr	r1, [r7, #8]
 8014958:	68f8      	ldr	r0, [r7, #12]
 801495a:	f7fd faad 	bl	8011eb8 <lfs_file_open_>
 801495e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014964:	699b      	ldr	r3, [r3, #24]
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801496a:	4610      	mov	r0, r2
 801496c:	4798      	blx	r3
    return err;
 801496e:	697b      	ldr	r3, [r7, #20]
}
 8014970:	4618      	mov	r0, r3
 8014972:	3718      	adds	r7, #24
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	080313dc 	.word	0x080313dc
 801497c:	080343a8 	.word	0x080343a8
 8014980:	08030840 	.word	0x08030840

08014984 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014992:	695b      	ldr	r3, [r3, #20]
 8014994:	687a      	ldr	r2, [r7, #4]
 8014996:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014998:	4610      	mov	r0, r2
 801499a:	4798      	blx	r3
 801499c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d001      	beq.n	80149a8 <lfs_file_close+0x24>
        return err;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	e01c      	b.n	80149e2 <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149ac:	6839      	ldr	r1, [r7, #0]
 80149ae:	4618      	mov	r0, r3
 80149b0:	f7f9 fa28 	bl	800de04 <lfs_mlist_isopen>
 80149b4:	4603      	mov	r3, r0
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d106      	bne.n	80149c8 <lfs_file_close+0x44>
 80149ba:	4b0c      	ldr	r3, [pc, #48]	@ (80149ec <lfs_file_close+0x68>)
 80149bc:	4a0c      	ldr	r2, [pc, #48]	@ (80149f0 <lfs_file_close+0x6c>)
 80149be:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 80149c2:	480c      	ldr	r0, [pc, #48]	@ (80149f4 <lfs_file_close+0x70>)
 80149c4:	f00e fc70 	bl	80232a8 <__assert_func>

    err = lfs_file_close_(lfs, file);
 80149c8:	6839      	ldr	r1, [r7, #0]
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7fd fa8c 	bl	8011ee8 <lfs_file_close_>
 80149d0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80149d6:	699b      	ldr	r3, [r3, #24]
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80149dc:	4610      	mov	r0, r2
 80149de:	4798      	blx	r3
    return err;
 80149e0:	68fb      	ldr	r3, [r7, #12]
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	08031414 	.word	0x08031414
 80149f0:	080343b8 	.word	0x080343b8
 80149f4:	08030840 	.word	0x08030840

080149f8 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b086      	sub	sp, #24
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	607a      	str	r2, [r7, #4]
 8014a04:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014a0a:	695b      	ldr	r3, [r3, #20]
 8014a0c:	68fa      	ldr	r2, [r7, #12]
 8014a0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014a10:	4610      	mov	r0, r2
 8014a12:	4798      	blx	r3
 8014a14:	6178      	str	r0, [r7, #20]
    if (err) {
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d001      	beq.n	8014a20 <lfs_file_read+0x28>
        return err;
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	e01e      	b.n	8014a5e <lfs_file_read+0x66>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a24:	68b9      	ldr	r1, [r7, #8]
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7f9 f9ec 	bl	800de04 <lfs_mlist_isopen>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d106      	bne.n	8014a40 <lfs_file_read+0x48>
 8014a32:	4b0d      	ldr	r3, [pc, #52]	@ (8014a68 <lfs_file_read+0x70>)
 8014a34:	4a0d      	ldr	r2, [pc, #52]	@ (8014a6c <lfs_file_read+0x74>)
 8014a36:	f241 71f3 	movw	r1, #6131	@ 0x17f3
 8014a3a:	480d      	ldr	r0, [pc, #52]	@ (8014a70 <lfs_file_read+0x78>)
 8014a3c:	f00e fc34 	bl	80232a8 <__assert_func>

    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	687a      	ldr	r2, [r7, #4]
 8014a44:	68b9      	ldr	r1, [r7, #8]
 8014a46:	68f8      	ldr	r0, [r7, #12]
 8014a48:	f7fd fdae 	bl	80125a8 <lfs_file_read_>
 8014a4c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014a52:	699b      	ldr	r3, [r3, #24]
 8014a54:	68fa      	ldr	r2, [r7, #12]
 8014a56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014a58:	4610      	mov	r0, r2
 8014a5a:	4798      	blx	r3
    return res;
 8014a5c:	693b      	ldr	r3, [r7, #16]
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3718      	adds	r7, #24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	08031414 	.word	0x08031414
 8014a6c:	080343c8 	.word	0x080343c8
 8014a70:	08030840 	.word	0x08030840

08014a74 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b086      	sub	sp, #24
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	60f8      	str	r0, [r7, #12]
 8014a7c:	60b9      	str	r1, [r7, #8]
 8014a7e:	607a      	str	r2, [r7, #4]
 8014a80:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014a86:	695b      	ldr	r3, [r3, #20]
 8014a88:	68fa      	ldr	r2, [r7, #12]
 8014a8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014a8c:	4610      	mov	r0, r2
 8014a8e:	4798      	blx	r3
 8014a90:	6178      	str	r0, [r7, #20]
    if (err) {
 8014a92:	697b      	ldr	r3, [r7, #20]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d001      	beq.n	8014a9c <lfs_file_write+0x28>
        return err;
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	e01e      	b.n	8014ada <lfs_file_write+0x66>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014aa0:	68b9      	ldr	r1, [r7, #8]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7f9 f9ae 	bl	800de04 <lfs_mlist_isopen>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d106      	bne.n	8014abc <lfs_file_write+0x48>
 8014aae:	4b0d      	ldr	r3, [pc, #52]	@ (8014ae4 <lfs_file_write+0x70>)
 8014ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8014ae8 <lfs_file_write+0x74>)
 8014ab2:	f641 0105 	movw	r1, #6149	@ 0x1805
 8014ab6:	480d      	ldr	r0, [pc, #52]	@ (8014aec <lfs_file_write+0x78>)
 8014ab8:	f00e fbf6 	bl	80232a8 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	687a      	ldr	r2, [r7, #4]
 8014ac0:	68b9      	ldr	r1, [r7, #8]
 8014ac2:	68f8      	ldr	r0, [r7, #12]
 8014ac4:	f7fd feb6 	bl	8012834 <lfs_file_write_>
 8014ac8:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014ace:	699b      	ldr	r3, [r3, #24]
 8014ad0:	68fa      	ldr	r2, [r7, #12]
 8014ad2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014ad4:	4610      	mov	r0, r2
 8014ad6:	4798      	blx	r3
    return res;
 8014ad8:	693b      	ldr	r3, [r7, #16]
}
 8014ada:	4618      	mov	r0, r3
 8014adc:	3718      	adds	r7, #24
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	08031414 	.word	0x08031414
 8014ae8:	080343d8 	.word	0x080343d8
 8014aec:	08030840 	.word	0x08030840

08014af0 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b086      	sub	sp, #24
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	60f8      	str	r0, [r7, #12]
 8014af8:	60b9      	str	r1, [r7, #8]
 8014afa:	607a      	str	r2, [r7, #4]
 8014afc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014b02:	695b      	ldr	r3, [r3, #20]
 8014b04:	68fa      	ldr	r2, [r7, #12]
 8014b06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014b08:	4610      	mov	r0, r2
 8014b0a:	4798      	blx	r3
 8014b0c:	6178      	str	r0, [r7, #20]
    if (err) {
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d001      	beq.n	8014b18 <lfs_file_seek+0x28>
        return err;
 8014b14:	697b      	ldr	r3, [r7, #20]
 8014b16:	e01e      	b.n	8014b56 <lfs_file_seek+0x66>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b1c:	68b9      	ldr	r1, [r7, #8]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7f9 f970 	bl	800de04 <lfs_mlist_isopen>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d106      	bne.n	8014b38 <lfs_file_seek+0x48>
 8014b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8014b60 <lfs_file_seek+0x70>)
 8014b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8014b64 <lfs_file_seek+0x74>)
 8014b2e:	f641 0117 	movw	r1, #6167	@ 0x1817
 8014b32:	480d      	ldr	r0, [pc, #52]	@ (8014b68 <lfs_file_seek+0x78>)
 8014b34:	f00e fbb8 	bl	80232a8 <__assert_func>

    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	687a      	ldr	r2, [r7, #4]
 8014b3c:	68b9      	ldr	r1, [r7, #8]
 8014b3e:	68f8      	ldr	r0, [r7, #12]
 8014b40:	f7fd fefc 	bl	801293c <lfs_file_seek_>
 8014b44:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014b4a:	699b      	ldr	r3, [r3, #24]
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014b50:	4610      	mov	r0, r2
 8014b52:	4798      	blx	r3
    return res;
 8014b54:	693b      	ldr	r3, [r7, #16]
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3718      	adds	r7, #24
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop
 8014b60:	08031414 	.word	0x08031414
 8014b64:	080343e8 	.word	0x080343e8
 8014b68:	08030840 	.word	0x08030840

08014b6c <lfs_file_tell>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b084      	sub	sp, #16
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014b7a:	695b      	ldr	r3, [r3, #20]
 8014b7c:	687a      	ldr	r2, [r7, #4]
 8014b7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014b80:	4610      	mov	r0, r2
 8014b82:	4798      	blx	r3
 8014b84:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d001      	beq.n	8014b90 <lfs_file_tell+0x24>
        return err;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	e01c      	b.n	8014bca <lfs_file_tell+0x5e>
    }
    LFS_TRACE("lfs_file_tell(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b94:	6839      	ldr	r1, [r7, #0]
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7f9 f934 	bl	800de04 <lfs_mlist_isopen>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d106      	bne.n	8014bb0 <lfs_file_tell+0x44>
 8014ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8014bd4 <lfs_file_tell+0x68>)
 8014ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8014bd8 <lfs_file_tell+0x6c>)
 8014ba6:	f641 0138 	movw	r1, #6200	@ 0x1838
 8014baa:	480c      	ldr	r0, [pc, #48]	@ (8014bdc <lfs_file_tell+0x70>)
 8014bac:	f00e fb7c 	bl	80232a8 <__assert_func>

    lfs_soff_t res = lfs_file_tell_(lfs, file);
 8014bb0:	6839      	ldr	r1, [r7, #0]
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f7fd ff4b 	bl	8012a4e <lfs_file_tell_>
 8014bb8:	60b8      	str	r0, [r7, #8]

    LFS_TRACE("lfs_file_tell -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014bbe:	699b      	ldr	r3, [r3, #24]
 8014bc0:	687a      	ldr	r2, [r7, #4]
 8014bc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014bc4:	4610      	mov	r0, r2
 8014bc6:	4798      	blx	r3
    return res;
 8014bc8:	68bb      	ldr	r3, [r7, #8]
}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3710      	adds	r7, #16
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}
 8014bd2:	bf00      	nop
 8014bd4:	08031414 	.word	0x08031414
 8014bd8:	080343f8 	.word	0x080343f8
 8014bdc:	08030840 	.word	0x08030840

08014be0 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b084      	sub	sp, #16
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014bee:	695b      	ldr	r3, [r3, #20]
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014bf4:	4610      	mov	r0, r2
 8014bf6:	4798      	blx	r3
 8014bf8:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d001      	beq.n	8014c04 <lfs_mkdir+0x24>
        return err;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	e00c      	b.n	8014c1e <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_mkdir_(lfs, path);
 8014c04:	6839      	ldr	r1, [r7, #0]
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f7fc fb12 	bl	8011230 <lfs_mkdir_>
 8014c0c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014c12:	699b      	ldr	r3, [r3, #24]
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014c18:	4610      	mov	r0, r2
 8014c1a:	4798      	blx	r3
    return err;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3710      	adds	r7, #16
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
	...

08014c28 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	b086      	sub	sp, #24
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	60f8      	str	r0, [r7, #12]
 8014c30:	60b9      	str	r1, [r7, #8]
 8014c32:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014c38:	695b      	ldr	r3, [r3, #20]
 8014c3a:	68fa      	ldr	r2, [r7, #12]
 8014c3c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014c3e:	4610      	mov	r0, r2
 8014c40:	4798      	blx	r3
 8014c42:	6178      	str	r0, [r7, #20]
    if (err) {
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d001      	beq.n	8014c4e <lfs_dir_open+0x26>
        return err;
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	e020      	b.n	8014c90 <lfs_dir_open+0x68>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c52:	68b9      	ldr	r1, [r7, #8]
 8014c54:	4618      	mov	r0, r3
 8014c56:	f7f9 f8d5 	bl	800de04 <lfs_mlist_isopen>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	f083 0301 	eor.w	r3, r3, #1
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d106      	bne.n	8014c74 <lfs_dir_open+0x4c>
 8014c66:	4b0c      	ldr	r3, [pc, #48]	@ (8014c98 <lfs_dir_open+0x70>)
 8014c68:	4a0c      	ldr	r2, [pc, #48]	@ (8014c9c <lfs_dir_open+0x74>)
 8014c6a:	f641 0174 	movw	r1, #6260	@ 0x1874
 8014c6e:	480c      	ldr	r0, [pc, #48]	@ (8014ca0 <lfs_dir_open+0x78>)
 8014c70:	f00e fb1a 	bl	80232a8 <__assert_func>

    err = lfs_dir_open_(lfs, dir, path);
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	68b9      	ldr	r1, [r7, #8]
 8014c78:	68f8      	ldr	r0, [r7, #12]
 8014c7a:	f7fc fc19 	bl	80114b0 <lfs_dir_open_>
 8014c7e:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014c84:	699b      	ldr	r3, [r3, #24]
 8014c86:	68fa      	ldr	r2, [r7, #12]
 8014c88:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014c8a:	4610      	mov	r0, r2
 8014c8c:	4798      	blx	r3
    return err;
 8014c8e:	697b      	ldr	r3, [r7, #20]
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3718      	adds	r7, #24
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	0803144c 	.word	0x0803144c
 8014c9c:	08034408 	.word	0x08034408
 8014ca0:	08030840 	.word	0x08030840

08014ca4 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b084      	sub	sp, #16
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014cb2:	695b      	ldr	r3, [r3, #20]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014cb8:	4610      	mov	r0, r2
 8014cba:	4798      	blx	r3
 8014cbc:	60f8      	str	r0, [r7, #12]
    if (err) {
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d001      	beq.n	8014cc8 <lfs_dir_close+0x24>
        return err;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	e00c      	b.n	8014ce2 <lfs_dir_close+0x3e>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_close_(lfs, dir);
 8014cc8:	6839      	ldr	r1, [r7, #0]
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f7fc fc6a 	bl	80115a4 <lfs_dir_close_>
 8014cd0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014cd6:	699b      	ldr	r3, [r3, #24]
 8014cd8:	687a      	ldr	r2, [r7, #4]
 8014cda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014cdc:	4610      	mov	r0, r2
 8014cde:	4798      	blx	r3
    return err;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
}
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	3710      	adds	r7, #16
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}

08014cea <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8014cea:	b580      	push	{r7, lr}
 8014cec:	b086      	sub	sp, #24
 8014cee:	af00      	add	r7, sp, #0
 8014cf0:	60f8      	str	r0, [r7, #12]
 8014cf2:	60b9      	str	r1, [r7, #8]
 8014cf4:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014cfa:	695b      	ldr	r3, [r3, #20]
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014d00:	4610      	mov	r0, r2
 8014d02:	4798      	blx	r3
 8014d04:	6178      	str	r0, [r7, #20]
    if (err) {
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d001      	beq.n	8014d10 <lfs_dir_read+0x26>
        return err;
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	e00d      	b.n	8014d2c <lfs_dir_read+0x42>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_read_(lfs, dir, info);
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	68b9      	ldr	r1, [r7, #8]
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	f7fc fc53 	bl	80115c0 <lfs_dir_read_>
 8014d1a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014d20:	699b      	ldr	r3, [r3, #24]
 8014d22:	68fa      	ldr	r2, [r7, #12]
 8014d24:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014d26:	4610      	mov	r0, r2
 8014d28:	4798      	blx	r3
    return err;
 8014d2a:	697b      	ldr	r3, [r7, #20]
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3718      	adds	r7, #24
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8014d34:	b480      	push	{r7}
 8014d36:	b087      	sub	sp, #28
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	60f8      	str	r0, [r7, #12]
 8014d3c:	60b9      	str	r1, [r7, #8]
 8014d3e:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8014d44:	2300      	movs	r3, #0
 8014d46:	617b      	str	r3, [r7, #20]
 8014d48:	e024      	b.n	8014d94 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	091a      	lsrs	r2, r3, #4
 8014d4e:	6939      	ldr	r1, [r7, #16]
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	440b      	add	r3, r1
 8014d54:	781b      	ldrb	r3, [r3, #0]
 8014d56:	4619      	mov	r1, r3
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	404b      	eors	r3, r1
 8014d5c:	f003 030f 	and.w	r3, r3, #15
 8014d60:	4912      	ldr	r1, [pc, #72]	@ (8014dac <lfs_crc+0x78>)
 8014d62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014d66:	4053      	eors	r3, r2
 8014d68:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	091a      	lsrs	r2, r3, #4
 8014d6e:	6939      	ldr	r1, [r7, #16]
 8014d70:	697b      	ldr	r3, [r7, #20]
 8014d72:	440b      	add	r3, r1
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	091b      	lsrs	r3, r3, #4
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	404b      	eors	r3, r1
 8014d80:	f003 030f 	and.w	r3, r3, #15
 8014d84:	4909      	ldr	r1, [pc, #36]	@ (8014dac <lfs_crc+0x78>)
 8014d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014d8a:	4053      	eors	r3, r2
 8014d8c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	3301      	adds	r3, #1
 8014d92:	617b      	str	r3, [r7, #20]
 8014d94:	697a      	ldr	r2, [r7, #20]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d3d6      	bcc.n	8014d4a <lfs_crc+0x16>
    }

    return crc;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	371c      	adds	r7, #28
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	08034418 	.word	0x08034418

08014db0 <mg_calloc>:
static inline void *mg_calloc(size_t cnt, size_t size) {
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b084      	sub	sp, #16
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	6039      	str	r1, [r7, #0]
  void *p = pvPortMalloc(cnt * size);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	683a      	ldr	r2, [r7, #0]
 8014dbe:	fb02 f303 	mul.w	r3, r2, r3
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7f7 fbb2 	bl	800c52c <pvPortMalloc>
 8014dc8:	60f8      	str	r0, [r7, #12]
  if (p != NULL) memset(p, 0, size * cnt);
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d008      	beq.n	8014de2 <mg_calloc+0x32>
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	fb02 f303 	mul.w	r3, r2, r3
 8014dd8:	461a      	mov	r2, r3
 8014dda:	2100      	movs	r1, #0
 8014ddc:	68f8      	ldr	r0, [r7, #12]
 8014dde:	f010 ffb7 	bl	8025d50 <memset>
  return p;
 8014de2:	68fb      	ldr	r3, [r7, #12]
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3710      	adds	r7, #16
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b084      	sub	sp, #16
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	60fb      	str	r3, [r7, #12]
 8014dfa:	e002      	b.n	8014e02 <mg_dns_free+0x16>
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	60fb      	str	r3, [r7, #12]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	683a      	ldr	r2, [r7, #0]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d1f7      	bne.n	8014dfc <mg_dns_free+0x10>
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	681a      	ldr	r2, [r3, #0]
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	601a      	str	r2, [r3, #0]
  free(d);
 8014e14:	6838      	ldr	r0, [r7, #0]
 8014e16:	f7f7 fc57 	bl	800c6c8 <vPortFree>
}
 8014e1a:	bf00      	nop
 8014e1c:	3710      	adds	r7, #16
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}

08014e22 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8014e22:	b580      	push	{r7, lr}
 8014e24:	b086      	sub	sp, #24
 8014e26:	af00      	add	r7, sp, #0
 8014e28:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	3330      	adds	r3, #48	@ 0x30
 8014e30:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	617b      	str	r3, [r7, #20]
 8014e38:	e00d      	b.n	8014e56 <mg_resolve_cancel+0x34>
    tmp = d->next;
 8014e3a:	697b      	ldr	r3, [r7, #20]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	685b      	ldr	r3, [r3, #4]
 8014e44:	687a      	ldr	r2, [r7, #4]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d103      	bne.n	8014e52 <mg_resolve_cancel+0x30>
 8014e4a:	6979      	ldr	r1, [r7, #20]
 8014e4c:	6938      	ldr	r0, [r7, #16]
 8014e4e:	f7ff ffcd 	bl	8014dec <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	617b      	str	r3, [r7, #20]
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d1ee      	bne.n	8014e3a <mg_resolve_cancel+0x18>
  }
}
 8014e5c:	bf00      	nop
 8014e5e:	bf00      	nop
 8014e60:	3718      	adds	r7, #24
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b08c      	sub	sp, #48	@ 0x30
 8014e6a:	af04      	add	r7, sp, #16
 8014e6c:	60f8      	str	r0, [r7, #12]
 8014e6e:	60b9      	str	r1, [r7, #8]
 8014e70:	607a      	str	r2, [r7, #4]
 8014e72:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8014e74:	2300      	movs	r3, #0
 8014e76:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8014e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d005      	beq.n	8014e8a <mg_dns_parse_name_depth+0x24>
 8014e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d102      	bne.n	8014e8a <mg_dns_parse_name_depth+0x24>
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	2200      	movs	r2, #0
 8014e88:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 8014e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e8c:	2b05      	cmp	r3, #5
 8014e8e:	f340 8084 	ble.w	8014f9a <mg_dns_parse_name_depth+0x134>
 8014e92:	2300      	movs	r3, #0
 8014e94:	e093      	b.n	8014fbe <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8014e96:	687a      	ldr	r2, [r7, #4]
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	4413      	add	r3, r2
 8014e9c:	68fa      	ldr	r2, [r7, #12]
 8014e9e:	4413      	add	r3, r2
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8014ea4:	69bb      	ldr	r3, [r7, #24]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d103      	bne.n	8014eb2 <mg_dns_parse_name_depth+0x4c>
      i++;
 8014eaa:	69fb      	ldr	r3, [r7, #28]
 8014eac:	3301      	adds	r3, #1
 8014eae:	61fb      	str	r3, [r7, #28]
      break;
 8014eb0:	e07b      	b.n	8014faa <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8014eb2:	69bb      	ldr	r3, [r7, #24]
 8014eb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d02f      	beq.n	8014f1c <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 8014ebc:	69bb      	ldr	r3, [r7, #24]
 8014ebe:	021b      	lsls	r3, r3, #8
 8014ec0:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8014ec4:	6879      	ldr	r1, [r7, #4]
 8014ec6:	69fa      	ldr	r2, [r7, #28]
 8014ec8:	440a      	add	r2, r1
 8014eca:	3201      	adds	r2, #1
 8014ecc:	68f9      	ldr	r1, [r7, #12]
 8014ece:	440a      	add	r2, r1
 8014ed0:	7812      	ldrb	r2, [r2, #0]
 8014ed2:	4313      	orrs	r3, r2
 8014ed4:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	68ba      	ldr	r2, [r7, #8]
 8014edc:	429a      	cmp	r2, r3
 8014ede:	d919      	bls.n	8014f14 <mg_dns_parse_name_depth+0xae>
 8014ee0:	68fa      	ldr	r2, [r7, #12]
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d111      	bne.n	8014f14 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 8014ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	9302      	str	r3, [sp, #8]
 8014ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ef8:	9301      	str	r3, [sp, #4]
 8014efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014efc:	9300      	str	r3, [sp, #0]
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	697a      	ldr	r2, [r7, #20]
 8014f02:	68b9      	ldr	r1, [r7, #8]
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f7ff ffae 	bl	8014e66 <mg_dns_parse_name_depth>
 8014f0a:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d101      	bne.n	8014f14 <mg_dns_parse_name_depth+0xae>
        return 0;
 8014f10:	2300      	movs	r3, #0
 8014f12:	e054      	b.n	8014fbe <mg_dns_parse_name_depth+0x158>
      i += 2;
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	3302      	adds	r3, #2
 8014f18:	61fb      	str	r3, [r7, #28]
      break;
 8014f1a:	e046      	b.n	8014faa <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	69fb      	ldr	r3, [r7, #28]
 8014f20:	441a      	add	r2, r3
 8014f22:	69bb      	ldr	r3, [r7, #24]
 8014f24:	4413      	add	r3, r2
 8014f26:	3301      	adds	r3, #1
 8014f28:	68ba      	ldr	r2, [r7, #8]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d801      	bhi.n	8014f32 <mg_dns_parse_name_depth+0xcc>
 8014f2e:	2300      	movs	r3, #0
 8014f30:	e045      	b.n	8014fbe <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8014f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d00b      	beq.n	8014f50 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8014f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d204      	bcs.n	8014f4a <mg_dns_parse_name_depth+0xe4>
 8014f40:	683a      	ldr	r2, [r7, #0]
 8014f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f44:	4413      	add	r3, r2
 8014f46:	222e      	movs	r2, #46	@ 0x2e
 8014f48:	701a      	strb	r2, [r3, #0]
      j++;
 8014f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8014f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f52:	69bb      	ldr	r3, [r7, #24]
 8014f54:	4413      	add	r3, r2
 8014f56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d90c      	bls.n	8014f76 <mg_dns_parse_name_depth+0x110>
 8014f5c:	683a      	ldr	r2, [r7, #0]
 8014f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f60:	18d0      	adds	r0, r2, r3
 8014f62:	687a      	ldr	r2, [r7, #4]
 8014f64:	69fb      	ldr	r3, [r7, #28]
 8014f66:	4413      	add	r3, r2
 8014f68:	3301      	adds	r3, #1
 8014f6a:	68fa      	ldr	r2, [r7, #12]
 8014f6c:	4413      	add	r3, r2
 8014f6e:	69ba      	ldr	r2, [r7, #24]
 8014f70:	4619      	mov	r1, r3
 8014f72:	f012 f929 	bl	80271c8 <memcpy>
    j += n;
 8014f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f78:	69bb      	ldr	r3, [r7, #24]
 8014f7a:	4413      	add	r3, r2
 8014f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8014f7e:	69ba      	ldr	r2, [r7, #24]
 8014f80:	69fb      	ldr	r3, [r7, #28]
 8014f82:	4413      	add	r3, r2
 8014f84:	3301      	adds	r3, #1
 8014f86:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8014f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d204      	bcs.n	8014f9a <mg_dns_parse_name_depth+0x134>
 8014f90:	683a      	ldr	r2, [r7, #0]
 8014f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f94:	4413      	add	r3, r2
 8014f96:	2200      	movs	r2, #0
 8014f98:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 8014f9a:	687a      	ldr	r2, [r7, #4]
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	4413      	add	r3, r2
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	68ba      	ldr	r2, [r7, #8]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	f63f af76 	bhi.w	8014e96 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 8014faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d005      	beq.n	8014fbc <mg_dns_parse_name_depth+0x156>
 8014fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fb2:	3b01      	subs	r3, #1
 8014fb4:	683a      	ldr	r2, [r7, #0]
 8014fb6:	4413      	add	r3, r2
 8014fb8:	2200      	movs	r2, #0
 8014fba:	701a      	strb	r2, [r3, #0]
  return i;
 8014fbc:	69fb      	ldr	r3, [r7, #28]
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3720      	adds	r7, #32
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}

08014fc6 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8014fc6:	b580      	push	{r7, lr}
 8014fc8:	b088      	sub	sp, #32
 8014fca:	af04      	add	r7, sp, #16
 8014fcc:	60f8      	str	r0, [r7, #12]
 8014fce:	60b9      	str	r1, [r7, #8]
 8014fd0:	607a      	str	r2, [r7, #4]
 8014fd2:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	9302      	str	r3, [sp, #8]
 8014fd8:	2300      	movs	r3, #0
 8014fda:	9301      	str	r3, [sp, #4]
 8014fdc:	69bb      	ldr	r3, [r7, #24]
 8014fde:	9300      	str	r3, [sp, #0]
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	687a      	ldr	r2, [r7, #4]
 8014fe4:	68b9      	ldr	r1, [r7, #8]
 8014fe6:	68f8      	ldr	r0, [r7, #12]
 8014fe8:	f7ff ff3d 	bl	8014e66 <mg_dns_parse_name_depth>
 8014fec:	4603      	mov	r3, r0
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3710      	adds	r7, #16
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}

08014ff6 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 8014ff6:	b580      	push	{r7, lr}
 8014ff8:	b088      	sub	sp, #32
 8014ffa:	af02      	add	r7, sp, #8
 8014ffc:	60f8      	str	r0, [r7, #12]
 8014ffe:	60b9      	str	r1, [r7, #8]
 8015000:	607a      	str	r2, [r7, #4]
 8015002:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8015004:	68fa      	ldr	r2, [r7, #12]
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	4413      	add	r3, r2
 801500a:	617b      	str	r3, [r7, #20]
 801500c:	68fa      	ldr	r2, [r7, #12]
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	4413      	add	r3, r2
 8015012:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8015014:	2208      	movs	r2, #8
 8015016:	2100      	movs	r1, #0
 8015018:	6a38      	ldr	r0, [r7, #32]
 801501a:	f010 fe99 	bl	8025d50 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 801501e:	68bb      	ldr	r3, [r7, #8]
 8015020:	2b0b      	cmp	r3, #11
 8015022:	d801      	bhi.n	8015028 <mg_dns_parse_rr+0x32>
 8015024:	2300      	movs	r3, #0
 8015026:	e074      	b.n	8015112 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801502e:	d901      	bls.n	8015034 <mg_dns_parse_rr+0x3e>
 8015030:	2300      	movs	r3, #0
 8015032:	e06e      	b.n	8015112 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8015034:	697a      	ldr	r2, [r7, #20]
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	429a      	cmp	r2, r3
 801503a:	d301      	bcc.n	8015040 <mg_dns_parse_rr+0x4a>
 801503c:	2300      	movs	r3, #0
 801503e:	e068      	b.n	8015112 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8015040:	2300      	movs	r3, #0
 8015042:	9300      	str	r3, [sp, #0]
 8015044:	2300      	movs	r3, #0
 8015046:	687a      	ldr	r2, [r7, #4]
 8015048:	68b9      	ldr	r1, [r7, #8]
 801504a:	68f8      	ldr	r0, [r7, #12]
 801504c:	f7ff ffbb 	bl	8014fc6 <mg_dns_parse_name>
 8015050:	4603      	mov	r3, r0
 8015052:	b29a      	uxth	r2, r3
 8015054:	6a3b      	ldr	r3, [r7, #32]
 8015056:	801a      	strh	r2, [r3, #0]
 8015058:	6a3b      	ldr	r3, [r7, #32]
 801505a:	881b      	ldrh	r3, [r3, #0]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d101      	bne.n	8015064 <mg_dns_parse_rr+0x6e>
    return 0;
 8015060:	2300      	movs	r3, #0
 8015062:	e056      	b.n	8015112 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	881b      	ldrh	r3, [r3, #0]
 8015068:	3304      	adds	r3, #4
 801506a:	697a      	ldr	r2, [r7, #20]
 801506c:	4413      	add	r3, r2
 801506e:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8015070:	697a      	ldr	r2, [r7, #20]
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	429a      	cmp	r2, r3
 8015076:	d901      	bls.n	801507c <mg_dns_parse_rr+0x86>
 8015078:	2300      	movs	r3, #0
 801507a:	e04a      	b.n	8015112 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	3b04      	subs	r3, #4
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	021b      	lsls	r3, r3, #8
 8015084:	b21a      	sxth	r2, r3
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	3b03      	subs	r3, #3
 801508a:	781b      	ldrb	r3, [r3, #0]
 801508c:	b21b      	sxth	r3, r3
 801508e:	4313      	orrs	r3, r2
 8015090:	b21b      	sxth	r3, r3
 8015092:	b29a      	uxth	r2, r3
 8015094:	6a3b      	ldr	r3, [r7, #32]
 8015096:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	3b02      	subs	r3, #2
 801509c:	781b      	ldrb	r3, [r3, #0]
 801509e:	021b      	lsls	r3, r3, #8
 80150a0:	b21a      	sxth	r2, r3
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	3b01      	subs	r3, #1
 80150a6:	781b      	ldrb	r3, [r3, #0]
 80150a8:	b21b      	sxth	r3, r3
 80150aa:	4313      	orrs	r3, r2
 80150ac:	b21b      	sxth	r3, r3
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	6a3b      	ldr	r3, [r7, #32]
 80150b2:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80150b4:	78fb      	ldrb	r3, [r7, #3]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d003      	beq.n	80150c2 <mg_dns_parse_rr+0xcc>
 80150ba:	6a3b      	ldr	r3, [r7, #32]
 80150bc:	881b      	ldrh	r3, [r3, #0]
 80150be:	3304      	adds	r3, #4
 80150c0:	e027      	b.n	8015112 <mg_dns_parse_rr+0x11c>

  s += 6;
 80150c2:	697b      	ldr	r3, [r7, #20]
 80150c4:	3306      	adds	r3, #6
 80150c6:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 80150c8:	697a      	ldr	r2, [r7, #20]
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d901      	bls.n	80150d4 <mg_dns_parse_rr+0xde>
 80150d0:	2300      	movs	r3, #0
 80150d2:	e01e      	b.n	8015112 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	3b02      	subs	r3, #2
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	021b      	lsls	r3, r3, #8
 80150dc:	b21a      	sxth	r2, r3
 80150de:	697b      	ldr	r3, [r7, #20]
 80150e0:	3b01      	subs	r3, #1
 80150e2:	781b      	ldrb	r3, [r3, #0]
 80150e4:	b21b      	sxth	r3, r3
 80150e6:	4313      	orrs	r3, r2
 80150e8:	b21b      	sxth	r3, r3
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	6a3b      	ldr	r3, [r7, #32]
 80150ee:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 80150f0:	6a3b      	ldr	r3, [r7, #32]
 80150f2:	88db      	ldrh	r3, [r3, #6]
 80150f4:	461a      	mov	r2, r3
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	4413      	add	r3, r2
 80150fa:	693a      	ldr	r2, [r7, #16]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d201      	bcs.n	8015104 <mg_dns_parse_rr+0x10e>
 8015100:	2300      	movs	r3, #0
 8015102:	e006      	b.n	8015112 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8015104:	6a3b      	ldr	r3, [r7, #32]
 8015106:	881b      	ldrh	r3, [r3, #0]
 8015108:	461a      	mov	r2, r3
 801510a:	6a3b      	ldr	r3, [r7, #32]
 801510c:	88db      	ldrh	r3, [r3, #6]
 801510e:	4413      	add	r3, r2
 8015110:	330a      	adds	r3, #10
}
 8015112:	4618      	mov	r0, r3
 8015114:	3718      	adds	r7, #24
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}
	...

0801511c <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 801511c:	b580      	push	{r7, lr}
 801511e:	b08e      	sub	sp, #56	@ 0x38
 8015120:	af02      	add	r7, sp, #8
 8015122:	60f8      	str	r0, [r7, #12]
 8015124:	60b9      	str	r1, [r7, #8]
 8015126:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 801512c:	230c      	movs	r3, #12
 801512e:	627b      	str	r3, [r7, #36]	@ 0x24
  memset(dm, 0, sizeof(*dm));
 8015130:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8015134:	2100      	movs	r1, #0
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f010 fe0a 	bl	8025d50 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	2b0b      	cmp	r3, #11
 8015140:	d801      	bhi.n	8015146 <mg_dns_parse+0x2a>
 8015142:	2300      	movs	r3, #0
 8015144:	e0aa      	b.n	801529c <mg_dns_parse+0x180>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8015146:	6a3b      	ldr	r3, [r7, #32]
 8015148:	889b      	ldrh	r3, [r3, #4]
 801514a:	4618      	mov	r0, r3
 801514c:	f00d fc9d 	bl	8022a8a <mg_ntohs>
 8015150:	4603      	mov	r3, r0
 8015152:	2b01      	cmp	r3, #1
 8015154:	d901      	bls.n	801515a <mg_dns_parse+0x3e>
 8015156:	2300      	movs	r3, #0
 8015158:	e0a0      	b.n	801529c <mg_dns_parse+0x180>
  num_answers = mg_ntohs(h->num_answers);
 801515a:	6a3b      	ldr	r3, [r7, #32]
 801515c:	88db      	ldrh	r3, [r3, #6]
 801515e:	4618      	mov	r0, r3
 8015160:	f00d fc93 	bl	8022a8a <mg_ntohs>
 8015164:	4603      	mov	r3, r0
 8015166:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8015168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801516a:	2b0a      	cmp	r3, #10
 801516c:	d910      	bls.n	8015190 <mg_dns_parse+0x74>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 801516e:	4b4d      	ldr	r3, [pc, #308]	@ (80152a4 <mg_dns_parse+0x188>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b02      	cmp	r3, #2
 8015174:	dd0a      	ble.n	801518c <mg_dns_parse+0x70>
 8015176:	4b4c      	ldr	r3, [pc, #304]	@ (80152a8 <mg_dns_parse+0x18c>)
 8015178:	f240 4293 	movw	r2, #1171	@ 0x493
 801517c:	494b      	ldr	r1, [pc, #300]	@ (80152ac <mg_dns_parse+0x190>)
 801517e:	2003      	movs	r0, #3
 8015180:	f005 ffdc 	bl	801b13c <mg_log_prefix>
 8015184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015186:	484a      	ldr	r0, [pc, #296]	@ (80152b0 <mg_dns_parse+0x194>)
 8015188:	f006 f828 	bl	801b1dc <mg_log>
    num_answers = 10;  // Sanity cap
 801518c:	230a      	movs	r3, #10
 801518e:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8015190:	6a3b      	ldr	r3, [r7, #32]
 8015192:	881b      	ldrh	r3, [r3, #0]
 8015194:	4618      	mov	r0, r3
 8015196:	f00d fc78 	bl	8022a8a <mg_ntohs>
 801519a:	4603      	mov	r3, r0
 801519c:	461a      	mov	r2, r3
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80151a2:	2300      	movs	r3, #0
 80151a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80151a6:	e015      	b.n	80151d4 <mg_dns_parse+0xb8>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 80151a8:	f107 0314 	add.w	r3, r7, #20
 80151ac:	9300      	str	r3, [sp, #0]
 80151ae:	2301      	movs	r3, #1
 80151b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151b2:	68b9      	ldr	r1, [r7, #8]
 80151b4:	68f8      	ldr	r0, [r7, #12]
 80151b6:	f7ff ff1e 	bl	8014ff6 <mg_dns_parse_rr>
 80151ba:	61f8      	str	r0, [r7, #28]
 80151bc:	69fb      	ldr	r3, [r7, #28]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d101      	bne.n	80151c6 <mg_dns_parse+0xaa>
 80151c2:	2300      	movs	r3, #0
 80151c4:	e06a      	b.n	801529c <mg_dns_parse+0x180>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 80151c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	4413      	add	r3, r2
 80151cc:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80151ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151d0:	3301      	adds	r3, #1
 80151d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80151d4:	6a3b      	ldr	r3, [r7, #32]
 80151d6:	889b      	ldrh	r3, [r3, #4]
 80151d8:	4618      	mov	r0, r3
 80151da:	f00d fc56 	bl	8022a8a <mg_ntohs>
 80151de:	4603      	mov	r3, r0
 80151e0:	461a      	mov	r2, r3
 80151e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e4:	4293      	cmp	r3, r2
 80151e6:	d3df      	bcc.n	80151a8 <mg_dns_parse+0x8c>
  }
  for (i = 0; i < num_answers; i++) {
 80151e8:	2300      	movs	r3, #0
 80151ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80151ec:	e051      	b.n	8015292 <mg_dns_parse+0x176>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80151ee:	f107 0314 	add.w	r3, r7, #20
 80151f2:	9300      	str	r3, [sp, #0]
 80151f4:	2300      	movs	r3, #0
 80151f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151f8:	68b9      	ldr	r1, [r7, #8]
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	f7ff fefb 	bl	8014ff6 <mg_dns_parse_rr>
 8015200:	61f8      	str	r0, [r7, #28]
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d101      	bne.n	801520c <mg_dns_parse+0xf0>
 8015208:	2300      	movs	r3, #0
 801520a:	e047      	b.n	801529c <mg_dns_parse+0x180>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	3318      	adds	r3, #24
 8015210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015214:	9200      	str	r2, [sp, #0]
 8015216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015218:	68b9      	ldr	r1, [r7, #8]
 801521a:	68f8      	ldr	r0, [r7, #12]
 801521c:	f7ff fed3 	bl	8014fc6 <mg_dns_parse_name>
    ofs += n;
 8015220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015222:	69fb      	ldr	r3, [r7, #28]
 8015224:	4413      	add	r3, r2
 8015226:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8015228:	8b7b      	ldrh	r3, [r7, #26]
 801522a:	2b04      	cmp	r3, #4
 801522c:	d114      	bne.n	8015258 <mg_dns_parse+0x13c>
 801522e:	8afb      	ldrh	r3, [r7, #22]
 8015230:	2b01      	cmp	r3, #1
 8015232:	d111      	bne.n	8015258 <mg_dns_parse+0x13c>
 8015234:	8b3b      	ldrh	r3, [r7, #24]
 8015236:	2b01      	cmp	r3, #1
 8015238:	d10e      	bne.n	8015258 <mg_dns_parse+0x13c>
      dm->addr.is_ip6 = false;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2200      	movs	r2, #0
 801523e:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	3304      	adds	r3, #4
 8015244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015246:	3a04      	subs	r2, #4
 8015248:	68f9      	ldr	r1, [r7, #12]
 801524a:	440a      	add	r2, r1
 801524c:	6812      	ldr	r2, [r2, #0]
 801524e:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2201      	movs	r2, #1
 8015254:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8015256:	e020      	b.n	801529a <mg_dns_parse+0x17e>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8015258:	8b7b      	ldrh	r3, [r7, #26]
 801525a:	2b10      	cmp	r3, #16
 801525c:	d116      	bne.n	801528c <mg_dns_parse+0x170>
 801525e:	8afb      	ldrh	r3, [r7, #22]
 8015260:	2b1c      	cmp	r3, #28
 8015262:	d113      	bne.n	801528c <mg_dns_parse+0x170>
 8015264:	8b3b      	ldrh	r3, [r7, #24]
 8015266:	2b01      	cmp	r3, #1
 8015268:	d110      	bne.n	801528c <mg_dns_parse+0x170>
      dm->addr.is_ip6 = true;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2201      	movs	r2, #1
 801526e:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	1d18      	adds	r0, r3, #4
 8015274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015276:	3b10      	subs	r3, #16
 8015278:	68fa      	ldr	r2, [r7, #12]
 801527a:	4413      	add	r3, r2
 801527c:	2210      	movs	r2, #16
 801527e:	4619      	mov	r1, r3
 8015280:	f011 ffa2 	bl	80271c8 <memcpy>
      dm->resolved = true;
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2201      	movs	r2, #1
 8015288:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 801528a:	e006      	b.n	801529a <mg_dns_parse+0x17e>
  for (i = 0; i < num_answers; i++) {
 801528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801528e:	3301      	adds	r3, #1
 8015290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015296:	429a      	cmp	r2, r3
 8015298:	d3a9      	bcc.n	80151ee <mg_dns_parse+0xd2>
    }
  }
  return true;
 801529a:	2301      	movs	r3, #1
}
 801529c:	4618      	mov	r0, r3
 801529e:	3730      	adds	r7, #48	@ 0x30
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}
 80152a4:	20000298 	.word	0x20000298
 80152a8:	08034498 	.word	0x08034498
 80152ac:	08031484 	.word	0x08031484
 80152b0:	080314b4 	.word	0x080314b4

080152b4 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 80152b4:	b5b0      	push	{r4, r5, r7, lr}
 80152b6:	b0d2      	sub	sp, #328	@ 0x148
 80152b8:	af02      	add	r7, sp, #8
 80152ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80152be:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152c2:	6018      	str	r0, [r3, #0]
 80152c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80152c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80152cc:	6019      	str	r1, [r3, #0]
 80152ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80152d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80152d6:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 80152d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80152dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	3330      	adds	r3, #48	@ 0x30
 80152e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 80152ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80152ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b02      	cmp	r3, #2
 80152f6:	d12d      	bne.n	8015354 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 80152f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80152fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015306:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 801530a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015314:	e019      	b.n	801534a <dns_cb+0x96>
      tmp = d->next;
 8015316:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8015320:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015324:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8015328:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 801532c:	4290      	cmp	r0, r2
 801532e:	eb71 0303 	sbcs.w	r3, r1, r3
 8015332:	d206      	bcs.n	8015342 <dns_cb+0x8e>
 8015334:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	4992      	ldr	r1, [pc, #584]	@ (8015584 <dns_cb+0x2d0>)
 801533c:	4618      	mov	r0, r3
 801533e:	f000 fb37 	bl	80159b0 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 8015342:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015346:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801534a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801534e:	2b00      	cmp	r3, #0
 8015350:	d1e1      	bne.n	8015316 <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 8015352:	e112      	b.n	801557a <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8015354:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015358:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	2b07      	cmp	r3, #7
 8015360:	f040 80e4 	bne.w	801552c <dns_cb+0x278>
    int resolved = 0;
 8015364:	2300      	movs	r3, #0
 8015366:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 801536a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801536e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015376:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801537a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015382:	f107 0210 	add.w	r2, r7, #16
 8015386:	4619      	mov	r1, r3
 8015388:	f7ff fec8 	bl	801511c <mg_dns_parse>
 801538c:	4603      	mov	r3, r0
 801538e:	f083 0301 	eor.w	r3, r3, #1
 8015392:	b2db      	uxtb	r3, r3
 8015394:	2b00      	cmp	r3, #0
 8015396:	d01e      	beq.n	80153d6 <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8015398:	4b7b      	ldr	r3, [pc, #492]	@ (8015588 <dns_cb+0x2d4>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	2b00      	cmp	r3, #0
 801539e:	dd09      	ble.n	80153b4 <dns_cb+0x100>
 80153a0:	4b7a      	ldr	r3, [pc, #488]	@ (801558c <dns_cb+0x2d8>)
 80153a2:	f240 42c1 	movw	r2, #1217	@ 0x4c1
 80153a6:	497a      	ldr	r1, [pc, #488]	@ (8015590 <dns_cb+0x2dc>)
 80153a8:	2001      	movs	r0, #1
 80153aa:	f005 fec7 	bl	801b13c <mg_log_prefix>
 80153ae:	4879      	ldr	r0, [pc, #484]	@ (8015594 <dns_cb+0x2e0>)
 80153b0:	f005 ff14 	bl	801b1dc <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 80153b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80153b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80153c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80153cc:	4619      	mov	r1, r3
 80153ce:	4610      	mov	r0, r2
 80153d0:	f005 ff3a 	bl	801b248 <mg_hexdump>
 80153d4:	e090      	b.n	80154f8 <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 80153d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80153e0:	e085      	b.n	80154ee <dns_cb+0x23a>
        tmp = d->next;
 80153e2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 80153ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80153f0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80153f4:	881a      	ldrh	r2, [r3, #0]
 80153f6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80153fa:	8a1b      	ldrh	r3, [r3, #16]
 80153fc:	429a      	cmp	r2, r3
 80153fe:	d171      	bne.n	80154e4 <dns_cb+0x230>
        if (d->c->is_resolving) {
 8015400:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015404:	685b      	ldr	r3, [r3, #4]
 8015406:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801540a:	f003 0308 	and.w	r3, r3, #8
 801540e:	b2db      	uxtb	r3, r3
 8015410:	2b00      	cmp	r3, #0
 8015412:	d04a      	beq.n	80154aa <dns_cb+0x1f6>
          if (dm.resolved) {
 8015414:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015418:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801541c:	789b      	ldrb	r3, [r3, #2]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d038      	beq.n	8015494 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 8015422:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801542a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801542e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015432:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8015434:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015438:	685a      	ldr	r2, [r3, #4]
 801543a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801543e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015442:	f102 041c 	add.w	r4, r2, #28
 8015446:	1d1d      	adds	r5, r3, #4
 8015448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801544a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801544c:	682b      	ldr	r3, [r5, #0]
 801544e:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8015450:	4b4d      	ldr	r3, [pc, #308]	@ (8015588 <dns_cb+0x2d4>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	2b02      	cmp	r3, #2
 8015456:	dd16      	ble.n	8015486 <dns_cb+0x1d2>
 8015458:	4b4c      	ldr	r3, [pc, #304]	@ (801558c <dns_cb+0x2d8>)
 801545a:	f240 42cd 	movw	r2, #1229	@ 0x4cd
 801545e:	494c      	ldr	r1, [pc, #304]	@ (8015590 <dns_cb+0x2dc>)
 8015460:	2003      	movs	r0, #3
 8015462:	f005 fe6b 	bl	801b13c <mg_log_prefix>
 8015466:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801546a:	685b      	ldr	r3, [r3, #4]
 801546c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801546e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	331c      	adds	r3, #28
 8015476:	f107 0210 	add.w	r2, r7, #16
 801547a:	3218      	adds	r2, #24
 801547c:	9300      	str	r3, [sp, #0]
 801547e:	4b46      	ldr	r3, [pc, #280]	@ (8015598 <dns_cb+0x2e4>)
 8015480:	4846      	ldr	r0, [pc, #280]	@ (801559c <dns_cb+0x2e8>)
 8015482:	f005 feab 	bl	801b1dc <mg_log>
            mg_connect_resolved(d->c);
 8015486:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	4618      	mov	r0, r3
 801548e:	f00b faad 	bl	80209ec <mg_connect_resolved>
 8015492:	e01d      	b.n	80154d0 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8015494:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015498:	6858      	ldr	r0, [r3, #4]
 801549a:	f107 0310 	add.w	r3, r7, #16
 801549e:	3318      	adds	r3, #24
 80154a0:	461a      	mov	r2, r3
 80154a2:	493f      	ldr	r1, [pc, #252]	@ (80155a0 <dns_cb+0x2ec>)
 80154a4:	f000 fa84 	bl	80159b0 <mg_error>
 80154a8:	e012      	b.n	80154d0 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 80154aa:	4b37      	ldr	r3, [pc, #220]	@ (8015588 <dns_cb+0x2d4>)
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	dd0e      	ble.n	80154d0 <dns_cb+0x21c>
 80154b2:	4b36      	ldr	r3, [pc, #216]	@ (801558c <dns_cb+0x2d8>)
 80154b4:	f240 42da 	movw	r2, #1242	@ 0x4da
 80154b8:	4935      	ldr	r1, [pc, #212]	@ (8015590 <dns_cb+0x2dc>)
 80154ba:	2001      	movs	r0, #1
 80154bc:	f005 fe3e 	bl	801b13c <mg_log_prefix>
 80154c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80154c4:	685b      	ldr	r3, [r3, #4]
 80154c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80154c8:	4619      	mov	r1, r3
 80154ca:	4836      	ldr	r0, [pc, #216]	@ (80155a4 <dns_cb+0x2f0>)
 80154cc:	f005 fe86 	bl	801b1dc <mg_log>
        mg_dns_free(head, d);
 80154d0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80154d4:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80154d8:	f7ff fc88 	bl	8014dec <mg_dns_free>
        resolved = 1;
 80154dc:	2301      	movs	r3, #1
 80154de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80154e2:	e000      	b.n	80154e6 <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 80154e4:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 80154e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80154ea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80154ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	f47f af75 	bne.w	80153e2 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 80154f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d10d      	bne.n	801551c <dns_cb+0x268>
 8015500:	4b21      	ldr	r3, [pc, #132]	@ (8015588 <dns_cb+0x2d4>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	dd09      	ble.n	801551c <dns_cb+0x268>
 8015508:	4b20      	ldr	r3, [pc, #128]	@ (801558c <dns_cb+0x2d8>)
 801550a:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 801550e:	4920      	ldr	r1, [pc, #128]	@ (8015590 <dns_cb+0x2dc>)
 8015510:	2001      	movs	r0, #1
 8015512:	f005 fe13 	bl	801b13c <mg_log_prefix>
 8015516:	4824      	ldr	r0, [pc, #144]	@ (80155a8 <dns_cb+0x2f4>)
 8015518:	f005 fe60 	bl	801b1dc <mg_log>
    c->recv.len = 0;
 801551c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015520:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	2200      	movs	r2, #0
 8015528:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801552a:	e026      	b.n	801557a <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 801552c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015530:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	2b09      	cmp	r3, #9
 8015538:	d11f      	bne.n	801557a <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 801553a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015544:	e015      	b.n	8015572 <dns_cb+0x2be>
      tmp = d->next;
 8015546:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 8015550:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	4915      	ldr	r1, [pc, #84]	@ (80155ac <dns_cb+0x2f8>)
 8015558:	4618      	mov	r0, r3
 801555a:	f000 fa29 	bl	80159b0 <mg_error>
      mg_dns_free(head, d);
 801555e:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8015562:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8015566:	f7ff fc41 	bl	8014dec <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 801556a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801556e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015572:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8015576:	2b00      	cmp	r3, #0
 8015578:	d1e5      	bne.n	8015546 <dns_cb+0x292>
}
 801557a:	bf00      	nop
 801557c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8015580:	46bd      	mov	sp, r7
 8015582:	bdb0      	pop	{r4, r5, r7, pc}
 8015584:	080314e0 	.word	0x080314e0
 8015588:	20000298 	.word	0x20000298
 801558c:	080344a8 	.word	0x080344a8
 8015590:	08031484 	.word	0x08031484
 8015594:	080314ec 	.word	0x080314ec
 8015598:	0802135b 	.word	0x0802135b
 801559c:	08031508 	.word	0x08031508
 80155a0:	08031518 	.word	0x08031518
 80155a4:	08031530 	.word	0x08031530
 80155a8:	08031548 	.word	0x08031548
 80155ac:	08031558 	.word	0x08031558

080155b0 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 80155b0:	b590      	push	{r4, r7, lr}
 80155b2:	b0cb      	sub	sp, #300	@ 0x12c
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80155ba:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80155be:	6020      	str	r0, [r4, #0]
 80155c0:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80155c4:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80155c8:	6001      	str	r1, [r0, #0]
 80155ca:	4619      	mov	r1, r3
 80155cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80155d0:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80155d4:	801a      	strh	r2, [r3, #0]
 80155d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80155da:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 80155de:	460a      	mov	r2, r1
 80155e0:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 80155e2:	f107 0314 	add.w	r3, r7, #20
 80155e6:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80155ea:	2100      	movs	r1, #0
 80155ec:	4618      	mov	r0, r3
 80155ee:	f010 fbaf 	bl	8025d50 <memset>
  pkt.header.txnid = mg_htons(txnid);
 80155f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80155f6:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 80155fa:	881b      	ldrh	r3, [r3, #0]
 80155fc:	4618      	mov	r0, r3
 80155fe:	f00d fa44 	bl	8022a8a <mg_ntohs>
 8015602:	4603      	mov	r3, r0
 8015604:	461a      	mov	r2, r3
 8015606:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801560a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801560e:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8015610:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8015614:	f00d fa39 	bl	8022a8a <mg_ntohs>
 8015618:	4603      	mov	r3, r0
 801561a:	461a      	mov	r2, r3
 801561c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015620:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015624:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8015626:	2001      	movs	r0, #1
 8015628:	f00d fa2f 	bl	8022a8a <mg_ntohs>
 801562c:	4603      	mov	r3, r0
 801562e:	461a      	mov	r2, r3
 8015630:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015634:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8015638:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 801563a:	2300      	movs	r3, #0
 801563c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8015640:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015644:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8015648:	e054      	b.n	80156f4 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 801564a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801564e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	681a      	ldr	r2, [r3, #0]
 8015656:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801565a:	4413      	add	r3, r2
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015660:	d009      	beq.n	8015676 <mg_dns_send+0xc6>
 8015662:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015666:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8015672:	429a      	cmp	r2, r3
 8015674:	d32f      	bcc.n	80156d6 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8015676:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801567a:	b2da      	uxtb	r2, r3
 801567c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015680:	b2db      	uxtb	r3, r3
 8015682:	1ad3      	subs	r3, r2, r3
 8015684:	b2d9      	uxtb	r1, r3
 8015686:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801568a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 801568e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015692:	4413      	add	r3, r2
 8015694:	330c      	adds	r3, #12
 8015696:	460a      	mov	r2, r1
 8015698:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 801569a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801569e:	3301      	adds	r3, #1
 80156a0:	f107 0214 	add.w	r2, r7, #20
 80156a4:	3308      	adds	r3, #8
 80156a6:	4413      	add	r3, r2
 80156a8:	1d18      	adds	r0, r3, #4
 80156aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80156ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	681a      	ldr	r2, [r3, #0]
 80156b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80156ba:	18d1      	adds	r1, r2, r3
 80156bc:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80156c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80156c4:	1ad3      	subs	r3, r2, r3
 80156c6:	461a      	mov	r2, r3
 80156c8:	f011 fd7e 	bl	80271c8 <memcpy>
      n = i + 1;
 80156cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80156d0:	3301      	adds	r3, #1
 80156d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 80156d6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80156da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d209      	bcs.n	80156fe <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 80156ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80156ee:	3301      	adds	r3, #1
 80156f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80156f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80156f8:	2bfa      	cmp	r3, #250	@ 0xfa
 80156fa:	d9a6      	bls.n	801564a <mg_dns_send+0x9a>
 80156fc:	e000      	b.n	8015700 <mg_dns_send+0x150>
    if (i >= name->len) break;
 80156fe:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8015700:	f107 0214 	add.w	r2, r7, #20
 8015704:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015708:	3308      	adds	r3, #8
 801570a:	4413      	add	r3, r2
 801570c:	3304      	adds	r3, #4
 801570e:	2205      	movs	r2, #5
 8015710:	4916      	ldr	r1, [pc, #88]	@ (801576c <mg_dns_send+0x1bc>)
 8015712:	4618      	mov	r0, r3
 8015714:	f011 fd58 	bl	80271c8 <memcpy>
  n += 5;
 8015718:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801571c:	3305      	adds	r3, #5
 801571e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8015722:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015726:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d009      	beq.n	8015744 <mg_dns_send+0x194>
 8015730:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015734:	3b03      	subs	r3, #3
 8015736:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801573a:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801573e:	4413      	add	r3, r2
 8015740:	221c      	movs	r2, #28
 8015742:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8015744:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015748:	f103 020c 	add.w	r2, r3, #12
 801574c:	f107 0114 	add.w	r1, r7, #20
 8015750:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8015754:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015758:	6818      	ldr	r0, [r3, #0]
 801575a:	f00b fc1d 	bl	8020f98 <mg_send>
 801575e:	4603      	mov	r3, r0
}
 8015760:	4618      	mov	r0, r3
 8015762:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8015766:	46bd      	mov	sp, r7
 8015768:	bd90      	pop	{r4, r7, pc}
 801576a:	bf00      	nop
 801576c:	08031564 	.word	0x08031564

08015770 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8015770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015774:	b088      	sub	sp, #32
 8015776:	af02      	add	r7, sp, #8
 8015778:	60f8      	str	r0, [r7, #12]
 801577a:	60b9      	str	r1, [r7, #8]
 801577c:	607a      	str	r2, [r7, #4]
 801577e:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8015780:	2300      	movs	r3, #0
 8015782:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d104      	bne.n	8015796 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 801578c:	494d      	ldr	r1, [pc, #308]	@ (80158c4 <mg_sendnsreq+0x154>)
 801578e:	68f8      	ldr	r0, [r7, #12]
 8015790:	f000 f90e 	bl	80159b0 <mg_error>
 8015794:	e017      	b.n	80157c6 <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	685b      	ldr	r3, [r3, #4]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d113      	bne.n	80157c6 <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	6858      	ldr	r0, [r3, #4]
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	6819      	ldr	r1, [r3, #0]
 80157a6:	2300      	movs	r3, #0
 80157a8:	2200      	movs	r2, #0
 80157aa:	f008 f931 	bl	801da10 <mg_connect>
 80157ae:	4602      	mov	r2, r0
 80157b0:	683b      	ldr	r3, [r7, #0]
 80157b2:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	685b      	ldr	r3, [r3, #4]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d004      	beq.n	80157c6 <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	4a41      	ldr	r2, [pc, #260]	@ (80158c8 <mg_sendnsreq+0x158>)
 80157c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d104      	bne.n	80157d8 <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 80157ce:	493f      	ldr	r1, [pc, #252]	@ (80158cc <mg_sendnsreq+0x15c>)
 80157d0:	68f8      	ldr	r0, [r7, #12]
 80157d2:	f000 f8ed 	bl	80159b0 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 80157d6:	e06f      	b.n	80158b8 <mg_sendnsreq+0x148>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 80157d8:	2118      	movs	r1, #24
 80157da:	2001      	movs	r0, #1
 80157dc:	f7ff fae8 	bl	8014db0 <mg_calloc>
 80157e0:	6178      	str	r0, [r7, #20]
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d104      	bne.n	80157f2 <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 80157e8:	4939      	ldr	r1, [pc, #228]	@ (80158d0 <mg_sendnsreq+0x160>)
 80157ea:	68f8      	ldr	r0, [r7, #12]
 80157ec:	f000 f8e0 	bl	80159b0 <mg_error>
}
 80157f0:	e062      	b.n	80158b8 <mg_sendnsreq+0x148>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157f8:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d004      	beq.n	801580a <mg_sendnsreq+0x9a>
 8015800:	693b      	ldr	r3, [r7, #16]
 8015802:	8a1b      	ldrh	r3, [r3, #16]
 8015804:	3301      	adds	r3, #1
 8015806:	b29a      	uxth	r2, r3
 8015808:	e000      	b.n	801580c <mg_sendnsreq+0x9c>
 801580a:	2201      	movs	r2, #1
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015816:	697b      	ldr	r3, [r7, #20]
 8015818:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	697a      	ldr	r2, [r7, #20]
 8015820:	631a      	str	r2, [r3, #48]	@ 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8015822:	f00d f9c3 	bl	8022bac <mg_millis>
 8015826:	4602      	mov	r2, r0
 8015828:	460b      	mov	r3, r1
 801582a:	6879      	ldr	r1, [r7, #4]
 801582c:	17c8      	asrs	r0, r1, #31
 801582e:	460c      	mov	r4, r1
 8015830:	4605      	mov	r5, r0
 8015832:	eb12 0804 	adds.w	r8, r2, r4
 8015836:	eb43 0905 	adc.w	r9, r3, r5
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	68fa      	ldr	r2, [r7, #12]
 8015844:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8015846:	68fa      	ldr	r2, [r7, #12]
 8015848:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801584c:	f043 0308 	orr.w	r3, r3, #8
 8015850:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8015854:	4b1f      	ldr	r3, [pc, #124]	@ (80158d4 <mg_sendnsreq+0x164>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b03      	cmp	r3, #3
 801585a:	dd18      	ble.n	801588e <mg_sendnsreq+0x11e>
 801585c:	4b1e      	ldr	r3, [pc, #120]	@ (80158d8 <mg_sendnsreq+0x168>)
 801585e:	f240 521e 	movw	r2, #1310	@ 0x51e
 8015862:	491e      	ldr	r1, [pc, #120]	@ (80158dc <mg_sendnsreq+0x16c>)
 8015864:	2004      	movs	r0, #4
 8015866:	f005 fc69 	bl	801b13c <mg_log_prefix>
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	685b      	ldr	r3, [r3, #4]
 8015872:	461c      	mov	r4, r3
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	6818      	ldr	r0, [r3, #0]
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	697a      	ldr	r2, [r7, #20]
 801587e:	8a12      	ldrh	r2, [r2, #16]
 8015880:	9201      	str	r2, [sp, #4]
 8015882:	9300      	str	r3, [sp, #0]
 8015884:	4603      	mov	r3, r0
 8015886:	4622      	mov	r2, r4
 8015888:	4815      	ldr	r0, [pc, #84]	@ (80158e0 <mg_sendnsreq+0x170>)
 801588a:	f005 fca7 	bl	801b1dc <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 801588e:	683b      	ldr	r3, [r7, #0]
 8015890:	6858      	ldr	r0, [r3, #4]
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	8a1a      	ldrh	r2, [r3, #16]
 8015896:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801589a:	68b9      	ldr	r1, [r7, #8]
 801589c:	f7ff fe88 	bl	80155b0 <mg_dns_send>
 80158a0:	4603      	mov	r3, r0
 80158a2:	f083 0301 	eor.w	r3, r3, #1
 80158a6:	b2db      	uxtb	r3, r3
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d005      	beq.n	80158b8 <mg_sendnsreq+0x148>
      mg_error(dnsc->c, "DNS send");
 80158ac:	683b      	ldr	r3, [r7, #0]
 80158ae:	685b      	ldr	r3, [r3, #4]
 80158b0:	490c      	ldr	r1, [pc, #48]	@ (80158e4 <mg_sendnsreq+0x174>)
 80158b2:	4618      	mov	r0, r3
 80158b4:	f000 f87c 	bl	80159b0 <mg_error>
}
 80158b8:	bf00      	nop
 80158ba:	3718      	adds	r7, #24
 80158bc:	46bd      	mov	sp, r7
 80158be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80158c2:	bf00      	nop
 80158c4:	0803156c 	.word	0x0803156c
 80158c8:	080152b5 	.word	0x080152b5
 80158cc:	08031598 	.word	0x08031598
 80158d0:	080315a4 	.word	0x080315a4
 80158d4:	20000298 	.word	0x20000298
 80158d8:	080344b0 	.word	0x080344b0
 80158dc:	08031484 	.word	0x08031484
 80158e0:	080315b0 	.word	0x080315b0
 80158e4:	080315d4 	.word	0x080315d4

080158e8 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b088      	sub	sp, #32
 80158ec:	af02      	add	r7, sp, #8
 80158ee:	6078      	str	r0, [r7, #4]
 80158f0:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 80158f2:	f107 030c 	add.w	r3, r7, #12
 80158f6:	6839      	ldr	r1, [r7, #0]
 80158f8:	4618      	mov	r0, r3
 80158fa:	f00c ff96 	bl	802282a <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80158fe:	6838      	ldr	r0, [r7, #0]
 8015900:	f00c ffc6 	bl	8022890 <mg_url_port>
 8015904:	4603      	mov	r3, r0
 8015906:	4618      	mov	r0, r3
 8015908:	f00d f8bf 	bl	8022a8a <mg_ntohs>
 801590c:	4603      	mov	r3, r0
 801590e:	461a      	mov	r2, r3
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	331c      	adds	r3, #28
 8015918:	461a      	mov	r2, r3
 801591a:	f107 030c 	add.w	r3, r7, #12
 801591e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015922:	f007 ffa6 	bl	801d872 <mg_aton>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d003      	beq.n	8015934 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f00b f85d 	bl	80209ec <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8015932:	e019      	b.n	8015968 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	685b      	ldr	r3, [r3, #4]
 8015938:	7e1b      	ldrb	r3, [r3, #24]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d003      	beq.n	8015946 <mg_resolve+0x5e>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	685b      	ldr	r3, [r3, #4]
 8015942:	330c      	adds	r3, #12
 8015944:	e002      	b.n	801594c <mg_resolve+0x64>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	3304      	adds	r3, #4
 801594c:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	695a      	ldr	r2, [r3, #20]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	685b      	ldr	r3, [r3, #4]
 8015958:	7e1b      	ldrb	r3, [r3, #24]
 801595a:	f107 010c 	add.w	r1, r7, #12
 801595e:	9300      	str	r3, [sp, #0]
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f7ff ff04 	bl	8015770 <mg_sendnsreq>
}
 8015968:	bf00      	nop
 801596a:	3718      	adds	r7, #24
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}

08015970 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8015970:	b580      	push	{r7, lr}
 8015972:	b084      	sub	sp, #16
 8015974:	af00      	add	r7, sp, #0
 8015976:	60f8      	str	r0, [r7, #12]
 8015978:	60b9      	str	r1, [r7, #8]
 801597a:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015982:	2b00      	cmp	r3, #0
 8015984:	d006      	beq.n	8015994 <mg_call+0x24>
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801598c:	687a      	ldr	r2, [r7, #4]
 801598e:	68b9      	ldr	r1, [r7, #8]
 8015990:	68f8      	ldr	r0, [r7, #12]
 8015992:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015998:	2b00      	cmp	r3, #0
 801599a:	d005      	beq.n	80159a8 <mg_call+0x38>
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	68b9      	ldr	r1, [r7, #8]
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	4798      	blx	r3
}
 80159a8:	bf00      	nop
 80159aa:	3710      	adds	r7, #16
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}

080159b0 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80159b0:	b40e      	push	{r1, r2, r3}
 80159b2:	b580      	push	{r7, lr}
 80159b4:	b095      	sub	sp, #84	@ 0x54
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80159ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80159be:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80159c0:	f107 030c 	add.w	r3, r7, #12
 80159c4:	f107 0010 	add.w	r0, r7, #16
 80159c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80159ca:	2140      	movs	r1, #64	@ 0x40
 80159cc:	f00b fbaa 	bl	8021124 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 80159d0:	4b14      	ldr	r3, [pc, #80]	@ (8015a24 <mg_error+0x74>)
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	dd0f      	ble.n	80159f8 <mg_error+0x48>
 80159d8:	4b13      	ldr	r3, [pc, #76]	@ (8015a28 <mg_error+0x78>)
 80159da:	f240 5253 	movw	r2, #1363	@ 0x553
 80159de:	4913      	ldr	r1, [pc, #76]	@ (8015a2c <mg_error+0x7c>)
 80159e0:	2001      	movs	r0, #1
 80159e2:	f005 fbab 	bl	801b13c <mg_log_prefix>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80159ee:	f107 0310 	add.w	r3, r7, #16
 80159f2:	480f      	ldr	r0, [pc, #60]	@ (8015a30 <mg_error+0x80>)
 80159f4:	f005 fbf2 	bl	801b1dc <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80159f8:	687a      	ldr	r2, [r7, #4]
 80159fa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80159fe:	f043 0320 	orr.w	r3, r3, #32
 8015a02:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8015a06:	f107 0310 	add.w	r3, r7, #16
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	2100      	movs	r1, #0
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f7ff ffae 	bl	8015970 <mg_call>
}
 8015a14:	bf00      	nop
 8015a16:	3754      	adds	r7, #84	@ 0x54
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015a1e:	b003      	add	sp, #12
 8015a20:	4770      	bx	lr
 8015a22:	bf00      	nop
 8015a24:	20000298 	.word	0x20000298
 8015a28:	080344c0 	.word	0x080344c0
 8015a2c:	08031484 	.word	0x08031484
 8015a30:	080315e0 	.word	0x080315e0

08015a34 <is_digit>:
#endif




static bool is_digit(int c) {
 8015a34:	b480      	push	{r7}
 8015a36:	b083      	sub	sp, #12
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2b2f      	cmp	r3, #47	@ 0x2f
 8015a40:	dd04      	ble.n	8015a4c <is_digit+0x18>
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2b39      	cmp	r3, #57	@ 0x39
 8015a46:	dc01      	bgt.n	8015a4c <is_digit+0x18>
 8015a48:	2301      	movs	r3, #1
 8015a4a:	e000      	b.n	8015a4e <is_digit+0x1a>
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	f003 0301 	and.w	r3, r3, #1
 8015a52:	b2db      	uxtb	r3, r3
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	370c      	adds	r7, #12
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5e:	4770      	bx	lr

08015a60 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8015a60:	b480      	push	{r7}
 8015a62:	b087      	sub	sp, #28
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	607a      	str	r2, [r7, #4]
  int n = 0;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	1c5a      	adds	r2, r3, #1
 8015a74:	617a      	str	r2, [r7, #20]
 8015a76:	461a      	mov	r2, r3
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	4413      	add	r3, r2
 8015a7c:	2265      	movs	r2, #101	@ 0x65
 8015a7e:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8015a80:	697b      	ldr	r3, [r7, #20]
 8015a82:	1c5a      	adds	r2, r3, #1
 8015a84:	617a      	str	r2, [r7, #20]
 8015a86:	461a      	mov	r2, r3
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	4413      	add	r3, r2
 8015a8c:	687a      	ldr	r2, [r7, #4]
 8015a8e:	b2d2      	uxtb	r2, r2
 8015a90:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8015a98:	dd01      	ble.n	8015a9e <addexp+0x3e>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	e057      	b.n	8015b4e <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	2b09      	cmp	r3, #9
 8015aa2:	dc07      	bgt.n	8015ab4 <addexp+0x54>
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	1c5a      	adds	r2, r3, #1
 8015aa8:	617a      	str	r2, [r7, #20]
 8015aaa:	461a      	mov	r2, r3
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	4413      	add	r3, r2
 8015ab0:	2230      	movs	r2, #48	@ 0x30
 8015ab2:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	2b63      	cmp	r3, #99	@ 0x63
 8015ab8:	dd1c      	ble.n	8015af4 <addexp+0x94>
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	4a27      	ldr	r2, [pc, #156]	@ (8015b5c <addexp+0xfc>)
 8015abe:	fb82 1203 	smull	r1, r2, r2, r3
 8015ac2:	1152      	asrs	r2, r2, #5
 8015ac4:	17db      	asrs	r3, r3, #31
 8015ac6:	1ad3      	subs	r3, r2, r3
 8015ac8:	b2da      	uxtb	r2, r3
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	1c59      	adds	r1, r3, #1
 8015ace:	6179      	str	r1, [r7, #20]
 8015ad0:	4619      	mov	r1, r3
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	440b      	add	r3, r1
 8015ad6:	3230      	adds	r2, #48	@ 0x30
 8015ad8:	b2d2      	uxtb	r2, r2
 8015ada:	701a      	strb	r2, [r3, #0]
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	4a1f      	ldr	r2, [pc, #124]	@ (8015b5c <addexp+0xfc>)
 8015ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8015ae4:	1151      	asrs	r1, r2, #5
 8015ae6:	17da      	asrs	r2, r3, #31
 8015ae8:	1a8a      	subs	r2, r1, r2
 8015aea:	2164      	movs	r1, #100	@ 0x64
 8015aec:	fb01 f202 	mul.w	r2, r1, r2
 8015af0:	1a9b      	subs	r3, r3, r2
 8015af2:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8015af4:	68bb      	ldr	r3, [r7, #8]
 8015af6:	2b09      	cmp	r3, #9
 8015af8:	dd1d      	ble.n	8015b36 <addexp+0xd6>
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	4a18      	ldr	r2, [pc, #96]	@ (8015b60 <addexp+0x100>)
 8015afe:	fb82 1203 	smull	r1, r2, r2, r3
 8015b02:	1092      	asrs	r2, r2, #2
 8015b04:	17db      	asrs	r3, r3, #31
 8015b06:	1ad3      	subs	r3, r2, r3
 8015b08:	b2da      	uxtb	r2, r3
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	1c59      	adds	r1, r3, #1
 8015b0e:	6179      	str	r1, [r7, #20]
 8015b10:	4619      	mov	r1, r3
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	440b      	add	r3, r1
 8015b16:	3230      	adds	r2, #48	@ 0x30
 8015b18:	b2d2      	uxtb	r2, r2
 8015b1a:	701a      	strb	r2, [r3, #0]
 8015b1c:	68ba      	ldr	r2, [r7, #8]
 8015b1e:	4b10      	ldr	r3, [pc, #64]	@ (8015b60 <addexp+0x100>)
 8015b20:	fb83 1302 	smull	r1, r3, r3, r2
 8015b24:	1099      	asrs	r1, r3, #2
 8015b26:	17d3      	asrs	r3, r2, #31
 8015b28:	1ac9      	subs	r1, r1, r3
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	440b      	add	r3, r1
 8015b30:	005b      	lsls	r3, r3, #1
 8015b32:	1ad3      	subs	r3, r2, r3
 8015b34:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8015b36:	68bb      	ldr	r3, [r7, #8]
 8015b38:	b2da      	uxtb	r2, r3
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	1c59      	adds	r1, r3, #1
 8015b3e:	6179      	str	r1, [r7, #20]
 8015b40:	4619      	mov	r1, r3
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	440b      	add	r3, r1
 8015b46:	3230      	adds	r2, #48	@ 0x30
 8015b48:	b2d2      	uxtb	r2, r2
 8015b4a:	701a      	strb	r2, [r3, #0]
  return n;
 8015b4c:	697b      	ldr	r3, [r7, #20]
}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	371c      	adds	r7, #28
 8015b52:	46bd      	mov	sp, r7
 8015b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b58:	4770      	bx	lr
 8015b5a:	bf00      	nop
 8015b5c:	51eb851f 	.word	0x51eb851f
 8015b60:	66666667 	.word	0x66666667

08015b64 <xisinf>:

static int xisinf(double x) {
 8015b64:	b480      	push	{r7}
 8015b66:	b085      	sub	sp, #20
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8015b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b72:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8015b76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015b7a:	f04f 0200 	mov.w	r2, #0
 8015b7e:	f04f 0300 	mov.w	r3, #0
 8015b82:	000a      	movs	r2, r1
 8015b84:	2300      	movs	r3, #0
 8015b86:	4613      	mov	r3, r2
 8015b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015b8c:	4a08      	ldr	r2, [pc, #32]	@ (8015bb0 <xisinf+0x4c>)
 8015b8e:	4293      	cmp	r3, r2
 8015b90:	d106      	bne.n	8015ba0 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8015b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015b96:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d101      	bne.n	8015ba0 <xisinf+0x3c>
 8015b9c:	2301      	movs	r3, #1
 8015b9e:	e000      	b.n	8015ba2 <xisinf+0x3e>
 8015ba0:	2300      	movs	r3, #0
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3714      	adds	r7, #20
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bac:	4770      	bx	lr
 8015bae:	bf00      	nop
 8015bb0:	7ff00000 	.word	0x7ff00000

08015bb4 <xisnan>:

static int xisnan(double x) {
 8015bb4:	b480      	push	{r7}
 8015bb6:	b085      	sub	sp, #20
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8015bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015bc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8015bc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015bca:	f04f 0200 	mov.w	r2, #0
 8015bce:	f04f 0300 	mov.w	r3, #0
 8015bd2:	000a      	movs	r2, r1
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	4613      	mov	r3, r2
 8015bd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8015bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015be0:	4613      	mov	r3, r2
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	bf14      	ite	ne
 8015be6:	2301      	movne	r3, #1
 8015be8:	2300      	moveq	r3, #0
 8015bea:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8015bec:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8015bee:	4a06      	ldr	r2, [pc, #24]	@ (8015c08 <xisnan+0x54>)
 8015bf0:	4293      	cmp	r3, r2
 8015bf2:	bf8c      	ite	hi
 8015bf4:	2301      	movhi	r3, #1
 8015bf6:	2300      	movls	r3, #0
 8015bf8:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3714      	adds	r7, #20
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c04:	4770      	bx	lr
 8015c06:	bf00      	nop
 8015c08:	7ff00000 	.word	0x7ff00000
 8015c0c:	00000000 	.word	0x00000000

08015c10 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8015c10:	b5b0      	push	{r4, r5, r7, lr}
 8015c12:	b09e      	sub	sp, #120	@ 0x78
 8015c14:	af02      	add	r7, sp, #8
 8015c16:	6178      	str	r0, [r7, #20]
 8015c18:	6139      	str	r1, [r7, #16]
 8015c1a:	ed87 0b02 	vstr	d0, [r7, #8]
 8015c1e:	607a      	str	r2, [r7, #4]
 8015c20:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8015c22:	2300      	movs	r3, #0
 8015c24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015c26:	2300      	movs	r3, #0
 8015c28:	667b      	str	r3, [r7, #100]	@ 0x64
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	663b      	str	r3, [r7, #96]	@ 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8015c2e:	f04f 0200 	mov.w	r2, #0
 8015c32:	f04f 0300 	mov.w	r3, #0
 8015c36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015c3a:	f7ea ff5d 	bl	8000af8 <__aeabi_dcmpeq>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d007      	beq.n	8015c54 <mg_dtoa+0x44>
 8015c44:	4b7f      	ldr	r3, [pc, #508]	@ (8015e44 <mg_dtoa+0x234>)
 8015c46:	4a80      	ldr	r2, [pc, #512]	@ (8015e48 <mg_dtoa+0x238>)
 8015c48:	6939      	ldr	r1, [r7, #16]
 8015c4a:	6978      	ldr	r0, [r7, #20]
 8015c4c:	f00b fa92 	bl	8021174 <mg_snprintf>
 8015c50:	4603      	mov	r3, r0
 8015c52:	e2c9      	b.n	80161e8 <mg_dtoa+0x5d8>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8015c54:	ed97 0b02 	vldr	d0, [r7, #8]
 8015c58:	f7ff ff84 	bl	8015b64 <xisinf>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d014      	beq.n	8015c8c <mg_dtoa+0x7c>
 8015c62:	f04f 0200 	mov.w	r2, #0
 8015c66:	f04f 0300 	mov.w	r3, #0
 8015c6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015c6e:	f7ea ff6b 	bl	8000b48 <__aeabi_dcmpgt>
 8015c72:	4603      	mov	r3, r0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d001      	beq.n	8015c7c <mg_dtoa+0x6c>
 8015c78:	4b74      	ldr	r3, [pc, #464]	@ (8015e4c <mg_dtoa+0x23c>)
 8015c7a:	e000      	b.n	8015c7e <mg_dtoa+0x6e>
 8015c7c:	4b74      	ldr	r3, [pc, #464]	@ (8015e50 <mg_dtoa+0x240>)
 8015c7e:	4a72      	ldr	r2, [pc, #456]	@ (8015e48 <mg_dtoa+0x238>)
 8015c80:	6939      	ldr	r1, [r7, #16]
 8015c82:	6978      	ldr	r0, [r7, #20]
 8015c84:	f00b fa76 	bl	8021174 <mg_snprintf>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	e2ad      	b.n	80161e8 <mg_dtoa+0x5d8>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8015c8c:	ed97 0b02 	vldr	d0, [r7, #8]
 8015c90:	f7ff ff90 	bl	8015bb4 <xisnan>
 8015c94:	4603      	mov	r3, r0
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d007      	beq.n	8015caa <mg_dtoa+0x9a>
 8015c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8015e54 <mg_dtoa+0x244>)
 8015c9c:	4a6a      	ldr	r2, [pc, #424]	@ (8015e48 <mg_dtoa+0x238>)
 8015c9e:	6939      	ldr	r1, [r7, #16]
 8015ca0:	6978      	ldr	r0, [r7, #20]
 8015ca2:	f00b fa67 	bl	8021174 <mg_snprintf>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	e29e      	b.n	80161e8 <mg_dtoa+0x5d8>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8015caa:	f04f 0200 	mov.w	r2, #0
 8015cae:	f04f 0300 	mov.w	r3, #0
 8015cb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015cb6:	f7ea ff29 	bl	8000b0c <__aeabi_dcmplt>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d00d      	beq.n	8015cdc <mg_dtoa+0xcc>
 8015cc0:	68bc      	ldr	r4, [r7, #8]
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8015cc8:	e9c7 4502 	strd	r4, r5, [r7, #8]
 8015ccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015cce:	1c5a      	adds	r2, r3, #1
 8015cd0:	66ba      	str	r2, [r7, #104]	@ 0x68
 8015cd2:	3370      	adds	r3, #112	@ 0x70
 8015cd4:	443b      	add	r3, r7
 8015cd6:	222d      	movs	r2, #45	@ 0x2d
 8015cd8:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 8015cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015ce0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  mul = 1.0;
 8015ce4:	f04f 0200 	mov.w	r2, #0
 8015ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8015e58 <mg_dtoa+0x248>)
 8015cea:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8015cee:	e00a      	b.n	8015d06 <mg_dtoa+0xf6>
 8015cf0:	f04f 0200 	mov.w	r2, #0
 8015cf4:	4b59      	ldr	r3, [pc, #356]	@ (8015e5c <mg_dtoa+0x24c>)
 8015cf6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015cfa:	f7ea fc95 	bl	8000628 <__aeabi_dmul>
 8015cfe:	4602      	mov	r2, r0
 8015d00:	460b      	mov	r3, r1
 8015d02:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015d06:	f04f 0200 	mov.w	r2, #0
 8015d0a:	4b54      	ldr	r3, [pc, #336]	@ (8015e5c <mg_dtoa+0x24c>)
 8015d0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015d10:	f7ea ff10 	bl	8000b34 <__aeabi_dcmpge>
 8015d14:	4603      	mov	r3, r0
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d011      	beq.n	8015d3e <mg_dtoa+0x12e>
 8015d1a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015d1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015d22:	f7ea fdab 	bl	800087c <__aeabi_ddiv>
 8015d26:	4602      	mov	r2, r0
 8015d28:	460b      	mov	r3, r1
 8015d2a:	4610      	mov	r0, r2
 8015d2c:	4619      	mov	r1, r3
 8015d2e:	f04f 0200 	mov.w	r2, #0
 8015d32:	4b4a      	ldr	r3, [pc, #296]	@ (8015e5c <mg_dtoa+0x24c>)
 8015d34:	f7ea fefe 	bl	8000b34 <__aeabi_dcmpge>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d1d8      	bne.n	8015cf0 <mg_dtoa+0xe0>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8015d3e:	e00a      	b.n	8015d56 <mg_dtoa+0x146>
 8015d40:	f04f 0200 	mov.w	r2, #0
 8015d44:	4b45      	ldr	r3, [pc, #276]	@ (8015e5c <mg_dtoa+0x24c>)
 8015d46:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015d4a:	f7ea fd97 	bl	800087c <__aeabi_ddiv>
 8015d4e:	4602      	mov	r2, r0
 8015d50:	460b      	mov	r3, r1
 8015d52:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015d56:	f04f 0200 	mov.w	r2, #0
 8015d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8015e58 <mg_dtoa+0x248>)
 8015d5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015d60:	f7ea fede 	bl	8000b20 <__aeabi_dcmple>
 8015d64:	4603      	mov	r3, r0
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d011      	beq.n	8015d8e <mg_dtoa+0x17e>
 8015d6a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015d72:	f7ea fd83 	bl	800087c <__aeabi_ddiv>
 8015d76:	4602      	mov	r2, r0
 8015d78:	460b      	mov	r3, r1
 8015d7a:	4610      	mov	r0, r2
 8015d7c:	4619      	mov	r1, r3
 8015d7e:	f04f 0200 	mov.w	r2, #0
 8015d82:	4b35      	ldr	r3, [pc, #212]	@ (8015e58 <mg_dtoa+0x248>)
 8015d84:	f7ea fecc 	bl	8000b20 <__aeabi_dcmple>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d1d8      	bne.n	8015d40 <mg_dtoa+0x130>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015d92:	f04f 0200 	mov.w	r2, #0
 8015d96:	4b32      	ldr	r3, [pc, #200]	@ (8015e60 <mg_dtoa+0x250>)
 8015d98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015d9c:	f7ea fc44 	bl	8000628 <__aeabi_dmul>
 8015da0:	4602      	mov	r2, r0
 8015da2:	460b      	mov	r3, r1
 8015da4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015da8:	e00d      	b.n	8015dc6 <mg_dtoa+0x1b6>
 8015daa:	f04f 0200 	mov.w	r2, #0
 8015dae:	4b2b      	ldr	r3, [pc, #172]	@ (8015e5c <mg_dtoa+0x24c>)
 8015db0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8015db4:	f7ea fd62 	bl	800087c <__aeabi_ddiv>
 8015db8:	4602      	mov	r2, r0
 8015dba:	460b      	mov	r3, r1
 8015dbc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015dc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	dbed      	blt.n	8015daa <mg_dtoa+0x19a>
  d += t;
 8015dce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015dd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015dd6:	f7ea fa71 	bl	80002bc <__adddf3>
 8015dda:	4602      	mov	r2, r0
 8015ddc:	460b      	mov	r3, r1
 8015dde:	e9c7 2302 	strd	r2, r3, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8015de2:	f04f 0200 	mov.w	r2, #0
 8015de6:	4b1c      	ldr	r3, [pc, #112]	@ (8015e58 <mg_dtoa+0x248>)
 8015de8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8015dec:	e00d      	b.n	8015e0a <mg_dtoa+0x1fa>
 8015dee:	f04f 0200 	mov.w	r2, #0
 8015df2:	4b1a      	ldr	r3, [pc, #104]	@ (8015e5c <mg_dtoa+0x24c>)
 8015df4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015df8:	f7ea fc16 	bl	8000628 <__aeabi_dmul>
 8015dfc:	4602      	mov	r2, r0
 8015dfe:	460b      	mov	r3, r1
 8015e00:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015e04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015e06:	3301      	adds	r3, #1
 8015e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8015e0a:	f04f 0200 	mov.w	r2, #0
 8015e0e:	4b13      	ldr	r3, [pc, #76]	@ (8015e5c <mg_dtoa+0x24c>)
 8015e10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015e14:	f7ea fe8e 	bl	8000b34 <__aeabi_dcmpge>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d011      	beq.n	8015e42 <mg_dtoa+0x232>
 8015e1e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015e22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015e26:	f7ea fd29 	bl	800087c <__aeabi_ddiv>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	4610      	mov	r0, r2
 8015e30:	4619      	mov	r1, r3
 8015e32:	f04f 0200 	mov.w	r2, #0
 8015e36:	4b09      	ldr	r3, [pc, #36]	@ (8015e5c <mg_dtoa+0x24c>)
 8015e38:	f7ea fe7c 	bl	8000b34 <__aeabi_dcmpge>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d1d5      	bne.n	8015dee <mg_dtoa+0x1de>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8015e42:	e01d      	b.n	8015e80 <mg_dtoa+0x270>
 8015e44:	080315ec 	.word	0x080315ec
 8015e48:	080315f0 	.word	0x080315f0
 8015e4c:	080315f4 	.word	0x080315f4
 8015e50:	080315f8 	.word	0x080315f8
 8015e54:	08031600 	.word	0x08031600
 8015e58:	3ff00000 	.word	0x3ff00000
 8015e5c:	40240000 	.word	0x40240000
 8015e60:	40140000 	.word	0x40140000
 8015e64:	f04f 0200 	mov.w	r2, #0
 8015e68:	4b9d      	ldr	r3, [pc, #628]	@ (80160e0 <mg_dtoa+0x4d0>)
 8015e6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8015e6e:	f7ea fd05 	bl	800087c <__aeabi_ddiv>
 8015e72:	4602      	mov	r2, r0
 8015e74:	460b      	mov	r3, r1
 8015e76:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8015e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015e7c:	3b01      	subs	r3, #1
 8015e7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8015e80:	f04f 0200 	mov.w	r2, #0
 8015e84:	4b97      	ldr	r3, [pc, #604]	@ (80160e4 <mg_dtoa+0x4d4>)
 8015e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015e8a:	f7ea fe3f 	bl	8000b0c <__aeabi_dcmplt>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d011      	beq.n	8015eb8 <mg_dtoa+0x2a8>
 8015e94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015e98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015e9c:	f7ea fcee 	bl	800087c <__aeabi_ddiv>
 8015ea0:	4602      	mov	r2, r0
 8015ea2:	460b      	mov	r3, r1
 8015ea4:	4610      	mov	r0, r2
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	f04f 0200 	mov.w	r2, #0
 8015eac:	4b8d      	ldr	r3, [pc, #564]	@ (80160e4 <mg_dtoa+0x4d4>)
 8015eae:	f7ea fe2d 	bl	8000b0c <__aeabi_dcmplt>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d1d5      	bne.n	8015e64 <mg_dtoa+0x254>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8015eb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	429a      	cmp	r2, r3
 8015ebe:	db33      	blt.n	8015f28 <mg_dtoa+0x318>
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2b01      	cmp	r3, #1
 8015ec4:	dd30      	ble.n	8015f28 <mg_dtoa+0x318>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8015ec6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015eca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8015ece:	f7ea fcd5 	bl	800087c <__aeabi_ddiv>
 8015ed2:	4602      	mov	r2, r0
 8015ed4:	460b      	mov	r3, r1
 8015ed6:	ec43 2b17 	vmov	d7, r2, r3
 8015eda:	78fb      	ldrb	r3, [r7, #3]
 8015edc:	f107 0018 	add.w	r0, r7, #24
 8015ee0:	687a      	ldr	r2, [r7, #4]
 8015ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8015ee6:	eef0 0a67 	vmov.f32	s1, s15
 8015eea:	2128      	movs	r1, #40	@ 0x28
 8015eec:	f7ff fe90 	bl	8015c10 <mg_dtoa>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8015ef4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015ef6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015ef8:	4413      	add	r3, r2
 8015efa:	f107 0218 	add.w	r2, r7, #24
 8015efe:	4413      	add	r3, r2
 8015f00:	222b      	movs	r2, #43	@ 0x2b
 8015f02:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7ff fdab 	bl	8015a60 <addexp>
 8015f0a:	4602      	mov	r2, r0
 8015f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015f0e:	4413      	add	r3, r2
 8015f10:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8015f12:	f107 0318 	add.w	r3, r7, #24
 8015f16:	9300      	str	r3, [sp, #0]
 8015f18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015f1a:	4a73      	ldr	r2, [pc, #460]	@ (80160e8 <mg_dtoa+0x4d8>)
 8015f1c:	6939      	ldr	r1, [r7, #16]
 8015f1e:	6978      	ldr	r0, [r7, #20]
 8015f20:	f00b f928 	bl	8021174 <mg_snprintf>
 8015f24:	4603      	mov	r3, r0
 8015f26:	e15f      	b.n	80161e8 <mg_dtoa+0x5d8>
  } else if (e <= -width && width > 1) {
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	425b      	negs	r3, r3
 8015f2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	dc34      	bgt.n	8015f9c <mg_dtoa+0x38c>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2b01      	cmp	r3, #1
 8015f36:	dd31      	ble.n	8015f9c <mg_dtoa+0x38c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8015f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015f3c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8015f40:	f7ea fc9c 	bl	800087c <__aeabi_ddiv>
 8015f44:	4602      	mov	r2, r0
 8015f46:	460b      	mov	r3, r1
 8015f48:	ec43 2b17 	vmov	d7, r2, r3
 8015f4c:	78fb      	ldrb	r3, [r7, #3]
 8015f4e:	f107 0018 	add.w	r0, r7, #24
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	eeb0 0a47 	vmov.f32	s0, s14
 8015f58:	eef0 0a67 	vmov.f32	s1, s15
 8015f5c:	2128      	movs	r1, #40	@ 0x28
 8015f5e:	f7ff fe57 	bl	8015c10 <mg_dtoa>
 8015f62:	4603      	mov	r3, r0
 8015f64:	667b      	str	r3, [r7, #100]	@ 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8015f66:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8015f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015f6a:	4413      	add	r3, r2
 8015f6c:	f107 0218 	add.w	r2, r7, #24
 8015f70:	18d0      	adds	r0, r2, r3
 8015f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015f74:	425b      	negs	r3, r3
 8015f76:	222d      	movs	r2, #45	@ 0x2d
 8015f78:	4619      	mov	r1, r3
 8015f7a:	f7ff fd71 	bl	8015a60 <addexp>
 8015f7e:	4602      	mov	r2, r0
 8015f80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015f82:	4413      	add	r3, r2
 8015f84:	667b      	str	r3, [r7, #100]	@ 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8015f86:	f107 0318 	add.w	r3, r7, #24
 8015f8a:	9300      	str	r3, [sp, #0]
 8015f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015f8e:	4a56      	ldr	r2, [pc, #344]	@ (80160e8 <mg_dtoa+0x4d8>)
 8015f90:	6939      	ldr	r1, [r7, #16]
 8015f92:	6978      	ldr	r0, [r7, #20]
 8015f94:	f00b f8ee 	bl	8021174 <mg_snprintf>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	e125      	b.n	80161e8 <mg_dtoa+0x5d8>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8015fa4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8015fa8:	e03f      	b.n	801602a <mg_dtoa+0x41a>
      int ch = (int) (d / t);
 8015faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015fb2:	f7ea fc63 	bl	800087c <__aeabi_ddiv>
 8015fb6:	4602      	mov	r2, r0
 8015fb8:	460b      	mov	r3, r1
 8015fba:	4610      	mov	r0, r2
 8015fbc:	4619      	mov	r1, r3
 8015fbe:	f7ea fde3 	bl	8000b88 <__aeabi_d2iz>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8015fc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	dc02      	bgt.n	8015fd2 <mg_dtoa+0x3c2>
 8015fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	dd0c      	ble.n	8015fec <mg_dtoa+0x3dc>
 8015fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015fd4:	b2da      	uxtb	r2, r3
 8015fd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015fd8:	1c59      	adds	r1, r3, #1
 8015fda:	6679      	str	r1, [r7, #100]	@ 0x64
 8015fdc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8015fde:	440b      	add	r3, r1
 8015fe0:	3230      	adds	r2, #48	@ 0x30
 8015fe2:	b2d2      	uxtb	r2, r2
 8015fe4:	3370      	adds	r3, #112	@ 0x70
 8015fe6:	443b      	add	r3, r7
 8015fe8:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8015fec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015fee:	f7ea fab1 	bl	8000554 <__aeabi_i2d>
 8015ff2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8015ff6:	f7ea fb17 	bl	8000628 <__aeabi_dmul>
 8015ffa:	4602      	mov	r2, r0
 8015ffc:	460b      	mov	r3, r1
 8015ffe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016002:	f7ea f959 	bl	80002b8 <__aeabi_dsub>
 8016006:	4602      	mov	r2, r0
 8016008:	460b      	mov	r3, r1
 801600a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 801600e:	f04f 0200 	mov.w	r2, #0
 8016012:	4b33      	ldr	r3, [pc, #204]	@ (80160e0 <mg_dtoa+0x4d0>)
 8016014:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8016018:	f7ea fc30 	bl	800087c <__aeabi_ddiv>
 801601c:	4602      	mov	r2, r0
 801601e:	460b      	mov	r3, r1
 8016020:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8016024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016026:	3301      	adds	r3, #1
 8016028:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801602a:	f04f 0200 	mov.w	r2, #0
 801602e:	4b2d      	ldr	r3, [pc, #180]	@ (80160e4 <mg_dtoa+0x4d4>)
 8016030:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8016034:	f7ea fd7e 	bl	8000b34 <__aeabi_dcmpge>
 8016038:	4603      	mov	r3, r0
 801603a:	2b00      	cmp	r3, #0
 801603c:	d004      	beq.n	8016048 <mg_dtoa+0x438>
 801603e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016042:	4413      	add	r3, r2
 8016044:	2b27      	cmp	r3, #39	@ 0x27
 8016046:	ddb0      	ble.n	8015faa <mg_dtoa+0x39a>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8016048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801604a:	2b00      	cmp	r3, #0
 801604c:	d11b      	bne.n	8016086 <mg_dtoa+0x476>
 801604e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016050:	1c5a      	adds	r2, r3, #1
 8016052:	66ba      	str	r2, [r7, #104]	@ 0x68
 8016054:	3370      	adds	r3, #112	@ 0x70
 8016056:	443b      	add	r3, r7
 8016058:	2230      	movs	r2, #48	@ 0x30
 801605a:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 801605e:	e012      	b.n	8016086 <mg_dtoa+0x476>
 8016060:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016062:	1c5a      	adds	r2, r3, #1
 8016064:	667a      	str	r2, [r7, #100]	@ 0x64
 8016066:	3370      	adds	r3, #112	@ 0x70
 8016068:	443b      	add	r3, r7
 801606a:	2230      	movs	r2, #48	@ 0x30
 801606c:	f803 2c58 	strb.w	r2, [r3, #-88]
 8016070:	f04f 0200 	mov.w	r2, #0
 8016074:	4b1a      	ldr	r3, [pc, #104]	@ (80160e0 <mg_dtoa+0x4d0>)
 8016076:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801607a:	f7ea fbff 	bl	800087c <__aeabi_ddiv>
 801607e:	4602      	mov	r2, r0
 8016080:	460b      	mov	r3, r1
 8016082:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8016086:	f04f 0200 	mov.w	r2, #0
 801608a:	4b16      	ldr	r3, [pc, #88]	@ (80160e4 <mg_dtoa+0x4d4>)
 801608c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8016090:	f7ea fd50 	bl	8000b34 <__aeabi_dcmpge>
 8016094:	4603      	mov	r3, r0
 8016096:	2b00      	cmp	r3, #0
 8016098:	d004      	beq.n	80160a4 <mg_dtoa+0x494>
 801609a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801609c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801609e:	4413      	add	r3, r2
 80160a0:	2b27      	cmp	r3, #39	@ 0x27
 80160a2:	dddd      	ble.n	8016060 <mg_dtoa+0x450>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80160a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80160a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80160a8:	4413      	add	r3, r2
 80160aa:	2b27      	cmp	r3, #39	@ 0x27
 80160ac:	dc09      	bgt.n	80160c2 <mg_dtoa+0x4b2>
 80160ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80160b0:	1c5a      	adds	r2, r3, #1
 80160b2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80160b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80160b6:	4413      	add	r3, r2
 80160b8:	3370      	adds	r3, #112	@ 0x70
 80160ba:	443b      	add	r3, r7
 80160bc:	222e      	movs	r2, #46	@ 0x2e
 80160be:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80160c2:	2300      	movs	r3, #0
 80160c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80160c6:	a304      	add	r3, pc, #16	@ (adr r3, 80160d8 <mg_dtoa+0x4c8>)
 80160c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160cc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80160d0:	e046      	b.n	8016160 <mg_dtoa+0x550>
 80160d2:	bf00      	nop
 80160d4:	f3af 8000 	nop.w
 80160d8:	9999999a 	.word	0x9999999a
 80160dc:	3fb99999 	.word	0x3fb99999
 80160e0:	40240000 	.word	0x40240000
 80160e4:	3ff00000 	.word	0x3ff00000
 80160e8:	08031604 	.word	0x08031604
      int ch = (int) (d / t);
 80160ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80160f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80160f4:	f7ea fbc2 	bl	800087c <__aeabi_ddiv>
 80160f8:	4602      	mov	r2, r0
 80160fa:	460b      	mov	r3, r1
 80160fc:	4610      	mov	r0, r2
 80160fe:	4619      	mov	r1, r3
 8016100:	f7ea fd42 	bl	8000b88 <__aeabi_d2iz>
 8016104:	4603      	mov	r3, r0
 8016106:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8016108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801610a:	b2da      	uxtb	r2, r3
 801610c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801610e:	1c59      	adds	r1, r3, #1
 8016110:	6679      	str	r1, [r7, #100]	@ 0x64
 8016112:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8016114:	440b      	add	r3, r1
 8016116:	3230      	adds	r2, #48	@ 0x30
 8016118:	b2d2      	uxtb	r2, r2
 801611a:	3370      	adds	r3, #112	@ 0x70
 801611c:	443b      	add	r3, r7
 801611e:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8016122:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8016124:	f7ea fa16 	bl	8000554 <__aeabi_i2d>
 8016128:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801612c:	f7ea fa7c 	bl	8000628 <__aeabi_dmul>
 8016130:	4602      	mov	r2, r0
 8016132:	460b      	mov	r3, r1
 8016134:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016138:	f7ea f8be 	bl	80002b8 <__aeabi_dsub>
 801613c:	4602      	mov	r2, r0
 801613e:	460b      	mov	r3, r1
 8016140:	e9c7 2302 	strd	r2, r3, [r7, #8]
      t /= 10.0;
 8016144:	f04f 0200 	mov.w	r2, #0
 8016148:	4b29      	ldr	r3, [pc, #164]	@ (80161f0 <mg_dtoa+0x5e0>)
 801614a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801614e:	f7ea fb95 	bl	800087c <__aeabi_ddiv>
 8016152:	4602      	mov	r2, r0
 8016154:	460b      	mov	r3, r1
 8016156:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 801615a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801615c:	3301      	adds	r3, #1
 801615e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016160:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016162:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016164:	4413      	add	r3, r2
 8016166:	2b27      	cmp	r3, #39	@ 0x27
 8016168:	dc07      	bgt.n	801617a <mg_dtoa+0x56a>
 801616a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	429a      	cmp	r2, r3
 8016170:	dbbc      	blt.n	80160ec <mg_dtoa+0x4dc>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8016172:	e002      	b.n	801617a <mg_dtoa+0x56a>
 8016174:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016176:	3b01      	subs	r3, #1
 8016178:	667b      	str	r3, [r7, #100]	@ 0x64
 801617a:	78fb      	ldrb	r3, [r7, #3]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00c      	beq.n	801619a <mg_dtoa+0x58a>
 8016180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016182:	2b00      	cmp	r3, #0
 8016184:	dd09      	ble.n	801619a <mg_dtoa+0x58a>
 8016186:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801618a:	4413      	add	r3, r2
 801618c:	3b01      	subs	r3, #1
 801618e:	3370      	adds	r3, #112	@ 0x70
 8016190:	443b      	add	r3, r7
 8016192:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8016196:	2b30      	cmp	r3, #48	@ 0x30
 8016198:	d0ec      	beq.n	8016174 <mg_dtoa+0x564>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 801619a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801619c:	2b00      	cmp	r3, #0
 801619e:	dd0c      	ble.n	80161ba <mg_dtoa+0x5aa>
 80161a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80161a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80161a4:	4413      	add	r3, r2
 80161a6:	3b01      	subs	r3, #1
 80161a8:	3370      	adds	r3, #112	@ 0x70
 80161aa:	443b      	add	r3, r7
 80161ac:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80161b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80161b2:	d102      	bne.n	80161ba <mg_dtoa+0x5aa>
 80161b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80161b6:	3b01      	subs	r3, #1
 80161b8:	667b      	str	r3, [r7, #100]	@ 0x64
  n += s;
 80161ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80161bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80161be:	4413      	add	r3, r2
 80161c0:	667b      	str	r3, [r7, #100]	@ 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 80161c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80161c4:	2b27      	cmp	r3, #39	@ 0x27
 80161c6:	dd01      	ble.n	80161cc <mg_dtoa+0x5bc>
 80161c8:	2327      	movs	r3, #39	@ 0x27
 80161ca:	667b      	str	r3, [r7, #100]	@ 0x64
  buf[n] = '\0';
 80161cc:	f107 0218 	add.w	r2, r7, #24
 80161d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80161d2:	4413      	add	r3, r2
 80161d4:	2200      	movs	r2, #0
 80161d6:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80161d8:	f107 0318 	add.w	r3, r7, #24
 80161dc:	4a05      	ldr	r2, [pc, #20]	@ (80161f4 <mg_dtoa+0x5e4>)
 80161de:	6939      	ldr	r1, [r7, #16]
 80161e0:	6978      	ldr	r0, [r7, #20]
 80161e2:	f00a ffc7 	bl	8021174 <mg_snprintf>
 80161e6:	4603      	mov	r3, r0
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	3770      	adds	r7, #112	@ 0x70
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bdb0      	pop	{r4, r5, r7, pc}
 80161f0:	40240000 	.word	0x40240000
 80161f4:	080315f0 	.word	0x080315f0

080161f8 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80161f8:	b5b0      	push	{r4, r5, r7, lr}
 80161fa:	b08c      	sub	sp, #48	@ 0x30
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	60f8      	str	r0, [r7, #12]
 8016200:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8016204:	4b53      	ldr	r3, [pc, #332]	@ (8016354 <mg_lld+0x15c>)
 8016206:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8016208:	e9d7 2300 	ldrd	r2, r3, [r7]
 801620c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8016210:	2300      	movs	r3, #0
 8016212:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8016214:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016218:	2b00      	cmp	r3, #0
 801621a:	d012      	beq.n	8016242 <mg_lld+0x4a>
 801621c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016220:	2b00      	cmp	r3, #0
 8016222:	da0e      	bge.n	8016242 <mg_lld+0x4a>
 8016224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016226:	1c5a      	adds	r2, r3, #1
 8016228:	627a      	str	r2, [r7, #36]	@ 0x24
 801622a:	68fa      	ldr	r2, [r7, #12]
 801622c:	4413      	add	r3, r2
 801622e:	222d      	movs	r2, #45	@ 0x2d
 8016230:	701a      	strb	r2, [r3, #0]
 8016232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016236:	2100      	movs	r1, #0
 8016238:	4254      	negs	r4, r2
 801623a:	eb61 0503 	sbc.w	r5, r1, r3
 801623e:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8016242:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016246:	2b00      	cmp	r3, #0
 8016248:	d021      	beq.n	801628e <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 801624a:	2300      	movs	r3, #0
 801624c:	623b      	str	r3, [r7, #32]
 801624e:	e019      	b.n	8016284 <mg_lld+0x8c>
 8016250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016252:	f003 030f 	and.w	r3, r3, #15
 8016256:	69ba      	ldr	r2, [r7, #24]
 8016258:	441a      	add	r2, r3
 801625a:	6a3b      	ldr	r3, [r7, #32]
 801625c:	1c59      	adds	r1, r3, #1
 801625e:	6239      	str	r1, [r7, #32]
 8016260:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016262:	440b      	add	r3, r1
 8016264:	68f9      	ldr	r1, [r7, #12]
 8016266:	440b      	add	r3, r1
 8016268:	7812      	ldrb	r2, [r2, #0]
 801626a:	701a      	strb	r2, [r3, #0]
 801626c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8016270:	f04f 0200 	mov.w	r2, #0
 8016274:	f04f 0300 	mov.w	r3, #0
 8016278:	0902      	lsrs	r2, r0, #4
 801627a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 801627e:	090b      	lsrs	r3, r1, #4
 8016280:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8016284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8016288:	4313      	orrs	r3, r2
 801628a:	d1e1      	bne.n	8016250 <mg_lld+0x58>
 801628c:	e025      	b.n	80162da <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 801628e:	2300      	movs	r3, #0
 8016290:	623b      	str	r3, [r7, #32]
 8016292:	e01e      	b.n	80162d2 <mg_lld+0xda>
 8016294:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8016298:	f04f 020a 	mov.w	r2, #10
 801629c:	f04f 0300 	mov.w	r3, #0
 80162a0:	f7ea fd5a 	bl	8000d58 <__aeabi_uldivmod>
 80162a4:	69bb      	ldr	r3, [r7, #24]
 80162a6:	441a      	add	r2, r3
 80162a8:	6a3b      	ldr	r3, [r7, #32]
 80162aa:	1c59      	adds	r1, r3, #1
 80162ac:	6239      	str	r1, [r7, #32]
 80162ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80162b0:	440b      	add	r3, r1
 80162b2:	68f9      	ldr	r1, [r7, #12]
 80162b4:	440b      	add	r3, r1
 80162b6:	7812      	ldrb	r2, [r2, #0]
 80162b8:	701a      	strb	r2, [r3, #0]
 80162ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80162be:	f04f 020a 	mov.w	r2, #10
 80162c2:	f04f 0300 	mov.w	r3, #0
 80162c6:	f7ea fd47 	bl	8000d58 <__aeabi_uldivmod>
 80162ca:	4602      	mov	r2, r0
 80162cc:	460b      	mov	r3, r1
 80162ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80162d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80162d6:	4313      	orrs	r3, r2
 80162d8:	d1dc      	bne.n	8016294 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80162da:	2300      	movs	r3, #0
 80162dc:	61fb      	str	r3, [r7, #28]
 80162de:	e022      	b.n	8016326 <mg_lld+0x12e>
    char t = buf[s + i];
 80162e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162e2:	69fb      	ldr	r3, [r7, #28]
 80162e4:	4413      	add	r3, r2
 80162e6:	68fa      	ldr	r2, [r7, #12]
 80162e8:	4413      	add	r3, r2
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 80162ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162f0:	6a3b      	ldr	r3, [r7, #32]
 80162f2:	441a      	add	r2, r3
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	1ad3      	subs	r3, r2, r3
 80162f8:	3b01      	subs	r3, #1
 80162fa:	68fa      	ldr	r2, [r7, #12]
 80162fc:	441a      	add	r2, r3
 80162fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016300:	69fb      	ldr	r3, [r7, #28]
 8016302:	440b      	add	r3, r1
 8016304:	68f9      	ldr	r1, [r7, #12]
 8016306:	440b      	add	r3, r1
 8016308:	7812      	ldrb	r2, [r2, #0]
 801630a:	701a      	strb	r2, [r3, #0]
 801630c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801630e:	6a3b      	ldr	r3, [r7, #32]
 8016310:	441a      	add	r2, r3
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	1ad3      	subs	r3, r2, r3
 8016316:	3b01      	subs	r3, #1
 8016318:	68fa      	ldr	r2, [r7, #12]
 801631a:	4413      	add	r3, r2
 801631c:	7dfa      	ldrb	r2, [r7, #23]
 801631e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	3301      	adds	r3, #1
 8016324:	61fb      	str	r3, [r7, #28]
 8016326:	6a3b      	ldr	r3, [r7, #32]
 8016328:	085b      	lsrs	r3, r3, #1
 801632a:	69fa      	ldr	r2, [r7, #28]
 801632c:	429a      	cmp	r2, r3
 801632e:	d3d7      	bcc.n	80162e0 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8016330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016334:	4313      	orrs	r3, r2
 8016336:	d106      	bne.n	8016346 <mg_lld+0x14e>
 8016338:	6a3b      	ldr	r3, [r7, #32]
 801633a:	1c5a      	adds	r2, r3, #1
 801633c:	623a      	str	r2, [r7, #32]
 801633e:	68fa      	ldr	r2, [r7, #12]
 8016340:	4413      	add	r3, r2
 8016342:	2230      	movs	r2, #48	@ 0x30
 8016344:	701a      	strb	r2, [r3, #0]
  return n + s;
 8016346:	6a3a      	ldr	r2, [r7, #32]
 8016348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801634a:	4413      	add	r3, r2
}
 801634c:	4618      	mov	r0, r3
 801634e:	3730      	adds	r7, #48	@ 0x30
 8016350:	46bd      	mov	sp, r7
 8016352:	bdb0      	pop	{r4, r5, r7, pc}
 8016354:	0803160c 	.word	0x0803160c

08016358 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8016358:	b580      	push	{r7, lr}
 801635a:	b086      	sub	sp, #24
 801635c:	af00      	add	r7, sp, #0
 801635e:	60f8      	str	r0, [r7, #12]
 8016360:	60b9      	str	r1, [r7, #8]
 8016362:	607a      	str	r2, [r7, #4]
 8016364:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8016366:	2300      	movs	r3, #0
 8016368:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 801636a:	e009      	b.n	8016380 <scpy+0x28>
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	1c5a      	adds	r2, r3, #1
 8016370:	617a      	str	r2, [r7, #20]
 8016372:	687a      	ldr	r2, [r7, #4]
 8016374:	4413      	add	r3, r2
 8016376:	781a      	ldrb	r2, [r3, #0]
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	68b9      	ldr	r1, [r7, #8]
 801637c:	4610      	mov	r0, r2
 801637e:	4798      	blx	r3
 8016380:	697a      	ldr	r2, [r7, #20]
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	429a      	cmp	r2, r3
 8016386:	d205      	bcs.n	8016394 <scpy+0x3c>
 8016388:	687a      	ldr	r2, [r7, #4]
 801638a:	697b      	ldr	r3, [r7, #20]
 801638c:	4413      	add	r3, r2
 801638e:	781b      	ldrb	r3, [r3, #0]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d1eb      	bne.n	801636c <scpy+0x14>
  return i;
 8016394:	697b      	ldr	r3, [r7, #20]
}
 8016396:	4618      	mov	r0, r3
 8016398:	3718      	adds	r7, #24
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}

0801639e <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 801639e:	b40c      	push	{r2, r3}
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80163aa:	2300      	movs	r3, #0
 80163ac:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80163ae:	f107 031c 	add.w	r3, r7, #28
 80163b2:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80163b4:	f107 0308 	add.w	r3, r7, #8
 80163b8:	69ba      	ldr	r2, [r7, #24]
 80163ba:	6839      	ldr	r1, [r7, #0]
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 f809 	bl	80163d4 <mg_vxprintf>
 80163c2:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80163c4:	68fb      	ldr	r3, [r7, #12]
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3710      	adds	r7, #16
 80163ca:	46bd      	mov	sp, r7
 80163cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80163d0:	b002      	add	sp, #8
 80163d2:	4770      	bx	lr

080163d4 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80163d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80163d8:	b0a6      	sub	sp, #152	@ 0x98
 80163da:	af02      	add	r7, sp, #8
 80163dc:	60f8      	str	r0, [r7, #12]
 80163de:	60b9      	str	r1, [r7, #8]
 80163e0:	607a      	str	r2, [r7, #4]
 80163e2:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 80163e4:	2300      	movs	r3, #0
 80163e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80163ea:	2300      	movs	r3, #0
 80163ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 80163f0:	e383      	b.n	8016afa <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 80163f2:	687a      	ldr	r2, [r7, #4]
 80163f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80163f8:	4413      	add	r3, r2
 80163fa:	781b      	ldrb	r3, [r3, #0]
 80163fc:	2b25      	cmp	r3, #37	@ 0x25
 80163fe:	f040 8369 	bne.w	8016ad4 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8016402:	2300      	movs	r3, #0
 8016404:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016406:	2300      	movs	r3, #0
 8016408:	67bb      	str	r3, [r7, #120]	@ 0x78
 801640a:	2300      	movs	r3, #0
 801640c:	677b      	str	r3, [r7, #116]	@ 0x74
 801640e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016412:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8016414:	2320      	movs	r3, #32
 8016416:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801641a:	2300      	movs	r3, #0
 801641c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8016420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016424:	3301      	adds	r3, #1
 8016426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801642a:	687a      	ldr	r2, [r7, #4]
 801642c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016430:	4413      	add	r3, r2
 8016432:	781b      	ldrb	r3, [r3, #0]
 8016434:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 8016438:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801643c:	2b23      	cmp	r3, #35	@ 0x23
 801643e:	d10e      	bne.n	801645e <mg_vxprintf+0x8a>
 8016440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016442:	3301      	adds	r3, #1
 8016444:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801644a:	3301      	adds	r3, #1
 801644c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016450:	687a      	ldr	r2, [r7, #4]
 8016452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016456:	4413      	add	r3, r2
 8016458:	781b      	ldrb	r3, [r3, #0]
 801645a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 801645e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016462:	2b2d      	cmp	r3, #45	@ 0x2d
 8016464:	d110      	bne.n	8016488 <mg_vxprintf+0xb4>
 8016466:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801646a:	3301      	adds	r3, #1
 801646c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8016470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016474:	3301      	adds	r3, #1
 8016476:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801647a:	687a      	ldr	r2, [r7, #4]
 801647c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016480:	4413      	add	r3, r2
 8016482:	781b      	ldrb	r3, [r3, #0]
 8016484:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8016488:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801648c:	2b30      	cmp	r3, #48	@ 0x30
 801648e:	d127      	bne.n	80164e0 <mg_vxprintf+0x10c>
 8016490:	2330      	movs	r3, #48	@ 0x30
 8016492:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8016496:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801649a:	3301      	adds	r3, #1
 801649c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80164a6:	4413      	add	r3, r2
 80164a8:	781b      	ldrb	r3, [r3, #0]
 80164aa:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80164ae:	e017      	b.n	80164e0 <mg_vxprintf+0x10c>
 80164b0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80164b2:	4613      	mov	r3, r2
 80164b4:	009b      	lsls	r3, r3, #2
 80164b6:	4413      	add	r3, r2
 80164b8:	005b      	lsls	r3, r3, #1
 80164ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80164bc:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80164c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80164c2:	4413      	add	r3, r2
 80164c4:	3b30      	subs	r3, #48	@ 0x30
 80164c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80164c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80164cc:	3301      	adds	r3, #1
 80164ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80164d2:	687a      	ldr	r2, [r7, #4]
 80164d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80164d8:	4413      	add	r3, r2
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80164e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80164e4:	4618      	mov	r0, r3
 80164e6:	f7ff faa5 	bl	8015a34 <is_digit>
 80164ea:	4603      	mov	r3, r0
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d1df      	bne.n	80164b0 <mg_vxprintf+0xdc>
      if (c == '.') {
 80164f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80164f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80164f6:	d153      	bne.n	80165a0 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 80164f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80164fc:	3301      	adds	r3, #1
 80164fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016502:	687a      	ldr	r2, [r7, #4]
 8016504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016508:	4413      	add	r3, r2
 801650a:	781b      	ldrb	r3, [r3, #0]
 801650c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8016510:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016514:	2b2a      	cmp	r3, #42	@ 0x2a
 8016516:	d113      	bne.n	8016540 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	1d19      	adds	r1, r3, #4
 801651e:	683a      	ldr	r2, [r7, #0]
 8016520:	6011      	str	r1, [r2, #0]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8016526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801652a:	3301      	adds	r3, #1
 801652c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016530:	687a      	ldr	r2, [r7, #4]
 8016532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016536:	4413      	add	r3, r2
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 801653e:	e02f      	b.n	80165a0 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8016540:	2300      	movs	r3, #0
 8016542:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8016544:	e017      	b.n	8016576 <mg_vxprintf+0x1a2>
 8016546:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016548:	4613      	mov	r3, r2
 801654a:	009b      	lsls	r3, r3, #2
 801654c:	4413      	add	r3, r2
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	673b      	str	r3, [r7, #112]	@ 0x70
 8016552:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8016556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016558:	4413      	add	r3, r2
 801655a:	3b30      	subs	r3, #48	@ 0x30
 801655c:	673b      	str	r3, [r7, #112]	@ 0x70
 801655e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016562:	3301      	adds	r3, #1
 8016564:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016568:	687a      	ldr	r2, [r7, #4]
 801656a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801656e:	4413      	add	r3, r2
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8016576:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801657a:	4618      	mov	r0, r3
 801657c:	f7ff fa5a 	bl	8015a34 <is_digit>
 8016580:	4603      	mov	r3, r0
 8016582:	2b00      	cmp	r3, #0
 8016584:	d1df      	bne.n	8016546 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8016586:	e00b      	b.n	80165a0 <mg_vxprintf+0x1cc>
 8016588:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801658c:	3301      	adds	r3, #1
 801658e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016592:	687a      	ldr	r2, [r7, #4]
 8016594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016598:	4413      	add	r3, r2
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80165a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80165a4:	2b68      	cmp	r3, #104	@ 0x68
 80165a6:	d0ef      	beq.n	8016588 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80165a8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80165ac:	2b6c      	cmp	r3, #108	@ 0x6c
 80165ae:	d121      	bne.n	80165f4 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80165b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80165b2:	3301      	adds	r3, #1
 80165b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80165b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80165ba:	3301      	adds	r3, #1
 80165bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80165c6:	4413      	add	r3, r2
 80165c8:	781b      	ldrb	r3, [r3, #0]
 80165ca:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 80165ce:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80165d2:	2b6c      	cmp	r3, #108	@ 0x6c
 80165d4:	d10e      	bne.n	80165f4 <mg_vxprintf+0x220>
 80165d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80165d8:	3301      	adds	r3, #1
 80165da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80165dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80165e0:	3301      	adds	r3, #1
 80165e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80165e6:	687a      	ldr	r2, [r7, #4]
 80165e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80165ec:	4413      	add	r3, r2
 80165ee:	781b      	ldrb	r3, [r3, #0]
 80165f0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 80165f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80165f8:	2b70      	cmp	r3, #112	@ 0x70
 80165fa:	d103      	bne.n	8016604 <mg_vxprintf+0x230>
 80165fc:	2301      	movs	r3, #1
 80165fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016600:	2301      	movs	r3, #1
 8016602:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8016604:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016608:	2b64      	cmp	r3, #100	@ 0x64
 801660a:	d018      	beq.n	801663e <mg_vxprintf+0x26a>
 801660c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016610:	2b75      	cmp	r3, #117	@ 0x75
 8016612:	d014      	beq.n	801663e <mg_vxprintf+0x26a>
 8016614:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016618:	2b78      	cmp	r3, #120	@ 0x78
 801661a:	d010      	beq.n	801663e <mg_vxprintf+0x26a>
 801661c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016620:	2b58      	cmp	r3, #88	@ 0x58
 8016622:	d00c      	beq.n	801663e <mg_vxprintf+0x26a>
 8016624:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016628:	2b70      	cmp	r3, #112	@ 0x70
 801662a:	d008      	beq.n	801663e <mg_vxprintf+0x26a>
 801662c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016630:	2b67      	cmp	r3, #103	@ 0x67
 8016632:	d004      	beq.n	801663e <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8016634:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016638:	2b66      	cmp	r3, #102	@ 0x66
 801663a:	f040 816c 	bne.w	8016916 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 801663e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016642:	2b64      	cmp	r3, #100	@ 0x64
 8016644:	bf0c      	ite	eq
 8016646:	2301      	moveq	r3, #1
 8016648:	2300      	movne	r3, #0
 801664a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801664e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016652:	2b78      	cmp	r3, #120	@ 0x78
 8016654:	d007      	beq.n	8016666 <mg_vxprintf+0x292>
 8016656:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801665a:	2b58      	cmp	r3, #88	@ 0x58
 801665c:	d003      	beq.n	8016666 <mg_vxprintf+0x292>
 801665e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016662:	2b70      	cmp	r3, #112	@ 0x70
 8016664:	d101      	bne.n	801666a <mg_vxprintf+0x296>
 8016666:	2301      	movs	r3, #1
 8016668:	e000      	b.n	801666c <mg_vxprintf+0x298>
 801666a:	2300      	movs	r3, #0
 801666c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8016670:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8016674:	f003 0301 	and.w	r3, r3, #1
 8016678:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 801667c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801667e:	2b00      	cmp	r3, #0
 8016680:	d001      	beq.n	8016686 <mg_vxprintf+0x2b2>
 8016682:	2302      	movs	r3, #2
 8016684:	e000      	b.n	8016688 <mg_vxprintf+0x2b4>
 8016686:	2300      	movs	r3, #0
 8016688:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 801668a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801668e:	2b67      	cmp	r3, #103	@ 0x67
 8016690:	d003      	beq.n	801669a <mg_vxprintf+0x2c6>
 8016692:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016696:	2b66      	cmp	r3, #102	@ 0x66
 8016698:	d124      	bne.n	80166e4 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	3307      	adds	r3, #7
 80166a0:	f023 0307 	bic.w	r3, r3, #7
 80166a4:	f103 0108 	add.w	r1, r3, #8
 80166a8:	683a      	ldr	r2, [r7, #0]
 80166aa:	6011      	str	r1, [r2, #0]
 80166ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 80166b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80166b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80166ba:	d101      	bne.n	80166c0 <mg_vxprintf+0x2ec>
 80166bc:	2306      	movs	r3, #6
 80166be:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 80166c0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80166c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80166c6:	2b67      	cmp	r3, #103	@ 0x67
 80166c8:	bf0c      	ite	eq
 80166ca:	2301      	moveq	r3, #1
 80166cc:	2300      	movne	r3, #0
 80166ce:	b2db      	uxtb	r3, r3
 80166d0:	f107 0014 	add.w	r0, r7, #20
 80166d4:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 80166d8:	2128      	movs	r1, #40	@ 0x28
 80166da:	f7ff fa99 	bl	8015c10 <mg_dtoa>
 80166de:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 80166e2:	e069      	b.n	80167b8 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 80166e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80166e6:	2b02      	cmp	r3, #2
 80166e8:	d11c      	bne.n	8016724 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	3307      	adds	r3, #7
 80166f0:	f023 0307 	bic.w	r3, r3, #7
 80166f4:	f103 0108 	add.w	r1, r3, #8
 80166f8:	683a      	ldr	r2, [r7, #0]
 80166fa:	6011      	str	r1, [r2, #0]
 80166fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016700:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8016704:	f107 0114 	add.w	r1, r7, #20
 8016708:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801670c:	9301      	str	r3, [sp, #4]
 801670e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016712:	9300      	str	r3, [sp, #0]
 8016714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8016718:	4608      	mov	r0, r1
 801671a:	f7ff fd6d 	bl	80161f8 <mg_lld>
 801671e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8016722:	e049      	b.n	80167b8 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8016724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016726:	2b01      	cmp	r3, #1
 8016728:	d123      	bne.n	8016772 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	1d19      	adds	r1, r3, #4
 8016730:	683a      	ldr	r2, [r7, #0]
 8016732:	6011      	str	r1, [r2, #0]
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8016738:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801673c:	2b00      	cmp	r3, #0
 801673e:	d004      	beq.n	801674a <mg_vxprintf+0x376>
 8016740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016742:	17da      	asrs	r2, r3, #31
 8016744:	461c      	mov	r4, r3
 8016746:	4615      	mov	r5, r2
 8016748:	e003      	b.n	8016752 <mg_vxprintf+0x37e>
 801674a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801674c:	2200      	movs	r2, #0
 801674e:	461c      	mov	r4, r3
 8016750:	4615      	mov	r5, r2
 8016752:	f107 0114 	add.w	r1, r7, #20
 8016756:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801675a:	9301      	str	r3, [sp, #4]
 801675c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016760:	9300      	str	r3, [sp, #0]
 8016762:	4622      	mov	r2, r4
 8016764:	462b      	mov	r3, r5
 8016766:	4608      	mov	r0, r1
 8016768:	f7ff fd46 	bl	80161f8 <mg_lld>
 801676c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8016770:	e022      	b.n	80167b8 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	1d19      	adds	r1, r3, #4
 8016778:	683a      	ldr	r2, [r7, #0]
 801677a:	6011      	str	r1, [r2, #0]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8016780:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016784:	2b00      	cmp	r3, #0
 8016786:	d004      	beq.n	8016792 <mg_vxprintf+0x3be>
 8016788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801678a:	17da      	asrs	r2, r3, #31
 801678c:	4698      	mov	r8, r3
 801678e:	4691      	mov	r9, r2
 8016790:	e003      	b.n	801679a <mg_vxprintf+0x3c6>
 8016792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016794:	2200      	movs	r2, #0
 8016796:	4698      	mov	r8, r3
 8016798:	4691      	mov	r9, r2
 801679a:	f107 0114 	add.w	r1, r7, #20
 801679e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80167a2:	9301      	str	r3, [sp, #4]
 80167a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80167a8:	9300      	str	r3, [sp, #0]
 80167aa:	4642      	mov	r2, r8
 80167ac:	464b      	mov	r3, r9
 80167ae:	4608      	mov	r0, r1
 80167b0:	f7ff fd22 	bl	80161f8 <mg_lld>
 80167b4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80167b8:	2300      	movs	r3, #0
 80167ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80167be:	e007      	b.n	80167d0 <mg_vxprintf+0x3fc>
 80167c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80167c2:	3b01      	subs	r3, #1
 80167c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80167c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80167ca:	3301      	adds	r3, #1
 80167cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80167d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80167d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d202      	bcs.n	80167e0 <mg_vxprintf+0x40c>
 80167da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d1ef      	bne.n	80167c0 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 80167e0:	2300      	movs	r3, #0
 80167e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80167e6:	e011      	b.n	801680c <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 80167e8:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80167ec:	2301      	movs	r3, #1
 80167ee:	68b9      	ldr	r1, [r7, #8]
 80167f0:	68f8      	ldr	r0, [r7, #12]
 80167f2:	f7ff fdb1 	bl	8016358 <scpy>
 80167f6:	4602      	mov	r2, r0
 80167f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80167fc:	4413      	add	r3, r2
 80167fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8016802:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016806:	3301      	adds	r3, #1
 8016808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801680c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016810:	2b20      	cmp	r3, #32
 8016812:	d110      	bne.n	8016836 <mg_vxprintf+0x462>
 8016814:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8016818:	2b00      	cmp	r3, #0
 801681a:	d10c      	bne.n	8016836 <mg_vxprintf+0x462>
 801681c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016820:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016822:	429a      	cmp	r2, r3
 8016824:	d207      	bcs.n	8016836 <mg_vxprintf+0x462>
 8016826:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801682a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801682e:	4413      	add	r3, r2
 8016830:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016832:	429a      	cmp	r2, r3
 8016834:	d8d8      	bhi.n	80167e8 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8016836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016838:	4ab7      	ldr	r2, [pc, #732]	@ (8016b18 <mg_vxprintf+0x744>)
 801683a:	68b9      	ldr	r1, [r7, #8]
 801683c:	68f8      	ldr	r0, [r7, #12]
 801683e:	f7ff fd8b 	bl	8016358 <scpy>
 8016842:	4602      	mov	r2, r0
 8016844:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016848:	4413      	add	r3, r2
 801684a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 801684e:	2300      	movs	r3, #0
 8016850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016854:	e011      	b.n	801687a <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8016856:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 801685a:	2301      	movs	r3, #1
 801685c:	68b9      	ldr	r1, [r7, #8]
 801685e:	68f8      	ldr	r0, [r7, #12]
 8016860:	f7ff fd7a 	bl	8016358 <scpy>
 8016864:	4602      	mov	r2, r0
 8016866:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801686a:	4413      	add	r3, r2
 801686c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8016870:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016874:	3301      	adds	r3, #1
 8016876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801687a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801687e:	2b30      	cmp	r3, #48	@ 0x30
 8016880:	d10c      	bne.n	801689c <mg_vxprintf+0x4c8>
 8016882:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016888:	429a      	cmp	r2, r3
 801688a:	d207      	bcs.n	801689c <mg_vxprintf+0x4c8>
 801688c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016890:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016894:	4413      	add	r3, r2
 8016896:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016898:	429a      	cmp	r2, r3
 801689a:	d8dc      	bhi.n	8016856 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 801689c:	f107 0214 	add.w	r2, r7, #20
 80168a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80168a4:	68b9      	ldr	r1, [r7, #8]
 80168a6:	68f8      	ldr	r0, [r7, #12]
 80168a8:	f7ff fd56 	bl	8016358 <scpy>
 80168ac:	4602      	mov	r2, r0
 80168ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80168b2:	4413      	add	r3, r2
 80168b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80168b8:	2300      	movs	r3, #0
 80168ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80168be:	e011      	b.n	80168e4 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80168c0:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80168c4:	2301      	movs	r3, #1
 80168c6:	68b9      	ldr	r1, [r7, #8]
 80168c8:	68f8      	ldr	r0, [r7, #12]
 80168ca:	f7ff fd45 	bl	8016358 <scpy>
 80168ce:	4602      	mov	r2, r0
 80168d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80168d4:	4413      	add	r3, r2
 80168d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80168da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80168de:	3301      	adds	r3, #1
 80168e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80168e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80168e8:	2b20      	cmp	r3, #32
 80168ea:	f040 80ea 	bne.w	8016ac2 <mg_vxprintf+0x6ee>
 80168ee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	f000 80e5 	beq.w	8016ac2 <mg_vxprintf+0x6ee>
 80168f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80168fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80168fe:	429a      	cmp	r2, r3
 8016900:	f080 80df 	bcs.w	8016ac2 <mg_vxprintf+0x6ee>
 8016904:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016908:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801690c:	4413      	add	r3, r2
 801690e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016910:	429a      	cmp	r2, r3
 8016912:	d8d5      	bhi.n	80168c0 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8016914:	e0d5      	b.n	8016ac2 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8016916:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801691a:	2b6d      	cmp	r3, #109	@ 0x6d
 801691c:	d003      	beq.n	8016926 <mg_vxprintf+0x552>
 801691e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016922:	2b4d      	cmp	r3, #77	@ 0x4d
 8016924:	d128      	bne.n	8016978 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	1d19      	adds	r1, r3, #4
 801692c:	683a      	ldr	r2, [r7, #0]
 801692e:	6011      	str	r1, [r2, #0]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8016934:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016938:	2b6d      	cmp	r3, #109	@ 0x6d
 801693a:	d103      	bne.n	8016944 <mg_vxprintf+0x570>
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	68b9      	ldr	r1, [r7, #8]
 8016940:	2022      	movs	r0, #34	@ 0x22
 8016942:	4798      	blx	r3
        n += f(out, param, ap);
 8016944:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016946:	683a      	ldr	r2, [r7, #0]
 8016948:	68b9      	ldr	r1, [r7, #8]
 801694a:	68f8      	ldr	r0, [r7, #12]
 801694c:	4798      	blx	r3
 801694e:	4602      	mov	r2, r0
 8016950:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016954:	4413      	add	r3, r2
 8016956:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 801695a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801695e:	2b6d      	cmp	r3, #109	@ 0x6d
 8016960:	f040 80b1 	bne.w	8016ac6 <mg_vxprintf+0x6f2>
 8016964:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016968:	3302      	adds	r3, #2
 801696a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	68b9      	ldr	r1, [r7, #8]
 8016972:	2022      	movs	r0, #34	@ 0x22
 8016974:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8016976:	e0a6      	b.n	8016ac6 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8016978:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 801697c:	2b63      	cmp	r3, #99	@ 0x63
 801697e:	d112      	bne.n	80169a6 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8016980:	683b      	ldr	r3, [r7, #0]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	1d19      	adds	r1, r3, #4
 8016986:	683a      	ldr	r2, [r7, #0]
 8016988:	6011      	str	r1, [r2, #0]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 801698e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016990:	b2da      	uxtb	r2, r3
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	68b9      	ldr	r1, [r7, #8]
 8016996:	4610      	mov	r0, r2
 8016998:	4798      	blx	r3
        n++;
 801699a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801699e:	3301      	adds	r3, #1
 80169a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80169a4:	e090      	b.n	8016ac8 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80169a6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80169aa:	2b73      	cmp	r3, #115	@ 0x73
 80169ac:	d16b      	bne.n	8016a86 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	1d19      	adds	r1, r3, #4
 80169b4:	683a      	ldr	r2, [r7, #0]
 80169b6:	6011      	str	r1, [r2, #0]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80169bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80169be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80169c2:	d109      	bne.n	80169d8 <mg_vxprintf+0x604>
 80169c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d004      	beq.n	80169d4 <mg_vxprintf+0x600>
 80169ca:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80169cc:	f7e9 fc68 	bl	80002a0 <strlen>
 80169d0:	4603      	mov	r3, r0
 80169d2:	e000      	b.n	80169d6 <mg_vxprintf+0x602>
 80169d4:	2300      	movs	r3, #0
 80169d6:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80169d8:	2300      	movs	r3, #0
 80169da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80169de:	e011      	b.n	8016a04 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80169e0:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80169e4:	2301      	movs	r3, #1
 80169e6:	68b9      	ldr	r1, [r7, #8]
 80169e8:	68f8      	ldr	r0, [r7, #12]
 80169ea:	f7ff fcb5 	bl	8016358 <scpy>
 80169ee:	4602      	mov	r2, r0
 80169f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80169f4:	4413      	add	r3, r2
 80169f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80169fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80169fe:	3301      	adds	r3, #1
 8016a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016a04:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d10a      	bne.n	8016a22 <mg_vxprintf+0x64e>
 8016a0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016a10:	429a      	cmp	r2, r3
 8016a12:	d206      	bcs.n	8016a22 <mg_vxprintf+0x64e>
 8016a14:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016a18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016a1a:	4413      	add	r3, r2
 8016a1c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016a1e:	429a      	cmp	r2, r3
 8016a20:	d8de      	bhi.n	80169e0 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8016a22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016a24:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8016a26:	68b9      	ldr	r1, [r7, #8]
 8016a28:	68f8      	ldr	r0, [r7, #12]
 8016a2a:	f7ff fc95 	bl	8016358 <scpy>
 8016a2e:	4602      	mov	r2, r0
 8016a30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016a34:	4413      	add	r3, r2
 8016a36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016a40:	e011      	b.n	8016a66 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8016a42:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8016a46:	2301      	movs	r3, #1
 8016a48:	68b9      	ldr	r1, [r7, #8]
 8016a4a:	68f8      	ldr	r0, [r7, #12]
 8016a4c:	f7ff fc84 	bl	8016358 <scpy>
 8016a50:	4602      	mov	r2, r0
 8016a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016a56:	4413      	add	r3, r2
 8016a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8016a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8016a60:	3301      	adds	r3, #1
 8016a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016a66:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d02c      	beq.n	8016ac8 <mg_vxprintf+0x6f4>
 8016a6e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016a70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d228      	bcs.n	8016ac8 <mg_vxprintf+0x6f4>
 8016a76:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8016a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016a7c:	4413      	add	r3, r2
 8016a7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8016a80:	429a      	cmp	r2, r3
 8016a82:	d8de      	bhi.n	8016a42 <mg_vxprintf+0x66e>
 8016a84:	e020      	b.n	8016ac8 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8016a86:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8016a8a:	2b25      	cmp	r3, #37	@ 0x25
 8016a8c:	d109      	bne.n	8016aa2 <mg_vxprintf+0x6ce>
        out('%', param);
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	68b9      	ldr	r1, [r7, #8]
 8016a92:	2025      	movs	r0, #37	@ 0x25
 8016a94:	4798      	blx	r3
        n++;
 8016a96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016a9a:	3301      	adds	r3, #1
 8016a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016aa0:	e012      	b.n	8016ac8 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	68b9      	ldr	r1, [r7, #8]
 8016aa6:	2025      	movs	r0, #37	@ 0x25
 8016aa8:	4798      	blx	r3
        out(c, param);
 8016aaa:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	68b9      	ldr	r1, [r7, #8]
 8016ab2:	4610      	mov	r0, r2
 8016ab4:	4798      	blx	r3
        n += 2;
 8016ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016aba:	3302      	adds	r3, #2
 8016abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016ac0:	e002      	b.n	8016ac8 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8016ac2:	bf00      	nop
 8016ac4:	e000      	b.n	8016ac8 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8016ac6:	bf00      	nop
      }
      i++;
 8016ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016acc:	3301      	adds	r3, #1
 8016ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016ad2:	e012      	b.n	8016afa <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8016ad4:	687a      	ldr	r2, [r7, #4]
 8016ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016ada:	4413      	add	r3, r2
 8016adc:	781a      	ldrb	r2, [r3, #0]
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	68b9      	ldr	r1, [r7, #8]
 8016ae2:	4610      	mov	r0, r2
 8016ae4:	4798      	blx	r3
 8016ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016aea:	3301      	adds	r3, #1
 8016aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8016af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016af4:	3301      	adds	r3, #1
 8016af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8016afa:	687a      	ldr	r2, [r7, #4]
 8016afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016b00:	4413      	add	r3, r2
 8016b02:	781b      	ldrb	r3, [r3, #0]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	f47f ac74 	bne.w	80163f2 <mg_vxprintf+0x1e>
    }
  }
  return n;
 8016b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	3790      	adds	r7, #144	@ 0x90
 8016b12:	46bd      	mov	sp, r7
 8016b14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016b18:	08031620 	.word	0x08031620

08016b1c <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b086      	sub	sp, #24
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	60f8      	str	r0, [r7, #12]
 8016b24:	60b9      	str	r1, [r7, #8]
 8016b26:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8016b28:	2108      	movs	r1, #8
 8016b2a:	2001      	movs	r0, #1
 8016b2c:	f7fe f940 	bl	8014db0 <mg_calloc>
 8016b30:	6178      	str	r0, [r7, #20]
  if (fd != NULL) {
 8016b32:	697b      	ldr	r3, [r7, #20]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d013      	beq.n	8016b60 <mg_fs_open+0x44>
    fd->fd = fs->op(path, flags);
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	689b      	ldr	r3, [r3, #8]
 8016b3c:	6879      	ldr	r1, [r7, #4]
 8016b3e:	68b8      	ldr	r0, [r7, #8]
 8016b40:	4798      	blx	r3
 8016b42:	4602      	mov	r2, r0
 8016b44:	697b      	ldr	r3, [r7, #20]
 8016b46:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8016b48:	697b      	ldr	r3, [r7, #20]
 8016b4a:	68fa      	ldr	r2, [r7, #12]
 8016b4c:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8016b4e:	697b      	ldr	r3, [r7, #20]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d104      	bne.n	8016b60 <mg_fs_open+0x44>
      free(fd);
 8016b56:	6978      	ldr	r0, [r7, #20]
 8016b58:	f7f5 fdb6 	bl	800c6c8 <vPortFree>
      fd = NULL;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8016b60:	697b      	ldr	r3, [r7, #20]
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	3718      	adds	r7, #24
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}

08016b6a <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8016b6a:	b580      	push	{r7, lr}
 8016b6c:	b082      	sub	sp, #8
 8016b6e:	af00      	add	r7, sp, #0
 8016b70:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d009      	beq.n	8016b8c <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	68db      	ldr	r3, [r3, #12]
 8016b7e:	687a      	ldr	r2, [r7, #4]
 8016b80:	6812      	ldr	r2, [r2, #0]
 8016b82:	4610      	mov	r0, r2
 8016b84:	4798      	blx	r3
    free(fd);
 8016b86:	6878      	ldr	r0, [r7, #4]
 8016b88:	f7f5 fd9e 	bl	800c6c8 <vPortFree>
  }
}
 8016b8c:	bf00      	nop
 8016b8e:	3708      	adds	r7, #8
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}

08016b94 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8016b94:	b480      	push	{r7}
 8016b96:	b085      	sub	sp, #20
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	60f8      	str	r0, [r7, #12]
 8016b9c:	60b9      	str	r1, [r7, #8]
 8016b9e:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8016ba0:	2300      	movs	r3, #0
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3714      	adds	r7, #20
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bac:	4770      	bx	lr

08016bae <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8016bae:	b480      	push	{r7}
 8016bb0:	b085      	sub	sp, #20
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	60f8      	str	r0, [r7, #12]
 8016bb6:	60b9      	str	r1, [r7, #8]
 8016bb8:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8016bba:	bf00      	nop
 8016bbc:	3714      	adds	r7, #20
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr

08016bc6 <p_open>:
static void *p_open(const char *path, int flags) {
 8016bc6:	b480      	push	{r7}
 8016bc8:	b083      	sub	sp, #12
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	6078      	str	r0, [r7, #4]
 8016bce:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8016bd0:	2300      	movs	r3, #0
}
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	370c      	adds	r7, #12
 8016bd6:	46bd      	mov	sp, r7
 8016bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bdc:	4770      	bx	lr

08016bde <p_close>:
static void p_close(void *fp) {
 8016bde:	b480      	push	{r7}
 8016be0:	b083      	sub	sp, #12
 8016be2:	af00      	add	r7, sp, #0
 8016be4:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8016be6:	bf00      	nop
 8016be8:	370c      	adds	r7, #12
 8016bea:	46bd      	mov	sp, r7
 8016bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf0:	4770      	bx	lr

08016bf2 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8016bf2:	b480      	push	{r7}
 8016bf4:	b085      	sub	sp, #20
 8016bf6:	af00      	add	r7, sp, #0
 8016bf8:	60f8      	str	r0, [r7, #12]
 8016bfa:	60b9      	str	r1, [r7, #8]
 8016bfc:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8016bfe:	2300      	movs	r3, #0
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3714      	adds	r7, #20
 8016c04:	46bd      	mov	sp, r7
 8016c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0a:	4770      	bx	lr

08016c0c <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8016c0c:	b480      	push	{r7}
 8016c0e:	b085      	sub	sp, #20
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	60f8      	str	r0, [r7, #12]
 8016c14:	60b9      	str	r1, [r7, #8]
 8016c16:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8016c18:	2300      	movs	r3, #0
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3714      	adds	r7, #20
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c24:	4770      	bx	lr

08016c26 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8016c26:	b480      	push	{r7}
 8016c28:	b083      	sub	sp, #12
 8016c2a:	af00      	add	r7, sp, #0
 8016c2c:	6078      	str	r0, [r7, #4]
 8016c2e:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8016c30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	370c      	adds	r7, #12
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8016c40:	b480      	push	{r7}
 8016c42:	b083      	sub	sp, #12
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
 8016c48:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8016c4a:	2300      	movs	r3, #0
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	370c      	adds	r7, #12
 8016c50:	46bd      	mov	sp, r7
 8016c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c56:	4770      	bx	lr

08016c58 <p_remove>:
static bool p_remove(const char *path) {
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8016c60:	2300      	movs	r3, #0
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	370c      	adds	r7, #12
 8016c66:	46bd      	mov	sp, r7
 8016c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6c:	4770      	bx	lr

08016c6e <p_mkdir>:
static bool p_mkdir(const char *path) {
 8016c6e:	b480      	push	{r7}
 8016c70:	b083      	sub	sp, #12
 8016c72:	af00      	add	r7, sp, #0
 8016c74:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8016c76:	2300      	movs	r3, #0
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	370c      	adds	r7, #12
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c82:	4770      	bx	lr

08016c84 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8016c84:	b480      	push	{r7}
 8016c86:	b089      	sub	sp, #36	@ 0x24
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	60f8      	str	r0, [r7, #12]
 8016c8c:	60b9      	str	r1, [r7, #8]
 8016c8e:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8016c90:	2300      	movs	r3, #0
 8016c92:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d02d      	beq.n	8016cf6 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	1c5a      	adds	r2, r3, #1
 8016c9e:	60fa      	str	r2, [r7, #12]
 8016ca0:	781b      	ldrb	r3, [r3, #0]
 8016ca2:	61bb      	str	r3, [r7, #24]
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	1c5a      	adds	r2, r3, #1
 8016ca8:	60ba      	str	r2, [r7, #8]
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8016cae:	69bb      	ldr	r3, [r7, #24]
 8016cb0:	2b40      	cmp	r3, #64	@ 0x40
 8016cb2:	dd05      	ble.n	8016cc0 <mg_ncasecmp+0x3c>
 8016cb4:	69bb      	ldr	r3, [r7, #24]
 8016cb6:	2b5a      	cmp	r3, #90	@ 0x5a
 8016cb8:	dc02      	bgt.n	8016cc0 <mg_ncasecmp+0x3c>
 8016cba:	69bb      	ldr	r3, [r7, #24]
 8016cbc:	3320      	adds	r3, #32
 8016cbe:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8016cc0:	697b      	ldr	r3, [r7, #20]
 8016cc2:	2b40      	cmp	r3, #64	@ 0x40
 8016cc4:	dd05      	ble.n	8016cd2 <mg_ncasecmp+0x4e>
 8016cc6:	697b      	ldr	r3, [r7, #20]
 8016cc8:	2b5a      	cmp	r3, #90	@ 0x5a
 8016cca:	dc02      	bgt.n	8016cd2 <mg_ncasecmp+0x4e>
 8016ccc:	697b      	ldr	r3, [r7, #20]
 8016cce:	3320      	adds	r3, #32
 8016cd0:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8016cd2:	69ba      	ldr	r2, [r7, #24]
 8016cd4:	697b      	ldr	r3, [r7, #20]
 8016cd6:	1ad3      	subs	r3, r2, r3
 8016cd8:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8016cda:	69fb      	ldr	r3, [r7, #28]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d10a      	bne.n	8016cf6 <mg_ncasecmp+0x72>
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	3b01      	subs	r3, #1
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d005      	beq.n	8016cf6 <mg_ncasecmp+0x72>
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	3b01      	subs	r3, #1
 8016cee:	607b      	str	r3, [r7, #4]
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d1d1      	bne.n	8016c9a <mg_ncasecmp+0x16>
  return diff;
 8016cf6:	69fb      	ldr	r3, [r7, #28]
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3724      	adds	r7, #36	@ 0x24
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d02:	4770      	bx	lr

08016d04 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8016d04:	b480      	push	{r7}
 8016d06:	b08b      	sub	sp, #44	@ 0x2c
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	f107 0308 	add.w	r3, r7, #8
 8016d0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d12:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8016d14:	2300      	movs	r3, #0
 8016d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8016d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d1c:	61bb      	str	r3, [r7, #24]
 8016d1e:	69bb      	ldr	r3, [r7, #24]
 8016d20:	4a42      	ldr	r2, [pc, #264]	@ (8016e2c <mg_to_size_t+0x128>)
 8016d22:	fba2 2303 	umull	r2, r3, r2, r3
 8016d26:	08db      	lsrs	r3, r3, #3
 8016d28:	617b      	str	r3, [r7, #20]
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	623b      	str	r3, [r7, #32]
 8016d2e:	2300      	movs	r3, #0
 8016d30:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8016d32:	e002      	b.n	8016d3a <mg_to_size_t+0x36>
 8016d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d36:	3301      	adds	r3, #1
 8016d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d3e:	429a      	cmp	r2, r3
 8016d40:	d20b      	bcs.n	8016d5a <mg_to_size_t+0x56>
 8016d42:	68ba      	ldr	r2, [r7, #8]
 8016d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d46:	4413      	add	r3, r2
 8016d48:	781b      	ldrb	r3, [r3, #0]
 8016d4a:	2b20      	cmp	r3, #32
 8016d4c:	d0f2      	beq.n	8016d34 <mg_to_size_t+0x30>
 8016d4e:	68ba      	ldr	r2, [r7, #8]
 8016d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d52:	4413      	add	r3, r2
 8016d54:	781b      	ldrb	r3, [r3, #0]
 8016d56:	2b09      	cmp	r3, #9
 8016d58:	d0ec      	beq.n	8016d34 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d22b      	bcs.n	8016dba <mg_to_size_t+0xb6>
 8016d62:	68ba      	ldr	r2, [r7, #8]
 8016d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d66:	4413      	add	r3, r2
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8016d6c:	d125      	bne.n	8016dba <mg_to_size_t+0xb6>
 8016d6e:	2300      	movs	r3, #0
 8016d70:	e056      	b.n	8016e20 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8016d72:	68ba      	ldr	r2, [r7, #8]
 8016d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d76:	4413      	add	r3, r2
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	3b30      	subs	r3, #48	@ 0x30
 8016d7c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8016d7e:	6a3a      	ldr	r2, [r7, #32]
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	429a      	cmp	r2, r3
 8016d84:	d901      	bls.n	8016d8a <mg_to_size_t+0x86>
 8016d86:	2300      	movs	r3, #0
 8016d88:	e04a      	b.n	8016e20 <mg_to_size_t+0x11c>
    result *= 10;
 8016d8a:	6a3a      	ldr	r2, [r7, #32]
 8016d8c:	4613      	mov	r3, r2
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	4413      	add	r3, r2
 8016d92:	005b      	lsls	r3, r3, #1
 8016d94:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8016d96:	69ba      	ldr	r2, [r7, #24]
 8016d98:	693b      	ldr	r3, [r7, #16]
 8016d9a:	1ad3      	subs	r3, r2, r3
 8016d9c:	6a3a      	ldr	r2, [r7, #32]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d901      	bls.n	8016da6 <mg_to_size_t+0xa2>
 8016da2:	2300      	movs	r3, #0
 8016da4:	e03c      	b.n	8016e20 <mg_to_size_t+0x11c>
    result += digit;
 8016da6:	6a3a      	ldr	r2, [r7, #32]
 8016da8:	693b      	ldr	r3, [r7, #16]
 8016daa:	4413      	add	r3, r2
 8016dac:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8016dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016db0:	3301      	adds	r3, #1
 8016db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016db4:	69fb      	ldr	r3, [r7, #28]
 8016db6:	3301      	adds	r3, #1
 8016db8:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	d20f      	bcs.n	8016de2 <mg_to_size_t+0xde>
 8016dc2:	68ba      	ldr	r2, [r7, #8]
 8016dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dc6:	4413      	add	r3, r2
 8016dc8:	781b      	ldrb	r3, [r3, #0]
 8016dca:	2b2f      	cmp	r3, #47	@ 0x2f
 8016dcc:	d909      	bls.n	8016de2 <mg_to_size_t+0xde>
 8016dce:	68ba      	ldr	r2, [r7, #8]
 8016dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dd2:	4413      	add	r3, r2
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	2b39      	cmp	r3, #57	@ 0x39
 8016dd8:	d9cb      	bls.n	8016d72 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8016dda:	e002      	b.n	8016de2 <mg_to_size_t+0xde>
 8016ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dde:	3301      	adds	r3, #1
 8016de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d20b      	bcs.n	8016e02 <mg_to_size_t+0xfe>
 8016dea:	68ba      	ldr	r2, [r7, #8]
 8016dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dee:	4413      	add	r3, r2
 8016df0:	781b      	ldrb	r3, [r3, #0]
 8016df2:	2b20      	cmp	r3, #32
 8016df4:	d0f2      	beq.n	8016ddc <mg_to_size_t+0xd8>
 8016df6:	68ba      	ldr	r2, [r7, #8]
 8016df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dfa:	4413      	add	r3, r2
 8016dfc:	781b      	ldrb	r3, [r3, #0]
 8016dfe:	2b09      	cmp	r3, #9
 8016e00:	d0ec      	beq.n	8016ddc <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8016e02:	69fb      	ldr	r3, [r7, #28]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d101      	bne.n	8016e0c <mg_to_size_t+0x108>
 8016e08:	2300      	movs	r3, #0
 8016e0a:	e009      	b.n	8016e20 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e10:	429a      	cmp	r2, r3
 8016e12:	d001      	beq.n	8016e18 <mg_to_size_t+0x114>
 8016e14:	2300      	movs	r3, #0
 8016e16:	e003      	b.n	8016e20 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	6a3a      	ldr	r2, [r7, #32]
 8016e1c:	601a      	str	r2, [r3, #0]
  return true;
 8016e1e:	2301      	movs	r3, #1
}
 8016e20:	4618      	mov	r0, r3
 8016e22:	372c      	adds	r7, #44	@ 0x2c
 8016e24:	46bd      	mov	sp, r7
 8016e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2a:	4770      	bx	lr
 8016e2c:	cccccccd 	.word	0xcccccccd

08016e30 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8016e30:	b082      	sub	sp, #8
 8016e32:	b580      	push	{r7, lr}
 8016e34:	b08e      	sub	sp, #56	@ 0x38
 8016e36:	af02      	add	r7, sp, #8
 8016e38:	60f8      	str	r0, [r7, #12]
 8016e3a:	1d38      	adds	r0, r7, #4
 8016e3c:	e880 0006 	stmia.w	r0, {r1, r2}
 8016e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8016e42:	f107 0310 	add.w	r3, r7, #16
 8016e46:	2200      	movs	r2, #0
 8016e48:	2100      	movs	r1, #0
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f00a fe97 	bl	8021b7e <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8016e50:	e023      	b.n	8016e9a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8016e52:	f107 0318 	add.w	r3, r7, #24
 8016e56:	f107 0220 	add.w	r2, r7, #32
 8016e5a:	213d      	movs	r1, #61	@ 0x3d
 8016e5c:	9100      	str	r1, [sp, #0]
 8016e5e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016e62:	c903      	ldmia	r1, {r0, r1}
 8016e64:	f00b f835 	bl	8021ed2 <mg_span>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d015      	beq.n	8016e9a <mg_http_var+0x6a>
 8016e6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d111      	bne.n	8016e9a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8016e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e78:	6a39      	ldr	r1, [r7, #32]
 8016e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f7ff ff01 	bl	8016c84 <mg_ncasecmp>
 8016e82:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d108      	bne.n	8016e9a <mg_http_var+0x6a>
      result = v;
 8016e88:	f107 0310 	add.w	r3, r7, #16
 8016e8c:	f107 0218 	add.w	r2, r7, #24
 8016e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e94:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8016e98:	e00b      	b.n	8016eb2 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8016e9a:	1d3b      	adds	r3, r7, #4
 8016e9c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8016ea0:	2126      	movs	r1, #38	@ 0x26
 8016ea2:	9100      	str	r1, [sp, #0]
 8016ea4:	1d39      	adds	r1, r7, #4
 8016ea6:	c903      	ldmia	r1, {r0, r1}
 8016ea8:	f00b f813 	bl	8021ed2 <mg_span>
 8016eac:	4603      	mov	r3, r0
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d1cf      	bne.n	8016e52 <mg_http_var+0x22>
    }
  }
  return result;
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	f107 0310 	add.w	r3, r7, #16
 8016eba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ebe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8016ec2:	68f8      	ldr	r0, [r7, #12]
 8016ec4:	3730      	adds	r7, #48	@ 0x30
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016ecc:	b002      	add	sp, #8
 8016ece:	4770      	bx	lr

08016ed0 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b08c      	sub	sp, #48	@ 0x30
 8016ed4:	af02      	add	r7, sp, #8
 8016ed6:	60f8      	str	r0, [r7, #12]
 8016ed8:	60b9      	str	r1, [r7, #8]
 8016eda:	607a      	str	r2, [r7, #4]
 8016edc:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d005      	beq.n	8016ef0 <mg_http_get_var+0x20>
 8016ee4:	683b      	ldr	r3, [r7, #0]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d002      	beq.n	8016ef0 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2200      	movs	r2, #0
 8016eee:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d002      	beq.n	8016efc <mg_http_get_var+0x2c>
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d103      	bne.n	8016f04 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8016efc:	f06f 0301 	mvn.w	r3, #1
 8016f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f02:	e033      	b.n	8016f6c <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d006      	beq.n	8016f1a <mg_http_get_var+0x4a>
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d003      	beq.n	8016f1a <mg_http_get_var+0x4a>
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d103      	bne.n	8016f22 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8016f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f20:	e024      	b.n	8016f6c <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8016f22:	f107 031c 	add.w	r3, r7, #28
 8016f26:	68b9      	ldr	r1, [r7, #8]
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f00a fe0b 	bl	8021b44 <mg_str_s>
 8016f2e:	f107 0014 	add.w	r0, r7, #20
 8016f32:	68fa      	ldr	r2, [r7, #12]
 8016f34:	6a3b      	ldr	r3, [r7, #32]
 8016f36:	9300      	str	r3, [sp, #0]
 8016f38:	69fb      	ldr	r3, [r7, #28]
 8016f3a:	ca06      	ldmia	r2, {r1, r2}
 8016f3c:	f7ff ff78 	bl	8016e30 <mg_http_var>
    if (v.buf == NULL) {
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d103      	bne.n	8016f4e <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8016f46:	f06f 0303 	mvn.w	r3, #3
 8016f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016f4c:	e00e      	b.n	8016f6c <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8016f4e:	6978      	ldr	r0, [r7, #20]
 8016f50:	69b9      	ldr	r1, [r7, #24]
 8016f52:	2301      	movs	r3, #1
 8016f54:	9300      	str	r3, [sp, #0]
 8016f56:	683b      	ldr	r3, [r7, #0]
 8016f58:	687a      	ldr	r2, [r7, #4]
 8016f5a:	f000 f82e 	bl	8016fba <mg_url_decode>
 8016f5e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8016f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	da02      	bge.n	8016f6c <mg_http_get_var+0x9c>
 8016f66:	f06f 0302 	mvn.w	r3, #2
 8016f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8016f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016f6e:	4618      	mov	r0, r3
 8016f70:	3728      	adds	r7, #40	@ 0x28
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}

08016f76 <isx>:

static bool isx(int c) {
 8016f76:	b480      	push	{r7}
 8016f78:	b083      	sub	sp, #12
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	2b2f      	cmp	r3, #47	@ 0x2f
 8016f82:	dd02      	ble.n	8016f8a <isx+0x14>
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2b39      	cmp	r3, #57	@ 0x39
 8016f88:	dd0b      	ble.n	8016fa2 <isx+0x2c>
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	2b60      	cmp	r3, #96	@ 0x60
 8016f8e:	dd02      	ble.n	8016f96 <isx+0x20>
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	2b66      	cmp	r3, #102	@ 0x66
 8016f94:	dd05      	ble.n	8016fa2 <isx+0x2c>
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	2b40      	cmp	r3, #64	@ 0x40
 8016f9a:	dd04      	ble.n	8016fa6 <isx+0x30>
         (c >= 'A' && c <= 'F');
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2b46      	cmp	r3, #70	@ 0x46
 8016fa0:	dc01      	bgt.n	8016fa6 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	e000      	b.n	8016fa8 <isx+0x32>
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	f003 0301 	and.w	r3, r3, #1
 8016fac:	b2db      	uxtb	r3, r3
}
 8016fae:	4618      	mov	r0, r3
 8016fb0:	370c      	adds	r7, #12
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr

08016fba <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8016fba:	b580      	push	{r7, lr}
 8016fbc:	b08a      	sub	sp, #40	@ 0x28
 8016fbe:	af02      	add	r7, sp, #8
 8016fc0:	60f8      	str	r0, [r7, #12]
 8016fc2:	60b9      	str	r1, [r7, #8]
 8016fc4:	607a      	str	r2, [r7, #4]
 8016fc6:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8016fc8:	2300      	movs	r3, #0
 8016fca:	61bb      	str	r3, [r7, #24]
 8016fcc:	69bb      	ldr	r3, [r7, #24]
 8016fce:	61fb      	str	r3, [r7, #28]
 8016fd0:	e059      	b.n	8017086 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8016fd2:	68fa      	ldr	r2, [r7, #12]
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	4413      	add	r3, r2
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	2b25      	cmp	r3, #37	@ 0x25
 8016fdc:	d136      	bne.n	801704c <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8016fde:	69fb      	ldr	r3, [r7, #28]
 8016fe0:	3302      	adds	r3, #2
 8016fe2:	68ba      	ldr	r2, [r7, #8]
 8016fe4:	429a      	cmp	r2, r3
 8016fe6:	d92e      	bls.n	8017046 <mg_url_decode+0x8c>
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	3301      	adds	r3, #1
 8016fec:	68fa      	ldr	r2, [r7, #12]
 8016fee:	4413      	add	r3, r2
 8016ff0:	781b      	ldrb	r3, [r3, #0]
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7ff ffbf 	bl	8016f76 <isx>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d023      	beq.n	8017046 <mg_url_decode+0x8c>
 8016ffe:	69fb      	ldr	r3, [r7, #28]
 8017000:	3302      	adds	r3, #2
 8017002:	68fa      	ldr	r2, [r7, #12]
 8017004:	4413      	add	r3, r2
 8017006:	781b      	ldrb	r3, [r3, #0]
 8017008:	4618      	mov	r0, r3
 801700a:	f7ff ffb4 	bl	8016f76 <isx>
 801700e:	4603      	mov	r3, r0
 8017010:	2b00      	cmp	r3, #0
 8017012:	d018      	beq.n	8017046 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8017014:	69fb      	ldr	r3, [r7, #28]
 8017016:	3301      	adds	r3, #1
 8017018:	68fa      	ldr	r2, [r7, #12]
 801701a:	18d1      	adds	r1, r2, r3
 801701c:	f107 0310 	add.w	r3, r7, #16
 8017020:	2202      	movs	r2, #2
 8017022:	4618      	mov	r0, r3
 8017024:	f00a fdab 	bl	8021b7e <mg_str_n>
 8017028:	687a      	ldr	r2, [r7, #4]
 801702a:	69bb      	ldr	r3, [r7, #24]
 801702c:	4413      	add	r3, r2
 801702e:	2201      	movs	r2, #1
 8017030:	9200      	str	r2, [sp, #0]
 8017032:	2210      	movs	r2, #16
 8017034:	f107 0110 	add.w	r1, r7, #16
 8017038:	c903      	ldmia	r1, {r0, r1}
 801703a:	f00a ffa7 	bl	8021f8c <mg_str_to_num>
        i += 2;
 801703e:	69fb      	ldr	r3, [r7, #28]
 8017040:	3302      	adds	r3, #2
 8017042:	61fb      	str	r3, [r7, #28]
 8017044:	e019      	b.n	801707a <mg_url_decode+0xc0>
      } else {
        return -1;
 8017046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801704a:	e03a      	b.n	80170c2 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 801704c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801704e:	2b00      	cmp	r3, #0
 8017050:	d00b      	beq.n	801706a <mg_url_decode+0xb0>
 8017052:	68fa      	ldr	r2, [r7, #12]
 8017054:	69fb      	ldr	r3, [r7, #28]
 8017056:	4413      	add	r3, r2
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	2b2b      	cmp	r3, #43	@ 0x2b
 801705c:	d105      	bne.n	801706a <mg_url_decode+0xb0>
      dst[j] = ' ';
 801705e:	687a      	ldr	r2, [r7, #4]
 8017060:	69bb      	ldr	r3, [r7, #24]
 8017062:	4413      	add	r3, r2
 8017064:	2220      	movs	r2, #32
 8017066:	701a      	strb	r2, [r3, #0]
 8017068:	e007      	b.n	801707a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 801706a:	68fa      	ldr	r2, [r7, #12]
 801706c:	69fb      	ldr	r3, [r7, #28]
 801706e:	441a      	add	r2, r3
 8017070:	6879      	ldr	r1, [r7, #4]
 8017072:	69bb      	ldr	r3, [r7, #24]
 8017074:	440b      	add	r3, r1
 8017076:	7812      	ldrb	r2, [r2, #0]
 8017078:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 801707a:	69fb      	ldr	r3, [r7, #28]
 801707c:	3301      	adds	r3, #1
 801707e:	61fb      	str	r3, [r7, #28]
 8017080:	69bb      	ldr	r3, [r7, #24]
 8017082:	3301      	adds	r3, #1
 8017084:	61bb      	str	r3, [r7, #24]
 8017086:	69fa      	ldr	r2, [r7, #28]
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	429a      	cmp	r2, r3
 801708c:	d204      	bcs.n	8017098 <mg_url_decode+0xde>
 801708e:	69bb      	ldr	r3, [r7, #24]
 8017090:	3301      	adds	r3, #1
 8017092:	683a      	ldr	r2, [r7, #0]
 8017094:	429a      	cmp	r2, r3
 8017096:	d89c      	bhi.n	8016fd2 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8017098:	69ba      	ldr	r2, [r7, #24]
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	429a      	cmp	r2, r3
 801709e:	d204      	bcs.n	80170aa <mg_url_decode+0xf0>
 80170a0:	687a      	ldr	r2, [r7, #4]
 80170a2:	69bb      	ldr	r3, [r7, #24]
 80170a4:	4413      	add	r3, r2
 80170a6:	2200      	movs	r2, #0
 80170a8:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 80170aa:	69fa      	ldr	r2, [r7, #28]
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	429a      	cmp	r2, r3
 80170b0:	d305      	bcc.n	80170be <mg_url_decode+0x104>
 80170b2:	69ba      	ldr	r2, [r7, #24]
 80170b4:	683b      	ldr	r3, [r7, #0]
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d201      	bcs.n	80170be <mg_url_decode+0x104>
 80170ba:	69bb      	ldr	r3, [r7, #24]
 80170bc:	e001      	b.n	80170c2 <mg_url_decode+0x108>
 80170be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	3720      	adds	r7, #32
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}

080170ca <isok>:

static bool isok(uint8_t c) {
 80170ca:	b480      	push	{r7}
 80170cc:	b083      	sub	sp, #12
 80170ce:	af00      	add	r7, sp, #0
 80170d0:	4603      	mov	r3, r0
 80170d2:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 80170d4:	79fb      	ldrb	r3, [r7, #7]
 80170d6:	2b0a      	cmp	r3, #10
 80170d8:	d008      	beq.n	80170ec <isok+0x22>
 80170da:	79fb      	ldrb	r3, [r7, #7]
 80170dc:	2b0d      	cmp	r3, #13
 80170de:	d005      	beq.n	80170ec <isok+0x22>
 80170e0:	79fb      	ldrb	r3, [r7, #7]
 80170e2:	2b09      	cmp	r3, #9
 80170e4:	d002      	beq.n	80170ec <isok+0x22>
 80170e6:	79fb      	ldrb	r3, [r7, #7]
 80170e8:	2b1f      	cmp	r3, #31
 80170ea:	d901      	bls.n	80170f0 <isok+0x26>
 80170ec:	2301      	movs	r3, #1
 80170ee:	e000      	b.n	80170f2 <isok+0x28>
 80170f0:	2300      	movs	r3, #0
 80170f2:	f003 0301 	and.w	r3, r3, #1
 80170f6:	b2db      	uxtb	r3, r3
}
 80170f8:	4618      	mov	r0, r3
 80170fa:	370c      	adds	r7, #12
 80170fc:	46bd      	mov	sp, r7
 80170fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017102:	4770      	bx	lr

08017104 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8017104:	b580      	push	{r7, lr}
 8017106:	b084      	sub	sp, #16
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
 801710c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 801710e:	2300      	movs	r3, #0
 8017110:	60fb      	str	r3, [r7, #12]
 8017112:	e03c      	b.n	801718e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8017114:	687a      	ldr	r2, [r7, #4]
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	4413      	add	r3, r2
 801711a:	781b      	ldrb	r3, [r3, #0]
 801711c:	4618      	mov	r0, r3
 801711e:	f7ff ffd4 	bl	80170ca <isok>
 8017122:	4603      	mov	r3, r0
 8017124:	f083 0301 	eor.w	r3, r3, #1
 8017128:	b2db      	uxtb	r3, r3
 801712a:	2b00      	cmp	r3, #0
 801712c:	d002      	beq.n	8017134 <mg_http_get_request_len+0x30>
 801712e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017132:	e031      	b.n	8017198 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d00c      	beq.n	8017154 <mg_http_get_request_len+0x50>
 801713a:	687a      	ldr	r2, [r7, #4]
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	4413      	add	r3, r2
 8017140:	781b      	ldrb	r3, [r3, #0]
 8017142:	2b0a      	cmp	r3, #10
 8017144:	d106      	bne.n	8017154 <mg_http_get_request_len+0x50>
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	3b01      	subs	r3, #1
 801714a:	687a      	ldr	r2, [r7, #4]
 801714c:	4413      	add	r3, r2
 801714e:	781b      	ldrb	r3, [r3, #0]
 8017150:	2b0a      	cmp	r3, #10
 8017152:	d016      	beq.n	8017182 <mg_http_get_request_len+0x7e>
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	2b03      	cmp	r3, #3
 8017158:	d916      	bls.n	8017188 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 801715a:	687a      	ldr	r2, [r7, #4]
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	4413      	add	r3, r2
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	2b0a      	cmp	r3, #10
 8017164:	d110      	bne.n	8017188 <mg_http_get_request_len+0x84>
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	3b01      	subs	r3, #1
 801716a:	687a      	ldr	r2, [r7, #4]
 801716c:	4413      	add	r3, r2
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	2b0d      	cmp	r3, #13
 8017172:	d109      	bne.n	8017188 <mg_http_get_request_len+0x84>
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	3b02      	subs	r3, #2
 8017178:	687a      	ldr	r2, [r7, #4]
 801717a:	4413      	add	r3, r2
 801717c:	781b      	ldrb	r3, [r3, #0]
 801717e:	2b0a      	cmp	r3, #10
 8017180:	d102      	bne.n	8017188 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	3301      	adds	r3, #1
 8017186:	e007      	b.n	8017198 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	3301      	adds	r3, #1
 801718c:	60fb      	str	r3, [r7, #12]
 801718e:	68fa      	ldr	r2, [r7, #12]
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	429a      	cmp	r2, r3
 8017194:	d3be      	bcc.n	8017114 <mg_http_get_request_len+0x10>
  }
  return 0;
 8017196:	2300      	movs	r3, #0
}
 8017198:	4618      	mov	r0, r3
 801719a:	3710      	adds	r7, #16
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}

080171a0 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b088      	sub	sp, #32
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 80171aa:	6838      	ldr	r0, [r7, #0]
 80171ac:	f7e9 f878 	bl	80002a0 <strlen>
 80171b0:	61b8      	str	r0, [r7, #24]
 80171b2:	231e      	movs	r3, #30
 80171b4:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80171b6:	2300      	movs	r3, #0
 80171b8:	61fb      	str	r3, [r7, #28]
 80171ba:	e01f      	b.n	80171fc <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 80171bc:	69fb      	ldr	r3, [r7, #28]
 80171be:	3302      	adds	r3, #2
 80171c0:	011b      	lsls	r3, r3, #4
 80171c2:	687a      	ldr	r2, [r7, #4]
 80171c4:	4413      	add	r3, r2
 80171c6:	613b      	str	r3, [r7, #16]
 80171c8:	69fb      	ldr	r3, [r7, #28]
 80171ca:	011b      	lsls	r3, r3, #4
 80171cc:	3328      	adds	r3, #40	@ 0x28
 80171ce:	687a      	ldr	r2, [r7, #4]
 80171d0:	4413      	add	r3, r2
 80171d2:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	685b      	ldr	r3, [r3, #4]
 80171d8:	69ba      	ldr	r2, [r7, #24]
 80171da:	429a      	cmp	r2, r3
 80171dc:	d10b      	bne.n	80171f6 <mg_http_get_header+0x56>
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	69ba      	ldr	r2, [r7, #24]
 80171e4:	6839      	ldr	r1, [r7, #0]
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7ff fd4c 	bl	8016c84 <mg_ncasecmp>
 80171ec:	4603      	mov	r3, r0
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d101      	bne.n	80171f6 <mg_http_get_header+0x56>
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	e010      	b.n	8017218 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 80171f6:	69fb      	ldr	r3, [r7, #28]
 80171f8:	3301      	adds	r3, #1
 80171fa:	61fb      	str	r3, [r7, #28]
 80171fc:	69fa      	ldr	r2, [r7, #28]
 80171fe:	697b      	ldr	r3, [r7, #20]
 8017200:	429a      	cmp	r2, r3
 8017202:	d208      	bcs.n	8017216 <mg_http_get_header+0x76>
 8017204:	687a      	ldr	r2, [r7, #4]
 8017206:	69fb      	ldr	r3, [r7, #28]
 8017208:	3302      	adds	r3, #2
 801720a:	011b      	lsls	r3, r3, #4
 801720c:	4413      	add	r3, r2
 801720e:	3304      	adds	r3, #4
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d1d2      	bne.n	80171bc <mg_http_get_header+0x1c>
  }
  return NULL;
 8017216:	2300      	movs	r3, #0
}
 8017218:	4618      	mov	r0, r3
 801721a:	3720      	adds	r7, #32
 801721c:	46bd      	mov	sp, r7
 801721e:	bd80      	pop	{r7, pc}

08017220 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 8017220:	b480      	push	{r7}
 8017222:	b083      	sub	sp, #12
 8017224:	af00      	add	r7, sp, #0
 8017226:	4603      	mov	r3, r0
 8017228:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 801722a:	79fb      	ldrb	r3, [r7, #7]
 801722c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017230:	2b80      	cmp	r3, #128	@ 0x80
 8017232:	bf0c      	ite	eq
 8017234:	2301      	moveq	r3, #1
 8017236:	2300      	movne	r3, #0
 8017238:	b2db      	uxtb	r3, r3
}
 801723a:	4618      	mov	r0, r3
 801723c:	370c      	adds	r7, #12
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr

08017246 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 8017246:	b580      	push	{r7, lr}
 8017248:	b086      	sub	sp, #24
 801724a:	af00      	add	r7, sp, #0
 801724c:	6078      	str	r0, [r7, #4]
 801724e:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	617b      	str	r3, [r7, #20]
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	781b      	ldrb	r3, [r3, #0]
 8017258:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 801725a:	683a      	ldr	r2, [r7, #0]
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	1ad3      	subs	r3, r2, r3
 8017260:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c < '~') return 1;  // Usual ascii printed char
 8017262:	7cfb      	ldrb	r3, [r7, #19]
 8017264:	2b20      	cmp	r3, #32
 8017266:	d904      	bls.n	8017272 <clen+0x2c>
 8017268:	7cfb      	ldrb	r3, [r7, #19]
 801726a:	2b7d      	cmp	r3, #125	@ 0x7d
 801726c:	d801      	bhi.n	8017272 <clen+0x2c>
 801726e:	2301      	movs	r3, #1
 8017270:	e054      	b.n	801731c <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8017272:	7cfb      	ldrb	r3, [r7, #19]
 8017274:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8017278:	2bc0      	cmp	r3, #192	@ 0xc0
 801727a:	d10d      	bne.n	8017298 <clen+0x52>
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	2b01      	cmp	r3, #1
 8017280:	dd0a      	ble.n	8017298 <clen+0x52>
 8017282:	697b      	ldr	r3, [r7, #20]
 8017284:	3301      	adds	r3, #1
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	4618      	mov	r0, r3
 801728a:	f7ff ffc9 	bl	8017220 <vcb>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d001      	beq.n	8017298 <clen+0x52>
 8017294:	2302      	movs	r3, #2
 8017296:	e041      	b.n	801731c <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8017298:	7cfb      	ldrb	r3, [r7, #19]
 801729a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801729e:	2be0      	cmp	r3, #224	@ 0xe0
 80172a0:	d116      	bne.n	80172d0 <clen+0x8a>
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	2b02      	cmp	r3, #2
 80172a6:	dd13      	ble.n	80172d0 <clen+0x8a>
 80172a8:	697b      	ldr	r3, [r7, #20]
 80172aa:	3301      	adds	r3, #1
 80172ac:	781b      	ldrb	r3, [r3, #0]
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7ff ffb6 	bl	8017220 <vcb>
 80172b4:	4603      	mov	r3, r0
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d00a      	beq.n	80172d0 <clen+0x8a>
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	3302      	adds	r3, #2
 80172be:	781b      	ldrb	r3, [r3, #0]
 80172c0:	4618      	mov	r0, r3
 80172c2:	f7ff ffad 	bl	8017220 <vcb>
 80172c6:	4603      	mov	r3, r0
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d001      	beq.n	80172d0 <clen+0x8a>
 80172cc:	2303      	movs	r3, #3
 80172ce:	e025      	b.n	801731c <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 80172d0:	7cfb      	ldrb	r3, [r7, #19]
 80172d2:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80172d6:	2bf0      	cmp	r3, #240	@ 0xf0
 80172d8:	d11f      	bne.n	801731a <clen+0xd4>
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	2b03      	cmp	r3, #3
 80172de:	dd1c      	ble.n	801731a <clen+0xd4>
 80172e0:	697b      	ldr	r3, [r7, #20]
 80172e2:	3301      	adds	r3, #1
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	4618      	mov	r0, r3
 80172e8:	f7ff ff9a 	bl	8017220 <vcb>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d013      	beq.n	801731a <clen+0xd4>
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	3302      	adds	r3, #2
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	4618      	mov	r0, r3
 80172fa:	f7ff ff91 	bl	8017220 <vcb>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d00a      	beq.n	801731a <clen+0xd4>
 8017304:	697b      	ldr	r3, [r7, #20]
 8017306:	3303      	adds	r3, #3
 8017308:	781b      	ldrb	r3, [r3, #0]
 801730a:	4618      	mov	r0, r3
 801730c:	f7ff ff88 	bl	8017220 <vcb>
 8017310:	4603      	mov	r3, r0
 8017312:	2b00      	cmp	r3, #0
 8017314:	d001      	beq.n	801731a <clen+0xd4>
    return 4;
 8017316:	2304      	movs	r3, #4
 8017318:	e000      	b.n	801731c <clen+0xd6>
  return 0;
 801731a:	2300      	movs	r3, #0
}
 801731c:	4618      	mov	r0, r3
 801731e:	3718      	adds	r7, #24
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}

08017324 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 8017324:	b480      	push	{r7}
 8017326:	b085      	sub	sp, #20
 8017328:	af00      	add	r7, sp, #0
 801732a:	60f8      	str	r0, [r7, #12]
 801732c:	60b9      	str	r1, [r7, #8]
 801732e:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	68fa      	ldr	r2, [r7, #12]
 8017334:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 8017336:	e007      	b.n	8017348 <skiptorn+0x24>
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	3301      	adds	r3, #1
 801733c:	60fb      	str	r3, [r7, #12]
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	1c5a      	adds	r2, r3, #1
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	605a      	str	r2, [r3, #4]
 8017348:	68fa      	ldr	r2, [r7, #12]
 801734a:	68bb      	ldr	r3, [r7, #8]
 801734c:	429a      	cmp	r2, r3
 801734e:	d207      	bcs.n	8017360 <skiptorn+0x3c>
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	2b0a      	cmp	r3, #10
 8017356:	d003      	beq.n	8017360 <skiptorn+0x3c>
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	781b      	ldrb	r3, [r3, #0]
 801735c:	2b0d      	cmp	r3, #13
 801735e:	d1eb      	bne.n	8017338 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 8017360:	68fa      	ldr	r2, [r7, #12]
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	429a      	cmp	r2, r3
 8017366:	d208      	bcs.n	801737a <skiptorn+0x56>
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	2b0d      	cmp	r3, #13
 801736e:	d106      	bne.n	801737e <skiptorn+0x5a>
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	3301      	adds	r3, #1
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	2b0a      	cmp	r3, #10
 8017378:	d001      	beq.n	801737e <skiptorn+0x5a>
 801737a:	2300      	movs	r3, #0
 801737c:	e017      	b.n	80173ae <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 801737e:	68fa      	ldr	r2, [r7, #12]
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	429a      	cmp	r2, r3
 8017384:	d206      	bcs.n	8017394 <skiptorn+0x70>
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	2b0d      	cmp	r3, #13
 801738c:	d102      	bne.n	8017394 <skiptorn+0x70>
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	3301      	adds	r3, #1
 8017392:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8017394:	68fa      	ldr	r2, [r7, #12]
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	429a      	cmp	r2, r3
 801739a:	d205      	bcs.n	80173a8 <skiptorn+0x84>
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	1c5a      	adds	r2, r3, #1
 80173a0:	60fa      	str	r2, [r7, #12]
 80173a2:	781b      	ldrb	r3, [r3, #0]
 80173a4:	2b0a      	cmp	r3, #10
 80173a6:	d001      	beq.n	80173ac <skiptorn+0x88>
 80173a8:	2300      	movs	r3, #0
 80173aa:	e000      	b.n	80173ae <skiptorn+0x8a>
  return s;
 80173ac:	68fb      	ldr	r3, [r7, #12]
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	3714      	adds	r7, #20
 80173b2:	46bd      	mov	sp, r7
 80173b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b8:	4770      	bx	lr

080173ba <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 80173ba:	b580      	push	{r7, lr}
 80173bc:	b08a      	sub	sp, #40	@ 0x28
 80173be:	af00      	add	r7, sp, #0
 80173c0:	60f8      	str	r0, [r7, #12]
 80173c2:	60b9      	str	r1, [r7, #8]
 80173c4:	607a      	str	r2, [r7, #4]
 80173c6:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 80173c8:	2300      	movs	r3, #0
 80173ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80173cc:	e09a      	b.n	8017504 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 80173ce:	2300      	movs	r3, #0
 80173d0:	61bb      	str	r3, [r7, #24]
 80173d2:	2300      	movs	r3, #0
 80173d4:	61fb      	str	r3, [r7, #28]
 80173d6:	2300      	movs	r3, #0
 80173d8:	613b      	str	r3, [r7, #16]
 80173da:	2300      	movs	r3, #0
 80173dc:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 80173de:	68fa      	ldr	r2, [r7, #12]
 80173e0:	68bb      	ldr	r3, [r7, #8]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d301      	bcc.n	80173ea <mg_http_parse_headers+0x30>
 80173e6:	2300      	movs	r3, #0
 80173e8:	e092      	b.n	8017510 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	2b0a      	cmp	r3, #10
 80173f0:	f000 808d 	beq.w	801750e <mg_http_parse_headers+0x154>
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	781b      	ldrb	r3, [r3, #0]
 80173f8:	2b0d      	cmp	r3, #13
 80173fa:	d105      	bne.n	8017408 <mg_http_parse_headers+0x4e>
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	3301      	adds	r3, #1
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	2b0a      	cmp	r3, #10
 8017404:	f000 8083 	beq.w	801750e <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 801740c:	e007      	b.n	801741e <mg_http_parse_headers+0x64>
 801740e:	68fa      	ldr	r2, [r7, #12]
 8017410:	6a3b      	ldr	r3, [r7, #32]
 8017412:	4413      	add	r3, r2
 8017414:	60fb      	str	r3, [r7, #12]
 8017416:	69fa      	ldr	r2, [r7, #28]
 8017418:	6a3b      	ldr	r3, [r7, #32]
 801741a:	4413      	add	r3, r2
 801741c:	61fb      	str	r3, [r7, #28]
 801741e:	68fa      	ldr	r2, [r7, #12]
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	429a      	cmp	r2, r3
 8017424:	d20b      	bcs.n	801743e <mg_http_parse_headers+0x84>
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	2b3a      	cmp	r3, #58	@ 0x3a
 801742c:	d007      	beq.n	801743e <mg_http_parse_headers+0x84>
 801742e:	68b9      	ldr	r1, [r7, #8]
 8017430:	68f8      	ldr	r0, [r7, #12]
 8017432:	f7ff ff08 	bl	8017246 <clen>
 8017436:	6238      	str	r0, [r7, #32]
 8017438:	6a3b      	ldr	r3, [r7, #32]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d1e7      	bne.n	801740e <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 801743e:	69fb      	ldr	r3, [r7, #28]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d101      	bne.n	8017448 <mg_http_parse_headers+0x8e>
 8017444:	2300      	movs	r3, #0
 8017446:	e063      	b.n	8017510 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8017448:	68fa      	ldr	r2, [r7, #12]
 801744a:	68bb      	ldr	r3, [r7, #8]
 801744c:	429a      	cmp	r2, r3
 801744e:	d206      	bcs.n	801745e <mg_http_parse_headers+0xa4>
 8017450:	68b9      	ldr	r1, [r7, #8]
 8017452:	68f8      	ldr	r0, [r7, #12]
 8017454:	f7ff fef7 	bl	8017246 <clen>
 8017458:	4603      	mov	r3, r0
 801745a:	2b00      	cmp	r3, #0
 801745c:	d101      	bne.n	8017462 <mg_http_parse_headers+0xa8>
 801745e:	2300      	movs	r3, #0
 8017460:	e056      	b.n	8017510 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	1c5a      	adds	r2, r3, #1
 8017466:	60fa      	str	r2, [r7, #12]
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	2b3a      	cmp	r3, #58	@ 0x3a
 801746c:	d004      	beq.n	8017478 <mg_http_parse_headers+0xbe>
 801746e:	2300      	movs	r3, #0
 8017470:	e04e      	b.n	8017510 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	3301      	adds	r3, #1
 8017476:	60fb      	str	r3, [r7, #12]
 8017478:	68fa      	ldr	r2, [r7, #12]
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	429a      	cmp	r2, r3
 801747e:	d207      	bcs.n	8017490 <mg_http_parse_headers+0xd6>
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	2b20      	cmp	r3, #32
 8017486:	d0f4      	beq.n	8017472 <mg_http_parse_headers+0xb8>
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	2b09      	cmp	r3, #9
 801748e:	d0f0      	beq.n	8017472 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8017490:	f107 0310 	add.w	r3, r7, #16
 8017494:	461a      	mov	r2, r3
 8017496:	68b9      	ldr	r1, [r7, #8]
 8017498:	68f8      	ldr	r0, [r7, #12]
 801749a:	f7ff ff43 	bl	8017324 <skiptorn>
 801749e:	60f8      	str	r0, [r7, #12]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d104      	bne.n	80174b0 <mg_http_parse_headers+0xf6>
 80174a6:	2300      	movs	r3, #0
 80174a8:	e032      	b.n	8017510 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 80174aa:	697b      	ldr	r3, [r7, #20]
 80174ac:	3b01      	subs	r3, #1
 80174ae:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 80174b0:	697b      	ldr	r3, [r7, #20]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d00d      	beq.n	80174d2 <mg_http_parse_headers+0x118>
 80174b6:	693a      	ldr	r2, [r7, #16]
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	3b01      	subs	r3, #1
 80174bc:	4413      	add	r3, r2
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	2b20      	cmp	r3, #32
 80174c2:	d0f2      	beq.n	80174aa <mg_http_parse_headers+0xf0>
 80174c4:	693a      	ldr	r2, [r7, #16]
 80174c6:	697b      	ldr	r3, [r7, #20]
 80174c8:	3b01      	subs	r3, #1
 80174ca:	4413      	add	r3, r2
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	2b09      	cmp	r3, #9
 80174d0:	d0eb      	beq.n	80174aa <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 80174d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174d4:	011b      	lsls	r3, r3, #4
 80174d6:	687a      	ldr	r2, [r7, #4]
 80174d8:	4413      	add	r3, r2
 80174da:	461a      	mov	r2, r3
 80174dc:	f107 0318 	add.w	r3, r7, #24
 80174e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80174e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80174e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174ea:	011b      	lsls	r3, r3, #4
 80174ec:	687a      	ldr	r2, [r7, #4]
 80174ee:	4413      	add	r3, r2
 80174f0:	3308      	adds	r3, #8
 80174f2:	f107 0210 	add.w	r2, r7, #16
 80174f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80174fa:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 80174fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017500:	3301      	adds	r3, #1
 8017502:	627b      	str	r3, [r7, #36]	@ 0x24
 8017504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	429a      	cmp	r2, r3
 801750a:	f4ff af60 	bcc.w	80173ce <mg_http_parse_headers+0x14>
  }
  return true;
 801750e:	2301      	movs	r3, #1
}
 8017510:	4618      	mov	r0, r3
 8017512:	3728      	adds	r7, #40	@ 0x28
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}

08017518 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8017518:	b580      	push	{r7, lr}
 801751a:	b090      	sub	sp, #64	@ 0x40
 801751c:	af00      	add	r7, sp, #0
 801751e:	60f8      	str	r0, [r7, #12]
 8017520:	60b9      	str	r1, [r7, #8]
 8017522:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8017524:	68b9      	ldr	r1, [r7, #8]
 8017526:	68f8      	ldr	r0, [r7, #12]
 8017528:	f7ff fdec 	bl	8017104 <mg_http_get_request_len>
 801752c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d003      	beq.n	801753c <mg_http_parse+0x24>
 8017534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017536:	68fa      	ldr	r2, [r7, #12]
 8017538:	4413      	add	r3, r2
 801753a:	e000      	b.n	801753e <mg_http_parse+0x26>
 801753c:	2300      	movs	r3, #0
 801753e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const struct mg_str *cl;
  size_t n;

  memset(hm, 0, sizeof(*hm));
 8017540:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017544:	2100      	movs	r1, #0
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f00e fc02 	bl	8025d50 <memset>
  if (req_len <= 0) return req_len;
 801754c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801754e:	2b00      	cmp	r3, #0
 8017550:	dc01      	bgt.n	8017556 <mg_http_parse+0x3e>
 8017552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017554:	e13f      	b.n	80177d6 <mg_http_parse+0x2be>

  hm->message.buf = hm->head.buf = (char *) s;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	68fa      	ldr	r2, [r7, #12]
 801755a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801756e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8017572:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017580:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	68fa      	ldr	r2, [r7, #12]
 8017594:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8017596:	e009      	b.n	80175ac <mg_http_parse+0x94>
 8017598:	68fa      	ldr	r2, [r7, #12]
 801759a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801759c:	4413      	add	r3, r2
 801759e:	60fb      	str	r3, [r7, #12]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	685a      	ldr	r2, [r3, #4]
 80175a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175a6:	441a      	add	r2, r3
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	605a      	str	r2, [r3, #4]
 80175ac:	68fa      	ldr	r2, [r7, #12]
 80175ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175b0:	429a      	cmp	r2, r3
 80175b2:	d20b      	bcs.n	80175cc <mg_http_parse+0xb4>
 80175b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80175b6:	68f8      	ldr	r0, [r7, #12]
 80175b8:	f7ff fe45 	bl	8017246 <clen>
 80175bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80175be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d1e9      	bne.n	8017598 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 80175c4:	e002      	b.n	80175cc <mg_http_parse+0xb4>
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	3301      	adds	r3, #1
 80175ca:	60fb      	str	r3, [r7, #12]
 80175cc:	68fa      	ldr	r2, [r7, #12]
 80175ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d203      	bcs.n	80175dc <mg_http_parse+0xc4>
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	781b      	ldrb	r3, [r3, #0]
 80175d8:	2b20      	cmp	r3, #32
 80175da:	d0f4      	beq.n	80175c6 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	68fa      	ldr	r2, [r7, #12]
 80175e0:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 80175e2:	e009      	b.n	80175f8 <mg_http_parse+0xe0>
 80175e4:	68fa      	ldr	r2, [r7, #12]
 80175e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175e8:	4413      	add	r3, r2
 80175ea:	60fb      	str	r3, [r7, #12]
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	68da      	ldr	r2, [r3, #12]
 80175f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175f2:	441a      	add	r2, r3
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	60da      	str	r2, [r3, #12]
 80175f8:	68fa      	ldr	r2, [r7, #12]
 80175fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175fc:	429a      	cmp	r2, r3
 80175fe:	d20b      	bcs.n	8017618 <mg_http_parse+0x100>
 8017600:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017602:	68f8      	ldr	r0, [r7, #12]
 8017604:	f7ff fe1f 	bl	8017246 <clen>
 8017608:	6378      	str	r0, [r7, #52]	@ 0x34
 801760a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801760c:	2b00      	cmp	r3, #0
 801760e:	d1e9      	bne.n	80175e4 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8017610:	e002      	b.n	8017618 <mg_http_parse+0x100>
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	3301      	adds	r3, #1
 8017616:	60fb      	str	r3, [r7, #12]
 8017618:	68fa      	ldr	r2, [r7, #12]
 801761a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801761c:	429a      	cmp	r2, r3
 801761e:	d203      	bcs.n	8017628 <mg_http_parse+0x110>
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	2b20      	cmp	r3, #32
 8017626:	d0f4      	beq.n	8017612 <mg_http_parse+0xfa>
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	3318      	adds	r3, #24
 801762c:	461a      	mov	r2, r3
 801762e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017630:	68f8      	ldr	r0, [r7, #12]
 8017632:	f7ff fe77 	bl	8017324 <skiptorn>
 8017636:	60f8      	str	r0, [r7, #12]
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d101      	bne.n	8017642 <mg_http_parse+0x12a>
 801763e:	2300      	movs	r3, #0
 8017640:	e0c9      	b.n	80177d6 <mg_http_parse+0x2be>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6898      	ldr	r0, [r3, #8]
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	68db      	ldr	r3, [r3, #12]
 801764a:	461a      	mov	r2, r3
 801764c:	213f      	movs	r1, #63	@ 0x3f
 801764e:	f7e8 fdd7 	bl	8000200 <memchr>
 8017652:	6338      	str	r0, [r7, #48]	@ 0x30
 8017654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017656:	2b00      	cmp	r3, #0
 8017658:	d015      	beq.n	8017686 <mg_http_parse+0x16e>
    hm->query.buf = (char *) qs + 1;
 801765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801765c:	1c5a      	adds	r2, r3, #1
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	689a      	ldr	r2, [r3, #8]
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	68db      	ldr	r3, [r3, #12]
 801766a:	441a      	add	r2, r3
 801766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801766e:	3301      	adds	r3, #1
 8017670:	1ad3      	subs	r3, r2, r3
 8017672:	461a      	mov	r2, r3
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	689b      	ldr	r3, [r3, #8]
 801767c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801767e:	1ad3      	subs	r3, r2, r3
 8017680:	461a      	mov	r2, r3
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	685b      	ldr	r3, [r3, #4]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d003      	beq.n	8017696 <mg_http_parse+0x17e>
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	68db      	ldr	r3, [r3, #12]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d102      	bne.n	801769c <mg_http_parse+0x184>
 8017696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801769a:	e09c      	b.n	80177d6 <mg_http_parse+0x2be>

  if (!mg_http_parse_headers(s, end, hm->headers,
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f103 0220 	add.w	r2, r3, #32
 80176a2:	231e      	movs	r3, #30
 80176a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80176a6:	68f8      	ldr	r0, [r7, #12]
 80176a8:	f7ff fe87 	bl	80173ba <mg_http_parse_headers>
 80176ac:	4603      	mov	r3, r0
 80176ae:	f083 0301 	eor.w	r3, r3, #1
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d002      	beq.n	80176be <mg_http_parse+0x1a6>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 80176b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80176bc:	e08b      	b.n	80177d6 <mg_http_parse+0x2be>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 80176be:	4948      	ldr	r1, [pc, #288]	@ (80177e0 <mg_http_parse+0x2c8>)
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f7ff fd6d 	bl	80171a0 <mg_http_get_header>
 80176c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80176c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d018      	beq.n	8017700 <mg_http_parse+0x1e8>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 80176d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80176da:	f7ff fb13 	bl	8016d04 <mg_to_size_t>
 80176de:	4603      	mov	r3, r0
 80176e0:	f083 0301 	eor.w	r3, r3, #1
 80176e4:	b2db      	uxtb	r3, r3
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d002      	beq.n	80176f0 <mg_http_parse+0x1d8>
 80176ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80176ee:	e072      	b.n	80177d6 <mg_http_parse+0x2be>
    hm->message.len = (size_t) req_len + hm->body.len;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80176f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176f8:	441a      	add	r2, r3
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0;
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	2205      	movs	r2, #5
 8017706:	4937      	ldr	r1, [pc, #220]	@ (80177e4 <mg_http_parse+0x2cc>)
 8017708:	4618      	mov	r0, r3
 801770a:	f7ff fabb 	bl	8016c84 <mg_ncasecmp>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	bf0c      	ite	eq
 8017714:	2301      	moveq	r3, #1
 8017716:	2300      	movne	r3, #0
 8017718:	b2db      	uxtb	r3, r3
 801771a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (hm->body.len == (size_t) ~0 && !is_response &&
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017726:	d12a      	bne.n	801777e <mg_http_parse+0x266>
 8017728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801772a:	2b00      	cmp	r3, #0
 801772c:	d127      	bne.n	801777e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 801772e:	f107 0310 	add.w	r3, r7, #16
 8017732:	492d      	ldr	r1, [pc, #180]	@ (80177e8 <mg_http_parse+0x2d0>)
 8017734:	4618      	mov	r0, r3
 8017736:	f00a fa05 	bl	8021b44 <mg_str_s>
 801773a:	6879      	ldr	r1, [r7, #4]
 801773c:	f107 0310 	add.w	r3, r7, #16
 8017740:	cb0c      	ldmia	r3, {r2, r3}
 8017742:	c903      	ldmia	r1, {r0, r1}
 8017744:	f00a fa8a 	bl	8021c5c <mg_strcasecmp>
 8017748:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 801774a:	2b00      	cmp	r3, #0
 801774c:	d017      	beq.n	801777e <mg_http_parse+0x266>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 801774e:	f107 0318 	add.w	r3, r7, #24
 8017752:	4926      	ldr	r1, [pc, #152]	@ (80177ec <mg_http_parse+0x2d4>)
 8017754:	4618      	mov	r0, r3
 8017756:	f00a f9f5 	bl	8021b44 <mg_str_s>
 801775a:	6879      	ldr	r1, [r7, #4]
 801775c:	f107 0318 	add.w	r3, r7, #24
 8017760:	cb0c      	ldmia	r3, {r2, r3}
 8017762:	c903      	ldmia	r1, {r0, r1}
 8017764:	f00a fa7a 	bl	8021c5c <mg_strcasecmp>
 8017768:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 801776a:	2b00      	cmp	r3, #0
 801776c:	d007      	beq.n	801777e <mg_http_parse+0x266>
    hm->body.len = 0;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	2200      	movs	r2, #0
 8017772:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8017776:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017788:	d11b      	bne.n	80177c2 <mg_http_parse+0x2aa>
 801778a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801778c:	2b00      	cmp	r3, #0
 801778e:	d018      	beq.n	80177c2 <mg_http_parse+0x2aa>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8017790:	f107 0320 	add.w	r3, r7, #32
 8017794:	4916      	ldr	r1, [pc, #88]	@ (80177f0 <mg_http_parse+0x2d8>)
 8017796:	4618      	mov	r0, r3
 8017798:	f00a f9d4 	bl	8021b44 <mg_str_s>
 801779c:	6879      	ldr	r1, [r7, #4]
 801779e:	f107 0320 	add.w	r3, r7, #32
 80177a2:	cb0c      	ldmia	r3, {r2, r3}
 80177a4:	3108      	adds	r1, #8
 80177a6:	c903      	ldmia	r1, {r0, r1}
 80177a8:	f00a fa58 	bl	8021c5c <mg_strcasecmp>
 80177ac:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d107      	bne.n	80177c2 <mg_http_parse+0x2aa>
    hm->body.len = 0;
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	2200      	movs	r2, #0
 80177b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 80177ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80177c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d202      	bcs.n	80177d4 <mg_http_parse+0x2bc>
 80177ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80177d2:	e000      	b.n	80177d6 <mg_http_parse+0x2be>

  return req_len;
 80177d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3740      	adds	r7, #64	@ 0x40
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	bf00      	nop
 80177e0:	08031680 	.word	0x08031680
 80177e4:	08031690 	.word	0x08031690
 80177e8:	08031698 	.word	0x08031698
 80177ec:	0803169c 	.word	0x0803169c
 80177f0:	080316a4 	.word	0x080316a4

080177f4 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 80177f4:	b480      	push	{r7}
 80177f6:	b083      	sub	sp, #12
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	3b64      	subs	r3, #100	@ 0x64
 8017800:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8017804:	4293      	cmp	r3, r2
 8017806:	f200 8469 	bhi.w	80180dc <mg_http_status_code_str+0x8e8>
 801780a:	a101      	add	r1, pc, #4	@ (adr r1, 8017810 <mg_http_status_code_str+0x1c>)
 801780c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017810:	08017fe1 	.word	0x08017fe1
 8017814:	08017fe5 	.word	0x08017fe5
 8017818:	08017fe9 	.word	0x08017fe9
 801781c:	080180dd 	.word	0x080180dd
 8017820:	080180dd 	.word	0x080180dd
 8017824:	080180dd 	.word	0x080180dd
 8017828:	080180dd 	.word	0x080180dd
 801782c:	080180dd 	.word	0x080180dd
 8017830:	080180dd 	.word	0x080180dd
 8017834:	080180dd 	.word	0x080180dd
 8017838:	080180dd 	.word	0x080180dd
 801783c:	080180dd 	.word	0x080180dd
 8017840:	080180dd 	.word	0x080180dd
 8017844:	080180dd 	.word	0x080180dd
 8017848:	080180dd 	.word	0x080180dd
 801784c:	080180dd 	.word	0x080180dd
 8017850:	080180dd 	.word	0x080180dd
 8017854:	080180dd 	.word	0x080180dd
 8017858:	080180dd 	.word	0x080180dd
 801785c:	080180dd 	.word	0x080180dd
 8017860:	080180dd 	.word	0x080180dd
 8017864:	080180dd 	.word	0x080180dd
 8017868:	080180dd 	.word	0x080180dd
 801786c:	080180dd 	.word	0x080180dd
 8017870:	080180dd 	.word	0x080180dd
 8017874:	080180dd 	.word	0x080180dd
 8017878:	080180dd 	.word	0x080180dd
 801787c:	080180dd 	.word	0x080180dd
 8017880:	080180dd 	.word	0x080180dd
 8017884:	080180dd 	.word	0x080180dd
 8017888:	080180dd 	.word	0x080180dd
 801788c:	080180dd 	.word	0x080180dd
 8017890:	080180dd 	.word	0x080180dd
 8017894:	080180dd 	.word	0x080180dd
 8017898:	080180dd 	.word	0x080180dd
 801789c:	080180dd 	.word	0x080180dd
 80178a0:	080180dd 	.word	0x080180dd
 80178a4:	080180dd 	.word	0x080180dd
 80178a8:	080180dd 	.word	0x080180dd
 80178ac:	080180dd 	.word	0x080180dd
 80178b0:	080180dd 	.word	0x080180dd
 80178b4:	080180dd 	.word	0x080180dd
 80178b8:	080180dd 	.word	0x080180dd
 80178bc:	080180dd 	.word	0x080180dd
 80178c0:	080180dd 	.word	0x080180dd
 80178c4:	080180dd 	.word	0x080180dd
 80178c8:	080180dd 	.word	0x080180dd
 80178cc:	080180dd 	.word	0x080180dd
 80178d0:	080180dd 	.word	0x080180dd
 80178d4:	080180dd 	.word	0x080180dd
 80178d8:	080180dd 	.word	0x080180dd
 80178dc:	080180dd 	.word	0x080180dd
 80178e0:	080180dd 	.word	0x080180dd
 80178e4:	080180dd 	.word	0x080180dd
 80178e8:	080180dd 	.word	0x080180dd
 80178ec:	080180dd 	.word	0x080180dd
 80178f0:	080180dd 	.word	0x080180dd
 80178f4:	080180dd 	.word	0x080180dd
 80178f8:	080180dd 	.word	0x080180dd
 80178fc:	080180dd 	.word	0x080180dd
 8017900:	080180dd 	.word	0x080180dd
 8017904:	080180dd 	.word	0x080180dd
 8017908:	080180dd 	.word	0x080180dd
 801790c:	080180dd 	.word	0x080180dd
 8017910:	080180dd 	.word	0x080180dd
 8017914:	080180dd 	.word	0x080180dd
 8017918:	080180dd 	.word	0x080180dd
 801791c:	080180dd 	.word	0x080180dd
 8017920:	080180dd 	.word	0x080180dd
 8017924:	080180dd 	.word	0x080180dd
 8017928:	080180dd 	.word	0x080180dd
 801792c:	080180dd 	.word	0x080180dd
 8017930:	080180dd 	.word	0x080180dd
 8017934:	080180dd 	.word	0x080180dd
 8017938:	080180dd 	.word	0x080180dd
 801793c:	080180dd 	.word	0x080180dd
 8017940:	080180dd 	.word	0x080180dd
 8017944:	080180dd 	.word	0x080180dd
 8017948:	080180dd 	.word	0x080180dd
 801794c:	080180dd 	.word	0x080180dd
 8017950:	080180dd 	.word	0x080180dd
 8017954:	080180dd 	.word	0x080180dd
 8017958:	080180dd 	.word	0x080180dd
 801795c:	080180dd 	.word	0x080180dd
 8017960:	080180dd 	.word	0x080180dd
 8017964:	080180dd 	.word	0x080180dd
 8017968:	080180dd 	.word	0x080180dd
 801796c:	080180dd 	.word	0x080180dd
 8017970:	080180dd 	.word	0x080180dd
 8017974:	080180dd 	.word	0x080180dd
 8017978:	080180dd 	.word	0x080180dd
 801797c:	080180dd 	.word	0x080180dd
 8017980:	080180dd 	.word	0x080180dd
 8017984:	080180dd 	.word	0x080180dd
 8017988:	080180dd 	.word	0x080180dd
 801798c:	080180dd 	.word	0x080180dd
 8017990:	080180dd 	.word	0x080180dd
 8017994:	080180dd 	.word	0x080180dd
 8017998:	080180dd 	.word	0x080180dd
 801799c:	080180dd 	.word	0x080180dd
 80179a0:	08017fed 	.word	0x08017fed
 80179a4:	08017ff1 	.word	0x08017ff1
 80179a8:	08017ff5 	.word	0x08017ff5
 80179ac:	08017ff9 	.word	0x08017ff9
 80179b0:	08017ffd 	.word	0x08017ffd
 80179b4:	08018001 	.word	0x08018001
 80179b8:	08018005 	.word	0x08018005
 80179bc:	08018009 	.word	0x08018009
 80179c0:	0801800d 	.word	0x0801800d
 80179c4:	080180dd 	.word	0x080180dd
 80179c8:	080180dd 	.word	0x080180dd
 80179cc:	080180dd 	.word	0x080180dd
 80179d0:	080180dd 	.word	0x080180dd
 80179d4:	080180dd 	.word	0x080180dd
 80179d8:	080180dd 	.word	0x080180dd
 80179dc:	080180dd 	.word	0x080180dd
 80179e0:	080180dd 	.word	0x080180dd
 80179e4:	080180dd 	.word	0x080180dd
 80179e8:	080180dd 	.word	0x080180dd
 80179ec:	080180dd 	.word	0x080180dd
 80179f0:	080180dd 	.word	0x080180dd
 80179f4:	080180dd 	.word	0x080180dd
 80179f8:	080180dd 	.word	0x080180dd
 80179fc:	080180dd 	.word	0x080180dd
 8017a00:	080180dd 	.word	0x080180dd
 8017a04:	080180dd 	.word	0x080180dd
 8017a08:	08018011 	.word	0x08018011
 8017a0c:	080180dd 	.word	0x080180dd
 8017a10:	080180dd 	.word	0x080180dd
 8017a14:	080180dd 	.word	0x080180dd
 8017a18:	080180dd 	.word	0x080180dd
 8017a1c:	080180dd 	.word	0x080180dd
 8017a20:	080180dd 	.word	0x080180dd
 8017a24:	080180dd 	.word	0x080180dd
 8017a28:	080180dd 	.word	0x080180dd
 8017a2c:	080180dd 	.word	0x080180dd
 8017a30:	080180dd 	.word	0x080180dd
 8017a34:	080180dd 	.word	0x080180dd
 8017a38:	080180dd 	.word	0x080180dd
 8017a3c:	080180dd 	.word	0x080180dd
 8017a40:	080180dd 	.word	0x080180dd
 8017a44:	080180dd 	.word	0x080180dd
 8017a48:	080180dd 	.word	0x080180dd
 8017a4c:	080180dd 	.word	0x080180dd
 8017a50:	080180dd 	.word	0x080180dd
 8017a54:	080180dd 	.word	0x080180dd
 8017a58:	080180dd 	.word	0x080180dd
 8017a5c:	080180dd 	.word	0x080180dd
 8017a60:	080180dd 	.word	0x080180dd
 8017a64:	080180dd 	.word	0x080180dd
 8017a68:	080180dd 	.word	0x080180dd
 8017a6c:	080180dd 	.word	0x080180dd
 8017a70:	080180dd 	.word	0x080180dd
 8017a74:	080180dd 	.word	0x080180dd
 8017a78:	080180dd 	.word	0x080180dd
 8017a7c:	080180dd 	.word	0x080180dd
 8017a80:	080180dd 	.word	0x080180dd
 8017a84:	080180dd 	.word	0x080180dd
 8017a88:	080180dd 	.word	0x080180dd
 8017a8c:	080180dd 	.word	0x080180dd
 8017a90:	080180dd 	.word	0x080180dd
 8017a94:	080180dd 	.word	0x080180dd
 8017a98:	080180dd 	.word	0x080180dd
 8017a9c:	080180dd 	.word	0x080180dd
 8017aa0:	080180dd 	.word	0x080180dd
 8017aa4:	080180dd 	.word	0x080180dd
 8017aa8:	080180dd 	.word	0x080180dd
 8017aac:	080180dd 	.word	0x080180dd
 8017ab0:	080180dd 	.word	0x080180dd
 8017ab4:	080180dd 	.word	0x080180dd
 8017ab8:	080180dd 	.word	0x080180dd
 8017abc:	080180dd 	.word	0x080180dd
 8017ac0:	080180dd 	.word	0x080180dd
 8017ac4:	080180dd 	.word	0x080180dd
 8017ac8:	080180dd 	.word	0x080180dd
 8017acc:	080180dd 	.word	0x080180dd
 8017ad0:	080180dd 	.word	0x080180dd
 8017ad4:	080180dd 	.word	0x080180dd
 8017ad8:	080180dd 	.word	0x080180dd
 8017adc:	080180dd 	.word	0x080180dd
 8017ae0:	080180dd 	.word	0x080180dd
 8017ae4:	080180dd 	.word	0x080180dd
 8017ae8:	080180dd 	.word	0x080180dd
 8017aec:	080180dd 	.word	0x080180dd
 8017af0:	080180dd 	.word	0x080180dd
 8017af4:	080180dd 	.word	0x080180dd
 8017af8:	080180dd 	.word	0x080180dd
 8017afc:	080180dd 	.word	0x080180dd
 8017b00:	080180dd 	.word	0x080180dd
 8017b04:	080180dd 	.word	0x080180dd
 8017b08:	080180dd 	.word	0x080180dd
 8017b0c:	080180dd 	.word	0x080180dd
 8017b10:	080180dd 	.word	0x080180dd
 8017b14:	080180dd 	.word	0x080180dd
 8017b18:	080180dd 	.word	0x080180dd
 8017b1c:	080180dd 	.word	0x080180dd
 8017b20:	080180dd 	.word	0x080180dd
 8017b24:	080180dd 	.word	0x080180dd
 8017b28:	080180dd 	.word	0x080180dd
 8017b2c:	080180dd 	.word	0x080180dd
 8017b30:	08018015 	.word	0x08018015
 8017b34:	08018019 	.word	0x08018019
 8017b38:	0801801d 	.word	0x0801801d
 8017b3c:	08018021 	.word	0x08018021
 8017b40:	08018025 	.word	0x08018025
 8017b44:	08018029 	.word	0x08018029
 8017b48:	080180dd 	.word	0x080180dd
 8017b4c:	0801802d 	.word	0x0801802d
 8017b50:	08018031 	.word	0x08018031
 8017b54:	080180dd 	.word	0x080180dd
 8017b58:	080180dd 	.word	0x080180dd
 8017b5c:	080180dd 	.word	0x080180dd
 8017b60:	080180dd 	.word	0x080180dd
 8017b64:	080180dd 	.word	0x080180dd
 8017b68:	080180dd 	.word	0x080180dd
 8017b6c:	080180dd 	.word	0x080180dd
 8017b70:	080180dd 	.word	0x080180dd
 8017b74:	080180dd 	.word	0x080180dd
 8017b78:	080180dd 	.word	0x080180dd
 8017b7c:	080180dd 	.word	0x080180dd
 8017b80:	080180dd 	.word	0x080180dd
 8017b84:	080180dd 	.word	0x080180dd
 8017b88:	080180dd 	.word	0x080180dd
 8017b8c:	080180dd 	.word	0x080180dd
 8017b90:	080180dd 	.word	0x080180dd
 8017b94:	080180dd 	.word	0x080180dd
 8017b98:	080180dd 	.word	0x080180dd
 8017b9c:	080180dd 	.word	0x080180dd
 8017ba0:	080180dd 	.word	0x080180dd
 8017ba4:	080180dd 	.word	0x080180dd
 8017ba8:	080180dd 	.word	0x080180dd
 8017bac:	080180dd 	.word	0x080180dd
 8017bb0:	080180dd 	.word	0x080180dd
 8017bb4:	080180dd 	.word	0x080180dd
 8017bb8:	080180dd 	.word	0x080180dd
 8017bbc:	080180dd 	.word	0x080180dd
 8017bc0:	080180dd 	.word	0x080180dd
 8017bc4:	080180dd 	.word	0x080180dd
 8017bc8:	080180dd 	.word	0x080180dd
 8017bcc:	080180dd 	.word	0x080180dd
 8017bd0:	080180dd 	.word	0x080180dd
 8017bd4:	080180dd 	.word	0x080180dd
 8017bd8:	080180dd 	.word	0x080180dd
 8017bdc:	080180dd 	.word	0x080180dd
 8017be0:	080180dd 	.word	0x080180dd
 8017be4:	080180dd 	.word	0x080180dd
 8017be8:	080180dd 	.word	0x080180dd
 8017bec:	080180dd 	.word	0x080180dd
 8017bf0:	080180dd 	.word	0x080180dd
 8017bf4:	080180dd 	.word	0x080180dd
 8017bf8:	080180dd 	.word	0x080180dd
 8017bfc:	080180dd 	.word	0x080180dd
 8017c00:	080180dd 	.word	0x080180dd
 8017c04:	080180dd 	.word	0x080180dd
 8017c08:	080180dd 	.word	0x080180dd
 8017c0c:	080180dd 	.word	0x080180dd
 8017c10:	080180dd 	.word	0x080180dd
 8017c14:	080180dd 	.word	0x080180dd
 8017c18:	080180dd 	.word	0x080180dd
 8017c1c:	080180dd 	.word	0x080180dd
 8017c20:	080180dd 	.word	0x080180dd
 8017c24:	080180dd 	.word	0x080180dd
 8017c28:	080180dd 	.word	0x080180dd
 8017c2c:	080180dd 	.word	0x080180dd
 8017c30:	080180dd 	.word	0x080180dd
 8017c34:	080180dd 	.word	0x080180dd
 8017c38:	080180dd 	.word	0x080180dd
 8017c3c:	080180dd 	.word	0x080180dd
 8017c40:	080180dd 	.word	0x080180dd
 8017c44:	080180dd 	.word	0x080180dd
 8017c48:	080180dd 	.word	0x080180dd
 8017c4c:	080180dd 	.word	0x080180dd
 8017c50:	080180dd 	.word	0x080180dd
 8017c54:	080180dd 	.word	0x080180dd
 8017c58:	080180dd 	.word	0x080180dd
 8017c5c:	080180dd 	.word	0x080180dd
 8017c60:	080180dd 	.word	0x080180dd
 8017c64:	080180dd 	.word	0x080180dd
 8017c68:	080180dd 	.word	0x080180dd
 8017c6c:	080180dd 	.word	0x080180dd
 8017c70:	080180dd 	.word	0x080180dd
 8017c74:	080180dd 	.word	0x080180dd
 8017c78:	080180dd 	.word	0x080180dd
 8017c7c:	080180dd 	.word	0x080180dd
 8017c80:	080180dd 	.word	0x080180dd
 8017c84:	080180dd 	.word	0x080180dd
 8017c88:	080180dd 	.word	0x080180dd
 8017c8c:	080180dd 	.word	0x080180dd
 8017c90:	080180dd 	.word	0x080180dd
 8017c94:	080180dd 	.word	0x080180dd
 8017c98:	080180dd 	.word	0x080180dd
 8017c9c:	080180dd 	.word	0x080180dd
 8017ca0:	080180dd 	.word	0x080180dd
 8017ca4:	080180dd 	.word	0x080180dd
 8017ca8:	080180dd 	.word	0x080180dd
 8017cac:	080180dd 	.word	0x080180dd
 8017cb0:	080180dd 	.word	0x080180dd
 8017cb4:	080180dd 	.word	0x080180dd
 8017cb8:	080180dd 	.word	0x080180dd
 8017cbc:	080180dd 	.word	0x080180dd
 8017cc0:	08018035 	.word	0x08018035
 8017cc4:	08018039 	.word	0x08018039
 8017cc8:	0801803d 	.word	0x0801803d
 8017ccc:	08018041 	.word	0x08018041
 8017cd0:	08018045 	.word	0x08018045
 8017cd4:	08018049 	.word	0x08018049
 8017cd8:	0801804d 	.word	0x0801804d
 8017cdc:	08018051 	.word	0x08018051
 8017ce0:	08018055 	.word	0x08018055
 8017ce4:	08018059 	.word	0x08018059
 8017ce8:	0801805d 	.word	0x0801805d
 8017cec:	08018061 	.word	0x08018061
 8017cf0:	08018065 	.word	0x08018065
 8017cf4:	08018069 	.word	0x08018069
 8017cf8:	0801806d 	.word	0x0801806d
 8017cfc:	08018071 	.word	0x08018071
 8017d00:	08018075 	.word	0x08018075
 8017d04:	08018079 	.word	0x08018079
 8017d08:	0801807d 	.word	0x0801807d
 8017d0c:	080180dd 	.word	0x080180dd
 8017d10:	080180dd 	.word	0x080180dd
 8017d14:	08018081 	.word	0x08018081
 8017d18:	08018085 	.word	0x08018085
 8017d1c:	08018089 	.word	0x08018089
 8017d20:	0801808d 	.word	0x0801808d
 8017d24:	080180dd 	.word	0x080180dd
 8017d28:	08018091 	.word	0x08018091
 8017d2c:	080180dd 	.word	0x080180dd
 8017d30:	08018095 	.word	0x08018095
 8017d34:	08018099 	.word	0x08018099
 8017d38:	080180dd 	.word	0x080180dd
 8017d3c:	0801809d 	.word	0x0801809d
 8017d40:	080180dd 	.word	0x080180dd
 8017d44:	080180dd 	.word	0x080180dd
 8017d48:	080180dd 	.word	0x080180dd
 8017d4c:	080180dd 	.word	0x080180dd
 8017d50:	080180dd 	.word	0x080180dd
 8017d54:	080180dd 	.word	0x080180dd
 8017d58:	080180dd 	.word	0x080180dd
 8017d5c:	080180dd 	.word	0x080180dd
 8017d60:	080180dd 	.word	0x080180dd
 8017d64:	080180dd 	.word	0x080180dd
 8017d68:	080180dd 	.word	0x080180dd
 8017d6c:	080180dd 	.word	0x080180dd
 8017d70:	080180a1 	.word	0x080180a1
 8017d74:	080180dd 	.word	0x080180dd
 8017d78:	080180dd 	.word	0x080180dd
 8017d7c:	080180dd 	.word	0x080180dd
 8017d80:	080180dd 	.word	0x080180dd
 8017d84:	080180dd 	.word	0x080180dd
 8017d88:	080180dd 	.word	0x080180dd
 8017d8c:	080180a5 	.word	0x080180a5
 8017d90:	080180dd 	.word	0x080180dd
 8017d94:	080180dd 	.word	0x080180dd
 8017d98:	080180dd 	.word	0x080180dd
 8017d9c:	080180dd 	.word	0x080180dd
 8017da0:	080180dd 	.word	0x080180dd
 8017da4:	080180dd 	.word	0x080180dd
 8017da8:	080180dd 	.word	0x080180dd
 8017dac:	080180dd 	.word	0x080180dd
 8017db0:	080180dd 	.word	0x080180dd
 8017db4:	080180dd 	.word	0x080180dd
 8017db8:	080180dd 	.word	0x080180dd
 8017dbc:	080180dd 	.word	0x080180dd
 8017dc0:	080180dd 	.word	0x080180dd
 8017dc4:	080180dd 	.word	0x080180dd
 8017dc8:	080180dd 	.word	0x080180dd
 8017dcc:	080180dd 	.word	0x080180dd
 8017dd0:	080180dd 	.word	0x080180dd
 8017dd4:	080180dd 	.word	0x080180dd
 8017dd8:	080180dd 	.word	0x080180dd
 8017ddc:	080180dd 	.word	0x080180dd
 8017de0:	080180dd 	.word	0x080180dd
 8017de4:	080180dd 	.word	0x080180dd
 8017de8:	080180dd 	.word	0x080180dd
 8017dec:	080180dd 	.word	0x080180dd
 8017df0:	080180dd 	.word	0x080180dd
 8017df4:	080180dd 	.word	0x080180dd
 8017df8:	080180dd 	.word	0x080180dd
 8017dfc:	080180dd 	.word	0x080180dd
 8017e00:	080180dd 	.word	0x080180dd
 8017e04:	080180dd 	.word	0x080180dd
 8017e08:	080180dd 	.word	0x080180dd
 8017e0c:	080180dd 	.word	0x080180dd
 8017e10:	080180dd 	.word	0x080180dd
 8017e14:	080180dd 	.word	0x080180dd
 8017e18:	080180dd 	.word	0x080180dd
 8017e1c:	080180dd 	.word	0x080180dd
 8017e20:	080180dd 	.word	0x080180dd
 8017e24:	080180dd 	.word	0x080180dd
 8017e28:	080180dd 	.word	0x080180dd
 8017e2c:	080180dd 	.word	0x080180dd
 8017e30:	080180dd 	.word	0x080180dd
 8017e34:	080180dd 	.word	0x080180dd
 8017e38:	080180dd 	.word	0x080180dd
 8017e3c:	080180dd 	.word	0x080180dd
 8017e40:	080180dd 	.word	0x080180dd
 8017e44:	080180dd 	.word	0x080180dd
 8017e48:	080180dd 	.word	0x080180dd
 8017e4c:	080180a9 	.word	0x080180a9
 8017e50:	080180ad 	.word	0x080180ad
 8017e54:	080180b1 	.word	0x080180b1
 8017e58:	080180b5 	.word	0x080180b5
 8017e5c:	080180b9 	.word	0x080180b9
 8017e60:	080180bd 	.word	0x080180bd
 8017e64:	080180c1 	.word	0x080180c1
 8017e68:	080180c5 	.word	0x080180c5
 8017e6c:	080180c9 	.word	0x080180c9
 8017e70:	080180cd 	.word	0x080180cd
 8017e74:	080180dd 	.word	0x080180dd
 8017e78:	080180d1 	.word	0x080180d1
 8017e7c:	080180d5 	.word	0x080180d5
 8017e80:	080180dd 	.word	0x080180dd
 8017e84:	080180dd 	.word	0x080180dd
 8017e88:	080180dd 	.word	0x080180dd
 8017e8c:	080180dd 	.word	0x080180dd
 8017e90:	080180dd 	.word	0x080180dd
 8017e94:	080180dd 	.word	0x080180dd
 8017e98:	080180dd 	.word	0x080180dd
 8017e9c:	080180dd 	.word	0x080180dd
 8017ea0:	080180dd 	.word	0x080180dd
 8017ea4:	080180dd 	.word	0x080180dd
 8017ea8:	080180dd 	.word	0x080180dd
 8017eac:	080180dd 	.word	0x080180dd
 8017eb0:	080180dd 	.word	0x080180dd
 8017eb4:	080180dd 	.word	0x080180dd
 8017eb8:	080180dd 	.word	0x080180dd
 8017ebc:	080180dd 	.word	0x080180dd
 8017ec0:	080180dd 	.word	0x080180dd
 8017ec4:	080180dd 	.word	0x080180dd
 8017ec8:	080180dd 	.word	0x080180dd
 8017ecc:	080180dd 	.word	0x080180dd
 8017ed0:	080180dd 	.word	0x080180dd
 8017ed4:	080180dd 	.word	0x080180dd
 8017ed8:	080180dd 	.word	0x080180dd
 8017edc:	080180dd 	.word	0x080180dd
 8017ee0:	080180dd 	.word	0x080180dd
 8017ee4:	080180dd 	.word	0x080180dd
 8017ee8:	080180dd 	.word	0x080180dd
 8017eec:	080180dd 	.word	0x080180dd
 8017ef0:	080180dd 	.word	0x080180dd
 8017ef4:	080180dd 	.word	0x080180dd
 8017ef8:	080180dd 	.word	0x080180dd
 8017efc:	080180dd 	.word	0x080180dd
 8017f00:	080180dd 	.word	0x080180dd
 8017f04:	080180dd 	.word	0x080180dd
 8017f08:	080180dd 	.word	0x080180dd
 8017f0c:	080180dd 	.word	0x080180dd
 8017f10:	080180dd 	.word	0x080180dd
 8017f14:	080180dd 	.word	0x080180dd
 8017f18:	080180dd 	.word	0x080180dd
 8017f1c:	080180dd 	.word	0x080180dd
 8017f20:	080180dd 	.word	0x080180dd
 8017f24:	080180dd 	.word	0x080180dd
 8017f28:	080180dd 	.word	0x080180dd
 8017f2c:	080180dd 	.word	0x080180dd
 8017f30:	080180dd 	.word	0x080180dd
 8017f34:	080180dd 	.word	0x080180dd
 8017f38:	080180dd 	.word	0x080180dd
 8017f3c:	080180dd 	.word	0x080180dd
 8017f40:	080180dd 	.word	0x080180dd
 8017f44:	080180dd 	.word	0x080180dd
 8017f48:	080180dd 	.word	0x080180dd
 8017f4c:	080180dd 	.word	0x080180dd
 8017f50:	080180dd 	.word	0x080180dd
 8017f54:	080180dd 	.word	0x080180dd
 8017f58:	080180dd 	.word	0x080180dd
 8017f5c:	080180dd 	.word	0x080180dd
 8017f60:	080180dd 	.word	0x080180dd
 8017f64:	080180dd 	.word	0x080180dd
 8017f68:	080180dd 	.word	0x080180dd
 8017f6c:	080180dd 	.word	0x080180dd
 8017f70:	080180dd 	.word	0x080180dd
 8017f74:	080180dd 	.word	0x080180dd
 8017f78:	080180dd 	.word	0x080180dd
 8017f7c:	080180dd 	.word	0x080180dd
 8017f80:	080180dd 	.word	0x080180dd
 8017f84:	080180dd 	.word	0x080180dd
 8017f88:	080180dd 	.word	0x080180dd
 8017f8c:	080180dd 	.word	0x080180dd
 8017f90:	080180dd 	.word	0x080180dd
 8017f94:	080180dd 	.word	0x080180dd
 8017f98:	080180dd 	.word	0x080180dd
 8017f9c:	080180dd 	.word	0x080180dd
 8017fa0:	080180dd 	.word	0x080180dd
 8017fa4:	080180dd 	.word	0x080180dd
 8017fa8:	080180dd 	.word	0x080180dd
 8017fac:	080180dd 	.word	0x080180dd
 8017fb0:	080180dd 	.word	0x080180dd
 8017fb4:	080180dd 	.word	0x080180dd
 8017fb8:	080180dd 	.word	0x080180dd
 8017fbc:	080180dd 	.word	0x080180dd
 8017fc0:	080180dd 	.word	0x080180dd
 8017fc4:	080180dd 	.word	0x080180dd
 8017fc8:	080180dd 	.word	0x080180dd
 8017fcc:	080180dd 	.word	0x080180dd
 8017fd0:	080180dd 	.word	0x080180dd
 8017fd4:	080180dd 	.word	0x080180dd
 8017fd8:	080180dd 	.word	0x080180dd
 8017fdc:	080180d9 	.word	0x080180d9
    case 100: return "Continue";
 8017fe0:	4b42      	ldr	r3, [pc, #264]	@ (80180ec <mg_http_status_code_str+0x8f8>)
 8017fe2:	e07c      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8017fe4:	4b42      	ldr	r3, [pc, #264]	@ (80180f0 <mg_http_status_code_str+0x8fc>)
 8017fe6:	e07a      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8017fe8:	4b42      	ldr	r3, [pc, #264]	@ (80180f4 <mg_http_status_code_str+0x900>)
 8017fea:	e078      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8017fec:	4b42      	ldr	r3, [pc, #264]	@ (80180f8 <mg_http_status_code_str+0x904>)
 8017fee:	e076      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8017ff0:	4b42      	ldr	r3, [pc, #264]	@ (80180fc <mg_http_status_code_str+0x908>)
 8017ff2:	e074      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8017ff4:	4b42      	ldr	r3, [pc, #264]	@ (8018100 <mg_http_status_code_str+0x90c>)
 8017ff6:	e072      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8017ff8:	4b42      	ldr	r3, [pc, #264]	@ (8018104 <mg_http_status_code_str+0x910>)
 8017ffa:	e070      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8017ffc:	4b42      	ldr	r3, [pc, #264]	@ (8018108 <mg_http_status_code_str+0x914>)
 8017ffe:	e06e      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8018000:	4b42      	ldr	r3, [pc, #264]	@ (801810c <mg_http_status_code_str+0x918>)
 8018002:	e06c      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8018004:	4b42      	ldr	r3, [pc, #264]	@ (8018110 <mg_http_status_code_str+0x91c>)
 8018006:	e06a      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8018008:	4b42      	ldr	r3, [pc, #264]	@ (8018114 <mg_http_status_code_str+0x920>)
 801800a:	e068      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 801800c:	4b42      	ldr	r3, [pc, #264]	@ (8018118 <mg_http_status_code_str+0x924>)
 801800e:	e066      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8018010:	4b42      	ldr	r3, [pc, #264]	@ (801811c <mg_http_status_code_str+0x928>)
 8018012:	e064      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8018014:	4b42      	ldr	r3, [pc, #264]	@ (8018120 <mg_http_status_code_str+0x92c>)
 8018016:	e062      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8018018:	4b42      	ldr	r3, [pc, #264]	@ (8018124 <mg_http_status_code_str+0x930>)
 801801a:	e060      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 801801c:	4b42      	ldr	r3, [pc, #264]	@ (8018128 <mg_http_status_code_str+0x934>)
 801801e:	e05e      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8018020:	4b42      	ldr	r3, [pc, #264]	@ (801812c <mg_http_status_code_str+0x938>)
 8018022:	e05c      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8018024:	4b42      	ldr	r3, [pc, #264]	@ (8018130 <mg_http_status_code_str+0x93c>)
 8018026:	e05a      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8018028:	4b42      	ldr	r3, [pc, #264]	@ (8018134 <mg_http_status_code_str+0x940>)
 801802a:	e058      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 801802c:	4b42      	ldr	r3, [pc, #264]	@ (8018138 <mg_http_status_code_str+0x944>)
 801802e:	e056      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8018030:	4b42      	ldr	r3, [pc, #264]	@ (801813c <mg_http_status_code_str+0x948>)
 8018032:	e054      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8018034:	4b42      	ldr	r3, [pc, #264]	@ (8018140 <mg_http_status_code_str+0x94c>)
 8018036:	e052      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8018038:	4b42      	ldr	r3, [pc, #264]	@ (8018144 <mg_http_status_code_str+0x950>)
 801803a:	e050      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 801803c:	4b42      	ldr	r3, [pc, #264]	@ (8018148 <mg_http_status_code_str+0x954>)
 801803e:	e04e      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8018040:	4b42      	ldr	r3, [pc, #264]	@ (801814c <mg_http_status_code_str+0x958>)
 8018042:	e04c      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8018044:	4b42      	ldr	r3, [pc, #264]	@ (8018150 <mg_http_status_code_str+0x95c>)
 8018046:	e04a      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8018048:	4b42      	ldr	r3, [pc, #264]	@ (8018154 <mg_http_status_code_str+0x960>)
 801804a:	e048      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 801804c:	4b42      	ldr	r3, [pc, #264]	@ (8018158 <mg_http_status_code_str+0x964>)
 801804e:	e046      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8018050:	4b42      	ldr	r3, [pc, #264]	@ (801815c <mg_http_status_code_str+0x968>)
 8018052:	e044      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8018054:	4b42      	ldr	r3, [pc, #264]	@ (8018160 <mg_http_status_code_str+0x96c>)
 8018056:	e042      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8018058:	4b42      	ldr	r3, [pc, #264]	@ (8018164 <mg_http_status_code_str+0x970>)
 801805a:	e040      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 801805c:	4b42      	ldr	r3, [pc, #264]	@ (8018168 <mg_http_status_code_str+0x974>)
 801805e:	e03e      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8018060:	4b42      	ldr	r3, [pc, #264]	@ (801816c <mg_http_status_code_str+0x978>)
 8018062:	e03c      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8018064:	4b42      	ldr	r3, [pc, #264]	@ (8018170 <mg_http_status_code_str+0x97c>)
 8018066:	e03a      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8018068:	4b42      	ldr	r3, [pc, #264]	@ (8018174 <mg_http_status_code_str+0x980>)
 801806a:	e038      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 801806c:	4b42      	ldr	r3, [pc, #264]	@ (8018178 <mg_http_status_code_str+0x984>)
 801806e:	e036      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8018070:	4b42      	ldr	r3, [pc, #264]	@ (801817c <mg_http_status_code_str+0x988>)
 8018072:	e034      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8018074:	4b42      	ldr	r3, [pc, #264]	@ (8018180 <mg_http_status_code_str+0x98c>)
 8018076:	e032      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8018078:	4b42      	ldr	r3, [pc, #264]	@ (8018184 <mg_http_status_code_str+0x990>)
 801807a:	e030      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 801807c:	4b42      	ldr	r3, [pc, #264]	@ (8018188 <mg_http_status_code_str+0x994>)
 801807e:	e02e      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8018080:	4b42      	ldr	r3, [pc, #264]	@ (801818c <mg_http_status_code_str+0x998>)
 8018082:	e02c      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8018084:	4b42      	ldr	r3, [pc, #264]	@ (8018190 <mg_http_status_code_str+0x99c>)
 8018086:	e02a      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8018088:	4b42      	ldr	r3, [pc, #264]	@ (8018194 <mg_http_status_code_str+0x9a0>)
 801808a:	e028      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 801808c:	4b42      	ldr	r3, [pc, #264]	@ (8018198 <mg_http_status_code_str+0x9a4>)
 801808e:	e026      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8018090:	4b42      	ldr	r3, [pc, #264]	@ (801819c <mg_http_status_code_str+0x9a8>)
 8018092:	e024      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 8018094:	4b42      	ldr	r3, [pc, #264]	@ (80181a0 <mg_http_status_code_str+0x9ac>)
 8018096:	e022      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8018098:	4b42      	ldr	r3, [pc, #264]	@ (80181a4 <mg_http_status_code_str+0x9b0>)
 801809a:	e020      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 801809c:	4b42      	ldr	r3, [pc, #264]	@ (80181a8 <mg_http_status_code_str+0x9b4>)
 801809e:	e01e      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80180a0:	4b42      	ldr	r3, [pc, #264]	@ (80181ac <mg_http_status_code_str+0x9b8>)
 80180a2:	e01c      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80180a4:	4b42      	ldr	r3, [pc, #264]	@ (80181b0 <mg_http_status_code_str+0x9bc>)
 80180a6:	e01a      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80180a8:	4b42      	ldr	r3, [pc, #264]	@ (80181b4 <mg_http_status_code_str+0x9c0>)
 80180aa:	e018      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80180ac:	4b42      	ldr	r3, [pc, #264]	@ (80181b8 <mg_http_status_code_str+0x9c4>)
 80180ae:	e016      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80180b0:	4b42      	ldr	r3, [pc, #264]	@ (80181bc <mg_http_status_code_str+0x9c8>)
 80180b2:	e014      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80180b4:	4b42      	ldr	r3, [pc, #264]	@ (80181c0 <mg_http_status_code_str+0x9cc>)
 80180b6:	e012      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 80180b8:	4b42      	ldr	r3, [pc, #264]	@ (80181c4 <mg_http_status_code_str+0x9d0>)
 80180ba:	e010      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 80180bc:	4b42      	ldr	r3, [pc, #264]	@ (80181c8 <mg_http_status_code_str+0x9d4>)
 80180be:	e00e      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 80180c0:	4b42      	ldr	r3, [pc, #264]	@ (80181cc <mg_http_status_code_str+0x9d8>)
 80180c2:	e00c      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 80180c4:	4b42      	ldr	r3, [pc, #264]	@ (80181d0 <mg_http_status_code_str+0x9dc>)
 80180c6:	e00a      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80180c8:	4b42      	ldr	r3, [pc, #264]	@ (80181d4 <mg_http_status_code_str+0x9e0>)
 80180ca:	e008      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80180cc:	4b42      	ldr	r3, [pc, #264]	@ (80181d8 <mg_http_status_code_str+0x9e4>)
 80180ce:	e006      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 80180d0:	4b42      	ldr	r3, [pc, #264]	@ (80181dc <mg_http_status_code_str+0x9e8>)
 80180d2:	e004      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 80180d4:	4b42      	ldr	r3, [pc, #264]	@ (80181e0 <mg_http_status_code_str+0x9ec>)
 80180d6:	e002      	b.n	80180de <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 80180d8:	4b42      	ldr	r3, [pc, #264]	@ (80181e4 <mg_http_status_code_str+0x9f0>)
 80180da:	e000      	b.n	80180de <mg_http_status_code_str+0x8ea>
    default: return "";
 80180dc:	4b42      	ldr	r3, [pc, #264]	@ (80181e8 <mg_http_status_code_str+0x9f4>)
  }
}
 80180de:	4618      	mov	r0, r3
 80180e0:	370c      	adds	r7, #12
 80180e2:	46bd      	mov	sp, r7
 80180e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e8:	4770      	bx	lr
 80180ea:	bf00      	nop
 80180ec:	080316c4 	.word	0x080316c4
 80180f0:	080316d0 	.word	0x080316d0
 80180f4:	080316e4 	.word	0x080316e4
 80180f8:	080316f0 	.word	0x080316f0
 80180fc:	080316f4 	.word	0x080316f4
 8018100:	080316fc 	.word	0x080316fc
 8018104:	08031708 	.word	0x08031708
 8018108:	08031728 	.word	0x08031728
 801810c:	08031734 	.word	0x08031734
 8018110:	08031744 	.word	0x08031744
 8018114:	08031754 	.word	0x08031754
 8018118:	08031764 	.word	0x08031764
 801811c:	08031778 	.word	0x08031778
 8018120:	08031780 	.word	0x08031780
 8018124:	08031794 	.word	0x08031794
 8018128:	080317a8 	.word	0x080317a8
 801812c:	080317b0 	.word	0x080317b0
 8018130:	080317bc 	.word	0x080317bc
 8018134:	080317cc 	.word	0x080317cc
 8018138:	080317d8 	.word	0x080317d8
 801813c:	080317ec 	.word	0x080317ec
 8018140:	08031800 	.word	0x08031800
 8018144:	0803180c 	.word	0x0803180c
 8018148:	0803181c 	.word	0x0803181c
 801814c:	08031830 	.word	0x08031830
 8018150:	0803183c 	.word	0x0803183c
 8018154:	08031848 	.word	0x08031848
 8018158:	0803185c 	.word	0x0803185c
 801815c:	0803186c 	.word	0x0803186c
 8018160:	0803188c 	.word	0x0803188c
 8018164:	0803189c 	.word	0x0803189c
 8018168:	080318a8 	.word	0x080318a8
 801816c:	080318b0 	.word	0x080318b0
 8018170:	080318c0 	.word	0x080318c0
 8018174:	080318d4 	.word	0x080318d4
 8018178:	080318e8 	.word	0x080318e8
 801817c:	08031900 	.word	0x08031900
 8018180:	08031918 	.word	0x08031918
 8018184:	08031938 	.word	0x08031938
 8018188:	0803194c 	.word	0x0803194c
 801818c:	0803195c 	.word	0x0803195c
 8018190:	08031970 	.word	0x08031970
 8018194:	08031988 	.word	0x08031988
 8018198:	08031990 	.word	0x08031990
 801819c:	080319a4 	.word	0x080319a4
 80181a0:	080319b8 	.word	0x080319b8
 80181a4:	080319d0 	.word	0x080319d0
 80181a8:	080319e4 	.word	0x080319e4
 80181ac:	08031a04 	.word	0x08031a04
 80181b0:	08031a28 	.word	0x08031a28
 80181b4:	08031a48 	.word	0x08031a48
 80181b8:	08031a60 	.word	0x08031a60
 80181bc:	08031a78 	.word	0x08031a78
 80181c0:	08031a88 	.word	0x08031a88
 80181c4:	08031a94 	.word	0x08031a94
 80181c8:	08031aa8 	.word	0x08031aa8
 80181cc:	08031ab8 	.word	0x08031ab8
 80181d0:	08031ad4 	.word	0x08031ad4
 80181d4:	08031aec 	.word	0x08031aec
 80181d8:	08031b04 	.word	0x08031b04
 80181dc:	08031b14 	.word	0x08031b14
 80181e0:	08031b24 	.word	0x08031b24
 80181e4:	08031b44 	.word	0x08031b44
 80181e8:	08031b64 	.word	0x08031b64

080181ec <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 80181ec:	b408      	push	{r3}
 80181ee:	b580      	push	{r7, lr}
 80181f0:	b08b      	sub	sp, #44	@ 0x2c
 80181f2:	af02      	add	r7, sp, #8
 80181f4:	60f8      	str	r0, [r7, #12]
 80181f6:	60b9      	str	r1, [r7, #8]
 80181f8:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80181fa:	68b8      	ldr	r0, [r7, #8]
 80181fc:	f7ff fafa 	bl	80177f4 <mg_http_status_code_str>
 8018200:	4602      	mov	r2, r0
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d001      	beq.n	801820c <mg_http_reply+0x20>
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	e000      	b.n	801820e <mg_http_reply+0x22>
 801820c:	4b1f      	ldr	r3, [pc, #124]	@ (801828c <mg_http_reply+0xa0>)
 801820e:	9300      	str	r3, [sp, #0]
 8018210:	4613      	mov	r3, r2
 8018212:	68ba      	ldr	r2, [r7, #8]
 8018214:	491e      	ldr	r1, [pc, #120]	@ (8018290 <mg_http_reply+0xa4>)
 8018216:	68f8      	ldr	r0, [r7, #12]
 8018218:	f005 f8d8 	bl	801d3cc <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018220:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8018222:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018226:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801822e:	f107 0314 	add.w	r3, r7, #20
 8018232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018234:	4817      	ldr	r0, [pc, #92]	@ (8018294 <mg_http_reply+0xa8>)
 8018236:	f7fe f8cd 	bl	80163d4 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801823e:	2b10      	cmp	r3, #16
 8018240:	d916      	bls.n	8018270 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018246:	69fb      	ldr	r3, [r7, #28]
 8018248:	3b0f      	subs	r3, #15
 801824a:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8018254:	4a10      	ldr	r2, [pc, #64]	@ (8018298 <mg_http_reply+0xac>)
 8018256:	210b      	movs	r1, #11
 8018258:	f008 ff8c 	bl	8021174 <mg_snprintf>
 801825c:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018262:	69f9      	ldr	r1, [r7, #28]
 8018264:	69bb      	ldr	r3, [r7, #24]
 8018266:	440b      	add	r3, r1
 8018268:	3b0f      	subs	r3, #15
 801826a:	4413      	add	r3, r2
 801826c:	2220      	movs	r2, #32
 801826e:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8018270:	68fa      	ldr	r2, [r7, #12]
 8018272:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018276:	f36f 13c7 	bfc	r3, #7, #1
 801827a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 801827e:	bf00      	nop
 8018280:	3724      	adds	r7, #36	@ 0x24
 8018282:	46bd      	mov	sp, r7
 8018284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018288:	b001      	add	sp, #4
 801828a:	4770      	bx	lr
 801828c:	08031b64 	.word	0x08031b64
 8018290:	08031b68 	.word	0x08031b68
 8018294:	08021105 	.word	0x08021105
 8018298:	08031b9c 	.word	0x08031b9c

0801829c <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 801829c:	b580      	push	{r7, lr}
 801829e:	b082      	sub	sp, #8
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7fe fc5d 	bl	8016b6a <mg_fs_close>
  c->pfn_data = NULL;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2200      	movs	r2, #0
 80182b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	4a07      	ldr	r2, [pc, #28]	@ (80182d8 <restore_http_cb+0x3c>)
 80182bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 80182c0:	687a      	ldr	r2, [r7, #4]
 80182c2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80182c6:	f36f 13c7 	bfc	r3, #7, #1
 80182ca:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 80182ce:	bf00      	nop
 80182d0:	3708      	adds	r7, #8
 80182d2:	46bd      	mov	sp, r7
 80182d4:	bd80      	pop	{r7, pc}
 80182d6:	bf00      	nop
 80182d8:	08019a59 	.word	0x08019a59

080182dc <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80182dc:	b5b0      	push	{r4, r5, r7, lr}
 80182de:	b088      	sub	sp, #32
 80182e0:	af04      	add	r7, sp, #16
 80182e2:	60f8      	str	r0, [r7, #12]
 80182e4:	60b9      	str	r1, [r7, #8]
 80182e6:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2200      	movs	r2, #0
 80182ec:	461c      	mov	r4, r3
 80182ee:	4615      	mov	r5, r2
 80182f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80182f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80182f8:	e9cd 2300 	strd	r2, r3, [sp]
 80182fc:	4a04      	ldr	r2, [pc, #16]	@ (8018310 <mg_http_etag+0x34>)
 80182fe:	68b9      	ldr	r1, [r7, #8]
 8018300:	68f8      	ldr	r0, [r7, #12]
 8018302:	f008 ff37 	bl	8021174 <mg_snprintf>
  return buf;
 8018306:	68fb      	ldr	r3, [r7, #12]
}
 8018308:	4618      	mov	r0, r3
 801830a:	3710      	adds	r7, #16
 801830c:	46bd      	mov	sp, r7
 801830e:	bdb0      	pop	{r4, r5, r7, pc}
 8018310:	08031ba4 	.word	0x08031ba4

08018314 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8018314:	b580      	push	{r7, lr}
 8018316:	b08a      	sub	sp, #40	@ 0x28
 8018318:	af00      	add	r7, sp, #0
 801831a:	60f8      	str	r0, [r7, #12]
 801831c:	60b9      	str	r1, [r7, #8]
 801831e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8018320:	68bb      	ldr	r3, [r7, #8]
 8018322:	2b08      	cmp	r3, #8
 8018324:	d002      	beq.n	801832c <static_cb+0x18>
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	2b02      	cmp	r3, #2
 801832a:	d148      	bne.n	80183be <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018332:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8018334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018338:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	33a4      	adds	r3, #164	@ 0xa4
 801833e:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018344:	69fa      	ldr	r2, [r7, #28]
 8018346:	429a      	cmp	r2, r3
 8018348:	d905      	bls.n	8018356 <static_cb+0x42>
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	3348      	adds	r3, #72	@ 0x48
 801834e:	69f9      	ldr	r1, [r7, #28]
 8018350:	4618      	mov	r0, r3
 8018352:	f001 ff03 	bl	801a15c <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801835e:	429a      	cmp	r2, r3
 8018360:	d234      	bcs.n	80183cc <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801836a:	1ad3      	subs	r3, r2, r3
 801836c:	627b      	str	r3, [r7, #36]	@ 0x24
 801836e:	69bb      	ldr	r3, [r7, #24]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018374:	429a      	cmp	r2, r3
 8018376:	d902      	bls.n	801837e <static_cb+0x6a>
 8018378:	69bb      	ldr	r3, [r7, #24]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 801837e:	6a3b      	ldr	r3, [r7, #32]
 8018380:	685b      	ldr	r3, [r3, #4]
 8018382:	691b      	ldr	r3, [r3, #16]
 8018384:	6a3a      	ldr	r2, [r7, #32]
 8018386:	6810      	ldr	r0, [r2, #0]
 8018388:	68fa      	ldr	r2, [r7, #12]
 801838a:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 801838c:	68fa      	ldr	r2, [r7, #12]
 801838e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8018390:	4411      	add	r1, r2
 8018392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018394:	4798      	blx	r3
 8018396:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801839c:	697b      	ldr	r3, [r7, #20]
 801839e:	441a      	add	r2, r3
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 80183a4:	69bb      	ldr	r3, [r7, #24]
 80183a6:	681a      	ldr	r2, [r3, #0]
 80183a8:	697b      	ldr	r3, [r7, #20]
 80183aa:	1ad2      	subs	r2, r2, r3
 80183ac:	69bb      	ldr	r3, [r7, #24]
 80183ae:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80183b0:	697b      	ldr	r3, [r7, #20]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d10c      	bne.n	80183d0 <static_cb+0xbc>
 80183b6:	68f8      	ldr	r0, [r7, #12]
 80183b8:	f7ff ff70 	bl	801829c <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80183bc:	e008      	b.n	80183d0 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	2b09      	cmp	r3, #9
 80183c2:	d106      	bne.n	80183d2 <static_cb+0xbe>
    restore_http_cb(c);
 80183c4:	68f8      	ldr	r0, [r7, #12]
 80183c6:	f7ff ff69 	bl	801829c <restore_http_cb>
 80183ca:	e002      	b.n	80183d2 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80183cc:	bf00      	nop
 80183ce:	e000      	b.n	80183d2 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80183d0:	bf00      	nop
  }
  (void) ev_data;
}
 80183d2:	3728      	adds	r7, #40	@ 0x28
 80183d4:	46bd      	mov	sp, r7
 80183d6:	bd80      	pop	{r7, pc}

080183d8 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80183d8:	b590      	push	{r4, r7, lr}
 80183da:	b091      	sub	sp, #68	@ 0x44
 80183dc:	af02      	add	r7, sp, #8
 80183de:	60f8      	str	r0, [r7, #12]
 80183e0:	1d38      	adds	r0, r7, #4
 80183e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80183e6:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra);
 80183e8:	f107 0314 	add.w	r3, r7, #20
 80183ec:	6839      	ldr	r1, [r7, #0]
 80183ee:	4618      	mov	r0, r3
 80183f0:	f009 fba8 	bl	8021b44 <mg_str_s>
  size_t i = 0;
 80183f4:	2300      	movs	r3, #0
 80183f6:	637b      	str	r3, [r7, #52]	@ 0x34

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 80183f8:	e002      	b.n	8018400 <guess_content_type+0x28>
 80183fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183fc:	3301      	adds	r3, #1
 80183fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018404:	429a      	cmp	r2, r3
 8018406:	d208      	bcs.n	801841a <guess_content_type+0x42>
 8018408:	687a      	ldr	r2, [r7, #4]
 801840a:	68b9      	ldr	r1, [r7, #8]
 801840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801840e:	1acb      	subs	r3, r1, r3
 8018410:	3b01      	subs	r3, #1
 8018412:	4413      	add	r3, r2
 8018414:	781b      	ldrb	r3, [r3, #0]
 8018416:	2b2e      	cmp	r3, #46	@ 0x2e
 8018418:	d1ef      	bne.n	80183fa <guess_content_type+0x22>
  path.buf += path.len - i;
 801841a:	687a      	ldr	r2, [r7, #4]
 801841c:	68b9      	ldr	r1, [r7, #8]
 801841e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018420:	1acb      	subs	r3, r1, r3
 8018422:	4413      	add	r3, r2
 8018424:	607b      	str	r3, [r7, #4]
  path.len = i;
 8018426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018428:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 801842a:	e020      	b.n	801846e <guess_content_type+0x96>
    if (mg_span(entry, &k, &v, '=') && mg_strcmp(path, k) == 0) return v;
 801842c:	f107 031c 	add.w	r3, r7, #28
 8018430:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018434:	213d      	movs	r1, #61	@ 0x3d
 8018436:	9100      	str	r1, [sp, #0]
 8018438:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801843c:	c903      	ldmia	r1, {r0, r1}
 801843e:	f009 fd48 	bl	8021ed2 <mg_span>
 8018442:	4603      	mov	r3, r0
 8018444:	2b00      	cmp	r3, #0
 8018446:	d012      	beq.n	801846e <guess_content_type+0x96>
 8018448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801844c:	cb0c      	ldmia	r3, {r2, r3}
 801844e:	1d39      	adds	r1, r7, #4
 8018450:	c903      	ldmia	r1, {r0, r1}
 8018452:	f009 fbc1 	bl	8021bd8 <mg_strcmp>
 8018456:	4603      	mov	r3, r0
 8018458:	2b00      	cmp	r3, #0
 801845a:	d108      	bne.n	801846e <guess_content_type+0x96>
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	461a      	mov	r2, r3
 8018460:	f107 031c 	add.w	r3, r7, #28
 8018464:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018468:	e882 0003 	stmia.w	r2, {r0, r1}
 801846c:	e036      	b.n	80184dc <guess_content_type+0x104>
  while (mg_span(s, &entry, &s, ',')) {
 801846e:	f107 0314 	add.w	r3, r7, #20
 8018472:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8018476:	212c      	movs	r1, #44	@ 0x2c
 8018478:	9100      	str	r1, [sp, #0]
 801847a:	f107 0114 	add.w	r1, r7, #20
 801847e:	c903      	ldmia	r1, {r0, r1}
 8018480:	f009 fd27 	bl	8021ed2 <mg_span>
 8018484:	4603      	mov	r3, r0
 8018486:	2b00      	cmp	r3, #0
 8018488:	d1d0      	bne.n	801842c <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 801848a:	2300      	movs	r3, #0
 801848c:	637b      	str	r3, [r7, #52]	@ 0x34
 801848e:	e01a      	b.n	80184c6 <guess_content_type+0xee>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8018490:	4a14      	ldr	r2, [pc, #80]	@ (80184e4 <guess_content_type+0x10c>)
 8018492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018494:	00db      	lsls	r3, r3, #3
 8018496:	4413      	add	r3, r2
 8018498:	cb0c      	ldmia	r3, {r2, r3}
 801849a:	1d39      	adds	r1, r7, #4
 801849c:	c903      	ldmia	r1, {r0, r1}
 801849e:	f009 fb9b 	bl	8021bd8 <mg_strcmp>
 80184a2:	4603      	mov	r3, r0
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d10b      	bne.n	80184c0 <guess_content_type+0xe8>
 80184a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184aa:	3301      	adds	r3, #1
 80184ac:	68f9      	ldr	r1, [r7, #12]
 80184ae:	4a0d      	ldr	r2, [pc, #52]	@ (80184e4 <guess_content_type+0x10c>)
 80184b0:	460c      	mov	r4, r1
 80184b2:	00db      	lsls	r3, r3, #3
 80184b4:	4413      	add	r3, r2
 80184b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80184ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80184be:	e00d      	b.n	80184dc <guess_content_type+0x104>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 80184c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184c2:	3302      	adds	r3, #2
 80184c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80184c6:	4a07      	ldr	r2, [pc, #28]	@ (80184e4 <guess_content_type+0x10c>)
 80184c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d1de      	bne.n	8018490 <guess_content_type+0xb8>
  }

  return mg_str("text/plain; charset=utf-8");
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	4904      	ldr	r1, [pc, #16]	@ (80184e8 <guess_content_type+0x110>)
 80184d6:	4618      	mov	r0, r3
 80184d8:	f009 fb34 	bl	8021b44 <mg_str_s>
}
 80184dc:	68f8      	ldr	r0, [r7, #12]
 80184de:	373c      	adds	r7, #60	@ 0x3c
 80184e0:	46bd      	mov	sp, r7
 80184e2:	bd90      	pop	{r4, r7, pc}
 80184e4:	200000b0 	.word	0x200000b0
 80184e8:	08031c8c 	.word	0x08031c8c

080184ec <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b08c      	sub	sp, #48	@ 0x30
 80184f0:	af02      	add	r7, sp, #8
 80184f2:	60f8      	str	r0, [r7, #12]
 80184f4:	60b9      	str	r1, [r7, #8]
 80184f6:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 80184f8:	2300      	movs	r3, #0
 80184fa:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 80184fc:	2300      	movs	r3, #0
 80184fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8018500:	e058      	b.n	80185b4 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	681a      	ldr	r2, [r3, #0]
 8018506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018508:	3306      	adds	r3, #6
 801850a:	18d1      	adds	r1, r2, r3
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	685a      	ldr	r2, [r3, #4]
 8018510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018512:	1ad3      	subs	r3, r2, r3
 8018514:	1f9a      	subs	r2, r3, #6
 8018516:	f107 0310 	add.w	r3, r7, #16
 801851a:	4618      	mov	r0, r3
 801851c:	f009 fb2f 	bl	8021b7e <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8018520:	68fb      	ldr	r3, [r7, #12]
 8018522:	681a      	ldr	r2, [r3, #0]
 8018524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018526:	4413      	add	r3, r2
 8018528:	2206      	movs	r2, #6
 801852a:	4929      	ldr	r1, [pc, #164]	@ (80185d0 <getrange+0xe4>)
 801852c:	4618      	mov	r0, r3
 801852e:	f00d fb7b 	bl	8025c28 <memcmp>
 8018532:	4603      	mov	r3, r0
 8018534:	2b00      	cmp	r3, #0
 8018536:	d003      	beq.n	8018540 <getrange+0x54>
  for (i = 0; i + 6 < s->len; i++) {
 8018538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801853a:	3301      	adds	r3, #1
 801853c:	627b      	str	r3, [r7, #36]	@ 0x24
 801853e:	e039      	b.n	80185b4 <getrange+0xc8>
    if (mg_span(v, &k, &v, '-')) {
 8018540:	f107 0310 	add.w	r3, r7, #16
 8018544:	f107 0218 	add.w	r2, r7, #24
 8018548:	212d      	movs	r1, #45	@ 0x2d
 801854a:	9100      	str	r1, [sp, #0]
 801854c:	f107 0110 	add.w	r1, r7, #16
 8018550:	c903      	ldmia	r1, {r0, r1}
 8018552:	f009 fcbe 	bl	8021ed2 <mg_span>
 8018556:	4603      	mov	r3, r0
 8018558:	2b00      	cmp	r3, #0
 801855a:	d01d      	beq.n	8018598 <getrange+0xac>
      if (mg_to_size_t(k, a)) numparsed++;
 801855c:	68ba      	ldr	r2, [r7, #8]
 801855e:	f107 0318 	add.w	r3, r7, #24
 8018562:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018566:	f7fe fbcd 	bl	8016d04 <mg_to_size_t>
 801856a:	4603      	mov	r3, r0
 801856c:	2b00      	cmp	r3, #0
 801856e:	d002      	beq.n	8018576 <getrange+0x8a>
 8018570:	6a3b      	ldr	r3, [r7, #32]
 8018572:	3301      	adds	r3, #1
 8018574:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8018576:	697b      	ldr	r3, [r7, #20]
 8018578:	2b00      	cmp	r3, #0
 801857a:	d022      	beq.n	80185c2 <getrange+0xd6>
 801857c:	687a      	ldr	r2, [r7, #4]
 801857e:	f107 0310 	add.w	r3, r7, #16
 8018582:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018586:	f7fe fbbd 	bl	8016d04 <mg_to_size_t>
 801858a:	4603      	mov	r3, r0
 801858c:	2b00      	cmp	r3, #0
 801858e:	d018      	beq.n	80185c2 <getrange+0xd6>
 8018590:	6a3b      	ldr	r3, [r7, #32]
 8018592:	3301      	adds	r3, #1
 8018594:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8018596:	e014      	b.n	80185c2 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8018598:	68ba      	ldr	r2, [r7, #8]
 801859a:	f107 0310 	add.w	r3, r7, #16
 801859e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80185a2:	f7fe fbaf 	bl	8016d04 <mg_to_size_t>
 80185a6:	4603      	mov	r3, r0
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d00a      	beq.n	80185c2 <getrange+0xd6>
 80185ac:	6a3b      	ldr	r3, [r7, #32]
 80185ae:	3301      	adds	r3, #1
 80185b0:	623b      	str	r3, [r7, #32]
 80185b2:	e007      	b.n	80185c4 <getrange+0xd8>
  for (i = 0; i + 6 < s->len; i++) {
 80185b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185b6:	1d9a      	adds	r2, r3, #6
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	685b      	ldr	r3, [r3, #4]
 80185bc:	429a      	cmp	r2, r3
 80185be:	d3a0      	bcc.n	8018502 <getrange+0x16>
 80185c0:	e000      	b.n	80185c4 <getrange+0xd8>
    break;
 80185c2:	bf00      	nop
  }
  return (int) numparsed;
 80185c4:	6a3b      	ldr	r3, [r7, #32]
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3728      	adds	r7, #40	@ 0x28
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}
 80185ce:	bf00      	nop
 80185d0:	08031e10 	.word	0x08031e10

080185d4 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 80185d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185d8:	b0f9      	sub	sp, #484	@ 0x1e4
 80185da:	af0a      	add	r7, sp, #40	@ 0x28
 80185dc:	f507 74dc 	add.w	r4, r7, #440	@ 0x1b8
 80185e0:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 80185e4:	6020      	str	r0, [r4, #0]
 80185e6:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80185ea:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 80185ee:	6001      	str	r1, [r0, #0]
 80185f0:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 80185f4:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80185f8:	600a      	str	r2, [r1, #0]
 80185fa:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80185fe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8018602:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8018604:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018608:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	695b      	ldr	r3, [r3, #20]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d006      	beq.n	8018622 <mg_http_serve_file+0x4e>
 8018614:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018618:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	695b      	ldr	r3, [r3, #20]
 8018620:	e000      	b.n	8018624 <mg_http_serve_file+0x50>
 8018622:	4ba7      	ldr	r3, [pc, #668]	@ (80188c0 <mg_http_serve_file+0x2ec>)
 8018624:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  struct mg_fd *fd = NULL;
 8018628:	2300      	movs	r3, #0
 801862a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  size_t size = 0;
 801862e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018632:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018636:	2200      	movs	r2, #0
 8018638:	601a      	str	r2, [r3, #0]
  time_t mtime = 0;
 801863a:	f04f 0200 	mov.w	r2, #0
 801863e:	f04f 0300 	mov.w	r3, #0
 8018642:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8018646:	2300      	movs	r3, #0
 8018648:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 801864c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8018650:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018654:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8018658:	6819      	ldr	r1, [r3, #0]
 801865a:	4610      	mov	r0, r2
 801865c:	f009 fa72 	bl	8021b44 <mg_str_s>
 8018660:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018664:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	68db      	ldr	r3, [r3, #12]
 801866c:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8018670:	f5a2 7090 	sub.w	r0, r2, #288	@ 0x120
 8018674:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8018678:	ca06      	ldmia	r2, {r1, r2}
 801867a:	f7ff fead 	bl	80183d8 <guess_content_type>
  bool gzip = false;
 801867e:	2300      	movs	r3, #0
 8018680:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3

  if (path != NULL) {
 8018684:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018688:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	2b00      	cmp	r3, #0
 8018690:	d05c      	beq.n	801874c <mg_http_serve_file+0x178>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8018692:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018696:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801869a:	498a      	ldr	r1, [pc, #552]	@ (80188c4 <mg_http_serve_file+0x2f0>)
 801869c:	6818      	ldr	r0, [r3, #0]
 801869e:	f7fe fd7f 	bl	80171a0 <mg_http_get_header>
 80186a2:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    if (ae != NULL) {
 80186a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d03e      	beq.n	801872c <mg_http_serve_file+0x158>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 80186ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80186b2:	6859      	ldr	r1, [r3, #4]
 80186b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	461a      	mov	r2, r3
 80186bc:	4882      	ldr	r0, [pc, #520]	@ (80188c8 <mg_http_serve_file+0x2f4>)
 80186be:	f008 fd8f 	bl	80211e0 <mg_mprintf>
 80186c2:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 80186c6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d02a      	beq.n	8018724 <mg_http_serve_file+0x150>
 80186ce:	497f      	ldr	r1, [pc, #508]	@ (80188cc <mg_http_serve_file+0x2f8>)
 80186d0:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80186d4:	f00d fbbc 	bl	8025e50 <strstr>
 80186d8:	4603      	mov	r3, r0
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d022      	beq.n	8018724 <mg_http_serve_file+0x150>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 80186de:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80186e2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80186e6:	f107 00ac 	add.w	r0, r7, #172	@ 0xac
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	4a78      	ldr	r2, [pc, #480]	@ (80188d0 <mg_http_serve_file+0x2fc>)
 80186ee:	2180      	movs	r1, #128	@ 0x80
 80186f0:	f008 fd40 	bl	8021174 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 80186f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80186f8:	2201      	movs	r2, #1
 80186fa:	4619      	mov	r1, r3
 80186fc:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8018700:	f7fe fa0c 	bl	8016b1c <mg_fs_open>
 8018704:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
        if (fd != NULL) gzip = true, path = tmp;
 8018708:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801870c:	2b00      	cmp	r3, #0
 801870e:	d009      	beq.n	8018724 <mg_http_serve_file+0x150>
 8018710:	2301      	movs	r3, #1
 8018712:	f887 31b3 	strb.w	r3, [r7, #435]	@ 0x1b3
 8018716:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801871a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801871e:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 8018722:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8018724:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8018728:	f7f3 ffce 	bl	800c6c8 <vPortFree>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 801872c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8018730:	2b00      	cmp	r3, #0
 8018732:	d10b      	bne.n	801874c <mg_http_serve_file+0x178>
 8018734:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018738:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 801873c:	2201      	movs	r2, #1
 801873e:	6819      	ldr	r1, [r3, #0]
 8018740:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8018744:	f7fe f9ea 	bl	8016b1c <mg_fs_open>
 8018748:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 801874c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8018750:	2b00      	cmp	r3, #0
 8018752:	d144      	bne.n	80187de <mg_http_serve_file+0x20a>
 8018754:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018758:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	691b      	ldr	r3, [r3, #16]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d03c      	beq.n	80187de <mg_http_serve_file+0x20a>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8018764:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018768:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	691b      	ldr	r3, [r3, #16]
 8018770:	2201      	movs	r2, #1
 8018772:	4619      	mov	r1, r3
 8018774:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8018778:	f7fe f9d0 	bl	8016b1c <mg_fs_open>
 801877c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
    path = opts->page404;
 8018780:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018784:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8018788:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 801878c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8018790:	6812      	ldr	r2, [r2, #0]
 8018792:	6912      	ldr	r2, [r2, #16]
 8018794:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8018796:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 801879a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801879e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80187a2:	6819      	ldr	r1, [r3, #0]
 80187a4:	4610      	mov	r0, r2
 80187a6:	f009 f9cd 	bl	8021b44 <mg_str_s>
 80187aa:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80187ae:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	68db      	ldr	r3, [r3, #12]
 80187b6:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 80187ba:	f5a2 7490 	sub.w	r4, r2, #288	@ 0x120
 80187be:	f107 0010 	add.w	r0, r7, #16
 80187c2:	f507 72ba 	add.w	r2, r7, #372	@ 0x174
 80187c6:	ca06      	ldmia	r2, {r1, r2}
 80187c8:	f7ff fe06 	bl	80183d8 <guess_content_type>
 80187cc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80187d0:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 80187d4:	4623      	mov	r3, r4
 80187d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187da:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 80187de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d00f      	beq.n	8018806 <mg_http_serve_file+0x232>
 80187e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80187ea:	681c      	ldr	r4, [r3, #0]
 80187ec:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80187f0:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80187f4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80187f8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80187fc:	6818      	ldr	r0, [r3, #0]
 80187fe:	47a0      	blx	r4
 8018800:	4603      	mov	r3, r0
 8018802:	2b00      	cmp	r3, #0
 8018804:	d114      	bne.n	8018830 <mg_http_serve_file+0x25c>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8018806:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801880a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	689a      	ldr	r2, [r3, #8]
 8018812:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018816:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 801881a:	4b2e      	ldr	r3, [pc, #184]	@ (80188d4 <mg_http_serve_file+0x300>)
 801881c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8018820:	6800      	ldr	r0, [r0, #0]
 8018822:	f7ff fce3 	bl	80181ec <mg_http_reply>
    mg_fs_close(fd);
 8018826:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 801882a:	f7fe f99e 	bl	8016b6a <mg_fs_close>
 801882e:	e19d      	b.n	8018b6c <mg_http_serve_file+0x598>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8018830:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018834:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018838:	6819      	ldr	r1, [r3, #0]
 801883a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 801883e:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8018842:	e9cd 2300 	strd	r2, r3, [sp]
 8018846:	460a      	mov	r2, r1
 8018848:	2140      	movs	r1, #64	@ 0x40
 801884a:	f7ff fd47 	bl	80182dc <mg_http_etag>
 801884e:	4603      	mov	r3, r0
 8018850:	2b00      	cmp	r3, #0
 8018852:	d045      	beq.n	80188e0 <mg_http_serve_file+0x30c>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8018854:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018858:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 801885c:	491e      	ldr	r1, [pc, #120]	@ (80188d8 <mg_http_serve_file+0x304>)
 801885e:	6818      	ldr	r0, [r3, #0]
 8018860:	f7fe fc9e 	bl	80171a0 <mg_http_get_header>
 8018864:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8018868:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 801886c:	2b00      	cmp	r3, #0
 801886e:	d037      	beq.n	80188e0 <mg_http_serve_file+0x30c>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8018870:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8018874:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8018878:	4611      	mov	r1, r2
 801887a:	4618      	mov	r0, r3
 801887c:	f009 f962 	bl	8021b44 <mg_str_s>
 8018880:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8018884:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8018888:	cb0c      	ldmia	r3, {r2, r3}
 801888a:	c903      	ldmia	r1, {r0, r1}
 801888c:	f009 f9e6 	bl	8021c5c <mg_strcasecmp>
 8018890:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8018892:	2b00      	cmp	r3, #0
 8018894:	d124      	bne.n	80188e0 <mg_http_serve_file+0x30c>
    mg_fs_close(fd);
 8018896:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 801889a:	f7fe f966 	bl	8016b6a <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 801889e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80188a2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	689a      	ldr	r2, [r3, #8]
 80188aa:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80188ae:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 80188b2:	4b0a      	ldr	r3, [pc, #40]	@ (80188dc <mg_http_serve_file+0x308>)
 80188b4:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80188b8:	6800      	ldr	r0, [r0, #0]
 80188ba:	f7ff fc97 	bl	80181ec <mg_http_reply>
 80188be:	e155      	b.n	8018b6c <mg_http_serve_file+0x598>
 80188c0:	20000088 	.word	0x20000088
 80188c4:	08031e18 	.word	0x08031e18
 80188c8:	08031604 	.word	0x08031604
 80188cc:	08031e28 	.word	0x08031e28
 80188d0:	08031e30 	.word	0x08031e30
 80188d4:	08031e38 	.word	0x08031e38
 80188d8:	08031e44 	.word	0x08031e44
 80188dc:	08031b64 	.word	0x08031b64
  } else {
    int n, status = 200;
 80188e0:	23c8      	movs	r3, #200	@ 0xc8
 80188e2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 80188e6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80188ea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80188ee:	2200      	movs	r2, #0
 80188f0:	601a      	str	r2, [r3, #0]
 80188f2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80188f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80188fa:	2200      	movs	r2, #0
 80188fc:	601a      	str	r2, [r3, #0]
 80188fe:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018902:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 801890c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018910:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8018914:	4998      	ldr	r1, [pc, #608]	@ (8018b78 <mg_http_serve_file+0x5a4>)
 8018916:	6818      	ldr	r0, [r3, #0]
 8018918:	f7fe fc42 	bl	80171a0 <mg_http_get_header>
 801891c:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    range[0] = '\0';
 8018920:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018924:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018928:	2200      	movs	r2, #0
 801892a:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 801892c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8018930:	2b00      	cmp	r3, #0
 8018932:	f000 8095 	beq.w	8018a60 <mg_http_serve_file+0x48c>
 8018936:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 801893a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801893e:	4619      	mov	r1, r3
 8018940:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8018944:	f7ff fdd2 	bl	80184ec <getrange>
 8018948:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 801894c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8018950:	2b00      	cmp	r3, #0
 8018952:	f340 8085 	ble.w	8018a60 <mg_http_serve_file+0x48c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8018956:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 801895a:	2b01      	cmp	r3, #1
 801895c:	d107      	bne.n	801896e <mg_http_serve_file+0x39a>
 801895e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8018962:	1e5a      	subs	r2, r3, #1
 8018964:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018968:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801896c:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 801896e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018972:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018976:	681a      	ldr	r2, [r3, #0]
 8018978:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801897c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	429a      	cmp	r2, r3
 8018984:	d808      	bhi.n	8018998 <mg_http_serve_file+0x3c4>
 8018986:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 801898a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8018994:	429a      	cmp	r2, r3
 8018996:	d81a      	bhi.n	80189ce <mg_http_serve_file+0x3fa>
        status = 416;
 8018998:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 801899c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = 0;
 80189a0:	2300      	movs	r3, #0
 80189a2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 80189a6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80189aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	2200      	movs	r2, #0
 80189b2:	60bb      	str	r3, [r7, #8]
 80189b4:	60fa      	str	r2, [r7, #12]
 80189b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80189ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80189be:	e9cd 1200 	strd	r1, r2, [sp]
 80189c2:	4a6e      	ldr	r2, [pc, #440]	@ (8018b7c <mg_http_serve_file+0x5a8>)
 80189c4:	2164      	movs	r1, #100	@ 0x64
 80189c6:	4618      	mov	r0, r3
 80189c8:	f008 fbd4 	bl	8021174 <mg_snprintf>
 80189cc:	e048      	b.n	8018a60 <mg_http_serve_file+0x48c>
                    (int64_t) size);
      } else {
        status = 206;
 80189ce:	23ce      	movs	r3, #206	@ 0xce
 80189d0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
        cl = r2 - r1 + 1;
 80189d4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80189d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80189dc:	681a      	ldr	r2, [r3, #0]
 80189de:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80189e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	1ad3      	subs	r3, r2, r3
 80189ea:	3301      	adds	r3, #1
 80189ec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
        mg_snprintf(range, sizeof(range),
 80189f0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80189f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2200      	movs	r2, #0
 80189fc:	469a      	mov	sl, r3
 80189fe:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8018a00:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018a04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8018a08:	681a      	ldr	r2, [r3, #0]
 8018a0a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8018a0e:	4413      	add	r3, r2
 8018a10:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8018a12:	2200      	movs	r2, #0
 8018a14:	461d      	mov	r5, r3
 8018a16:	4616      	mov	r6, r2
 8018a18:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018a1c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	2200      	movs	r2, #0
 8018a24:	603b      	str	r3, [r7, #0]
 8018a26:	607a      	str	r2, [r7, #4]
 8018a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018a2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8018a30:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018a34:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8018a38:	e9cd ab00 	strd	sl, fp, [sp]
 8018a3c:	4a50      	ldr	r2, [pc, #320]	@ (8018b80 <mg_http_serve_file+0x5ac>)
 8018a3e:	2164      	movs	r1, #100	@ 0x64
 8018a40:	4618      	mov	r0, r3
 8018a42:	f008 fb97 	bl	8021174 <mg_snprintf>
        fs->sk(fd->fd, r1);
 8018a46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8018a4a:	699b      	ldr	r3, [r3, #24]
 8018a4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8018a50:	6810      	ldr	r0, [r2, #0]
 8018a52:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8018a56:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8018a5a:	6812      	ldr	r2, [r2, #0]
 8018a5c:	4611      	mov	r1, r2
 8018a5e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8018a60:	f8d7 01ac 	ldr.w	r0, [r7, #428]	@ 0x1ac
 8018a64:	f7fe fec6 	bl	80177f4 <mg_http_status_code_str>
 8018a68:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 8018a6a:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018a6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8018a72:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 8018a74:	461d      	mov	r5, r3
 8018a76:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018a7a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8018a7e:	681a      	ldr	r2, [r3, #0]
 8018a80:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8018a84:	2100      	movs	r1, #0
 8018a86:	4698      	mov	r8, r3
 8018a88:	4689      	mov	r9, r1
 8018a8a:	f897 31b3 	ldrb.w	r3, [r7, #435]	@ 0x1b3
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d001      	beq.n	8018a96 <mg_http_serve_file+0x4c2>
 8018a92:	493c      	ldr	r1, [pc, #240]	@ (8018b84 <mg_http_serve_file+0x5b0>)
 8018a94:	e000      	b.n	8018a98 <mg_http_serve_file+0x4c4>
 8018a96:	493c      	ldr	r1, [pc, #240]	@ (8018b88 <mg_http_serve_file+0x5b4>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8018a98:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018a9c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d006      	beq.n	8018ab6 <mg_http_serve_file+0x4e2>
 8018aa8:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018aac:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	689b      	ldr	r3, [r3, #8]
 8018ab4:	e000      	b.n	8018ab8 <mg_http_serve_file+0x4e4>
 8018ab6:	4b34      	ldr	r3, [pc, #208]	@ (8018b88 <mg_http_serve_file+0x5b4>)
 8018ab8:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 8018abc:	f5a0 70ca 	sub.w	r0, r0, #404	@ 0x194
 8018ac0:	9308      	str	r3, [sp, #32]
 8018ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018ac6:	9307      	str	r3, [sp, #28]
 8018ac8:	9106      	str	r1, [sp, #24]
 8018aca:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8018ace:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8018ad2:	9302      	str	r3, [sp, #8]
 8018ad4:	9201      	str	r2, [sp, #4]
 8018ad6:	9500      	str	r5, [sp, #0]
 8018ad8:	4623      	mov	r3, r4
 8018ada:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8018ade:	492b      	ldr	r1, [pc, #172]	@ (8018b8c <mg_http_serve_file+0x5b8>)
 8018ae0:	6800      	ldr	r0, [r0, #0]
 8018ae2:	f004 fc73 	bl	801d3cc <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 8018ae6:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8018aea:	4929      	ldr	r1, [pc, #164]	@ (8018b90 <mg_http_serve_file+0x5bc>)
 8018aec:	4618      	mov	r0, r3
 8018aee:	f009 f829 	bl	8021b44 <mg_str_s>
 8018af2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018af6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8018afa:	6819      	ldr	r1, [r3, #0]
 8018afc:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8018b00:	cb0c      	ldmia	r3, {r2, r3}
 8018b02:	c903      	ldmia	r1, {r0, r1}
 8018b04:	f009 f8aa 	bl	8021c5c <mg_strcasecmp>
 8018b08:	4603      	mov	r3, r0
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d10f      	bne.n	8018b2e <mg_http_serve_file+0x55a>
      c->is_resp = 0;
 8018b0e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018b12:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018b16:	681a      	ldr	r2, [r3, #0]
 8018b18:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018b1c:	f36f 13c7 	bfc	r3, #7, #1
 8018b20:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_fs_close(fd);
 8018b24:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8018b28:	f7fe f81f 	bl	8016b6a <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 8018b2c:	e01e      	b.n	8018b6c <mg_http_serve_file+0x598>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8018b2e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018b32:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	33a4      	adds	r3, #164	@ 0xa4
 8018b3a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
      c->pfn = static_cb;
 8018b3e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018b42:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	4a12      	ldr	r2, [pc, #72]	@ (8018b94 <mg_http_serve_file+0x5c0>)
 8018b4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 8018b4e:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8018b52:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8018b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 8018b60:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018b64:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8018b68:	601a      	str	r2, [r3, #0]
}
 8018b6a:	e7ff      	b.n	8018b6c <mg_http_serve_file+0x598>
 8018b6c:	bf00      	nop
 8018b6e:	f507 77de 	add.w	r7, r7, #444	@ 0x1bc
 8018b72:	46bd      	mov	sp, r7
 8018b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b78:	08031e54 	.word	0x08031e54
 8018b7c:	08031e5c 	.word	0x08031e5c
 8018b80:	08031e7c 	.word	0x08031e7c
 8018b84:	08031ea4 	.word	0x08031ea4
 8018b88:	08031b64 	.word	0x08031b64
 8018b8c:	08031ec0 	.word	0x08031ec0
 8018b90:	08031f10 	.word	0x08031f10
 8018b94:	08018315 	.word	0x08018315

08018b98 <printdirentry>:
  const struct mg_http_serve_opts *opts;
  const char *dir;
};

#if MG_ENABLE_DIRLIST
static void printdirentry(const char *name, void *userdata) {
 8018b98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018b9c:	b0c8      	sub	sp, #288	@ 0x120
 8018b9e:	af0a      	add	r7, sp, #40	@ 0x28
 8018ba0:	6078      	str	r0, [r7, #4]
 8018ba2:	6039      	str	r1, [r7, #0]
  struct printdirentrydata *d = (struct printdirentrydata *) userdata;
 8018ba4:	683b      	ldr	r3, [r7, #0]
 8018ba6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
 8018baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bae:	689b      	ldr	r3, [r3, #8]
 8018bb0:	695b      	ldr	r3, [r3, #20]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d004      	beq.n	8018bc0 <printdirentry+0x28>
 8018bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018bba:	689b      	ldr	r3, [r3, #8]
 8018bbc:	695b      	ldr	r3, [r3, #20]
 8018bbe:	e000      	b.n	8018bc2 <printdirentry+0x2a>
 8018bc0:	4b66      	ldr	r3, [pc, #408]	@ (8018d5c <printdirentry+0x1c4>)
 8018bc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  size_t size = 0;
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  time_t t = 0;
 8018bcc:	f04f 0200 	mov.w	r2, #0
 8018bd0:	f04f 0300 	mov.w	r3, #0
 8018bd4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
  char path[MG_PATH_MAX], sz[40], mod[40];
  int flags, n = 0;
 8018bd8:	2300      	movs	r3, #0
 8018bda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  // MG_DEBUG(("[%s] [%s]", d->dir, name));
  if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
 8018bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018be2:	68da      	ldr	r2, [r3, #12]
 8018be4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	9301      	str	r3, [sp, #4]
 8018bec:	232f      	movs	r3, #47	@ 0x2f
 8018bee:	9300      	str	r3, [sp, #0]
 8018bf0:	4613      	mov	r3, r2
 8018bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8018d60 <printdirentry+0x1c8>)
 8018bf4:	2180      	movs	r1, #128	@ 0x80
 8018bf6:	f008 fabd 	bl	8021174 <mg_snprintf>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	2b80      	cmp	r3, #128	@ 0x80
 8018bfe:	d910      	bls.n	8018c22 <printdirentry+0x8a>
      sizeof(path)) {
    MG_ERROR(("%s truncated", name));
 8018c00:	4b58      	ldr	r3, [pc, #352]	@ (8018d64 <printdirentry+0x1cc>)
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	f340 80a3 	ble.w	8018d50 <printdirentry+0x1b8>
 8018c0a:	4b57      	ldr	r3, [pc, #348]	@ (8018d68 <printdirentry+0x1d0>)
 8018c0c:	f640 3248 	movw	r2, #2888	@ 0xb48
 8018c10:	4956      	ldr	r1, [pc, #344]	@ (8018d6c <printdirentry+0x1d4>)
 8018c12:	2001      	movs	r0, #1
 8018c14:	f002 fa92 	bl	801b13c <mg_log_prefix>
 8018c18:	6879      	ldr	r1, [r7, #4]
 8018c1a:	4855      	ldr	r0, [pc, #340]	@ (8018d70 <printdirentry+0x1d8>)
 8018c1c:	f002 fade 	bl	801b1dc <mg_log>
              "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
              "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
              n, path, slash, name, slash, (unsigned long) t, mod,
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
  }
}
 8018c20:	e096      	b.n	8018d50 <printdirentry+0x1b8>
  } else if ((flags = fs->st(path, &size, &t)) == 0) {
 8018c22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	f107 02d8 	add.w	r2, r7, #216	@ 0xd8
 8018c2c:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 8018c30:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8018c34:	4798      	blx	r3
 8018c36:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 8018c3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d11a      	bne.n	8018c78 <printdirentry+0xe0>
    MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
 8018c42:	4b48      	ldr	r3, [pc, #288]	@ (8018d64 <printdirentry+0x1cc>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	f340 8082 	ble.w	8018d50 <printdirentry+0x1b8>
 8018c4c:	4b46      	ldr	r3, [pc, #280]	@ (8018d68 <printdirentry+0x1d0>)
 8018c4e:	f640 324a 	movw	r2, #2890	@ 0xb4a
 8018c52:	4946      	ldr	r1, [pc, #280]	@ (8018d6c <printdirentry+0x1d4>)
 8018c54:	2001      	movs	r0, #1
 8018c56:	f002 fa71 	bl	801b13c <mg_log_prefix>
 8018c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8018c62:	f00e fa79 	bl	8027158 <__errno>
 8018c66:	4603      	mov	r3, r0
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8018c6e:	4621      	mov	r1, r4
 8018c70:	4840      	ldr	r0, [pc, #256]	@ (8018d74 <printdirentry+0x1dc>)
 8018c72:	f002 fab3 	bl	801b1dc <mg_log>
}
 8018c76:	e06b      	b.n	8018d50 <printdirentry+0x1b8>
    const char *slash = flags & MG_FS_DIR ? "/" : "";
 8018c78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8018c7c:	f003 0304 	and.w	r3, r3, #4
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d001      	beq.n	8018c88 <printdirentry+0xf0>
 8018c84:	4b3c      	ldr	r3, [pc, #240]	@ (8018d78 <printdirentry+0x1e0>)
 8018c86:	e000      	b.n	8018c8a <printdirentry+0xf2>
 8018c88:	4b3c      	ldr	r3, [pc, #240]	@ (8018d7c <printdirentry+0x1e4>)
 8018c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (flags & MG_FS_DIR) {
 8018c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8018c92:	f003 0304 	and.w	r3, r3, #4
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d007      	beq.n	8018caa <printdirentry+0x112>
      mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
 8018c9a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018c9e:	4b38      	ldr	r3, [pc, #224]	@ (8018d80 <printdirentry+0x1e8>)
 8018ca0:	4a38      	ldr	r2, [pc, #224]	@ (8018d84 <printdirentry+0x1ec>)
 8018ca2:	2128      	movs	r1, #40	@ 0x28
 8018ca4:	f008 fa66 	bl	8021174 <mg_snprintf>
 8018ca8:	e00d      	b.n	8018cc6 <printdirentry+0x12e>
      mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
 8018caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018cae:	2200      	movs	r2, #0
 8018cb0:	4698      	mov	r8, r3
 8018cb2:	4691      	mov	r9, r2
 8018cb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018cb8:	e9cd 8900 	strd	r8, r9, [sp]
 8018cbc:	4a32      	ldr	r2, [pc, #200]	@ (8018d88 <printdirentry+0x1f0>)
 8018cbe:	2128      	movs	r1, #40	@ 0x28
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f008 fa57 	bl	8021174 <mg_snprintf>
    mg_snprintf(mod, sizeof(mod), "%lu", (unsigned long) t);
 8018cc6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8018cca:	4613      	mov	r3, r2
 8018ccc:	f107 0008 	add.w	r0, r7, #8
 8018cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8018d8c <printdirentry+0x1f4>)
 8018cd2:	2128      	movs	r1, #40	@ 0x28
 8018cd4:	f008 fa4e 	bl	8021174 <mg_snprintf>
    n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f7e7 fae1 	bl	80002a0 <strlen>
 8018cde:	4601      	mov	r1, r0
 8018ce0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8018ce4:	2380      	movs	r3, #128	@ 0x80
 8018ce6:	6878      	ldr	r0, [r7, #4]
 8018ce8:	f000 fbdc 	bl	80194a4 <mg_url_encode>
 8018cec:	4603      	mov	r3, r0
 8018cee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_printf(d->c,
 8018cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018cf6:	6818      	ldr	r0, [r3, #0]
 8018cf8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8018cfc:	4611      	mov	r1, r2
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8018cfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8018d02:	f003 0304 	and.w	r3, r3, #4
    mg_printf(d->c,
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d105      	bne.n	8018d16 <printdirentry+0x17e>
              flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
 8018d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
    mg_printf(d->c,
 8018d0e:	2200      	movs	r2, #0
 8018d10:	461c      	mov	r4, r3
 8018d12:	4615      	mov	r5, r2
 8018d14:	e003      	b.n	8018d1e <printdirentry+0x186>
 8018d16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018d1a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8018d1e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8018d22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018d26:	9308      	str	r3, [sp, #32]
 8018d28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018d2c:	f107 0308 	add.w	r3, r7, #8
 8018d30:	9304      	str	r3, [sp, #16]
 8018d32:	9103      	str	r1, [sp, #12]
 8018d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018d38:	9302      	str	r3, [sp, #8]
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	9301      	str	r3, [sp, #4]
 8018d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018d42:	9300      	str	r3, [sp, #0]
 8018d44:	4613      	mov	r3, r2
 8018d46:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8018d4a:	4911      	ldr	r1, [pc, #68]	@ (8018d90 <printdirentry+0x1f8>)
 8018d4c:	f004 fb3e 	bl	801d3cc <mg_printf>
}
 8018d50:	bf00      	nop
 8018d52:	37f8      	adds	r7, #248	@ 0xf8
 8018d54:	46bd      	mov	sp, r7
 8018d56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018d5a:	bf00      	nop
 8018d5c:	20000088 	.word	0x20000088
 8018d60:	08031f18 	.word	0x08031f18
 8018d64:	20000298 	.word	0x20000298
 8018d68:	080344cc 	.word	0x080344cc
 8018d6c:	08031484 	.word	0x08031484
 8018d70:	08031f20 	.word	0x08031f20
 8018d74:	08031f30 	.word	0x08031f30
 8018d78:	08031f44 	.word	0x08031f44
 8018d7c:	08031b64 	.word	0x08031b64
 8018d80:	08031f48 	.word	0x08031f48
 8018d84:	080315f0 	.word	0x080315f0
 8018d88:	08031f50 	.word	0x08031f50
 8018d8c:	08031f58 	.word	0x08031f58
 8018d90:	08031f5c 	.word	0x08031f5c

08018d94 <listdir>:

static void listdir(struct mg_connection *c, struct mg_http_message *hm,
                    const struct mg_http_serve_opts *opts, char *dir) {
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b0b8      	sub	sp, #224	@ 0xe0
 8018d98:	af04      	add	r7, sp, #16
 8018d9a:	60f8      	str	r0, [r7, #12]
 8018d9c:	60b9      	str	r1, [r7, #8]
 8018d9e:	607a      	str	r2, [r7, #4]
 8018da0:	603b      	str	r3, [r7, #0]
  const char *sort_js_code =
 8018da2:	4b51      	ldr	r3, [pc, #324]	@ (8018ee8 <listdir+0x154>)
 8018da4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      "t1 = a.cells[2].getAttribute('name'), "
      "t2 = b.cells[2].getAttribute('name'); "
      "return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : "
      "n1 ? parseInt(n2) - parseInt(n1) : "
      "c1.textContent.trim().localeCompare(c2.textContent.trim())); });";
  const char *sort_js_code2 =
 8018da8:	4b50      	ldr	r3, [pc, #320]	@ (8018eec <listdir+0x158>)
 8018daa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
      "var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); "
      "sc = c; ev.preventDefault();}};"
      "srt(tb, sc, so, true);"
      "}"
      "</script>";
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	695b      	ldr	r3, [r3, #20]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d002      	beq.n	8018dbc <listdir+0x28>
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	695b      	ldr	r3, [r3, #20]
 8018dba:	e000      	b.n	8018dbe <listdir+0x2a>
 8018dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8018ef0 <listdir+0x15c>)
 8018dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  struct printdirentrydata d = {c, hm, opts, dir};
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  char tmp[10], buf[MG_PATH_MAX];
  size_t off, n;
  int len = mg_url_decode(hm->uri.buf, hm->uri.len, buf, sizeof(buf), 0);
 8018dda:	68bb      	ldr	r3, [r7, #8]
 8018ddc:	6898      	ldr	r0, [r3, #8]
 8018dde:	68bb      	ldr	r3, [r7, #8]
 8018de0:	68d9      	ldr	r1, [r3, #12]
 8018de2:	f107 021c 	add.w	r2, r7, #28
 8018de6:	2300      	movs	r3, #0
 8018de8:	9300      	str	r3, [sp, #0]
 8018dea:	2380      	movs	r3, #128	@ 0x80
 8018dec:	f7fe f8e5 	bl	8016fba <mg_url_decode>
 8018df0:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
  struct mg_str uri = len > 0 ? mg_str_n(buf, (size_t) len) : hm->uri;
 8018df4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	dd09      	ble.n	8018e10 <listdir+0x7c>
 8018dfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8018e00:	f107 0314 	add.w	r3, r7, #20
 8018e04:	f107 011c 	add.w	r1, r7, #28
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f008 feb8 	bl	8021b7e <mg_str_n>
 8018e0e:	e007      	b.n	8018e20 <listdir+0x8c>
 8018e10:	68ba      	ldr	r2, [r7, #8]
 8018e12:	f107 0314 	add.w	r3, r7, #20
 8018e16:	3208      	adds	r2, #8
 8018e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e1c:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_printf(c,
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html; charset=utf-8\r\n"
            "%s"
            "Content-Length:         \r\n\r\n",
            opts->extra_headers == NULL ? "" : opts->extra_headers);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	689b      	ldr	r3, [r3, #8]
  mg_printf(c,
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d002      	beq.n	8018e2e <listdir+0x9a>
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	689b      	ldr	r3, [r3, #8]
 8018e2c:	e000      	b.n	8018e30 <listdir+0x9c>
 8018e2e:	4b31      	ldr	r3, [pc, #196]	@ (8018ef4 <listdir+0x160>)
 8018e30:	461a      	mov	r2, r3
 8018e32:	4931      	ldr	r1, [pc, #196]	@ (8018ef8 <listdir+0x164>)
 8018e34:	68f8      	ldr	r0, [r7, #12]
 8018e36:	f004 fac9 	bl	801d3cc <mg_printf>
  off = c->send.len;  // Start of body
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            "<a href=\"#\" rel=\"1\">Modified</a></th>"
            "<th><a href=\"#\" rel=\"2\">Size</a></th></tr>"
            "<tr><td colspan=\"3\"><hr></td></tr>"
            "</thead>"
            "<tbody id=\"tb\">\n",
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8018e42:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8018e44:	4618      	mov	r0, r3
 8018e46:	697a      	ldr	r2, [r7, #20]
            (int) uri.len, uri.buf, sort_js_code, sort_js_code2, (int) uri.len,
 8018e48:	69bb      	ldr	r3, [r7, #24]
  mg_printf(c,
 8018e4a:	4619      	mov	r1, r3
 8018e4c:	697b      	ldr	r3, [r7, #20]
 8018e4e:	9303      	str	r3, [sp, #12]
 8018e50:	9102      	str	r1, [sp, #8]
 8018e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018e56:	9301      	str	r3, [sp, #4]
 8018e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8018e5c:	9300      	str	r3, [sp, #0]
 8018e5e:	4613      	mov	r3, r2
 8018e60:	4602      	mov	r2, r0
 8018e62:	4926      	ldr	r1, [pc, #152]	@ (8018efc <listdir+0x168>)
 8018e64:	68f8      	ldr	r0, [r7, #12]
 8018e66:	f004 fab1 	bl	801d3cc <mg_printf>
            uri.buf);
  mg_printf(c, "%s",
 8018e6a:	4a25      	ldr	r2, [pc, #148]	@ (8018f00 <listdir+0x16c>)
 8018e6c:	4925      	ldr	r1, [pc, #148]	@ (8018f04 <listdir+0x170>)
 8018e6e:	68f8      	ldr	r0, [r7, #12]
 8018e70:	f004 faac 	bl	801d3cc <mg_printf>
            "  <tr><td><a href=\"..\">..</a></td>"
            "<td name=-1></td><td name=-1>[DIR]</td></tr>\n");

  fs->ls(dir, printdirentry, &d);
 8018e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8018e78:	685b      	ldr	r3, [r3, #4]
 8018e7a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8018e7e:	4922      	ldr	r1, [pc, #136]	@ (8018f08 <listdir+0x174>)
 8018e80:	6838      	ldr	r0, [r7, #0]
 8018e82:	4798      	blx	r3
  mg_printf(c,
 8018e84:	4a21      	ldr	r2, [pc, #132]	@ (8018f0c <listdir+0x178>)
 8018e86:	4922      	ldr	r1, [pc, #136]	@ (8018f10 <listdir+0x17c>)
 8018e88:	68f8      	ldr	r0, [r7, #12]
 8018e8a:	f004 fa9f 	bl	801d3cc <mg_printf>
            "</tbody><tfoot><tr><td colspan=\"3\"><hr></td></tr></tfoot>"
            "</table><address>Mongoose v.%s</address></body></html>\n",
            MG_VERSION);
  n = mg_snprintf(tmp, sizeof(tmp), "%lu", (unsigned long) (c->send.len - off));
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018e96:	1ad3      	subs	r3, r2, r3
 8018e98:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8018e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8018f14 <listdir+0x180>)
 8018e9e:	210a      	movs	r1, #10
 8018ea0:	f008 f968 	bl	8021174 <mg_snprintf>
 8018ea4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  if (n > sizeof(tmp)) n = 0;
 8018ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8018eac:	2b0a      	cmp	r3, #10
 8018eae:	d902      	bls.n	8018eb6 <listdir+0x122>
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  memcpy(c->send.buf + off - 12, tmp, n);  // Set content length
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8018ebe:	3b0c      	subs	r3, #12
 8018ec0:	4413      	add	r3, r2
 8018ec2:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8018ec6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f00e f97c 	bl	80271c8 <memcpy>
  c->is_resp = 0;                          // Mark response end
 8018ed0:	68fa      	ldr	r2, [r7, #12]
 8018ed2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018ed6:	f36f 13c7 	bfc	r3, #7, #1
 8018eda:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8018ede:	bf00      	nop
 8018ee0:	37d0      	adds	r7, #208	@ 0xd0
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bd80      	pop	{r7, pc}
 8018ee6:	bf00      	nop
 8018ee8:	08031fb4 	.word	0x08031fb4
 8018eec:	0803217c 	.word	0x0803217c
 8018ef0:	20000088 	.word	0x20000088
 8018ef4:	08031b64 	.word	0x08031b64
 8018ef8:	08032340 	.word	0x08032340
 8018efc:	08032398 	.word	0x08032398
 8018f00:	08032520 	.word	0x08032520
 8018f04:	080315f0 	.word	0x080315f0
 8018f08:	08018b99 	.word	0x08018b99
 8018f0c:	08032570 	.word	0x08032570
 8018f10:	08032578 	.word	0x08032578
 8018f14:	08031f58 	.word	0x08031f58

08018f18 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8018f18:	b082      	sub	sp, #8
 8018f1a:	b590      	push	{r4, r7, lr}
 8018f1c:	b08f      	sub	sp, #60	@ 0x3c
 8018f1e:	af02      	add	r7, sp, #8
 8018f20:	60f8      	str	r0, [r7, #12]
 8018f22:	60b9      	str	r1, [r7, #8]
 8018f24:	607a      	str	r2, [r7, #4]
 8018f26:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 8018f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018f2a:	461a      	mov	r2, r3
 8018f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f2e:	9300      	str	r3, [sp, #0]
 8018f30:	4613      	mov	r3, r2
 8018f32:	4a9c      	ldr	r2, [pc, #624]	@ (80191a4 <uri_to_path2+0x28c>)
 8018f34:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8018f36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018f38:	f008 f91c 	bl	8021174 <mg_snprintf>
 8018f3c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 8018f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f40:	3302      	adds	r3, #2
 8018f42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018f44:	429a      	cmp	r2, r3
 8018f46:	d809      	bhi.n	8018f5c <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8018f48:	4b97      	ldr	r3, [pc, #604]	@ (80191a8 <uri_to_path2+0x290>)
 8018f4a:	4a98      	ldr	r2, [pc, #608]	@ (80191ac <uri_to_path2+0x294>)
 8018f4c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018f50:	68f8      	ldr	r0, [r7, #12]
 8018f52:	f7ff f94b 	bl	80181ec <mg_http_reply>
    return -1;
 8018f56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f5a:	e143      	b.n	80191e4 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 8018f5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018f5e:	3b01      	subs	r3, #1
 8018f60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018f62:	4413      	add	r3, r2
 8018f64:	2200      	movs	r2, #0
 8018f66:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 8018f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d012      	beq.n	8018f94 <uri_to_path2+0x7c>
 8018f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f70:	3b01      	subs	r3, #1
 8018f72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018f74:	4413      	add	r3, r2
 8018f76:	781b      	ldrb	r3, [r3, #0]
 8018f78:	2b2f      	cmp	r3, #47	@ 0x2f
 8018f7a:	d00b      	beq.n	8018f94 <uri_to_path2+0x7c>
 8018f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f7e:	1c5a      	adds	r2, r3, #1
 8018f80:	627a      	str	r2, [r7, #36]	@ 0x24
 8018f82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018f84:	4413      	add	r3, r2
 8018f86:	222f      	movs	r2, #47	@ 0x2f
 8018f88:	701a      	strb	r2, [r3, #0]
 8018f8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f8e:	4413      	add	r3, r2
 8018f90:	2200      	movs	r2, #0
 8018f92:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 8018f94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	68db      	ldr	r3, [r3, #12]
 8018f9a:	429a      	cmp	r2, r3
 8018f9c:	d212      	bcs.n	8018fc4 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	689a      	ldr	r2, [r3, #8]
 8018fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fa4:	18d0      	adds	r0, r2, r3
 8018fa6:	68bb      	ldr	r3, [r7, #8]
 8018fa8:	68da      	ldr	r2, [r3, #12]
 8018faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fac:	1ad1      	subs	r1, r2, r3
 8018fae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fb2:	18d4      	adds	r4, r2, r3
 8018fb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fb8:	1ad3      	subs	r3, r2, r3
 8018fba:	2200      	movs	r2, #0
 8018fbc:	9200      	str	r2, [sp, #0]
 8018fbe:	4622      	mov	r2, r4
 8018fc0:	f7fd fffb 	bl	8016fba <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 8018fc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018fc6:	3b01      	subs	r3, #1
 8018fc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018fca:	4413      	add	r3, r2
 8018fcc:	2200      	movs	r2, #0
 8018fce:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 8018fd0:	f107 0314 	add.w	r3, r7, #20
 8018fd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018fd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018fd8:	4618      	mov	r0, r3
 8018fda:	f008 fdd0 	bl	8021b7e <mg_str_n>
 8018fde:	f107 0314 	add.w	r3, r7, #20
 8018fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018fe6:	f009 fda1 	bl	8022b2c <mg_path_is_sane>
 8018fea:	4603      	mov	r3, r0
 8018fec:	f083 0301 	eor.w	r3, r3, #1
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d009      	beq.n	801900a <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 8018ff6:	4b6e      	ldr	r3, [pc, #440]	@ (80191b0 <uri_to_path2+0x298>)
 8018ff8:	4a6c      	ldr	r2, [pc, #432]	@ (80191ac <uri_to_path2+0x294>)
 8018ffa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8018ffe:	68f8      	ldr	r0, [r7, #12]
 8019000:	f7ff f8f4 	bl	80181ec <mg_http_reply>
    return -1;
 8019004:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019008:	e0ec      	b.n	80191e4 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 801900a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801900c:	f7e7 f948 	bl	80002a0 <strlen>
 8019010:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 8019012:	e007      	b.n	8019024 <uri_to_path2+0x10c>
 8019014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019016:	3b01      	subs	r3, #1
 8019018:	627b      	str	r3, [r7, #36]	@ 0x24
 801901a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801901e:	4413      	add	r3, r2
 8019020:	2200      	movs	r2, #0
 8019022:	701a      	strb	r2, [r3, #0]
 8019024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019026:	2b01      	cmp	r3, #1
 8019028:	d906      	bls.n	8019038 <uri_to_path2+0x120>
 801902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801902c:	3b01      	subs	r3, #1
 801902e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019030:	4413      	add	r3, r2
 8019032:	781b      	ldrb	r3, [r3, #0]
 8019034:	2b2f      	cmp	r3, #47	@ 0x2f
 8019036:	d0ed      	beq.n	8019014 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 8019038:	f107 031c 	add.w	r3, r7, #28
 801903c:	495d      	ldr	r1, [pc, #372]	@ (80191b4 <uri_to_path2+0x29c>)
 801903e:	4618      	mov	r0, r3
 8019040:	f008 fd80 	bl	8021b44 <mg_str_s>
 8019044:	68b9      	ldr	r1, [r7, #8]
 8019046:	f107 031c 	add.w	r3, r7, #28
 801904a:	cb0c      	ldmia	r3, {r2, r3}
 801904c:	3108      	adds	r1, #8
 801904e:	c903      	ldmia	r1, {r0, r1}
 8019050:	f008 fdc2 	bl	8021bd8 <mg_strcmp>
 8019054:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 8019056:	2b00      	cmp	r3, #0
 8019058:	d007      	beq.n	801906a <uri_to_path2+0x152>
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	2200      	movs	r2, #0
 8019060:	2100      	movs	r1, #0
 8019062:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019064:	4798      	blx	r3
 8019066:	4603      	mov	r3, r0
 8019068:	e000      	b.n	801906c <uri_to_path2+0x154>
 801906a:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 801906c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 801906e:	4b52      	ldr	r3, [pc, #328]	@ (80191b8 <uri_to_path2+0x2a0>)
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	2b03      	cmp	r3, #3
 8019074:	dd16      	ble.n	80190a4 <uri_to_path2+0x18c>
 8019076:	4b51      	ldr	r3, [pc, #324]	@ (80191bc <uri_to_path2+0x2a4>)
 8019078:	f640 32c4 	movw	r2, #3012	@ 0xbc4
 801907c:	4950      	ldr	r1, [pc, #320]	@ (80191c0 <uri_to_path2+0x2a8>)
 801907e:	2004      	movs	r0, #4
 8019080:	f002 f85c 	bl	801b13c <mg_log_prefix>
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8019088:	68bb      	ldr	r3, [r7, #8]
 801908a:	68db      	ldr	r3, [r3, #12]
 801908c:	4618      	mov	r0, r3
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	689a      	ldr	r2, [r3, #8]
 8019092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019094:	9301      	str	r3, [sp, #4]
 8019096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019098:	9300      	str	r3, [sp, #0]
 801909a:	4613      	mov	r3, r2
 801909c:	4602      	mov	r2, r0
 801909e:	4849      	ldr	r0, [pc, #292]	@ (80191c4 <uri_to_path2+0x2ac>)
 80190a0:	f002 f89c 	bl	801b1dc <mg_log>
              flags));
  if (flags == 0) {
 80190a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	f000 809b 	beq.w	80191e2 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80190ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190ae:	f003 0304 	and.w	r3, r3, #4
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d020      	beq.n	80190f8 <uri_to_path2+0x1e0>
 80190b6:	68bb      	ldr	r3, [r7, #8]
 80190b8:	68db      	ldr	r3, [r3, #12]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d01c      	beq.n	80190f8 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 80190be:	68bb      	ldr	r3, [r7, #8]
 80190c0:	689a      	ldr	r2, [r3, #8]
 80190c2:	68bb      	ldr	r3, [r7, #8]
 80190c4:	68db      	ldr	r3, [r3, #12]
 80190c6:	3b01      	subs	r3, #1
 80190c8:	4413      	add	r3, r2
 80190ca:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80190cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80190ce:	d013      	beq.n	80190f8 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 80190d4:	461a      	mov	r2, r3
 80190d6:	68bb      	ldr	r3, [r7, #8]
 80190d8:	689b      	ldr	r3, [r3, #8]
 80190da:	493b      	ldr	r1, [pc, #236]	@ (80191c8 <uri_to_path2+0x2b0>)
 80190dc:	68f8      	ldr	r0, [r7, #12]
 80190de:	f004 f975 	bl	801d3cc <mg_printf>
    c->is_resp = 0;
 80190e2:	68fa      	ldr	r2, [r7, #12]
 80190e4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80190e8:	f36f 13c7 	bfc	r3, #7, #1
 80190ec:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    flags = -1;
 80190f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80190f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80190f6:	e074      	b.n	80191e2 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 80190f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190fa:	f003 0304 	and.w	r3, r3, #4
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d06f      	beq.n	80191e2 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8019102:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019106:	18d0      	adds	r0, r2, r3
 8019108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801910c:	1ad3      	subs	r3, r2, r3
 801910e:	4a2f      	ldr	r2, [pc, #188]	@ (80191cc <uri_to_path2+0x2b4>)
 8019110:	4619      	mov	r1, r3
 8019112:	f008 f82f 	bl	8021174 <mg_snprintf>
 8019116:	4603      	mov	r3, r0
 8019118:	2b00      	cmp	r3, #0
 801911a:	d009      	beq.n	8019130 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	2200      	movs	r2, #0
 8019122:	2100      	movs	r1, #0
 8019124:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019126:	4798      	blx	r3
 8019128:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 801912a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801912c:	2b00      	cmp	r3, #0
 801912e:	d116      	bne.n	801915e <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8019130:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019134:	18d0      	adds	r0, r2, r3
 8019136:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801913a:	1ad3      	subs	r3, r2, r3
 801913c:	4a24      	ldr	r2, [pc, #144]	@ (80191d0 <uri_to_path2+0x2b8>)
 801913e:	4619      	mov	r1, r3
 8019140:	f008 f818 	bl	8021174 <mg_snprintf>
 8019144:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8019146:	2b00      	cmp	r3, #0
 8019148:	d00c      	beq.n	8019164 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	2200      	movs	r2, #0
 8019150:	2100      	movs	r1, #0
 8019152:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019154:	4798      	blx	r3
 8019156:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8019158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801915a:	2b00      	cmp	r3, #0
 801915c:	d002      	beq.n	8019164 <uri_to_path2+0x24c>
      flags = tmp;
 801915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019162:	e03e      	b.n	80191e2 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8019164:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019168:	18d0      	adds	r0, r2, r3
 801916a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801916e:	1ad3      	subs	r3, r2, r3
 8019170:	4a18      	ldr	r2, [pc, #96]	@ (80191d4 <uri_to_path2+0x2bc>)
 8019172:	4619      	mov	r1, r3
 8019174:	f007 fffe 	bl	8021174 <mg_snprintf>
 8019178:	4603      	mov	r3, r0
 801917a:	2b00      	cmp	r3, #0
 801917c:	d02c      	beq.n	80191d8 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	2200      	movs	r2, #0
 8019184:	2100      	movs	r1, #0
 8019186:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019188:	4798      	blx	r3
 801918a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 801918c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801918e:	2b00      	cmp	r3, #0
 8019190:	d022      	beq.n	80191d8 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 8019192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019194:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8019196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019198:	330b      	adds	r3, #11
 801919a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801919c:	4413      	add	r3, r2
 801919e:	2200      	movs	r2, #0
 80191a0:	701a      	strb	r2, [r3, #0]
 80191a2:	e01e      	b.n	80191e2 <uri_to_path2+0x2ca>
 80191a4:	08031604 	.word	0x08031604
 80191a8:	080325ec 	.word	0x080325ec
 80191ac:	08031b64 	.word	0x08031b64
 80191b0:	08032600 	.word	0x08032600
 80191b4:	08031f44 	.word	0x08031f44
 80191b8:	20000298 	.word	0x20000298
 80191bc:	080344dc 	.word	0x080344dc
 80191c0:	08031484 	.word	0x08031484
 80191c4:	08032610 	.word	0x08032610
 80191c8:	08032624 	.word	0x08032624
 80191cc:	08032660 	.word	0x08032660
 80191d0:	0803266c 	.word	0x0803266c
 80191d4:	0803267c 	.word	0x0803267c
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 80191d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80191da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191dc:	4413      	add	r3, r2
 80191de:	2200      	movs	r2, #0
 80191e0:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 80191e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3734      	adds	r7, #52	@ 0x34
 80191e8:	46bd      	mov	sp, r7
 80191ea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80191ee:	b002      	add	sp, #8
 80191f0:	4770      	bx	lr
 80191f2:	bf00      	nop

080191f4 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b09c      	sub	sp, #112	@ 0x70
 80191f8:	af06      	add	r7, sp, #24
 80191fa:	6178      	str	r0, [r7, #20]
 80191fc:	6139      	str	r1, [r7, #16]
 80191fe:	60fa      	str	r2, [r7, #12]
 8019200:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	695b      	ldr	r3, [r3, #20]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d002      	beq.n	8019210 <uri_to_path+0x1c>
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	695b      	ldr	r3, [r3, #20]
 801920e:	e000      	b.n	8019212 <uri_to_path+0x1e>
 8019210:	4b5b      	ldr	r3, [pc, #364]	@ (8019380 <uri_to_path+0x18c>)
 8019212:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	681a      	ldr	r2, [r3, #0]
 8019218:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801921c:	4611      	mov	r1, r2
 801921e:	4618      	mov	r0, r3
 8019220:	f008 fc90 	bl	8021b44 <mg_str_s>
 8019224:	2300      	movs	r3, #0
 8019226:	627b      	str	r3, [r7, #36]	@ 0x24
 8019228:	2300      	movs	r3, #0
 801922a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801922c:	f107 031c 	add.w	r3, r7, #28
 8019230:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8019234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019238:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 801923c:	e078      	b.n	8019330 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 801923e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019242:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8019246:	213d      	movs	r1, #61	@ 0x3d
 8019248:	9100      	str	r1, [sp, #0]
 801924a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801924e:	c903      	ldmia	r1, {r0, r1}
 8019250:	f008 fe3f 	bl	8021ed2 <mg_span>
 8019254:	4603      	mov	r3, r0
 8019256:	f083 0301 	eor.w	r3, r3, #1
 801925a:	b2db      	uxtb	r3, r3
 801925c:	2b00      	cmp	r3, #0
 801925e:	d014      	beq.n	801928a <uri_to_path+0x96>
 8019260:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8019264:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8019268:	e892 0003 	ldmia.w	r2, {r0, r1}
 801926c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019270:	463b      	mov	r3, r7
 8019272:	2200      	movs	r2, #0
 8019274:	2100      	movs	r1, #0
 8019276:	4618      	mov	r0, r3
 8019278:	f008 fc81 	bl	8021b7e <mg_str_n>
 801927c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019280:	463a      	mov	r2, r7
 8019282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019286:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 801928a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801928c:	2b00      	cmp	r3, #0
 801928e:	d123      	bne.n	80192d8 <uri_to_path+0xe4>
 8019290:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019294:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8019298:	e892 0003 	ldmia.w	r2, {r0, r1}
 801929c:	e883 0003 	stmia.w	r3, {r0, r1}
 80192a0:	463b      	mov	r3, r7
 80192a2:	4938      	ldr	r1, [pc, #224]	@ (8019384 <uri_to_path+0x190>)
 80192a4:	4618      	mov	r0, r3
 80192a6:	f008 fc4d 	bl	8021b44 <mg_str_s>
 80192aa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80192ae:	463a      	mov	r2, r7
 80192b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80192b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80192bc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80192c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80192c8:	f107 031c 	add.w	r3, r7, #28
 80192cc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80192d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192d4:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 80192d8:	693b      	ldr	r3, [r7, #16]
 80192da:	68da      	ldr	r2, [r3, #12]
 80192dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80192de:	429a      	cmp	r2, r3
 80192e0:	d323      	bcc.n	801932a <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 80192e2:	693b      	ldr	r3, [r7, #16]
 80192e4:	6899      	ldr	r1, [r3, #8]
 80192e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80192e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80192ec:	4618      	mov	r0, r3
 80192ee:	f008 fc46 	bl	8021b7e <mg_str_n>
 80192f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80192f6:	cb0c      	ldmia	r3, {r2, r3}
 80192f8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80192fc:	c903      	ldmia	r1, {r0, r1}
 80192fe:	f008 fc6b 	bl	8021bd8 <mg_strcmp>
 8019302:	4603      	mov	r3, r0
 8019304:	2b00      	cmp	r3, #0
 8019306:	d112      	bne.n	801932e <uri_to_path+0x13a>
    u = k, p = v;
 8019308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801930c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8019310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019314:	e883 0003 	stmia.w	r3, {r0, r1}
 8019318:	f107 031c 	add.w	r3, r7, #28
 801931c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8019320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019324:	e883 0003 	stmia.w	r3, {r0, r1}
 8019328:	e002      	b.n	8019330 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 801932a:	bf00      	nop
 801932c:	e000      	b.n	8019330 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 801932e:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 8019330:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019334:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8019338:	212c      	movs	r1, #44	@ 0x2c
 801933a:	9100      	str	r1, [sp, #0]
 801933c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8019340:	c903      	ldmia	r1, {r0, r1}
 8019342:	f008 fdc6 	bl	8021ed2 <mg_span>
 8019346:	4603      	mov	r3, r0
 8019348:	2b00      	cmp	r3, #0
 801934a:	f47f af78 	bne.w	801923e <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 801934e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019350:	9304      	str	r3, [sp, #16]
 8019352:	68bb      	ldr	r3, [r7, #8]
 8019354:	9303      	str	r3, [sp, #12]
 8019356:	aa01      	add	r2, sp, #4
 8019358:	f107 031c 	add.w	r3, r7, #28
 801935c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019360:	e882 0003 	stmia.w	r2, {r0, r1}
 8019364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019366:	9300      	str	r3, [sp, #0]
 8019368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801936a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801936c:	6939      	ldr	r1, [r7, #16]
 801936e:	6978      	ldr	r0, [r7, #20]
 8019370:	f7ff fdd2 	bl	8018f18 <uri_to_path2>
 8019374:	4603      	mov	r3, r0
}
 8019376:	4618      	mov	r0, r3
 8019378:	3758      	adds	r7, #88	@ 0x58
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}
 801937e:	bf00      	nop
 8019380:	20000088 	.word	0x20000088
 8019384:	08031f44 	.word	0x08031f44

08019388 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 8019388:	b580      	push	{r7, lr}
 801938a:	b0ac      	sub	sp, #176	@ 0xb0
 801938c:	af02      	add	r7, sp, #8
 801938e:	60f8      	str	r0, [r7, #12]
 8019390:	60b9      	str	r1, [r7, #8]
 8019392:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	685b      	ldr	r3, [r3, #4]
 8019398:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 801939c:	f107 0310 	add.w	r3, r7, #16
 80193a0:	2280      	movs	r2, #128	@ 0x80
 80193a2:	9200      	str	r2, [sp, #0]
 80193a4:	687a      	ldr	r2, [r7, #4]
 80193a6:	68b9      	ldr	r1, [r7, #8]
 80193a8:	68f8      	ldr	r0, [r7, #12]
 80193aa:	f7ff ff23 	bl	80191f4 <uri_to_path>
 80193ae:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
  if (flags < 0) {
 80193b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	db41      	blt.n	801943e <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 80193ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80193be:	f003 0304 	and.w	r3, r3, #4
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d007      	beq.n	80193d6 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
 80193c6:	f107 0310 	add.w	r3, r7, #16
 80193ca:	687a      	ldr	r2, [r7, #4]
 80193cc:	68b9      	ldr	r1, [r7, #8]
 80193ce:	68f8      	ldr	r0, [r7, #12]
 80193d0:	f7ff fce0 	bl	8018d94 <listdir>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 80193d4:	e033      	b.n	801943e <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 80193d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d028      	beq.n	8019430 <mg_http_serve_dir+0xa8>
 80193de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d024      	beq.n	8019430 <mg_http_serve_dir+0xa8>
 80193e6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80193ea:	f107 0210 	add.w	r2, r7, #16
 80193ee:	4611      	mov	r1, r2
 80193f0:	4618      	mov	r0, r3
 80193f2:	f008 fba7 	bl	8021b44 <mg_str_s>
 80193f6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80193fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80193fe:	4618      	mov	r0, r3
 8019400:	f008 fba0 	bl	8021b44 <mg_str_s>
 8019404:	2300      	movs	r3, #0
 8019406:	9300      	str	r3, [sp, #0]
 8019408:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801940c:	cb0c      	ldmia	r3, {r2, r3}
 801940e:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8019412:	c903      	ldmia	r1, {r0, r1}
 8019414:	f008 fc69 	bl	8021cea <mg_match>
 8019418:	4603      	mov	r3, r0
 801941a:	2b00      	cmp	r3, #0
 801941c:	d008      	beq.n	8019430 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	f107 0210 	add.w	r2, r7, #16
 8019426:	4619      	mov	r1, r3
 8019428:	68f8      	ldr	r0, [r7, #12]
 801942a:	f008 fb77 	bl	8021b1c <mg_http_serve_ssi>
}
 801942e:	e006      	b.n	801943e <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 8019430:	f107 0210 	add.w	r2, r7, #16
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	68b9      	ldr	r1, [r7, #8]
 8019438:	68f8      	ldr	r0, [r7, #12]
 801943a:	f7ff f8cb 	bl	80185d4 <mg_http_serve_file>
}
 801943e:	bf00      	nop
 8019440:	37a8      	adds	r7, #168	@ 0xa8
 8019442:	46bd      	mov	sp, r7
 8019444:	bd80      	pop	{r7, pc}

08019446 <mg_is_url_safe>:

static bool mg_is_url_safe(int c) {
 8019446:	b480      	push	{r7}
 8019448:	b083      	sub	sp, #12
 801944a:	af00      	add	r7, sp, #0
 801944c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	2b2f      	cmp	r3, #47	@ 0x2f
 8019452:	dd02      	ble.n	801945a <mg_is_url_safe+0x14>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') ||
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	2b39      	cmp	r3, #57	@ 0x39
 8019458:	dd17      	ble.n	801948a <mg_is_url_safe+0x44>
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	2b60      	cmp	r3, #96	@ 0x60
 801945e:	dd02      	ble.n	8019466 <mg_is_url_safe+0x20>
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	2b7a      	cmp	r3, #122	@ 0x7a
 8019464:	dd11      	ble.n	801948a <mg_is_url_safe+0x44>
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	2b40      	cmp	r3, #64	@ 0x40
 801946a:	dd02      	ble.n	8019472 <mg_is_url_safe+0x2c>
         (c >= 'A' && c <= 'Z') || c == '.' || c == '_' || c == '-' || c == '~';
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	2b5a      	cmp	r3, #90	@ 0x5a
 8019470:	dd0b      	ble.n	801948a <mg_is_url_safe+0x44>
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	2b2e      	cmp	r3, #46	@ 0x2e
 8019476:	d008      	beq.n	801948a <mg_is_url_safe+0x44>
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	2b5f      	cmp	r3, #95	@ 0x5f
 801947c:	d005      	beq.n	801948a <mg_is_url_safe+0x44>
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	2b2d      	cmp	r3, #45	@ 0x2d
 8019482:	d002      	beq.n	801948a <mg_is_url_safe+0x44>
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2b7e      	cmp	r3, #126	@ 0x7e
 8019488:	d101      	bne.n	801948e <mg_is_url_safe+0x48>
 801948a:	2301      	movs	r3, #1
 801948c:	e000      	b.n	8019490 <mg_is_url_safe+0x4a>
 801948e:	2300      	movs	r3, #0
 8019490:	f003 0301 	and.w	r3, r3, #1
 8019494:	b2db      	uxtb	r3, r3
}
 8019496:	4618      	mov	r0, r3
 8019498:	370c      	adds	r7, #12
 801949a:	46bd      	mov	sp, r7
 801949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a0:	4770      	bx	lr
	...

080194a4 <mg_url_encode>:

size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b08a      	sub	sp, #40	@ 0x28
 80194a8:	af02      	add	r7, sp, #8
 80194aa:	60f8      	str	r0, [r7, #12]
 80194ac:	60b9      	str	r1, [r7, #8]
 80194ae:	607a      	str	r2, [r7, #4]
 80194b0:	603b      	str	r3, [r7, #0]
  size_t i, n = 0;
 80194b2:	2300      	movs	r3, #0
 80194b4:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 80194b6:	2300      	movs	r3, #0
 80194b8:	61fb      	str	r3, [r7, #28]
 80194ba:	e030      	b.n	801951e <mg_url_encode+0x7a>
    int c = *(unsigned char *) &s[i];
 80194bc:	68fa      	ldr	r2, [r7, #12]
 80194be:	69fb      	ldr	r3, [r7, #28]
 80194c0:	4413      	add	r3, r2
 80194c2:	781b      	ldrb	r3, [r3, #0]
 80194c4:	617b      	str	r3, [r7, #20]
    if (n + 4 >= len) return 0;
 80194c6:	69bb      	ldr	r3, [r7, #24]
 80194c8:	3304      	adds	r3, #4
 80194ca:	683a      	ldr	r2, [r7, #0]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d801      	bhi.n	80194d4 <mg_url_encode+0x30>
 80194d0:	2300      	movs	r3, #0
 80194d2:	e03f      	b.n	8019554 <mg_url_encode+0xb0>
    if (mg_is_url_safe(c)) {
 80194d4:	6978      	ldr	r0, [r7, #20]
 80194d6:	f7ff ffb6 	bl	8019446 <mg_is_url_safe>
 80194da:	4603      	mov	r3, r0
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d00a      	beq.n	80194f6 <mg_url_encode+0x52>
      buf[n++] = s[i];
 80194e0:	68fa      	ldr	r2, [r7, #12]
 80194e2:	69fb      	ldr	r3, [r7, #28]
 80194e4:	441a      	add	r2, r3
 80194e6:	69bb      	ldr	r3, [r7, #24]
 80194e8:	1c59      	adds	r1, r3, #1
 80194ea:	61b9      	str	r1, [r7, #24]
 80194ec:	6879      	ldr	r1, [r7, #4]
 80194ee:	440b      	add	r3, r1
 80194f0:	7812      	ldrb	r2, [r2, #0]
 80194f2:	701a      	strb	r2, [r3, #0]
 80194f4:	e010      	b.n	8019518 <mg_url_encode+0x74>
    } else {
      mg_snprintf(&buf[n], 4, "%%%M", mg_print_hex, 1, &s[i]);
 80194f6:	687a      	ldr	r2, [r7, #4]
 80194f8:	69bb      	ldr	r3, [r7, #24]
 80194fa:	18d0      	adds	r0, r2, r3
 80194fc:	68fa      	ldr	r2, [r7, #12]
 80194fe:	69fb      	ldr	r3, [r7, #28]
 8019500:	4413      	add	r3, r2
 8019502:	9301      	str	r3, [sp, #4]
 8019504:	2301      	movs	r3, #1
 8019506:	9300      	str	r3, [sp, #0]
 8019508:	4b14      	ldr	r3, [pc, #80]	@ (801955c <mg_url_encode+0xb8>)
 801950a:	4a15      	ldr	r2, [pc, #84]	@ (8019560 <mg_url_encode+0xbc>)
 801950c:	2104      	movs	r1, #4
 801950e:	f007 fe31 	bl	8021174 <mg_snprintf>
      n += 3;
 8019512:	69bb      	ldr	r3, [r7, #24]
 8019514:	3303      	adds	r3, #3
 8019516:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < sl; i++) {
 8019518:	69fb      	ldr	r3, [r7, #28]
 801951a:	3301      	adds	r3, #1
 801951c:	61fb      	str	r3, [r7, #28]
 801951e:	69fa      	ldr	r2, [r7, #28]
 8019520:	68bb      	ldr	r3, [r7, #8]
 8019522:	429a      	cmp	r2, r3
 8019524:	d3ca      	bcc.n	80194bc <mg_url_encode+0x18>
    }
  }
  if (len > 0 && n < len - 1) buf[n] = '\0';  // Null-terminate the destination
 8019526:	683b      	ldr	r3, [r7, #0]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d009      	beq.n	8019540 <mg_url_encode+0x9c>
 801952c:	683b      	ldr	r3, [r7, #0]
 801952e:	3b01      	subs	r3, #1
 8019530:	69ba      	ldr	r2, [r7, #24]
 8019532:	429a      	cmp	r2, r3
 8019534:	d204      	bcs.n	8019540 <mg_url_encode+0x9c>
 8019536:	687a      	ldr	r2, [r7, #4]
 8019538:	69bb      	ldr	r3, [r7, #24]
 801953a:	4413      	add	r3, r2
 801953c:	2200      	movs	r2, #0
 801953e:	701a      	strb	r2, [r3, #0]
  if (len > 0) buf[len - 1] = '\0';           // Always.
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d005      	beq.n	8019552 <mg_url_encode+0xae>
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	3b01      	subs	r3, #1
 801954a:	687a      	ldr	r2, [r7, #4]
 801954c:	4413      	add	r3, r2
 801954e:	2200      	movs	r2, #0
 8019550:	701a      	strb	r2, [r3, #0]
  return n;
 8019552:	69bb      	ldr	r3, [r7, #24]
}
 8019554:	4618      	mov	r0, r3
 8019556:	3720      	adds	r7, #32
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}
 801955c:	0802145d 	.word	0x0802145d
 8019560:	0803268c 	.word	0x0803268c

08019564 <mg_http_upload>:
#define headers_tmp     "Content-Type: application/json\r\n" "Access-Control-Allow-Origin: *\r\n" "Access-Control-Allow-Headers: Content-Type\r\n"



long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,
                    struct mg_fs *fs, const char *dir, size_t max_size) {
 8019564:	b590      	push	{r4, r7, lr}
 8019566:	b0d3      	sub	sp, #332	@ 0x14c
 8019568:	af02      	add	r7, sp, #8
 801956a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 801956e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 8019572:	6020      	str	r0, [r4, #0]
 8019574:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8019578:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 801957c:	6001      	str	r1, [r0, #0]
 801957e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8019582:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8019586:	600a      	str	r2, [r1, #0]
 8019588:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801958c:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8019590:	6013      	str	r3, [r2, #0]
  char buf[20] = "0", file[MG_PATH_MAX], path[MG_PATH_MAX];
 8019592:	2330      	movs	r3, #48	@ 0x30
 8019594:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8019598:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 801959c:	2200      	movs	r2, #0
 801959e:	601a      	str	r2, [r3, #0]
 80195a0:	605a      	str	r2, [r3, #4]
 80195a2:	609a      	str	r2, [r3, #8]
 80195a4:	60da      	str	r2, [r3, #12]
  long res = 0, offset;
 80195a6:	2300      	movs	r3, #0
 80195a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  mg_http_get_var(&hm->query, "offset", buf, sizeof(buf));
 80195ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80195b0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	f103 0010 	add.w	r0, r3, #16
 80195ba:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80195be:	2314      	movs	r3, #20
 80195c0:	49b5      	ldr	r1, [pc, #724]	@ (8019898 <mg_http_upload+0x334>)
 80195c2:	f7fd fc85 	bl	8016ed0 <mg_http_get_var>
  mg_http_get_var(&hm->query, "file", file, sizeof(file));
 80195c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80195ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	f103 0010 	add.w	r0, r3, #16
 80195d4:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 80195d8:	2380      	movs	r3, #128	@ 0x80
 80195da:	49b0      	ldr	r1, [pc, #704]	@ (801989c <mg_http_upload+0x338>)
 80195dc:	f7fd fc78 	bl	8016ed0 <mg_http_get_var>
  offset = strtol(buf, NULL, 0);
 80195e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80195e4:	2200      	movs	r2, #0
 80195e6:	2100      	movs	r1, #0
 80195e8:	4618      	mov	r0, r3
 80195ea:	f00b ff37 	bl	802545c <strtol>
 80195ee:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
  mg_snprintf(path, sizeof(path), "%s%c%s", dir, MG_DIRSEP, file);
 80195f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80195f6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80195fa:	f107 0018 	add.w	r0, r7, #24
 80195fe:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8019602:	9201      	str	r2, [sp, #4]
 8019604:	222f      	movs	r2, #47	@ 0x2f
 8019606:	9200      	str	r2, [sp, #0]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	4aa5      	ldr	r2, [pc, #660]	@ (80198a0 <mg_http_upload+0x33c>)
 801960c:	2180      	movs	r1, #128	@ 0x80
 801960e:	f007 fdb1 	bl	8021174 <mg_snprintf>
  if (hm->body.len == 0) {
 8019612:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019616:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019620:	2b00      	cmp	r3, #0
 8019622:	d10d      	bne.n	8019640 <mg_http_upload+0xdc>
    mg_http_reply(c, 200, headers_tmp, "%ld", res);  // Nothing to write  //TODO DELETE HEADERS!!!!!
 8019624:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019628:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 801962c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8019630:	9300      	str	r3, [sp, #0]
 8019632:	4b9c      	ldr	r3, [pc, #624]	@ (80198a4 <mg_http_upload+0x340>)
 8019634:	4a9c      	ldr	r2, [pc, #624]	@ (80198a8 <mg_http_upload+0x344>)
 8019636:	21c8      	movs	r1, #200	@ 0xc8
 8019638:	6800      	ldr	r0, [r0, #0]
 801963a:	f7fe fdd7 	bl	80181ec <mg_http_reply>
 801963e:	e123      	b.n	8019888 <mg_http_upload+0x324>
  } else if (file[0] == '\0') {
 8019640:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 8019644:	2b00      	cmp	r3, #0
 8019646:	d10f      	bne.n	8019668 <mg_http_upload+0x104>
    mg_http_reply(c, 400, "", "file required");
 8019648:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801964c:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019650:	4b96      	ldr	r3, [pc, #600]	@ (80198ac <mg_http_upload+0x348>)
 8019652:	4a97      	ldr	r2, [pc, #604]	@ (80198b0 <mg_http_upload+0x34c>)
 8019654:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019658:	6800      	ldr	r0, [r0, #0]
 801965a:	f7fe fdc7 	bl	80181ec <mg_http_reply>
    res = -1;
 801965e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019662:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019666:	e10f      	b.n	8019888 <mg_http_upload+0x324>
  } else if (mg_path_is_sane(mg_str(file)) == false) {
 8019668:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801966c:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8019670:	4611      	mov	r1, r2
 8019672:	4618      	mov	r0, r3
 8019674:	f008 fa66 	bl	8021b44 <mg_str_s>
 8019678:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801967c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019680:	f009 fa54 	bl	8022b2c <mg_path_is_sane>
 8019684:	4603      	mov	r3, r0
 8019686:	f083 0301 	eor.w	r3, r3, #1
 801968a:	b2db      	uxtb	r3, r3
 801968c:	2b00      	cmp	r3, #0
 801968e:	d012      	beq.n	80196b6 <mg_http_upload+0x152>
    mg_http_reply(c, 400, "", "%s: invalid file", file);
 8019690:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019694:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019698:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801969c:	9300      	str	r3, [sp, #0]
 801969e:	4b85      	ldr	r3, [pc, #532]	@ (80198b4 <mg_http_upload+0x350>)
 80196a0:	4a83      	ldr	r2, [pc, #524]	@ (80198b0 <mg_http_upload+0x34c>)
 80196a2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80196a6:	6800      	ldr	r0, [r0, #0]
 80196a8:	f7fe fda0 	bl	80181ec <mg_http_reply>
    res = -2;
 80196ac:	f06f 0301 	mvn.w	r3, #1
 80196b0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80196b4:	e0e8      	b.n	8019888 <mg_http_upload+0x324>
  } else if (offset < 0) {
 80196b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	da0f      	bge.n	80196de <mg_http_upload+0x17a>
    mg_http_reply(c, 400, "", "offset required");
 80196be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80196c2:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80196c6:	4b7c      	ldr	r3, [pc, #496]	@ (80198b8 <mg_http_upload+0x354>)
 80196c8:	4a79      	ldr	r2, [pc, #484]	@ (80198b0 <mg_http_upload+0x34c>)
 80196ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80196ce:	6800      	ldr	r0, [r0, #0]
 80196d0:	f7fe fd8c 	bl	80181ec <mg_http_reply>
    res = -3;
 80196d4:	f06f 0302 	mvn.w	r3, #2
 80196d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80196dc:	e0d4      	b.n	8019888 <mg_http_upload+0x324>
  } else if ((size_t) offset + hm->body.len > max_size) {
 80196de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80196e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80196ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80196f0:	4413      	add	r3, r2
 80196f2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80196f6:	429a      	cmp	r2, r3
 80196f8:	d215      	bcs.n	8019726 <mg_http_upload+0x1c2>
    mg_http_reply(c, 400, "", "%s: over max size of %lu", path,
 80196fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80196fe:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019702:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019706:	9301      	str	r3, [sp, #4]
 8019708:	f107 0318 	add.w	r3, r7, #24
 801970c:	9300      	str	r3, [sp, #0]
 801970e:	4b6b      	ldr	r3, [pc, #428]	@ (80198bc <mg_http_upload+0x358>)
 8019710:	4a67      	ldr	r2, [pc, #412]	@ (80198b0 <mg_http_upload+0x34c>)
 8019712:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019716:	6800      	ldr	r0, [r0, #0]
 8019718:	f7fe fd68 	bl	80181ec <mg_http_reply>
                  (unsigned long) max_size);
    res = -4;
 801971c:	f06f 0303 	mvn.w	r3, #3
 8019720:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019724:	e0b0      	b.n	8019888 <mg_http_upload+0x324>
  } else {
    struct mg_fd *fd;
    size_t current_size = 0;
 8019726:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801972a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801972e:	2200      	movs	r2, #0
 8019730:	601a      	str	r2, [r3, #0]
    MG_DEBUG(("%s -> %lu bytes @ %ld", path, hm->body.len, offset));
 8019732:	4b63      	ldr	r3, [pc, #396]	@ (80198c0 <mg_http_upload+0x35c>)
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	2b02      	cmp	r3, #2
 8019738:	dd14      	ble.n	8019764 <mg_http_upload+0x200>
 801973a:	4b62      	ldr	r3, [pc, #392]	@ (80198c4 <mg_http_upload+0x360>)
 801973c:	f640 426a 	movw	r2, #3178	@ 0xc6a
 8019740:	4961      	ldr	r1, [pc, #388]	@ (80198c8 <mg_http_upload+0x364>)
 8019742:	2003      	movs	r0, #3
 8019744:	f001 fcfa 	bl	801b13c <mg_log_prefix>
 8019748:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801974c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019756:	f107 0118 	add.w	r1, r7, #24
 801975a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801975e:	485b      	ldr	r0, [pc, #364]	@ (80198cc <mg_http_upload+0x368>)
 8019760:	f001 fd3c 	bl	801b1dc <mg_log>
    if (offset == 0) fs->rm(path);  // If offset if 0, truncate file
 8019764:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019768:	2b00      	cmp	r3, #0
 801976a:	d109      	bne.n	8019780 <mg_http_upload+0x21c>
 801976c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019770:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	6a1b      	ldr	r3, [r3, #32]
 8019778:	f107 0218 	add.w	r2, r7, #24
 801977c:	4610      	mov	r0, r2
 801977e:	4798      	blx	r3
    fs->st(path, &current_size, NULL);
 8019780:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019784:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	f107 0114 	add.w	r1, r7, #20
 8019790:	f107 0018 	add.w	r0, r7, #24
 8019794:	2200      	movs	r2, #0
 8019796:	4798      	blx	r3
    if (offset > 0 && current_size != (size_t) offset) {
 8019798:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801979c:	2b00      	cmp	r3, #0
 801979e:	dd1b      	ble.n	80197d8 <mg_http_upload+0x274>
 80197a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80197a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80197a8:	681a      	ldr	r2, [r3, #0]
 80197aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80197ae:	429a      	cmp	r2, r3
 80197b0:	d012      	beq.n	80197d8 <mg_http_upload+0x274>
      mg_http_reply(c, 400, "", "%s: offset mismatch", path);
 80197b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80197b6:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80197ba:	f107 0318 	add.w	r3, r7, #24
 80197be:	9300      	str	r3, [sp, #0]
 80197c0:	4b43      	ldr	r3, [pc, #268]	@ (80198d0 <mg_http_upload+0x36c>)
 80197c2:	4a3b      	ldr	r2, [pc, #236]	@ (80198b0 <mg_http_upload+0x34c>)
 80197c4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80197c8:	6800      	ldr	r0, [r0, #0]
 80197ca:	f7fe fd0f 	bl	80181ec <mg_http_reply>
      res = -5;
 80197ce:	f06f 0304 	mvn.w	r3, #4
 80197d2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80197d6:	e057      	b.n	8019888 <mg_http_upload+0x324>
    } else if ((fd = mg_fs_open(fs, path, MG_FS_WRITE)) == NULL) {
 80197d8:	f107 0118 	add.w	r1, r7, #24
 80197dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80197e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80197e4:	2202      	movs	r2, #2
 80197e6:	6818      	ldr	r0, [r3, #0]
 80197e8:	f7fd f998 	bl	8016b1c <mg_fs_open>
 80197ec:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 80197f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d117      	bne.n	8019828 <mg_http_upload+0x2c4>
      mg_http_reply(c, 400, "", "open(%s): %d", path, errno);
 80197f8:	f00d fcae 	bl	8027158 <__errno>
 80197fc:	4603      	mov	r3, r0
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8019804:	f5a2 709a 	sub.w	r0, r2, #308	@ 0x134
 8019808:	9301      	str	r3, [sp, #4]
 801980a:	f107 0318 	add.w	r3, r7, #24
 801980e:	9300      	str	r3, [sp, #0]
 8019810:	4b30      	ldr	r3, [pc, #192]	@ (80198d4 <mg_http_upload+0x370>)
 8019812:	4a27      	ldr	r2, [pc, #156]	@ (80198b0 <mg_http_upload+0x34c>)
 8019814:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8019818:	6800      	ldr	r0, [r0, #0]
 801981a:	f7fe fce7 	bl	80181ec <mg_http_reply>
      res = -6;
 801981e:	f06f 0305 	mvn.w	r3, #5
 8019822:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8019826:	e02f      	b.n	8019888 <mg_http_upload+0x324>
    } else {
      res = offset + (long) fs->wr(fd->fd, hm->body.buf, hm->body.len);
 8019828:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801982c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	695b      	ldr	r3, [r3, #20]
 8019834:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019838:	6810      	ldr	r0, [r2, #0]
 801983a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801983e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8019842:	6812      	ldr	r2, [r2, #0]
 8019844:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8019848:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801984c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8019850:	6812      	ldr	r2, [r2, #0]
 8019852:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 8019856:	4798      	blx	r3
 8019858:	4603      	mov	r3, r0
 801985a:	461a      	mov	r2, r3
 801985c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8019860:	4413      	add	r3, r2
 8019862:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      mg_fs_close(fd);
 8019866:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 801986a:	f7fd f97e 	bl	8016b6a <mg_fs_close>
      mg_http_reply(c, 200, headers_tmp, "%ld", res);  //TODO DELETE HEADERS!!!!!
 801986e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8019872:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8019876:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801987a:	9300      	str	r3, [sp, #0]
 801987c:	4b09      	ldr	r3, [pc, #36]	@ (80198a4 <mg_http_upload+0x340>)
 801987e:	4a0a      	ldr	r2, [pc, #40]	@ (80198a8 <mg_http_upload+0x344>)
 8019880:	21c8      	movs	r1, #200	@ 0xc8
 8019882:	6800      	ldr	r0, [r0, #0]
 8019884:	f7fe fcb2 	bl	80181ec <mg_http_reply>
    }
  }
  return res;
 8019888:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 801988c:	4618      	mov	r0, r3
 801988e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8019892:	46bd      	mov	sp, r7
 8019894:	bd90      	pop	{r4, r7, pc}
 8019896:	bf00      	nop
 8019898:	080326cc 	.word	0x080326cc
 801989c:	080326d4 	.word	0x080326d4
 80198a0:	08031f18 	.word	0x08031f18
 80198a4:	080326dc 	.word	0x080326dc
 80198a8:	080326e0 	.word	0x080326e0
 80198ac:	08032750 	.word	0x08032750
 80198b0:	08031b64 	.word	0x08031b64
 80198b4:	08032760 	.word	0x08032760
 80198b8:	08032774 	.word	0x08032774
 80198bc:	08032784 	.word	0x08032784
 80198c0:	20000298 	.word	0x20000298
 80198c4:	080344ec 	.word	0x080344ec
 80198c8:	08031484 	.word	0x08031484
 80198cc:	080327a0 	.word	0x080327a0
 80198d0:	080327b8 	.word	0x080327b8
 80198d4:	080327cc 	.word	0x080327cc

080198d8 <mg_http_status>:

int mg_http_status(const struct mg_http_message *hm) {
 80198d8:	b580      	push	{r7, lr}
 80198da:	b082      	sub	sp, #8
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	689b      	ldr	r3, [r3, #8]
 80198e4:	4618      	mov	r0, r3
 80198e6:	f009 fcfd 	bl	80232e4 <atoi>
 80198ea:	4603      	mov	r3, r0
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	3708      	adds	r7, #8
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}

080198f4 <is_hex_digit>:

static bool is_hex_digit(int c) {
 80198f4:	b480      	push	{r7}
 80198f6:	b083      	sub	sp, #12
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8019900:	dd02      	ble.n	8019908 <is_hex_digit+0x14>
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	2b39      	cmp	r3, #57	@ 0x39
 8019906:	dd0b      	ble.n	8019920 <is_hex_digit+0x2c>
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2b60      	cmp	r3, #96	@ 0x60
 801990c:	dd02      	ble.n	8019914 <is_hex_digit+0x20>
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	2b66      	cmp	r3, #102	@ 0x66
 8019912:	dd05      	ble.n	8019920 <is_hex_digit+0x2c>
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	2b40      	cmp	r3, #64	@ 0x40
 8019918:	dd04      	ble.n	8019924 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	2b46      	cmp	r3, #70	@ 0x46
 801991e:	dc01      	bgt.n	8019924 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8019920:	2301      	movs	r3, #1
 8019922:	e000      	b.n	8019926 <is_hex_digit+0x32>
 8019924:	2300      	movs	r3, #0
 8019926:	f003 0301 	and.w	r3, r3, #1
 801992a:	b2db      	uxtb	r3, r3
}
 801992c:	4618      	mov	r0, r3
 801992e:	370c      	adds	r7, #12
 8019930:	46bd      	mov	sp, r7
 8019932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019936:	4770      	bx	lr

08019938 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 8019938:	b580      	push	{r7, lr}
 801993a:	b08a      	sub	sp, #40	@ 0x28
 801993c:	af02      	add	r7, sp, #8
 801993e:	60f8      	str	r0, [r7, #12]
 8019940:	60b9      	str	r1, [r7, #8]
 8019942:	607a      	str	r2, [r7, #4]
 8019944:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 8019946:	2300      	movs	r3, #0
 8019948:	61fb      	str	r3, [r7, #28]
 801994a:	2300      	movs	r3, #0
 801994c:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	2b02      	cmp	r3, #2
 8019952:	dc04      	bgt.n	801995e <skip_chunk+0x26>
 8019954:	2300      	movs	r3, #0
 8019956:	e07a      	b.n	8019a4e <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 8019958:	69fb      	ldr	r3, [r7, #28]
 801995a:	3301      	adds	r3, #1
 801995c:	61fb      	str	r3, [r7, #28]
 801995e:	69fa      	ldr	r2, [r7, #28]
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	429a      	cmp	r2, r3
 8019964:	da09      	bge.n	801997a <skip_chunk+0x42>
 8019966:	69fb      	ldr	r3, [r7, #28]
 8019968:	68fa      	ldr	r2, [r7, #12]
 801996a:	4413      	add	r3, r2
 801996c:	781b      	ldrb	r3, [r3, #0]
 801996e:	4618      	mov	r0, r3
 8019970:	f7ff ffc0 	bl	80198f4 <is_hex_digit>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d1ee      	bne.n	8019958 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 801997a:	69fb      	ldr	r3, [r7, #28]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d102      	bne.n	8019986 <skip_chunk+0x4e>
 8019980:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019984:	e063      	b.n	8019a4e <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 8019986:	69fb      	ldr	r3, [r7, #28]
 8019988:	2b08      	cmp	r3, #8
 801998a:	dd02      	ble.n	8019992 <skip_chunk+0x5a>
 801998c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019990:	e05d      	b.n	8019a4e <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 8019992:	69fa      	ldr	r2, [r7, #28]
 8019994:	68bb      	ldr	r3, [r7, #8]
 8019996:	429a      	cmp	r2, r3
 8019998:	da0c      	bge.n	80199b4 <skip_chunk+0x7c>
 801999a:	69fb      	ldr	r3, [r7, #28]
 801999c:	68fa      	ldr	r2, [r7, #12]
 801999e:	4413      	add	r3, r2
 80199a0:	781b      	ldrb	r3, [r3, #0]
 80199a2:	2b0d      	cmp	r3, #13
 80199a4:	d106      	bne.n	80199b4 <skip_chunk+0x7c>
 80199a6:	69fb      	ldr	r3, [r7, #28]
 80199a8:	3301      	adds	r3, #1
 80199aa:	68fa      	ldr	r2, [r7, #12]
 80199ac:	4413      	add	r3, r2
 80199ae:	781b      	ldrb	r3, [r3, #0]
 80199b0:	2b0a      	cmp	r3, #10
 80199b2:	d002      	beq.n	80199ba <skip_chunk+0x82>
 80199b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80199b8:	e049      	b.n	8019a4e <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 80199ba:	69fa      	ldr	r2, [r7, #28]
 80199bc:	f107 0314 	add.w	r3, r7, #20
 80199c0:	68f9      	ldr	r1, [r7, #12]
 80199c2:	4618      	mov	r0, r3
 80199c4:	f008 f8db 	bl	8021b7e <mg_str_n>
 80199c8:	f107 0310 	add.w	r3, r7, #16
 80199cc:	2204      	movs	r2, #4
 80199ce:	9200      	str	r2, [sp, #0]
 80199d0:	2210      	movs	r2, #16
 80199d2:	f107 0114 	add.w	r1, r7, #20
 80199d6:	c903      	ldmia	r1, {r0, r1}
 80199d8:	f008 fad8 	bl	8021f8c <mg_str_to_num>
 80199dc:	4603      	mov	r3, r0
 80199de:	f083 0301 	eor.w	r3, r3, #1
 80199e2:	b2db      	uxtb	r3, r3
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d002      	beq.n	80199ee <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 80199e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80199ec:	e02f      	b.n	8019a4e <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 80199ee:	693b      	ldr	r3, [r7, #16]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	da02      	bge.n	80199fa <skip_chunk+0xc2>
 80199f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80199f8:	e029      	b.n	8019a4e <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 80199fa:	68ba      	ldr	r2, [r7, #8]
 80199fc:	69fb      	ldr	r3, [r7, #28]
 80199fe:	1ad3      	subs	r3, r2, r3
 8019a00:	1eda      	subs	r2, r3, #3
 8019a02:	693b      	ldr	r3, [r7, #16]
 8019a04:	429a      	cmp	r2, r3
 8019a06:	dc01      	bgt.n	8019a0c <skip_chunk+0xd4>
 8019a08:	2300      	movs	r3, #0
 8019a0a:	e020      	b.n	8019a4e <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 8019a0c:	693a      	ldr	r2, [r7, #16]
 8019a0e:	69fb      	ldr	r3, [r7, #28]
 8019a10:	4413      	add	r3, r2
 8019a12:	3302      	adds	r3, #2
 8019a14:	68fa      	ldr	r2, [r7, #12]
 8019a16:	4413      	add	r3, r2
 8019a18:	781b      	ldrb	r3, [r3, #0]
 8019a1a:	2b0d      	cmp	r3, #13
 8019a1c:	d108      	bne.n	8019a30 <skip_chunk+0xf8>
 8019a1e:	693a      	ldr	r2, [r7, #16]
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	4413      	add	r3, r2
 8019a24:	3303      	adds	r3, #3
 8019a26:	68fa      	ldr	r2, [r7, #12]
 8019a28:	4413      	add	r3, r2
 8019a2a:	781b      	ldrb	r3, [r3, #0]
 8019a2c:	2b0a      	cmp	r3, #10
 8019a2e:	d002      	beq.n	8019a36 <skip_chunk+0xfe>
 8019a30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019a34:	e00b      	b.n	8019a4e <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 8019a36:	69fb      	ldr	r3, [r7, #28]
 8019a38:	1c9a      	adds	r2, r3, #2
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	601a      	str	r2, [r3, #0]
 8019a3e:	693a      	ldr	r2, [r7, #16]
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 8019a44:	69fb      	ldr	r3, [r7, #28]
 8019a46:	1c9a      	adds	r2, r3, #2
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	4413      	add	r3, r2
 8019a4c:	3302      	adds	r3, #2
}
 8019a4e:	4618      	mov	r0, r3
 8019a50:	3720      	adds	r7, #32
 8019a52:	46bd      	mov	sp, r7
 8019a54:	bd80      	pop	{r7, pc}
	...

08019a58 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8019a5e:	af00      	add	r7, sp, #0
 8019a60:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a64:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019a68:	6018      	str	r0, [r3, #0]
 8019a6a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a6e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019a72:	6019      	str	r1, [r3, #0]
 8019a74:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a78:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8019a7c:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 8019a7e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a82:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	2b07      	cmp	r3, #7
 8019a8a:	d031      	beq.n	8019af0 <http_cb+0x98>
 8019a8c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a90:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	2b09      	cmp	r3, #9
 8019a98:	d02a      	beq.n	8019af0 <http_cb+0x98>
 8019a9a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019a9e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	2b02      	cmp	r3, #2
 8019aa6:	f040 831a 	bne.w	801a0de <http_cb+0x686>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8019aaa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019aae:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019ab8:	f003 0304 	and.w	r3, r3, #4
 8019abc:	b2db      	uxtb	r3, r3
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	f000 830d 	beq.w	801a0de <http_cb+0x686>
 8019ac4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ac8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8019ad2:	f003 0310 	and.w	r3, r3, #16
 8019ad6:	b2db      	uxtb	r3, r3
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	f040 8300 	bne.w	801a0de <http_cb+0x686>
       c->recv.len > 0)) {  // see #2796
 8019ade:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ae2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ae6:	681b      	ldr	r3, [r3, #0]
 8019ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	f000 82f7 	beq.w	801a0de <http_cb+0x686>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 8019af0:	2300      	movs	r3, #0
 8019af2:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 8019af6:	e2c5      	b.n	801a084 <http_cb+0x62c>
      const char *buf = (char *) c->recv.buf + ofs;
 8019af8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019afc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019b04:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019b08:	4413      	add	r3, r2
 8019b0a:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 8019b0e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019b12:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019b1a:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019b1e:	1ad3      	subs	r3, r2, r3
 8019b20:	f107 0214 	add.w	r2, r7, #20
 8019b24:	4619      	mov	r1, r3
 8019b26:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8019b2a:	f7fd fcf5 	bl	8017518 <mg_http_parse>
 8019b2e:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 8019b32:	2300      	movs	r3, #0
 8019b34:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      if (n < 0) {
 8019b38:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	da38      	bge.n	8019bb2 <http_cb+0x15a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 8019b40:	4bc8      	ldr	r3, [pc, #800]	@ (8019e64 <http_cb+0x40c>)
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	dd10      	ble.n	8019b6a <http_cb+0x112>
 8019b48:	4bc7      	ldr	r3, [pc, #796]	@ (8019e68 <http_cb+0x410>)
 8019b4a:	f640 42a3 	movw	r2, #3235	@ 0xca3
 8019b4e:	49c7      	ldr	r1, [pc, #796]	@ (8019e6c <http_cb+0x414>)
 8019b50:	2001      	movs	r0, #1
 8019b52:	f001 faf3 	bl	801b13c <mg_log_prefix>
 8019b56:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019b5a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019b62:	4619      	mov	r1, r3
 8019b64:	48c2      	ldr	r0, [pc, #776]	@ (8019e70 <http_cb+0x418>)
 8019b66:	f001 fb39 	bl	801b1dc <mg_log>
        c->is_draining = 1;
 8019b6a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019b6e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019b72:	681a      	ldr	r2, [r3, #0]
 8019b74:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019b78:	f043 0310 	orr.w	r3, r3, #16
 8019b7c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 8019b80:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019b84:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019b8c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019b90:	1ad3      	subs	r3, r2, r3
 8019b92:	2b10      	cmp	r3, #16
 8019b94:	bf28      	it	cs
 8019b96:	2310      	movcs	r3, #16
 8019b98:	4619      	mov	r1, r3
 8019b9a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 8019b9e:	f001 fb53 	bl	801b248 <mg_hexdump>
        c->recv.len = 0;
 8019ba2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ba6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	2200      	movs	r2, #0
 8019bae:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 8019bb0:	e295      	b.n	801a0de <http_cb+0x686>
      }
      if (n == 0) break;                 // Request is not buffered yet
 8019bb2:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	f000 827c 	beq.w	801a0b4 <http_cb+0x65c>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 8019bbc:	f107 0214 	add.w	r2, r7, #20
 8019bc0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019bc4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019bc8:	210a      	movs	r1, #10
 8019bca:	6818      	ldr	r0, [r3, #0]
 8019bcc:	f7fb fed0 	bl	8015970 <mg_call>
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 8019bd0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019bd4:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	2b09      	cmp	r3, #9
 8019bdc:	d128      	bne.n	8019c30 <http_cb+0x1d8>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 8019bde:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019be2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019bea:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019bee:	1ad2      	subs	r2, r2, r3
 8019bf0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019bf4:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019bf8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 8019bfc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c00:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c04:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019c08:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8019c0c:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8019c10:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 8019c14:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 8019c18:	f5a2 721d 	sub.w	r2, r2, #628	@ 0x274
 8019c1c:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 8019c20:	1a8a      	subs	r2, r1, r2
 8019c22:	1a9a      	subs	r2, r3, r2
 8019c24:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c28:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019c2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 8019c30:	f107 0314 	add.w	r3, r7, #20
 8019c34:	498f      	ldr	r1, [pc, #572]	@ (8019e74 <http_cb+0x41c>)
 8019c36:	4618      	mov	r0, r3
 8019c38:	f7fd fab2 	bl	80171a0 <mg_http_get_header>
 8019c3c:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
 8019c40:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d01d      	beq.n	8019c84 <http_cb+0x22c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 8019c48:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8019c4c:	498a      	ldr	r1, [pc, #552]	@ (8019e78 <http_cb+0x420>)
 8019c4e:	4618      	mov	r0, r3
 8019c50:	f007 ff78 	bl	8021b44 <mg_str_s>
 8019c54:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8019c58:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8019c5c:	cb0c      	ldmia	r3, {r2, r3}
 8019c5e:	c903      	ldmia	r1, {r0, r1}
 8019c60:	f007 fffc 	bl	8021c5c <mg_strcasecmp>
 8019c64:	4603      	mov	r3, r0
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d103      	bne.n	8019c72 <http_cb+0x21a>
          is_chunked = true;
 8019c6a:	2301      	movs	r3, #1
 8019c6c:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 8019c70:	e09f      	b.n	8019db2 <http_cb+0x35a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 8019c72:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c76:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019c7a:	4980      	ldr	r1, [pc, #512]	@ (8019e7c <http_cb+0x424>)
 8019c7c:	6818      	ldr	r0, [r3, #0]
 8019c7e:	f7fb fe97 	bl	80159b0 <mg_error>
          return;
 8019c82:	e22c      	b.n	801a0de <http_cb+0x686>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 8019c84:	f107 0314 	add.w	r3, r7, #20
 8019c88:	497d      	ldr	r1, [pc, #500]	@ (8019e80 <http_cb+0x428>)
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7fd fa88 	bl	80171a0 <mg_http_get_header>
 8019c90:	4603      	mov	r3, r0
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	f040 808d 	bne.w	8019db2 <http_cb+0x35a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 8019c98:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019c9c:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	2205      	movs	r2, #5
 8019ca4:	4977      	ldr	r1, [pc, #476]	@ (8019e84 <http_cb+0x42c>)
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	f7fc ffec 	bl	8016c84 <mg_ncasecmp>
 8019cac:	4603      	mov	r3, r0
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	bf0c      	ite	eq
 8019cb2:	2301      	moveq	r3, #1
 8019cb4:	2300      	movne	r3, #0
 8019cb6:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
        bool require_content_len = false;
 8019cba:	2300      	movs	r3, #0
 8019cbc:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8019cc0:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8019cc4:	f083 0301 	eor.w	r3, r3, #1
 8019cc8:	b2db      	uxtb	r3, r3
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d030      	beq.n	8019d30 <http_cb+0x2d8>
 8019cce:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8019cd2:	496d      	ldr	r1, [pc, #436]	@ (8019e88 <http_cb+0x430>)
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	f007 ff35 	bl	8021b44 <mg_str_s>
 8019cda:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019cde:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 8019ce2:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8019ce6:	cb0c      	ldmia	r3, {r2, r3}
 8019ce8:	c903      	ldmia	r1, {r0, r1}
 8019cea:	f007 ffb7 	bl	8021c5c <mg_strcasecmp>
 8019cee:	4603      	mov	r3, r0
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d012      	beq.n	8019d1a <http_cb+0x2c2>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 8019cf4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019cf8:	4964      	ldr	r1, [pc, #400]	@ (8019e8c <http_cb+0x434>)
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	f007 ff22 	bl	8021b44 <mg_str_s>
 8019d00:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d04:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 8019d08:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019d0c:	cb0c      	ldmia	r3, {r2, r3}
 8019d0e:	c903      	ldmia	r1, {r0, r1}
 8019d10:	f007 ffa4 	bl	8021c5c <mg_strcasecmp>
 8019d14:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d10a      	bne.n	8019d30 <http_cb+0x2d8>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 8019d1a:	2301      	movs	r3, #1
 8019d1c:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 8019d20:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019d24:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019d28:	4413      	add	r3, r2
 8019d2a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8019d2e:	e022      	b.n	8019d76 <http_cb+0x31e>
        } else if (is_response) {
 8019d30:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d01e      	beq.n	8019d76 <http_cb+0x31e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 8019d38:	f107 0314 	add.w	r3, r7, #20
 8019d3c:	4618      	mov	r0, r3
 8019d3e:	f7ff fdcb 	bl	80198d8 <mg_http_status>
 8019d42:	f8c7 0268 	str.w	r0, [r7, #616]	@ 0x268
          require_content_len = status >= 200 && status != 204 && status != 304;
 8019d46:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019d4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8019d4c:	dd0a      	ble.n	8019d64 <http_cb+0x30c>
 8019d4e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019d52:	2bcc      	cmp	r3, #204	@ 0xcc
 8019d54:	d006      	beq.n	8019d64 <http_cb+0x30c>
 8019d56:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8019d5a:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8019d5e:	d001      	beq.n	8019d64 <http_cb+0x30c>
 8019d60:	2301      	movs	r3, #1
 8019d62:	e000      	b.n	8019d66 <http_cb+0x30e>
 8019d64:	2300      	movs	r3, #0
 8019d66:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 8019d6a:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8019d6e:	f003 0301 	and.w	r3, r3, #1
 8019d72:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 8019d76:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d019      	beq.n	8019db2 <http_cb+0x35a>
          mg_http_reply(c, 411, "", "");
 8019d7e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019d82:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 8019d86:	4b42      	ldr	r3, [pc, #264]	@ (8019e90 <http_cb+0x438>)
 8019d88:	4a41      	ldr	r2, [pc, #260]	@ (8019e90 <http_cb+0x438>)
 8019d8a:	f240 119b 	movw	r1, #411	@ 0x19b
 8019d8e:	6800      	ldr	r0, [r0, #0]
 8019d90:	f7fe fa2c 	bl	80181ec <mg_http_reply>
          MG_ERROR(("%s", "Content length missing from request"));
 8019d94:	4b33      	ldr	r3, [pc, #204]	@ (8019e64 <http_cb+0x40c>)
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	dd0a      	ble.n	8019db2 <http_cb+0x35a>
 8019d9c:	4b32      	ldr	r3, [pc, #200]	@ (8019e68 <http_cb+0x410>)
 8019d9e:	f640 42ca 	movw	r2, #3274	@ 0xcca
 8019da2:	4932      	ldr	r1, [pc, #200]	@ (8019e6c <http_cb+0x414>)
 8019da4:	2001      	movs	r0, #1
 8019da6:	f001 f9c9 	bl	801b13c <mg_log_prefix>
 8019daa:	493a      	ldr	r1, [pc, #232]	@ (8019e94 <http_cb+0x43c>)
 8019dac:	483a      	ldr	r0, [pc, #232]	@ (8019e98 <http_cb+0x440>)
 8019dae:	f001 fa15 	bl	801b1dc <mg_log>
        }
      }

      if (is_chunked) {
 8019db2:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	f000 80e8 	beq.w	8019f8c <http_cb+0x534>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 8019dbc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019dc0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019dc8:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 8019dcc:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019dd0:	440b      	add	r3, r1
 8019dd2:	4413      	add	r3, r2
 8019dd4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 8019dd8:	2300      	movs	r3, #0
 8019dda:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019dde:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019de2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019dea:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019dee:	1ad2      	subs	r2, r2, r3
 8019df0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019df4:	1ad3      	subs	r3, r2, r3
 8019df6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 8019dfa:	e006      	b.n	8019e0a <http_cb+0x3b2>
 8019dfc:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8019e00:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019e04:	4413      	add	r3, r2
 8019e06:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019e0a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019e0e:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019e12:	18d0      	adds	r0, r2, r3
 8019e14:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019e18:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019e1c:	1ad1      	subs	r1, r2, r3
 8019e1e:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8019e22:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8019e26:	f7ff fd87 	bl	8019938 <skip_chunk>
 8019e2a:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8019e2e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	dd03      	ble.n	8019e3e <http_cb+0x3e6>
 8019e36:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d1de      	bne.n	8019dfc <http_cb+0x3a4>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 8019e3e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	f000 8138 	beq.w	801a0b8 <http_cb+0x660>
        if (cl < 0) {
 8019e48:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	da27      	bge.n	8019ea0 <http_cb+0x448>
          mg_error(c, "Invalid chunk");
 8019e50:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019e54:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019e58:	4910      	ldr	r1, [pc, #64]	@ (8019e9c <http_cb+0x444>)
 8019e5a:	6818      	ldr	r0, [r3, #0]
 8019e5c:	f7fb fda8 	bl	80159b0 <mg_error>
          break;
 8019e60:	e12d      	b.n	801a0be <http_cb+0x666>
 8019e62:	bf00      	nop
 8019e64:	20000298 	.word	0x20000298
 8019e68:	080344fc 	.word	0x080344fc
 8019e6c:	08031484 	.word	0x08031484
 8019e70:	080327dc 	.word	0x080327dc
 8019e74:	080327f4 	.word	0x080327f4
 8019e78:	08032808 	.word	0x08032808
 8019e7c:	08032810 	.word	0x08032810
 8019e80:	0803282c 	.word	0x0803282c
 8019e84:	08031690 	.word	0x08031690
 8019e88:	0803169c 	.word	0x0803169c
 8019e8c:	08031698 	.word	0x08031698
 8019e90:	08031b64 	.word	0x08031b64
 8019e94:	0803283c 	.word	0x0803283c
 8019e98:	080315f0 	.word	0x080315f0
 8019e9c:	08032860 	.word	0x08032860
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019ea6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019eaa:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019eae:	2200      	movs	r2, #0
 8019eb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8019eb4:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8019eb8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ebc:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019ec0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8019ec4:	e03e      	b.n	8019f44 <http_cb+0x4ec>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 8019ec6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019eca:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019ece:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019ed2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019ed6:	18d0      	adds	r0, r2, r3
 8019ed8:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019edc:	f8d7 2230 	ldr.w	r2, [r7, #560]	@ 0x230
 8019ee0:	4413      	add	r3, r2
 8019ee2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019ee6:	4413      	add	r3, r2
 8019ee8:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019eec:	4619      	mov	r1, r3
 8019eee:	f00b ff15 	bl	8025d1c <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 8019ef2:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 8019ef6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019efa:	4413      	add	r3, r2
 8019efc:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8019f00:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019f04:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019f08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019f0c:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019f10:	441a      	add	r2, r3
 8019f12:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019f16:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019f1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8019f1e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019f22:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019f26:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019f2a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8019f2e:	441a      	add	r2, r3
 8019f30:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019f34:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019f38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 8019f3c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d016      	beq.n	8019f72 <http_cb+0x51a>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 8019f44:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019f48:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019f4c:	18d0      	adds	r0, r2, r3
 8019f4e:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019f52:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019f56:	1ad1      	subs	r1, r2, r3
 8019f58:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8019f5c:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8019f60:	f7ff fcea 	bl	8019938 <skip_chunk>
 8019f64:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
 8019f68:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	dcaa      	bgt.n	8019ec6 <http_cb+0x46e>
 8019f70:	e000      	b.n	8019f74 <http_cb+0x51c>
          if (dl == 0) break;
 8019f72:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 8019f74:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 8019f78:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8019f7c:	4413      	add	r3, r2
 8019f7e:	461a      	mov	r2, r3
 8019f80:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019f84:	4413      	add	r3, r2
 8019f86:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8019f8a:	e025      	b.n	8019fd8 <http_cb+0x580>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 8019f8c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019f90:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019f98:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8019f9c:	1ad2      	subs	r2, r2, r3
 8019f9e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019fa2:	1ad3      	subs	r3, r2, r3
 8019fa4:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
        if (hm.body.len > len) break;  // Buffer more data
 8019fa8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019fac:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019fb0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019fb4:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8019fb8:	429a      	cmp	r2, r3
 8019fba:	d37f      	bcc.n	801a0bc <http_cb+0x664>
        ofs += (size_t) n + hm.body.len;
 8019fbc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019fc0:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8019fc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019fc8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019fcc:	4413      	add	r3, r2
 8019fce:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019fd2:	4413      	add	r3, r2
 8019fd4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8019fd8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019fdc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8019fe6:	f003 0304 	and.w	r3, r3, #4
 8019fea:	b2db      	uxtb	r3, r3
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d00a      	beq.n	801a006 <http_cb+0x5ae>
 8019ff0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8019ff4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8019ff8:	681a      	ldr	r2, [r3, #0]
 8019ffa:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8019ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a002:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 801a006:	f107 0214 	add.w	r2, r7, #20
 801a00a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801a00e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801a012:	210b      	movs	r1, #11
 801a014:	6818      	ldr	r0, [r3, #0]
 801a016:	f7fb fcab 	bl	8015970 <mg_call>
      if (c->is_accepted) {
 801a01a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801a01e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801a028:	f003 0304 	and.w	r3, r3, #4
 801a02c:	b2db      	uxtb	r3, r3
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d028      	beq.n	801a084 <http_cb+0x62c>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 801a032:	f107 0314 	add.w	r3, r7, #20
 801a036:	492c      	ldr	r1, [pc, #176]	@ (801a0e8 <http_cb+0x690>)
 801a038:	4618      	mov	r0, r3
 801a03a:	f7fd f8b1 	bl	80171a0 <mg_http_get_header>
 801a03e:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 801a042:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 801a046:	2b00      	cmp	r3, #0
 801a048:	d01c      	beq.n	801a084 <http_cb+0x62c>
 801a04a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 801a04e:	4927      	ldr	r1, [pc, #156]	@ (801a0ec <http_cb+0x694>)
 801a050:	4618      	mov	r0, r3
 801a052:	f007 fd77 	bl	8021b44 <mg_str_s>
 801a056:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 801a05a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 801a05e:	cb0c      	ldmia	r3, {r2, r3}
 801a060:	c903      	ldmia	r1, {r0, r1}
 801a062:	f007 fdfb 	bl	8021c5c <mg_strcasecmp>
 801a066:	4603      	mov	r3, r0
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d10b      	bne.n	801a084 <http_cb+0x62c>
          c->is_draining = 1;  // honor "Connection: close"
 801a06c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801a070:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801a074:	681a      	ldr	r2, [r3, #0]
 801a076:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801a07a:	f043 0310 	orr.w	r3, r3, #16
 801a07e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 801a082:	e01c      	b.n	801a0be <http_cb+0x666>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 801a084:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801a088:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a092:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801a096:	b2db      	uxtb	r3, r3
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d110      	bne.n	801a0be <http_cb+0x666>
 801a09c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801a0a0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801a0a4:	681b      	ldr	r3, [r3, #0]
 801a0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a0a8:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801a0ac:	429a      	cmp	r2, r3
 801a0ae:	f4ff ad23 	bcc.w	8019af8 <http_cb+0xa0>
 801a0b2:	e004      	b.n	801a0be <http_cb+0x666>
      if (n == 0) break;                 // Request is not buffered yet
 801a0b4:	bf00      	nop
 801a0b6:	e002      	b.n	801a0be <http_cb+0x666>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 801a0b8:	bf00      	nop
 801a0ba:	e000      	b.n	801a0be <http_cb+0x666>
        if (hm.body.len > len) break;  // Buffer more data
 801a0bc:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 801a0be:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d00b      	beq.n	801a0de <http_cb+0x686>
 801a0c6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 801a0ca:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	3338      	adds	r3, #56	@ 0x38
 801a0d2:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801a0d6:	2100      	movs	r1, #0
 801a0d8:	4618      	mov	r0, r3
 801a0da:	f000 f91d 	bl	801a318 <mg_iobuf_del>
  }
  (void) ev_data;
}
 801a0de:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 801a0e2:	46bd      	mov	sp, r7
 801a0e4:	bd80      	pop	{r7, pc}
 801a0e6:	bf00      	nop
 801a0e8:	08032870 	.word	0x08032870
 801a0ec:	0803287c 	.word	0x0803287c

0801a0f0 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b086      	sub	sp, #24
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	60f8      	str	r0, [r7, #12]
 801a0f8:	60b9      	str	r1, [r7, #8]
 801a0fa:	607a      	str	r2, [r7, #4]
 801a0fc:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 801a0fe:	683b      	ldr	r3, [r7, #0]
 801a100:	687a      	ldr	r2, [r7, #4]
 801a102:	68b9      	ldr	r1, [r7, #8]
 801a104:	68f8      	ldr	r0, [r7, #12]
 801a106:	f003 fd11 	bl	801db2c <mg_listen>
 801a10a:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 801a10c:	697b      	ldr	r3, [r7, #20]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d003      	beq.n	801a11a <mg_http_listen+0x2a>
 801a112:	697b      	ldr	r3, [r7, #20]
 801a114:	4a03      	ldr	r2, [pc, #12]	@ (801a124 <mg_http_listen+0x34>)
 801a116:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 801a11a:	697b      	ldr	r3, [r7, #20]
}
 801a11c:	4618      	mov	r0, r3
 801a11e:	3718      	adds	r7, #24
 801a120:	46bd      	mov	sp, r7
 801a122:	bd80      	pop	{r7, pc}
 801a124:	08019a59 	.word	0x08019a59

0801a128 <roundup>:





static size_t roundup(size_t size, size_t align) {
 801a128:	b480      	push	{r7}
 801a12a:	b083      	sub	sp, #12
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
 801a130:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 801a132:	683b      	ldr	r3, [r7, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d00a      	beq.n	801a14e <roundup+0x26>
 801a138:	687a      	ldr	r2, [r7, #4]
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	4413      	add	r3, r2
 801a13e:	1e5a      	subs	r2, r3, #1
 801a140:	683b      	ldr	r3, [r7, #0]
 801a142:	fbb2 f3f3 	udiv	r3, r2, r3
 801a146:	683a      	ldr	r2, [r7, #0]
 801a148:	fb02 f303 	mul.w	r3, r2, r3
 801a14c:	e000      	b.n	801a150 <roundup+0x28>
 801a14e:	687b      	ldr	r3, [r7, #4]
}
 801a150:	4618      	mov	r0, r3
 801a152:	370c      	adds	r7, #12
 801a154:	46bd      	mov	sp, r7
 801a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a15a:	4770      	bx	lr

0801a15c <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 801a15c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a160:	b088      	sub	sp, #32
 801a162:	af02      	add	r7, sp, #8
 801a164:	6078      	str	r0, [r7, #4]
 801a166:	6039      	str	r1, [r7, #0]
  int ok = 1;
 801a168:	2301      	movs	r3, #1
 801a16a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	68db      	ldr	r3, [r3, #12]
 801a170:	4619      	mov	r1, r3
 801a172:	6838      	ldr	r0, [r7, #0]
 801a174:	f7ff ffd8 	bl	801a128 <roundup>
 801a178:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d117      	bne.n	801a1b0 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	681a      	ldr	r2, [r3, #0]
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	685b      	ldr	r3, [r3, #4]
 801a188:	4619      	mov	r1, r3
 801a18a:	4610      	mov	r0, r2
 801a18c:	f008 fbe4 	bl	8022958 <mg_bzero>
    free(io->buf);
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	4618      	mov	r0, r3
 801a196:	f7f2 fa97 	bl	800c6c8 <vPortFree>
    io->buf = NULL;
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	2200      	movs	r2, #0
 801a19e:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	2200      	movs	r2, #0
 801a1a4:	605a      	str	r2, [r3, #4]
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	685a      	ldr	r2, [r3, #4]
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	609a      	str	r2, [r3, #8]
 801a1ae:	e052      	b.n	801a256 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	685b      	ldr	r3, [r3, #4]
 801a1b4:	683a      	ldr	r2, [r7, #0]
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	d04d      	beq.n	801a256 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 801a1ba:	6839      	ldr	r1, [r7, #0]
 801a1bc:	2001      	movs	r0, #1
 801a1be:	f7fa fdf7 	bl	8014db0 <mg_calloc>
 801a1c2:	6138      	str	r0, [r7, #16]
    if (p != NULL) {
 801a1c4:	693b      	ldr	r3, [r7, #16]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d028      	beq.n	801a21c <mg_iobuf_resize+0xc0>
      size_t len = new_size < io->len ? new_size : io->len;
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	689b      	ldr	r3, [r3, #8]
 801a1ce:	683a      	ldr	r2, [r7, #0]
 801a1d0:	4293      	cmp	r3, r2
 801a1d2:	bf28      	it	cs
 801a1d4:	4613      	movcs	r3, r2
 801a1d6:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d00a      	beq.n	801a1f4 <mg_iobuf_resize+0x98>
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d006      	beq.n	801a1f4 <mg_iobuf_resize+0x98>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	68fa      	ldr	r2, [r7, #12]
 801a1ec:	4619      	mov	r1, r3
 801a1ee:	6938      	ldr	r0, [r7, #16]
 801a1f0:	f00b fd94 	bl	8025d1c <memmove>
      mg_bzero(io->buf, io->size);
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	681a      	ldr	r2, [r3, #0]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	685b      	ldr	r3, [r3, #4]
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	4610      	mov	r0, r2
 801a200:	f008 fbaa 	bl	8022958 <mg_bzero>
      free(io->buf);
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	4618      	mov	r0, r3
 801a20a:	f7f2 fa5d 	bl	800c6c8 <vPortFree>
      io->buf = (unsigned char *) p;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	693a      	ldr	r2, [r7, #16]
 801a212:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	683a      	ldr	r2, [r7, #0]
 801a218:	605a      	str	r2, [r3, #4]
 801a21a:	e01c      	b.n	801a256 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 801a21c:	2300      	movs	r3, #0
 801a21e:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 801a220:	4b10      	ldr	r3, [pc, #64]	@ (801a264 <mg_iobuf_resize+0x108>)
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	2b00      	cmp	r3, #0
 801a226:	dd16      	ble.n	801a256 <mg_iobuf_resize+0xfa>
 801a228:	4b0f      	ldr	r3, [pc, #60]	@ (801a268 <mg_iobuf_resize+0x10c>)
 801a22a:	f640 5244 	movw	r2, #3396	@ 0xd44
 801a22e:	490f      	ldr	r1, [pc, #60]	@ (801a26c <mg_iobuf_resize+0x110>)
 801a230:	2001      	movs	r0, #1
 801a232:	f000 ff83 	bl	801b13c <mg_log_prefix>
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	685b      	ldr	r3, [r3, #4]
 801a23a:	2200      	movs	r2, #0
 801a23c:	4698      	mov	r8, r3
 801a23e:	4691      	mov	r9, r2
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	2200      	movs	r2, #0
 801a244:	461c      	mov	r4, r3
 801a246:	4615      	mov	r5, r2
 801a248:	e9cd 4500 	strd	r4, r5, [sp]
 801a24c:	4642      	mov	r2, r8
 801a24e:	464b      	mov	r3, r9
 801a250:	4807      	ldr	r0, [pc, #28]	@ (801a270 <mg_iobuf_resize+0x114>)
 801a252:	f000 ffc3 	bl	801b1dc <mg_log>
    }
  }
  return ok;
 801a256:	697b      	ldr	r3, [r7, #20]
}
 801a258:	4618      	mov	r0, r3
 801a25a:	3718      	adds	r7, #24
 801a25c:	46bd      	mov	sp, r7
 801a25e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a262:	bf00      	nop
 801a264:	20000298 	.word	0x20000298
 801a268:	08034504 	.word	0x08034504
 801a26c:	08031484 	.word	0x08031484
 801a270:	080328bc 	.word	0x080328bc

0801a274 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 801a274:	b580      	push	{r7, lr}
 801a276:	b086      	sub	sp, #24
 801a278:	af00      	add	r7, sp, #0
 801a27a:	60f8      	str	r0, [r7, #12]
 801a27c:	60b9      	str	r1, [r7, #8]
 801a27e:	607a      	str	r2, [r7, #4]
 801a280:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	689a      	ldr	r2, [r3, #8]
 801a286:	683b      	ldr	r3, [r7, #0]
 801a288:	441a      	add	r2, r3
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	68db      	ldr	r3, [r3, #12]
 801a28e:	4619      	mov	r1, r3
 801a290:	4610      	mov	r0, r2
 801a292:	f7ff ff49 	bl	801a128 <roundup>
 801a296:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 801a298:	6979      	ldr	r1, [r7, #20]
 801a29a:	68f8      	ldr	r0, [r7, #12]
 801a29c:	f7ff ff5e 	bl	801a15c <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	685b      	ldr	r3, [r3, #4]
 801a2a4:	697a      	ldr	r2, [r7, #20]
 801a2a6:	429a      	cmp	r2, r3
 801a2a8:	d001      	beq.n	801a2ae <mg_iobuf_add+0x3a>
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	689b      	ldr	r3, [r3, #8]
 801a2b2:	68ba      	ldr	r2, [r7, #8]
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	d210      	bcs.n	801a2da <mg_iobuf_add+0x66>
 801a2b8:	68fb      	ldr	r3, [r7, #12]
 801a2ba:	681a      	ldr	r2, [r3, #0]
 801a2bc:	68b9      	ldr	r1, [r7, #8]
 801a2be:	683b      	ldr	r3, [r7, #0]
 801a2c0:	440b      	add	r3, r1
 801a2c2:	18d0      	adds	r0, r2, r3
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	681a      	ldr	r2, [r3, #0]
 801a2c8:	68bb      	ldr	r3, [r7, #8]
 801a2ca:	18d1      	adds	r1, r2, r3
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	689a      	ldr	r2, [r3, #8]
 801a2d0:	68bb      	ldr	r3, [r7, #8]
 801a2d2:	1ad3      	subs	r3, r2, r3
 801a2d4:	461a      	mov	r2, r3
 801a2d6:	f00b fd21 	bl	8025d1c <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d008      	beq.n	801a2f2 <mg_iobuf_add+0x7e>
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	681a      	ldr	r2, [r3, #0]
 801a2e4:	68bb      	ldr	r3, [r7, #8]
 801a2e6:	4413      	add	r3, r2
 801a2e8:	683a      	ldr	r2, [r7, #0]
 801a2ea:	6879      	ldr	r1, [r7, #4]
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f00b fd15 	bl	8025d1c <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	689b      	ldr	r3, [r3, #8]
 801a2f6:	68ba      	ldr	r2, [r7, #8]
 801a2f8:	429a      	cmp	r2, r3
 801a2fa:	d902      	bls.n	801a302 <mg_iobuf_add+0x8e>
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	68ba      	ldr	r2, [r7, #8]
 801a300:	609a      	str	r2, [r3, #8]
  io->len += len;
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	689a      	ldr	r2, [r3, #8]
 801a306:	683b      	ldr	r3, [r7, #0]
 801a308:	441a      	add	r2, r3
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	609a      	str	r2, [r3, #8]
  return len;
 801a30e:	683b      	ldr	r3, [r7, #0]
}
 801a310:	4618      	mov	r0, r3
 801a312:	3718      	adds	r7, #24
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}

0801a318 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 801a318:	b580      	push	{r7, lr}
 801a31a:	b084      	sub	sp, #16
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	60f8      	str	r0, [r7, #12]
 801a320:	60b9      	str	r1, [r7, #8]
 801a322:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	689b      	ldr	r3, [r3, #8]
 801a328:	68ba      	ldr	r2, [r7, #8]
 801a32a:	429a      	cmp	r2, r3
 801a32c:	d902      	bls.n	801a334 <mg_iobuf_del+0x1c>
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	689b      	ldr	r3, [r3, #8]
 801a332:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 801a334:	68ba      	ldr	r2, [r7, #8]
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	441a      	add	r2, r3
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	689b      	ldr	r3, [r3, #8]
 801a33e:	429a      	cmp	r2, r3
 801a340:	d904      	bls.n	801a34c <mg_iobuf_del+0x34>
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	689a      	ldr	r2, [r3, #8]
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	1ad3      	subs	r3, r2, r3
 801a34a:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d012      	beq.n	801a37a <mg_iobuf_del+0x62>
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	681a      	ldr	r2, [r3, #0]
 801a358:	68bb      	ldr	r3, [r7, #8]
 801a35a:	18d0      	adds	r0, r2, r3
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	681a      	ldr	r2, [r3, #0]
 801a360:	68b9      	ldr	r1, [r7, #8]
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	440b      	add	r3, r1
 801a366:	18d1      	adds	r1, r2, r3
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	689a      	ldr	r2, [r3, #8]
 801a36c:	68bb      	ldr	r3, [r7, #8]
 801a36e:	1ad2      	subs	r2, r2, r3
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	1ad3      	subs	r3, r2, r3
 801a374:	461a      	mov	r2, r3
 801a376:	f00b fcd1 	bl	8025d1c <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d00a      	beq.n	801a398 <mg_iobuf_del+0x80>
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	681a      	ldr	r2, [r3, #0]
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	6899      	ldr	r1, [r3, #8]
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	1acb      	subs	r3, r1, r3
 801a38e:	4413      	add	r3, r2
 801a390:	6879      	ldr	r1, [r7, #4]
 801a392:	4618      	mov	r0, r3
 801a394:	f008 fae0 	bl	8022958 <mg_bzero>
  io->len -= len;
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	689a      	ldr	r2, [r3, #8]
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	1ad2      	subs	r2, r2, r3
 801a3a0:	68fb      	ldr	r3, [r7, #12]
 801a3a2:	609a      	str	r2, [r3, #8]
  return len;
 801a3a4:	687b      	ldr	r3, [r7, #4]
}
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	3710      	adds	r7, #16
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}

0801a3ae <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 801a3ae:	b580      	push	{r7, lr}
 801a3b0:	b082      	sub	sp, #8
 801a3b2:	af00      	add	r7, sp, #0
 801a3b4:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 801a3b6:	2100      	movs	r1, #0
 801a3b8:	6878      	ldr	r0, [r7, #4]
 801a3ba:	f7ff fecf 	bl	801a15c <mg_iobuf_resize>
}
 801a3be:	bf00      	nop
 801a3c0:	3708      	adds	r7, #8
 801a3c2:	46bd      	mov	sp, r7
 801a3c4:	bd80      	pop	{r7, pc}
	...

0801a3c8 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 801a3c8:	b480      	push	{r7}
 801a3ca:	b083      	sub	sp, #12
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d001      	beq.n	801a3da <escapeseq+0x12>
 801a3d6:	4b04      	ldr	r3, [pc, #16]	@ (801a3e8 <escapeseq+0x20>)
 801a3d8:	e000      	b.n	801a3dc <escapeseq+0x14>
 801a3da:	4b04      	ldr	r3, [pc, #16]	@ (801a3ec <escapeseq+0x24>)
}
 801a3dc:	4618      	mov	r0, r3
 801a3de:	370c      	adds	r7, #12
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3e6:	4770      	bx	lr
 801a3e8:	080328c8 	.word	0x080328c8
 801a3ec:	080328d0 	.word	0x080328d0

0801a3f0 <json_esc>:

static char json_esc(int c, int esc) {
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b086      	sub	sp, #24
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
 801a3f8:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 801a3fa:	6838      	ldr	r0, [r7, #0]
 801a3fc:	f7ff ffe4 	bl	801a3c8 <escapeseq>
 801a400:	6138      	str	r0, [r7, #16]
 801a402:	683b      	ldr	r3, [r7, #0]
 801a404:	2b00      	cmp	r3, #0
 801a406:	bf0c      	ite	eq
 801a408:	2301      	moveq	r3, #1
 801a40a:	2300      	movne	r3, #0
 801a40c:	b2db      	uxtb	r3, r3
 801a40e:	4618      	mov	r0, r3
 801a410:	f7ff ffda 	bl	801a3c8 <escapeseq>
 801a414:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 801a416:	693b      	ldr	r3, [r7, #16]
 801a418:	617b      	str	r3, [r7, #20]
 801a41a:	e010      	b.n	801a43e <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 801a41c:	697b      	ldr	r3, [r7, #20]
 801a41e:	781b      	ldrb	r3, [r3, #0]
 801a420:	461a      	mov	r2, r3
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	4293      	cmp	r3, r2
 801a426:	d107      	bne.n	801a438 <json_esc+0x48>
 801a428:	697a      	ldr	r2, [r7, #20]
 801a42a:	693b      	ldr	r3, [r7, #16]
 801a42c:	1ad3      	subs	r3, r2, r3
 801a42e:	461a      	mov	r2, r3
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	4413      	add	r3, r2
 801a434:	781b      	ldrb	r3, [r3, #0]
 801a436:	e007      	b.n	801a448 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 801a438:	697b      	ldr	r3, [r7, #20]
 801a43a:	3301      	adds	r3, #1
 801a43c:	617b      	str	r3, [r7, #20]
 801a43e:	697b      	ldr	r3, [r7, #20]
 801a440:	781b      	ldrb	r3, [r3, #0]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d1ea      	bne.n	801a41c <json_esc+0x2c>
  }
  return 0;
 801a446:	2300      	movs	r3, #0
}
 801a448:	4618      	mov	r0, r3
 801a44a:	3718      	adds	r7, #24
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 801a450:	b580      	push	{r7, lr}
 801a452:	b084      	sub	sp, #16
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
 801a458:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 801a45a:	2300      	movs	r3, #0
 801a45c:	60fb      	str	r3, [r7, #12]
 801a45e:	e02e      	b.n	801a4be <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	687a      	ldr	r2, [r7, #4]
 801a464:	4413      	add	r3, r2
 801a466:	781b      	ldrb	r3, [r3, #0]
 801a468:	2b5c      	cmp	r3, #92	@ 0x5c
 801a46a:	d114      	bne.n	801a496 <mg_pass_string+0x46>
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	3301      	adds	r3, #1
 801a470:	683a      	ldr	r2, [r7, #0]
 801a472:	429a      	cmp	r2, r3
 801a474:	dd0f      	ble.n	801a496 <mg_pass_string+0x46>
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	3301      	adds	r3, #1
 801a47a:	687a      	ldr	r2, [r7, #4]
 801a47c:	4413      	add	r3, r2
 801a47e:	781b      	ldrb	r3, [r3, #0]
 801a480:	2101      	movs	r1, #1
 801a482:	4618      	mov	r0, r3
 801a484:	f7ff ffb4 	bl	801a3f0 <json_esc>
 801a488:	4603      	mov	r3, r0
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d003      	beq.n	801a496 <mg_pass_string+0x46>
      i++;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	3301      	adds	r3, #1
 801a492:	60fb      	str	r3, [r7, #12]
 801a494:	e010      	b.n	801a4b8 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	687a      	ldr	r2, [r7, #4]
 801a49a:	4413      	add	r3, r2
 801a49c:	781b      	ldrb	r3, [r3, #0]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d102      	bne.n	801a4a8 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 801a4a2:	f06f 0301 	mvn.w	r3, #1
 801a4a6:	e010      	b.n	801a4ca <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	687a      	ldr	r2, [r7, #4]
 801a4ac:	4413      	add	r3, r2
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	2b22      	cmp	r3, #34	@ 0x22
 801a4b2:	d101      	bne.n	801a4b8 <mg_pass_string+0x68>
      return i;
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	e008      	b.n	801a4ca <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	3301      	adds	r3, #1
 801a4bc:	60fb      	str	r3, [r7, #12]
 801a4be:	68fa      	ldr	r2, [r7, #12]
 801a4c0:	683b      	ldr	r3, [r7, #0]
 801a4c2:	429a      	cmp	r2, r3
 801a4c4:	dbcc      	blt.n	801a460 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 801a4c6:	f06f 0301 	mvn.w	r3, #1
}
 801a4ca:	4618      	mov	r0, r3
 801a4cc:	3710      	adds	r7, #16
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}
 801a4d2:	0000      	movs	r0, r0
 801a4d4:	0000      	movs	r0, r0
	...

0801a4d8 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b090      	sub	sp, #64	@ 0x40
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	60f8      	str	r0, [r7, #12]
 801a4e0:	60b9      	str	r1, [r7, #8]
 801a4e2:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 801a4e4:	f04f 0200 	mov.w	r2, #0
 801a4e8:	f04f 0300 	mov.w	r3, #0
 801a4ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	637b      	str	r3, [r7, #52]	@ 0x34
 801a4f4:	2301      	movs	r3, #1
 801a4f6:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 801a4f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a4fa:	68bb      	ldr	r3, [r7, #8]
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	da0a      	bge.n	801a516 <mg_atod+0x3e>
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	781b      	ldrb	r3, [r3, #0]
 801a504:	2b2d      	cmp	r3, #45	@ 0x2d
 801a506:	d106      	bne.n	801a516 <mg_atod+0x3e>
    sign = -1, i++;
 801a508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a50c:	633b      	str	r3, [r7, #48]	@ 0x30
 801a50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a510:	3301      	adds	r3, #1
 801a512:	637b      	str	r3, [r7, #52]	@ 0x34
 801a514:	e00a      	b.n	801a52c <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 801a516:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a518:	68bb      	ldr	r3, [r7, #8]
 801a51a:	429a      	cmp	r2, r3
 801a51c:	da27      	bge.n	801a56e <mg_atod+0x96>
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	781b      	ldrb	r3, [r3, #0]
 801a522:	2b2b      	cmp	r3, #43	@ 0x2b
 801a524:	d123      	bne.n	801a56e <mg_atod+0x96>
    i++;
 801a526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a528:	3301      	adds	r3, #1
 801a52a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a52c:	e01f      	b.n	801a56e <mg_atod+0x96>
    d *= 10.0;
 801a52e:	f04f 0200 	mov.w	r2, #0
 801a532:	4b9d      	ldr	r3, [pc, #628]	@ (801a7a8 <mg_atod+0x2d0>)
 801a534:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a538:	f7e6 f876 	bl	8000628 <__aeabi_dmul>
 801a53c:	4602      	mov	r2, r0
 801a53e:	460b      	mov	r3, r1
 801a540:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    d += p[i] - '0';
 801a544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a546:	68fa      	ldr	r2, [r7, #12]
 801a548:	4413      	add	r3, r2
 801a54a:	781b      	ldrb	r3, [r3, #0]
 801a54c:	3b30      	subs	r3, #48	@ 0x30
 801a54e:	4618      	mov	r0, r3
 801a550:	f7e6 f800 	bl	8000554 <__aeabi_i2d>
 801a554:	4602      	mov	r2, r0
 801a556:	460b      	mov	r3, r1
 801a558:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a55c:	f7e5 feae 	bl	80002bc <__adddf3>
 801a560:	4602      	mov	r2, r0
 801a562:	460b      	mov	r3, r1
 801a564:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a56a:	3301      	adds	r3, #1
 801a56c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a56e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a570:	68bb      	ldr	r3, [r7, #8]
 801a572:	429a      	cmp	r2, r3
 801a574:	da0b      	bge.n	801a58e <mg_atod+0xb6>
 801a576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a578:	68fa      	ldr	r2, [r7, #12]
 801a57a:	4413      	add	r3, r2
 801a57c:	781b      	ldrb	r3, [r3, #0]
 801a57e:	2b2f      	cmp	r3, #47	@ 0x2f
 801a580:	d905      	bls.n	801a58e <mg_atod+0xb6>
 801a582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a584:	68fa      	ldr	r2, [r7, #12]
 801a586:	4413      	add	r3, r2
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	2b39      	cmp	r3, #57	@ 0x39
 801a58c:	d9cf      	bls.n	801a52e <mg_atod+0x56>
  }
  d *= sign;
 801a58e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a590:	f7e5 ffe0 	bl	8000554 <__aeabi_i2d>
 801a594:	4602      	mov	r2, r0
 801a596:	460b      	mov	r3, r1
 801a598:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a59c:	f7e6 f844 	bl	8000628 <__aeabi_dmul>
 801a5a0:	4602      	mov	r2, r0
 801a5a2:	460b      	mov	r3, r1
 801a5a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 801a5a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a5aa:	68bb      	ldr	r3, [r7, #8]
 801a5ac:	429a      	cmp	r2, r3
 801a5ae:	da59      	bge.n	801a664 <mg_atod+0x18c>
 801a5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5b2:	68fa      	ldr	r2, [r7, #12]
 801a5b4:	4413      	add	r3, r2
 801a5b6:	781b      	ldrb	r3, [r3, #0]
 801a5b8:	2b2e      	cmp	r3, #46	@ 0x2e
 801a5ba:	d153      	bne.n	801a664 <mg_atod+0x18c>
    double frac = 0.0, base = 0.1;
 801a5bc:	f04f 0200 	mov.w	r2, #0
 801a5c0:	f04f 0300 	mov.w	r3, #0
 801a5c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 801a5c8:	a375      	add	r3, pc, #468	@ (adr r3, 801a7a0 <mg_atod+0x2c8>)
 801a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 801a5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a5d8:	e023      	b.n	801a622 <mg_atod+0x14a>
      frac += base * (p[i] - '0');
 801a5da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5dc:	68fa      	ldr	r2, [r7, #12]
 801a5de:	4413      	add	r3, r2
 801a5e0:	781b      	ldrb	r3, [r3, #0]
 801a5e2:	3b30      	subs	r3, #48	@ 0x30
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f7e5 ffb5 	bl	8000554 <__aeabi_i2d>
 801a5ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a5ee:	f7e6 f81b 	bl	8000628 <__aeabi_dmul>
 801a5f2:	4602      	mov	r2, r0
 801a5f4:	460b      	mov	r3, r1
 801a5f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801a5fa:	f7e5 fe5f 	bl	80002bc <__adddf3>
 801a5fe:	4602      	mov	r2, r0
 801a600:	460b      	mov	r3, r1
 801a602:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      base /= 10.0;
 801a606:	f04f 0200 	mov.w	r2, #0
 801a60a:	4b67      	ldr	r3, [pc, #412]	@ (801a7a8 <mg_atod+0x2d0>)
 801a60c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a610:	f7e6 f934 	bl	800087c <__aeabi_ddiv>
 801a614:	4602      	mov	r2, r0
 801a616:	460b      	mov	r3, r1
 801a618:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 801a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a61e:	3301      	adds	r3, #1
 801a620:	637b      	str	r3, [r7, #52]	@ 0x34
 801a622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a624:	68bb      	ldr	r3, [r7, #8]
 801a626:	429a      	cmp	r2, r3
 801a628:	da0b      	bge.n	801a642 <mg_atod+0x16a>
 801a62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a62c:	68fa      	ldr	r2, [r7, #12]
 801a62e:	4413      	add	r3, r2
 801a630:	781b      	ldrb	r3, [r3, #0]
 801a632:	2b2f      	cmp	r3, #47	@ 0x2f
 801a634:	d905      	bls.n	801a642 <mg_atod+0x16a>
 801a636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a638:	68fa      	ldr	r2, [r7, #12]
 801a63a:	4413      	add	r3, r2
 801a63c:	781b      	ldrb	r3, [r3, #0]
 801a63e:	2b39      	cmp	r3, #57	@ 0x39
 801a640:	d9cb      	bls.n	801a5da <mg_atod+0x102>
    }
    d += frac * sign;
 801a642:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a644:	f7e5 ff86 	bl	8000554 <__aeabi_i2d>
 801a648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801a64c:	f7e5 ffec 	bl	8000628 <__aeabi_dmul>
 801a650:	4602      	mov	r2, r0
 801a652:	460b      	mov	r3, r1
 801a654:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a658:	f7e5 fe30 	bl	80002bc <__adddf3>
 801a65c:	4602      	mov	r2, r0
 801a65e:	460b      	mov	r3, r1
 801a660:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 801a664:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	429a      	cmp	r2, r3
 801a66a:	f280 8085 	bge.w	801a778 <mg_atod+0x2a0>
 801a66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a670:	68fa      	ldr	r2, [r7, #12]
 801a672:	4413      	add	r3, r2
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	2b65      	cmp	r3, #101	@ 0x65
 801a678:	d005      	beq.n	801a686 <mg_atod+0x1ae>
 801a67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a67c:	68fa      	ldr	r2, [r7, #12]
 801a67e:	4413      	add	r3, r2
 801a680:	781b      	ldrb	r3, [r3, #0]
 801a682:	2b45      	cmp	r3, #69	@ 0x45
 801a684:	d178      	bne.n	801a778 <mg_atod+0x2a0>
    int j, exp = 0, minus = 0;
 801a686:	2300      	movs	r3, #0
 801a688:	61bb      	str	r3, [r7, #24]
 801a68a:	2300      	movs	r3, #0
 801a68c:	617b      	str	r3, [r7, #20]
    i++;
 801a68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a690:	3301      	adds	r3, #1
 801a692:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 801a694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a696:	68bb      	ldr	r3, [r7, #8]
 801a698:	429a      	cmp	r2, r3
 801a69a:	da0a      	bge.n	801a6b2 <mg_atod+0x1da>
 801a69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a69e:	68fa      	ldr	r2, [r7, #12]
 801a6a0:	4413      	add	r3, r2
 801a6a2:	781b      	ldrb	r3, [r3, #0]
 801a6a4:	2b2d      	cmp	r3, #45	@ 0x2d
 801a6a6:	d104      	bne.n	801a6b2 <mg_atod+0x1da>
 801a6a8:	2301      	movs	r3, #1
 801a6aa:	617b      	str	r3, [r7, #20]
 801a6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6ae:	3301      	adds	r3, #1
 801a6b0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 801a6b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	429a      	cmp	r2, r3
 801a6b8:	da19      	bge.n	801a6ee <mg_atod+0x216>
 801a6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6bc:	68fa      	ldr	r2, [r7, #12]
 801a6be:	4413      	add	r3, r2
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	2b2b      	cmp	r3, #43	@ 0x2b
 801a6c4:	d113      	bne.n	801a6ee <mg_atod+0x216>
 801a6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6c8:	3301      	adds	r3, #1
 801a6ca:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801a6cc:	e00f      	b.n	801a6ee <mg_atod+0x216>
      exp = exp * 10 + (p[i++] - '0');
 801a6ce:	69ba      	ldr	r2, [r7, #24]
 801a6d0:	4613      	mov	r3, r2
 801a6d2:	009b      	lsls	r3, r3, #2
 801a6d4:	4413      	add	r3, r2
 801a6d6:	005b      	lsls	r3, r3, #1
 801a6d8:	4619      	mov	r1, r3
 801a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6dc:	1c5a      	adds	r2, r3, #1
 801a6de:	637a      	str	r2, [r7, #52]	@ 0x34
 801a6e0:	461a      	mov	r2, r3
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	4413      	add	r3, r2
 801a6e6:	781b      	ldrb	r3, [r3, #0]
 801a6e8:	3b30      	subs	r3, #48	@ 0x30
 801a6ea:	440b      	add	r3, r1
 801a6ec:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 801a6ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a6f0:	68bb      	ldr	r3, [r7, #8]
 801a6f2:	429a      	cmp	r2, r3
 801a6f4:	da0f      	bge.n	801a716 <mg_atod+0x23e>
 801a6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6f8:	68fa      	ldr	r2, [r7, #12]
 801a6fa:	4413      	add	r3, r2
 801a6fc:	781b      	ldrb	r3, [r3, #0]
 801a6fe:	2b2f      	cmp	r3, #47	@ 0x2f
 801a700:	d909      	bls.n	801a716 <mg_atod+0x23e>
 801a702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a704:	68fa      	ldr	r2, [r7, #12]
 801a706:	4413      	add	r3, r2
 801a708:	781b      	ldrb	r3, [r3, #0]
 801a70a:	2b39      	cmp	r3, #57	@ 0x39
 801a70c:	d803      	bhi.n	801a716 <mg_atod+0x23e>
 801a70e:	69bb      	ldr	r3, [r7, #24]
 801a710:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a714:	dbdb      	blt.n	801a6ce <mg_atod+0x1f6>
    if (minus) exp = -exp;
 801a716:	697b      	ldr	r3, [r7, #20]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d002      	beq.n	801a722 <mg_atod+0x24a>
 801a71c:	69bb      	ldr	r3, [r7, #24]
 801a71e:	425b      	negs	r3, r3
 801a720:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 801a722:	2300      	movs	r3, #0
 801a724:	61fb      	str	r3, [r7, #28]
 801a726:	e00d      	b.n	801a744 <mg_atod+0x26c>
 801a728:	f04f 0200 	mov.w	r2, #0
 801a72c:	4b1e      	ldr	r3, [pc, #120]	@ (801a7a8 <mg_atod+0x2d0>)
 801a72e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a732:	f7e5 ff79 	bl	8000628 <__aeabi_dmul>
 801a736:	4602      	mov	r2, r0
 801a738:	460b      	mov	r3, r1
 801a73a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801a73e:	69fb      	ldr	r3, [r7, #28]
 801a740:	3301      	adds	r3, #1
 801a742:	61fb      	str	r3, [r7, #28]
 801a744:	69fa      	ldr	r2, [r7, #28]
 801a746:	69bb      	ldr	r3, [r7, #24]
 801a748:	429a      	cmp	r2, r3
 801a74a:	dbed      	blt.n	801a728 <mg_atod+0x250>
    for (j = 0; j < -exp; j++) d /= 10.0;
 801a74c:	2300      	movs	r3, #0
 801a74e:	61fb      	str	r3, [r7, #28]
 801a750:	e00d      	b.n	801a76e <mg_atod+0x296>
 801a752:	f04f 0200 	mov.w	r2, #0
 801a756:	4b14      	ldr	r3, [pc, #80]	@ (801a7a8 <mg_atod+0x2d0>)
 801a758:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801a75c:	f7e6 f88e 	bl	800087c <__aeabi_ddiv>
 801a760:	4602      	mov	r2, r0
 801a762:	460b      	mov	r3, r1
 801a764:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 801a768:	69fb      	ldr	r3, [r7, #28]
 801a76a:	3301      	adds	r3, #1
 801a76c:	61fb      	str	r3, [r7, #28]
 801a76e:	69bb      	ldr	r3, [r7, #24]
 801a770:	425b      	negs	r3, r3
 801a772:	69fa      	ldr	r2, [r7, #28]
 801a774:	429a      	cmp	r2, r3
 801a776:	dbec      	blt.n	801a752 <mg_atod+0x27a>
  }

  if (numlen != NULL) *numlen = i;
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d002      	beq.n	801a784 <mg_atod+0x2ac>
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a782:	601a      	str	r2, [r3, #0]
  return d;
 801a784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801a788:	ec43 2b17 	vmov	d7, r2, r3
}
 801a78c:	eeb0 0a47 	vmov.f32	s0, s14
 801a790:	eef0 0a67 	vmov.f32	s1, s15
 801a794:	3740      	adds	r7, #64	@ 0x40
 801a796:	46bd      	mov	sp, r7
 801a798:	bd80      	pop	{r7, pc}
 801a79a:	bf00      	nop
 801a79c:	f3af 8000 	nop.w
 801a7a0:	9999999a 	.word	0x9999999a
 801a7a4:	3fb99999 	.word	0x3fb99999
 801a7a8:	40240000 	.word	0x40240000

0801a7ac <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 801a7ac:	b590      	push	{r4, r7, lr}
 801a7ae:	b09b      	sub	sp, #108	@ 0x6c
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	f107 0408 	add.w	r4, r7, #8
 801a7b6:	e884 0003 	stmia.w	r4, {r0, r1}
 801a7ba:	607a      	str	r2, [r7, #4]
 801a7bc:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 801a7c6:	2300      	movs	r3, #0
 801a7c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 801a7d8:	2300      	movs	r3, #0
 801a7da:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 801a7dc:	2301      	movs	r3, #1
 801a7de:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 801a7e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a7e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a7e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a7ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d002      	beq.n	801a7f8 <mg_json_get+0x4c>
 801a7f2:	683b      	ldr	r3, [r7, #0]
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	781b      	ldrb	r3, [r3, #0]
 801a7fc:	2b24      	cmp	r3, #36	@ 0x24
 801a7fe:	d002      	beq.n	801a806 <mg_json_get+0x5a>
 801a800:	f06f 0301 	mvn.w	r3, #1
 801a804:	e308      	b.n	801ae18 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 801a806:	2300      	movs	r3, #0
 801a808:	663b      	str	r3, [r7, #96]	@ 0x60
 801a80a:	e2fe      	b.n	801ae0a <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 801a80c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a80e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a810:	4413      	add	r3, r2
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 801a818:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a81c:	2b20      	cmp	r3, #32
 801a81e:	f000 82ee 	beq.w	801adfe <mg_json_get+0x652>
 801a822:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a826:	2b09      	cmp	r3, #9
 801a828:	f000 82e9 	beq.w	801adfe <mg_json_get+0x652>
 801a82c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a830:	2b0a      	cmp	r3, #10
 801a832:	f000 82e4 	beq.w	801adfe <mg_json_get+0x652>
 801a836:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a83a:	2b0d      	cmp	r3, #13
 801a83c:	f000 82df 	beq.w	801adfe <mg_json_get+0x652>
    switch (expecting) {
 801a840:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801a844:	2b03      	cmp	r3, #3
 801a846:	f200 82dd 	bhi.w	801ae04 <mg_json_get+0x658>
 801a84a:	a201      	add	r2, pc, #4	@ (adr r2, 801a850 <mg_json_get+0xa4>)
 801a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a850:	0801a861 	.word	0x0801a861
 801a854:	0801ab49 	.word	0x0801ab49
 801a858:	0801acd7 	.word	0x0801acd7
 801a85c:	0801aced 	.word	0x0801aced
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 801a860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a864:	429a      	cmp	r2, r3
 801a866:	d101      	bne.n	801a86c <mg_json_get+0xc0>
 801a868:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a86a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 801a86c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a870:	2b7b      	cmp	r3, #123	@ 0x7b
 801a872:	d12b      	bne.n	801a8cc <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 801a874:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a876:	2b1d      	cmp	r3, #29
 801a878:	dd02      	ble.n	801a880 <mg_json_get+0xd4>
 801a87a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a87e:	e2cb      	b.n	801ae18 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 801a880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a884:	429a      	cmp	r2, r3
 801a886:	d114      	bne.n	801a8b2 <mg_json_get+0x106>
 801a888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a88a:	687a      	ldr	r2, [r7, #4]
 801a88c:	4413      	add	r3, r2
 801a88e:	781b      	ldrb	r3, [r3, #0]
 801a890:	2b2e      	cmp	r3, #46	@ 0x2e
 801a892:	d10e      	bne.n	801a8b2 <mg_json_get+0x106>
 801a894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a898:	429a      	cmp	r2, r3
 801a89a:	d10a      	bne.n	801a8b2 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 801a89c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a89e:	3301      	adds	r3, #1
 801a8a0:	657b      	str	r3, [r7, #84]	@ 0x54
 801a8a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a8a4:	3301      	adds	r3, #1
 801a8a6:	653b      	str	r3, [r7, #80]	@ 0x50
 801a8a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a8ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a8ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a8b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 801a8b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a8b4:	1c5a      	adds	r2, r3, #1
 801a8b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 801a8b8:	3368      	adds	r3, #104	@ 0x68
 801a8ba:	443b      	add	r3, r7
 801a8bc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a8c0:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 801a8c4:	2301      	movs	r3, #1
 801a8c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 801a8ca:	e29b      	b.n	801ae04 <mg_json_get+0x658>
        } else if (c == '[') {
 801a8cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a8d0:	2b5b      	cmp	r3, #91	@ 0x5b
 801a8d2:	d14e      	bne.n	801a972 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 801a8d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a8d6:	2b1d      	cmp	r3, #29
 801a8d8:	dd02      	ble.n	801a8e0 <mg_json_get+0x134>
 801a8da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a8de:	e29b      	b.n	801ae18 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 801a8e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8e4:	429a      	cmp	r2, r3
 801a8e6:	d13a      	bne.n	801a95e <mg_json_get+0x1b2>
 801a8e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a8ea:	687a      	ldr	r2, [r7, #4]
 801a8ec:	4413      	add	r3, r2
 801a8ee:	781b      	ldrb	r3, [r3, #0]
 801a8f0:	2b5b      	cmp	r3, #91	@ 0x5b
 801a8f2:	d134      	bne.n	801a95e <mg_json_get+0x1b2>
 801a8f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d130      	bne.n	801a95e <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 801a8fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8fe:	3301      	adds	r3, #1
 801a900:	657b      	str	r3, [r7, #84]	@ 0x54
 801a902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a904:	3301      	adds	r3, #1
 801a906:	653b      	str	r3, [r7, #80]	@ 0x50
 801a908:	2300      	movs	r3, #0
 801a90a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801a90c:	2300      	movs	r3, #0
 801a90e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a910:	e010      	b.n	801a934 <mg_json_get+0x188>
              ei *= 10;
 801a912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a914:	4613      	mov	r3, r2
 801a916:	009b      	lsls	r3, r3, #2
 801a918:	4413      	add	r3, r2
 801a91a:	005b      	lsls	r3, r3, #1
 801a91c:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 801a91e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a920:	687a      	ldr	r2, [r7, #4]
 801a922:	4413      	add	r3, r2
 801a924:	781b      	ldrb	r3, [r3, #0]
 801a926:	3b30      	subs	r3, #48	@ 0x30
 801a928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a92a:	4413      	add	r3, r2
 801a92c:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 801a92e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a930:	3301      	adds	r3, #1
 801a932:	653b      	str	r3, [r7, #80]	@ 0x50
 801a934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a936:	687a      	ldr	r2, [r7, #4]
 801a938:	4413      	add	r3, r2
 801a93a:	781b      	ldrb	r3, [r3, #0]
 801a93c:	2b5d      	cmp	r3, #93	@ 0x5d
 801a93e:	d005      	beq.n	801a94c <mg_json_get+0x1a0>
 801a940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a942:	687a      	ldr	r2, [r7, #4]
 801a944:	4413      	add	r3, r2
 801a946:	781b      	ldrb	r3, [r3, #0]
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d1e2      	bne.n	801a912 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 801a94c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a94e:	687a      	ldr	r2, [r7, #4]
 801a950:	4413      	add	r3, r2
 801a952:	781b      	ldrb	r3, [r3, #0]
 801a954:	2b00      	cmp	r3, #0
 801a956:	d002      	beq.n	801a95e <mg_json_get+0x1b2>
 801a958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a95a:	3301      	adds	r3, #1
 801a95c:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 801a95e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a960:	1c5a      	adds	r2, r3, #1
 801a962:	65ba      	str	r2, [r7, #88]	@ 0x58
 801a964:	3368      	adds	r3, #104	@ 0x68
 801a966:	443b      	add	r3, r7
 801a968:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a96c:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 801a970:	e248      	b.n	801ae04 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 801a972:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a976:	2b5d      	cmp	r3, #93	@ 0x5d
 801a978:	d13a      	bne.n	801a9f0 <mg_json_get+0x244>
 801a97a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	dd37      	ble.n	801a9f0 <mg_json_get+0x244>
          MG_EOO(']');
 801a980:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a984:	429a      	cmp	r2, r3
 801a986:	d106      	bne.n	801a996 <mg_json_get+0x1ea>
 801a988:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a98a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a98c:	429a      	cmp	r2, r3
 801a98e:	d002      	beq.n	801a996 <mg_json_get+0x1ea>
 801a990:	f06f 0302 	mvn.w	r3, #2
 801a994:	e240      	b.n	801ae18 <mg_json_get+0x66c>
 801a996:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801a99a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a99c:	3b01      	subs	r3, #1
 801a99e:	3368      	adds	r3, #104	@ 0x68
 801a9a0:	443b      	add	r3, r7
 801a9a2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801a9a6:	3302      	adds	r3, #2
 801a9a8:	429a      	cmp	r2, r3
 801a9aa:	d002      	beq.n	801a9b2 <mg_json_get+0x206>
 801a9ac:	f06f 0301 	mvn.w	r3, #1
 801a9b0:	e232      	b.n	801ae18 <mg_json_get+0x66c>
 801a9b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a9b4:	3b01      	subs	r3, #1
 801a9b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a9b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a9ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a9bc:	429a      	cmp	r2, r3
 801a9be:	f040 809c 	bne.w	801aafa <mg_json_get+0x34e>
 801a9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a9c4:	687a      	ldr	r2, [r7, #4]
 801a9c6:	4413      	add	r3, r2
 801a9c8:	781b      	ldrb	r3, [r3, #0]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	f040 8095 	bne.w	801aafa <mg_json_get+0x34e>
 801a9d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a9d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a9d4:	429a      	cmp	r2, r3
 801a9d6:	f040 8090 	bne.w	801aafa <mg_json_get+0x34e>
 801a9da:	683b      	ldr	r3, [r7, #0]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d005      	beq.n	801a9ec <mg_json_get+0x240>
 801a9e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a9e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a9e4:	1ad3      	subs	r3, r2, r3
 801a9e6:	1c5a      	adds	r2, r3, #1
 801a9e8:	683b      	ldr	r3, [r7, #0]
 801a9ea:	601a      	str	r2, [r3, #0]
 801a9ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a9ee:	e213      	b.n	801ae18 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 801a9f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a9f4:	2b74      	cmp	r3, #116	@ 0x74
 801a9f6:	d113      	bne.n	801aa20 <mg_json_get+0x274>
 801a9f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a9fa:	3303      	adds	r3, #3
 801a9fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a9fe:	429a      	cmp	r2, r3
 801aa00:	dd0e      	ble.n	801aa20 <mg_json_get+0x274>
 801aa02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa06:	4413      	add	r3, r2
 801aa08:	2204      	movs	r2, #4
 801aa0a:	4998      	ldr	r1, [pc, #608]	@ (801ac6c <mg_json_get+0x4c0>)
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	f00b f90b 	bl	8025c28 <memcmp>
 801aa12:	4603      	mov	r3, r0
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d103      	bne.n	801aa20 <mg_json_get+0x274>
          i += 3;
 801aa18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa1a:	3303      	adds	r3, #3
 801aa1c:	663b      	str	r3, [r7, #96]	@ 0x60
 801aa1e:	e06c      	b.n	801aafa <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 801aa20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa24:	2b6e      	cmp	r3, #110	@ 0x6e
 801aa26:	d113      	bne.n	801aa50 <mg_json_get+0x2a4>
 801aa28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa2a:	3303      	adds	r3, #3
 801aa2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aa2e:	429a      	cmp	r2, r3
 801aa30:	dd0e      	ble.n	801aa50 <mg_json_get+0x2a4>
 801aa32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa36:	4413      	add	r3, r2
 801aa38:	2204      	movs	r2, #4
 801aa3a:	498d      	ldr	r1, [pc, #564]	@ (801ac70 <mg_json_get+0x4c4>)
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	f00b f8f3 	bl	8025c28 <memcmp>
 801aa42:	4603      	mov	r3, r0
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d103      	bne.n	801aa50 <mg_json_get+0x2a4>
          i += 3;
 801aa48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa4a:	3303      	adds	r3, #3
 801aa4c:	663b      	str	r3, [r7, #96]	@ 0x60
 801aa4e:	e054      	b.n	801aafa <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 801aa50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa54:	2b66      	cmp	r3, #102	@ 0x66
 801aa56:	d113      	bne.n	801aa80 <mg_json_get+0x2d4>
 801aa58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa5a:	3304      	adds	r3, #4
 801aa5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aa5e:	429a      	cmp	r2, r3
 801aa60:	dd0e      	ble.n	801aa80 <mg_json_get+0x2d4>
 801aa62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa66:	4413      	add	r3, r2
 801aa68:	2205      	movs	r2, #5
 801aa6a:	4982      	ldr	r1, [pc, #520]	@ (801ac74 <mg_json_get+0x4c8>)
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	f00b f8db 	bl	8025c28 <memcmp>
 801aa72:	4603      	mov	r3, r0
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d103      	bne.n	801aa80 <mg_json_get+0x2d4>
          i += 4;
 801aa78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa7a:	3304      	adds	r3, #4
 801aa7c:	663b      	str	r3, [r7, #96]	@ 0x60
 801aa7e:	e03c      	b.n	801aafa <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 801aa80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa84:	2b2d      	cmp	r3, #45	@ 0x2d
 801aa86:	d007      	beq.n	801aa98 <mg_json_get+0x2ec>
 801aa88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa8c:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa8e:	d916      	bls.n	801aabe <mg_json_get+0x312>
 801aa90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aa94:	2b39      	cmp	r3, #57	@ 0x39
 801aa96:	d812      	bhi.n	801aabe <mg_json_get+0x312>
          int numlen = 0;
 801aa98:	2300      	movs	r3, #0
 801aa9a:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 801aa9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aaa0:	18d0      	adds	r0, r2, r3
 801aaa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aaa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aaa6:	1ad3      	subs	r3, r2, r3
 801aaa8:	f107 0210 	add.w	r2, r7, #16
 801aaac:	4619      	mov	r1, r3
 801aaae:	f7ff fd13 	bl	801a4d8 <mg_atod>
          i += numlen - 1;
 801aab2:	693b      	ldr	r3, [r7, #16]
 801aab4:	3b01      	subs	r3, #1
 801aab6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801aab8:	4413      	add	r3, r2
 801aaba:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 801aabc:	e01d      	b.n	801aafa <mg_json_get+0x34e>
        } else if (c == '"') {
 801aabe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801aac2:	2b22      	cmp	r3, #34	@ 0x22
 801aac4:	d116      	bne.n	801aaf4 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 801aac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aac8:	3301      	adds	r3, #1
 801aaca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aacc:	18d0      	adds	r0, r2, r3
 801aace:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aad2:	1ad3      	subs	r3, r2, r3
 801aad4:	3b01      	subs	r3, #1
 801aad6:	4619      	mov	r1, r3
 801aad8:	f7ff fcba 	bl	801a450 <mg_pass_string>
 801aadc:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 801aade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	da01      	bge.n	801aae8 <mg_json_get+0x33c>
 801aae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aae6:	e197      	b.n	801ae18 <mg_json_get+0x66c>
          i += n + 1;
 801aae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aaea:	3301      	adds	r3, #1
 801aaec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801aaee:	4413      	add	r3, r2
 801aaf0:	663b      	str	r3, [r7, #96]	@ 0x60
 801aaf2:	e002      	b.n	801aafa <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 801aaf4:	f06f 0301 	mvn.w	r3, #1
 801aaf8:	e18e      	b.n	801ae18 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 801aafa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aafc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aafe:	429a      	cmp	r2, r3
 801ab00:	d114      	bne.n	801ab2c <mg_json_get+0x380>
 801ab02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab04:	687a      	ldr	r2, [r7, #4]
 801ab06:	4413      	add	r3, r2
 801ab08:	781b      	ldrb	r3, [r3, #0]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d10e      	bne.n	801ab2c <mg_json_get+0x380>
 801ab0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ab10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab12:	429a      	cmp	r2, r3
 801ab14:	d10a      	bne.n	801ab2c <mg_json_get+0x380>
 801ab16:	683b      	ldr	r3, [r7, #0]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d005      	beq.n	801ab28 <mg_json_get+0x37c>
 801ab1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801ab1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ab20:	1ad3      	subs	r3, r2, r3
 801ab22:	1c5a      	adds	r2, r3, #1
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	601a      	str	r2, [r3, #0]
 801ab28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ab2a:	e175      	b.n	801ae18 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 801ab2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ab2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab30:	429a      	cmp	r2, r3
 801ab32:	d105      	bne.n	801ab40 <mg_json_get+0x394>
 801ab34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	db02      	blt.n	801ab40 <mg_json_get+0x394>
 801ab3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ab3c:	3301      	adds	r3, #1
 801ab3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 801ab40:	2303      	movs	r3, #3
 801ab42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 801ab46:	e15d      	b.n	801ae04 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 801ab48:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801ab4c:	2b22      	cmp	r3, #34	@ 0x22
 801ab4e:	d170      	bne.n	801ac32 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 801ab50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ab52:	3301      	adds	r3, #1
 801ab54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ab56:	18d0      	adds	r0, r2, r3
 801ab58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ab5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ab5c:	1ad3      	subs	r3, r2, r3
 801ab5e:	3b01      	subs	r3, #1
 801ab60:	4619      	mov	r1, r3
 801ab62:	f7ff fc75 	bl	801a450 <mg_pass_string>
 801ab66:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 801ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	da01      	bge.n	801ab72 <mg_json_get+0x3c6>
 801ab6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab70:	e152      	b.n	801ae18 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 801ab72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ab74:	1c5a      	adds	r2, r3, #1
 801ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab78:	4413      	add	r3, r2
 801ab7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ab7c:	429a      	cmp	r2, r3
 801ab7e:	dc02      	bgt.n	801ab86 <mg_json_get+0x3da>
 801ab80:	f06f 0302 	mvn.w	r3, #2
 801ab84:	e148      	b.n	801ae18 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 801ab86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ab88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab8a:	429a      	cmp	r2, r3
 801ab8c:	da02      	bge.n	801ab94 <mg_json_get+0x3e8>
 801ab8e:	f06f 0302 	mvn.w	r3, #2
 801ab92:	e141      	b.n	801ae18 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 801ab94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ab96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab98:	429a      	cmp	r2, r3
 801ab9a:	d109      	bne.n	801abb0 <mg_json_get+0x404>
 801ab9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ab9e:	3b01      	subs	r3, #1
 801aba0:	687a      	ldr	r2, [r7, #4]
 801aba2:	4413      	add	r3, r2
 801aba4:	781b      	ldrb	r3, [r3, #0]
 801aba6:	2b2e      	cmp	r3, #46	@ 0x2e
 801aba8:	d002      	beq.n	801abb0 <mg_json_get+0x404>
 801abaa:	f06f 0302 	mvn.w	r3, #2
 801abae:	e133      	b.n	801ae18 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 801abb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801abb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801abb4:	429a      	cmp	r2, r3
 801abb6:	d133      	bne.n	801ac20 <mg_json_get+0x474>
 801abb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801abba:	3b01      	subs	r3, #1
 801abbc:	687a      	ldr	r2, [r7, #4]
 801abbe:	4413      	add	r3, r2
 801abc0:	781b      	ldrb	r3, [r3, #0]
 801abc2:	2b2e      	cmp	r3, #46	@ 0x2e
 801abc4:	d12c      	bne.n	801ac20 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 801abc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801abc8:	3301      	adds	r3, #1
 801abca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801abcc:	18d0      	adds	r0, r2, r3
 801abce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801abd0:	687a      	ldr	r2, [r7, #4]
 801abd2:	4413      	add	r3, r2
 801abd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801abd6:	4619      	mov	r1, r3
 801abd8:	f00b f8ef 	bl	8025dba <strncmp>
 801abdc:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d11e      	bne.n	801ac20 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801abe2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801abe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abe6:	4413      	add	r3, r2
 801abe8:	461a      	mov	r2, r3
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	4413      	add	r3, r2
 801abee:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d011      	beq.n	801ac18 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801abf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801abf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abf8:	4413      	add	r3, r2
 801abfa:	461a      	mov	r2, r3
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	4413      	add	r3, r2
 801ac00:	781b      	ldrb	r3, [r3, #0]
 801ac02:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac04:	d008      	beq.n	801ac18 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 801ac06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ac08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac0a:	4413      	add	r3, r2
 801ac0c:	461a      	mov	r2, r3
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	4413      	add	r3, r2
 801ac12:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 801ac14:	2b5b      	cmp	r3, #91	@ 0x5b
 801ac16:	d103      	bne.n	801ac20 <mg_json_get+0x474>
            pos += n;
 801ac18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ac1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac1c:	4413      	add	r3, r2
 801ac1e:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 801ac20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac22:	3301      	adds	r3, #1
 801ac24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801ac26:	4413      	add	r3, r2
 801ac28:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 801ac2a:	2302      	movs	r3, #2
 801ac2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801ac30:	e0e7      	b.n	801ae02 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 801ac32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801ac36:	2b7d      	cmp	r3, #125	@ 0x7d
 801ac38:	d14a      	bne.n	801acd0 <mg_json_get+0x524>
          MG_EOO('}');
 801ac3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ac3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ac3e:	429a      	cmp	r2, r3
 801ac40:	d106      	bne.n	801ac50 <mg_json_get+0x4a4>
 801ac42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ac44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ac46:	429a      	cmp	r2, r3
 801ac48:	d002      	beq.n	801ac50 <mg_json_get+0x4a4>
 801ac4a:	f06f 0302 	mvn.w	r3, #2
 801ac4e:	e0e3      	b.n	801ae18 <mg_json_get+0x66c>
 801ac50:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801ac54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ac56:	3b01      	subs	r3, #1
 801ac58:	3368      	adds	r3, #104	@ 0x68
 801ac5a:	443b      	add	r3, r7
 801ac5c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801ac60:	3302      	adds	r3, #2
 801ac62:	429a      	cmp	r2, r3
 801ac64:	d008      	beq.n	801ac78 <mg_json_get+0x4cc>
 801ac66:	f06f 0301 	mvn.w	r3, #1
 801ac6a:	e0d5      	b.n	801ae18 <mg_json_get+0x66c>
 801ac6c:	080328dc 	.word	0x080328dc
 801ac70:	080328e4 	.word	0x080328e4
 801ac74:	080328ec 	.word	0x080328ec
 801ac78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ac7a:	3b01      	subs	r3, #1
 801ac7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ac7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ac80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ac82:	429a      	cmp	r2, r3
 801ac84:	d114      	bne.n	801acb0 <mg_json_get+0x504>
 801ac86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac88:	687a      	ldr	r2, [r7, #4]
 801ac8a:	4413      	add	r3, r2
 801ac8c:	781b      	ldrb	r3, [r3, #0]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d10e      	bne.n	801acb0 <mg_json_get+0x504>
 801ac92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ac94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ac96:	429a      	cmp	r2, r3
 801ac98:	d10a      	bne.n	801acb0 <mg_json_get+0x504>
 801ac9a:	683b      	ldr	r3, [r7, #0]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	d005      	beq.n	801acac <mg_json_get+0x500>
 801aca0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801aca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801aca4:	1ad3      	subs	r3, r2, r3
 801aca6:	1c5a      	adds	r2, r3, #1
 801aca8:	683b      	ldr	r3, [r7, #0]
 801acaa:	601a      	str	r2, [r3, #0]
 801acac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801acae:	e0b3      	b.n	801ae18 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 801acb0:	2303      	movs	r3, #3
 801acb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 801acb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801acb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801acba:	429a      	cmp	r2, r3
 801acbc:	f040 80a1 	bne.w	801ae02 <mg_json_get+0x656>
 801acc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	f2c0 809d 	blt.w	801ae02 <mg_json_get+0x656>
 801acc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801acca:	3301      	adds	r3, #1
 801accc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 801acce:	e098      	b.n	801ae02 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 801acd0:	f06f 0301 	mvn.w	r3, #1
 801acd4:	e0a0      	b.n	801ae18 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 801acd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801acda:	2b3a      	cmp	r3, #58	@ 0x3a
 801acdc:	d103      	bne.n	801ace6 <mg_json_get+0x53a>
          expecting = S_VALUE;
 801acde:	2300      	movs	r3, #0
 801ace0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801ace4:	e08e      	b.n	801ae04 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 801ace6:	f06f 0301 	mvn.w	r3, #1
 801acea:	e095      	b.n	801ae18 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 801acec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801acee:	2b00      	cmp	r3, #0
 801acf0:	dc02      	bgt.n	801acf8 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 801acf2:	f06f 0301 	mvn.w	r3, #1
 801acf6:	e08f      	b.n	801ae18 <mg_json_get+0x66c>
        } else if (c == ',') {
 801acf8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801acfc:	2b2c      	cmp	r3, #44	@ 0x2c
 801acfe:	d10d      	bne.n	801ad1c <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 801ad00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ad02:	3b01      	subs	r3, #1
 801ad04:	3368      	adds	r3, #104	@ 0x68
 801ad06:	443b      	add	r3, r7
 801ad08:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801ad0c:	2b7b      	cmp	r3, #123	@ 0x7b
 801ad0e:	bf0c      	ite	eq
 801ad10:	2301      	moveq	r3, #1
 801ad12:	2300      	movne	r3, #0
 801ad14:	b2db      	uxtb	r3, r3
 801ad16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 801ad1a:	e073      	b.n	801ae04 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 801ad1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801ad20:	2b5d      	cmp	r3, #93	@ 0x5d
 801ad22:	d003      	beq.n	801ad2c <mg_json_get+0x580>
 801ad24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801ad28:	2b7d      	cmp	r3, #125	@ 0x7d
 801ad2a:	d163      	bne.n	801adf4 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 801ad2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ad2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad30:	429a      	cmp	r2, r3
 801ad32:	d10d      	bne.n	801ad50 <mg_json_get+0x5a4>
 801ad34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801ad38:	2b7d      	cmp	r3, #125	@ 0x7d
 801ad3a:	d109      	bne.n	801ad50 <mg_json_get+0x5a4>
 801ad3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad3e:	3b01      	subs	r3, #1
 801ad40:	687a      	ldr	r2, [r7, #4]
 801ad42:	4413      	add	r3, r2
 801ad44:	781b      	ldrb	r3, [r3, #0]
 801ad46:	2b2e      	cmp	r3, #46	@ 0x2e
 801ad48:	d102      	bne.n	801ad50 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 801ad4a:	f06f 0302 	mvn.w	r3, #2
 801ad4e:	e063      	b.n	801ae18 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 801ad50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ad52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad54:	429a      	cmp	r2, r3
 801ad56:	d10d      	bne.n	801ad74 <mg_json_get+0x5c8>
 801ad58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801ad5c:	2b5d      	cmp	r3, #93	@ 0x5d
 801ad5e:	d109      	bne.n	801ad74 <mg_json_get+0x5c8>
 801ad60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad62:	3b01      	subs	r3, #1
 801ad64:	687a      	ldr	r2, [r7, #4]
 801ad66:	4413      	add	r3, r2
 801ad68:	781b      	ldrb	r3, [r3, #0]
 801ad6a:	2b2c      	cmp	r3, #44	@ 0x2c
 801ad6c:	d102      	bne.n	801ad74 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 801ad6e:	f06f 0302 	mvn.w	r3, #2
 801ad72:	e051      	b.n	801ae18 <mg_json_get+0x66c>
          MG_EOO('O');
 801ad74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ad76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad78:	429a      	cmp	r2, r3
 801ad7a:	d106      	bne.n	801ad8a <mg_json_get+0x5de>
 801ad7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ad7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ad80:	429a      	cmp	r2, r3
 801ad82:	d002      	beq.n	801ad8a <mg_json_get+0x5de>
 801ad84:	f06f 0302 	mvn.w	r3, #2
 801ad88:	e046      	b.n	801ae18 <mg_json_get+0x66c>
 801ad8a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 801ad8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ad90:	3b01      	subs	r3, #1
 801ad92:	3368      	adds	r3, #104	@ 0x68
 801ad94:	443b      	add	r3, r7
 801ad96:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 801ad9a:	3302      	adds	r3, #2
 801ad9c:	429a      	cmp	r2, r3
 801ad9e:	d002      	beq.n	801ada6 <mg_json_get+0x5fa>
 801ada0:	f06f 0301 	mvn.w	r3, #1
 801ada4:	e038      	b.n	801ae18 <mg_json_get+0x66c>
 801ada6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ada8:	3b01      	subs	r3, #1
 801adaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 801adac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801adae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801adb0:	429a      	cmp	r2, r3
 801adb2:	d114      	bne.n	801adde <mg_json_get+0x632>
 801adb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801adb6:	687a      	ldr	r2, [r7, #4]
 801adb8:	4413      	add	r3, r2
 801adba:	781b      	ldrb	r3, [r3, #0]
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d10e      	bne.n	801adde <mg_json_get+0x632>
 801adc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801adc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801adc4:	429a      	cmp	r2, r3
 801adc6:	d10a      	bne.n	801adde <mg_json_get+0x632>
 801adc8:	683b      	ldr	r3, [r7, #0]
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d005      	beq.n	801adda <mg_json_get+0x62e>
 801adce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801add0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801add2:	1ad3      	subs	r3, r2, r3
 801add4:	1c5a      	adds	r2, r3, #1
 801add6:	683b      	ldr	r3, [r7, #0]
 801add8:	601a      	str	r2, [r3, #0]
 801adda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801addc:	e01c      	b.n	801ae18 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801adde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ade0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ade2:	429a      	cmp	r2, r3
 801ade4:	d109      	bne.n	801adfa <mg_json_get+0x64e>
 801ade6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ade8:	2b00      	cmp	r3, #0
 801adea:	db06      	blt.n	801adfa <mg_json_get+0x64e>
 801adec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801adee:	3301      	adds	r3, #1
 801adf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801adf2:	e002      	b.n	801adfa <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 801adf4:	f06f 0301 	mvn.w	r3, #1
 801adf8:	e00e      	b.n	801ae18 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 801adfa:	bf00      	nop
        break;
 801adfc:	e002      	b.n	801ae04 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 801adfe:	bf00      	nop
 801ae00:	e000      	b.n	801ae04 <mg_json_get+0x658>
        break;
 801ae02:	bf00      	nop
  for (i = 0; i < len; i++) {
 801ae04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ae06:	3301      	adds	r3, #1
 801ae08:	663b      	str	r3, [r7, #96]	@ 0x60
 801ae0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801ae0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ae0e:	429a      	cmp	r2, r3
 801ae10:	f6ff acfc 	blt.w	801a80c <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 801ae14:	f06f 0302 	mvn.w	r3, #2
}
 801ae18:	4618      	mov	r0, r3
 801ae1a:	376c      	adds	r7, #108	@ 0x6c
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd90      	pop	{r4, r7, pc}

0801ae20 <mg_json_get_num>:
  int len = 0, ofs = mg_json_get(json, path, &len);
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
                  (size_t) (len < 0 ? 0 : len));
}

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 801ae20:	b590      	push	{r4, r7, lr}
 801ae22:	b089      	sub	sp, #36	@ 0x24
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	f107 0408 	add.w	r4, r7, #8
 801ae2a:	e884 0003 	stmia.w	r4, {r0, r1}
 801ae2e:	607a      	str	r2, [r7, #4]
 801ae30:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 801ae32:	2300      	movs	r3, #0
 801ae34:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 801ae36:	f107 0314 	add.w	r3, r7, #20
 801ae3a:	687a      	ldr	r2, [r7, #4]
 801ae3c:	f107 0108 	add.w	r1, r7, #8
 801ae40:	c903      	ldmia	r1, {r0, r1}
 801ae42:	f7ff fcb3 	bl	801a7ac <mg_json_get>
 801ae46:	61b8      	str	r0, [r7, #24]
 801ae48:	69bb      	ldr	r3, [r7, #24]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	db25      	blt.n	801ae9a <mg_json_get_num+0x7a>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801ae4e:	68ba      	ldr	r2, [r7, #8]
 801ae50:	69bb      	ldr	r3, [r7, #24]
 801ae52:	4413      	add	r3, r2
 801ae54:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 801ae56:	2b2d      	cmp	r3, #45	@ 0x2d
 801ae58:	d00b      	beq.n	801ae72 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 801ae5a:	68ba      	ldr	r2, [r7, #8]
 801ae5c:	69bb      	ldr	r3, [r7, #24]
 801ae5e:	4413      	add	r3, r2
 801ae60:	781b      	ldrb	r3, [r3, #0]
 801ae62:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae64:	d919      	bls.n	801ae9a <mg_json_get_num+0x7a>
 801ae66:	68ba      	ldr	r2, [r7, #8]
 801ae68:	69bb      	ldr	r3, [r7, #24]
 801ae6a:	4413      	add	r3, r2
 801ae6c:	781b      	ldrb	r3, [r3, #0]
 801ae6e:	2b39      	cmp	r3, #57	@ 0x39
 801ae70:	d813      	bhi.n	801ae9a <mg_json_get_num+0x7a>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 801ae72:	683b      	ldr	r3, [r7, #0]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d00e      	beq.n	801ae96 <mg_json_get_num+0x76>
 801ae78:	68ba      	ldr	r2, [r7, #8]
 801ae7a:	69bb      	ldr	r3, [r7, #24]
 801ae7c:	4413      	add	r3, r2
 801ae7e:	6979      	ldr	r1, [r7, #20]
 801ae80:	2200      	movs	r2, #0
 801ae82:	4618      	mov	r0, r3
 801ae84:	f7ff fb28 	bl	801a4d8 <mg_atod>
 801ae88:	eeb0 7a40 	vmov.f32	s14, s0
 801ae8c:	eef0 7a60 	vmov.f32	s15, s1
 801ae90:	683b      	ldr	r3, [r7, #0]
 801ae92:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 801ae96:	2301      	movs	r3, #1
 801ae98:	61fb      	str	r3, [r7, #28]
  }
  return found;
 801ae9a:	69fb      	ldr	r3, [r7, #28]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	bf14      	ite	ne
 801aea0:	2301      	movne	r3, #1
 801aea2:	2300      	moveq	r3, #0
 801aea4:	b2db      	uxtb	r3, r3
}
 801aea6:	4618      	mov	r0, r3
 801aea8:	3724      	adds	r7, #36	@ 0x24
 801aeaa:	46bd      	mov	sp, r7
 801aeac:	bd90      	pop	{r4, r7, pc}

0801aeae <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 801aeae:	b590      	push	{r4, r7, lr}
 801aeb0:	b087      	sub	sp, #28
 801aeb2:	af00      	add	r7, sp, #0
 801aeb4:	f107 0408 	add.w	r4, r7, #8
 801aeb8:	e884 0003 	stmia.w	r4, {r0, r1}
 801aebc:	607a      	str	r2, [r7, #4]
 801aebe:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 801aec0:	2300      	movs	r3, #0
 801aec2:	617b      	str	r3, [r7, #20]
 801aec4:	2300      	movs	r3, #0
 801aec6:	687a      	ldr	r2, [r7, #4]
 801aec8:	f107 0108 	add.w	r1, r7, #8
 801aecc:	c903      	ldmia	r1, {r0, r1}
 801aece:	f7ff fc6d 	bl	801a7ac <mg_json_get>
 801aed2:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 801aed4:	693b      	ldr	r3, [r7, #16]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	db1b      	blt.n	801af12 <mg_json_get_bool+0x64>
 801aeda:	68ba      	ldr	r2, [r7, #8]
 801aedc:	693b      	ldr	r3, [r7, #16]
 801aede:	4413      	add	r3, r2
 801aee0:	781b      	ldrb	r3, [r3, #0]
 801aee2:	2b74      	cmp	r3, #116	@ 0x74
 801aee4:	d005      	beq.n	801aef2 <mg_json_get_bool+0x44>
 801aee6:	68ba      	ldr	r2, [r7, #8]
 801aee8:	693b      	ldr	r3, [r7, #16]
 801aeea:	4413      	add	r3, r2
 801aeec:	781b      	ldrb	r3, [r3, #0]
 801aeee:	2b66      	cmp	r3, #102	@ 0x66
 801aef0:	d10f      	bne.n	801af12 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 801aef2:	683b      	ldr	r3, [r7, #0]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d00a      	beq.n	801af0e <mg_json_get_bool+0x60>
 801aef8:	68ba      	ldr	r2, [r7, #8]
 801aefa:	693b      	ldr	r3, [r7, #16]
 801aefc:	4413      	add	r3, r2
 801aefe:	781b      	ldrb	r3, [r3, #0]
 801af00:	2b74      	cmp	r3, #116	@ 0x74
 801af02:	bf0c      	ite	eq
 801af04:	2301      	moveq	r3, #1
 801af06:	2300      	movne	r3, #0
 801af08:	b2da      	uxtb	r2, r3
 801af0a:	683b      	ldr	r3, [r7, #0]
 801af0c:	701a      	strb	r2, [r3, #0]
    found = 1;
 801af0e:	2301      	movs	r3, #1
 801af10:	617b      	str	r3, [r7, #20]
  }
  return found;
 801af12:	697b      	ldr	r3, [r7, #20]
 801af14:	2b00      	cmp	r3, #0
 801af16:	bf14      	ite	ne
 801af18:	2301      	movne	r3, #1
 801af1a:	2300      	moveq	r3, #0
 801af1c:	b2db      	uxtb	r3, r3
}
 801af1e:	4618      	mov	r0, r3
 801af20:	371c      	adds	r7, #28
 801af22:	46bd      	mov	sp, r7
 801af24:	bd90      	pop	{r4, r7, pc}

0801af26 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 801af26:	b590      	push	{r4, r7, lr}
 801af28:	b08d      	sub	sp, #52	@ 0x34
 801af2a:	af02      	add	r7, sp, #8
 801af2c:	f107 0408 	add.w	r4, r7, #8
 801af30:	e884 0003 	stmia.w	r4, {r0, r1}
 801af34:	607a      	str	r2, [r7, #4]
 801af36:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 801af38:	2300      	movs	r3, #0
 801af3a:	627b      	str	r3, [r7, #36]	@ 0x24
 801af3c:	2300      	movs	r3, #0
 801af3e:	623b      	str	r3, [r7, #32]
 801af40:	e064      	b.n	801b00c <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 801af42:	68ba      	ldr	r2, [r7, #8]
 801af44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af46:	4413      	add	r3, r2
 801af48:	781b      	ldrb	r3, [r3, #0]
 801af4a:	2b5c      	cmp	r3, #92	@ 0x5c
 801af4c:	d12c      	bne.n	801afa8 <mg_json_unescape+0x82>
 801af4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af50:	1d5a      	adds	r2, r3, #5
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	429a      	cmp	r2, r3
 801af56:	d227      	bcs.n	801afa8 <mg_json_unescape+0x82>
 801af58:	68ba      	ldr	r2, [r7, #8]
 801af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af5c:	3301      	adds	r3, #1
 801af5e:	4413      	add	r3, r2
 801af60:	781b      	ldrb	r3, [r3, #0]
 801af62:	2b75      	cmp	r3, #117	@ 0x75
 801af64:	d120      	bne.n	801afa8 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 801af66:	68ba      	ldr	r2, [r7, #8]
 801af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af6a:	3302      	adds	r3, #2
 801af6c:	18d1      	adds	r1, r2, r3
 801af6e:	f107 0314 	add.w	r3, r7, #20
 801af72:	2204      	movs	r2, #4
 801af74:	4618      	mov	r0, r3
 801af76:	f006 fe02 	bl	8021b7e <mg_str_n>
 801af7a:	687a      	ldr	r2, [r7, #4]
 801af7c:	6a3b      	ldr	r3, [r7, #32]
 801af7e:	4413      	add	r3, r2
 801af80:	2201      	movs	r2, #1
 801af82:	9200      	str	r2, [sp, #0]
 801af84:	2210      	movs	r2, #16
 801af86:	f107 0114 	add.w	r1, r7, #20
 801af8a:	c903      	ldmia	r1, {r0, r1}
 801af8c:	f006 fffe 	bl	8021f8c <mg_str_to_num>
 801af90:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 801af92:	f083 0301 	eor.w	r3, r3, #1
 801af96:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d001      	beq.n	801afa0 <mg_json_unescape+0x7a>
        return false;
 801af9c:	2300      	movs	r3, #0
 801af9e:	e04c      	b.n	801b03a <mg_json_unescape+0x114>
      i += 5;
 801afa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afa2:	3305      	adds	r3, #5
 801afa4:	627b      	str	r3, [r7, #36]	@ 0x24
 801afa6:	e02b      	b.n	801b000 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 801afa8:	68ba      	ldr	r2, [r7, #8]
 801afaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afac:	4413      	add	r3, r2
 801afae:	781b      	ldrb	r3, [r3, #0]
 801afb0:	2b5c      	cmp	r3, #92	@ 0x5c
 801afb2:	d11d      	bne.n	801aff0 <mg_json_unescape+0xca>
 801afb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afb6:	1c5a      	adds	r2, r3, #1
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	429a      	cmp	r2, r3
 801afbc:	d218      	bcs.n	801aff0 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 801afbe:	68ba      	ldr	r2, [r7, #8]
 801afc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afc2:	3301      	adds	r3, #1
 801afc4:	4413      	add	r3, r2
 801afc6:	781b      	ldrb	r3, [r3, #0]
 801afc8:	2100      	movs	r1, #0
 801afca:	4618      	mov	r0, r3
 801afcc:	f7ff fa10 	bl	801a3f0 <json_esc>
 801afd0:	4603      	mov	r3, r0
 801afd2:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 801afd4:	7ffb      	ldrb	r3, [r7, #31]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d101      	bne.n	801afde <mg_json_unescape+0xb8>
 801afda:	2300      	movs	r3, #0
 801afdc:	e02d      	b.n	801b03a <mg_json_unescape+0x114>
      to[j] = c;
 801afde:	687a      	ldr	r2, [r7, #4]
 801afe0:	6a3b      	ldr	r3, [r7, #32]
 801afe2:	4413      	add	r3, r2
 801afe4:	7ffa      	ldrb	r2, [r7, #31]
 801afe6:	701a      	strb	r2, [r3, #0]
      i++;
 801afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afea:	3301      	adds	r3, #1
 801afec:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 801afee:	e007      	b.n	801b000 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 801aff0:	68ba      	ldr	r2, [r7, #8]
 801aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aff4:	441a      	add	r2, r3
 801aff6:	6879      	ldr	r1, [r7, #4]
 801aff8:	6a3b      	ldr	r3, [r7, #32]
 801affa:	440b      	add	r3, r1
 801affc:	7812      	ldrb	r2, [r2, #0]
 801affe:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 801b000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b002:	3301      	adds	r3, #1
 801b004:	627b      	str	r3, [r7, #36]	@ 0x24
 801b006:	6a3b      	ldr	r3, [r7, #32]
 801b008:	3301      	adds	r3, #1
 801b00a:	623b      	str	r3, [r7, #32]
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b010:	429a      	cmp	r2, r3
 801b012:	d203      	bcs.n	801b01c <mg_json_unescape+0xf6>
 801b014:	6a3a      	ldr	r2, [r7, #32]
 801b016:	683b      	ldr	r3, [r7, #0]
 801b018:	429a      	cmp	r2, r3
 801b01a:	d392      	bcc.n	801af42 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 801b01c:	6a3a      	ldr	r2, [r7, #32]
 801b01e:	683b      	ldr	r3, [r7, #0]
 801b020:	429a      	cmp	r2, r3
 801b022:	d301      	bcc.n	801b028 <mg_json_unescape+0x102>
 801b024:	2300      	movs	r3, #0
 801b026:	e008      	b.n	801b03a <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 801b028:	683b      	ldr	r3, [r7, #0]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d004      	beq.n	801b038 <mg_json_unescape+0x112>
 801b02e:	687a      	ldr	r2, [r7, #4]
 801b030:	6a3b      	ldr	r3, [r7, #32]
 801b032:	4413      	add	r3, r2
 801b034:	2200      	movs	r2, #0
 801b036:	701a      	strb	r2, [r3, #0]
  return true;
 801b038:	2301      	movs	r3, #1
}
 801b03a:	4618      	mov	r0, r3
 801b03c:	372c      	adds	r7, #44	@ 0x2c
 801b03e:	46bd      	mov	sp, r7
 801b040:	bd90      	pop	{r4, r7, pc}

0801b042 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 801b042:	b580      	push	{r7, lr}
 801b044:	b08a      	sub	sp, #40	@ 0x28
 801b046:	af00      	add	r7, sp, #0
 801b048:	f107 0308 	add.w	r3, r7, #8
 801b04c:	e883 0003 	stmia.w	r3, {r0, r1}
 801b050:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 801b052:	2300      	movs	r3, #0
 801b054:	627b      	str	r3, [r7, #36]	@ 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 801b056:	2300      	movs	r3, #0
 801b058:	617b      	str	r3, [r7, #20]
 801b05a:	f107 0314 	add.w	r3, r7, #20
 801b05e:	687a      	ldr	r2, [r7, #4]
 801b060:	f107 0108 	add.w	r1, r7, #8
 801b064:	c903      	ldmia	r1, {r0, r1}
 801b066:	f7ff fba1 	bl	801a7ac <mg_json_get>
 801b06a:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.buf[off] == '"') {
 801b06c:	6a3b      	ldr	r3, [r7, #32]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	db2f      	blt.n	801b0d2 <mg_json_get_str+0x90>
 801b072:	697b      	ldr	r3, [r7, #20]
 801b074:	2b01      	cmp	r3, #1
 801b076:	dd2c      	ble.n	801b0d2 <mg_json_get_str+0x90>
 801b078:	68ba      	ldr	r2, [r7, #8]
 801b07a:	6a3b      	ldr	r3, [r7, #32]
 801b07c:	4413      	add	r3, r2
 801b07e:	781b      	ldrb	r3, [r3, #0]
 801b080:	2b22      	cmp	r3, #34	@ 0x22
 801b082:	d126      	bne.n	801b0d2 <mg_json_get_str+0x90>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	4619      	mov	r1, r3
 801b088:	2001      	movs	r0, #1
 801b08a:	f7f9 fe91 	bl	8014db0 <mg_calloc>
 801b08e:	6278      	str	r0, [r7, #36]	@ 0x24
 801b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b092:	2b00      	cmp	r3, #0
 801b094:	d01d      	beq.n	801b0d2 <mg_json_get_str+0x90>
        !mg_json_unescape(mg_str_n(json.buf + off + 1, (size_t) (len - 2)),
 801b096:	68ba      	ldr	r2, [r7, #8]
 801b098:	6a3b      	ldr	r3, [r7, #32]
 801b09a:	3301      	adds	r3, #1
 801b09c:	18d1      	adds	r1, r2, r3
 801b09e:	697b      	ldr	r3, [r7, #20]
 801b0a0:	3b02      	subs	r3, #2
 801b0a2:	461a      	mov	r2, r3
 801b0a4:	f107 0318 	add.w	r3, r7, #24
 801b0a8:	4618      	mov	r0, r3
 801b0aa:	f006 fd68 	bl	8021b7e <mg_str_n>
 801b0ae:	697b      	ldr	r3, [r7, #20]
 801b0b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b0b2:	f107 0118 	add.w	r1, r7, #24
 801b0b6:	c903      	ldmia	r1, {r0, r1}
 801b0b8:	f7ff ff35 	bl	801af26 <mg_json_unescape>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	f083 0301 	eor.w	r3, r3, #1
 801b0c2:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d004      	beq.n	801b0d2 <mg_json_get_str+0x90>
                          result, (size_t) len)) {
      free(result);
 801b0c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b0ca:	f7f1 fafd 	bl	800c6c8 <vPortFree>
      result = NULL;
 801b0ce:	2300      	movs	r3, #0
 801b0d0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return result;
 801b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	3728      	adds	r7, #40	@ 0x28
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd80      	pop	{r7, pc}

0801b0dc <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b082      	sub	sp, #8
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 801b0e6:	4b05      	ldr	r3, [pc, #20]	@ (801b0fc <logc+0x20>)
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	4a05      	ldr	r2, [pc, #20]	@ (801b100 <logc+0x24>)
 801b0ec:	6811      	ldr	r1, [r2, #0]
 801b0ee:	79fa      	ldrb	r2, [r7, #7]
 801b0f0:	4610      	mov	r0, r2
 801b0f2:	4798      	blx	r3
}
 801b0f4:	bf00      	nop
 801b0f6:	3708      	adds	r7, #8
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	bd80      	pop	{r7, pc}
 801b0fc:	2000029c 	.word	0x2000029c
 801b100:	20018168 	.word	0x20018168

0801b104 <logs>:

static void logs(const char *buf, size_t len) {
 801b104:	b580      	push	{r7, lr}
 801b106:	b084      	sub	sp, #16
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
 801b10c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 801b10e:	2300      	movs	r3, #0
 801b110:	60fb      	str	r3, [r7, #12]
 801b112:	e009      	b.n	801b128 <logs+0x24>
 801b114:	687a      	ldr	r2, [r7, #4]
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	4413      	add	r3, r2
 801b11a:	781b      	ldrb	r3, [r3, #0]
 801b11c:	4618      	mov	r0, r3
 801b11e:	f7ff ffdd 	bl	801b0dc <logc>
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	3301      	adds	r3, #1
 801b126:	60fb      	str	r3, [r7, #12]
 801b128:	68fa      	ldr	r2, [r7, #12]
 801b12a:	683b      	ldr	r3, [r7, #0]
 801b12c:	429a      	cmp	r2, r3
 801b12e:	d3f1      	bcc.n	801b114 <logs+0x10>
}
 801b130:	bf00      	nop
 801b132:	bf00      	nop
 801b134:	3710      	adds	r7, #16
 801b136:	46bd      	mov	sp, r7
 801b138:	bd80      	pop	{r7, pc}
	...

0801b13c <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 801b13c:	b590      	push	{r4, r7, lr}
 801b13e:	b099      	sub	sp, #100	@ 0x64
 801b140:	af06      	add	r7, sp, #24
 801b142:	60f8      	str	r0, [r7, #12]
 801b144:	60b9      	str	r1, [r7, #8]
 801b146:	607a      	str	r2, [r7, #4]
 801b148:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 801b14a:	212f      	movs	r1, #47	@ 0x2f
 801b14c:	68b8      	ldr	r0, [r7, #8]
 801b14e:	f00a fe59 	bl	8025e04 <strrchr>
 801b152:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 801b154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b156:	2b00      	cmp	r3, #0
 801b158:	d104      	bne.n	801b164 <mg_log_prefix+0x28>
 801b15a:	215c      	movs	r1, #92	@ 0x5c
 801b15c:	68b8      	ldr	r0, [r7, #8]
 801b15e:	f00a fe51 	bl	8025e04 <strrchr>
 801b162:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 801b164:	f007 fd22 	bl	8022bac <mg_millis>
 801b168:	4602      	mov	r2, r0
 801b16a:	460b      	mov	r3, r1
 801b16c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b16e:	2900      	cmp	r1, #0
 801b170:	d002      	beq.n	801b178 <mg_log_prefix+0x3c>
 801b172:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b174:	3101      	adds	r1, #1
 801b176:	e000      	b.n	801b17a <mg_log_prefix+0x3e>
 801b178:	68b9      	ldr	r1, [r7, #8]
 801b17a:	f107 0414 	add.w	r4, r7, #20
 801b17e:	6838      	ldr	r0, [r7, #0]
 801b180:	9005      	str	r0, [sp, #20]
 801b182:	6878      	ldr	r0, [r7, #4]
 801b184:	9004      	str	r0, [sp, #16]
 801b186:	9103      	str	r1, [sp, #12]
 801b188:	68f9      	ldr	r1, [r7, #12]
 801b18a:	9102      	str	r1, [sp, #8]
 801b18c:	e9cd 2300 	strd	r2, r3, [sp]
 801b190:	4a11      	ldr	r2, [pc, #68]	@ (801b1d8 <mg_log_prefix+0x9c>)
 801b192:	2129      	movs	r1, #41	@ 0x29
 801b194:	4620      	mov	r0, r4
 801b196:	f005 ffed 	bl	8021174 <mg_snprintf>
 801b19a:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 801b19c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b19e:	2b27      	cmp	r3, #39	@ 0x27
 801b1a0:	d90a      	bls.n	801b1b8 <mg_log_prefix+0x7c>
 801b1a2:	2327      	movs	r3, #39	@ 0x27
 801b1a4:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 801b1a6:	e007      	b.n	801b1b8 <mg_log_prefix+0x7c>
 801b1a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1aa:	1c5a      	adds	r2, r3, #1
 801b1ac:	643a      	str	r2, [r7, #64]	@ 0x40
 801b1ae:	3348      	adds	r3, #72	@ 0x48
 801b1b0:	443b      	add	r3, r7
 801b1b2:	2220      	movs	r2, #32
 801b1b4:	f803 2c34 	strb.w	r2, [r3, #-52]
 801b1b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1ba:	2b28      	cmp	r3, #40	@ 0x28
 801b1bc:	d9f4      	bls.n	801b1a8 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 801b1be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1c0:	1e5a      	subs	r2, r3, #1
 801b1c2:	f107 0314 	add.w	r3, r7, #20
 801b1c6:	4611      	mov	r1, r2
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	f7ff ff9b 	bl	801b104 <logs>
}
 801b1ce:	bf00      	nop
 801b1d0:	374c      	adds	r7, #76	@ 0x4c
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	bd90      	pop	{r4, r7, pc}
 801b1d6:	bf00      	nop
 801b1d8:	080328f4 	.word	0x080328f4

0801b1dc <mg_log>:

void mg_log(const char *fmt, ...) {
 801b1dc:	b40f      	push	{r0, r1, r2, r3}
 801b1de:	b580      	push	{r7, lr}
 801b1e0:	b082      	sub	sp, #8
 801b1e2:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 801b1e4:	f107 0314 	add.w	r3, r7, #20
 801b1e8:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 801b1ea:	4b09      	ldr	r3, [pc, #36]	@ (801b210 <mg_log+0x34>)
 801b1ec:	6818      	ldr	r0, [r3, #0]
 801b1ee:	4b09      	ldr	r3, [pc, #36]	@ (801b214 <mg_log+0x38>)
 801b1f0:	6819      	ldr	r1, [r3, #0]
 801b1f2:	1d3b      	adds	r3, r7, #4
 801b1f4:	693a      	ldr	r2, [r7, #16]
 801b1f6:	f7fb f8ed 	bl	80163d4 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 801b1fa:	2102      	movs	r1, #2
 801b1fc:	4806      	ldr	r0, [pc, #24]	@ (801b218 <mg_log+0x3c>)
 801b1fe:	f7ff ff81 	bl	801b104 <logs>
}
 801b202:	bf00      	nop
 801b204:	3708      	adds	r7, #8
 801b206:	46bd      	mov	sp, r7
 801b208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b20c:	b004      	add	sp, #16
 801b20e:	4770      	bx	lr
 801b210:	2000029c 	.word	0x2000029c
 801b214:	20018168 	.word	0x20018168
 801b218:	0803166c 	.word	0x0803166c

0801b21c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 801b21c:	b480      	push	{r7}
 801b21e:	b083      	sub	sp, #12
 801b220:	af00      	add	r7, sp, #0
 801b222:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	2b09      	cmp	r3, #9
 801b228:	d804      	bhi.n	801b234 <nibble+0x18>
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	b2db      	uxtb	r3, r3
 801b22e:	3330      	adds	r3, #48	@ 0x30
 801b230:	b2db      	uxtb	r3, r3
 801b232:	e003      	b.n	801b23c <nibble+0x20>
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	b2db      	uxtb	r3, r3
 801b238:	3357      	adds	r3, #87	@ 0x57
 801b23a:	b2db      	uxtb	r3, r3
}
 801b23c:	4618      	mov	r0, r3
 801b23e:	370c      	adds	r7, #12
 801b240:	46bd      	mov	sp, r7
 801b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b246:	4770      	bx	lr

0801b248 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 801b248:	b580      	push	{r7, lr}
 801b24a:	b08a      	sub	sp, #40	@ 0x28
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
 801b250:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 801b256:	2300      	movs	r3, #0
 801b258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 801b25c:	2300      	movs	r3, #0
 801b25e:	623b      	str	r3, [r7, #32]
 801b260:	e07a      	b.n	801b358 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 801b262:	6a3b      	ldr	r3, [r7, #32]
 801b264:	f003 030f 	and.w	r3, r3, #15
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d13a      	bne.n	801b2e2 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 801b26c:	6a3b      	ldr	r3, [r7, #32]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d00f      	beq.n	801b292 <mg_hexdump+0x4a>
 801b272:	2102      	movs	r1, #2
 801b274:	484c      	ldr	r0, [pc, #304]	@ (801b3a8 <mg_hexdump+0x160>)
 801b276:	f7ff ff45 	bl	801b104 <logs>
 801b27a:	f107 030c 	add.w	r3, r7, #12
 801b27e:	2110      	movs	r1, #16
 801b280:	4618      	mov	r0, r3
 801b282:	f7ff ff3f 	bl	801b104 <logs>
 801b286:	200a      	movs	r0, #10
 801b288:	f7ff ff28 	bl	801b0dc <logc>
 801b28c:	2300      	movs	r3, #0
 801b28e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 801b292:	6a3b      	ldr	r3, [r7, #32]
 801b294:	0b1b      	lsrs	r3, r3, #12
 801b296:	f003 030f 	and.w	r3, r3, #15
 801b29a:	4618      	mov	r0, r3
 801b29c:	f7ff ffbe 	bl	801b21c <nibble>
 801b2a0:	4603      	mov	r3, r0
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	f7ff ff1a 	bl	801b0dc <logc>
 801b2a8:	6a3b      	ldr	r3, [r7, #32]
 801b2aa:	0a1b      	lsrs	r3, r3, #8
 801b2ac:	f003 030f 	and.w	r3, r3, #15
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f7ff ffb3 	bl	801b21c <nibble>
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7ff ff0f 	bl	801b0dc <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 801b2be:	6a3b      	ldr	r3, [r7, #32]
 801b2c0:	091b      	lsrs	r3, r3, #4
 801b2c2:	f003 030f 	and.w	r3, r3, #15
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f7ff ffa8 	bl	801b21c <nibble>
 801b2cc:	4603      	mov	r3, r0
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	f7ff ff04 	bl	801b0dc <logc>
 801b2d4:	2030      	movs	r0, #48	@ 0x30
 801b2d6:	f7ff ff01 	bl	801b0dc <logc>
 801b2da:	2103      	movs	r1, #3
 801b2dc:	4833      	ldr	r0, [pc, #204]	@ (801b3ac <mg_hexdump+0x164>)
 801b2de:	f7ff ff11 	bl	801b104 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 801b2e2:	69fa      	ldr	r2, [r7, #28]
 801b2e4:	6a3b      	ldr	r3, [r7, #32]
 801b2e6:	4413      	add	r3, r2
 801b2e8:	781b      	ldrb	r3, [r3, #0]
 801b2ea:	091b      	lsrs	r3, r3, #4
 801b2ec:	b2db      	uxtb	r3, r3
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	f7ff ff94 	bl	801b21c <nibble>
 801b2f4:	4603      	mov	r3, r0
 801b2f6:	4618      	mov	r0, r3
 801b2f8:	f7ff fef0 	bl	801b0dc <logc>
 801b2fc:	69fa      	ldr	r2, [r7, #28]
 801b2fe:	6a3b      	ldr	r3, [r7, #32]
 801b300:	4413      	add	r3, r2
 801b302:	781b      	ldrb	r3, [r3, #0]
 801b304:	f003 030f 	and.w	r3, r3, #15
 801b308:	4618      	mov	r0, r3
 801b30a:	f7ff ff87 	bl	801b21c <nibble>
 801b30e:	4603      	mov	r3, r0
 801b310:	4618      	mov	r0, r3
 801b312:	f7ff fee3 	bl	801b0dc <logc>
    logc(' ');                                         // Space after hex number
 801b316:	2020      	movs	r0, #32
 801b318:	f7ff fee0 	bl	801b0dc <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 801b31c:	69fa      	ldr	r2, [r7, #28]
 801b31e:	6a3b      	ldr	r3, [r7, #32]
 801b320:	4413      	add	r3, r2
 801b322:	781b      	ldrb	r3, [r3, #0]
 801b324:	2b1f      	cmp	r3, #31
 801b326:	d90a      	bls.n	801b33e <mg_hexdump+0xf6>
 801b328:	69fa      	ldr	r2, [r7, #28]
 801b32a:	6a3b      	ldr	r3, [r7, #32]
 801b32c:	4413      	add	r3, r2
 801b32e:	781b      	ldrb	r3, [r3, #0]
 801b330:	2b7e      	cmp	r3, #126	@ 0x7e
 801b332:	d804      	bhi.n	801b33e <mg_hexdump+0xf6>
 801b334:	69fa      	ldr	r2, [r7, #28]
 801b336:	6a3b      	ldr	r3, [r7, #32]
 801b338:	4413      	add	r3, r2
 801b33a:	781a      	ldrb	r2, [r3, #0]
 801b33c:	e000      	b.n	801b340 <mg_hexdump+0xf8>
 801b33e:	222e      	movs	r2, #46	@ 0x2e
 801b340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b344:	1c59      	adds	r1, r3, #1
 801b346:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 801b34a:	3328      	adds	r3, #40	@ 0x28
 801b34c:	443b      	add	r3, r7
 801b34e:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 801b352:	6a3b      	ldr	r3, [r7, #32]
 801b354:	3301      	adds	r3, #1
 801b356:	623b      	str	r3, [r7, #32]
 801b358:	6a3a      	ldr	r2, [r7, #32]
 801b35a:	683b      	ldr	r3, [r7, #0]
 801b35c:	429a      	cmp	r2, r3
 801b35e:	d380      	bcc.n	801b262 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 801b360:	e00d      	b.n	801b37e <mg_hexdump+0x136>
 801b362:	2103      	movs	r1, #3
 801b364:	4811      	ldr	r0, [pc, #68]	@ (801b3ac <mg_hexdump+0x164>)
 801b366:	f7ff fecd 	bl	801b104 <logs>
 801b36a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b36e:	1c5a      	adds	r2, r3, #1
 801b370:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 801b374:	3328      	adds	r3, #40	@ 0x28
 801b376:	443b      	add	r3, r7
 801b378:	2220      	movs	r2, #32
 801b37a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 801b37e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b382:	2b0f      	cmp	r3, #15
 801b384:	d9ed      	bls.n	801b362 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 801b386:	2102      	movs	r1, #2
 801b388:	4807      	ldr	r0, [pc, #28]	@ (801b3a8 <mg_hexdump+0x160>)
 801b38a:	f7ff febb 	bl	801b104 <logs>
 801b38e:	f107 030c 	add.w	r3, r7, #12
 801b392:	2110      	movs	r1, #16
 801b394:	4618      	mov	r0, r3
 801b396:	f7ff feb5 	bl	801b104 <logs>
 801b39a:	200a      	movs	r0, #10
 801b39c:	f7ff fe9e 	bl	801b0dc <logc>
}
 801b3a0:	bf00      	nop
 801b3a2:	3728      	adds	r7, #40	@ 0x28
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	bd80      	pop	{r7, pc}
 801b3a8:	08032908 	.word	0x08032908
 801b3ac:	0803290c 	.word	0x0803290c

0801b3b0 <mg_byte_reverse>:
//  needed on buffers full of bytes, and then call MD5Final, which
//  will fill a supplied 16-byte array with the digest.

#if defined(MG_ENABLE_MD5) && MG_ENABLE_MD5

static void mg_byte_reverse(unsigned char *buf, unsigned longs) {
 801b3b0:	b480      	push	{r7}
 801b3b2:	b085      	sub	sp, #20
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]
 801b3b8:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 801b3ba:	4b14      	ldr	r3, [pc, #80]	@ (801b40c <mg_byte_reverse+0x5c>)
 801b3bc:	881b      	ldrh	r3, [r3, #0]
 801b3be:	2bff      	cmp	r3, #255	@ 0xff
 801b3c0:	d81d      	bhi.n	801b3fe <mg_byte_reverse+0x4e>
    do {
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	3303      	adds	r3, #3
 801b3c6:	781b      	ldrb	r3, [r3, #0]
 801b3c8:	021b      	lsls	r3, r3, #8
 801b3ca:	687a      	ldr	r2, [r7, #4]
 801b3cc:	3202      	adds	r2, #2
 801b3ce:	7812      	ldrb	r2, [r2, #0]
 801b3d0:	4313      	orrs	r3, r2
 801b3d2:	041a      	lsls	r2, r3, #16
                   ((unsigned) buf[1] << 8 | buf[0]);
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	3301      	adds	r3, #1
 801b3d8:	781b      	ldrb	r3, [r3, #0]
 801b3da:	021b      	lsls	r3, r3, #8
 801b3dc:	6879      	ldr	r1, [r7, #4]
 801b3de:	7809      	ldrb	r1, [r1, #0]
 801b3e0:	430b      	orrs	r3, r1
      uint32_t t = (uint32_t) ((unsigned) buf[3] << 8 | buf[2]) << 16 |
 801b3e2:	4313      	orrs	r3, r2
 801b3e4:	60fb      	str	r3, [r7, #12]
      *(uint32_t *) buf = t;
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	68fa      	ldr	r2, [r7, #12]
 801b3ea:	601a      	str	r2, [r3, #0]
      buf += 4;
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	3304      	adds	r3, #4
 801b3f0:	607b      	str	r3, [r7, #4]
    } while (--longs);
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	3b01      	subs	r3, #1
 801b3f6:	603b      	str	r3, [r7, #0]
 801b3f8:	683b      	ldr	r3, [r7, #0]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d1e1      	bne.n	801b3c2 <mg_byte_reverse+0x12>
  } else {
    (void) buf, (void) longs;  // Little endian. Do nothing
  }
}
 801b3fe:	bf00      	nop
 801b400:	3714      	adds	r7, #20
 801b402:	46bd      	mov	sp, r7
 801b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b408:	4770      	bx	lr
 801b40a:	bf00      	nop
 801b40c:	08032910 	.word	0x08032910

0801b410 <mg_md5_init>:

/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */
void mg_md5_init(mg_md5_ctx *ctx) {
 801b410:	b480      	push	{r7}
 801b412:	b083      	sub	sp, #12
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
  ctx->buf[0] = 0x67452301;
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	4a0b      	ldr	r2, [pc, #44]	@ (801b448 <mg_md5_init+0x38>)
 801b41c:	601a      	str	r2, [r3, #0]
  ctx->buf[1] = 0xefcdab89;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	4a0a      	ldr	r2, [pc, #40]	@ (801b44c <mg_md5_init+0x3c>)
 801b422:	605a      	str	r2, [r3, #4]
  ctx->buf[2] = 0x98badcfe;
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	4a0a      	ldr	r2, [pc, #40]	@ (801b450 <mg_md5_init+0x40>)
 801b428:	609a      	str	r2, [r3, #8]
  ctx->buf[3] = 0x10325476;
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	4a09      	ldr	r2, [pc, #36]	@ (801b454 <mg_md5_init+0x44>)
 801b42e:	60da      	str	r2, [r3, #12]

  ctx->bits[0] = 0;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	2200      	movs	r2, #0
 801b434:	611a      	str	r2, [r3, #16]
  ctx->bits[1] = 0;
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	2200      	movs	r2, #0
 801b43a:	615a      	str	r2, [r3, #20]
}
 801b43c:	bf00      	nop
 801b43e:	370c      	adds	r7, #12
 801b440:	46bd      	mov	sp, r7
 801b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b446:	4770      	bx	lr
 801b448:	67452301 	.word	0x67452301
 801b44c:	efcdab89 	.word	0xefcdab89
 801b450:	98badcfe 	.word	0x98badcfe
 801b454:	10325476 	.word	0x10325476

0801b458 <mg_md5_transform>:

static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {
 801b458:	b480      	push	{r7}
 801b45a:	b087      	sub	sp, #28
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
 801b460:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d;

  a = buf[0];
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	617b      	str	r3, [r7, #20]
  b = buf[1];
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	685b      	ldr	r3, [r3, #4]
 801b46c:	613b      	str	r3, [r7, #16]
  c = buf[2];
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	689b      	ldr	r3, [r3, #8]
 801b472:	60fb      	str	r3, [r7, #12]
  d = buf[3];
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	68db      	ldr	r3, [r3, #12]
 801b478:	60bb      	str	r3, [r7, #8]

  MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
 801b47a:	68fa      	ldr	r2, [r7, #12]
 801b47c:	68bb      	ldr	r3, [r7, #8]
 801b47e:	405a      	eors	r2, r3
 801b480:	693b      	ldr	r3, [r7, #16]
 801b482:	401a      	ands	r2, r3
 801b484:	68bb      	ldr	r3, [r7, #8]
 801b486:	405a      	eors	r2, r3
 801b488:	683b      	ldr	r3, [r7, #0]
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	441a      	add	r2, r3
 801b48e:	697b      	ldr	r3, [r7, #20]
 801b490:	441a      	add	r2, r3
 801b492:	4ba1      	ldr	r3, [pc, #644]	@ (801b718 <mg_md5_transform+0x2c0>)
 801b494:	4413      	add	r3, r2
 801b496:	617b      	str	r3, [r7, #20]
 801b498:	697b      	ldr	r3, [r7, #20]
 801b49a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b49e:	617b      	str	r3, [r7, #20]
 801b4a0:	697a      	ldr	r2, [r7, #20]
 801b4a2:	693b      	ldr	r3, [r7, #16]
 801b4a4:	4413      	add	r3, r2
 801b4a6:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
 801b4a8:	693a      	ldr	r2, [r7, #16]
 801b4aa:	68fb      	ldr	r3, [r7, #12]
 801b4ac:	405a      	eors	r2, r3
 801b4ae:	697b      	ldr	r3, [r7, #20]
 801b4b0:	401a      	ands	r2, r3
 801b4b2:	68fb      	ldr	r3, [r7, #12]
 801b4b4:	405a      	eors	r2, r3
 801b4b6:	683b      	ldr	r3, [r7, #0]
 801b4b8:	3304      	adds	r3, #4
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	441a      	add	r2, r3
 801b4be:	68bb      	ldr	r3, [r7, #8]
 801b4c0:	441a      	add	r2, r3
 801b4c2:	4b96      	ldr	r3, [pc, #600]	@ (801b71c <mg_md5_transform+0x2c4>)
 801b4c4:	4413      	add	r3, r2
 801b4c6:	60bb      	str	r3, [r7, #8]
 801b4c8:	68bb      	ldr	r3, [r7, #8]
 801b4ca:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b4ce:	60bb      	str	r3, [r7, #8]
 801b4d0:	68ba      	ldr	r2, [r7, #8]
 801b4d2:	697b      	ldr	r3, [r7, #20]
 801b4d4:	4413      	add	r3, r2
 801b4d6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
 801b4d8:	697a      	ldr	r2, [r7, #20]
 801b4da:	693b      	ldr	r3, [r7, #16]
 801b4dc:	405a      	eors	r2, r3
 801b4de:	68bb      	ldr	r3, [r7, #8]
 801b4e0:	401a      	ands	r2, r3
 801b4e2:	693b      	ldr	r3, [r7, #16]
 801b4e4:	405a      	eors	r2, r3
 801b4e6:	683b      	ldr	r3, [r7, #0]
 801b4e8:	3308      	adds	r3, #8
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	441a      	add	r2, r3
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	441a      	add	r2, r3
 801b4f2:	4b8b      	ldr	r3, [pc, #556]	@ (801b720 <mg_md5_transform+0x2c8>)
 801b4f4:	4413      	add	r3, r2
 801b4f6:	60fb      	str	r3, [r7, #12]
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b4fe:	60fb      	str	r3, [r7, #12]
 801b500:	68fa      	ldr	r2, [r7, #12]
 801b502:	68bb      	ldr	r3, [r7, #8]
 801b504:	4413      	add	r3, r2
 801b506:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
 801b508:	68ba      	ldr	r2, [r7, #8]
 801b50a:	697b      	ldr	r3, [r7, #20]
 801b50c:	405a      	eors	r2, r3
 801b50e:	68fb      	ldr	r3, [r7, #12]
 801b510:	401a      	ands	r2, r3
 801b512:	697b      	ldr	r3, [r7, #20]
 801b514:	405a      	eors	r2, r3
 801b516:	683b      	ldr	r3, [r7, #0]
 801b518:	330c      	adds	r3, #12
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	441a      	add	r2, r3
 801b51e:	693b      	ldr	r3, [r7, #16]
 801b520:	441a      	add	r2, r3
 801b522:	4b80      	ldr	r3, [pc, #512]	@ (801b724 <mg_md5_transform+0x2cc>)
 801b524:	4413      	add	r3, r2
 801b526:	613b      	str	r3, [r7, #16]
 801b528:	693b      	ldr	r3, [r7, #16]
 801b52a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b52e:	613b      	str	r3, [r7, #16]
 801b530:	693a      	ldr	r2, [r7, #16]
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	4413      	add	r3, r2
 801b536:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
 801b538:	68fa      	ldr	r2, [r7, #12]
 801b53a:	68bb      	ldr	r3, [r7, #8]
 801b53c:	405a      	eors	r2, r3
 801b53e:	693b      	ldr	r3, [r7, #16]
 801b540:	401a      	ands	r2, r3
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	405a      	eors	r2, r3
 801b546:	683b      	ldr	r3, [r7, #0]
 801b548:	3310      	adds	r3, #16
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	441a      	add	r2, r3
 801b54e:	697b      	ldr	r3, [r7, #20]
 801b550:	441a      	add	r2, r3
 801b552:	4b75      	ldr	r3, [pc, #468]	@ (801b728 <mg_md5_transform+0x2d0>)
 801b554:	4413      	add	r3, r2
 801b556:	617b      	str	r3, [r7, #20]
 801b558:	697b      	ldr	r3, [r7, #20]
 801b55a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b55e:	617b      	str	r3, [r7, #20]
 801b560:	697a      	ldr	r2, [r7, #20]
 801b562:	693b      	ldr	r3, [r7, #16]
 801b564:	4413      	add	r3, r2
 801b566:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
 801b568:	693a      	ldr	r2, [r7, #16]
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	405a      	eors	r2, r3
 801b56e:	697b      	ldr	r3, [r7, #20]
 801b570:	401a      	ands	r2, r3
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	405a      	eors	r2, r3
 801b576:	683b      	ldr	r3, [r7, #0]
 801b578:	3314      	adds	r3, #20
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	441a      	add	r2, r3
 801b57e:	68bb      	ldr	r3, [r7, #8]
 801b580:	441a      	add	r2, r3
 801b582:	4b6a      	ldr	r3, [pc, #424]	@ (801b72c <mg_md5_transform+0x2d4>)
 801b584:	4413      	add	r3, r2
 801b586:	60bb      	str	r3, [r7, #8]
 801b588:	68bb      	ldr	r3, [r7, #8]
 801b58a:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b58e:	60bb      	str	r3, [r7, #8]
 801b590:	68ba      	ldr	r2, [r7, #8]
 801b592:	697b      	ldr	r3, [r7, #20]
 801b594:	4413      	add	r3, r2
 801b596:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
 801b598:	697a      	ldr	r2, [r7, #20]
 801b59a:	693b      	ldr	r3, [r7, #16]
 801b59c:	405a      	eors	r2, r3
 801b59e:	68bb      	ldr	r3, [r7, #8]
 801b5a0:	401a      	ands	r2, r3
 801b5a2:	693b      	ldr	r3, [r7, #16]
 801b5a4:	405a      	eors	r2, r3
 801b5a6:	683b      	ldr	r3, [r7, #0]
 801b5a8:	3318      	adds	r3, #24
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	441a      	add	r2, r3
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	441a      	add	r2, r3
 801b5b2:	4b5f      	ldr	r3, [pc, #380]	@ (801b730 <mg_md5_transform+0x2d8>)
 801b5b4:	4413      	add	r3, r2
 801b5b6:	60fb      	str	r3, [r7, #12]
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b5be:	60fb      	str	r3, [r7, #12]
 801b5c0:	68fa      	ldr	r2, [r7, #12]
 801b5c2:	68bb      	ldr	r3, [r7, #8]
 801b5c4:	4413      	add	r3, r2
 801b5c6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
 801b5c8:	68ba      	ldr	r2, [r7, #8]
 801b5ca:	697b      	ldr	r3, [r7, #20]
 801b5cc:	405a      	eors	r2, r3
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	401a      	ands	r2, r3
 801b5d2:	697b      	ldr	r3, [r7, #20]
 801b5d4:	405a      	eors	r2, r3
 801b5d6:	683b      	ldr	r3, [r7, #0]
 801b5d8:	331c      	adds	r3, #28
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	441a      	add	r2, r3
 801b5de:	693b      	ldr	r3, [r7, #16]
 801b5e0:	441a      	add	r2, r3
 801b5e2:	4b54      	ldr	r3, [pc, #336]	@ (801b734 <mg_md5_transform+0x2dc>)
 801b5e4:	4413      	add	r3, r2
 801b5e6:	613b      	str	r3, [r7, #16]
 801b5e8:	693b      	ldr	r3, [r7, #16]
 801b5ea:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b5ee:	613b      	str	r3, [r7, #16]
 801b5f0:	693a      	ldr	r2, [r7, #16]
 801b5f2:	68fb      	ldr	r3, [r7, #12]
 801b5f4:	4413      	add	r3, r2
 801b5f6:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
 801b5f8:	68fa      	ldr	r2, [r7, #12]
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	405a      	eors	r2, r3
 801b5fe:	693b      	ldr	r3, [r7, #16]
 801b600:	401a      	ands	r2, r3
 801b602:	68bb      	ldr	r3, [r7, #8]
 801b604:	405a      	eors	r2, r3
 801b606:	683b      	ldr	r3, [r7, #0]
 801b608:	3320      	adds	r3, #32
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	441a      	add	r2, r3
 801b60e:	697b      	ldr	r3, [r7, #20]
 801b610:	441a      	add	r2, r3
 801b612:	4b49      	ldr	r3, [pc, #292]	@ (801b738 <mg_md5_transform+0x2e0>)
 801b614:	4413      	add	r3, r2
 801b616:	617b      	str	r3, [r7, #20]
 801b618:	697b      	ldr	r3, [r7, #20]
 801b61a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b61e:	617b      	str	r3, [r7, #20]
 801b620:	697a      	ldr	r2, [r7, #20]
 801b622:	693b      	ldr	r3, [r7, #16]
 801b624:	4413      	add	r3, r2
 801b626:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
 801b628:	693a      	ldr	r2, [r7, #16]
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	405a      	eors	r2, r3
 801b62e:	697b      	ldr	r3, [r7, #20]
 801b630:	401a      	ands	r2, r3
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	405a      	eors	r2, r3
 801b636:	683b      	ldr	r3, [r7, #0]
 801b638:	3324      	adds	r3, #36	@ 0x24
 801b63a:	681b      	ldr	r3, [r3, #0]
 801b63c:	441a      	add	r2, r3
 801b63e:	68bb      	ldr	r3, [r7, #8]
 801b640:	441a      	add	r2, r3
 801b642:	4b3e      	ldr	r3, [pc, #248]	@ (801b73c <mg_md5_transform+0x2e4>)
 801b644:	4413      	add	r3, r2
 801b646:	60bb      	str	r3, [r7, #8]
 801b648:	68bb      	ldr	r3, [r7, #8]
 801b64a:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b64e:	60bb      	str	r3, [r7, #8]
 801b650:	68ba      	ldr	r2, [r7, #8]
 801b652:	697b      	ldr	r3, [r7, #20]
 801b654:	4413      	add	r3, r2
 801b656:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
 801b658:	697a      	ldr	r2, [r7, #20]
 801b65a:	693b      	ldr	r3, [r7, #16]
 801b65c:	405a      	eors	r2, r3
 801b65e:	68bb      	ldr	r3, [r7, #8]
 801b660:	401a      	ands	r2, r3
 801b662:	693b      	ldr	r3, [r7, #16]
 801b664:	405a      	eors	r2, r3
 801b666:	683b      	ldr	r3, [r7, #0]
 801b668:	3328      	adds	r3, #40	@ 0x28
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	441a      	add	r2, r3
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	4413      	add	r3, r2
 801b672:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 801b676:	3b4f      	subs	r3, #79	@ 0x4f
 801b678:	60fb      	str	r3, [r7, #12]
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b680:	60fb      	str	r3, [r7, #12]
 801b682:	68fa      	ldr	r2, [r7, #12]
 801b684:	68bb      	ldr	r3, [r7, #8]
 801b686:	4413      	add	r3, r2
 801b688:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
 801b68a:	68ba      	ldr	r2, [r7, #8]
 801b68c:	697b      	ldr	r3, [r7, #20]
 801b68e:	405a      	eors	r2, r3
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	401a      	ands	r2, r3
 801b694:	697b      	ldr	r3, [r7, #20]
 801b696:	405a      	eors	r2, r3
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	332c      	adds	r3, #44	@ 0x2c
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	441a      	add	r2, r3
 801b6a0:	693b      	ldr	r3, [r7, #16]
 801b6a2:	441a      	add	r2, r3
 801b6a4:	4b26      	ldr	r3, [pc, #152]	@ (801b740 <mg_md5_transform+0x2e8>)
 801b6a6:	4413      	add	r3, r2
 801b6a8:	613b      	str	r3, [r7, #16]
 801b6aa:	693b      	ldr	r3, [r7, #16]
 801b6ac:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b6b0:	613b      	str	r3, [r7, #16]
 801b6b2:	693a      	ldr	r2, [r7, #16]
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	4413      	add	r3, r2
 801b6b8:	613b      	str	r3, [r7, #16]
  MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
 801b6ba:	68fa      	ldr	r2, [r7, #12]
 801b6bc:	68bb      	ldr	r3, [r7, #8]
 801b6be:	405a      	eors	r2, r3
 801b6c0:	693b      	ldr	r3, [r7, #16]
 801b6c2:	401a      	ands	r2, r3
 801b6c4:	68bb      	ldr	r3, [r7, #8]
 801b6c6:	405a      	eors	r2, r3
 801b6c8:	683b      	ldr	r3, [r7, #0]
 801b6ca:	3330      	adds	r3, #48	@ 0x30
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	441a      	add	r2, r3
 801b6d0:	697b      	ldr	r3, [r7, #20]
 801b6d2:	441a      	add	r2, r3
 801b6d4:	4b1b      	ldr	r3, [pc, #108]	@ (801b744 <mg_md5_transform+0x2ec>)
 801b6d6:	4413      	add	r3, r2
 801b6d8:	617b      	str	r3, [r7, #20]
 801b6da:	697b      	ldr	r3, [r7, #20]
 801b6dc:	ea4f 6373 	mov.w	r3, r3, ror #25
 801b6e0:	617b      	str	r3, [r7, #20]
 801b6e2:	697a      	ldr	r2, [r7, #20]
 801b6e4:	693b      	ldr	r3, [r7, #16]
 801b6e6:	4413      	add	r3, r2
 801b6e8:	617b      	str	r3, [r7, #20]
  MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
 801b6ea:	693a      	ldr	r2, [r7, #16]
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	405a      	eors	r2, r3
 801b6f0:	697b      	ldr	r3, [r7, #20]
 801b6f2:	401a      	ands	r2, r3
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	405a      	eors	r2, r3
 801b6f8:	683b      	ldr	r3, [r7, #0]
 801b6fa:	3334      	adds	r3, #52	@ 0x34
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	441a      	add	r2, r3
 801b700:	68bb      	ldr	r3, [r7, #8]
 801b702:	441a      	add	r2, r3
 801b704:	4b10      	ldr	r3, [pc, #64]	@ (801b748 <mg_md5_transform+0x2f0>)
 801b706:	4413      	add	r3, r2
 801b708:	60bb      	str	r3, [r7, #8]
 801b70a:	68bb      	ldr	r3, [r7, #8]
 801b70c:	ea4f 5333 	mov.w	r3, r3, ror #20
 801b710:	60bb      	str	r3, [r7, #8]
 801b712:	68ba      	ldr	r2, [r7, #8]
 801b714:	e01a      	b.n	801b74c <mg_md5_transform+0x2f4>
 801b716:	bf00      	nop
 801b718:	d76aa478 	.word	0xd76aa478
 801b71c:	e8c7b756 	.word	0xe8c7b756
 801b720:	242070db 	.word	0x242070db
 801b724:	c1bdceee 	.word	0xc1bdceee
 801b728:	f57c0faf 	.word	0xf57c0faf
 801b72c:	4787c62a 	.word	0x4787c62a
 801b730:	a8304613 	.word	0xa8304613
 801b734:	fd469501 	.word	0xfd469501
 801b738:	698098d8 	.word	0x698098d8
 801b73c:	8b44f7af 	.word	0x8b44f7af
 801b740:	895cd7be 	.word	0x895cd7be
 801b744:	6b901122 	.word	0x6b901122
 801b748:	fd987193 	.word	0xfd987193
 801b74c:	697b      	ldr	r3, [r7, #20]
 801b74e:	4413      	add	r3, r2
 801b750:	60bb      	str	r3, [r7, #8]
  MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
 801b752:	697a      	ldr	r2, [r7, #20]
 801b754:	693b      	ldr	r3, [r7, #16]
 801b756:	405a      	eors	r2, r3
 801b758:	68bb      	ldr	r3, [r7, #8]
 801b75a:	401a      	ands	r2, r3
 801b75c:	693b      	ldr	r3, [r7, #16]
 801b75e:	405a      	eors	r2, r3
 801b760:	683b      	ldr	r3, [r7, #0]
 801b762:	3338      	adds	r3, #56	@ 0x38
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	441a      	add	r2, r3
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	441a      	add	r2, r3
 801b76c:	4ba0      	ldr	r3, [pc, #640]	@ (801b9f0 <mg_md5_transform+0x598>)
 801b76e:	4413      	add	r3, r2
 801b770:	60fb      	str	r3, [r7, #12]
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	ea4f 33f3 	mov.w	r3, r3, ror #15
 801b778:	60fb      	str	r3, [r7, #12]
 801b77a:	68fa      	ldr	r2, [r7, #12]
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	4413      	add	r3, r2
 801b780:	60fb      	str	r3, [r7, #12]
  MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
 801b782:	68ba      	ldr	r2, [r7, #8]
 801b784:	697b      	ldr	r3, [r7, #20]
 801b786:	405a      	eors	r2, r3
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	401a      	ands	r2, r3
 801b78c:	697b      	ldr	r3, [r7, #20]
 801b78e:	405a      	eors	r2, r3
 801b790:	683b      	ldr	r3, [r7, #0]
 801b792:	333c      	adds	r3, #60	@ 0x3c
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	441a      	add	r2, r3
 801b798:	693b      	ldr	r3, [r7, #16]
 801b79a:	441a      	add	r2, r3
 801b79c:	4b95      	ldr	r3, [pc, #596]	@ (801b9f4 <mg_md5_transform+0x59c>)
 801b79e:	4413      	add	r3, r2
 801b7a0:	613b      	str	r3, [r7, #16]
 801b7a2:	693b      	ldr	r3, [r7, #16]
 801b7a4:	ea4f 23b3 	mov.w	r3, r3, ror #10
 801b7a8:	613b      	str	r3, [r7, #16]
 801b7aa:	693a      	ldr	r2, [r7, #16]
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	4413      	add	r3, r2
 801b7b0:	613b      	str	r3, [r7, #16]

  MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
 801b7b2:	693a      	ldr	r2, [r7, #16]
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	405a      	eors	r2, r3
 801b7b8:	68bb      	ldr	r3, [r7, #8]
 801b7ba:	401a      	ands	r2, r3
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	405a      	eors	r2, r3
 801b7c0:	683b      	ldr	r3, [r7, #0]
 801b7c2:	3304      	adds	r3, #4
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	441a      	add	r2, r3
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	441a      	add	r2, r3
 801b7cc:	4b8a      	ldr	r3, [pc, #552]	@ (801b9f8 <mg_md5_transform+0x5a0>)
 801b7ce:	4413      	add	r3, r2
 801b7d0:	617b      	str	r3, [r7, #20]
 801b7d2:	697b      	ldr	r3, [r7, #20]
 801b7d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b7d8:	617b      	str	r3, [r7, #20]
 801b7da:	697a      	ldr	r2, [r7, #20]
 801b7dc:	693b      	ldr	r3, [r7, #16]
 801b7de:	4413      	add	r3, r2
 801b7e0:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
 801b7e2:	697a      	ldr	r2, [r7, #20]
 801b7e4:	693b      	ldr	r3, [r7, #16]
 801b7e6:	405a      	eors	r2, r3
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	401a      	ands	r2, r3
 801b7ec:	693b      	ldr	r3, [r7, #16]
 801b7ee:	405a      	eors	r2, r3
 801b7f0:	683b      	ldr	r3, [r7, #0]
 801b7f2:	3318      	adds	r3, #24
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	441a      	add	r2, r3
 801b7f8:	68bb      	ldr	r3, [r7, #8]
 801b7fa:	441a      	add	r2, r3
 801b7fc:	4b7f      	ldr	r3, [pc, #508]	@ (801b9fc <mg_md5_transform+0x5a4>)
 801b7fe:	4413      	add	r3, r2
 801b800:	60bb      	str	r3, [r7, #8]
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b808:	60bb      	str	r3, [r7, #8]
 801b80a:	68ba      	ldr	r2, [r7, #8]
 801b80c:	697b      	ldr	r3, [r7, #20]
 801b80e:	4413      	add	r3, r2
 801b810:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
 801b812:	68ba      	ldr	r2, [r7, #8]
 801b814:	697b      	ldr	r3, [r7, #20]
 801b816:	405a      	eors	r2, r3
 801b818:	693b      	ldr	r3, [r7, #16]
 801b81a:	401a      	ands	r2, r3
 801b81c:	697b      	ldr	r3, [r7, #20]
 801b81e:	405a      	eors	r2, r3
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	332c      	adds	r3, #44	@ 0x2c
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	441a      	add	r2, r3
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	441a      	add	r2, r3
 801b82c:	4b74      	ldr	r3, [pc, #464]	@ (801ba00 <mg_md5_transform+0x5a8>)
 801b82e:	4413      	add	r3, r2
 801b830:	60fb      	str	r3, [r7, #12]
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b838:	60fb      	str	r3, [r7, #12]
 801b83a:	68fa      	ldr	r2, [r7, #12]
 801b83c:	68bb      	ldr	r3, [r7, #8]
 801b83e:	4413      	add	r3, r2
 801b840:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
 801b842:	68fa      	ldr	r2, [r7, #12]
 801b844:	68bb      	ldr	r3, [r7, #8]
 801b846:	405a      	eors	r2, r3
 801b848:	697b      	ldr	r3, [r7, #20]
 801b84a:	401a      	ands	r2, r3
 801b84c:	68bb      	ldr	r3, [r7, #8]
 801b84e:	405a      	eors	r2, r3
 801b850:	683b      	ldr	r3, [r7, #0]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	441a      	add	r2, r3
 801b856:	693b      	ldr	r3, [r7, #16]
 801b858:	441a      	add	r2, r3
 801b85a:	4b6a      	ldr	r3, [pc, #424]	@ (801ba04 <mg_md5_transform+0x5ac>)
 801b85c:	4413      	add	r3, r2
 801b85e:	613b      	str	r3, [r7, #16]
 801b860:	693b      	ldr	r3, [r7, #16]
 801b862:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b866:	613b      	str	r3, [r7, #16]
 801b868:	693a      	ldr	r2, [r7, #16]
 801b86a:	68fb      	ldr	r3, [r7, #12]
 801b86c:	4413      	add	r3, r2
 801b86e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
 801b870:	693a      	ldr	r2, [r7, #16]
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	405a      	eors	r2, r3
 801b876:	68bb      	ldr	r3, [r7, #8]
 801b878:	401a      	ands	r2, r3
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	405a      	eors	r2, r3
 801b87e:	683b      	ldr	r3, [r7, #0]
 801b880:	3314      	adds	r3, #20
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	441a      	add	r2, r3
 801b886:	697b      	ldr	r3, [r7, #20]
 801b888:	441a      	add	r2, r3
 801b88a:	4b5f      	ldr	r3, [pc, #380]	@ (801ba08 <mg_md5_transform+0x5b0>)
 801b88c:	4413      	add	r3, r2
 801b88e:	617b      	str	r3, [r7, #20]
 801b890:	697b      	ldr	r3, [r7, #20]
 801b892:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b896:	617b      	str	r3, [r7, #20]
 801b898:	697a      	ldr	r2, [r7, #20]
 801b89a:	693b      	ldr	r3, [r7, #16]
 801b89c:	4413      	add	r3, r2
 801b89e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
 801b8a0:	697a      	ldr	r2, [r7, #20]
 801b8a2:	693b      	ldr	r3, [r7, #16]
 801b8a4:	405a      	eors	r2, r3
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	401a      	ands	r2, r3
 801b8aa:	693b      	ldr	r3, [r7, #16]
 801b8ac:	405a      	eors	r2, r3
 801b8ae:	683b      	ldr	r3, [r7, #0]
 801b8b0:	3328      	adds	r3, #40	@ 0x28
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	441a      	add	r2, r3
 801b8b6:	68bb      	ldr	r3, [r7, #8]
 801b8b8:	441a      	add	r2, r3
 801b8ba:	4b54      	ldr	r3, [pc, #336]	@ (801ba0c <mg_md5_transform+0x5b4>)
 801b8bc:	4413      	add	r3, r2
 801b8be:	60bb      	str	r3, [r7, #8]
 801b8c0:	68bb      	ldr	r3, [r7, #8]
 801b8c2:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b8c6:	60bb      	str	r3, [r7, #8]
 801b8c8:	68ba      	ldr	r2, [r7, #8]
 801b8ca:	697b      	ldr	r3, [r7, #20]
 801b8cc:	4413      	add	r3, r2
 801b8ce:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
 801b8d0:	68ba      	ldr	r2, [r7, #8]
 801b8d2:	697b      	ldr	r3, [r7, #20]
 801b8d4:	405a      	eors	r2, r3
 801b8d6:	693b      	ldr	r3, [r7, #16]
 801b8d8:	401a      	ands	r2, r3
 801b8da:	697b      	ldr	r3, [r7, #20]
 801b8dc:	405a      	eors	r2, r3
 801b8de:	683b      	ldr	r3, [r7, #0]
 801b8e0:	333c      	adds	r3, #60	@ 0x3c
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	441a      	add	r2, r3
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	441a      	add	r2, r3
 801b8ea:	4b49      	ldr	r3, [pc, #292]	@ (801ba10 <mg_md5_transform+0x5b8>)
 801b8ec:	4413      	add	r3, r2
 801b8ee:	60fb      	str	r3, [r7, #12]
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b8f6:	60fb      	str	r3, [r7, #12]
 801b8f8:	68fa      	ldr	r2, [r7, #12]
 801b8fa:	68bb      	ldr	r3, [r7, #8]
 801b8fc:	4413      	add	r3, r2
 801b8fe:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
 801b900:	68fa      	ldr	r2, [r7, #12]
 801b902:	68bb      	ldr	r3, [r7, #8]
 801b904:	405a      	eors	r2, r3
 801b906:	697b      	ldr	r3, [r7, #20]
 801b908:	401a      	ands	r2, r3
 801b90a:	68bb      	ldr	r3, [r7, #8]
 801b90c:	405a      	eors	r2, r3
 801b90e:	683b      	ldr	r3, [r7, #0]
 801b910:	3310      	adds	r3, #16
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	441a      	add	r2, r3
 801b916:	693b      	ldr	r3, [r7, #16]
 801b918:	441a      	add	r2, r3
 801b91a:	4b3e      	ldr	r3, [pc, #248]	@ (801ba14 <mg_md5_transform+0x5bc>)
 801b91c:	4413      	add	r3, r2
 801b91e:	613b      	str	r3, [r7, #16]
 801b920:	693b      	ldr	r3, [r7, #16]
 801b922:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b926:	613b      	str	r3, [r7, #16]
 801b928:	693a      	ldr	r2, [r7, #16]
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	4413      	add	r3, r2
 801b92e:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
 801b930:	693a      	ldr	r2, [r7, #16]
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	405a      	eors	r2, r3
 801b936:	68bb      	ldr	r3, [r7, #8]
 801b938:	401a      	ands	r2, r3
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	405a      	eors	r2, r3
 801b93e:	683b      	ldr	r3, [r7, #0]
 801b940:	3324      	adds	r3, #36	@ 0x24
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	441a      	add	r2, r3
 801b946:	697b      	ldr	r3, [r7, #20]
 801b948:	441a      	add	r2, r3
 801b94a:	4b33      	ldr	r3, [pc, #204]	@ (801ba18 <mg_md5_transform+0x5c0>)
 801b94c:	4413      	add	r3, r2
 801b94e:	617b      	str	r3, [r7, #20]
 801b950:	697b      	ldr	r3, [r7, #20]
 801b952:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801b956:	617b      	str	r3, [r7, #20]
 801b958:	697a      	ldr	r2, [r7, #20]
 801b95a:	693b      	ldr	r3, [r7, #16]
 801b95c:	4413      	add	r3, r2
 801b95e:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
 801b960:	697a      	ldr	r2, [r7, #20]
 801b962:	693b      	ldr	r3, [r7, #16]
 801b964:	405a      	eors	r2, r3
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	401a      	ands	r2, r3
 801b96a:	693b      	ldr	r3, [r7, #16]
 801b96c:	405a      	eors	r2, r3
 801b96e:	683b      	ldr	r3, [r7, #0]
 801b970:	3338      	adds	r3, #56	@ 0x38
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	441a      	add	r2, r3
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	441a      	add	r2, r3
 801b97a:	4b28      	ldr	r3, [pc, #160]	@ (801ba1c <mg_md5_transform+0x5c4>)
 801b97c:	4413      	add	r3, r2
 801b97e:	60bb      	str	r3, [r7, #8]
 801b980:	68bb      	ldr	r3, [r7, #8]
 801b982:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801b986:	60bb      	str	r3, [r7, #8]
 801b988:	68ba      	ldr	r2, [r7, #8]
 801b98a:	697b      	ldr	r3, [r7, #20]
 801b98c:	4413      	add	r3, r2
 801b98e:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
 801b990:	68ba      	ldr	r2, [r7, #8]
 801b992:	697b      	ldr	r3, [r7, #20]
 801b994:	405a      	eors	r2, r3
 801b996:	693b      	ldr	r3, [r7, #16]
 801b998:	401a      	ands	r2, r3
 801b99a:	697b      	ldr	r3, [r7, #20]
 801b99c:	405a      	eors	r2, r3
 801b99e:	683b      	ldr	r3, [r7, #0]
 801b9a0:	330c      	adds	r3, #12
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	441a      	add	r2, r3
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	441a      	add	r2, r3
 801b9aa:	4b1d      	ldr	r3, [pc, #116]	@ (801ba20 <mg_md5_transform+0x5c8>)
 801b9ac:	4413      	add	r3, r2
 801b9ae:	60fb      	str	r3, [r7, #12]
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801b9b6:	60fb      	str	r3, [r7, #12]
 801b9b8:	68fa      	ldr	r2, [r7, #12]
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	4413      	add	r3, r2
 801b9be:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
 801b9c0:	68fa      	ldr	r2, [r7, #12]
 801b9c2:	68bb      	ldr	r3, [r7, #8]
 801b9c4:	405a      	eors	r2, r3
 801b9c6:	697b      	ldr	r3, [r7, #20]
 801b9c8:	401a      	ands	r2, r3
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	405a      	eors	r2, r3
 801b9ce:	683b      	ldr	r3, [r7, #0]
 801b9d0:	3320      	adds	r3, #32
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	441a      	add	r2, r3
 801b9d6:	693b      	ldr	r3, [r7, #16]
 801b9d8:	441a      	add	r2, r3
 801b9da:	4b12      	ldr	r3, [pc, #72]	@ (801ba24 <mg_md5_transform+0x5cc>)
 801b9dc:	4413      	add	r3, r2
 801b9de:	613b      	str	r3, [r7, #16]
 801b9e0:	693b      	ldr	r3, [r7, #16]
 801b9e2:	ea4f 3333 	mov.w	r3, r3, ror #12
 801b9e6:	613b      	str	r3, [r7, #16]
 801b9e8:	693a      	ldr	r2, [r7, #16]
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	e01c      	b.n	801ba28 <mg_md5_transform+0x5d0>
 801b9ee:	bf00      	nop
 801b9f0:	a679438e 	.word	0xa679438e
 801b9f4:	49b40821 	.word	0x49b40821
 801b9f8:	f61e2562 	.word	0xf61e2562
 801b9fc:	c040b340 	.word	0xc040b340
 801ba00:	265e5a51 	.word	0x265e5a51
 801ba04:	e9b6c7aa 	.word	0xe9b6c7aa
 801ba08:	d62f105d 	.word	0xd62f105d
 801ba0c:	02441453 	.word	0x02441453
 801ba10:	d8a1e681 	.word	0xd8a1e681
 801ba14:	e7d3fbc8 	.word	0xe7d3fbc8
 801ba18:	21e1cde6 	.word	0x21e1cde6
 801ba1c:	c33707d6 	.word	0xc33707d6
 801ba20:	f4d50d87 	.word	0xf4d50d87
 801ba24:	455a14ed 	.word	0x455a14ed
 801ba28:	4413      	add	r3, r2
 801ba2a:	613b      	str	r3, [r7, #16]
  MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
 801ba2c:	693a      	ldr	r2, [r7, #16]
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	405a      	eors	r2, r3
 801ba32:	68bb      	ldr	r3, [r7, #8]
 801ba34:	401a      	ands	r2, r3
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	405a      	eors	r2, r3
 801ba3a:	683b      	ldr	r3, [r7, #0]
 801ba3c:	3334      	adds	r3, #52	@ 0x34
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	441a      	add	r2, r3
 801ba42:	697b      	ldr	r3, [r7, #20]
 801ba44:	441a      	add	r2, r3
 801ba46:	4ba1      	ldr	r3, [pc, #644]	@ (801bccc <mg_md5_transform+0x874>)
 801ba48:	4413      	add	r3, r2
 801ba4a:	617b      	str	r3, [r7, #20]
 801ba4c:	697b      	ldr	r3, [r7, #20]
 801ba4e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801ba52:	617b      	str	r3, [r7, #20]
 801ba54:	697a      	ldr	r2, [r7, #20]
 801ba56:	693b      	ldr	r3, [r7, #16]
 801ba58:	4413      	add	r3, r2
 801ba5a:	617b      	str	r3, [r7, #20]
  MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
 801ba5c:	697a      	ldr	r2, [r7, #20]
 801ba5e:	693b      	ldr	r3, [r7, #16]
 801ba60:	405a      	eors	r2, r3
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	401a      	ands	r2, r3
 801ba66:	693b      	ldr	r3, [r7, #16]
 801ba68:	405a      	eors	r2, r3
 801ba6a:	683b      	ldr	r3, [r7, #0]
 801ba6c:	3308      	adds	r3, #8
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	441a      	add	r2, r3
 801ba72:	68bb      	ldr	r3, [r7, #8]
 801ba74:	441a      	add	r2, r3
 801ba76:	4b96      	ldr	r3, [pc, #600]	@ (801bcd0 <mg_md5_transform+0x878>)
 801ba78:	4413      	add	r3, r2
 801ba7a:	60bb      	str	r3, [r7, #8]
 801ba7c:	68bb      	ldr	r3, [r7, #8]
 801ba7e:	ea4f 53f3 	mov.w	r3, r3, ror #23
 801ba82:	60bb      	str	r3, [r7, #8]
 801ba84:	68ba      	ldr	r2, [r7, #8]
 801ba86:	697b      	ldr	r3, [r7, #20]
 801ba88:	4413      	add	r3, r2
 801ba8a:	60bb      	str	r3, [r7, #8]
  MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
 801ba8c:	68ba      	ldr	r2, [r7, #8]
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	405a      	eors	r2, r3
 801ba92:	693b      	ldr	r3, [r7, #16]
 801ba94:	401a      	ands	r2, r3
 801ba96:	697b      	ldr	r3, [r7, #20]
 801ba98:	405a      	eors	r2, r3
 801ba9a:	683b      	ldr	r3, [r7, #0]
 801ba9c:	331c      	adds	r3, #28
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	441a      	add	r2, r3
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	441a      	add	r2, r3
 801baa6:	4b8b      	ldr	r3, [pc, #556]	@ (801bcd4 <mg_md5_transform+0x87c>)
 801baa8:	4413      	add	r3, r2
 801baaa:	60fb      	str	r3, [r7, #12]
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801bab2:	60fb      	str	r3, [r7, #12]
 801bab4:	68fa      	ldr	r2, [r7, #12]
 801bab6:	68bb      	ldr	r3, [r7, #8]
 801bab8:	4413      	add	r3, r2
 801baba:	60fb      	str	r3, [r7, #12]
  MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
 801babc:	68fa      	ldr	r2, [r7, #12]
 801babe:	68bb      	ldr	r3, [r7, #8]
 801bac0:	405a      	eors	r2, r3
 801bac2:	697b      	ldr	r3, [r7, #20]
 801bac4:	401a      	ands	r2, r3
 801bac6:	68bb      	ldr	r3, [r7, #8]
 801bac8:	405a      	eors	r2, r3
 801baca:	683b      	ldr	r3, [r7, #0]
 801bacc:	3330      	adds	r3, #48	@ 0x30
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	441a      	add	r2, r3
 801bad2:	693b      	ldr	r3, [r7, #16]
 801bad4:	441a      	add	r2, r3
 801bad6:	4b80      	ldr	r3, [pc, #512]	@ (801bcd8 <mg_md5_transform+0x880>)
 801bad8:	4413      	add	r3, r2
 801bada:	613b      	str	r3, [r7, #16]
 801badc:	693b      	ldr	r3, [r7, #16]
 801bade:	ea4f 3333 	mov.w	r3, r3, ror #12
 801bae2:	613b      	str	r3, [r7, #16]
 801bae4:	693a      	ldr	r2, [r7, #16]
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	4413      	add	r3, r2
 801baea:	613b      	str	r3, [r7, #16]

  MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
 801baec:	693a      	ldr	r2, [r7, #16]
 801baee:	68fb      	ldr	r3, [r7, #12]
 801baf0:	405a      	eors	r2, r3
 801baf2:	68bb      	ldr	r3, [r7, #8]
 801baf4:	405a      	eors	r2, r3
 801baf6:	683b      	ldr	r3, [r7, #0]
 801baf8:	3314      	adds	r3, #20
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	441a      	add	r2, r3
 801bafe:	697b      	ldr	r3, [r7, #20]
 801bb00:	4413      	add	r3, r2
 801bb02:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 801bb06:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 801bb0a:	617b      	str	r3, [r7, #20]
 801bb0c:	697b      	ldr	r3, [r7, #20]
 801bb0e:	ea4f 7333 	mov.w	r3, r3, ror #28
 801bb12:	617b      	str	r3, [r7, #20]
 801bb14:	697a      	ldr	r2, [r7, #20]
 801bb16:	693b      	ldr	r3, [r7, #16]
 801bb18:	4413      	add	r3, r2
 801bb1a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
 801bb1c:	697a      	ldr	r2, [r7, #20]
 801bb1e:	693b      	ldr	r3, [r7, #16]
 801bb20:	405a      	eors	r2, r3
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	405a      	eors	r2, r3
 801bb26:	683b      	ldr	r3, [r7, #0]
 801bb28:	3320      	adds	r3, #32
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	441a      	add	r2, r3
 801bb2e:	68bb      	ldr	r3, [r7, #8]
 801bb30:	441a      	add	r2, r3
 801bb32:	4b6a      	ldr	r3, [pc, #424]	@ (801bcdc <mg_md5_transform+0x884>)
 801bb34:	4413      	add	r3, r2
 801bb36:	60bb      	str	r3, [r7, #8]
 801bb38:	68bb      	ldr	r3, [r7, #8]
 801bb3a:	ea4f 5373 	mov.w	r3, r3, ror #21
 801bb3e:	60bb      	str	r3, [r7, #8]
 801bb40:	68ba      	ldr	r2, [r7, #8]
 801bb42:	697b      	ldr	r3, [r7, #20]
 801bb44:	4413      	add	r3, r2
 801bb46:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
 801bb48:	68ba      	ldr	r2, [r7, #8]
 801bb4a:	697b      	ldr	r3, [r7, #20]
 801bb4c:	405a      	eors	r2, r3
 801bb4e:	693b      	ldr	r3, [r7, #16]
 801bb50:	405a      	eors	r2, r3
 801bb52:	683b      	ldr	r3, [r7, #0]
 801bb54:	332c      	adds	r3, #44	@ 0x2c
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	441a      	add	r2, r3
 801bb5a:	68fb      	ldr	r3, [r7, #12]
 801bb5c:	441a      	add	r2, r3
 801bb5e:	4b60      	ldr	r3, [pc, #384]	@ (801bce0 <mg_md5_transform+0x888>)
 801bb60:	4413      	add	r3, r2
 801bb62:	60fb      	str	r3, [r7, #12]
 801bb64:	68fb      	ldr	r3, [r7, #12]
 801bb66:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bb6a:	60fb      	str	r3, [r7, #12]
 801bb6c:	68fa      	ldr	r2, [r7, #12]
 801bb6e:	68bb      	ldr	r3, [r7, #8]
 801bb70:	4413      	add	r3, r2
 801bb72:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
 801bb74:	68fa      	ldr	r2, [r7, #12]
 801bb76:	68bb      	ldr	r3, [r7, #8]
 801bb78:	405a      	eors	r2, r3
 801bb7a:	697b      	ldr	r3, [r7, #20]
 801bb7c:	405a      	eors	r2, r3
 801bb7e:	683b      	ldr	r3, [r7, #0]
 801bb80:	3338      	adds	r3, #56	@ 0x38
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	441a      	add	r2, r3
 801bb86:	693b      	ldr	r3, [r7, #16]
 801bb88:	441a      	add	r2, r3
 801bb8a:	4b56      	ldr	r3, [pc, #344]	@ (801bce4 <mg_md5_transform+0x88c>)
 801bb8c:	4413      	add	r3, r2
 801bb8e:	613b      	str	r3, [r7, #16]
 801bb90:	693b      	ldr	r3, [r7, #16]
 801bb92:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bb96:	613b      	str	r3, [r7, #16]
 801bb98:	693a      	ldr	r2, [r7, #16]
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	4413      	add	r3, r2
 801bb9e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
 801bba0:	693a      	ldr	r2, [r7, #16]
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	405a      	eors	r2, r3
 801bba6:	68bb      	ldr	r3, [r7, #8]
 801bba8:	405a      	eors	r2, r3
 801bbaa:	683b      	ldr	r3, [r7, #0]
 801bbac:	3304      	adds	r3, #4
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	441a      	add	r2, r3
 801bbb2:	697b      	ldr	r3, [r7, #20]
 801bbb4:	441a      	add	r2, r3
 801bbb6:	4b4c      	ldr	r3, [pc, #304]	@ (801bce8 <mg_md5_transform+0x890>)
 801bbb8:	4413      	add	r3, r2
 801bbba:	617b      	str	r3, [r7, #20]
 801bbbc:	697b      	ldr	r3, [r7, #20]
 801bbbe:	ea4f 7333 	mov.w	r3, r3, ror #28
 801bbc2:	617b      	str	r3, [r7, #20]
 801bbc4:	697a      	ldr	r2, [r7, #20]
 801bbc6:	693b      	ldr	r3, [r7, #16]
 801bbc8:	4413      	add	r3, r2
 801bbca:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
 801bbcc:	697a      	ldr	r2, [r7, #20]
 801bbce:	693b      	ldr	r3, [r7, #16]
 801bbd0:	405a      	eors	r2, r3
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	405a      	eors	r2, r3
 801bbd6:	683b      	ldr	r3, [r7, #0]
 801bbd8:	3310      	adds	r3, #16
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	441a      	add	r2, r3
 801bbde:	68bb      	ldr	r3, [r7, #8]
 801bbe0:	441a      	add	r2, r3
 801bbe2:	4b42      	ldr	r3, [pc, #264]	@ (801bcec <mg_md5_transform+0x894>)
 801bbe4:	4413      	add	r3, r2
 801bbe6:	60bb      	str	r3, [r7, #8]
 801bbe8:	68bb      	ldr	r3, [r7, #8]
 801bbea:	ea4f 5373 	mov.w	r3, r3, ror #21
 801bbee:	60bb      	str	r3, [r7, #8]
 801bbf0:	68ba      	ldr	r2, [r7, #8]
 801bbf2:	697b      	ldr	r3, [r7, #20]
 801bbf4:	4413      	add	r3, r2
 801bbf6:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
 801bbf8:	68ba      	ldr	r2, [r7, #8]
 801bbfa:	697b      	ldr	r3, [r7, #20]
 801bbfc:	405a      	eors	r2, r3
 801bbfe:	693b      	ldr	r3, [r7, #16]
 801bc00:	405a      	eors	r2, r3
 801bc02:	683b      	ldr	r3, [r7, #0]
 801bc04:	331c      	adds	r3, #28
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	441a      	add	r2, r3
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	441a      	add	r2, r3
 801bc0e:	4b38      	ldr	r3, [pc, #224]	@ (801bcf0 <mg_md5_transform+0x898>)
 801bc10:	4413      	add	r3, r2
 801bc12:	60fb      	str	r3, [r7, #12]
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bc1a:	60fb      	str	r3, [r7, #12]
 801bc1c:	68fa      	ldr	r2, [r7, #12]
 801bc1e:	68bb      	ldr	r3, [r7, #8]
 801bc20:	4413      	add	r3, r2
 801bc22:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
 801bc24:	68fa      	ldr	r2, [r7, #12]
 801bc26:	68bb      	ldr	r3, [r7, #8]
 801bc28:	405a      	eors	r2, r3
 801bc2a:	697b      	ldr	r3, [r7, #20]
 801bc2c:	405a      	eors	r2, r3
 801bc2e:	683b      	ldr	r3, [r7, #0]
 801bc30:	3328      	adds	r3, #40	@ 0x28
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	441a      	add	r2, r3
 801bc36:	693b      	ldr	r3, [r7, #16]
 801bc38:	441a      	add	r2, r3
 801bc3a:	4b2e      	ldr	r3, [pc, #184]	@ (801bcf4 <mg_md5_transform+0x89c>)
 801bc3c:	4413      	add	r3, r2
 801bc3e:	613b      	str	r3, [r7, #16]
 801bc40:	693b      	ldr	r3, [r7, #16]
 801bc42:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bc46:	613b      	str	r3, [r7, #16]
 801bc48:	693a      	ldr	r2, [r7, #16]
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	4413      	add	r3, r2
 801bc4e:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
 801bc50:	693a      	ldr	r2, [r7, #16]
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	405a      	eors	r2, r3
 801bc56:	68bb      	ldr	r3, [r7, #8]
 801bc58:	405a      	eors	r2, r3
 801bc5a:	683b      	ldr	r3, [r7, #0]
 801bc5c:	3334      	adds	r3, #52	@ 0x34
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	441a      	add	r2, r3
 801bc62:	697b      	ldr	r3, [r7, #20]
 801bc64:	441a      	add	r2, r3
 801bc66:	4b24      	ldr	r3, [pc, #144]	@ (801bcf8 <mg_md5_transform+0x8a0>)
 801bc68:	4413      	add	r3, r2
 801bc6a:	617b      	str	r3, [r7, #20]
 801bc6c:	697b      	ldr	r3, [r7, #20]
 801bc6e:	ea4f 7333 	mov.w	r3, r3, ror #28
 801bc72:	617b      	str	r3, [r7, #20]
 801bc74:	697a      	ldr	r2, [r7, #20]
 801bc76:	693b      	ldr	r3, [r7, #16]
 801bc78:	4413      	add	r3, r2
 801bc7a:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
 801bc7c:	697a      	ldr	r2, [r7, #20]
 801bc7e:	693b      	ldr	r3, [r7, #16]
 801bc80:	405a      	eors	r2, r3
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	405a      	eors	r2, r3
 801bc86:	683b      	ldr	r3, [r7, #0]
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	441a      	add	r2, r3
 801bc8c:	68bb      	ldr	r3, [r7, #8]
 801bc8e:	441a      	add	r2, r3
 801bc90:	4b1a      	ldr	r3, [pc, #104]	@ (801bcfc <mg_md5_transform+0x8a4>)
 801bc92:	4413      	add	r3, r2
 801bc94:	60bb      	str	r3, [r7, #8]
 801bc96:	68bb      	ldr	r3, [r7, #8]
 801bc98:	ea4f 5373 	mov.w	r3, r3, ror #21
 801bc9c:	60bb      	str	r3, [r7, #8]
 801bc9e:	68ba      	ldr	r2, [r7, #8]
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	4413      	add	r3, r2
 801bca4:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
 801bca6:	68ba      	ldr	r2, [r7, #8]
 801bca8:	697b      	ldr	r3, [r7, #20]
 801bcaa:	405a      	eors	r2, r3
 801bcac:	693b      	ldr	r3, [r7, #16]
 801bcae:	405a      	eors	r2, r3
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	330c      	adds	r3, #12
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	441a      	add	r2, r3
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	441a      	add	r2, r3
 801bcbc:	4b10      	ldr	r3, [pc, #64]	@ (801bd00 <mg_md5_transform+0x8a8>)
 801bcbe:	4413      	add	r3, r2
 801bcc0:	60fb      	str	r3, [r7, #12]
 801bcc2:	68fb      	ldr	r3, [r7, #12]
 801bcc4:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bcc8:	e01c      	b.n	801bd04 <mg_md5_transform+0x8ac>
 801bcca:	bf00      	nop
 801bccc:	a9e3e905 	.word	0xa9e3e905
 801bcd0:	fcefa3f8 	.word	0xfcefa3f8
 801bcd4:	676f02d9 	.word	0x676f02d9
 801bcd8:	8d2a4c8a 	.word	0x8d2a4c8a
 801bcdc:	8771f681 	.word	0x8771f681
 801bce0:	6d9d6122 	.word	0x6d9d6122
 801bce4:	fde5380c 	.word	0xfde5380c
 801bce8:	a4beea44 	.word	0xa4beea44
 801bcec:	4bdecfa9 	.word	0x4bdecfa9
 801bcf0:	f6bb4b60 	.word	0xf6bb4b60
 801bcf4:	bebfbc70 	.word	0xbebfbc70
 801bcf8:	289b7ec6 	.word	0x289b7ec6
 801bcfc:	eaa127fa 	.word	0xeaa127fa
 801bd00:	d4ef3085 	.word	0xd4ef3085
 801bd04:	60fb      	str	r3, [r7, #12]
 801bd06:	68fa      	ldr	r2, [r7, #12]
 801bd08:	68bb      	ldr	r3, [r7, #8]
 801bd0a:	4413      	add	r3, r2
 801bd0c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
 801bd0e:	68fa      	ldr	r2, [r7, #12]
 801bd10:	68bb      	ldr	r3, [r7, #8]
 801bd12:	405a      	eors	r2, r3
 801bd14:	697b      	ldr	r3, [r7, #20]
 801bd16:	405a      	eors	r2, r3
 801bd18:	683b      	ldr	r3, [r7, #0]
 801bd1a:	3318      	adds	r3, #24
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	441a      	add	r2, r3
 801bd20:	693b      	ldr	r3, [r7, #16]
 801bd22:	441a      	add	r2, r3
 801bd24:	4ba1      	ldr	r3, [pc, #644]	@ (801bfac <mg_md5_transform+0xb54>)
 801bd26:	4413      	add	r3, r2
 801bd28:	613b      	str	r3, [r7, #16]
 801bd2a:	693b      	ldr	r3, [r7, #16]
 801bd2c:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bd30:	613b      	str	r3, [r7, #16]
 801bd32:	693a      	ldr	r2, [r7, #16]
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	4413      	add	r3, r2
 801bd38:	613b      	str	r3, [r7, #16]
  MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
 801bd3a:	693a      	ldr	r2, [r7, #16]
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	405a      	eors	r2, r3
 801bd40:	68bb      	ldr	r3, [r7, #8]
 801bd42:	405a      	eors	r2, r3
 801bd44:	683b      	ldr	r3, [r7, #0]
 801bd46:	3324      	adds	r3, #36	@ 0x24
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	441a      	add	r2, r3
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	441a      	add	r2, r3
 801bd50:	4b97      	ldr	r3, [pc, #604]	@ (801bfb0 <mg_md5_transform+0xb58>)
 801bd52:	4413      	add	r3, r2
 801bd54:	617b      	str	r3, [r7, #20]
 801bd56:	697b      	ldr	r3, [r7, #20]
 801bd58:	ea4f 7333 	mov.w	r3, r3, ror #28
 801bd5c:	617b      	str	r3, [r7, #20]
 801bd5e:	697a      	ldr	r2, [r7, #20]
 801bd60:	693b      	ldr	r3, [r7, #16]
 801bd62:	4413      	add	r3, r2
 801bd64:	617b      	str	r3, [r7, #20]
  MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
 801bd66:	697a      	ldr	r2, [r7, #20]
 801bd68:	693b      	ldr	r3, [r7, #16]
 801bd6a:	405a      	eors	r2, r3
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	405a      	eors	r2, r3
 801bd70:	683b      	ldr	r3, [r7, #0]
 801bd72:	3330      	adds	r3, #48	@ 0x30
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	441a      	add	r2, r3
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	441a      	add	r2, r3
 801bd7c:	4b8d      	ldr	r3, [pc, #564]	@ (801bfb4 <mg_md5_transform+0xb5c>)
 801bd7e:	4413      	add	r3, r2
 801bd80:	60bb      	str	r3, [r7, #8]
 801bd82:	68bb      	ldr	r3, [r7, #8]
 801bd84:	ea4f 5373 	mov.w	r3, r3, ror #21
 801bd88:	60bb      	str	r3, [r7, #8]
 801bd8a:	68ba      	ldr	r2, [r7, #8]
 801bd8c:	697b      	ldr	r3, [r7, #20]
 801bd8e:	4413      	add	r3, r2
 801bd90:	60bb      	str	r3, [r7, #8]
  MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
 801bd92:	68ba      	ldr	r2, [r7, #8]
 801bd94:	697b      	ldr	r3, [r7, #20]
 801bd96:	405a      	eors	r2, r3
 801bd98:	693b      	ldr	r3, [r7, #16]
 801bd9a:	405a      	eors	r2, r3
 801bd9c:	683b      	ldr	r3, [r7, #0]
 801bd9e:	333c      	adds	r3, #60	@ 0x3c
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	441a      	add	r2, r3
 801bda4:	68fb      	ldr	r3, [r7, #12]
 801bda6:	441a      	add	r2, r3
 801bda8:	4b83      	ldr	r3, [pc, #524]	@ (801bfb8 <mg_md5_transform+0xb60>)
 801bdaa:	4413      	add	r3, r2
 801bdac:	60fb      	str	r3, [r7, #12]
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801bdb4:	60fb      	str	r3, [r7, #12]
 801bdb6:	68fa      	ldr	r2, [r7, #12]
 801bdb8:	68bb      	ldr	r3, [r7, #8]
 801bdba:	4413      	add	r3, r2
 801bdbc:	60fb      	str	r3, [r7, #12]
  MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
 801bdbe:	68fa      	ldr	r2, [r7, #12]
 801bdc0:	68bb      	ldr	r3, [r7, #8]
 801bdc2:	405a      	eors	r2, r3
 801bdc4:	697b      	ldr	r3, [r7, #20]
 801bdc6:	405a      	eors	r2, r3
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	3308      	adds	r3, #8
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	441a      	add	r2, r3
 801bdd0:	693b      	ldr	r3, [r7, #16]
 801bdd2:	441a      	add	r2, r3
 801bdd4:	4b79      	ldr	r3, [pc, #484]	@ (801bfbc <mg_md5_transform+0xb64>)
 801bdd6:	4413      	add	r3, r2
 801bdd8:	613b      	str	r3, [r7, #16]
 801bdda:	693b      	ldr	r3, [r7, #16]
 801bddc:	ea4f 2373 	mov.w	r3, r3, ror #9
 801bde0:	613b      	str	r3, [r7, #16]
 801bde2:	693a      	ldr	r2, [r7, #16]
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	4413      	add	r3, r2
 801bde8:	613b      	str	r3, [r7, #16]

  MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
 801bdea:	68bb      	ldr	r3, [r7, #8]
 801bdec:	43da      	mvns	r2, r3
 801bdee:	693b      	ldr	r3, [r7, #16]
 801bdf0:	431a      	orrs	r2, r3
 801bdf2:	68fb      	ldr	r3, [r7, #12]
 801bdf4:	405a      	eors	r2, r3
 801bdf6:	683b      	ldr	r3, [r7, #0]
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	441a      	add	r2, r3
 801bdfc:	697b      	ldr	r3, [r7, #20]
 801bdfe:	441a      	add	r2, r3
 801be00:	4b6f      	ldr	r3, [pc, #444]	@ (801bfc0 <mg_md5_transform+0xb68>)
 801be02:	4413      	add	r3, r2
 801be04:	617b      	str	r3, [r7, #20]
 801be06:	697b      	ldr	r3, [r7, #20]
 801be08:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801be0c:	617b      	str	r3, [r7, #20]
 801be0e:	697a      	ldr	r2, [r7, #20]
 801be10:	693b      	ldr	r3, [r7, #16]
 801be12:	4413      	add	r3, r2
 801be14:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	43da      	mvns	r2, r3
 801be1a:	697b      	ldr	r3, [r7, #20]
 801be1c:	431a      	orrs	r2, r3
 801be1e:	693b      	ldr	r3, [r7, #16]
 801be20:	405a      	eors	r2, r3
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	331c      	adds	r3, #28
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	441a      	add	r2, r3
 801be2a:	68bb      	ldr	r3, [r7, #8]
 801be2c:	441a      	add	r2, r3
 801be2e:	4b65      	ldr	r3, [pc, #404]	@ (801bfc4 <mg_md5_transform+0xb6c>)
 801be30:	4413      	add	r3, r2
 801be32:	60bb      	str	r3, [r7, #8]
 801be34:	68bb      	ldr	r3, [r7, #8]
 801be36:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801be3a:	60bb      	str	r3, [r7, #8]
 801be3c:	68ba      	ldr	r2, [r7, #8]
 801be3e:	697b      	ldr	r3, [r7, #20]
 801be40:	4413      	add	r3, r2
 801be42:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
 801be44:	693b      	ldr	r3, [r7, #16]
 801be46:	43da      	mvns	r2, r3
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	431a      	orrs	r2, r3
 801be4c:	697b      	ldr	r3, [r7, #20]
 801be4e:	405a      	eors	r2, r3
 801be50:	683b      	ldr	r3, [r7, #0]
 801be52:	3338      	adds	r3, #56	@ 0x38
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	441a      	add	r2, r3
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	441a      	add	r2, r3
 801be5c:	4b5a      	ldr	r3, [pc, #360]	@ (801bfc8 <mg_md5_transform+0xb70>)
 801be5e:	4413      	add	r3, r2
 801be60:	60fb      	str	r3, [r7, #12]
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	ea4f 4373 	mov.w	r3, r3, ror #17
 801be68:	60fb      	str	r3, [r7, #12]
 801be6a:	68fa      	ldr	r2, [r7, #12]
 801be6c:	68bb      	ldr	r3, [r7, #8]
 801be6e:	4413      	add	r3, r2
 801be70:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
 801be72:	697b      	ldr	r3, [r7, #20]
 801be74:	43da      	mvns	r2, r3
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	431a      	orrs	r2, r3
 801be7a:	68bb      	ldr	r3, [r7, #8]
 801be7c:	405a      	eors	r2, r3
 801be7e:	683b      	ldr	r3, [r7, #0]
 801be80:	3314      	adds	r3, #20
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	441a      	add	r2, r3
 801be86:	693b      	ldr	r3, [r7, #16]
 801be88:	441a      	add	r2, r3
 801be8a:	4b50      	ldr	r3, [pc, #320]	@ (801bfcc <mg_md5_transform+0xb74>)
 801be8c:	4413      	add	r3, r2
 801be8e:	613b      	str	r3, [r7, #16]
 801be90:	693b      	ldr	r3, [r7, #16]
 801be92:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801be96:	613b      	str	r3, [r7, #16]
 801be98:	693a      	ldr	r2, [r7, #16]
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	4413      	add	r3, r2
 801be9e:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
 801bea0:	68bb      	ldr	r3, [r7, #8]
 801bea2:	43da      	mvns	r2, r3
 801bea4:	693b      	ldr	r3, [r7, #16]
 801bea6:	431a      	orrs	r2, r3
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	405a      	eors	r2, r3
 801beac:	683b      	ldr	r3, [r7, #0]
 801beae:	3330      	adds	r3, #48	@ 0x30
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	441a      	add	r2, r3
 801beb4:	697b      	ldr	r3, [r7, #20]
 801beb6:	441a      	add	r2, r3
 801beb8:	4b45      	ldr	r3, [pc, #276]	@ (801bfd0 <mg_md5_transform+0xb78>)
 801beba:	4413      	add	r3, r2
 801bebc:	617b      	str	r3, [r7, #20]
 801bebe:	697b      	ldr	r3, [r7, #20]
 801bec0:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bec4:	617b      	str	r3, [r7, #20]
 801bec6:	697a      	ldr	r2, [r7, #20]
 801bec8:	693b      	ldr	r3, [r7, #16]
 801beca:	4413      	add	r3, r2
 801becc:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	43da      	mvns	r2, r3
 801bed2:	697b      	ldr	r3, [r7, #20]
 801bed4:	431a      	orrs	r2, r3
 801bed6:	693b      	ldr	r3, [r7, #16]
 801bed8:	405a      	eors	r2, r3
 801beda:	683b      	ldr	r3, [r7, #0]
 801bedc:	330c      	adds	r3, #12
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	441a      	add	r2, r3
 801bee2:	68bb      	ldr	r3, [r7, #8]
 801bee4:	441a      	add	r2, r3
 801bee6:	4b3b      	ldr	r3, [pc, #236]	@ (801bfd4 <mg_md5_transform+0xb7c>)
 801bee8:	4413      	add	r3, r2
 801beea:	60bb      	str	r3, [r7, #8]
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bef2:	60bb      	str	r3, [r7, #8]
 801bef4:	68ba      	ldr	r2, [r7, #8]
 801bef6:	697b      	ldr	r3, [r7, #20]
 801bef8:	4413      	add	r3, r2
 801befa:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
 801befc:	693b      	ldr	r3, [r7, #16]
 801befe:	43da      	mvns	r2, r3
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	431a      	orrs	r2, r3
 801bf04:	697b      	ldr	r3, [r7, #20]
 801bf06:	405a      	eors	r2, r3
 801bf08:	683b      	ldr	r3, [r7, #0]
 801bf0a:	3328      	adds	r3, #40	@ 0x28
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	441a      	add	r2, r3
 801bf10:	68fb      	ldr	r3, [r7, #12]
 801bf12:	4413      	add	r3, r2
 801bf14:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801bf18:	f6a3 3383 	subw	r3, r3, #2947	@ 0xb83
 801bf1c:	60fb      	str	r3, [r7, #12]
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	ea4f 4373 	mov.w	r3, r3, ror #17
 801bf24:	60fb      	str	r3, [r7, #12]
 801bf26:	68fa      	ldr	r2, [r7, #12]
 801bf28:	68bb      	ldr	r3, [r7, #8]
 801bf2a:	4413      	add	r3, r2
 801bf2c:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
 801bf2e:	697b      	ldr	r3, [r7, #20]
 801bf30:	43da      	mvns	r2, r3
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	431a      	orrs	r2, r3
 801bf36:	68bb      	ldr	r3, [r7, #8]
 801bf38:	405a      	eors	r2, r3
 801bf3a:	683b      	ldr	r3, [r7, #0]
 801bf3c:	3304      	adds	r3, #4
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	441a      	add	r2, r3
 801bf42:	693b      	ldr	r3, [r7, #16]
 801bf44:	441a      	add	r2, r3
 801bf46:	4b24      	ldr	r3, [pc, #144]	@ (801bfd8 <mg_md5_transform+0xb80>)
 801bf48:	4413      	add	r3, r2
 801bf4a:	613b      	str	r3, [r7, #16]
 801bf4c:	693b      	ldr	r3, [r7, #16]
 801bf4e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801bf52:	613b      	str	r3, [r7, #16]
 801bf54:	693a      	ldr	r2, [r7, #16]
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	4413      	add	r3, r2
 801bf5a:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
 801bf5c:	68bb      	ldr	r3, [r7, #8]
 801bf5e:	43da      	mvns	r2, r3
 801bf60:	693b      	ldr	r3, [r7, #16]
 801bf62:	431a      	orrs	r2, r3
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	405a      	eors	r2, r3
 801bf68:	683b      	ldr	r3, [r7, #0]
 801bf6a:	3320      	adds	r3, #32
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	441a      	add	r2, r3
 801bf70:	697b      	ldr	r3, [r7, #20]
 801bf72:	441a      	add	r2, r3
 801bf74:	4b19      	ldr	r3, [pc, #100]	@ (801bfdc <mg_md5_transform+0xb84>)
 801bf76:	4413      	add	r3, r2
 801bf78:	617b      	str	r3, [r7, #20]
 801bf7a:	697b      	ldr	r3, [r7, #20]
 801bf7c:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801bf80:	617b      	str	r3, [r7, #20]
 801bf82:	697a      	ldr	r2, [r7, #20]
 801bf84:	693b      	ldr	r3, [r7, #16]
 801bf86:	4413      	add	r3, r2
 801bf88:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	43da      	mvns	r2, r3
 801bf8e:	697b      	ldr	r3, [r7, #20]
 801bf90:	431a      	orrs	r2, r3
 801bf92:	693b      	ldr	r3, [r7, #16]
 801bf94:	405a      	eors	r2, r3
 801bf96:	683b      	ldr	r3, [r7, #0]
 801bf98:	333c      	adds	r3, #60	@ 0x3c
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	441a      	add	r2, r3
 801bf9e:	68bb      	ldr	r3, [r7, #8]
 801bfa0:	441a      	add	r2, r3
 801bfa2:	4b0f      	ldr	r3, [pc, #60]	@ (801bfe0 <mg_md5_transform+0xb88>)
 801bfa4:	4413      	add	r3, r2
 801bfa6:	60bb      	str	r3, [r7, #8]
 801bfa8:	68bb      	ldr	r3, [r7, #8]
 801bfaa:	e01b      	b.n	801bfe4 <mg_md5_transform+0xb8c>
 801bfac:	04881d05 	.word	0x04881d05
 801bfb0:	d9d4d039 	.word	0xd9d4d039
 801bfb4:	e6db99e5 	.word	0xe6db99e5
 801bfb8:	1fa27cf8 	.word	0x1fa27cf8
 801bfbc:	c4ac5665 	.word	0xc4ac5665
 801bfc0:	f4292244 	.word	0xf4292244
 801bfc4:	432aff97 	.word	0x432aff97
 801bfc8:	ab9423a7 	.word	0xab9423a7
 801bfcc:	fc93a039 	.word	0xfc93a039
 801bfd0:	655b59c3 	.word	0x655b59c3
 801bfd4:	8f0ccc92 	.word	0x8f0ccc92
 801bfd8:	85845dd1 	.word	0x85845dd1
 801bfdc:	6fa87e4f 	.word	0x6fa87e4f
 801bfe0:	fe2ce6e0 	.word	0xfe2ce6e0
 801bfe4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801bfe8:	60bb      	str	r3, [r7, #8]
 801bfea:	68ba      	ldr	r2, [r7, #8]
 801bfec:	697b      	ldr	r3, [r7, #20]
 801bfee:	4413      	add	r3, r2
 801bff0:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
 801bff2:	693b      	ldr	r3, [r7, #16]
 801bff4:	43da      	mvns	r2, r3
 801bff6:	68bb      	ldr	r3, [r7, #8]
 801bff8:	431a      	orrs	r2, r3
 801bffa:	697b      	ldr	r3, [r7, #20]
 801bffc:	405a      	eors	r2, r3
 801bffe:	683b      	ldr	r3, [r7, #0]
 801c000:	3318      	adds	r3, #24
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	441a      	add	r2, r3
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	441a      	add	r2, r3
 801c00a:	4b51      	ldr	r3, [pc, #324]	@ (801c150 <mg_md5_transform+0xcf8>)
 801c00c:	4413      	add	r3, r2
 801c00e:	60fb      	str	r3, [r7, #12]
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c016:	60fb      	str	r3, [r7, #12]
 801c018:	68fa      	ldr	r2, [r7, #12]
 801c01a:	68bb      	ldr	r3, [r7, #8]
 801c01c:	4413      	add	r3, r2
 801c01e:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
 801c020:	697b      	ldr	r3, [r7, #20]
 801c022:	43da      	mvns	r2, r3
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	431a      	orrs	r2, r3
 801c028:	68bb      	ldr	r3, [r7, #8]
 801c02a:	405a      	eors	r2, r3
 801c02c:	683b      	ldr	r3, [r7, #0]
 801c02e:	3334      	adds	r3, #52	@ 0x34
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	441a      	add	r2, r3
 801c034:	693b      	ldr	r3, [r7, #16]
 801c036:	441a      	add	r2, r3
 801c038:	4b46      	ldr	r3, [pc, #280]	@ (801c154 <mg_md5_transform+0xcfc>)
 801c03a:	4413      	add	r3, r2
 801c03c:	613b      	str	r3, [r7, #16]
 801c03e:	693b      	ldr	r3, [r7, #16]
 801c040:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801c044:	613b      	str	r3, [r7, #16]
 801c046:	693a      	ldr	r2, [r7, #16]
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	4413      	add	r3, r2
 801c04c:	613b      	str	r3, [r7, #16]
  MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
 801c04e:	68bb      	ldr	r3, [r7, #8]
 801c050:	43da      	mvns	r2, r3
 801c052:	693b      	ldr	r3, [r7, #16]
 801c054:	431a      	orrs	r2, r3
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	405a      	eors	r2, r3
 801c05a:	683b      	ldr	r3, [r7, #0]
 801c05c:	3310      	adds	r3, #16
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	441a      	add	r2, r3
 801c062:	697b      	ldr	r3, [r7, #20]
 801c064:	441a      	add	r2, r3
 801c066:	4b3c      	ldr	r3, [pc, #240]	@ (801c158 <mg_md5_transform+0xd00>)
 801c068:	4413      	add	r3, r2
 801c06a:	617b      	str	r3, [r7, #20]
 801c06c:	697b      	ldr	r3, [r7, #20]
 801c06e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 801c072:	617b      	str	r3, [r7, #20]
 801c074:	697a      	ldr	r2, [r7, #20]
 801c076:	693b      	ldr	r3, [r7, #16]
 801c078:	4413      	add	r3, r2
 801c07a:	617b      	str	r3, [r7, #20]
  MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	43da      	mvns	r2, r3
 801c080:	697b      	ldr	r3, [r7, #20]
 801c082:	431a      	orrs	r2, r3
 801c084:	693b      	ldr	r3, [r7, #16]
 801c086:	405a      	eors	r2, r3
 801c088:	683b      	ldr	r3, [r7, #0]
 801c08a:	332c      	adds	r3, #44	@ 0x2c
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	441a      	add	r2, r3
 801c090:	68bb      	ldr	r3, [r7, #8]
 801c092:	441a      	add	r2, r3
 801c094:	4b31      	ldr	r3, [pc, #196]	@ (801c15c <mg_md5_transform+0xd04>)
 801c096:	4413      	add	r3, r2
 801c098:	60bb      	str	r3, [r7, #8]
 801c09a:	68bb      	ldr	r3, [r7, #8]
 801c09c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801c0a0:	60bb      	str	r3, [r7, #8]
 801c0a2:	68ba      	ldr	r2, [r7, #8]
 801c0a4:	697b      	ldr	r3, [r7, #20]
 801c0a6:	4413      	add	r3, r2
 801c0a8:	60bb      	str	r3, [r7, #8]
  MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
 801c0aa:	693b      	ldr	r3, [r7, #16]
 801c0ac:	43da      	mvns	r2, r3
 801c0ae:	68bb      	ldr	r3, [r7, #8]
 801c0b0:	431a      	orrs	r2, r3
 801c0b2:	697b      	ldr	r3, [r7, #20]
 801c0b4:	405a      	eors	r2, r3
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	3308      	adds	r3, #8
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	441a      	add	r2, r3
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	441a      	add	r2, r3
 801c0c2:	4b27      	ldr	r3, [pc, #156]	@ (801c160 <mg_md5_transform+0xd08>)
 801c0c4:	4413      	add	r3, r2
 801c0c6:	60fb      	str	r3, [r7, #12]
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	ea4f 4373 	mov.w	r3, r3, ror #17
 801c0ce:	60fb      	str	r3, [r7, #12]
 801c0d0:	68fa      	ldr	r2, [r7, #12]
 801c0d2:	68bb      	ldr	r3, [r7, #8]
 801c0d4:	4413      	add	r3, r2
 801c0d6:	60fb      	str	r3, [r7, #12]
  MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
 801c0d8:	697b      	ldr	r3, [r7, #20]
 801c0da:	43da      	mvns	r2, r3
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	431a      	orrs	r2, r3
 801c0e0:	68bb      	ldr	r3, [r7, #8]
 801c0e2:	405a      	eors	r2, r3
 801c0e4:	683b      	ldr	r3, [r7, #0]
 801c0e6:	3324      	adds	r3, #36	@ 0x24
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	441a      	add	r2, r3
 801c0ec:	693b      	ldr	r3, [r7, #16]
 801c0ee:	441a      	add	r2, r3
 801c0f0:	4b1c      	ldr	r3, [pc, #112]	@ (801c164 <mg_md5_transform+0xd0c>)
 801c0f2:	4413      	add	r3, r2
 801c0f4:	613b      	str	r3, [r7, #16]
 801c0f6:	693b      	ldr	r3, [r7, #16]
 801c0f8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801c0fc:	613b      	str	r3, [r7, #16]
 801c0fe:	693a      	ldr	r2, [r7, #16]
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	4413      	add	r3, r2
 801c104:	613b      	str	r3, [r7, #16]

  buf[0] += a;
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681a      	ldr	r2, [r3, #0]
 801c10a:	697b      	ldr	r3, [r7, #20]
 801c10c:	441a      	add	r2, r3
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	601a      	str	r2, [r3, #0]
  buf[1] += b;
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	3304      	adds	r3, #4
 801c116:	6819      	ldr	r1, [r3, #0]
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	3304      	adds	r3, #4
 801c11c:	693a      	ldr	r2, [r7, #16]
 801c11e:	440a      	add	r2, r1
 801c120:	601a      	str	r2, [r3, #0]
  buf[2] += c;
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	3308      	adds	r3, #8
 801c126:	6819      	ldr	r1, [r3, #0]
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	3308      	adds	r3, #8
 801c12c:	68fa      	ldr	r2, [r7, #12]
 801c12e:	440a      	add	r2, r1
 801c130:	601a      	str	r2, [r3, #0]
  buf[3] += d;
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	330c      	adds	r3, #12
 801c136:	6819      	ldr	r1, [r3, #0]
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	330c      	adds	r3, #12
 801c13c:	68ba      	ldr	r2, [r7, #8]
 801c13e:	440a      	add	r2, r1
 801c140:	601a      	str	r2, [r3, #0]
}
 801c142:	bf00      	nop
 801c144:	371c      	adds	r7, #28
 801c146:	46bd      	mov	sp, r7
 801c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c14c:	4770      	bx	lr
 801c14e:	bf00      	nop
 801c150:	a3014314 	.word	0xa3014314
 801c154:	4e0811a1 	.word	0x4e0811a1
 801c158:	f7537e82 	.word	0xf7537e82
 801c15c:	bd3af235 	.word	0xbd3af235
 801c160:	2ad7d2bb 	.word	0x2ad7d2bb
 801c164:	eb86d391 	.word	0xeb86d391

0801c168 <mg_md5_update>:

void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {
 801c168:	b580      	push	{r7, lr}
 801c16a:	b086      	sub	sp, #24
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	60f8      	str	r0, [r7, #12]
 801c170:	60b9      	str	r1, [r7, #8]
 801c172:	607a      	str	r2, [r7, #4]
  uint32_t t;

  t = ctx->bits[0];
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	691b      	ldr	r3, [r3, #16]
 801c178:	617b      	str	r3, [r7, #20]
  if ((ctx->bits[0] = t + ((uint32_t) len << 3)) < t) ctx->bits[1]++;
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	00da      	lsls	r2, r3, #3
 801c17e:	697b      	ldr	r3, [r7, #20]
 801c180:	441a      	add	r2, r3
 801c182:	68fb      	ldr	r3, [r7, #12]
 801c184:	611a      	str	r2, [r3, #16]
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	691b      	ldr	r3, [r3, #16]
 801c18a:	697a      	ldr	r2, [r7, #20]
 801c18c:	429a      	cmp	r2, r3
 801c18e:	d904      	bls.n	801c19a <mg_md5_update+0x32>
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	695b      	ldr	r3, [r3, #20]
 801c194:	1c5a      	adds	r2, r3, #1
 801c196:	68fb      	ldr	r3, [r7, #12]
 801c198:	615a      	str	r2, [r3, #20]
  ctx->bits[1] += (uint32_t) len >> 29;
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	695a      	ldr	r2, [r3, #20]
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	0f5b      	lsrs	r3, r3, #29
 801c1a2:	441a      	add	r2, r3
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	615a      	str	r2, [r3, #20]

  t = (t >> 3) & 0x3f;
 801c1a8:	697b      	ldr	r3, [r7, #20]
 801c1aa:	08db      	lsrs	r3, r3, #3
 801c1ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c1b0:	617b      	str	r3, [r7, #20]

  if (t) {
 801c1b2:	697b      	ldr	r3, [r7, #20]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d048      	beq.n	801c24a <mg_md5_update+0xe2>
    unsigned char *p = (unsigned char *) ctx->in + t;
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	f103 0218 	add.w	r2, r3, #24
 801c1be:	697b      	ldr	r3, [r7, #20]
 801c1c0:	4413      	add	r3, r2
 801c1c2:	613b      	str	r3, [r7, #16]

    t = 64 - t;
 801c1c4:	697b      	ldr	r3, [r7, #20]
 801c1c6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 801c1ca:	617b      	str	r3, [r7, #20]
    if (len < t) {
 801c1cc:	687a      	ldr	r2, [r7, #4]
 801c1ce:	697b      	ldr	r3, [r7, #20]
 801c1d0:	429a      	cmp	r2, r3
 801c1d2:	d205      	bcs.n	801c1e0 <mg_md5_update+0x78>
      memcpy(p, buf, len);
 801c1d4:	687a      	ldr	r2, [r7, #4]
 801c1d6:	68b9      	ldr	r1, [r7, #8]
 801c1d8:	6938      	ldr	r0, [r7, #16]
 801c1da:	f00a fff5 	bl	80271c8 <memcpy>
      return;
 801c1de:	e03e      	b.n	801c25e <mg_md5_update+0xf6>
    }
    memcpy(p, buf, t);
 801c1e0:	697a      	ldr	r2, [r7, #20]
 801c1e2:	68b9      	ldr	r1, [r7, #8]
 801c1e4:	6938      	ldr	r0, [r7, #16]
 801c1e6:	f00a ffef 	bl	80271c8 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	3318      	adds	r3, #24
 801c1ee:	2110      	movs	r1, #16
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	f7ff f8dd 	bl	801b3b0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801c1f6:	68fa      	ldr	r2, [r7, #12]
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	3318      	adds	r3, #24
 801c1fc:	4619      	mov	r1, r3
 801c1fe:	4610      	mov	r0, r2
 801c200:	f7ff f92a 	bl	801b458 <mg_md5_transform>
    buf += t;
 801c204:	68ba      	ldr	r2, [r7, #8]
 801c206:	697b      	ldr	r3, [r7, #20]
 801c208:	4413      	add	r3, r2
 801c20a:	60bb      	str	r3, [r7, #8]
    len -= t;
 801c20c:	687a      	ldr	r2, [r7, #4]
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	1ad3      	subs	r3, r2, r3
 801c212:	607b      	str	r3, [r7, #4]
  }

  while (len >= 64) {
 801c214:	e019      	b.n	801c24a <mg_md5_update+0xe2>
    memcpy(ctx->in, buf, 64);
 801c216:	68fb      	ldr	r3, [r7, #12]
 801c218:	3318      	adds	r3, #24
 801c21a:	2240      	movs	r2, #64	@ 0x40
 801c21c:	68b9      	ldr	r1, [r7, #8]
 801c21e:	4618      	mov	r0, r3
 801c220:	f00a ffd2 	bl	80271c8 <memcpy>
    mg_byte_reverse(ctx->in, 16);
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	3318      	adds	r3, #24
 801c228:	2110      	movs	r1, #16
 801c22a:	4618      	mov	r0, r3
 801c22c:	f7ff f8c0 	bl	801b3b0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801c230:	68fa      	ldr	r2, [r7, #12]
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	3318      	adds	r3, #24
 801c236:	4619      	mov	r1, r3
 801c238:	4610      	mov	r0, r2
 801c23a:	f7ff f90d 	bl	801b458 <mg_md5_transform>
    buf += 64;
 801c23e:	68bb      	ldr	r3, [r7, #8]
 801c240:	3340      	adds	r3, #64	@ 0x40
 801c242:	60bb      	str	r3, [r7, #8]
    len -= 64;
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	3b40      	subs	r3, #64	@ 0x40
 801c248:	607b      	str	r3, [r7, #4]
  while (len >= 64) {
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	2b3f      	cmp	r3, #63	@ 0x3f
 801c24e:	d8e2      	bhi.n	801c216 <mg_md5_update+0xae>
  }

  memcpy(ctx->in, buf, len);
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	3318      	adds	r3, #24
 801c254:	687a      	ldr	r2, [r7, #4]
 801c256:	68b9      	ldr	r1, [r7, #8]
 801c258:	4618      	mov	r0, r3
 801c25a:	f00a ffb5 	bl	80271c8 <memcpy>
}
 801c25e:	3718      	adds	r7, #24
 801c260:	46bd      	mov	sp, r7
 801c262:	bd80      	pop	{r7, pc}

0801c264 <mg_md5_final>:

void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {
 801c264:	b580      	push	{r7, lr}
 801c266:	b086      	sub	sp, #24
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
 801c26c:	6039      	str	r1, [r7, #0]
  unsigned count;
  unsigned char *p;
  uint32_t *a;

  count = (ctx->bits[0] >> 3) & 0x3F;
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	691b      	ldr	r3, [r3, #16]
 801c272:	08db      	lsrs	r3, r3, #3
 801c274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c278:	617b      	str	r3, [r7, #20]

  p = ctx->in + count;
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	f103 0218 	add.w	r2, r3, #24
 801c280:	697b      	ldr	r3, [r7, #20]
 801c282:	4413      	add	r3, r2
 801c284:	613b      	str	r3, [r7, #16]
  *p++ = 0x80;
 801c286:	693b      	ldr	r3, [r7, #16]
 801c288:	1c5a      	adds	r2, r3, #1
 801c28a:	613a      	str	r2, [r7, #16]
 801c28c:	2280      	movs	r2, #128	@ 0x80
 801c28e:	701a      	strb	r2, [r3, #0]
  count = 64 - 1 - count;
 801c290:	697b      	ldr	r3, [r7, #20]
 801c292:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 801c296:	617b      	str	r3, [r7, #20]
  if (count < 8) {
 801c298:	697b      	ldr	r3, [r7, #20]
 801c29a:	2b07      	cmp	r3, #7
 801c29c:	d819      	bhi.n	801c2d2 <mg_md5_final+0x6e>
    memset(p, 0, count);
 801c29e:	697a      	ldr	r2, [r7, #20]
 801c2a0:	2100      	movs	r1, #0
 801c2a2:	6938      	ldr	r0, [r7, #16]
 801c2a4:	f009 fd54 	bl	8025d50 <memset>
    mg_byte_reverse(ctx->in, 16);
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	3318      	adds	r3, #24
 801c2ac:	2110      	movs	r1, #16
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	f7ff f87e 	bl	801b3b0 <mg_byte_reverse>
    mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801c2b4:	687a      	ldr	r2, [r7, #4]
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	3318      	adds	r3, #24
 801c2ba:	4619      	mov	r1, r3
 801c2bc:	4610      	mov	r0, r2
 801c2be:	f7ff f8cb 	bl	801b458 <mg_md5_transform>
    memset(ctx->in, 0, 56);
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	3318      	adds	r3, #24
 801c2c6:	2238      	movs	r2, #56	@ 0x38
 801c2c8:	2100      	movs	r1, #0
 801c2ca:	4618      	mov	r0, r3
 801c2cc:	f009 fd40 	bl	8025d50 <memset>
 801c2d0:	e006      	b.n	801c2e0 <mg_md5_final+0x7c>
  } else {
    memset(p, 0, count - 8);
 801c2d2:	697b      	ldr	r3, [r7, #20]
 801c2d4:	3b08      	subs	r3, #8
 801c2d6:	461a      	mov	r2, r3
 801c2d8:	2100      	movs	r1, #0
 801c2da:	6938      	ldr	r0, [r7, #16]
 801c2dc:	f009 fd38 	bl	8025d50 <memset>
  }
  mg_byte_reverse(ctx->in, 14);
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	3318      	adds	r3, #24
 801c2e4:	210e      	movs	r1, #14
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	f7ff f862 	bl	801b3b0 <mg_byte_reverse>

  a = (uint32_t *) ctx->in;
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	3318      	adds	r3, #24
 801c2f0:	60fb      	str	r3, [r7, #12]
  a[14] = ctx->bits[0];
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	3338      	adds	r3, #56	@ 0x38
 801c2f6:	687a      	ldr	r2, [r7, #4]
 801c2f8:	6912      	ldr	r2, [r2, #16]
 801c2fa:	601a      	str	r2, [r3, #0]
  a[15] = ctx->bits[1];
 801c2fc:	68fb      	ldr	r3, [r7, #12]
 801c2fe:	333c      	adds	r3, #60	@ 0x3c
 801c300:	687a      	ldr	r2, [r7, #4]
 801c302:	6952      	ldr	r2, [r2, #20]
 801c304:	601a      	str	r2, [r3, #0]

  mg_md5_transform(ctx->buf, (uint32_t *) ctx->in);
 801c306:	687a      	ldr	r2, [r7, #4]
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	3318      	adds	r3, #24
 801c30c:	4619      	mov	r1, r3
 801c30e:	4610      	mov	r0, r2
 801c310:	f7ff f8a2 	bl	801b458 <mg_md5_transform>
  mg_byte_reverse((unsigned char *) ctx->buf, 4);
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	2104      	movs	r1, #4
 801c318:	4618      	mov	r0, r3
 801c31a:	f7ff f849 	bl	801b3b0 <mg_byte_reverse>
  memcpy(digest, ctx->buf, 16);
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	2210      	movs	r2, #16
 801c322:	4619      	mov	r1, r3
 801c324:	6838      	ldr	r0, [r7, #0]
 801c326:	f00a ff4f 	bl	80271c8 <memcpy>
  memset((char *) ctx, 0, sizeof(*ctx));
 801c32a:	2258      	movs	r2, #88	@ 0x58
 801c32c:	2100      	movs	r1, #0
 801c32e:	6878      	ldr	r0, [r7, #4]
 801c330:	f009 fd0e 	bl	8025d50 <memset>
}
 801c334:	bf00      	nop
 801c336:	3718      	adds	r7, #24
 801c338:	46bd      	mov	sp, r7
 801c33a:	bd80      	pop	{r7, pc}

0801c33c <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b088      	sub	sp, #32
 801c340:	af00      	add	r7, sp, #0
 801c342:	60f8      	str	r0, [r7, #12]
 801c344:	607b      	str	r3, [r7, #4]
 801c346:	460b      	mov	r3, r1
 801c348:	72fb      	strb	r3, [r7, #11]
 801c34a:	4613      	mov	r3, r2
 801c34c:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 801c34e:	f107 0314 	add.w	r3, r7, #20
 801c352:	3301      	adds	r3, #1
 801c354:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 801c356:	7afb      	ldrb	r3, [r7, #11]
 801c358:	011b      	lsls	r3, r3, #4
 801c35a:	b25a      	sxtb	r2, r3
 801c35c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801c360:	4313      	orrs	r3, r2
 801c362:	b25b      	sxtb	r3, r3
 801c364:	b2db      	uxtb	r3, r3
 801c366:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	b2db      	uxtb	r3, r3
 801c36c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c370:	b2da      	uxtb	r2, r3
 801c372:	69fb      	ldr	r3, [r7, #28]
 801c374:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	09db      	lsrs	r3, r3, #7
 801c37a:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d006      	beq.n	801c390 <mg_mqtt_send_header+0x54>
 801c382:	69fb      	ldr	r3, [r7, #28]
 801c384:	781b      	ldrb	r3, [r3, #0]
 801c386:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c38a:	b2da      	uxtb	r2, r3
 801c38c:	69fb      	ldr	r3, [r7, #28]
 801c38e:	701a      	strb	r2, [r3, #0]
    vlen++;
 801c390:	69fb      	ldr	r3, [r7, #28]
 801c392:	3301      	adds	r3, #1
 801c394:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d005      	beq.n	801c3a8 <mg_mqtt_send_header+0x6c>
 801c39c:	f107 0314 	add.w	r3, r7, #20
 801c3a0:	3305      	adds	r3, #5
 801c3a2:	69fa      	ldr	r2, [r7, #28]
 801c3a4:	429a      	cmp	r2, r3
 801c3a6:	d3df      	bcc.n	801c368 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 801c3a8:	f107 0314 	add.w	r3, r7, #20
 801c3ac:	69fa      	ldr	r2, [r7, #28]
 801c3ae:	1ad3      	subs	r3, r2, r3
 801c3b0:	461a      	mov	r2, r3
 801c3b2:	f107 0314 	add.w	r3, r7, #20
 801c3b6:	4619      	mov	r1, r3
 801c3b8:	68f8      	ldr	r0, [r7, #12]
 801c3ba:	f004 fded 	bl	8020f98 <mg_send>
}
 801c3be:	bf00      	nop
 801c3c0:	3720      	adds	r7, #32
 801c3c2:	46bd      	mov	sp, r7
 801c3c4:	bd80      	pop	{r7, pc}

0801c3c6 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 801c3c6:	b580      	push	{r7, lr}
 801c3c8:	b082      	sub	sp, #8
 801c3ca:	af00      	add	r7, sp, #0
 801c3cc:	6078      	str	r0, [r7, #4]
 801c3ce:	460b      	mov	r3, r1
 801c3d0:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 801c3d2:	1cbb      	adds	r3, r7, #2
 801c3d4:	2202      	movs	r2, #2
 801c3d6:	4619      	mov	r1, r3
 801c3d8:	6878      	ldr	r0, [r7, #4]
 801c3da:	f004 fddd 	bl	8020f98 <mg_send>
}
 801c3de:	bf00      	nop
 801c3e0:	3708      	adds	r7, #8
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	bd80      	pop	{r7, pc}

0801c3e6 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 801c3e6:	b580      	push	{r7, lr}
 801c3e8:	b082      	sub	sp, #8
 801c3ea:	af00      	add	r7, sp, #0
 801c3ec:	6078      	str	r0, [r7, #4]
 801c3ee:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 801c3f0:	463b      	mov	r3, r7
 801c3f2:	2204      	movs	r2, #4
 801c3f4:	4619      	mov	r1, r3
 801c3f6:	6878      	ldr	r0, [r7, #4]
 801c3f8:	f004 fdce 	bl	8020f98 <mg_send>
}
 801c3fc:	bf00      	nop
 801c3fe:	3708      	adds	r7, #8
 801c400:	46bd      	mov	sp, r7
 801c402:	bd80      	pop	{r7, pc}

0801c404 <varint_size>:

static uint8_t varint_size(size_t length) {
 801c404:	b480      	push	{r7}
 801c406:	b085      	sub	sp, #20
 801c408:	af00      	add	r7, sp, #0
 801c40a:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 801c40c:	2300      	movs	r3, #0
 801c40e:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 801c410:	7bfb      	ldrb	r3, [r7, #15]
 801c412:	3301      	adds	r3, #1
 801c414:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	09db      	lsrs	r3, r3, #7
 801c41a:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d1f6      	bne.n	801c410 <varint_size+0xc>
  return bytes_needed;
 801c422:	7bfb      	ldrb	r3, [r7, #15]
}
 801c424:	4618      	mov	r0, r3
 801c426:	3714      	adds	r7, #20
 801c428:	46bd      	mov	sp, r7
 801c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c42e:	4770      	bx	lr

0801c430 <encode_varint>:

static size_t encode_varint(uint8_t *buf, size_t value) {
 801c430:	b480      	push	{r7}
 801c432:	b085      	sub	sp, #20
 801c434:	af00      	add	r7, sp, #0
 801c436:	6078      	str	r0, [r7, #4]
 801c438:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 801c43a:	2300      	movs	r3, #0
 801c43c:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t b = (uint8_t) (value % 128);
 801c43e:	683b      	ldr	r3, [r7, #0]
 801c440:	b2db      	uxtb	r3, r3
 801c442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c446:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 801c448:	683b      	ldr	r3, [r7, #0]
 801c44a:	09db      	lsrs	r3, r3, #7
 801c44c:	603b      	str	r3, [r7, #0]
    if (value > 0) b |= 0x80;
 801c44e:	683b      	ldr	r3, [r7, #0]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d003      	beq.n	801c45c <encode_varint+0x2c>
 801c454:	7afb      	ldrb	r3, [r7, #11]
 801c456:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c45a:	72fb      	strb	r3, [r7, #11]
    buf[len++] = b;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	1c5a      	adds	r2, r3, #1
 801c460:	60fa      	str	r2, [r7, #12]
 801c462:	687a      	ldr	r2, [r7, #4]
 801c464:	4413      	add	r3, r2
 801c466:	7afa      	ldrb	r2, [r7, #11]
 801c468:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 801c46a:	683b      	ldr	r3, [r7, #0]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d1e6      	bne.n	801c43e <encode_varint+0xe>

  return len;
 801c470:	68fb      	ldr	r3, [r7, #12]
}
 801c472:	4618      	mov	r0, r3
 801c474:	3714      	adds	r7, #20
 801c476:	46bd      	mov	sp, r7
 801c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c47c:	4770      	bx	lr

0801c47e <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 801c47e:	b480      	push	{r7}
 801c480:	b089      	sub	sp, #36	@ 0x24
 801c482:	af00      	add	r7, sp, #0
 801c484:	60f8      	str	r0, [r7, #12]
 801c486:	60b9      	str	r1, [r7, #8]
 801c488:	607a      	str	r2, [r7, #4]
  size_t multiplier = 1, offset;
 801c48a:	2301      	movs	r3, #1
 801c48c:	61fb      	str	r3, [r7, #28]
  *value = 0;
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	2200      	movs	r2, #0
 801c492:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 801c494:	2300      	movs	r3, #0
 801c496:	61bb      	str	r3, [r7, #24]
 801c498:	e01c      	b.n	801c4d4 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 801c49a:	68fa      	ldr	r2, [r7, #12]
 801c49c:	69bb      	ldr	r3, [r7, #24]
 801c49e:	4413      	add	r3, r2
 801c4a0:	781b      	ldrb	r3, [r3, #0]
 801c4a2:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7f) * multiplier;
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	681a      	ldr	r2, [r3, #0]
 801c4a8:	7dfb      	ldrb	r3, [r7, #23]
 801c4aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c4ae:	69f9      	ldr	r1, [r7, #28]
 801c4b0:	fb01 f303 	mul.w	r3, r1, r3
 801c4b4:	441a      	add	r2, r3
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 801c4ba:	69fb      	ldr	r3, [r7, #28]
 801c4bc:	01db      	lsls	r3, r3, #7
 801c4be:	61fb      	str	r3, [r7, #28]

    if ((encoded_byte & 0x80) == 0) return offset + 1;
 801c4c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	db02      	blt.n	801c4ce <decode_varint+0x50>
 801c4c8:	69bb      	ldr	r3, [r7, #24]
 801c4ca:	3301      	adds	r3, #1
 801c4cc:	e00a      	b.n	801c4e4 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 801c4ce:	69bb      	ldr	r3, [r7, #24]
 801c4d0:	3301      	adds	r3, #1
 801c4d2:	61bb      	str	r3, [r7, #24]
 801c4d4:	69bb      	ldr	r3, [r7, #24]
 801c4d6:	2b03      	cmp	r3, #3
 801c4d8:	d803      	bhi.n	801c4e2 <decode_varint+0x64>
 801c4da:	69ba      	ldr	r2, [r7, #24]
 801c4dc:	68bb      	ldr	r3, [r7, #8]
 801c4de:	429a      	cmp	r2, r3
 801c4e0:	d3db      	bcc.n	801c49a <decode_varint+0x1c>
  }

  return 0;
 801c4e2:	2300      	movs	r3, #0
}
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	3724      	adds	r7, #36	@ 0x24
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ee:	4770      	bx	lr

0801c4f0 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 801c4f0:	b480      	push	{r7}
 801c4f2:	b085      	sub	sp, #20
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	4603      	mov	r3, r0
 801c4f8:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 801c4fa:	231b      	movs	r3, #27
 801c4fc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 801c4fe:	2300      	movs	r3, #0
 801c500:	60fb      	str	r3, [r7, #12]
 801c502:	e00f      	b.n	801c524 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 801c504:	4a0d      	ldr	r2, [pc, #52]	@ (801c53c <mqtt_prop_type_by_id+0x4c>)
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801c50c:	79fa      	ldrb	r2, [r7, #7]
 801c50e:	429a      	cmp	r2, r3
 801c510:	d105      	bne.n	801c51e <mqtt_prop_type_by_id+0x2e>
 801c512:	4a0a      	ldr	r2, [pc, #40]	@ (801c53c <mqtt_prop_type_by_id+0x4c>)
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	005b      	lsls	r3, r3, #1
 801c518:	4413      	add	r3, r2
 801c51a:	785b      	ldrb	r3, [r3, #1]
 801c51c:	e008      	b.n	801c530 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	3301      	adds	r3, #1
 801c522:	60fb      	str	r3, [r7, #12]
 801c524:	68fa      	ldr	r2, [r7, #12]
 801c526:	68bb      	ldr	r3, [r7, #8]
 801c528:	429a      	cmp	r2, r3
 801c52a:	d3eb      	bcc.n	801c504 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 801c52c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801c530:	4618      	mov	r0, r3
 801c532:	3714      	adds	r7, #20
 801c534:	46bd      	mov	sp, r7
 801c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c53a:	4770      	bx	lr
 801c53c:	08034458 	.word	0x08034458

0801c540 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 801c540:	b580      	push	{r7, lr}
 801c542:	b084      	sub	sp, #16
 801c544:	af00      	add	r7, sp, #0
 801c546:	6078      	str	r0, [r7, #4]
 801c548:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 801c54a:	2300      	movs	r3, #0
 801c54c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 801c54e:	2300      	movs	r3, #0
 801c550:	60fb      	str	r3, [r7, #12]
 801c552:	e07a      	b.n	801c64a <get_properties_length+0x10a>
    size++;  // identifier
 801c554:	68bb      	ldr	r3, [r7, #8]
 801c556:	3301      	adds	r3, #1
 801c558:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801c55a:	68fa      	ldr	r2, [r7, #12]
 801c55c:	4613      	mov	r3, r2
 801c55e:	005b      	lsls	r3, r3, #1
 801c560:	4413      	add	r3, r2
 801c562:	00db      	lsls	r3, r3, #3
 801c564:	461a      	mov	r2, r3
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	4413      	add	r3, r2
 801c56a:	781b      	ldrb	r3, [r3, #0]
 801c56c:	4618      	mov	r0, r3
 801c56e:	f7ff ffbf 	bl	801c4f0 <mqtt_prop_type_by_id>
 801c572:	4603      	mov	r3, r0
 801c574:	2b06      	cmp	r3, #6
 801c576:	d863      	bhi.n	801c640 <get_properties_length+0x100>
 801c578:	a201      	add	r2, pc, #4	@ (adr r2, 801c580 <get_properties_length+0x40>)
 801c57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c57e:	bf00      	nop
 801c580:	0801c639 	.word	0x0801c639
 801c584:	0801c5cd 	.word	0x0801c5cd
 801c588:	0801c59d 	.word	0x0801c59d
 801c58c:	0801c5e9 	.word	0x0801c5e9
 801c590:	0801c605 	.word	0x0801c605
 801c594:	0801c629 	.word	0x0801c629
 801c598:	0801c631 	.word	0x0801c631
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 801c59c:	68fa      	ldr	r2, [r7, #12]
 801c59e:	4613      	mov	r3, r2
 801c5a0:	005b      	lsls	r3, r3, #1
 801c5a2:	4413      	add	r3, r2
 801c5a4:	00db      	lsls	r3, r3, #3
 801c5a6:	461a      	mov	r2, r3
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	4413      	add	r3, r2
 801c5ac:	6959      	ldr	r1, [r3, #20]
 801c5ae:	68fa      	ldr	r2, [r7, #12]
 801c5b0:	4613      	mov	r3, r2
 801c5b2:	005b      	lsls	r3, r3, #1
 801c5b4:	4413      	add	r3, r2
 801c5b6:	00db      	lsls	r3, r3, #3
 801c5b8:	461a      	mov	r2, r3
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	4413      	add	r3, r2
 801c5be:	68db      	ldr	r3, [r3, #12]
 801c5c0:	18ca      	adds	r2, r1, r3
 801c5c2:	68bb      	ldr	r3, [r7, #8]
 801c5c4:	4413      	add	r3, r2
 801c5c6:	3304      	adds	r3, #4
 801c5c8:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 801c5ca:	e03b      	b.n	801c644 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801c5cc:	68fa      	ldr	r2, [r7, #12]
 801c5ce:	4613      	mov	r3, r2
 801c5d0:	005b      	lsls	r3, r3, #1
 801c5d2:	4413      	add	r3, r2
 801c5d4:	00db      	lsls	r3, r3, #3
 801c5d6:	461a      	mov	r2, r3
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	4413      	add	r3, r2
 801c5dc:	695a      	ldr	r2, [r3, #20]
 801c5de:	68bb      	ldr	r3, [r7, #8]
 801c5e0:	4413      	add	r3, r2
 801c5e2:	3302      	adds	r3, #2
 801c5e4:	60bb      	str	r3, [r7, #8]
        break;
 801c5e6:	e02d      	b.n	801c644 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 801c5e8:	68fa      	ldr	r2, [r7, #12]
 801c5ea:	4613      	mov	r3, r2
 801c5ec:	005b      	lsls	r3, r3, #1
 801c5ee:	4413      	add	r3, r2
 801c5f0:	00db      	lsls	r3, r3, #3
 801c5f2:	461a      	mov	r2, r3
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	4413      	add	r3, r2
 801c5f8:	695a      	ldr	r2, [r3, #20]
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	4413      	add	r3, r2
 801c5fe:	3302      	adds	r3, #2
 801c600:	60bb      	str	r3, [r7, #8]
        break;
 801c602:	e01f      	b.n	801c644 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += varint_size((uint32_t) props[i].iv);
 801c604:	68fa      	ldr	r2, [r7, #12]
 801c606:	4613      	mov	r3, r2
 801c608:	005b      	lsls	r3, r3, #1
 801c60a:	4413      	add	r3, r2
 801c60c:	00db      	lsls	r3, r3, #3
 801c60e:	461a      	mov	r2, r3
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	4413      	add	r3, r2
 801c614:	685b      	ldr	r3, [r3, #4]
 801c616:	4618      	mov	r0, r3
 801c618:	f7ff fef4 	bl	801c404 <varint_size>
 801c61c:	4603      	mov	r3, r0
 801c61e:	461a      	mov	r2, r3
 801c620:	68bb      	ldr	r3, [r7, #8]
 801c622:	4413      	add	r3, r2
 801c624:	60bb      	str	r3, [r7, #8]
        break;
 801c626:	e00d      	b.n	801c644 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 801c628:	68bb      	ldr	r3, [r7, #8]
 801c62a:	3304      	adds	r3, #4
 801c62c:	60bb      	str	r3, [r7, #8]
        break;
 801c62e:	e009      	b.n	801c644 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 801c630:	68bb      	ldr	r3, [r7, #8]
 801c632:	3302      	adds	r3, #2
 801c634:	60bb      	str	r3, [r7, #8]
        break;
 801c636:	e005      	b.n	801c644 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 801c638:	68bb      	ldr	r3, [r7, #8]
 801c63a:	3301      	adds	r3, #1
 801c63c:	60bb      	str	r3, [r7, #8]
        break;
 801c63e:	e001      	b.n	801c644 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 801c640:	68bb      	ldr	r3, [r7, #8]
 801c642:	e007      	b.n	801c654 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	3301      	adds	r3, #1
 801c648:	60fb      	str	r3, [r7, #12]
 801c64a:	68fa      	ldr	r2, [r7, #12]
 801c64c:	683b      	ldr	r3, [r7, #0]
 801c64e:	429a      	cmp	r2, r3
 801c650:	d380      	bcc.n	801c554 <get_properties_length+0x14>
    }
  }

  return size;
 801c652:	68bb      	ldr	r3, [r7, #8]
}
 801c654:	4618      	mov	r0, r3
 801c656:	3710      	adds	r7, #16
 801c658:	46bd      	mov	sp, r7
 801c65a:	bd80      	pop	{r7, pc}

0801c65c <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 801c65c:	b580      	push	{r7, lr}
 801c65e:	b084      	sub	sp, #16
 801c660:	af00      	add	r7, sp, #0
 801c662:	6078      	str	r0, [r7, #4]
 801c664:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 801c666:	6839      	ldr	r1, [r7, #0]
 801c668:	6878      	ldr	r0, [r7, #4]
 801c66a:	f7ff ff69 	bl	801c540 <get_properties_length>
 801c66e:	60f8      	str	r0, [r7, #12]
  size += varint_size(size);
 801c670:	68f8      	ldr	r0, [r7, #12]
 801c672:	f7ff fec7 	bl	801c404 <varint_size>
 801c676:	4603      	mov	r3, r0
 801c678:	461a      	mov	r2, r3
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	4413      	add	r3, r2
 801c67e:	60fb      	str	r3, [r7, #12]
  return size;
 801c680:	68fb      	ldr	r3, [r7, #12]
}
 801c682:	4618      	mov	r0, r3
 801c684:	3710      	adds	r7, #16
 801c686:	46bd      	mov	sp, r7
 801c688:	bd80      	pop	{r7, pc}
	...

0801c68c <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 801c68c:	b580      	push	{r7, lr}
 801c68e:	b08a      	sub	sp, #40	@ 0x28
 801c690:	af00      	add	r7, sp, #0
 801c692:	60f8      	str	r0, [r7, #12]
 801c694:	60b9      	str	r1, [r7, #8]
 801c696:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 801c698:	6879      	ldr	r1, [r7, #4]
 801c69a:	68b8      	ldr	r0, [r7, #8]
 801c69c:	f7ff ff50 	bl	801c540 <get_properties_length>
 801c6a0:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 801c6a2:	2300      	movs	r3, #0
 801c6a4:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	617b      	str	r3, [r7, #20]
  size_t i, len = encode_varint(buf, total_size);
 801c6aa:	f107 0314 	add.w	r3, r7, #20
 801c6ae:	6a39      	ldr	r1, [r7, #32]
 801c6b0:	4618      	mov	r0, r3
 801c6b2:	f7ff febd 	bl	801c430 <encode_varint>
 801c6b6:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 801c6b8:	f107 0314 	add.w	r3, r7, #20
 801c6bc:	69fa      	ldr	r2, [r7, #28]
 801c6be:	4619      	mov	r1, r3
 801c6c0:	68f8      	ldr	r0, [r7, #12]
 801c6c2:	f004 fc69 	bl	8020f98 <mg_send>
  for (i = 0; i < nprops; i++) {
 801c6c6:	2300      	movs	r3, #0
 801c6c8:	627b      	str	r3, [r7, #36]	@ 0x24
 801c6ca:	e11f      	b.n	801c90c <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 801c6cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6ce:	4613      	mov	r3, r2
 801c6d0:	005b      	lsls	r3, r3, #1
 801c6d2:	4413      	add	r3, r2
 801c6d4:	00db      	lsls	r3, r3, #3
 801c6d6:	461a      	mov	r2, r3
 801c6d8:	68bb      	ldr	r3, [r7, #8]
 801c6da:	4413      	add	r3, r2
 801c6dc:	2201      	movs	r2, #1
 801c6de:	4619      	mov	r1, r3
 801c6e0:	68f8      	ldr	r0, [r7, #12]
 801c6e2:	f004 fc59 	bl	8020f98 <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 801c6e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c6e8:	4613      	mov	r3, r2
 801c6ea:	005b      	lsls	r3, r3, #1
 801c6ec:	4413      	add	r3, r2
 801c6ee:	00db      	lsls	r3, r3, #3
 801c6f0:	461a      	mov	r2, r3
 801c6f2:	68bb      	ldr	r3, [r7, #8]
 801c6f4:	4413      	add	r3, r2
 801c6f6:	781b      	ldrb	r3, [r3, #0]
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	f7ff fef9 	bl	801c4f0 <mqtt_prop_type_by_id>
 801c6fe:	4603      	mov	r3, r0
 801c700:	2b06      	cmp	r3, #6
 801c702:	f200 8100 	bhi.w	801c906 <mg_send_mqtt_properties+0x27a>
 801c706:	a201      	add	r2, pc, #4	@ (adr r2, 801c70c <mg_send_mqtt_properties+0x80>)
 801c708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c70c:	0801c7cb 	.word	0x0801c7cb
 801c710:	0801c833 	.word	0x0801c833
 801c714:	0801c729 	.word	0x0801c729
 801c718:	0801c885 	.word	0x0801c885
 801c71c:	0801c8d7 	.word	0x0801c8d7
 801c720:	0801c80f 	.word	0x0801c80f
 801c724:	0801c7e9 	.word	0x0801c7e9
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 801c728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c72a:	4613      	mov	r3, r2
 801c72c:	005b      	lsls	r3, r3, #1
 801c72e:	4413      	add	r3, r2
 801c730:	00db      	lsls	r3, r3, #3
 801c732:	461a      	mov	r2, r3
 801c734:	68bb      	ldr	r3, [r7, #8]
 801c736:	4413      	add	r3, r2
 801c738:	68db      	ldr	r3, [r3, #12]
 801c73a:	b29b      	uxth	r3, r3
 801c73c:	4618      	mov	r0, r3
 801c73e:	f006 f9a4 	bl	8022a8a <mg_ntohs>
 801c742:	4603      	mov	r3, r0
 801c744:	4619      	mov	r1, r3
 801c746:	68f8      	ldr	r0, [r7, #12]
 801c748:	f7ff fe3d 	bl	801c3c6 <mg_send_u16>
        mg_send(c, props[i].key.buf, props[i].key.len);
 801c74c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c74e:	4613      	mov	r3, r2
 801c750:	005b      	lsls	r3, r3, #1
 801c752:	4413      	add	r3, r2
 801c754:	00db      	lsls	r3, r3, #3
 801c756:	461a      	mov	r2, r3
 801c758:	68bb      	ldr	r3, [r7, #8]
 801c75a:	4413      	add	r3, r2
 801c75c:	6899      	ldr	r1, [r3, #8]
 801c75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c760:	4613      	mov	r3, r2
 801c762:	005b      	lsls	r3, r3, #1
 801c764:	4413      	add	r3, r2
 801c766:	00db      	lsls	r3, r3, #3
 801c768:	461a      	mov	r2, r3
 801c76a:	68bb      	ldr	r3, [r7, #8]
 801c76c:	4413      	add	r3, r2
 801c76e:	68db      	ldr	r3, [r3, #12]
 801c770:	461a      	mov	r2, r3
 801c772:	68f8      	ldr	r0, [r7, #12]
 801c774:	f004 fc10 	bl	8020f98 <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c77a:	4613      	mov	r3, r2
 801c77c:	005b      	lsls	r3, r3, #1
 801c77e:	4413      	add	r3, r2
 801c780:	00db      	lsls	r3, r3, #3
 801c782:	461a      	mov	r2, r3
 801c784:	68bb      	ldr	r3, [r7, #8]
 801c786:	4413      	add	r3, r2
 801c788:	695b      	ldr	r3, [r3, #20]
 801c78a:	b29b      	uxth	r3, r3
 801c78c:	4618      	mov	r0, r3
 801c78e:	f006 f97c 	bl	8022a8a <mg_ntohs>
 801c792:	4603      	mov	r3, r0
 801c794:	4619      	mov	r1, r3
 801c796:	68f8      	ldr	r0, [r7, #12]
 801c798:	f7ff fe15 	bl	801c3c6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c79c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c79e:	4613      	mov	r3, r2
 801c7a0:	005b      	lsls	r3, r3, #1
 801c7a2:	4413      	add	r3, r2
 801c7a4:	00db      	lsls	r3, r3, #3
 801c7a6:	461a      	mov	r2, r3
 801c7a8:	68bb      	ldr	r3, [r7, #8]
 801c7aa:	4413      	add	r3, r2
 801c7ac:	6919      	ldr	r1, [r3, #16]
 801c7ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c7b0:	4613      	mov	r3, r2
 801c7b2:	005b      	lsls	r3, r3, #1
 801c7b4:	4413      	add	r3, r2
 801c7b6:	00db      	lsls	r3, r3, #3
 801c7b8:	461a      	mov	r2, r3
 801c7ba:	68bb      	ldr	r3, [r7, #8]
 801c7bc:	4413      	add	r3, r2
 801c7be:	695b      	ldr	r3, [r3, #20]
 801c7c0:	461a      	mov	r2, r3
 801c7c2:	68f8      	ldr	r0, [r7, #12]
 801c7c4:	f004 fbe8 	bl	8020f98 <mg_send>
        break;
 801c7c8:	e09d      	b.n	801c906 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 801c7ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c7cc:	4613      	mov	r3, r2
 801c7ce:	005b      	lsls	r3, r3, #1
 801c7d0:	4413      	add	r3, r2
 801c7d2:	00db      	lsls	r3, r3, #3
 801c7d4:	461a      	mov	r2, r3
 801c7d6:	68bb      	ldr	r3, [r7, #8]
 801c7d8:	4413      	add	r3, r2
 801c7da:	3304      	adds	r3, #4
 801c7dc:	2201      	movs	r2, #1
 801c7de:	4619      	mov	r1, r3
 801c7e0:	68f8      	ldr	r0, [r7, #12]
 801c7e2:	f004 fbd9 	bl	8020f98 <mg_send>
        break;
 801c7e6:	e08e      	b.n	801c906 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 801c7e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c7ea:	4613      	mov	r3, r2
 801c7ec:	005b      	lsls	r3, r3, #1
 801c7ee:	4413      	add	r3, r2
 801c7f0:	00db      	lsls	r3, r3, #3
 801c7f2:	461a      	mov	r2, r3
 801c7f4:	68bb      	ldr	r3, [r7, #8]
 801c7f6:	4413      	add	r3, r2
 801c7f8:	685b      	ldr	r3, [r3, #4]
 801c7fa:	b29b      	uxth	r3, r3
 801c7fc:	4618      	mov	r0, r3
 801c7fe:	f006 f944 	bl	8022a8a <mg_ntohs>
 801c802:	4603      	mov	r3, r0
 801c804:	4619      	mov	r1, r3
 801c806:	68f8      	ldr	r0, [r7, #12]
 801c808:	f7ff fddd 	bl	801c3c6 <mg_send_u16>
        break;
 801c80c:	e07b      	b.n	801c906 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 801c80e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c810:	4613      	mov	r3, r2
 801c812:	005b      	lsls	r3, r3, #1
 801c814:	4413      	add	r3, r2
 801c816:	00db      	lsls	r3, r3, #3
 801c818:	461a      	mov	r2, r3
 801c81a:	68bb      	ldr	r3, [r7, #8]
 801c81c:	4413      	add	r3, r2
 801c81e:	685b      	ldr	r3, [r3, #4]
 801c820:	4618      	mov	r0, r3
 801c822:	f006 f919 	bl	8022a58 <mg_ntohl>
 801c826:	4603      	mov	r3, r0
 801c828:	4619      	mov	r1, r3
 801c82a:	68f8      	ldr	r0, [r7, #12]
 801c82c:	f7ff fddb 	bl	801c3e6 <mg_send_u32>
        break;
 801c830:	e069      	b.n	801c906 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c834:	4613      	mov	r3, r2
 801c836:	005b      	lsls	r3, r3, #1
 801c838:	4413      	add	r3, r2
 801c83a:	00db      	lsls	r3, r3, #3
 801c83c:	461a      	mov	r2, r3
 801c83e:	68bb      	ldr	r3, [r7, #8]
 801c840:	4413      	add	r3, r2
 801c842:	695b      	ldr	r3, [r3, #20]
 801c844:	b29b      	uxth	r3, r3
 801c846:	4618      	mov	r0, r3
 801c848:	f006 f91f 	bl	8022a8a <mg_ntohs>
 801c84c:	4603      	mov	r3, r0
 801c84e:	4619      	mov	r1, r3
 801c850:	68f8      	ldr	r0, [r7, #12]
 801c852:	f7ff fdb8 	bl	801c3c6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c858:	4613      	mov	r3, r2
 801c85a:	005b      	lsls	r3, r3, #1
 801c85c:	4413      	add	r3, r2
 801c85e:	00db      	lsls	r3, r3, #3
 801c860:	461a      	mov	r2, r3
 801c862:	68bb      	ldr	r3, [r7, #8]
 801c864:	4413      	add	r3, r2
 801c866:	6919      	ldr	r1, [r3, #16]
 801c868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c86a:	4613      	mov	r3, r2
 801c86c:	005b      	lsls	r3, r3, #1
 801c86e:	4413      	add	r3, r2
 801c870:	00db      	lsls	r3, r3, #3
 801c872:	461a      	mov	r2, r3
 801c874:	68bb      	ldr	r3, [r7, #8]
 801c876:	4413      	add	r3, r2
 801c878:	695b      	ldr	r3, [r3, #20]
 801c87a:	461a      	mov	r2, r3
 801c87c:	68f8      	ldr	r0, [r7, #12]
 801c87e:	f004 fb8b 	bl	8020f98 <mg_send>
        break;
 801c882:	e040      	b.n	801c906 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 801c884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c886:	4613      	mov	r3, r2
 801c888:	005b      	lsls	r3, r3, #1
 801c88a:	4413      	add	r3, r2
 801c88c:	00db      	lsls	r3, r3, #3
 801c88e:	461a      	mov	r2, r3
 801c890:	68bb      	ldr	r3, [r7, #8]
 801c892:	4413      	add	r3, r2
 801c894:	695b      	ldr	r3, [r3, #20]
 801c896:	b29b      	uxth	r3, r3
 801c898:	4618      	mov	r0, r3
 801c89a:	f006 f8f6 	bl	8022a8a <mg_ntohs>
 801c89e:	4603      	mov	r3, r0
 801c8a0:	4619      	mov	r1, r3
 801c8a2:	68f8      	ldr	r0, [r7, #12]
 801c8a4:	f7ff fd8f 	bl	801c3c6 <mg_send_u16>
        mg_send(c, props[i].val.buf, props[i].val.len);
 801c8a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c8aa:	4613      	mov	r3, r2
 801c8ac:	005b      	lsls	r3, r3, #1
 801c8ae:	4413      	add	r3, r2
 801c8b0:	00db      	lsls	r3, r3, #3
 801c8b2:	461a      	mov	r2, r3
 801c8b4:	68bb      	ldr	r3, [r7, #8]
 801c8b6:	4413      	add	r3, r2
 801c8b8:	6919      	ldr	r1, [r3, #16]
 801c8ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c8bc:	4613      	mov	r3, r2
 801c8be:	005b      	lsls	r3, r3, #1
 801c8c0:	4413      	add	r3, r2
 801c8c2:	00db      	lsls	r3, r3, #3
 801c8c4:	461a      	mov	r2, r3
 801c8c6:	68bb      	ldr	r3, [r7, #8]
 801c8c8:	4413      	add	r3, r2
 801c8ca:	695b      	ldr	r3, [r3, #20]
 801c8cc:	461a      	mov	r2, r3
 801c8ce:	68f8      	ldr	r0, [r7, #12]
 801c8d0:	f004 fb62 	bl	8020f98 <mg_send>
        break;
 801c8d4:	e017      	b.n	801c906 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_varint(buf_v, props[i].iv);
 801c8d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c8d8:	4613      	mov	r3, r2
 801c8da:	005b      	lsls	r3, r3, #1
 801c8dc:	4413      	add	r3, r2
 801c8de:	00db      	lsls	r3, r3, #3
 801c8e0:	461a      	mov	r2, r3
 801c8e2:	68bb      	ldr	r3, [r7, #8]
 801c8e4:	4413      	add	r3, r2
 801c8e6:	685a      	ldr	r2, [r3, #4]
 801c8e8:	f107 0318 	add.w	r3, r7, #24
 801c8ec:	4611      	mov	r1, r2
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f7ff fd9e 	bl	801c430 <encode_varint>
 801c8f4:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 801c8f6:	f107 0318 	add.w	r3, r7, #24
 801c8fa:	69fa      	ldr	r2, [r7, #28]
 801c8fc:	4619      	mov	r1, r3
 801c8fe:	68f8      	ldr	r0, [r7, #12]
 801c900:	f004 fb4a 	bl	8020f98 <mg_send>
        break;
 801c904:	bf00      	nop
  for (i = 0; i < nprops; i++) {
 801c906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c908:	3301      	adds	r3, #1
 801c90a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c90c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	429a      	cmp	r2, r3
 801c912:	f4ff aedb 	bcc.w	801c6cc <mg_send_mqtt_properties+0x40>
    }
  }
}
 801c916:	bf00      	nop
 801c918:	bf00      	nop
 801c91a:	3728      	adds	r7, #40	@ 0x28
 801c91c:	46bd      	mov	sp, r7
 801c91e:	bd80      	pop	{r7, pc}

0801c920 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801c920:	b580      	push	{r7, lr}
 801c922:	b08e      	sub	sp, #56	@ 0x38
 801c924:	af00      	add	r7, sp, #0
 801c926:	6078      	str	r0, [r7, #4]
 801c928:	6039      	str	r1, [r7, #0]
  char client_id[21];
  struct mg_str cid = opts->client_id;
 801c92a:	683a      	ldr	r2, [r7, #0]
 801c92c:	f107 0314 	add.w	r3, r7, #20
 801c930:	3210      	adds	r2, #16
 801c932:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c936:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 801c93a:	230c      	movs	r3, #12
 801c93c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 801c93e:	2300      	movs	r3, #0
 801c940:	733b      	strb	r3, [r7, #12]
 801c942:	2304      	movs	r3, #4
 801c944:	737b      	strb	r3, [r7, #13]
 801c946:	234d      	movs	r3, #77	@ 0x4d
 801c948:	73bb      	strb	r3, [r7, #14]
 801c94a:	2351      	movs	r3, #81	@ 0x51
 801c94c:	73fb      	strb	r3, [r7, #15]
 801c94e:	2354      	movs	r3, #84	@ 0x54
 801c950:	743b      	strb	r3, [r7, #16]
 801c952:	2354      	movs	r3, #84	@ 0x54
 801c954:	747b      	strb	r3, [r7, #17]
 801c956:	683b      	ldr	r3, [r7, #0]
 801c958:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801c95c:	74bb      	strb	r3, [r7, #18]
 801c95e:	2300      	movs	r3, #0
 801c960:	74fb      	strb	r3, [r7, #19]

  if (cid.len == 0) {
 801c962:	69bb      	ldr	r3, [r7, #24]
 801c964:	2b00      	cmp	r3, #0
 801c966:	d110      	bne.n	801c98a <mg_mqtt_login+0x6a>
    mg_random_str(client_id, sizeof(client_id) - 1);
 801c968:	f107 031c 	add.w	r3, r7, #28
 801c96c:	2114      	movs	r1, #20
 801c96e:	4618      	mov	r0, r3
 801c970:	f006 f82c 	bl	80229cc <mg_random_str>
    client_id[sizeof(client_id) - 1] = '\0';
 801c974:	2300      	movs	r3, #0
 801c976:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    cid = mg_str(client_id);
 801c97a:	f107 0314 	add.w	r3, r7, #20
 801c97e:	f107 021c 	add.w	r2, r7, #28
 801c982:	4611      	mov	r1, r2
 801c984:	4618      	mov	r0, r3
 801c986:	f005 f8dd 	bl	8021b44 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 801c98a:	7cbb      	ldrb	r3, [r7, #18]
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d101      	bne.n	801c994 <mg_mqtt_login+0x74>
 801c990:	2304      	movs	r3, #4
 801c992:	74bb      	strb	r3, [r7, #18]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 801c994:	7cbb      	ldrb	r3, [r7, #18]
 801c996:	2b05      	cmp	r3, #5
 801c998:	bf0c      	ite	eq
 801c99a:	2301      	moveq	r3, #1
 801c99c:	2300      	movne	r3, #0
 801c99e:	b2d9      	uxtb	r1, r3
 801c9a0:	687a      	ldr	r2, [r7, #4]
 801c9a2:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801c9a6:	f361 0382 	bfi	r3, r1, #2, #1
 801c9aa:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 801c9ae:	683b      	ldr	r3, [r7, #0]
 801c9b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801c9b4:	00db      	lsls	r3, r3, #3
 801c9b6:	b2db      	uxtb	r3, r3
 801c9b8:	f003 0318 	and.w	r3, r3, #24
 801c9bc:	b2db      	uxtb	r3, r3
 801c9be:	74fb      	strb	r3, [r7, #19]
  if (opts->user.len > 0) {
 801c9c0:	683b      	ldr	r3, [r7, #0]
 801c9c2:	685b      	ldr	r3, [r3, #4]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d00a      	beq.n	801c9de <mg_mqtt_login+0xbe>
    total_len += 2 + (uint32_t) opts->user.len;
 801c9c8:	683b      	ldr	r3, [r7, #0]
 801c9ca:	685a      	ldr	r2, [r3, #4]
 801c9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9ce:	4413      	add	r3, r2
 801c9d0:	3302      	adds	r3, #2
 801c9d2:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_USER_NAME;
 801c9d4:	7cfb      	ldrb	r3, [r7, #19]
 801c9d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801c9da:	b2db      	uxtb	r3, r3
 801c9dc:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->pass.len > 0) {
 801c9de:	683b      	ldr	r3, [r7, #0]
 801c9e0:	68db      	ldr	r3, [r3, #12]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d00a      	beq.n	801c9fc <mg_mqtt_login+0xdc>
    total_len += 2 + (uint32_t) opts->pass.len;
 801c9e6:	683b      	ldr	r3, [r7, #0]
 801c9e8:	68da      	ldr	r2, [r3, #12]
 801c9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9ec:	4413      	add	r3, r2
 801c9ee:	3302      	adds	r3, #2
 801c9f0:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_PASSWORD;
 801c9f2:	7cfb      	ldrb	r3, [r7, #19]
 801c9f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c9f8:	b2db      	uxtb	r3, r3
 801c9fa:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->topic.len > 0) { // allow zero-length msgs, message.len is size_t
 801c9fc:	683b      	ldr	r3, [r7, #0]
 801c9fe:	69db      	ldr	r3, [r3, #28]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d00d      	beq.n	801ca20 <mg_mqtt_login+0x100>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 801ca04:	683b      	ldr	r3, [r7, #0]
 801ca06:	69da      	ldr	r2, [r3, #28]
 801ca08:	683b      	ldr	r3, [r7, #0]
 801ca0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ca0c:	441a      	add	r2, r3
 801ca0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca10:	4413      	add	r3, r2
 801ca12:	3304      	adds	r3, #4
 801ca14:	637b      	str	r3, [r7, #52]	@ 0x34
    hdr[7] |= MQTT_HAS_WILL;
 801ca16:	7cfb      	ldrb	r3, [r7, #19]
 801ca18:	f043 0304 	orr.w	r3, r3, #4
 801ca1c:	b2db      	uxtb	r3, r3
 801ca1e:	74fb      	strb	r3, [r7, #19]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 801ca20:	683b      	ldr	r3, [r7, #0]
 801ca22:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d102      	bne.n	801ca30 <mg_mqtt_login+0x110>
 801ca2a:	69bb      	ldr	r3, [r7, #24]
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d104      	bne.n	801ca3a <mg_mqtt_login+0x11a>
 801ca30:	7cfb      	ldrb	r3, [r7, #19]
 801ca32:	f043 0302 	orr.w	r3, r3, #2
 801ca36:	b2db      	uxtb	r3, r3
 801ca38:	74fb      	strb	r3, [r7, #19]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 801ca3a:	683b      	ldr	r3, [r7, #0]
 801ca3c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d004      	beq.n	801ca4e <mg_mqtt_login+0x12e>
 801ca44:	7cfb      	ldrb	r3, [r7, #19]
 801ca46:	f043 0320 	orr.w	r3, r3, #32
 801ca4a:	b2db      	uxtb	r3, r3
 801ca4c:	74fb      	strb	r3, [r7, #19]
  total_len += (uint32_t) cid.len;
 801ca4e:	69bb      	ldr	r3, [r7, #24]
 801ca50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ca52:	4413      	add	r3, r2
 801ca54:	637b      	str	r3, [r7, #52]	@ 0x34
  if (c->is_mqtt5) {
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ca5c:	f003 0304 	and.w	r3, r3, #4
 801ca60:	b2db      	uxtb	r3, r3
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d01c      	beq.n	801caa0 <mg_mqtt_login+0x180>
    total_len += get_props_size(opts->props, opts->num_props);
 801ca66:	683b      	ldr	r3, [r7, #0]
 801ca68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801ca6a:	683b      	ldr	r3, [r7, #0]
 801ca6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca6e:	4619      	mov	r1, r3
 801ca70:	4610      	mov	r0, r2
 801ca72:	f7ff fdf3 	bl	801c65c <get_props_size>
 801ca76:	4602      	mov	r2, r0
 801ca78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca7a:	4413      	add	r3, r2
 801ca7c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (hdr[7] & MQTT_HAS_WILL)
 801ca7e:	7cfb      	ldrb	r3, [r7, #19]
 801ca80:	f003 0304 	and.w	r3, r3, #4
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d00b      	beq.n	801caa0 <mg_mqtt_login+0x180>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 801ca88:	683b      	ldr	r3, [r7, #0]
 801ca8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ca8c:	683b      	ldr	r3, [r7, #0]
 801ca8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ca90:	4619      	mov	r1, r3
 801ca92:	4610      	mov	r0, r2
 801ca94:	f7ff fde2 	bl	801c65c <get_props_size>
 801ca98:	4602      	mov	r2, r0
 801ca9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca9c:	4413      	add	r3, r2
 801ca9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 801caa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801caa2:	2200      	movs	r2, #0
 801caa4:	2101      	movs	r1, #1
 801caa6:	6878      	ldr	r0, [r7, #4]
 801caa8:	f7ff fc48 	bl	801c33c <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 801caac:	f107 030c 	add.w	r3, r7, #12
 801cab0:	2208      	movs	r2, #8
 801cab2:	4619      	mov	r1, r3
 801cab4:	6878      	ldr	r0, [r7, #4]
 801cab6:	f004 fa6f 	bl	8020f98 <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 801caba:	683b      	ldr	r3, [r7, #0]
 801cabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801cabe:	4618      	mov	r0, r3
 801cac0:	f005 ffe3 	bl	8022a8a <mg_ntohs>
 801cac4:	4603      	mov	r3, r0
 801cac6:	4619      	mov	r1, r3
 801cac8:	6878      	ldr	r0, [r7, #4]
 801caca:	f7ff fc7c 	bl	801c3c6 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cad4:	f003 0304 	and.w	r3, r3, #4
 801cad8:	b2db      	uxtb	r3, r3
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d007      	beq.n	801caee <mg_mqtt_login+0x1ce>
 801cade:	683b      	ldr	r3, [r7, #0]
 801cae0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cae6:	461a      	mov	r2, r3
 801cae8:	6878      	ldr	r0, [r7, #4]
 801caea:	f7ff fdcf 	bl	801c68c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 801caee:	69bb      	ldr	r3, [r7, #24]
 801caf0:	b29b      	uxth	r3, r3
 801caf2:	4618      	mov	r0, r3
 801caf4:	f005 ffc9 	bl	8022a8a <mg_ntohs>
 801caf8:	4603      	mov	r3, r0
 801cafa:	4619      	mov	r1, r3
 801cafc:	6878      	ldr	r0, [r7, #4]
 801cafe:	f7ff fc62 	bl	801c3c6 <mg_send_u16>
  mg_send(c, cid.buf, cid.len);
 801cb02:	697b      	ldr	r3, [r7, #20]
 801cb04:	69ba      	ldr	r2, [r7, #24]
 801cb06:	4619      	mov	r1, r3
 801cb08:	6878      	ldr	r0, [r7, #4]
 801cb0a:	f004 fa45 	bl	8020f98 <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 801cb0e:	7cfb      	ldrb	r3, [r7, #19]
 801cb10:	f003 0304 	and.w	r3, r3, #4
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d035      	beq.n	801cb84 <mg_mqtt_login+0x264>
    if (c->is_mqtt5)
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cb1e:	f003 0304 	and.w	r3, r3, #4
 801cb22:	b2db      	uxtb	r3, r3
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d007      	beq.n	801cb38 <mg_mqtt_login+0x218>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 801cb28:	683b      	ldr	r3, [r7, #0]
 801cb2a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801cb2c:	683b      	ldr	r3, [r7, #0]
 801cb2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cb30:	461a      	mov	r2, r3
 801cb32:	6878      	ldr	r0, [r7, #4]
 801cb34:	f7ff fdaa 	bl	801c68c <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801cb38:	683b      	ldr	r3, [r7, #0]
 801cb3a:	69db      	ldr	r3, [r3, #28]
 801cb3c:	b29b      	uxth	r3, r3
 801cb3e:	4618      	mov	r0, r3
 801cb40:	f005 ffa3 	bl	8022a8a <mg_ntohs>
 801cb44:	4603      	mov	r3, r0
 801cb46:	4619      	mov	r1, r3
 801cb48:	6878      	ldr	r0, [r7, #4]
 801cb4a:	f7ff fc3c 	bl	801c3c6 <mg_send_u16>
    mg_send(c, opts->topic.buf, opts->topic.len);
 801cb4e:	683b      	ldr	r3, [r7, #0]
 801cb50:	6999      	ldr	r1, [r3, #24]
 801cb52:	683b      	ldr	r3, [r7, #0]
 801cb54:	69db      	ldr	r3, [r3, #28]
 801cb56:	461a      	mov	r2, r3
 801cb58:	6878      	ldr	r0, [r7, #4]
 801cb5a:	f004 fa1d 	bl	8020f98 <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 801cb5e:	683b      	ldr	r3, [r7, #0]
 801cb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb62:	b29b      	uxth	r3, r3
 801cb64:	4618      	mov	r0, r3
 801cb66:	f005 ff90 	bl	8022a8a <mg_ntohs>
 801cb6a:	4603      	mov	r3, r0
 801cb6c:	4619      	mov	r1, r3
 801cb6e:	6878      	ldr	r0, [r7, #4]
 801cb70:	f7ff fc29 	bl	801c3c6 <mg_send_u16>
    mg_send(c, opts->message.buf, opts->message.len);
 801cb74:	683b      	ldr	r3, [r7, #0]
 801cb76:	6a19      	ldr	r1, [r3, #32]
 801cb78:	683b      	ldr	r3, [r7, #0]
 801cb7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cb7c:	461a      	mov	r2, r3
 801cb7e:	6878      	ldr	r0, [r7, #4]
 801cb80:	f004 fa0a 	bl	8020f98 <mg_send>
  }
  if (opts->user.len > 0) {
 801cb84:	683b      	ldr	r3, [r7, #0]
 801cb86:	685b      	ldr	r3, [r3, #4]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d012      	beq.n	801cbb2 <mg_mqtt_login+0x292>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 801cb8c:	683b      	ldr	r3, [r7, #0]
 801cb8e:	685b      	ldr	r3, [r3, #4]
 801cb90:	b29b      	uxth	r3, r3
 801cb92:	4618      	mov	r0, r3
 801cb94:	f005 ff79 	bl	8022a8a <mg_ntohs>
 801cb98:	4603      	mov	r3, r0
 801cb9a:	4619      	mov	r1, r3
 801cb9c:	6878      	ldr	r0, [r7, #4]
 801cb9e:	f7ff fc12 	bl	801c3c6 <mg_send_u16>
    mg_send(c, opts->user.buf, opts->user.len);
 801cba2:	683b      	ldr	r3, [r7, #0]
 801cba4:	6819      	ldr	r1, [r3, #0]
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	685b      	ldr	r3, [r3, #4]
 801cbaa:	461a      	mov	r2, r3
 801cbac:	6878      	ldr	r0, [r7, #4]
 801cbae:	f004 f9f3 	bl	8020f98 <mg_send>
  }
  if (opts->pass.len > 0) {
 801cbb2:	683b      	ldr	r3, [r7, #0]
 801cbb4:	68db      	ldr	r3, [r3, #12]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d012      	beq.n	801cbe0 <mg_mqtt_login+0x2c0>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 801cbba:	683b      	ldr	r3, [r7, #0]
 801cbbc:	68db      	ldr	r3, [r3, #12]
 801cbbe:	b29b      	uxth	r3, r3
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	f005 ff62 	bl	8022a8a <mg_ntohs>
 801cbc6:	4603      	mov	r3, r0
 801cbc8:	4619      	mov	r1, r3
 801cbca:	6878      	ldr	r0, [r7, #4]
 801cbcc:	f7ff fbfb 	bl	801c3c6 <mg_send_u16>
    mg_send(c, opts->pass.buf, opts->pass.len);
 801cbd0:	683b      	ldr	r3, [r7, #0]
 801cbd2:	6899      	ldr	r1, [r3, #8]
 801cbd4:	683b      	ldr	r3, [r7, #0]
 801cbd6:	68db      	ldr	r3, [r3, #12]
 801cbd8:	461a      	mov	r2, r3
 801cbda:	6878      	ldr	r0, [r7, #4]
 801cbdc:	f004 f9dc 	bl	8020f98 <mg_send>
  }
}
 801cbe0:	bf00      	nop
 801cbe2:	3738      	adds	r7, #56	@ 0x38
 801cbe4:	46bd      	mov	sp, r7
 801cbe6:	bd80      	pop	{r7, pc}

0801cbe8 <mg_mqtt_pub>:

uint16_t mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801cbe8:	b590      	push	{r4, r7, lr}
 801cbea:	b087      	sub	sp, #28
 801cbec:	af02      	add	r7, sp, #8
 801cbee:	6078      	str	r0, [r7, #4]
 801cbf0:	6039      	str	r1, [r7, #0]
  uint16_t id = opts->retransmit_id;
 801cbf2:	683b      	ldr	r3, [r7, #0]
 801cbf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cbf6:	81fb      	strh	r3, [r7, #14]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 801cbf8:	683b      	ldr	r3, [r7, #0]
 801cbfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801cbfe:	005b      	lsls	r3, r3, #1
 801cc00:	b25b      	sxtb	r3, r3
 801cc02:	f003 0306 	and.w	r3, r3, #6
 801cc06:	b25b      	sxtb	r3, r3
 801cc08:	683a      	ldr	r2, [r7, #0]
 801cc0a:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 801cc0e:	2a00      	cmp	r2, #0
 801cc10:	d001      	beq.n	801cc16 <mg_mqtt_pub+0x2e>
 801cc12:	2201      	movs	r2, #1
 801cc14:	e000      	b.n	801cc18 <mg_mqtt_pub+0x30>
 801cc16:	2200      	movs	r2, #0
 801cc18:	4313      	orrs	r3, r2
 801cc1a:	b25b      	sxtb	r3, r3
 801cc1c:	737b      	strb	r3, [r7, #13]
  size_t len = 2 + opts->topic.len + opts->message.len;
 801cc1e:	683b      	ldr	r3, [r7, #0]
 801cc20:	69da      	ldr	r2, [r3, #28]
 801cc22:	683b      	ldr	r3, [r7, #0]
 801cc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc26:	4413      	add	r3, r2
 801cc28:	3302      	adds	r3, #2
 801cc2a:	60bb      	str	r3, [r7, #8]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 801cc2c:	4b51      	ldr	r3, [pc, #324]	@ (801cd74 <mg_mqtt_pub+0x18c>)
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	2b02      	cmp	r3, #2
 801cc32:	dd19      	ble.n	801cc68 <mg_mqtt_pub+0x80>
 801cc34:	4b50      	ldr	r3, [pc, #320]	@ (801cd78 <mg_mqtt_pub+0x190>)
 801cc36:	f241 123c 	movw	r2, #4412	@ 0x113c
 801cc3a:	4950      	ldr	r1, [pc, #320]	@ (801cd7c <mg_mqtt_pub+0x194>)
 801cc3c:	2003      	movs	r0, #3
 801cc3e:	f7fe fa7d 	bl	801b13c <mg_log_prefix>
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801cc46:	683b      	ldr	r3, [r7, #0]
 801cc48:	69db      	ldr	r3, [r3, #28]
 801cc4a:	461c      	mov	r4, r3
 801cc4c:	683b      	ldr	r3, [r7, #0]
 801cc4e:	699a      	ldr	r2, [r3, #24]
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc54:	4618      	mov	r0, r3
 801cc56:	683b      	ldr	r3, [r7, #0]
 801cc58:	6a1b      	ldr	r3, [r3, #32]
 801cc5a:	9301      	str	r3, [sp, #4]
 801cc5c:	9000      	str	r0, [sp, #0]
 801cc5e:	4613      	mov	r3, r2
 801cc60:	4622      	mov	r2, r4
 801cc62:	4847      	ldr	r0, [pc, #284]	@ (801cd80 <mg_mqtt_pub+0x198>)
 801cc64:	f7fe faba 	bl	801b1dc <mg_log>
            (char *) opts->topic.buf, (int) opts->message.len,
            (char *) opts->message.buf));
  if (opts->qos > 0) len += 2;
 801cc68:	683b      	ldr	r3, [r7, #0]
 801cc6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d002      	beq.n	801cc78 <mg_mqtt_pub+0x90>
 801cc72:	68bb      	ldr	r3, [r7, #8]
 801cc74:	3302      	adds	r3, #2
 801cc76:	60bb      	str	r3, [r7, #8]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cc7e:	f003 0304 	and.w	r3, r3, #4
 801cc82:	b2db      	uxtb	r3, r3
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d00b      	beq.n	801cca0 <mg_mqtt_pub+0xb8>
 801cc88:	683b      	ldr	r3, [r7, #0]
 801cc8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cc8c:	683b      	ldr	r3, [r7, #0]
 801cc8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cc90:	4619      	mov	r1, r3
 801cc92:	4610      	mov	r0, r2
 801cc94:	f7ff fce2 	bl	801c65c <get_props_size>
 801cc98:	4602      	mov	r2, r0
 801cc9a:	68bb      	ldr	r3, [r7, #8]
 801cc9c:	4413      	add	r3, r2
 801cc9e:	60bb      	str	r3, [r7, #8]

  if (opts->qos > 0 && id != 0) flags |= 1 << 3;
 801cca0:	683b      	ldr	r3, [r7, #0]
 801cca2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d006      	beq.n	801ccb8 <mg_mqtt_pub+0xd0>
 801ccaa:	89fb      	ldrh	r3, [r7, #14]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d003      	beq.n	801ccb8 <mg_mqtt_pub+0xd0>
 801ccb0:	7b7b      	ldrb	r3, [r7, #13]
 801ccb2:	f043 0308 	orr.w	r3, r3, #8
 801ccb6:	737b      	strb	r3, [r7, #13]
  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 801ccb8:	7b7a      	ldrb	r2, [r7, #13]
 801ccba:	68bb      	ldr	r3, [r7, #8]
 801ccbc:	2103      	movs	r1, #3
 801ccbe:	6878      	ldr	r0, [r7, #4]
 801ccc0:	f7ff fb3c 	bl	801c33c <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801ccc4:	683b      	ldr	r3, [r7, #0]
 801ccc6:	69db      	ldr	r3, [r3, #28]
 801ccc8:	b29b      	uxth	r3, r3
 801ccca:	4618      	mov	r0, r3
 801cccc:	f005 fedd 	bl	8022a8a <mg_ntohs>
 801ccd0:	4603      	mov	r3, r0
 801ccd2:	4619      	mov	r1, r3
 801ccd4:	6878      	ldr	r0, [r7, #4]
 801ccd6:	f7ff fb76 	bl	801c3c6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801ccda:	683b      	ldr	r3, [r7, #0]
 801ccdc:	6999      	ldr	r1, [r3, #24]
 801ccde:	683b      	ldr	r3, [r7, #0]
 801cce0:	69db      	ldr	r3, [r3, #28]
 801cce2:	461a      	mov	r2, r3
 801cce4:	6878      	ldr	r0, [r7, #4]
 801cce6:	f004 f957 	bl	8020f98 <mg_send>
  if (opts->qos > 0) {    // need to send 'id' field
 801ccea:	683b      	ldr	r3, [r7, #0]
 801ccec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d01e      	beq.n	801cd32 <mg_mqtt_pub+0x14a>
    if (id == 0) {  // generate new one if not resending
 801ccf4:	89fb      	ldrh	r3, [r7, #14]
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d112      	bne.n	801cd20 <mg_mqtt_pub+0x138>
      if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	685b      	ldr	r3, [r3, #4]
 801ccfe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801cd00:	3201      	adds	r2, #1
 801cd02:	b292      	uxth	r2, r2
 801cd04:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801cd06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d105      	bne.n	801cd18 <mg_mqtt_pub+0x130>
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	685b      	ldr	r3, [r3, #4]
 801cd10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801cd12:	3201      	adds	r2, #1
 801cd14:	b292      	uxth	r2, r2
 801cd16:	859a      	strh	r2, [r3, #44]	@ 0x2c
      id = c->mgr->mqtt_id;
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	685b      	ldr	r3, [r3, #4]
 801cd1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cd1e:	81fb      	strh	r3, [r7, #14]
    }
    mg_send_u16(c, mg_htons(id));
 801cd20:	89fb      	ldrh	r3, [r7, #14]
 801cd22:	4618      	mov	r0, r3
 801cd24:	f005 feb1 	bl	8022a8a <mg_ntohs>
 801cd28:	4603      	mov	r3, r0
 801cd2a:	4619      	mov	r1, r3
 801cd2c:	6878      	ldr	r0, [r7, #4]
 801cd2e:	f7ff fb4a 	bl	801c3c6 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cd38:	f003 0304 	and.w	r3, r3, #4
 801cd3c:	b2db      	uxtb	r3, r3
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d007      	beq.n	801cd52 <mg_mqtt_pub+0x16a>
 801cd42:	683b      	ldr	r3, [r7, #0]
 801cd44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801cd46:	683b      	ldr	r3, [r7, #0]
 801cd48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cd4a:	461a      	mov	r2, r3
 801cd4c:	6878      	ldr	r0, [r7, #4]
 801cd4e:	f7ff fc9d 	bl	801c68c <mg_send_mqtt_properties>

  if (opts->message.len > 0) mg_send(c, opts->message.buf, opts->message.len);
 801cd52:	683b      	ldr	r3, [r7, #0]
 801cd54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d007      	beq.n	801cd6a <mg_mqtt_pub+0x182>
 801cd5a:	683b      	ldr	r3, [r7, #0]
 801cd5c:	6a19      	ldr	r1, [r3, #32]
 801cd5e:	683b      	ldr	r3, [r7, #0]
 801cd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd62:	461a      	mov	r2, r3
 801cd64:	6878      	ldr	r0, [r7, #4]
 801cd66:	f004 f917 	bl	8020f98 <mg_send>
  return id;
 801cd6a:	89fb      	ldrh	r3, [r7, #14]
}
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	3714      	adds	r7, #20
 801cd70:	46bd      	mov	sp, r7
 801cd72:	bd90      	pop	{r4, r7, pc}
 801cd74:	20000298 	.word	0x20000298
 801cd78:	08034514 	.word	0x08034514
 801cd7c:	08031484 	.word	0x08031484
 801cd80:	08032914 	.word	0x08032914

0801cd84 <mg_mqtt_sub>:

void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 801cd84:	b580      	push	{r7, lr}
 801cd86:	b086      	sub	sp, #24
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	6078      	str	r0, [r7, #4]
 801cd8c:	6039      	str	r1, [r7, #0]
  uint8_t qos_ = opts->qos & 3;
 801cd8e:	683b      	ldr	r3, [r7, #0]
 801cd90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801cd94:	f003 0303 	and.w	r3, r3, #3
 801cd98:	b2db      	uxtb	r3, r3
 801cd9a:	73fb      	strb	r3, [r7, #15]
  size_t plen = c->is_mqtt5 ? get_props_size(opts->props, opts->num_props) : 0;
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801cda2:	f003 0304 	and.w	r3, r3, #4
 801cda6:	b2db      	uxtb	r3, r3
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d009      	beq.n	801cdc0 <mg_mqtt_sub+0x3c>
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cdb0:	683b      	ldr	r3, [r7, #0]
 801cdb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cdb4:	4619      	mov	r1, r3
 801cdb6:	4610      	mov	r0, r2
 801cdb8:	f7ff fc50 	bl	801c65c <get_props_size>
 801cdbc:	4603      	mov	r3, r0
 801cdbe:	e000      	b.n	801cdc2 <mg_mqtt_sub+0x3e>
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	617b      	str	r3, [r7, #20]
  size_t len = 2 + opts->topic.len + 2 + 1 + plen;
 801cdc4:	683b      	ldr	r3, [r7, #0]
 801cdc6:	69da      	ldr	r2, [r3, #28]
 801cdc8:	697b      	ldr	r3, [r7, #20]
 801cdca:	4413      	add	r3, r2
 801cdcc:	3305      	adds	r3, #5
 801cdce:	613b      	str	r3, [r7, #16]

  mg_mqtt_send_header(c, MQTT_CMD_SUBSCRIBE, 2, (uint32_t) len);
 801cdd0:	693b      	ldr	r3, [r7, #16]
 801cdd2:	2202      	movs	r2, #2
 801cdd4:	2108      	movs	r1, #8
 801cdd6:	6878      	ldr	r0, [r7, #4]
 801cdd8:	f7ff fab0 	bl	801c33c <mg_mqtt_send_header>
  if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	685b      	ldr	r3, [r3, #4]
 801cde0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801cde2:	3201      	adds	r2, #1
 801cde4:	b292      	uxth	r2, r2
 801cde6:	859a      	strh	r2, [r3, #44]	@ 0x2c
 801cde8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d105      	bne.n	801cdfa <mg_mqtt_sub+0x76>
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	685b      	ldr	r3, [r3, #4]
 801cdf2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801cdf4:	3201      	adds	r2, #1
 801cdf6:	b292      	uxth	r2, r2
 801cdf8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	685b      	ldr	r3, [r3, #4]
 801cdfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801ce00:	4618      	mov	r0, r3
 801ce02:	f005 fe42 	bl	8022a8a <mg_ntohs>
 801ce06:	4603      	mov	r3, r0
 801ce08:	4619      	mov	r1, r3
 801ce0a:	6878      	ldr	r0, [r7, #4]
 801ce0c:	f7ff fadb 	bl	801c3c6 <mg_send_u16>
  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801ce16:	f003 0304 	and.w	r3, r3, #4
 801ce1a:	b2db      	uxtb	r3, r3
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d007      	beq.n	801ce30 <mg_mqtt_sub+0xac>
 801ce20:	683b      	ldr	r3, [r7, #0]
 801ce22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 801ce24:	683b      	ldr	r3, [r7, #0]
 801ce26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce28:	461a      	mov	r2, r3
 801ce2a:	6878      	ldr	r0, [r7, #4]
 801ce2c:	f7ff fc2e 	bl	801c68c <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 801ce30:	683b      	ldr	r3, [r7, #0]
 801ce32:	69db      	ldr	r3, [r3, #28]
 801ce34:	b29b      	uxth	r3, r3
 801ce36:	4618      	mov	r0, r3
 801ce38:	f005 fe27 	bl	8022a8a <mg_ntohs>
 801ce3c:	4603      	mov	r3, r0
 801ce3e:	4619      	mov	r1, r3
 801ce40:	6878      	ldr	r0, [r7, #4]
 801ce42:	f7ff fac0 	bl	801c3c6 <mg_send_u16>
  mg_send(c, opts->topic.buf, opts->topic.len);
 801ce46:	683b      	ldr	r3, [r7, #0]
 801ce48:	6999      	ldr	r1, [r3, #24]
 801ce4a:	683b      	ldr	r3, [r7, #0]
 801ce4c:	69db      	ldr	r3, [r3, #28]
 801ce4e:	461a      	mov	r2, r3
 801ce50:	6878      	ldr	r0, [r7, #4]
 801ce52:	f004 f8a1 	bl	8020f98 <mg_send>
  mg_send(c, &qos_, sizeof(qos_));
 801ce56:	f107 030f 	add.w	r3, r7, #15
 801ce5a:	2201      	movs	r2, #1
 801ce5c:	4619      	mov	r1, r3
 801ce5e:	6878      	ldr	r0, [r7, #4]
 801ce60:	f004 f89a 	bl	8020f98 <mg_send>
}
 801ce64:	bf00      	nop
 801ce66:	3718      	adds	r7, #24
 801ce68:	46bd      	mov	sp, r7
 801ce6a:	bd80      	pop	{r7, pc}

0801ce6c <mg_mqtt_parse>:

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 801ce6c:	b580      	push	{r7, lr}
 801ce6e:	b08a      	sub	sp, #40	@ 0x28
 801ce70:	af00      	add	r7, sp, #0
 801ce72:	60f8      	str	r0, [r7, #12]
 801ce74:	60b9      	str	r1, [r7, #8]
 801ce76:	603b      	str	r3, [r7, #0]
 801ce78:	4613      	mov	r3, r2
 801ce7a:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t n = 0, len_len = 0;
 801ce82:	2300      	movs	r3, #0
 801ce84:	61fb      	str	r3, [r7, #28]
 801ce86:	2300      	movs	r3, #0
 801ce88:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 801ce8a:	2228      	movs	r2, #40	@ 0x28
 801ce8c:	2100      	movs	r1, #0
 801ce8e:	6838      	ldr	r0, [r7, #0]
 801ce90:	f008 ff5e 	bl	8025d50 <memset>
  m->dgram.buf = (char *) buf;
 801ce94:	683b      	ldr	r3, [r7, #0]
 801ce96:	68fa      	ldr	r2, [r7, #12]
 801ce98:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 801ce9a:	68bb      	ldr	r3, [r7, #8]
 801ce9c:	2b01      	cmp	r3, #1
 801ce9e:	d801      	bhi.n	801cea4 <mg_mqtt_parse+0x38>
 801cea0:	2301      	movs	r3, #1
 801cea2:	e104      	b.n	801d0ae <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	781b      	ldrb	r3, [r3, #0]
 801cea8:	091b      	lsrs	r3, r3, #4
 801ceaa:	b2da      	uxtb	r2, r3
 801ceac:	683b      	ldr	r3, [r7, #0]
 801ceae:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 801ceb0:	68fb      	ldr	r3, [r7, #12]
 801ceb2:	781b      	ldrb	r3, [r3, #0]
 801ceb4:	085b      	lsrs	r3, r3, #1
 801ceb6:	b2db      	uxtb	r3, r3
 801ceb8:	f003 0303 	and.w	r3, r3, #3
 801cebc:	b2da      	uxtb	r2, r3
 801cebe:	683b      	ldr	r3, [r7, #0]
 801cec0:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 801cec2:	2300      	movs	r3, #0
 801cec4:	61bb      	str	r3, [r7, #24]
 801cec6:	69bb      	ldr	r3, [r7, #24]
 801cec8:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	3301      	adds	r3, #1
 801cece:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 801ced0:	e01f      	b.n	801cf12 <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 801ced2:	6a3b      	ldr	r3, [r7, #32]
 801ced4:	1c5a      	adds	r2, r3, #1
 801ced6:	623a      	str	r2, [r7, #32]
 801ced8:	781b      	ldrb	r3, [r3, #0]
 801ceda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 801cede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cee2:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 801cee6:	69ba      	ldr	r2, [r7, #24]
 801cee8:	4613      	mov	r3, r2
 801ceea:	00db      	lsls	r3, r3, #3
 801ceec:	1a9b      	subs	r3, r3, r2
 801ceee:	fa01 f303 	lsl.w	r3, r1, r3
 801cef2:	461a      	mov	r2, r3
 801cef4:	69fb      	ldr	r3, [r7, #28]
 801cef6:	4413      	add	r3, r2
 801cef8:	61fb      	str	r3, [r7, #28]
    len_len++;
 801cefa:	69bb      	ldr	r3, [r7, #24]
 801cefc:	3301      	adds	r3, #1
 801cefe:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 801cf00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	da0c      	bge.n	801cf22 <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 801cf08:	69bb      	ldr	r3, [r7, #24]
 801cf0a:	2b03      	cmp	r3, #3
 801cf0c:	d901      	bls.n	801cf12 <mg_mqtt_parse+0xa6>
 801cf0e:	2302      	movs	r3, #2
 801cf10:	e0cd      	b.n	801d0ae <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 801cf12:	6a3a      	ldr	r2, [r7, #32]
 801cf14:	68fb      	ldr	r3, [r7, #12]
 801cf16:	1ad3      	subs	r3, r2, r3
 801cf18:	461a      	mov	r2, r3
 801cf1a:	68bb      	ldr	r3, [r7, #8]
 801cf1c:	4293      	cmp	r3, r2
 801cf1e:	d8d8      	bhi.n	801ced2 <mg_mqtt_parse+0x66>
 801cf20:	e000      	b.n	801cf24 <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 801cf22:	bf00      	nop
  }
  end = p + n;
 801cf24:	6a3a      	ldr	r2, [r7, #32]
 801cf26:	69fb      	ldr	r3, [r7, #28]
 801cf28:	4413      	add	r3, r2
 801cf2a:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 801cf2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	db05      	blt.n	801cf40 <mg_mqtt_parse+0xd4>
 801cf34:	68fa      	ldr	r2, [r7, #12]
 801cf36:	68bb      	ldr	r3, [r7, #8]
 801cf38:	4413      	add	r3, r2
 801cf3a:	697a      	ldr	r2, [r7, #20]
 801cf3c:	429a      	cmp	r2, r3
 801cf3e:	d901      	bls.n	801cf44 <mg_mqtt_parse+0xd8>
 801cf40:	2301      	movs	r3, #1
 801cf42:	e0b4      	b.n	801d0ae <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 801cf44:	697a      	ldr	r2, [r7, #20]
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	1ad3      	subs	r3, r2, r3
 801cf4a:	461a      	mov	r2, r3
 801cf4c:	683b      	ldr	r3, [r7, #0]
 801cf4e:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 801cf50:	683b      	ldr	r3, [r7, #0]
 801cf52:	7e9b      	ldrb	r3, [r3, #26]
 801cf54:	2b0b      	cmp	r3, #11
 801cf56:	f300 80a8 	bgt.w	801d0aa <mg_mqtt_parse+0x23e>
 801cf5a:	2b04      	cmp	r3, #4
 801cf5c:	da10      	bge.n	801cf80 <mg_mqtt_parse+0x114>
 801cf5e:	2b02      	cmp	r3, #2
 801cf60:	d002      	beq.n	801cf68 <mg_mqtt_parse+0xfc>
 801cf62:	2b03      	cmp	r3, #3
 801cf64:	d024      	beq.n	801cfb0 <mg_mqtt_parse+0x144>
      m->data.buf = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 801cf66:	e0a0      	b.n	801d0aa <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 801cf68:	697a      	ldr	r2, [r7, #20]
 801cf6a:	6a3b      	ldr	r3, [r7, #32]
 801cf6c:	1ad3      	subs	r3, r2, r3
 801cf6e:	2b01      	cmp	r3, #1
 801cf70:	dc01      	bgt.n	801cf76 <mg_mqtt_parse+0x10a>
 801cf72:	2302      	movs	r3, #2
 801cf74:	e09b      	b.n	801d0ae <mg_mqtt_parse+0x242>
      m->ack = p[1];
 801cf76:	6a3b      	ldr	r3, [r7, #32]
 801cf78:	785a      	ldrb	r2, [r3, #1]
 801cf7a:	683b      	ldr	r3, [r7, #0]
 801cf7c:	771a      	strb	r2, [r3, #28]
      break;
 801cf7e:	e095      	b.n	801d0ac <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801cf80:	6a3b      	ldr	r3, [r7, #32]
 801cf82:	3302      	adds	r3, #2
 801cf84:	697a      	ldr	r2, [r7, #20]
 801cf86:	429a      	cmp	r2, r3
 801cf88:	d201      	bcs.n	801cf8e <mg_mqtt_parse+0x122>
 801cf8a:	2302      	movs	r3, #2
 801cf8c:	e08f      	b.n	801d0ae <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801cf8e:	6a3b      	ldr	r3, [r7, #32]
 801cf90:	781b      	ldrb	r3, [r3, #0]
 801cf92:	021b      	lsls	r3, r3, #8
 801cf94:	b21a      	sxth	r2, r3
 801cf96:	6a3b      	ldr	r3, [r7, #32]
 801cf98:	3301      	adds	r3, #1
 801cf9a:	781b      	ldrb	r3, [r3, #0]
 801cf9c:	b21b      	sxth	r3, r3
 801cf9e:	4313      	orrs	r3, r2
 801cfa0:	b21b      	sxth	r3, r3
 801cfa2:	b29a      	uxth	r2, r3
 801cfa4:	683b      	ldr	r3, [r7, #0]
 801cfa6:	831a      	strh	r2, [r3, #24]
      p += 2;
 801cfa8:	6a3b      	ldr	r3, [r7, #32]
 801cfaa:	3302      	adds	r3, #2
 801cfac:	623b      	str	r3, [r7, #32]
      break;
 801cfae:	e07d      	b.n	801d0ac <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 801cfb0:	6a3b      	ldr	r3, [r7, #32]
 801cfb2:	3302      	adds	r3, #2
 801cfb4:	697a      	ldr	r2, [r7, #20]
 801cfb6:	429a      	cmp	r2, r3
 801cfb8:	d201      	bcs.n	801cfbe <mg_mqtt_parse+0x152>
 801cfba:	2302      	movs	r3, #2
 801cfbc:	e077      	b.n	801d0ae <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801cfbe:	6a3b      	ldr	r3, [r7, #32]
 801cfc0:	781b      	ldrb	r3, [r3, #0]
 801cfc2:	021b      	lsls	r3, r3, #8
 801cfc4:	b21a      	sxth	r2, r3
 801cfc6:	6a3b      	ldr	r3, [r7, #32]
 801cfc8:	3301      	adds	r3, #1
 801cfca:	781b      	ldrb	r3, [r3, #0]
 801cfcc:	b21b      	sxth	r3, r3
 801cfce:	4313      	orrs	r3, r2
 801cfd0:	b21b      	sxth	r3, r3
 801cfd2:	b29b      	uxth	r3, r3
 801cfd4:	461a      	mov	r2, r3
 801cfd6:	683b      	ldr	r3, [r7, #0]
 801cfd8:	605a      	str	r2, [r3, #4]
      m->topic.buf = (char *) p + 2;
 801cfda:	6a3b      	ldr	r3, [r7, #32]
 801cfdc:	1c9a      	adds	r2, r3, #2
 801cfde:	683b      	ldr	r3, [r7, #0]
 801cfe0:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 801cfe2:	683b      	ldr	r3, [r7, #0]
 801cfe4:	685b      	ldr	r3, [r3, #4]
 801cfe6:	3302      	adds	r3, #2
 801cfe8:	6a3a      	ldr	r2, [r7, #32]
 801cfea:	4413      	add	r3, r2
 801cfec:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801cfee:	6a3a      	ldr	r2, [r7, #32]
 801cff0:	697b      	ldr	r3, [r7, #20]
 801cff2:	429a      	cmp	r2, r3
 801cff4:	d901      	bls.n	801cffa <mg_mqtt_parse+0x18e>
 801cff6:	2302      	movs	r3, #2
 801cff8:	e059      	b.n	801d0ae <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 801cffa:	683b      	ldr	r3, [r7, #0]
 801cffc:	7edb      	ldrb	r3, [r3, #27]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d016      	beq.n	801d030 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 801d002:	6a3b      	ldr	r3, [r7, #32]
 801d004:	3302      	adds	r3, #2
 801d006:	697a      	ldr	r2, [r7, #20]
 801d008:	429a      	cmp	r2, r3
 801d00a:	d201      	bcs.n	801d010 <mg_mqtt_parse+0x1a4>
 801d00c:	2302      	movs	r3, #2
 801d00e:	e04e      	b.n	801d0ae <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 801d010:	6a3b      	ldr	r3, [r7, #32]
 801d012:	781b      	ldrb	r3, [r3, #0]
 801d014:	021b      	lsls	r3, r3, #8
 801d016:	b21a      	sxth	r2, r3
 801d018:	6a3b      	ldr	r3, [r7, #32]
 801d01a:	3301      	adds	r3, #1
 801d01c:	781b      	ldrb	r3, [r3, #0]
 801d01e:	b21b      	sxth	r3, r3
 801d020:	4313      	orrs	r3, r2
 801d022:	b21b      	sxth	r3, r3
 801d024:	b29a      	uxth	r2, r3
 801d026:	683b      	ldr	r3, [r7, #0]
 801d028:	831a      	strh	r2, [r3, #24]
        p += 2;
 801d02a:	6a3b      	ldr	r3, [r7, #32]
 801d02c:	3302      	adds	r3, #2
 801d02e:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801d030:	6a3a      	ldr	r2, [r7, #32]
 801d032:	697b      	ldr	r3, [r7, #20]
 801d034:	429a      	cmp	r2, r3
 801d036:	d901      	bls.n	801d03c <mg_mqtt_parse+0x1d0>
 801d038:	2302      	movs	r3, #2
 801d03a:	e038      	b.n	801d0ae <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 801d03c:	79fb      	ldrb	r3, [r7, #7]
 801d03e:	2b05      	cmp	r3, #5
 801d040:	d123      	bne.n	801d08a <mg_mqtt_parse+0x21e>
 801d042:	6a3b      	ldr	r3, [r7, #32]
 801d044:	3302      	adds	r3, #2
 801d046:	697a      	ldr	r2, [r7, #20]
 801d048:	429a      	cmp	r2, r3
 801d04a:	d91e      	bls.n	801d08a <mg_mqtt_parse+0x21e>
            (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 801d04c:	697a      	ldr	r2, [r7, #20]
 801d04e:	6a3b      	ldr	r3, [r7, #32]
 801d050:	1ad3      	subs	r3, r2, r3
 801d052:	4619      	mov	r1, r3
 801d054:	683b      	ldr	r3, [r7, #0]
 801d056:	3324      	adds	r3, #36	@ 0x24
 801d058:	461a      	mov	r2, r3
 801d05a:	6a38      	ldr	r0, [r7, #32]
 801d05c:	f7ff fa0f 	bl	801c47e <decode_varint>
 801d060:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 801d062:	69bb      	ldr	r3, [r7, #24]
 801d064:	2b00      	cmp	r3, #0
 801d066:	d101      	bne.n	801d06c <mg_mqtt_parse+0x200>
 801d068:	2302      	movs	r3, #2
 801d06a:	e020      	b.n	801d0ae <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 801d06c:	6a3a      	ldr	r2, [r7, #32]
 801d06e:	69bb      	ldr	r3, [r7, #24]
 801d070:	441a      	add	r2, r3
 801d072:	68fb      	ldr	r3, [r7, #12]
 801d074:	1ad3      	subs	r3, r2, r3
 801d076:	461a      	mov	r2, r3
 801d078:	683b      	ldr	r3, [r7, #0]
 801d07a:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 801d07c:	683b      	ldr	r3, [r7, #0]
 801d07e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d080:	69bb      	ldr	r3, [r7, #24]
 801d082:	4413      	add	r3, r2
 801d084:	6a3a      	ldr	r2, [r7, #32]
 801d086:	4413      	add	r3, r2
 801d088:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 801d08a:	6a3a      	ldr	r2, [r7, #32]
 801d08c:	697b      	ldr	r3, [r7, #20]
 801d08e:	429a      	cmp	r2, r3
 801d090:	d901      	bls.n	801d096 <mg_mqtt_parse+0x22a>
 801d092:	2302      	movs	r3, #2
 801d094:	e00b      	b.n	801d0ae <mg_mqtt_parse+0x242>
      m->data.buf = (char *) p;
 801d096:	683b      	ldr	r3, [r7, #0]
 801d098:	6a3a      	ldr	r2, [r7, #32]
 801d09a:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 801d09c:	697a      	ldr	r2, [r7, #20]
 801d09e:	6a3b      	ldr	r3, [r7, #32]
 801d0a0:	1ad3      	subs	r3, r2, r3
 801d0a2:	461a      	mov	r2, r3
 801d0a4:	683b      	ldr	r3, [r7, #0]
 801d0a6:	60da      	str	r2, [r3, #12]
      break;
 801d0a8:	e000      	b.n	801d0ac <mg_mqtt_parse+0x240>
      break;
 801d0aa:	bf00      	nop
  }
  return MQTT_OK;
 801d0ac:	2300      	movs	r3, #0
}
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	3728      	adds	r7, #40	@ 0x28
 801d0b2:	46bd      	mov	sp, r7
 801d0b4:	bd80      	pop	{r7, pc}
	...

0801d0b8 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {
 801d0b8:	b590      	push	{r4, r7, lr}
 801d0ba:	b099      	sub	sp, #100	@ 0x64
 801d0bc:	af02      	add	r7, sp, #8
 801d0be:	60f8      	str	r0, [r7, #12]
 801d0c0:	60b9      	str	r1, [r7, #8]
 801d0c2:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_READ) {
 801d0c4:	68bb      	ldr	r3, [r7, #8]
 801d0c6:	2b07      	cmp	r3, #7
 801d0c8:	f040 8124 	bne.w	801d314 <mqtt_cb+0x25c>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801d0d2:	f003 0304 	and.w	r3, r3, #4
 801d0d6:	b2db      	uxtb	r3, r3
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d001      	beq.n	801d0e0 <mqtt_cb+0x28>
 801d0dc:	2305      	movs	r3, #5
 801d0de:	e000      	b.n	801d0e2 <mqtt_cb+0x2a>
 801d0e0:	2304      	movs	r3, #4
 801d0e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 801d0e6:	68fb      	ldr	r3, [r7, #12]
 801d0e8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 801d0ee:	f107 0314 	add.w	r3, r7, #20
 801d0f2:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801d0f6:	f7ff feb9 	bl	801ce6c <mg_mqtt_parse>
 801d0fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
      if (rc == MQTT_MALFORMED) {
 801d0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d0fe:	2b02      	cmp	r3, #2
 801d100:	d118      	bne.n	801d134 <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 801d102:	4b86      	ldr	r3, [pc, #536]	@ (801d31c <mqtt_cb+0x264>)
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	2b00      	cmp	r3, #0
 801d108:	dd0c      	ble.n	801d124 <mqtt_cb+0x6c>
 801d10a:	4b85      	ldr	r3, [pc, #532]	@ (801d320 <mqtt_cb+0x268>)
 801d10c:	f241 12b1 	movw	r2, #4529	@ 0x11b1
 801d110:	4984      	ldr	r1, [pc, #528]	@ (801d324 <mqtt_cb+0x26c>)
 801d112:	2001      	movs	r0, #1
 801d114:	f7fe f812 	bl	801b13c <mg_log_prefix>
 801d118:	68fb      	ldr	r3, [r7, #12]
 801d11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d11c:	4619      	mov	r1, r3
 801d11e:	4882      	ldr	r0, [pc, #520]	@ (801d328 <mqtt_cb+0x270>)
 801d120:	f7fe f85c 	bl	801b1dc <mg_log>
        c->is_closing = 1;
 801d124:	68fa      	ldr	r2, [r7, #12]
 801d126:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d12a:	f043 0320 	orr.w	r3, r3, #32
 801d12e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        break;
 801d132:	e0ef      	b.n	801d314 <mqtt_cb+0x25c>
      } else if (rc == MQTT_OK) {
 801d134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d136:	2b00      	cmp	r3, #0
 801d138:	f040 80eb 	bne.w	801d312 <mqtt_cb+0x25a>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 801d13c:	4b77      	ldr	r3, [pc, #476]	@ (801d31c <mqtt_cb+0x264>)
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	2b03      	cmp	r3, #3
 801d142:	dd17      	ble.n	801d174 <mqtt_cb+0xbc>
 801d144:	4b76      	ldr	r3, [pc, #472]	@ (801d320 <mqtt_cb+0x268>)
 801d146:	f241 12b5 	movw	r2, #4533	@ 0x11b5
 801d14a:	4976      	ldr	r1, [pc, #472]	@ (801d324 <mqtt_cb+0x26c>)
 801d14c:	2004      	movs	r0, #4
 801d14e:	f7fd fff5 	bl	801b13c <mg_log_prefix>
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d156:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801d15a:	4618      	mov	r0, r3
 801d15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d15e:	461c      	mov	r4, r3
 801d160:	6a3b      	ldr	r3, [r7, #32]
 801d162:	461a      	mov	r2, r3
 801d164:	69fb      	ldr	r3, [r7, #28]
 801d166:	9301      	str	r3, [sp, #4]
 801d168:	9200      	str	r2, [sp, #0]
 801d16a:	4623      	mov	r3, r4
 801d16c:	4602      	mov	r2, r0
 801d16e:	486f      	ldr	r0, [pc, #444]	@ (801d32c <mqtt_cb+0x274>)
 801d170:	f7fe f834 	bl	801b1dc <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.buf));
        switch (mm.cmd) {
 801d174:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801d178:	3b02      	subs	r3, #2
 801d17a:	2b04      	cmp	r3, #4
 801d17c:	f200 80ba 	bhi.w	801d2f4 <mqtt_cb+0x23c>
 801d180:	a201      	add	r2, pc, #4	@ (adr r2, 801d188 <mqtt_cb+0xd0>)
 801d182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d186:	bf00      	nop
 801d188:	0801d19d 	.word	0x0801d19d
 801d18c:	0801d211 	.word	0x0801d211
 801d190:	0801d2f5 	.word	0x0801d2f5
 801d194:	0801d29b 	.word	0x0801d29b
 801d198:	0801d2c7 	.word	0x0801d2c7
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 801d19c:	f107 0314 	add.w	r3, r7, #20
 801d1a0:	331c      	adds	r3, #28
 801d1a2:	461a      	mov	r2, r3
 801d1a4:	2111      	movs	r1, #17
 801d1a6:	68f8      	ldr	r0, [r7, #12]
 801d1a8:	f7f8 fbe2 	bl	8015970 <mg_call>
            if (mm.ack == 0) {
 801d1ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d112      	bne.n	801d1da <mqtt_cb+0x122>
              MG_DEBUG(("%lu Connected", c->id));
 801d1b4:	4b59      	ldr	r3, [pc, #356]	@ (801d31c <mqtt_cb+0x264>)
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	2b02      	cmp	r3, #2
 801d1ba:	f340 809a 	ble.w	801d2f2 <mqtt_cb+0x23a>
 801d1be:	4b58      	ldr	r3, [pc, #352]	@ (801d320 <mqtt_cb+0x268>)
 801d1c0:	f241 12bb 	movw	r2, #4539	@ 0x11bb
 801d1c4:	4957      	ldr	r1, [pc, #348]	@ (801d324 <mqtt_cb+0x26c>)
 801d1c6:	2003      	movs	r0, #3
 801d1c8:	f7fd ffb8 	bl	801b13c <mg_log_prefix>
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d1d0:	4619      	mov	r1, r3
 801d1d2:	4857      	ldr	r0, [pc, #348]	@ (801d330 <mqtt_cb+0x278>)
 801d1d4:	f7fe f802 	bl	801b1dc <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 801d1d8:	e08b      	b.n	801d2f2 <mqtt_cb+0x23a>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 801d1da:	4b50      	ldr	r3, [pc, #320]	@ (801d31c <mqtt_cb+0x264>)
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	dd0e      	ble.n	801d200 <mqtt_cb+0x148>
 801d1e2:	4b4f      	ldr	r3, [pc, #316]	@ (801d320 <mqtt_cb+0x268>)
 801d1e4:	f241 12bd 	movw	r2, #4541	@ 0x11bd
 801d1e8:	494e      	ldr	r1, [pc, #312]	@ (801d324 <mqtt_cb+0x26c>)
 801d1ea:	2001      	movs	r0, #1
 801d1ec:	f7fd ffa6 	bl	801b13c <mg_log_prefix>
 801d1f0:	68fb      	ldr	r3, [r7, #12]
 801d1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d1f4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801d1f8:	4619      	mov	r1, r3
 801d1fa:	484e      	ldr	r0, [pc, #312]	@ (801d334 <mqtt_cb+0x27c>)
 801d1fc:	f7fd ffee 	bl	801b1dc <mg_log>
              c->is_closing = 1;
 801d200:	68fa      	ldr	r2, [r7, #12]
 801d202:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801d206:	f043 0320 	orr.w	r3, r3, #32
 801d20a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
            break;
 801d20e:	e070      	b.n	801d2f2 <mqtt_cb+0x23a>
          case MQTT_CMD_PUBLISH: {
            /*MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
                      mm.topic.buf, (int) mm.data.len, mm.data.buf));*/
            if (mm.qos > 0) {
 801d210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d214:	2b00      	cmp	r3, #0
 801d216:	d038      	beq.n	801d28a <mqtt_cb+0x1d2>
              uint16_t id = mg_ntohs(mm.id);
 801d218:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801d21a:	4618      	mov	r0, r3
 801d21c:	f005 fc35 	bl	8022a8a <mg_ntohs>
 801d220:	4603      	mov	r3, r0
 801d222:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
              uint32_t remaining_len = sizeof(id);
 801d226:	2302      	movs	r3, #2
 801d228:	657b      	str	r3, [r7, #84]	@ 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801d230:	f003 0304 	and.w	r3, r3, #4
 801d234:	b2db      	uxtb	r3, r3
 801d236:	2b00      	cmp	r3, #0
 801d238:	d002      	beq.n	801d240 <mqtt_cb+0x188>
 801d23a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d23c:	3302      	adds	r3, #2
 801d23e:	657b      	str	r3, [r7, #84]	@ 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 801d240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
              mg_mqtt_send_header(
 801d244:	2b02      	cmp	r3, #2
 801d246:	d101      	bne.n	801d24c <mqtt_cb+0x194>
 801d248:	2105      	movs	r1, #5
 801d24a:	e000      	b.n	801d24e <mqtt_cb+0x196>
 801d24c:	2104      	movs	r1, #4
 801d24e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d250:	2200      	movs	r2, #0
 801d252:	68f8      	ldr	r0, [r7, #12]
 801d254:	f7ff f872 	bl	801c33c <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 801d258:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 801d25c:	2202      	movs	r2, #2
 801d25e:	4619      	mov	r1, r3
 801d260:	68f8      	ldr	r0, [r7, #12]
 801d262:	f003 fe99 	bl	8020f98 <mg_send>

              if (c->is_mqtt5) {
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801d26c:	f003 0304 	and.w	r3, r3, #4
 801d270:	b2db      	uxtb	r3, r3
 801d272:	2b00      	cmp	r3, #0
 801d274:	d009      	beq.n	801d28a <mqtt_cb+0x1d2>
                uint16_t zero = 0;
 801d276:	2300      	movs	r3, #0
 801d278:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                mg_send(c, &zero, sizeof(zero));
 801d27c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801d280:	2202      	movs	r2, #2
 801d282:	4619      	mov	r1, r3
 801d284:	68f8      	ldr	r0, [r7, #12]
 801d286:	f003 fe87 	bl	8020f98 <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 801d28a:	f107 0314 	add.w	r3, r7, #20
 801d28e:	461a      	mov	r2, r3
 801d290:	2110      	movs	r1, #16
 801d292:	68f8      	ldr	r0, [r7, #12]
 801d294:	f7f8 fb6c 	bl	8015970 <mg_call>
            break;
 801d298:	e02c      	b.n	801d2f4 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801d29a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801d29c:	4618      	mov	r0, r3
 801d29e:	f005 fbf4 	bl	8022a8a <mg_ntohs>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 801d2a6:	2302      	movs	r3, #2
 801d2a8:	647b      	str	r3, [r7, #68]	@ 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 801d2aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d2ac:	2202      	movs	r2, #2
 801d2ae:	2106      	movs	r1, #6
 801d2b0:	68f8      	ldr	r0, [r7, #12]
 801d2b2:	f7ff f843 	bl	801c33c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 801d2b6:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 801d2ba:	2202      	movs	r2, #2
 801d2bc:	4619      	mov	r1, r3
 801d2be:	68f8      	ldr	r0, [r7, #12]
 801d2c0:	f003 fe6a 	bl	8020f98 <mg_send>
            break;
 801d2c4:	e016      	b.n	801d2f4 <mqtt_cb+0x23c>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 801d2c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801d2c8:	4618      	mov	r0, r3
 801d2ca:	f005 fbde 	bl	8022a8a <mg_ntohs>
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 801d2d2:	2302      	movs	r3, #2
 801d2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 801d2d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d2d8:	2200      	movs	r2, #0
 801d2da:	2107      	movs	r1, #7
 801d2dc:	68f8      	ldr	r0, [r7, #12]
 801d2de:	f7ff f82d 	bl	801c33c <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 801d2e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801d2e6:	2202      	movs	r2, #2
 801d2e8:	4619      	mov	r1, r3
 801d2ea:	68f8      	ldr	r0, [r7, #12]
 801d2ec:	f003 fe54 	bl	8020f98 <mg_send>
            break;
 801d2f0:	e000      	b.n	801d2f4 <mqtt_cb+0x23c>
            break;
 801d2f2:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 801d2f4:	f107 0314 	add.w	r3, r7, #20
 801d2f8:	461a      	mov	r2, r3
 801d2fa:	210f      	movs	r1, #15
 801d2fc:	68f8      	ldr	r0, [r7, #12]
 801d2fe:	f7f8 fb37 	bl	8015970 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	3338      	adds	r3, #56	@ 0x38
 801d306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d308:	2100      	movs	r1, #0
 801d30a:	4618      	mov	r0, r3
 801d30c:	f7fd f804 	bl	801a318 <mg_iobuf_del>
    for (;;) {
 801d310:	e6dc      	b.n	801d0cc <mqtt_cb+0x14>
      } else {
        break;
 801d312:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 801d314:	bf00      	nop
 801d316:	375c      	adds	r7, #92	@ 0x5c
 801d318:	46bd      	mov	sp, r7
 801d31a:	bd90      	pop	{r4, r7, pc}
 801d31c:	20000298 	.word	0x20000298
 801d320:	08034520 	.word	0x08034520
 801d324:	08031484 	.word	0x08031484
 801d328:	0803292c 	.word	0x0803292c
 801d32c:	08032948 	.word	0x08032948
 801d330:	08032968 	.word	0x08032968
 801d334:	08032978 	.word	0x08032978

0801d338 <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 801d338:	b580      	push	{r7, lr}
 801d33a:	b096      	sub	sp, #88	@ 0x58
 801d33c:	af00      	add	r7, sp, #0
 801d33e:	60f8      	str	r0, [r7, #12]
 801d340:	60b9      	str	r1, [r7, #8]
 801d342:	607a      	str	r2, [r7, #4]
 801d344:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 801d346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d348:	683a      	ldr	r2, [r7, #0]
 801d34a:	68b9      	ldr	r1, [r7, #8]
 801d34c:	68f8      	ldr	r0, [r7, #12]
 801d34e:	f000 fb5f 	bl	801da10 <mg_connect>
 801d352:	6578      	str	r0, [r7, #84]	@ 0x54
  if (c != NULL) {
 801d354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d356:	2b00      	cmp	r3, #0
 801d358:	d015      	beq.n	801d386 <mg_mqtt_connect+0x4e>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 801d35a:	f107 0314 	add.w	r3, r7, #20
 801d35e:	2240      	movs	r2, #64	@ 0x40
 801d360:	2100      	movs	r1, #0
 801d362:	4618      	mov	r0, r3
 801d364:	f008 fcf4 	bl	8025d50 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d102      	bne.n	801d374 <mg_mqtt_connect+0x3c>
 801d36e:	f107 0314 	add.w	r3, r7, #20
 801d372:	e000      	b.n	801d376 <mg_mqtt_connect+0x3e>
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	4619      	mov	r1, r3
 801d378:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801d37a:	f7ff fad1 	bl	801c920 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 801d37e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d380:	4a03      	ldr	r2, [pc, #12]	@ (801d390 <mg_mqtt_connect+0x58>)
 801d382:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
  return c;
 801d386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 801d388:	4618      	mov	r0, r3
 801d38a:	3758      	adds	r7, #88	@ 0x58
 801d38c:	46bd      	mov	sp, r7
 801d38e:	bd80      	pop	{r7, pc}
 801d390:	0801d0b9 	.word	0x0801d0b9

0801d394 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 801d394:	b580      	push	{r7, lr}
 801d396:	b086      	sub	sp, #24
 801d398:	af00      	add	r7, sp, #0
 801d39a:	60f8      	str	r0, [r7, #12]
 801d39c:	60b9      	str	r1, [r7, #8]
 801d39e:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d3a4:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	68ba      	ldr	r2, [r7, #8]
 801d3b0:	4805      	ldr	r0, [pc, #20]	@ (801d3c8 <mg_vprintf+0x34>)
 801d3b2:	f7f9 f80f 	bl	80163d4 <mg_vxprintf>
  return c->send.len - old;
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801d3ba:	697b      	ldr	r3, [r7, #20]
 801d3bc:	1ad3      	subs	r3, r2, r3
}
 801d3be:	4618      	mov	r0, r3
 801d3c0:	3718      	adds	r7, #24
 801d3c2:	46bd      	mov	sp, r7
 801d3c4:	bd80      	pop	{r7, pc}
 801d3c6:	bf00      	nop
 801d3c8:	08021105 	.word	0x08021105

0801d3cc <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 801d3cc:	b40e      	push	{r1, r2, r3}
 801d3ce:	b580      	push	{r7, lr}
 801d3d0:	b085      	sub	sp, #20
 801d3d2:	af00      	add	r7, sp, #0
 801d3d4:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 801d3d6:	2300      	movs	r3, #0
 801d3d8:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 801d3da:	f107 0320 	add.w	r3, r7, #32
 801d3de:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 801d3e0:	f107 0308 	add.w	r3, r7, #8
 801d3e4:	461a      	mov	r2, r3
 801d3e6:	69f9      	ldr	r1, [r7, #28]
 801d3e8:	6878      	ldr	r0, [r7, #4]
 801d3ea:	f7ff ffd3 	bl	801d394 <mg_vprintf>
 801d3ee:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 801d3f0:	68fb      	ldr	r3, [r7, #12]
}
 801d3f2:	4618      	mov	r0, r3
 801d3f4:	3714      	adds	r7, #20
 801d3f6:	46bd      	mov	sp, r7
 801d3f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d3fc:	b003      	add	sp, #12
 801d3fe:	4770      	bx	lr

0801d400 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 801d400:	b580      	push	{r7, lr}
 801d402:	b088      	sub	sp, #32
 801d404:	af00      	add	r7, sp, #0
 801d406:	f107 0308 	add.w	r3, r7, #8
 801d40a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d40e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 801d410:	4811      	ldr	r0, [pc, #68]	@ (801d458 <mg_atonl+0x58>)
 801d412:	f005 fb21 	bl	8022a58 <mg_ntohl>
 801d416:	4603      	mov	r3, r0
 801d418:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 801d41a:	f107 0318 	add.w	r3, r7, #24
 801d41e:	490f      	ldr	r1, [pc, #60]	@ (801d45c <mg_atonl+0x5c>)
 801d420:	4618      	mov	r0, r3
 801d422:	f004 fb8f 	bl	8021b44 <mg_str_s>
 801d426:	f107 0318 	add.w	r3, r7, #24
 801d42a:	cb0c      	ldmia	r3, {r2, r3}
 801d42c:	f107 0108 	add.w	r1, r7, #8
 801d430:	c903      	ldmia	r1, {r0, r1}
 801d432:	f004 fc13 	bl	8021c5c <mg_strcasecmp>
 801d436:	4603      	mov	r3, r0
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d001      	beq.n	801d440 <mg_atonl+0x40>
 801d43c:	2300      	movs	r3, #0
 801d43e:	e006      	b.n	801d44e <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	697a      	ldr	r2, [r7, #20]
 801d444:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	2200      	movs	r2, #0
 801d44a:	74da      	strb	r2, [r3, #19]
  return true;
 801d44c:	2301      	movs	r3, #1
}
 801d44e:	4618      	mov	r0, r3
 801d450:	3720      	adds	r7, #32
 801d452:	46bd      	mov	sp, r7
 801d454:	bd80      	pop	{r7, pc}
 801d456:	bf00      	nop
 801d458:	7f000001 	.word	0x7f000001
 801d45c:	08032998 	.word	0x08032998

0801d460 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 801d460:	b580      	push	{r7, lr}
 801d462:	b084      	sub	sp, #16
 801d464:	af00      	add	r7, sp, #0
 801d466:	f107 0308 	add.w	r3, r7, #8
 801d46a:	e883 0003 	stmia.w	r3, {r0, r1}
 801d46e:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d001      	beq.n	801d47a <mg_atone+0x1a>
 801d476:	2300      	movs	r3, #0
 801d478:	e009      	b.n	801d48e <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	2210      	movs	r2, #16
 801d47e:	2100      	movs	r1, #0
 801d480:	4618      	mov	r0, r3
 801d482:	f008 fc65 	bl	8025d50 <memset>
  addr->is_ip6 = false;
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	2200      	movs	r2, #0
 801d48a:	74da      	strb	r2, [r3, #19]
  return true;
 801d48c:	2301      	movs	r3, #1
}
 801d48e:	4618      	mov	r0, r3
 801d490:	3710      	adds	r7, #16
 801d492:	46bd      	mov	sp, r7
 801d494:	bd80      	pop	{r7, pc}

0801d496 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 801d496:	b480      	push	{r7}
 801d498:	b089      	sub	sp, #36	@ 0x24
 801d49a:	af00      	add	r7, sp, #0
 801d49c:	f107 0308 	add.w	r3, r7, #8
 801d4a0:	e883 0003 	stmia.w	r3, {r0, r1}
 801d4a4:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 801d4a6:	2300      	movs	r3, #0
 801d4a8:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 801d4aa:	2300      	movs	r3, #0
 801d4ac:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	61fb      	str	r3, [r7, #28]
 801d4b2:	e049      	b.n	801d548 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801d4b4:	68ba      	ldr	r2, [r7, #8]
 801d4b6:	69fb      	ldr	r3, [r7, #28]
 801d4b8:	4413      	add	r3, r2
 801d4ba:	781b      	ldrb	r3, [r3, #0]
 801d4bc:	2b2f      	cmp	r3, #47	@ 0x2f
 801d4be:	d925      	bls.n	801d50c <mg_aton4+0x76>
 801d4c0:	68ba      	ldr	r2, [r7, #8]
 801d4c2:	69fb      	ldr	r3, [r7, #28]
 801d4c4:	4413      	add	r3, r2
 801d4c6:	781b      	ldrb	r3, [r3, #0]
 801d4c8:	2b39      	cmp	r3, #57	@ 0x39
 801d4ca:	d81f      	bhi.n	801d50c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 801d4cc:	f107 0210 	add.w	r2, r7, #16
 801d4d0:	69bb      	ldr	r3, [r7, #24]
 801d4d2:	4413      	add	r3, r2
 801d4d4:	781b      	ldrb	r3, [r3, #0]
 801d4d6:	461a      	mov	r2, r3
 801d4d8:	4613      	mov	r3, r2
 801d4da:	009b      	lsls	r3, r3, #2
 801d4dc:	4413      	add	r3, r2
 801d4de:	005b      	lsls	r3, r3, #1
 801d4e0:	4619      	mov	r1, r3
 801d4e2:	68ba      	ldr	r2, [r7, #8]
 801d4e4:	69fb      	ldr	r3, [r7, #28]
 801d4e6:	4413      	add	r3, r2
 801d4e8:	781b      	ldrb	r3, [r3, #0]
 801d4ea:	3b30      	subs	r3, #48	@ 0x30
 801d4ec:	440b      	add	r3, r1
 801d4ee:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 801d4f0:	697b      	ldr	r3, [r7, #20]
 801d4f2:	2bff      	cmp	r3, #255	@ 0xff
 801d4f4:	dd01      	ble.n	801d4fa <mg_aton4+0x64>
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	e03d      	b.n	801d576 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 801d4fa:	697b      	ldr	r3, [r7, #20]
 801d4fc:	b2d9      	uxtb	r1, r3
 801d4fe:	f107 0210 	add.w	r2, r7, #16
 801d502:	69bb      	ldr	r3, [r7, #24]
 801d504:	4413      	add	r3, r2
 801d506:	460a      	mov	r2, r1
 801d508:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 801d50a:	e01a      	b.n	801d542 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 801d50c:	68ba      	ldr	r2, [r7, #8]
 801d50e:	69fb      	ldr	r3, [r7, #28]
 801d510:	4413      	add	r3, r2
 801d512:	781b      	ldrb	r3, [r3, #0]
 801d514:	2b2e      	cmp	r3, #46	@ 0x2e
 801d516:	d112      	bne.n	801d53e <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 801d518:	69bb      	ldr	r3, [r7, #24]
 801d51a:	2b02      	cmp	r3, #2
 801d51c:	d809      	bhi.n	801d532 <mg_aton4+0x9c>
 801d51e:	69fb      	ldr	r3, [r7, #28]
 801d520:	2b00      	cmp	r3, #0
 801d522:	d006      	beq.n	801d532 <mg_aton4+0x9c>
 801d524:	68ba      	ldr	r2, [r7, #8]
 801d526:	69fb      	ldr	r3, [r7, #28]
 801d528:	3b01      	subs	r3, #1
 801d52a:	4413      	add	r3, r2
 801d52c:	781b      	ldrb	r3, [r3, #0]
 801d52e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d530:	d101      	bne.n	801d536 <mg_aton4+0xa0>
 801d532:	2300      	movs	r3, #0
 801d534:	e01f      	b.n	801d576 <mg_aton4+0xe0>
      num_dots++;
 801d536:	69bb      	ldr	r3, [r7, #24]
 801d538:	3301      	adds	r3, #1
 801d53a:	61bb      	str	r3, [r7, #24]
 801d53c:	e001      	b.n	801d542 <mg_aton4+0xac>
    } else {
      return false;
 801d53e:	2300      	movs	r3, #0
 801d540:	e019      	b.n	801d576 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 801d542:	69fb      	ldr	r3, [r7, #28]
 801d544:	3301      	adds	r3, #1
 801d546:	61fb      	str	r3, [r7, #28]
 801d548:	68fb      	ldr	r3, [r7, #12]
 801d54a:	69fa      	ldr	r2, [r7, #28]
 801d54c:	429a      	cmp	r2, r3
 801d54e:	d3b1      	bcc.n	801d4b4 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 801d550:	69bb      	ldr	r3, [r7, #24]
 801d552:	2b03      	cmp	r3, #3
 801d554:	d106      	bne.n	801d564 <mg_aton4+0xce>
 801d556:	68ba      	ldr	r2, [r7, #8]
 801d558:	69fb      	ldr	r3, [r7, #28]
 801d55a:	3b01      	subs	r3, #1
 801d55c:	4413      	add	r3, r2
 801d55e:	781b      	ldrb	r3, [r3, #0]
 801d560:	2b2e      	cmp	r3, #46	@ 0x2e
 801d562:	d101      	bne.n	801d568 <mg_aton4+0xd2>
 801d564:	2300      	movs	r3, #0
 801d566:	e006      	b.n	801d576 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	693a      	ldr	r2, [r7, #16]
 801d56c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	2200      	movs	r2, #0
 801d572:	74da      	strb	r2, [r3, #19]
  return true;
 801d574:	2301      	movs	r3, #1
}
 801d576:	4618      	mov	r0, r3
 801d578:	3724      	adds	r7, #36	@ 0x24
 801d57a:	46bd      	mov	sp, r7
 801d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d580:	4770      	bx	lr

0801d582 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 801d582:	b580      	push	{r7, lr}
 801d584:	b088      	sub	sp, #32
 801d586:	af00      	add	r7, sp, #0
 801d588:	f107 0308 	add.w	r3, r7, #8
 801d58c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d590:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	2b0d      	cmp	r3, #13
 801d596:	d801      	bhi.n	801d59c <mg_v4mapped+0x1a>
 801d598:	2300      	movs	r3, #0
 801d59a:	e056      	b.n	801d64a <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 801d59c:	68bb      	ldr	r3, [r7, #8]
 801d59e:	781b      	ldrb	r3, [r3, #0]
 801d5a0:	2b3a      	cmp	r3, #58	@ 0x3a
 801d5a2:	d109      	bne.n	801d5b8 <mg_v4mapped+0x36>
 801d5a4:	68bb      	ldr	r3, [r7, #8]
 801d5a6:	3301      	adds	r3, #1
 801d5a8:	781b      	ldrb	r3, [r3, #0]
 801d5aa:	2b3a      	cmp	r3, #58	@ 0x3a
 801d5ac:	d104      	bne.n	801d5b8 <mg_v4mapped+0x36>
 801d5ae:	68bb      	ldr	r3, [r7, #8]
 801d5b0:	3306      	adds	r3, #6
 801d5b2:	781b      	ldrb	r3, [r3, #0]
 801d5b4:	2b3a      	cmp	r3, #58	@ 0x3a
 801d5b6:	d001      	beq.n	801d5bc <mg_v4mapped+0x3a>
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	e046      	b.n	801d64a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801d5bc:	2302      	movs	r3, #2
 801d5be:	61fb      	str	r3, [r7, #28]
 801d5c0:	e010      	b.n	801d5e4 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 801d5c2:	68ba      	ldr	r2, [r7, #8]
 801d5c4:	69fb      	ldr	r3, [r7, #28]
 801d5c6:	4413      	add	r3, r2
 801d5c8:	781b      	ldrb	r3, [r3, #0]
 801d5ca:	2b66      	cmp	r3, #102	@ 0x66
 801d5cc:	d007      	beq.n	801d5de <mg_v4mapped+0x5c>
 801d5ce:	68ba      	ldr	r2, [r7, #8]
 801d5d0:	69fb      	ldr	r3, [r7, #28]
 801d5d2:	4413      	add	r3, r2
 801d5d4:	781b      	ldrb	r3, [r3, #0]
 801d5d6:	2b46      	cmp	r3, #70	@ 0x46
 801d5d8:	d001      	beq.n	801d5de <mg_v4mapped+0x5c>
 801d5da:	2300      	movs	r3, #0
 801d5dc:	e035      	b.n	801d64a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 801d5de:	69fb      	ldr	r3, [r7, #28]
 801d5e0:	3301      	adds	r3, #1
 801d5e2:	61fb      	str	r3, [r7, #28]
 801d5e4:	69fb      	ldr	r3, [r7, #28]
 801d5e6:	2b05      	cmp	r3, #5
 801d5e8:	ddeb      	ble.n	801d5c2 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 801d5ea:	68bb      	ldr	r3, [r7, #8]
 801d5ec:	1dd9      	adds	r1, r3, #7
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	1fda      	subs	r2, r3, #7
 801d5f2:	f107 0314 	add.w	r3, r7, #20
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	f004 fac1 	bl	8021b7e <mg_str_n>
 801d5fc:	687a      	ldr	r2, [r7, #4]
 801d5fe:	f107 0314 	add.w	r3, r7, #20
 801d602:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d606:	f7ff ff46 	bl	801d496 <mg_aton4>
 801d60a:	4603      	mov	r3, r0
 801d60c:	f083 0301 	eor.w	r3, r3, #1
 801d610:	b2db      	uxtb	r3, r3
 801d612:	2b00      	cmp	r3, #0
 801d614:	d001      	beq.n	801d61a <mg_v4mapped+0x98>
 801d616:	2300      	movs	r3, #0
 801d618:	e017      	b.n	801d64a <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	2210      	movs	r2, #16
 801d624:	2100      	movs	r1, #0
 801d626:	4618      	mov	r0, r3
 801d628:	f008 fb92 	bl	8025d50 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	22ff      	movs	r2, #255	@ 0xff
 801d630:	72da      	strb	r2, [r3, #11]
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	7ada      	ldrb	r2, [r3, #11]
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	330c      	adds	r3, #12
 801d63e:	693a      	ldr	r2, [r7, #16]
 801d640:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	2201      	movs	r2, #1
 801d646:	74da      	strb	r2, [r3, #19]
  return true;
 801d648:	2301      	movs	r3, #1
}
 801d64a:	4618      	mov	r0, r3
 801d64c:	3720      	adds	r7, #32
 801d64e:	46bd      	mov	sp, r7
 801d650:	bd80      	pop	{r7, pc}

0801d652 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 801d652:	b580      	push	{r7, lr}
 801d654:	b090      	sub	sp, #64	@ 0x40
 801d656:	af02      	add	r7, sp, #8
 801d658:	f107 0308 	add.w	r3, r7, #8
 801d65c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d660:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 801d662:	2300      	movs	r3, #0
 801d664:	633b      	str	r3, [r7, #48]	@ 0x30
 801d666:	2300      	movs	r3, #0
 801d668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d66a:	232a      	movs	r3, #42	@ 0x2a
 801d66c:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	2200      	movs	r2, #0
 801d672:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	2b02      	cmp	r3, #2
 801d678:	d909      	bls.n	801d68e <mg_aton6+0x3c>
 801d67a:	68bb      	ldr	r3, [r7, #8]
 801d67c:	781b      	ldrb	r3, [r3, #0]
 801d67e:	2b5b      	cmp	r3, #91	@ 0x5b
 801d680:	d105      	bne.n	801d68e <mg_aton6+0x3c>
 801d682:	68bb      	ldr	r3, [r7, #8]
 801d684:	3301      	adds	r3, #1
 801d686:	60bb      	str	r3, [r7, #8]
 801d688:	68fb      	ldr	r3, [r7, #12]
 801d68a:	3b02      	subs	r3, #2
 801d68c:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 801d68e:	687a      	ldr	r2, [r7, #4]
 801d690:	f107 0308 	add.w	r3, r7, #8
 801d694:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d698:	f7ff ff73 	bl	801d582 <mg_v4mapped>
 801d69c:	4603      	mov	r3, r0
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d001      	beq.n	801d6a6 <mg_aton6+0x54>
 801d6a2:	2301      	movs	r3, #1
 801d6a4:	e0e1      	b.n	801d86a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801d6a6:	2300      	movs	r3, #0
 801d6a8:	637b      	str	r3, [r7, #52]	@ 0x34
 801d6aa:	e0b0      	b.n	801d80e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801d6ac:	68ba      	ldr	r2, [r7, #8]
 801d6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6b0:	4413      	add	r3, r2
 801d6b2:	781b      	ldrb	r3, [r3, #0]
 801d6b4:	2b2f      	cmp	r3, #47	@ 0x2f
 801d6b6:	d905      	bls.n	801d6c4 <mg_aton6+0x72>
 801d6b8:	68ba      	ldr	r2, [r7, #8]
 801d6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6bc:	4413      	add	r3, r2
 801d6be:	781b      	ldrb	r3, [r3, #0]
 801d6c0:	2b39      	cmp	r3, #57	@ 0x39
 801d6c2:	d917      	bls.n	801d6f4 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d6c4:	68ba      	ldr	r2, [r7, #8]
 801d6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6c8:	4413      	add	r3, r2
 801d6ca:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 801d6cc:	2b60      	cmp	r3, #96	@ 0x60
 801d6ce:	d905      	bls.n	801d6dc <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d6d0:	68ba      	ldr	r2, [r7, #8]
 801d6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6d4:	4413      	add	r3, r2
 801d6d6:	781b      	ldrb	r3, [r3, #0]
 801d6d8:	2b66      	cmp	r3, #102	@ 0x66
 801d6da:	d90b      	bls.n	801d6f4 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d6dc:	68ba      	ldr	r2, [r7, #8]
 801d6de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6e0:	4413      	add	r3, r2
 801d6e2:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 801d6e4:	2b40      	cmp	r3, #64	@ 0x40
 801d6e6:	d933      	bls.n	801d750 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d6e8:	68ba      	ldr	r2, [r7, #8]
 801d6ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d6ec:	4413      	add	r3, r2
 801d6ee:	781b      	ldrb	r3, [r3, #0]
 801d6f0:	2b46      	cmp	r3, #70	@ 0x46
 801d6f2:	d82d      	bhi.n	801d750 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 801d6f4:	2300      	movs	r3, #0
 801d6f6:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 801d6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6fa:	3303      	adds	r3, #3
 801d6fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d6fe:	429a      	cmp	r2, r3
 801d700:	d901      	bls.n	801d706 <mg_aton6+0xb4>
 801d702:	2300      	movs	r3, #0
 801d704:	e0b1      	b.n	801d86a <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 801d706:	68ba      	ldr	r2, [r7, #8]
 801d708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d70a:	18d1      	adds	r1, r2, r3
 801d70c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d710:	1ad3      	subs	r3, r2, r3
 801d712:	1c5a      	adds	r2, r3, #1
 801d714:	f107 0318 	add.w	r3, r7, #24
 801d718:	4618      	mov	r0, r3
 801d71a:	f004 fa30 	bl	8021b7e <mg_str_n>
 801d71e:	f107 0314 	add.w	r3, r7, #20
 801d722:	2204      	movs	r2, #4
 801d724:	9200      	str	r2, [sp, #0]
 801d726:	2210      	movs	r2, #16
 801d728:	f107 0118 	add.w	r1, r7, #24
 801d72c:	c903      	ldmia	r1, {r0, r1}
 801d72e:	f004 fc2d 	bl	8021f8c <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 801d732:	697b      	ldr	r3, [r7, #20]
 801d734:	0a1b      	lsrs	r3, r3, #8
 801d736:	b2d9      	uxtb	r1, r3
 801d738:	687a      	ldr	r2, [r7, #4]
 801d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d73c:	4413      	add	r3, r2
 801d73e:	460a      	mov	r2, r1
 801d740:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 801d742:	697a      	ldr	r2, [r7, #20]
 801d744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d746:	3301      	adds	r3, #1
 801d748:	b2d1      	uxtb	r1, r2
 801d74a:	687a      	ldr	r2, [r7, #4]
 801d74c:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 801d74e:	e05b      	b.n	801d808 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 801d750:	68ba      	ldr	r2, [r7, #8]
 801d752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d754:	4413      	add	r3, r2
 801d756:	781b      	ldrb	r3, [r3, #0]
 801d758:	2b3a      	cmp	r3, #58	@ 0x3a
 801d75a:	d134      	bne.n	801d7c6 <mg_aton6+0x174>
      j = i + 1;
 801d75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d75e:	3301      	adds	r3, #1
 801d760:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 801d762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d764:	2b00      	cmp	r3, #0
 801d766:	d014      	beq.n	801d792 <mg_aton6+0x140>
 801d768:	68ba      	ldr	r2, [r7, #8]
 801d76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d76c:	3b01      	subs	r3, #1
 801d76e:	4413      	add	r3, r2
 801d770:	781b      	ldrb	r3, [r3, #0]
 801d772:	2b3a      	cmp	r3, #58	@ 0x3a
 801d774:	d10d      	bne.n	801d792 <mg_aton6+0x140>
        dc = n;  // Double colon
 801d776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d778:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801d77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d77c:	2b01      	cmp	r3, #1
 801d77e:	d90f      	bls.n	801d7a0 <mg_aton6+0x14e>
 801d780:	68ba      	ldr	r2, [r7, #8]
 801d782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d784:	3b02      	subs	r3, #2
 801d786:	4413      	add	r3, r2
 801d788:	781b      	ldrb	r3, [r3, #0]
 801d78a:	2b3a      	cmp	r3, #58	@ 0x3a
 801d78c:	d108      	bne.n	801d7a0 <mg_aton6+0x14e>
 801d78e:	2300      	movs	r3, #0
 801d790:	e06b      	b.n	801d86a <mg_aton6+0x218>
      } else if (i > 0) {
 801d792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d794:	2b00      	cmp	r3, #0
 801d796:	d004      	beq.n	801d7a2 <mg_aton6+0x150>
        n += 2;
 801d798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d79a:	3302      	adds	r3, #2
 801d79c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d79e:	e000      	b.n	801d7a2 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 801d7a0:	bf00      	nop
      }
      if (n > 14) return false;
 801d7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7a4:	2b0e      	cmp	r3, #14
 801d7a6:	d901      	bls.n	801d7ac <mg_aton6+0x15a>
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	e05e      	b.n	801d86a <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 801d7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7ae:	3301      	adds	r3, #1
 801d7b0:	687a      	ldr	r2, [r7, #4]
 801d7b2:	2100      	movs	r1, #0
 801d7b4:	54d1      	strb	r1, [r2, r3]
 801d7b6:	687a      	ldr	r2, [r7, #4]
 801d7b8:	5cd1      	ldrb	r1, [r2, r3]
 801d7ba:	687a      	ldr	r2, [r7, #4]
 801d7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7be:	4413      	add	r3, r2
 801d7c0:	460a      	mov	r2, r1
 801d7c2:	701a      	strb	r2, [r3, #0]
 801d7c4:	e020      	b.n	801d808 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 801d7c6:	68ba      	ldr	r2, [r7, #8]
 801d7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d7ca:	4413      	add	r3, r2
 801d7cc:	781b      	ldrb	r3, [r3, #0]
 801d7ce:	2b25      	cmp	r3, #37	@ 0x25
 801d7d0:	d118      	bne.n	801d804 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801d7d2:	68ba      	ldr	r2, [r7, #8]
 801d7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d7d6:	3301      	adds	r3, #1
 801d7d8:	18d1      	adds	r1, r2, r3
 801d7da:	68fa      	ldr	r2, [r7, #12]
 801d7dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d7de:	1ad3      	subs	r3, r2, r3
 801d7e0:	1e5a      	subs	r2, r3, #1
 801d7e2:	f107 0320 	add.w	r3, r7, #32
 801d7e6:	4618      	mov	r0, r3
 801d7e8:	f004 f9c9 	bl	8021b7e <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 801d7f0:	2201      	movs	r2, #1
 801d7f2:	9200      	str	r2, [sp, #0]
 801d7f4:	220a      	movs	r2, #10
 801d7f6:	f107 0120 	add.w	r1, r7, #32
 801d7fa:	c903      	ldmia	r1, {r0, r1}
 801d7fc:	f004 fbc6 	bl	8021f8c <mg_str_to_num>
 801d800:	4603      	mov	r3, r0
 801d802:	e032      	b.n	801d86a <mg_aton6+0x218>
    } else {
      return false;
 801d804:	2300      	movs	r3, #0
 801d806:	e030      	b.n	801d86a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 801d808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d80a:	3301      	adds	r3, #1
 801d80c:	637b      	str	r3, [r7, #52]	@ 0x34
 801d80e:	68fb      	ldr	r3, [r7, #12]
 801d810:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d812:	429a      	cmp	r2, r3
 801d814:	f4ff af4a 	bcc.w	801d6ac <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 801d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d81a:	2b0d      	cmp	r3, #13
 801d81c:	d804      	bhi.n	801d828 <mg_aton6+0x1d6>
 801d81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d820:	2b2a      	cmp	r3, #42	@ 0x2a
 801d822:	d101      	bne.n	801d828 <mg_aton6+0x1d6>
 801d824:	2300      	movs	r3, #0
 801d826:	e020      	b.n	801d86a <mg_aton6+0x218>
  if (n < 14) {
 801d828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d82a:	2b0d      	cmp	r3, #13
 801d82c:	d819      	bhi.n	801d862 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 801d82e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d832:	1ad3      	subs	r3, r2, r3
 801d834:	330e      	adds	r3, #14
 801d836:	687a      	ldr	r2, [r7, #4]
 801d838:	18d0      	adds	r0, r2, r3
 801d83a:	687a      	ldr	r2, [r7, #4]
 801d83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d83e:	18d1      	adds	r1, r2, r3
 801d840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d844:	1ad3      	subs	r3, r2, r3
 801d846:	3302      	adds	r3, #2
 801d848:	461a      	mov	r2, r3
 801d84a:	f008 fa67 	bl	8025d1c <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 801d84e:	687a      	ldr	r2, [r7, #4]
 801d850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d852:	18d0      	adds	r0, r2, r3
 801d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d856:	f1c3 030e 	rsb	r3, r3, #14
 801d85a:	461a      	mov	r2, r3
 801d85c:	2100      	movs	r1, #0
 801d85e:	f008 fa77 	bl	8025d50 <memset>
  }

  addr->is_ip6 = true;
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	2201      	movs	r2, #1
 801d866:	74da      	strb	r2, [r3, #19]
  return true;
 801d868:	2301      	movs	r3, #1
}
 801d86a:	4618      	mov	r0, r3
 801d86c:	3738      	adds	r7, #56	@ 0x38
 801d86e:	46bd      	mov	sp, r7
 801d870:	bd80      	pop	{r7, pc}

0801d872 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 801d872:	b580      	push	{r7, lr}
 801d874:	b084      	sub	sp, #16
 801d876:	af00      	add	r7, sp, #0
 801d878:	f107 0308 	add.w	r3, r7, #8
 801d87c:	e883 0003 	stmia.w	r3, {r0, r1}
 801d880:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801d882:	687a      	ldr	r2, [r7, #4]
 801d884:	f107 0308 	add.w	r3, r7, #8
 801d888:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d88c:	f7ff fde8 	bl	801d460 <mg_atone>
 801d890:	4603      	mov	r3, r0
 801d892:	2b00      	cmp	r3, #0
 801d894:	d11d      	bne.n	801d8d2 <mg_aton+0x60>
 801d896:	687a      	ldr	r2, [r7, #4]
 801d898:	f107 0308 	add.w	r3, r7, #8
 801d89c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d8a0:	f7ff fdae 	bl	801d400 <mg_atonl>
 801d8a4:	4603      	mov	r3, r0
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d113      	bne.n	801d8d2 <mg_aton+0x60>
 801d8aa:	687a      	ldr	r2, [r7, #4]
 801d8ac:	f107 0308 	add.w	r3, r7, #8
 801d8b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d8b4:	f7ff fdef 	bl	801d496 <mg_aton4>
 801d8b8:	4603      	mov	r3, r0
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d109      	bne.n	801d8d2 <mg_aton+0x60>
         mg_aton6(str, addr);
 801d8be:	687a      	ldr	r2, [r7, #4]
 801d8c0:	f107 0308 	add.w	r3, r7, #8
 801d8c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d8c8:	f7ff fec3 	bl	801d652 <mg_aton6>
 801d8cc:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d001      	beq.n	801d8d6 <mg_aton+0x64>
 801d8d2:	2301      	movs	r3, #1
 801d8d4:	e000      	b.n	801d8d8 <mg_aton+0x66>
 801d8d6:	2300      	movs	r3, #0
 801d8d8:	f003 0301 	and.w	r3, r3, #1
 801d8dc:	b2db      	uxtb	r3, r3
}
 801d8de:	4618      	mov	r0, r3
 801d8e0:	3710      	adds	r7, #16
 801d8e2:	46bd      	mov	sp, r7
 801d8e4:	bd80      	pop	{r7, pc}

0801d8e6 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 801d8e6:	b580      	push	{r7, lr}
 801d8e8:	b084      	sub	sp, #16
 801d8ea:	af00      	add	r7, sp, #0
 801d8ec:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d8f2:	33b0      	adds	r3, #176	@ 0xb0
 801d8f4:	4619      	mov	r1, r3
 801d8f6:	2001      	movs	r0, #1
 801d8f8:	f7f7 fa5a 	bl	8014db0 <mg_calloc>
 801d8fc:	60f8      	str	r0, [r7, #12]
  if (c != NULL) {
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	2b00      	cmp	r3, #0
 801d902:	d017      	beq.n	801d934 <mg_alloc_conn+0x4e>
    c->mgr = mgr;
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	687a      	ldr	r2, [r7, #4]
 801d908:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d910:	675a      	str	r2, [r3, #116]	@ 0x74
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	645a      	str	r2, [r3, #68]	@ 0x44
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 801d922:	687b      	ldr	r3, [r7, #4]
 801d924:	69db      	ldr	r3, [r3, #28]
 801d926:	1c5a      	adds	r2, r3, #1
 801d928:	687b      	ldr	r3, [r7, #4]
 801d92a:	61da      	str	r2, [r3, #28]
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	69da      	ldr	r2, [r3, #28]
 801d930:	68fb      	ldr	r3, [r7, #12]
 801d932:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 801d934:	68fb      	ldr	r3, [r7, #12]
}
 801d936:	4618      	mov	r0, r3
 801d938:	3710      	adds	r7, #16
 801d93a:	46bd      	mov	sp, r7
 801d93c:	bd80      	pop	{r7, pc}
	...

0801d940 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 801d940:	b580      	push	{r7, lr}
 801d942:	b084      	sub	sp, #16
 801d944:	af00      	add	r7, sp, #0
 801d946:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 801d948:	6878      	ldr	r0, [r7, #4]
 801d94a:	f7f7 fa6a 	bl	8014e22 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	685b      	ldr	r3, [r3, #4]
 801d952:	60fb      	str	r3, [r7, #12]
 801d954:	e002      	b.n	801d95c <mg_close_conn+0x1c>
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	681b      	ldr	r3, [r3, #0]
 801d95a:	60fb      	str	r3, [r7, #12]
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	687a      	ldr	r2, [r7, #4]
 801d962:	429a      	cmp	r2, r3
 801d964:	d1f7      	bne.n	801d956 <mg_close_conn+0x16>
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681a      	ldr	r2, [r3, #0]
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	685b      	ldr	r3, [r3, #4]
 801d972:	689b      	ldr	r3, [r3, #8]
 801d974:	687a      	ldr	r2, [r7, #4]
 801d976:	429a      	cmp	r2, r3
 801d978:	d103      	bne.n	801d982 <mg_close_conn+0x42>
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	685b      	ldr	r3, [r3, #4]
 801d97e:	2200      	movs	r2, #0
 801d980:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	685b      	ldr	r3, [r3, #4]
 801d986:	691b      	ldr	r3, [r3, #16]
 801d988:	687a      	ldr	r2, [r7, #4]
 801d98a:	429a      	cmp	r2, r3
 801d98c:	d103      	bne.n	801d996 <mg_close_conn+0x56>
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	685b      	ldr	r3, [r3, #4]
 801d992:	2200      	movs	r2, #0
 801d994:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 801d996:	2200      	movs	r2, #0
 801d998:	2109      	movs	r1, #9
 801d99a:	6878      	ldr	r0, [r7, #4]
 801d99c:	f7f7 ffe8 	bl	8015970 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 801d9a0:	4b17      	ldr	r3, [pc, #92]	@ (801da00 <mg_close_conn+0xc0>)
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	2b02      	cmp	r3, #2
 801d9a6:	dd0e      	ble.n	801d9c6 <mg_close_conn+0x86>
 801d9a8:	4b16      	ldr	r3, [pc, #88]	@ (801da04 <mg_close_conn+0xc4>)
 801d9aa:	f241 22ae 	movw	r2, #4782	@ 0x12ae
 801d9ae:	4916      	ldr	r1, [pc, #88]	@ (801da08 <mg_close_conn+0xc8>)
 801d9b0:	2003      	movs	r0, #3
 801d9b2:	f7fd fbc3 	bl	801b13c <mg_log_prefix>
 801d9b6:	687b      	ldr	r3, [r7, #4]
 801d9b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d9be:	461a      	mov	r2, r3
 801d9c0:	4812      	ldr	r0, [pc, #72]	@ (801da0c <mg_close_conn+0xcc>)
 801d9c2:	f7fd fc0b 	bl	801b1dc <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 801d9c6:	6878      	ldr	r0, [r7, #4]
 801d9c8:	f004 fe14 	bl	80225f4 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	3338      	adds	r3, #56	@ 0x38
 801d9d0:	4618      	mov	r0, r3
 801d9d2:	f7fc fcec 	bl	801a3ae <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	3348      	adds	r3, #72	@ 0x48
 801d9da:	4618      	mov	r0, r3
 801d9dc:	f7fc fce7 	bl	801a3ae <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	3368      	adds	r3, #104	@ 0x68
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	f7fc fce2 	bl	801a3ae <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 801d9ea:	21b0      	movs	r1, #176	@ 0xb0
 801d9ec:	6878      	ldr	r0, [r7, #4]
 801d9ee:	f004 ffb3 	bl	8022958 <mg_bzero>
  free(c);
 801d9f2:	6878      	ldr	r0, [r7, #4]
 801d9f4:	f7ee fe68 	bl	800c6c8 <vPortFree>
}
 801d9f8:	bf00      	nop
 801d9fa:	3710      	adds	r7, #16
 801d9fc:	46bd      	mov	sp, r7
 801d9fe:	bd80      	pop	{r7, pc}
 801da00:	20000298 	.word	0x20000298
 801da04:	08034528 	.word	0x08034528
 801da08:	08031484 	.word	0x08031484
 801da0c:	080329a4 	.word	0x080329a4

0801da10 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 801da10:	b580      	push	{r7, lr}
 801da12:	b086      	sub	sp, #24
 801da14:	af00      	add	r7, sp, #0
 801da16:	60f8      	str	r0, [r7, #12]
 801da18:	60b9      	str	r1, [r7, #8]
 801da1a:	607a      	str	r2, [r7, #4]
 801da1c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801da1e:	2300      	movs	r3, #0
 801da20:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 801da22:	68bb      	ldr	r3, [r7, #8]
 801da24:	2b00      	cmp	r3, #0
 801da26:	d003      	beq.n	801da30 <mg_connect+0x20>
 801da28:	68bb      	ldr	r3, [r7, #8]
 801da2a:	781b      	ldrb	r3, [r3, #0]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d10e      	bne.n	801da4e <mg_connect+0x3e>
    MG_ERROR(("null url"));
 801da30:	4b37      	ldr	r3, [pc, #220]	@ (801db10 <mg_connect+0x100>)
 801da32:	681b      	ldr	r3, [r3, #0]
 801da34:	2b00      	cmp	r3, #0
 801da36:	dd66      	ble.n	801db06 <mg_connect+0xf6>
 801da38:	4b36      	ldr	r3, [pc, #216]	@ (801db14 <mg_connect+0x104>)
 801da3a:	f241 22be 	movw	r2, #4798	@ 0x12be
 801da3e:	4936      	ldr	r1, [pc, #216]	@ (801db18 <mg_connect+0x108>)
 801da40:	2001      	movs	r0, #1
 801da42:	f7fd fb7b 	bl	801b13c <mg_log_prefix>
 801da46:	4835      	ldr	r0, [pc, #212]	@ (801db1c <mg_connect+0x10c>)
 801da48:	f7fd fbc8 	bl	801b1dc <mg_log>
 801da4c:	e05b      	b.n	801db06 <mg_connect+0xf6>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 801da4e:	68f8      	ldr	r0, [r7, #12]
 801da50:	f7ff ff49 	bl	801d8e6 <mg_alloc_conn>
 801da54:	6178      	str	r0, [r7, #20]
 801da56:	697b      	ldr	r3, [r7, #20]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d10e      	bne.n	801da7a <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 801da5c:	4b2c      	ldr	r3, [pc, #176]	@ (801db10 <mg_connect+0x100>)
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	2b00      	cmp	r3, #0
 801da62:	dd50      	ble.n	801db06 <mg_connect+0xf6>
 801da64:	4b2b      	ldr	r3, [pc, #172]	@ (801db14 <mg_connect+0x104>)
 801da66:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 801da6a:	492b      	ldr	r1, [pc, #172]	@ (801db18 <mg_connect+0x108>)
 801da6c:	2001      	movs	r0, #1
 801da6e:	f7fd fb65 	bl	801b13c <mg_log_prefix>
 801da72:	482b      	ldr	r0, [pc, #172]	@ (801db20 <mg_connect+0x110>)
 801da74:	f7fd fbb2 	bl	801b1dc <mg_log>
 801da78:	e045      	b.n	801db06 <mg_connect+0xf6>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801da7a:	68fb      	ldr	r3, [r7, #12]
 801da7c:	681a      	ldr	r2, [r3, #0]
 801da7e:	697b      	ldr	r3, [r7, #20]
 801da80:	601a      	str	r2, [r3, #0]
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	697a      	ldr	r2, [r7, #20]
 801da86:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 801da88:	2204      	movs	r2, #4
 801da8a:	4926      	ldr	r1, [pc, #152]	@ (801db24 <mg_connect+0x114>)
 801da8c:	68b8      	ldr	r0, [r7, #8]
 801da8e:	f008 f994 	bl	8025dba <strncmp>
 801da92:	4603      	mov	r3, r0
 801da94:	2b00      	cmp	r3, #0
 801da96:	bf0c      	ite	eq
 801da98:	2301      	moveq	r3, #1
 801da9a:	2300      	movne	r3, #0
 801da9c:	b2d9      	uxtb	r1, r3
 801da9e:	697a      	ldr	r2, [r7, #20]
 801daa0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801daa4:	f361 0300 	bfi	r3, r1, #0, #1
 801daa8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 801daac:	697b      	ldr	r3, [r7, #20]
 801daae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dab2:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 801dab4:	697b      	ldr	r3, [r7, #20]
 801dab6:	687a      	ldr	r2, [r7, #4]
 801dab8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 801daba:	697a      	ldr	r2, [r7, #20]
 801dabc:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801dac0:	f043 0302 	orr.w	r3, r3, #2
 801dac4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 801dac8:	697b      	ldr	r3, [r7, #20]
 801daca:	683a      	ldr	r2, [r7, #0]
 801dacc:	67da      	str	r2, [r3, #124]	@ 0x7c
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801dace:	4b10      	ldr	r3, [pc, #64]	@ (801db10 <mg_connect+0x100>)
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	2b02      	cmp	r3, #2
 801dad4:	dd0e      	ble.n	801daf4 <mg_connect+0xe4>
 801dad6:	4b0f      	ldr	r3, [pc, #60]	@ (801db14 <mg_connect+0x104>)
 801dad8:	f241 22c8 	movw	r2, #4808	@ 0x12c8
 801dadc:	490e      	ldr	r1, [pc, #56]	@ (801db18 <mg_connect+0x108>)
 801dade:	2003      	movs	r0, #3
 801dae0:	f7fd fb2c 	bl	801b13c <mg_log_prefix>
 801dae4:	697b      	ldr	r3, [r7, #20]
 801dae6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801dae8:	697b      	ldr	r3, [r7, #20]
 801daea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801daec:	68bb      	ldr	r3, [r7, #8]
 801daee:	480e      	ldr	r0, [pc, #56]	@ (801db28 <mg_connect+0x118>)
 801daf0:	f7fd fb74 	bl	801b1dc <mg_log>
    mg_call(c, MG_EV_OPEN, (void *) url);
 801daf4:	68ba      	ldr	r2, [r7, #8]
 801daf6:	2101      	movs	r1, #1
 801daf8:	6978      	ldr	r0, [r7, #20]
 801dafa:	f7f7 ff39 	bl	8015970 <mg_call>
    mg_resolve(c, url);
 801dafe:	68b9      	ldr	r1, [r7, #8]
 801db00:	6978      	ldr	r0, [r7, #20]
 801db02:	f7f7 fef1 	bl	80158e8 <mg_resolve>
  }
  return c;
 801db06:	697b      	ldr	r3, [r7, #20]
}
 801db08:	4618      	mov	r0, r3
 801db0a:	3718      	adds	r7, #24
 801db0c:	46bd      	mov	sp, r7
 801db0e:	bd80      	pop	{r7, pc}
 801db10:	20000298 	.word	0x20000298
 801db14:	08034538 	.word	0x08034538
 801db18:	08031484 	.word	0x08031484
 801db1c:	080329b4 	.word	0x080329b4
 801db20:	080329c0 	.word	0x080329c0
 801db24:	080329c4 	.word	0x080329c4
 801db28:	080315e0 	.word	0x080315e0

0801db2c <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 801db2c:	b580      	push	{r7, lr}
 801db2e:	b086      	sub	sp, #24
 801db30:	af00      	add	r7, sp, #0
 801db32:	60f8      	str	r0, [r7, #12]
 801db34:	60b9      	str	r1, [r7, #8]
 801db36:	607a      	str	r2, [r7, #4]
 801db38:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 801db3a:	2300      	movs	r3, #0
 801db3c:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 801db3e:	68f8      	ldr	r0, [r7, #12]
 801db40:	f7ff fed1 	bl	801d8e6 <mg_alloc_conn>
 801db44:	6178      	str	r0, [r7, #20]
 801db46:	697b      	ldr	r3, [r7, #20]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d10f      	bne.n	801db6c <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 801db4c:	4b41      	ldr	r3, [pc, #260]	@ (801dc54 <mg_listen+0x128>)
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	2b00      	cmp	r3, #0
 801db52:	dd7a      	ble.n	801dc4a <mg_listen+0x11e>
 801db54:	4b40      	ldr	r3, [pc, #256]	@ (801dc58 <mg_listen+0x12c>)
 801db56:	f241 22d3 	movw	r2, #4819	@ 0x12d3
 801db5a:	4940      	ldr	r1, [pc, #256]	@ (801dc5c <mg_listen+0x130>)
 801db5c:	2001      	movs	r0, #1
 801db5e:	f7fd faed 	bl	801b13c <mg_log_prefix>
 801db62:	68b9      	ldr	r1, [r7, #8]
 801db64:	483e      	ldr	r0, [pc, #248]	@ (801dc60 <mg_listen+0x134>)
 801db66:	f7fd fb39 	bl	801b1dc <mg_log>
 801db6a:	e06e      	b.n	801dc4a <mg_listen+0x11e>
  } else if (!mg_open_listener(c, url)) {
 801db6c:	68b9      	ldr	r1, [r7, #8]
 801db6e:	6978      	ldr	r0, [r7, #20]
 801db70:	f003 f852 	bl	8020c18 <mg_open_listener>
 801db74:	4603      	mov	r3, r0
 801db76:	f083 0301 	eor.w	r3, r3, #1
 801db7a:	b2db      	uxtb	r3, r3
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d019      	beq.n	801dbb4 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 801db80:	4b34      	ldr	r3, [pc, #208]	@ (801dc54 <mg_listen+0x128>)
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	2b00      	cmp	r3, #0
 801db86:	dd0f      	ble.n	801dba8 <mg_listen+0x7c>
 801db88:	4b33      	ldr	r3, [pc, #204]	@ (801dc58 <mg_listen+0x12c>)
 801db8a:	f241 22d5 	movw	r2, #4821	@ 0x12d5
 801db8e:	4933      	ldr	r1, [pc, #204]	@ (801dc5c <mg_listen+0x130>)
 801db90:	2001      	movs	r0, #1
 801db92:	f7fd fad3 	bl	801b13c <mg_log_prefix>
 801db96:	f009 fadf 	bl	8027158 <__errno>
 801db9a:	4603      	mov	r3, r0
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	461a      	mov	r2, r3
 801dba0:	68b9      	ldr	r1, [r7, #8]
 801dba2:	4830      	ldr	r0, [pc, #192]	@ (801dc64 <mg_listen+0x138>)
 801dba4:	f7fd fb1a 	bl	801b1dc <mg_log>
    MG_PROF_FREE(c);
    free(c);
 801dba8:	6978      	ldr	r0, [r7, #20]
 801dbaa:	f7ee fd8d 	bl	800c6c8 <vPortFree>
    c = NULL;
 801dbae:	2300      	movs	r3, #0
 801dbb0:	617b      	str	r3, [r7, #20]
 801dbb2:	e04a      	b.n	801dc4a <mg_listen+0x11e>
  } else {
    c->is_listening = 1;
 801dbb4:	697a      	ldr	r2, [r7, #20]
 801dbb6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801dbba:	f043 0301 	orr.w	r3, r3, #1
 801dbbe:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 801dbc2:	2204      	movs	r2, #4
 801dbc4:	4928      	ldr	r1, [pc, #160]	@ (801dc68 <mg_listen+0x13c>)
 801dbc6:	68b8      	ldr	r0, [r7, #8]
 801dbc8:	f008 f8f7 	bl	8025dba <strncmp>
 801dbcc:	4603      	mov	r3, r0
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	bf0c      	ite	eq
 801dbd2:	2301      	moveq	r3, #1
 801dbd4:	2300      	movne	r3, #0
 801dbd6:	b2d9      	uxtb	r1, r3
 801dbd8:	697a      	ldr	r2, [r7, #20]
 801dbda:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801dbde:	f361 0300 	bfi	r3, r1, #0, #1
 801dbe2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 801dbe6:	68fb      	ldr	r3, [r7, #12]
 801dbe8:	681a      	ldr	r2, [r3, #0]
 801dbea:	697b      	ldr	r3, [r7, #20]
 801dbec:	601a      	str	r2, [r3, #0]
 801dbee:	68fb      	ldr	r3, [r7, #12]
 801dbf0:	697a      	ldr	r2, [r7, #20]
 801dbf2:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 801dbf4:	697b      	ldr	r3, [r7, #20]
 801dbf6:	687a      	ldr	r2, [r7, #4]
 801dbf8:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 801dbfa:	697b      	ldr	r3, [r7, #20]
 801dbfc:	683a      	ldr	r2, [r7, #0]
 801dbfe:	67da      	str	r2, [r3, #124]	@ 0x7c
    mg_call(c, MG_EV_OPEN, NULL);
 801dc00:	2200      	movs	r2, #0
 801dc02:	2101      	movs	r1, #1
 801dc04:	6978      	ldr	r0, [r7, #20]
 801dc06:	f7f7 feb3 	bl	8015970 <mg_call>
    if (mg_url_is_ssl(url)) c->is_tls = 1;  // Accepted connection must
 801dc0a:	68b8      	ldr	r0, [r7, #8]
 801dc0c:	f004 fd44 	bl	8022698 <mg_url_is_ssl>
 801dc10:	4603      	mov	r3, r0
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	d006      	beq.n	801dc24 <mg_listen+0xf8>
 801dc16:	697a      	ldr	r2, [r7, #20]
 801dc18:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801dc1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc20:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 801dc24:	4b0b      	ldr	r3, [pc, #44]	@ (801dc54 <mg_listen+0x128>)
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	2b02      	cmp	r3, #2
 801dc2a:	dd0e      	ble.n	801dc4a <mg_listen+0x11e>
 801dc2c:	4b0a      	ldr	r3, [pc, #40]	@ (801dc58 <mg_listen+0x12c>)
 801dc2e:	f241 22e1 	movw	r2, #4833	@ 0x12e1
 801dc32:	490a      	ldr	r1, [pc, #40]	@ (801dc5c <mg_listen+0x130>)
 801dc34:	2003      	movs	r0, #3
 801dc36:	f7fd fa81 	bl	801b13c <mg_log_prefix>
 801dc3a:	697b      	ldr	r3, [r7, #20]
 801dc3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801dc3e:	697b      	ldr	r3, [r7, #20]
 801dc40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801dc42:	68bb      	ldr	r3, [r7, #8]
 801dc44:	4809      	ldr	r0, [pc, #36]	@ (801dc6c <mg_listen+0x140>)
 801dc46:	f7fd fac9 	bl	801b1dc <mg_log>
  }
  return c;
 801dc4a:	697b      	ldr	r3, [r7, #20]
}
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	3718      	adds	r7, #24
 801dc50:	46bd      	mov	sp, r7
 801dc52:	bd80      	pop	{r7, pc}
 801dc54:	20000298 	.word	0x20000298
 801dc58:	08034544 	.word	0x08034544
 801dc5c:	08031484 	.word	0x08031484
 801dc60:	080329cc 	.word	0x080329cc
 801dc64:	080329d4 	.word	0x080329d4
 801dc68:	080329c4 	.word	0x080329c4
 801dc6c:	080315e0 	.word	0x080315e0

0801dc70 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 801dc70:	b580      	push	{r7, lr}
 801dc72:	b08a      	sub	sp, #40	@ 0x28
 801dc74:	af04      	add	r7, sp, #16
 801dc76:	60f8      	str	r0, [r7, #12]
 801dc78:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 801dc7c:	2128      	movs	r1, #40	@ 0x28
 801dc7e:	2001      	movs	r0, #1
 801dc80:	f7f7 f896 	bl	8014db0 <mg_calloc>
 801dc84:	6178      	str	r0, [r7, #20]
  if (t != NULL) {
 801dc86:	697b      	ldr	r3, [r7, #20]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d014      	beq.n	801dcb6 <mg_timer_add+0x46>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 801dc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc94:	9302      	str	r3, [sp, #8]
 801dc96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc98:	9301      	str	r3, [sp, #4]
 801dc9a:	6a3b      	ldr	r3, [r7, #32]
 801dc9c:	9300      	str	r3, [sp, #0]
 801dc9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dca2:	6979      	ldr	r1, [r7, #20]
 801dca4:	f004 fba5 	bl	80223f2 <mg_timer_init>
    t->id = mgr->timerid++;
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	6a1b      	ldr	r3, [r3, #32]
 801dcac:	1c59      	adds	r1, r3, #1
 801dcae:	68fa      	ldr	r2, [r7, #12]
 801dcb0:	6211      	str	r1, [r2, #32]
 801dcb2:	697a      	ldr	r2, [r7, #20]
 801dcb4:	6013      	str	r3, [r2, #0]
  }
  return t;
 801dcb6:	697b      	ldr	r3, [r7, #20]
}
 801dcb8:	4618      	mov	r0, r3
 801dcba:	3718      	adds	r7, #24
 801dcbc:	46bd      	mov	sp, r7
 801dcbe:	bd80      	pop	{r7, pc}

0801dcc0 <mg_mgr_init>:
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
  mg_tls_ctx_free(mgr);
}

void mg_mgr_init(struct mg_mgr *mgr) {
 801dcc0:	b580      	push	{r7, lr}
 801dcc2:	b082      	sub	sp, #8
 801dcc4:	af00      	add	r7, sp, #0
 801dcc6:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 801dcc8:	2248      	movs	r2, #72	@ 0x48
 801dcca:	2100      	movs	r1, #0
 801dccc:	6878      	ldr	r0, [r7, #4]
 801dcce:	f008 f83f 	bl	8025d50 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dcd8:	639a      	str	r2, [r3, #56]	@ 0x38
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dce0:	645a      	str	r2, [r3, #68]	@ 0x44
  mgr->dnstimeout = 3000;
 801dce2:	687b      	ldr	r3, [r7, #4]
 801dce4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801dce8:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	4a05      	ldr	r2, [pc, #20]	@ (801dd04 <mg_mgr_init+0x44>)
 801dcee:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	4a05      	ldr	r2, [pc, #20]	@ (801dd08 <mg_mgr_init+0x48>)
 801dcf4:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 801dcf6:	6878      	ldr	r0, [r7, #4]
 801dcf8:	f004 fcc3 	bl	8022682 <mg_tls_ctx_init>
}
 801dcfc:	bf00      	nop
 801dcfe:	3708      	adds	r7, #8
 801dd00:	46bd      	mov	sp, r7
 801dd02:	bd80      	pop	{r7, pc}
 801dd04:	08032a04 	.word	0x08032a04
 801dd08:	08032a18 	.word	0x08032a18

0801dd0c <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b084      	sub	sp, #16
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	60f8      	str	r0, [r7, #12]
 801dd14:	60b9      	str	r1, [r7, #8]
 801dd16:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 801dd18:	68fb      	ldr	r3, [r7, #12]
 801dd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	d005      	beq.n	801dd2c <mg_tcpip_call+0x20>
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd24:	687a      	ldr	r2, [r7, #4]
 801dd26:	68b9      	ldr	r1, [r7, #8]
 801dd28:	68f8      	ldr	r0, [r7, #12]
 801dd2a:	4798      	blx	r3
}
 801dd2c:	bf00      	nop
 801dd2e:	3710      	adds	r7, #16
 801dd30:	46bd      	mov	sp, r7
 801dd32:	bd80      	pop	{r7, pc}

0801dd34 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 801dd34:	b590      	push	{r4, r7, lr}
 801dd36:	b085      	sub	sp, #20
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	60f8      	str	r0, [r7, #12]
 801dd3c:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	681a      	ldr	r2, [r3, #0]
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	685b      	ldr	r3, [r3, #4]
 801dd46:	441a      	add	r2, r3
 801dd48:	68bb      	ldr	r3, [r7, #8]
 801dd4a:	1ad3      	subs	r3, r2, r3
 801dd4c:	461a      	mov	r2, r3
 801dd4e:	68fc      	ldr	r4, [r7, #12]
 801dd50:	463b      	mov	r3, r7
 801dd52:	68b9      	ldr	r1, [r7, #8]
 801dd54:	4618      	mov	r0, r3
 801dd56:	f003 ff12 	bl	8021b7e <mg_str_n>
 801dd5a:	f104 0308 	add.w	r3, r4, #8
 801dd5e:	463a      	mov	r2, r7
 801dd60:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dd64:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801dd68:	bf00      	nop
 801dd6a:	3714      	adds	r7, #20
 801dd6c:	46bd      	mov	sp, r7
 801dd6e:	bd90      	pop	{r4, r7, pc}

0801dd70 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 801dd70:	b480      	push	{r7}
 801dd72:	b087      	sub	sp, #28
 801dd74:	af00      	add	r7, sp, #0
 801dd76:	60f8      	str	r0, [r7, #12]
 801dd78:	60b9      	str	r1, [r7, #8]
 801dd7a:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 801dd7c:	68bb      	ldr	r3, [r7, #8]
 801dd7e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 801dd80:	2300      	movs	r3, #0
 801dd82:	617b      	str	r3, [r7, #20]
 801dd84:	e014      	b.n	801ddb0 <csumup+0x40>
 801dd86:	697b      	ldr	r3, [r7, #20]
 801dd88:	f003 0301 	and.w	r3, r3, #1
 801dd8c:	2b00      	cmp	r3, #0
 801dd8e:	d004      	beq.n	801dd9a <csumup+0x2a>
 801dd90:	693a      	ldr	r2, [r7, #16]
 801dd92:	697b      	ldr	r3, [r7, #20]
 801dd94:	4413      	add	r3, r2
 801dd96:	781b      	ldrb	r3, [r3, #0]
 801dd98:	e004      	b.n	801dda4 <csumup+0x34>
 801dd9a:	693a      	ldr	r2, [r7, #16]
 801dd9c:	697b      	ldr	r3, [r7, #20]
 801dd9e:	4413      	add	r3, r2
 801dda0:	781b      	ldrb	r3, [r3, #0]
 801dda2:	021b      	lsls	r3, r3, #8
 801dda4:	68fa      	ldr	r2, [r7, #12]
 801dda6:	4413      	add	r3, r2
 801dda8:	60fb      	str	r3, [r7, #12]
 801ddaa:	697b      	ldr	r3, [r7, #20]
 801ddac:	3301      	adds	r3, #1
 801ddae:	617b      	str	r3, [r7, #20]
 801ddb0:	697a      	ldr	r2, [r7, #20]
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	429a      	cmp	r2, r3
 801ddb6:	d3e6      	bcc.n	801dd86 <csumup+0x16>
  return sum;
 801ddb8:	68fb      	ldr	r3, [r7, #12]
}
 801ddba:	4618      	mov	r0, r3
 801ddbc:	371c      	adds	r7, #28
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc4:	4770      	bx	lr

0801ddc6 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 801ddc6:	b580      	push	{r7, lr}
 801ddc8:	b082      	sub	sp, #8
 801ddca:	af00      	add	r7, sp, #0
 801ddcc:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 801ddce:	e005      	b.n	801dddc <csumfin+0x16>
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	b29a      	uxth	r2, r3
 801ddd4:	687b      	ldr	r3, [r7, #4]
 801ddd6:	0c1b      	lsrs	r3, r3, #16
 801ddd8:	4413      	add	r3, r2
 801ddda:	607b      	str	r3, [r7, #4]
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	0c1b      	lsrs	r3, r3, #16
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d1f5      	bne.n	801ddd0 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	b29b      	uxth	r3, r3
 801dde8:	43db      	mvns	r3, r3
 801ddea:	b29b      	uxth	r3, r3
 801ddec:	4618      	mov	r0, r3
 801ddee:	f004 fe4c 	bl	8022a8a <mg_ntohs>
 801ddf2:	4603      	mov	r3, r0
}
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	3708      	adds	r7, #8
 801ddf8:	46bd      	mov	sp, r7
 801ddfa:	bd80      	pop	{r7, pc}

0801ddfc <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b084      	sub	sp, #16
 801de00:	af00      	add	r7, sp, #0
 801de02:	6078      	str	r0, [r7, #4]
 801de04:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 801de06:	683a      	ldr	r2, [r7, #0]
 801de08:	6879      	ldr	r1, [r7, #4]
 801de0a:	2000      	movs	r0, #0
 801de0c:	f7ff ffb0 	bl	801dd70 <csumup>
 801de10:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 801de12:	68f8      	ldr	r0, [r7, #12]
 801de14:	f7ff ffd7 	bl	801ddc6 <csumfin>
 801de18:	4603      	mov	r3, r0
}
 801de1a:	4618      	mov	r0, r3
 801de1c:	3710      	adds	r7, #16
 801de1e:	46bd      	mov	sp, r7
 801de20:	bd80      	pop	{r7, pc}
	...

0801de24 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 801de24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801de28:	b088      	sub	sp, #32
 801de2a:	af02      	add	r7, sp, #8
 801de2c:	6078      	str	r0, [r7, #4]
 801de2e:	460b      	mov	r3, r1
 801de30:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	685b      	ldr	r3, [r3, #4]
 801de36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801de38:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	33b0      	adds	r3, #176	@ 0xb0
 801de3e:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_TCP_ARP_MS
 801de40:	78fb      	ldrb	r3, [r7, #3]
 801de42:	2b01      	cmp	r3, #1
 801de44:	d013      	beq.n	801de6e <settmout+0x4a>
 801de46:	78fb      	ldrb	r3, [r7, #3]
 801de48:	2b02      	cmp	r3, #2
 801de4a:	d00e      	beq.n	801de6a <settmout+0x46>
 801de4c:	78fb      	ldrb	r3, [r7, #3]
 801de4e:	2b03      	cmp	r3, #3
 801de50:	d008      	beq.n	801de64 <settmout+0x40>
 801de52:	78fb      	ldrb	r3, [r7, #3]
 801de54:	2b04      	cmp	r3, #4
 801de56:	d102      	bne.n	801de5e <settmout+0x3a>
 801de58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801de5c:	e008      	b.n	801de70 <settmout+0x4c>
 801de5e:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 801de62:	e005      	b.n	801de70 <settmout+0x4c>
 801de64:	f643 2398 	movw	r3, #15000	@ 0x3a98
 801de68:	e002      	b.n	801de70 <settmout+0x4c>
 801de6a:	2364      	movs	r3, #100	@ 0x64
 801de6c:	e000      	b.n	801de70 <settmout+0x4c>
 801de6e:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 801de70:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  s->timer = ifp->now + n;
 801de72:	697b      	ldr	r3, [r7, #20]
 801de74:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801de78:	68f9      	ldr	r1, [r7, #12]
 801de7a:	2000      	movs	r0, #0
 801de7c:	460c      	mov	r4, r1
 801de7e:	4605      	mov	r5, r0
 801de80:	eb12 0804 	adds.w	r8, r2, r4
 801de84:	eb43 0905 	adc.w	r9, r3, r5
 801de88:	693b      	ldr	r3, [r7, #16]
 801de8a:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 801de8e:	693b      	ldr	r3, [r7, #16]
 801de90:	78fa      	ldrb	r2, [r7, #3]
 801de92:	779a      	strb	r2, [r3, #30]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 801de94:	4b0d      	ldr	r3, [pc, #52]	@ (801decc <settmout+0xa8>)
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	2b03      	cmp	r3, #3
 801de9a:	dd12      	ble.n	801dec2 <settmout+0x9e>
 801de9c:	4b0c      	ldr	r3, [pc, #48]	@ (801ded0 <settmout+0xac>)
 801de9e:	f241 32e8 	movw	r2, #5096	@ 0x13e8
 801dea2:	490c      	ldr	r1, [pc, #48]	@ (801ded4 <settmout+0xb0>)
 801dea4:	2004      	movs	r0, #4
 801dea6:	f7fd f949 	bl	801b13c <mg_log_prefix>
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801deae:	78f8      	ldrb	r0, [r7, #3]
 801deb0:	693b      	ldr	r3, [r7, #16]
 801deb2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801deb6:	e9cd 2300 	strd	r2, r3, [sp]
 801deba:	4602      	mov	r2, r0
 801debc:	4806      	ldr	r0, [pc, #24]	@ (801ded8 <settmout+0xb4>)
 801debe:	f7fd f98d 	bl	801b1dc <mg_log>
}
 801dec2:	bf00      	nop
 801dec4:	3718      	adds	r7, #24
 801dec6:	46bd      	mov	sp, r7
 801dec8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801decc:	20000298 	.word	0x20000298
 801ded0:	08034550 	.word	0x08034550
 801ded4:	08031484 	.word	0x08031484
 801ded8:	08032a38 	.word	0x08032a38

0801dedc <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 801dedc:	b580      	push	{r7, lr}
 801dede:	b084      	sub	sp, #16
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
 801dee4:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801deea:	685b      	ldr	r3, [r3, #4]
 801deec:	687a      	ldr	r2, [r7, #4]
 801deee:	6950      	ldr	r0, [r2, #20]
 801def0:	687a      	ldr	r2, [r7, #4]
 801def2:	6839      	ldr	r1, [r7, #0]
 801def4:	4798      	blx	r3
 801def6:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 801def8:	68fa      	ldr	r2, [r7, #12]
 801defa:	683b      	ldr	r3, [r7, #0]
 801defc:	429a      	cmp	r2, r3
 801defe:	d104      	bne.n	801df0a <ether_output+0x2e>
 801df00:	687b      	ldr	r3, [r7, #4]
 801df02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801df04:	1c5a      	adds	r2, r3, #1
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	675a      	str	r2, [r3, #116]	@ 0x74
  return n;
 801df0a:	68fb      	ldr	r3, [r7, #12]
}
 801df0c:	4618      	mov	r0, r3
 801df0e:	3710      	adds	r7, #16
 801df10:	46bd      	mov	sp, r7
 801df12:	bd80      	pop	{r7, pc}

0801df14 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 801df14:	b580      	push	{r7, lr}
 801df16:	b084      	sub	sp, #16
 801df18:	af00      	add	r7, sp, #0
 801df1a:	6078      	str	r0, [r7, #4]
 801df1c:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	695b      	ldr	r3, [r3, #20]
 801df22:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	330e      	adds	r3, #14
 801df28:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 801df2a:	68fb      	ldr	r3, [r7, #12]
 801df2c:	2206      	movs	r2, #6
 801df2e:	21ff      	movs	r1, #255	@ 0xff
 801df30:	4618      	mov	r0, r3
 801df32:	f007 ff0d 	bl	8025d50 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	3306      	adds	r3, #6
 801df3a:	6879      	ldr	r1, [r7, #4]
 801df3c:	2206      	movs	r2, #6
 801df3e:	4618      	mov	r0, r3
 801df40:	f009 f942 	bl	80271c8 <memcpy>
  eth->type = mg_htons(0x806);
 801df44:	f640 0006 	movw	r0, #2054	@ 0x806
 801df48:	f004 fd9f 	bl	8022a8a <mg_ntohs>
 801df4c:	4603      	mov	r3, r0
 801df4e:	461a      	mov	r2, r3
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 801df54:	221c      	movs	r2, #28
 801df56:	2100      	movs	r1, #0
 801df58:	68b8      	ldr	r0, [r7, #8]
 801df5a:	f007 fef9 	bl	8025d50 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 801df5e:	2001      	movs	r0, #1
 801df60:	f004 fd93 	bl	8022a8a <mg_ntohs>
 801df64:	4603      	mov	r3, r0
 801df66:	461a      	mov	r2, r3
 801df68:	68bb      	ldr	r3, [r7, #8]
 801df6a:	801a      	strh	r2, [r3, #0]
 801df6c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801df70:	f004 fd8b 	bl	8022a8a <mg_ntohs>
 801df74:	4603      	mov	r3, r0
 801df76:	461a      	mov	r2, r3
 801df78:	68bb      	ldr	r3, [r7, #8]
 801df7a:	805a      	strh	r2, [r3, #2]
 801df7c:	68bb      	ldr	r3, [r7, #8]
 801df7e:	2206      	movs	r2, #6
 801df80:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 801df82:	68bb      	ldr	r3, [r7, #8]
 801df84:	2204      	movs	r2, #4
 801df86:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 801df88:	2001      	movs	r0, #1
 801df8a:	f004 fd7e 	bl	8022a8a <mg_ntohs>
 801df8e:	4603      	mov	r3, r0
 801df90:	461a      	mov	r2, r3
 801df92:	68bb      	ldr	r3, [r7, #8]
 801df94:	80da      	strh	r2, [r3, #6]
 801df96:	68bb      	ldr	r3, [r7, #8]
 801df98:	683a      	ldr	r2, [r7, #0]
 801df9a:	619a      	str	r2, [r3, #24]
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	689a      	ldr	r2, [r3, #8]
 801dfa0:	68bb      	ldr	r3, [r7, #8]
 801dfa2:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 801dfa6:	68bb      	ldr	r3, [r7, #8]
 801dfa8:	3308      	adds	r3, #8
 801dfaa:	6879      	ldr	r1, [r7, #4]
 801dfac:	2206      	movs	r2, #6
 801dfae:	4618      	mov	r0, r3
 801dfb0:	f009 f90a 	bl	80271c8 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 801dfb4:	68bb      	ldr	r3, [r7, #8]
 801dfb6:	f103 021c 	add.w	r2, r3, #28
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	1ad3      	subs	r3, r2, r3
 801dfbe:	4619      	mov	r1, r3
 801dfc0:	6878      	ldr	r0, [r7, #4]
 801dfc2:	f7ff ff8b 	bl	801dedc <ether_output>
}
 801dfc6:	bf00      	nop
 801dfc8:	3710      	adds	r7, #16
 801dfca:	46bd      	mov	sp, r7
 801dfcc:	bd80      	pop	{r7, pc}
	...

0801dfd0 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 801dfd0:	b580      	push	{r7, lr}
 801dfd2:	b082      	sub	sp, #8
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801dfde:	2b03      	cmp	r3, #3
 801dfe0:	d13b      	bne.n	801e05a <onstatechange+0x8a>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 801dfe2:	4b3b      	ldr	r3, [pc, #236]	@ (801e0d0 <onstatechange+0x100>)
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	2b01      	cmp	r3, #1
 801dfe8:	dd0d      	ble.n	801e006 <onstatechange+0x36>
 801dfea:	4b3a      	ldr	r3, [pc, #232]	@ (801e0d4 <onstatechange+0x104>)
 801dfec:	f241 4201 	movw	r2, #5121	@ 0x1401
 801dff0:	4939      	ldr	r1, [pc, #228]	@ (801e0d8 <onstatechange+0x108>)
 801dff2:	2002      	movs	r0, #2
 801dff4:	f7fd f8a2 	bl	801b13c <mg_log_prefix>
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	3308      	adds	r3, #8
 801dffc:	461a      	mov	r2, r3
 801dffe:	4937      	ldr	r1, [pc, #220]	@ (801e0dc <onstatechange+0x10c>)
 801e000:	4837      	ldr	r0, [pc, #220]	@ (801e0e0 <onstatechange+0x110>)
 801e002:	f7fd f8eb 	bl	801b1dc <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 801e006:	4b32      	ldr	r3, [pc, #200]	@ (801e0d0 <onstatechange+0x100>)
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	2b01      	cmp	r3, #1
 801e00c:	dd0d      	ble.n	801e02a <onstatechange+0x5a>
 801e00e:	4b31      	ldr	r3, [pc, #196]	@ (801e0d4 <onstatechange+0x104>)
 801e010:	f241 4202 	movw	r2, #5122	@ 0x1402
 801e014:	4930      	ldr	r1, [pc, #192]	@ (801e0d8 <onstatechange+0x108>)
 801e016:	2002      	movs	r0, #2
 801e018:	f7fd f890 	bl	801b13c <mg_log_prefix>
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	3310      	adds	r3, #16
 801e020:	461a      	mov	r2, r3
 801e022:	492e      	ldr	r1, [pc, #184]	@ (801e0dc <onstatechange+0x10c>)
 801e024:	482f      	ldr	r0, [pc, #188]	@ (801e0e4 <onstatechange+0x114>)
 801e026:	f7fd f8d9 	bl	801b1dc <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 801e02a:	4b29      	ldr	r3, [pc, #164]	@ (801e0d0 <onstatechange+0x100>)
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	2b01      	cmp	r3, #1
 801e030:	dd0c      	ble.n	801e04c <onstatechange+0x7c>
 801e032:	4b28      	ldr	r3, [pc, #160]	@ (801e0d4 <onstatechange+0x104>)
 801e034:	f241 4203 	movw	r2, #5123	@ 0x1403
 801e038:	4927      	ldr	r1, [pc, #156]	@ (801e0d8 <onstatechange+0x108>)
 801e03a:	2002      	movs	r0, #2
 801e03c:	f7fd f87e 	bl	801b13c <mg_log_prefix>
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	461a      	mov	r2, r3
 801e044:	4928      	ldr	r1, [pc, #160]	@ (801e0e8 <onstatechange+0x118>)
 801e046:	4829      	ldr	r0, [pc, #164]	@ (801e0ec <onstatechange+0x11c>)
 801e048:	f7fd f8c8 	bl	801b1dc <mg_log>
    arp_ask(ifp, ifp->gw);  // unsolicited GW ARP request
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	691b      	ldr	r3, [r3, #16]
 801e050:	4619      	mov	r1, r3
 801e052:	6878      	ldr	r0, [r7, #4]
 801e054:	f7ff ff5e 	bl	801df14 <arp_ask>
 801e058:	e02e      	b.n	801e0b8 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e060:	2b01      	cmp	r3, #1
 801e062:	d116      	bne.n	801e092 <onstatechange+0xc2>
    MG_ERROR(("Link up"));
 801e064:	4b1a      	ldr	r3, [pc, #104]	@ (801e0d0 <onstatechange+0x100>)
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	dd09      	ble.n	801e080 <onstatechange+0xb0>
 801e06c:	4b19      	ldr	r3, [pc, #100]	@ (801e0d4 <onstatechange+0x104>)
 801e06e:	f241 4206 	movw	r2, #5126	@ 0x1406
 801e072:	4919      	ldr	r1, [pc, #100]	@ (801e0d8 <onstatechange+0x108>)
 801e074:	2001      	movs	r0, #1
 801e076:	f7fd f861 	bl	801b13c <mg_log_prefix>
 801e07a:	481d      	ldr	r0, [pc, #116]	@ (801e0f0 <onstatechange+0x120>)
 801e07c:	f7fd f8ae 	bl	801b1dc <mg_log>
    srand((unsigned int) mg_millis());
 801e080:	f004 fd94 	bl	8022bac <mg_millis>
 801e084:	4602      	mov	r2, r0
 801e086:	460b      	mov	r3, r1
 801e088:	4613      	mov	r3, r2
 801e08a:	4618      	mov	r0, r3
 801e08c:	f007 f910 	bl	80252b0 <srand>
 801e090:	e012      	b.n	801e0b8 <onstatechange+0xe8>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e098:	2b00      	cmp	r3, #0
 801e09a:	d10d      	bne.n	801e0b8 <onstatechange+0xe8>
    MG_ERROR(("Link down"));
 801e09c:	4b0c      	ldr	r3, [pc, #48]	@ (801e0d0 <onstatechange+0x100>)
 801e09e:	681b      	ldr	r3, [r3, #0]
 801e0a0:	2b00      	cmp	r3, #0
 801e0a2:	dd09      	ble.n	801e0b8 <onstatechange+0xe8>
 801e0a4:	4b0b      	ldr	r3, [pc, #44]	@ (801e0d4 <onstatechange+0x104>)
 801e0a6:	f241 4209 	movw	r2, #5129	@ 0x1409
 801e0aa:	490b      	ldr	r1, [pc, #44]	@ (801e0d8 <onstatechange+0x108>)
 801e0ac:	2001      	movs	r0, #1
 801e0ae:	f7fd f845 	bl	801b13c <mg_log_prefix>
 801e0b2:	4810      	ldr	r0, [pc, #64]	@ (801e0f4 <onstatechange+0x124>)
 801e0b4:	f7fd f892 	bl	801b1dc <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	337c      	adds	r3, #124	@ 0x7c
 801e0bc:	461a      	mov	r2, r3
 801e0be:	2100      	movs	r1, #0
 801e0c0:	6878      	ldr	r0, [r7, #4]
 801e0c2:	f7ff fe23 	bl	801dd0c <mg_tcpip_call>
}
 801e0c6:	bf00      	nop
 801e0c8:	3708      	adds	r7, #8
 801e0ca:	46bd      	mov	sp, r7
 801e0cc:	bd80      	pop	{r7, pc}
 801e0ce:	bf00      	nop
 801e0d0:	20000298 	.word	0x20000298
 801e0d4:	0803455c 	.word	0x0803455c
 801e0d8:	08031484 	.word	0x08031484
 801e0dc:	0802132d 	.word	0x0802132d
 801e0e0:	08032a48 	.word	0x08032a48
 801e0e4:	08032a58 	.word	0x08032a58
 801e0e8:	080213f1 	.word	0x080213f1
 801e0ec:	08032a68 	.word	0x08032a68
 801e0f0:	08032a78 	.word	0x08032a78
 801e0f4:	08032a80 	.word	0x08032a80

0801e0f8 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 801e0f8:	b580      	push	{r7, lr}
 801e0fa:	b086      	sub	sp, #24
 801e0fc:	af00      	add	r7, sp, #0
 801e0fe:	60f8      	str	r0, [r7, #12]
 801e100:	60b9      	str	r1, [r7, #8]
 801e102:	603b      	str	r3, [r7, #0]
 801e104:	4613      	mov	r3, r2
 801e106:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	695b      	ldr	r3, [r3, #20]
 801e10c:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 801e10e:	697b      	ldr	r3, [r7, #20]
 801e110:	330e      	adds	r3, #14
 801e112:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 801e114:	697b      	ldr	r3, [r7, #20]
 801e116:	2206      	movs	r2, #6
 801e118:	68b9      	ldr	r1, [r7, #8]
 801e11a:	4618      	mov	r0, r3
 801e11c:	f009 f854 	bl	80271c8 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 801e120:	697b      	ldr	r3, [r7, #20]
 801e122:	3306      	adds	r3, #6
 801e124:	68f9      	ldr	r1, [r7, #12]
 801e126:	2206      	movs	r2, #6
 801e128:	4618      	mov	r0, r3
 801e12a:	f009 f84d 	bl	80271c8 <memcpy>
  eth->type = mg_htons(0x800);
 801e12e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801e132:	f004 fcaa 	bl	8022a8a <mg_ntohs>
 801e136:	4603      	mov	r3, r0
 801e138:	461a      	mov	r2, r3
 801e13a:	697b      	ldr	r3, [r7, #20]
 801e13c:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 801e13e:	2214      	movs	r2, #20
 801e140:	2100      	movs	r1, #0
 801e142:	6938      	ldr	r0, [r7, #16]
 801e144:	f007 fe04 	bl	8025d50 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 801e148:	693b      	ldr	r3, [r7, #16]
 801e14a:	2245      	movs	r2, #69	@ 0x45
 801e14c:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 801e14e:	693b      	ldr	r3, [r7, #16]
 801e150:	2200      	movs	r2, #0
 801e152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801e156:	719a      	strb	r2, [r3, #6]
 801e158:	2200      	movs	r2, #0
 801e15a:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 801e15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e15e:	b29b      	uxth	r3, r3
 801e160:	3314      	adds	r3, #20
 801e162:	b29b      	uxth	r3, r3
 801e164:	4618      	mov	r0, r3
 801e166:	f004 fc90 	bl	8022a8a <mg_ntohs>
 801e16a:	4603      	mov	r3, r0
 801e16c:	461a      	mov	r2, r3
 801e16e:	693b      	ldr	r3, [r7, #16]
 801e170:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 801e172:	693b      	ldr	r3, [r7, #16]
 801e174:	2240      	movs	r2, #64	@ 0x40
 801e176:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 801e178:	693b      	ldr	r3, [r7, #16]
 801e17a:	79fa      	ldrb	r2, [r7, #7]
 801e17c:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 801e17e:	693b      	ldr	r3, [r7, #16]
 801e180:	683a      	ldr	r2, [r7, #0]
 801e182:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 801e184:	693b      	ldr	r3, [r7, #16]
 801e186:	6a3a      	ldr	r2, [r7, #32]
 801e188:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 801e18a:	2114      	movs	r1, #20
 801e18c:	6938      	ldr	r0, [r7, #16]
 801e18e:	f7ff fe35 	bl	801ddfc <ipcsum>
 801e192:	4603      	mov	r3, r0
 801e194:	461a      	mov	r2, r3
 801e196:	693b      	ldr	r3, [r7, #16]
 801e198:	815a      	strh	r2, [r3, #10]
  return ip;
 801e19a:	693b      	ldr	r3, [r7, #16]
}
 801e19c:	4618      	mov	r0, r3
 801e19e:	3718      	adds	r7, #24
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	bd80      	pop	{r7, pc}

0801e1a4 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	b08a      	sub	sp, #40	@ 0x28
 801e1a8:	af02      	add	r7, sp, #8
 801e1aa:	60f8      	str	r0, [r7, #12]
 801e1ac:	60b9      	str	r1, [r7, #8]
 801e1ae:	607a      	str	r2, [r7, #4]
 801e1b0:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 801e1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1b4:	3308      	adds	r3, #8
 801e1b6:	9301      	str	r3, [sp, #4]
 801e1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e1ba:	9300      	str	r3, [sp, #0]
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	2211      	movs	r2, #17
 801e1c0:	68b9      	ldr	r1, [r7, #8]
 801e1c2:	68f8      	ldr	r0, [r7, #12]
 801e1c4:	f7ff ff98 	bl	801e0f8 <tx_ip>
 801e1c8:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 801e1ca:	69fb      	ldr	r3, [r7, #28]
 801e1cc:	3314      	adds	r3, #20
 801e1ce:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 801e1d0:	69bb      	ldr	r3, [r7, #24]
 801e1d2:	887a      	ldrh	r2, [r7, #2]
 801e1d4:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 801e1d6:	69bb      	ldr	r3, [r7, #24]
 801e1d8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801e1da:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 801e1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e1de:	b29b      	uxth	r3, r3
 801e1e0:	3308      	adds	r3, #8
 801e1e2:	b29b      	uxth	r3, r3
 801e1e4:	4618      	mov	r0, r3
 801e1e6:	f004 fc50 	bl	8022a8a <mg_ntohs>
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	461a      	mov	r2, r3
 801e1ee:	69bb      	ldr	r3, [r7, #24]
 801e1f0:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 801e1f2:	69bb      	ldr	r3, [r7, #24]
 801e1f4:	2200      	movs	r2, #0
 801e1f6:	719a      	strb	r2, [r3, #6]
 801e1f8:	2200      	movs	r2, #0
 801e1fa:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 801e1fc:	2208      	movs	r2, #8
 801e1fe:	69b9      	ldr	r1, [r7, #24]
 801e200:	2000      	movs	r0, #0
 801e202:	f7ff fdb5 	bl	801dd70 <csumup>
 801e206:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 801e208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e20a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e20c:	6978      	ldr	r0, [r7, #20]
 801e20e:	f7ff fdaf 	bl	801dd70 <csumup>
 801e212:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801e214:	69fb      	ldr	r3, [r7, #28]
 801e216:	330c      	adds	r3, #12
 801e218:	2204      	movs	r2, #4
 801e21a:	4619      	mov	r1, r3
 801e21c:	6978      	ldr	r0, [r7, #20]
 801e21e:	f7ff fda7 	bl	801dd70 <csumup>
 801e222:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801e224:	69fb      	ldr	r3, [r7, #28]
 801e226:	3310      	adds	r3, #16
 801e228:	2204      	movs	r2, #4
 801e22a:	4619      	mov	r1, r3
 801e22c:	6978      	ldr	r0, [r7, #20]
 801e22e:	f7ff fd9f 	bl	801dd70 <csumup>
 801e232:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 801e234:	69fb      	ldr	r3, [r7, #28]
 801e236:	7a5b      	ldrb	r3, [r3, #9]
 801e238:	461a      	mov	r2, r3
 801e23a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e23c:	441a      	add	r2, r3
 801e23e:	697b      	ldr	r3, [r7, #20]
 801e240:	4413      	add	r3, r2
 801e242:	3308      	adds	r3, #8
 801e244:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 801e246:	6978      	ldr	r0, [r7, #20]
 801e248:	f7ff fdbd 	bl	801ddc6 <csumfin>
 801e24c:	4603      	mov	r3, r0
 801e24e:	461a      	mov	r2, r3
 801e250:	69bb      	ldr	r3, [r7, #24]
 801e252:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 801e254:	69bb      	ldr	r3, [r7, #24]
 801e256:	3308      	adds	r3, #8
 801e258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e25a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e25c:	4618      	mov	r0, r3
 801e25e:	f007 fd5d 	bl	8025d1c <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 801e262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e264:	332a      	adds	r3, #42	@ 0x2a
 801e266:	4619      	mov	r1, r3
 801e268:	68f8      	ldr	r0, [r7, #12]
 801e26a:	f7ff fe37 	bl	801dedc <ether_output>
}
 801e26e:	bf00      	nop
 801e270:	3720      	adds	r7, #32
 801e272:	46bd      	mov	sp, r7
 801e274:	bd80      	pop	{r7, pc}
	...

0801e278 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 801e278:	b5b0      	push	{r4, r5, r7, lr}
 801e27a:	b0cc      	sub	sp, #304	@ 0x130
 801e27c:	af04      	add	r7, sp, #16
 801e27e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801e282:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 801e286:	6020      	str	r0, [r4, #0]
 801e288:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801e28c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 801e290:	6001      	str	r1, [r0, #0]
 801e292:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801e296:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801e29a:	600a      	str	r2, [r1, #0]
 801e29c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801e2a0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 801e2a4:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801e2a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e2aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e2ae:	4a38      	ldr	r2, [pc, #224]	@ (801e390 <tx_dhcp+0x118>)
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	4611      	mov	r1, r2
 801e2b4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801e2b8:	461a      	mov	r2, r3
 801e2ba:	f008 ff85 	bl	80271c8 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 801e2be:	4835      	ldr	r0, [pc, #212]	@ (801e394 <tx_dhcp+0x11c>)
 801e2c0:	f004 fbca 	bl	8022a58 <mg_ntohl>
 801e2c4:	4602      	mov	r2, r0
 801e2c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e2ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e2ce:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 801e2d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e2d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e2da:	6819      	ldr	r1, [r3, #0]
 801e2dc:	f107 0310 	add.w	r3, r7, #16
 801e2e0:	331c      	adds	r3, #28
 801e2e2:	2206      	movs	r2, #6
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	f008 ff6f 	bl	80271c8 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 801e2ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e2ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	3302      	adds	r3, #2
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	461a      	mov	r2, r3
 801e2fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e2fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e302:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 801e304:	f107 0310 	add.w	r3, r7, #16
 801e308:	33f0      	adds	r3, #240	@ 0xf0
 801e30a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801e30e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801e312:	4618      	mov	r0, r3
 801e314:	f008 ff58 	bl	80271c8 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 801e318:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d009      	beq.n	801e334 <tx_dhcp+0xbc>
 801e320:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e324:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801e328:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801e32c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 801e330:	6812      	ldr	r2, [r2, #0]
 801e332:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 801e334:	2044      	movs	r0, #68	@ 0x44
 801e336:	f004 fba8 	bl	8022a8a <mg_ntohs>
 801e33a:	4603      	mov	r3, r0
 801e33c:	461d      	mov	r5, r3
 801e33e:	2043      	movs	r0, #67	@ 0x43
 801e340:	f004 fba3 	bl	8022a8a <mg_ntohs>
 801e344:	4603      	mov	r3, r0
 801e346:	461c      	mov	r4, r3
 801e348:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e34c:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 801e350:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e354:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 801e358:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e35c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 801e360:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801e364:	9303      	str	r3, [sp, #12]
 801e366:	f107 0310 	add.w	r3, r7, #16
 801e36a:	9302      	str	r3, [sp, #8]
 801e36c:	9401      	str	r4, [sp, #4]
 801e36e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e372:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	9300      	str	r3, [sp, #0]
 801e37a:	462b      	mov	r3, r5
 801e37c:	6812      	ldr	r2, [r2, #0]
 801e37e:	6809      	ldr	r1, [r1, #0]
 801e380:	6800      	ldr	r0, [r0, #0]
 801e382:	f7ff ff0f 	bl	801e1a4 <tx_udp>
         sizeof(dhcp));
}
 801e386:	bf00      	nop
 801e388:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 801e38c:	46bd      	mov	sp, r7
 801e38e:	bdb0      	pop	{r4, r5, r7, pc}
 801e390:	08032a8c 	.word	0x08032a8c
 801e394:	63825363 	.word	0x63825363

0801e398 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 801e398:	b5b0      	push	{r4, r5, r7, lr}
 801e39a:	b090      	sub	sp, #64	@ 0x40
 801e39c:	af04      	add	r7, sp, #16
 801e39e:	60f8      	str	r0, [r7, #12]
 801e3a0:	60b9      	str	r1, [r7, #8]
 801e3a2:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 801e3a4:	4b31      	ldr	r3, [pc, #196]	@ (801e46c <tx_dhcp_request_sel+0xd4>)
 801e3a6:	f107 0414 	add.w	r4, r7, #20
 801e3aa:	461d      	mov	r5, r3
 801e3ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e3ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e3b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801e3b4:	c403      	stmia	r4!, {r0, r1}
 801e3b6:	8022      	strh	r2, [r4, #0]
 801e3b8:	3402      	adds	r4, #2
 801e3ba:	0c13      	lsrs	r3, r2, #16
 801e3bc:	7023      	strb	r3, [r4, #0]
      54, 4, 0,   0,   0,   0,    // DHCP server ID
      50, 4, 0,   0,   0,   0,    // Requested IP
      55, 2, 1,   3,   255, 255,  // GW, mask [DNS] [SNTP]
      255                         // End of options
  };
  uint8_t addopts = 0;
 801e3be:	2300      	movs	r3, #0
 801e3c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  memcpy(opts + 10, &ip_srv, sizeof(ip_srv));
 801e3c4:	f107 0314 	add.w	r3, r7, #20
 801e3c8:	330a      	adds	r3, #10
 801e3ca:	687a      	ldr	r2, [r7, #4]
 801e3cc:	601a      	str	r2, [r3, #0]
  memcpy(opts + 16, &ip_req, sizeof(ip_req));
 801e3ce:	f107 0314 	add.w	r3, r7, #20
 801e3d2:	3310      	adds	r3, #16
 801e3d4:	68ba      	ldr	r2, [r7, #8]
 801e3d6:	601a      	str	r2, [r3, #0]
  if (ifp->enable_req_dns) opts[24 + addopts++] = 6;    // DNS
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	7fdb      	ldrb	r3, [r3, #31]
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d00a      	beq.n	801e3f6 <tx_dhcp_request_sel+0x5e>
 801e3e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e3e4:	1c5a      	adds	r2, r3, #1
 801e3e6:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801e3ea:	3318      	adds	r3, #24
 801e3ec:	3330      	adds	r3, #48	@ 0x30
 801e3ee:	443b      	add	r3, r7
 801e3f0:	2206      	movs	r2, #6
 801e3f2:	f803 2c1c 	strb.w	r2, [r3, #-28]
  if (ifp->enable_req_sntp) opts[24 + addopts++] = 42;  // SNTP
 801e3f6:	68fb      	ldr	r3, [r7, #12]
 801e3f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d00a      	beq.n	801e416 <tx_dhcp_request_sel+0x7e>
 801e400:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e404:	1c5a      	adds	r2, r3, #1
 801e406:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 801e40a:	3318      	adds	r3, #24
 801e40c:	3330      	adds	r3, #48	@ 0x30
 801e40e:	443b      	add	r3, r7
 801e410:	222a      	movs	r2, #42	@ 0x2a
 801e412:	f803 2c1c 	strb.w	r2, [r3, #-28]
  opts[21] += addopts;
 801e416:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 801e41a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e41e:	4413      	add	r3, r2
 801e420:	b2db      	uxtb	r3, r3
 801e422:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts,
 801e426:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801e42a:	3319      	adds	r3, #25
 801e42c:	2200      	movs	r2, #0
 801e42e:	9202      	str	r2, [sp, #8]
 801e430:	9301      	str	r3, [sp, #4]
 801e432:	f107 0314 	add.w	r3, r7, #20
 801e436:	9300      	str	r3, [sp, #0]
 801e438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e43c:	2200      	movs	r2, #0
 801e43e:	490c      	ldr	r1, [pc, #48]	@ (801e470 <tx_dhcp_request_sel+0xd8>)
 801e440:	68f8      	ldr	r0, [r7, #12]
 801e442:	f7ff ff19 	bl	801e278 <tx_dhcp>
          sizeof(opts) + addopts - 2, false);
  MG_DEBUG(("DHCP req sent"));
 801e446:	4b0b      	ldr	r3, [pc, #44]	@ (801e474 <tx_dhcp_request_sel+0xdc>)
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	2b02      	cmp	r3, #2
 801e44c:	dd09      	ble.n	801e462 <tx_dhcp_request_sel+0xca>
 801e44e:	4b0a      	ldr	r3, [pc, #40]	@ (801e478 <tx_dhcp_request_sel+0xe0>)
 801e450:	f241 425b 	movw	r2, #5211	@ 0x145b
 801e454:	4909      	ldr	r1, [pc, #36]	@ (801e47c <tx_dhcp_request_sel+0xe4>)
 801e456:	2003      	movs	r0, #3
 801e458:	f7fc fe70 	bl	801b13c <mg_log_prefix>
 801e45c:	4808      	ldr	r0, [pc, #32]	@ (801e480 <tx_dhcp_request_sel+0xe8>)
 801e45e:	f7fc febd 	bl	801b1dc <mg_log>
}
 801e462:	bf00      	nop
 801e464:	3730      	adds	r7, #48	@ 0x30
 801e466:	46bd      	mov	sp, r7
 801e468:	bdb0      	pop	{r4, r5, r7, pc}
 801e46a:	bf00      	nop
 801e46c:	08032bac 	.word	0x08032bac
 801e470:	08034490 	.word	0x08034490
 801e474:	20000298 	.word	0x20000298
 801e478:	0803456c 	.word	0x0803456c
 801e47c:	08031484 	.word	0x08031484
 801e480:	08032b9c 	.word	0x08032b9c

0801e484 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 801e484:	b580      	push	{r7, lr}
 801e486:	b08a      	sub	sp, #40	@ 0x28
 801e488:	af04      	add	r7, sp, #16
 801e48a:	60f8      	str	r0, [r7, #12]
 801e48c:	60b9      	str	r1, [r7, #8]
 801e48e:	607a      	str	r2, [r7, #4]
 801e490:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 801e492:	4b10      	ldr	r3, [pc, #64]	@ (801e4d4 <tx_dhcp_request_re+0x50>)
 801e494:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 801e496:	2301      	movs	r3, #1
 801e498:	9302      	str	r3, [sp, #8]
 801e49a:	2304      	movs	r3, #4
 801e49c:	9301      	str	r3, [sp, #4]
 801e49e:	f107 0314 	add.w	r3, r7, #20
 801e4a2:	9300      	str	r3, [sp, #0]
 801e4a4:	683b      	ldr	r3, [r7, #0]
 801e4a6:	687a      	ldr	r2, [r7, #4]
 801e4a8:	68b9      	ldr	r1, [r7, #8]
 801e4aa:	68f8      	ldr	r0, [r7, #12]
 801e4ac:	f7ff fee4 	bl	801e278 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 801e4b0:	4b09      	ldr	r3, [pc, #36]	@ (801e4d8 <tx_dhcp_request_re+0x54>)
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	2b02      	cmp	r3, #2
 801e4b6:	dd09      	ble.n	801e4cc <tx_dhcp_request_re+0x48>
 801e4b8:	4b08      	ldr	r3, [pc, #32]	@ (801e4dc <tx_dhcp_request_re+0x58>)
 801e4ba:	f241 4266 	movw	r2, #5222	@ 0x1466
 801e4be:	4908      	ldr	r1, [pc, #32]	@ (801e4e0 <tx_dhcp_request_re+0x5c>)
 801e4c0:	2003      	movs	r0, #3
 801e4c2:	f7fc fe3b 	bl	801b13c <mg_log_prefix>
 801e4c6:	4807      	ldr	r0, [pc, #28]	@ (801e4e4 <tx_dhcp_request_re+0x60>)
 801e4c8:	f7fc fe88 	bl	801b1dc <mg_log>
}
 801e4cc:	bf00      	nop
 801e4ce:	3718      	adds	r7, #24
 801e4d0:	46bd      	mov	sp, r7
 801e4d2:	bd80      	pop	{r7, pc}
 801e4d4:	ff030135 	.word	0xff030135
 801e4d8:	20000298 	.word	0x20000298
 801e4dc:	08034580 	.word	0x08034580
 801e4e0:	08031484 	.word	0x08031484
 801e4e4:	08032b9c 	.word	0x08032b9c

0801e4e8 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 801e4e8:	b580      	push	{r7, lr}
 801e4ea:	b088      	sub	sp, #32
 801e4ec:	af04      	add	r7, sp, #16
 801e4ee:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 801e4f0:	4a14      	ldr	r2, [pc, #80]	@ (801e544 <tx_dhcp_discover+0x5c>)
 801e4f2:	f107 0308 	add.w	r3, r7, #8
 801e4f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e4fa:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 801e4fe:	2300      	movs	r3, #0
 801e500:	9302      	str	r3, [sp, #8]
 801e502:	2308      	movs	r3, #8
 801e504:	9301      	str	r3, [sp, #4]
 801e506:	f107 0308 	add.w	r3, r7, #8
 801e50a:	9300      	str	r3, [sp, #0]
 801e50c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e510:	2200      	movs	r2, #0
 801e512:	490d      	ldr	r1, [pc, #52]	@ (801e548 <tx_dhcp_discover+0x60>)
 801e514:	6878      	ldr	r0, [r7, #4]
 801e516:	f7ff feaf 	bl	801e278 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 801e51a:	4b0c      	ldr	r3, [pc, #48]	@ (801e54c <tx_dhcp_discover+0x64>)
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	2b02      	cmp	r3, #2
 801e520:	dd0c      	ble.n	801e53c <tx_dhcp_discover+0x54>
 801e522:	4b0b      	ldr	r3, [pc, #44]	@ (801e550 <tx_dhcp_discover+0x68>)
 801e524:	f241 4270 	movw	r2, #5232	@ 0x1470
 801e528:	490a      	ldr	r1, [pc, #40]	@ (801e554 <tx_dhcp_discover+0x6c>)
 801e52a:	2003      	movs	r0, #3
 801e52c:	f7fc fe06 	bl	801b13c <mg_log_prefix>
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	461a      	mov	r2, r3
 801e534:	4908      	ldr	r1, [pc, #32]	@ (801e558 <tx_dhcp_discover+0x70>)
 801e536:	4809      	ldr	r0, [pc, #36]	@ (801e55c <tx_dhcp_discover+0x74>)
 801e538:	f7fc fe50 	bl	801b1dc <mg_log>
}
 801e53c:	bf00      	nop
 801e53e:	3710      	adds	r7, #16
 801e540:	46bd      	mov	sp, r7
 801e542:	bd80      	pop	{r7, pc}
 801e544:	08032be8 	.word	0x08032be8
 801e548:	08034490 	.word	0x08034490
 801e54c:	20000298 	.word	0x20000298
 801e550:	08034594 	.word	0x08034594
 801e554:	08031484 	.word	0x08031484
 801e558:	080213f1 	.word	0x080213f1
 801e55c:	08032bc8 	.word	0x08032bc8

0801e560 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 801e560:	b580      	push	{r7, lr}
 801e562:	b086      	sub	sp, #24
 801e564:	af00      	add	r7, sp, #0
 801e566:	60f8      	str	r0, [r7, #12]
 801e568:	60b9      	str	r1, [r7, #8]
 801e56a:	4613      	mov	r3, r2
 801e56c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 801e56e:	2300      	movs	r3, #0
 801e570:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 801e572:	68fb      	ldr	r3, [r7, #12]
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	617b      	str	r3, [r7, #20]
 801e578:	e057      	b.n	801e62a <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 801e57a:	697b      	ldr	r3, [r7, #20]
 801e57c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e580:	f003 0310 	and.w	r3, r3, #16
 801e584:	b2db      	uxtb	r3, r3
 801e586:	2b00      	cmp	r3, #0
 801e588:	d010      	beq.n	801e5ac <getpeer+0x4c>
 801e58a:	68bb      	ldr	r3, [r7, #8]
 801e58c:	699b      	ldr	r3, [r3, #24]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d00c      	beq.n	801e5ac <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 801e592:	68bb      	ldr	r3, [r7, #8]
 801e594:	699b      	ldr	r3, [r3, #24]
 801e596:	f103 000e 	add.w	r0, r3, #14
 801e59a:	697b      	ldr	r3, [r7, #20]
 801e59c:	331c      	adds	r3, #28
 801e59e:	2204      	movs	r2, #4
 801e5a0:	4619      	mov	r1, r3
 801e5a2:	f007 fb41 	bl	8025c28 <memcmp>
 801e5a6:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d042      	beq.n	801e632 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801e5ac:	697b      	ldr	r3, [r7, #20]
 801e5ae:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e5b2:	f003 0301 	and.w	r3, r3, #1
 801e5b6:	b2db      	uxtb	r3, r3
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d00b      	beq.n	801e5d4 <getpeer+0x74>
 801e5bc:	68bb      	ldr	r3, [r7, #8]
 801e5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d007      	beq.n	801e5d4 <getpeer+0x74>
 801e5c4:	697b      	ldr	r3, [r7, #20]
 801e5c6:	8b1a      	ldrh	r2, [r3, #24]
 801e5c8:	68bb      	ldr	r3, [r7, #8]
 801e5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e5cc:	885b      	ldrh	r3, [r3, #2]
 801e5ce:	b29b      	uxth	r3, r3
 801e5d0:	429a      	cmp	r2, r3
 801e5d2:	d030      	beq.n	801e636 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801e5d4:	697b      	ldr	r3, [r7, #20]
 801e5d6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801e5da:	f003 0301 	and.w	r3, r3, #1
 801e5de:	b2db      	uxtb	r3, r3
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d11f      	bne.n	801e624 <getpeer+0xc4>
 801e5e4:	68bb      	ldr	r3, [r7, #8]
 801e5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d01b      	beq.n	801e624 <getpeer+0xc4>
 801e5ec:	697b      	ldr	r3, [r7, #20]
 801e5ee:	8b1a      	ldrh	r2, [r3, #24]
 801e5f0:	68bb      	ldr	r3, [r7, #8]
 801e5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e5f4:	885b      	ldrh	r3, [r3, #2]
 801e5f6:	b29b      	uxth	r3, r3
 801e5f8:	429a      	cmp	r2, r3
 801e5fa:	d113      	bne.n	801e624 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801e5fc:	697b      	ldr	r3, [r7, #20]
 801e5fe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e602:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801e606:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 801e608:	79fa      	ldrb	r2, [r7, #7]
 801e60a:	429a      	cmp	r2, r3
 801e60c:	d10a      	bne.n	801e624 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 801e60e:	79fb      	ldrb	r3, [r7, #7]
 801e610:	2b00      	cmp	r3, #0
 801e612:	d111      	bne.n	801e638 <getpeer+0xd8>
 801e614:	697b      	ldr	r3, [r7, #20]
 801e616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801e618:	68bb      	ldr	r3, [r7, #8]
 801e61a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e61c:	881b      	ldrh	r3, [r3, #0]
 801e61e:	b29b      	uxth	r3, r3
 801e620:	429a      	cmp	r2, r3
 801e622:	d009      	beq.n	801e638 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 801e624:	697b      	ldr	r3, [r7, #20]
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	617b      	str	r3, [r7, #20]
 801e62a:	697b      	ldr	r3, [r7, #20]
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d1a4      	bne.n	801e57a <getpeer+0x1a>
 801e630:	e002      	b.n	801e638 <getpeer+0xd8>
      break;
 801e632:	bf00      	nop
 801e634:	e000      	b.n	801e638 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 801e636:	bf00      	nop
      break;
  }
  return c;
 801e638:	697b      	ldr	r3, [r7, #20]
}
 801e63a:	4618      	mov	r0, r3
 801e63c:	3718      	adds	r7, #24
 801e63e:	46bd      	mov	sp, r7
 801e640:	bd80      	pop	{r7, pc}
	...

0801e644 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e644:	b5b0      	push	{r4, r5, r7, lr}
 801e646:	b088      	sub	sp, #32
 801e648:	af02      	add	r7, sp, #8
 801e64a:	6078      	str	r0, [r7, #4]
 801e64c:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801e64e:	683b      	ldr	r3, [r7, #0]
 801e650:	699b      	ldr	r3, [r3, #24]
 801e652:	88db      	ldrh	r3, [r3, #6]
 801e654:	b29c      	uxth	r4, r3
 801e656:	2001      	movs	r0, #1
 801e658:	f004 fa17 	bl	8022a8a <mg_ntohs>
 801e65c:	4603      	mov	r3, r0
 801e65e:	429c      	cmp	r4, r3
 801e660:	d176      	bne.n	801e750 <rx_arp+0x10c>
 801e662:	683b      	ldr	r3, [r7, #0]
 801e664:	699b      	ldr	r3, [r3, #24]
 801e666:	699a      	ldr	r2, [r3, #24]
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	689b      	ldr	r3, [r3, #8]
 801e66c:	429a      	cmp	r2, r3
 801e66e:	d16f      	bne.n	801e750 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	695b      	ldr	r3, [r3, #20]
 801e674:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 801e676:	697b      	ldr	r3, [r7, #20]
 801e678:	330e      	adds	r3, #14
 801e67a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 801e67c:	6978      	ldr	r0, [r7, #20]
 801e67e:	683b      	ldr	r3, [r7, #0]
 801e680:	691b      	ldr	r3, [r3, #16]
 801e682:	3306      	adds	r3, #6
 801e684:	2206      	movs	r2, #6
 801e686:	4619      	mov	r1, r3
 801e688:	f008 fd9e 	bl	80271c8 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 801e68c:	697b      	ldr	r3, [r7, #20]
 801e68e:	3306      	adds	r3, #6
 801e690:	6879      	ldr	r1, [r7, #4]
 801e692:	2206      	movs	r2, #6
 801e694:	4618      	mov	r0, r3
 801e696:	f008 fd97 	bl	80271c8 <memcpy>
    eth->type = mg_htons(0x806);
 801e69a:	f640 0006 	movw	r0, #2054	@ 0x806
 801e69e:	f004 f9f4 	bl	8022a8a <mg_ntohs>
 801e6a2:	4603      	mov	r3, r0
 801e6a4:	461a      	mov	r2, r3
 801e6a6:	697b      	ldr	r3, [r7, #20]
 801e6a8:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 801e6aa:	683b      	ldr	r3, [r7, #0]
 801e6ac:	699a      	ldr	r2, [r3, #24]
 801e6ae:	693b      	ldr	r3, [r7, #16]
 801e6b0:	6814      	ldr	r4, [r2, #0]
 801e6b2:	6850      	ldr	r0, [r2, #4]
 801e6b4:	6891      	ldr	r1, [r2, #8]
 801e6b6:	68d5      	ldr	r5, [r2, #12]
 801e6b8:	601c      	str	r4, [r3, #0]
 801e6ba:	6058      	str	r0, [r3, #4]
 801e6bc:	6099      	str	r1, [r3, #8]
 801e6be:	60dd      	str	r5, [r3, #12]
 801e6c0:	6914      	ldr	r4, [r2, #16]
 801e6c2:	6950      	ldr	r0, [r2, #20]
 801e6c4:	6991      	ldr	r1, [r2, #24]
 801e6c6:	611c      	str	r4, [r3, #16]
 801e6c8:	6158      	str	r0, [r3, #20]
 801e6ca:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 801e6cc:	2002      	movs	r0, #2
 801e6ce:	f004 f9dc 	bl	8022a8a <mg_ntohs>
 801e6d2:	4603      	mov	r3, r0
 801e6d4:	461a      	mov	r2, r3
 801e6d6:	693b      	ldr	r3, [r7, #16]
 801e6d8:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 801e6da:	693b      	ldr	r3, [r7, #16]
 801e6dc:	f103 0012 	add.w	r0, r3, #18
 801e6e0:	683b      	ldr	r3, [r7, #0]
 801e6e2:	699b      	ldr	r3, [r3, #24]
 801e6e4:	3308      	adds	r3, #8
 801e6e6:	2206      	movs	r2, #6
 801e6e8:	4619      	mov	r1, r3
 801e6ea:	f008 fd6d 	bl	80271c8 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 801e6ee:	693b      	ldr	r3, [r7, #16]
 801e6f0:	3308      	adds	r3, #8
 801e6f2:	6879      	ldr	r1, [r7, #4]
 801e6f4:	2206      	movs	r2, #6
 801e6f6:	4618      	mov	r0, r3
 801e6f8:	f008 fd66 	bl	80271c8 <memcpy>
    arp->tpa = pkt->arp->spa;
 801e6fc:	683b      	ldr	r3, [r7, #0]
 801e6fe:	699b      	ldr	r3, [r3, #24]
 801e700:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801e704:	693b      	ldr	r3, [r7, #16]
 801e706:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	689a      	ldr	r2, [r3, #8]
 801e70c:	693b      	ldr	r3, [r7, #16]
 801e70e:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 801e712:	4b4a      	ldr	r3, [pc, #296]	@ (801e83c <rx_arp+0x1f8>)
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	2b02      	cmp	r3, #2
 801e718:	dd10      	ble.n	801e73c <rx_arp+0xf8>
 801e71a:	4b49      	ldr	r3, [pc, #292]	@ (801e840 <rx_arp+0x1fc>)
 801e71c:	f241 4292 	movw	r2, #5266	@ 0x1492
 801e720:	4948      	ldr	r1, [pc, #288]	@ (801e844 <rx_arp+0x200>)
 801e722:	2003      	movs	r0, #3
 801e724:	f7fc fd0a 	bl	801b13c <mg_log_prefix>
 801e728:	693b      	ldr	r3, [r7, #16]
 801e72a:	f103 0218 	add.w	r2, r3, #24
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	9300      	str	r3, [sp, #0]
 801e732:	4b45      	ldr	r3, [pc, #276]	@ (801e848 <rx_arp+0x204>)
 801e734:	4945      	ldr	r1, [pc, #276]	@ (801e84c <rx_arp+0x208>)
 801e736:	4846      	ldr	r0, [pc, #280]	@ (801e850 <rx_arp+0x20c>)
 801e738:	f7fc fd50 	bl	801b1dc <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 801e73c:	693b      	ldr	r3, [r7, #16]
 801e73e:	f103 021c 	add.w	r2, r3, #28
 801e742:	697b      	ldr	r3, [r7, #20]
 801e744:	1ad3      	subs	r3, r2, r3
 801e746:	4619      	mov	r1, r3
 801e748:	6878      	ldr	r0, [r7, #4]
 801e74a:	f7ff fbc7 	bl	801dedc <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 801e74e:	e071      	b.n	801e834 <rx_arp+0x1f0>
  } else if (pkt->arp->op == mg_htons(2)) {
 801e750:	683b      	ldr	r3, [r7, #0]
 801e752:	699b      	ldr	r3, [r3, #24]
 801e754:	88db      	ldrh	r3, [r3, #6]
 801e756:	b29c      	uxth	r4, r3
 801e758:	2002      	movs	r0, #2
 801e75a:	f004 f996 	bl	8022a8a <mg_ntohs>
 801e75e:	4603      	mov	r3, r0
 801e760:	429c      	cmp	r4, r3
 801e762:	d167      	bne.n	801e834 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801e764:	683b      	ldr	r3, [r7, #0]
 801e766:	699b      	ldr	r3, [r3, #24]
 801e768:	3312      	adds	r3, #18
 801e76a:	6879      	ldr	r1, [r7, #4]
 801e76c:	2206      	movs	r2, #6
 801e76e:	4618      	mov	r0, r3
 801e770:	f007 fa5a 	bl	8025c28 <memcmp>
 801e774:	4603      	mov	r3, r0
 801e776:	2b00      	cmp	r3, #0
 801e778:	d15b      	bne.n	801e832 <rx_arp+0x1ee>
    if (pkt->arp->spa == ifp->gw) {
 801e77a:	683b      	ldr	r3, [r7, #0]
 801e77c:	699b      	ldr	r3, [r3, #24]
 801e77e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	691b      	ldr	r3, [r3, #16]
 801e786:	429a      	cmp	r2, r3
 801e788:	d10a      	bne.n	801e7a0 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801e790:	683b      	ldr	r3, [r7, #0]
 801e792:	699b      	ldr	r3, [r3, #24]
 801e794:	3308      	adds	r3, #8
 801e796:	2206      	movs	r2, #6
 801e798:	4619      	mov	r1, r3
 801e79a:	f008 fd15 	bl	80271c8 <memcpy>
 801e79e:	e049      	b.n	801e834 <rx_arp+0x1f0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e7a4:	2200      	movs	r2, #0
 801e7a6:	6839      	ldr	r1, [r7, #0]
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	f7ff fed9 	bl	801e560 <getpeer>
 801e7ae:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 801e7b0:	68fb      	ldr	r3, [r7, #12]
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d03e      	beq.n	801e834 <rx_arp+0x1f0>
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801e7bc:	f003 0310 	and.w	r3, r3, #16
 801e7c0:	b2db      	uxtb	r3, r3
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d036      	beq.n	801e834 <rx_arp+0x1f0>
        struct connstate *s = (struct connstate *) (c + 1);
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	33b0      	adds	r3, #176	@ 0xb0
 801e7ca:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 801e7cc:	68bb      	ldr	r3, [r7, #8]
 801e7ce:	f103 0018 	add.w	r0, r3, #24
 801e7d2:	683b      	ldr	r3, [r7, #0]
 801e7d4:	699b      	ldr	r3, [r3, #24]
 801e7d6:	3308      	adds	r3, #8
 801e7d8:	2206      	movs	r2, #6
 801e7da:	4619      	mov	r1, r3
 801e7dc:	f008 fcf4 	bl	80271c8 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 801e7e0:	4b16      	ldr	r3, [pc, #88]	@ (801e83c <rx_arp+0x1f8>)
 801e7e2:	681b      	ldr	r3, [r3, #0]
 801e7e4:	2b02      	cmp	r3, #2
 801e7e6:	dd15      	ble.n	801e814 <rx_arp+0x1d0>
 801e7e8:	4b15      	ldr	r3, [pc, #84]	@ (801e840 <rx_arp+0x1fc>)
 801e7ea:	f241 429f 	movw	r2, #5279	@ 0x149f
 801e7ee:	4915      	ldr	r1, [pc, #84]	@ (801e844 <rx_arp+0x200>)
 801e7f0:	2003      	movs	r0, #3
 801e7f2:	f7fc fca3 	bl	801b13c <mg_log_prefix>
 801e7f6:	68fb      	ldr	r3, [r7, #12]
 801e7f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	f103 021c 	add.w	r2, r3, #28
 801e800:	68bb      	ldr	r3, [r7, #8]
 801e802:	3318      	adds	r3, #24
 801e804:	9301      	str	r3, [sp, #4]
 801e806:	4b10      	ldr	r3, [pc, #64]	@ (801e848 <rx_arp+0x204>)
 801e808:	9300      	str	r3, [sp, #0]
 801e80a:	4613      	mov	r3, r2
 801e80c:	4a0f      	ldr	r2, [pc, #60]	@ (801e84c <rx_arp+0x208>)
 801e80e:	4811      	ldr	r0, [pc, #68]	@ (801e854 <rx_arp+0x210>)
 801e810:	f7fc fce4 	bl	801b1dc <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 801e814:	68fa      	ldr	r2, [r7, #12]
 801e816:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801e81a:	f36f 1304 	bfc	r3, #4, #1
 801e81e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        send_syn(c);
 801e822:	68f8      	ldr	r0, [r7, #12]
 801e824:	f002 f8ac 	bl	8020980 <send_syn>
        settmout(c, MIP_TTYPE_SYN);
 801e828:	2103      	movs	r1, #3
 801e82a:	68f8      	ldr	r0, [r7, #12]
 801e82c:	f7ff fafa 	bl	801de24 <settmout>
 801e830:	e000      	b.n	801e834 <rx_arp+0x1f0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 801e832:	bf00      	nop
      }
    }
  }
}
 801e834:	3718      	adds	r7, #24
 801e836:	46bd      	mov	sp, r7
 801e838:	bdb0      	pop	{r4, r5, r7, pc}
 801e83a:	bf00      	nop
 801e83c:	20000298 	.word	0x20000298
 801e840:	080345a8 	.word	0x080345a8
 801e844:	08031484 	.word	0x08031484
 801e848:	080213f1 	.word	0x080213f1
 801e84c:	0802132d 	.word	0x0802132d
 801e850:	08032bf0 	.word	0x08032bf0
 801e854:	08032c08 	.word	0x08032c08

0801e858 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e858:	b580      	push	{r7, lr}
 801e85a:	b08a      	sub	sp, #40	@ 0x28
 801e85c:	af02      	add	r7, sp, #8
 801e85e:	6078      	str	r0, [r7, #4]
 801e860:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 801e862:	683b      	ldr	r3, [r7, #0]
 801e864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e866:	781b      	ldrb	r3, [r3, #0]
 801e868:	2b08      	cmp	r3, #8
 801e86a:	d14d      	bne.n	801e908 <rx_icmp+0xb0>
 801e86c:	683b      	ldr	r3, [r7, #0]
 801e86e:	69db      	ldr	r3, [r3, #28]
 801e870:	2b00      	cmp	r3, #0
 801e872:	d049      	beq.n	801e908 <rx_icmp+0xb0>
 801e874:	683b      	ldr	r3, [r7, #0]
 801e876:	69db      	ldr	r3, [r3, #28]
 801e878:	691a      	ldr	r2, [r3, #16]
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	689b      	ldr	r3, [r3, #8]
 801e87e:	429a      	cmp	r2, r3
 801e880:	d142      	bne.n	801e908 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 801e882:	2326      	movs	r3, #38	@ 0x26
 801e884:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	699a      	ldr	r2, [r3, #24]
 801e88a:	69bb      	ldr	r3, [r7, #24]
 801e88c:	1ad3      	subs	r3, r2, r3
 801e88e:	617b      	str	r3, [r7, #20]
 801e890:	683b      	ldr	r3, [r7, #0]
 801e892:	68db      	ldr	r3, [r3, #12]
 801e894:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 801e896:	69fa      	ldr	r2, [r7, #28]
 801e898:	697b      	ldr	r3, [r7, #20]
 801e89a:	429a      	cmp	r2, r3
 801e89c:	d901      	bls.n	801e8a2 <rx_icmp+0x4a>
 801e89e:	697b      	ldr	r3, [r7, #20]
 801e8a0:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 801e8a2:	683b      	ldr	r3, [r7, #0]
 801e8a4:	691b      	ldr	r3, [r3, #16]
 801e8a6:	1d99      	adds	r1, r3, #6
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	6898      	ldr	r0, [r3, #8]
 801e8ac:	683b      	ldr	r3, [r7, #0]
 801e8ae:	69db      	ldr	r3, [r3, #28]
 801e8b0:	68db      	ldr	r3, [r3, #12]
 801e8b2:	69fa      	ldr	r2, [r7, #28]
 801e8b4:	3204      	adds	r2, #4
 801e8b6:	9201      	str	r2, [sp, #4]
 801e8b8:	9300      	str	r3, [sp, #0]
 801e8ba:	4603      	mov	r3, r0
 801e8bc:	2201      	movs	r2, #1
 801e8be:	6878      	ldr	r0, [r7, #4]
 801e8c0:	f7ff fc1a 	bl	801e0f8 <tx_ip>
 801e8c4:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 801e8c6:	693b      	ldr	r3, [r7, #16]
 801e8c8:	3314      	adds	r3, #20
 801e8ca:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 801e8cc:	2204      	movs	r2, #4
 801e8ce:	2100      	movs	r1, #0
 801e8d0:	68f8      	ldr	r0, [r7, #12]
 801e8d2:	f007 fa3d 	bl	8025d50 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 801e8d6:	68fb      	ldr	r3, [r7, #12]
 801e8d8:	1d18      	adds	r0, r3, #4
 801e8da:	683b      	ldr	r3, [r7, #0]
 801e8dc:	689b      	ldr	r3, [r3, #8]
 801e8de:	69fa      	ldr	r2, [r7, #28]
 801e8e0:	4619      	mov	r1, r3
 801e8e2:	f008 fc71 	bl	80271c8 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 801e8e6:	69fb      	ldr	r3, [r7, #28]
 801e8e8:	3304      	adds	r3, #4
 801e8ea:	4619      	mov	r1, r3
 801e8ec:	68f8      	ldr	r0, [r7, #12]
 801e8ee:	f7ff fa85 	bl	801ddfc <ipcsum>
 801e8f2:	4603      	mov	r3, r0
 801e8f4:	461a      	mov	r2, r3
 801e8f6:	68fb      	ldr	r3, [r7, #12]
 801e8f8:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 801e8fa:	69ba      	ldr	r2, [r7, #24]
 801e8fc:	69fb      	ldr	r3, [r7, #28]
 801e8fe:	4413      	add	r3, r2
 801e900:	4619      	mov	r1, r3
 801e902:	6878      	ldr	r0, [r7, #4]
 801e904:	f7ff faea 	bl	801dedc <ether_output>
  }
}
 801e908:	bf00      	nop
 801e90a:	3720      	adds	r7, #32
 801e90c:	46bd      	mov	sp, r7
 801e90e:	bd80      	pop	{r7, pc}

0801e910 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801e910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e914:	b090      	sub	sp, #64	@ 0x40
 801e916:	af00      	add	r7, sp, #0
 801e918:	60f8      	str	r0, [r7, #12]
 801e91a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 801e91c:	2300      	movs	r3, #0
 801e91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e920:	2300      	movs	r3, #0
 801e922:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e924:	2300      	movs	r3, #0
 801e926:	627b      	str	r3, [r7, #36]	@ 0x24
 801e928:	2300      	movs	r3, #0
 801e92a:	623b      	str	r3, [r7, #32]
 801e92c:	2300      	movs	r3, #0
 801e92e:	61fb      	str	r3, [r7, #28]
 801e930:	2300      	movs	r3, #0
 801e932:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 801e934:	2300      	movs	r3, #0
 801e936:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801e940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 801e944:	68bb      	ldr	r3, [r7, #8]
 801e946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e948:	33f0      	adds	r3, #240	@ 0xf0
 801e94a:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801e94c:	68bb      	ldr	r3, [r7, #8]
 801e94e:	681a      	ldr	r2, [r3, #0]
 801e950:	68bb      	ldr	r3, [r7, #8]
 801e952:	685b      	ldr	r3, [r3, #4]
 801e954:	4413      	add	r3, r2
 801e956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801e958:	68bb      	ldr	r3, [r7, #8]
 801e95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e95c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801e960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e962:	429a      	cmp	r2, r3
 801e964:	f0c0 81ac 	bcc.w	801ecc0 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801e968:	68bb      	ldr	r3, [r7, #8]
 801e96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e96c:	1d18      	adds	r0, r3, #4
 801e96e:	68fb      	ldr	r3, [r7, #12]
 801e970:	3302      	adds	r3, #2
 801e972:	2204      	movs	r2, #4
 801e974:	4619      	mov	r1, r3
 801e976:	f007 f957 	bl	8025c28 <memcmp>
 801e97a:	4603      	mov	r3, r0
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	f040 81a1 	bne.w	801ecc4 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801e982:	e08a      	b.n	801ea9a <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 801e984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e986:	781b      	ldrb	r3, [r3, #0]
 801e988:	2b01      	cmp	r3, #1
 801e98a:	d10e      	bne.n	801e9aa <rx_dhcp_client+0x9a>
 801e98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e98e:	3301      	adds	r3, #1
 801e990:	781b      	ldrb	r3, [r3, #0]
 801e992:	2b04      	cmp	r3, #4
 801e994:	d109      	bne.n	801e9aa <rx_dhcp_client+0x9a>
 801e996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e998:	3306      	adds	r3, #6
 801e99a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e99c:	429a      	cmp	r2, r3
 801e99e:	d904      	bls.n	801e9aa <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 801e9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9a2:	3302      	adds	r3, #2
 801e9a4:	681b      	ldr	r3, [r3, #0]
 801e9a6:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9a8:	e070      	b.n	801ea8c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 801e9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9ac:	781b      	ldrb	r3, [r3, #0]
 801e9ae:	2b03      	cmp	r3, #3
 801e9b0:	d112      	bne.n	801e9d8 <rx_dhcp_client+0xc8>
 801e9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9b4:	3301      	adds	r3, #1
 801e9b6:	781b      	ldrb	r3, [r3, #0]
 801e9b8:	2b04      	cmp	r3, #4
 801e9ba:	d10d      	bne.n	801e9d8 <rx_dhcp_client+0xc8>
 801e9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9be:	3306      	adds	r3, #6
 801e9c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e9c2:	429a      	cmp	r2, r3
 801e9c4:	d908      	bls.n	801e9d8 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 801e9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9c8:	3302      	adds	r3, #2
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 801e9ce:	68bb      	ldr	r3, [r7, #8]
 801e9d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e9d2:	691b      	ldr	r3, [r3, #16]
 801e9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e9d6:	e059      	b.n	801ea8c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	7fdb      	ldrb	r3, [r3, #31]
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	d012      	beq.n	801ea06 <rx_dhcp_client+0xf6>
 801e9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9e2:	781b      	ldrb	r3, [r3, #0]
 801e9e4:	2b06      	cmp	r3, #6
 801e9e6:	d10e      	bne.n	801ea06 <rx_dhcp_client+0xf6>
 801e9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9ea:	3301      	adds	r3, #1
 801e9ec:	781b      	ldrb	r3, [r3, #0]
 801e9ee:	2b04      	cmp	r3, #4
 801e9f0:	d109      	bne.n	801ea06 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 801e9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9f4:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 801e9f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e9f8:	429a      	cmp	r2, r3
 801e9fa:	d904      	bls.n	801ea06 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 801e9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e9fe:	3302      	adds	r3, #2
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	61fb      	str	r3, [r7, #28]
 801ea04:	e042      	b.n	801ea8c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801ea06:	68fb      	ldr	r3, [r7, #12]
 801ea08:	f893 3020 	ldrb.w	r3, [r3, #32]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d012      	beq.n	801ea36 <rx_dhcp_client+0x126>
 801ea10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea12:	781b      	ldrb	r3, [r3, #0]
 801ea14:	2b2a      	cmp	r3, #42	@ 0x2a
 801ea16:	d10e      	bne.n	801ea36 <rx_dhcp_client+0x126>
 801ea18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea1a:	3301      	adds	r3, #1
 801ea1c:	781b      	ldrb	r3, [r3, #0]
 801ea1e:	2b04      	cmp	r3, #4
 801ea20:	d109      	bne.n	801ea36 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 801ea22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea24:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 801ea26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ea28:	429a      	cmp	r2, r3
 801ea2a:	d904      	bls.n	801ea36 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 801ea2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea2e:	3302      	adds	r3, #2
 801ea30:	681b      	ldr	r3, [r3, #0]
 801ea32:	61bb      	str	r3, [r7, #24]
 801ea34:	e02a      	b.n	801ea8c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 801ea36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea38:	781b      	ldrb	r3, [r3, #0]
 801ea3a:	2b33      	cmp	r3, #51	@ 0x33
 801ea3c:	d114      	bne.n	801ea68 <rx_dhcp_client+0x158>
 801ea3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea40:	3301      	adds	r3, #1
 801ea42:	781b      	ldrb	r3, [r3, #0]
 801ea44:	2b04      	cmp	r3, #4
 801ea46:	d10f      	bne.n	801ea68 <rx_dhcp_client+0x158>
 801ea48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea4a:	3306      	adds	r3, #6
 801ea4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ea4e:	429a      	cmp	r2, r3
 801ea50:	d90a      	bls.n	801ea68 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 801ea52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea54:	3302      	adds	r3, #2
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 801ea5a:	6a3b      	ldr	r3, [r7, #32]
 801ea5c:	4618      	mov	r0, r3
 801ea5e:	f003 fffb 	bl	8022a58 <mg_ntohl>
 801ea62:	4603      	mov	r3, r0
 801ea64:	623b      	str	r3, [r7, #32]
 801ea66:	e011      	b.n	801ea8c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 801ea68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea6a:	781b      	ldrb	r3, [r3, #0]
 801ea6c:	2b35      	cmp	r3, #53	@ 0x35
 801ea6e:	d10d      	bne.n	801ea8c <rx_dhcp_client+0x17c>
 801ea70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea72:	3301      	adds	r3, #1
 801ea74:	781b      	ldrb	r3, [r3, #0]
 801ea76:	2b01      	cmp	r3, #1
 801ea78:	d108      	bne.n	801ea8c <rx_dhcp_client+0x17c>
 801ea7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea7c:	3306      	adds	r3, #6
 801ea7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ea80:	429a      	cmp	r2, r3
 801ea82:	d903      	bls.n	801ea8c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 801ea84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea86:	789b      	ldrb	r3, [r3, #2]
 801ea88:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 801ea8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea8e:	3301      	adds	r3, #1
 801ea90:	781b      	ldrb	r3, [r3, #0]
 801ea92:	3302      	adds	r3, #2
 801ea94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ea96:	4413      	add	r3, r2
 801ea98:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 801ea9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ea9c:	3301      	adds	r3, #1
 801ea9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801eaa0:	429a      	cmp	r2, r3
 801eaa2:	d904      	bls.n	801eaae <rx_dhcp_client+0x19e>
 801eaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eaa6:	781b      	ldrb	r3, [r3, #0]
 801eaa8:	2bff      	cmp	r3, #255	@ 0xff
 801eaaa:	f47f af6b 	bne.w	801e984 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 801eaae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801eab2:	2b06      	cmp	r3, #6
 801eab4:	d10c      	bne.n	801ead0 <rx_dhcp_client+0x1c0>
 801eab6:	68fb      	ldr	r3, [r7, #12]
 801eab8:	689b      	ldr	r3, [r3, #8]
 801eaba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801eabc:	429a      	cmp	r2, r3
 801eabe:	d107      	bne.n	801ead0 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 801eac0:	68fb      	ldr	r3, [r7, #12]
 801eac2:	2201      	movs	r2, #1
 801eac4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801eac8:	68fb      	ldr	r3, [r7, #12]
 801eaca:	2200      	movs	r2, #0
 801eacc:	609a      	str	r2, [r3, #8]
 801eace:	e0ec      	b.n	801ecaa <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 801ead0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801ead4:	2b02      	cmp	r3, #2
 801ead6:	d123      	bne.n	801eb20 <rx_dhcp_client+0x210>
 801ead8:	68fb      	ldr	r3, [r7, #12]
 801eada:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801eade:	2b01      	cmp	r3, #1
 801eae0:	d11e      	bne.n	801eb20 <rx_dhcp_client+0x210>
 801eae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d01b      	beq.n	801eb20 <rx_dhcp_client+0x210>
 801eae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d018      	beq.n	801eb20 <rx_dhcp_client+0x210>
 801eaee:	6a3b      	ldr	r3, [r7, #32]
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d015      	beq.n	801eb20 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801eaf4:	68bb      	ldr	r3, [r7, #8]
 801eaf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801eaf8:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d003      	beq.n	801eb06 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801eafe:	68bb      	ldr	r3, [r7, #8]
 801eb00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 801eb02:	695b      	ldr	r3, [r3, #20]
 801eb04:	e002      	b.n	801eb0c <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 801eb06:	68bb      	ldr	r3, [r7, #8]
 801eb08:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 801eb0a:	68db      	ldr	r3, [r3, #12]
 801eb0c:	461a      	mov	r2, r3
 801eb0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801eb10:	68f8      	ldr	r0, [r7, #12]
 801eb12:	f7ff fc41 	bl	801e398 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	2202      	movs	r2, #2
 801eb1a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 801eb1e:	e0c4      	b.n	801ecaa <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 801eb20:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801eb24:	2b05      	cmp	r3, #5
 801eb26:	f040 80c0 	bne.w	801ecaa <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801eb30:	2b02      	cmp	r3, #2
 801eb32:	f040 8081 	bne.w	801ec38 <rx_dhcp_client+0x328>
 801eb36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d07d      	beq.n	801ec38 <rx_dhcp_client+0x328>
 801eb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d07a      	beq.n	801ec38 <rx_dhcp_client+0x328>
 801eb42:	6a3b      	ldr	r3, [r7, #32]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d077      	beq.n	801ec38 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 801eb48:	68fb      	ldr	r3, [r7, #12]
 801eb4a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801eb4e:	6a39      	ldr	r1, [r7, #32]
 801eb50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801eb54:	fb00 f101 	mul.w	r1, r0, r1
 801eb58:	2000      	movs	r0, #0
 801eb5a:	4688      	mov	r8, r1
 801eb5c:	4681      	mov	r9, r0
 801eb5e:	eb12 0108 	adds.w	r1, r2, r8
 801eb62:	6039      	str	r1, [r7, #0]
 801eb64:	eb43 0309 	adc.w	r3, r3, r9
 801eb68:	607b      	str	r3, [r7, #4]
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801eb70:	e9c3 1218 	strd	r1, r2, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801eb74:	4b56      	ldr	r3, [pc, #344]	@ (801ecd0 <rx_dhcp_client+0x3c0>)
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	2b01      	cmp	r3, #1
 801eb7a:	dd16      	ble.n	801ebaa <rx_dhcp_client+0x29a>
 801eb7c:	4b55      	ldr	r3, [pc, #340]	@ (801ecd4 <rx_dhcp_client+0x3c4>)
 801eb7e:	f241 42e1 	movw	r2, #5345	@ 0x14e1
 801eb82:	4955      	ldr	r1, [pc, #340]	@ (801ecd8 <rx_dhcp_client+0x3c8>)
 801eb84:	2002      	movs	r0, #2
 801eb86:	f7fc fad9 	bl	801b13c <mg_log_prefix>
 801eb8a:	6a3c      	ldr	r4, [r7, #32]
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801eb92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801eb96:	f04f 0300 	mov.w	r3, #0
 801eb9a:	f7e2 f8dd 	bl	8000d58 <__aeabi_uldivmod>
 801eb9e:	4602      	mov	r2, r0
 801eba0:	460b      	mov	r3, r1
 801eba2:	4621      	mov	r1, r4
 801eba4:	484d      	ldr	r0, [pc, #308]	@ (801ecdc <rx_dhcp_client+0x3cc>)
 801eba6:	f7fc fb19 	bl	801b1dc <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801ebaa:	68fb      	ldr	r3, [r7, #12]
 801ebac:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801ebb0:	68bb      	ldr	r3, [r7, #8]
 801ebb2:	691b      	ldr	r3, [r3, #16]
 801ebb4:	3306      	adds	r3, #6
 801ebb6:	2206      	movs	r2, #6
 801ebb8:	4619      	mov	r1, r3
 801ebba:	f008 fb05 	bl	80271c8 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 801ebbe:	68fb      	ldr	r3, [r7, #12]
 801ebc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ebc2:	609a      	str	r2, [r3, #8]
 801ebc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ebc6:	68fb      	ldr	r3, [r7, #12]
 801ebc8:	611a      	str	r2, [r3, #16]
 801ebca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ebcc:	68fb      	ldr	r3, [r7, #12]
 801ebce:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 801ebd0:	68fb      	ldr	r3, [r7, #12]
 801ebd2:	2203      	movs	r2, #3
 801ebd4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 801ebd8:	f107 0310 	add.w	r3, r7, #16
 801ebdc:	2108      	movs	r1, #8
 801ebde:	4618      	mov	r0, r3
 801ebe0:	f003 fed3 	bl	802298a <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 801ebe4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ebe8:	4614      	mov	r4, r2
 801ebea:	f003 ffdf 	bl	8022bac <mg_millis>
 801ebee:	4602      	mov	r2, r0
 801ebf0:	460b      	mov	r3, r1
 801ebf2:	4613      	mov	r3, r2
 801ebf4:	4423      	add	r3, r4
 801ebf6:	4618      	mov	r0, r3
 801ebf8:	f006 fb5a 	bl	80252b0 <srand>
      if (ifp->enable_req_dns && dns != 0)
 801ebfc:	68fb      	ldr	r3, [r7, #12]
 801ebfe:	7fdb      	ldrb	r3, [r3, #31]
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	d009      	beq.n	801ec18 <rx_dhcp_client+0x308>
 801ec04:	69fb      	ldr	r3, [r7, #28]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d006      	beq.n	801ec18 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 801ec0a:	f107 031c 	add.w	r3, r7, #28
 801ec0e:	461a      	mov	r2, r3
 801ec10:	2101      	movs	r1, #1
 801ec12:	68f8      	ldr	r0, [r7, #12]
 801ec14:	f7ff f87a 	bl	801dd0c <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801ec1e:	2b00      	cmp	r3, #0
 801ec20:	d042      	beq.n	801eca8 <rx_dhcp_client+0x398>
 801ec22:	69bb      	ldr	r3, [r7, #24]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d03f      	beq.n	801eca8 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 801ec28:	f107 0318 	add.w	r3, r7, #24
 801ec2c:	461a      	mov	r2, r3
 801ec2e:	2102      	movs	r1, #2
 801ec30:	68f8      	ldr	r0, [r7, #12]
 801ec32:	f7ff f86b 	bl	801dd0c <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801ec36:	e037      	b.n	801eca8 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 801ec38:	68fb      	ldr	r3, [r7, #12]
 801ec3a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801ec3e:	2b03      	cmp	r3, #3
 801ec40:	d133      	bne.n	801ecaa <rx_dhcp_client+0x39a>
 801ec42:	68fb      	ldr	r3, [r7, #12]
 801ec44:	689b      	ldr	r3, [r3, #8]
 801ec46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ec48:	429a      	cmp	r2, r3
 801ec4a:	d12e      	bne.n	801ecaa <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 801ec4c:	68fb      	ldr	r3, [r7, #12]
 801ec4e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 801ec52:	6a39      	ldr	r1, [r7, #32]
 801ec54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801ec58:	fb00 f101 	mul.w	r1, r0, r1
 801ec5c:	2000      	movs	r0, #0
 801ec5e:	460c      	mov	r4, r1
 801ec60:	4605      	mov	r5, r0
 801ec62:	eb12 0a04 	adds.w	sl, r2, r4
 801ec66:	eb43 0b05 	adc.w	fp, r3, r5
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	e9c3 ab18 	strd	sl, fp, [r3, #96]	@ 0x60
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 801ec70:	4b17      	ldr	r3, [pc, #92]	@ (801ecd0 <rx_dhcp_client+0x3c0>)
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	2b01      	cmp	r3, #1
 801ec76:	dd18      	ble.n	801ecaa <rx_dhcp_client+0x39a>
 801ec78:	4b16      	ldr	r3, [pc, #88]	@ (801ecd4 <rx_dhcp_client+0x3c4>)
 801ec7a:	f241 42ef 	movw	r2, #5359	@ 0x14ef
 801ec7e:	4916      	ldr	r1, [pc, #88]	@ (801ecd8 <rx_dhcp_client+0x3c8>)
 801ec80:	2002      	movs	r0, #2
 801ec82:	f7fc fa5b 	bl	801b13c <mg_log_prefix>
 801ec86:	6a3c      	ldr	r4, [r7, #32]
 801ec88:	68fb      	ldr	r3, [r7, #12]
 801ec8a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 801ec8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ec92:	f04f 0300 	mov.w	r3, #0
 801ec96:	f7e2 f85f 	bl	8000d58 <__aeabi_uldivmod>
 801ec9a:	4602      	mov	r2, r0
 801ec9c:	460b      	mov	r3, r1
 801ec9e:	4621      	mov	r1, r4
 801eca0:	480e      	ldr	r0, [pc, #56]	@ (801ecdc <rx_dhcp_client+0x3cc>)
 801eca2:	f7fc fa9b 	bl	801b1dc <mg_log>
 801eca6:	e000      	b.n	801ecaa <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 801eca8:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 801ecaa:	68fb      	ldr	r3, [r7, #12]
 801ecac:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801ecb0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 801ecb4:	429a      	cmp	r2, r3
 801ecb6:	d006      	beq.n	801ecc6 <rx_dhcp_client+0x3b6>
 801ecb8:	68f8      	ldr	r0, [r7, #12]
 801ecba:	f7ff f989 	bl	801dfd0 <onstatechange>
 801ecbe:	e002      	b.n	801ecc6 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801ecc0:	bf00      	nop
 801ecc2:	e000      	b.n	801ecc6 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 801ecc4:	bf00      	nop
}
 801ecc6:	3740      	adds	r7, #64	@ 0x40
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ecce:	bf00      	nop
 801ecd0:	20000298 	.word	0x20000298
 801ecd4:	080345b0 	.word	0x080345b0
 801ecd8:	08031484 	.word	0x08031484
 801ecdc:	08032c24 	.word	0x08032c24

0801ece0 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ece4:	b0d6      	sub	sp, #344	@ 0x158
 801ece6:	af04      	add	r7, sp, #16
 801ece8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ecf0:	6018      	str	r0, [r3, #0]
 801ecf2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ecf6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ecfa:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 801ed02:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed06:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed0e:	33f0      	adds	r3, #240	@ 0xf0
 801ed10:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 801ed14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed18:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ed1c:	681b      	ldr	r3, [r3, #0]
 801ed1e:	681a      	ldr	r2, [r3, #0]
 801ed20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed24:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	685b      	ldr	r3, [r3, #4]
 801ed2c:	4413      	add	r3, r2
 801ed2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801ed32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed36:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ed3a:	681b      	ldr	r3, [r3, #0]
 801ed3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed3e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801ed42:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801ed46:	429a      	cmp	r2, r3
 801ed48:	f0c0 81b0 	bcc.w	801f0ac <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 801ed4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed50:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ed54:	4ad8      	ldr	r2, [pc, #864]	@ (801f0b8 <rx_dhcp_server+0x3d8>)
 801ed56:	4618      	mov	r0, r3
 801ed58:	4611      	mov	r1, r2
 801ed5a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801ed5e:	461a      	mov	r2, r3
 801ed60:	f008 fa32 	bl	80271c8 <memcpy>
  res.yiaddr = ifp->ip;
 801ed64:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed68:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	689a      	ldr	r2, [r3, #8]
 801ed70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ed74:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801ed78:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 801ed7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ed7e:	3310      	adds	r3, #16
 801ed80:	3303      	adds	r3, #3
 801ed82:	781a      	ldrb	r2, [r3, #0]
 801ed84:	3201      	adds	r2, #1
 801ed86:	b2d2      	uxtb	r2, r2
 801ed88:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801ed8a:	e020      	b.n	801edce <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 801ed8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ed90:	781b      	ldrb	r3, [r3, #0]
 801ed92:	2b35      	cmp	r3, #53	@ 0x35
 801ed94:	d111      	bne.n	801edba <rx_dhcp_server+0xda>
 801ed96:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ed9a:	3301      	adds	r3, #1
 801ed9c:	781b      	ldrb	r3, [r3, #0]
 801ed9e:	2b01      	cmp	r3, #1
 801eda0:	d10b      	bne.n	801edba <rx_dhcp_server+0xda>
 801eda2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801eda6:	3302      	adds	r3, #2
 801eda8:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801edac:	429a      	cmp	r2, r3
 801edae:	d904      	bls.n	801edba <rx_dhcp_server+0xda>
      op = p[2];
 801edb0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801edb4:	789b      	ldrb	r3, [r3, #2]
 801edb6:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
    }
    p += p[1] + 2;
 801edba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801edbe:	3301      	adds	r3, #1
 801edc0:	781b      	ldrb	r3, [r3, #0]
 801edc2:	3302      	adds	r3, #2
 801edc4:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801edc8:	4413      	add	r3, r2
 801edca:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 801edce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801edd2:	3301      	adds	r3, #1
 801edd4:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 801edd8:	429a      	cmp	r2, r3
 801edda:	d904      	bls.n	801ede6 <rx_dhcp_server+0x106>
 801eddc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801ede0:	781b      	ldrb	r3, [r3, #0]
 801ede2:	2bff      	cmp	r3, #255	@ 0xff
 801ede4:	d1d2      	bne.n	801ed8c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 801ede6:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801edea:	2b01      	cmp	r3, #1
 801edec:	d004      	beq.n	801edf8 <rx_dhcp_server+0x118>
 801edee:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801edf2:	2b03      	cmp	r3, #3
 801edf4:	f040 815b 	bne.w	801f0ae <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 801edf8:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801edfc:	2b01      	cmp	r3, #1
 801edfe:	d101      	bne.n	801ee04 <rx_dhcp_server+0x124>
 801ee00:	2302      	movs	r3, #2
 801ee02:	e000      	b.n	801ee06 <rx_dhcp_server+0x126>
 801ee04:	2305      	movs	r3, #5
 801ee06:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
    uint8_t opts[] = {
 801ee0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee12:	2235      	movs	r2, #53	@ 0x35
 801ee14:	701a      	strb	r2, [r3, #0]
 801ee16:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee1a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee1e:	2201      	movs	r2, #1
 801ee20:	705a      	strb	r2, [r3, #1]
 801ee22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee26:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee2a:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 801ee2e:	709a      	strb	r2, [r3, #2]
 801ee30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee34:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee38:	2201      	movs	r2, #1
 801ee3a:	70da      	strb	r2, [r3, #3]
 801ee3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee44:	2204      	movs	r2, #4
 801ee46:	711a      	strb	r2, [r3, #4]
 801ee48:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee50:	2200      	movs	r2, #0
 801ee52:	715a      	strb	r2, [r3, #5]
 801ee54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee5c:	2200      	movs	r2, #0
 801ee5e:	719a      	strb	r2, [r3, #6]
 801ee60:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee68:	2200      	movs	r2, #0
 801ee6a:	71da      	strb	r2, [r3, #7]
 801ee6c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee74:	2200      	movs	r2, #0
 801ee76:	721a      	strb	r2, [r3, #8]
 801ee78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee80:	2236      	movs	r2, #54	@ 0x36
 801ee82:	725a      	strb	r2, [r3, #9]
 801ee84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee8c:	2204      	movs	r2, #4
 801ee8e:	729a      	strb	r2, [r3, #10]
 801ee90:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ee94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ee98:	2200      	movs	r2, #0
 801ee9a:	72da      	strb	r2, [r3, #11]
 801ee9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eea0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eea4:	2200      	movs	r2, #0
 801eea6:	731a      	strb	r2, [r3, #12]
 801eea8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eeac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eeb0:	2200      	movs	r2, #0
 801eeb2:	735a      	strb	r2, [r3, #13]
 801eeb4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eeb8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eebc:	2200      	movs	r2, #0
 801eebe:	739a      	strb	r2, [r3, #14]
 801eec0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eec4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eec8:	220c      	movs	r2, #12
 801eeca:	73da      	strb	r2, [r3, #15]
 801eecc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eed0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eed4:	2203      	movs	r2, #3
 801eed6:	741a      	strb	r2, [r3, #16]
 801eed8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eedc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eee0:	226d      	movs	r2, #109	@ 0x6d
 801eee2:	745a      	strb	r2, [r3, #17]
 801eee4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eee8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eeec:	2269      	movs	r2, #105	@ 0x69
 801eeee:	749a      	strb	r2, [r3, #18]
 801eef0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eef4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801eef8:	2270      	movs	r2, #112	@ 0x70
 801eefa:	74da      	strb	r2, [r3, #19]
 801eefc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ef04:	2233      	movs	r2, #51	@ 0x33
 801ef06:	751a      	strb	r2, [r3, #20]
 801ef08:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ef10:	2204      	movs	r2, #4
 801ef12:	755a      	strb	r2, [r3, #21]
 801ef14:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ef1c:	22ff      	movs	r2, #255	@ 0xff
 801ef1e:	759a      	strb	r2, [r3, #22]
 801ef20:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ef28:	22ff      	movs	r2, #255	@ 0xff
 801ef2a:	75da      	strb	r2, [r3, #23]
 801ef2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ef34:	22ff      	movs	r2, #255	@ 0xff
 801ef36:	761a      	strb	r2, [r3, #24]
 801ef38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ef40:	22ff      	movs	r2, #255	@ 0xff
 801ef42:	765a      	strb	r2, [r3, #25]
 801ef44:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801ef4c:	22ff      	movs	r2, #255	@ 0xff
 801ef4e:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 801ef50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef54:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801ef58:	681b      	ldr	r3, [r3, #0]
 801ef5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ef5c:	f103 011c 	add.w	r1, r3, #28
 801ef60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ef64:	331c      	adds	r3, #28
 801ef66:	2206      	movs	r2, #6
 801ef68:	4618      	mov	r0, r3
 801ef6a:	f008 f92d 	bl	80271c8 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 801ef6e:	f107 030c 	add.w	r3, r7, #12
 801ef72:	3305      	adds	r3, #5
 801ef74:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801ef78:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801ef7c:	6812      	ldr	r2, [r2, #0]
 801ef7e:	320c      	adds	r2, #12
 801ef80:	6812      	ldr	r2, [r2, #0]
 801ef82:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 801ef84:	f107 030c 	add.w	r3, r7, #12
 801ef88:	330b      	adds	r3, #11
 801ef8a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801ef8e:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 801ef92:	6812      	ldr	r2, [r2, #0]
 801ef94:	3208      	adds	r2, #8
 801ef96:	6812      	ldr	r2, [r2, #0]
 801ef98:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 801ef9a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801ef9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801efa2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 801efa6:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 801efaa:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 801efae:	4615      	mov	r5, r2
 801efb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801efb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801efb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801efb8:	c403      	stmia	r4!, {r0, r1}
 801efba:	8022      	strh	r2, [r4, #0]
 801efbc:	3402      	adds	r4, #2
 801efbe:	0c13      	lsrs	r3, r2, #16
 801efc0:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 801efc2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801efc6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801efce:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 801efd2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801efd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801efda:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 801efde:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801efe2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801efe6:	681b      	ldr	r3, [r3, #0]
 801efe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801efea:	685a      	ldr	r2, [r3, #4]
 801efec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801eff0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801eff4:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 801eff6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801effa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	7f9b      	ldrb	r3, [r3, #30]
 801f002:	2b00      	cmp	r3, #0
 801f004:	d01c      	beq.n	801f040 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;
 801f006:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801f00a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801f00e:	691a      	ldr	r2, [r3, #16]
 801f010:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801f014:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 801f01c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801f020:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	f103 0046 	add.w	r0, r3, #70	@ 0x46
 801f02a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801f02e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	691b      	ldr	r3, [r3, #16]
 801f036:	3306      	adds	r3, #6
 801f038:	2206      	movs	r2, #6
 801f03a:	4619      	mov	r1, r3
 801f03c:	f008 f8c4 	bl	80271c8 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 801f040:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801f044:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	691b      	ldr	r3, [r3, #16]
 801f04c:	1d9d      	adds	r5, r3, #6
 801f04e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801f052:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	689e      	ldr	r6, [r3, #8]
 801f05a:	2043      	movs	r0, #67	@ 0x43
 801f05c:	f003 fd15 	bl	8022a8a <mg_ntohs>
 801f060:	4603      	mov	r3, r0
 801f062:	4698      	mov	r8, r3
 801f064:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 801f068:	2b01      	cmp	r3, #1
 801f06a:	d005      	beq.n	801f078 <rx_dhcp_server+0x398>
 801f06c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801f070:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801f074:	691c      	ldr	r4, [r3, #16]
 801f076:	e001      	b.n	801f07c <rx_dhcp_server+0x39c>
 801f078:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801f07c:	2044      	movs	r0, #68	@ 0x44
 801f07e:	f003 fd04 	bl	8022a8a <mg_ntohs>
 801f082:	4603      	mov	r3, r0
 801f084:	461a      	mov	r2, r3
 801f086:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801f08a:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 801f08e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801f092:	9303      	str	r3, [sp, #12]
 801f094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801f098:	9302      	str	r3, [sp, #8]
 801f09a:	9201      	str	r2, [sp, #4]
 801f09c:	9400      	str	r4, [sp, #0]
 801f09e:	4643      	mov	r3, r8
 801f0a0:	4632      	mov	r2, r6
 801f0a2:	4629      	mov	r1, r5
 801f0a4:	6800      	ldr	r0, [r0, #0]
 801f0a6:	f7ff f87d 	bl	801e1a4 <tx_udp>
 801f0aa:	e000      	b.n	801f0ae <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 801f0ac:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 801f0ae:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 801f0b2:	46bd      	mov	sp, r7
 801f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0b8:	08032c3c 	.word	0x08032c3c

0801f0bc <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801f0bc:	b580      	push	{r7, lr}
 801f0be:	b084      	sub	sp, #16
 801f0c0:	af00      	add	r7, sp, #0
 801f0c2:	6078      	str	r0, [r7, #4]
 801f0c4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f0ca:	2201      	movs	r2, #1
 801f0cc:	6839      	ldr	r1, [r7, #0]
 801f0ce:	4618      	mov	r0, r3
 801f0d0:	f7ff fa46 	bl	801e560 <getpeer>
 801f0d4:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801f0d6:	68fb      	ldr	r3, [r7, #12]
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d059      	beq.n	801f190 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 801f0dc:	683b      	ldr	r3, [r7, #0]
 801f0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0e0:	881b      	ldrh	r3, [r3, #0]
 801f0e2:	b29a      	uxth	r2, r3
 801f0e4:	68fb      	ldr	r3, [r7, #12]
 801f0e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	331c      	adds	r3, #28
 801f0ec:	683a      	ldr	r2, [r7, #0]
 801f0ee:	69d2      	ldr	r2, [r2, #28]
 801f0f0:	320c      	adds	r2, #12
 801f0f2:	6812      	ldr	r2, [r2, #0]
 801f0f4:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 801f0f6:	68fb      	ldr	r3, [r7, #12]
 801f0f8:	33b0      	adds	r3, #176	@ 0xb0
 801f0fa:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801f0fc:	68bb      	ldr	r3, [r7, #8]
 801f0fe:	f103 0018 	add.w	r0, r3, #24
 801f102:	683b      	ldr	r3, [r7, #0]
 801f104:	691b      	ldr	r3, [r3, #16]
 801f106:	3306      	adds	r3, #6
 801f108:	2206      	movs	r2, #6
 801f10a:	4619      	mov	r1, r3
 801f10c:	f008 f85c 	bl	80271c8 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 801f110:	68fb      	ldr	r3, [r7, #12]
 801f112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f114:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801f118:	d304      	bcc.n	801f124 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 801f11a:	491f      	ldr	r1, [pc, #124]	@ (801f198 <rx_udp+0xdc>)
 801f11c:	68f8      	ldr	r0, [r7, #12]
 801f11e:	f7f6 fc47 	bl	80159b0 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801f122:	e035      	b.n	801f190 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801f124:	68fb      	ldr	r3, [r7, #12]
 801f126:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f128:	68fb      	ldr	r3, [r7, #12]
 801f12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f12c:	1ad2      	subs	r2, r2, r3
 801f12e:	683b      	ldr	r3, [r7, #0]
 801f130:	68db      	ldr	r3, [r3, #12]
 801f132:	429a      	cmp	r2, r3
 801f134:	d212      	bcs.n	801f15c <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 801f136:	68fb      	ldr	r3, [r7, #12]
 801f138:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801f13c:	68fb      	ldr	r3, [r7, #12]
 801f13e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801f140:	683b      	ldr	r3, [r7, #0]
 801f142:	68db      	ldr	r3, [r3, #12]
 801f144:	4413      	add	r3, r2
 801f146:	4619      	mov	r1, r3
 801f148:	f7fb f808 	bl	801a15c <mg_iobuf_resize>
 801f14c:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 801f14e:	2b00      	cmp	r3, #0
 801f150:	d104      	bne.n	801f15c <rx_udp+0xa0>
      mg_error(c, "oom");
 801f152:	4912      	ldr	r1, [pc, #72]	@ (801f19c <rx_udp+0xe0>)
 801f154:	68f8      	ldr	r0, [r7, #12]
 801f156:	f7f6 fc2b 	bl	80159b0 <mg_error>
}
 801f15a:	e019      	b.n	801f190 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801f160:	68fb      	ldr	r3, [r7, #12]
 801f162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f164:	18d0      	adds	r0, r2, r3
 801f166:	683b      	ldr	r3, [r7, #0]
 801f168:	6899      	ldr	r1, [r3, #8]
 801f16a:	683b      	ldr	r3, [r7, #0]
 801f16c:	68db      	ldr	r3, [r3, #12]
 801f16e:	461a      	mov	r2, r3
 801f170:	f008 f82a 	bl	80271c8 <memcpy>
      c->recv.len += pkt->pay.len;
 801f174:	68fb      	ldr	r3, [r7, #12]
 801f176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801f178:	683b      	ldr	r3, [r7, #0]
 801f17a:	68db      	ldr	r3, [r3, #12]
 801f17c:	441a      	add	r2, r3
 801f17e:	68fb      	ldr	r3, [r7, #12]
 801f180:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801f182:	683b      	ldr	r3, [r7, #0]
 801f184:	330c      	adds	r3, #12
 801f186:	461a      	mov	r2, r3
 801f188:	2107      	movs	r1, #7
 801f18a:	68f8      	ldr	r0, [r7, #12]
 801f18c:	f7f6 fbf0 	bl	8015970 <mg_call>
}
 801f190:	bf00      	nop
 801f192:	3710      	adds	r7, #16
 801f194:	46bd      	mov	sp, r7
 801f196:	bd80      	pop	{r7, pc}
 801f198:	08032d4c 	.word	0x08032d4c
 801f19c:	08032d68 	.word	0x08032d68

0801f1a0 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 801f1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1a2:	b091      	sub	sp, #68	@ 0x44
 801f1a4:	af06      	add	r7, sp, #24
 801f1a6:	60f8      	str	r0, [r7, #12]
 801f1a8:	60b9      	str	r1, [r7, #8]
 801f1aa:	607a      	str	r2, [r7, #4]
 801f1ac:	70fb      	strb	r3, [r7, #3]
    buf = opts;
    len = sizeof(opts);
  }
#endif
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 801f1ae:	68fb      	ldr	r3, [r7, #12]
 801f1b0:	689a      	ldr	r2, [r3, #8]
 801f1b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f1b4:	3314      	adds	r3, #20
 801f1b6:	9301      	str	r3, [sp, #4]
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	9300      	str	r3, [sp, #0]
 801f1bc:	4613      	mov	r3, r2
 801f1be:	2206      	movs	r2, #6
 801f1c0:	68b9      	ldr	r1, [r7, #8]
 801f1c2:	68f8      	ldr	r0, [r7, #12]
 801f1c4:	f7fe ff98 	bl	801e0f8 <tx_ip>
 801f1c8:	6278      	str	r0, [r7, #36]	@ 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 801f1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1cc:	3314      	adds	r3, #20
 801f1ce:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 801f1d0:	2214      	movs	r2, #20
 801f1d2:	2100      	movs	r1, #0
 801f1d4:	6a38      	ldr	r0, [r7, #32]
 801f1d6:	f006 fdbb 	bl	8025d50 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 801f1da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d009      	beq.n	801f1f4 <tx_tcp+0x54>
 801f1e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d006      	beq.n	801f1f4 <tx_tcp+0x54>
 801f1e6:	6a3b      	ldr	r3, [r7, #32]
 801f1e8:	3314      	adds	r3, #20
 801f1ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801f1ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801f1ee:	4618      	mov	r0, r3
 801f1f0:	f006 fd94 	bl	8025d1c <memmove>
  tcp->sport = sport;
 801f1f4:	6a3b      	ldr	r3, [r7, #32]
 801f1f6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801f1fa:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 801f1fc:	6a3b      	ldr	r3, [r7, #32]
 801f1fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801f202:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 801f204:	6a3b      	ldr	r3, [r7, #32]
 801f206:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801f208:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 801f20a:	6a3b      	ldr	r3, [r7, #32]
 801f20c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801f20e:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 801f210:	6a3b      	ldr	r3, [r7, #32]
 801f212:	78fa      	ldrb	r2, [r7, #3]
 801f214:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 801f216:	f241 7070 	movw	r0, #6000	@ 0x1770
 801f21a:	f003 fc36 	bl	8022a8a <mg_ntohs>
 801f21e:	4603      	mov	r3, r0
 801f220:	461a      	mov	r2, r3
 801f222:	6a3b      	ldr	r3, [r7, #32]
 801f224:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 801f226:	6a3b      	ldr	r3, [r7, #32]
 801f228:	2250      	movs	r2, #80	@ 0x50
 801f22a:	731a      	strb	r2, [r3, #12]
  // if (flags & TH_SYN) tcp->off = 0x70;  // Handshake? header size 28 bytes

  uint32_t cs = 0;
 801f22c:	2300      	movs	r3, #0
 801f22e:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 801f230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f232:	b29b      	uxth	r3, r3
 801f234:	3314      	adds	r3, #20
 801f236:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 801f238:	2300      	movs	r3, #0
 801f23a:	753b      	strb	r3, [r7, #20]
 801f23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f23e:	7a5b      	ldrb	r3, [r3, #9]
 801f240:	757b      	strb	r3, [r7, #21]
 801f242:	8b7b      	ldrh	r3, [r7, #26]
 801f244:	0a1b      	lsrs	r3, r3, #8
 801f246:	b29b      	uxth	r3, r3
 801f248:	b2db      	uxtb	r3, r3
 801f24a:	75bb      	strb	r3, [r7, #22]
 801f24c:	8b7b      	ldrh	r3, [r7, #26]
 801f24e:	b2db      	uxtb	r3, r3
 801f250:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 801f252:	8b7b      	ldrh	r3, [r7, #26]
 801f254:	461a      	mov	r2, r3
 801f256:	6a39      	ldr	r1, [r7, #32]
 801f258:	69f8      	ldr	r0, [r7, #28]
 801f25a:	f7fe fd89 	bl	801dd70 <csumup>
 801f25e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 801f260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f262:	330c      	adds	r3, #12
 801f264:	2204      	movs	r2, #4
 801f266:	4619      	mov	r1, r3
 801f268:	69f8      	ldr	r0, [r7, #28]
 801f26a:	f7fe fd81 	bl	801dd70 <csumup>
 801f26e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 801f270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f272:	3310      	adds	r3, #16
 801f274:	2204      	movs	r2, #4
 801f276:	4619      	mov	r1, r3
 801f278:	69f8      	ldr	r0, [r7, #28]
 801f27a:	f7fe fd79 	bl	801dd70 <csumup>
 801f27e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 801f280:	f107 0314 	add.w	r3, r7, #20
 801f284:	2204      	movs	r2, #4
 801f286:	4619      	mov	r1, r3
 801f288:	69f8      	ldr	r0, [r7, #28]
 801f28a:	f7fe fd71 	bl	801dd70 <csumup>
 801f28e:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 801f290:	69f8      	ldr	r0, [r7, #28]
 801f292:	f7fe fd98 	bl	801ddc6 <csumfin>
 801f296:	4603      	mov	r3, r0
 801f298:	461a      	mov	r2, r3
 801f29a:	6a3b      	ldr	r3, [r7, #32]
 801f29c:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 801f29e:	4b21      	ldr	r3, [pc, #132]	@ (801f324 <tx_tcp+0x184>)
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	2b03      	cmp	r3, #3
 801f2a4:	dd2c      	ble.n	801f300 <tx_tcp+0x160>
 801f2a6:	4b20      	ldr	r3, [pc, #128]	@ (801f328 <tx_tcp+0x188>)
 801f2a8:	f241 5254 	movw	r2, #5460	@ 0x1554
 801f2ac:	491f      	ldr	r1, [pc, #124]	@ (801f32c <tx_tcp+0x18c>)
 801f2ae:	2004      	movs	r0, #4
 801f2b0:	f7fb ff44 	bl	801b13c <mg_log_prefix>
 801f2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2b6:	f103 050c 	add.w	r5, r3, #12
 801f2ba:	6a3b      	ldr	r3, [r7, #32]
 801f2bc:	881b      	ldrh	r3, [r3, #0]
 801f2be:	b29b      	uxth	r3, r3
 801f2c0:	4618      	mov	r0, r3
 801f2c2:	f003 fbe2 	bl	8022a8a <mg_ntohs>
 801f2c6:	4603      	mov	r3, r0
 801f2c8:	461e      	mov	r6, r3
 801f2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2cc:	f103 0410 	add.w	r4, r3, #16
 801f2d0:	6a3b      	ldr	r3, [r7, #32]
 801f2d2:	885b      	ldrh	r3, [r3, #2]
 801f2d4:	b29b      	uxth	r3, r3
 801f2d6:	4618      	mov	r0, r3
 801f2d8:	f003 fbd7 	bl	8022a8a <mg_ntohs>
 801f2dc:	4603      	mov	r3, r0
 801f2de:	461a      	mov	r2, r3
 801f2e0:	6a3b      	ldr	r3, [r7, #32]
 801f2e2:	7b5b      	ldrb	r3, [r3, #13]
 801f2e4:	4619      	mov	r1, r3
 801f2e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f2e8:	9304      	str	r3, [sp, #16]
 801f2ea:	9103      	str	r1, [sp, #12]
 801f2ec:	9202      	str	r2, [sp, #8]
 801f2ee:	9401      	str	r4, [sp, #4]
 801f2f0:	4b0f      	ldr	r3, [pc, #60]	@ (801f330 <tx_tcp+0x190>)
 801f2f2:	9300      	str	r3, [sp, #0]
 801f2f4:	4633      	mov	r3, r6
 801f2f6:	462a      	mov	r2, r5
 801f2f8:	490d      	ldr	r1, [pc, #52]	@ (801f330 <tx_tcp+0x190>)
 801f2fa:	480e      	ldr	r0, [pc, #56]	@ (801f334 <tx_tcp+0x194>)
 801f2fc:	f7fb ff6e 	bl	801b1dc <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 801f300:	6a3b      	ldr	r3, [r7, #32]
 801f302:	f103 0214 	add.w	r2, r3, #20
 801f306:	68fb      	ldr	r3, [r7, #12]
 801f308:	695b      	ldr	r3, [r3, #20]
 801f30a:	1ad3      	subs	r3, r2, r3
 801f30c:	461a      	mov	r2, r3
 801f30e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f310:	4413      	add	r3, r2
 801f312:	4619      	mov	r1, r3
 801f314:	68f8      	ldr	r0, [r7, #12]
 801f316:	f7fe fde1 	bl	801dedc <ether_output>
 801f31a:	4603      	mov	r3, r0
}
 801f31c:	4618      	mov	r0, r3
 801f31e:	372c      	adds	r7, #44	@ 0x2c
 801f320:	46bd      	mov	sp, r7
 801f322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f324:	20000298 	.word	0x20000298
 801f328:	080345c0 	.word	0x080345c0
 801f32c:	08031484 	.word	0x08031484
 801f330:	0802132d 	.word	0x0802132d
 801f334:	08032d6c 	.word	0x08032d6c

0801f338 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 801f338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f33c:	b08c      	sub	sp, #48	@ 0x30
 801f33e:	af06      	add	r7, sp, #24
 801f340:	60f8      	str	r0, [r7, #12]
 801f342:	60b9      	str	r1, [r7, #8]
 801f344:	603b      	str	r3, [r7, #0]
 801f346:	4613      	mov	r3, r2
 801f348:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 801f34a:	68bb      	ldr	r3, [r7, #8]
 801f34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f34e:	7b5b      	ldrb	r3, [r3, #13]
 801f350:	f003 0303 	and.w	r3, r3, #3
 801f354:	2b00      	cmp	r3, #0
 801f356:	bf14      	ite	ne
 801f358:	2301      	movne	r3, #1
 801f35a:	2300      	moveq	r3, #0
 801f35c:	b2db      	uxtb	r3, r3
 801f35e:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f360:	68bb      	ldr	r3, [r7, #8]
 801f362:	691b      	ldr	r3, [r3, #16]
 801f364:	1d9e      	adds	r6, r3, #6
 801f366:	68bb      	ldr	r3, [r7, #8]
 801f368:	69db      	ldr	r3, [r3, #28]
 801f36a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801f36e:	68bb      	ldr	r3, [r7, #8]
 801f370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f372:	885b      	ldrh	r3, [r3, #2]
 801f374:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801f376:	68bb      	ldr	r3, [r7, #8]
 801f378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f37a:	881b      	ldrh	r3, [r3, #0]
 801f37c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801f37e:	68bb      	ldr	r3, [r7, #8]
 801f380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f382:	685b      	ldr	r3, [r3, #4]
 801f384:	4618      	mov	r0, r3
 801f386:	f003 fb67 	bl	8022a58 <mg_ntohl>
 801f38a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 801f38c:	697b      	ldr	r3, [r7, #20]
 801f38e:	4413      	add	r3, r2
 801f390:	4618      	mov	r0, r3
 801f392:	f003 fb61 	bl	8022a58 <mg_ntohl>
 801f396:	4601      	mov	r1, r0
 801f398:	79fa      	ldrb	r2, [r7, #7]
 801f39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f39c:	9305      	str	r3, [sp, #20]
 801f39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f3a0:	9304      	str	r3, [sp, #16]
 801f3a2:	9103      	str	r1, [sp, #12]
 801f3a4:	683b      	ldr	r3, [r7, #0]
 801f3a6:	9302      	str	r3, [sp, #8]
 801f3a8:	9501      	str	r5, [sp, #4]
 801f3aa:	9400      	str	r4, [sp, #0]
 801f3ac:	4613      	mov	r3, r2
 801f3ae:	4642      	mov	r2, r8
 801f3b0:	4631      	mov	r1, r6
 801f3b2:	68f8      	ldr	r0, [r7, #12]
 801f3b4:	f7ff fef4 	bl	801f1a0 <tx_tcp>
 801f3b8:	4603      	mov	r3, r0
                buf, len);
}
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	3718      	adds	r7, #24
 801f3be:	46bd      	mov	sp, r7
 801f3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f3c4 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 801f3c4:	b5b0      	push	{r4, r5, r7, lr}
 801f3c6:	b084      	sub	sp, #16
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
 801f3cc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	685b      	ldr	r3, [r3, #4]
 801f3d2:	4618      	mov	r0, r3
 801f3d4:	f7fe fa87 	bl	801d8e6 <mg_alloc_conn>
 801f3d8:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 801f3da:	68fb      	ldr	r3, [r7, #12]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d10f      	bne.n	801f400 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 801f3e0:	4b4e      	ldr	r3, [pc, #312]	@ (801f51c <accept_conn+0x158>)
 801f3e2:	681b      	ldr	r3, [r3, #0]
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	dd09      	ble.n	801f3fc <accept_conn+0x38>
 801f3e8:	4b4d      	ldr	r3, [pc, #308]	@ (801f520 <accept_conn+0x15c>)
 801f3ea:	f241 5268 	movw	r2, #5480	@ 0x1568
 801f3ee:	494d      	ldr	r1, [pc, #308]	@ (801f524 <accept_conn+0x160>)
 801f3f0:	2001      	movs	r0, #1
 801f3f2:	f7fb fea3 	bl	801b13c <mg_log_prefix>
 801f3f6:	484c      	ldr	r0, [pc, #304]	@ (801f528 <accept_conn+0x164>)
 801f3f8:	f7fb fef0 	bl	801b1dc <mg_log>
    return NULL;
 801f3fc:	2300      	movs	r3, #0
 801f3fe:	e088      	b.n	801f512 <accept_conn+0x14e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 801f400:	68fb      	ldr	r3, [r7, #12]
 801f402:	33b0      	adds	r3, #176	@ 0xb0
 801f404:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 801f406:	683b      	ldr	r3, [r7, #0]
 801f408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f40a:	689b      	ldr	r3, [r3, #8]
 801f40c:	4618      	mov	r0, r3
 801f40e:	f003 fb23 	bl	8022a58 <mg_ntohl>
 801f412:	4602      	mov	r2, r0
 801f414:	68bb      	ldr	r3, [r7, #8]
 801f416:	601a      	str	r2, [r3, #0]
 801f418:	683b      	ldr	r3, [r7, #0]
 801f41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f41c:	685b      	ldr	r3, [r3, #4]
 801f41e:	4618      	mov	r0, r3
 801f420:	f003 fb1a 	bl	8022a58 <mg_ntohl>
 801f424:	4602      	mov	r2, r0
 801f426:	68bb      	ldr	r3, [r7, #8]
 801f428:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 801f42a:	68bb      	ldr	r3, [r7, #8]
 801f42c:	f103 0018 	add.w	r0, r3, #24
 801f430:	683b      	ldr	r3, [r7, #0]
 801f432:	691b      	ldr	r3, [r3, #16]
 801f434:	3306      	adds	r3, #6
 801f436:	2206      	movs	r2, #6
 801f438:	4619      	mov	r1, r3
 801f43a:	f007 fec5 	bl	80271c8 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 801f43e:	2100      	movs	r1, #0
 801f440:	68f8      	ldr	r0, [r7, #12]
 801f442:	f7fe fcef 	bl	801de24 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	331c      	adds	r3, #28
 801f44a:	683a      	ldr	r2, [r7, #0]
 801f44c:	69d2      	ldr	r2, [r2, #28]
 801f44e:	320c      	adds	r2, #12
 801f450:	6812      	ldr	r2, [r2, #0]
 801f452:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 801f454:	683b      	ldr	r3, [r7, #0]
 801f456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f458:	881b      	ldrh	r3, [r3, #0]
 801f45a:	b29a      	uxth	r2, r3
 801f45c:	68fb      	ldr	r3, [r7, #12]
 801f45e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 801f460:	4b2e      	ldr	r3, [pc, #184]	@ (801f51c <accept_conn+0x158>)
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	2b02      	cmp	r3, #2
 801f466:	dd0e      	ble.n	801f486 <accept_conn+0xc2>
 801f468:	4b2d      	ldr	r3, [pc, #180]	@ (801f520 <accept_conn+0x15c>)
 801f46a:	f241 5271 	movw	r2, #5489	@ 0x1571
 801f46e:	492d      	ldr	r1, [pc, #180]	@ (801f524 <accept_conn+0x160>)
 801f470:	2003      	movs	r0, #3
 801f472:	f7fb fe63 	bl	801b13c <mg_log_prefix>
 801f476:	68fb      	ldr	r3, [r7, #12]
 801f478:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801f47a:	68fb      	ldr	r3, [r7, #12]
 801f47c:	331c      	adds	r3, #28
 801f47e:	4a2b      	ldr	r2, [pc, #172]	@ (801f52c <accept_conn+0x168>)
 801f480:	482b      	ldr	r0, [pc, #172]	@ (801f530 <accept_conn+0x16c>)
 801f482:	f7fb feab 	bl	801b1dc <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	685b      	ldr	r3, [r3, #4]
 801f48a:	681a      	ldr	r2, [r3, #0]
 801f48c:	68fb      	ldr	r3, [r7, #12]
 801f48e:	601a      	str	r2, [r3, #0]
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	685b      	ldr	r3, [r3, #4]
 801f494:	68fa      	ldr	r2, [r7, #12]
 801f496:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 801f498:	68fa      	ldr	r2, [r7, #12]
 801f49a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801f49e:	f043 0304 	orr.w	r3, r3, #4
 801f4a2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f4ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f4b0:	b2d9      	uxtb	r1, r3
 801f4b2:	68fa      	ldr	r2, [r7, #12]
 801f4b4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801f4b8:	f361 03c3 	bfi	r3, r1, #3, #1
 801f4bc:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801f4c6:	68fb      	ldr	r3, [r7, #12]
 801f4c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 801f4cc:	68fa      	ldr	r2, [r7, #12]
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	f102 0408 	add.w	r4, r2, #8
 801f4d4:	f103 0508 	add.w	r5, r3, #8
 801f4d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f4da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f4dc:	682b      	ldr	r3, [r5, #0]
 801f4de:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801f4e6:	68fb      	ldr	r3, [r7, #12]
 801f4e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 801f4f0:	68fb      	ldr	r3, [r7, #12]
 801f4f2:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801f4f8:	68fb      	ldr	r3, [r7, #12]
 801f4fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  mg_call(c, MG_EV_OPEN, NULL);
 801f4fc:	2200      	movs	r2, #0
 801f4fe:	2101      	movs	r1, #1
 801f500:	68f8      	ldr	r0, [r7, #12]
 801f502:	f7f6 fa35 	bl	8015970 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 801f506:	2200      	movs	r2, #0
 801f508:	2105      	movs	r1, #5
 801f50a:	68f8      	ldr	r0, [r7, #12]
 801f50c:	f7f6 fa30 	bl	8015970 <mg_call>
  return c;
 801f510:	68fb      	ldr	r3, [r7, #12]
}
 801f512:	4618      	mov	r0, r3
 801f514:	3710      	adds	r7, #16
 801f516:	46bd      	mov	sp, r7
 801f518:	bdb0      	pop	{r4, r5, r7, pc}
 801f51a:	bf00      	nop
 801f51c:	20000298 	.word	0x20000298
 801f520:	080345c8 	.word	0x080345c8
 801f524:	08031484 	.word	0x08031484
 801f528:	080329c0 	.word	0x080329c0
 801f52c:	080213a5 	.word	0x080213a5
 801f530:	08032d90 	.word	0x08032d90

0801f534 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 801f534:	b580      	push	{r7, lr}
 801f536:	b08a      	sub	sp, #40	@ 0x28
 801f538:	af00      	add	r7, sp, #0
 801f53a:	6078      	str	r0, [r7, #4]
 801f53c:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	685b      	ldr	r3, [r3, #4]
 801f542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f544:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 801f546:	230e      	movs	r3, #14
 801f548:	623b      	str	r3, [r7, #32]
 801f54a:	2318      	movs	r3, #24
 801f54c:	61fb      	str	r3, [r7, #28]
 801f54e:	233c      	movs	r3, #60	@ 0x3c
 801f550:	61bb      	str	r3, [r7, #24]
 801f552:	2308      	movs	r3, #8
 801f554:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 801f556:	6a3a      	ldr	r2, [r7, #32]
 801f558:	69fb      	ldr	r3, [r7, #28]
 801f55a:	441a      	add	r2, r3
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f562:	f003 0301 	and.w	r3, r3, #1
 801f566:	b2db      	uxtb	r3, r3
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d001      	beq.n	801f570 <trim_len+0x3c>
 801f56c:	697b      	ldr	r3, [r7, #20]
 801f56e:	e000      	b.n	801f572 <trim_len+0x3e>
 801f570:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 801f572:	4413      	add	r3, r2
 801f574:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f57c:	f003 0301 	and.w	r3, r3, #1
 801f580:	b2db      	uxtb	r3, r3
 801f582:	2b00      	cmp	r3, #0
 801f584:	d103      	bne.n	801f58e <trim_len+0x5a>
 801f586:	693a      	ldr	r2, [r7, #16]
 801f588:	6a3b      	ldr	r3, [r7, #32]
 801f58a:	1ad3      	subs	r3, r2, r3
 801f58c:	e000      	b.n	801f590 <trim_len+0x5c>
 801f58e:	2344      	movs	r3, #68	@ 0x44
 801f590:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 801f592:	683a      	ldr	r2, [r7, #0]
 801f594:	693b      	ldr	r3, [r7, #16]
 801f596:	441a      	add	r2, r3
 801f598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f59a:	699b      	ldr	r3, [r3, #24]
 801f59c:	429a      	cmp	r2, r3
 801f59e:	d904      	bls.n	801f5aa <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 801f5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5a2:	699a      	ldr	r2, [r3, #24]
 801f5a4:	693b      	ldr	r3, [r7, #16]
 801f5a6:	1ad3      	subs	r3, r2, r3
 801f5a8:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 801f5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f5b0:	461a      	mov	r2, r3
 801f5b2:	68fb      	ldr	r3, [r7, #12]
 801f5b4:	4293      	cmp	r3, r2
 801f5b6:	d913      	bls.n	801f5e0 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 801f5b8:	4b20      	ldr	r3, [pc, #128]	@ (801f63c <trim_len+0x108>)
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	dd0a      	ble.n	801f5d6 <trim_len+0xa2>
 801f5c0:	4b1f      	ldr	r3, [pc, #124]	@ (801f640 <trim_len+0x10c>)
 801f5c2:	f241 528c 	movw	r2, #5516	@ 0x158c
 801f5c6:	491f      	ldr	r1, [pc, #124]	@ (801f644 <trim_len+0x110>)
 801f5c8:	2001      	movs	r0, #1
 801f5ca:	f7fb fdb7 	bl	801b13c <mg_log_prefix>
 801f5ce:	68f9      	ldr	r1, [r7, #12]
 801f5d0:	481d      	ldr	r0, [pc, #116]	@ (801f648 <trim_len+0x114>)
 801f5d2:	f7fb fe03 	bl	801b1dc <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 801f5d6:	68fb      	ldr	r3, [r7, #12]
 801f5d8:	b29a      	uxth	r2, r3
 801f5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 801f5e0:	683a      	ldr	r2, [r7, #0]
 801f5e2:	693b      	ldr	r3, [r7, #16]
 801f5e4:	441a      	add	r2, r3
 801f5e6:	6a3b      	ldr	r3, [r7, #32]
 801f5e8:	1ad3      	subs	r3, r2, r3
 801f5ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f5ec:	f8b2 2044 	ldrh.w	r2, [r2, #68]	@ 0x44
 801f5f0:	4293      	cmp	r3, r2
 801f5f2:	d91e      	bls.n	801f632 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 801f5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f5f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801f5fa:	461a      	mov	r2, r3
 801f5fc:	693b      	ldr	r3, [r7, #16]
 801f5fe:	1ad3      	subs	r3, r2, r3
 801f600:	6a3a      	ldr	r2, [r7, #32]
 801f602:	4413      	add	r3, r2
 801f604:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f60c:	f003 0301 	and.w	r3, r3, #1
 801f610:	b2db      	uxtb	r3, r3
 801f612:	2b00      	cmp	r3, #0
 801f614:	d00d      	beq.n	801f632 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 801f616:	4b09      	ldr	r3, [pc, #36]	@ (801f63c <trim_len+0x108>)
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	dd09      	ble.n	801f632 <trim_len+0xfe>
 801f61e:	4b08      	ldr	r3, [pc, #32]	@ (801f640 <trim_len+0x10c>)
 801f620:	f241 5293 	movw	r2, #5523	@ 0x1593
 801f624:	4907      	ldr	r1, [pc, #28]	@ (801f644 <trim_len+0x110>)
 801f626:	2001      	movs	r0, #1
 801f628:	f7fb fd88 	bl	801b13c <mg_log_prefix>
 801f62c:	4807      	ldr	r0, [pc, #28]	@ (801f64c <trim_len+0x118>)
 801f62e:	f7fb fdd5 	bl	801b1dc <mg_log>
    }
  }

  return len;
 801f632:	683b      	ldr	r3, [r7, #0]
}
 801f634:	4618      	mov	r0, r3
 801f636:	3728      	adds	r7, #40	@ 0x28
 801f638:	46bd      	mov	sp, r7
 801f63a:	bd80      	pop	{r7, pc}
 801f63c:	20000298 	.word	0x20000298
 801f640:	080345d4 	.word	0x080345d4
 801f644:	08031484 	.word	0x08031484
 801f648:	08032da0 	.word	0x08032da0
 801f64c:	08032dcc 	.word	0x08032dcc

0801f650 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 801f650:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f652:	b08f      	sub	sp, #60	@ 0x3c
 801f654:	af06      	add	r7, sp, #24
 801f656:	60f8      	str	r0, [r7, #12]
 801f658:	60b9      	str	r1, [r7, #8]
 801f65a:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 801f65c:	68fb      	ldr	r3, [r7, #12]
 801f65e:	685b      	ldr	r3, [r3, #4]
 801f660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f662:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	33b0      	adds	r3, #176	@ 0xb0
 801f668:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 801f66a:	68fb      	ldr	r3, [r7, #12]
 801f66c:	331c      	adds	r3, #28
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 801f672:	6879      	ldr	r1, [r7, #4]
 801f674:	68f8      	ldr	r0, [r7, #12]
 801f676:	f7ff ff5d 	bl	801f534 <trim_len>
 801f67a:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 801f67c:	68fb      	ldr	r3, [r7, #12]
 801f67e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f682:	f003 0301 	and.w	r3, r3, #1
 801f686:	b2db      	uxtb	r3, r3
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d015      	beq.n	801f6b8 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 801f68c:	69bb      	ldr	r3, [r7, #24]
 801f68e:	f103 0118 	add.w	r1, r3, #24
 801f692:	69fb      	ldr	r3, [r7, #28]
 801f694:	6898      	ldr	r0, [r3, #8]
 801f696:	68fb      	ldr	r3, [r7, #12]
 801f698:	8b1c      	ldrh	r4, [r3, #24]
 801f69a:	68fb      	ldr	r3, [r7, #12]
 801f69c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801f69e:	687a      	ldr	r2, [r7, #4]
 801f6a0:	9203      	str	r2, [sp, #12]
 801f6a2:	68ba      	ldr	r2, [r7, #8]
 801f6a4:	9202      	str	r2, [sp, #8]
 801f6a6:	9301      	str	r3, [sp, #4]
 801f6a8:	697b      	ldr	r3, [r7, #20]
 801f6aa:	9300      	str	r3, [sp, #0]
 801f6ac:	4623      	mov	r3, r4
 801f6ae:	4602      	mov	r2, r0
 801f6b0:	69f8      	ldr	r0, [r7, #28]
 801f6b2:	f7fe fd77 	bl	801e1a4 <tx_udp>
 801f6b6:	e03d      	b.n	801f734 <mg_io_send+0xe4>
  } else {
    size_t sent =
        tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 801f6b8:	69bb      	ldr	r3, [r7, #24]
 801f6ba:	f103 0618 	add.w	r6, r3, #24
 801f6be:	68fb      	ldr	r3, [r7, #12]
 801f6c0:	8b1c      	ldrh	r4, [r3, #24]
 801f6c2:	68fb      	ldr	r3, [r7, #12]
 801f6c4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f6c6:	69bb      	ldr	r3, [r7, #24]
 801f6c8:	681b      	ldr	r3, [r3, #0]
 801f6ca:	4618      	mov	r0, r3
 801f6cc:	f003 f9c4 	bl	8022a58 <mg_ntohl>
 801f6d0:	6038      	str	r0, [r7, #0]
 801f6d2:	69bb      	ldr	r3, [r7, #24]
 801f6d4:	685b      	ldr	r3, [r3, #4]
 801f6d6:	4618      	mov	r0, r3
 801f6d8:	f003 f9be 	bl	8022a58 <mg_ntohl>
 801f6dc:	4602      	mov	r2, r0
 801f6de:	687b      	ldr	r3, [r7, #4]
 801f6e0:	9305      	str	r3, [sp, #20]
 801f6e2:	68bb      	ldr	r3, [r7, #8]
 801f6e4:	9304      	str	r3, [sp, #16]
 801f6e6:	9203      	str	r2, [sp, #12]
 801f6e8:	683b      	ldr	r3, [r7, #0]
 801f6ea:	9302      	str	r3, [sp, #8]
 801f6ec:	9501      	str	r5, [sp, #4]
 801f6ee:	9400      	str	r4, [sp, #0]
 801f6f0:	2318      	movs	r3, #24
 801f6f2:	697a      	ldr	r2, [r7, #20]
 801f6f4:	4631      	mov	r1, r6
 801f6f6:	69f8      	ldr	r0, [r7, #28]
 801f6f8:	f7ff fd52 	bl	801f1a0 <tx_tcp>
 801f6fc:	6138      	str	r0, [r7, #16]
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 801f6fe:	693b      	ldr	r3, [r7, #16]
 801f700:	2b00      	cmp	r3, #0
 801f702:	d102      	bne.n	801f70a <mg_io_send+0xba>
      return MG_IO_WAIT;
 801f704:	f06f 0301 	mvn.w	r3, #1
 801f708:	e015      	b.n	801f736 <mg_io_send+0xe6>
    } else if (sent == (size_t) -1) {
 801f70a:	693b      	ldr	r3, [r7, #16]
 801f70c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f710:	d102      	bne.n	801f718 <mg_io_send+0xc8>
      return MG_IO_ERR;
 801f712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f716:	e00e      	b.n	801f736 <mg_io_send+0xe6>
    } else {
      s->seq += (uint32_t) len;
 801f718:	69bb      	ldr	r3, [r7, #24]
 801f71a:	681a      	ldr	r2, [r3, #0]
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	441a      	add	r2, r3
 801f720:	69bb      	ldr	r3, [r7, #24]
 801f722:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 801f724:	69bb      	ldr	r3, [r7, #24]
 801f726:	7f9b      	ldrb	r3, [r3, #30]
 801f728:	2b01      	cmp	r3, #1
 801f72a:	d103      	bne.n	801f734 <mg_io_send+0xe4>
 801f72c:	2100      	movs	r1, #0
 801f72e:	68f8      	ldr	r0, [r7, #12]
 801f730:	f7fe fb78 	bl	801de24 <settmout>
    }
  }
  return (long) len;
 801f734:	687b      	ldr	r3, [r7, #4]
}
 801f736:	4618      	mov	r0, r3
 801f738:	3724      	adds	r7, #36	@ 0x24
 801f73a:	46bd      	mov	sp, r7
 801f73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801f740 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c, struct mg_iobuf *io) {
 801f740:	b580      	push	{r7, lr}
 801f742:	b084      	sub	sp, #16
 801f744:	af00      	add	r7, sp, #0
 801f746:	6078      	str	r0, [r7, #4]
 801f748:	6039      	str	r1, [r7, #0]
  long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 801f74a:	683b      	ldr	r3, [r7, #0]
 801f74c:	681a      	ldr	r2, [r3, #0]
 801f74e:	683b      	ldr	r3, [r7, #0]
 801f750:	689b      	ldr	r3, [r3, #8]
 801f752:	18d1      	adds	r1, r2, r3
 801f754:	683b      	ldr	r3, [r7, #0]
 801f756:	685a      	ldr	r2, [r3, #4]
 801f758:	683b      	ldr	r3, [r7, #0]
 801f75a:	689b      	ldr	r3, [r3, #8]
 801f75c:	1ad3      	subs	r3, r2, r3
 801f75e:	461a      	mov	r2, r3
 801f760:	6878      	ldr	r0, [r7, #4]
 801f762:	f002 ff51 	bl	8022608 <mg_tls_recv>
 801f766:	4603      	mov	r3, r0
 801f768:	60fb      	str	r3, [r7, #12]
  if (n == MG_IO_ERR) {
 801f76a:	68fb      	ldr	r3, [r7, #12]
 801f76c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f770:	d104      	bne.n	801f77c <handle_tls_recv+0x3c>
    mg_error(c, "TLS recv error");
 801f772:	490c      	ldr	r1, [pc, #48]	@ (801f7a4 <handle_tls_recv+0x64>)
 801f774:	6878      	ldr	r0, [r7, #4]
 801f776:	f7f6 f91b 	bl	80159b0 <mg_error>
  } else if (n > 0) {
    // Decrypted successfully - trigger MG_EV_READ
    io->len += (size_t) n;
    mg_call(c, MG_EV_READ, &n);
  }
}
 801f77a:	e00f      	b.n	801f79c <handle_tls_recv+0x5c>
  } else if (n > 0) {
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	2b00      	cmp	r3, #0
 801f780:	dd0c      	ble.n	801f79c <handle_tls_recv+0x5c>
    io->len += (size_t) n;
 801f782:	683b      	ldr	r3, [r7, #0]
 801f784:	689b      	ldr	r3, [r3, #8]
 801f786:	68fa      	ldr	r2, [r7, #12]
 801f788:	441a      	add	r2, r3
 801f78a:	683b      	ldr	r3, [r7, #0]
 801f78c:	609a      	str	r2, [r3, #8]
    mg_call(c, MG_EV_READ, &n);
 801f78e:	f107 030c 	add.w	r3, r7, #12
 801f792:	461a      	mov	r2, r3
 801f794:	2107      	movs	r1, #7
 801f796:	6878      	ldr	r0, [r7, #4]
 801f798:	f7f6 f8ea 	bl	8015970 <mg_call>
}
 801f79c:	bf00      	nop
 801f79e:	3710      	adds	r7, #16
 801f7a0:	46bd      	mov	sp, r7
 801f7a2:	bd80      	pop	{r7, pc}
 801f7a4:	08032df8 	.word	0x08032df8

0801f7a8 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 801f7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7ac:	b090      	sub	sp, #64	@ 0x40
 801f7ae:	af06      	add	r7, sp, #24
 801f7b0:	60f8      	str	r0, [r7, #12]
 801f7b2:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 801f7b4:	68fb      	ldr	r3, [r7, #12]
 801f7b6:	33b0      	adds	r3, #176	@ 0xb0
 801f7b8:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 801f7ba:	68fb      	ldr	r3, [r7, #12]
 801f7bc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f7c4:	b2db      	uxtb	r3, r3
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	d002      	beq.n	801f7d0 <read_conn+0x28>
 801f7ca:	68fb      	ldr	r3, [r7, #12]
 801f7cc:	3368      	adds	r3, #104	@ 0x68
 801f7ce:	e001      	b.n	801f7d4 <read_conn+0x2c>
 801f7d0:	68fb      	ldr	r3, [r7, #12]
 801f7d2:	3338      	adds	r3, #56	@ 0x38
 801f7d4:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 801f7d6:	68bb      	ldr	r3, [r7, #8]
 801f7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7da:	685b      	ldr	r3, [r3, #4]
 801f7dc:	4618      	mov	r0, r3
 801f7de:	f003 f93b 	bl	8022a58 <mg_ntohl>
 801f7e2:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	331c      	adds	r3, #28
 801f7e8:	681b      	ldr	r3, [r3, #0]
 801f7ea:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 801f7ec:	68bb      	ldr	r3, [r7, #8]
 801f7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7f0:	7b5b      	ldrb	r3, [r3, #13]
 801f7f2:	f003 0301 	and.w	r3, r3, #1
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d070      	beq.n	801f8dc <read_conn+0x134>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 801f7fa:	2310      	movs	r3, #16
 801f7fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 801f800:	68bb      	ldr	r3, [r7, #8]
 801f802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f804:	685b      	ldr	r3, [r3, #4]
 801f806:	4618      	mov	r0, r3
 801f808:	f003 f926 	bl	8022a58 <mg_ntohl>
 801f80c:	4602      	mov	r2, r0
 801f80e:	68bb      	ldr	r3, [r7, #8]
 801f810:	68db      	ldr	r3, [r3, #12]
 801f812:	4413      	add	r3, r2
 801f814:	1c5a      	adds	r2, r3, #1
 801f816:	6a3b      	ldr	r3, [r7, #32]
 801f818:	605a      	str	r2, [r3, #4]
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801f820:	f003 0310 	and.w	r3, r3, #16
 801f824:	b2db      	uxtb	r3, r3
 801f826:	2b00      	cmp	r3, #0
 801f828:	d01e      	beq.n	801f868 <read_conn+0xc0>
 801f82a:	6a3b      	ldr	r3, [r7, #32]
 801f82c:	7f9b      	ldrb	r3, [r3, #30]
 801f82e:	2b04      	cmp	r3, #4
 801f830:	d11a      	bne.n	801f868 <read_conn+0xc0>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f832:	6a3b      	ldr	r3, [r7, #32]
 801f834:	681c      	ldr	r4, [r3, #0]
 801f836:	68bb      	ldr	r3, [r7, #8]
 801f838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f83a:	689b      	ldr	r3, [r3, #8]
 801f83c:	4618      	mov	r0, r3
 801f83e:	f003 f90b 	bl	8022a58 <mg_ntohl>
 801f842:	4603      	mov	r3, r0
 801f844:	429c      	cmp	r4, r3
 801f846:	d105      	bne.n	801f854 <read_conn+0xac>
        s->seq++;                               // Yes. Increment our SEQ
 801f848:	6a3b      	ldr	r3, [r7, #32]
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	1c5a      	adds	r2, r3, #1
 801f84e:	6a3b      	ldr	r3, [r7, #32]
 801f850:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f852:	e01a      	b.n	801f88a <read_conn+0xe2>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 801f854:	68bb      	ldr	r3, [r7, #8]
 801f856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f858:	689b      	ldr	r3, [r3, #8]
 801f85a:	4618      	mov	r0, r3
 801f85c:	f003 f8fc 	bl	8022a58 <mg_ntohl>
 801f860:	4602      	mov	r2, r0
 801f862:	6a3b      	ldr	r3, [r7, #32]
 801f864:	601a      	str	r2, [r3, #0]
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 801f866:	e010      	b.n	801f88a <read_conn+0xe2>
      }
    } else {
      flags |= TH_FIN;
 801f868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f86c:	f043 0301 	orr.w	r3, r3, #1
 801f870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 801f874:	68fa      	ldr	r2, [r7, #12]
 801f876:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801f87a:	f043 0310 	orr.w	r3, r3, #16
 801f87e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 801f882:	2104      	movs	r1, #4
 801f884:	68f8      	ldr	r0, [r7, #12]
 801f886:	f7fe facd 	bl	801de24 <settmout>
    }
    tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, flags,
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	685b      	ldr	r3, [r3, #4]
 801f88e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f890:	6a3b      	ldr	r3, [r7, #32]
 801f892:	f103 0818 	add.w	r8, r3, #24
 801f896:	693b      	ldr	r3, [r7, #16]
 801f898:	607b      	str	r3, [r7, #4]
 801f89a:	68fb      	ldr	r3, [r7, #12]
 801f89c:	8b1c      	ldrh	r4, [r3, #24]
 801f89e:	68fb      	ldr	r3, [r7, #12]
 801f8a0:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f8a2:	6a3b      	ldr	r3, [r7, #32]
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	f003 f8d6 	bl	8022a58 <mg_ntohl>
 801f8ac:	6038      	str	r0, [r7, #0]
 801f8ae:	6a3b      	ldr	r3, [r7, #32]
 801f8b0:	685b      	ldr	r3, [r3, #4]
 801f8b2:	4618      	mov	r0, r3
 801f8b4:	f003 f8d0 	bl	8022a58 <mg_ntohl>
 801f8b8:	4602      	mov	r2, r0
 801f8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801f8be:	2100      	movs	r1, #0
 801f8c0:	9105      	str	r1, [sp, #20]
 801f8c2:	4990      	ldr	r1, [pc, #576]	@ (801fb04 <read_conn+0x35c>)
 801f8c4:	9104      	str	r1, [sp, #16]
 801f8c6:	9203      	str	r2, [sp, #12]
 801f8c8:	6839      	ldr	r1, [r7, #0]
 801f8ca:	9102      	str	r1, [sp, #8]
 801f8cc:	9501      	str	r5, [sp, #4]
 801f8ce:	9400      	str	r4, [sp, #0]
 801f8d0:	687a      	ldr	r2, [r7, #4]
 801f8d2:	4641      	mov	r1, r8
 801f8d4:	4630      	mov	r0, r6
 801f8d6:	f7ff fc63 	bl	801f1a0 <tx_tcp>
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 801f8da:	e173      	b.n	801fbc4 <read_conn+0x41c>
  } else if (pkt->pay.len == 0) {
 801f8dc:	68bb      	ldr	r3, [r7, #8]
 801f8de:	68db      	ldr	r3, [r3, #12]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	f000 816f 	beq.w	801fbc4 <read_conn+0x41c>
  } else if (seq != s->ack) {
 801f8e6:	6a3b      	ldr	r3, [r7, #32]
 801f8e8:	685b      	ldr	r3, [r3, #4]
 801f8ea:	69ba      	ldr	r2, [r7, #24]
 801f8ec:	429a      	cmp	r2, r3
 801f8ee:	d059      	beq.n	801f9a4 <read_conn+0x1fc>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801f8f0:	68bb      	ldr	r3, [r7, #8]
 801f8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f8f4:	685b      	ldr	r3, [r3, #4]
 801f8f6:	4618      	mov	r0, r3
 801f8f8:	f003 f8ae 	bl	8022a58 <mg_ntohl>
 801f8fc:	4602      	mov	r2, r0
 801f8fe:	68bb      	ldr	r3, [r7, #8]
 801f900:	68db      	ldr	r3, [r3, #12]
 801f902:	4413      	add	r3, r2
 801f904:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 801f906:	6a3b      	ldr	r3, [r7, #32]
 801f908:	685b      	ldr	r3, [r3, #4]
 801f90a:	697a      	ldr	r2, [r7, #20]
 801f90c:	429a      	cmp	r2, r3
 801f90e:	d10f      	bne.n	801f930 <read_conn+0x188>
      MG_VERBOSE(("ignoring duplicate pkt"));
 801f910:	4b7d      	ldr	r3, [pc, #500]	@ (801fb08 <read_conn+0x360>)
 801f912:	681b      	ldr	r3, [r3, #0]
 801f914:	2b03      	cmp	r3, #3
 801f916:	f340 8155 	ble.w	801fbc4 <read_conn+0x41c>
 801f91a:	4b7c      	ldr	r3, [pc, #496]	@ (801fb0c <read_conn+0x364>)
 801f91c:	f241 52da 	movw	r2, #5594	@ 0x15da
 801f920:	497b      	ldr	r1, [pc, #492]	@ (801fb10 <read_conn+0x368>)
 801f922:	2004      	movs	r0, #4
 801f924:	f7fb fc0a 	bl	801b13c <mg_log_prefix>
 801f928:	487a      	ldr	r0, [pc, #488]	@ (801fb14 <read_conn+0x36c>)
 801f92a:	f7fb fc57 	bl	801b1dc <mg_log>
}
 801f92e:	e149      	b.n	801fbc4 <read_conn+0x41c>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 801f930:	4b75      	ldr	r3, [pc, #468]	@ (801fb08 <read_conn+0x360>)
 801f932:	681b      	ldr	r3, [r3, #0]
 801f934:	2b03      	cmp	r3, #3
 801f936:	dd0d      	ble.n	801f954 <read_conn+0x1ac>
 801f938:	4b74      	ldr	r3, [pc, #464]	@ (801fb0c <read_conn+0x364>)
 801f93a:	f241 52dc 	movw	r2, #5596	@ 0x15dc
 801f93e:	4974      	ldr	r1, [pc, #464]	@ (801fb10 <read_conn+0x368>)
 801f940:	2004      	movs	r0, #4
 801f942:	f7fb fbfb 	bl	801b13c <mg_log_prefix>
 801f946:	6a3b      	ldr	r3, [r7, #32]
 801f948:	685a      	ldr	r2, [r3, #4]
 801f94a:	697b      	ldr	r3, [r7, #20]
 801f94c:	69b9      	ldr	r1, [r7, #24]
 801f94e:	4872      	ldr	r0, [pc, #456]	@ (801fb18 <read_conn+0x370>)
 801f950:	f7fb fc44 	bl	801b1dc <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801f954:	68fb      	ldr	r3, [r7, #12]
 801f956:	685b      	ldr	r3, [r3, #4]
 801f958:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801f95a:	6a3b      	ldr	r3, [r7, #32]
 801f95c:	f103 0818 	add.w	r8, r3, #24
 801f960:	693b      	ldr	r3, [r7, #16]
 801f962:	607b      	str	r3, [r7, #4]
 801f964:	68fb      	ldr	r3, [r7, #12]
 801f966:	8b1c      	ldrh	r4, [r3, #24]
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801f96c:	6a3b      	ldr	r3, [r7, #32]
 801f96e:	681b      	ldr	r3, [r3, #0]
 801f970:	4618      	mov	r0, r3
 801f972:	f003 f871 	bl	8022a58 <mg_ntohl>
 801f976:	6038      	str	r0, [r7, #0]
 801f978:	6a3b      	ldr	r3, [r7, #32]
 801f97a:	685b      	ldr	r3, [r3, #4]
 801f97c:	4618      	mov	r0, r3
 801f97e:	f003 f86b 	bl	8022a58 <mg_ntohl>
 801f982:	4603      	mov	r3, r0
 801f984:	2200      	movs	r2, #0
 801f986:	9205      	str	r2, [sp, #20]
 801f988:	4a5e      	ldr	r2, [pc, #376]	@ (801fb04 <read_conn+0x35c>)
 801f98a:	9204      	str	r2, [sp, #16]
 801f98c:	9303      	str	r3, [sp, #12]
 801f98e:	6839      	ldr	r1, [r7, #0]
 801f990:	9102      	str	r1, [sp, #8]
 801f992:	9501      	str	r5, [sp, #4]
 801f994:	9400      	str	r4, [sp, #0]
 801f996:	2310      	movs	r3, #16
 801f998:	687a      	ldr	r2, [r7, #4]
 801f99a:	4641      	mov	r1, r8
 801f99c:	4630      	mov	r0, r6
 801f99e:	f7ff fbff 	bl	801f1a0 <tx_tcp>
}
 801f9a2:	e10f      	b.n	801fbc4 <read_conn+0x41c>
  } else if (io->size - io->len < pkt->pay.len &&
 801f9a4:	69fb      	ldr	r3, [r7, #28]
 801f9a6:	685a      	ldr	r2, [r3, #4]
 801f9a8:	69fb      	ldr	r3, [r7, #28]
 801f9aa:	689b      	ldr	r3, [r3, #8]
 801f9ac:	1ad2      	subs	r2, r2, r3
 801f9ae:	68bb      	ldr	r3, [r7, #8]
 801f9b0:	68db      	ldr	r3, [r3, #12]
 801f9b2:	429a      	cmp	r2, r3
 801f9b4:	d210      	bcs.n	801f9d8 <read_conn+0x230>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801f9b6:	69fb      	ldr	r3, [r7, #28]
 801f9b8:	689a      	ldr	r2, [r3, #8]
 801f9ba:	68bb      	ldr	r3, [r7, #8]
 801f9bc:	68db      	ldr	r3, [r3, #12]
 801f9be:	4413      	add	r3, r2
 801f9c0:	4619      	mov	r1, r3
 801f9c2:	69f8      	ldr	r0, [r7, #28]
 801f9c4:	f7fa fbca 	bl	801a15c <mg_iobuf_resize>
 801f9c8:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d104      	bne.n	801f9d8 <read_conn+0x230>
    mg_error(c, "oom");
 801f9ce:	4953      	ldr	r1, [pc, #332]	@ (801fb1c <read_conn+0x374>)
 801f9d0:	68f8      	ldr	r0, [r7, #12]
 801f9d2:	f7f5 ffed 	bl	80159b0 <mg_error>
 801f9d6:	e0f5      	b.n	801fbc4 <read_conn+0x41c>
    memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 801f9d8:	69fb      	ldr	r3, [r7, #28]
 801f9da:	681a      	ldr	r2, [r3, #0]
 801f9dc:	69fb      	ldr	r3, [r7, #28]
 801f9de:	689b      	ldr	r3, [r3, #8]
 801f9e0:	18d0      	adds	r0, r2, r3
 801f9e2:	68bb      	ldr	r3, [r7, #8]
 801f9e4:	6899      	ldr	r1, [r3, #8]
 801f9e6:	68bb      	ldr	r3, [r7, #8]
 801f9e8:	68db      	ldr	r3, [r3, #12]
 801f9ea:	461a      	mov	r2, r3
 801f9ec:	f007 fbec 	bl	80271c8 <memcpy>
    io->len += pkt->pay.len;
 801f9f0:	69fb      	ldr	r3, [r7, #28]
 801f9f2:	689a      	ldr	r2, [r3, #8]
 801f9f4:	68bb      	ldr	r3, [r7, #8]
 801f9f6:	68db      	ldr	r3, [r3, #12]
 801f9f8:	441a      	add	r2, r3
 801f9fa:	69fb      	ldr	r3, [r7, #28]
 801f9fc:	609a      	str	r2, [r3, #8]
    MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 801f9fe:	4b42      	ldr	r3, [pc, #264]	@ (801fb08 <read_conn+0x360>)
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	2b03      	cmp	r3, #3
 801fa04:	dd15      	ble.n	801fa32 <read_conn+0x28a>
 801fa06:	4b41      	ldr	r3, [pc, #260]	@ (801fb0c <read_conn+0x364>)
 801fa08:	f241 52ed 	movw	r2, #5613	@ 0x15ed
 801fa0c:	4940      	ldr	r1, [pc, #256]	@ (801fb10 <read_conn+0x368>)
 801fa0e:	2004      	movs	r0, #4
 801fa10:	f7fb fb94 	bl	801b13c <mg_log_prefix>
 801fa14:	68fb      	ldr	r3, [r7, #12]
 801fa16:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801fa18:	68bb      	ldr	r3, [r7, #8]
 801fa1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa1c:	685b      	ldr	r3, [r3, #4]
 801fa1e:	4618      	mov	r0, r3
 801fa20:	f003 f81a 	bl	8022a58 <mg_ntohl>
 801fa24:	4602      	mov	r2, r0
 801fa26:	6a3b      	ldr	r3, [r7, #32]
 801fa28:	685b      	ldr	r3, [r3, #4]
 801fa2a:	4621      	mov	r1, r4
 801fa2c:	483c      	ldr	r0, [pc, #240]	@ (801fb20 <read_conn+0x378>)
 801fa2e:	f7fb fbd5 	bl	801b1dc <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 801fa32:	68bb      	ldr	r3, [r7, #8]
 801fa34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa36:	685b      	ldr	r3, [r3, #4]
 801fa38:	4618      	mov	r0, r3
 801fa3a:	f003 f80d 	bl	8022a58 <mg_ntohl>
 801fa3e:	4602      	mov	r2, r0
 801fa40:	68bb      	ldr	r3, [r7, #8]
 801fa42:	68db      	ldr	r3, [r3, #12]
 801fa44:	441a      	add	r2, r3
 801fa46:	6a3b      	ldr	r3, [r7, #32]
 801fa48:	605a      	str	r2, [r3, #4]
    s->unacked += pkt->pay.len;
 801fa4a:	6a3b      	ldr	r3, [r7, #32]
 801fa4c:	695a      	ldr	r2, [r3, #20]
 801fa4e:	68bb      	ldr	r3, [r7, #8]
 801fa50:	68db      	ldr	r3, [r3, #12]
 801fa52:	441a      	add	r2, r3
 801fa54:	6a3b      	ldr	r3, [r7, #32]
 801fa56:	615a      	str	r2, [r3, #20]
    if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 801fa58:	6a3b      	ldr	r3, [r7, #32]
 801fa5a:	695b      	ldr	r3, [r3, #20]
 801fa5c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801fa60:	4293      	cmp	r3, r2
 801fa62:	d961      	bls.n	801fb28 <read_conn+0x380>
 801fa64:	6a3b      	ldr	r3, [r7, #32]
 801fa66:	691a      	ldr	r2, [r3, #16]
 801fa68:	6a3b      	ldr	r3, [r7, #32]
 801fa6a:	685b      	ldr	r3, [r3, #4]
 801fa6c:	429a      	cmp	r2, r3
 801fa6e:	d05b      	beq.n	801fb28 <read_conn+0x380>
      MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 801fa70:	4b25      	ldr	r3, [pc, #148]	@ (801fb08 <read_conn+0x360>)
 801fa72:	681b      	ldr	r3, [r3, #0]
 801fa74:	2b03      	cmp	r3, #3
 801fa76:	dd0e      	ble.n	801fa96 <read_conn+0x2ee>
 801fa78:	4b24      	ldr	r3, [pc, #144]	@ (801fb0c <read_conn+0x364>)
 801fa7a:	f241 52f4 	movw	r2, #5620	@ 0x15f4
 801fa7e:	4924      	ldr	r1, [pc, #144]	@ (801fb10 <read_conn+0x368>)
 801fa80:	2004      	movs	r0, #4
 801fa82:	f7fb fb5b 	bl	801b13c <mg_log_prefix>
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801fa8a:	6a3b      	ldr	r3, [r7, #32]
 801fa8c:	691b      	ldr	r3, [r3, #16]
 801fa8e:	461a      	mov	r2, r3
 801fa90:	4824      	ldr	r0, [pc, #144]	@ (801fb24 <read_conn+0x37c>)
 801fa92:	f7fb fba3 	bl	801b1dc <mg_log>
      tx_tcp((struct mg_tcpip_if *) c->mgr->priv, s->mac, rem_ip, TH_ACK,
 801fa96:	68fb      	ldr	r3, [r7, #12]
 801fa98:	685b      	ldr	r3, [r3, #4]
 801fa9a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 801fa9c:	6a3b      	ldr	r3, [r7, #32]
 801fa9e:	f103 0818 	add.w	r8, r3, #24
 801faa2:	693b      	ldr	r3, [r7, #16]
 801faa4:	607b      	str	r3, [r7, #4]
 801faa6:	68fb      	ldr	r3, [r7, #12]
 801faa8:	8b1c      	ldrh	r4, [r3, #24]
 801faaa:	68fb      	ldr	r3, [r7, #12]
 801faac:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801faae:	6a3b      	ldr	r3, [r7, #32]
 801fab0:	681b      	ldr	r3, [r3, #0]
 801fab2:	4618      	mov	r0, r3
 801fab4:	f002 ffd0 	bl	8022a58 <mg_ntohl>
 801fab8:	6038      	str	r0, [r7, #0]
 801faba:	6a3b      	ldr	r3, [r7, #32]
 801fabc:	685b      	ldr	r3, [r3, #4]
 801fabe:	4618      	mov	r0, r3
 801fac0:	f002 ffca 	bl	8022a58 <mg_ntohl>
 801fac4:	4603      	mov	r3, r0
 801fac6:	2200      	movs	r2, #0
 801fac8:	9205      	str	r2, [sp, #20]
 801faca:	2200      	movs	r2, #0
 801facc:	9204      	str	r2, [sp, #16]
 801face:	9303      	str	r3, [sp, #12]
 801fad0:	6839      	ldr	r1, [r7, #0]
 801fad2:	9102      	str	r1, [sp, #8]
 801fad4:	9501      	str	r5, [sp, #4]
 801fad6:	9400      	str	r4, [sp, #0]
 801fad8:	2310      	movs	r3, #16
 801fada:	687a      	ldr	r2, [r7, #4]
 801fadc:	4641      	mov	r1, r8
 801fade:	4630      	mov	r0, r6
 801fae0:	f7ff fb5e 	bl	801f1a0 <tx_tcp>
      s->unacked = 0;
 801fae4:	6a3b      	ldr	r3, [r7, #32]
 801fae6:	2200      	movs	r2, #0
 801fae8:	615a      	str	r2, [r3, #20]
      s->acked = s->ack;
 801faea:	6a3b      	ldr	r3, [r7, #32]
 801faec:	685a      	ldr	r2, [r3, #4]
 801faee:	6a3b      	ldr	r3, [r7, #32]
 801faf0:	611a      	str	r2, [r3, #16]
      if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 801faf2:	6a3b      	ldr	r3, [r7, #32]
 801faf4:	7f9b      	ldrb	r3, [r3, #30]
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	d01e      	beq.n	801fb38 <read_conn+0x390>
 801fafa:	2100      	movs	r1, #0
 801fafc:	68f8      	ldr	r0, [r7, #12]
 801fafe:	f7fe f991 	bl	801de24 <settmout>
 801fb02:	e019      	b.n	801fb38 <read_conn+0x390>
 801fb04:	08031b64 	.word	0x08031b64
 801fb08:	20000298 	.word	0x20000298
 801fb0c:	080345e0 	.word	0x080345e0
 801fb10:	08031484 	.word	0x08031484
 801fb14:	08032e08 	.word	0x08032e08
 801fb18:	08032e20 	.word	0x08032e20
 801fb1c:	08032d68 	.word	0x08032d68
 801fb20:	08032e38 	.word	0x08032e38
 801fb24:	08032e4c 	.word	0x08032e4c
      if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 801fb28:	6a3b      	ldr	r3, [r7, #32]
 801fb2a:	7f9b      	ldrb	r3, [r3, #30]
 801fb2c:	2b01      	cmp	r3, #1
 801fb2e:	d003      	beq.n	801fb38 <read_conn+0x390>
 801fb30:	2101      	movs	r1, #1
 801fb32:	68f8      	ldr	r0, [r7, #12]
 801fb34:	f7fe f976 	bl	801de24 <settmout>
    if (c->is_tls && c->is_tls_hs) {
 801fb38:	68fb      	ldr	r3, [r7, #12]
 801fb3a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fb3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fb42:	b2db      	uxtb	r3, r3
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d00b      	beq.n	801fb60 <read_conn+0x3b8>
 801fb48:	68fb      	ldr	r3, [r7, #12]
 801fb4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fb4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801fb52:	b2db      	uxtb	r3, r3
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d003      	beq.n	801fb60 <read_conn+0x3b8>
      mg_tls_handshake(c);
 801fb58:	68f8      	ldr	r0, [r7, #12]
 801fb5a:	f002 fd41 	bl	80225e0 <mg_tls_handshake>
 801fb5e:	e031      	b.n	801fbc4 <read_conn+0x41c>
    } else if (c->is_tls) {
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fb66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fb6a:	b2db      	uxtb	r3, r3
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d021      	beq.n	801fbb4 <read_conn+0x40c>
      io = &c->recv;
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	3338      	adds	r3, #56	@ 0x38
 801fb74:	61fb      	str	r3, [r7, #28]
      if (io->size - io->len < pkt->pay.len &&
 801fb76:	69fb      	ldr	r3, [r7, #28]
 801fb78:	685a      	ldr	r2, [r3, #4]
 801fb7a:	69fb      	ldr	r3, [r7, #28]
 801fb7c:	689b      	ldr	r3, [r3, #8]
 801fb7e:	1ad2      	subs	r2, r2, r3
 801fb80:	68bb      	ldr	r3, [r7, #8]
 801fb82:	68db      	ldr	r3, [r3, #12]
 801fb84:	429a      	cmp	r2, r3
 801fb86:	d210      	bcs.n	801fbaa <read_conn+0x402>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801fb88:	69fb      	ldr	r3, [r7, #28]
 801fb8a:	689a      	ldr	r2, [r3, #8]
 801fb8c:	68bb      	ldr	r3, [r7, #8]
 801fb8e:	68db      	ldr	r3, [r3, #12]
 801fb90:	4413      	add	r3, r2
 801fb92:	4619      	mov	r1, r3
 801fb94:	69f8      	ldr	r0, [r7, #28]
 801fb96:	f7fa fae1 	bl	801a15c <mg_iobuf_resize>
 801fb9a:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	d104      	bne.n	801fbaa <read_conn+0x402>
        mg_error(c, "oom");
 801fba0:	490b      	ldr	r1, [pc, #44]	@ (801fbd0 <read_conn+0x428>)
 801fba2:	68f8      	ldr	r0, [r7, #12]
 801fba4:	f7f5 ff04 	bl	80159b0 <mg_error>
 801fba8:	e00c      	b.n	801fbc4 <read_conn+0x41c>
        handle_tls_recv(c, io);
 801fbaa:	69f9      	ldr	r1, [r7, #28]
 801fbac:	68f8      	ldr	r0, [r7, #12]
 801fbae:	f7ff fdc7 	bl	801f740 <handle_tls_recv>
}
 801fbb2:	e007      	b.n	801fbc4 <read_conn+0x41c>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 801fbb4:	68bb      	ldr	r3, [r7, #8]
 801fbb6:	330c      	adds	r3, #12
 801fbb8:	461a      	mov	r2, r3
 801fbba:	2107      	movs	r1, #7
 801fbbc:	68f8      	ldr	r0, [r7, #12]
 801fbbe:	f7f5 fed7 	bl	8015970 <mg_call>
}
 801fbc2:	e7ff      	b.n	801fbc4 <read_conn+0x41c>
 801fbc4:	bf00      	nop
 801fbc6:	3728      	adds	r7, #40	@ 0x28
 801fbc8:	46bd      	mov	sp, r7
 801fbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fbce:	bf00      	nop
 801fbd0:	08032d68 	.word	0x08032d68

0801fbd4 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801fbd4:	b590      	push	{r4, r7, lr}
 801fbd6:	b089      	sub	sp, #36	@ 0x24
 801fbd8:	af02      	add	r7, sp, #8
 801fbda:	6078      	str	r0, [r7, #4]
 801fbdc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801fbde:	687b      	ldr	r3, [r7, #4]
 801fbe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fbe2:	2200      	movs	r2, #0
 801fbe4:	6839      	ldr	r1, [r7, #0]
 801fbe6:	4618      	mov	r0, r3
 801fbe8:	f7fe fcba 	bl	801e560 <getpeer>
 801fbec:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 801fbee:	697b      	ldr	r3, [r7, #20]
 801fbf0:	2b00      	cmp	r3, #0
 801fbf2:	d002      	beq.n	801fbfa <rx_tcp+0x26>
 801fbf4:	697b      	ldr	r3, [r7, #20]
 801fbf6:	33b0      	adds	r3, #176	@ 0xb0
 801fbf8:	e000      	b.n	801fbfc <rx_tcp+0x28>
 801fbfa:	2300      	movs	r3, #0
 801fbfc:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 801fbfe:	697b      	ldr	r3, [r7, #20]
 801fc00:	2b00      	cmp	r3, #0
 801fc02:	d048      	beq.n	801fc96 <rx_tcp+0xc2>
 801fc04:	697b      	ldr	r3, [r7, #20]
 801fc06:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fc0a:	f003 0320 	and.w	r3, r3, #32
 801fc0e:	b2db      	uxtb	r3, r3
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	d040      	beq.n	801fc96 <rx_tcp+0xc2>
 801fc14:	683b      	ldr	r3, [r7, #0]
 801fc16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc18:	7b5b      	ldrb	r3, [r3, #13]
 801fc1a:	2b12      	cmp	r3, #18
 801fc1c:	d13b      	bne.n	801fc96 <rx_tcp+0xc2>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 801fc1e:	683b      	ldr	r3, [r7, #0]
 801fc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc22:	689b      	ldr	r3, [r3, #8]
 801fc24:	4618      	mov	r0, r3
 801fc26:	f002 ff17 	bl	8022a58 <mg_ntohl>
 801fc2a:	4602      	mov	r2, r0
 801fc2c:	693b      	ldr	r3, [r7, #16]
 801fc2e:	601a      	str	r2, [r3, #0]
 801fc30:	683b      	ldr	r3, [r7, #0]
 801fc32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc34:	685b      	ldr	r3, [r3, #4]
 801fc36:	4618      	mov	r0, r3
 801fc38:	f002 ff0e 	bl	8022a58 <mg_ntohl>
 801fc3c:	4603      	mov	r3, r0
 801fc3e:	1c5a      	adds	r2, r3, #1
 801fc40:	693b      	ldr	r3, [r7, #16]
 801fc42:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 801fc44:	683b      	ldr	r3, [r7, #0]
 801fc46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc48:	689b      	ldr	r3, [r3, #8]
 801fc4a:	2200      	movs	r2, #0
 801fc4c:	9201      	str	r2, [sp, #4]
 801fc4e:	2200      	movs	r2, #0
 801fc50:	9200      	str	r2, [sp, #0]
 801fc52:	2210      	movs	r2, #16
 801fc54:	6839      	ldr	r1, [r7, #0]
 801fc56:	6878      	ldr	r0, [r7, #4]
 801fc58:	f7ff fb6e 	bl	801f338 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 801fc5c:	697a      	ldr	r2, [r7, #20]
 801fc5e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801fc62:	f36f 1345 	bfc	r3, #5, #1
 801fc66:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 801fc6a:	2100      	movs	r1, #0
 801fc6c:	6978      	ldr	r0, [r7, #20]
 801fc6e:	f7fe f8d9 	bl	801de24 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 801fc72:	2200      	movs	r2, #0
 801fc74:	2104      	movs	r1, #4
 801fc76:	6978      	ldr	r0, [r7, #20]
 801fc78:	f7f5 fe7a 	bl	8015970 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 801fc7c:	697b      	ldr	r3, [r7, #20]
 801fc7e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fc82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801fc86:	b2db      	uxtb	r3, r3
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	f000 80cd 	beq.w	801fe28 <rx_tcp+0x254>
 801fc8e:	6978      	ldr	r0, [r7, #20]
 801fc90:	f002 fca6 	bl	80225e0 <mg_tls_handshake>
 801fc94:	e0c8      	b.n	801fe28 <rx_tcp+0x254>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 801fc96:	697b      	ldr	r3, [r7, #20]
 801fc98:	2b00      	cmp	r3, #0
 801fc9a:	d019      	beq.n	801fcd0 <rx_tcp+0xfc>
 801fc9c:	697b      	ldr	r3, [r7, #20]
 801fc9e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fca2:	f003 0320 	and.w	r3, r3, #32
 801fca6:	b2db      	uxtb	r3, r3
 801fca8:	2b00      	cmp	r3, #0
 801fcaa:	d011      	beq.n	801fcd0 <rx_tcp+0xfc>
 801fcac:	683b      	ldr	r3, [r7, #0]
 801fcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcb0:	7b5b      	ldrb	r3, [r3, #13]
 801fcb2:	2b10      	cmp	r3, #16
 801fcb4:	d00c      	beq.n	801fcd0 <rx_tcp+0xfc>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fcb6:	683b      	ldr	r3, [r7, #0]
 801fcb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcba:	689b      	ldr	r3, [r3, #8]
 801fcbc:	2200      	movs	r2, #0
 801fcbe:	9201      	str	r2, [sp, #4]
 801fcc0:	2200      	movs	r2, #0
 801fcc2:	9200      	str	r2, [sp, #0]
 801fcc4:	2214      	movs	r2, #20
 801fcc6:	6839      	ldr	r1, [r7, #0]
 801fcc8:	6878      	ldr	r0, [r7, #4]
 801fcca:	f7ff fb35 	bl	801f338 <tx_tcp_pkt>
 801fcce:	e0ab      	b.n	801fe28 <rx_tcp+0x254>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 801fcd0:	697b      	ldr	r3, [r7, #20]
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d00b      	beq.n	801fcee <rx_tcp+0x11a>
 801fcd6:	683b      	ldr	r3, [r7, #0]
 801fcd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcda:	7b5b      	ldrb	r3, [r3, #13]
 801fcdc:	f003 0304 	and.w	r3, r3, #4
 801fce0:	2b00      	cmp	r3, #0
 801fce2:	d004      	beq.n	801fcee <rx_tcp+0x11a>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801fce4:	4952      	ldr	r1, [pc, #328]	@ (801fe30 <rx_tcp+0x25c>)
 801fce6:	6978      	ldr	r0, [r7, #20]
 801fce8:	f7f5 fe62 	bl	80159b0 <mg_error>
 801fcec:	e09c      	b.n	801fe28 <rx_tcp+0x254>
  } else if (c != NULL) {
 801fcee:	697b      	ldr	r3, [r7, #20]
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	d00f      	beq.n	801fd14 <rx_tcp+0x140>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 801fcf4:	693b      	ldr	r3, [r7, #16]
 801fcf6:	2200      	movs	r2, #0
 801fcf8:	77da      	strb	r2, [r3, #31]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 801fcfa:	693b      	ldr	r3, [r7, #16]
 801fcfc:	7f9b      	ldrb	r3, [r3, #30]
 801fcfe:	2b00      	cmp	r3, #0
 801fd00:	d103      	bne.n	801fd0a <rx_tcp+0x136>
      settmout(c,
 801fd02:	2100      	movs	r1, #0
 801fd04:	6978      	ldr	r0, [r7, #20]
 801fd06:	f7fe f88d 	bl	801de24 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 801fd0a:	6839      	ldr	r1, [r7, #0]
 801fd0c:	6978      	ldr	r0, [r7, #20]
 801fd0e:	f7ff fd4b 	bl	801f7a8 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 801fd12:	e089      	b.n	801fe28 <rx_tcp+0x254>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fd18:	2201      	movs	r2, #1
 801fd1a:	6839      	ldr	r1, [r7, #0]
 801fd1c:	4618      	mov	r0, r3
 801fd1e:	f7fe fc1f 	bl	801e560 <getpeer>
 801fd22:	6178      	str	r0, [r7, #20]
 801fd24:	697b      	ldr	r3, [r7, #20]
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	d10c      	bne.n	801fd44 <rx_tcp+0x170>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fd2a:	683b      	ldr	r3, [r7, #0]
 801fd2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd2e:	689b      	ldr	r3, [r3, #8]
 801fd30:	2200      	movs	r2, #0
 801fd32:	9201      	str	r2, [sp, #4]
 801fd34:	2200      	movs	r2, #0
 801fd36:	9200      	str	r2, [sp, #0]
 801fd38:	2214      	movs	r2, #20
 801fd3a:	6839      	ldr	r1, [r7, #0]
 801fd3c:	6878      	ldr	r0, [r7, #4]
 801fd3e:	f7ff fafb 	bl	801f338 <tx_tcp_pkt>
}
 801fd42:	e071      	b.n	801fe28 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_RST) {
 801fd44:	683b      	ldr	r3, [r7, #0]
 801fd46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd48:	7b5b      	ldrb	r3, [r3, #13]
 801fd4a:	f003 0304 	and.w	r3, r3, #4
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	d00c      	beq.n	801fd6c <rx_tcp+0x198>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 801fd52:	697b      	ldr	r3, [r7, #20]
 801fd54:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fd58:	f003 0304 	and.w	r3, r3, #4
 801fd5c:	b2db      	uxtb	r3, r3
 801fd5e:	2b00      	cmp	r3, #0
 801fd60:	d062      	beq.n	801fe28 <rx_tcp+0x254>
 801fd62:	4933      	ldr	r1, [pc, #204]	@ (801fe30 <rx_tcp+0x25c>)
 801fd64:	6978      	ldr	r0, [r7, #20]
 801fd66:	f7f5 fe23 	bl	80159b0 <mg_error>
}
 801fd6a:	e05d      	b.n	801fe28 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_SYN) {
 801fd6c:	683b      	ldr	r3, [r7, #0]
 801fd6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd70:	7b5b      	ldrb	r3, [r3, #13]
 801fd72:	f003 0302 	and.w	r3, r3, #2
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	d016      	beq.n	801fda8 <rx_tcp+0x1d4>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 801fd7a:	683b      	ldr	r3, [r7, #0]
 801fd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd7e:	881b      	ldrh	r3, [r3, #0]
 801fd80:	b29b      	uxth	r3, r3
 801fd82:	4618      	mov	r0, r3
 801fd84:	f002 fe81 	bl	8022a8a <mg_ntohs>
 801fd88:	4603      	mov	r3, r0
 801fd8a:	4618      	mov	r0, r3
 801fd8c:	f002 fe64 	bl	8022a58 <mg_ntohl>
 801fd90:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 801fd92:	2300      	movs	r3, #0
 801fd94:	9301      	str	r3, [sp, #4]
 801fd96:	2300      	movs	r3, #0
 801fd98:	9300      	str	r3, [sp, #0]
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	2212      	movs	r2, #18
 801fd9e:	6839      	ldr	r1, [r7, #0]
 801fda0:	6878      	ldr	r0, [r7, #4]
 801fda2:	f7ff fac9 	bl	801f338 <tx_tcp_pkt>
}
 801fda6:	e03f      	b.n	801fe28 <rx_tcp+0x254>
  } else if (pkt->tcp->flags & TH_FIN) {
 801fda8:	683b      	ldr	r3, [r7, #0]
 801fdaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fdac:	7b5b      	ldrb	r3, [r3, #13]
 801fdae:	f003 0301 	and.w	r3, r3, #1
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	d00c      	beq.n	801fdd0 <rx_tcp+0x1fc>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fdb6:	683b      	ldr	r3, [r7, #0]
 801fdb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fdba:	689b      	ldr	r3, [r3, #8]
 801fdbc:	2200      	movs	r2, #0
 801fdbe:	9201      	str	r2, [sp, #4]
 801fdc0:	2200      	movs	r2, #0
 801fdc2:	9200      	str	r2, [sp, #0]
 801fdc4:	2211      	movs	r2, #17
 801fdc6:	6839      	ldr	r1, [r7, #0]
 801fdc8:	6878      	ldr	r0, [r7, #4]
 801fdca:	f7ff fab5 	bl	801f338 <tx_tcp_pkt>
}
 801fdce:	e02b      	b.n	801fe28 <rx_tcp+0x254>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 801fdd0:	683b      	ldr	r3, [r7, #0]
 801fdd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fdd4:	689b      	ldr	r3, [r3, #8]
 801fdd6:	4618      	mov	r0, r3
 801fdd8:	f002 fe3e 	bl	8022a58 <mg_ntohl>
 801fddc:	4604      	mov	r4, r0
 801fdde:	683b      	ldr	r3, [r7, #0]
 801fde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fde2:	881b      	ldrh	r3, [r3, #0]
 801fde4:	b29b      	uxth	r3, r3
 801fde6:	4618      	mov	r0, r3
 801fde8:	f002 fe4f 	bl	8022a8a <mg_ntohs>
 801fdec:	4603      	mov	r3, r0
 801fdee:	3301      	adds	r3, #1
 801fdf0:	429c      	cmp	r4, r3
 801fdf2:	d104      	bne.n	801fdfe <rx_tcp+0x22a>
    accept_conn(c, pkt);
 801fdf4:	6839      	ldr	r1, [r7, #0]
 801fdf6:	6978      	ldr	r0, [r7, #20]
 801fdf8:	f7ff fae4 	bl	801f3c4 <accept_conn>
}
 801fdfc:	e014      	b.n	801fe28 <rx_tcp+0x254>
  } else if (!c->is_accepted) {  // no peer
 801fdfe:	697b      	ldr	r3, [r7, #20]
 801fe00:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fe04:	f003 0304 	and.w	r3, r3, #4
 801fe08:	b2db      	uxtb	r3, r3
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d10c      	bne.n	801fe28 <rx_tcp+0x254>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 801fe0e:	683b      	ldr	r3, [r7, #0]
 801fe10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fe12:	689b      	ldr	r3, [r3, #8]
 801fe14:	2200      	movs	r2, #0
 801fe16:	9201      	str	r2, [sp, #4]
 801fe18:	2200      	movs	r2, #0
 801fe1a:	9200      	str	r2, [sp, #0]
 801fe1c:	2214      	movs	r2, #20
 801fe1e:	6839      	ldr	r1, [r7, #0]
 801fe20:	6878      	ldr	r0, [r7, #4]
 801fe22:	f7ff fa89 	bl	801f338 <tx_tcp_pkt>
}
 801fe26:	e7ff      	b.n	801fe28 <rx_tcp+0x254>
 801fe28:	bf00      	nop
 801fe2a:	371c      	adds	r7, #28
 801fe2c:	46bd      	mov	sp, r7
 801fe2e:	bd90      	pop	{r4, r7, pc}
 801fe30:	08032e5c 	.word	0x08032e5c

0801fe34 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 801fe34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe36:	b089      	sub	sp, #36	@ 0x24
 801fe38:	af04      	add	r7, sp, #16
 801fe3a:	6078      	str	r0, [r7, #4]
 801fe3c:	6039      	str	r1, [r7, #0]
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801fe3e:	683b      	ldr	r3, [r7, #0]
 801fe40:	69db      	ldr	r3, [r3, #28]
 801fe42:	88db      	ldrh	r3, [r3, #6]
 801fe44:	b29b      	uxth	r3, r3
 801fe46:	f003 0320 	and.w	r3, r3, #32
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	d109      	bne.n	801fe62 <rx_ip+0x2e>
 801fe4e:	683b      	ldr	r3, [r7, #0]
 801fe50:	69db      	ldr	r3, [r3, #28]
 801fe52:	88db      	ldrh	r3, [r3, #6]
 801fe54:	b29b      	uxth	r3, r3
 801fe56:	461a      	mov	r2, r3
 801fe58:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 801fe5c:	4013      	ands	r3, r2
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d026      	beq.n	801feb0 <rx_ip+0x7c>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 801fe62:	683b      	ldr	r3, [r7, #0]
 801fe64:	69db      	ldr	r3, [r3, #28]
 801fe66:	7a5b      	ldrb	r3, [r3, #9]
 801fe68:	2b11      	cmp	r3, #17
 801fe6a:	d105      	bne.n	801fe78 <rx_ip+0x44>
 801fe6c:	683b      	ldr	r3, [r7, #0]
 801fe6e:	69db      	ldr	r3, [r3, #28]
 801fe70:	f103 0214 	add.w	r2, r3, #20
 801fe74:	683b      	ldr	r3, [r7, #0]
 801fe76:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801fe78:	683b      	ldr	r3, [r7, #0]
 801fe7a:	69db      	ldr	r3, [r3, #28]
 801fe7c:	7a5b      	ldrb	r3, [r3, #9]
 801fe7e:	2b06      	cmp	r3, #6
 801fe80:	d105      	bne.n	801fe8e <rx_ip+0x5a>
 801fe82:	683b      	ldr	r3, [r7, #0]
 801fe84:	69db      	ldr	r3, [r3, #28]
 801fe86:	f103 0214 	add.w	r2, r3, #20
 801fe8a:	683b      	ldr	r3, [r7, #0]
 801fe8c:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fe92:	2200      	movs	r2, #0
 801fe94:	6839      	ldr	r1, [r7, #0]
 801fe96:	4618      	mov	r0, r3
 801fe98:	f7fe fb62 	bl	801e560 <getpeer>
 801fe9c:	60b8      	str	r0, [r7, #8]
    if (c) mg_error(c, "Received fragmented packet");
 801fe9e:	68bb      	ldr	r3, [r7, #8]
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	f000 811b 	beq.w	80200dc <rx_ip+0x2a8>
 801fea6:	4992      	ldr	r1, [pc, #584]	@ (80200f0 <rx_ip+0x2bc>)
 801fea8:	68b8      	ldr	r0, [r7, #8]
 801feaa:	f7f5 fd81 	bl	80159b0 <mg_error>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 801feae:	e115      	b.n	80200dc <rx_ip+0x2a8>
  } else if (pkt->ip->proto == 1) {
 801feb0:	683b      	ldr	r3, [r7, #0]
 801feb2:	69db      	ldr	r3, [r3, #28]
 801feb4:	7a5b      	ldrb	r3, [r3, #9]
 801feb6:	2b01      	cmp	r3, #1
 801feb8:	d116      	bne.n	801fee8 <rx_ip+0xb4>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 801feba:	683b      	ldr	r3, [r7, #0]
 801febc:	69db      	ldr	r3, [r3, #28]
 801febe:	f103 0214 	add.w	r2, r3, #20
 801fec2:	683b      	ldr	r3, [r7, #0]
 801fec4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801fec6:	683b      	ldr	r3, [r7, #0]
 801fec8:	68db      	ldr	r3, [r3, #12]
 801feca:	2b03      	cmp	r3, #3
 801fecc:	f240 8108 	bls.w	80200e0 <rx_ip+0x2ac>
    mkpay(pkt, pkt->icmp + 1);
 801fed0:	683b      	ldr	r3, [r7, #0]
 801fed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fed4:	3304      	adds	r3, #4
 801fed6:	4619      	mov	r1, r3
 801fed8:	6838      	ldr	r0, [r7, #0]
 801feda:	f7fd ff2b 	bl	801dd34 <mkpay>
    rx_icmp(ifp, pkt);
 801fede:	6839      	ldr	r1, [r7, #0]
 801fee0:	6878      	ldr	r0, [r7, #4]
 801fee2:	f7fe fcb9 	bl	801e858 <rx_icmp>
 801fee6:	e100      	b.n	80200ea <rx_ip+0x2b6>
  } else if (pkt->ip->proto == 17) {
 801fee8:	683b      	ldr	r3, [r7, #0]
 801feea:	69db      	ldr	r3, [r3, #28]
 801feec:	7a5b      	ldrb	r3, [r3, #9]
 801feee:	2b11      	cmp	r3, #17
 801fef0:	f040 808b 	bne.w	802000a <rx_ip+0x1d6>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 801fef4:	683b      	ldr	r3, [r7, #0]
 801fef6:	69db      	ldr	r3, [r3, #28]
 801fef8:	f103 0214 	add.w	r2, r3, #20
 801fefc:	683b      	ldr	r3, [r7, #0]
 801fefe:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801ff00:	683b      	ldr	r3, [r7, #0]
 801ff02:	68db      	ldr	r3, [r3, #12]
 801ff04:	2b07      	cmp	r3, #7
 801ff06:	f240 80ed 	bls.w	80200e4 <rx_ip+0x2b0>
    mkpay(pkt, pkt->udp + 1);
 801ff0a:	683b      	ldr	r3, [r7, #0]
 801ff0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff0e:	3308      	adds	r3, #8
 801ff10:	4619      	mov	r1, r3
 801ff12:	6838      	ldr	r0, [r7, #0]
 801ff14:	f7fd ff0e 	bl	801dd34 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 801ff18:	4b76      	ldr	r3, [pc, #472]	@ (80200f4 <rx_ip+0x2c0>)
 801ff1a:	681b      	ldr	r3, [r3, #0]
 801ff1c:	2b03      	cmp	r3, #3
 801ff1e:	dd2d      	ble.n	801ff7c <rx_ip+0x148>
 801ff20:	4b75      	ldr	r3, [pc, #468]	@ (80200f8 <rx_ip+0x2c4>)
 801ff22:	f241 6255 	movw	r2, #5717	@ 0x1655
 801ff26:	4975      	ldr	r1, [pc, #468]	@ (80200fc <rx_ip+0x2c8>)
 801ff28:	2004      	movs	r0, #4
 801ff2a:	f7fb f907 	bl	801b13c <mg_log_prefix>
 801ff2e:	683b      	ldr	r3, [r7, #0]
 801ff30:	69db      	ldr	r3, [r3, #28]
 801ff32:	f103 050c 	add.w	r5, r3, #12
 801ff36:	683b      	ldr	r3, [r7, #0]
 801ff38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff3a:	881b      	ldrh	r3, [r3, #0]
 801ff3c:	b29b      	uxth	r3, r3
 801ff3e:	4618      	mov	r0, r3
 801ff40:	f002 fda3 	bl	8022a8a <mg_ntohs>
 801ff44:	4603      	mov	r3, r0
 801ff46:	461e      	mov	r6, r3
 801ff48:	683b      	ldr	r3, [r7, #0]
 801ff4a:	69db      	ldr	r3, [r3, #28]
 801ff4c:	f103 0410 	add.w	r4, r3, #16
 801ff50:	683b      	ldr	r3, [r7, #0]
 801ff52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff54:	885b      	ldrh	r3, [r3, #2]
 801ff56:	b29b      	uxth	r3, r3
 801ff58:	4618      	mov	r0, r3
 801ff5a:	f002 fd96 	bl	8022a8a <mg_ntohs>
 801ff5e:	4603      	mov	r3, r0
 801ff60:	461a      	mov	r2, r3
 801ff62:	683b      	ldr	r3, [r7, #0]
 801ff64:	68db      	ldr	r3, [r3, #12]
 801ff66:	9303      	str	r3, [sp, #12]
 801ff68:	9202      	str	r2, [sp, #8]
 801ff6a:	9401      	str	r4, [sp, #4]
 801ff6c:	4b64      	ldr	r3, [pc, #400]	@ (8020100 <rx_ip+0x2cc>)
 801ff6e:	9300      	str	r3, [sp, #0]
 801ff70:	4633      	mov	r3, r6
 801ff72:	462a      	mov	r2, r5
 801ff74:	4962      	ldr	r1, [pc, #392]	@ (8020100 <rx_ip+0x2cc>)
 801ff76:	4863      	ldr	r0, [pc, #396]	@ (8020104 <rx_ip+0x2d0>)
 801ff78:	f7fb f930 	bl	801b1dc <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	7f1b      	ldrb	r3, [r3, #28]
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	d01c      	beq.n	801ffbe <rx_ip+0x18a>
 801ff84:	683b      	ldr	r3, [r7, #0]
 801ff86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff88:	885b      	ldrh	r3, [r3, #2]
 801ff8a:	b29c      	uxth	r4, r3
 801ff8c:	2044      	movs	r0, #68	@ 0x44
 801ff8e:	f002 fd7c 	bl	8022a8a <mg_ntohs>
 801ff92:	4603      	mov	r3, r0
 801ff94:	429c      	cmp	r4, r3
 801ff96:	d112      	bne.n	801ffbe <rx_ip+0x18a>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801ff98:	683b      	ldr	r3, [r7, #0]
 801ff9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff9c:	f103 0208 	add.w	r2, r3, #8
 801ffa0:	683b      	ldr	r3, [r7, #0]
 801ffa2:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801ffa4:	683b      	ldr	r3, [r7, #0]
 801ffa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ffa8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801ffac:	4619      	mov	r1, r3
 801ffae:	6838      	ldr	r0, [r7, #0]
 801ffb0:	f7fd fec0 	bl	801dd34 <mkpay>
      rx_dhcp_client(ifp, pkt);
 801ffb4:	6839      	ldr	r1, [r7, #0]
 801ffb6:	6878      	ldr	r0, [r7, #4]
 801ffb8:	f7fe fcaa 	bl	801e910 <rx_dhcp_client>
 801ffbc:	e095      	b.n	80200ea <rx_ip+0x2b6>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	7f5b      	ldrb	r3, [r3, #29]
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d01c      	beq.n	8020000 <rx_ip+0x1cc>
 801ffc6:	683b      	ldr	r3, [r7, #0]
 801ffc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ffca:	885b      	ldrh	r3, [r3, #2]
 801ffcc:	b29c      	uxth	r4, r3
 801ffce:	2043      	movs	r0, #67	@ 0x43
 801ffd0:	f002 fd5b 	bl	8022a8a <mg_ntohs>
 801ffd4:	4603      	mov	r3, r0
 801ffd6:	429c      	cmp	r4, r3
 801ffd8:	d112      	bne.n	8020000 <rx_ip+0x1cc>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 801ffda:	683b      	ldr	r3, [r7, #0]
 801ffdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ffde:	f103 0208 	add.w	r2, r3, #8
 801ffe2:	683b      	ldr	r3, [r7, #0]
 801ffe4:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 801ffe6:	683b      	ldr	r3, [r7, #0]
 801ffe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ffea:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801ffee:	4619      	mov	r1, r3
 801fff0:	6838      	ldr	r0, [r7, #0]
 801fff2:	f7fd fe9f 	bl	801dd34 <mkpay>
      rx_dhcp_server(ifp, pkt);
 801fff6:	6839      	ldr	r1, [r7, #0]
 801fff8:	6878      	ldr	r0, [r7, #4]
 801fffa:	f7fe fe71 	bl	801ece0 <rx_dhcp_server>
 801fffe:	e074      	b.n	80200ea <rx_ip+0x2b6>
    } else {
      rx_udp(ifp, pkt);
 8020000:	6839      	ldr	r1, [r7, #0]
 8020002:	6878      	ldr	r0, [r7, #4]
 8020004:	f7ff f85a 	bl	801f0bc <rx_udp>
 8020008:	e06f      	b.n	80200ea <rx_ip+0x2b6>
    }
  } else if (pkt->ip->proto == 6) {
 802000a:	683b      	ldr	r3, [r7, #0]
 802000c:	69db      	ldr	r3, [r3, #28]
 802000e:	7a5b      	ldrb	r3, [r3, #9]
 8020010:	2b06      	cmp	r3, #6
 8020012:	d16a      	bne.n	80200ea <rx_ip+0x2b6>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8020014:	683b      	ldr	r3, [r7, #0]
 8020016:	69db      	ldr	r3, [r3, #28]
 8020018:	f103 0214 	add.w	r2, r3, #20
 802001c:	683b      	ldr	r3, [r7, #0]
 802001e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8020020:	683b      	ldr	r3, [r7, #0]
 8020022:	68db      	ldr	r3, [r3, #12]
 8020024:	2b13      	cmp	r3, #19
 8020026:	d95f      	bls.n	80200e8 <rx_ip+0x2b4>
    mkpay(pkt, pkt->tcp + 1);
 8020028:	683b      	ldr	r3, [r7, #0]
 802002a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802002c:	3314      	adds	r3, #20
 802002e:	4619      	mov	r1, r3
 8020030:	6838      	ldr	r0, [r7, #0]
 8020032:	f7fd fe7f 	bl	801dd34 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8020036:	683b      	ldr	r3, [r7, #0]
 8020038:	69db      	ldr	r3, [r3, #28]
 802003a:	885b      	ldrh	r3, [r3, #2]
 802003c:	b29b      	uxth	r3, r3
 802003e:	4618      	mov	r0, r3
 8020040:	f002 fd23 	bl	8022a8a <mg_ntohs>
 8020044:	4603      	mov	r3, r0
 8020046:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8020048:	683b      	ldr	r3, [r7, #0]
 802004a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802004c:	7b1b      	ldrb	r3, [r3, #12]
 802004e:	091b      	lsrs	r3, r3, #4
 8020050:	b2db      	uxtb	r3, r3
 8020052:	3305      	adds	r3, #5
 8020054:	b29b      	uxth	r3, r3
 8020056:	009b      	lsls	r3, r3, #2
 8020058:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 802005a:	89fa      	ldrh	r2, [r7, #14]
 802005c:	89bb      	ldrh	r3, [r7, #12]
 802005e:	429a      	cmp	r2, r3
 8020060:	d305      	bcc.n	802006e <rx_ip+0x23a>
 8020062:	89fa      	ldrh	r2, [r7, #14]
 8020064:	89bb      	ldrh	r3, [r7, #12]
 8020066:	1ad3      	subs	r3, r2, r3
 8020068:	461a      	mov	r2, r3
 802006a:	683b      	ldr	r3, [r7, #0]
 802006c:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 802006e:	4b21      	ldr	r3, [pc, #132]	@ (80200f4 <rx_ip+0x2c0>)
 8020070:	681b      	ldr	r3, [r3, #0]
 8020072:	2b03      	cmp	r3, #3
 8020074:	dd2d      	ble.n	80200d2 <rx_ip+0x29e>
 8020076:	4b20      	ldr	r3, [pc, #128]	@ (80200f8 <rx_ip+0x2c4>)
 8020078:	f241 626a 	movw	r2, #5738	@ 0x166a
 802007c:	491f      	ldr	r1, [pc, #124]	@ (80200fc <rx_ip+0x2c8>)
 802007e:	2004      	movs	r0, #4
 8020080:	f7fb f85c 	bl	801b13c <mg_log_prefix>
 8020084:	683b      	ldr	r3, [r7, #0]
 8020086:	69db      	ldr	r3, [r3, #28]
 8020088:	f103 050c 	add.w	r5, r3, #12
 802008c:	683b      	ldr	r3, [r7, #0]
 802008e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020090:	881b      	ldrh	r3, [r3, #0]
 8020092:	b29b      	uxth	r3, r3
 8020094:	4618      	mov	r0, r3
 8020096:	f002 fcf8 	bl	8022a8a <mg_ntohs>
 802009a:	4603      	mov	r3, r0
 802009c:	461e      	mov	r6, r3
 802009e:	683b      	ldr	r3, [r7, #0]
 80200a0:	69db      	ldr	r3, [r3, #28]
 80200a2:	f103 0410 	add.w	r4, r3, #16
 80200a6:	683b      	ldr	r3, [r7, #0]
 80200a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80200aa:	885b      	ldrh	r3, [r3, #2]
 80200ac:	b29b      	uxth	r3, r3
 80200ae:	4618      	mov	r0, r3
 80200b0:	f002 fceb 	bl	8022a8a <mg_ntohs>
 80200b4:	4603      	mov	r3, r0
 80200b6:	461a      	mov	r2, r3
 80200b8:	683b      	ldr	r3, [r7, #0]
 80200ba:	68db      	ldr	r3, [r3, #12]
 80200bc:	9303      	str	r3, [sp, #12]
 80200be:	9202      	str	r2, [sp, #8]
 80200c0:	9401      	str	r4, [sp, #4]
 80200c2:	4b0f      	ldr	r3, [pc, #60]	@ (8020100 <rx_ip+0x2cc>)
 80200c4:	9300      	str	r3, [sp, #0]
 80200c6:	4633      	mov	r3, r6
 80200c8:	462a      	mov	r2, r5
 80200ca:	490d      	ldr	r1, [pc, #52]	@ (8020100 <rx_ip+0x2cc>)
 80200cc:	480e      	ldr	r0, [pc, #56]	@ (8020108 <rx_ip+0x2d4>)
 80200ce:	f7fb f885 	bl	801b1dc <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 80200d2:	6839      	ldr	r1, [r7, #0]
 80200d4:	6878      	ldr	r0, [r7, #4]
 80200d6:	f7ff fd7d 	bl	801fbd4 <rx_tcp>
 80200da:	e006      	b.n	80200ea <rx_ip+0x2b6>
  if (pkt->ip->frag & IP_MORE_FRAGS_MSK || pkt->ip->frag & IP_FRAG_OFFSET_MSK) {
 80200dc:	bf00      	nop
 80200de:	e004      	b.n	80200ea <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 80200e0:	bf00      	nop
 80200e2:	e002      	b.n	80200ea <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80200e4:	bf00      	nop
 80200e6:	e000      	b.n	80200ea <rx_ip+0x2b6>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 80200e8:	bf00      	nop
  }
}
 80200ea:	3714      	adds	r7, #20
 80200ec:	46bd      	mov	sp, r7
 80200ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80200f0:	08032e68 	.word	0x08032e68
 80200f4:	20000298 	.word	0x20000298
 80200f8:	080345ec 	.word	0x080345ec
 80200fc:	08031484 	.word	0x08031484
 8020100:	0802132d 	.word	0x0802132d
 8020104:	08032e84 	.word	0x08032e84
 8020108:	08032ea0 	.word	0x08032ea0

0802010c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 802010c:	b580      	push	{r7, lr}
 802010e:	b082      	sub	sp, #8
 8020110:	af00      	add	r7, sp, #0
 8020112:	6078      	str	r0, [r7, #4]
 8020114:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8020116:	683b      	ldr	r3, [r7, #0]
 8020118:	6a1b      	ldr	r3, [r3, #32]
 802011a:	799b      	ldrb	r3, [r3, #6]
 802011c:	2b01      	cmp	r3, #1
 802011e:	d004      	beq.n	802012a <rx_ip6+0x1e>
 8020120:	683b      	ldr	r3, [r7, #0]
 8020122:	6a1b      	ldr	r3, [r3, #32]
 8020124:	799b      	ldrb	r3, [r3, #6]
 8020126:	2b3a      	cmp	r3, #58	@ 0x3a
 8020128:	d115      	bne.n	8020156 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 802012a:	683b      	ldr	r3, [r7, #0]
 802012c:	6a1b      	ldr	r3, [r3, #32]
 802012e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8020132:	683b      	ldr	r3, [r7, #0]
 8020134:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8020136:	683b      	ldr	r3, [r7, #0]
 8020138:	68db      	ldr	r3, [r3, #12]
 802013a:	2b03      	cmp	r3, #3
 802013c:	d922      	bls.n	8020184 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 802013e:	683b      	ldr	r3, [r7, #0]
 8020140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020142:	3304      	adds	r3, #4
 8020144:	4619      	mov	r1, r3
 8020146:	6838      	ldr	r0, [r7, #0]
 8020148:	f7fd fdf4 	bl	801dd34 <mkpay>
    rx_icmp(ifp, pkt);
 802014c:	6839      	ldr	r1, [r7, #0]
 802014e:	6878      	ldr	r0, [r7, #4]
 8020150:	f7fe fb82 	bl	801e858 <rx_icmp>
 8020154:	e019      	b.n	802018a <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 8020156:	683b      	ldr	r3, [r7, #0]
 8020158:	6a1b      	ldr	r3, [r3, #32]
 802015a:	799b      	ldrb	r3, [r3, #6]
 802015c:	2b11      	cmp	r3, #17
 802015e:	d114      	bne.n	802018a <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 8020160:	683b      	ldr	r3, [r7, #0]
 8020162:	6a1b      	ldr	r3, [r3, #32]
 8020164:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8020168:	683b      	ldr	r3, [r7, #0]
 802016a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 802016c:	683b      	ldr	r3, [r7, #0]
 802016e:	68db      	ldr	r3, [r3, #12]
 8020170:	2b07      	cmp	r3, #7
 8020172:	d909      	bls.n	8020188 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 8020174:	683b      	ldr	r3, [r7, #0]
 8020176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020178:	3308      	adds	r3, #8
 802017a:	4619      	mov	r1, r3
 802017c:	6838      	ldr	r0, [r7, #0]
 802017e:	f7fd fdd9 	bl	801dd34 <mkpay>
 8020182:	e002      	b.n	802018a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8020184:	bf00      	nop
 8020186:	e000      	b.n	802018a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8020188:	bf00      	nop
  }
}
 802018a:	3708      	adds	r7, #8
 802018c:	46bd      	mov	sp, r7
 802018e:	bd80      	pop	{r7, pc}

08020190 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 8020190:	b590      	push	{r4, r7, lr}
 8020192:	b093      	sub	sp, #76	@ 0x4c
 8020194:	af00      	add	r7, sp, #0
 8020196:	60f8      	str	r0, [r7, #12]
 8020198:	60b9      	str	r1, [r7, #8]
 802019a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 802019c:	f107 0314 	add.w	r3, r7, #20
 80201a0:	2234      	movs	r2, #52	@ 0x34
 80201a2:	2100      	movs	r1, #0
 80201a4:	4618      	mov	r0, r3
 80201a6:	f005 fdd3 	bl	8025d50 <memset>
  pkt.raw.buf = (char *) buf;
 80201aa:	68bb      	ldr	r3, [r7, #8]
 80201ac:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 80201b2:	68bb      	ldr	r3, [r7, #8]
 80201b4:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 80201b6:	69bb      	ldr	r3, [r7, #24]
 80201b8:	2b0d      	cmp	r3, #13
 80201ba:	f240 80d8 	bls.w	802036e <mg_tcpip_rx+0x1de>
  if (ifp->enable_mac_check &&
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d013      	beq.n	80201f0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 80201c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80201ca:	4618      	mov	r0, r3
 80201cc:	68fb      	ldr	r3, [r7, #12]
 80201ce:	2206      	movs	r2, #6
 80201d0:	4619      	mov	r1, r3
 80201d2:	f005 fd29 	bl	8025c28 <memcmp>
 80201d6:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 80201d8:	2b00      	cmp	r3, #0
 80201da:	d009      	beq.n	80201f0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 80201dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80201de:	2206      	movs	r2, #6
 80201e0:	496d      	ldr	r1, [pc, #436]	@ (8020398 <mg_tcpip_rx+0x208>)
 80201e2:	4618      	mov	r0, r3
 80201e4:	f005 fd20 	bl	8025c28 <memcmp>
 80201e8:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	f040 80c1 	bne.w	8020372 <mg_tcpip_rx+0x1e2>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 80201f0:	68fb      	ldr	r3, [r7, #12]
 80201f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	d01a      	beq.n	8020230 <mg_tcpip_rx+0xa0>
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	2b04      	cmp	r3, #4
 80201fe:	d917      	bls.n	8020230 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	3b04      	subs	r3, #4
 8020204:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8020206:	687a      	ldr	r2, [r7, #4]
 8020208:	68b9      	ldr	r1, [r7, #8]
 802020a:	2000      	movs	r0, #0
 802020c:	f002 fc54 	bl	8022ab8 <mg_crc32>
 8020210:	4603      	mov	r3, r0
 8020212:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8020214:	68ba      	ldr	r2, [r7, #8]
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	4413      	add	r3, r2
 802021a:	4618      	mov	r0, r3
 802021c:	f107 0310 	add.w	r3, r7, #16
 8020220:	2204      	movs	r2, #4
 8020222:	4619      	mov	r1, r3
 8020224:	f005 fd00 	bl	8025c28 <memcmp>
 8020228:	4603      	mov	r3, r0
 802022a:	2b00      	cmp	r3, #0
 802022c:	f040 80a3 	bne.w	8020376 <mg_tcpip_rx+0x1e6>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 8020230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020232:	899b      	ldrh	r3, [r3, #12]
 8020234:	b29c      	uxth	r4, r3
 8020236:	f640 0006 	movw	r0, #2054	@ 0x806
 802023a:	f002 fc26 	bl	8022a8a <mg_ntohs>
 802023e:	4603      	mov	r3, r0
 8020240:	429c      	cmp	r4, r3
 8020242:	d10d      	bne.n	8020260 <mg_tcpip_rx+0xd0>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8020244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020246:	330e      	adds	r3, #14
 8020248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802024a:	69bb      	ldr	r3, [r7, #24]
 802024c:	2b29      	cmp	r3, #41	@ 0x29
 802024e:	f240 8094 	bls.w	802037a <mg_tcpip_rx+0x1ea>
    rx_arp(ifp, &pkt);
 8020252:	f107 0314 	add.w	r3, r7, #20
 8020256:	4619      	mov	r1, r3
 8020258:	68f8      	ldr	r0, [r7, #12]
 802025a:	f7fe f9f3 	bl	801e644 <rx_arp>
 802025e:	e097      	b.n	8020390 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 8020260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020262:	899b      	ldrh	r3, [r3, #12]
 8020264:	b29c      	uxth	r4, r3
 8020266:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 802026a:	f002 fc0e 	bl	8022a8a <mg_ntohs>
 802026e:	4603      	mov	r3, r0
 8020270:	429c      	cmp	r4, r3
 8020272:	d11b      	bne.n	80202ac <mg_tcpip_rx+0x11c>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 8020274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020276:	330e      	adds	r3, #14
 8020278:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802027a:	69bb      	ldr	r3, [r7, #24]
 802027c:	2b35      	cmp	r3, #53	@ 0x35
 802027e:	d97e      	bls.n	802037e <mg_tcpip_rx+0x1ee>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8020280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020282:	781b      	ldrb	r3, [r3, #0]
 8020284:	091b      	lsrs	r3, r3, #4
 8020286:	b2db      	uxtb	r3, r3
 8020288:	2b06      	cmp	r3, #6
 802028a:	d17a      	bne.n	8020382 <mg_tcpip_rx+0x1f2>
    mkpay(&pkt, pkt.ip6 + 1);
 802028c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802028e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8020292:	f107 0314 	add.w	r3, r7, #20
 8020296:	4611      	mov	r1, r2
 8020298:	4618      	mov	r0, r3
 802029a:	f7fd fd4b 	bl	801dd34 <mkpay>
    rx_ip6(ifp, &pkt);
 802029e:	f107 0314 	add.w	r3, r7, #20
 80202a2:	4619      	mov	r1, r3
 80202a4:	68f8      	ldr	r0, [r7, #12]
 80202a6:	f7ff ff31 	bl	802010c <rx_ip6>
 80202aa:	e071      	b.n	8020390 <mg_tcpip_rx+0x200>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 80202ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80202ae:	899b      	ldrh	r3, [r3, #12]
 80202b0:	b29c      	uxth	r4, r3
 80202b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80202b6:	f002 fbe8 	bl	8022a8a <mg_ntohs>
 80202ba:	4603      	mov	r3, r0
 80202bc:	429c      	cmp	r4, r3
 80202be:	d133      	bne.n	8020328 <mg_tcpip_rx+0x198>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 80202c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80202c2:	330e      	adds	r3, #14
 80202c4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80202c6:	69bb      	ldr	r3, [r7, #24]
 80202c8:	2b21      	cmp	r3, #33	@ 0x21
 80202ca:	d95c      	bls.n	8020386 <mg_tcpip_rx+0x1f6>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 80202cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202ce:	885b      	ldrh	r3, [r3, #2]
 80202d0:	b29b      	uxth	r3, r3
 80202d2:	4618      	mov	r0, r3
 80202d4:	f002 fbd9 	bl	8022a8a <mg_ntohs>
 80202d8:	4603      	mov	r3, r0
 80202da:	f103 020e 	add.w	r2, r3, #14
 80202de:	69bb      	ldr	r3, [r7, #24]
 80202e0:	429a      	cmp	r2, r3
 80202e2:	d208      	bcs.n	80202f6 <mg_tcpip_rx+0x166>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 80202e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202e6:	885b      	ldrh	r3, [r3, #2]
 80202e8:	b29b      	uxth	r3, r3
 80202ea:	4618      	mov	r0, r3
 80202ec:	f002 fbcd 	bl	8022a8a <mg_ntohs>
 80202f0:	4603      	mov	r3, r0
 80202f2:	330e      	adds	r3, #14
 80202f4:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80202f6:	69bb      	ldr	r3, [r7, #24]
 80202f8:	2b21      	cmp	r3, #33	@ 0x21
 80202fa:	d946      	bls.n	802038a <mg_tcpip_rx+0x1fa>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 80202fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202fe:	781b      	ldrb	r3, [r3, #0]
 8020300:	091b      	lsrs	r3, r3, #4
 8020302:	b2db      	uxtb	r3, r3
 8020304:	2b04      	cmp	r3, #4
 8020306:	d142      	bne.n	802038e <mg_tcpip_rx+0x1fe>
    mkpay(&pkt, pkt.ip + 1);
 8020308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802030a:	f103 0214 	add.w	r2, r3, #20
 802030e:	f107 0314 	add.w	r3, r7, #20
 8020312:	4611      	mov	r1, r2
 8020314:	4618      	mov	r0, r3
 8020316:	f7fd fd0d 	bl	801dd34 <mkpay>
    rx_ip(ifp, &pkt);
 802031a:	f107 0314 	add.w	r3, r7, #20
 802031e:	4619      	mov	r1, r3
 8020320:	68f8      	ldr	r0, [r7, #12]
 8020322:	f7ff fd87 	bl	801fe34 <rx_ip>
 8020326:	e033      	b.n	8020390 <mg_tcpip_rx+0x200>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8020328:	4b1c      	ldr	r3, [pc, #112]	@ (802039c <mg_tcpip_rx+0x20c>)
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	2b02      	cmp	r3, #2
 802032e:	dd11      	ble.n	8020354 <mg_tcpip_rx+0x1c4>
 8020330:	4b1b      	ldr	r3, [pc, #108]	@ (80203a0 <mg_tcpip_rx+0x210>)
 8020332:	f241 62a8 	movw	r2, #5800	@ 0x16a8
 8020336:	491b      	ldr	r1, [pc, #108]	@ (80203a4 <mg_tcpip_rx+0x214>)
 8020338:	2003      	movs	r0, #3
 802033a:	f7fa feff 	bl	801b13c <mg_log_prefix>
 802033e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020340:	899b      	ldrh	r3, [r3, #12]
 8020342:	b29b      	uxth	r3, r3
 8020344:	4618      	mov	r0, r3
 8020346:	f002 fba0 	bl	8022a8a <mg_ntohs>
 802034a:	4603      	mov	r3, r0
 802034c:	4619      	mov	r1, r3
 802034e:	4816      	ldr	r0, [pc, #88]	@ (80203a8 <mg_tcpip_rx+0x218>)
 8020350:	f7fa ff44 	bl	801b1dc <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 8020354:	4b11      	ldr	r3, [pc, #68]	@ (802039c <mg_tcpip_rx+0x20c>)
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	2b03      	cmp	r3, #3
 802035a:	dd19      	ble.n	8020390 <mg_tcpip_rx+0x200>
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	2b20      	cmp	r3, #32
 8020360:	bf28      	it	cs
 8020362:	2320      	movcs	r3, #32
 8020364:	4619      	mov	r1, r3
 8020366:	68b8      	ldr	r0, [r7, #8]
 8020368:	f7fa ff6e 	bl	801b248 <mg_hexdump>
 802036c:	e010      	b.n	8020390 <mg_tcpip_rx+0x200>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 802036e:	bf00      	nop
 8020370:	e00e      	b.n	8020390 <mg_tcpip_rx+0x200>
    return;
 8020372:	bf00      	nop
 8020374:	e00c      	b.n	8020390 <mg_tcpip_rx+0x200>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8020376:	bf00      	nop
 8020378:	e00a      	b.n	8020390 <mg_tcpip_rx+0x200>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 802037a:	bf00      	nop
 802037c:	e008      	b.n	8020390 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 802037e:	bf00      	nop
 8020380:	e006      	b.n	8020390 <mg_tcpip_rx+0x200>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 8020382:	bf00      	nop
 8020384:	e004      	b.n	8020390 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8020386:	bf00      	nop
 8020388:	e002      	b.n	8020390 <mg_tcpip_rx+0x200>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 802038a:	bf00      	nop
 802038c:	e000      	b.n	8020390 <mg_tcpip_rx+0x200>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 802038e:	bf00      	nop
  }
}
 8020390:	374c      	adds	r7, #76	@ 0x4c
 8020392:	46bd      	mov	sp, r7
 8020394:	bd90      	pop	{r4, r7, pc}
 8020396:	bf00      	nop
 8020398:	08034490 	.word	0x08034490
 802039c:	20000298 	.word	0x20000298
 80203a0:	080345f4 	.word	0x080345f4
 80203a4:	08031484 	.word	0x08031484
 80203a8:	08032ebc 	.word	0x08032ebc

080203ac <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 80203ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203ae:	b095      	sub	sp, #84	@ 0x54
 80203b0:	af06      	add	r7, sp, #24
 80203b2:	6178      	str	r0, [r7, #20]
 80203b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 80203b8:	697b      	ldr	r3, [r7, #20]
 80203ba:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80203be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80203c2:	e9cd 2300 	strd	r2, r3, [sp]
 80203c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80203ca:	f04f 0300 	mov.w	r3, #0
 80203ce:	4608      	mov	r0, r1
 80203d0:	f002 f83b 	bl	802244a <mg_timer_expired>
 80203d4:	4603      	mov	r3, r0
 80203d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 80203da:	6979      	ldr	r1, [r7, #20]
 80203dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80203e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
  }
#endif
  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 80203e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d052      	beq.n	8020492 <mg_tcpip_poll+0xe6>
 80203ec:	697b      	ldr	r3, [r7, #20]
 80203ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203f0:	68db      	ldr	r3, [r3, #12]
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d04d      	beq.n	8020492 <mg_tcpip_poll+0xe6>
    bool up = ifp->driver->up(ifp);
 80203f6:	697b      	ldr	r3, [r7, #20]
 80203f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80203fa:	68db      	ldr	r3, [r3, #12]
 80203fc:	6978      	ldr	r0, [r7, #20]
 80203fe:	4798      	blx	r3
 8020400:	4603      	mov	r3, r0
 8020402:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8020406:	697b      	ldr	r3, [r7, #20]
 8020408:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 802040c:	2b00      	cmp	r3, #0
 802040e:	bf14      	ite	ne
 8020410:	2301      	movne	r3, #1
 8020412:	2300      	moveq	r3, #0
 8020414:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    if (up != current) {
 8020418:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 802041c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8020420:	429a      	cmp	r2, r3
 8020422:	d023      	beq.n	802046c <mg_tcpip_poll+0xc0>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 8020424:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8020428:	f083 0301 	eor.w	r3, r3, #1
 802042c:	b2db      	uxtb	r3, r3
 802042e:	2b00      	cmp	r3, #0
 8020430:	d001      	beq.n	8020436 <mg_tcpip_poll+0x8a>
 8020432:	2300      	movs	r3, #0
 8020434:	e006      	b.n	8020444 <mg_tcpip_poll+0x98>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 8020436:	697b      	ldr	r3, [r7, #20]
 8020438:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 802043a:	2b00      	cmp	r3, #0
 802043c:	d001      	beq.n	8020442 <mg_tcpip_poll+0x96>
 802043e:	2301      	movs	r3, #1
 8020440:	e000      	b.n	8020444 <mg_tcpip_poll+0x98>
 8020442:	2303      	movs	r3, #3
 8020444:	697a      	ldr	r2, [r7, #20]
 8020446:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 802044a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 802044e:	f083 0301 	eor.w	r3, r3, #1
 8020452:	b2db      	uxtb	r3, r3
 8020454:	2b00      	cmp	r3, #0
 8020456:	d006      	beq.n	8020466 <mg_tcpip_poll+0xba>
 8020458:	697b      	ldr	r3, [r7, #20]
 802045a:	7f1b      	ldrb	r3, [r3, #28]
 802045c:	2b00      	cmp	r3, #0
 802045e:	d002      	beq.n	8020466 <mg_tcpip_poll+0xba>
 8020460:	697b      	ldr	r3, [r7, #20]
 8020462:	2200      	movs	r2, #0
 8020464:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 8020466:	6978      	ldr	r0, [r7, #20]
 8020468:	f7fd fdb2 	bl	801dfd0 <onstatechange>
    }
    if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 802046c:	697b      	ldr	r3, [r7, #20]
 802046e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020472:	2b00      	cmp	r3, #0
 8020474:	d10d      	bne.n	8020492 <mg_tcpip_poll+0xe6>
 8020476:	4ba4      	ldr	r3, [pc, #656]	@ (8020708 <mg_tcpip_poll+0x35c>)
 8020478:	681b      	ldr	r3, [r3, #0]
 802047a:	2b00      	cmp	r3, #0
 802047c:	dd09      	ble.n	8020492 <mg_tcpip_poll+0xe6>
 802047e:	4ba3      	ldr	r3, [pc, #652]	@ (802070c <mg_tcpip_poll+0x360>)
 8020480:	f241 62c5 	movw	r2, #5829	@ 0x16c5
 8020484:	49a2      	ldr	r1, [pc, #648]	@ (8020710 <mg_tcpip_poll+0x364>)
 8020486:	2001      	movs	r0, #1
 8020488:	f7fa fe58 	bl	801b13c <mg_log_prefix>
 802048c:	48a1      	ldr	r0, [pc, #644]	@ (8020714 <mg_tcpip_poll+0x368>)
 802048e:	f7fa fea5 	bl	801b1dc <mg_log>
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8020492:	697b      	ldr	r3, [r7, #20]
 8020494:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020498:	2b00      	cmp	r3, #0
 802049a:	f000 818d 	beq.w	80207b8 <mg_tcpip_poll+0x40c>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 802049e:	697b      	ldr	r3, [r7, #20]
 80204a0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80204a4:	2b01      	cmp	r3, #1
 80204a6:	d107      	bne.n	80204b8 <mg_tcpip_poll+0x10c>
 80204a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80204ac:	2b00      	cmp	r3, #0
 80204ae:	d003      	beq.n	80204b8 <mg_tcpip_poll+0x10c>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 80204b0:	6978      	ldr	r0, [r7, #20]
 80204b2:	f7fe f819 	bl	801e4e8 <tx_dhcp_discover>
 80204b6:	e04c      	b.n	8020552 <mg_tcpip_poll+0x1a6>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80204b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80204bc:	2b00      	cmp	r3, #0
 80204be:	d048      	beq.n	8020552 <mg_tcpip_poll+0x1a6>
 80204c0:	697b      	ldr	r3, [r7, #20]
 80204c2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80204c6:	2b03      	cmp	r3, #3
 80204c8:	d143      	bne.n	8020552 <mg_tcpip_poll+0x1a6>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 80204ca:	697b      	ldr	r3, [r7, #20]
 80204cc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 80204d0:	4313      	orrs	r3, r2
 80204d2:	d03e      	beq.n	8020552 <mg_tcpip_poll+0x1a6>
    if (ifp->now >= ifp->lease_expire) {
 80204d4:	697b      	ldr	r3, [r7, #20]
 80204d6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80204da:	697b      	ldr	r3, [r7, #20]
 80204dc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80204e0:	4290      	cmp	r0, r2
 80204e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80204e6:	d30a      	bcc.n	80204fe <mg_tcpip_poll+0x152>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 80204e8:	697b      	ldr	r3, [r7, #20]
 80204ea:	2201      	movs	r2, #1
 80204ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 80204f0:	697b      	ldr	r3, [r7, #20]
 80204f2:	2200      	movs	r2, #0
 80204f4:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 80204f6:	6978      	ldr	r0, [r7, #20]
 80204f8:	f7fd fd6a 	bl	801dfd0 <onstatechange>
 80204fc:	e029      	b.n	8020552 <mg_tcpip_poll+0x1a6>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80204fe:	697b      	ldr	r3, [r7, #20]
 8020500:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8020504:	4984      	ldr	r1, [pc, #528]	@ (8020718 <mg_tcpip_poll+0x36c>)
 8020506:	1854      	adds	r4, r2, r1
 8020508:	f143 0500 	adc.w	r5, r3, #0
 802050c:	697b      	ldr	r3, [r7, #20]
 802050e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8020512:	42a2      	cmp	r2, r4
 8020514:	41ab      	sbcs	r3, r5
 8020516:	d21c      	bcs.n	8020552 <mg_tcpip_poll+0x1a6>
               ((ifp->now / 1000) % 60) == 0) {
 8020518:	697b      	ldr	r3, [r7, #20]
 802051a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 802051e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020522:	f04f 0300 	mov.w	r3, #0
 8020526:	f7e0 fc17 	bl	8000d58 <__aeabi_uldivmod>
 802052a:	4602      	mov	r2, r0
 802052c:	460b      	mov	r3, r1
 802052e:	4610      	mov	r0, r2
 8020530:	4619      	mov	r1, r3
 8020532:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8020536:	f04f 0300 	mov.w	r3, #0
 802053a:	f7e0 fc0d 	bl	8000d58 <__aeabi_uldivmod>
    } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 802053e:	4313      	orrs	r3, r2
 8020540:	d107      	bne.n	8020552 <mg_tcpip_poll+0x1a6>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8020542:	697b      	ldr	r3, [r7, #20]
 8020544:	689a      	ldr	r2, [r3, #8]
 8020546:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802054a:	4974      	ldr	r1, [pc, #464]	@ (802071c <mg_tcpip_poll+0x370>)
 802054c:	6978      	ldr	r0, [r7, #20]
 802054e:	f7fd ff99 	bl	801e484 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 8020552:	697b      	ldr	r3, [r7, #20]
 8020554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020556:	689b      	ldr	r3, [r3, #8]
 8020558:	2b00      	cmp	r3, #0
 802055a:	d019      	beq.n	8020590 <mg_tcpip_poll+0x1e4>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 802055c:	697b      	ldr	r3, [r7, #20]
 802055e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020560:	689b      	ldr	r3, [r3, #8]
 8020562:	697a      	ldr	r2, [r7, #20]
 8020564:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8020566:	697a      	ldr	r2, [r7, #20]
 8020568:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 802056a:	697a      	ldr	r2, [r7, #20]
 802056c:	4798      	blx	r3
 802056e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 8020570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020572:	2b00      	cmp	r3, #0
 8020574:	d024      	beq.n	80205c0 <mg_tcpip_poll+0x214>
      ifp->nrecv++;
 8020576:	697b      	ldr	r3, [r7, #20]
 8020578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802057a:	1c5a      	adds	r2, r3, #1
 802057c:	697b      	ldr	r3, [r7, #20]
 802057e:	671a      	str	r2, [r3, #112]	@ 0x70
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8020580:	697b      	ldr	r3, [r7, #20]
 8020582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020586:	4619      	mov	r1, r3
 8020588:	6978      	ldr	r0, [r7, #20]
 802058a:	f7ff fe01 	bl	8020190 <mg_tcpip_rx>
 802058e:	e017      	b.n	80205c0 <mg_tcpip_poll+0x214>
    }
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8020590:	697b      	ldr	r3, [r7, #20]
 8020592:	3334      	adds	r3, #52	@ 0x34
 8020594:	f107 0220 	add.w	r2, r7, #32
 8020598:	4611      	mov	r1, r2
 802059a:	4618      	mov	r0, r3
 802059c:	f000 ffb8 	bl	8021510 <mg_queue_next>
 80205a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 80205a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80205a4:	2b00      	cmp	r3, #0
 80205a6:	d00b      	beq.n	80205c0 <mg_tcpip_poll+0x214>
      mg_tcpip_rx(ifp, buf, len);
 80205a8:	6a3b      	ldr	r3, [r7, #32]
 80205aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80205ac:	4619      	mov	r1, r3
 80205ae:	6978      	ldr	r0, [r7, #20]
 80205b0:	f7ff fdee 	bl	8020190 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 80205b4:	697b      	ldr	r3, [r7, #20]
 80205b6:	3334      	adds	r3, #52	@ 0x34
 80205b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80205ba:	4618      	mov	r0, r3
 80205bc:	f000 ffd9 	bl	8021572 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80205c0:	697b      	ldr	r3, [r7, #20]
 80205c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80205c4:	681b      	ldr	r3, [r3, #0]
 80205c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80205c8:	e0f1      	b.n	80207ae <mg_tcpip_poll+0x402>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80205ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205cc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80205d0:	f003 0301 	and.w	r3, r3, #1
 80205d4:	b2db      	uxtb	r3, r3
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	f040 80e5 	bne.w	80207a6 <mg_tcpip_poll+0x3fa>
 80205dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205de:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80205e2:	f003 0301 	and.w	r3, r3, #1
 80205e6:	b2db      	uxtb	r3, r3
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	f040 80dc 	bne.w	80207a6 <mg_tcpip_poll+0x3fa>
 80205ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205f0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80205f4:	f003 0308 	and.w	r3, r3, #8
 80205f8:	b2db      	uxtb	r3, r3
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	f040 80d3 	bne.w	80207a6 <mg_tcpip_poll+0x3fa>
    struct connstate *s = (struct connstate *) (c + 1);
 8020600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020602:	33b0      	adds	r3, #176	@ 0xb0
 8020604:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020608:	331c      	adds	r3, #28
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	61fb      	str	r3, [r7, #28]
    if (now > s->timer) {
 802060e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020610:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8020614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020618:	4290      	cmp	r0, r2
 802061a:	eb71 0303 	sbcs.w	r3, r1, r3
 802061e:	f080 80c3 	bcs.w	80207a8 <mg_tcpip_poll+0x3fc>
      if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 8020622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020624:	7f9b      	ldrb	r3, [r3, #30]
 8020626:	2b01      	cmp	r3, #1
 8020628:	d142      	bne.n	80206b0 <mg_tcpip_poll+0x304>
 802062a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802062c:	691a      	ldr	r2, [r3, #16]
 802062e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020630:	685b      	ldr	r3, [r3, #4]
 8020632:	429a      	cmp	r2, r3
 8020634:	d03c      	beq.n	80206b0 <mg_tcpip_poll+0x304>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8020636:	4b34      	ldr	r3, [pc, #208]	@ (8020708 <mg_tcpip_poll+0x35c>)
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	2b03      	cmp	r3, #3
 802063c:	dd0f      	ble.n	802065e <mg_tcpip_poll+0x2b2>
 802063e:	4b33      	ldr	r3, [pc, #204]	@ (802070c <mg_tcpip_poll+0x360>)
 8020640:	f241 62f1 	movw	r2, #5873	@ 0x16f1
 8020644:	4932      	ldr	r1, [pc, #200]	@ (8020710 <mg_tcpip_poll+0x364>)
 8020646:	2004      	movs	r0, #4
 8020648:	f7fa fd78 	bl	801b13c <mg_log_prefix>
 802064c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802064e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8020650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020652:	681a      	ldr	r2, [r3, #0]
 8020654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020656:	685b      	ldr	r3, [r3, #4]
 8020658:	4831      	ldr	r0, [pc, #196]	@ (8020720 <mg_tcpip_poll+0x374>)
 802065a:	f7fa fdbf 	bl	801b1dc <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 802065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020660:	f103 0618 	add.w	r6, r3, #24
 8020664:	69fb      	ldr	r3, [r7, #28]
 8020666:	613b      	str	r3, [r7, #16]
 8020668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802066a:	8b1c      	ldrh	r4, [r3, #24]
 802066c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802066e:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8020670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	4618      	mov	r0, r3
 8020676:	f002 f9ef 	bl	8022a58 <mg_ntohl>
 802067a:	6078      	str	r0, [r7, #4]
 802067c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802067e:	685b      	ldr	r3, [r3, #4]
 8020680:	4618      	mov	r0, r3
 8020682:	f002 f9e9 	bl	8022a58 <mg_ntohl>
 8020686:	4603      	mov	r3, r0
 8020688:	2200      	movs	r2, #0
 802068a:	9205      	str	r2, [sp, #20]
 802068c:	2200      	movs	r2, #0
 802068e:	9204      	str	r2, [sp, #16]
 8020690:	9303      	str	r3, [sp, #12]
 8020692:	6879      	ldr	r1, [r7, #4]
 8020694:	9102      	str	r1, [sp, #8]
 8020696:	9501      	str	r5, [sp, #4]
 8020698:	9400      	str	r4, [sp, #0]
 802069a:	2310      	movs	r3, #16
 802069c:	693a      	ldr	r2, [r7, #16]
 802069e:	4631      	mov	r1, r6
 80206a0:	6978      	ldr	r0, [r7, #20]
 80206a2:	f7fe fd7d 	bl	801f1a0 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 80206a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206a8:	685a      	ldr	r2, [r3, #4]
 80206aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206ac:	611a      	str	r2, [r3, #16]
 80206ae:	e075      	b.n	802079c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_ARP) {
 80206b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206b2:	7f9b      	ldrb	r3, [r3, #30]
 80206b4:	2b02      	cmp	r3, #2
 80206b6:	d104      	bne.n	80206c2 <mg_tcpip_poll+0x316>
        mg_error(c, "ARP timeout");
 80206b8:	491a      	ldr	r1, [pc, #104]	@ (8020724 <mg_tcpip_poll+0x378>)
 80206ba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80206bc:	f7f5 f978 	bl	80159b0 <mg_error>
 80206c0:	e06c      	b.n	802079c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80206c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206c4:	7f9b      	ldrb	r3, [r3, #30]
 80206c6:	2b03      	cmp	r3, #3
 80206c8:	d104      	bne.n	80206d4 <mg_tcpip_poll+0x328>
        mg_error(c, "Connection timeout");
 80206ca:	4917      	ldr	r1, [pc, #92]	@ (8020728 <mg_tcpip_poll+0x37c>)
 80206cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80206ce:	f7f5 f96f 	bl	80159b0 <mg_error>
 80206d2:	e063      	b.n	802079c <mg_tcpip_poll+0x3f0>
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80206d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206d6:	7f9b      	ldrb	r3, [r3, #30]
 80206d8:	2b04      	cmp	r3, #4
 80206da:	d107      	bne.n	80206ec <mg_tcpip_poll+0x340>
        c->is_closing = 1;
 80206dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80206de:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80206e2:	f043 0320 	orr.w	r3, r3, #32
 80206e6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 80206ea:	e05d      	b.n	80207a8 <mg_tcpip_poll+0x3fc>
      } else {
        if (s->tmiss++ > 2) {
 80206ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206ee:	7fdb      	ldrb	r3, [r3, #31]
 80206f0:	1c5a      	adds	r2, r3, #1
 80206f2:	b2d1      	uxtb	r1, r2
 80206f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80206f6:	77d1      	strb	r1, [r2, #31]
 80206f8:	2b02      	cmp	r3, #2
 80206fa:	d919      	bls.n	8020730 <mg_tcpip_poll+0x384>
          mg_error(c, "keepalive");
 80206fc:	490b      	ldr	r1, [pc, #44]	@ (802072c <mg_tcpip_poll+0x380>)
 80206fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8020700:	f7f5 f956 	bl	80159b0 <mg_error>
 8020704:	e04a      	b.n	802079c <mg_tcpip_poll+0x3f0>
 8020706:	bf00      	nop
 8020708:	20000298 	.word	0x20000298
 802070c:	08034600 	.word	0x08034600
 8020710:	08031484 	.word	0x08031484
 8020714:	08032ed0 	.word	0x08032ed0
 8020718:	001b7740 	.word	0x001b7740
 802071c:	08034490 	.word	0x08034490
 8020720:	08032ee0 	.word	0x08032ee0
 8020724:	08032ef0 	.word	0x08032ef0
 8020728:	08032efc 	.word	0x08032efc
 802072c:	08032f10 	.word	0x08032f10
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 8020730:	4b23      	ldr	r3, [pc, #140]	@ (80207c0 <mg_tcpip_poll+0x414>)
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	2b03      	cmp	r3, #3
 8020736:	dd0c      	ble.n	8020752 <mg_tcpip_poll+0x3a6>
 8020738:	4b22      	ldr	r3, [pc, #136]	@ (80207c4 <mg_tcpip_poll+0x418>)
 802073a:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 802073e:	4922      	ldr	r1, [pc, #136]	@ (80207c8 <mg_tcpip_poll+0x41c>)
 8020740:	2004      	movs	r0, #4
 8020742:	f7fa fcfb 	bl	801b13c <mg_log_prefix>
 8020746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802074a:	4619      	mov	r1, r3
 802074c:	481f      	ldr	r0, [pc, #124]	@ (80207cc <mg_tcpip_poll+0x420>)
 802074e:	f7fa fd45 	bl	801b1dc <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8020752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020754:	f103 0618 	add.w	r6, r3, #24
 8020758:	69fb      	ldr	r3, [r7, #28]
 802075a:	613b      	str	r3, [r7, #16]
 802075c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802075e:	8b1c      	ldrh	r4, [r3, #24]
 8020760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020762:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8020764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020766:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8020768:	3b01      	subs	r3, #1
 802076a:	4618      	mov	r0, r3
 802076c:	f002 f974 	bl	8022a58 <mg_ntohl>
 8020770:	6078      	str	r0, [r7, #4]
 8020772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020774:	685b      	ldr	r3, [r3, #4]
 8020776:	4618      	mov	r0, r3
 8020778:	f002 f96e 	bl	8022a58 <mg_ntohl>
 802077c:	4603      	mov	r3, r0
 802077e:	2200      	movs	r2, #0
 8020780:	9205      	str	r2, [sp, #20]
 8020782:	2200      	movs	r2, #0
 8020784:	9204      	str	r2, [sp, #16]
 8020786:	9303      	str	r3, [sp, #12]
 8020788:	6879      	ldr	r1, [r7, #4]
 802078a:	9102      	str	r1, [sp, #8]
 802078c:	9501      	str	r5, [sp, #4]
 802078e:	9400      	str	r4, [sp, #0]
 8020790:	2310      	movs	r3, #16
 8020792:	693a      	ldr	r2, [r7, #16]
 8020794:	4631      	mov	r1, r6
 8020796:	6978      	ldr	r0, [r7, #20]
 8020798:	f7fe fd02 	bl	801f1a0 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 802079c:	2100      	movs	r1, #0
 802079e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80207a0:	f7fd fb40 	bl	801de24 <settmout>
 80207a4:	e000      	b.n	80207a8 <mg_tcpip_poll+0x3fc>
    if (c->is_udp || c->is_listening || c->is_resolving) continue;
 80207a6:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 80207a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80207ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	f47f af0a 	bne.w	80205ca <mg_tcpip_poll+0x21e>
 80207b6:	e000      	b.n	80207ba <mg_tcpip_poll+0x40e>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80207b8:	bf00      	nop
    }
  }
}
 80207ba:	373c      	adds	r7, #60	@ 0x3c
 80207bc:	46bd      	mov	sp, r7
 80207be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207c0:	20000298 	.word	0x20000298
 80207c4:	08034600 	.word	0x08034600
 80207c8:	08031484 	.word	0x08031484
 80207cc:	08032f1c 	.word	0x08032f1c

080207d0 <mg_tcpip_init>:
  } else {
    ifp->ndrop++;
  }
}

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b084      	sub	sp, #16
 80207d4:	af00      	add	r7, sp, #0
 80207d6:	6078      	str	r0, [r7, #4]
 80207d8:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80207da:	683b      	ldr	r3, [r7, #0]
 80207dc:	781b      	ldrb	r3, [r3, #0]
 80207de:	2b00      	cmp	r3, #0
 80207e0:	d12d      	bne.n	802083e <mg_tcpip_init+0x6e>
 80207e2:	683b      	ldr	r3, [r7, #0]
 80207e4:	785b      	ldrb	r3, [r3, #1]
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d129      	bne.n	802083e <mg_tcpip_init+0x6e>
 80207ea:	683b      	ldr	r3, [r7, #0]
 80207ec:	789b      	ldrb	r3, [r3, #2]
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d125      	bne.n	802083e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80207f2:	683b      	ldr	r3, [r7, #0]
 80207f4:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d121      	bne.n	802083e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 80207fa:	683b      	ldr	r3, [r7, #0]
 80207fc:	791b      	ldrb	r3, [r3, #4]
 80207fe:	2b00      	cmp	r3, #0
 8020800:	d11d      	bne.n	802083e <mg_tcpip_init+0x6e>
 8020802:	683b      	ldr	r3, [r7, #0]
 8020804:	795b      	ldrb	r3, [r3, #5]
 8020806:	2b00      	cmp	r3, #0
 8020808:	d119      	bne.n	802083e <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 802080a:	683b      	ldr	r3, [r7, #0]
 802080c:	2202      	movs	r2, #2
 802080e:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8020810:	683b      	ldr	r3, [r7, #0]
 8020812:	3301      	adds	r3, #1
 8020814:	2105      	movs	r1, #5
 8020816:	4618      	mov	r0, r3
 8020818:	f002 f8b7 	bl	802298a <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 802081c:	4b51      	ldr	r3, [pc, #324]	@ (8020964 <mg_tcpip_init+0x194>)
 802081e:	681b      	ldr	r3, [r3, #0]
 8020820:	2b01      	cmp	r3, #1
 8020822:	dd0c      	ble.n	802083e <mg_tcpip_init+0x6e>
 8020824:	4b50      	ldr	r3, [pc, #320]	@ (8020968 <mg_tcpip_init+0x198>)
 8020826:	f241 721f 	movw	r2, #5919	@ 0x171f
 802082a:	4950      	ldr	r1, [pc, #320]	@ (802096c <mg_tcpip_init+0x19c>)
 802082c:	2002      	movs	r0, #2
 802082e:	f7fa fc85 	bl	801b13c <mg_log_prefix>
 8020832:	683b      	ldr	r3, [r7, #0]
 8020834:	461a      	mov	r2, r3
 8020836:	494e      	ldr	r1, [pc, #312]	@ (8020970 <mg_tcpip_init+0x1a0>)
 8020838:	484e      	ldr	r0, [pc, #312]	@ (8020974 <mg_tcpip_init+0x1a4>)
 802083a:	f7fa fccf 	bl	801b1dc <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 802083e:	683b      	ldr	r3, [r7, #0]
 8020840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020842:	681b      	ldr	r3, [r3, #0]
 8020844:	2b00      	cmp	r3, #0
 8020846:	d019      	beq.n	802087c <mg_tcpip_init+0xac>
 8020848:	683b      	ldr	r3, [r7, #0]
 802084a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802084c:	681b      	ldr	r3, [r3, #0]
 802084e:	6838      	ldr	r0, [r7, #0]
 8020850:	4798      	blx	r3
 8020852:	4603      	mov	r3, r0
 8020854:	f083 0301 	eor.w	r3, r3, #1
 8020858:	b2db      	uxtb	r3, r3
 802085a:	2b00      	cmp	r3, #0
 802085c:	d00e      	beq.n	802087c <mg_tcpip_init+0xac>
    MG_ERROR(("driver init failed"));
 802085e:	4b41      	ldr	r3, [pc, #260]	@ (8020964 <mg_tcpip_init+0x194>)
 8020860:	681b      	ldr	r3, [r3, #0]
 8020862:	2b00      	cmp	r3, #0
 8020864:	dd7a      	ble.n	802095c <mg_tcpip_init+0x18c>
 8020866:	4b40      	ldr	r3, [pc, #256]	@ (8020968 <mg_tcpip_init+0x198>)
 8020868:	f241 7223 	movw	r2, #5923	@ 0x1723
 802086c:	493f      	ldr	r1, [pc, #252]	@ (802096c <mg_tcpip_init+0x19c>)
 802086e:	2001      	movs	r0, #1
 8020870:	f7fa fc64 	bl	801b13c <mg_log_prefix>
 8020874:	4840      	ldr	r0, [pc, #256]	@ (8020978 <mg_tcpip_init+0x1a8>)
 8020876:	f7fa fcb1 	bl	801b1dc <mg_log>
 802087a:	e06f      	b.n	802095c <mg_tcpip_init+0x18c>
  } else {
    size_t framesize = 1540;
 802087c:	f240 6304 	movw	r3, #1540	@ 0x604
 8020880:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 8020882:	68f9      	ldr	r1, [r7, #12]
 8020884:	2001      	movs	r0, #1
 8020886:	f7f4 fa93 	bl	8014db0 <mg_calloc>
 802088a:	4602      	mov	r2, r0
 802088c:	683b      	ldr	r3, [r7, #0]
 802088e:	615a      	str	r2, [r3, #20]
 8020890:	683b      	ldr	r3, [r7, #0]
 8020892:	68fa      	ldr	r2, [r7, #12]
 8020894:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8020896:	683b      	ldr	r3, [r7, #0]
 8020898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802089a:	2b00      	cmp	r3, #0
 802089c:	d10a      	bne.n	80208b4 <mg_tcpip_init+0xe4>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 802089e:	683b      	ldr	r3, [r7, #0]
 80208a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80208a2:	689b      	ldr	r3, [r3, #8]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d001      	beq.n	80208ac <mg_tcpip_init+0xdc>
 80208a8:	68fb      	ldr	r3, [r7, #12]
 80208aa:	e001      	b.n	80208b0 <mg_tcpip_init+0xe0>
 80208ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80208b0:	683a      	ldr	r2, [r7, #0]
 80208b2:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 80208b4:	683b      	ldr	r3, [r7, #0]
 80208b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80208b8:	4619      	mov	r1, r3
 80208ba:	2001      	movs	r0, #1
 80208bc:	f7f4 fa78 	bl	8014db0 <mg_calloc>
 80208c0:	4602      	mov	r2, r0
 80208c2:	683b      	ldr	r3, [r7, #0]
 80208c4:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 80208c6:	f002 f971 	bl	8022bac <mg_millis>
 80208ca:	4602      	mov	r2, r0
 80208cc:	460b      	mov	r3, r1
 80208ce:	6839      	ldr	r1, [r7, #0]
 80208d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    mgr->priv = ifp;
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	683a      	ldr	r2, [r7, #0]
 80208d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    ifp->mgr = mgr;
 80208da:	683b      	ldr	r3, [r7, #0]
 80208dc:	687a      	ldr	r2, [r7, #4]
 80208de:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 80208e0:	683b      	ldr	r3, [r7, #0]
 80208e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80208e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mgr->extraconnsize = sizeof(struct connstate);
 80208ea:	687b      	ldr	r3, [r7, #4]
 80208ec:	2230      	movs	r2, #48	@ 0x30
 80208ee:	641a      	str	r2, [r3, #64]	@ 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 80208f0:	683b      	ldr	r3, [r7, #0]
 80208f2:	689b      	ldr	r3, [r3, #8]
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d102      	bne.n	80208fe <mg_tcpip_init+0x12e>
 80208f8:	683b      	ldr	r3, [r7, #0]
 80208fa:	2201      	movs	r2, #1
 80208fc:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 80208fe:	683b      	ldr	r3, [r7, #0]
 8020900:	3346      	adds	r3, #70	@ 0x46
 8020902:	2206      	movs	r2, #6
 8020904:	21ff      	movs	r1, #255	@ 0xff
 8020906:	4618      	mov	r0, r3
 8020908:	f005 fa22 	bl	8025d50 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 802090c:	683b      	ldr	r3, [r7, #0]
 802090e:	3368      	adds	r3, #104	@ 0x68
 8020910:	2102      	movs	r1, #2
 8020912:	4618      	mov	r0, r3
 8020914:	f002 f839 	bl	802298a <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8020918:	683b      	ldr	r3, [r7, #0]
 802091a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 802091e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8020922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8020926:	b29a      	uxth	r2, r3
 8020928:	683b      	ldr	r3, [r7, #0]
 802092a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 802092e:	683b      	ldr	r3, [r7, #0]
 8020930:	695b      	ldr	r3, [r3, #20]
 8020932:	2b00      	cmp	r3, #0
 8020934:	d003      	beq.n	802093e <mg_tcpip_init+0x16e>
 8020936:	683b      	ldr	r3, [r7, #0]
 8020938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802093a:	2b00      	cmp	r3, #0
 802093c:	d10e      	bne.n	802095c <mg_tcpip_init+0x18c>
 802093e:	4b09      	ldr	r3, [pc, #36]	@ (8020964 <mg_tcpip_init+0x194>)
 8020940:	681b      	ldr	r3, [r3, #0]
 8020942:	2b00      	cmp	r3, #0
 8020944:	dd0a      	ble.n	802095c <mg_tcpip_init+0x18c>
 8020946:	4b08      	ldr	r3, [pc, #32]	@ (8020968 <mg_tcpip_init+0x198>)
 8020948:	f241 7234 	movw	r2, #5940	@ 0x1734
 802094c:	4907      	ldr	r1, [pc, #28]	@ (802096c <mg_tcpip_init+0x19c>)
 802094e:	2001      	movs	r0, #1
 8020950:	f7fa fbf4 	bl	801b13c <mg_log_prefix>
 8020954:	4809      	ldr	r0, [pc, #36]	@ (802097c <mg_tcpip_init+0x1ac>)
 8020956:	f7fa fc41 	bl	801b1dc <mg_log>
  }
}
 802095a:	e7ff      	b.n	802095c <mg_tcpip_init+0x18c>
 802095c:	bf00      	nop
 802095e:	3710      	adds	r7, #16
 8020960:	46bd      	mov	sp, r7
 8020962:	bd80      	pop	{r7, pc}
 8020964:	20000298 	.word	0x20000298
 8020968:	08034610 	.word	0x08034610
 802096c:	08031484 	.word	0x08031484
 8020970:	080213f1 	.word	0x080213f1
 8020974:	08032f2c 	.word	0x08032f2c
 8020978:	08032f50 	.word	0x08032f50
 802097c:	080329c0 	.word	0x080329c0

08020980 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8020980:	b590      	push	{r4, r7, lr}
 8020982:	b08d      	sub	sp, #52	@ 0x34
 8020984:	af06      	add	r7, sp, #24
 8020986:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8020988:	687b      	ldr	r3, [r7, #4]
 802098a:	33b0      	adds	r3, #176	@ 0xb0
 802098c:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	8b1b      	ldrh	r3, [r3, #24]
 8020992:	4618      	mov	r0, r3
 8020994:	f002 f879 	bl	8022a8a <mg_ntohs>
 8020998:	4603      	mov	r3, r0
 802099a:	4618      	mov	r0, r3
 802099c:	f002 f85c 	bl	8022a58 <mg_ntohl>
 80209a0:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	685b      	ldr	r3, [r3, #4]
 80209a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80209a8:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	331c      	adds	r3, #28
 80209ae:	681b      	ldr	r3, [r3, #0]
 80209b0:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 80209b2:	697b      	ldr	r3, [r7, #20]
 80209b4:	f103 0018 	add.w	r0, r3, #24
 80209b8:	68bc      	ldr	r4, [r7, #8]
 80209ba:	687b      	ldr	r3, [r7, #4]
 80209bc:	8b1b      	ldrh	r3, [r3, #24]
 80209be:	687a      	ldr	r2, [r7, #4]
 80209c0:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80209c2:	2100      	movs	r1, #0
 80209c4:	9105      	str	r1, [sp, #20]
 80209c6:	2100      	movs	r1, #0
 80209c8:	9104      	str	r1, [sp, #16]
 80209ca:	2100      	movs	r1, #0
 80209cc:	9103      	str	r1, [sp, #12]
 80209ce:	6939      	ldr	r1, [r7, #16]
 80209d0:	9102      	str	r1, [sp, #8]
 80209d2:	9201      	str	r2, [sp, #4]
 80209d4:	9300      	str	r3, [sp, #0]
 80209d6:	2302      	movs	r3, #2
 80209d8:	4622      	mov	r2, r4
 80209da:	4601      	mov	r1, r0
 80209dc:	68f8      	ldr	r0, [r7, #12]
 80209de:	f7fe fbdf 	bl	801f1a0 <tx_tcp>
         0);
}
 80209e2:	bf00      	nop
 80209e4:	371c      	adds	r7, #28
 80209e6:	46bd      	mov	sp, r7
 80209e8:	bd90      	pop	{r4, r7, pc}
	...

080209ec <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 80209ec:	b580      	push	{r7, lr}
 80209ee:	b08a      	sub	sp, #40	@ 0x28
 80209f0:	af02      	add	r7, sp, #8
 80209f2:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	685b      	ldr	r3, [r3, #4]
 80209f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80209fa:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80209fc:	687b      	ldr	r3, [r7, #4]
 80209fe:	331c      	adds	r3, #28
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8020a04:	687a      	ldr	r2, [r7, #4]
 8020a06:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8020a0a:	f36f 03c3 	bfc	r3, #3, #1
 8020a0e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8020a12:	69fb      	ldr	r3, [r7, #28]
 8020a14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8020a18:	b21b      	sxth	r3, r3
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	db04      	blt.n	8020a28 <mg_connect_resolved+0x3c>
 8020a1e:	69fb      	ldr	r3, [r7, #28]
 8020a20:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8020a24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	3308      	adds	r3, #8
 8020a2c:	69fa      	ldr	r2, [r7, #28]
 8020a2e:	3208      	adds	r2, #8
 8020a30:	6812      	ldr	r2, [r2, #0]
 8020a32:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8020a34:	69fb      	ldr	r3, [r7, #28]
 8020a36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8020a3a:	1c5a      	adds	r2, r3, #1
 8020a3c:	b291      	uxth	r1, r2
 8020a3e:	69fa      	ldr	r2, [r7, #28]
 8020a40:	f8a2 1068 	strh.w	r1, [r2, #104]	@ 0x68
 8020a44:	4618      	mov	r0, r3
 8020a46:	f002 f820 	bl	8022a8a <mg_ntohs>
 8020a4a:	4603      	mov	r3, r0
 8020a4c:	461a      	mov	r2, r3
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8020a52:	4b6a      	ldr	r3, [pc, #424]	@ (8020bfc <mg_connect_resolved+0x210>)
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	2b02      	cmp	r3, #2
 8020a58:	dd15      	ble.n	8020a86 <mg_connect_resolved+0x9a>
 8020a5a:	4b69      	ldr	r3, [pc, #420]	@ (8020c00 <mg_connect_resolved+0x214>)
 8020a5c:	f241 724f 	movw	r2, #5967	@ 0x174f
 8020a60:	4968      	ldr	r1, [pc, #416]	@ (8020c04 <mg_connect_resolved+0x218>)
 8020a62:	2003      	movs	r0, #3
 8020a64:	f7fa fb6a 	bl	801b13c <mg_log_prefix>
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	f103 0208 	add.w	r2, r3, #8
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	331c      	adds	r3, #28
 8020a76:	9301      	str	r3, [sp, #4]
 8020a78:	4b63      	ldr	r3, [pc, #396]	@ (8020c08 <mg_connect_resolved+0x21c>)
 8020a7a:	9300      	str	r3, [sp, #0]
 8020a7c:	4613      	mov	r3, r2
 8020a7e:	4a62      	ldr	r2, [pc, #392]	@ (8020c08 <mg_connect_resolved+0x21c>)
 8020a80:	4862      	ldr	r0, [pc, #392]	@ (8020c0c <mg_connect_resolved+0x220>)
 8020a82:	f7fa fbab 	bl	801b1dc <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 8020a86:	2200      	movs	r2, #0
 8020a88:	2103      	movs	r1, #3
 8020a8a:	6878      	ldr	r0, [r7, #4]
 8020a8c:	f7f4 ff70 	bl	8015970 <mg_call>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020a96:	f003 0301 	and.w	r3, r3, #1
 8020a9a:	b2db      	uxtb	r3, r3
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d017      	beq.n	8020ad0 <mg_connect_resolved+0xe4>
 8020aa0:	68fb      	ldr	r3, [r7, #12]
 8020aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020aa6:	d008      	beq.n	8020aba <mg_connect_resolved+0xce>
 8020aa8:	69fb      	ldr	r3, [r7, #28]
 8020aaa:	689a      	ldr	r2, [r3, #8]
 8020aac:	69fb      	ldr	r3, [r7, #28]
 8020aae:	68db      	ldr	r3, [r3, #12]
 8020ab0:	43db      	mvns	r3, r3
 8020ab2:	431a      	orrs	r2, r3
 8020ab4:	68fb      	ldr	r3, [r7, #12]
 8020ab6:	429a      	cmp	r2, r3
 8020ab8:	d10a      	bne.n	8020ad0 <mg_connect_resolved+0xe4>
    struct connstate *s = (struct connstate *) (c + 1);
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	33b0      	adds	r3, #176	@ 0xb0
 8020abe:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 8020ac0:	69bb      	ldr	r3, [r7, #24]
 8020ac2:	3318      	adds	r3, #24
 8020ac4:	2206      	movs	r2, #6
 8020ac6:	21ff      	movs	r1, #255	@ 0xff
 8020ac8:	4618      	mov	r0, r3
 8020aca:	f005 f941 	bl	8025d50 <memset>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8020ace:	e091      	b.n	8020bf4 <mg_connect_resolved+0x208>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8020ad0:	69fb      	ldr	r3, [r7, #28]
 8020ad2:	689b      	ldr	r3, [r3, #8]
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	d036      	beq.n	8020b46 <mg_connect_resolved+0x15a>
 8020ad8:	69fb      	ldr	r3, [r7, #28]
 8020ada:	689a      	ldr	r2, [r3, #8]
 8020adc:	68fb      	ldr	r3, [r7, #12]
 8020ade:	405a      	eors	r2, r3
 8020ae0:	69fb      	ldr	r3, [r7, #28]
 8020ae2:	68db      	ldr	r3, [r3, #12]
 8020ae4:	4013      	ands	r3, r2
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d12d      	bne.n	8020b46 <mg_connect_resolved+0x15a>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8020aea:	69fb      	ldr	r3, [r7, #28]
 8020aec:	691a      	ldr	r2, [r3, #16]
 8020aee:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8020af0:	429a      	cmp	r2, r3
 8020af2:	d028      	beq.n	8020b46 <mg_connect_resolved+0x15a>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8020af4:	4b41      	ldr	r3, [pc, #260]	@ (8020bfc <mg_connect_resolved+0x210>)
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	2b02      	cmp	r3, #2
 8020afa:	dd0c      	ble.n	8020b16 <mg_connect_resolved+0x12a>
 8020afc:	4b40      	ldr	r3, [pc, #256]	@ (8020c00 <mg_connect_resolved+0x214>)
 8020afe:	f241 7258 	movw	r2, #5976	@ 0x1758
 8020b02:	4940      	ldr	r1, [pc, #256]	@ (8020c04 <mg_connect_resolved+0x218>)
 8020b04:	2003      	movs	r0, #3
 8020b06:	f7fa fb19 	bl	801b13c <mg_log_prefix>
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020b0e:	4619      	mov	r1, r3
 8020b10:	483f      	ldr	r0, [pc, #252]	@ (8020c10 <mg_connect_resolved+0x224>)
 8020b12:	f7fa fb63 	bl	801b1dc <mg_log>
    arp_ask(ifp, rem_ip);
 8020b16:	68fb      	ldr	r3, [r7, #12]
 8020b18:	4619      	mov	r1, r3
 8020b1a:	69f8      	ldr	r0, [r7, #28]
 8020b1c:	f7fd f9fa 	bl	801df14 <arp_ask>
    settmout(c, MIP_TTYPE_ARP);
 8020b20:	2102      	movs	r1, #2
 8020b22:	6878      	ldr	r0, [r7, #4]
 8020b24:	f7fd f97e 	bl	801de24 <settmout>
    c->is_arplooking = 1;
 8020b28:	687a      	ldr	r2, [r7, #4]
 8020b2a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8020b2e:	f043 0310 	orr.w	r3, r3, #16
 8020b32:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_connecting = 1;
 8020b36:	687a      	ldr	r2, [r7, #4]
 8020b38:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8020b3c:	f043 0320 	orr.w	r3, r3, #32
 8020b40:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8020b44:	e056      	b.n	8020bf4 <mg_connect_resolved+0x208>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8020b46:	f107 030c 	add.w	r3, r7, #12
 8020b4a:	781b      	ldrb	r3, [r3, #0]
 8020b4c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8020b50:	2be0      	cmp	r3, #224	@ 0xe0
 8020b52:	d126      	bne.n	8020ba2 <mg_connect_resolved+0x1b6>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	33b0      	adds	r3, #176	@ 0xb0
 8020b58:	613b      	str	r3, [r7, #16]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 8020b5a:	4a2e      	ldr	r2, [pc, #184]	@ (8020c14 <mg_connect_resolved+0x228>)
 8020b5c:	f107 0308 	add.w	r3, r7, #8
 8020b60:	6812      	ldr	r2, [r2, #0]
 8020b62:	4611      	mov	r1, r2
 8020b64:	8019      	strh	r1, [r3, #0]
 8020b66:	3302      	adds	r3, #2
 8020b68:	0c12      	lsrs	r2, r2, #16
 8020b6a:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 8020b6c:	693b      	ldr	r3, [r7, #16]
 8020b6e:	3318      	adds	r3, #24
 8020b70:	461a      	mov	r2, r3
 8020b72:	f107 0308 	add.w	r3, r7, #8
 8020b76:	8819      	ldrh	r1, [r3, #0]
 8020b78:	789b      	ldrb	r3, [r3, #2]
 8020b7a:	8011      	strh	r1, [r2, #0]
 8020b7c:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 8020b7e:	693b      	ldr	r3, [r7, #16]
 8020b80:	3318      	adds	r3, #24
 8020b82:	1cd8      	adds	r0, r3, #3
 8020b84:	f107 030c 	add.w	r3, r7, #12
 8020b88:	3301      	adds	r3, #1
 8020b8a:	2203      	movs	r2, #3
 8020b8c:	4619      	mov	r1, r3
 8020b8e:	f006 fb1b 	bl	80271c8 <memcpy>
    s->mac[3] &= 0x7F;
 8020b92:	693b      	ldr	r3, [r7, #16]
 8020b94:	7edb      	ldrb	r3, [r3, #27]
 8020b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020b9a:	b2da      	uxtb	r2, r3
 8020b9c:	693b      	ldr	r3, [r7, #16]
 8020b9e:	76da      	strb	r2, [r3, #27]
      send_syn(c);
      settmout(c, MIP_TTYPE_SYN);
      c->is_connecting = 1;
    }
  }
}
 8020ba0:	e028      	b.n	8020bf4 <mg_connect_resolved+0x208>
    struct connstate *s = (struct connstate *) (c + 1);
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	33b0      	adds	r3, #176	@ 0xb0
 8020ba6:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8020ba8:	697b      	ldr	r3, [r7, #20]
 8020baa:	f103 0018 	add.w	r0, r3, #24
 8020bae:	69fb      	ldr	r3, [r7, #28]
 8020bb0:	3346      	adds	r3, #70	@ 0x46
 8020bb2:	2206      	movs	r2, #6
 8020bb4:	4619      	mov	r1, r3
 8020bb6:	f006 fb07 	bl	80271c8 <memcpy>
    if (c->is_udp) {
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020bc0:	f003 0301 	and.w	r3, r3, #1
 8020bc4:	b2db      	uxtb	r3, r3
 8020bc6:	2b00      	cmp	r3, #0
 8020bc8:	d005      	beq.n	8020bd6 <mg_connect_resolved+0x1ea>
      mg_call(c, MG_EV_CONNECT, NULL);
 8020bca:	2200      	movs	r2, #0
 8020bcc:	2104      	movs	r1, #4
 8020bce:	6878      	ldr	r0, [r7, #4]
 8020bd0:	f7f4 fece 	bl	8015970 <mg_call>
}
 8020bd4:	e00e      	b.n	8020bf4 <mg_connect_resolved+0x208>
      send_syn(c);
 8020bd6:	6878      	ldr	r0, [r7, #4]
 8020bd8:	f7ff fed2 	bl	8020980 <send_syn>
      settmout(c, MIP_TTYPE_SYN);
 8020bdc:	2103      	movs	r1, #3
 8020bde:	6878      	ldr	r0, [r7, #4]
 8020be0:	f7fd f920 	bl	801de24 <settmout>
      c->is_connecting = 1;
 8020be4:	687a      	ldr	r2, [r7, #4]
 8020be6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8020bea:	f043 0320 	orr.w	r3, r3, #32
 8020bee:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
}
 8020bf2:	e7ff      	b.n	8020bf4 <mg_connect_resolved+0x208>
 8020bf4:	bf00      	nop
 8020bf6:	3720      	adds	r7, #32
 8020bf8:	46bd      	mov	sp, r7
 8020bfa:	bd80      	pop	{r7, pc}
 8020bfc:	20000298 	.word	0x20000298
 8020c00:	08034620 	.word	0x08034620
 8020c04:	08031484 	.word	0x08031484
 8020c08:	080213a5 	.word	0x080213a5
 8020c0c:	08032f64 	.word	0x08032f64
 8020c10:	08032f74 	.word	0x08032f74
 8020c14:	08032f88 	.word	0x08032f88

08020c18 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8020c18:	b580      	push	{r7, lr}
 8020c1a:	b082      	sub	sp, #8
 8020c1c:	af00      	add	r7, sp, #0
 8020c1e:	6078      	str	r0, [r7, #4]
 8020c20:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8020c22:	6838      	ldr	r0, [r7, #0]
 8020c24:	f001 fe34 	bl	8022890 <mg_url_port>
 8020c28:	4603      	mov	r3, r0
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	f001 ff2d 	bl	8022a8a <mg_ntohs>
 8020c30:	4603      	mov	r3, r0
 8020c32:	461a      	mov	r2, r3
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	831a      	strh	r2, [r3, #24]
  return true;
 8020c38:	2301      	movs	r3, #1
}
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	3708      	adds	r7, #8
 8020c3e:	46bd      	mov	sp, r7
 8020c40:	bd80      	pop	{r7, pc}
	...

08020c44 <write_conn>:

static void write_conn(struct mg_connection *c) {
 8020c44:	b580      	push	{r7, lr}
 8020c46:	b084      	sub	sp, #16
 8020c48:	af00      	add	r7, sp, #0
 8020c4a:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8020c4c:	687b      	ldr	r3, [r7, #4]
 8020c4e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020c56:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d009      	beq.n	8020c70 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8020c60:	687b      	ldr	r3, [r7, #4]
 8020c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020c64:	461a      	mov	r2, r3
 8020c66:	6878      	ldr	r0, [r7, #4]
 8020c68:	f001 fce7 	bl	802263a <mg_tls_send>
 8020c6c:	4603      	mov	r3, r0
 8020c6e:	e008      	b.n	8020c82 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020c78:	461a      	mov	r2, r3
 8020c7a:	6878      	ldr	r0, [r7, #4]
 8020c7c:	f7fe fce8 	bl	801f650 <mg_io_send>
 8020c80:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8020c82:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8020c84:	68fb      	ldr	r3, [r7, #12]
 8020c86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020c8a:	d104      	bne.n	8020c96 <write_conn+0x52>
    mg_error(c, "tx err");
 8020c8c:	490c      	ldr	r1, [pc, #48]	@ (8020cc0 <write_conn+0x7c>)
 8020c8e:	6878      	ldr	r0, [r7, #4]
 8020c90:	f7f4 fe8e 	bl	80159b0 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8020c94:	e010      	b.n	8020cb8 <write_conn+0x74>
  } else if (len > 0) {
 8020c96:	68fb      	ldr	r3, [r7, #12]
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	dd0d      	ble.n	8020cb8 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	3348      	adds	r3, #72	@ 0x48
 8020ca0:	68fa      	ldr	r2, [r7, #12]
 8020ca2:	2100      	movs	r1, #0
 8020ca4:	4618      	mov	r0, r3
 8020ca6:	f7f9 fb37 	bl	801a318 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8020caa:	f107 030c 	add.w	r3, r7, #12
 8020cae:	461a      	mov	r2, r3
 8020cb0:	2108      	movs	r1, #8
 8020cb2:	6878      	ldr	r0, [r7, #4]
 8020cb4:	f7f4 fe5c 	bl	8015970 <mg_call>
}
 8020cb8:	bf00      	nop
 8020cba:	3710      	adds	r7, #16
 8020cbc:	46bd      	mov	sp, r7
 8020cbe:	bd80      	pop	{r7, pc}
 8020cc0:	08032f8c 	.word	0x08032f8c

08020cc4 <init_closure>:

static void init_closure(struct mg_connection *c) {
 8020cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020cc6:	b08f      	sub	sp, #60	@ 0x3c
 8020cc8:	af06      	add	r7, sp, #24
 8020cca:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 8020ccc:	68fb      	ldr	r3, [r7, #12]
 8020cce:	33b0      	adds	r3, #176	@ 0xb0
 8020cd0:	61fb      	str	r3, [r7, #28]
  if (c->is_udp == false && c->is_listening == false &&
 8020cd2:	68fb      	ldr	r3, [r7, #12]
 8020cd4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020cd8:	f003 0301 	and.w	r3, r3, #1
 8020cdc:	b2db      	uxtb	r3, r3
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d13f      	bne.n	8020d62 <init_closure+0x9e>
 8020ce2:	68fb      	ldr	r3, [r7, #12]
 8020ce4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020ce8:	f003 0301 	and.w	r3, r3, #1
 8020cec:	b2db      	uxtb	r3, r3
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d137      	bne.n	8020d62 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8020cf2:	68fb      	ldr	r3, [r7, #12]
 8020cf4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020cf8:	f003 0320 	and.w	r3, r3, #32
 8020cfc:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d12f      	bne.n	8020d62 <init_closure+0x9e>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 8020d02:	68fb      	ldr	r3, [r7, #12]
 8020d04:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 8020d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020d08:	61bb      	str	r3, [r7, #24]
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020d0a:	68fb      	ldr	r3, [r7, #12]
 8020d0c:	331c      	adds	r3, #28
 8020d0e:	681b      	ldr	r3, [r3, #0]
 8020d10:	617b      	str	r3, [r7, #20]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 8020d12:	69fb      	ldr	r3, [r7, #28]
 8020d14:	f103 0618 	add.w	r6, r3, #24
 8020d18:	697b      	ldr	r3, [r7, #20]
 8020d1a:	60bb      	str	r3, [r7, #8]
 8020d1c:	68fb      	ldr	r3, [r7, #12]
 8020d1e:	8b1c      	ldrh	r4, [r3, #24]
 8020d20:	68fb      	ldr	r3, [r7, #12]
 8020d22:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8020d24:	69fb      	ldr	r3, [r7, #28]
 8020d26:	681b      	ldr	r3, [r3, #0]
 8020d28:	4618      	mov	r0, r3
 8020d2a:	f001 fe95 	bl	8022a58 <mg_ntohl>
 8020d2e:	6078      	str	r0, [r7, #4]
 8020d30:	69fb      	ldr	r3, [r7, #28]
 8020d32:	685b      	ldr	r3, [r3, #4]
 8020d34:	4618      	mov	r0, r3
 8020d36:	f001 fe8f 	bl	8022a58 <mg_ntohl>
 8020d3a:	4603      	mov	r3, r0
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	9205      	str	r2, [sp, #20]
 8020d40:	2200      	movs	r2, #0
 8020d42:	9204      	str	r2, [sp, #16]
 8020d44:	9303      	str	r3, [sp, #12]
 8020d46:	6879      	ldr	r1, [r7, #4]
 8020d48:	9102      	str	r1, [sp, #8]
 8020d4a:	9501      	str	r5, [sp, #4]
 8020d4c:	9400      	str	r4, [sp, #0]
 8020d4e:	2311      	movs	r3, #17
 8020d50:	68ba      	ldr	r2, [r7, #8]
 8020d52:	4631      	mov	r1, r6
 8020d54:	69b8      	ldr	r0, [r7, #24]
 8020d56:	f7fe fa23 	bl	801f1a0 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8020d5a:	2104      	movs	r1, #4
 8020d5c:	68f8      	ldr	r0, [r7, #12]
 8020d5e:	f7fd f861 	bl	801de24 <settmout>
  }
}
 8020d62:	bf00      	nop
 8020d64:	3724      	adds	r7, #36	@ 0x24
 8020d66:	46bd      	mov	sp, r7
 8020d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020d6a <close_conn>:

static void close_conn(struct mg_connection *c) {
 8020d6a:	b580      	push	{r7, lr}
 8020d6c:	b084      	sub	sp, #16
 8020d6e:	af00      	add	r7, sp, #0
 8020d70:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	33b0      	adds	r3, #176	@ 0xb0
 8020d76:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8020d78:	68fb      	ldr	r3, [r7, #12]
 8020d7a:	3320      	adds	r3, #32
 8020d7c:	4618      	mov	r0, r3
 8020d7e:	f7f9 fb16 	bl	801a3ae <mg_iobuf_free>
  mg_close_conn(c);
 8020d82:	6878      	ldr	r0, [r7, #4]
 8020d84:	f7fc fddc 	bl	801d940 <mg_close_conn>
}
 8020d88:	bf00      	nop
 8020d8a:	3710      	adds	r7, #16
 8020d8c:	46bd      	mov	sp, r7
 8020d8e:	bd80      	pop	{r7, pc}

08020d90 <can_write>:

static bool can_write(struct mg_connection *c) {
 8020d90:	b480      	push	{r7}
 8020d92:	b083      	sub	sp, #12
 8020d94:	af00      	add	r7, sp, #0
 8020d96:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020d9e:	f003 0320 	and.w	r3, r3, #32
 8020da2:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d11d      	bne.n	8020de4 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020dae:	f003 0308 	and.w	r3, r3, #8
 8020db2:	b2db      	uxtb	r3, r3
 8020db4:	2b00      	cmp	r3, #0
 8020db6:	d115      	bne.n	8020de4 <can_write+0x54>
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d011      	beq.n	8020de4 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020dc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8020dca:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	d109      	bne.n	8020de4 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020dd6:	f003 0310 	and.w	r3, r3, #16
 8020dda:	b2db      	uxtb	r3, r3
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d101      	bne.n	8020de4 <can_write+0x54>
 8020de0:	2301      	movs	r3, #1
 8020de2:	e000      	b.n	8020de6 <can_write+0x56>
 8020de4:	2300      	movs	r3, #0
 8020de6:	f003 0301 	and.w	r3, r3, #1
 8020dea:	b2db      	uxtb	r3, r3
}
 8020dec:	4618      	mov	r0, r3
 8020dee:	370c      	adds	r7, #12
 8020df0:	46bd      	mov	sp, r7
 8020df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020df6:	4770      	bx	lr

08020df8 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8020df8:	b5b0      	push	{r4, r5, r7, lr}
 8020dfa:	b08c      	sub	sp, #48	@ 0x30
 8020dfc:	af04      	add	r7, sp, #16
 8020dfe:	6078      	str	r0, [r7, #4]
 8020e00:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) mgr->priv;
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020e06:	61bb      	str	r3, [r7, #24]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8020e08:	f001 fed0 	bl	8022bac <mg_millis>
 8020e0c:	4602      	mov	r2, r0
 8020e0e:	460b      	mov	r3, r1
 8020e10:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_timer_poll(&mgr->timers, now);
 8020e14:	687b      	ldr	r3, [r7, #4]
 8020e16:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8020e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020e1e:	4608      	mov	r0, r1
 8020e20:	f001 fb77 	bl	8022512 <mg_timer_poll>
  if (ifp == NULL || ifp->driver == NULL) return;
 8020e24:	69bb      	ldr	r3, [r7, #24]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	f000 80aa 	beq.w	8020f80 <mg_mgr_poll+0x188>
 8020e2c:	69bb      	ldr	r3, [r7, #24]
 8020e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	f000 80a5 	beq.w	8020f80 <mg_mgr_poll+0x188>
  mg_tcpip_poll(ifp, now);
 8020e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020e3a:	69b8      	ldr	r0, [r7, #24]
 8020e3c:	f7ff fab6 	bl	80203ac <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	61fb      	str	r3, [r7, #28]
 8020e46:	e096      	b.n	8020f76 <mg_mgr_poll+0x17e>
    tmp = c->next;
 8020e48:	69fb      	ldr	r3, [r7, #28]
 8020e4a:	681b      	ldr	r3, [r3, #0]
 8020e4c:	617b      	str	r3, [r7, #20]
    struct connstate *s = (struct connstate *) (c + 1);
 8020e4e:	69fb      	ldr	r3, [r7, #28]
 8020e50:	33b0      	adds	r3, #176	@ 0xb0
 8020e52:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 8020e54:	f107 0308 	add.w	r3, r7, #8
 8020e58:	461a      	mov	r2, r3
 8020e5a:	2102      	movs	r1, #2
 8020e5c:	69f8      	ldr	r0, [r7, #28]
 8020e5e:	f7f4 fd87 	bl	8015970 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 8020e62:	4b49      	ldr	r3, [pc, #292]	@ (8020f88 <mg_mgr_poll+0x190>)
 8020e64:	681b      	ldr	r3, [r3, #0]
 8020e66:	2b03      	cmp	r3, #3
 8020e68:	dd48      	ble.n	8020efc <mg_mgr_poll+0x104>
 8020e6a:	4b48      	ldr	r3, [pc, #288]	@ (8020f8c <mg_mgr_poll+0x194>)
 8020e6c:	f241 72a4 	movw	r2, #6052	@ 0x17a4
 8020e70:	4947      	ldr	r1, [pc, #284]	@ (8020f90 <mg_mgr_poll+0x198>)
 8020e72:	2004      	movs	r0, #4
 8020e74:	f7fa f962 	bl	801b13c <mg_log_prefix>
 8020e78:	69fb      	ldr	r3, [r7, #28]
 8020e7a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8020e7c:	69fb      	ldr	r3, [r7, #28]
 8020e7e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020e86:	b2db      	uxtb	r3, r3
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	d001      	beq.n	8020e90 <mg_mgr_poll+0x98>
 8020e8c:	2454      	movs	r4, #84	@ 0x54
 8020e8e:	e000      	b.n	8020e92 <mg_mgr_poll+0x9a>
 8020e90:	2474      	movs	r4, #116	@ 0x74
 8020e92:	69fb      	ldr	r3, [r7, #28]
 8020e94:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020e98:	f003 0320 	and.w	r3, r3, #32
 8020e9c:	b2db      	uxtb	r3, r3
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d001      	beq.n	8020ea6 <mg_mgr_poll+0xae>
 8020ea2:	2543      	movs	r5, #67	@ 0x43
 8020ea4:	e000      	b.n	8020ea8 <mg_mgr_poll+0xb0>
 8020ea6:	2563      	movs	r5, #99	@ 0x63
 8020ea8:	69fb      	ldr	r3, [r7, #28]
 8020eaa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020eae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8020eb2:	b2db      	uxtb	r3, r3
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d001      	beq.n	8020ebc <mg_mgr_poll+0xc4>
 8020eb8:	2348      	movs	r3, #72	@ 0x48
 8020eba:	e000      	b.n	8020ebe <mg_mgr_poll+0xc6>
 8020ebc:	2368      	movs	r3, #104	@ 0x68
 8020ebe:	69fa      	ldr	r2, [r7, #28]
 8020ec0:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 8020ec4:	f002 0208 	and.w	r2, r2, #8
 8020ec8:	b2d2      	uxtb	r2, r2
 8020eca:	2a00      	cmp	r2, #0
 8020ecc:	d001      	beq.n	8020ed2 <mg_mgr_poll+0xda>
 8020ece:	2252      	movs	r2, #82	@ 0x52
 8020ed0:	e000      	b.n	8020ed4 <mg_mgr_poll+0xdc>
 8020ed2:	2272      	movs	r2, #114	@ 0x72
 8020ed4:	69f9      	ldr	r1, [r7, #28]
 8020ed6:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 8020eda:	f001 0120 	and.w	r1, r1, #32
 8020ede:	b2c9      	uxtb	r1, r1
 8020ee0:	2900      	cmp	r1, #0
 8020ee2:	d001      	beq.n	8020ee8 <mg_mgr_poll+0xf0>
 8020ee4:	2143      	movs	r1, #67	@ 0x43
 8020ee6:	e000      	b.n	8020eea <mg_mgr_poll+0xf2>
 8020ee8:	2163      	movs	r1, #99	@ 0x63
 8020eea:	9102      	str	r1, [sp, #8]
 8020eec:	9201      	str	r2, [sp, #4]
 8020eee:	9300      	str	r3, [sp, #0]
 8020ef0:	462b      	mov	r3, r5
 8020ef2:	4622      	mov	r2, r4
 8020ef4:	4601      	mov	r1, r0
 8020ef6:	4827      	ldr	r0, [pc, #156]	@ (8020f94 <mg_mgr_poll+0x19c>)
 8020ef8:	f7fa f970 	bl	801b1dc <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls && mg_tls_pending(c) > 0)
 8020efc:	69fb      	ldr	r3, [r7, #28]
 8020efe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8020f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020f06:	b2db      	uxtb	r3, r3
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d00b      	beq.n	8020f24 <mg_mgr_poll+0x12c>
 8020f0c:	69f8      	ldr	r0, [r7, #28]
 8020f0e:	f001 fbad 	bl	802266c <mg_tls_pending>
 8020f12:	4603      	mov	r3, r0
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d005      	beq.n	8020f24 <mg_mgr_poll+0x12c>
      handle_tls_recv(c, (struct mg_iobuf *) &c->rtls);
 8020f18:	69fb      	ldr	r3, [r7, #28]
 8020f1a:	3368      	adds	r3, #104	@ 0x68
 8020f1c:	4619      	mov	r1, r3
 8020f1e:	69f8      	ldr	r0, [r7, #28]
 8020f20:	f7fe fc0e 	bl	801f740 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8020f24:	69f8      	ldr	r0, [r7, #28]
 8020f26:	f7ff ff33 	bl	8020d90 <can_write>
 8020f2a:	4603      	mov	r3, r0
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d002      	beq.n	8020f36 <mg_mgr_poll+0x13e>
 8020f30:	69f8      	ldr	r0, [r7, #28]
 8020f32:	f7ff fe87 	bl	8020c44 <write_conn>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8020f36:	69fb      	ldr	r3, [r7, #28]
 8020f38:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020f3c:	f003 0310 	and.w	r3, r3, #16
 8020f40:	b2db      	uxtb	r3, r3
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d00a      	beq.n	8020f5c <mg_mgr_poll+0x164>
 8020f46:	69fb      	ldr	r3, [r7, #28]
 8020f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020f4a:	2b00      	cmp	r3, #0
 8020f4c:	d106      	bne.n	8020f5c <mg_mgr_poll+0x164>
 8020f4e:	693b      	ldr	r3, [r7, #16]
 8020f50:	7f9b      	ldrb	r3, [r3, #30]
 8020f52:	2b04      	cmp	r3, #4
 8020f54:	d002      	beq.n	8020f5c <mg_mgr_poll+0x164>
      init_closure(c);
 8020f56:	69f8      	ldr	r0, [r7, #28]
 8020f58:	f7ff feb4 	bl	8020cc4 <init_closure>
    if (c->is_closing) close_conn(c);
 8020f5c:	69fb      	ldr	r3, [r7, #28]
 8020f5e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020f62:	f003 0320 	and.w	r3, r3, #32
 8020f66:	b2db      	uxtb	r3, r3
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d002      	beq.n	8020f72 <mg_mgr_poll+0x17a>
 8020f6c:	69f8      	ldr	r0, [r7, #28]
 8020f6e:	f7ff fefc 	bl	8020d6a <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8020f72:	697b      	ldr	r3, [r7, #20]
 8020f74:	61fb      	str	r3, [r7, #28]
 8020f76:	69fb      	ldr	r3, [r7, #28]
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	f47f af65 	bne.w	8020e48 <mg_mgr_poll+0x50>
 8020f7e:	e000      	b.n	8020f82 <mg_mgr_poll+0x18a>
  if (ifp == NULL || ifp->driver == NULL) return;
 8020f80:	bf00      	nop
  }
  (void) ms;
}
 8020f82:	3720      	adds	r7, #32
 8020f84:	46bd      	mov	sp, r7
 8020f86:	bdb0      	pop	{r4, r5, r7, pc}
 8020f88:	20000298 	.word	0x20000298
 8020f8c:	08034634 	.word	0x08034634
 8020f90:	08031484 	.word	0x08031484
 8020f94:	08032f94 	.word	0x08032f94

08020f98 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8020f98:	b5b0      	push	{r4, r5, r7, lr}
 8020f9a:	b08c      	sub	sp, #48	@ 0x30
 8020f9c:	af04      	add	r7, sp, #16
 8020f9e:	60f8      	str	r0, [r7, #12]
 8020fa0:	60b9      	str	r1, [r7, #8]
 8020fa2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 8020fa4:	68fb      	ldr	r3, [r7, #12]
 8020fa6:	685b      	ldr	r3, [r3, #4]
 8020fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020faa:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8020fac:	2300      	movs	r3, #0
 8020fae:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8020fb0:	68fb      	ldr	r3, [r7, #12]
 8020fb2:	331c      	adds	r3, #28
 8020fb4:	681b      	ldr	r3, [r3, #0]
 8020fb6:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8020fb8:	69bb      	ldr	r3, [r7, #24]
 8020fba:	689b      	ldr	r3, [r3, #8]
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	d004      	beq.n	8020fca <mg_send+0x32>
 8020fc0:	69bb      	ldr	r3, [r7, #24]
 8020fc2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8020fc6:	2b03      	cmp	r3, #3
 8020fc8:	d004      	beq.n	8020fd4 <mg_send+0x3c>
    mg_error(c, "net down");
 8020fca:	4921      	ldr	r1, [pc, #132]	@ (8021050 <mg_send+0xb8>)
 8020fcc:	68f8      	ldr	r0, [r7, #12]
 8020fce:	f7f4 fcef 	bl	80159b0 <mg_error>
 8020fd2:	e037      	b.n	8021044 <mg_send+0xac>
  } else if (c->is_udp) {
 8020fd4:	68fb      	ldr	r3, [r7, #12]
 8020fd6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8020fda:	f003 0301 	and.w	r3, r3, #1
 8020fde:	b2db      	uxtb	r3, r3
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	d020      	beq.n	8021026 <mg_send+0x8e>
    struct connstate *s = (struct connstate *) (c + 1);
 8020fe4:	68fb      	ldr	r3, [r7, #12]
 8020fe6:	33b0      	adds	r3, #176	@ 0xb0
 8020fe8:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8020fea:	6879      	ldr	r1, [r7, #4]
 8020fec:	68f8      	ldr	r0, [r7, #12]
 8020fee:	f7fe faa1 	bl	801f534 <trim_len>
 8020ff2:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8020ff4:	697b      	ldr	r3, [r7, #20]
 8020ff6:	f103 0018 	add.w	r0, r3, #24
 8020ffa:	69bb      	ldr	r3, [r7, #24]
 8020ffc:	689c      	ldr	r4, [r3, #8]
 8020ffe:	68fb      	ldr	r3, [r7, #12]
 8021000:	8b1d      	ldrh	r5, [r3, #24]
 8021002:	693b      	ldr	r3, [r7, #16]
 8021004:	68fa      	ldr	r2, [r7, #12]
 8021006:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8021008:	6879      	ldr	r1, [r7, #4]
 802100a:	9103      	str	r1, [sp, #12]
 802100c:	68b9      	ldr	r1, [r7, #8]
 802100e:	9102      	str	r1, [sp, #8]
 8021010:	9201      	str	r2, [sp, #4]
 8021012:	9300      	str	r3, [sp, #0]
 8021014:	462b      	mov	r3, r5
 8021016:	4622      	mov	r2, r4
 8021018:	4601      	mov	r1, r0
 802101a:	69b8      	ldr	r0, [r7, #24]
 802101c:	f7fd f8c2 	bl	801e1a4 <tx_udp>
    res = true;
 8021020:	2301      	movs	r3, #1
 8021022:	77fb      	strb	r3, [r7, #31]
 8021024:	e00e      	b.n	8021044 <mg_send+0xac>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8021026:	68fb      	ldr	r3, [r7, #12]
 8021028:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 802102c:	68fb      	ldr	r3, [r7, #12]
 802102e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8021030:	687b      	ldr	r3, [r7, #4]
 8021032:	68ba      	ldr	r2, [r7, #8]
 8021034:	f7f9 f91e 	bl	801a274 <mg_iobuf_add>
 8021038:	4603      	mov	r3, r0
 802103a:	2b00      	cmp	r3, #0
 802103c:	bf14      	ite	ne
 802103e:	2301      	movne	r3, #1
 8021040:	2300      	moveq	r3, #0
 8021042:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8021044:	7ffb      	ldrb	r3, [r7, #31]
}
 8021046:	4618      	mov	r0, r3
 8021048:	3720      	adds	r7, #32
 802104a:	46bd      	mov	sp, r7
 802104c:	bdb0      	pop	{r4, r5, r7, pc}
 802104e:	bf00      	nop
 8021050:	08032fa8 	.word	0x08032fa8

08021054 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8021054:	b580      	push	{r7, lr}
 8021056:	b084      	sub	sp, #16
 8021058:	af00      	add	r7, sp, #0
 802105a:	4603      	mov	r3, r0
 802105c:	6039      	str	r1, [r7, #0]
 802105e:	71fb      	strb	r3, [r7, #7]
 8021060:	4613      	mov	r3, r2
 8021062:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8021064:	683b      	ldr	r3, [r7, #0]
 8021066:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8021068:	79bb      	ldrb	r3, [r7, #6]
 802106a:	2b00      	cmp	r3, #0
 802106c:	d00d      	beq.n	802108a <mg_pfn_iobuf_private+0x36>
 802106e:	68fb      	ldr	r3, [r7, #12]
 8021070:	689b      	ldr	r3, [r3, #8]
 8021072:	1c9a      	adds	r2, r3, #2
 8021074:	68fb      	ldr	r3, [r7, #12]
 8021076:	685b      	ldr	r3, [r3, #4]
 8021078:	429a      	cmp	r2, r3
 802107a:	d906      	bls.n	802108a <mg_pfn_iobuf_private+0x36>
 802107c:	68fb      	ldr	r3, [r7, #12]
 802107e:	689b      	ldr	r3, [r3, #8]
 8021080:	3302      	adds	r3, #2
 8021082:	4619      	mov	r1, r3
 8021084:	68f8      	ldr	r0, [r7, #12]
 8021086:	f7f9 f869 	bl	801a15c <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	689b      	ldr	r3, [r3, #8]
 802108e:	1c9a      	adds	r2, r3, #2
 8021090:	68fb      	ldr	r3, [r7, #12]
 8021092:	685b      	ldr	r3, [r3, #4]
 8021094:	429a      	cmp	r2, r3
 8021096:	d811      	bhi.n	80210bc <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8021098:	68fb      	ldr	r3, [r7, #12]
 802109a:	681a      	ldr	r2, [r3, #0]
 802109c:	68fb      	ldr	r3, [r7, #12]
 802109e:	689b      	ldr	r3, [r3, #8]
 80210a0:	1c58      	adds	r0, r3, #1
 80210a2:	68f9      	ldr	r1, [r7, #12]
 80210a4:	6088      	str	r0, [r1, #8]
 80210a6:	4413      	add	r3, r2
 80210a8:	79fa      	ldrb	r2, [r7, #7]
 80210aa:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 80210ac:	68fb      	ldr	r3, [r7, #12]
 80210ae:	681a      	ldr	r2, [r3, #0]
 80210b0:	68fb      	ldr	r3, [r7, #12]
 80210b2:	689b      	ldr	r3, [r3, #8]
 80210b4:	4413      	add	r3, r2
 80210b6:	2200      	movs	r2, #0
 80210b8:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 80210ba:	e00f      	b.n	80210dc <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 80210bc:	68fb      	ldr	r3, [r7, #12]
 80210be:	689a      	ldr	r2, [r3, #8]
 80210c0:	68fb      	ldr	r3, [r7, #12]
 80210c2:	685b      	ldr	r3, [r3, #4]
 80210c4:	429a      	cmp	r2, r3
 80210c6:	d209      	bcs.n	80210dc <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 80210c8:	68fb      	ldr	r3, [r7, #12]
 80210ca:	681a      	ldr	r2, [r3, #0]
 80210cc:	68fb      	ldr	r3, [r7, #12]
 80210ce:	689b      	ldr	r3, [r3, #8]
 80210d0:	1c58      	adds	r0, r3, #1
 80210d2:	68f9      	ldr	r1, [r7, #12]
 80210d4:	6088      	str	r0, [r1, #8]
 80210d6:	4413      	add	r3, r2
 80210d8:	2200      	movs	r2, #0
 80210da:	701a      	strb	r2, [r3, #0]
}
 80210dc:	bf00      	nop
 80210de:	3710      	adds	r7, #16
 80210e0:	46bd      	mov	sp, r7
 80210e2:	bd80      	pop	{r7, pc}

080210e4 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 80210e4:	b580      	push	{r7, lr}
 80210e6:	b082      	sub	sp, #8
 80210e8:	af00      	add	r7, sp, #0
 80210ea:	4603      	mov	r3, r0
 80210ec:	6039      	str	r1, [r7, #0]
 80210ee:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 80210f0:	79fb      	ldrb	r3, [r7, #7]
 80210f2:	2200      	movs	r2, #0
 80210f4:	6839      	ldr	r1, [r7, #0]
 80210f6:	4618      	mov	r0, r3
 80210f8:	f7ff ffac 	bl	8021054 <mg_pfn_iobuf_private>
}
 80210fc:	bf00      	nop
 80210fe:	3708      	adds	r7, #8
 8021100:	46bd      	mov	sp, r7
 8021102:	bd80      	pop	{r7, pc}

08021104 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8021104:	b580      	push	{r7, lr}
 8021106:	b082      	sub	sp, #8
 8021108:	af00      	add	r7, sp, #0
 802110a:	4603      	mov	r3, r0
 802110c:	6039      	str	r1, [r7, #0]
 802110e:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8021110:	79fb      	ldrb	r3, [r7, #7]
 8021112:	2201      	movs	r2, #1
 8021114:	6839      	ldr	r1, [r7, #0]
 8021116:	4618      	mov	r0, r3
 8021118:	f7ff ff9c 	bl	8021054 <mg_pfn_iobuf_private>
}
 802111c:	bf00      	nop
 802111e:	3708      	adds	r7, #8
 8021120:	46bd      	mov	sp, r7
 8021122:	bd80      	pop	{r7, pc}

08021124 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8021124:	b580      	push	{r7, lr}
 8021126:	b08a      	sub	sp, #40	@ 0x28
 8021128:	af00      	add	r7, sp, #0
 802112a:	60f8      	str	r0, [r7, #12]
 802112c:	60b9      	str	r1, [r7, #8]
 802112e:	607a      	str	r2, [r7, #4]
 8021130:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8021132:	68fb      	ldr	r3, [r7, #12]
 8021134:	617b      	str	r3, [r7, #20]
 8021136:	68bb      	ldr	r3, [r7, #8]
 8021138:	61bb      	str	r3, [r7, #24]
 802113a:	2300      	movs	r3, #0
 802113c:	61fb      	str	r3, [r7, #28]
 802113e:	2300      	movs	r3, #0
 8021140:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8021142:	f107 0114 	add.w	r1, r7, #20
 8021146:	683b      	ldr	r3, [r7, #0]
 8021148:	687a      	ldr	r2, [r7, #4]
 802114a:	4809      	ldr	r0, [pc, #36]	@ (8021170 <mg_vsnprintf+0x4c>)
 802114c:	f7f5 f942 	bl	80163d4 <mg_vxprintf>
 8021150:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 8021152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021154:	68bb      	ldr	r3, [r7, #8]
 8021156:	429a      	cmp	r2, r3
 8021158:	d204      	bcs.n	8021164 <mg_vsnprintf+0x40>
 802115a:	68fa      	ldr	r2, [r7, #12]
 802115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802115e:	4413      	add	r3, r2
 8021160:	2200      	movs	r2, #0
 8021162:	701a      	strb	r2, [r3, #0]
  return n;
 8021164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8021166:	4618      	mov	r0, r3
 8021168:	3728      	adds	r7, #40	@ 0x28
 802116a:	46bd      	mov	sp, r7
 802116c:	bd80      	pop	{r7, pc}
 802116e:	bf00      	nop
 8021170:	080210e5 	.word	0x080210e5

08021174 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8021174:	b40c      	push	{r2, r3}
 8021176:	b580      	push	{r7, lr}
 8021178:	b084      	sub	sp, #16
 802117a:	af00      	add	r7, sp, #0
 802117c:	6078      	str	r0, [r7, #4]
 802117e:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8021180:	f107 031c 	add.w	r3, r7, #28
 8021184:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8021186:	f107 0308 	add.w	r3, r7, #8
 802118a:	69ba      	ldr	r2, [r7, #24]
 802118c:	6839      	ldr	r1, [r7, #0]
 802118e:	6878      	ldr	r0, [r7, #4]
 8021190:	f7ff ffc8 	bl	8021124 <mg_vsnprintf>
 8021194:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8021196:	68fb      	ldr	r3, [r7, #12]
}
 8021198:	4618      	mov	r0, r3
 802119a:	3710      	adds	r7, #16
 802119c:	46bd      	mov	sp, r7
 802119e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80211a2:	b002      	add	sp, #8
 80211a4:	4770      	bx	lr
	...

080211a8 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 80211a8:	b580      	push	{r7, lr}
 80211aa:	b086      	sub	sp, #24
 80211ac:	af00      	add	r7, sp, #0
 80211ae:	6078      	str	r0, [r7, #4]
 80211b0:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 80211b2:	2300      	movs	r3, #0
 80211b4:	60bb      	str	r3, [r7, #8]
 80211b6:	2300      	movs	r3, #0
 80211b8:	60fb      	str	r3, [r7, #12]
 80211ba:	2300      	movs	r3, #0
 80211bc:	613b      	str	r3, [r7, #16]
 80211be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80211c2:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 80211c4:	f107 0108 	add.w	r1, r7, #8
 80211c8:	683b      	ldr	r3, [r7, #0]
 80211ca:	687a      	ldr	r2, [r7, #4]
 80211cc:	4803      	ldr	r0, [pc, #12]	@ (80211dc <mg_vmprintf+0x34>)
 80211ce:	f7f5 f901 	bl	80163d4 <mg_vxprintf>
  return (char *) io.buf;
 80211d2:	68bb      	ldr	r3, [r7, #8]
}
 80211d4:	4618      	mov	r0, r3
 80211d6:	3718      	adds	r7, #24
 80211d8:	46bd      	mov	sp, r7
 80211da:	bd80      	pop	{r7, pc}
 80211dc:	08021105 	.word	0x08021105

080211e0 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 80211e0:	b40f      	push	{r0, r1, r2, r3}
 80211e2:	b580      	push	{r7, lr}
 80211e4:	b082      	sub	sp, #8
 80211e6:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 80211e8:	f107 0314 	add.w	r3, r7, #20
 80211ec:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 80211ee:	463b      	mov	r3, r7
 80211f0:	4619      	mov	r1, r3
 80211f2:	6938      	ldr	r0, [r7, #16]
 80211f4:	f7ff ffd8 	bl	80211a8 <mg_vmprintf>
 80211f8:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 80211fa:	687b      	ldr	r3, [r7, #4]
}
 80211fc:	4618      	mov	r0, r3
 80211fe:	3708      	adds	r7, #8
 8021200:	46bd      	mov	sp, r7
 8021202:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021206:	b004      	add	sp, #16
 8021208:	4770      	bx	lr

0802120a <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 802120a:	b580      	push	{r7, lr}
 802120c:	b082      	sub	sp, #8
 802120e:	af00      	add	r7, sp, #0
 8021210:	4603      	mov	r3, r0
 8021212:	6039      	str	r1, [r7, #0]
 8021214:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8021216:	79fb      	ldrb	r3, [r7, #7]
 8021218:	4618      	mov	r0, r3
 802121a:	f003 fff3 	bl	8025204 <putchar>
  (void) param;
}
 802121e:	bf00      	nop
 8021220:	3708      	adds	r7, #8
 8021222:	46bd      	mov	sp, r7
 8021224:	bd80      	pop	{r7, pc}
	...

08021228 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8021228:	b580      	push	{r7, lr}
 802122a:	b088      	sub	sp, #32
 802122c:	af04      	add	r7, sp, #16
 802122e:	60f8      	str	r0, [r7, #12]
 8021230:	60b9      	str	r1, [r7, #8]
 8021232:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	781b      	ldrb	r3, [r3, #0]
 8021238:	4618      	mov	r0, r3
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	3301      	adds	r3, #1
 802123e:	781b      	ldrb	r3, [r3, #0]
 8021240:	461a      	mov	r2, r3
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	3302      	adds	r3, #2
 8021246:	781b      	ldrb	r3, [r3, #0]
 8021248:	4619      	mov	r1, r3
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	3303      	adds	r3, #3
 802124e:	781b      	ldrb	r3, [r3, #0]
 8021250:	9302      	str	r3, [sp, #8]
 8021252:	9101      	str	r1, [sp, #4]
 8021254:	9200      	str	r2, [sp, #0]
 8021256:	4603      	mov	r3, r0
 8021258:	4a04      	ldr	r2, [pc, #16]	@ (802126c <print_ip4+0x44>)
 802125a:	68b9      	ldr	r1, [r7, #8]
 802125c:	68f8      	ldr	r0, [r7, #12]
 802125e:	f7f5 f89e 	bl	801639e <mg_xprintf>
 8021262:	4603      	mov	r3, r0
}
 8021264:	4618      	mov	r0, r3
 8021266:	3710      	adds	r7, #16
 8021268:	46bd      	mov	sp, r7
 802126a:	bd80      	pop	{r7, pc}
 802126c:	08032fb4 	.word	0x08032fb4

08021270 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8021270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021274:	b08e      	sub	sp, #56	@ 0x38
 8021276:	af08      	add	r7, sp, #32
 8021278:	6178      	str	r0, [r7, #20]
 802127a:	6139      	str	r1, [r7, #16]
 802127c:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802127e:	68fb      	ldr	r3, [r7, #12]
 8021280:	881b      	ldrh	r3, [r3, #0]
 8021282:	4618      	mov	r0, r3
 8021284:	f001 fc01 	bl	8022a8a <mg_ntohs>
 8021288:	4603      	mov	r3, r0
 802128a:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 802128c:	68fb      	ldr	r3, [r7, #12]
 802128e:	3302      	adds	r3, #2
 8021290:	881b      	ldrh	r3, [r3, #0]
 8021292:	4618      	mov	r0, r3
 8021294:	f001 fbf9 	bl	8022a8a <mg_ntohs>
 8021298:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 802129a:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 802129c:	68fb      	ldr	r3, [r7, #12]
 802129e:	3304      	adds	r3, #4
 80212a0:	881b      	ldrh	r3, [r3, #0]
 80212a2:	4618      	mov	r0, r3
 80212a4:	f001 fbf1 	bl	8022a8a <mg_ntohs>
 80212a8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80212aa:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80212ac:	68fb      	ldr	r3, [r7, #12]
 80212ae:	3306      	adds	r3, #6
 80212b0:	881b      	ldrh	r3, [r3, #0]
 80212b2:	4618      	mov	r0, r3
 80212b4:	f001 fbe9 	bl	8022a8a <mg_ntohs>
 80212b8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80212ba:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	3308      	adds	r3, #8
 80212c0:	881b      	ldrh	r3, [r3, #0]
 80212c2:	4618      	mov	r0, r3
 80212c4:	f001 fbe1 	bl	8022a8a <mg_ntohs>
 80212c8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80212ca:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80212cc:	68fb      	ldr	r3, [r7, #12]
 80212ce:	330a      	adds	r3, #10
 80212d0:	881b      	ldrh	r3, [r3, #0]
 80212d2:	4618      	mov	r0, r3
 80212d4:	f001 fbd9 	bl	8022a8a <mg_ntohs>
 80212d8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80212da:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80212dc:	68fb      	ldr	r3, [r7, #12]
 80212de:	330c      	adds	r3, #12
 80212e0:	881b      	ldrh	r3, [r3, #0]
 80212e2:	4618      	mov	r0, r3
 80212e4:	f001 fbd1 	bl	8022a8a <mg_ntohs>
 80212e8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80212ea:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 80212ec:	68fb      	ldr	r3, [r7, #12]
 80212ee:	330e      	adds	r3, #14
 80212f0:	881b      	ldrh	r3, [r3, #0]
 80212f2:	4618      	mov	r0, r3
 80212f4:	f001 fbc9 	bl	8022a8a <mg_ntohs>
 80212f8:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80212fa:	9306      	str	r3, [sp, #24]
 80212fc:	683a      	ldr	r2, [r7, #0]
 80212fe:	9205      	str	r2, [sp, #20]
 8021300:	687a      	ldr	r2, [r7, #4]
 8021302:	9204      	str	r2, [sp, #16]
 8021304:	68bb      	ldr	r3, [r7, #8]
 8021306:	9303      	str	r3, [sp, #12]
 8021308:	9602      	str	r6, [sp, #8]
 802130a:	9501      	str	r5, [sp, #4]
 802130c:	9400      	str	r4, [sp, #0]
 802130e:	4643      	mov	r3, r8
 8021310:	4a05      	ldr	r2, [pc, #20]	@ (8021328 <print_ip6+0xb8>)
 8021312:	6939      	ldr	r1, [r7, #16]
 8021314:	6978      	ldr	r0, [r7, #20]
 8021316:	f7f5 f842 	bl	801639e <mg_xprintf>
 802131a:	4603      	mov	r3, r0
}
 802131c:	4618      	mov	r0, r3
 802131e:	3718      	adds	r7, #24
 8021320:	46bd      	mov	sp, r7
 8021322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021326:	bf00      	nop
 8021328:	08032fc0 	.word	0x08032fc0

0802132c <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 802132c:	b580      	push	{r7, lr}
 802132e:	b086      	sub	sp, #24
 8021330:	af00      	add	r7, sp, #0
 8021332:	60f8      	str	r0, [r7, #12]
 8021334:	60b9      	str	r1, [r7, #8]
 8021336:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	681b      	ldr	r3, [r3, #0]
 802133c:	1d19      	adds	r1, r3, #4
 802133e:	687a      	ldr	r2, [r7, #4]
 8021340:	6011      	str	r1, [r2, #0]
 8021342:	681b      	ldr	r3, [r3, #0]
 8021344:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8021346:	697a      	ldr	r2, [r7, #20]
 8021348:	68b9      	ldr	r1, [r7, #8]
 802134a:	68f8      	ldr	r0, [r7, #12]
 802134c:	f7ff ff6c 	bl	8021228 <print_ip4>
 8021350:	4603      	mov	r3, r0
}
 8021352:	4618      	mov	r0, r3
 8021354:	3718      	adds	r7, #24
 8021356:	46bd      	mov	sp, r7
 8021358:	bd80      	pop	{r7, pc}

0802135a <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 802135a:	b580      	push	{r7, lr}
 802135c:	b086      	sub	sp, #24
 802135e:	af00      	add	r7, sp, #0
 8021360:	60f8      	str	r0, [r7, #12]
 8021362:	60b9      	str	r1, [r7, #8]
 8021364:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	681b      	ldr	r3, [r3, #0]
 802136a:	1d19      	adds	r1, r3, #4
 802136c:	687a      	ldr	r2, [r7, #4]
 802136e:	6011      	str	r1, [r2, #0]
 8021370:	681b      	ldr	r3, [r3, #0]
 8021372:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8021374:	697b      	ldr	r3, [r7, #20]
 8021376:	7cdb      	ldrb	r3, [r3, #19]
 8021378:	2b00      	cmp	r3, #0
 802137a:	d007      	beq.n	802138c <mg_print_ip+0x32>
 802137c:	697b      	ldr	r3, [r7, #20]
 802137e:	461a      	mov	r2, r3
 8021380:	68b9      	ldr	r1, [r7, #8]
 8021382:	68f8      	ldr	r0, [r7, #12]
 8021384:	f7ff ff74 	bl	8021270 <print_ip6>
 8021388:	4603      	mov	r3, r0
 802138a:	e006      	b.n	802139a <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 802138c:	697b      	ldr	r3, [r7, #20]
 802138e:	461a      	mov	r2, r3
 8021390:	68b9      	ldr	r1, [r7, #8]
 8021392:	68f8      	ldr	r0, [r7, #12]
 8021394:	f7ff ff48 	bl	8021228 <print_ip4>
 8021398:	4603      	mov	r3, r0
}
 802139a:	4618      	mov	r0, r3
 802139c:	3718      	adds	r7, #24
 802139e:	46bd      	mov	sp, r7
 80213a0:	bd80      	pop	{r7, pc}
	...

080213a4 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 80213a4:	b580      	push	{r7, lr}
 80213a6:	b088      	sub	sp, #32
 80213a8:	af02      	add	r7, sp, #8
 80213aa:	60f8      	str	r0, [r7, #12]
 80213ac:	60b9      	str	r1, [r7, #8]
 80213ae:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	681b      	ldr	r3, [r3, #0]
 80213b4:	1d19      	adds	r1, r3, #4
 80213b6:	687a      	ldr	r2, [r7, #4]
 80213b8:	6011      	str	r1, [r2, #0]
 80213ba:	681b      	ldr	r3, [r3, #0]
 80213bc:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 80213be:	697b      	ldr	r3, [r7, #20]
 80213c0:	8a1b      	ldrh	r3, [r3, #16]
 80213c2:	4618      	mov	r0, r3
 80213c4:	f001 fb61 	bl	8022a8a <mg_ntohs>
 80213c8:	4603      	mov	r3, r0
 80213ca:	9301      	str	r3, [sp, #4]
 80213cc:	697b      	ldr	r3, [r7, #20]
 80213ce:	9300      	str	r3, [sp, #0]
 80213d0:	4b05      	ldr	r3, [pc, #20]	@ (80213e8 <mg_print_ip_port+0x44>)
 80213d2:	4a06      	ldr	r2, [pc, #24]	@ (80213ec <mg_print_ip_port+0x48>)
 80213d4:	68b9      	ldr	r1, [r7, #8]
 80213d6:	68f8      	ldr	r0, [r7, #12]
 80213d8:	f7f4 ffe1 	bl	801639e <mg_xprintf>
 80213dc:	4603      	mov	r3, r0
}
 80213de:	4618      	mov	r0, r3
 80213e0:	3718      	adds	r7, #24
 80213e2:	46bd      	mov	sp, r7
 80213e4:	bd80      	pop	{r7, pc}
 80213e6:	bf00      	nop
 80213e8:	0802135b 	.word	0x0802135b
 80213ec:	08032fdc 	.word	0x08032fdc

080213f0 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 80213f0:	b5b0      	push	{r4, r5, r7, lr}
 80213f2:	b08c      	sub	sp, #48	@ 0x30
 80213f4:	af06      	add	r7, sp, #24
 80213f6:	60f8      	str	r0, [r7, #12]
 80213f8:	60b9      	str	r1, [r7, #8]
 80213fa:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	1d19      	adds	r1, r3, #4
 8021402:	687a      	ldr	r2, [r7, #4]
 8021404:	6011      	str	r1, [r2, #0]
 8021406:	681b      	ldr	r3, [r3, #0]
 8021408:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 802140a:	697b      	ldr	r3, [r7, #20]
 802140c:	781b      	ldrb	r3, [r3, #0]
 802140e:	461d      	mov	r5, r3
 8021410:	697b      	ldr	r3, [r7, #20]
 8021412:	3301      	adds	r3, #1
 8021414:	781b      	ldrb	r3, [r3, #0]
 8021416:	461a      	mov	r2, r3
 8021418:	697b      	ldr	r3, [r7, #20]
 802141a:	3302      	adds	r3, #2
 802141c:	781b      	ldrb	r3, [r3, #0]
 802141e:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8021420:	697b      	ldr	r3, [r7, #20]
 8021422:	3303      	adds	r3, #3
 8021424:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8021426:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8021428:	697b      	ldr	r3, [r7, #20]
 802142a:	3304      	adds	r3, #4
 802142c:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 802142e:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8021430:	697b      	ldr	r3, [r7, #20]
 8021432:	3305      	adds	r3, #5
 8021434:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8021436:	9304      	str	r3, [sp, #16]
 8021438:	9403      	str	r4, [sp, #12]
 802143a:	9002      	str	r0, [sp, #8]
 802143c:	9101      	str	r1, [sp, #4]
 802143e:	9200      	str	r2, [sp, #0]
 8021440:	462b      	mov	r3, r5
 8021442:	4a05      	ldr	r2, [pc, #20]	@ (8021458 <mg_print_mac+0x68>)
 8021444:	68b9      	ldr	r1, [r7, #8]
 8021446:	68f8      	ldr	r0, [r7, #12]
 8021448:	f7f4 ffa9 	bl	801639e <mg_xprintf>
 802144c:	4603      	mov	r3, r0
}
 802144e:	4618      	mov	r0, r3
 8021450:	3718      	adds	r7, #24
 8021452:	46bd      	mov	sp, r7
 8021454:	bdb0      	pop	{r4, r5, r7, pc}
 8021456:	bf00      	nop
 8021458:	08032fe4 	.word	0x08032fe4

0802145c <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 802145c:	b580      	push	{r7, lr}
 802145e:	b088      	sub	sp, #32
 8021460:	af00      	add	r7, sp, #0
 8021462:	60f8      	str	r0, [r7, #12]
 8021464:	60b9      	str	r1, [r7, #8]
 8021466:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	681b      	ldr	r3, [r3, #0]
 802146c:	1d19      	adds	r1, r3, #4
 802146e:	687a      	ldr	r2, [r7, #4]
 8021470:	6011      	str	r1, [r2, #0]
 8021472:	681b      	ldr	r3, [r3, #0]
 8021474:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	681b      	ldr	r3, [r3, #0]
 802147a:	1d19      	adds	r1, r3, #4
 802147c:	687a      	ldr	r2, [r7, #4]
 802147e:	6011      	str	r1, [r2, #0]
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8021484:	4b16      	ldr	r3, [pc, #88]	@ (80214e0 <mg_print_hex+0x84>)
 8021486:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8021488:	2300      	movs	r3, #0
 802148a:	61fb      	str	r3, [r7, #28]
 802148c:	e01e      	b.n	80214cc <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 802148e:	697a      	ldr	r2, [r7, #20]
 8021490:	69fb      	ldr	r3, [r7, #28]
 8021492:	4413      	add	r3, r2
 8021494:	781b      	ldrb	r3, [r3, #0]
 8021496:	091b      	lsrs	r3, r3, #4
 8021498:	b2db      	uxtb	r3, r3
 802149a:	f003 030f 	and.w	r3, r3, #15
 802149e:	693a      	ldr	r2, [r7, #16]
 80214a0:	4413      	add	r3, r2
 80214a2:	781a      	ldrb	r2, [r3, #0]
 80214a4:	68fb      	ldr	r3, [r7, #12]
 80214a6:	68b9      	ldr	r1, [r7, #8]
 80214a8:	4610      	mov	r0, r2
 80214aa:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 80214ac:	697a      	ldr	r2, [r7, #20]
 80214ae:	69fb      	ldr	r3, [r7, #28]
 80214b0:	4413      	add	r3, r2
 80214b2:	781b      	ldrb	r3, [r3, #0]
 80214b4:	f003 030f 	and.w	r3, r3, #15
 80214b8:	693a      	ldr	r2, [r7, #16]
 80214ba:	4413      	add	r3, r2
 80214bc:	781a      	ldrb	r2, [r3, #0]
 80214be:	68fb      	ldr	r3, [r7, #12]
 80214c0:	68b9      	ldr	r1, [r7, #8]
 80214c2:	4610      	mov	r0, r2
 80214c4:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 80214c6:	69fb      	ldr	r3, [r7, #28]
 80214c8:	3301      	adds	r3, #1
 80214ca:	61fb      	str	r3, [r7, #28]
 80214cc:	69fa      	ldr	r2, [r7, #28]
 80214ce:	69bb      	ldr	r3, [r7, #24]
 80214d0:	429a      	cmp	r2, r3
 80214d2:	d3dc      	bcc.n	802148e <mg_print_hex+0x32>
  }
  return 2 * bl;
 80214d4:	69bb      	ldr	r3, [r7, #24]
 80214d6:	005b      	lsls	r3, r3, #1
}
 80214d8:	4618      	mov	r0, r3
 80214da:	3720      	adds	r7, #32
 80214dc:	46bd      	mov	sp, r7
 80214de:	bd80      	pop	{r7, pc}
 80214e0:	0803160c 	.word	0x0803160c

080214e4 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 80214e4:	b480      	push	{r7}
 80214e6:	b085      	sub	sp, #20
 80214e8:	af00      	add	r7, sp, #0
 80214ea:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 80214ec:	2300      	movs	r3, #0
 80214ee:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 80214f0:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	681a      	ldr	r2, [r3, #0]
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	689b      	ldr	r3, [r3, #8]
 80214fc:	4413      	add	r3, r2
 80214fe:	681b      	ldr	r3, [r3, #0]
 8021500:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
  return n;
 8021502:	68fb      	ldr	r3, [r7, #12]
}
 8021504:	4618      	mov	r0, r3
 8021506:	3714      	adds	r7, #20
 8021508:	46bd      	mov	sp, r7
 802150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802150e:	4770      	bx	lr

08021510 <mg_queue_next>:
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
  return space;
}

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8021510:	b580      	push	{r7, lr}
 8021512:	b084      	sub	sp, #16
 8021514:	af00      	add	r7, sp, #0
 8021516:	6078      	str	r0, [r7, #4]
 8021518:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 802151a:	2300      	movs	r3, #0
 802151c:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 802151e:	687b      	ldr	r3, [r7, #4]
 8021520:	689a      	ldr	r2, [r3, #8]
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	68db      	ldr	r3, [r3, #12]
 8021526:	429a      	cmp	r2, r3
 8021528:	d013      	beq.n	8021552 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 802152a:	6878      	ldr	r0, [r7, #4]
 802152c:	f7ff ffda 	bl	80214e4 <mg_queue_read_len>
 8021530:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8021532:	68fb      	ldr	r3, [r7, #12]
 8021534:	2b00      	cmp	r3, #0
 8021536:	d10c      	bne.n	8021552 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	2200      	movs	r2, #0
 802153c:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	68da      	ldr	r2, [r3, #12]
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	689b      	ldr	r3, [r3, #8]
 8021546:	429a      	cmp	r2, r3
 8021548:	d903      	bls.n	8021552 <mg_queue_next+0x42>
 802154a:	6878      	ldr	r0, [r7, #4]
 802154c:	f7ff ffca 	bl	80214e4 <mg_queue_read_len>
 8021550:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8021552:	683b      	ldr	r3, [r7, #0]
 8021554:	2b00      	cmp	r3, #0
 8021556:	d007      	beq.n	8021568 <mg_queue_next+0x58>
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	681a      	ldr	r2, [r3, #0]
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	689b      	ldr	r3, [r3, #8]
 8021560:	3304      	adds	r3, #4
 8021562:	441a      	add	r2, r3
 8021564:	683b      	ldr	r3, [r7, #0]
 8021566:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
  return len;
 8021568:	68fb      	ldr	r3, [r7, #12]
}
 802156a:	4618      	mov	r0, r3
 802156c:	3710      	adds	r7, #16
 802156e:	46bd      	mov	sp, r7
 8021570:	bd80      	pop	{r7, pc}

08021572 <mg_queue_del>:
  mg_queue_write_len(q, len);
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
  q->head += len + sizeof(uint32_t);
}

void mg_queue_del(struct mg_queue *q, size_t len) {
 8021572:	b480      	push	{r7}
 8021574:	b083      	sub	sp, #12
 8021576:	af00      	add	r7, sp, #0
 8021578:	6078      	str	r0, [r7, #4]
 802157a:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	689a      	ldr	r2, [r3, #8]
 8021580:	683b      	ldr	r3, [r7, #0]
 8021582:	4413      	add	r3, r2
 8021584:	1d1a      	adds	r2, r3, #4
 8021586:	687b      	ldr	r3, [r7, #4]
 8021588:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
}
 802158a:	bf00      	nop
 802158c:	370c      	adds	r7, #12
 802158e:	46bd      	mov	sp, r7
 8021590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021594:	4770      	bx	lr
	...

08021598 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8021598:	b5b0      	push	{r4, r5, r7, lr}
 802159a:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 802159c:	f001 fb06 	bl	8022bac <mg_millis>
 80215a0:	4b05      	ldr	r3, [pc, #20]	@ (80215b8 <mg_now+0x20>)
 80215a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215a6:	1884      	adds	r4, r0, r2
 80215a8:	eb41 0503 	adc.w	r5, r1, r3
 80215ac:	4622      	mov	r2, r4
 80215ae:	462b      	mov	r3, r5
}
 80215b0:	4610      	mov	r0, r2
 80215b2:	4619      	mov	r1, r3
 80215b4:	bdb0      	pop	{r4, r5, r7, pc}
 80215b6:	bf00      	nop
 80215b8:	20018170 	.word	0x20018170
 80215bc:	00000000 	.word	0x00000000

080215c0 <gettimestamp>:

static int64_t gettimestamp(const uint32_t *data) {
 80215c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80215c4:	b086      	sub	sp, #24
 80215c6:	af00      	add	r7, sp, #0
 80215c8:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 80215ca:	68fb      	ldr	r3, [r7, #12]
 80215cc:	681b      	ldr	r3, [r3, #0]
 80215ce:	4618      	mov	r0, r3
 80215d0:	f001 fa42 	bl	8022a58 <mg_ntohl>
 80215d4:	6178      	str	r0, [r7, #20]
 80215d6:	68fb      	ldr	r3, [r7, #12]
 80215d8:	3304      	adds	r3, #4
 80215da:	681b      	ldr	r3, [r3, #0]
 80215dc:	4618      	mov	r0, r3
 80215de:	f001 fa3b 	bl	8022a58 <mg_ntohl>
 80215e2:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 80215e4:	697b      	ldr	r3, [r7, #20]
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d003      	beq.n	80215f2 <gettimestamp+0x32>
 80215ea:	697a      	ldr	r2, [r7, #20]
 80215ec:	4b2e      	ldr	r3, [pc, #184]	@ (80216a8 <gettimestamp+0xe8>)
 80215ee:	4413      	add	r3, r2
 80215f0:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 80215f2:	697b      	ldr	r3, [r7, #20]
 80215f4:	2200      	movs	r2, #0
 80215f6:	4698      	mov	r8, r3
 80215f8:	4691      	mov	r9, r2
 80215fa:	4642      	mov	r2, r8
 80215fc:	464b      	mov	r3, r9
 80215fe:	f04f 0000 	mov.w	r0, #0
 8021602:	f04f 0100 	mov.w	r1, #0
 8021606:	0159      	lsls	r1, r3, #5
 8021608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802160c:	0150      	lsls	r0, r2, #5
 802160e:	4602      	mov	r2, r0
 8021610:	460b      	mov	r3, r1
 8021612:	ebb2 0408 	subs.w	r4, r2, r8
 8021616:	eb63 0509 	sbc.w	r5, r3, r9
 802161a:	f04f 0200 	mov.w	r2, #0
 802161e:	f04f 0300 	mov.w	r3, #0
 8021622:	00ab      	lsls	r3, r5, #2
 8021624:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8021628:	00a2      	lsls	r2, r4, #2
 802162a:	4614      	mov	r4, r2
 802162c:	461d      	mov	r5, r3
 802162e:	eb14 0a08 	adds.w	sl, r4, r8
 8021632:	eb45 0b09 	adc.w	fp, r5, r9
 8021636:	f04f 0200 	mov.w	r2, #0
 802163a:	f04f 0300 	mov.w	r3, #0
 802163e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8021642:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8021646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802164a:	4692      	mov	sl, r2
 802164c:	469b      	mov	fp, r3
 802164e:	4654      	mov	r4, sl
 8021650:	465d      	mov	r5, fp
 8021652:	6938      	ldr	r0, [r7, #16]
 8021654:	f7de ff6e 	bl	8000534 <__aeabi_ui2d>
 8021658:	a311      	add	r3, pc, #68	@ (adr r3, 80216a0 <gettimestamp+0xe0>)
 802165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802165e:	f7df f90d 	bl	800087c <__aeabi_ddiv>
 8021662:	4602      	mov	r2, r0
 8021664:	460b      	mov	r3, r1
 8021666:	4610      	mov	r0, r2
 8021668:	4619      	mov	r1, r3
 802166a:	f04f 0200 	mov.w	r2, #0
 802166e:	4b0f      	ldr	r3, [pc, #60]	@ (80216ac <gettimestamp+0xec>)
 8021670:	f7de ffda 	bl	8000628 <__aeabi_dmul>
 8021674:	4602      	mov	r2, r0
 8021676:	460b      	mov	r3, r1
 8021678:	4610      	mov	r0, r2
 802167a:	4619      	mov	r1, r3
 802167c:	f7df fb98 	bl	8000db0 <__aeabi_d2lz>
 8021680:	4602      	mov	r2, r0
 8021682:	460b      	mov	r3, r1
 8021684:	18a1      	adds	r1, r4, r2
 8021686:	6039      	str	r1, [r7, #0]
 8021688:	eb45 0303 	adc.w	r3, r5, r3
 802168c:	607b      	str	r3, [r7, #4]
 802168e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8021692:	4610      	mov	r0, r2
 8021694:	4619      	mov	r1, r3
 8021696:	3718      	adds	r7, #24
 8021698:	46bd      	mov	sp, r7
 802169a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802169e:	bf00      	nop
 80216a0:	ffe00000 	.word	0xffe00000
 80216a4:	41efffff 	.word	0x41efffff
 80216a8:	7c558180 	.word	0x7c558180
 80216ac:	408f4000 	.word	0x408f4000

080216b0 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 80216b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80216b4:	b098      	sub	sp, #96	@ 0x60
 80216b6:	af00      	add	r7, sp, #0
 80216b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80216ba:	6239      	str	r1, [r7, #32]
  int64_t epoch_milliseconds = -1;
 80216bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80216c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80216c4:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  int mode = len > 0 ? buf[0] & 7 : 0;
 80216c8:	6a3b      	ldr	r3, [r7, #32]
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d004      	beq.n	80216d8 <mg_sntp_parse+0x28>
 80216ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80216d0:	781b      	ldrb	r3, [r3, #0]
 80216d2:	f003 0307 	and.w	r3, r3, #7
 80216d6:	e000      	b.n	80216da <mg_sntp_parse+0x2a>
 80216d8:	2300      	movs	r3, #0
 80216da:	657b      	str	r3, [r7, #84]	@ 0x54
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 80216dc:	6a3b      	ldr	r3, [r7, #32]
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d006      	beq.n	80216f0 <mg_sntp_parse+0x40>
 80216e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80216e4:	781b      	ldrb	r3, [r3, #0]
 80216e6:	08db      	lsrs	r3, r3, #3
 80216e8:	b2db      	uxtb	r3, r3
 80216ea:	f003 0307 	and.w	r3, r3, #7
 80216ee:	e000      	b.n	80216f2 <mg_sntp_parse+0x42>
 80216f0:	2300      	movs	r3, #0
 80216f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (len < 48) {
 80216f4:	6a3b      	ldr	r3, [r7, #32]
 80216f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80216f8:	d810      	bhi.n	802171c <mg_sntp_parse+0x6c>
    MG_ERROR(("%s", "corrupt packet"));
 80216fa:	4b60      	ldr	r3, [pc, #384]	@ (802187c <mg_sntp_parse+0x1cc>)
 80216fc:	681b      	ldr	r3, [r3, #0]
 80216fe:	2b00      	cmp	r3, #0
 8021700:	f340 80b4 	ble.w	802186c <mg_sntp_parse+0x1bc>
 8021704:	4b5e      	ldr	r3, [pc, #376]	@ (8021880 <mg_sntp_parse+0x1d0>)
 8021706:	f641 420e 	movw	r2, #7182	@ 0x1c0e
 802170a:	495e      	ldr	r1, [pc, #376]	@ (8021884 <mg_sntp_parse+0x1d4>)
 802170c:	2001      	movs	r0, #1
 802170e:	f7f9 fd15 	bl	801b13c <mg_log_prefix>
 8021712:	495d      	ldr	r1, [pc, #372]	@ (8021888 <mg_sntp_parse+0x1d8>)
 8021714:	485d      	ldr	r0, [pc, #372]	@ (802188c <mg_sntp_parse+0x1dc>)
 8021716:	f7f9 fd61 	bl	801b1dc <mg_log>
 802171a:	e0a7      	b.n	802186c <mg_sntp_parse+0x1bc>
  } else if (mode != 4 && mode != 5) {
 802171c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802171e:	2b04      	cmp	r3, #4
 8021720:	d013      	beq.n	802174a <mg_sntp_parse+0x9a>
 8021722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021724:	2b05      	cmp	r3, #5
 8021726:	d010      	beq.n	802174a <mg_sntp_parse+0x9a>
    MG_ERROR(("%s", "not a server reply"));
 8021728:	4b54      	ldr	r3, [pc, #336]	@ (802187c <mg_sntp_parse+0x1cc>)
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	2b00      	cmp	r3, #0
 802172e:	f340 809d 	ble.w	802186c <mg_sntp_parse+0x1bc>
 8021732:	4b53      	ldr	r3, [pc, #332]	@ (8021880 <mg_sntp_parse+0x1d0>)
 8021734:	f641 4210 	movw	r2, #7184	@ 0x1c10
 8021738:	4952      	ldr	r1, [pc, #328]	@ (8021884 <mg_sntp_parse+0x1d4>)
 802173a:	2001      	movs	r0, #1
 802173c:	f7f9 fcfe 	bl	801b13c <mg_log_prefix>
 8021740:	4953      	ldr	r1, [pc, #332]	@ (8021890 <mg_sntp_parse+0x1e0>)
 8021742:	4852      	ldr	r0, [pc, #328]	@ (802188c <mg_sntp_parse+0x1dc>)
 8021744:	f7f9 fd4a 	bl	801b1dc <mg_log>
 8021748:	e090      	b.n	802186c <mg_sntp_parse+0x1bc>
  } else if (buf[1] == 0) {
 802174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802174c:	3301      	adds	r3, #1
 802174e:	781b      	ldrb	r3, [r3, #0]
 8021750:	2b00      	cmp	r3, #0
 8021752:	d110      	bne.n	8021776 <mg_sntp_parse+0xc6>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8021754:	4b49      	ldr	r3, [pc, #292]	@ (802187c <mg_sntp_parse+0x1cc>)
 8021756:	681b      	ldr	r3, [r3, #0]
 8021758:	2b00      	cmp	r3, #0
 802175a:	f340 8087 	ble.w	802186c <mg_sntp_parse+0x1bc>
 802175e:	4b48      	ldr	r3, [pc, #288]	@ (8021880 <mg_sntp_parse+0x1d0>)
 8021760:	f641 4212 	movw	r2, #7186	@ 0x1c12
 8021764:	4947      	ldr	r1, [pc, #284]	@ (8021884 <mg_sntp_parse+0x1d4>)
 8021766:	2001      	movs	r0, #1
 8021768:	f7f9 fce8 	bl	801b13c <mg_log_prefix>
 802176c:	4949      	ldr	r1, [pc, #292]	@ (8021894 <mg_sntp_parse+0x1e4>)
 802176e:	4847      	ldr	r0, [pc, #284]	@ (802188c <mg_sntp_parse+0x1dc>)
 8021770:	f7f9 fd34 	bl	801b1dc <mg_log>
 8021774:	e07a      	b.n	802186c <mg_sntp_parse+0x1bc>
  } else if (version == 4 || version == 3) {
 8021776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021778:	2b04      	cmp	r3, #4
 802177a:	d002      	beq.n	8021782 <mg_sntp_parse+0xd2>
 802177c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802177e:	2b03      	cmp	r3, #3
 8021780:	d165      	bne.n	802184e <mg_sntp_parse+0x19e>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t origin_time = gettimestamp((uint32_t *) &buf[24]);
 8021782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021784:	3318      	adds	r3, #24
 8021786:	4618      	mov	r0, r3
 8021788:	f7ff ff1a 	bl	80215c0 <gettimestamp>
 802178c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
    int64_t receive_time = gettimestamp((uint32_t *) &buf[32]);
 8021790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021792:	3320      	adds	r3, #32
 8021794:	4618      	mov	r0, r3
 8021796:	f7ff ff13 	bl	80215c0 <gettimestamp>
 802179a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
    int64_t transmit_time = gettimestamp((uint32_t *) &buf[40]);
 802179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80217a0:	3328      	adds	r3, #40	@ 0x28
 80217a2:	4618      	mov	r0, r3
 80217a4:	f7ff ff0c 	bl	80215c0 <gettimestamp>
 80217a8:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    int64_t now = (int64_t) mg_millis();
 80217ac:	f001 f9fe 	bl	8022bac <mg_millis>
 80217b0:	4602      	mov	r2, r0
 80217b2:	460b      	mov	r3, r1
 80217b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int64_t latency = (now - origin_time) - (transmit_time - receive_time);
 80217b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80217bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80217c0:	ebb0 0a02 	subs.w	sl, r0, r2
 80217c4:	eb61 0b03 	sbc.w	fp, r1, r3
 80217c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80217cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80217d0:	ebb0 0802 	subs.w	r8, r0, r2
 80217d4:	eb61 0903 	sbc.w	r9, r1, r3
 80217d8:	ebba 0308 	subs.w	r3, sl, r8
 80217dc:	613b      	str	r3, [r7, #16]
 80217de:	eb6b 0309 	sbc.w	r3, fp, r9
 80217e2:	617b      	str	r3, [r7, #20]
 80217e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80217e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    epoch_milliseconds = transmit_time + latency / 2;
 80217ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80217f0:	0fd9      	lsrs	r1, r3, #31
 80217f2:	2000      	movs	r0, #0
 80217f4:	60b9      	str	r1, [r7, #8]
 80217f6:	60f8      	str	r0, [r7, #12]
 80217f8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80217fc:	4641      	mov	r1, r8
 80217fe:	188c      	adds	r4, r1, r2
 8021800:	4649      	mov	r1, r9
 8021802:	eb43 0101 	adc.w	r1, r3, r1
 8021806:	460d      	mov	r5, r1
 8021808:	f04f 0200 	mov.w	r2, #0
 802180c:	f04f 0300 	mov.w	r3, #0
 8021810:	0862      	lsrs	r2, r4, #1
 8021812:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8021816:	106b      	asrs	r3, r5, #1
 8021818:	4610      	mov	r0, r2
 802181a:	4619      	mov	r1, r3
 802181c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8021820:	1814      	adds	r4, r2, r0
 8021822:	603c      	str	r4, [r7, #0]
 8021824:	414b      	adcs	r3, r1
 8021826:	607b      	str	r3, [r7, #4]
 8021828:	e9d7 3400 	ldrd	r3, r4, [r7]
 802182c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
    s_boot_timestamp = (uint64_t) (epoch_milliseconds - now);
 8021830:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8021834:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8021838:	1a84      	subs	r4, r0, r2
 802183a:	61bc      	str	r4, [r7, #24]
 802183c:	eb61 0303 	sbc.w	r3, r1, r3
 8021840:	61fb      	str	r3, [r7, #28]
 8021842:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021846:	4914      	ldr	r1, [pc, #80]	@ (8021898 <mg_sntp_parse+0x1e8>)
 8021848:	e9c1 2300 	strd	r2, r3, [r1]
  } else if (version == 4 || version == 3) {
 802184c:	e00e      	b.n	802186c <mg_sntp_parse+0x1bc>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 802184e:	4b0b      	ldr	r3, [pc, #44]	@ (802187c <mg_sntp_parse+0x1cc>)
 8021850:	681b      	ldr	r3, [r3, #0]
 8021852:	2b00      	cmp	r3, #0
 8021854:	dd0a      	ble.n	802186c <mg_sntp_parse+0x1bc>
 8021856:	4b0a      	ldr	r3, [pc, #40]	@ (8021880 <mg_sntp_parse+0x1d0>)
 8021858:	f641 421d 	movw	r2, #7197	@ 0x1c1d
 802185c:	4909      	ldr	r1, [pc, #36]	@ (8021884 <mg_sntp_parse+0x1d4>)
 802185e:	2001      	movs	r0, #1
 8021860:	f7f9 fc6c 	bl	801b13c <mg_log_prefix>
 8021864:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021866:	480d      	ldr	r0, [pc, #52]	@ (802189c <mg_sntp_parse+0x1ec>)
 8021868:	f7f9 fcb8 	bl	801b1dc <mg_log>
  }
  return epoch_milliseconds;
 802186c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
}
 8021870:	4610      	mov	r0, r2
 8021872:	4619      	mov	r1, r3
 8021874:	3760      	adds	r7, #96	@ 0x60
 8021876:	46bd      	mov	sp, r7
 8021878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802187c:	20000298 	.word	0x20000298
 8021880:	08034640 	.word	0x08034640
 8021884:	08031484 	.word	0x08031484
 8021888:	080330f8 	.word	0x080330f8
 802188c:	080315f0 	.word	0x080315f0
 8021890:	08033108 	.word	0x08033108
 8021894:	0803311c 	.word	0x0803311c
 8021898:	20018170 	.word	0x20018170
 802189c:	08033138 	.word	0x08033138

080218a0 <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {
 80218a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80218a4:	b088      	sub	sp, #32
 80218a6:	af00      	add	r7, sp, #0
 80218a8:	60f8      	str	r0, [r7, #12]
 80218aa:	60b9      	str	r1, [r7, #8]
 80218ac:	607a      	str	r2, [r7, #4]
  uint64_t *expiration_time = (uint64_t *) c->data;
 80218ae:	68fb      	ldr	r3, [r7, #12]
 80218b0:	3388      	adds	r3, #136	@ 0x88
 80218b2:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 80218b4:	68bb      	ldr	r3, [r7, #8]
 80218b6:	2b01      	cmp	r3, #1
 80218b8:	d10c      	bne.n	80218d4 <sntp_cb+0x34>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 80218ba:	f001 f977 	bl	8022bac <mg_millis>
 80218be:	4602      	mov	r2, r0
 80218c0:	460b      	mov	r3, r1
 80218c2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80218c6:	1854      	adds	r4, r2, r1
 80218c8:	f143 0500 	adc.w	r5, r3, #0
 80218cc:	69fb      	ldr	r3, [r7, #28]
 80218ce:	e9c3 4500 	strd	r4, r5, [r3]
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) ev_data;
}
 80218d2:	e05d      	b.n	8021990 <sntp_cb+0xf0>
  } else if (ev == MG_EV_CONNECT) {
 80218d4:	68bb      	ldr	r3, [r7, #8]
 80218d6:	2b04      	cmp	r3, #4
 80218d8:	d103      	bne.n	80218e2 <sntp_cb+0x42>
    mg_sntp_request(c);
 80218da:	68f8      	ldr	r0, [r7, #12]
 80218dc:	f000 f868 	bl	80219b0 <mg_sntp_request>
}
 80218e0:	e056      	b.n	8021990 <sntp_cb+0xf0>
  } else if (ev == MG_EV_READ) {
 80218e2:	68bb      	ldr	r3, [r7, #8]
 80218e4:	2b07      	cmp	r3, #7
 80218e6:	d141      	bne.n	802196c <sntp_cb+0xcc>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 80218e8:	68fb      	ldr	r3, [r7, #12]
 80218ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80218ec:	68fb      	ldr	r3, [r7, #12]
 80218ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80218f0:	4619      	mov	r1, r3
 80218f2:	4610      	mov	r0, r2
 80218f4:	f7ff fedc 	bl	80216b0 <mg_sntp_parse>
 80218f8:	4602      	mov	r2, r0
 80218fa:	460b      	mov	r3, r1
 80218fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 8021900:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021904:	2a01      	cmp	r2, #1
 8021906:	f173 0300 	sbcs.w	r3, r3, #0
 802190a:	db27      	blt.n	802195c <sntp_cb+0xbc>
      s_boot_timestamp = (uint64_t) milliseconds - mg_millis();
 802190c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021910:	4614      	mov	r4, r2
 8021912:	461d      	mov	r5, r3
 8021914:	f001 f94a 	bl	8022bac <mg_millis>
 8021918:	4602      	mov	r2, r0
 802191a:	460b      	mov	r3, r1
 802191c:	ebb4 0802 	subs.w	r8, r4, r2
 8021920:	eb65 0903 	sbc.w	r9, r5, r3
 8021924:	4b1d      	ldr	r3, [pc, #116]	@ (802199c <sntp_cb+0xfc>)
 8021926:	e9c3 8900 	strd	r8, r9, [r3]
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 802192a:	f107 0310 	add.w	r3, r7, #16
 802192e:	461a      	mov	r2, r3
 8021930:	2112      	movs	r1, #18
 8021932:	68f8      	ldr	r0, [r7, #12]
 8021934:	f7f4 f81c 	bl	8015970 <mg_call>
      MG_DEBUG(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8021938:	4b19      	ldr	r3, [pc, #100]	@ (80219a0 <sntp_cb+0x100>)
 802193a:	681b      	ldr	r3, [r3, #0]
 802193c:	2b02      	cmp	r3, #2
 802193e:	dd0d      	ble.n	802195c <sntp_cb+0xbc>
 8021940:	4b18      	ldr	r3, [pc, #96]	@ (80219a4 <sntp_cb+0x104>)
 8021942:	f641 422d 	movw	r2, #7213	@ 0x1c2d
 8021946:	4918      	ldr	r1, [pc, #96]	@ (80219a8 <sntp_cb+0x108>)
 8021948:	2003      	movs	r0, #3
 802194a:	f7f9 fbf7 	bl	801b13c <mg_log_prefix>
 802194e:	68fb      	ldr	r3, [r7, #12]
 8021950:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8021952:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8021956:	4815      	ldr	r0, [pc, #84]	@ (80219ac <sntp_cb+0x10c>)
 8021958:	f7f9 fc40 	bl	801b1dc <mg_log>
    c->is_closing = 1;
 802195c:	68fa      	ldr	r2, [r7, #12]
 802195e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021962:	f043 0320 	orr.w	r3, r3, #32
 8021966:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 802196a:	e011      	b.n	8021990 <sntp_cb+0xf0>
  } else if (ev == MG_EV_POLL) {
 802196c:	68bb      	ldr	r3, [r7, #8]
 802196e:	2b02      	cmp	r3, #2
 8021970:	d10e      	bne.n	8021990 <sntp_cb+0xf0>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 8021972:	f001 f91b 	bl	8022bac <mg_millis>
 8021976:	69fb      	ldr	r3, [r7, #28]
 8021978:	e9d3 2300 	ldrd	r2, r3, [r3]
 802197c:	4282      	cmp	r2, r0
 802197e:	418b      	sbcs	r3, r1
 8021980:	d206      	bcs.n	8021990 <sntp_cb+0xf0>
 8021982:	68fa      	ldr	r2, [r7, #12]
 8021984:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021988:	f043 0320 	orr.w	r3, r3, #32
 802198c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
}
 8021990:	bf00      	nop
 8021992:	3720      	adds	r7, #32
 8021994:	46bd      	mov	sp, r7
 8021996:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 802199a:	bf00      	nop
 802199c:	20018170 	.word	0x20018170
 80219a0:	20000298 	.word	0x20000298
 80219a4:	08034650 	.word	0x08034650
 80219a8:	08031484 	.word	0x08031484
 80219ac:	08033150 	.word	0x08033150

080219b0 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 80219b0:	b590      	push	{r4, r7, lr}
 80219b2:	b095      	sub	sp, #84	@ 0x54
 80219b4:	af00      	add	r7, sp, #0
 80219b6:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 80219b8:	687b      	ldr	r3, [r7, #4]
 80219ba:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80219be:	f003 0308 	and.w	r3, r3, #8
 80219c2:	b2db      	uxtb	r3, r3
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d011      	beq.n	80219ec <mg_sntp_request+0x3c>
    MG_ERROR(("%lu wait until resolved", c->id));
 80219c8:	4b39      	ldr	r3, [pc, #228]	@ (8021ab0 <mg_sntp_request+0x100>)
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	2b00      	cmp	r3, #0
 80219ce:	dd65      	ble.n	8021a9c <mg_sntp_request+0xec>
 80219d0:	4b38      	ldr	r3, [pc, #224]	@ (8021ab4 <mg_sntp_request+0x104>)
 80219d2:	f641 423a 	movw	r2, #7226	@ 0x1c3a
 80219d6:	4938      	ldr	r1, [pc, #224]	@ (8021ab8 <mg_sntp_request+0x108>)
 80219d8:	2001      	movs	r0, #1
 80219da:	f7f9 fbaf 	bl	801b13c <mg_log_prefix>
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80219e2:	4619      	mov	r1, r3
 80219e4:	4835      	ldr	r0, [pc, #212]	@ (8021abc <mg_sntp_request+0x10c>)
 80219e6:	f7f9 fbf9 	bl	801b1dc <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 80219ea:	e057      	b.n	8021a9c <mg_sntp_request+0xec>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 80219ec:	f001 f8de 	bl	8022bac <mg_millis>
 80219f0:	4602      	mov	r2, r0
 80219f2:	460b      	mov	r3, r1
 80219f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    uint8_t buf[48] = {0};
 80219f8:	2300      	movs	r3, #0
 80219fa:	60bb      	str	r3, [r7, #8]
 80219fc:	f107 030c 	add.w	r3, r7, #12
 8021a00:	222c      	movs	r2, #44	@ 0x2c
 8021a02:	2100      	movs	r1, #0
 8021a04:	4618      	mov	r0, r3
 8021a06:	f004 f9a3 	bl	8025d50 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 8021a0a:	f107 0308 	add.w	r3, r7, #8
 8021a0e:	3328      	adds	r3, #40	@ 0x28
 8021a10:	647b      	str	r3, [r7, #68]	@ 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8021a12:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8021a16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8021a1a:	f04f 0300 	mov.w	r3, #0
 8021a1e:	f7df f94b 	bl	8000cb8 <__aeabi_ldivmod>
 8021a22:	4610      	mov	r0, r2
 8021a24:	4619      	mov	r1, r3
 8021a26:	f7de fdd1 	bl	80005cc <__aeabi_l2d>
 8021a2a:	f04f 0200 	mov.w	r2, #0
 8021a2e:	4b24      	ldr	r3, [pc, #144]	@ (8021ac0 <mg_sntp_request+0x110>)
 8021a30:	f7de ff24 	bl	800087c <__aeabi_ddiv>
 8021a34:	4602      	mov	r2, r0
 8021a36:	460b      	mov	r3, r1
 8021a38:	4610      	mov	r0, r2
 8021a3a:	4619      	mov	r1, r3
 8021a3c:	a31a      	add	r3, pc, #104	@ (adr r3, 8021aa8 <mg_sntp_request+0xf8>)
 8021a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a42:	f7de fdf1 	bl	8000628 <__aeabi_dmul>
 8021a46:	4602      	mov	r2, r0
 8021a48:	460b      	mov	r3, r1
 8021a4a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8021a4e:	2323      	movs	r3, #35	@ 0x23
 8021a50:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8021a52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8021a56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8021a5a:	f04f 0300 	mov.w	r3, #0
 8021a5e:	f7df f92b 	bl	8000cb8 <__aeabi_ldivmod>
 8021a62:	4602      	mov	r2, r0
 8021a64:	460b      	mov	r3, r1
 8021a66:	4b17      	ldr	r3, [pc, #92]	@ (8021ac4 <mg_sntp_request+0x114>)
 8021a68:	4413      	add	r3, r2
 8021a6a:	4618      	mov	r0, r3
 8021a6c:	f000 fff4 	bl	8022a58 <mg_ntohl>
 8021a70:	4602      	mov	r2, r0
 8021a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021a74:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 8021a76:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8021a7a:	f7df f8ad 	bl	8000bd8 <__aeabi_d2uiz>
 8021a7e:	4602      	mov	r2, r0
 8021a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021a82:	1d1c      	adds	r4, r3, #4
 8021a84:	4610      	mov	r0, r2
 8021a86:	f000 ffe7 	bl	8022a58 <mg_ntohl>
 8021a8a:	4603      	mov	r3, r0
 8021a8c:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 8021a8e:	f107 0308 	add.w	r3, r7, #8
 8021a92:	2230      	movs	r2, #48	@ 0x30
 8021a94:	4619      	mov	r1, r3
 8021a96:	6878      	ldr	r0, [r7, #4]
 8021a98:	f7ff fa7e 	bl	8020f98 <mg_send>
}
 8021a9c:	bf00      	nop
 8021a9e:	3754      	adds	r7, #84	@ 0x54
 8021aa0:	46bd      	mov	sp, r7
 8021aa2:	bd90      	pop	{r4, r7, pc}
 8021aa4:	f3af 8000 	nop.w
 8021aa8:	ffe00000 	.word	0xffe00000
 8021aac:	41efffff 	.word	0x41efffff
 8021ab0:	20000298 	.word	0x20000298
 8021ab4:	08034658 	.word	0x08034658
 8021ab8:	08031484 	.word	0x08031484
 8021abc:	08033174 	.word	0x08033174
 8021ac0:	408f4000 	.word	0x408f4000
 8021ac4:	83aa7e80 	.word	0x83aa7e80

08021ac8 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 8021ac8:	b580      	push	{r7, lr}
 8021aca:	b086      	sub	sp, #24
 8021acc:	af00      	add	r7, sp, #0
 8021ace:	60f8      	str	r0, [r7, #12]
 8021ad0:	60b9      	str	r1, [r7, #8]
 8021ad2:	607a      	str	r2, [r7, #4]
 8021ad4:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8021ad6:	2300      	movs	r3, #0
 8021ad8:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 8021ada:	68bb      	ldr	r3, [r7, #8]
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d101      	bne.n	8021ae4 <mg_sntp_connect+0x1c>
 8021ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8021b14 <mg_sntp_connect+0x4c>)
 8021ae2:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) {
 8021ae4:	683b      	ldr	r3, [r7, #0]
 8021ae6:	687a      	ldr	r2, [r7, #4]
 8021ae8:	68b9      	ldr	r1, [r7, #8]
 8021aea:	68f8      	ldr	r0, [r7, #12]
 8021aec:	f7fb ff90 	bl	801da10 <mg_connect>
 8021af0:	6178      	str	r0, [r7, #20]
 8021af2:	697b      	ldr	r3, [r7, #20]
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	d008      	beq.n	8021b0a <mg_sntp_connect+0x42>
    c->pfn = sntp_cb;
 8021af8:	697b      	ldr	r3, [r7, #20]
 8021afa:	4a07      	ldr	r2, [pc, #28]	@ (8021b18 <mg_sntp_connect+0x50>)
 8021afc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    sntp_cb(c, MG_EV_OPEN, (void *) url);
 8021b00:	68ba      	ldr	r2, [r7, #8]
 8021b02:	2101      	movs	r1, #1
 8021b04:	6978      	ldr	r0, [r7, #20]
 8021b06:	f7ff fecb 	bl	80218a0 <sntp_cb>
  }
  return c;
 8021b0a:	697b      	ldr	r3, [r7, #20]
}
 8021b0c:	4618      	mov	r0, r3
 8021b0e:	3718      	adds	r7, #24
 8021b10:	46bd      	mov	sp, r7
 8021b12:	bd80      	pop	{r7, pc}
 8021b14:	0803318c 	.word	0x0803318c
 8021b18:	080218a1 	.word	0x080218a1

08021b1c <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	b084      	sub	sp, #16
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	60f8      	str	r0, [r7, #12]
 8021b24:	60b9      	str	r1, [r7, #8]
 8021b26:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8021b28:	4b05      	ldr	r3, [pc, #20]	@ (8021b40 <mg_http_serve_ssi+0x24>)
 8021b2a:	2200      	movs	r2, #0
 8021b2c:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8021b30:	68f8      	ldr	r0, [r7, #12]
 8021b32:	f7f6 fb5b 	bl	80181ec <mg_http_reply>
  (void) root, (void) fullpath;
}
 8021b36:	bf00      	nop
 8021b38:	3710      	adds	r7, #16
 8021b3a:	46bd      	mov	sp, r7
 8021b3c:	bd80      	pop	{r7, pc}
 8021b3e:	bf00      	nop
 8021b40:	080331a8 	.word	0x080331a8

08021b44 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8021b44:	b580      	push	{r7, lr}
 8021b46:	b084      	sub	sp, #16
 8021b48:	af00      	add	r7, sp, #0
 8021b4a:	6078      	str	r0, [r7, #4]
 8021b4c:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8021b4e:	683b      	ldr	r3, [r7, #0]
 8021b50:	60bb      	str	r3, [r7, #8]
 8021b52:	683b      	ldr	r3, [r7, #0]
 8021b54:	2b00      	cmp	r3, #0
 8021b56:	d004      	beq.n	8021b62 <mg_str_s+0x1e>
 8021b58:	6838      	ldr	r0, [r7, #0]
 8021b5a:	f7de fba1 	bl	80002a0 <strlen>
 8021b5e:	4603      	mov	r3, r0
 8021b60:	e000      	b.n	8021b64 <mg_str_s+0x20>
 8021b62:	2300      	movs	r3, #0
 8021b64:	60fb      	str	r3, [r7, #12]
  return str;
 8021b66:	687b      	ldr	r3, [r7, #4]
 8021b68:	461a      	mov	r2, r3
 8021b6a:	f107 0308 	add.w	r3, r7, #8
 8021b6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021b72:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8021b76:	6878      	ldr	r0, [r7, #4]
 8021b78:	3710      	adds	r7, #16
 8021b7a:	46bd      	mov	sp, r7
 8021b7c:	bd80      	pop	{r7, pc}

08021b7e <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8021b7e:	b480      	push	{r7}
 8021b80:	b087      	sub	sp, #28
 8021b82:	af00      	add	r7, sp, #0
 8021b84:	60f8      	str	r0, [r7, #12]
 8021b86:	60b9      	str	r1, [r7, #8]
 8021b88:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 8021b8a:	68bb      	ldr	r3, [r7, #8]
 8021b8c:	613b      	str	r3, [r7, #16]
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	617b      	str	r3, [r7, #20]
  return str;
 8021b92:	68fb      	ldr	r3, [r7, #12]
 8021b94:	461a      	mov	r2, r3
 8021b96:	f107 0310 	add.w	r3, r7, #16
 8021b9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021b9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8021ba2:	68f8      	ldr	r0, [r7, #12]
 8021ba4:	371c      	adds	r7, #28
 8021ba6:	46bd      	mov	sp, r7
 8021ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bac:	4770      	bx	lr

08021bae <mg_tolc>:

static int mg_tolc(char c) {
 8021bae:	b480      	push	{r7}
 8021bb0:	b083      	sub	sp, #12
 8021bb2:	af00      	add	r7, sp, #0
 8021bb4:	4603      	mov	r3, r0
 8021bb6:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8021bb8:	79fb      	ldrb	r3, [r7, #7]
 8021bba:	2b40      	cmp	r3, #64	@ 0x40
 8021bbc:	d905      	bls.n	8021bca <mg_tolc+0x1c>
 8021bbe:	79fb      	ldrb	r3, [r7, #7]
 8021bc0:	2b5a      	cmp	r3, #90	@ 0x5a
 8021bc2:	d802      	bhi.n	8021bca <mg_tolc+0x1c>
 8021bc4:	79fb      	ldrb	r3, [r7, #7]
 8021bc6:	3320      	adds	r3, #32
 8021bc8:	e000      	b.n	8021bcc <mg_tolc+0x1e>
 8021bca:	79fb      	ldrb	r3, [r7, #7]
}
 8021bcc:	4618      	mov	r0, r3
 8021bce:	370c      	adds	r7, #12
 8021bd0:	46bd      	mov	sp, r7
 8021bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bd6:	4770      	bx	lr

08021bd8 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8021bd8:	b490      	push	{r4, r7}
 8021bda:	b088      	sub	sp, #32
 8021bdc:	af00      	add	r7, sp, #0
 8021bde:	f107 0408 	add.w	r4, r7, #8
 8021be2:	e884 0003 	stmia.w	r4, {r0, r1}
 8021be6:	4639      	mov	r1, r7
 8021be8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8021bec:	2300      	movs	r3, #0
 8021bee:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8021bf0:	e019      	b.n	8021c26 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8021bf2:	68ba      	ldr	r2, [r7, #8]
 8021bf4:	69fb      	ldr	r3, [r7, #28]
 8021bf6:	4413      	add	r3, r2
 8021bf8:	781b      	ldrb	r3, [r3, #0]
 8021bfa:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 8021bfc:	683a      	ldr	r2, [r7, #0]
 8021bfe:	69fb      	ldr	r3, [r7, #28]
 8021c00:	4413      	add	r3, r2
 8021c02:	781b      	ldrb	r3, [r3, #0]
 8021c04:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8021c06:	69ba      	ldr	r2, [r7, #24]
 8021c08:	697b      	ldr	r3, [r7, #20]
 8021c0a:	429a      	cmp	r2, r3
 8021c0c:	da02      	bge.n	8021c14 <mg_strcmp+0x3c>
 8021c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021c12:	e01e      	b.n	8021c52 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8021c14:	69ba      	ldr	r2, [r7, #24]
 8021c16:	697b      	ldr	r3, [r7, #20]
 8021c18:	429a      	cmp	r2, r3
 8021c1a:	dd01      	ble.n	8021c20 <mg_strcmp+0x48>
 8021c1c:	2301      	movs	r3, #1
 8021c1e:	e018      	b.n	8021c52 <mg_strcmp+0x7a>
    i++;
 8021c20:	69fb      	ldr	r3, [r7, #28]
 8021c22:	3301      	adds	r3, #1
 8021c24:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8021c26:	68fb      	ldr	r3, [r7, #12]
 8021c28:	69fa      	ldr	r2, [r7, #28]
 8021c2a:	429a      	cmp	r2, r3
 8021c2c:	d203      	bcs.n	8021c36 <mg_strcmp+0x5e>
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	69fa      	ldr	r2, [r7, #28]
 8021c32:	429a      	cmp	r2, r3
 8021c34:	d3dd      	bcc.n	8021bf2 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8021c36:	68fb      	ldr	r3, [r7, #12]
 8021c38:	69fa      	ldr	r2, [r7, #28]
 8021c3a:	429a      	cmp	r2, r3
 8021c3c:	d201      	bcs.n	8021c42 <mg_strcmp+0x6a>
 8021c3e:	2301      	movs	r3, #1
 8021c40:	e007      	b.n	8021c52 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8021c42:	687b      	ldr	r3, [r7, #4]
 8021c44:	69fa      	ldr	r2, [r7, #28]
 8021c46:	429a      	cmp	r2, r3
 8021c48:	d202      	bcs.n	8021c50 <mg_strcmp+0x78>
 8021c4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021c4e:	e000      	b.n	8021c52 <mg_strcmp+0x7a>
  return 0;
 8021c50:	2300      	movs	r3, #0
}
 8021c52:	4618      	mov	r0, r3
 8021c54:	3720      	adds	r7, #32
 8021c56:	46bd      	mov	sp, r7
 8021c58:	bc90      	pop	{r4, r7}
 8021c5a:	4770      	bx	lr

08021c5c <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8021c5c:	b590      	push	{r4, r7, lr}
 8021c5e:	b089      	sub	sp, #36	@ 0x24
 8021c60:	af00      	add	r7, sp, #0
 8021c62:	f107 0408 	add.w	r4, r7, #8
 8021c66:	e884 0003 	stmia.w	r4, {r0, r1}
 8021c6a:	4639      	mov	r1, r7
 8021c6c:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8021c70:	2300      	movs	r3, #0
 8021c72:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8021c74:	e01f      	b.n	8021cb6 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8021c76:	68ba      	ldr	r2, [r7, #8]
 8021c78:	69fb      	ldr	r3, [r7, #28]
 8021c7a:	4413      	add	r3, r2
 8021c7c:	781b      	ldrb	r3, [r3, #0]
 8021c7e:	4618      	mov	r0, r3
 8021c80:	f7ff ff95 	bl	8021bae <mg_tolc>
 8021c84:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8021c86:	683a      	ldr	r2, [r7, #0]
 8021c88:	69fb      	ldr	r3, [r7, #28]
 8021c8a:	4413      	add	r3, r2
 8021c8c:	781b      	ldrb	r3, [r3, #0]
 8021c8e:	4618      	mov	r0, r3
 8021c90:	f7ff ff8d 	bl	8021bae <mg_tolc>
 8021c94:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8021c96:	69ba      	ldr	r2, [r7, #24]
 8021c98:	697b      	ldr	r3, [r7, #20]
 8021c9a:	429a      	cmp	r2, r3
 8021c9c:	da02      	bge.n	8021ca4 <mg_strcasecmp+0x48>
 8021c9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021ca2:	e01e      	b.n	8021ce2 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8021ca4:	69ba      	ldr	r2, [r7, #24]
 8021ca6:	697b      	ldr	r3, [r7, #20]
 8021ca8:	429a      	cmp	r2, r3
 8021caa:	dd01      	ble.n	8021cb0 <mg_strcasecmp+0x54>
 8021cac:	2301      	movs	r3, #1
 8021cae:	e018      	b.n	8021ce2 <mg_strcasecmp+0x86>
    i++;
 8021cb0:	69fb      	ldr	r3, [r7, #28]
 8021cb2:	3301      	adds	r3, #1
 8021cb4:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8021cb6:	68fb      	ldr	r3, [r7, #12]
 8021cb8:	69fa      	ldr	r2, [r7, #28]
 8021cba:	429a      	cmp	r2, r3
 8021cbc:	d203      	bcs.n	8021cc6 <mg_strcasecmp+0x6a>
 8021cbe:	687b      	ldr	r3, [r7, #4]
 8021cc0:	69fa      	ldr	r2, [r7, #28]
 8021cc2:	429a      	cmp	r2, r3
 8021cc4:	d3d7      	bcc.n	8021c76 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8021cc6:	68fb      	ldr	r3, [r7, #12]
 8021cc8:	69fa      	ldr	r2, [r7, #28]
 8021cca:	429a      	cmp	r2, r3
 8021ccc:	d201      	bcs.n	8021cd2 <mg_strcasecmp+0x76>
 8021cce:	2301      	movs	r3, #1
 8021cd0:	e007      	b.n	8021ce2 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	69fa      	ldr	r2, [r7, #28]
 8021cd6:	429a      	cmp	r2, r3
 8021cd8:	d202      	bcs.n	8021ce0 <mg_strcasecmp+0x84>
 8021cda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021cde:	e000      	b.n	8021ce2 <mg_strcasecmp+0x86>
  return 0;
 8021ce0:	2300      	movs	r3, #0
}
 8021ce2:	4618      	mov	r0, r3
 8021ce4:	3724      	adds	r7, #36	@ 0x24
 8021ce6:	46bd      	mov	sp, r7
 8021ce8:	bd90      	pop	{r4, r7, pc}

08021cea <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8021cea:	b490      	push	{r4, r7}
 8021cec:	b088      	sub	sp, #32
 8021cee:	af00      	add	r7, sp, #0
 8021cf0:	f107 0408 	add.w	r4, r7, #8
 8021cf4:	e884 0003 	stmia.w	r4, {r0, r1}
 8021cf8:	4639      	mov	r1, r7
 8021cfa:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8021cfe:	2300      	movs	r3, #0
 8021d00:	61fb      	str	r3, [r7, #28]
 8021d02:	2300      	movs	r3, #0
 8021d04:	61bb      	str	r3, [r7, #24]
 8021d06:	2300      	movs	r3, #0
 8021d08:	617b      	str	r3, [r7, #20]
 8021d0a:	2300      	movs	r3, #0
 8021d0c:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8021d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	f000 80ba 	beq.w	8021e8a <mg_match+0x1a0>
 8021d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d18:	2200      	movs	r2, #0
 8021d1a:	601a      	str	r2, [r3, #0]
 8021d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d1e:	2200      	movs	r2, #0
 8021d20:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8021d22:	e0b2      	b.n	8021e8a <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	69fa      	ldr	r2, [r7, #28]
 8021d28:	429a      	cmp	r2, r3
 8021d2a:	d25b      	bcs.n	8021de4 <mg_match+0xfa>
 8021d2c:	68fb      	ldr	r3, [r7, #12]
 8021d2e:	69ba      	ldr	r2, [r7, #24]
 8021d30:	429a      	cmp	r2, r3
 8021d32:	d257      	bcs.n	8021de4 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8021d34:	683a      	ldr	r2, [r7, #0]
 8021d36:	69fb      	ldr	r3, [r7, #28]
 8021d38:	4413      	add	r3, r2
 8021d3a:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8021d3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8021d3e:	d015      	beq.n	8021d6c <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8021d40:	683a      	ldr	r2, [r7, #0]
 8021d42:	69fb      	ldr	r3, [r7, #28]
 8021d44:	4413      	add	r3, r2
 8021d46:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8021d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8021d4a:	d04b      	beq.n	8021de4 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8021d4c:	683a      	ldr	r2, [r7, #0]
 8021d4e:	69fb      	ldr	r3, [r7, #28]
 8021d50:	4413      	add	r3, r2
 8021d52:	781b      	ldrb	r3, [r3, #0]
 8021d54:	2b23      	cmp	r3, #35	@ 0x23
 8021d56:	d045      	beq.n	8021de4 <mg_match+0xfa>
 8021d58:	68ba      	ldr	r2, [r7, #8]
 8021d5a:	69bb      	ldr	r3, [r7, #24]
 8021d5c:	4413      	add	r3, r2
 8021d5e:	781a      	ldrb	r2, [r3, #0]
 8021d60:	6839      	ldr	r1, [r7, #0]
 8021d62:	69fb      	ldr	r3, [r7, #28]
 8021d64:	440b      	add	r3, r1
 8021d66:	781b      	ldrb	r3, [r3, #0]
 8021d68:	429a      	cmp	r2, r3
 8021d6a:	d13b      	bne.n	8021de4 <mg_match+0xfa>
      if (caps == NULL) {
 8021d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d6e:	2b00      	cmp	r3, #0
 8021d70:	d031      	beq.n	8021dd6 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8021d72:	683a      	ldr	r2, [r7, #0]
 8021d74:	69fb      	ldr	r3, [r7, #28]
 8021d76:	4413      	add	r3, r2
 8021d78:	781b      	ldrb	r3, [r3, #0]
 8021d7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8021d7c:	d111      	bne.n	8021da2 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8021d7e:	68ba      	ldr	r2, [r7, #8]
 8021d80:	69bb      	ldr	r3, [r7, #24]
 8021d82:	441a      	add	r2, r3
 8021d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d86:	601a      	str	r2, [r3, #0]
 8021d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d8a:	2201      	movs	r2, #1
 8021d8c:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8021d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d90:	3308      	adds	r3, #8
 8021d92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d96:	2200      	movs	r2, #0
 8021d98:	601a      	str	r2, [r3, #0]
 8021d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d9c:	2200      	movs	r2, #0
 8021d9e:	605a      	str	r2, [r3, #4]
 8021da0:	e019      	b.n	8021dd6 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8021da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021da4:	681b      	ldr	r3, [r3, #0]
 8021da6:	2b00      	cmp	r3, #0
 8021da8:	d015      	beq.n	8021dd6 <mg_match+0xec>
 8021daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021dac:	685b      	ldr	r3, [r3, #4]
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	d111      	bne.n	8021dd6 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8021db2:	68ba      	ldr	r2, [r7, #8]
 8021db4:	69bb      	ldr	r3, [r7, #24]
 8021db6:	441a      	add	r2, r3
 8021db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021dba:	681b      	ldr	r3, [r3, #0]
 8021dbc:	1ad3      	subs	r3, r2, r3
 8021dbe:	461a      	mov	r2, r3
 8021dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021dc2:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 8021dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021dc6:	3308      	adds	r3, #8
 8021dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021dcc:	2200      	movs	r2, #0
 8021dce:	605a      	str	r2, [r3, #4]
 8021dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021dd2:	2200      	movs	r2, #0
 8021dd4:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8021dd6:	69fb      	ldr	r3, [r7, #28]
 8021dd8:	3301      	adds	r3, #1
 8021dda:	61fb      	str	r3, [r7, #28]
 8021ddc:	69bb      	ldr	r3, [r7, #24]
 8021dde:	3301      	adds	r3, #1
 8021de0:	61bb      	str	r3, [r7, #24]
 8021de2:	e052      	b.n	8021e8a <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 8021de4:	687b      	ldr	r3, [r7, #4]
 8021de6:	69fa      	ldr	r2, [r7, #28]
 8021de8:	429a      	cmp	r2, r3
 8021dea:	d222      	bcs.n	8021e32 <mg_match+0x148>
 8021dec:	683a      	ldr	r2, [r7, #0]
 8021dee:	69fb      	ldr	r3, [r7, #28]
 8021df0:	4413      	add	r3, r2
 8021df2:	781b      	ldrb	r3, [r3, #0]
 8021df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8021df6:	d005      	beq.n	8021e04 <mg_match+0x11a>
 8021df8:	683a      	ldr	r2, [r7, #0]
 8021dfa:	69fb      	ldr	r3, [r7, #28]
 8021dfc:	4413      	add	r3, r2
 8021dfe:	781b      	ldrb	r3, [r3, #0]
 8021e00:	2b23      	cmp	r3, #35	@ 0x23
 8021e02:	d116      	bne.n	8021e32 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8021e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d00b      	beq.n	8021e22 <mg_match+0x138>
 8021e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	2b00      	cmp	r3, #0
 8021e10:	d107      	bne.n	8021e22 <mg_match+0x138>
 8021e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e14:	2200      	movs	r2, #0
 8021e16:	605a      	str	r2, [r3, #4]
 8021e18:	68ba      	ldr	r2, [r7, #8]
 8021e1a:	69bb      	ldr	r3, [r7, #24]
 8021e1c:	441a      	add	r2, r3
 8021e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e20:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8021e22:	69fb      	ldr	r3, [r7, #28]
 8021e24:	1c5a      	adds	r2, r3, #1
 8021e26:	61fa      	str	r2, [r7, #28]
 8021e28:	617b      	str	r3, [r7, #20]
 8021e2a:	69bb      	ldr	r3, [r7, #24]
 8021e2c:	3301      	adds	r3, #1
 8021e2e:	613b      	str	r3, [r7, #16]
 8021e30:	e02b      	b.n	8021e8a <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8021e32:	693b      	ldr	r3, [r7, #16]
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	d025      	beq.n	8021e84 <mg_match+0x19a>
 8021e38:	68fb      	ldr	r3, [r7, #12]
 8021e3a:	693a      	ldr	r2, [r7, #16]
 8021e3c:	429a      	cmp	r2, r3
 8021e3e:	d821      	bhi.n	8021e84 <mg_match+0x19a>
 8021e40:	683a      	ldr	r2, [r7, #0]
 8021e42:	697b      	ldr	r3, [r7, #20]
 8021e44:	4413      	add	r3, r2
 8021e46:	781b      	ldrb	r3, [r3, #0]
 8021e48:	2b23      	cmp	r3, #35	@ 0x23
 8021e4a:	d005      	beq.n	8021e58 <mg_match+0x16e>
 8021e4c:	68ba      	ldr	r2, [r7, #8]
 8021e4e:	69bb      	ldr	r3, [r7, #24]
 8021e50:	4413      	add	r3, r2
 8021e52:	781b      	ldrb	r3, [r3, #0]
 8021e54:	2b2f      	cmp	r3, #47	@ 0x2f
 8021e56:	d015      	beq.n	8021e84 <mg_match+0x19a>
      i = ni, j = nj;
 8021e58:	697b      	ldr	r3, [r7, #20]
 8021e5a:	61fb      	str	r3, [r7, #28]
 8021e5c:	693b      	ldr	r3, [r7, #16]
 8021e5e:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d010      	beq.n	8021e88 <mg_match+0x19e>
 8021e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e68:	681b      	ldr	r3, [r3, #0]
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d10c      	bne.n	8021e88 <mg_match+0x19e>
 8021e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e70:	685b      	ldr	r3, [r3, #4]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d108      	bne.n	8021e88 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8021e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e78:	3b08      	subs	r3, #8
 8021e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8021e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e7e:	2200      	movs	r2, #0
 8021e80:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021e82:	e001      	b.n	8021e88 <mg_match+0x19e>
      }
    } else {
      return false;
 8021e84:	2300      	movs	r3, #0
 8021e86:	e01f      	b.n	8021ec8 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8021e88:	bf00      	nop
  while (i < p.len || j < s.len) {
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	69fa      	ldr	r2, [r7, #28]
 8021e8e:	429a      	cmp	r2, r3
 8021e90:	f4ff af48 	bcc.w	8021d24 <mg_match+0x3a>
 8021e94:	68fb      	ldr	r3, [r7, #12]
 8021e96:	69ba      	ldr	r2, [r7, #24]
 8021e98:	429a      	cmp	r2, r3
 8021e9a:	f4ff af43 	bcc.w	8021d24 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8021e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ea0:	2b00      	cmp	r3, #0
 8021ea2:	d010      	beq.n	8021ec6 <mg_match+0x1dc>
 8021ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	d00c      	beq.n	8021ec6 <mg_match+0x1dc>
 8021eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021eae:	685b      	ldr	r3, [r3, #4]
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d108      	bne.n	8021ec6 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 8021eb4:	68ba      	ldr	r2, [r7, #8]
 8021eb6:	69bb      	ldr	r3, [r7, #24]
 8021eb8:	441a      	add	r2, r3
 8021eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ebc:	681b      	ldr	r3, [r3, #0]
 8021ebe:	1ad3      	subs	r3, r2, r3
 8021ec0:	461a      	mov	r2, r3
 8021ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ec4:	605a      	str	r2, [r3, #4]
  }
  return true;
 8021ec6:	2301      	movs	r3, #1
}
 8021ec8:	4618      	mov	r0, r3
 8021eca:	3720      	adds	r7, #32
 8021ecc:	46bd      	mov	sp, r7
 8021ece:	bc90      	pop	{r4, r7}
 8021ed0:	4770      	bx	lr

08021ed2 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8021ed2:	b590      	push	{r4, r7, lr}
 8021ed4:	b089      	sub	sp, #36	@ 0x24
 8021ed6:	af00      	add	r7, sp, #0
 8021ed8:	f107 0410 	add.w	r4, r7, #16
 8021edc:	e884 0003 	stmia.w	r4, {r0, r1}
 8021ee0:	60fa      	str	r2, [r7, #12]
 8021ee2:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 8021ee4:	697b      	ldr	r3, [r7, #20]
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d002      	beq.n	8021ef0 <mg_span+0x1e>
 8021eea:	693b      	ldr	r3, [r7, #16]
 8021eec:	2b00      	cmp	r3, #0
 8021eee:	d101      	bne.n	8021ef4 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8021ef0:	2300      	movs	r3, #0
 8021ef2:	e047      	b.n	8021f84 <mg_span+0xb2>
  } else {
    size_t len = 0;
 8021ef4:	2300      	movs	r3, #0
 8021ef6:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 8021ef8:	e002      	b.n	8021f00 <mg_span+0x2e>
 8021efa:	69fb      	ldr	r3, [r7, #28]
 8021efc:	3301      	adds	r3, #1
 8021efe:	61fb      	str	r3, [r7, #28]
 8021f00:	697b      	ldr	r3, [r7, #20]
 8021f02:	69fa      	ldr	r2, [r7, #28]
 8021f04:	429a      	cmp	r2, r3
 8021f06:	d207      	bcs.n	8021f18 <mg_span+0x46>
 8021f08:	693a      	ldr	r2, [r7, #16]
 8021f0a:	69fb      	ldr	r3, [r7, #28]
 8021f0c:	4413      	add	r3, r2
 8021f0e:	781b      	ldrb	r3, [r3, #0]
 8021f10:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8021f14:	429a      	cmp	r2, r3
 8021f16:	d1f0      	bne.n	8021efa <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8021f18:	68fb      	ldr	r3, [r7, #12]
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	d00c      	beq.n	8021f38 <mg_span+0x66>
 8021f1e:	6939      	ldr	r1, [r7, #16]
 8021f20:	68fc      	ldr	r4, [r7, #12]
 8021f22:	463b      	mov	r3, r7
 8021f24:	69fa      	ldr	r2, [r7, #28]
 8021f26:	4618      	mov	r0, r3
 8021f28:	f7ff fe29 	bl	8021b7e <mg_str_n>
 8021f2c:	4622      	mov	r2, r4
 8021f2e:	463b      	mov	r3, r7
 8021f30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021f34:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8021f38:	68bb      	ldr	r3, [r7, #8]
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	d010      	beq.n	8021f60 <mg_span+0x8e>
 8021f3e:	693a      	ldr	r2, [r7, #16]
 8021f40:	69fb      	ldr	r3, [r7, #28]
 8021f42:	18d1      	adds	r1, r2, r3
 8021f44:	697a      	ldr	r2, [r7, #20]
 8021f46:	69fb      	ldr	r3, [r7, #28]
 8021f48:	1ad2      	subs	r2, r2, r3
 8021f4a:	68bc      	ldr	r4, [r7, #8]
 8021f4c:	463b      	mov	r3, r7
 8021f4e:	4618      	mov	r0, r3
 8021f50:	f7ff fe15 	bl	8021b7e <mg_str_n>
 8021f54:	4622      	mov	r2, r4
 8021f56:	463b      	mov	r3, r7
 8021f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021f5c:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8021f60:	68bb      	ldr	r3, [r7, #8]
 8021f62:	2b00      	cmp	r3, #0
 8021f64:	d00d      	beq.n	8021f82 <mg_span+0xb0>
 8021f66:	697b      	ldr	r3, [r7, #20]
 8021f68:	69fa      	ldr	r2, [r7, #28]
 8021f6a:	429a      	cmp	r2, r3
 8021f6c:	d209      	bcs.n	8021f82 <mg_span+0xb0>
 8021f6e:	68bb      	ldr	r3, [r7, #8]
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	1c5a      	adds	r2, r3, #1
 8021f74:	68bb      	ldr	r3, [r7, #8]
 8021f76:	601a      	str	r2, [r3, #0]
 8021f78:	68bb      	ldr	r3, [r7, #8]
 8021f7a:	685b      	ldr	r3, [r3, #4]
 8021f7c:	1e5a      	subs	r2, r3, #1
 8021f7e:	68bb      	ldr	r3, [r7, #8]
 8021f80:	605a      	str	r2, [r3, #4]
    return true;
 8021f82:	2301      	movs	r3, #1
  }
}
 8021f84:	4618      	mov	r0, r3
 8021f86:	3724      	adds	r7, #36	@ 0x24
 8021f88:	46bd      	mov	sp, r7
 8021f8a:	bd90      	pop	{r4, r7, pc}

08021f8c <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8021f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f90:	b0a5      	sub	sp, #148	@ 0x94
 8021f92:	af00      	add	r7, sp, #0
 8021f94:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8021f98:	e884 0003 	stmia.w	r4, {r0, r1}
 8021f9c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8021f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8021fa0:	2300      	movs	r3, #0
 8021fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021fa6:	2300      	movs	r3, #0
 8021fa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8021fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021fb0:	2b01      	cmp	r3, #1
 8021fb2:	d016      	beq.n	8021fe2 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8021fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021fb8:	2b02      	cmp	r3, #2
 8021fba:	d00d      	beq.n	8021fd8 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8021fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8021fc0:	2b04      	cmp	r3, #4
 8021fc2:	d104      	bne.n	8021fce <mg_str_to_num+0x42>
 8021fc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021fc8:	f04f 0300 	mov.w	r3, #0
 8021fcc:	e00d      	b.n	8021fea <mg_str_to_num+0x5e>
 8021fce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021fd6:	e008      	b.n	8021fea <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 8021fd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021fdc:	f04f 0300 	mov.w	r3, #0
 8021fe0:	e003      	b.n	8021fea <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8021fe2:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 8021fe6:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8021fea:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8021fee:	f04f 0200 	mov.w	r2, #0
 8021ff2:	f04f 0300 	mov.w	r3, #0
 8021ff6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8021ffa:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8021ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8022002:	bf08      	it	eq
 8022004:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 8022008:	d105      	bne.n	8022016 <mg_str_to_num+0x8a>
 802200a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802200e:	2b08      	cmp	r3, #8
 8022010:	d001      	beq.n	8022016 <mg_str_to_num+0x8a>
 8022012:	2300      	movs	r3, #0
 8022014:	e1e8      	b.n	80223e8 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8022016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022018:	2b00      	cmp	r3, #0
 802201a:	d12d      	bne.n	8022078 <mg_str_to_num+0xec>
 802201c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802201e:	2b01      	cmp	r3, #1
 8022020:	d92a      	bls.n	8022078 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8022022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8022024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022028:	4413      	add	r3, r2
 802202a:	781b      	ldrb	r3, [r3, #0]
 802202c:	2b30      	cmp	r3, #48	@ 0x30
 802202e:	d121      	bne.n	8022074 <mg_str_to_num+0xe8>
      i++;
 8022030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022034:	3301      	adds	r3, #1
 8022036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 802203a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802203c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022040:	4413      	add	r3, r2
 8022042:	781b      	ldrb	r3, [r3, #0]
 8022044:	2b62      	cmp	r3, #98	@ 0x62
 8022046:	d00a      	beq.n	802205e <mg_str_to_num+0xd2>
 8022048:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802204a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802204e:	4413      	add	r3, r2
 8022050:	781b      	ldrb	r3, [r3, #0]
 8022052:	2b78      	cmp	r3, #120	@ 0x78
 8022054:	d101      	bne.n	802205a <mg_str_to_num+0xce>
 8022056:	2310      	movs	r3, #16
 8022058:	e002      	b.n	8022060 <mg_str_to_num+0xd4>
 802205a:	230a      	movs	r3, #10
 802205c:	e000      	b.n	8022060 <mg_str_to_num+0xd4>
 802205e:	2302      	movs	r3, #2
 8022060:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8022062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022064:	2b0a      	cmp	r3, #10
 8022066:	d007      	beq.n	8022078 <mg_str_to_num+0xec>
 8022068:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802206c:	3301      	adds	r3, #1
 802206e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8022072:	e001      	b.n	8022078 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8022074:	230a      	movs	r3, #10
 8022076:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8022078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802207a:	2b10      	cmp	r3, #16
 802207c:	f000 8178 	beq.w	8022370 <mg_str_to_num+0x3e4>
 8022080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022082:	2b10      	cmp	r3, #16
 8022084:	f300 817d 	bgt.w	8022382 <mg_str_to_num+0x3f6>
 8022088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802208a:	2b02      	cmp	r3, #2
 802208c:	d052      	beq.n	8022134 <mg_str_to_num+0x1a8>
 802208e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022090:	2b0a      	cmp	r3, #10
 8022092:	f000 80cd 	beq.w	8022230 <mg_str_to_num+0x2a4>
 8022096:	e174      	b.n	8022382 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8022098:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802209a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802209e:	4413      	add	r3, r2
 80220a0:	781b      	ldrb	r3, [r3, #0]
 80220a2:	3b30      	subs	r3, #48	@ 0x30
 80220a4:	17da      	asrs	r2, r3, #31
 80220a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80220a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80220aa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80220ae:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 80220b2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80220b6:	f04f 0200 	mov.w	r2, #0
 80220ba:	f04f 0300 	mov.w	r3, #0
 80220be:	0842      	lsrs	r2, r0, #1
 80220c0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80220c4:	084b      	lsrs	r3, r1, #1
 80220c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80220ca:	4282      	cmp	r2, r0
 80220cc:	418b      	sbcs	r3, r1
 80220ce:	d201      	bcs.n	80220d4 <mg_str_to_num+0x148>
 80220d0:	2300      	movs	r3, #0
 80220d2:	e189      	b.n	80223e8 <mg_str_to_num+0x45c>
        result *= 2;
 80220d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80220d8:	1891      	adds	r1, r2, r2
 80220da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80220dc:	415b      	adcs	r3, r3
 80220de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80220e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80220e4:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80220e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80220ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80220f0:	1a85      	subs	r5, r0, r2
 80220f2:	eb61 0603 	sbc.w	r6, r1, r3
 80220f6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80220fa:	4295      	cmp	r5, r2
 80220fc:	eb76 0303 	sbcs.w	r3, r6, r3
 8022100:	d201      	bcs.n	8022106 <mg_str_to_num+0x17a>
 8022102:	2300      	movs	r3, #0
 8022104:	e170      	b.n	80223e8 <mg_str_to_num+0x45c>
        result += digit;
 8022106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802210a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 802210e:	1884      	adds	r4, r0, r2
 8022110:	623c      	str	r4, [r7, #32]
 8022112:	eb41 0303 	adc.w	r3, r1, r3
 8022116:	627b      	str	r3, [r7, #36]	@ 0x24
 8022118:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 802211c:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8022120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022124:	3301      	adds	r3, #1
 8022126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 802212a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802212e:	3301      	adds	r3, #1
 8022130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8022134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022136:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802213a:	429a      	cmp	r2, r3
 802213c:	f080 8123 	bcs.w	8022386 <mg_str_to_num+0x3fa>
 8022140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8022142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022146:	4413      	add	r3, r2
 8022148:	781b      	ldrb	r3, [r3, #0]
 802214a:	2b30      	cmp	r3, #48	@ 0x30
 802214c:	d0a4      	beq.n	8022098 <mg_str_to_num+0x10c>
 802214e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8022150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022154:	4413      	add	r3, r2
 8022156:	781b      	ldrb	r3, [r3, #0]
 8022158:	2b31      	cmp	r3, #49	@ 0x31
 802215a:	d09d      	beq.n	8022098 <mg_str_to_num+0x10c>
      }
      break;
 802215c:	e113      	b.n	8022386 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 802215e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8022160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022164:	4413      	add	r3, r2
 8022166:	781b      	ldrb	r3, [r3, #0]
 8022168:	3b30      	subs	r3, #48	@ 0x30
 802216a:	17da      	asrs	r2, r3, #31
 802216c:	61bb      	str	r3, [r7, #24]
 802216e:	61fa      	str	r2, [r7, #28]
 8022170:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8022174:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8022178:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 802217c:	f04f 020a 	mov.w	r2, #10
 8022180:	f04f 0300 	mov.w	r3, #0
 8022184:	f7de fde8 	bl	8000d58 <__aeabi_uldivmod>
 8022188:	4602      	mov	r2, r0
 802218a:	460b      	mov	r3, r1
 802218c:	4610      	mov	r0, r2
 802218e:	4619      	mov	r1, r3
 8022190:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8022194:	4290      	cmp	r0, r2
 8022196:	eb71 0303 	sbcs.w	r3, r1, r3
 802219a:	d201      	bcs.n	80221a0 <mg_str_to_num+0x214>
 802219c:	2300      	movs	r3, #0
 802219e:	e123      	b.n	80223e8 <mg_str_to_num+0x45c>
        result *= 10;
 80221a0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80221a4:	4622      	mov	r2, r4
 80221a6:	462b      	mov	r3, r5
 80221a8:	f04f 0000 	mov.w	r0, #0
 80221ac:	f04f 0100 	mov.w	r1, #0
 80221b0:	0099      	lsls	r1, r3, #2
 80221b2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80221b6:	0090      	lsls	r0, r2, #2
 80221b8:	4602      	mov	r2, r0
 80221ba:	460b      	mov	r3, r1
 80221bc:	eb12 0804 	adds.w	r8, r2, r4
 80221c0:	eb43 0905 	adc.w	r9, r3, r5
 80221c4:	eb18 0308 	adds.w	r3, r8, r8
 80221c8:	613b      	str	r3, [r7, #16]
 80221ca:	eb49 0309 	adc.w	r3, r9, r9
 80221ce:	617b      	str	r3, [r7, #20]
 80221d0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80221d4:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80221d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80221dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80221e0:	1a84      	subs	r4, r0, r2
 80221e2:	63bc      	str	r4, [r7, #56]	@ 0x38
 80221e4:	eb61 0303 	sbc.w	r3, r1, r3
 80221e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80221ea:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80221ee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80221f2:	4621      	mov	r1, r4
 80221f4:	4291      	cmp	r1, r2
 80221f6:	4629      	mov	r1, r5
 80221f8:	eb71 0303 	sbcs.w	r3, r1, r3
 80221fc:	d201      	bcs.n	8022202 <mg_str_to_num+0x276>
 80221fe:	2300      	movs	r3, #0
 8022200:	e0f2      	b.n	80223e8 <mg_str_to_num+0x45c>
        result += digit;
 8022202:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8022206:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 802220a:	1884      	adds	r4, r0, r2
 802220c:	60bc      	str	r4, [r7, #8]
 802220e:	eb41 0303 	adc.w	r3, r1, r3
 8022212:	60fb      	str	r3, [r7, #12]
 8022214:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8022218:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 802221c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022220:	3301      	adds	r3, #1
 8022222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8022226:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802222a:	3301      	adds	r3, #1
 802222c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8022230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022232:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8022236:	429a      	cmp	r2, r3
 8022238:	f080 80a7 	bcs.w	802238a <mg_str_to_num+0x3fe>
 802223c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802223e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022242:	4413      	add	r3, r2
 8022244:	781b      	ldrb	r3, [r3, #0]
 8022246:	2b2f      	cmp	r3, #47	@ 0x2f
 8022248:	f240 809f 	bls.w	802238a <mg_str_to_num+0x3fe>
 802224c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802224e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022252:	4413      	add	r3, r2
 8022254:	781b      	ldrb	r3, [r3, #0]
 8022256:	2b39      	cmp	r3, #57	@ 0x39
 8022258:	d981      	bls.n	802215e <mg_str_to_num+0x1d2>
      }
      break;
 802225a:	e096      	b.n	802238a <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 802225c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802225e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022262:	4413      	add	r3, r2
 8022264:	781b      	ldrb	r3, [r3, #0]
 8022266:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 802226a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 802226e:	2b2f      	cmp	r3, #47	@ 0x2f
 8022270:	d90a      	bls.n	8022288 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8022272:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8022276:	2b39      	cmp	r3, #57	@ 0x39
 8022278:	d806      	bhi.n	8022288 <mg_str_to_num+0x2fc>
 802227a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 802227e:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8022280:	17da      	asrs	r2, r3, #31
 8022282:	643b      	str	r3, [r7, #64]	@ 0x40
 8022284:	647a      	str	r2, [r7, #68]	@ 0x44
 8022286:	e023      	b.n	80222d0 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8022288:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 802228c:	2b40      	cmp	r3, #64	@ 0x40
 802228e:	d90a      	bls.n	80222a6 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8022290:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8022294:	2b46      	cmp	r3, #70	@ 0x46
 8022296:	d806      	bhi.n	80222a6 <mg_str_to_num+0x31a>
 8022298:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 802229c:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 802229e:	17da      	asrs	r2, r3, #31
 80222a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80222a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80222a4:	e014      	b.n	80222d0 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 80222a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80222aa:	2b60      	cmp	r3, #96	@ 0x60
 80222ac:	d90a      	bls.n	80222c4 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80222ae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80222b2:	2b66      	cmp	r3, #102	@ 0x66
 80222b4:	d806      	bhi.n	80222c4 <mg_str_to_num+0x338>
 80222b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80222ba:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 80222bc:	17da      	asrs	r2, r3, #31
 80222be:	643b      	str	r3, [r7, #64]	@ 0x40
 80222c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80222c2:	e005      	b.n	80222d0 <mg_str_to_num+0x344>
 80222c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80222c8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80222cc:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80222d0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80222d4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 80222d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80222dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80222e0:	bf08      	it	eq
 80222e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	@ 0xffffffff
 80222e6:	d04a      	beq.n	802237e <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 80222e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80222ec:	f04f 0200 	mov.w	r2, #0
 80222f0:	f04f 0300 	mov.w	r3, #0
 80222f4:	0902      	lsrs	r2, r0, #4
 80222f6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80222fa:	090b      	lsrs	r3, r1, #4
 80222fc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8022300:	4282      	cmp	r2, r0
 8022302:	418b      	sbcs	r3, r1
 8022304:	d201      	bcs.n	802230a <mg_str_to_num+0x37e>
 8022306:	2300      	movs	r3, #0
 8022308:	e06e      	b.n	80223e8 <mg_str_to_num+0x45c>
        result *= 16;
 802230a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 802230e:	f04f 0200 	mov.w	r2, #0
 8022312:	f04f 0300 	mov.w	r3, #0
 8022316:	010b      	lsls	r3, r1, #4
 8022318:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 802231c:	0102      	lsls	r2, r0, #4
 802231e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8022322:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8022326:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 802232a:	ebb0 0a02 	subs.w	sl, r0, r2
 802232e:	eb61 0b03 	sbc.w	fp, r1, r3
 8022332:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8022336:	4592      	cmp	sl, r2
 8022338:	eb7b 0303 	sbcs.w	r3, fp, r3
 802233c:	d201      	bcs.n	8022342 <mg_str_to_num+0x3b6>
 802233e:	2300      	movs	r3, #0
 8022340:	e052      	b.n	80223e8 <mg_str_to_num+0x45c>
        result += digit;
 8022342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8022346:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 802234a:	1884      	adds	r4, r0, r2
 802234c:	603c      	str	r4, [r7, #0]
 802234e:	eb41 0303 	adc.w	r3, r1, r3
 8022352:	607b      	str	r3, [r7, #4]
 8022354:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022358:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 802235c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022360:	3301      	adds	r3, #1
 8022362:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8022366:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802236a:	3301      	adds	r3, #1
 802236c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8022370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022372:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8022376:	429a      	cmp	r2, r3
 8022378:	f4ff af70 	bcc.w	802225c <mg_str_to_num+0x2d0>
      }
      break;
 802237c:	e006      	b.n	802238c <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 802237e:	bf00      	nop
      break;
 8022380:	e004      	b.n	802238c <mg_str_to_num+0x400>
    default:
      return false;
 8022382:	2300      	movs	r3, #0
 8022384:	e030      	b.n	80223e8 <mg_str_to_num+0x45c>
      break;
 8022386:	bf00      	nop
 8022388:	e000      	b.n	802238c <mg_str_to_num+0x400>
      break;
 802238a:	bf00      	nop
  }
  if (ndigits == 0) return false;
 802238c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8022390:	2b00      	cmp	r3, #0
 8022392:	d101      	bne.n	8022398 <mg_str_to_num+0x40c>
 8022394:	2300      	movs	r3, #0
 8022396:	e027      	b.n	80223e8 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8022398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802239a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802239e:	429a      	cmp	r2, r3
 80223a0:	d001      	beq.n	80223a6 <mg_str_to_num+0x41a>
 80223a2:	2300      	movs	r3, #0
 80223a4:	e020      	b.n	80223e8 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 80223a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80223aa:	2b01      	cmp	r3, #1
 80223ac:	d104      	bne.n	80223b8 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 80223ae:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80223b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80223b4:	701a      	strb	r2, [r3, #0]
 80223b6:	e016      	b.n	80223e6 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 80223b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80223bc:	2b02      	cmp	r3, #2
 80223be:	d104      	bne.n	80223ca <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 80223c0:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80223c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80223c6:	801a      	strh	r2, [r3, #0]
 80223c8:	e00d      	b.n	80223e6 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 80223ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80223ce:	2b04      	cmp	r3, #4
 80223d0:	d104      	bne.n	80223dc <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 80223d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80223d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80223d8:	601a      	str	r2, [r3, #0]
 80223da:	e004      	b.n	80223e6 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 80223dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80223de:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80223e2:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 80223e6:	2301      	movs	r3, #1
}
 80223e8:	4618      	mov	r0, r3
 80223ea:	3794      	adds	r7, #148	@ 0x94
 80223ec:	46bd      	mov	sp, r7
 80223ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080223f2 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80223f2:	b480      	push	{r7}
 80223f4:	b085      	sub	sp, #20
 80223f6:	af00      	add	r7, sp, #0
 80223f8:	60f8      	str	r0, [r7, #12]
 80223fa:	60b9      	str	r1, [r7, #8]
 80223fc:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8022400:	68bb      	ldr	r3, [r7, #8]
 8022402:	2200      	movs	r2, #0
 8022404:	601a      	str	r2, [r3, #0]
 8022406:	68b9      	ldr	r1, [r7, #8]
 8022408:	e9d7 2300 	ldrd	r2, r3, [r7]
 802240c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8022410:	68b9      	ldr	r1, [r7, #8]
 8022412:	f04f 0200 	mov.w	r2, #0
 8022416:	f04f 0300 	mov.w	r3, #0
 802241a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 802241e:	68bb      	ldr	r3, [r7, #8]
 8022420:	69ba      	ldr	r2, [r7, #24]
 8022422:	619a      	str	r2, [r3, #24]
 8022424:	68bb      	ldr	r3, [r7, #8]
 8022426:	69fa      	ldr	r2, [r7, #28]
 8022428:	61da      	str	r2, [r3, #28]
 802242a:	68bb      	ldr	r3, [r7, #8]
 802242c:	6a3a      	ldr	r2, [r7, #32]
 802242e:	621a      	str	r2, [r3, #32]
 8022430:	68fb      	ldr	r3, [r7, #12]
 8022432:	681a      	ldr	r2, [r3, #0]
 8022434:	68bb      	ldr	r3, [r7, #8]
 8022436:	625a      	str	r2, [r3, #36]	@ 0x24
  *head = t;
 8022438:	68fb      	ldr	r3, [r7, #12]
 802243a:	68ba      	ldr	r2, [r7, #8]
 802243c:	601a      	str	r2, [r3, #0]
}
 802243e:	bf00      	nop
 8022440:	3714      	adds	r7, #20
 8022442:	46bd      	mov	sp, r7
 8022444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022448:	4770      	bx	lr

0802244a <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 802244a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802244e:	b086      	sub	sp, #24
 8022450:	af00      	add	r7, sp, #0
 8022452:	6178      	str	r0, [r7, #20]
 8022454:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8022458:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 802245c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022460:	eb10 0a02 	adds.w	sl, r0, r2
 8022464:	eb41 0b03 	adc.w	fp, r1, r3
 8022468:	697b      	ldr	r3, [r7, #20]
 802246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802246e:	4592      	cmp	sl, r2
 8022470:	eb7b 0303 	sbcs.w	r3, fp, r3
 8022474:	d206      	bcs.n	8022484 <mg_timer_expired+0x3a>
 8022476:	6979      	ldr	r1, [r7, #20]
 8022478:	f04f 0200 	mov.w	r2, #0
 802247c:	f04f 0300 	mov.w	r3, #0
 8022480:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8022484:	697b      	ldr	r3, [r7, #20]
 8022486:	e9d3 2300 	ldrd	r2, r3, [r3]
 802248a:	4313      	orrs	r3, r2
 802248c:	d10d      	bne.n	80224aa <mg_timer_expired+0x60>
 802248e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8022492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022496:	1886      	adds	r6, r0, r2
 8022498:	603e      	str	r6, [r7, #0]
 802249a:	eb41 0303 	adc.w	r3, r1, r3
 802249e:	607b      	str	r3, [r7, #4]
 80224a0:	697b      	ldr	r3, [r7, #20]
 80224a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80224a6:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 80224aa:	697b      	ldr	r3, [r7, #20]
 80224ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80224b4:	4290      	cmp	r0, r2
 80224b6:	eb71 0303 	sbcs.w	r3, r1, r3
 80224ba:	d201      	bcs.n	80224c0 <mg_timer_expired+0x76>
 80224bc:	2300      	movs	r3, #0
 80224be:	e022      	b.n	8022506 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80224c0:	697b      	ldr	r3, [r7, #20]
 80224c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80224ca:	ebb0 0802 	subs.w	r8, r0, r2
 80224ce:	eb61 0903 	sbc.w	r9, r1, r3
 80224d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80224d6:	4542      	cmp	r2, r8
 80224d8:	eb73 0309 	sbcs.w	r3, r3, r9
 80224dc:	d207      	bcs.n	80224ee <mg_timer_expired+0xa4>
 80224de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80224e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80224e6:	1884      	adds	r4, r0, r2
 80224e8:	eb41 0503 	adc.w	r5, r1, r3
 80224ec:	e007      	b.n	80224fe <mg_timer_expired+0xb4>
 80224ee:	697b      	ldr	r3, [r7, #20]
 80224f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80224f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80224f8:	1884      	adds	r4, r0, r2
 80224fa:	eb41 0503 	adc.w	r5, r1, r3
 80224fe:	697b      	ldr	r3, [r7, #20]
 8022500:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8022504:	2301      	movs	r3, #1
}
 8022506:	4618      	mov	r0, r3
 8022508:	3718      	adds	r7, #24
 802250a:	46bd      	mov	sp, r7
 802250c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8022510:	4770      	bx	lr

08022512 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8022512:	b590      	push	{r4, r7, lr}
 8022514:	b08b      	sub	sp, #44	@ 0x2c
 8022516:	af02      	add	r7, sp, #8
 8022518:	60f8      	str	r0, [r7, #12]
 802251a:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	681b      	ldr	r3, [r3, #0]
 8022522:	61fb      	str	r3, [r7, #28]
 8022524:	e054      	b.n	80225d0 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8022526:	69fb      	ldr	r3, [r7, #28]
 8022528:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 802252c:	4313      	orrs	r3, r2
 802252e:	d10d      	bne.n	802254c <mg_timer_poll+0x3a>
 8022530:	69fb      	ldr	r3, [r7, #28]
 8022532:	699b      	ldr	r3, [r3, #24]
 8022534:	f003 0302 	and.w	r3, r3, #2
 8022538:	2b00      	cmp	r3, #0
 802253a:	d007      	beq.n	802254c <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 802253c:	69fb      	ldr	r3, [r7, #28]
 802253e:	699b      	ldr	r3, [r3, #24]
 8022540:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8022544:	2b00      	cmp	r3, #0
 8022546:	d101      	bne.n	802254c <mg_timer_poll+0x3a>
 8022548:	2301      	movs	r3, #1
 802254a:	e000      	b.n	802254e <mg_timer_poll+0x3c>
 802254c:	2300      	movs	r3, #0
 802254e:	76fb      	strb	r3, [r7, #27]
 8022550:	7efb      	ldrb	r3, [r7, #27]
 8022552:	f003 0301 	and.w	r3, r3, #1
 8022556:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8022558:	69fb      	ldr	r3, [r7, #28]
 802255a:	f103 0410 	add.w	r4, r3, #16
 802255e:	69fb      	ldr	r3, [r7, #28]
 8022560:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8022564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022568:	e9cd 2300 	strd	r2, r3, [sp]
 802256c:	4602      	mov	r2, r0
 802256e:	460b      	mov	r3, r1
 8022570:	4620      	mov	r0, r4
 8022572:	f7ff ff6a 	bl	802244a <mg_timer_expired>
 8022576:	4603      	mov	r3, r0
 8022578:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 802257a:	69fb      	ldr	r3, [r7, #28]
 802257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802257e:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8022580:	7efb      	ldrb	r3, [r7, #27]
 8022582:	f083 0301 	eor.w	r3, r3, #1
 8022586:	b2db      	uxtb	r3, r3
 8022588:	2b00      	cmp	r3, #0
 802258a:	d005      	beq.n	8022598 <mg_timer_poll+0x86>
 802258c:	7ebb      	ldrb	r3, [r7, #26]
 802258e:	f083 0301 	eor.w	r3, r3, #1
 8022592:	b2db      	uxtb	r3, r3
 8022594:	2b00      	cmp	r3, #0
 8022596:	d118      	bne.n	80225ca <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8022598:	69fb      	ldr	r3, [r7, #28]
 802259a:	699b      	ldr	r3, [r3, #24]
 802259c:	f003 0301 	and.w	r3, r3, #1
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	d105      	bne.n	80225b0 <mg_timer_poll+0x9e>
 80225a4:	69fb      	ldr	r3, [r7, #28]
 80225a6:	699b      	ldr	r3, [r3, #24]
 80225a8:	f003 0304 	and.w	r3, r3, #4
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	d105      	bne.n	80225bc <mg_timer_poll+0xaa>
      t->fn(t->arg);
 80225b0:	69fb      	ldr	r3, [r7, #28]
 80225b2:	69db      	ldr	r3, [r3, #28]
 80225b4:	69fa      	ldr	r2, [r7, #28]
 80225b6:	6a12      	ldr	r2, [r2, #32]
 80225b8:	4610      	mov	r0, r2
 80225ba:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 80225bc:	69fb      	ldr	r3, [r7, #28]
 80225be:	699b      	ldr	r3, [r3, #24]
 80225c0:	f043 0204 	orr.w	r2, r3, #4
 80225c4:	69fb      	ldr	r3, [r7, #28]
 80225c6:	619a      	str	r2, [r3, #24]
 80225c8:	e000      	b.n	80225cc <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 80225ca:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80225cc:	697b      	ldr	r3, [r7, #20]
 80225ce:	61fb      	str	r3, [r7, #28]
 80225d0:	69fb      	ldr	r3, [r7, #28]
 80225d2:	2b00      	cmp	r3, #0
 80225d4:	d1a7      	bne.n	8022526 <mg_timer_poll+0x14>
  }
}
 80225d6:	bf00      	nop
 80225d8:	bf00      	nop
 80225da:	3724      	adds	r7, #36	@ 0x24
 80225dc:	46bd      	mov	sp, r7
 80225de:	bd90      	pop	{r4, r7, pc}

080225e0 <mg_tls_handshake>:
#if MG_TLS == MG_TLS_NONE
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
  (void) opts;
  mg_error(c, "TLS is not enabled");
}
void mg_tls_handshake(struct mg_connection *c) {
 80225e0:	b480      	push	{r7}
 80225e2:	b083      	sub	sp, #12
 80225e4:	af00      	add	r7, sp, #0
 80225e6:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80225e8:	bf00      	nop
 80225ea:	370c      	adds	r7, #12
 80225ec:	46bd      	mov	sp, r7
 80225ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225f2:	4770      	bx	lr

080225f4 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 80225f4:	b480      	push	{r7}
 80225f6:	b083      	sub	sp, #12
 80225f8:	af00      	add	r7, sp, #0
 80225fa:	6078      	str	r0, [r7, #4]
  (void) c;
}
 80225fc:	bf00      	nop
 80225fe:	370c      	adds	r7, #12
 8022600:	46bd      	mov	sp, r7
 8022602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022606:	4770      	bx	lr

08022608 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8022608:	b480      	push	{r7}
 802260a:	b085      	sub	sp, #20
 802260c:	af00      	add	r7, sp, #0
 802260e:	60f8      	str	r0, [r7, #12]
 8022610:	60b9      	str	r1, [r7, #8]
 8022612:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8022614:	68fb      	ldr	r3, [r7, #12]
 8022616:	2b00      	cmp	r3, #0
 8022618:	d005      	beq.n	8022626 <mg_tls_recv+0x1e>
 802261a:	68bb      	ldr	r3, [r7, #8]
 802261c:	2b00      	cmp	r3, #0
 802261e:	d002      	beq.n	8022626 <mg_tls_recv+0x1e>
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	2b00      	cmp	r3, #0
 8022624:	d101      	bne.n	802262a <mg_tls_recv+0x22>
 8022626:	2300      	movs	r3, #0
 8022628:	e001      	b.n	802262e <mg_tls_recv+0x26>
 802262a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 802262e:	4618      	mov	r0, r3
 8022630:	3714      	adds	r7, #20
 8022632:	46bd      	mov	sp, r7
 8022634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022638:	4770      	bx	lr

0802263a <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 802263a:	b480      	push	{r7}
 802263c:	b085      	sub	sp, #20
 802263e:	af00      	add	r7, sp, #0
 8022640:	60f8      	str	r0, [r7, #12]
 8022642:	60b9      	str	r1, [r7, #8]
 8022644:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 8022646:	68fb      	ldr	r3, [r7, #12]
 8022648:	2b00      	cmp	r3, #0
 802264a:	d005      	beq.n	8022658 <mg_tls_send+0x1e>
 802264c:	68bb      	ldr	r3, [r7, #8]
 802264e:	2b00      	cmp	r3, #0
 8022650:	d002      	beq.n	8022658 <mg_tls_send+0x1e>
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	2b00      	cmp	r3, #0
 8022656:	d101      	bne.n	802265c <mg_tls_send+0x22>
 8022658:	2300      	movs	r3, #0
 802265a:	e001      	b.n	8022660 <mg_tls_send+0x26>
 802265c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8022660:	4618      	mov	r0, r3
 8022662:	3714      	adds	r7, #20
 8022664:	46bd      	mov	sp, r7
 8022666:	f85d 7b04 	ldr.w	r7, [sp], #4
 802266a:	4770      	bx	lr

0802266c <mg_tls_pending>:
size_t mg_tls_pending(struct mg_connection *c) {
 802266c:	b480      	push	{r7}
 802266e:	b083      	sub	sp, #12
 8022670:	af00      	add	r7, sp, #0
 8022672:	6078      	str	r0, [r7, #4]
  (void) c;
  return 0;
 8022674:	2300      	movs	r3, #0
}
 8022676:	4618      	mov	r0, r3
 8022678:	370c      	adds	r7, #12
 802267a:	46bd      	mov	sp, r7
 802267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022680:	4770      	bx	lr

08022682 <mg_tls_ctx_init>:
void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8022682:	b480      	push	{r7}
 8022684:	b083      	sub	sp, #12
 8022686:	af00      	add	r7, sp, #0
 8022688:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 802268a:	bf00      	nop
 802268c:	370c      	adds	r7, #12
 802268e:	46bd      	mov	sp, r7
 8022690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022694:	4770      	bx	lr
	...

08022698 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8022698:	b580      	push	{r7, lr}
 802269a:	b082      	sub	sp, #8
 802269c:	af00      	add	r7, sp, #0
 802269e:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80226a0:	2204      	movs	r2, #4
 80226a2:	491b      	ldr	r1, [pc, #108]	@ (8022710 <mg_url_is_ssl+0x78>)
 80226a4:	6878      	ldr	r0, [r7, #4]
 80226a6:	f003 fb88 	bl	8025dba <strncmp>
 80226aa:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80226ac:	2b00      	cmp	r3, #0
 80226ae:	d027      	beq.n	8022700 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80226b0:	2206      	movs	r2, #6
 80226b2:	4918      	ldr	r1, [pc, #96]	@ (8022714 <mg_url_is_ssl+0x7c>)
 80226b4:	6878      	ldr	r0, [r7, #4]
 80226b6:	f003 fb80 	bl	8025dba <strncmp>
 80226ba:	4603      	mov	r3, r0
 80226bc:	2b00      	cmp	r3, #0
 80226be:	d01f      	beq.n	8022700 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80226c0:	2206      	movs	r2, #6
 80226c2:	4915      	ldr	r1, [pc, #84]	@ (8022718 <mg_url_is_ssl+0x80>)
 80226c4:	6878      	ldr	r0, [r7, #4]
 80226c6:	f003 fb78 	bl	8025dba <strncmp>
 80226ca:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	d017      	beq.n	8022700 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80226d0:	2204      	movs	r2, #4
 80226d2:	4912      	ldr	r1, [pc, #72]	@ (802271c <mg_url_is_ssl+0x84>)
 80226d4:	6878      	ldr	r0, [r7, #4]
 80226d6:	f003 fb70 	bl	8025dba <strncmp>
 80226da:	4603      	mov	r3, r0
 80226dc:	2b00      	cmp	r3, #0
 80226de:	d00f      	beq.n	8022700 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80226e0:	2204      	movs	r2, #4
 80226e2:	490f      	ldr	r1, [pc, #60]	@ (8022720 <mg_url_is_ssl+0x88>)
 80226e4:	6878      	ldr	r0, [r7, #4]
 80226e6:	f003 fb68 	bl	8025dba <strncmp>
 80226ea:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 80226ec:	2b00      	cmp	r3, #0
 80226ee:	d007      	beq.n	8022700 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 80226f0:	2205      	movs	r2, #5
 80226f2:	490c      	ldr	r1, [pc, #48]	@ (8022724 <mg_url_is_ssl+0x8c>)
 80226f4:	6878      	ldr	r0, [r7, #4]
 80226f6:	f003 fb60 	bl	8025dba <strncmp>
 80226fa:	4603      	mov	r3, r0
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	d101      	bne.n	8022704 <mg_url_is_ssl+0x6c>
 8022700:	2301      	movs	r3, #1
 8022702:	e000      	b.n	8022706 <mg_url_is_ssl+0x6e>
 8022704:	2300      	movs	r3, #0
}
 8022706:	4618      	mov	r0, r3
 8022708:	3708      	adds	r7, #8
 802270a:	46bd      	mov	sp, r7
 802270c:	bd80      	pop	{r7, pc}
 802270e:	bf00      	nop
 8022710:	080331cc 	.word	0x080331cc
 8022714:	080331d4 	.word	0x080331d4
 8022718:	080331dc 	.word	0x080331dc
 802271c:	080331e4 	.word	0x080331e4
 8022720:	080331ec 	.word	0x080331ec
 8022724:	080331f4 	.word	0x080331f4

08022728 <urlparse>:

static struct url urlparse(const char *url) {
 8022728:	b5b0      	push	{r4, r5, r7, lr}
 802272a:	b08a      	sub	sp, #40	@ 0x28
 802272c:	af00      	add	r7, sp, #0
 802272e:	6078      	str	r0, [r7, #4]
 8022730:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8022732:	f107 0308 	add.w	r3, r7, #8
 8022736:	221c      	movs	r2, #28
 8022738:	2100      	movs	r1, #0
 802273a:	4618      	mov	r0, r3
 802273c:	f003 fb08 	bl	8025d50 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8022740:	2300      	movs	r3, #0
 8022742:	627b      	str	r3, [r7, #36]	@ 0x24
 8022744:	e05b      	b.n	80227fe <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8022746:	683a      	ldr	r2, [r7, #0]
 8022748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802274a:	4413      	add	r3, r2
 802274c:	781b      	ldrb	r3, [r3, #0]
 802274e:	2b2f      	cmp	r3, #47	@ 0x2f
 8022750:	d112      	bne.n	8022778 <urlparse+0x50>
 8022752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022754:	2b00      	cmp	r3, #0
 8022756:	d00f      	beq.n	8022778 <urlparse+0x50>
 8022758:	697b      	ldr	r3, [r7, #20]
 802275a:	2b00      	cmp	r3, #0
 802275c:	d10c      	bne.n	8022778 <urlparse+0x50>
 802275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022760:	3b01      	subs	r3, #1
 8022762:	683a      	ldr	r2, [r7, #0]
 8022764:	4413      	add	r3, r2
 8022766:	781b      	ldrb	r3, [r3, #0]
 8022768:	2b2f      	cmp	r3, #47	@ 0x2f
 802276a:	d105      	bne.n	8022778 <urlparse+0x50>
      u.host = i + 1;
 802276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802276e:	3301      	adds	r3, #1
 8022770:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8022772:	2300      	movs	r3, #0
 8022774:	61bb      	str	r3, [r7, #24]
 8022776:	e03f      	b.n	80227f8 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8022778:	683a      	ldr	r2, [r7, #0]
 802277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802277c:	4413      	add	r3, r2
 802277e:	781b      	ldrb	r3, [r3, #0]
 8022780:	2b5d      	cmp	r3, #93	@ 0x5d
 8022782:	d102      	bne.n	802278a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8022784:	2300      	movs	r3, #0
 8022786:	61bb      	str	r3, [r7, #24]
 8022788:	e036      	b.n	80227f8 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 802278a:	683a      	ldr	r2, [r7, #0]
 802278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802278e:	4413      	add	r3, r2
 8022790:	781b      	ldrb	r3, [r3, #0]
 8022792:	2b3a      	cmp	r3, #58	@ 0x3a
 8022794:	d109      	bne.n	80227aa <urlparse+0x82>
 8022796:	69bb      	ldr	r3, [r7, #24]
 8022798:	2b00      	cmp	r3, #0
 802279a:	d106      	bne.n	80227aa <urlparse+0x82>
 802279c:	69fb      	ldr	r3, [r7, #28]
 802279e:	2b00      	cmp	r3, #0
 80227a0:	d103      	bne.n	80227aa <urlparse+0x82>
      u.port = i + 1;
 80227a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227a4:	3301      	adds	r3, #1
 80227a6:	61bb      	str	r3, [r7, #24]
 80227a8:	e026      	b.n	80227f8 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 80227aa:	683a      	ldr	r2, [r7, #0]
 80227ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227ae:	4413      	add	r3, r2
 80227b0:	781b      	ldrb	r3, [r3, #0]
 80227b2:	2b40      	cmp	r3, #64	@ 0x40
 80227b4:	d112      	bne.n	80227dc <urlparse+0xb4>
 80227b6:	68fb      	ldr	r3, [r7, #12]
 80227b8:	2b00      	cmp	r3, #0
 80227ba:	d10f      	bne.n	80227dc <urlparse+0xb4>
 80227bc:	693b      	ldr	r3, [r7, #16]
 80227be:	2b00      	cmp	r3, #0
 80227c0:	d10c      	bne.n	80227dc <urlparse+0xb4>
 80227c2:	69fb      	ldr	r3, [r7, #28]
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	d109      	bne.n	80227dc <urlparse+0xb4>
      u.user = u.host;
 80227c8:	697b      	ldr	r3, [r7, #20]
 80227ca:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 80227cc:	69bb      	ldr	r3, [r7, #24]
 80227ce:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 80227d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227d2:	3301      	adds	r3, #1
 80227d4:	617b      	str	r3, [r7, #20]
      u.port = 0;
 80227d6:	2300      	movs	r3, #0
 80227d8:	61bb      	str	r3, [r7, #24]
 80227da:	e00d      	b.n	80227f8 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 80227dc:	683a      	ldr	r2, [r7, #0]
 80227de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227e0:	4413      	add	r3, r2
 80227e2:	781b      	ldrb	r3, [r3, #0]
 80227e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80227e6:	d107      	bne.n	80227f8 <urlparse+0xd0>
 80227e8:	697b      	ldr	r3, [r7, #20]
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	d004      	beq.n	80227f8 <urlparse+0xd0>
 80227ee:	69fb      	ldr	r3, [r7, #28]
 80227f0:	2b00      	cmp	r3, #0
 80227f2:	d101      	bne.n	80227f8 <urlparse+0xd0>
      u.uri = i;
 80227f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227f6:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 80227f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80227fa:	3301      	adds	r3, #1
 80227fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80227fe:	683a      	ldr	r2, [r7, #0]
 8022800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022802:	4413      	add	r3, r2
 8022804:	781b      	ldrb	r3, [r3, #0]
 8022806:	2b00      	cmp	r3, #0
 8022808:	d19d      	bne.n	8022746 <urlparse+0x1e>
    }
  }
  u.end = i;
 802280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802280c:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 802280e:	687b      	ldr	r3, [r7, #4]
 8022810:	461d      	mov	r5, r3
 8022812:	f107 0408 	add.w	r4, r7, #8
 8022816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802281a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802281e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8022822:	6878      	ldr	r0, [r7, #4]
 8022824:	3728      	adds	r7, #40	@ 0x28
 8022826:	46bd      	mov	sp, r7
 8022828:	bdb0      	pop	{r4, r5, r7, pc}

0802282a <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 802282a:	b580      	push	{r7, lr}
 802282c:	b08c      	sub	sp, #48	@ 0x30
 802282e:	af00      	add	r7, sp, #0
 8022830:	6078      	str	r0, [r7, #4]
 8022832:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8022834:	f107 0310 	add.w	r3, r7, #16
 8022838:	6839      	ldr	r1, [r7, #0]
 802283a:	4618      	mov	r0, r3
 802283c:	f7ff ff74 	bl	8022728 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8022840:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8022842:	2b00      	cmp	r3, #0
 8022844:	d004      	beq.n	8022850 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8022846:	6a3a      	ldr	r2, [r7, #32]
 8022848:	69fb      	ldr	r3, [r7, #28]
 802284a:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 802284c:	3b01      	subs	r3, #1
 802284e:	e009      	b.n	8022864 <mg_url_host+0x3a>
 8022850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8022852:	2b00      	cmp	r3, #0
 8022854:	d003      	beq.n	802285e <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8022856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022858:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 802285a:	1ad3      	subs	r3, r2, r3
 802285c:	e002      	b.n	8022864 <mg_url_host+0x3a>
 802285e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022860:	69fb      	ldr	r3, [r7, #28]
 8022862:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8022864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8022866:	69fb      	ldr	r3, [r7, #28]
 8022868:	683a      	ldr	r2, [r7, #0]
 802286a:	18d1      	adds	r1, r2, r3
 802286c:	f107 0308 	add.w	r3, r7, #8
 8022870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022872:	4618      	mov	r0, r3
 8022874:	f7ff f983 	bl	8021b7e <mg_str_n>
  return s;
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	461a      	mov	r2, r3
 802287c:	f107 0308 	add.w	r3, r7, #8
 8022880:	e893 0003 	ldmia.w	r3, {r0, r1}
 8022884:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8022888:	6878      	ldr	r0, [r7, #4]
 802288a:	3730      	adds	r7, #48	@ 0x30
 802288c:	46bd      	mov	sp, r7
 802288e:	bd80      	pop	{r7, pc}

08022890 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8022890:	b580      	push	{r7, lr}
 8022892:	b08a      	sub	sp, #40	@ 0x28
 8022894:	af00      	add	r7, sp, #0
 8022896:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8022898:	f107 0308 	add.w	r3, r7, #8
 802289c:	6879      	ldr	r1, [r7, #4]
 802289e:	4618      	mov	r0, r3
 80228a0:	f7ff ff42 	bl	8022728 <urlparse>
  unsigned short port = 0;
 80228a4:	2300      	movs	r3, #0
 80228a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 80228a8:	2205      	movs	r2, #5
 80228aa:	4925      	ldr	r1, [pc, #148]	@ (8022940 <mg_url_port+0xb0>)
 80228ac:	6878      	ldr	r0, [r7, #4]
 80228ae:	f003 fa84 	bl	8025dba <strncmp>
 80228b2:	4603      	mov	r3, r0
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d007      	beq.n	80228c8 <mg_url_port+0x38>
 80228b8:	2203      	movs	r2, #3
 80228ba:	4922      	ldr	r1, [pc, #136]	@ (8022944 <mg_url_port+0xb4>)
 80228bc:	6878      	ldr	r0, [r7, #4]
 80228be:	f003 fa7c 	bl	8025dba <strncmp>
 80228c2:	4603      	mov	r3, r0
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	d101      	bne.n	80228cc <mg_url_port+0x3c>
 80228c8:	2350      	movs	r3, #80	@ 0x50
 80228ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 80228cc:	2204      	movs	r2, #4
 80228ce:	491e      	ldr	r1, [pc, #120]	@ (8022948 <mg_url_port+0xb8>)
 80228d0:	6878      	ldr	r0, [r7, #4]
 80228d2:	f003 fa72 	bl	8025dba <strncmp>
 80228d6:	4603      	mov	r3, r0
 80228d8:	2b00      	cmp	r3, #0
 80228da:	d007      	beq.n	80228ec <mg_url_port+0x5c>
 80228dc:	2206      	movs	r2, #6
 80228de:	491b      	ldr	r1, [pc, #108]	@ (802294c <mg_url_port+0xbc>)
 80228e0:	6878      	ldr	r0, [r7, #4]
 80228e2:	f003 fa6a 	bl	8025dba <strncmp>
 80228e6:	4603      	mov	r3, r0
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d102      	bne.n	80228f2 <mg_url_port+0x62>
    port = 443;
 80228ec:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80228f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 80228f2:	2205      	movs	r2, #5
 80228f4:	4916      	ldr	r1, [pc, #88]	@ (8022950 <mg_url_port+0xc0>)
 80228f6:	6878      	ldr	r0, [r7, #4]
 80228f8:	f003 fa5f 	bl	8025dba <strncmp>
 80228fc:	4603      	mov	r3, r0
 80228fe:	2b00      	cmp	r3, #0
 8022900:	d102      	bne.n	8022908 <mg_url_port+0x78>
 8022902:	f240 735b 	movw	r3, #1883	@ 0x75b
 8022906:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8022908:	2206      	movs	r2, #6
 802290a:	4912      	ldr	r1, [pc, #72]	@ (8022954 <mg_url_port+0xc4>)
 802290c:	6878      	ldr	r0, [r7, #4]
 802290e:	f003 fa54 	bl	8025dba <strncmp>
 8022912:	4603      	mov	r3, r0
 8022914:	2b00      	cmp	r3, #0
 8022916:	d102      	bne.n	802291e <mg_url_port+0x8e>
 8022918:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 802291c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 802291e:	69bb      	ldr	r3, [r7, #24]
 8022920:	2b00      	cmp	r3, #0
 8022922:	d007      	beq.n	8022934 <mg_url_port+0xa4>
 8022924:	69bb      	ldr	r3, [r7, #24]
 8022926:	687a      	ldr	r2, [r7, #4]
 8022928:	4413      	add	r3, r2
 802292a:	4618      	mov	r0, r3
 802292c:	f000 fcda 	bl	80232e4 <atoi>
 8022930:	4603      	mov	r3, r0
 8022932:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 8022934:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8022936:	4618      	mov	r0, r3
 8022938:	3728      	adds	r7, #40	@ 0x28
 802293a:	46bd      	mov	sp, r7
 802293c:	bd80      	pop	{r7, pc}
 802293e:	bf00      	nop
 8022940:	080331fc 	.word	0x080331fc
 8022944:	08033204 	.word	0x08033204
 8022948:	080331cc 	.word	0x080331cc
 802294c:	080331d4 	.word	0x080331d4
 8022950:	08033208 	.word	0x08033208
 8022954:	080331dc 	.word	0x080331dc

08022958 <mg_bzero>:
#endif


// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 8022958:	b480      	push	{r7}
 802295a:	b083      	sub	sp, #12
 802295c:	af00      	add	r7, sp, #0
 802295e:	6078      	str	r0, [r7, #4]
 8022960:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	2b00      	cmp	r3, #0
 8022966:	d00a      	beq.n	802297e <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 8022968:	e004      	b.n	8022974 <mg_bzero+0x1c>
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	1c5a      	adds	r2, r3, #1
 802296e:	607a      	str	r2, [r7, #4]
 8022970:	2200      	movs	r2, #0
 8022972:	701a      	strb	r2, [r3, #0]
 8022974:	683b      	ldr	r3, [r7, #0]
 8022976:	1e5a      	subs	r2, r3, #1
 8022978:	603a      	str	r2, [r7, #0]
 802297a:	2b00      	cmp	r3, #0
 802297c:	d1f5      	bne.n	802296a <mg_bzero+0x12>
  }
}
 802297e:	bf00      	nop
 8022980:	370c      	adds	r7, #12
 8022982:	46bd      	mov	sp, r7
 8022984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022988:	4770      	bx	lr

0802298a <mg_random>:

#if MG_ENABLE_CUSTOM_RANDOM
#else
void mg_random(void *buf, size_t len) {
 802298a:	b580      	push	{r7, lr}
 802298c:	b084      	sub	sp, #16
 802298e:	af00      	add	r7, sp, #0
 8022990:	6078      	str	r0, [r7, #4]
 8022992:	6039      	str	r1, [r7, #0]
  bool done = false;
 8022994:	2300      	movs	r3, #0
 8022996:	72fb      	strb	r3, [r7, #11]
  unsigned char *p = (unsigned char *) buf;
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	60fb      	str	r3, [r7, #12]
    if (fread(buf, 1, len, fp) == len) done = true;
    fclose(fp);
  }
#endif
  // If everything above did not work, fallback to a pseudo random generator
  while (!done && len--) *p++ = (unsigned char) (rand() & 255);
 802299c:	e007      	b.n	80229ae <mg_random+0x24>
 802299e:	f002 fc91 	bl	80252c4 <rand>
 80229a2:	4601      	mov	r1, r0
 80229a4:	68fb      	ldr	r3, [r7, #12]
 80229a6:	1c5a      	adds	r2, r3, #1
 80229a8:	60fa      	str	r2, [r7, #12]
 80229aa:	b2ca      	uxtb	r2, r1
 80229ac:	701a      	strb	r2, [r3, #0]
 80229ae:	7afb      	ldrb	r3, [r7, #11]
 80229b0:	f083 0301 	eor.w	r3, r3, #1
 80229b4:	b2db      	uxtb	r3, r3
 80229b6:	2b00      	cmp	r3, #0
 80229b8:	d004      	beq.n	80229c4 <mg_random+0x3a>
 80229ba:	683b      	ldr	r3, [r7, #0]
 80229bc:	1e5a      	subs	r2, r3, #1
 80229be:	603a      	str	r2, [r7, #0]
 80229c0:	2b00      	cmp	r3, #0
 80229c2:	d1ec      	bne.n	802299e <mg_random+0x14>
}
 80229c4:	bf00      	nop
 80229c6:	3710      	adds	r7, #16
 80229c8:	46bd      	mov	sp, r7
 80229ca:	bd80      	pop	{r7, pc}

080229cc <mg_random_str>:
#endif

char *mg_random_str(char *buf, size_t len) {
 80229cc:	b580      	push	{r7, lr}
 80229ce:	b084      	sub	sp, #16
 80229d0:	af00      	add	r7, sp, #0
 80229d2:	6078      	str	r0, [r7, #4]
 80229d4:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 80229d6:	6839      	ldr	r1, [r7, #0]
 80229d8:	6878      	ldr	r0, [r7, #4]
 80229da:	f7ff ffd6 	bl	802298a <mg_random>
  for (i = 0; i < len; i++) {
 80229de:	2300      	movs	r3, #0
 80229e0:	60fb      	str	r3, [r7, #12]
 80229e2:	e02d      	b.n	8022a40 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 80229e4:	687a      	ldr	r2, [r7, #4]
 80229e6:	68fb      	ldr	r3, [r7, #12]
 80229e8:	4413      	add	r3, r2
 80229ea:	781a      	ldrb	r2, [r3, #0]
 80229ec:	0853      	lsrs	r3, r2, #1
 80229ee:	4919      	ldr	r1, [pc, #100]	@ (8022a54 <mg_random_str+0x88>)
 80229f0:	fba1 1303 	umull	r1, r3, r1, r3
 80229f4:	0919      	lsrs	r1, r3, #4
 80229f6:	460b      	mov	r3, r1
 80229f8:	015b      	lsls	r3, r3, #5
 80229fa:	1a5b      	subs	r3, r3, r1
 80229fc:	005b      	lsls	r3, r3, #1
 80229fe:	1ad3      	subs	r3, r2, r3
 8022a00:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 8022a02:	683b      	ldr	r3, [r7, #0]
 8022a04:	3b01      	subs	r3, #1
 8022a06:	68fa      	ldr	r2, [r7, #12]
 8022a08:	429a      	cmp	r2, r3
 8022a0a:	d011      	beq.n	8022a30 <mg_random_str+0x64>
 8022a0c:	7afb      	ldrb	r3, [r7, #11]
 8022a0e:	2b19      	cmp	r3, #25
 8022a10:	d803      	bhi.n	8022a1a <mg_random_str+0x4e>
 8022a12:	7afb      	ldrb	r3, [r7, #11]
 8022a14:	3361      	adds	r3, #97	@ 0x61
 8022a16:	b2db      	uxtb	r3, r3
 8022a18:	e00b      	b.n	8022a32 <mg_random_str+0x66>
 8022a1a:	7afb      	ldrb	r3, [r7, #11]
 8022a1c:	2b33      	cmp	r3, #51	@ 0x33
 8022a1e:	d803      	bhi.n	8022a28 <mg_random_str+0x5c>
 8022a20:	7afb      	ldrb	r3, [r7, #11]
 8022a22:	3327      	adds	r3, #39	@ 0x27
 8022a24:	b2db      	uxtb	r3, r3
 8022a26:	e004      	b.n	8022a32 <mg_random_str+0x66>
 8022a28:	7afb      	ldrb	r3, [r7, #11]
 8022a2a:	3b04      	subs	r3, #4
 8022a2c:	b2db      	uxtb	r3, r3
 8022a2e:	e000      	b.n	8022a32 <mg_random_str+0x66>
 8022a30:	2300      	movs	r3, #0
 8022a32:	6879      	ldr	r1, [r7, #4]
 8022a34:	68fa      	ldr	r2, [r7, #12]
 8022a36:	440a      	add	r2, r1
 8022a38:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8022a3a:	68fb      	ldr	r3, [r7, #12]
 8022a3c:	3301      	adds	r3, #1
 8022a3e:	60fb      	str	r3, [r7, #12]
 8022a40:	68fa      	ldr	r2, [r7, #12]
 8022a42:	683b      	ldr	r3, [r7, #0]
 8022a44:	429a      	cmp	r2, r3
 8022a46:	d3cd      	bcc.n	80229e4 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8022a48:	687b      	ldr	r3, [r7, #4]
}
 8022a4a:	4618      	mov	r0, r3
 8022a4c:	3710      	adds	r7, #16
 8022a4e:	46bd      	mov	sp, r7
 8022a50:	bd80      	pop	{r7, pc}
 8022a52:	bf00      	nop
 8022a54:	84210843 	.word	0x84210843

08022a58 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 8022a58:	b480      	push	{r7}
 8022a5a:	b085      	sub	sp, #20
 8022a5c:	af00      	add	r7, sp, #0
 8022a5e:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8022a60:	2300      	movs	r3, #0
 8022a62:	60fb      	str	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022a68:	7bfb      	ldrb	r3, [r7, #15]
 8022a6a:	461a      	mov	r2, r3
 8022a6c:	7bbb      	ldrb	r3, [r7, #14]
 8022a6e:	021b      	lsls	r3, r3, #8
 8022a70:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8022a72:	7b7b      	ldrb	r3, [r7, #13]
 8022a74:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 8022a76:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 8022a78:	7b3b      	ldrb	r3, [r7, #12]
 8022a7a:	061b      	lsls	r3, r3, #24
 8022a7c:	4313      	orrs	r3, r2
}
 8022a7e:	4618      	mov	r0, r3
 8022a80:	3714      	adds	r7, #20
 8022a82:	46bd      	mov	sp, r7
 8022a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a88:	4770      	bx	lr

08022a8a <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 8022a8a:	b480      	push	{r7}
 8022a8c:	b085      	sub	sp, #20
 8022a8e:	af00      	add	r7, sp, #0
 8022a90:	4603      	mov	r3, r0
 8022a92:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 8022a94:	2300      	movs	r3, #0
 8022a96:	81bb      	strh	r3, [r7, #12]
  memcpy(&data, &net, sizeof(data));
 8022a98:	88fb      	ldrh	r3, [r7, #6]
 8022a9a:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 8022a9c:	7b7b      	ldrb	r3, [r7, #13]
 8022a9e:	b21a      	sxth	r2, r3
 8022aa0:	7b3b      	ldrb	r3, [r7, #12]
 8022aa2:	021b      	lsls	r3, r3, #8
 8022aa4:	b21b      	sxth	r3, r3
 8022aa6:	4313      	orrs	r3, r2
 8022aa8:	b21b      	sxth	r3, r3
 8022aaa:	b29b      	uxth	r3, r3
}
 8022aac:	4618      	mov	r0, r3
 8022aae:	3714      	adds	r7, #20
 8022ab0:	46bd      	mov	sp, r7
 8022ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ab6:	4770      	bx	lr

08022ab8 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8022ab8:	b480      	push	{r7}
 8022aba:	b087      	sub	sp, #28
 8022abc:	af00      	add	r7, sp, #0
 8022abe:	60f8      	str	r0, [r7, #12]
 8022ac0:	60b9      	str	r1, [r7, #8]
 8022ac2:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 8022ac4:	68fb      	ldr	r3, [r7, #12]
 8022ac6:	43db      	mvns	r3, r3
 8022ac8:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8022aca:	e01f      	b.n	8022b0c <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8022acc:	68bb      	ldr	r3, [r7, #8]
 8022ace:	1c5a      	adds	r2, r3, #1
 8022ad0:	60ba      	str	r2, [r7, #8]
 8022ad2:	781b      	ldrb	r3, [r3, #0]
 8022ad4:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 8022ad6:	7dfa      	ldrb	r2, [r7, #23]
 8022ad8:	68fb      	ldr	r3, [r7, #12]
 8022ada:	4053      	eors	r3, r2
 8022adc:	f003 030f 	and.w	r3, r3, #15
 8022ae0:	4a11      	ldr	r2, [pc, #68]	@ (8022b28 <mg_crc32+0x70>)
 8022ae2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8022ae6:	68fb      	ldr	r3, [r7, #12]
 8022ae8:	091b      	lsrs	r3, r3, #4
 8022aea:	4053      	eors	r3, r2
 8022aec:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 8022aee:	7dfb      	ldrb	r3, [r7, #23]
 8022af0:	091b      	lsrs	r3, r3, #4
 8022af2:	b2db      	uxtb	r3, r3
 8022af4:	461a      	mov	r2, r3
 8022af6:	68fb      	ldr	r3, [r7, #12]
 8022af8:	4053      	eors	r3, r2
 8022afa:	f003 030f 	and.w	r3, r3, #15
 8022afe:	4a0a      	ldr	r2, [pc, #40]	@ (8022b28 <mg_crc32+0x70>)
 8022b00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8022b04:	68fb      	ldr	r3, [r7, #12]
 8022b06:	091b      	lsrs	r3, r3, #4
 8022b08:	4053      	eors	r3, r2
 8022b0a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	1e5a      	subs	r2, r3, #1
 8022b10:	607a      	str	r2, [r7, #4]
 8022b12:	2b00      	cmp	r3, #0
 8022b14:	d1da      	bne.n	8022acc <mg_crc32+0x14>
  }
  return ~crc;
 8022b16:	68fb      	ldr	r3, [r7, #12]
 8022b18:	43db      	mvns	r3, r3
}
 8022b1a:	4618      	mov	r0, r3
 8022b1c:	371c      	adds	r7, #28
 8022b1e:	46bd      	mov	sp, r7
 8022b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b24:	4770      	bx	lr
 8022b26:	bf00      	nop
 8022b28:	08034668 	.word	0x08034668

08022b2c <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 8022b2c:	b480      	push	{r7}
 8022b2e:	b085      	sub	sp, #20
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	463b      	mov	r3, r7
 8022b34:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8022b38:	683b      	ldr	r3, [r7, #0]
 8022b3a:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8022b40:	683b      	ldr	r3, [r7, #0]
 8022b42:	781b      	ldrb	r3, [r3, #0]
 8022b44:	2b2e      	cmp	r3, #46	@ 0x2e
 8022b46:	d123      	bne.n	8022b90 <mg_path_is_sane+0x64>
 8022b48:	683b      	ldr	r3, [r7, #0]
 8022b4a:	3301      	adds	r3, #1
 8022b4c:	781b      	ldrb	r3, [r3, #0]
 8022b4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8022b50:	d11e      	bne.n	8022b90 <mg_path_is_sane+0x64>
 8022b52:	2300      	movs	r3, #0
 8022b54:	e024      	b.n	8022ba0 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 8022b56:	68fb      	ldr	r3, [r7, #12]
 8022b58:	781b      	ldrb	r3, [r3, #0]
 8022b5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8022b5c:	d003      	beq.n	8022b66 <mg_path_is_sane+0x3a>
 8022b5e:	68fb      	ldr	r3, [r7, #12]
 8022b60:	781b      	ldrb	r3, [r3, #0]
 8022b62:	2b5c      	cmp	r3, #92	@ 0x5c
 8022b64:	d10e      	bne.n	8022b84 <mg_path_is_sane+0x58>
 8022b66:	68bb      	ldr	r3, [r7, #8]
 8022b68:	2b01      	cmp	r3, #1
 8022b6a:	d90b      	bls.n	8022b84 <mg_path_is_sane+0x58>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	3301      	adds	r3, #1
 8022b70:	781b      	ldrb	r3, [r3, #0]
 8022b72:	2b2e      	cmp	r3, #46	@ 0x2e
 8022b74:	d106      	bne.n	8022b84 <mg_path_is_sane+0x58>
 8022b76:	68fb      	ldr	r3, [r7, #12]
 8022b78:	3302      	adds	r3, #2
 8022b7a:	781b      	ldrb	r3, [r3, #0]
 8022b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8022b7e:	d101      	bne.n	8022b84 <mg_path_is_sane+0x58>
 8022b80:	2300      	movs	r3, #0
 8022b82:	e00d      	b.n	8022ba0 <mg_path_is_sane+0x74>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8022b84:	68fb      	ldr	r3, [r7, #12]
 8022b86:	3301      	adds	r3, #1
 8022b88:	60fb      	str	r3, [r7, #12]
 8022b8a:	68bb      	ldr	r3, [r7, #8]
 8022b8c:	3b01      	subs	r3, #1
 8022b8e:	60bb      	str	r3, [r7, #8]
 8022b90:	68fb      	ldr	r3, [r7, #12]
 8022b92:	781b      	ldrb	r3, [r3, #0]
 8022b94:	2b00      	cmp	r3, #0
 8022b96:	d002      	beq.n	8022b9e <mg_path_is_sane+0x72>
 8022b98:	68bb      	ldr	r3, [r7, #8]
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	d1db      	bne.n	8022b56 <mg_path_is_sane+0x2a>
    }
  }
  return true;
 8022b9e:	2301      	movs	r3, #1
}
 8022ba0:	4618      	mov	r0, r3
 8022ba2:	3714      	adds	r7, #20
 8022ba4:	46bd      	mov	sp, r7
 8022ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022baa:	4770      	bx	lr

08022bac <mg_millis>:

#if MG_ENABLE_CUSTOM_MILLIS
#else
uint64_t mg_millis(void) {
 8022bac:	b5b0      	push	{r4, r5, r7, lr}
 8022bae:	af00      	add	r7, sp, #0
  return GetTickCount();
#elif MG_ARCH == MG_ARCH_RP2040
  return time_us_64() / 1000;
#elif MG_ARCH == MG_ARCH_ESP8266 || MG_ARCH == MG_ARCH_ESP32 || \
    MG_ARCH == MG_ARCH_FREERTOS
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
 8022bb0:	f7e8 f9d6 	bl	800af60 <xTaskGetTickCount>
 8022bb4:	4603      	mov	r3, r0
 8022bb6:	2200      	movs	r2, #0
 8022bb8:	461c      	mov	r4, r3
 8022bba:	4615      	mov	r5, r2
 8022bbc:	4622      	mov	r2, r4
 8022bbe:	462b      	mov	r3, r5
#elif defined(ARDUINO)
  return (uint64_t) millis();
#else
  return (uint64_t) (time(NULL) * 1000);
#endif
}
 8022bc0:	4610      	mov	r0, r2
 8022bc2:	4619      	mov	r1, r3
 8022bc4:	bdb0      	pop	{r4, r5, r7, pc}

08022bc6 <w5500_txn>:
#if MG_ENABLE_TCPIP && defined(MG_ENABLE_DRIVER_W5500) && MG_ENABLE_DRIVER_W5500

enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };

static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr,
                      bool wr, void *buf, size_t len) {
 8022bc6:	b580      	push	{r7, lr}
 8022bc8:	b086      	sub	sp, #24
 8022bca:	af00      	add	r7, sp, #0
 8022bcc:	6078      	str	r0, [r7, #4]
 8022bce:	4608      	mov	r0, r1
 8022bd0:	4611      	mov	r1, r2
 8022bd2:	461a      	mov	r2, r3
 8022bd4:	4603      	mov	r3, r0
 8022bd6:	70fb      	strb	r3, [r7, #3]
 8022bd8:	460b      	mov	r3, r1
 8022bda:	803b      	strh	r3, [r7, #0]
 8022bdc:	4613      	mov	r3, r2
 8022bde:	70bb      	strb	r3, [r7, #2]
  size_t i;
  uint8_t *p = (uint8_t *) buf;
 8022be0:	6a3b      	ldr	r3, [r7, #32]
 8022be2:	613b      	str	r3, [r7, #16]
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8022be4:	883b      	ldrh	r3, [r7, #0]
 8022be6:	0a1b      	lsrs	r3, r3, #8
 8022be8:	b29b      	uxth	r3, r3
 8022bea:	b2db      	uxtb	r3, r3
 8022bec:	733b      	strb	r3, [r7, #12]
 8022bee:	883b      	ldrh	r3, [r7, #0]
 8022bf0:	b2db      	uxtb	r3, r3
 8022bf2:	737b      	strb	r3, [r7, #13]
                   (uint8_t) ((block << 3) | (wr ? 4 : 0))};
 8022bf4:	78fb      	ldrb	r3, [r7, #3]
 8022bf6:	00db      	lsls	r3, r3, #3
 8022bf8:	b25b      	sxtb	r3, r3
 8022bfa:	78ba      	ldrb	r2, [r7, #2]
 8022bfc:	2a00      	cmp	r2, #0
 8022bfe:	d001      	beq.n	8022c04 <w5500_txn+0x3e>
 8022c00:	2204      	movs	r2, #4
 8022c02:	e000      	b.n	8022c06 <w5500_txn+0x40>
 8022c04:	2200      	movs	r2, #0
 8022c06:	4313      	orrs	r3, r2
 8022c08:	b25b      	sxtb	r3, r3
 8022c0a:	b2db      	uxtb	r3, r3
  uint8_t cmd[] = {(uint8_t) (addr >> 8), (uint8_t) (addr & 255),
 8022c0c:	73bb      	strb	r3, [r7, #14]
  s->begin(s->spi);
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	685b      	ldr	r3, [r3, #4]
 8022c12:	687a      	ldr	r2, [r7, #4]
 8022c14:	6812      	ldr	r2, [r2, #0]
 8022c16:	4610      	mov	r0, r2
 8022c18:	4798      	blx	r3
  for (i = 0; i < sizeof(cmd); i++) s->txn(s->spi, cmd[i]);
 8022c1a:	2300      	movs	r3, #0
 8022c1c:	617b      	str	r3, [r7, #20]
 8022c1e:	e00d      	b.n	8022c3c <w5500_txn+0x76>
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	68db      	ldr	r3, [r3, #12]
 8022c24:	687a      	ldr	r2, [r7, #4]
 8022c26:	6810      	ldr	r0, [r2, #0]
 8022c28:	f107 010c 	add.w	r1, r7, #12
 8022c2c:	697a      	ldr	r2, [r7, #20]
 8022c2e:	440a      	add	r2, r1
 8022c30:	7812      	ldrb	r2, [r2, #0]
 8022c32:	4611      	mov	r1, r2
 8022c34:	4798      	blx	r3
 8022c36:	697b      	ldr	r3, [r7, #20]
 8022c38:	3301      	adds	r3, #1
 8022c3a:	617b      	str	r3, [r7, #20]
 8022c3c:	697b      	ldr	r3, [r7, #20]
 8022c3e:	2b02      	cmp	r3, #2
 8022c40:	d9ee      	bls.n	8022c20 <w5500_txn+0x5a>
  for (i = 0; i < len; i++) {
 8022c42:	2300      	movs	r3, #0
 8022c44:	617b      	str	r3, [r7, #20]
 8022c46:	e019      	b.n	8022c7c <w5500_txn+0xb6>
    uint8_t r = s->txn(s->spi, p[i]);
 8022c48:	687b      	ldr	r3, [r7, #4]
 8022c4a:	68db      	ldr	r3, [r3, #12]
 8022c4c:	687a      	ldr	r2, [r7, #4]
 8022c4e:	6810      	ldr	r0, [r2, #0]
 8022c50:	6939      	ldr	r1, [r7, #16]
 8022c52:	697a      	ldr	r2, [r7, #20]
 8022c54:	440a      	add	r2, r1
 8022c56:	7812      	ldrb	r2, [r2, #0]
 8022c58:	4611      	mov	r1, r2
 8022c5a:	4798      	blx	r3
 8022c5c:	4603      	mov	r3, r0
 8022c5e:	73fb      	strb	r3, [r7, #15]
    if (!wr) p[i] = r;
 8022c60:	78bb      	ldrb	r3, [r7, #2]
 8022c62:	f083 0301 	eor.w	r3, r3, #1
 8022c66:	b2db      	uxtb	r3, r3
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d004      	beq.n	8022c76 <w5500_txn+0xb0>
 8022c6c:	693a      	ldr	r2, [r7, #16]
 8022c6e:	697b      	ldr	r3, [r7, #20]
 8022c70:	4413      	add	r3, r2
 8022c72:	7bfa      	ldrb	r2, [r7, #15]
 8022c74:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i++) {
 8022c76:	697b      	ldr	r3, [r7, #20]
 8022c78:	3301      	adds	r3, #1
 8022c7a:	617b      	str	r3, [r7, #20]
 8022c7c:	697a      	ldr	r2, [r7, #20]
 8022c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022c80:	429a      	cmp	r2, r3
 8022c82:	d3e1      	bcc.n	8022c48 <w5500_txn+0x82>
  }
  s->end(s->spi);
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	689b      	ldr	r3, [r3, #8]
 8022c88:	687a      	ldr	r2, [r7, #4]
 8022c8a:	6812      	ldr	r2, [r2, #0]
 8022c8c:	4610      	mov	r0, r2
 8022c8e:	4798      	blx	r3
}
 8022c90:	bf00      	nop
 8022c92:	3718      	adds	r7, #24
 8022c94:	46bd      	mov	sp, r7
 8022c96:	bd80      	pop	{r7, pc}

08022c98 <w5500_wn>:

// clang-format off
static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }
 8022c98:	b580      	push	{r7, lr}
 8022c9a:	b086      	sub	sp, #24
 8022c9c:	af02      	add	r7, sp, #8
 8022c9e:	60f8      	str	r0, [r7, #12]
 8022ca0:	607b      	str	r3, [r7, #4]
 8022ca2:	460b      	mov	r3, r1
 8022ca4:	72fb      	strb	r3, [r7, #11]
 8022ca6:	4613      	mov	r3, r2
 8022ca8:	813b      	strh	r3, [r7, #8]
 8022caa:	893a      	ldrh	r2, [r7, #8]
 8022cac:	7af9      	ldrb	r1, [r7, #11]
 8022cae:	69bb      	ldr	r3, [r7, #24]
 8022cb0:	9301      	str	r3, [sp, #4]
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	9300      	str	r3, [sp, #0]
 8022cb6:	2301      	movs	r3, #1
 8022cb8:	68f8      	ldr	r0, [r7, #12]
 8022cba:	f7ff ff84 	bl	8022bc6 <w5500_txn>
 8022cbe:	bf00      	nop
 8022cc0:	3710      	adds	r7, #16
 8022cc2:	46bd      	mov	sp, r7
 8022cc4:	bd80      	pop	{r7, pc}

08022cc6 <w5500_w1>:
static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }
 8022cc6:	b580      	push	{r7, lr}
 8022cc8:	b084      	sub	sp, #16
 8022cca:	af02      	add	r7, sp, #8
 8022ccc:	6078      	str	r0, [r7, #4]
 8022cce:	4608      	mov	r0, r1
 8022cd0:	4611      	mov	r1, r2
 8022cd2:	461a      	mov	r2, r3
 8022cd4:	4603      	mov	r3, r0
 8022cd6:	70fb      	strb	r3, [r7, #3]
 8022cd8:	460b      	mov	r3, r1
 8022cda:	803b      	strh	r3, [r7, #0]
 8022cdc:	4613      	mov	r3, r2
 8022cde:	70bb      	strb	r3, [r7, #2]
 8022ce0:	1cbb      	adds	r3, r7, #2
 8022ce2:	883a      	ldrh	r2, [r7, #0]
 8022ce4:	78f9      	ldrb	r1, [r7, #3]
 8022ce6:	2001      	movs	r0, #1
 8022ce8:	9000      	str	r0, [sp, #0]
 8022cea:	6878      	ldr	r0, [r7, #4]
 8022cec:	f7ff ffd4 	bl	8022c98 <w5500_wn>
 8022cf0:	bf00      	nop
 8022cf2:	3708      	adds	r7, #8
 8022cf4:	46bd      	mov	sp, r7
 8022cf6:	bd80      	pop	{r7, pc}

08022cf8 <w5500_w2>:
static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }
 8022cf8:	b580      	push	{r7, lr}
 8022cfa:	b088      	sub	sp, #32
 8022cfc:	af02      	add	r7, sp, #8
 8022cfe:	60f8      	str	r0, [r7, #12]
 8022d00:	4608      	mov	r0, r1
 8022d02:	4611      	mov	r1, r2
 8022d04:	461a      	mov	r2, r3
 8022d06:	4603      	mov	r3, r0
 8022d08:	72fb      	strb	r3, [r7, #11]
 8022d0a:	460b      	mov	r3, r1
 8022d0c:	813b      	strh	r3, [r7, #8]
 8022d0e:	4613      	mov	r3, r2
 8022d10:	80fb      	strh	r3, [r7, #6]
 8022d12:	88fb      	ldrh	r3, [r7, #6]
 8022d14:	0a1b      	lsrs	r3, r3, #8
 8022d16:	b29b      	uxth	r3, r3
 8022d18:	b2db      	uxtb	r3, r3
 8022d1a:	753b      	strb	r3, [r7, #20]
 8022d1c:	88fb      	ldrh	r3, [r7, #6]
 8022d1e:	b2db      	uxtb	r3, r3
 8022d20:	757b      	strb	r3, [r7, #21]
 8022d22:	f107 0314 	add.w	r3, r7, #20
 8022d26:	893a      	ldrh	r2, [r7, #8]
 8022d28:	7af9      	ldrb	r1, [r7, #11]
 8022d2a:	2002      	movs	r0, #2
 8022d2c:	9000      	str	r0, [sp, #0]
 8022d2e:	68f8      	ldr	r0, [r7, #12]
 8022d30:	f7ff ffb2 	bl	8022c98 <w5500_wn>
 8022d34:	bf00      	nop
 8022d36:	3718      	adds	r7, #24
 8022d38:	46bd      	mov	sp, r7
 8022d3a:	bd80      	pop	{r7, pc}

08022d3c <w5500_rn>:
static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }
 8022d3c:	b580      	push	{r7, lr}
 8022d3e:	b086      	sub	sp, #24
 8022d40:	af02      	add	r7, sp, #8
 8022d42:	60f8      	str	r0, [r7, #12]
 8022d44:	607b      	str	r3, [r7, #4]
 8022d46:	460b      	mov	r3, r1
 8022d48:	72fb      	strb	r3, [r7, #11]
 8022d4a:	4613      	mov	r3, r2
 8022d4c:	813b      	strh	r3, [r7, #8]
 8022d4e:	893a      	ldrh	r2, [r7, #8]
 8022d50:	7af9      	ldrb	r1, [r7, #11]
 8022d52:	69bb      	ldr	r3, [r7, #24]
 8022d54:	9301      	str	r3, [sp, #4]
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	9300      	str	r3, [sp, #0]
 8022d5a:	2300      	movs	r3, #0
 8022d5c:	68f8      	ldr	r0, [r7, #12]
 8022d5e:	f7ff ff32 	bl	8022bc6 <w5500_txn>
 8022d62:	bf00      	nop
 8022d64:	3710      	adds	r7, #16
 8022d66:	46bd      	mov	sp, r7
 8022d68:	bd80      	pop	{r7, pc}

08022d6a <w5500_r1>:
static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }
 8022d6a:	b580      	push	{r7, lr}
 8022d6c:	b086      	sub	sp, #24
 8022d6e:	af02      	add	r7, sp, #8
 8022d70:	6078      	str	r0, [r7, #4]
 8022d72:	460b      	mov	r3, r1
 8022d74:	70fb      	strb	r3, [r7, #3]
 8022d76:	4613      	mov	r3, r2
 8022d78:	803b      	strh	r3, [r7, #0]
 8022d7a:	2300      	movs	r3, #0
 8022d7c:	73fb      	strb	r3, [r7, #15]
 8022d7e:	f107 030f 	add.w	r3, r7, #15
 8022d82:	883a      	ldrh	r2, [r7, #0]
 8022d84:	78f9      	ldrb	r1, [r7, #3]
 8022d86:	2001      	movs	r0, #1
 8022d88:	9000      	str	r0, [sp, #0]
 8022d8a:	6878      	ldr	r0, [r7, #4]
 8022d8c:	f7ff ffd6 	bl	8022d3c <w5500_rn>
 8022d90:	7bfb      	ldrb	r3, [r7, #15]
 8022d92:	4618      	mov	r0, r3
 8022d94:	3710      	adds	r7, #16
 8022d96:	46bd      	mov	sp, r7
 8022d98:	bd80      	pop	{r7, pc}

08022d9a <w5500_r2>:
static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }
 8022d9a:	b580      	push	{r7, lr}
 8022d9c:	b086      	sub	sp, #24
 8022d9e:	af02      	add	r7, sp, #8
 8022da0:	6078      	str	r0, [r7, #4]
 8022da2:	460b      	mov	r3, r1
 8022da4:	70fb      	strb	r3, [r7, #3]
 8022da6:	4613      	mov	r3, r2
 8022da8:	803b      	strh	r3, [r7, #0]
 8022daa:	2300      	movs	r3, #0
 8022dac:	81bb      	strh	r3, [r7, #12]
 8022dae:	f107 030c 	add.w	r3, r7, #12
 8022db2:	883a      	ldrh	r2, [r7, #0]
 8022db4:	78f9      	ldrb	r1, [r7, #3]
 8022db6:	2002      	movs	r0, #2
 8022db8:	9000      	str	r0, [sp, #0]
 8022dba:	6878      	ldr	r0, [r7, #4]
 8022dbc:	f7ff ffbe 	bl	8022d3c <w5500_rn>
 8022dc0:	7b3b      	ldrb	r3, [r7, #12]
 8022dc2:	021b      	lsls	r3, r3, #8
 8022dc4:	b21a      	sxth	r2, r3
 8022dc6:	7b7b      	ldrb	r3, [r7, #13]
 8022dc8:	b21b      	sxth	r3, r3
 8022dca:	4313      	orrs	r3, r2
 8022dcc:	b21b      	sxth	r3, r3
 8022dce:	b29b      	uxth	r3, r3
 8022dd0:	4618      	mov	r0, r3
 8022dd2:	3710      	adds	r7, #16
 8022dd4:	46bd      	mov	sp, r7
 8022dd6:	bd80      	pop	{r7, pc}

08022dd8 <w5500_rx>:
// clang-format on

static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {
 8022dd8:	b580      	push	{r7, lr}
 8022dda:	b08a      	sub	sp, #40	@ 0x28
 8022ddc:	af02      	add	r7, sp, #8
 8022dde:	60f8      	str	r0, [r7, #12]
 8022de0:	60b9      	str	r1, [r7, #8]
 8022de2:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022de8:	61bb      	str	r3, [r7, #24]
  uint16_t r = 0, n = 0, len = (uint16_t) buflen, n2;     // Read recv len
 8022dea:	2300      	movs	r3, #0
 8022dec:	83fb      	strh	r3, [r7, #30]
 8022dee:	2300      	movs	r3, #0
 8022df0:	83bb      	strh	r3, [r7, #28]
 8022df2:	68bb      	ldr	r3, [r7, #8]
 8022df4:	82fb      	strh	r3, [r7, #22]
  while ((n2 = w5500_r2(s, W5500_S0, 0x26)) > n) n = n2;  // Until it is stable
 8022df6:	e001      	b.n	8022dfc <w5500_rx+0x24>
 8022df8:	8abb      	ldrh	r3, [r7, #20]
 8022dfa:	83bb      	strh	r3, [r7, #28]
 8022dfc:	2226      	movs	r2, #38	@ 0x26
 8022dfe:	2101      	movs	r1, #1
 8022e00:	69b8      	ldr	r0, [r7, #24]
 8022e02:	f7ff ffca 	bl	8022d9a <w5500_r2>
 8022e06:	4603      	mov	r3, r0
 8022e08:	82bb      	strh	r3, [r7, #20]
 8022e0a:	8aba      	ldrh	r2, [r7, #20]
 8022e0c:	8bbb      	ldrh	r3, [r7, #28]
 8022e0e:	429a      	cmp	r2, r3
 8022e10:	d8f2      	bhi.n	8022df8 <w5500_rx+0x20>
  // printf("RSR: %d\n", (int) n);
  if (n > 0) {
 8022e12:	8bbb      	ldrh	r3, [r7, #28]
 8022e14:	2b00      	cmp	r3, #0
 8022e16:	d032      	beq.n	8022e7e <w5500_rx+0xa6>
    uint16_t ptr = w5500_r2(s, W5500_S0, 0x28);  // Get read pointer
 8022e18:	2228      	movs	r2, #40	@ 0x28
 8022e1a:	2101      	movs	r1, #1
 8022e1c:	69b8      	ldr	r0, [r7, #24]
 8022e1e:	f7ff ffbc 	bl	8022d9a <w5500_r2>
 8022e22:	4603      	mov	r3, r0
 8022e24:	827b      	strh	r3, [r7, #18]
    n = w5500_r2(s, W5500_RX0, ptr);             // Read frame length
 8022e26:	8a7b      	ldrh	r3, [r7, #18]
 8022e28:	461a      	mov	r2, r3
 8022e2a:	2103      	movs	r1, #3
 8022e2c:	69b8      	ldr	r0, [r7, #24]
 8022e2e:	f7ff ffb4 	bl	8022d9a <w5500_r2>
 8022e32:	4603      	mov	r3, r0
 8022e34:	83bb      	strh	r3, [r7, #28]
    if (n <= len + 2 && n > 1) {
 8022e36:	8bba      	ldrh	r2, [r7, #28]
 8022e38:	8afb      	ldrh	r3, [r7, #22]
 8022e3a:	3302      	adds	r3, #2
 8022e3c:	429a      	cmp	r2, r3
 8022e3e:	dc0f      	bgt.n	8022e60 <w5500_rx+0x88>
 8022e40:	8bbb      	ldrh	r3, [r7, #28]
 8022e42:	2b01      	cmp	r3, #1
 8022e44:	d90c      	bls.n	8022e60 <w5500_rx+0x88>
      r = (uint16_t) (n - 2);
 8022e46:	8bbb      	ldrh	r3, [r7, #28]
 8022e48:	3b02      	subs	r3, #2
 8022e4a:	83fb      	strh	r3, [r7, #30]
      w5500_rn(s, W5500_RX0, (uint16_t) (ptr + 2), buf, r);
 8022e4c:	8a7b      	ldrh	r3, [r7, #18]
 8022e4e:	3302      	adds	r3, #2
 8022e50:	b29a      	uxth	r2, r3
 8022e52:	8bfb      	ldrh	r3, [r7, #30]
 8022e54:	9300      	str	r3, [sp, #0]
 8022e56:	68fb      	ldr	r3, [r7, #12]
 8022e58:	2103      	movs	r1, #3
 8022e5a:	69b8      	ldr	r0, [r7, #24]
 8022e5c:	f7ff ff6e 	bl	8022d3c <w5500_rn>
    }
    w5500_w2(s, W5500_S0, 0x28, (uint16_t) (ptr + n));  // Advance read pointer
 8022e60:	8a7a      	ldrh	r2, [r7, #18]
 8022e62:	8bbb      	ldrh	r3, [r7, #28]
 8022e64:	4413      	add	r3, r2
 8022e66:	b29b      	uxth	r3, r3
 8022e68:	2228      	movs	r2, #40	@ 0x28
 8022e6a:	2101      	movs	r1, #1
 8022e6c:	69b8      	ldr	r0, [r7, #24]
 8022e6e:	f7ff ff43 	bl	8022cf8 <w5500_w2>
    w5500_w1(s, W5500_S0, 1, 0x40);                     // Sock0 CR -> RECV
 8022e72:	2340      	movs	r3, #64	@ 0x40
 8022e74:	2201      	movs	r2, #1
 8022e76:	2101      	movs	r1, #1
 8022e78:	69b8      	ldr	r0, [r7, #24]
 8022e7a:	f7ff ff24 	bl	8022cc6 <w5500_w1>
    // printf("  RX_RD: tot=%u n=%u r=%u\n", n2, n, r);
  }
  return r;
 8022e7e:	8bfb      	ldrh	r3, [r7, #30]
}
 8022e80:	4618      	mov	r0, r3
 8022e82:	3720      	adds	r7, #32
 8022e84:	46bd      	mov	sp, r7
 8022e86:	bd80      	pop	{r7, pc}

08022e88 <w5500_tx>:

static size_t w5500_tx(const void *buf, size_t buflen,
                       struct mg_tcpip_if *ifp) {
 8022e88:	b580      	push	{r7, lr}
 8022e8a:	b08a      	sub	sp, #40	@ 0x28
 8022e8c:	af02      	add	r7, sp, #8
 8022e8e:	60f8      	str	r0, [r7, #12]
 8022e90:	60b9      	str	r1, [r7, #8]
 8022e92:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022e98:	617b      	str	r3, [r7, #20]
  uint16_t i, ptr, n = 0, len = (uint16_t) buflen;
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	83bb      	strh	r3, [r7, #28]
 8022e9e:	68bb      	ldr	r3, [r7, #8]
 8022ea0:	837b      	strh	r3, [r7, #26]
  while (n < len) n = w5500_r2(s, W5500_S0, 0x20);      // Wait for space
 8022ea2:	e006      	b.n	8022eb2 <w5500_tx+0x2a>
 8022ea4:	2220      	movs	r2, #32
 8022ea6:	2101      	movs	r1, #1
 8022ea8:	6978      	ldr	r0, [r7, #20]
 8022eaa:	f7ff ff76 	bl	8022d9a <w5500_r2>
 8022eae:	4603      	mov	r3, r0
 8022eb0:	83bb      	strh	r3, [r7, #28]
 8022eb2:	8bba      	ldrh	r2, [r7, #28]
 8022eb4:	8b7b      	ldrh	r3, [r7, #26]
 8022eb6:	429a      	cmp	r2, r3
 8022eb8:	d3f4      	bcc.n	8022ea4 <w5500_tx+0x1c>
  ptr = w5500_r2(s, W5500_S0, 0x24);                    // Get write pointer
 8022eba:	2224      	movs	r2, #36	@ 0x24
 8022ebc:	2101      	movs	r1, #1
 8022ebe:	6978      	ldr	r0, [r7, #20]
 8022ec0:	f7ff ff6b 	bl	8022d9a <w5500_r2>
 8022ec4:	4603      	mov	r3, r0
 8022ec6:	827b      	strh	r3, [r7, #18]
  w5500_wn(s, W5500_TX0, ptr, (void *) buf, len);       // Write data
 8022ec8:	8b7b      	ldrh	r3, [r7, #26]
 8022eca:	8a7a      	ldrh	r2, [r7, #18]
 8022ecc:	9300      	str	r3, [sp, #0]
 8022ece:	68fb      	ldr	r3, [r7, #12]
 8022ed0:	2102      	movs	r1, #2
 8022ed2:	6978      	ldr	r0, [r7, #20]
 8022ed4:	f7ff fee0 	bl	8022c98 <w5500_wn>
  w5500_w2(s, W5500_S0, 0x24, (uint16_t) (ptr + len));  // Advance write pointer
 8022ed8:	8a7a      	ldrh	r2, [r7, #18]
 8022eda:	8b7b      	ldrh	r3, [r7, #26]
 8022edc:	4413      	add	r3, r2
 8022ede:	b29b      	uxth	r3, r3
 8022ee0:	2224      	movs	r2, #36	@ 0x24
 8022ee2:	2101      	movs	r1, #1
 8022ee4:	6978      	ldr	r0, [r7, #20]
 8022ee6:	f7ff ff07 	bl	8022cf8 <w5500_w2>
  w5500_w1(s, W5500_S0, 1, 0x20);                       // Sock0 CR -> SEND
 8022eea:	2320      	movs	r3, #32
 8022eec:	2201      	movs	r2, #1
 8022eee:	2101      	movs	r1, #1
 8022ef0:	6978      	ldr	r0, [r7, #20]
 8022ef2:	f7ff fee8 	bl	8022cc6 <w5500_w1>
  for (i = 0; i < 40; i++) {
 8022ef6:	2300      	movs	r3, #0
 8022ef8:	83fb      	strh	r3, [r7, #30]
 8022efa:	e020      	b.n	8022f3e <w5500_tx+0xb6>
    uint8_t ir = w5500_r1(s, W5500_S0, 2);  // Read S0 IR
 8022efc:	2202      	movs	r2, #2
 8022efe:	2101      	movs	r1, #1
 8022f00:	6978      	ldr	r0, [r7, #20]
 8022f02:	f7ff ff32 	bl	8022d6a <w5500_r1>
 8022f06:	4603      	mov	r3, r0
 8022f08:	747b      	strb	r3, [r7, #17]
    if (ir == 0) continue;
 8022f0a:	7c7b      	ldrb	r3, [r7, #17]
 8022f0c:	2b00      	cmp	r3, #0
 8022f0e:	d012      	beq.n	8022f36 <w5500_tx+0xae>
    // printf("IR %d, len=%d, free=%d, ptr %d\n", ir, (int) len, (int) n, ptr);
    w5500_w1(s, W5500_S0, 2, ir);  // Write S0 IR: clear it!
 8022f10:	7c7b      	ldrb	r3, [r7, #17]
 8022f12:	2202      	movs	r2, #2
 8022f14:	2101      	movs	r1, #1
 8022f16:	6978      	ldr	r0, [r7, #20]
 8022f18:	f7ff fed5 	bl	8022cc6 <w5500_w1>
    if (ir & 8) len = 0;           // Timeout. Report error
 8022f1c:	7c7b      	ldrb	r3, [r7, #17]
 8022f1e:	f003 0308 	and.w	r3, r3, #8
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	d001      	beq.n	8022f2a <w5500_tx+0xa2>
 8022f26:	2300      	movs	r3, #0
 8022f28:	837b      	strh	r3, [r7, #26]
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8022f2a:	7c7b      	ldrb	r3, [r7, #17]
 8022f2c:	f003 0318 	and.w	r3, r3, #24
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	d108      	bne.n	8022f46 <w5500_tx+0xbe>
 8022f34:	e000      	b.n	8022f38 <w5500_tx+0xb0>
    if (ir == 0) continue;
 8022f36:	bf00      	nop
  for (i = 0; i < 40; i++) {
 8022f38:	8bfb      	ldrh	r3, [r7, #30]
 8022f3a:	3301      	adds	r3, #1
 8022f3c:	83fb      	strh	r3, [r7, #30]
 8022f3e:	8bfb      	ldrh	r3, [r7, #30]
 8022f40:	2b27      	cmp	r3, #39	@ 0x27
 8022f42:	d9db      	bls.n	8022efc <w5500_tx+0x74>
 8022f44:	e000      	b.n	8022f48 <w5500_tx+0xc0>
    if (ir & (16 | 8)) break;      // Stop on SEND_OK or timeout
 8022f46:	bf00      	nop
  }
  return len;
 8022f48:	8b7b      	ldrh	r3, [r7, #26]
}
 8022f4a:	4618      	mov	r0, r3
 8022f4c:	3720      	adds	r7, #32
 8022f4e:	46bd      	mov	sp, r7
 8022f50:	bd80      	pop	{r7, pc}

08022f52 <w5500_init>:

static bool w5500_init(struct mg_tcpip_if *ifp) {
 8022f52:	b580      	push	{r7, lr}
 8022f54:	b084      	sub	sp, #16
 8022f56:	af00      	add	r7, sp, #0
 8022f58:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *s = (struct mg_tcpip_spi *) ifp->driver_data;
 8022f5a:	687b      	ldr	r3, [r7, #4]
 8022f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022f5e:	60fb      	str	r3, [r7, #12]
  s->end(s->spi);
 8022f60:	68fb      	ldr	r3, [r7, #12]
 8022f62:	689b      	ldr	r3, [r3, #8]
 8022f64:	68fa      	ldr	r2, [r7, #12]
 8022f66:	6812      	ldr	r2, [r2, #0]
 8022f68:	4610      	mov	r0, r2
 8022f6a:	4798      	blx	r3
  w5500_w1(s, W5500_CR, 0, 0x80);     // Reset chip: CR -> 0x80
 8022f6c:	2380      	movs	r3, #128	@ 0x80
 8022f6e:	2200      	movs	r2, #0
 8022f70:	2100      	movs	r1, #0
 8022f72:	68f8      	ldr	r0, [r7, #12]
 8022f74:	f7ff fea7 	bl	8022cc6 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0);     // CR PHYCFGR -> reset
 8022f78:	2300      	movs	r3, #0
 8022f7a:	222e      	movs	r2, #46	@ 0x2e
 8022f7c:	2100      	movs	r1, #0
 8022f7e:	68f8      	ldr	r0, [r7, #12]
 8022f80:	f7ff fea1 	bl	8022cc6 <w5500_w1>
  w5500_w1(s, W5500_CR, 0x2e, 0xf8);  // CR PHYCFGR -> set
 8022f84:	23f8      	movs	r3, #248	@ 0xf8
 8022f86:	222e      	movs	r2, #46	@ 0x2e
 8022f88:	2100      	movs	r1, #0
 8022f8a:	68f8      	ldr	r0, [r7, #12]
 8022f8c:	f7ff fe9b 	bl	8022cc6 <w5500_w1>
  // w5500_wn(s, W5500_CR, 9, s->mac, 6);      // Set source MAC
  w5500_w1(s, W5500_S0, 0x1e, 16);          // Sock0 RX buf size
 8022f90:	2310      	movs	r3, #16
 8022f92:	221e      	movs	r2, #30
 8022f94:	2101      	movs	r1, #1
 8022f96:	68f8      	ldr	r0, [r7, #12]
 8022f98:	f7ff fe95 	bl	8022cc6 <w5500_w1>
  w5500_w1(s, W5500_S0, 0x1f, 16);          // Sock0 TX buf size
 8022f9c:	2310      	movs	r3, #16
 8022f9e:	221f      	movs	r2, #31
 8022fa0:	2101      	movs	r1, #1
 8022fa2:	68f8      	ldr	r0, [r7, #12]
 8022fa4:	f7ff fe8f 	bl	8022cc6 <w5500_w1>
  w5500_w1(s, W5500_S0, 0, 4);              // Sock0 MR -> MACRAW
 8022fa8:	2304      	movs	r3, #4
 8022faa:	2200      	movs	r2, #0
 8022fac:	2101      	movs	r1, #1
 8022fae:	68f8      	ldr	r0, [r7, #12]
 8022fb0:	f7ff fe89 	bl	8022cc6 <w5500_w1>
  w5500_w1(s, W5500_S0, 1, 1);              // Sock0 CR -> OPEN
 8022fb4:	2301      	movs	r3, #1
 8022fb6:	2201      	movs	r2, #1
 8022fb8:	2101      	movs	r1, #1
 8022fba:	68f8      	ldr	r0, [r7, #12]
 8022fbc:	f7ff fe83 	bl	8022cc6 <w5500_w1>
  return w5500_r1(s, W5500_S0, 3) == 0x42;  // Sock0 SR == MACRAW
 8022fc0:	2203      	movs	r2, #3
 8022fc2:	2101      	movs	r1, #1
 8022fc4:	68f8      	ldr	r0, [r7, #12]
 8022fc6:	f7ff fed0 	bl	8022d6a <w5500_r1>
 8022fca:	4603      	mov	r3, r0
 8022fcc:	2b42      	cmp	r3, #66	@ 0x42
 8022fce:	bf0c      	ite	eq
 8022fd0:	2301      	moveq	r3, #1
 8022fd2:	2300      	movne	r3, #0
 8022fd4:	b2db      	uxtb	r3, r3
}
 8022fd6:	4618      	mov	r0, r3
 8022fd8:	3710      	adds	r7, #16
 8022fda:	46bd      	mov	sp, r7
 8022fdc:	bd80      	pop	{r7, pc}

08022fde <w5500_up>:

static bool w5500_up(struct mg_tcpip_if *ifp) {
 8022fde:	b580      	push	{r7, lr}
 8022fe0:	b084      	sub	sp, #16
 8022fe2:	af00      	add	r7, sp, #0
 8022fe4:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_spi *spi = (struct mg_tcpip_spi *) ifp->driver_data;
 8022fe6:	687b      	ldr	r3, [r7, #4]
 8022fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022fea:	60fb      	str	r3, [r7, #12]
  uint8_t phycfgr = w5500_r1(spi, W5500_CR, 0x2e);
 8022fec:	222e      	movs	r2, #46	@ 0x2e
 8022fee:	2100      	movs	r1, #0
 8022ff0:	68f8      	ldr	r0, [r7, #12]
 8022ff2:	f7ff feba 	bl	8022d6a <w5500_r1>
 8022ff6:	4603      	mov	r3, r0
 8022ff8:	72fb      	strb	r3, [r7, #11]
  return phycfgr & 1;  // Bit 0 of PHYCFGR is LNK (0 - down, 1 - up)
 8022ffa:	7afb      	ldrb	r3, [r7, #11]
 8022ffc:	f003 0301 	and.w	r3, r3, #1
 8023000:	2b00      	cmp	r3, #0
 8023002:	bf14      	ite	ne
 8023004:	2301      	movne	r3, #1
 8023006:	2300      	moveq	r3, #0
 8023008:	b2db      	uxtb	r3, r3
}
 802300a:	4618      	mov	r0, r3
 802300c:	3710      	adds	r7, #16
 802300e:	46bd      	mov	sp, r7
 8023010:	bd80      	pop	{r7, pc}
	...

08023014 <has_mqtt_prefix>:
#include <ctype.h>

#define PREFIX "mqtt://"
#define MAX_PORT 65535

int has_mqtt_prefix(const char *url) {
 8023014:	b580      	push	{r7, lr}
 8023016:	b082      	sub	sp, #8
 8023018:	af00      	add	r7, sp, #0
 802301a:	6078      	str	r0, [r7, #4]
    return strncmp(url, PREFIX, strlen(PREFIX)) == 0;
 802301c:	2207      	movs	r2, #7
 802301e:	4907      	ldr	r1, [pc, #28]	@ (802303c <has_mqtt_prefix+0x28>)
 8023020:	6878      	ldr	r0, [r7, #4]
 8023022:	f002 feca 	bl	8025dba <strncmp>
 8023026:	4603      	mov	r3, r0
 8023028:	2b00      	cmp	r3, #0
 802302a:	bf0c      	ite	eq
 802302c:	2301      	moveq	r3, #1
 802302e:	2300      	movne	r3, #0
 8023030:	b2db      	uxtb	r3, r3
}
 8023032:	4618      	mov	r0, r3
 8023034:	3708      	adds	r7, #8
 8023036:	46bd      	mov	sp, r7
 8023038:	bd80      	pop	{r7, pc}
 802303a:	bf00      	nop
 802303c:	08033454 	.word	0x08033454

08023040 <is_valid_ip_or_domain>:

int is_valid_ip_or_domain(const char *host) {
 8023040:	b580      	push	{r7, lr}
 8023042:	b08a      	sub	sp, #40	@ 0x28
 8023044:	af00      	add	r7, sp, #0
 8023046:	6078      	str	r0, [r7, #4]
    int dot_count = 0;
 8023048:	2300      	movs	r3, #0
 802304a:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_ip_format = 1;
 802304c:	2301      	movs	r3, #1
 802304e:	623b      	str	r3, [r7, #32]

    // Проверка, является ли это IP-адресом
    for (int i = 0; host[i] != '\0'; i++) {
 8023050:	2300      	movs	r3, #0
 8023052:	61fb      	str	r3, [r7, #28]
 8023054:	e01b      	b.n	802308e <is_valid_ip_or_domain+0x4e>
        if (host[i] == '.') {
 8023056:	69fb      	ldr	r3, [r7, #28]
 8023058:	687a      	ldr	r2, [r7, #4]
 802305a:	4413      	add	r3, r2
 802305c:	781b      	ldrb	r3, [r3, #0]
 802305e:	2b2e      	cmp	r3, #46	@ 0x2e
 8023060:	d103      	bne.n	802306a <is_valid_ip_or_domain+0x2a>
            dot_count++;
 8023062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023064:	3301      	adds	r3, #1
 8023066:	627b      	str	r3, [r7, #36]	@ 0x24
 8023068:	e00e      	b.n	8023088 <is_valid_ip_or_domain+0x48>
        } else if (!isdigit(host[i])) {
 802306a:	69fb      	ldr	r3, [r7, #28]
 802306c:	687a      	ldr	r2, [r7, #4]
 802306e:	4413      	add	r3, r2
 8023070:	781b      	ldrb	r3, [r3, #0]
 8023072:	3301      	adds	r3, #1
 8023074:	4a39      	ldr	r2, [pc, #228]	@ (802315c <is_valid_ip_or_domain+0x11c>)
 8023076:	4413      	add	r3, r2
 8023078:	781b      	ldrb	r3, [r3, #0]
 802307a:	f003 0304 	and.w	r3, r3, #4
 802307e:	2b00      	cmp	r3, #0
 8023080:	d102      	bne.n	8023088 <is_valid_ip_or_domain+0x48>
            is_ip_format = 0;
 8023082:	2300      	movs	r3, #0
 8023084:	623b      	str	r3, [r7, #32]
            break;
 8023086:	e008      	b.n	802309a <is_valid_ip_or_domain+0x5a>
    for (int i = 0; host[i] != '\0'; i++) {
 8023088:	69fb      	ldr	r3, [r7, #28]
 802308a:	3301      	adds	r3, #1
 802308c:	61fb      	str	r3, [r7, #28]
 802308e:	69fb      	ldr	r3, [r7, #28]
 8023090:	687a      	ldr	r2, [r7, #4]
 8023092:	4413      	add	r3, r2
 8023094:	781b      	ldrb	r3, [r3, #0]
 8023096:	2b00      	cmp	r3, #0
 8023098:	d1dd      	bne.n	8023056 <is_valid_ip_or_domain+0x16>
        }
    }

    // Если это может быть IP-адрес
    if (is_ip_format && dot_count == 3) {
 802309a:	6a3b      	ldr	r3, [r7, #32]
 802309c:	2b00      	cmp	r3, #0
 802309e:	d026      	beq.n	80230ee <is_valid_ip_or_domain+0xae>
 80230a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80230a2:	2b03      	cmp	r3, #3
 80230a4:	d123      	bne.n	80230ee <is_valid_ip_or_domain+0xae>
        int octet;
        const char *ptr = host;
 80230a6:	687b      	ldr	r3, [r7, #4]
 80230a8:	61bb      	str	r3, [r7, #24]

        for (int i = 0; i < 4; i++) {
 80230aa:	2300      	movs	r3, #0
 80230ac:	617b      	str	r3, [r7, #20]
 80230ae:	e019      	b.n	80230e4 <is_valid_ip_or_domain+0xa4>
            octet = atoi(ptr);
 80230b0:	69b8      	ldr	r0, [r7, #24]
 80230b2:	f000 f917 	bl	80232e4 <atoi>
 80230b6:	60f8      	str	r0, [r7, #12]
            if (octet < 0 || octet > 255) return 0;  // Неверный диапазон октета
 80230b8:	68fb      	ldr	r3, [r7, #12]
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	db02      	blt.n	80230c4 <is_valid_ip_or_domain+0x84>
 80230be:	68fb      	ldr	r3, [r7, #12]
 80230c0:	2bff      	cmp	r3, #255	@ 0xff
 80230c2:	dd01      	ble.n	80230c8 <is_valid_ip_or_domain+0x88>
 80230c4:	2300      	movs	r3, #0
 80230c6:	e044      	b.n	8023152 <is_valid_ip_or_domain+0x112>

            // Переход к следующему октету
            ptr = strchr(ptr, '.');
 80230c8:	212e      	movs	r1, #46	@ 0x2e
 80230ca:	69b8      	ldr	r0, [r7, #24]
 80230cc:	f002 fe57 	bl	8025d7e <strchr>
 80230d0:	61b8      	str	r0, [r7, #24]
            if (ptr != NULL) ptr++;
 80230d2:	69bb      	ldr	r3, [r7, #24]
 80230d4:	2b00      	cmp	r3, #0
 80230d6:	d002      	beq.n	80230de <is_valid_ip_or_domain+0x9e>
 80230d8:	69bb      	ldr	r3, [r7, #24]
 80230da:	3301      	adds	r3, #1
 80230dc:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < 4; i++) {
 80230de:	697b      	ldr	r3, [r7, #20]
 80230e0:	3301      	adds	r3, #1
 80230e2:	617b      	str	r3, [r7, #20]
 80230e4:	697b      	ldr	r3, [r7, #20]
 80230e6:	2b03      	cmp	r3, #3
 80230e8:	dde2      	ble.n	80230b0 <is_valid_ip_or_domain+0x70>
        }
        return 1;  // Строка - корректный IP-адрес
 80230ea:	2301      	movs	r3, #1
 80230ec:	e031      	b.n	8023152 <is_valid_ip_or_domain+0x112>
    }

    // Проверка на корректность доменного имени (буквы, цифры, точки и дефисы)
    dot_count = 0;
 80230ee:	2300      	movs	r3, #0
 80230f0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; host[i] != '\0'; i++) {
 80230f2:	2300      	movs	r3, #0
 80230f4:	613b      	str	r3, [r7, #16]
 80230f6:	e020      	b.n	802313a <is_valid_ip_or_domain+0xfa>
        if (host[i] == '.') {
 80230f8:	693b      	ldr	r3, [r7, #16]
 80230fa:	687a      	ldr	r2, [r7, #4]
 80230fc:	4413      	add	r3, r2
 80230fe:	781b      	ldrb	r3, [r3, #0]
 8023100:	2b2e      	cmp	r3, #46	@ 0x2e
 8023102:	d103      	bne.n	802310c <is_valid_ip_or_domain+0xcc>
            dot_count++;
 8023104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023106:	3301      	adds	r3, #1
 8023108:	627b      	str	r3, [r7, #36]	@ 0x24
 802310a:	e013      	b.n	8023134 <is_valid_ip_or_domain+0xf4>
        } else if (!isalnum(host[i]) && host[i] != '-') {
 802310c:	693b      	ldr	r3, [r7, #16]
 802310e:	687a      	ldr	r2, [r7, #4]
 8023110:	4413      	add	r3, r2
 8023112:	781b      	ldrb	r3, [r3, #0]
 8023114:	3301      	adds	r3, #1
 8023116:	4a11      	ldr	r2, [pc, #68]	@ (802315c <is_valid_ip_or_domain+0x11c>)
 8023118:	4413      	add	r3, r2
 802311a:	781b      	ldrb	r3, [r3, #0]
 802311c:	f003 0307 	and.w	r3, r3, #7
 8023120:	2b00      	cmp	r3, #0
 8023122:	d107      	bne.n	8023134 <is_valid_ip_or_domain+0xf4>
 8023124:	693b      	ldr	r3, [r7, #16]
 8023126:	687a      	ldr	r2, [r7, #4]
 8023128:	4413      	add	r3, r2
 802312a:	781b      	ldrb	r3, [r3, #0]
 802312c:	2b2d      	cmp	r3, #45	@ 0x2d
 802312e:	d001      	beq.n	8023134 <is_valid_ip_or_domain+0xf4>
            return 0;  // Некорректный символ для доменного имени
 8023130:	2300      	movs	r3, #0
 8023132:	e00e      	b.n	8023152 <is_valid_ip_or_domain+0x112>
    for (int i = 0; host[i] != '\0'; i++) {
 8023134:	693b      	ldr	r3, [r7, #16]
 8023136:	3301      	adds	r3, #1
 8023138:	613b      	str	r3, [r7, #16]
 802313a:	693b      	ldr	r3, [r7, #16]
 802313c:	687a      	ldr	r2, [r7, #4]
 802313e:	4413      	add	r3, r2
 8023140:	781b      	ldrb	r3, [r3, #0]
 8023142:	2b00      	cmp	r3, #0
 8023144:	d1d8      	bne.n	80230f8 <is_valid_ip_or_domain+0xb8>
        }
    }
    return dot_count > 0; // Доменное имя должно содержать хотя бы одну точку
 8023146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023148:	2b00      	cmp	r3, #0
 802314a:	bfcc      	ite	gt
 802314c:	2301      	movgt	r3, #1
 802314e:	2300      	movle	r3, #0
 8023150:	b2db      	uxtb	r3, r3
}
 8023152:	4618      	mov	r0, r3
 8023154:	3728      	adds	r7, #40	@ 0x28
 8023156:	46bd      	mov	sp, r7
 8023158:	bd80      	pop	{r7, pc}
 802315a:	bf00      	nop
 802315c:	08034aa0 	.word	0x08034aa0

08023160 <is_valid_port>:

int is_valid_port(const char *port_str) {
 8023160:	b580      	push	{r7, lr}
 8023162:	b084      	sub	sp, #16
 8023164:	af00      	add	r7, sp, #0
 8023166:	6078      	str	r0, [r7, #4]
    int port = atoi(port_str);
 8023168:	6878      	ldr	r0, [r7, #4]
 802316a:	f000 f8bb 	bl	80232e4 <atoi>
 802316e:	60f8      	str	r0, [r7, #12]
    if (port < 1 || port > MAX_PORT) {
 8023170:	68fb      	ldr	r3, [r7, #12]
 8023172:	2b00      	cmp	r3, #0
 8023174:	dd03      	ble.n	802317e <is_valid_port+0x1e>
 8023176:	68fb      	ldr	r3, [r7, #12]
 8023178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802317c:	db10      	blt.n	80231a0 <is_valid_port+0x40>
        return 0; // Порт вне диапазона
 802317e:	2300      	movs	r3, #0
 8023180:	e013      	b.n	80231aa <is_valid_port+0x4a>
    }
    // Проверить, что порт состоит только из цифр
    while (*port_str) {
        if (!isdigit(*port_str)) {
 8023182:	687b      	ldr	r3, [r7, #4]
 8023184:	781b      	ldrb	r3, [r3, #0]
 8023186:	3301      	adds	r3, #1
 8023188:	4a0a      	ldr	r2, [pc, #40]	@ (80231b4 <is_valid_port+0x54>)
 802318a:	4413      	add	r3, r2
 802318c:	781b      	ldrb	r3, [r3, #0]
 802318e:	f003 0304 	and.w	r3, r3, #4
 8023192:	2b00      	cmp	r3, #0
 8023194:	d101      	bne.n	802319a <is_valid_port+0x3a>
            return 0;
 8023196:	2300      	movs	r3, #0
 8023198:	e007      	b.n	80231aa <is_valid_port+0x4a>
        }
        port_str++;
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	3301      	adds	r3, #1
 802319e:	607b      	str	r3, [r7, #4]
    while (*port_str) {
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	781b      	ldrb	r3, [r3, #0]
 80231a4:	2b00      	cmp	r3, #0
 80231a6:	d1ec      	bne.n	8023182 <is_valid_port+0x22>
    }
    return 1;
 80231a8:	2301      	movs	r3, #1
}
 80231aa:	4618      	mov	r0, r3
 80231ac:	3710      	adds	r7, #16
 80231ae:	46bd      	mov	sp, r7
 80231b0:	bd80      	pop	{r7, pc}
 80231b2:	bf00      	nop
 80231b4:	08034aa0 	.word	0x08034aa0

080231b8 <is_valid_mqtt_url>:

int is_valid_mqtt_url(const char *url) {
 80231b8:	b580      	push	{r7, lr}
 80231ba:	b0c6      	sub	sp, #280	@ 0x118
 80231bc:	af00      	add	r7, sp, #0
 80231be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80231c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80231c6:	6018      	str	r0, [r3, #0]
    if (!has_mqtt_prefix(url)) {
 80231c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80231cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80231d0:	6818      	ldr	r0, [r3, #0]
 80231d2:	f7ff ff1f 	bl	8023014 <has_mqtt_prefix>
 80231d6:	4603      	mov	r3, r0
 80231d8:	2b00      	cmp	r3, #0
 80231da:	d105      	bne.n	80231e8 <is_valid_mqtt_url+0x30>
        printf("Error: URL does not start with 'mqtt://'\n");
 80231dc:	482e      	ldr	r0, [pc, #184]	@ (8023298 <is_valid_mqtt_url+0xe0>)
 80231de:	f002 f85f 	bl	80252a0 <puts>
        return -1;
 80231e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80231e6:	e051      	b.n	802328c <is_valid_mqtt_url+0xd4>
    }

    // Найти первый символ после "mqtt://"
    const char *host_start = url + strlen(PREFIX);
 80231e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80231ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	3307      	adds	r3, #7
 80231f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    const char *colon = strchr(host_start, ':');
 80231f8:	213a      	movs	r1, #58	@ 0x3a
 80231fa:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80231fe:	f002 fdbe 	bl	8025d7e <strchr>
 8023202:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    if (!colon) {
 8023206:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 802320a:	2b00      	cmp	r3, #0
 802320c:	d105      	bne.n	802321a <is_valid_mqtt_url+0x62>
        printf("Error: URL does not contain a port separator ':'\n");
 802320e:	4823      	ldr	r0, [pc, #140]	@ (802329c <is_valid_mqtt_url+0xe4>)
 8023210:	f002 f846 	bl	80252a0 <puts>
        return -2;
 8023214:	f06f 0301 	mvn.w	r3, #1
 8023218:	e038      	b.n	802328c <is_valid_mqtt_url+0xd4>
    }

    // Извлечь доменное имя или IP-адрес
    char host[256];
    strncpy(host, host_start, colon - host_start);
 802321a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 802321e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8023222:	1ad3      	subs	r3, r2, r3
 8023224:	461a      	mov	r2, r3
 8023226:	f107 030c 	add.w	r3, r7, #12
 802322a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 802322e:	4618      	mov	r0, r3
 8023230:	f002 fdd5 	bl	8025dde <strncpy>
    host[colon - host_start] = '\0';
 8023234:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8023238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802323c:	1ad3      	subs	r3, r2, r3
 802323e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8023242:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8023246:	2100      	movs	r1, #0
 8023248:	54d1      	strb	r1, [r2, r3]

    if (!is_valid_ip_or_domain(host)) {
 802324a:	f107 030c 	add.w	r3, r7, #12
 802324e:	4618      	mov	r0, r3
 8023250:	f7ff fef6 	bl	8023040 <is_valid_ip_or_domain>
 8023254:	4603      	mov	r3, r0
 8023256:	2b00      	cmp	r3, #0
 8023258:	d105      	bne.n	8023266 <is_valid_mqtt_url+0xae>
        printf("Error: Invalid domain or IP address\n");
 802325a:	4811      	ldr	r0, [pc, #68]	@ (80232a0 <is_valid_mqtt_url+0xe8>)
 802325c:	f002 f820 	bl	80252a0 <puts>
        return -3;
 8023260:	f06f 0302 	mvn.w	r3, #2
 8023264:	e012      	b.n	802328c <is_valid_mqtt_url+0xd4>
    }

    // Проверить порт
    const char *port_str = colon + 1;
 8023266:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 802326a:	3301      	adds	r3, #1
 802326c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    if (!is_valid_port(port_str)) {
 8023270:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8023274:	f7ff ff74 	bl	8023160 <is_valid_port>
 8023278:	4603      	mov	r3, r0
 802327a:	2b00      	cmp	r3, #0
 802327c:	d105      	bne.n	802328a <is_valid_mqtt_url+0xd2>
        printf("Error: Invalid port number\n");
 802327e:	4809      	ldr	r0, [pc, #36]	@ (80232a4 <is_valid_mqtt_url+0xec>)
 8023280:	f002 f80e 	bl	80252a0 <puts>
        return -4;
 8023284:	f06f 0303 	mvn.w	r3, #3
 8023288:	e000      	b.n	802328c <is_valid_mqtt_url+0xd4>
    }

    return 0; // URL прошел все проверки
 802328a:	2300      	movs	r3, #0
}
 802328c:	4618      	mov	r0, r3
 802328e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8023292:	46bd      	mov	sp, r7
 8023294:	bd80      	pop	{r7, pc}
 8023296:	bf00      	nop
 8023298:	0803345c 	.word	0x0803345c
 802329c:	08033488 	.word	0x08033488
 80232a0:	080334bc 	.word	0x080334bc
 80232a4:	080334e0 	.word	0x080334e0

080232a8 <__assert_func>:
 80232a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80232aa:	4614      	mov	r4, r2
 80232ac:	461a      	mov	r2, r3
 80232ae:	4b09      	ldr	r3, [pc, #36]	@ (80232d4 <__assert_func+0x2c>)
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	4605      	mov	r5, r0
 80232b4:	68d8      	ldr	r0, [r3, #12]
 80232b6:	b954      	cbnz	r4, 80232ce <__assert_func+0x26>
 80232b8:	4b07      	ldr	r3, [pc, #28]	@ (80232d8 <__assert_func+0x30>)
 80232ba:	461c      	mov	r4, r3
 80232bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80232c0:	9100      	str	r1, [sp, #0]
 80232c2:	462b      	mov	r3, r5
 80232c4:	4905      	ldr	r1, [pc, #20]	@ (80232dc <__assert_func+0x34>)
 80232c6:	f000 f811 	bl	80232ec <fiprintf>
 80232ca:	f003 ffe1 	bl	8027290 <abort>
 80232ce:	4b04      	ldr	r3, [pc, #16]	@ (80232e0 <__assert_func+0x38>)
 80232d0:	e7f4      	b.n	80232bc <__assert_func+0x14>
 80232d2:	bf00      	nop
 80232d4:	20000430 	.word	0x20000430
 80232d8:	080346e3 	.word	0x080346e3
 80232dc:	080346b5 	.word	0x080346b5
 80232e0:	080346a8 	.word	0x080346a8

080232e4 <atoi>:
 80232e4:	220a      	movs	r2, #10
 80232e6:	2100      	movs	r1, #0
 80232e8:	f002 b8b8 	b.w	802545c <strtol>

080232ec <fiprintf>:
 80232ec:	b40e      	push	{r1, r2, r3}
 80232ee:	b503      	push	{r0, r1, lr}
 80232f0:	4601      	mov	r1, r0
 80232f2:	ab03      	add	r3, sp, #12
 80232f4:	4805      	ldr	r0, [pc, #20]	@ (802330c <fiprintf+0x20>)
 80232f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80232fa:	6800      	ldr	r0, [r0, #0]
 80232fc:	9301      	str	r3, [sp, #4]
 80232fe:	f001 fab9 	bl	8024874 <_vfiprintf_r>
 8023302:	b002      	add	sp, #8
 8023304:	f85d eb04 	ldr.w	lr, [sp], #4
 8023308:	b003      	add	sp, #12
 802330a:	4770      	bx	lr
 802330c:	20000430 	.word	0x20000430

08023310 <printf>:
 8023310:	b40f      	push	{r0, r1, r2, r3}
 8023312:	b507      	push	{r0, r1, r2, lr}
 8023314:	4906      	ldr	r1, [pc, #24]	@ (8023330 <printf+0x20>)
 8023316:	ab04      	add	r3, sp, #16
 8023318:	6808      	ldr	r0, [r1, #0]
 802331a:	f853 2b04 	ldr.w	r2, [r3], #4
 802331e:	6881      	ldr	r1, [r0, #8]
 8023320:	9301      	str	r3, [sp, #4]
 8023322:	f000 f809 	bl	8023338 <_vfprintf_r>
 8023326:	b003      	add	sp, #12
 8023328:	f85d eb04 	ldr.w	lr, [sp], #4
 802332c:	b004      	add	sp, #16
 802332e:	4770      	bx	lr
 8023330:	20000430 	.word	0x20000430
 8023334:	00000000 	.word	0x00000000

08023338 <_vfprintf_r>:
 8023338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802333c:	b0d3      	sub	sp, #332	@ 0x14c
 802333e:	468b      	mov	fp, r1
 8023340:	4690      	mov	r8, r2
 8023342:	461c      	mov	r4, r3
 8023344:	461e      	mov	r6, r3
 8023346:	9003      	str	r0, [sp, #12]
 8023348:	f003 fe90 	bl	802706c <_localeconv_r>
 802334c:	6803      	ldr	r3, [r0, #0]
 802334e:	9316      	str	r3, [sp, #88]	@ 0x58
 8023350:	4618      	mov	r0, r3
 8023352:	f7dc ffa5 	bl	80002a0 <strlen>
 8023356:	9b03      	ldr	r3, [sp, #12]
 8023358:	900d      	str	r0, [sp, #52]	@ 0x34
 802335a:	b123      	cbz	r3, 8023366 <_vfprintf_r+0x2e>
 802335c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802335e:	b913      	cbnz	r3, 8023366 <_vfprintf_r+0x2e>
 8023360:	9803      	ldr	r0, [sp, #12]
 8023362:	f002 fa4f 	bl	8025804 <__sinit>
 8023366:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 802336a:	07da      	lsls	r2, r3, #31
 802336c:	d407      	bmi.n	802337e <_vfprintf_r+0x46>
 802336e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8023372:	059b      	lsls	r3, r3, #22
 8023374:	d403      	bmi.n	802337e <_vfprintf_r+0x46>
 8023376:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 802337a:	f003 ff22 	bl	80271c2 <__retarget_lock_acquire_recursive>
 802337e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8023382:	049f      	lsls	r7, r3, #18
 8023384:	d409      	bmi.n	802339a <_vfprintf_r+0x62>
 8023386:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802338a:	f8ab 300c 	strh.w	r3, [fp, #12]
 802338e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8023392:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8023396:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 802339a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802339e:	071d      	lsls	r5, r3, #28
 80233a0:	d502      	bpl.n	80233a8 <_vfprintf_r+0x70>
 80233a2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80233a6:	b9c3      	cbnz	r3, 80233da <_vfprintf_r+0xa2>
 80233a8:	9803      	ldr	r0, [sp, #12]
 80233aa:	4659      	mov	r1, fp
 80233ac:	f002 fbe6 	bl	8025b7c <__swsetup_r>
 80233b0:	b198      	cbz	r0, 80233da <_vfprintf_r+0xa2>
 80233b2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80233b6:	07d8      	lsls	r0, r3, #31
 80233b8:	d506      	bpl.n	80233c8 <_vfprintf_r+0x90>
 80233ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80233be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80233c0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80233c2:	b053      	add	sp, #332	@ 0x14c
 80233c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233c8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80233cc:	0599      	lsls	r1, r3, #22
 80233ce:	d4f4      	bmi.n	80233ba <_vfprintf_r+0x82>
 80233d0:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80233d4:	f003 fef7 	bl	80271c6 <__retarget_lock_release_recursive>
 80233d8:	e7ef      	b.n	80233ba <_vfprintf_r+0x82>
 80233da:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80233de:	f003 021a 	and.w	r2, r3, #26
 80233e2:	2a0a      	cmp	r2, #10
 80233e4:	d116      	bne.n	8023414 <_vfprintf_r+0xdc>
 80233e6:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 80233ea:	2a00      	cmp	r2, #0
 80233ec:	db12      	blt.n	8023414 <_vfprintf_r+0xdc>
 80233ee:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 80233f2:	07d2      	lsls	r2, r2, #31
 80233f4:	d405      	bmi.n	8023402 <_vfprintf_r+0xca>
 80233f6:	059b      	lsls	r3, r3, #22
 80233f8:	d403      	bmi.n	8023402 <_vfprintf_r+0xca>
 80233fa:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80233fe:	f003 fee2 	bl	80271c6 <__retarget_lock_release_recursive>
 8023402:	9803      	ldr	r0, [sp, #12]
 8023404:	4623      	mov	r3, r4
 8023406:	4642      	mov	r2, r8
 8023408:	4659      	mov	r1, fp
 802340a:	b053      	add	sp, #332	@ 0x14c
 802340c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023410:	f001 b9be 	b.w	8024790 <__sbprintf>
 8023414:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8023660 <_vfprintf_r+0x328>
 8023418:	2300      	movs	r3, #0
 802341a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802341e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8023422:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8023426:	ac29      	add	r4, sp, #164	@ 0xa4
 8023428:	9426      	str	r4, [sp, #152]	@ 0x98
 802342a:	9304      	str	r3, [sp, #16]
 802342c:	9309      	str	r3, [sp, #36]	@ 0x24
 802342e:	9312      	str	r3, [sp, #72]	@ 0x48
 8023430:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023432:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023434:	4643      	mov	r3, r8
 8023436:	461d      	mov	r5, r3
 8023438:	f813 2b01 	ldrb.w	r2, [r3], #1
 802343c:	b10a      	cbz	r2, 8023442 <_vfprintf_r+0x10a>
 802343e:	2a25      	cmp	r2, #37	@ 0x25
 8023440:	d1f9      	bne.n	8023436 <_vfprintf_r+0xfe>
 8023442:	ebb5 0708 	subs.w	r7, r5, r8
 8023446:	d00d      	beq.n	8023464 <_vfprintf_r+0x12c>
 8023448:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802344a:	443b      	add	r3, r7
 802344c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802344e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023450:	3301      	adds	r3, #1
 8023452:	2b07      	cmp	r3, #7
 8023454:	e9c4 8700 	strd	r8, r7, [r4]
 8023458:	9327      	str	r3, [sp, #156]	@ 0x9c
 802345a:	dc75      	bgt.n	8023548 <_vfprintf_r+0x210>
 802345c:	3408      	adds	r4, #8
 802345e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023460:	443b      	add	r3, r7
 8023462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023464:	782b      	ldrb	r3, [r5, #0]
 8023466:	2b00      	cmp	r3, #0
 8023468:	f001 814f 	beq.w	802470a <_vfprintf_r+0x13d2>
 802346c:	2200      	movs	r2, #0
 802346e:	1c6b      	adds	r3, r5, #1
 8023470:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8023474:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8023478:	920e      	str	r2, [sp, #56]	@ 0x38
 802347a:	4615      	mov	r5, r2
 802347c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023480:	9206      	str	r2, [sp, #24]
 8023482:	930c      	str	r3, [sp, #48]	@ 0x30
 8023484:	9b06      	ldr	r3, [sp, #24]
 8023486:	3b20      	subs	r3, #32
 8023488:	2b5a      	cmp	r3, #90	@ 0x5a
 802348a:	f200 85aa 	bhi.w	8023fe2 <_vfprintf_r+0xcaa>
 802348e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8023492:	009d      	.short	0x009d
 8023494:	05a805a8 	.word	0x05a805a8
 8023498:	05a800a5 	.word	0x05a800a5
 802349c:	05a805a8 	.word	0x05a805a8
 80234a0:	05a80085 	.word	0x05a80085
 80234a4:	00a805a8 	.word	0x00a805a8
 80234a8:	05a800b2 	.word	0x05a800b2
 80234ac:	00b400af 	.word	0x00b400af
 80234b0:	00ce05a8 	.word	0x00ce05a8
 80234b4:	00d100d1 	.word	0x00d100d1
 80234b8:	00d100d1 	.word	0x00d100d1
 80234bc:	00d100d1 	.word	0x00d100d1
 80234c0:	00d100d1 	.word	0x00d100d1
 80234c4:	05a800d1 	.word	0x05a800d1
 80234c8:	05a805a8 	.word	0x05a805a8
 80234cc:	05a805a8 	.word	0x05a805a8
 80234d0:	05a805a8 	.word	0x05a805a8
 80234d4:	05a80146 	.word	0x05a80146
 80234d8:	011a0107 	.word	0x011a0107
 80234dc:	01460146 	.word	0x01460146
 80234e0:	05a80146 	.word	0x05a80146
 80234e4:	05a805a8 	.word	0x05a805a8
 80234e8:	00e205a8 	.word	0x00e205a8
 80234ec:	05a805a8 	.word	0x05a805a8
 80234f0:	05a804a3 	.word	0x05a804a3
 80234f4:	05a805a8 	.word	0x05a805a8
 80234f8:	05a804ed 	.word	0x05a804ed
 80234fc:	05a8050e 	.word	0x05a8050e
 8023500:	053005a8 	.word	0x053005a8
 8023504:	05a805a8 	.word	0x05a805a8
 8023508:	05a805a8 	.word	0x05a805a8
 802350c:	05a805a8 	.word	0x05a805a8
 8023510:	05a805a8 	.word	0x05a805a8
 8023514:	05a80146 	.word	0x05a80146
 8023518:	011c0107 	.word	0x011c0107
 802351c:	01460146 	.word	0x01460146
 8023520:	00ed0146 	.word	0x00ed0146
 8023524:	0101011c 	.word	0x0101011c
 8023528:	00fa05a8 	.word	0x00fa05a8
 802352c:	048705a8 	.word	0x048705a8
 8023530:	04dc04a5 	.word	0x04dc04a5
 8023534:	05a80101 	.word	0x05a80101
 8023538:	009b04ed 	.word	0x009b04ed
 802353c:	05a80510 	.word	0x05a80510
 8023540:	006505a8 	.word	0x006505a8
 8023544:	009b05a8 	.word	0x009b05a8
 8023548:	9803      	ldr	r0, [sp, #12]
 802354a:	aa26      	add	r2, sp, #152	@ 0x98
 802354c:	4659      	mov	r1, fp
 802354e:	f001 f95f 	bl	8024810 <__sprint_r>
 8023552:	2800      	cmp	r0, #0
 8023554:	f040 814d 	bne.w	80237f2 <_vfprintf_r+0x4ba>
 8023558:	ac29      	add	r4, sp, #164	@ 0xa4
 802355a:	e780      	b.n	802345e <_vfprintf_r+0x126>
 802355c:	4b42      	ldr	r3, [pc, #264]	@ (8023668 <_vfprintf_r+0x330>)
 802355e:	9319      	str	r3, [sp, #100]	@ 0x64
 8023560:	f015 0320 	ands.w	r3, r5, #32
 8023564:	f000 84c8 	beq.w	8023ef8 <_vfprintf_r+0xbc0>
 8023568:	3607      	adds	r6, #7
 802356a:	f026 0307 	bic.w	r3, r6, #7
 802356e:	461a      	mov	r2, r3
 8023570:	685f      	ldr	r7, [r3, #4]
 8023572:	f852 6b08 	ldr.w	r6, [r2], #8
 8023576:	9207      	str	r2, [sp, #28]
 8023578:	07eb      	lsls	r3, r5, #31
 802357a:	d50a      	bpl.n	8023592 <_vfprintf_r+0x25a>
 802357c:	ea56 0307 	orrs.w	r3, r6, r7
 8023580:	d007      	beq.n	8023592 <_vfprintf_r+0x25a>
 8023582:	2330      	movs	r3, #48	@ 0x30
 8023584:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8023588:	9b06      	ldr	r3, [sp, #24]
 802358a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802358e:	f045 0502 	orr.w	r5, r5, #2
 8023592:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023596:	2302      	movs	r3, #2
 8023598:	f000 bc2e 	b.w	8023df8 <_vfprintf_r+0xac0>
 802359c:	9803      	ldr	r0, [sp, #12]
 802359e:	f003 fd65 	bl	802706c <_localeconv_r>
 80235a2:	6843      	ldr	r3, [r0, #4]
 80235a4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80235a6:	4618      	mov	r0, r3
 80235a8:	f7dc fe7a 	bl	80002a0 <strlen>
 80235ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80235ae:	9803      	ldr	r0, [sp, #12]
 80235b0:	f003 fd5c 	bl	802706c <_localeconv_r>
 80235b4:	6883      	ldr	r3, [r0, #8]
 80235b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80235b8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80235ba:	b12b      	cbz	r3, 80235c8 <_vfprintf_r+0x290>
 80235bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235be:	b11b      	cbz	r3, 80235c8 <_vfprintf_r+0x290>
 80235c0:	781b      	ldrb	r3, [r3, #0]
 80235c2:	b10b      	cbz	r3, 80235c8 <_vfprintf_r+0x290>
 80235c4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80235c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80235ca:	e757      	b.n	802347c <_vfprintf_r+0x144>
 80235cc:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80235d0:	2b00      	cmp	r3, #0
 80235d2:	d1f9      	bne.n	80235c8 <_vfprintf_r+0x290>
 80235d4:	2320      	movs	r3, #32
 80235d6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80235da:	e7f5      	b.n	80235c8 <_vfprintf_r+0x290>
 80235dc:	f045 0501 	orr.w	r5, r5, #1
 80235e0:	e7f2      	b.n	80235c8 <_vfprintf_r+0x290>
 80235e2:	f856 3b04 	ldr.w	r3, [r6], #4
 80235e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80235e8:	2b00      	cmp	r3, #0
 80235ea:	daed      	bge.n	80235c8 <_vfprintf_r+0x290>
 80235ec:	425b      	negs	r3, r3
 80235ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80235f0:	f045 0504 	orr.w	r5, r5, #4
 80235f4:	e7e8      	b.n	80235c8 <_vfprintf_r+0x290>
 80235f6:	232b      	movs	r3, #43	@ 0x2b
 80235f8:	e7ed      	b.n	80235d6 <_vfprintf_r+0x29e>
 80235fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80235fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023600:	9206      	str	r2, [sp, #24]
 8023602:	2a2a      	cmp	r2, #42	@ 0x2a
 8023604:	d10f      	bne.n	8023626 <_vfprintf_r+0x2ee>
 8023606:	f856 2b04 	ldr.w	r2, [r6], #4
 802360a:	930c      	str	r3, [sp, #48]	@ 0x30
 802360c:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8023610:	e7da      	b.n	80235c8 <_vfprintf_r+0x290>
 8023612:	fb01 2909 	mla	r9, r1, r9, r2
 8023616:	f813 2b01 	ldrb.w	r2, [r3], #1
 802361a:	9206      	str	r2, [sp, #24]
 802361c:	9a06      	ldr	r2, [sp, #24]
 802361e:	3a30      	subs	r2, #48	@ 0x30
 8023620:	2a09      	cmp	r2, #9
 8023622:	d9f6      	bls.n	8023612 <_vfprintf_r+0x2da>
 8023624:	e72d      	b.n	8023482 <_vfprintf_r+0x14a>
 8023626:	f04f 0900 	mov.w	r9, #0
 802362a:	210a      	movs	r1, #10
 802362c:	e7f6      	b.n	802361c <_vfprintf_r+0x2e4>
 802362e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8023632:	e7c9      	b.n	80235c8 <_vfprintf_r+0x290>
 8023634:	2200      	movs	r2, #0
 8023636:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023638:	920e      	str	r2, [sp, #56]	@ 0x38
 802363a:	210a      	movs	r1, #10
 802363c:	9a06      	ldr	r2, [sp, #24]
 802363e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8023640:	3a30      	subs	r2, #48	@ 0x30
 8023642:	fb01 2200 	mla	r2, r1, r0, r2
 8023646:	920e      	str	r2, [sp, #56]	@ 0x38
 8023648:	f813 2b01 	ldrb.w	r2, [r3], #1
 802364c:	9206      	str	r2, [sp, #24]
 802364e:	3a30      	subs	r2, #48	@ 0x30
 8023650:	2a09      	cmp	r2, #9
 8023652:	d9f3      	bls.n	802363c <_vfprintf_r+0x304>
 8023654:	e715      	b.n	8023482 <_vfprintf_r+0x14a>
 8023656:	f045 0508 	orr.w	r5, r5, #8
 802365a:	e7b5      	b.n	80235c8 <_vfprintf_r+0x290>
 802365c:	f3af 8000 	nop.w
	...
 8023668:	080346f4 	.word	0x080346f4
 802366c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802366e:	781b      	ldrb	r3, [r3, #0]
 8023670:	2b68      	cmp	r3, #104	@ 0x68
 8023672:	bf01      	itttt	eq
 8023674:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8023676:	3301      	addeq	r3, #1
 8023678:	930c      	streq	r3, [sp, #48]	@ 0x30
 802367a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802367e:	bf18      	it	ne
 8023680:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8023684:	e7a0      	b.n	80235c8 <_vfprintf_r+0x290>
 8023686:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023688:	781b      	ldrb	r3, [r3, #0]
 802368a:	2b6c      	cmp	r3, #108	@ 0x6c
 802368c:	d105      	bne.n	802369a <_vfprintf_r+0x362>
 802368e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023690:	3301      	adds	r3, #1
 8023692:	930c      	str	r3, [sp, #48]	@ 0x30
 8023694:	f045 0520 	orr.w	r5, r5, #32
 8023698:	e796      	b.n	80235c8 <_vfprintf_r+0x290>
 802369a:	f045 0510 	orr.w	r5, r5, #16
 802369e:	e793      	b.n	80235c8 <_vfprintf_r+0x290>
 80236a0:	4632      	mov	r2, r6
 80236a2:	f852 3b04 	ldr.w	r3, [r2], #4
 80236a6:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80236aa:	2300      	movs	r3, #0
 80236ac:	9207      	str	r2, [sp, #28]
 80236ae:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80236b2:	469a      	mov	sl, r3
 80236b4:	f04f 0901 	mov.w	r9, #1
 80236b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80236ba:	461f      	mov	r7, r3
 80236bc:	9308      	str	r3, [sp, #32]
 80236be:	461e      	mov	r6, r3
 80236c0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80236c4:	e1da      	b.n	8023a7c <_vfprintf_r+0x744>
 80236c6:	f045 0510 	orr.w	r5, r5, #16
 80236ca:	06af      	lsls	r7, r5, #26
 80236cc:	d512      	bpl.n	80236f4 <_vfprintf_r+0x3bc>
 80236ce:	3607      	adds	r6, #7
 80236d0:	f026 0307 	bic.w	r3, r6, #7
 80236d4:	461a      	mov	r2, r3
 80236d6:	685f      	ldr	r7, [r3, #4]
 80236d8:	f852 6b08 	ldr.w	r6, [r2], #8
 80236dc:	9207      	str	r2, [sp, #28]
 80236de:	2f00      	cmp	r7, #0
 80236e0:	da06      	bge.n	80236f0 <_vfprintf_r+0x3b8>
 80236e2:	4276      	negs	r6, r6
 80236e4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80236e8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80236ec:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80236f0:	2301      	movs	r3, #1
 80236f2:	e384      	b.n	8023dfe <_vfprintf_r+0xac6>
 80236f4:	4633      	mov	r3, r6
 80236f6:	06ee      	lsls	r6, r5, #27
 80236f8:	f853 7b04 	ldr.w	r7, [r3], #4
 80236fc:	9307      	str	r3, [sp, #28]
 80236fe:	d502      	bpl.n	8023706 <_vfprintf_r+0x3ce>
 8023700:	463e      	mov	r6, r7
 8023702:	17ff      	asrs	r7, r7, #31
 8023704:	e7eb      	b.n	80236de <_vfprintf_r+0x3a6>
 8023706:	0668      	lsls	r0, r5, #25
 8023708:	d503      	bpl.n	8023712 <_vfprintf_r+0x3da>
 802370a:	b23e      	sxth	r6, r7
 802370c:	f347 37c0 	sbfx	r7, r7, #15, #1
 8023710:	e7e5      	b.n	80236de <_vfprintf_r+0x3a6>
 8023712:	05a9      	lsls	r1, r5, #22
 8023714:	d5f4      	bpl.n	8023700 <_vfprintf_r+0x3c8>
 8023716:	b27e      	sxtb	r6, r7
 8023718:	f347 17c0 	sbfx	r7, r7, #7, #1
 802371c:	e7df      	b.n	80236de <_vfprintf_r+0x3a6>
 802371e:	3607      	adds	r6, #7
 8023720:	f026 0307 	bic.w	r3, r6, #7
 8023724:	ecb3 7b02 	vldmia	r3!, {d7}
 8023728:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802372c:	9307      	str	r3, [sp, #28]
 802372e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023730:	931a      	str	r3, [sp, #104]	@ 0x68
 8023732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023738:	931b      	str	r3, [sp, #108]	@ 0x6c
 802373a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802373e:	4b85      	ldr	r3, [pc, #532]	@ (8023954 <_vfprintf_r+0x61c>)
 8023740:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023744:	f7dd fa0a 	bl	8000b5c <__aeabi_dcmpun>
 8023748:	bb10      	cbnz	r0, 8023790 <_vfprintf_r+0x458>
 802374a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802374e:	4b81      	ldr	r3, [pc, #516]	@ (8023954 <_vfprintf_r+0x61c>)
 8023750:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023754:	f7dd f9e4 	bl	8000b20 <__aeabi_dcmple>
 8023758:	b9d0      	cbnz	r0, 8023790 <_vfprintf_r+0x458>
 802375a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802375e:	2200      	movs	r2, #0
 8023760:	2300      	movs	r3, #0
 8023762:	f7dd f9d3 	bl	8000b0c <__aeabi_dcmplt>
 8023766:	b110      	cbz	r0, 802376e <_vfprintf_r+0x436>
 8023768:	232d      	movs	r3, #45	@ 0x2d
 802376a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802376e:	4a7a      	ldr	r2, [pc, #488]	@ (8023958 <_vfprintf_r+0x620>)
 8023770:	4b7a      	ldr	r3, [pc, #488]	@ (802395c <_vfprintf_r+0x624>)
 8023772:	9906      	ldr	r1, [sp, #24]
 8023774:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8023778:	2947      	cmp	r1, #71	@ 0x47
 802377a:	bfd4      	ite	le
 802377c:	4690      	movle	r8, r2
 802377e:	4698      	movgt	r8, r3
 8023780:	f04f 0a00 	mov.w	sl, #0
 8023784:	f04f 0903 	mov.w	r9, #3
 8023788:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802378c:	f000 bff8 	b.w	8024780 <_vfprintf_r+0x1448>
 8023790:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8023794:	4610      	mov	r0, r2
 8023796:	4619      	mov	r1, r3
 8023798:	f7dd f9e0 	bl	8000b5c <__aeabi_dcmpun>
 802379c:	4682      	mov	sl, r0
 802379e:	b140      	cbz	r0, 80237b2 <_vfprintf_r+0x47a>
 80237a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80237a2:	4a6f      	ldr	r2, [pc, #444]	@ (8023960 <_vfprintf_r+0x628>)
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	bfbc      	itt	lt
 80237a8:	232d      	movlt	r3, #45	@ 0x2d
 80237aa:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 80237ae:	4b6d      	ldr	r3, [pc, #436]	@ (8023964 <_vfprintf_r+0x62c>)
 80237b0:	e7df      	b.n	8023772 <_vfprintf_r+0x43a>
 80237b2:	9b06      	ldr	r3, [sp, #24]
 80237b4:	2b61      	cmp	r3, #97	@ 0x61
 80237b6:	d02e      	beq.n	8023816 <_vfprintf_r+0x4de>
 80237b8:	2b41      	cmp	r3, #65	@ 0x41
 80237ba:	d12e      	bne.n	802381a <_vfprintf_r+0x4e2>
 80237bc:	2358      	movs	r3, #88	@ 0x58
 80237be:	2230      	movs	r2, #48	@ 0x30
 80237c0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80237c4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 80237c8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 80237cc:	f045 0502 	orr.w	r5, r5, #2
 80237d0:	f340 80ae 	ble.w	8023930 <_vfprintf_r+0x5f8>
 80237d4:	9803      	ldr	r0, [sp, #12]
 80237d6:	f109 0101 	add.w	r1, r9, #1
 80237da:	f004 fd0f 	bl	80281fc <_malloc_r>
 80237de:	4680      	mov	r8, r0
 80237e0:	2800      	cmp	r0, #0
 80237e2:	f040 80aa 	bne.w	802393a <_vfprintf_r+0x602>
 80237e6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80237ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80237ee:	f8ab 300c 	strh.w	r3, [fp, #12]
 80237f2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80237f6:	07d9      	lsls	r1, r3, #31
 80237f8:	d407      	bmi.n	802380a <_vfprintf_r+0x4d2>
 80237fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80237fe:	059a      	lsls	r2, r3, #22
 8023800:	d403      	bmi.n	802380a <_vfprintf_r+0x4d2>
 8023802:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8023806:	f003 fcde 	bl	80271c6 <__retarget_lock_release_recursive>
 802380a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802380e:	065b      	lsls	r3, r3, #25
 8023810:	f57f add6 	bpl.w	80233c0 <_vfprintf_r+0x88>
 8023814:	e5d1      	b.n	80233ba <_vfprintf_r+0x82>
 8023816:	2378      	movs	r3, #120	@ 0x78
 8023818:	e7d1      	b.n	80237be <_vfprintf_r+0x486>
 802381a:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 802381e:	f000 808e 	beq.w	802393e <_vfprintf_r+0x606>
 8023822:	9b06      	ldr	r3, [sp, #24]
 8023824:	f023 0320 	bic.w	r3, r3, #32
 8023828:	2b47      	cmp	r3, #71	@ 0x47
 802382a:	d105      	bne.n	8023838 <_vfprintf_r+0x500>
 802382c:	f1b9 0f00 	cmp.w	r9, #0
 8023830:	d102      	bne.n	8023838 <_vfprintf_r+0x500>
 8023832:	46ca      	mov	sl, r9
 8023834:	f04f 0901 	mov.w	r9, #1
 8023838:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802383c:	9311      	str	r3, [sp, #68]	@ 0x44
 802383e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023840:	2b00      	cmp	r3, #0
 8023842:	da7f      	bge.n	8023944 <_vfprintf_r+0x60c>
 8023844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023846:	9314      	str	r3, [sp, #80]	@ 0x50
 8023848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802384a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802384e:	9315      	str	r3, [sp, #84]	@ 0x54
 8023850:	232d      	movs	r3, #45	@ 0x2d
 8023852:	931c      	str	r3, [sp, #112]	@ 0x70
 8023854:	9b06      	ldr	r3, [sp, #24]
 8023856:	f023 0320 	bic.w	r3, r3, #32
 802385a:	2b41      	cmp	r3, #65	@ 0x41
 802385c:	9308      	str	r3, [sp, #32]
 802385e:	f040 81e7 	bne.w	8023c30 <_vfprintf_r+0x8f8>
 8023862:	a820      	add	r0, sp, #128	@ 0x80
 8023864:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8023868:	f003 fcd2 	bl	8027210 <frexp>
 802386c:	2200      	movs	r2, #0
 802386e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8023872:	ec51 0b10 	vmov	r0, r1, d0
 8023876:	f7dc fed7 	bl	8000628 <__aeabi_dmul>
 802387a:	4602      	mov	r2, r0
 802387c:	460b      	mov	r3, r1
 802387e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8023882:	2200      	movs	r2, #0
 8023884:	2300      	movs	r3, #0
 8023886:	f7dd f937 	bl	8000af8 <__aeabi_dcmpeq>
 802388a:	b108      	cbz	r0, 8023890 <_vfprintf_r+0x558>
 802388c:	2301      	movs	r3, #1
 802388e:	9320      	str	r3, [sp, #128]	@ 0x80
 8023890:	4a35      	ldr	r2, [pc, #212]	@ (8023968 <_vfprintf_r+0x630>)
 8023892:	4b36      	ldr	r3, [pc, #216]	@ (802396c <_vfprintf_r+0x634>)
 8023894:	9906      	ldr	r1, [sp, #24]
 8023896:	2961      	cmp	r1, #97	@ 0x61
 8023898:	bf18      	it	ne
 802389a:	461a      	movne	r2, r3
 802389c:	9210      	str	r2, [sp, #64]	@ 0x40
 802389e:	f109 37ff 	add.w	r7, r9, #4294967295	@ 0xffffffff
 80238a2:	4646      	mov	r6, r8
 80238a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80238a8:	4b31      	ldr	r3, [pc, #196]	@ (8023970 <_vfprintf_r+0x638>)
 80238aa:	2200      	movs	r2, #0
 80238ac:	f7dc febc 	bl	8000628 <__aeabi_dmul>
 80238b0:	4602      	mov	r2, r0
 80238b2:	460b      	mov	r3, r1
 80238b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80238b8:	f7dd f966 	bl	8000b88 <__aeabi_d2iz>
 80238bc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80238be:	f7dc fe49 	bl	8000554 <__aeabi_i2d>
 80238c2:	4602      	mov	r2, r0
 80238c4:	460b      	mov	r3, r1
 80238c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80238ca:	f7dc fcf5 	bl	80002b8 <__aeabi_dsub>
 80238ce:	4602      	mov	r2, r0
 80238d0:	460b      	mov	r3, r1
 80238d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80238d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80238d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80238da:	5c9b      	ldrb	r3, [r3, r2]
 80238dc:	f806 3b01 	strb.w	r3, [r6], #1
 80238e0:	1c7a      	adds	r2, r7, #1
 80238e2:	d006      	beq.n	80238f2 <_vfprintf_r+0x5ba>
 80238e4:	1e7b      	subs	r3, r7, #1
 80238e6:	931d      	str	r3, [sp, #116]	@ 0x74
 80238e8:	2200      	movs	r2, #0
 80238ea:	2300      	movs	r3, #0
 80238ec:	f7dd f904 	bl	8000af8 <__aeabi_dcmpeq>
 80238f0:	b370      	cbz	r0, 8023950 <_vfprintf_r+0x618>
 80238f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80238f6:	4b1f      	ldr	r3, [pc, #124]	@ (8023974 <_vfprintf_r+0x63c>)
 80238f8:	2200      	movs	r2, #0
 80238fa:	f7dd f925 	bl	8000b48 <__aeabi_dcmpgt>
 80238fe:	2800      	cmp	r0, #0
 8023900:	d13a      	bne.n	8023978 <_vfprintf_r+0x640>
 8023902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023906:	4b1b      	ldr	r3, [pc, #108]	@ (8023974 <_vfprintf_r+0x63c>)
 8023908:	2200      	movs	r2, #0
 802390a:	f7dd f8f5 	bl	8000af8 <__aeabi_dcmpeq>
 802390e:	b110      	cbz	r0, 8023916 <_vfprintf_r+0x5de>
 8023910:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023912:	07db      	lsls	r3, r3, #31
 8023914:	d430      	bmi.n	8023978 <_vfprintf_r+0x640>
 8023916:	4633      	mov	r3, r6
 8023918:	19f1      	adds	r1, r6, r7
 802391a:	2030      	movs	r0, #48	@ 0x30
 802391c:	1aca      	subs	r2, r1, r3
 802391e:	2a00      	cmp	r2, #0
 8023920:	f280 8183 	bge.w	8023c2a <_vfprintf_r+0x8f2>
 8023924:	1c7b      	adds	r3, r7, #1
 8023926:	3701      	adds	r7, #1
 8023928:	bfb8      	it	lt
 802392a:	2300      	movlt	r3, #0
 802392c:	441e      	add	r6, r3
 802392e:	e037      	b.n	80239a0 <_vfprintf_r+0x668>
 8023930:	f04f 0a00 	mov.w	sl, #0
 8023934:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8023938:	e77e      	b.n	8023838 <_vfprintf_r+0x500>
 802393a:	4682      	mov	sl, r0
 802393c:	e77c      	b.n	8023838 <_vfprintf_r+0x500>
 802393e:	f04f 0906 	mov.w	r9, #6
 8023942:	e779      	b.n	8023838 <_vfprintf_r+0x500>
 8023944:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8023948:	2300      	movs	r3, #0
 802394a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802394e:	e780      	b.n	8023852 <_vfprintf_r+0x51a>
 8023950:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8023952:	e7a7      	b.n	80238a4 <_vfprintf_r+0x56c>
 8023954:	7fefffff 	.word	0x7fefffff
 8023958:	080346e4 	.word	0x080346e4
 802395c:	080346e8 	.word	0x080346e8
 8023960:	080346ec 	.word	0x080346ec
 8023964:	080346f0 	.word	0x080346f0
 8023968:	080346f4 	.word	0x080346f4
 802396c:	08034705 	.word	0x08034705
 8023970:	40300000 	.word	0x40300000
 8023974:	3fe00000 	.word	0x3fe00000
 8023978:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802397a:	9624      	str	r6, [sp, #144]	@ 0x90
 802397c:	7bd9      	ldrb	r1, [r3, #15]
 802397e:	2030      	movs	r0, #48	@ 0x30
 8023980:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023982:	1e53      	subs	r3, r2, #1
 8023984:	9324      	str	r3, [sp, #144]	@ 0x90
 8023986:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802398a:	428b      	cmp	r3, r1
 802398c:	f000 814a 	beq.w	8023c24 <_vfprintf_r+0x8ec>
 8023990:	2b39      	cmp	r3, #57	@ 0x39
 8023992:	bf0b      	itete	eq
 8023994:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8023996:	3301      	addne	r3, #1
 8023998:	7a9b      	ldrbeq	r3, [r3, #10]
 802399a:	b2db      	uxtbne	r3, r3
 802399c:	f802 3c01 	strb.w	r3, [r2, #-1]
 80239a0:	eba6 0308 	sub.w	r3, r6, r8
 80239a4:	9304      	str	r3, [sp, #16]
 80239a6:	9b08      	ldr	r3, [sp, #32]
 80239a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80239aa:	2b47      	cmp	r3, #71	@ 0x47
 80239ac:	f040 8189 	bne.w	8023cc2 <_vfprintf_r+0x98a>
 80239b0:	1cf1      	adds	r1, r6, #3
 80239b2:	db02      	blt.n	80239ba <_vfprintf_r+0x682>
 80239b4:	45b1      	cmp	r9, r6
 80239b6:	f280 81a7 	bge.w	8023d08 <_vfprintf_r+0x9d0>
 80239ba:	9b06      	ldr	r3, [sp, #24]
 80239bc:	3b02      	subs	r3, #2
 80239be:	9306      	str	r3, [sp, #24]
 80239c0:	9906      	ldr	r1, [sp, #24]
 80239c2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80239c6:	f021 0120 	bic.w	r1, r1, #32
 80239ca:	2941      	cmp	r1, #65	@ 0x41
 80239cc:	bf08      	it	eq
 80239ce:	320f      	addeq	r2, #15
 80239d0:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 80239d4:	bf06      	itte	eq
 80239d6:	b2d2      	uxtbeq	r2, r2
 80239d8:	2101      	moveq	r1, #1
 80239da:	2100      	movne	r1, #0
 80239dc:	2b00      	cmp	r3, #0
 80239de:	9320      	str	r3, [sp, #128]	@ 0x80
 80239e0:	bfb8      	it	lt
 80239e2:	f1c6 0301 	rsblt	r3, r6, #1
 80239e6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 80239ea:	bfb4      	ite	lt
 80239ec:	222d      	movlt	r2, #45	@ 0x2d
 80239ee:	222b      	movge	r2, #43	@ 0x2b
 80239f0:	2b09      	cmp	r3, #9
 80239f2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 80239f6:	f340 817a 	ble.w	8023cee <_vfprintf_r+0x9b6>
 80239fa:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 80239fe:	270a      	movs	r7, #10
 8023a00:	4602      	mov	r2, r0
 8023a02:	fbb3 f6f7 	udiv	r6, r3, r7
 8023a06:	fb07 3116 	mls	r1, r7, r6, r3
 8023a0a:	3130      	adds	r1, #48	@ 0x30
 8023a0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8023a10:	4619      	mov	r1, r3
 8023a12:	2963      	cmp	r1, #99	@ 0x63
 8023a14:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8023a18:	4633      	mov	r3, r6
 8023a1a:	dcf1      	bgt.n	8023a00 <_vfprintf_r+0x6c8>
 8023a1c:	3330      	adds	r3, #48	@ 0x30
 8023a1e:	1e91      	subs	r1, r2, #2
 8023a20:	f800 3c01 	strb.w	r3, [r0, #-1]
 8023a24:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8023a28:	460b      	mov	r3, r1
 8023a2a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8023a2e:	4283      	cmp	r3, r0
 8023a30:	f0c0 8158 	bcc.w	8023ce4 <_vfprintf_r+0x9ac>
 8023a34:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8023a38:	1a9b      	subs	r3, r3, r2
 8023a3a:	4281      	cmp	r1, r0
 8023a3c:	bf88      	it	hi
 8023a3e:	2300      	movhi	r3, #0
 8023a40:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8023a44:	441a      	add	r2, r3
 8023a46:	ab22      	add	r3, sp, #136	@ 0x88
 8023a48:	1ad3      	subs	r3, r2, r3
 8023a4a:	9a04      	ldr	r2, [sp, #16]
 8023a4c:	9318      	str	r3, [sp, #96]	@ 0x60
 8023a4e:	2a01      	cmp	r2, #1
 8023a50:	eb03 0902 	add.w	r9, r3, r2
 8023a54:	dc01      	bgt.n	8023a5a <_vfprintf_r+0x722>
 8023a56:	07ea      	lsls	r2, r5, #31
 8023a58:	d501      	bpl.n	8023a5e <_vfprintf_r+0x726>
 8023a5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023a5c:	4499      	add	r9, r3
 8023a5e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023a62:	2700      	movs	r7, #0
 8023a64:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8023a68:	9311      	str	r3, [sp, #68]	@ 0x44
 8023a6a:	9708      	str	r7, [sp, #32]
 8023a6c:	463e      	mov	r6, r7
 8023a6e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023a70:	2b00      	cmp	r3, #0
 8023a72:	f040 8191 	bne.w	8023d98 <_vfprintf_r+0xa60>
 8023a76:	2300      	movs	r3, #0
 8023a78:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8023a7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8023a7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023a7e:	454b      	cmp	r3, r9
 8023a80:	bfb8      	it	lt
 8023a82:	464b      	movlt	r3, r9
 8023a84:	9311      	str	r3, [sp, #68]	@ 0x44
 8023a86:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8023a8a:	b113      	cbz	r3, 8023a92 <_vfprintf_r+0x75a>
 8023a8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023a8e:	3301      	adds	r3, #1
 8023a90:	9311      	str	r3, [sp, #68]	@ 0x44
 8023a92:	f015 0302 	ands.w	r3, r5, #2
 8023a96:	931c      	str	r3, [sp, #112]	@ 0x70
 8023a98:	bf1e      	ittt	ne
 8023a9a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8023a9c:	3302      	addne	r3, #2
 8023a9e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8023aa0:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8023aa4:	931d      	str	r3, [sp, #116]	@ 0x74
 8023aa6:	d122      	bne.n	8023aee <_vfprintf_r+0x7b6>
 8023aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023aaa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023aac:	1a9b      	subs	r3, r3, r2
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023ab2:	dd1c      	ble.n	8023aee <_vfprintf_r+0x7b6>
 8023ab4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023ab6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8023aba:	2810      	cmp	r0, #16
 8023abc:	489f      	ldr	r0, [pc, #636]	@ (8023d3c <_vfprintf_r+0xa04>)
 8023abe:	6020      	str	r0, [r4, #0]
 8023ac0:	f102 0201 	add.w	r2, r2, #1
 8023ac4:	f104 0108 	add.w	r1, r4, #8
 8023ac8:	f300 8297 	bgt.w	8023ffa <_vfprintf_r+0xcc2>
 8023acc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023ace:	6060      	str	r0, [r4, #4]
 8023ad0:	4403      	add	r3, r0
 8023ad2:	2a07      	cmp	r2, #7
 8023ad4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023ad8:	f340 82a4 	ble.w	8024024 <_vfprintf_r+0xcec>
 8023adc:	9803      	ldr	r0, [sp, #12]
 8023ade:	aa26      	add	r2, sp, #152	@ 0x98
 8023ae0:	4659      	mov	r1, fp
 8023ae2:	f000 fe95 	bl	8024810 <__sprint_r>
 8023ae6:	2800      	cmp	r0, #0
 8023ae8:	f040 85ed 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8023aec:	ac29      	add	r4, sp, #164	@ 0xa4
 8023aee:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8023af2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023af4:	b16a      	cbz	r2, 8023b12 <_vfprintf_r+0x7da>
 8023af6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8023afa:	6022      	str	r2, [r4, #0]
 8023afc:	2201      	movs	r2, #1
 8023afe:	4413      	add	r3, r2
 8023b00:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023b02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023b04:	6062      	str	r2, [r4, #4]
 8023b06:	4413      	add	r3, r2
 8023b08:	2b07      	cmp	r3, #7
 8023b0a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023b0c:	f300 828c 	bgt.w	8024028 <_vfprintf_r+0xcf0>
 8023b10:	3408      	adds	r4, #8
 8023b12:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8023b14:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023b16:	b162      	cbz	r2, 8023b32 <_vfprintf_r+0x7fa>
 8023b18:	aa1f      	add	r2, sp, #124	@ 0x7c
 8023b1a:	6022      	str	r2, [r4, #0]
 8023b1c:	2202      	movs	r2, #2
 8023b1e:	4413      	add	r3, r2
 8023b20:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023b22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023b24:	6062      	str	r2, [r4, #4]
 8023b26:	3301      	adds	r3, #1
 8023b28:	2b07      	cmp	r3, #7
 8023b2a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023b2c:	f300 8286 	bgt.w	802403c <_vfprintf_r+0xd04>
 8023b30:	3408      	adds	r4, #8
 8023b32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023b34:	2b80      	cmp	r3, #128	@ 0x80
 8023b36:	d122      	bne.n	8023b7e <_vfprintf_r+0x846>
 8023b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023b3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023b3c:	1a9b      	subs	r3, r3, r2
 8023b3e:	2b00      	cmp	r3, #0
 8023b40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023b42:	dd1c      	ble.n	8023b7e <_vfprintf_r+0x846>
 8023b44:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023b46:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8023b4a:	2810      	cmp	r0, #16
 8023b4c:	487c      	ldr	r0, [pc, #496]	@ (8023d40 <_vfprintf_r+0xa08>)
 8023b4e:	6020      	str	r0, [r4, #0]
 8023b50:	f102 0201 	add.w	r2, r2, #1
 8023b54:	f104 0108 	add.w	r1, r4, #8
 8023b58:	f300 827a 	bgt.w	8024050 <_vfprintf_r+0xd18>
 8023b5c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8023b5e:	6060      	str	r0, [r4, #4]
 8023b60:	4403      	add	r3, r0
 8023b62:	2a07      	cmp	r2, #7
 8023b64:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023b68:	f340 8287 	ble.w	802407a <_vfprintf_r+0xd42>
 8023b6c:	9803      	ldr	r0, [sp, #12]
 8023b6e:	aa26      	add	r2, sp, #152	@ 0x98
 8023b70:	4659      	mov	r1, fp
 8023b72:	f000 fe4d 	bl	8024810 <__sprint_r>
 8023b76:	2800      	cmp	r0, #0
 8023b78:	f040 85a5 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8023b7c:	ac29      	add	r4, sp, #164	@ 0xa4
 8023b7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023b80:	eba3 0309 	sub.w	r3, r3, r9
 8023b84:	2b00      	cmp	r3, #0
 8023b86:	9310      	str	r3, [sp, #64]	@ 0x40
 8023b88:	dd1c      	ble.n	8023bc4 <_vfprintf_r+0x88c>
 8023b8a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023b8c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8023b90:	2810      	cmp	r0, #16
 8023b92:	486b      	ldr	r0, [pc, #428]	@ (8023d40 <_vfprintf_r+0xa08>)
 8023b94:	6020      	str	r0, [r4, #0]
 8023b96:	f102 0201 	add.w	r2, r2, #1
 8023b9a:	f104 0108 	add.w	r1, r4, #8
 8023b9e:	f300 826e 	bgt.w	802407e <_vfprintf_r+0xd46>
 8023ba2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023ba4:	6060      	str	r0, [r4, #4]
 8023ba6:	4403      	add	r3, r0
 8023ba8:	2a07      	cmp	r2, #7
 8023baa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8023bae:	f340 827b 	ble.w	80240a8 <_vfprintf_r+0xd70>
 8023bb2:	9803      	ldr	r0, [sp, #12]
 8023bb4:	aa26      	add	r2, sp, #152	@ 0x98
 8023bb6:	4659      	mov	r1, fp
 8023bb8:	f000 fe2a 	bl	8024810 <__sprint_r>
 8023bbc:	2800      	cmp	r0, #0
 8023bbe:	f040 8582 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8023bc2:	ac29      	add	r4, sp, #164	@ 0xa4
 8023bc4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023bc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8023bc8:	05e8      	lsls	r0, r5, #23
 8023bca:	f100 8273 	bmi.w	80240b4 <_vfprintf_r+0xd7c>
 8023bce:	444b      	add	r3, r9
 8023bd0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023bd2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8023bd4:	3301      	adds	r3, #1
 8023bd6:	2b07      	cmp	r3, #7
 8023bd8:	e9c4 8900 	strd	r8, r9, [r4]
 8023bdc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023bde:	f300 82af 	bgt.w	8024140 <_vfprintf_r+0xe08>
 8023be2:	3408      	adds	r4, #8
 8023be4:	0768      	lsls	r0, r5, #29
 8023be6:	f100 8550 	bmi.w	802468a <_vfprintf_r+0x1352>
 8023bea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8023bee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8023bf0:	428a      	cmp	r2, r1
 8023bf2:	bfac      	ite	ge
 8023bf4:	189b      	addge	r3, r3, r2
 8023bf6:	185b      	addlt	r3, r3, r1
 8023bf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023bfa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023bfc:	b13b      	cbz	r3, 8023c0e <_vfprintf_r+0x8d6>
 8023bfe:	9803      	ldr	r0, [sp, #12]
 8023c00:	aa26      	add	r2, sp, #152	@ 0x98
 8023c02:	4659      	mov	r1, fp
 8023c04:	f000 fe04 	bl	8024810 <__sprint_r>
 8023c08:	2800      	cmp	r0, #0
 8023c0a:	f040 855c 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8023c0e:	2300      	movs	r3, #0
 8023c10:	9327      	str	r3, [sp, #156]	@ 0x9c
 8023c12:	f1ba 0f00 	cmp.w	sl, #0
 8023c16:	f040 8572 	bne.w	80246fe <_vfprintf_r+0x13c6>
 8023c1a:	9e07      	ldr	r6, [sp, #28]
 8023c1c:	ac29      	add	r4, sp, #164	@ 0xa4
 8023c1e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8023c22:	e407      	b.n	8023434 <_vfprintf_r+0xfc>
 8023c24:	f802 0c01 	strb.w	r0, [r2, #-1]
 8023c28:	e6aa      	b.n	8023980 <_vfprintf_r+0x648>
 8023c2a:	f803 0b01 	strb.w	r0, [r3], #1
 8023c2e:	e675      	b.n	802391c <_vfprintf_r+0x5e4>
 8023c30:	9b08      	ldr	r3, [sp, #32]
 8023c32:	2b46      	cmp	r3, #70	@ 0x46
 8023c34:	d005      	beq.n	8023c42 <_vfprintf_r+0x90a>
 8023c36:	2b45      	cmp	r3, #69	@ 0x45
 8023c38:	d11a      	bne.n	8023c70 <_vfprintf_r+0x938>
 8023c3a:	f109 0601 	add.w	r6, r9, #1
 8023c3e:	2102      	movs	r1, #2
 8023c40:	e001      	b.n	8023c46 <_vfprintf_r+0x90e>
 8023c42:	464e      	mov	r6, r9
 8023c44:	2103      	movs	r1, #3
 8023c46:	ab24      	add	r3, sp, #144	@ 0x90
 8023c48:	9301      	str	r3, [sp, #4]
 8023c4a:	ab21      	add	r3, sp, #132	@ 0x84
 8023c4c:	9300      	str	r3, [sp, #0]
 8023c4e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8023c52:	ab20      	add	r3, sp, #128	@ 0x80
 8023c54:	9803      	ldr	r0, [sp, #12]
 8023c56:	4632      	mov	r2, r6
 8023c58:	f003 fbb6 	bl	80273c8 <_dtoa_r>
 8023c5c:	9b08      	ldr	r3, [sp, #32]
 8023c5e:	2b47      	cmp	r3, #71	@ 0x47
 8023c60:	4680      	mov	r8, r0
 8023c62:	d119      	bne.n	8023c98 <_vfprintf_r+0x960>
 8023c64:	07e8      	lsls	r0, r5, #31
 8023c66:	d405      	bmi.n	8023c74 <_vfprintf_r+0x93c>
 8023c68:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023c6a:	eba3 0308 	sub.w	r3, r3, r8
 8023c6e:	e699      	b.n	80239a4 <_vfprintf_r+0x66c>
 8023c70:	464e      	mov	r6, r9
 8023c72:	e7e4      	b.n	8023c3e <_vfprintf_r+0x906>
 8023c74:	eb08 0706 	add.w	r7, r8, r6
 8023c78:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8023c7c:	2200      	movs	r2, #0
 8023c7e:	2300      	movs	r3, #0
 8023c80:	f7dc ff3a 	bl	8000af8 <__aeabi_dcmpeq>
 8023c84:	b100      	cbz	r0, 8023c88 <_vfprintf_r+0x950>
 8023c86:	9724      	str	r7, [sp, #144]	@ 0x90
 8023c88:	2230      	movs	r2, #48	@ 0x30
 8023c8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023c8c:	429f      	cmp	r7, r3
 8023c8e:	d9eb      	bls.n	8023c68 <_vfprintf_r+0x930>
 8023c90:	1c59      	adds	r1, r3, #1
 8023c92:	9124      	str	r1, [sp, #144]	@ 0x90
 8023c94:	701a      	strb	r2, [r3, #0]
 8023c96:	e7f8      	b.n	8023c8a <_vfprintf_r+0x952>
 8023c98:	9b08      	ldr	r3, [sp, #32]
 8023c9a:	2b46      	cmp	r3, #70	@ 0x46
 8023c9c:	eb00 0706 	add.w	r7, r0, r6
 8023ca0:	d1ea      	bne.n	8023c78 <_vfprintf_r+0x940>
 8023ca2:	7803      	ldrb	r3, [r0, #0]
 8023ca4:	2b30      	cmp	r3, #48	@ 0x30
 8023ca6:	d109      	bne.n	8023cbc <_vfprintf_r+0x984>
 8023ca8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8023cac:	2200      	movs	r2, #0
 8023cae:	2300      	movs	r3, #0
 8023cb0:	f7dc ff22 	bl	8000af8 <__aeabi_dcmpeq>
 8023cb4:	b910      	cbnz	r0, 8023cbc <_vfprintf_r+0x984>
 8023cb6:	f1c6 0601 	rsb	r6, r6, #1
 8023cba:	9620      	str	r6, [sp, #128]	@ 0x80
 8023cbc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023cbe:	441f      	add	r7, r3
 8023cc0:	e7da      	b.n	8023c78 <_vfprintf_r+0x940>
 8023cc2:	9b08      	ldr	r3, [sp, #32]
 8023cc4:	2b46      	cmp	r3, #70	@ 0x46
 8023cc6:	f47f ae7b 	bne.w	80239c0 <_vfprintf_r+0x688>
 8023cca:	f005 0301 	and.w	r3, r5, #1
 8023cce:	2e00      	cmp	r6, #0
 8023cd0:	ea43 0309 	orr.w	r3, r3, r9
 8023cd4:	dd25      	ble.n	8023d22 <_vfprintf_r+0x9ea>
 8023cd6:	b37b      	cbz	r3, 8023d38 <_vfprintf_r+0xa00>
 8023cd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023cda:	18f3      	adds	r3, r6, r3
 8023cdc:	4499      	add	r9, r3
 8023cde:	2366      	movs	r3, #102	@ 0x66
 8023ce0:	9306      	str	r3, [sp, #24]
 8023ce2:	e033      	b.n	8023d4c <_vfprintf_r+0xa14>
 8023ce4:	f813 7b01 	ldrb.w	r7, [r3], #1
 8023ce8:	f806 7f01 	strb.w	r7, [r6, #1]!
 8023cec:	e69f      	b.n	8023a2e <_vfprintf_r+0x6f6>
 8023cee:	b941      	cbnz	r1, 8023d02 <_vfprintf_r+0x9ca>
 8023cf0:	2230      	movs	r2, #48	@ 0x30
 8023cf2:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8023cf6:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8023cfa:	3330      	adds	r3, #48	@ 0x30
 8023cfc:	f802 3b01 	strb.w	r3, [r2], #1
 8023d00:	e6a1      	b.n	8023a46 <_vfprintf_r+0x70e>
 8023d02:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8023d06:	e7f8      	b.n	8023cfa <_vfprintf_r+0x9c2>
 8023d08:	9b04      	ldr	r3, [sp, #16]
 8023d0a:	42b3      	cmp	r3, r6
 8023d0c:	dd0d      	ble.n	8023d2a <_vfprintf_r+0x9f2>
 8023d0e:	9b04      	ldr	r3, [sp, #16]
 8023d10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023d12:	2e00      	cmp	r6, #0
 8023d14:	eb03 0902 	add.w	r9, r3, r2
 8023d18:	dc0c      	bgt.n	8023d34 <_vfprintf_r+0x9fc>
 8023d1a:	f1c6 0301 	rsb	r3, r6, #1
 8023d1e:	4499      	add	r9, r3
 8023d20:	e008      	b.n	8023d34 <_vfprintf_r+0x9fc>
 8023d22:	b17b      	cbz	r3, 8023d44 <_vfprintf_r+0xa0c>
 8023d24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023d26:	3301      	adds	r3, #1
 8023d28:	e7d8      	b.n	8023cdc <_vfprintf_r+0x9a4>
 8023d2a:	07eb      	lsls	r3, r5, #31
 8023d2c:	d521      	bpl.n	8023d72 <_vfprintf_r+0xa3a>
 8023d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023d30:	eb06 0903 	add.w	r9, r6, r3
 8023d34:	2367      	movs	r3, #103	@ 0x67
 8023d36:	e7d3      	b.n	8023ce0 <_vfprintf_r+0x9a8>
 8023d38:	46b1      	mov	r9, r6
 8023d3a:	e7d0      	b.n	8023cde <_vfprintf_r+0x9a6>
 8023d3c:	08034728 	.word	0x08034728
 8023d40:	08034718 	.word	0x08034718
 8023d44:	2366      	movs	r3, #102	@ 0x66
 8023d46:	9306      	str	r3, [sp, #24]
 8023d48:	f04f 0901 	mov.w	r9, #1
 8023d4c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8023d50:	9308      	str	r3, [sp, #32]
 8023d52:	d01f      	beq.n	8023d94 <_vfprintf_r+0xa5c>
 8023d54:	2700      	movs	r7, #0
 8023d56:	2e00      	cmp	r6, #0
 8023d58:	9708      	str	r7, [sp, #32]
 8023d5a:	f77f ae88 	ble.w	8023a6e <_vfprintf_r+0x736>
 8023d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d60:	781b      	ldrb	r3, [r3, #0]
 8023d62:	2bff      	cmp	r3, #255	@ 0xff
 8023d64:	d107      	bne.n	8023d76 <_vfprintf_r+0xa3e>
 8023d66:	9b08      	ldr	r3, [sp, #32]
 8023d68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023d6a:	443b      	add	r3, r7
 8023d6c:	fb02 9903 	mla	r9, r2, r3, r9
 8023d70:	e67d      	b.n	8023a6e <_vfprintf_r+0x736>
 8023d72:	46b1      	mov	r9, r6
 8023d74:	e7de      	b.n	8023d34 <_vfprintf_r+0x9fc>
 8023d76:	42b3      	cmp	r3, r6
 8023d78:	daf5      	bge.n	8023d66 <_vfprintf_r+0xa2e>
 8023d7a:	1af6      	subs	r6, r6, r3
 8023d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d7e:	785b      	ldrb	r3, [r3, #1]
 8023d80:	b133      	cbz	r3, 8023d90 <_vfprintf_r+0xa58>
 8023d82:	9b08      	ldr	r3, [sp, #32]
 8023d84:	3301      	adds	r3, #1
 8023d86:	9308      	str	r3, [sp, #32]
 8023d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d8a:	3301      	adds	r3, #1
 8023d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d8e:	e7e6      	b.n	8023d5e <_vfprintf_r+0xa26>
 8023d90:	3701      	adds	r7, #1
 8023d92:	e7e4      	b.n	8023d5e <_vfprintf_r+0xa26>
 8023d94:	9f08      	ldr	r7, [sp, #32]
 8023d96:	e66a      	b.n	8023a6e <_vfprintf_r+0x736>
 8023d98:	232d      	movs	r3, #45	@ 0x2d
 8023d9a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8023d9e:	e66a      	b.n	8023a76 <_vfprintf_r+0x73e>
 8023da0:	06af      	lsls	r7, r5, #26
 8023da2:	d507      	bpl.n	8023db4 <_vfprintf_r+0xa7c>
 8023da4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023da6:	6833      	ldr	r3, [r6, #0]
 8023da8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023daa:	17d2      	asrs	r2, r2, #31
 8023dac:	e9c3 1200 	strd	r1, r2, [r3]
 8023db0:	3604      	adds	r6, #4
 8023db2:	e734      	b.n	8023c1e <_vfprintf_r+0x8e6>
 8023db4:	06e8      	lsls	r0, r5, #27
 8023db6:	d503      	bpl.n	8023dc0 <_vfprintf_r+0xa88>
 8023db8:	6833      	ldr	r3, [r6, #0]
 8023dba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023dbc:	601a      	str	r2, [r3, #0]
 8023dbe:	e7f7      	b.n	8023db0 <_vfprintf_r+0xa78>
 8023dc0:	0669      	lsls	r1, r5, #25
 8023dc2:	d503      	bpl.n	8023dcc <_vfprintf_r+0xa94>
 8023dc4:	6833      	ldr	r3, [r6, #0]
 8023dc6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023dc8:	801a      	strh	r2, [r3, #0]
 8023dca:	e7f1      	b.n	8023db0 <_vfprintf_r+0xa78>
 8023dcc:	05aa      	lsls	r2, r5, #22
 8023dce:	d5f3      	bpl.n	8023db8 <_vfprintf_r+0xa80>
 8023dd0:	6833      	ldr	r3, [r6, #0]
 8023dd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023dd4:	701a      	strb	r2, [r3, #0]
 8023dd6:	e7eb      	b.n	8023db0 <_vfprintf_r+0xa78>
 8023dd8:	f045 0510 	orr.w	r5, r5, #16
 8023ddc:	f015 0320 	ands.w	r3, r5, #32
 8023de0:	d020      	beq.n	8023e24 <_vfprintf_r+0xaec>
 8023de2:	3607      	adds	r6, #7
 8023de4:	f026 0307 	bic.w	r3, r6, #7
 8023de8:	461a      	mov	r2, r3
 8023dea:	685f      	ldr	r7, [r3, #4]
 8023dec:	f852 6b08 	ldr.w	r6, [r2], #8
 8023df0:	9207      	str	r2, [sp, #28]
 8023df2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8023df6:	2300      	movs	r3, #0
 8023df8:	2200      	movs	r2, #0
 8023dfa:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8023dfe:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8023e02:	f000 8491 	beq.w	8024728 <_vfprintf_r+0x13f0>
 8023e06:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8023e0a:	9208      	str	r2, [sp, #32]
 8023e0c:	ea56 0207 	orrs.w	r2, r6, r7
 8023e10:	f040 848f 	bne.w	8024732 <_vfprintf_r+0x13fa>
 8023e14:	f1b9 0f00 	cmp.w	r9, #0
 8023e18:	f000 80db 	beq.w	8023fd2 <_vfprintf_r+0xc9a>
 8023e1c:	2b01      	cmp	r3, #1
 8023e1e:	f040 848b 	bne.w	8024738 <_vfprintf_r+0x1400>
 8023e22:	e083      	b.n	8023f2c <_vfprintf_r+0xbf4>
 8023e24:	4632      	mov	r2, r6
 8023e26:	f015 0710 	ands.w	r7, r5, #16
 8023e2a:	f852 6b04 	ldr.w	r6, [r2], #4
 8023e2e:	9207      	str	r2, [sp, #28]
 8023e30:	d001      	beq.n	8023e36 <_vfprintf_r+0xafe>
 8023e32:	461f      	mov	r7, r3
 8023e34:	e7dd      	b.n	8023df2 <_vfprintf_r+0xaba>
 8023e36:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8023e3a:	d001      	beq.n	8023e40 <_vfprintf_r+0xb08>
 8023e3c:	b2b6      	uxth	r6, r6
 8023e3e:	e7d8      	b.n	8023df2 <_vfprintf_r+0xaba>
 8023e40:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8023e44:	d0d5      	beq.n	8023df2 <_vfprintf_r+0xaba>
 8023e46:	b2f6      	uxtb	r6, r6
 8023e48:	e7f3      	b.n	8023e32 <_vfprintf_r+0xafa>
 8023e4a:	4633      	mov	r3, r6
 8023e4c:	2278      	movs	r2, #120	@ 0x78
 8023e4e:	f853 6b04 	ldr.w	r6, [r3], #4
 8023e52:	9307      	str	r3, [sp, #28]
 8023e54:	f647 0330 	movw	r3, #30768	@ 0x7830
 8023e58:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8023e5c:	4b93      	ldr	r3, [pc, #588]	@ (80240ac <_vfprintf_r+0xd74>)
 8023e5e:	9319      	str	r3, [sp, #100]	@ 0x64
 8023e60:	2700      	movs	r7, #0
 8023e62:	f045 0502 	orr.w	r5, r5, #2
 8023e66:	2302      	movs	r3, #2
 8023e68:	9206      	str	r2, [sp, #24]
 8023e6a:	e7c5      	b.n	8023df8 <_vfprintf_r+0xac0>
 8023e6c:	4633      	mov	r3, r6
 8023e6e:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
 8023e72:	f853 8b04 	ldr.w	r8, [r3], #4
 8023e76:	9307      	str	r3, [sp, #28]
 8023e78:	f04f 0600 	mov.w	r6, #0
 8023e7c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8023e80:	d00f      	beq.n	8023ea2 <_vfprintf_r+0xb6a>
 8023e82:	464a      	mov	r2, r9
 8023e84:	4631      	mov	r1, r6
 8023e86:	4640      	mov	r0, r8
 8023e88:	f7dc f9ba 	bl	8000200 <memchr>
 8023e8c:	4682      	mov	sl, r0
 8023e8e:	2800      	cmp	r0, #0
 8023e90:	f43f ac7a 	beq.w	8023788 <_vfprintf_r+0x450>
 8023e94:	eba0 0908 	sub.w	r9, r0, r8
 8023e98:	46b2      	mov	sl, r6
 8023e9a:	9610      	str	r6, [sp, #64]	@ 0x40
 8023e9c:	4637      	mov	r7, r6
 8023e9e:	9608      	str	r6, [sp, #32]
 8023ea0:	e5ec      	b.n	8023a7c <_vfprintf_r+0x744>
 8023ea2:	4640      	mov	r0, r8
 8023ea4:	f7dc f9fc 	bl	80002a0 <strlen>
 8023ea8:	46b2      	mov	sl, r6
 8023eaa:	4681      	mov	r9, r0
 8023eac:	e46c      	b.n	8023788 <_vfprintf_r+0x450>
 8023eae:	f045 0510 	orr.w	r5, r5, #16
 8023eb2:	f015 0320 	ands.w	r3, r5, #32
 8023eb6:	d009      	beq.n	8023ecc <_vfprintf_r+0xb94>
 8023eb8:	3607      	adds	r6, #7
 8023eba:	f026 0307 	bic.w	r3, r6, #7
 8023ebe:	461a      	mov	r2, r3
 8023ec0:	685f      	ldr	r7, [r3, #4]
 8023ec2:	f852 6b08 	ldr.w	r6, [r2], #8
 8023ec6:	9207      	str	r2, [sp, #28]
 8023ec8:	2301      	movs	r3, #1
 8023eca:	e795      	b.n	8023df8 <_vfprintf_r+0xac0>
 8023ecc:	4632      	mov	r2, r6
 8023ece:	f015 0710 	ands.w	r7, r5, #16
 8023ed2:	f852 6b04 	ldr.w	r6, [r2], #4
 8023ed6:	9207      	str	r2, [sp, #28]
 8023ed8:	d001      	beq.n	8023ede <_vfprintf_r+0xba6>
 8023eda:	461f      	mov	r7, r3
 8023edc:	e7f4      	b.n	8023ec8 <_vfprintf_r+0xb90>
 8023ede:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8023ee2:	d001      	beq.n	8023ee8 <_vfprintf_r+0xbb0>
 8023ee4:	b2b6      	uxth	r6, r6
 8023ee6:	e7ef      	b.n	8023ec8 <_vfprintf_r+0xb90>
 8023ee8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8023eec:	d0ec      	beq.n	8023ec8 <_vfprintf_r+0xb90>
 8023eee:	b2f6      	uxtb	r6, r6
 8023ef0:	e7f3      	b.n	8023eda <_vfprintf_r+0xba2>
 8023ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80240b0 <_vfprintf_r+0xd78>)
 8023ef4:	f7ff bb33 	b.w	802355e <_vfprintf_r+0x226>
 8023ef8:	4632      	mov	r2, r6
 8023efa:	f015 0710 	ands.w	r7, r5, #16
 8023efe:	f852 6b04 	ldr.w	r6, [r2], #4
 8023f02:	9207      	str	r2, [sp, #28]
 8023f04:	d002      	beq.n	8023f0c <_vfprintf_r+0xbd4>
 8023f06:	461f      	mov	r7, r3
 8023f08:	f7ff bb36 	b.w	8023578 <_vfprintf_r+0x240>
 8023f0c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8023f10:	d002      	beq.n	8023f18 <_vfprintf_r+0xbe0>
 8023f12:	b2b6      	uxth	r6, r6
 8023f14:	f7ff bb30 	b.w	8023578 <_vfprintf_r+0x240>
 8023f18:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8023f1c:	f43f ab2c 	beq.w	8023578 <_vfprintf_r+0x240>
 8023f20:	b2f6      	uxtb	r6, r6
 8023f22:	e7f0      	b.n	8023f06 <_vfprintf_r+0xbce>
 8023f24:	2e0a      	cmp	r6, #10
 8023f26:	f177 0300 	sbcs.w	r3, r7, #0
 8023f2a:	d207      	bcs.n	8023f3c <_vfprintf_r+0xc04>
 8023f2c:	3630      	adds	r6, #48	@ 0x30
 8023f2e:	b2f6      	uxtb	r6, r6
 8023f30:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8023f34:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8023f38:	f000 bc1a 	b.w	8024770 <_vfprintf_r+0x1438>
 8023f3c:	2300      	movs	r3, #0
 8023f3e:	9304      	str	r3, [sp, #16]
 8023f40:	9b08      	ldr	r3, [sp, #32]
 8023f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8023f46:	ad52      	add	r5, sp, #328	@ 0x148
 8023f48:	9310      	str	r3, [sp, #64]	@ 0x40
 8023f4a:	220a      	movs	r2, #10
 8023f4c:	2300      	movs	r3, #0
 8023f4e:	4630      	mov	r0, r6
 8023f50:	4639      	mov	r1, r7
 8023f52:	f7dc ff01 	bl	8000d58 <__aeabi_uldivmod>
 8023f56:	9b04      	ldr	r3, [sp, #16]
 8023f58:	9011      	str	r0, [sp, #68]	@ 0x44
 8023f5a:	3301      	adds	r3, #1
 8023f5c:	9304      	str	r3, [sp, #16]
 8023f5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023f60:	3230      	adds	r2, #48	@ 0x30
 8023f62:	468a      	mov	sl, r1
 8023f64:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8023f68:	f805 2c01 	strb.w	r2, [r5, #-1]
 8023f6c:	b1d3      	cbz	r3, 8023fa4 <_vfprintf_r+0xc6c>
 8023f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f70:	9a04      	ldr	r2, [sp, #16]
 8023f72:	781b      	ldrb	r3, [r3, #0]
 8023f74:	429a      	cmp	r2, r3
 8023f76:	d115      	bne.n	8023fa4 <_vfprintf_r+0xc6c>
 8023f78:	2aff      	cmp	r2, #255	@ 0xff
 8023f7a:	d013      	beq.n	8023fa4 <_vfprintf_r+0xc6c>
 8023f7c:	2e0a      	cmp	r6, #10
 8023f7e:	f177 0300 	sbcs.w	r3, r7, #0
 8023f82:	d30f      	bcc.n	8023fa4 <_vfprintf_r+0xc6c>
 8023f84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023f86:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023f88:	eba8 0803 	sub.w	r8, r8, r3
 8023f8c:	461a      	mov	r2, r3
 8023f8e:	4640      	mov	r0, r8
 8023f90:	f001 ff25 	bl	8025dde <strncpy>
 8023f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f96:	785b      	ldrb	r3, [r3, #1]
 8023f98:	b11b      	cbz	r3, 8023fa2 <_vfprintf_r+0xc6a>
 8023f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f9c:	3301      	adds	r3, #1
 8023f9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fa0:	2300      	movs	r3, #0
 8023fa2:	9304      	str	r3, [sp, #16]
 8023fa4:	2e0a      	cmp	r6, #10
 8023fa6:	f177 0700 	sbcs.w	r7, r7, #0
 8023faa:	f0c0 83e1 	bcc.w	8024770 <_vfprintf_r+0x1438>
 8023fae:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8023fb0:	4657      	mov	r7, sl
 8023fb2:	4645      	mov	r5, r8
 8023fb4:	e7c9      	b.n	8023f4a <_vfprintf_r+0xc12>
 8023fb6:	f006 030f 	and.w	r3, r6, #15
 8023fba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023fbc:	0936      	lsrs	r6, r6, #4
 8023fbe:	5cd3      	ldrb	r3, [r2, r3]
 8023fc0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8023fc4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8023fc8:	093f      	lsrs	r7, r7, #4
 8023fca:	ea56 0307 	orrs.w	r3, r6, r7
 8023fce:	d1f2      	bne.n	8023fb6 <_vfprintf_r+0xc7e>
 8023fd0:	e3ce      	b.n	8024770 <_vfprintf_r+0x1438>
 8023fd2:	b91b      	cbnz	r3, 8023fdc <_vfprintf_r+0xca4>
 8023fd4:	07ed      	lsls	r5, r5, #31
 8023fd6:	d501      	bpl.n	8023fdc <_vfprintf_r+0xca4>
 8023fd8:	2630      	movs	r6, #48	@ 0x30
 8023fda:	e7a9      	b.n	8023f30 <_vfprintf_r+0xbf8>
 8023fdc:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8023fe0:	e3c6      	b.n	8024770 <_vfprintf_r+0x1438>
 8023fe2:	9b06      	ldr	r3, [sp, #24]
 8023fe4:	2b00      	cmp	r3, #0
 8023fe6:	f000 8390 	beq.w	802470a <_vfprintf_r+0x13d2>
 8023fea:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8023fee:	2300      	movs	r3, #0
 8023ff0:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8023ff4:	9607      	str	r6, [sp, #28]
 8023ff6:	f7ff bb5c 	b.w	80236b2 <_vfprintf_r+0x37a>
 8023ffa:	2010      	movs	r0, #16
 8023ffc:	4403      	add	r3, r0
 8023ffe:	2a07      	cmp	r2, #7
 8024000:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024004:	6060      	str	r0, [r4, #4]
 8024006:	dd08      	ble.n	802401a <_vfprintf_r+0xce2>
 8024008:	9803      	ldr	r0, [sp, #12]
 802400a:	aa26      	add	r2, sp, #152	@ 0x98
 802400c:	4659      	mov	r1, fp
 802400e:	f000 fbff 	bl	8024810 <__sprint_r>
 8024012:	2800      	cmp	r0, #0
 8024014:	f040 8357 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024018:	a929      	add	r1, sp, #164	@ 0xa4
 802401a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802401c:	3b10      	subs	r3, #16
 802401e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024020:	460c      	mov	r4, r1
 8024022:	e547      	b.n	8023ab4 <_vfprintf_r+0x77c>
 8024024:	460c      	mov	r4, r1
 8024026:	e562      	b.n	8023aee <_vfprintf_r+0x7b6>
 8024028:	9803      	ldr	r0, [sp, #12]
 802402a:	aa26      	add	r2, sp, #152	@ 0x98
 802402c:	4659      	mov	r1, fp
 802402e:	f000 fbef 	bl	8024810 <__sprint_r>
 8024032:	2800      	cmp	r0, #0
 8024034:	f040 8347 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024038:	ac29      	add	r4, sp, #164	@ 0xa4
 802403a:	e56a      	b.n	8023b12 <_vfprintf_r+0x7da>
 802403c:	9803      	ldr	r0, [sp, #12]
 802403e:	aa26      	add	r2, sp, #152	@ 0x98
 8024040:	4659      	mov	r1, fp
 8024042:	f000 fbe5 	bl	8024810 <__sprint_r>
 8024046:	2800      	cmp	r0, #0
 8024048:	f040 833d 	bne.w	80246c6 <_vfprintf_r+0x138e>
 802404c:	ac29      	add	r4, sp, #164	@ 0xa4
 802404e:	e570      	b.n	8023b32 <_vfprintf_r+0x7fa>
 8024050:	2010      	movs	r0, #16
 8024052:	4403      	add	r3, r0
 8024054:	2a07      	cmp	r2, #7
 8024056:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802405a:	6060      	str	r0, [r4, #4]
 802405c:	dd08      	ble.n	8024070 <_vfprintf_r+0xd38>
 802405e:	9803      	ldr	r0, [sp, #12]
 8024060:	aa26      	add	r2, sp, #152	@ 0x98
 8024062:	4659      	mov	r1, fp
 8024064:	f000 fbd4 	bl	8024810 <__sprint_r>
 8024068:	2800      	cmp	r0, #0
 802406a:	f040 832c 	bne.w	80246c6 <_vfprintf_r+0x138e>
 802406e:	a929      	add	r1, sp, #164	@ 0xa4
 8024070:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024072:	3b10      	subs	r3, #16
 8024074:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024076:	460c      	mov	r4, r1
 8024078:	e564      	b.n	8023b44 <_vfprintf_r+0x80c>
 802407a:	460c      	mov	r4, r1
 802407c:	e57f      	b.n	8023b7e <_vfprintf_r+0x846>
 802407e:	2010      	movs	r0, #16
 8024080:	4403      	add	r3, r0
 8024082:	2a07      	cmp	r2, #7
 8024084:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024088:	6060      	str	r0, [r4, #4]
 802408a:	dd08      	ble.n	802409e <_vfprintf_r+0xd66>
 802408c:	9803      	ldr	r0, [sp, #12]
 802408e:	aa26      	add	r2, sp, #152	@ 0x98
 8024090:	4659      	mov	r1, fp
 8024092:	f000 fbbd 	bl	8024810 <__sprint_r>
 8024096:	2800      	cmp	r0, #0
 8024098:	f040 8315 	bne.w	80246c6 <_vfprintf_r+0x138e>
 802409c:	a929      	add	r1, sp, #164	@ 0xa4
 802409e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80240a0:	3b10      	subs	r3, #16
 80240a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80240a4:	460c      	mov	r4, r1
 80240a6:	e570      	b.n	8023b8a <_vfprintf_r+0x852>
 80240a8:	460c      	mov	r4, r1
 80240aa:	e58b      	b.n	8023bc4 <_vfprintf_r+0x88c>
 80240ac:	080346f4 	.word	0x080346f4
 80240b0:	08034705 	.word	0x08034705
 80240b4:	9b06      	ldr	r3, [sp, #24]
 80240b6:	2b65      	cmp	r3, #101	@ 0x65
 80240b8:	f340 8245 	ble.w	8024546 <_vfprintf_r+0x120e>
 80240bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80240c0:	2200      	movs	r2, #0
 80240c2:	2300      	movs	r3, #0
 80240c4:	f7dc fd18 	bl	8000af8 <__aeabi_dcmpeq>
 80240c8:	2800      	cmp	r0, #0
 80240ca:	d06a      	beq.n	80241a2 <_vfprintf_r+0xe6a>
 80240cc:	4b73      	ldr	r3, [pc, #460]	@ (802429c <_vfprintf_r+0xf64>)
 80240ce:	6023      	str	r3, [r4, #0]
 80240d0:	2301      	movs	r3, #1
 80240d2:	6063      	str	r3, [r4, #4]
 80240d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80240d6:	3301      	adds	r3, #1
 80240d8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80240da:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80240dc:	3301      	adds	r3, #1
 80240de:	2b07      	cmp	r3, #7
 80240e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80240e2:	dc37      	bgt.n	8024154 <_vfprintf_r+0xe1c>
 80240e4:	3408      	adds	r4, #8
 80240e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80240e8:	9a04      	ldr	r2, [sp, #16]
 80240ea:	4293      	cmp	r3, r2
 80240ec:	db02      	blt.n	80240f4 <_vfprintf_r+0xdbc>
 80240ee:	07e9      	lsls	r1, r5, #31
 80240f0:	f57f ad78 	bpl.w	8023be4 <_vfprintf_r+0x8ac>
 80240f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80240f6:	6023      	str	r3, [r4, #0]
 80240f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80240fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80240fc:	6063      	str	r3, [r4, #4]
 80240fe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024100:	4413      	add	r3, r2
 8024102:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024104:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024106:	3301      	adds	r3, #1
 8024108:	2b07      	cmp	r3, #7
 802410a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802410c:	dc2c      	bgt.n	8024168 <_vfprintf_r+0xe30>
 802410e:	3408      	adds	r4, #8
 8024110:	9b04      	ldr	r3, [sp, #16]
 8024112:	1e5e      	subs	r6, r3, #1
 8024114:	2e00      	cmp	r6, #0
 8024116:	f77f ad65 	ble.w	8023be4 <_vfprintf_r+0x8ac>
 802411a:	4f61      	ldr	r7, [pc, #388]	@ (80242a0 <_vfprintf_r+0xf68>)
 802411c:	f04f 0810 	mov.w	r8, #16
 8024120:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024124:	2e10      	cmp	r6, #16
 8024126:	f103 0301 	add.w	r3, r3, #1
 802412a:	f104 0108 	add.w	r1, r4, #8
 802412e:	6027      	str	r7, [r4, #0]
 8024130:	dc24      	bgt.n	802417c <_vfprintf_r+0xe44>
 8024132:	6066      	str	r6, [r4, #4]
 8024134:	2b07      	cmp	r3, #7
 8024136:	4416      	add	r6, r2
 8024138:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802413c:	f340 82a2 	ble.w	8024684 <_vfprintf_r+0x134c>
 8024140:	9803      	ldr	r0, [sp, #12]
 8024142:	aa26      	add	r2, sp, #152	@ 0x98
 8024144:	4659      	mov	r1, fp
 8024146:	f000 fb63 	bl	8024810 <__sprint_r>
 802414a:	2800      	cmp	r0, #0
 802414c:	f040 82bb 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024150:	ac29      	add	r4, sp, #164	@ 0xa4
 8024152:	e547      	b.n	8023be4 <_vfprintf_r+0x8ac>
 8024154:	9803      	ldr	r0, [sp, #12]
 8024156:	aa26      	add	r2, sp, #152	@ 0x98
 8024158:	4659      	mov	r1, fp
 802415a:	f000 fb59 	bl	8024810 <__sprint_r>
 802415e:	2800      	cmp	r0, #0
 8024160:	f040 82b1 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024164:	ac29      	add	r4, sp, #164	@ 0xa4
 8024166:	e7be      	b.n	80240e6 <_vfprintf_r+0xdae>
 8024168:	9803      	ldr	r0, [sp, #12]
 802416a:	aa26      	add	r2, sp, #152	@ 0x98
 802416c:	4659      	mov	r1, fp
 802416e:	f000 fb4f 	bl	8024810 <__sprint_r>
 8024172:	2800      	cmp	r0, #0
 8024174:	f040 82a7 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024178:	ac29      	add	r4, sp, #164	@ 0xa4
 802417a:	e7c9      	b.n	8024110 <_vfprintf_r+0xdd8>
 802417c:	3210      	adds	r2, #16
 802417e:	2b07      	cmp	r3, #7
 8024180:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8024184:	f8c4 8004 	str.w	r8, [r4, #4]
 8024188:	dd08      	ble.n	802419c <_vfprintf_r+0xe64>
 802418a:	9803      	ldr	r0, [sp, #12]
 802418c:	aa26      	add	r2, sp, #152	@ 0x98
 802418e:	4659      	mov	r1, fp
 8024190:	f000 fb3e 	bl	8024810 <__sprint_r>
 8024194:	2800      	cmp	r0, #0
 8024196:	f040 8296 	bne.w	80246c6 <_vfprintf_r+0x138e>
 802419a:	a929      	add	r1, sp, #164	@ 0xa4
 802419c:	3e10      	subs	r6, #16
 802419e:	460c      	mov	r4, r1
 80241a0:	e7be      	b.n	8024120 <_vfprintf_r+0xde8>
 80241a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80241a4:	2b00      	cmp	r3, #0
 80241a6:	dc7d      	bgt.n	80242a4 <_vfprintf_r+0xf6c>
 80241a8:	4b3c      	ldr	r3, [pc, #240]	@ (802429c <_vfprintf_r+0xf64>)
 80241aa:	6023      	str	r3, [r4, #0]
 80241ac:	2301      	movs	r3, #1
 80241ae:	6063      	str	r3, [r4, #4]
 80241b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241b2:	3301      	adds	r3, #1
 80241b4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80241b6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80241b8:	3301      	adds	r3, #1
 80241ba:	2b07      	cmp	r3, #7
 80241bc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80241be:	dc46      	bgt.n	802424e <_vfprintf_r+0xf16>
 80241c0:	3408      	adds	r4, #8
 80241c2:	9904      	ldr	r1, [sp, #16]
 80241c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80241c6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80241c8:	430b      	orrs	r3, r1
 80241ca:	f005 0101 	and.w	r1, r5, #1
 80241ce:	430b      	orrs	r3, r1
 80241d0:	f43f ad08 	beq.w	8023be4 <_vfprintf_r+0x8ac>
 80241d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80241d6:	6023      	str	r3, [r4, #0]
 80241d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80241da:	6063      	str	r3, [r4, #4]
 80241dc:	441a      	add	r2, r3
 80241de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80241e0:	9228      	str	r2, [sp, #160]	@ 0xa0
 80241e2:	3301      	adds	r3, #1
 80241e4:	2b07      	cmp	r3, #7
 80241e6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80241e8:	dc3b      	bgt.n	8024262 <_vfprintf_r+0xf2a>
 80241ea:	f104 0308 	add.w	r3, r4, #8
 80241ee:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80241f0:	2e00      	cmp	r6, #0
 80241f2:	da1b      	bge.n	802422c <_vfprintf_r+0xef4>
 80241f4:	4f2a      	ldr	r7, [pc, #168]	@ (80242a0 <_vfprintf_r+0xf68>)
 80241f6:	4276      	negs	r6, r6
 80241f8:	461a      	mov	r2, r3
 80241fa:	2410      	movs	r4, #16
 80241fc:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8024200:	2e10      	cmp	r6, #16
 8024202:	f101 0101 	add.w	r1, r1, #1
 8024206:	f103 0308 	add.w	r3, r3, #8
 802420a:	6017      	str	r7, [r2, #0]
 802420c:	dc33      	bgt.n	8024276 <_vfprintf_r+0xf3e>
 802420e:	6056      	str	r6, [r2, #4]
 8024210:	2907      	cmp	r1, #7
 8024212:	4406      	add	r6, r0
 8024214:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8024218:	dd08      	ble.n	802422c <_vfprintf_r+0xef4>
 802421a:	9803      	ldr	r0, [sp, #12]
 802421c:	aa26      	add	r2, sp, #152	@ 0x98
 802421e:	4659      	mov	r1, fp
 8024220:	f000 faf6 	bl	8024810 <__sprint_r>
 8024224:	2800      	cmp	r0, #0
 8024226:	f040 824e 	bne.w	80246c6 <_vfprintf_r+0x138e>
 802422a:	ab29      	add	r3, sp, #164	@ 0xa4
 802422c:	9a04      	ldr	r2, [sp, #16]
 802422e:	9904      	ldr	r1, [sp, #16]
 8024230:	605a      	str	r2, [r3, #4]
 8024232:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024234:	f8c3 8000 	str.w	r8, [r3]
 8024238:	440a      	add	r2, r1
 802423a:	9228      	str	r2, [sp, #160]	@ 0xa0
 802423c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802423e:	3201      	adds	r2, #1
 8024240:	2a07      	cmp	r2, #7
 8024242:	9227      	str	r2, [sp, #156]	@ 0x9c
 8024244:	f73f af7c 	bgt.w	8024140 <_vfprintf_r+0xe08>
 8024248:	f103 0408 	add.w	r4, r3, #8
 802424c:	e4ca      	b.n	8023be4 <_vfprintf_r+0x8ac>
 802424e:	9803      	ldr	r0, [sp, #12]
 8024250:	aa26      	add	r2, sp, #152	@ 0x98
 8024252:	4659      	mov	r1, fp
 8024254:	f000 fadc 	bl	8024810 <__sprint_r>
 8024258:	2800      	cmp	r0, #0
 802425a:	f040 8234 	bne.w	80246c6 <_vfprintf_r+0x138e>
 802425e:	ac29      	add	r4, sp, #164	@ 0xa4
 8024260:	e7af      	b.n	80241c2 <_vfprintf_r+0xe8a>
 8024262:	9803      	ldr	r0, [sp, #12]
 8024264:	aa26      	add	r2, sp, #152	@ 0x98
 8024266:	4659      	mov	r1, fp
 8024268:	f000 fad2 	bl	8024810 <__sprint_r>
 802426c:	2800      	cmp	r0, #0
 802426e:	f040 822a 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024272:	ab29      	add	r3, sp, #164	@ 0xa4
 8024274:	e7bb      	b.n	80241ee <_vfprintf_r+0xeb6>
 8024276:	3010      	adds	r0, #16
 8024278:	2907      	cmp	r1, #7
 802427a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802427e:	6054      	str	r4, [r2, #4]
 8024280:	dd08      	ble.n	8024294 <_vfprintf_r+0xf5c>
 8024282:	9803      	ldr	r0, [sp, #12]
 8024284:	aa26      	add	r2, sp, #152	@ 0x98
 8024286:	4659      	mov	r1, fp
 8024288:	f000 fac2 	bl	8024810 <__sprint_r>
 802428c:	2800      	cmp	r0, #0
 802428e:	f040 821a 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024292:	ab29      	add	r3, sp, #164	@ 0xa4
 8024294:	3e10      	subs	r6, #16
 8024296:	461a      	mov	r2, r3
 8024298:	e7b0      	b.n	80241fc <_vfprintf_r+0xec4>
 802429a:	bf00      	nop
 802429c:	08034716 	.word	0x08034716
 80242a0:	08034718 	.word	0x08034718
 80242a4:	9b04      	ldr	r3, [sp, #16]
 80242a6:	4443      	add	r3, r8
 80242a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80242aa:	9b04      	ldr	r3, [sp, #16]
 80242ac:	42b3      	cmp	r3, r6
 80242ae:	bfa8      	it	ge
 80242b0:	4633      	movge	r3, r6
 80242b2:	2b00      	cmp	r3, #0
 80242b4:	4699      	mov	r9, r3
 80242b6:	dd0b      	ble.n	80242d0 <_vfprintf_r+0xf98>
 80242b8:	e9c4 8300 	strd	r8, r3, [r4]
 80242bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80242be:	444b      	add	r3, r9
 80242c0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80242c2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80242c4:	3301      	adds	r3, #1
 80242c6:	2b07      	cmp	r3, #7
 80242c8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80242ca:	f300 8089 	bgt.w	80243e0 <_vfprintf_r+0x10a8>
 80242ce:	3408      	adds	r4, #8
 80242d0:	f1b9 0f00 	cmp.w	r9, #0
 80242d4:	bfac      	ite	ge
 80242d6:	eba6 0309 	subge.w	r3, r6, r9
 80242da:	4633      	movlt	r3, r6
 80242dc:	2b00      	cmp	r3, #0
 80242de:	9306      	str	r3, [sp, #24]
 80242e0:	dd1c      	ble.n	802431c <_vfprintf_r+0xfe4>
 80242e2:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8024648 <_vfprintf_r+0x1310>
 80242e6:	9806      	ldr	r0, [sp, #24]
 80242e8:	f8c4 9000 	str.w	r9, [r4]
 80242ec:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80242f0:	2810      	cmp	r0, #16
 80242f2:	f102 0201 	add.w	r2, r2, #1
 80242f6:	f104 0108 	add.w	r1, r4, #8
 80242fa:	dc7b      	bgt.n	80243f4 <_vfprintf_r+0x10bc>
 80242fc:	4403      	add	r3, r0
 80242fe:	2a07      	cmp	r2, #7
 8024300:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024304:	6060      	str	r0, [r4, #4]
 8024306:	f340 808a 	ble.w	802441e <_vfprintf_r+0x10e6>
 802430a:	9803      	ldr	r0, [sp, #12]
 802430c:	aa26      	add	r2, sp, #152	@ 0x98
 802430e:	4659      	mov	r1, fp
 8024310:	f000 fa7e 	bl	8024810 <__sprint_r>
 8024314:	2800      	cmp	r0, #0
 8024316:	f040 81d6 	bne.w	80246c6 <_vfprintf_r+0x138e>
 802431a:	ac29      	add	r4, sp, #164	@ 0xa4
 802431c:	056a      	lsls	r2, r5, #21
 802431e:	44b0      	add	r8, r6
 8024320:	d508      	bpl.n	8024334 <_vfprintf_r+0xffc>
 8024322:	9b08      	ldr	r3, [sp, #32]
 8024324:	2b00      	cmp	r3, #0
 8024326:	d17c      	bne.n	8024422 <_vfprintf_r+0x10ea>
 8024328:	2f00      	cmp	r7, #0
 802432a:	d17c      	bne.n	8024426 <_vfprintf_r+0x10ee>
 802432c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802432e:	4598      	cmp	r8, r3
 8024330:	bf28      	it	cs
 8024332:	4698      	movcs	r8, r3
 8024334:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024336:	9a04      	ldr	r2, [sp, #16]
 8024338:	4293      	cmp	r3, r2
 802433a:	db01      	blt.n	8024340 <_vfprintf_r+0x1008>
 802433c:	07eb      	lsls	r3, r5, #31
 802433e:	d50e      	bpl.n	802435e <_vfprintf_r+0x1026>
 8024340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024342:	6023      	str	r3, [r4, #0]
 8024344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024346:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024348:	6063      	str	r3, [r4, #4]
 802434a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802434c:	4413      	add	r3, r2
 802434e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024350:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024352:	3301      	adds	r3, #1
 8024354:	2b07      	cmp	r3, #7
 8024356:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024358:	f300 80e1 	bgt.w	802451e <_vfprintf_r+0x11e6>
 802435c:	3408      	adds	r4, #8
 802435e:	9b04      	ldr	r3, [sp, #16]
 8024360:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8024362:	1bdf      	subs	r7, r3, r7
 8024364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024366:	eba3 0308 	sub.w	r3, r3, r8
 802436a:	429f      	cmp	r7, r3
 802436c:	bfa8      	it	ge
 802436e:	461f      	movge	r7, r3
 8024370:	2f00      	cmp	r7, #0
 8024372:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024374:	dd0a      	ble.n	802438c <_vfprintf_r+0x1054>
 8024376:	443b      	add	r3, r7
 8024378:	9328      	str	r3, [sp, #160]	@ 0xa0
 802437a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802437c:	3301      	adds	r3, #1
 802437e:	2b07      	cmp	r3, #7
 8024380:	e9c4 8700 	strd	r8, r7, [r4]
 8024384:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024386:	f300 80d4 	bgt.w	8024532 <_vfprintf_r+0x11fa>
 802438a:	3408      	adds	r4, #8
 802438c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802438e:	9b04      	ldr	r3, [sp, #16]
 8024390:	2f00      	cmp	r7, #0
 8024392:	eba3 0606 	sub.w	r6, r3, r6
 8024396:	bfa8      	it	ge
 8024398:	1bf6      	subge	r6, r6, r7
 802439a:	2e00      	cmp	r6, #0
 802439c:	f77f ac22 	ble.w	8023be4 <_vfprintf_r+0x8ac>
 80243a0:	4fa9      	ldr	r7, [pc, #676]	@ (8024648 <_vfprintf_r+0x1310>)
 80243a2:	f04f 0810 	mov.w	r8, #16
 80243a6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80243aa:	2e10      	cmp	r6, #16
 80243ac:	f103 0301 	add.w	r3, r3, #1
 80243b0:	f104 0108 	add.w	r1, r4, #8
 80243b4:	6027      	str	r7, [r4, #0]
 80243b6:	f77f aebc 	ble.w	8024132 <_vfprintf_r+0xdfa>
 80243ba:	3210      	adds	r2, #16
 80243bc:	2b07      	cmp	r3, #7
 80243be:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80243c2:	f8c4 8004 	str.w	r8, [r4, #4]
 80243c6:	dd08      	ble.n	80243da <_vfprintf_r+0x10a2>
 80243c8:	9803      	ldr	r0, [sp, #12]
 80243ca:	aa26      	add	r2, sp, #152	@ 0x98
 80243cc:	4659      	mov	r1, fp
 80243ce:	f000 fa1f 	bl	8024810 <__sprint_r>
 80243d2:	2800      	cmp	r0, #0
 80243d4:	f040 8177 	bne.w	80246c6 <_vfprintf_r+0x138e>
 80243d8:	a929      	add	r1, sp, #164	@ 0xa4
 80243da:	3e10      	subs	r6, #16
 80243dc:	460c      	mov	r4, r1
 80243de:	e7e2      	b.n	80243a6 <_vfprintf_r+0x106e>
 80243e0:	9803      	ldr	r0, [sp, #12]
 80243e2:	aa26      	add	r2, sp, #152	@ 0x98
 80243e4:	4659      	mov	r1, fp
 80243e6:	f000 fa13 	bl	8024810 <__sprint_r>
 80243ea:	2800      	cmp	r0, #0
 80243ec:	f040 816b 	bne.w	80246c6 <_vfprintf_r+0x138e>
 80243f0:	ac29      	add	r4, sp, #164	@ 0xa4
 80243f2:	e76d      	b.n	80242d0 <_vfprintf_r+0xf98>
 80243f4:	2010      	movs	r0, #16
 80243f6:	4403      	add	r3, r0
 80243f8:	2a07      	cmp	r2, #7
 80243fa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80243fe:	6060      	str	r0, [r4, #4]
 8024400:	dd08      	ble.n	8024414 <_vfprintf_r+0x10dc>
 8024402:	9803      	ldr	r0, [sp, #12]
 8024404:	aa26      	add	r2, sp, #152	@ 0x98
 8024406:	4659      	mov	r1, fp
 8024408:	f000 fa02 	bl	8024810 <__sprint_r>
 802440c:	2800      	cmp	r0, #0
 802440e:	f040 815a 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024412:	a929      	add	r1, sp, #164	@ 0xa4
 8024414:	9b06      	ldr	r3, [sp, #24]
 8024416:	3b10      	subs	r3, #16
 8024418:	9306      	str	r3, [sp, #24]
 802441a:	460c      	mov	r4, r1
 802441c:	e763      	b.n	80242e6 <_vfprintf_r+0xfae>
 802441e:	460c      	mov	r4, r1
 8024420:	e77c      	b.n	802431c <_vfprintf_r+0xfe4>
 8024422:	2f00      	cmp	r7, #0
 8024424:	d04b      	beq.n	80244be <_vfprintf_r+0x1186>
 8024426:	3f01      	subs	r7, #1
 8024428:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802442a:	6023      	str	r3, [r4, #0]
 802442c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802442e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024430:	6063      	str	r3, [r4, #4]
 8024432:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024434:	4413      	add	r3, r2
 8024436:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024438:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802443a:	3301      	adds	r3, #1
 802443c:	2b07      	cmp	r3, #7
 802443e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024440:	dc44      	bgt.n	80244cc <_vfprintf_r+0x1194>
 8024442:	3408      	adds	r4, #8
 8024444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024446:	f893 9000 	ldrb.w	r9, [r3]
 802444a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802444c:	eba3 0308 	sub.w	r3, r3, r8
 8024450:	4599      	cmp	r9, r3
 8024452:	bfa8      	it	ge
 8024454:	4699      	movge	r9, r3
 8024456:	f1b9 0f00 	cmp.w	r9, #0
 802445a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802445c:	dd09      	ble.n	8024472 <_vfprintf_r+0x113a>
 802445e:	444b      	add	r3, r9
 8024460:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024462:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024464:	3301      	adds	r3, #1
 8024466:	2b07      	cmp	r3, #7
 8024468:	e9c4 8900 	strd	r8, r9, [r4]
 802446c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802446e:	dc37      	bgt.n	80244e0 <_vfprintf_r+0x11a8>
 8024470:	3408      	adds	r4, #8
 8024472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024474:	781e      	ldrb	r6, [r3, #0]
 8024476:	f1b9 0f00 	cmp.w	r9, #0
 802447a:	bfa8      	it	ge
 802447c:	eba6 0609 	subge.w	r6, r6, r9
 8024480:	2e00      	cmp	r6, #0
 8024482:	dd18      	ble.n	80244b6 <_vfprintf_r+0x117e>
 8024484:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024488:	486f      	ldr	r0, [pc, #444]	@ (8024648 <_vfprintf_r+0x1310>)
 802448a:	6020      	str	r0, [r4, #0]
 802448c:	2e10      	cmp	r6, #16
 802448e:	f103 0301 	add.w	r3, r3, #1
 8024492:	f104 0108 	add.w	r1, r4, #8
 8024496:	dc2d      	bgt.n	80244f4 <_vfprintf_r+0x11bc>
 8024498:	6066      	str	r6, [r4, #4]
 802449a:	2b07      	cmp	r3, #7
 802449c:	4416      	add	r6, r2
 802449e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80244a2:	dd3a      	ble.n	802451a <_vfprintf_r+0x11e2>
 80244a4:	9803      	ldr	r0, [sp, #12]
 80244a6:	aa26      	add	r2, sp, #152	@ 0x98
 80244a8:	4659      	mov	r1, fp
 80244aa:	f000 f9b1 	bl	8024810 <__sprint_r>
 80244ae:	2800      	cmp	r0, #0
 80244b0:	f040 8109 	bne.w	80246c6 <_vfprintf_r+0x138e>
 80244b4:	ac29      	add	r4, sp, #164	@ 0xa4
 80244b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244b8:	781b      	ldrb	r3, [r3, #0]
 80244ba:	4498      	add	r8, r3
 80244bc:	e731      	b.n	8024322 <_vfprintf_r+0xfea>
 80244be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244c0:	3b01      	subs	r3, #1
 80244c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80244c4:	9b08      	ldr	r3, [sp, #32]
 80244c6:	3b01      	subs	r3, #1
 80244c8:	9308      	str	r3, [sp, #32]
 80244ca:	e7ad      	b.n	8024428 <_vfprintf_r+0x10f0>
 80244cc:	9803      	ldr	r0, [sp, #12]
 80244ce:	aa26      	add	r2, sp, #152	@ 0x98
 80244d0:	4659      	mov	r1, fp
 80244d2:	f000 f99d 	bl	8024810 <__sprint_r>
 80244d6:	2800      	cmp	r0, #0
 80244d8:	f040 80f5 	bne.w	80246c6 <_vfprintf_r+0x138e>
 80244dc:	ac29      	add	r4, sp, #164	@ 0xa4
 80244de:	e7b1      	b.n	8024444 <_vfprintf_r+0x110c>
 80244e0:	9803      	ldr	r0, [sp, #12]
 80244e2:	aa26      	add	r2, sp, #152	@ 0x98
 80244e4:	4659      	mov	r1, fp
 80244e6:	f000 f993 	bl	8024810 <__sprint_r>
 80244ea:	2800      	cmp	r0, #0
 80244ec:	f040 80eb 	bne.w	80246c6 <_vfprintf_r+0x138e>
 80244f0:	ac29      	add	r4, sp, #164	@ 0xa4
 80244f2:	e7be      	b.n	8024472 <_vfprintf_r+0x113a>
 80244f4:	2010      	movs	r0, #16
 80244f6:	4402      	add	r2, r0
 80244f8:	2b07      	cmp	r3, #7
 80244fa:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80244fe:	6060      	str	r0, [r4, #4]
 8024500:	dd08      	ble.n	8024514 <_vfprintf_r+0x11dc>
 8024502:	9803      	ldr	r0, [sp, #12]
 8024504:	aa26      	add	r2, sp, #152	@ 0x98
 8024506:	4659      	mov	r1, fp
 8024508:	f000 f982 	bl	8024810 <__sprint_r>
 802450c:	2800      	cmp	r0, #0
 802450e:	f040 80da 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024512:	a929      	add	r1, sp, #164	@ 0xa4
 8024514:	3e10      	subs	r6, #16
 8024516:	460c      	mov	r4, r1
 8024518:	e7b4      	b.n	8024484 <_vfprintf_r+0x114c>
 802451a:	460c      	mov	r4, r1
 802451c:	e7cb      	b.n	80244b6 <_vfprintf_r+0x117e>
 802451e:	9803      	ldr	r0, [sp, #12]
 8024520:	aa26      	add	r2, sp, #152	@ 0x98
 8024522:	4659      	mov	r1, fp
 8024524:	f000 f974 	bl	8024810 <__sprint_r>
 8024528:	2800      	cmp	r0, #0
 802452a:	f040 80cc 	bne.w	80246c6 <_vfprintf_r+0x138e>
 802452e:	ac29      	add	r4, sp, #164	@ 0xa4
 8024530:	e715      	b.n	802435e <_vfprintf_r+0x1026>
 8024532:	9803      	ldr	r0, [sp, #12]
 8024534:	aa26      	add	r2, sp, #152	@ 0x98
 8024536:	4659      	mov	r1, fp
 8024538:	f000 f96a 	bl	8024810 <__sprint_r>
 802453c:	2800      	cmp	r0, #0
 802453e:	f040 80c2 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024542:	ac29      	add	r4, sp, #164	@ 0xa4
 8024544:	e722      	b.n	802438c <_vfprintf_r+0x1054>
 8024546:	9904      	ldr	r1, [sp, #16]
 8024548:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802454a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802454c:	2901      	cmp	r1, #1
 802454e:	f103 0301 	add.w	r3, r3, #1
 8024552:	f102 0201 	add.w	r2, r2, #1
 8024556:	f104 0608 	add.w	r6, r4, #8
 802455a:	dc02      	bgt.n	8024562 <_vfprintf_r+0x122a>
 802455c:	07ef      	lsls	r7, r5, #31
 802455e:	f140 8086 	bpl.w	802466e <_vfprintf_r+0x1336>
 8024562:	2101      	movs	r1, #1
 8024564:	2a07      	cmp	r2, #7
 8024566:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802456a:	f8c4 8000 	str.w	r8, [r4]
 802456e:	6061      	str	r1, [r4, #4]
 8024570:	dd08      	ble.n	8024584 <_vfprintf_r+0x124c>
 8024572:	9803      	ldr	r0, [sp, #12]
 8024574:	aa26      	add	r2, sp, #152	@ 0x98
 8024576:	4659      	mov	r1, fp
 8024578:	f000 f94a 	bl	8024810 <__sprint_r>
 802457c:	2800      	cmp	r0, #0
 802457e:	f040 80a2 	bne.w	80246c6 <_vfprintf_r+0x138e>
 8024582:	ae29      	add	r6, sp, #164	@ 0xa4
 8024584:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024586:	6033      	str	r3, [r6, #0]
 8024588:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802458a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802458c:	6073      	str	r3, [r6, #4]
 802458e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024590:	4413      	add	r3, r2
 8024592:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024594:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024596:	3301      	adds	r3, #1
 8024598:	2b07      	cmp	r3, #7
 802459a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802459c:	dc33      	bgt.n	8024606 <_vfprintf_r+0x12ce>
 802459e:	3608      	adds	r6, #8
 80245a0:	9b04      	ldr	r3, [sp, #16]
 80245a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80245a6:	1e5c      	subs	r4, r3, #1
 80245a8:	2200      	movs	r2, #0
 80245aa:	2300      	movs	r3, #0
 80245ac:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 80245b0:	f7dc faa2 	bl	8000af8 <__aeabi_dcmpeq>
 80245b4:	2800      	cmp	r0, #0
 80245b6:	d12f      	bne.n	8024618 <_vfprintf_r+0x12e0>
 80245b8:	f108 0201 	add.w	r2, r8, #1
 80245bc:	e9c6 2400 	strd	r2, r4, [r6]
 80245c0:	9a04      	ldr	r2, [sp, #16]
 80245c2:	f109 0301 	add.w	r3, r9, #1
 80245c6:	3f01      	subs	r7, #1
 80245c8:	4417      	add	r7, r2
 80245ca:	2b07      	cmp	r3, #7
 80245cc:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80245d0:	dd56      	ble.n	8024680 <_vfprintf_r+0x1348>
 80245d2:	9803      	ldr	r0, [sp, #12]
 80245d4:	aa26      	add	r2, sp, #152	@ 0x98
 80245d6:	4659      	mov	r1, fp
 80245d8:	f000 f91a 	bl	8024810 <__sprint_r>
 80245dc:	2800      	cmp	r0, #0
 80245de:	d172      	bne.n	80246c6 <_vfprintf_r+0x138e>
 80245e0:	ae29      	add	r6, sp, #164	@ 0xa4
 80245e2:	ab22      	add	r3, sp, #136	@ 0x88
 80245e4:	6033      	str	r3, [r6, #0]
 80245e6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80245e8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80245ea:	6073      	str	r3, [r6, #4]
 80245ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80245ee:	4413      	add	r3, r2
 80245f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80245f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80245f4:	3301      	adds	r3, #1
 80245f6:	2b07      	cmp	r3, #7
 80245f8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80245fa:	f73f ada1 	bgt.w	8024140 <_vfprintf_r+0xe08>
 80245fe:	f106 0408 	add.w	r4, r6, #8
 8024602:	f7ff baef 	b.w	8023be4 <_vfprintf_r+0x8ac>
 8024606:	9803      	ldr	r0, [sp, #12]
 8024608:	aa26      	add	r2, sp, #152	@ 0x98
 802460a:	4659      	mov	r1, fp
 802460c:	f000 f900 	bl	8024810 <__sprint_r>
 8024610:	2800      	cmp	r0, #0
 8024612:	d158      	bne.n	80246c6 <_vfprintf_r+0x138e>
 8024614:	ae29      	add	r6, sp, #164	@ 0xa4
 8024616:	e7c3      	b.n	80245a0 <_vfprintf_r+0x1268>
 8024618:	9b04      	ldr	r3, [sp, #16]
 802461a:	2b01      	cmp	r3, #1
 802461c:	dde1      	ble.n	80245e2 <_vfprintf_r+0x12aa>
 802461e:	4f0a      	ldr	r7, [pc, #40]	@ (8024648 <_vfprintf_r+0x1310>)
 8024620:	f04f 0810 	mov.w	r8, #16
 8024624:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8024628:	2c10      	cmp	r4, #16
 802462a:	f103 0301 	add.w	r3, r3, #1
 802462e:	f106 0108 	add.w	r1, r6, #8
 8024632:	6037      	str	r7, [r6, #0]
 8024634:	dc0a      	bgt.n	802464c <_vfprintf_r+0x1314>
 8024636:	6074      	str	r4, [r6, #4]
 8024638:	2b07      	cmp	r3, #7
 802463a:	4414      	add	r4, r2
 802463c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8024640:	dcc7      	bgt.n	80245d2 <_vfprintf_r+0x129a>
 8024642:	460e      	mov	r6, r1
 8024644:	e7cd      	b.n	80245e2 <_vfprintf_r+0x12aa>
 8024646:	bf00      	nop
 8024648:	08034718 	.word	0x08034718
 802464c:	3210      	adds	r2, #16
 802464e:	2b07      	cmp	r3, #7
 8024650:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8024654:	f8c6 8004 	str.w	r8, [r6, #4]
 8024658:	dd06      	ble.n	8024668 <_vfprintf_r+0x1330>
 802465a:	9803      	ldr	r0, [sp, #12]
 802465c:	aa26      	add	r2, sp, #152	@ 0x98
 802465e:	4659      	mov	r1, fp
 8024660:	f000 f8d6 	bl	8024810 <__sprint_r>
 8024664:	bb78      	cbnz	r0, 80246c6 <_vfprintf_r+0x138e>
 8024666:	a929      	add	r1, sp, #164	@ 0xa4
 8024668:	3c10      	subs	r4, #16
 802466a:	460e      	mov	r6, r1
 802466c:	e7da      	b.n	8024624 <_vfprintf_r+0x12ec>
 802466e:	2101      	movs	r1, #1
 8024670:	2a07      	cmp	r2, #7
 8024672:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8024676:	f8c4 8000 	str.w	r8, [r4]
 802467a:	6061      	str	r1, [r4, #4]
 802467c:	ddb1      	ble.n	80245e2 <_vfprintf_r+0x12aa>
 802467e:	e7a8      	b.n	80245d2 <_vfprintf_r+0x129a>
 8024680:	3608      	adds	r6, #8
 8024682:	e7ae      	b.n	80245e2 <_vfprintf_r+0x12aa>
 8024684:	460c      	mov	r4, r1
 8024686:	f7ff baad 	b.w	8023be4 <_vfprintf_r+0x8ac>
 802468a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802468c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802468e:	1a9d      	subs	r5, r3, r2
 8024690:	2d00      	cmp	r5, #0
 8024692:	f77f aaaa 	ble.w	8023bea <_vfprintf_r+0x8b2>
 8024696:	4e3d      	ldr	r6, [pc, #244]	@ (802478c <_vfprintf_r+0x1454>)
 8024698:	2710      	movs	r7, #16
 802469a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802469e:	2d10      	cmp	r5, #16
 80246a0:	f103 0301 	add.w	r3, r3, #1
 80246a4:	6026      	str	r6, [r4, #0]
 80246a6:	dc18      	bgt.n	80246da <_vfprintf_r+0x13a2>
 80246a8:	6065      	str	r5, [r4, #4]
 80246aa:	2b07      	cmp	r3, #7
 80246ac:	4415      	add	r5, r2
 80246ae:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 80246b2:	f77f aa9a 	ble.w	8023bea <_vfprintf_r+0x8b2>
 80246b6:	9803      	ldr	r0, [sp, #12]
 80246b8:	aa26      	add	r2, sp, #152	@ 0x98
 80246ba:	4659      	mov	r1, fp
 80246bc:	f000 f8a8 	bl	8024810 <__sprint_r>
 80246c0:	2800      	cmp	r0, #0
 80246c2:	f43f aa92 	beq.w	8023bea <_vfprintf_r+0x8b2>
 80246c6:	f1ba 0f00 	cmp.w	sl, #0
 80246ca:	f43f a892 	beq.w	80237f2 <_vfprintf_r+0x4ba>
 80246ce:	9803      	ldr	r0, [sp, #12]
 80246d0:	4651      	mov	r1, sl
 80246d2:	f003 fc7b 	bl	8027fcc <_free_r>
 80246d6:	f7ff b88c 	b.w	80237f2 <_vfprintf_r+0x4ba>
 80246da:	3210      	adds	r2, #16
 80246dc:	2b07      	cmp	r3, #7
 80246de:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80246e2:	6067      	str	r7, [r4, #4]
 80246e4:	dc02      	bgt.n	80246ec <_vfprintf_r+0x13b4>
 80246e6:	3408      	adds	r4, #8
 80246e8:	3d10      	subs	r5, #16
 80246ea:	e7d6      	b.n	802469a <_vfprintf_r+0x1362>
 80246ec:	9803      	ldr	r0, [sp, #12]
 80246ee:	aa26      	add	r2, sp, #152	@ 0x98
 80246f0:	4659      	mov	r1, fp
 80246f2:	f000 f88d 	bl	8024810 <__sprint_r>
 80246f6:	2800      	cmp	r0, #0
 80246f8:	d1e5      	bne.n	80246c6 <_vfprintf_r+0x138e>
 80246fa:	ac29      	add	r4, sp, #164	@ 0xa4
 80246fc:	e7f4      	b.n	80246e8 <_vfprintf_r+0x13b0>
 80246fe:	9803      	ldr	r0, [sp, #12]
 8024700:	4651      	mov	r1, sl
 8024702:	f003 fc63 	bl	8027fcc <_free_r>
 8024706:	f7ff ba88 	b.w	8023c1a <_vfprintf_r+0x8e2>
 802470a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802470c:	b91b      	cbnz	r3, 8024716 <_vfprintf_r+0x13de>
 802470e:	2300      	movs	r3, #0
 8024710:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024712:	f7ff b86e 	b.w	80237f2 <_vfprintf_r+0x4ba>
 8024716:	9803      	ldr	r0, [sp, #12]
 8024718:	aa26      	add	r2, sp, #152	@ 0x98
 802471a:	4659      	mov	r1, fp
 802471c:	f000 f878 	bl	8024810 <__sprint_r>
 8024720:	2800      	cmp	r0, #0
 8024722:	d0f4      	beq.n	802470e <_vfprintf_r+0x13d6>
 8024724:	f7ff b865 	b.w	80237f2 <_vfprintf_r+0x4ba>
 8024728:	ea56 0207 	orrs.w	r2, r6, r7
 802472c:	9508      	str	r5, [sp, #32]
 802472e:	f43f ab75 	beq.w	8023e1c <_vfprintf_r+0xae4>
 8024732:	2b01      	cmp	r3, #1
 8024734:	f43f abf6 	beq.w	8023f24 <_vfprintf_r+0xbec>
 8024738:	2b02      	cmp	r3, #2
 802473a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 802473e:	f43f ac3a 	beq.w	8023fb6 <_vfprintf_r+0xc7e>
 8024742:	f006 0307 	and.w	r3, r6, #7
 8024746:	08f6      	lsrs	r6, r6, #3
 8024748:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802474c:	08ff      	lsrs	r7, r7, #3
 802474e:	3330      	adds	r3, #48	@ 0x30
 8024750:	ea56 0107 	orrs.w	r1, r6, r7
 8024754:	4642      	mov	r2, r8
 8024756:	f808 3d01 	strb.w	r3, [r8, #-1]!
 802475a:	d1f2      	bne.n	8024742 <_vfprintf_r+0x140a>
 802475c:	9908      	ldr	r1, [sp, #32]
 802475e:	07ce      	lsls	r6, r1, #31
 8024760:	d506      	bpl.n	8024770 <_vfprintf_r+0x1438>
 8024762:	2b30      	cmp	r3, #48	@ 0x30
 8024764:	d004      	beq.n	8024770 <_vfprintf_r+0x1438>
 8024766:	2330      	movs	r3, #48	@ 0x30
 8024768:	f808 3c01 	strb.w	r3, [r8, #-1]
 802476c:	f1a2 0802 	sub.w	r8, r2, #2
 8024770:	ab52      	add	r3, sp, #328	@ 0x148
 8024772:	9d08      	ldr	r5, [sp, #32]
 8024774:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8024778:	f04f 0a00 	mov.w	sl, #0
 802477c:	eba3 0908 	sub.w	r9, r3, r8
 8024780:	4657      	mov	r7, sl
 8024782:	f8cd a020 	str.w	sl, [sp, #32]
 8024786:	4656      	mov	r6, sl
 8024788:	f7ff b978 	b.w	8023a7c <_vfprintf_r+0x744>
 802478c:	08034728 	.word	0x08034728

08024790 <__sbprintf>:
 8024790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024792:	461f      	mov	r7, r3
 8024794:	898b      	ldrh	r3, [r1, #12]
 8024796:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802479a:	f023 0302 	bic.w	r3, r3, #2
 802479e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80247a2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80247a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80247a6:	89cb      	ldrh	r3, [r1, #14]
 80247a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80247ac:	69cb      	ldr	r3, [r1, #28]
 80247ae:	9307      	str	r3, [sp, #28]
 80247b0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80247b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80247b4:	ab1a      	add	r3, sp, #104	@ 0x68
 80247b6:	9300      	str	r3, [sp, #0]
 80247b8:	9304      	str	r3, [sp, #16]
 80247ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80247be:	4615      	mov	r5, r2
 80247c0:	4606      	mov	r6, r0
 80247c2:	9302      	str	r3, [sp, #8]
 80247c4:	9305      	str	r3, [sp, #20]
 80247c6:	a816      	add	r0, sp, #88	@ 0x58
 80247c8:	2300      	movs	r3, #0
 80247ca:	460c      	mov	r4, r1
 80247cc:	9306      	str	r3, [sp, #24]
 80247ce:	f002 fcf5 	bl	80271bc <__retarget_lock_init_recursive>
 80247d2:	462a      	mov	r2, r5
 80247d4:	463b      	mov	r3, r7
 80247d6:	4669      	mov	r1, sp
 80247d8:	4630      	mov	r0, r6
 80247da:	f7fe fdad 	bl	8023338 <_vfprintf_r>
 80247de:	1e05      	subs	r5, r0, #0
 80247e0:	db07      	blt.n	80247f2 <__sbprintf+0x62>
 80247e2:	4669      	mov	r1, sp
 80247e4:	4630      	mov	r0, r6
 80247e6:	f000 fecb 	bl	8025580 <_fflush_r>
 80247ea:	2800      	cmp	r0, #0
 80247ec:	bf18      	it	ne
 80247ee:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 80247f2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80247f6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80247f8:	065b      	lsls	r3, r3, #25
 80247fa:	bf42      	ittt	mi
 80247fc:	89a3      	ldrhmi	r3, [r4, #12]
 80247fe:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8024802:	81a3      	strhmi	r3, [r4, #12]
 8024804:	f002 fcdb 	bl	80271be <__retarget_lock_close_recursive>
 8024808:	4628      	mov	r0, r5
 802480a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802480e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024810 <__sprint_r>:
 8024810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024814:	6893      	ldr	r3, [r2, #8]
 8024816:	4680      	mov	r8, r0
 8024818:	460e      	mov	r6, r1
 802481a:	4614      	mov	r4, r2
 802481c:	b343      	cbz	r3, 8024870 <__sprint_r+0x60>
 802481e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8024820:	049d      	lsls	r5, r3, #18
 8024822:	d522      	bpl.n	802486a <__sprint_r+0x5a>
 8024824:	6815      	ldr	r5, [r2, #0]
 8024826:	68a0      	ldr	r0, [r4, #8]
 8024828:	3508      	adds	r5, #8
 802482a:	b928      	cbnz	r0, 8024838 <__sprint_r+0x28>
 802482c:	2300      	movs	r3, #0
 802482e:	60a3      	str	r3, [r4, #8]
 8024830:	2300      	movs	r3, #0
 8024832:	6063      	str	r3, [r4, #4]
 8024834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024838:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 802483c:	f04f 0900 	mov.w	r9, #0
 8024840:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8024844:	45ca      	cmp	sl, r9
 8024846:	dc05      	bgt.n	8024854 <__sprint_r+0x44>
 8024848:	68a3      	ldr	r3, [r4, #8]
 802484a:	f027 0703 	bic.w	r7, r7, #3
 802484e:	1bdb      	subs	r3, r3, r7
 8024850:	60a3      	str	r3, [r4, #8]
 8024852:	e7e8      	b.n	8024826 <__sprint_r+0x16>
 8024854:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8024858:	4632      	mov	r2, r6
 802485a:	4640      	mov	r0, r8
 802485c:	f001 fa35 	bl	8025cca <_fputwc_r>
 8024860:	1c43      	adds	r3, r0, #1
 8024862:	d0e3      	beq.n	802482c <__sprint_r+0x1c>
 8024864:	f109 0901 	add.w	r9, r9, #1
 8024868:	e7ec      	b.n	8024844 <__sprint_r+0x34>
 802486a:	f001 f81d 	bl	80258a8 <__sfvwrite_r>
 802486e:	e7dd      	b.n	802482c <__sprint_r+0x1c>
 8024870:	4618      	mov	r0, r3
 8024872:	e7dd      	b.n	8024830 <__sprint_r+0x20>

08024874 <_vfiprintf_r>:
 8024874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024878:	b0bb      	sub	sp, #236	@ 0xec
 802487a:	460f      	mov	r7, r1
 802487c:	4693      	mov	fp, r2
 802487e:	461c      	mov	r4, r3
 8024880:	461d      	mov	r5, r3
 8024882:	9000      	str	r0, [sp, #0]
 8024884:	b118      	cbz	r0, 802488e <_vfiprintf_r+0x1a>
 8024886:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8024888:	b90b      	cbnz	r3, 802488e <_vfiprintf_r+0x1a>
 802488a:	f000 ffbb 	bl	8025804 <__sinit>
 802488e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024890:	07db      	lsls	r3, r3, #31
 8024892:	d405      	bmi.n	80248a0 <_vfiprintf_r+0x2c>
 8024894:	89bb      	ldrh	r3, [r7, #12]
 8024896:	059e      	lsls	r6, r3, #22
 8024898:	d402      	bmi.n	80248a0 <_vfiprintf_r+0x2c>
 802489a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802489c:	f002 fc91 	bl	80271c2 <__retarget_lock_acquire_recursive>
 80248a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80248a4:	0498      	lsls	r0, r3, #18
 80248a6:	d406      	bmi.n	80248b6 <_vfiprintf_r+0x42>
 80248a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80248ac:	81bb      	strh	r3, [r7, #12]
 80248ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80248b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80248b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80248b6:	89bb      	ldrh	r3, [r7, #12]
 80248b8:	0719      	lsls	r1, r3, #28
 80248ba:	d501      	bpl.n	80248c0 <_vfiprintf_r+0x4c>
 80248bc:	693b      	ldr	r3, [r7, #16]
 80248be:	b9ab      	cbnz	r3, 80248ec <_vfiprintf_r+0x78>
 80248c0:	9800      	ldr	r0, [sp, #0]
 80248c2:	4639      	mov	r1, r7
 80248c4:	f001 f95a 	bl	8025b7c <__swsetup_r>
 80248c8:	b180      	cbz	r0, 80248ec <_vfiprintf_r+0x78>
 80248ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80248cc:	07da      	lsls	r2, r3, #31
 80248ce:	d506      	bpl.n	80248de <_vfiprintf_r+0x6a>
 80248d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80248d4:	9303      	str	r3, [sp, #12]
 80248d6:	9803      	ldr	r0, [sp, #12]
 80248d8:	b03b      	add	sp, #236	@ 0xec
 80248da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248de:	89bb      	ldrh	r3, [r7, #12]
 80248e0:	059b      	lsls	r3, r3, #22
 80248e2:	d4f5      	bmi.n	80248d0 <_vfiprintf_r+0x5c>
 80248e4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80248e6:	f002 fc6e 	bl	80271c6 <__retarget_lock_release_recursive>
 80248ea:	e7f1      	b.n	80248d0 <_vfiprintf_r+0x5c>
 80248ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80248f0:	f003 021a 	and.w	r2, r3, #26
 80248f4:	2a0a      	cmp	r2, #10
 80248f6:	d114      	bne.n	8024922 <_vfiprintf_r+0xae>
 80248f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80248fc:	2a00      	cmp	r2, #0
 80248fe:	db10      	blt.n	8024922 <_vfiprintf_r+0xae>
 8024900:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8024902:	07d6      	lsls	r6, r2, #31
 8024904:	d404      	bmi.n	8024910 <_vfiprintf_r+0x9c>
 8024906:	059d      	lsls	r5, r3, #22
 8024908:	d402      	bmi.n	8024910 <_vfiprintf_r+0x9c>
 802490a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802490c:	f002 fc5b 	bl	80271c6 <__retarget_lock_release_recursive>
 8024910:	9800      	ldr	r0, [sp, #0]
 8024912:	4623      	mov	r3, r4
 8024914:	465a      	mov	r2, fp
 8024916:	4639      	mov	r1, r7
 8024918:	b03b      	add	sp, #236	@ 0xec
 802491a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802491e:	f000 bc31 	b.w	8025184 <__sbprintf>
 8024922:	2300      	movs	r3, #0
 8024924:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8024928:	e9cd 3305 	strd	r3, r3, [sp, #20]
 802492c:	ae11      	add	r6, sp, #68	@ 0x44
 802492e:	960e      	str	r6, [sp, #56]	@ 0x38
 8024930:	9307      	str	r3, [sp, #28]
 8024932:	9309      	str	r3, [sp, #36]	@ 0x24
 8024934:	9303      	str	r3, [sp, #12]
 8024936:	465b      	mov	r3, fp
 8024938:	461c      	mov	r4, r3
 802493a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802493e:	b10a      	cbz	r2, 8024944 <_vfiprintf_r+0xd0>
 8024940:	2a25      	cmp	r2, #37	@ 0x25
 8024942:	d1f9      	bne.n	8024938 <_vfiprintf_r+0xc4>
 8024944:	ebb4 080b 	subs.w	r8, r4, fp
 8024948:	d00d      	beq.n	8024966 <_vfiprintf_r+0xf2>
 802494a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802494c:	4443      	add	r3, r8
 802494e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024952:	3301      	adds	r3, #1
 8024954:	2b07      	cmp	r3, #7
 8024956:	e9c6 b800 	strd	fp, r8, [r6]
 802495a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802495c:	dc75      	bgt.n	8024a4a <_vfiprintf_r+0x1d6>
 802495e:	3608      	adds	r6, #8
 8024960:	9b03      	ldr	r3, [sp, #12]
 8024962:	4443      	add	r3, r8
 8024964:	9303      	str	r3, [sp, #12]
 8024966:	7823      	ldrb	r3, [r4, #0]
 8024968:	2b00      	cmp	r3, #0
 802496a:	f000 83cd 	beq.w	8025108 <_vfiprintf_r+0x894>
 802496e:	2300      	movs	r3, #0
 8024970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024974:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8024978:	3401      	adds	r4, #1
 802497a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802497e:	469a      	mov	sl, r3
 8024980:	46a3      	mov	fp, r4
 8024982:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8024986:	f1a3 0220 	sub.w	r2, r3, #32
 802498a:	2a5a      	cmp	r2, #90	@ 0x5a
 802498c:	f200 8316 	bhi.w	8024fbc <_vfiprintf_r+0x748>
 8024990:	e8df f012 	tbh	[pc, r2, lsl #1]
 8024994:	0314009a 	.word	0x0314009a
 8024998:	00a20314 	.word	0x00a20314
 802499c:	03140314 	.word	0x03140314
 80249a0:	00820314 	.word	0x00820314
 80249a4:	03140314 	.word	0x03140314
 80249a8:	00af00a5 	.word	0x00af00a5
 80249ac:	00ac0314 	.word	0x00ac0314
 80249b0:	031400b1 	.word	0x031400b1
 80249b4:	00d000cd 	.word	0x00d000cd
 80249b8:	00d000d0 	.word	0x00d000d0
 80249bc:	00d000d0 	.word	0x00d000d0
 80249c0:	00d000d0 	.word	0x00d000d0
 80249c4:	00d000d0 	.word	0x00d000d0
 80249c8:	03140314 	.word	0x03140314
 80249cc:	03140314 	.word	0x03140314
 80249d0:	03140314 	.word	0x03140314
 80249d4:	03140314 	.word	0x03140314
 80249d8:	00f70314 	.word	0x00f70314
 80249dc:	03140104 	.word	0x03140104
 80249e0:	03140314 	.word	0x03140314
 80249e4:	03140314 	.word	0x03140314
 80249e8:	03140314 	.word	0x03140314
 80249ec:	03140314 	.word	0x03140314
 80249f0:	01520314 	.word	0x01520314
 80249f4:	03140314 	.word	0x03140314
 80249f8:	019a0314 	.word	0x019a0314
 80249fc:	027a0314 	.word	0x027a0314
 8024a00:	03140314 	.word	0x03140314
 8024a04:	0314029a 	.word	0x0314029a
 8024a08:	03140314 	.word	0x03140314
 8024a0c:	03140314 	.word	0x03140314
 8024a10:	03140314 	.word	0x03140314
 8024a14:	03140314 	.word	0x03140314
 8024a18:	00f70314 	.word	0x00f70314
 8024a1c:	03140106 	.word	0x03140106
 8024a20:	03140314 	.word	0x03140314
 8024a24:	010600e0 	.word	0x010600e0
 8024a28:	031400f1 	.word	0x031400f1
 8024a2c:	031400eb 	.word	0x031400eb
 8024a30:	01540132 	.word	0x01540132
 8024a34:	00f10189 	.word	0x00f10189
 8024a38:	019a0314 	.word	0x019a0314
 8024a3c:	027c0098 	.word	0x027c0098
 8024a40:	03140314 	.word	0x03140314
 8024a44:	03140065 	.word	0x03140065
 8024a48:	0098      	.short	0x0098
 8024a4a:	9800      	ldr	r0, [sp, #0]
 8024a4c:	aa0e      	add	r2, sp, #56	@ 0x38
 8024a4e:	4639      	mov	r1, r7
 8024a50:	f7ff fede 	bl	8024810 <__sprint_r>
 8024a54:	2800      	cmp	r0, #0
 8024a56:	f040 8336 	bne.w	80250c6 <_vfiprintf_r+0x852>
 8024a5a:	ae11      	add	r6, sp, #68	@ 0x44
 8024a5c:	e780      	b.n	8024960 <_vfiprintf_r+0xec>
 8024a5e:	4a99      	ldr	r2, [pc, #612]	@ (8024cc4 <_vfiprintf_r+0x450>)
 8024a60:	9205      	str	r2, [sp, #20]
 8024a62:	f01a 0220 	ands.w	r2, sl, #32
 8024a66:	f000 8231 	beq.w	8024ecc <_vfiprintf_r+0x658>
 8024a6a:	3507      	adds	r5, #7
 8024a6c:	f025 0507 	bic.w	r5, r5, #7
 8024a70:	46a8      	mov	r8, r5
 8024a72:	686d      	ldr	r5, [r5, #4]
 8024a74:	f858 4b08 	ldr.w	r4, [r8], #8
 8024a78:	f01a 0f01 	tst.w	sl, #1
 8024a7c:	d009      	beq.n	8024a92 <_vfiprintf_r+0x21e>
 8024a7e:	ea54 0205 	orrs.w	r2, r4, r5
 8024a82:	bf1f      	itttt	ne
 8024a84:	2230      	movne	r2, #48	@ 0x30
 8024a86:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8024a8a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8024a8e:	f04a 0a02 	orrne.w	sl, sl, #2
 8024a92:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8024a96:	e112      	b.n	8024cbe <_vfiprintf_r+0x44a>
 8024a98:	9800      	ldr	r0, [sp, #0]
 8024a9a:	f002 fae7 	bl	802706c <_localeconv_r>
 8024a9e:	6843      	ldr	r3, [r0, #4]
 8024aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8024aa2:	4618      	mov	r0, r3
 8024aa4:	f7db fbfc 	bl	80002a0 <strlen>
 8024aa8:	9007      	str	r0, [sp, #28]
 8024aaa:	9800      	ldr	r0, [sp, #0]
 8024aac:	f002 fade 	bl	802706c <_localeconv_r>
 8024ab0:	6883      	ldr	r3, [r0, #8]
 8024ab2:	9306      	str	r3, [sp, #24]
 8024ab4:	9b07      	ldr	r3, [sp, #28]
 8024ab6:	b12b      	cbz	r3, 8024ac4 <_vfiprintf_r+0x250>
 8024ab8:	9b06      	ldr	r3, [sp, #24]
 8024aba:	b11b      	cbz	r3, 8024ac4 <_vfiprintf_r+0x250>
 8024abc:	781b      	ldrb	r3, [r3, #0]
 8024abe:	b10b      	cbz	r3, 8024ac4 <_vfiprintf_r+0x250>
 8024ac0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8024ac4:	465c      	mov	r4, fp
 8024ac6:	e75b      	b.n	8024980 <_vfiprintf_r+0x10c>
 8024ac8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8024acc:	2b00      	cmp	r3, #0
 8024ace:	d1f9      	bne.n	8024ac4 <_vfiprintf_r+0x250>
 8024ad0:	2320      	movs	r3, #32
 8024ad2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8024ad6:	e7f5      	b.n	8024ac4 <_vfiprintf_r+0x250>
 8024ad8:	f04a 0a01 	orr.w	sl, sl, #1
 8024adc:	e7f2      	b.n	8024ac4 <_vfiprintf_r+0x250>
 8024ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8024ae2:	9302      	str	r3, [sp, #8]
 8024ae4:	2b00      	cmp	r3, #0
 8024ae6:	daed      	bge.n	8024ac4 <_vfiprintf_r+0x250>
 8024ae8:	425b      	negs	r3, r3
 8024aea:	9302      	str	r3, [sp, #8]
 8024aec:	f04a 0a04 	orr.w	sl, sl, #4
 8024af0:	e7e8      	b.n	8024ac4 <_vfiprintf_r+0x250>
 8024af2:	232b      	movs	r3, #43	@ 0x2b
 8024af4:	e7ed      	b.n	8024ad2 <_vfiprintf_r+0x25e>
 8024af6:	465a      	mov	r2, fp
 8024af8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8024afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8024afe:	d112      	bne.n	8024b26 <_vfiprintf_r+0x2b2>
 8024b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8024b04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024b08:	9301      	str	r3, [sp, #4]
 8024b0a:	4693      	mov	fp, r2
 8024b0c:	e7da      	b.n	8024ac4 <_vfiprintf_r+0x250>
 8024b0e:	9b01      	ldr	r3, [sp, #4]
 8024b10:	fb00 1303 	mla	r3, r0, r3, r1
 8024b14:	9301      	str	r3, [sp, #4]
 8024b16:	f812 3b01 	ldrb.w	r3, [r2], #1
 8024b1a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8024b1e:	2909      	cmp	r1, #9
 8024b20:	d9f5      	bls.n	8024b0e <_vfiprintf_r+0x29a>
 8024b22:	4693      	mov	fp, r2
 8024b24:	e72f      	b.n	8024986 <_vfiprintf_r+0x112>
 8024b26:	2100      	movs	r1, #0
 8024b28:	9101      	str	r1, [sp, #4]
 8024b2a:	200a      	movs	r0, #10
 8024b2c:	e7f5      	b.n	8024b1a <_vfiprintf_r+0x2a6>
 8024b2e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8024b32:	e7c7      	b.n	8024ac4 <_vfiprintf_r+0x250>
 8024b34:	2100      	movs	r1, #0
 8024b36:	465a      	mov	r2, fp
 8024b38:	9102      	str	r1, [sp, #8]
 8024b3a:	200a      	movs	r0, #10
 8024b3c:	9902      	ldr	r1, [sp, #8]
 8024b3e:	3b30      	subs	r3, #48	@ 0x30
 8024b40:	fb00 3301 	mla	r3, r0, r1, r3
 8024b44:	9302      	str	r3, [sp, #8]
 8024b46:	f812 3b01 	ldrb.w	r3, [r2], #1
 8024b4a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8024b4e:	2909      	cmp	r1, #9
 8024b50:	d9f4      	bls.n	8024b3c <_vfiprintf_r+0x2c8>
 8024b52:	e7e6      	b.n	8024b22 <_vfiprintf_r+0x2ae>
 8024b54:	f89b 3000 	ldrb.w	r3, [fp]
 8024b58:	2b68      	cmp	r3, #104	@ 0x68
 8024b5a:	bf06      	itte	eq
 8024b5c:	f10b 0b01 	addeq.w	fp, fp, #1
 8024b60:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8024b64:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8024b68:	e7ac      	b.n	8024ac4 <_vfiprintf_r+0x250>
 8024b6a:	f89b 3000 	ldrb.w	r3, [fp]
 8024b6e:	2b6c      	cmp	r3, #108	@ 0x6c
 8024b70:	d104      	bne.n	8024b7c <_vfiprintf_r+0x308>
 8024b72:	f10b 0b01 	add.w	fp, fp, #1
 8024b76:	f04a 0a20 	orr.w	sl, sl, #32
 8024b7a:	e7a3      	b.n	8024ac4 <_vfiprintf_r+0x250>
 8024b7c:	f04a 0a10 	orr.w	sl, sl, #16
 8024b80:	e7a0      	b.n	8024ac4 <_vfiprintf_r+0x250>
 8024b82:	46a8      	mov	r8, r5
 8024b84:	2400      	movs	r4, #0
 8024b86:	f858 3b04 	ldr.w	r3, [r8], #4
 8024b8a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8024b8e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8024b92:	2301      	movs	r3, #1
 8024b94:	9301      	str	r3, [sp, #4]
 8024b96:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8024b9a:	e0ab      	b.n	8024cf4 <_vfiprintf_r+0x480>
 8024b9c:	f04a 0a10 	orr.w	sl, sl, #16
 8024ba0:	f01a 0f20 	tst.w	sl, #32
 8024ba4:	d011      	beq.n	8024bca <_vfiprintf_r+0x356>
 8024ba6:	3507      	adds	r5, #7
 8024ba8:	f025 0507 	bic.w	r5, r5, #7
 8024bac:	46a8      	mov	r8, r5
 8024bae:	686d      	ldr	r5, [r5, #4]
 8024bb0:	f858 4b08 	ldr.w	r4, [r8], #8
 8024bb4:	2d00      	cmp	r5, #0
 8024bb6:	da06      	bge.n	8024bc6 <_vfiprintf_r+0x352>
 8024bb8:	4264      	negs	r4, r4
 8024bba:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8024bbe:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8024bc2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8024bc6:	2301      	movs	r3, #1
 8024bc8:	e048      	b.n	8024c5c <_vfiprintf_r+0x3e8>
 8024bca:	46a8      	mov	r8, r5
 8024bcc:	f01a 0f10 	tst.w	sl, #16
 8024bd0:	f858 5b04 	ldr.w	r5, [r8], #4
 8024bd4:	d002      	beq.n	8024bdc <_vfiprintf_r+0x368>
 8024bd6:	462c      	mov	r4, r5
 8024bd8:	17ed      	asrs	r5, r5, #31
 8024bda:	e7eb      	b.n	8024bb4 <_vfiprintf_r+0x340>
 8024bdc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8024be0:	d003      	beq.n	8024bea <_vfiprintf_r+0x376>
 8024be2:	b22c      	sxth	r4, r5
 8024be4:	f345 35c0 	sbfx	r5, r5, #15, #1
 8024be8:	e7e4      	b.n	8024bb4 <_vfiprintf_r+0x340>
 8024bea:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8024bee:	d0f2      	beq.n	8024bd6 <_vfiprintf_r+0x362>
 8024bf0:	b26c      	sxtb	r4, r5
 8024bf2:	f345 15c0 	sbfx	r5, r5, #7, #1
 8024bf6:	e7dd      	b.n	8024bb4 <_vfiprintf_r+0x340>
 8024bf8:	f01a 0f20 	tst.w	sl, #32
 8024bfc:	d007      	beq.n	8024c0e <_vfiprintf_r+0x39a>
 8024bfe:	9a03      	ldr	r2, [sp, #12]
 8024c00:	682b      	ldr	r3, [r5, #0]
 8024c02:	9903      	ldr	r1, [sp, #12]
 8024c04:	17d2      	asrs	r2, r2, #31
 8024c06:	e9c3 1200 	strd	r1, r2, [r3]
 8024c0a:	3504      	adds	r5, #4
 8024c0c:	e693      	b.n	8024936 <_vfiprintf_r+0xc2>
 8024c0e:	f01a 0f10 	tst.w	sl, #16
 8024c12:	d003      	beq.n	8024c1c <_vfiprintf_r+0x3a8>
 8024c14:	682b      	ldr	r3, [r5, #0]
 8024c16:	9a03      	ldr	r2, [sp, #12]
 8024c18:	601a      	str	r2, [r3, #0]
 8024c1a:	e7f6      	b.n	8024c0a <_vfiprintf_r+0x396>
 8024c1c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8024c20:	d003      	beq.n	8024c2a <_vfiprintf_r+0x3b6>
 8024c22:	682b      	ldr	r3, [r5, #0]
 8024c24:	9a03      	ldr	r2, [sp, #12]
 8024c26:	801a      	strh	r2, [r3, #0]
 8024c28:	e7ef      	b.n	8024c0a <_vfiprintf_r+0x396>
 8024c2a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8024c2e:	d0f1      	beq.n	8024c14 <_vfiprintf_r+0x3a0>
 8024c30:	682b      	ldr	r3, [r5, #0]
 8024c32:	9a03      	ldr	r2, [sp, #12]
 8024c34:	701a      	strb	r2, [r3, #0]
 8024c36:	e7e8      	b.n	8024c0a <_vfiprintf_r+0x396>
 8024c38:	f04a 0a10 	orr.w	sl, sl, #16
 8024c3c:	f01a 0320 	ands.w	r3, sl, #32
 8024c40:	d01f      	beq.n	8024c82 <_vfiprintf_r+0x40e>
 8024c42:	3507      	adds	r5, #7
 8024c44:	f025 0507 	bic.w	r5, r5, #7
 8024c48:	46a8      	mov	r8, r5
 8024c4a:	686d      	ldr	r5, [r5, #4]
 8024c4c:	f858 4b08 	ldr.w	r4, [r8], #8
 8024c50:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8024c54:	2300      	movs	r3, #0
 8024c56:	2200      	movs	r2, #0
 8024c58:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8024c5c:	9a01      	ldr	r2, [sp, #4]
 8024c5e:	3201      	adds	r2, #1
 8024c60:	f000 825f 	beq.w	8025122 <_vfiprintf_r+0x8ae>
 8024c64:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8024c68:	9204      	str	r2, [sp, #16]
 8024c6a:	ea54 0205 	orrs.w	r2, r4, r5
 8024c6e:	f040 825e 	bne.w	802512e <_vfiprintf_r+0x8ba>
 8024c72:	9a01      	ldr	r2, [sp, #4]
 8024c74:	2a00      	cmp	r2, #0
 8024c76:	f000 8198 	beq.w	8024faa <_vfiprintf_r+0x736>
 8024c7a:	2b01      	cmp	r3, #1
 8024c7c:	f040 825a 	bne.w	8025134 <_vfiprintf_r+0x8c0>
 8024c80:	e13b      	b.n	8024efa <_vfiprintf_r+0x686>
 8024c82:	46a8      	mov	r8, r5
 8024c84:	f01a 0510 	ands.w	r5, sl, #16
 8024c88:	f858 4b04 	ldr.w	r4, [r8], #4
 8024c8c:	d001      	beq.n	8024c92 <_vfiprintf_r+0x41e>
 8024c8e:	461d      	mov	r5, r3
 8024c90:	e7de      	b.n	8024c50 <_vfiprintf_r+0x3dc>
 8024c92:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8024c96:	d001      	beq.n	8024c9c <_vfiprintf_r+0x428>
 8024c98:	b2a4      	uxth	r4, r4
 8024c9a:	e7d9      	b.n	8024c50 <_vfiprintf_r+0x3dc>
 8024c9c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8024ca0:	d0d6      	beq.n	8024c50 <_vfiprintf_r+0x3dc>
 8024ca2:	b2e4      	uxtb	r4, r4
 8024ca4:	e7f3      	b.n	8024c8e <_vfiprintf_r+0x41a>
 8024ca6:	46a8      	mov	r8, r5
 8024ca8:	f647 0330 	movw	r3, #30768	@ 0x7830
 8024cac:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8024cb0:	f858 4b04 	ldr.w	r4, [r8], #4
 8024cb4:	4b03      	ldr	r3, [pc, #12]	@ (8024cc4 <_vfiprintf_r+0x450>)
 8024cb6:	9305      	str	r3, [sp, #20]
 8024cb8:	2500      	movs	r5, #0
 8024cba:	f04a 0a02 	orr.w	sl, sl, #2
 8024cbe:	2302      	movs	r3, #2
 8024cc0:	e7c9      	b.n	8024c56 <_vfiprintf_r+0x3e2>
 8024cc2:	bf00      	nop
 8024cc4:	080346f4 	.word	0x080346f4
 8024cc8:	9b01      	ldr	r3, [sp, #4]
 8024cca:	46a8      	mov	r8, r5
 8024ccc:	1c5c      	adds	r4, r3, #1
 8024cce:	f04f 0500 	mov.w	r5, #0
 8024cd2:	f858 9b04 	ldr.w	r9, [r8], #4
 8024cd6:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8024cda:	f000 80d0 	beq.w	8024e7e <_vfiprintf_r+0x60a>
 8024cde:	461a      	mov	r2, r3
 8024ce0:	4629      	mov	r1, r5
 8024ce2:	4648      	mov	r0, r9
 8024ce4:	f7db fa8c 	bl	8000200 <memchr>
 8024ce8:	4604      	mov	r4, r0
 8024cea:	b118      	cbz	r0, 8024cf4 <_vfiprintf_r+0x480>
 8024cec:	eba0 0309 	sub.w	r3, r0, r9
 8024cf0:	9301      	str	r3, [sp, #4]
 8024cf2:	462c      	mov	r4, r5
 8024cf4:	9b01      	ldr	r3, [sp, #4]
 8024cf6:	42a3      	cmp	r3, r4
 8024cf8:	bfb8      	it	lt
 8024cfa:	4623      	movlt	r3, r4
 8024cfc:	9304      	str	r3, [sp, #16]
 8024cfe:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8024d02:	b113      	cbz	r3, 8024d0a <_vfiprintf_r+0x496>
 8024d04:	9b04      	ldr	r3, [sp, #16]
 8024d06:	3301      	adds	r3, #1
 8024d08:	9304      	str	r3, [sp, #16]
 8024d0a:	f01a 0302 	ands.w	r3, sl, #2
 8024d0e:	9308      	str	r3, [sp, #32]
 8024d10:	bf1e      	ittt	ne
 8024d12:	9b04      	ldrne	r3, [sp, #16]
 8024d14:	3302      	addne	r3, #2
 8024d16:	9304      	strne	r3, [sp, #16]
 8024d18:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8024d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8024d1e:	d11f      	bne.n	8024d60 <_vfiprintf_r+0x4ec>
 8024d20:	9b02      	ldr	r3, [sp, #8]
 8024d22:	9a04      	ldr	r2, [sp, #16]
 8024d24:	1a9d      	subs	r5, r3, r2
 8024d26:	2d00      	cmp	r5, #0
 8024d28:	dd1a      	ble.n	8024d60 <_vfiprintf_r+0x4ec>
 8024d2a:	4ba9      	ldr	r3, [pc, #676]	@ (8024fd0 <_vfiprintf_r+0x75c>)
 8024d2c:	6033      	str	r3, [r6, #0]
 8024d2e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8024d32:	2d10      	cmp	r5, #16
 8024d34:	f102 0201 	add.w	r2, r2, #1
 8024d38:	f106 0008 	add.w	r0, r6, #8
 8024d3c:	f300 814e 	bgt.w	8024fdc <_vfiprintf_r+0x768>
 8024d40:	6075      	str	r5, [r6, #4]
 8024d42:	2a07      	cmp	r2, #7
 8024d44:	4465      	add	r5, ip
 8024d46:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8024d4a:	f340 815a 	ble.w	8025002 <_vfiprintf_r+0x78e>
 8024d4e:	9800      	ldr	r0, [sp, #0]
 8024d50:	aa0e      	add	r2, sp, #56	@ 0x38
 8024d52:	4639      	mov	r1, r7
 8024d54:	f7ff fd5c 	bl	8024810 <__sprint_r>
 8024d58:	2800      	cmp	r0, #0
 8024d5a:	f040 81b4 	bne.w	80250c6 <_vfiprintf_r+0x852>
 8024d5e:	ae11      	add	r6, sp, #68	@ 0x44
 8024d60:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8024d64:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024d68:	b161      	cbz	r1, 8024d84 <_vfiprintf_r+0x510>
 8024d6a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8024d6e:	3301      	adds	r3, #1
 8024d70:	6031      	str	r1, [r6, #0]
 8024d72:	2101      	movs	r1, #1
 8024d74:	440a      	add	r2, r1
 8024d76:	2b07      	cmp	r3, #7
 8024d78:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8024d7c:	6071      	str	r1, [r6, #4]
 8024d7e:	f300 8142 	bgt.w	8025006 <_vfiprintf_r+0x792>
 8024d82:	3608      	adds	r6, #8
 8024d84:	9908      	ldr	r1, [sp, #32]
 8024d86:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024d8a:	b159      	cbz	r1, 8024da4 <_vfiprintf_r+0x530>
 8024d8c:	a90d      	add	r1, sp, #52	@ 0x34
 8024d8e:	3301      	adds	r3, #1
 8024d90:	6031      	str	r1, [r6, #0]
 8024d92:	2102      	movs	r1, #2
 8024d94:	440a      	add	r2, r1
 8024d96:	2b07      	cmp	r3, #7
 8024d98:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8024d9c:	6071      	str	r1, [r6, #4]
 8024d9e:	f300 813b 	bgt.w	8025018 <_vfiprintf_r+0x7a4>
 8024da2:	3608      	adds	r6, #8
 8024da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024da6:	2b80      	cmp	r3, #128	@ 0x80
 8024da8:	d11f      	bne.n	8024dea <_vfiprintf_r+0x576>
 8024daa:	9b02      	ldr	r3, [sp, #8]
 8024dac:	9a04      	ldr	r2, [sp, #16]
 8024dae:	1a9d      	subs	r5, r3, r2
 8024db0:	2d00      	cmp	r5, #0
 8024db2:	dd1a      	ble.n	8024dea <_vfiprintf_r+0x576>
 8024db4:	4b87      	ldr	r3, [pc, #540]	@ (8024fd4 <_vfiprintf_r+0x760>)
 8024db6:	6033      	str	r3, [r6, #0]
 8024db8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8024dbc:	2d10      	cmp	r5, #16
 8024dbe:	f102 0201 	add.w	r2, r2, #1
 8024dc2:	f106 0008 	add.w	r0, r6, #8
 8024dc6:	f300 8130 	bgt.w	802502a <_vfiprintf_r+0x7b6>
 8024dca:	6075      	str	r5, [r6, #4]
 8024dcc:	2a07      	cmp	r2, #7
 8024dce:	4465      	add	r5, ip
 8024dd0:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8024dd4:	f340 813c 	ble.w	8025050 <_vfiprintf_r+0x7dc>
 8024dd8:	9800      	ldr	r0, [sp, #0]
 8024dda:	aa0e      	add	r2, sp, #56	@ 0x38
 8024ddc:	4639      	mov	r1, r7
 8024dde:	f7ff fd17 	bl	8024810 <__sprint_r>
 8024de2:	2800      	cmp	r0, #0
 8024de4:	f040 816f 	bne.w	80250c6 <_vfiprintf_r+0x852>
 8024de8:	ae11      	add	r6, sp, #68	@ 0x44
 8024dea:	9b01      	ldr	r3, [sp, #4]
 8024dec:	1ae4      	subs	r4, r4, r3
 8024dee:	2c00      	cmp	r4, #0
 8024df0:	dd1a      	ble.n	8024e28 <_vfiprintf_r+0x5b4>
 8024df2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8024df6:	4877      	ldr	r0, [pc, #476]	@ (8024fd4 <_vfiprintf_r+0x760>)
 8024df8:	6030      	str	r0, [r6, #0]
 8024dfa:	2c10      	cmp	r4, #16
 8024dfc:	f103 0301 	add.w	r3, r3, #1
 8024e00:	f106 0108 	add.w	r1, r6, #8
 8024e04:	f300 8126 	bgt.w	8025054 <_vfiprintf_r+0x7e0>
 8024e08:	6074      	str	r4, [r6, #4]
 8024e0a:	2b07      	cmp	r3, #7
 8024e0c:	4414      	add	r4, r2
 8024e0e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8024e12:	f340 8130 	ble.w	8025076 <_vfiprintf_r+0x802>
 8024e16:	9800      	ldr	r0, [sp, #0]
 8024e18:	aa0e      	add	r2, sp, #56	@ 0x38
 8024e1a:	4639      	mov	r1, r7
 8024e1c:	f7ff fcf8 	bl	8024810 <__sprint_r>
 8024e20:	2800      	cmp	r0, #0
 8024e22:	f040 8150 	bne.w	80250c6 <_vfiprintf_r+0x852>
 8024e26:	ae11      	add	r6, sp, #68	@ 0x44
 8024e28:	9b01      	ldr	r3, [sp, #4]
 8024e2a:	9a01      	ldr	r2, [sp, #4]
 8024e2c:	6073      	str	r3, [r6, #4]
 8024e2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024e30:	f8c6 9000 	str.w	r9, [r6]
 8024e34:	4413      	add	r3, r2
 8024e36:	9310      	str	r3, [sp, #64]	@ 0x40
 8024e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024e3a:	3301      	adds	r3, #1
 8024e3c:	2b07      	cmp	r3, #7
 8024e3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024e40:	f300 811b 	bgt.w	802507a <_vfiprintf_r+0x806>
 8024e44:	f106 0308 	add.w	r3, r6, #8
 8024e48:	f01a 0f04 	tst.w	sl, #4
 8024e4c:	f040 811d 	bne.w	802508a <_vfiprintf_r+0x816>
 8024e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024e54:	9904      	ldr	r1, [sp, #16]
 8024e56:	428a      	cmp	r2, r1
 8024e58:	bfac      	ite	ge
 8024e5a:	189b      	addge	r3, r3, r2
 8024e5c:	185b      	addlt	r3, r3, r1
 8024e5e:	9303      	str	r3, [sp, #12]
 8024e60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024e62:	b13b      	cbz	r3, 8024e74 <_vfiprintf_r+0x600>
 8024e64:	9800      	ldr	r0, [sp, #0]
 8024e66:	aa0e      	add	r2, sp, #56	@ 0x38
 8024e68:	4639      	mov	r1, r7
 8024e6a:	f7ff fcd1 	bl	8024810 <__sprint_r>
 8024e6e:	2800      	cmp	r0, #0
 8024e70:	f040 8129 	bne.w	80250c6 <_vfiprintf_r+0x852>
 8024e74:	2300      	movs	r3, #0
 8024e76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024e78:	4645      	mov	r5, r8
 8024e7a:	ae11      	add	r6, sp, #68	@ 0x44
 8024e7c:	e55b      	b.n	8024936 <_vfiprintf_r+0xc2>
 8024e7e:	4648      	mov	r0, r9
 8024e80:	f7db fa0e 	bl	80002a0 <strlen>
 8024e84:	9001      	str	r0, [sp, #4]
 8024e86:	e734      	b.n	8024cf2 <_vfiprintf_r+0x47e>
 8024e88:	f04a 0a10 	orr.w	sl, sl, #16
 8024e8c:	f01a 0320 	ands.w	r3, sl, #32
 8024e90:	d008      	beq.n	8024ea4 <_vfiprintf_r+0x630>
 8024e92:	3507      	adds	r5, #7
 8024e94:	f025 0507 	bic.w	r5, r5, #7
 8024e98:	46a8      	mov	r8, r5
 8024e9a:	686d      	ldr	r5, [r5, #4]
 8024e9c:	f858 4b08 	ldr.w	r4, [r8], #8
 8024ea0:	2301      	movs	r3, #1
 8024ea2:	e6d8      	b.n	8024c56 <_vfiprintf_r+0x3e2>
 8024ea4:	46a8      	mov	r8, r5
 8024ea6:	f01a 0510 	ands.w	r5, sl, #16
 8024eaa:	f858 4b04 	ldr.w	r4, [r8], #4
 8024eae:	d001      	beq.n	8024eb4 <_vfiprintf_r+0x640>
 8024eb0:	461d      	mov	r5, r3
 8024eb2:	e7f5      	b.n	8024ea0 <_vfiprintf_r+0x62c>
 8024eb4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8024eb8:	d001      	beq.n	8024ebe <_vfiprintf_r+0x64a>
 8024eba:	b2a4      	uxth	r4, r4
 8024ebc:	e7f0      	b.n	8024ea0 <_vfiprintf_r+0x62c>
 8024ebe:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8024ec2:	d0ed      	beq.n	8024ea0 <_vfiprintf_r+0x62c>
 8024ec4:	b2e4      	uxtb	r4, r4
 8024ec6:	e7f3      	b.n	8024eb0 <_vfiprintf_r+0x63c>
 8024ec8:	4a43      	ldr	r2, [pc, #268]	@ (8024fd8 <_vfiprintf_r+0x764>)
 8024eca:	e5c9      	b.n	8024a60 <_vfiprintf_r+0x1ec>
 8024ecc:	46a8      	mov	r8, r5
 8024ece:	f01a 0510 	ands.w	r5, sl, #16
 8024ed2:	f858 4b04 	ldr.w	r4, [r8], #4
 8024ed6:	d001      	beq.n	8024edc <_vfiprintf_r+0x668>
 8024ed8:	4615      	mov	r5, r2
 8024eda:	e5cd      	b.n	8024a78 <_vfiprintf_r+0x204>
 8024edc:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8024ee0:	d001      	beq.n	8024ee6 <_vfiprintf_r+0x672>
 8024ee2:	b2a4      	uxth	r4, r4
 8024ee4:	e5c8      	b.n	8024a78 <_vfiprintf_r+0x204>
 8024ee6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8024eea:	f43f adc5 	beq.w	8024a78 <_vfiprintf_r+0x204>
 8024eee:	b2e4      	uxtb	r4, r4
 8024ef0:	e7f2      	b.n	8024ed8 <_vfiprintf_r+0x664>
 8024ef2:	2c0a      	cmp	r4, #10
 8024ef4:	f175 0300 	sbcs.w	r3, r5, #0
 8024ef8:	d206      	bcs.n	8024f08 <_vfiprintf_r+0x694>
 8024efa:	3430      	adds	r4, #48	@ 0x30
 8024efc:	b2e4      	uxtb	r4, r4
 8024efe:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8024f02:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8024f06:	e131      	b.n	802516c <_vfiprintf_r+0x8f8>
 8024f08:	ab3a      	add	r3, sp, #232	@ 0xe8
 8024f0a:	9308      	str	r3, [sp, #32]
 8024f0c:	9b04      	ldr	r3, [sp, #16]
 8024f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8024f12:	f04f 0a00 	mov.w	sl, #0
 8024f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8024f18:	220a      	movs	r2, #10
 8024f1a:	2300      	movs	r3, #0
 8024f1c:	4620      	mov	r0, r4
 8024f1e:	4629      	mov	r1, r5
 8024f20:	f7db ff1a 	bl	8000d58 <__aeabi_uldivmod>
 8024f24:	460b      	mov	r3, r1
 8024f26:	9908      	ldr	r1, [sp, #32]
 8024f28:	900b      	str	r0, [sp, #44]	@ 0x2c
 8024f2a:	3230      	adds	r2, #48	@ 0x30
 8024f2c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8024f30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024f32:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8024f36:	f10a 0a01 	add.w	sl, sl, #1
 8024f3a:	b1e2      	cbz	r2, 8024f76 <_vfiprintf_r+0x702>
 8024f3c:	9a06      	ldr	r2, [sp, #24]
 8024f3e:	7812      	ldrb	r2, [r2, #0]
 8024f40:	4552      	cmp	r2, sl
 8024f42:	d118      	bne.n	8024f76 <_vfiprintf_r+0x702>
 8024f44:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8024f48:	d015      	beq.n	8024f76 <_vfiprintf_r+0x702>
 8024f4a:	2c0a      	cmp	r4, #10
 8024f4c:	f175 0200 	sbcs.w	r2, r5, #0
 8024f50:	d311      	bcc.n	8024f76 <_vfiprintf_r+0x702>
 8024f52:	9308      	str	r3, [sp, #32]
 8024f54:	9b07      	ldr	r3, [sp, #28]
 8024f56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024f58:	eba9 0903 	sub.w	r9, r9, r3
 8024f5c:	461a      	mov	r2, r3
 8024f5e:	4648      	mov	r0, r9
 8024f60:	f000 ff3d 	bl	8025dde <strncpy>
 8024f64:	9b06      	ldr	r3, [sp, #24]
 8024f66:	785a      	ldrb	r2, [r3, #1]
 8024f68:	9b08      	ldr	r3, [sp, #32]
 8024f6a:	b172      	cbz	r2, 8024f8a <_vfiprintf_r+0x716>
 8024f6c:	9a06      	ldr	r2, [sp, #24]
 8024f6e:	3201      	adds	r2, #1
 8024f70:	9206      	str	r2, [sp, #24]
 8024f72:	f04f 0a00 	mov.w	sl, #0
 8024f76:	2c0a      	cmp	r4, #10
 8024f78:	f175 0500 	sbcs.w	r5, r5, #0
 8024f7c:	f0c0 80f6 	bcc.w	802516c <_vfiprintf_r+0x8f8>
 8024f80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024f82:	f8cd 9020 	str.w	r9, [sp, #32]
 8024f86:	461d      	mov	r5, r3
 8024f88:	e7c6      	b.n	8024f18 <_vfiprintf_r+0x6a4>
 8024f8a:	4692      	mov	sl, r2
 8024f8c:	e7f3      	b.n	8024f76 <_vfiprintf_r+0x702>
 8024f8e:	f004 030f 	and.w	r3, r4, #15
 8024f92:	9a05      	ldr	r2, [sp, #20]
 8024f94:	0924      	lsrs	r4, r4, #4
 8024f96:	5cd3      	ldrb	r3, [r2, r3]
 8024f98:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8024f9c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8024fa0:	092d      	lsrs	r5, r5, #4
 8024fa2:	ea54 0305 	orrs.w	r3, r4, r5
 8024fa6:	d1f2      	bne.n	8024f8e <_vfiprintf_r+0x71a>
 8024fa8:	e0e0      	b.n	802516c <_vfiprintf_r+0x8f8>
 8024faa:	b923      	cbnz	r3, 8024fb6 <_vfiprintf_r+0x742>
 8024fac:	f01a 0f01 	tst.w	sl, #1
 8024fb0:	d001      	beq.n	8024fb6 <_vfiprintf_r+0x742>
 8024fb2:	2430      	movs	r4, #48	@ 0x30
 8024fb4:	e7a3      	b.n	8024efe <_vfiprintf_r+0x68a>
 8024fb6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8024fba:	e0d7      	b.n	802516c <_vfiprintf_r+0x8f8>
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	f000 80a3 	beq.w	8025108 <_vfiprintf_r+0x894>
 8024fc2:	2400      	movs	r4, #0
 8024fc4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8024fc8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8024fcc:	46a8      	mov	r8, r5
 8024fce:	e5e0      	b.n	8024b92 <_vfiprintf_r+0x31e>
 8024fd0:	08034748 	.word	0x08034748
 8024fd4:	08034738 	.word	0x08034738
 8024fd8:	08034705 	.word	0x08034705
 8024fdc:	2110      	movs	r1, #16
 8024fde:	6071      	str	r1, [r6, #4]
 8024fe0:	2a07      	cmp	r2, #7
 8024fe2:	4461      	add	r1, ip
 8024fe4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8024fe8:	dd08      	ble.n	8024ffc <_vfiprintf_r+0x788>
 8024fea:	9800      	ldr	r0, [sp, #0]
 8024fec:	aa0e      	add	r2, sp, #56	@ 0x38
 8024fee:	4639      	mov	r1, r7
 8024ff0:	f7ff fc0e 	bl	8024810 <__sprint_r>
 8024ff4:	2800      	cmp	r0, #0
 8024ff6:	d166      	bne.n	80250c6 <_vfiprintf_r+0x852>
 8024ff8:	4b60      	ldr	r3, [pc, #384]	@ (802517c <_vfiprintf_r+0x908>)
 8024ffa:	a811      	add	r0, sp, #68	@ 0x44
 8024ffc:	3d10      	subs	r5, #16
 8024ffe:	4606      	mov	r6, r0
 8025000:	e694      	b.n	8024d2c <_vfiprintf_r+0x4b8>
 8025002:	4606      	mov	r6, r0
 8025004:	e6ac      	b.n	8024d60 <_vfiprintf_r+0x4ec>
 8025006:	9800      	ldr	r0, [sp, #0]
 8025008:	aa0e      	add	r2, sp, #56	@ 0x38
 802500a:	4639      	mov	r1, r7
 802500c:	f7ff fc00 	bl	8024810 <__sprint_r>
 8025010:	2800      	cmp	r0, #0
 8025012:	d158      	bne.n	80250c6 <_vfiprintf_r+0x852>
 8025014:	ae11      	add	r6, sp, #68	@ 0x44
 8025016:	e6b5      	b.n	8024d84 <_vfiprintf_r+0x510>
 8025018:	9800      	ldr	r0, [sp, #0]
 802501a:	aa0e      	add	r2, sp, #56	@ 0x38
 802501c:	4639      	mov	r1, r7
 802501e:	f7ff fbf7 	bl	8024810 <__sprint_r>
 8025022:	2800      	cmp	r0, #0
 8025024:	d14f      	bne.n	80250c6 <_vfiprintf_r+0x852>
 8025026:	ae11      	add	r6, sp, #68	@ 0x44
 8025028:	e6bc      	b.n	8024da4 <_vfiprintf_r+0x530>
 802502a:	2110      	movs	r1, #16
 802502c:	6071      	str	r1, [r6, #4]
 802502e:	2a07      	cmp	r2, #7
 8025030:	4461      	add	r1, ip
 8025032:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8025036:	dd08      	ble.n	802504a <_vfiprintf_r+0x7d6>
 8025038:	9800      	ldr	r0, [sp, #0]
 802503a:	aa0e      	add	r2, sp, #56	@ 0x38
 802503c:	4639      	mov	r1, r7
 802503e:	f7ff fbe7 	bl	8024810 <__sprint_r>
 8025042:	2800      	cmp	r0, #0
 8025044:	d13f      	bne.n	80250c6 <_vfiprintf_r+0x852>
 8025046:	4b4e      	ldr	r3, [pc, #312]	@ (8025180 <_vfiprintf_r+0x90c>)
 8025048:	a811      	add	r0, sp, #68	@ 0x44
 802504a:	3d10      	subs	r5, #16
 802504c:	4606      	mov	r6, r0
 802504e:	e6b2      	b.n	8024db6 <_vfiprintf_r+0x542>
 8025050:	4606      	mov	r6, r0
 8025052:	e6ca      	b.n	8024dea <_vfiprintf_r+0x576>
 8025054:	2010      	movs	r0, #16
 8025056:	4402      	add	r2, r0
 8025058:	2b07      	cmp	r3, #7
 802505a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802505e:	6070      	str	r0, [r6, #4]
 8025060:	dd06      	ble.n	8025070 <_vfiprintf_r+0x7fc>
 8025062:	9800      	ldr	r0, [sp, #0]
 8025064:	aa0e      	add	r2, sp, #56	@ 0x38
 8025066:	4639      	mov	r1, r7
 8025068:	f7ff fbd2 	bl	8024810 <__sprint_r>
 802506c:	bb58      	cbnz	r0, 80250c6 <_vfiprintf_r+0x852>
 802506e:	a911      	add	r1, sp, #68	@ 0x44
 8025070:	3c10      	subs	r4, #16
 8025072:	460e      	mov	r6, r1
 8025074:	e6bd      	b.n	8024df2 <_vfiprintf_r+0x57e>
 8025076:	460e      	mov	r6, r1
 8025078:	e6d6      	b.n	8024e28 <_vfiprintf_r+0x5b4>
 802507a:	9800      	ldr	r0, [sp, #0]
 802507c:	aa0e      	add	r2, sp, #56	@ 0x38
 802507e:	4639      	mov	r1, r7
 8025080:	f7ff fbc6 	bl	8024810 <__sprint_r>
 8025084:	b9f8      	cbnz	r0, 80250c6 <_vfiprintf_r+0x852>
 8025086:	ab11      	add	r3, sp, #68	@ 0x44
 8025088:	e6de      	b.n	8024e48 <_vfiprintf_r+0x5d4>
 802508a:	9a02      	ldr	r2, [sp, #8]
 802508c:	9904      	ldr	r1, [sp, #16]
 802508e:	1a54      	subs	r4, r2, r1
 8025090:	2c00      	cmp	r4, #0
 8025092:	f77f aedd 	ble.w	8024e50 <_vfiprintf_r+0x5dc>
 8025096:	4d39      	ldr	r5, [pc, #228]	@ (802517c <_vfiprintf_r+0x908>)
 8025098:	2610      	movs	r6, #16
 802509a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 802509e:	2c10      	cmp	r4, #16
 80250a0:	f102 0201 	add.w	r2, r2, #1
 80250a4:	601d      	str	r5, [r3, #0]
 80250a6:	dc1d      	bgt.n	80250e4 <_vfiprintf_r+0x870>
 80250a8:	605c      	str	r4, [r3, #4]
 80250aa:	2a07      	cmp	r2, #7
 80250ac:	440c      	add	r4, r1
 80250ae:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80250b2:	f77f aecd 	ble.w	8024e50 <_vfiprintf_r+0x5dc>
 80250b6:	9800      	ldr	r0, [sp, #0]
 80250b8:	aa0e      	add	r2, sp, #56	@ 0x38
 80250ba:	4639      	mov	r1, r7
 80250bc:	f7ff fba8 	bl	8024810 <__sprint_r>
 80250c0:	2800      	cmp	r0, #0
 80250c2:	f43f aec5 	beq.w	8024e50 <_vfiprintf_r+0x5dc>
 80250c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80250c8:	07d9      	lsls	r1, r3, #31
 80250ca:	d405      	bmi.n	80250d8 <_vfiprintf_r+0x864>
 80250cc:	89bb      	ldrh	r3, [r7, #12]
 80250ce:	059a      	lsls	r2, r3, #22
 80250d0:	d402      	bmi.n	80250d8 <_vfiprintf_r+0x864>
 80250d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80250d4:	f002 f877 	bl	80271c6 <__retarget_lock_release_recursive>
 80250d8:	89bb      	ldrh	r3, [r7, #12]
 80250da:	065b      	lsls	r3, r3, #25
 80250dc:	f57f abfb 	bpl.w	80248d6 <_vfiprintf_r+0x62>
 80250e0:	f7ff bbf6 	b.w	80248d0 <_vfiprintf_r+0x5c>
 80250e4:	3110      	adds	r1, #16
 80250e6:	2a07      	cmp	r2, #7
 80250e8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80250ec:	605e      	str	r6, [r3, #4]
 80250ee:	dc02      	bgt.n	80250f6 <_vfiprintf_r+0x882>
 80250f0:	3308      	adds	r3, #8
 80250f2:	3c10      	subs	r4, #16
 80250f4:	e7d1      	b.n	802509a <_vfiprintf_r+0x826>
 80250f6:	9800      	ldr	r0, [sp, #0]
 80250f8:	aa0e      	add	r2, sp, #56	@ 0x38
 80250fa:	4639      	mov	r1, r7
 80250fc:	f7ff fb88 	bl	8024810 <__sprint_r>
 8025100:	2800      	cmp	r0, #0
 8025102:	d1e0      	bne.n	80250c6 <_vfiprintf_r+0x852>
 8025104:	ab11      	add	r3, sp, #68	@ 0x44
 8025106:	e7f4      	b.n	80250f2 <_vfiprintf_r+0x87e>
 8025108:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802510a:	b913      	cbnz	r3, 8025112 <_vfiprintf_r+0x89e>
 802510c:	2300      	movs	r3, #0
 802510e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025110:	e7d9      	b.n	80250c6 <_vfiprintf_r+0x852>
 8025112:	9800      	ldr	r0, [sp, #0]
 8025114:	aa0e      	add	r2, sp, #56	@ 0x38
 8025116:	4639      	mov	r1, r7
 8025118:	f7ff fb7a 	bl	8024810 <__sprint_r>
 802511c:	2800      	cmp	r0, #0
 802511e:	d0f5      	beq.n	802510c <_vfiprintf_r+0x898>
 8025120:	e7d1      	b.n	80250c6 <_vfiprintf_r+0x852>
 8025122:	ea54 0205 	orrs.w	r2, r4, r5
 8025126:	f8cd a010 	str.w	sl, [sp, #16]
 802512a:	f43f ada6 	beq.w	8024c7a <_vfiprintf_r+0x406>
 802512e:	2b01      	cmp	r3, #1
 8025130:	f43f aedf 	beq.w	8024ef2 <_vfiprintf_r+0x67e>
 8025134:	2b02      	cmp	r3, #2
 8025136:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 802513a:	f43f af28 	beq.w	8024f8e <_vfiprintf_r+0x71a>
 802513e:	f004 0307 	and.w	r3, r4, #7
 8025142:	08e4      	lsrs	r4, r4, #3
 8025144:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8025148:	08ed      	lsrs	r5, r5, #3
 802514a:	3330      	adds	r3, #48	@ 0x30
 802514c:	ea54 0105 	orrs.w	r1, r4, r5
 8025150:	464a      	mov	r2, r9
 8025152:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8025156:	d1f2      	bne.n	802513e <_vfiprintf_r+0x8ca>
 8025158:	9904      	ldr	r1, [sp, #16]
 802515a:	07c8      	lsls	r0, r1, #31
 802515c:	d506      	bpl.n	802516c <_vfiprintf_r+0x8f8>
 802515e:	2b30      	cmp	r3, #48	@ 0x30
 8025160:	d004      	beq.n	802516c <_vfiprintf_r+0x8f8>
 8025162:	2330      	movs	r3, #48	@ 0x30
 8025164:	f809 3c01 	strb.w	r3, [r9, #-1]
 8025168:	f1a2 0902 	sub.w	r9, r2, #2
 802516c:	ab3a      	add	r3, sp, #232	@ 0xe8
 802516e:	eba3 0309 	sub.w	r3, r3, r9
 8025172:	9c01      	ldr	r4, [sp, #4]
 8025174:	f8dd a010 	ldr.w	sl, [sp, #16]
 8025178:	9301      	str	r3, [sp, #4]
 802517a:	e5bb      	b.n	8024cf4 <_vfiprintf_r+0x480>
 802517c:	08034748 	.word	0x08034748
 8025180:	08034738 	.word	0x08034738

08025184 <__sbprintf>:
 8025184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025186:	461f      	mov	r7, r3
 8025188:	898b      	ldrh	r3, [r1, #12]
 802518a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 802518e:	f023 0302 	bic.w	r3, r3, #2
 8025192:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025196:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8025198:	9319      	str	r3, [sp, #100]	@ 0x64
 802519a:	89cb      	ldrh	r3, [r1, #14]
 802519c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80251a0:	69cb      	ldr	r3, [r1, #28]
 80251a2:	9307      	str	r3, [sp, #28]
 80251a4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80251a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80251a8:	ab1a      	add	r3, sp, #104	@ 0x68
 80251aa:	9300      	str	r3, [sp, #0]
 80251ac:	9304      	str	r3, [sp, #16]
 80251ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80251b2:	4615      	mov	r5, r2
 80251b4:	4606      	mov	r6, r0
 80251b6:	9302      	str	r3, [sp, #8]
 80251b8:	9305      	str	r3, [sp, #20]
 80251ba:	a816      	add	r0, sp, #88	@ 0x58
 80251bc:	2300      	movs	r3, #0
 80251be:	460c      	mov	r4, r1
 80251c0:	9306      	str	r3, [sp, #24]
 80251c2:	f001 fffb 	bl	80271bc <__retarget_lock_init_recursive>
 80251c6:	462a      	mov	r2, r5
 80251c8:	463b      	mov	r3, r7
 80251ca:	4669      	mov	r1, sp
 80251cc:	4630      	mov	r0, r6
 80251ce:	f7ff fb51 	bl	8024874 <_vfiprintf_r>
 80251d2:	1e05      	subs	r5, r0, #0
 80251d4:	db07      	blt.n	80251e6 <__sbprintf+0x62>
 80251d6:	4669      	mov	r1, sp
 80251d8:	4630      	mov	r0, r6
 80251da:	f000 f9d1 	bl	8025580 <_fflush_r>
 80251de:	2800      	cmp	r0, #0
 80251e0:	bf18      	it	ne
 80251e2:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 80251e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80251ea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80251ec:	065b      	lsls	r3, r3, #25
 80251ee:	bf42      	ittt	mi
 80251f0:	89a3      	ldrhmi	r3, [r4, #12]
 80251f2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80251f6:	81a3      	strhmi	r3, [r4, #12]
 80251f8:	f001 ffe1 	bl	80271be <__retarget_lock_close_recursive>
 80251fc:	4628      	mov	r0, r5
 80251fe:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8025202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025204 <putchar>:
 8025204:	4b02      	ldr	r3, [pc, #8]	@ (8025210 <putchar+0xc>)
 8025206:	4601      	mov	r1, r0
 8025208:	6818      	ldr	r0, [r3, #0]
 802520a:	6882      	ldr	r2, [r0, #8]
 802520c:	f007 bacc 	b.w	802c7a8 <_putc_r>
 8025210:	20000430 	.word	0x20000430

08025214 <_puts_r>:
 8025214:	b530      	push	{r4, r5, lr}
 8025216:	4605      	mov	r5, r0
 8025218:	b089      	sub	sp, #36	@ 0x24
 802521a:	4608      	mov	r0, r1
 802521c:	460c      	mov	r4, r1
 802521e:	f7db f83f 	bl	80002a0 <strlen>
 8025222:	4b1e      	ldr	r3, [pc, #120]	@ (802529c <_puts_r+0x88>)
 8025224:	9306      	str	r3, [sp, #24]
 8025226:	2301      	movs	r3, #1
 8025228:	e9cd 4004 	strd	r4, r0, [sp, #16]
 802522c:	9307      	str	r3, [sp, #28]
 802522e:	4418      	add	r0, r3
 8025230:	ab04      	add	r3, sp, #16
 8025232:	9301      	str	r3, [sp, #4]
 8025234:	2302      	movs	r3, #2
 8025236:	9302      	str	r3, [sp, #8]
 8025238:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802523a:	68ac      	ldr	r4, [r5, #8]
 802523c:	9003      	str	r0, [sp, #12]
 802523e:	b913      	cbnz	r3, 8025246 <_puts_r+0x32>
 8025240:	4628      	mov	r0, r5
 8025242:	f000 fadf 	bl	8025804 <__sinit>
 8025246:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025248:	07db      	lsls	r3, r3, #31
 802524a:	d405      	bmi.n	8025258 <_puts_r+0x44>
 802524c:	89a3      	ldrh	r3, [r4, #12]
 802524e:	0598      	lsls	r0, r3, #22
 8025250:	d402      	bmi.n	8025258 <_puts_r+0x44>
 8025252:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025254:	f001 ffb5 	bl	80271c2 <__retarget_lock_acquire_recursive>
 8025258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802525c:	0499      	lsls	r1, r3, #18
 802525e:	d406      	bmi.n	802526e <_puts_r+0x5a>
 8025260:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8025264:	81a3      	strh	r3, [r4, #12]
 8025266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025268:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802526c:	6663      	str	r3, [r4, #100]	@ 0x64
 802526e:	4628      	mov	r0, r5
 8025270:	aa01      	add	r2, sp, #4
 8025272:	4621      	mov	r1, r4
 8025274:	f000 fb18 	bl	80258a8 <__sfvwrite_r>
 8025278:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802527a:	2800      	cmp	r0, #0
 802527c:	bf0c      	ite	eq
 802527e:	250a      	moveq	r5, #10
 8025280:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8025284:	07da      	lsls	r2, r3, #31
 8025286:	d405      	bmi.n	8025294 <_puts_r+0x80>
 8025288:	89a3      	ldrh	r3, [r4, #12]
 802528a:	059b      	lsls	r3, r3, #22
 802528c:	d402      	bmi.n	8025294 <_puts_r+0x80>
 802528e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025290:	f001 ff99 	bl	80271c6 <__retarget_lock_release_recursive>
 8025294:	4628      	mov	r0, r5
 8025296:	b009      	add	sp, #36	@ 0x24
 8025298:	bd30      	pop	{r4, r5, pc}
 802529a:	bf00      	nop
 802529c:	080346e2 	.word	0x080346e2

080252a0 <puts>:
 80252a0:	4b02      	ldr	r3, [pc, #8]	@ (80252ac <puts+0xc>)
 80252a2:	4601      	mov	r1, r0
 80252a4:	6818      	ldr	r0, [r3, #0]
 80252a6:	f7ff bfb5 	b.w	8025214 <_puts_r>
 80252aa:	bf00      	nop
 80252ac:	20000430 	.word	0x20000430

080252b0 <srand>:
 80252b0:	4b03      	ldr	r3, [pc, #12]	@ (80252c0 <srand+0x10>)
 80252b2:	681b      	ldr	r3, [r3, #0]
 80252b4:	2200      	movs	r2, #0
 80252b6:	f8c3 0098 	str.w	r0, [r3, #152]	@ 0x98
 80252ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80252be:	4770      	bx	lr
 80252c0:	20000430 	.word	0x20000430

080252c4 <rand>:
 80252c4:	4b0a      	ldr	r3, [pc, #40]	@ (80252f0 <rand+0x2c>)
 80252c6:	480b      	ldr	r0, [pc, #44]	@ (80252f4 <rand+0x30>)
 80252c8:	6819      	ldr	r1, [r3, #0]
 80252ca:	4a0b      	ldr	r2, [pc, #44]	@ (80252f8 <rand+0x34>)
 80252cc:	f8d1 3098 	ldr.w	r3, [r1, #152]	@ 0x98
 80252d0:	b510      	push	{r4, lr}
 80252d2:	f8d1 409c 	ldr.w	r4, [r1, #156]	@ 0x9c
 80252d6:	4358      	muls	r0, r3
 80252d8:	fb02 0004 	mla	r0, r2, r4, r0
 80252dc:	fba3 3202 	umull	r3, r2, r3, r2
 80252e0:	3301      	adds	r3, #1
 80252e2:	eb40 0002 	adc.w	r0, r0, r2
 80252e6:	e9c1 3026 	strd	r3, r0, [r1, #152]	@ 0x98
 80252ea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80252ee:	bd10      	pop	{r4, pc}
 80252f0:	20000430 	.word	0x20000430
 80252f4:	5851f42d 	.word	0x5851f42d
 80252f8:	4c957f2d 	.word	0x4c957f2d

080252fc <snprintf>:
 80252fc:	b40c      	push	{r2, r3}
 80252fe:	b530      	push	{r4, r5, lr}
 8025300:	4b17      	ldr	r3, [pc, #92]	@ (8025360 <snprintf+0x64>)
 8025302:	1e0c      	subs	r4, r1, #0
 8025304:	681d      	ldr	r5, [r3, #0]
 8025306:	b09d      	sub	sp, #116	@ 0x74
 8025308:	da08      	bge.n	802531c <snprintf+0x20>
 802530a:	238b      	movs	r3, #139	@ 0x8b
 802530c:	602b      	str	r3, [r5, #0]
 802530e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025312:	b01d      	add	sp, #116	@ 0x74
 8025314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025318:	b002      	add	sp, #8
 802531a:	4770      	bx	lr
 802531c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025320:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025324:	bf14      	ite	ne
 8025326:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802532a:	4623      	moveq	r3, r4
 802532c:	9304      	str	r3, [sp, #16]
 802532e:	9307      	str	r3, [sp, #28]
 8025330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025334:	9002      	str	r0, [sp, #8]
 8025336:	9006      	str	r0, [sp, #24]
 8025338:	f8ad 3016 	strh.w	r3, [sp, #22]
 802533c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802533e:	ab21      	add	r3, sp, #132	@ 0x84
 8025340:	a902      	add	r1, sp, #8
 8025342:	4628      	mov	r0, r5
 8025344:	9301      	str	r3, [sp, #4]
 8025346:	f004 fe7b 	bl	802a040 <_svfprintf_r>
 802534a:	1c43      	adds	r3, r0, #1
 802534c:	bfbc      	itt	lt
 802534e:	238b      	movlt	r3, #139	@ 0x8b
 8025350:	602b      	strlt	r3, [r5, #0]
 8025352:	2c00      	cmp	r4, #0
 8025354:	d0dd      	beq.n	8025312 <snprintf+0x16>
 8025356:	9b02      	ldr	r3, [sp, #8]
 8025358:	2200      	movs	r2, #0
 802535a:	701a      	strb	r2, [r3, #0]
 802535c:	e7d9      	b.n	8025312 <snprintf+0x16>
 802535e:	bf00      	nop
 8025360:	20000430 	.word	0x20000430

08025364 <_strtol_l.constprop.0>:
 8025364:	2b24      	cmp	r3, #36	@ 0x24
 8025366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802536a:	4686      	mov	lr, r0
 802536c:	4690      	mov	r8, r2
 802536e:	d801      	bhi.n	8025374 <_strtol_l.constprop.0+0x10>
 8025370:	2b01      	cmp	r3, #1
 8025372:	d106      	bne.n	8025382 <_strtol_l.constprop.0+0x1e>
 8025374:	f001 fef0 	bl	8027158 <__errno>
 8025378:	2316      	movs	r3, #22
 802537a:	6003      	str	r3, [r0, #0]
 802537c:	2000      	movs	r0, #0
 802537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025382:	4834      	ldr	r0, [pc, #208]	@ (8025454 <_strtol_l.constprop.0+0xf0>)
 8025384:	460d      	mov	r5, r1
 8025386:	462a      	mov	r2, r5
 8025388:	f815 4b01 	ldrb.w	r4, [r5], #1
 802538c:	5d06      	ldrb	r6, [r0, r4]
 802538e:	f016 0608 	ands.w	r6, r6, #8
 8025392:	d1f8      	bne.n	8025386 <_strtol_l.constprop.0+0x22>
 8025394:	2c2d      	cmp	r4, #45	@ 0x2d
 8025396:	d12d      	bne.n	80253f4 <_strtol_l.constprop.0+0x90>
 8025398:	782c      	ldrb	r4, [r5, #0]
 802539a:	2601      	movs	r6, #1
 802539c:	1c95      	adds	r5, r2, #2
 802539e:	f033 0210 	bics.w	r2, r3, #16
 80253a2:	d109      	bne.n	80253b8 <_strtol_l.constprop.0+0x54>
 80253a4:	2c30      	cmp	r4, #48	@ 0x30
 80253a6:	d12a      	bne.n	80253fe <_strtol_l.constprop.0+0x9a>
 80253a8:	782a      	ldrb	r2, [r5, #0]
 80253aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80253ae:	2a58      	cmp	r2, #88	@ 0x58
 80253b0:	d125      	bne.n	80253fe <_strtol_l.constprop.0+0x9a>
 80253b2:	786c      	ldrb	r4, [r5, #1]
 80253b4:	2310      	movs	r3, #16
 80253b6:	3502      	adds	r5, #2
 80253b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80253bc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80253c0:	2200      	movs	r2, #0
 80253c2:	fbbc f9f3 	udiv	r9, ip, r3
 80253c6:	4610      	mov	r0, r2
 80253c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80253cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80253d0:	2f09      	cmp	r7, #9
 80253d2:	d81b      	bhi.n	802540c <_strtol_l.constprop.0+0xa8>
 80253d4:	463c      	mov	r4, r7
 80253d6:	42a3      	cmp	r3, r4
 80253d8:	dd27      	ble.n	802542a <_strtol_l.constprop.0+0xc6>
 80253da:	1c57      	adds	r7, r2, #1
 80253dc:	d007      	beq.n	80253ee <_strtol_l.constprop.0+0x8a>
 80253de:	4581      	cmp	r9, r0
 80253e0:	d320      	bcc.n	8025424 <_strtol_l.constprop.0+0xc0>
 80253e2:	d101      	bne.n	80253e8 <_strtol_l.constprop.0+0x84>
 80253e4:	45a2      	cmp	sl, r4
 80253e6:	db1d      	blt.n	8025424 <_strtol_l.constprop.0+0xc0>
 80253e8:	fb00 4003 	mla	r0, r0, r3, r4
 80253ec:	2201      	movs	r2, #1
 80253ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80253f2:	e7eb      	b.n	80253cc <_strtol_l.constprop.0+0x68>
 80253f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80253f6:	bf04      	itt	eq
 80253f8:	782c      	ldrbeq	r4, [r5, #0]
 80253fa:	1c95      	addeq	r5, r2, #2
 80253fc:	e7cf      	b.n	802539e <_strtol_l.constprop.0+0x3a>
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d1da      	bne.n	80253b8 <_strtol_l.constprop.0+0x54>
 8025402:	2c30      	cmp	r4, #48	@ 0x30
 8025404:	bf0c      	ite	eq
 8025406:	2308      	moveq	r3, #8
 8025408:	230a      	movne	r3, #10
 802540a:	e7d5      	b.n	80253b8 <_strtol_l.constprop.0+0x54>
 802540c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8025410:	2f19      	cmp	r7, #25
 8025412:	d801      	bhi.n	8025418 <_strtol_l.constprop.0+0xb4>
 8025414:	3c37      	subs	r4, #55	@ 0x37
 8025416:	e7de      	b.n	80253d6 <_strtol_l.constprop.0+0x72>
 8025418:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802541c:	2f19      	cmp	r7, #25
 802541e:	d804      	bhi.n	802542a <_strtol_l.constprop.0+0xc6>
 8025420:	3c57      	subs	r4, #87	@ 0x57
 8025422:	e7d8      	b.n	80253d6 <_strtol_l.constprop.0+0x72>
 8025424:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8025428:	e7e1      	b.n	80253ee <_strtol_l.constprop.0+0x8a>
 802542a:	1c53      	adds	r3, r2, #1
 802542c:	d108      	bne.n	8025440 <_strtol_l.constprop.0+0xdc>
 802542e:	2322      	movs	r3, #34	@ 0x22
 8025430:	f8ce 3000 	str.w	r3, [lr]
 8025434:	4660      	mov	r0, ip
 8025436:	f1b8 0f00 	cmp.w	r8, #0
 802543a:	d0a0      	beq.n	802537e <_strtol_l.constprop.0+0x1a>
 802543c:	1e69      	subs	r1, r5, #1
 802543e:	e006      	b.n	802544e <_strtol_l.constprop.0+0xea>
 8025440:	b106      	cbz	r6, 8025444 <_strtol_l.constprop.0+0xe0>
 8025442:	4240      	negs	r0, r0
 8025444:	f1b8 0f00 	cmp.w	r8, #0
 8025448:	d099      	beq.n	802537e <_strtol_l.constprop.0+0x1a>
 802544a:	2a00      	cmp	r2, #0
 802544c:	d1f6      	bne.n	802543c <_strtol_l.constprop.0+0xd8>
 802544e:	f8c8 1000 	str.w	r1, [r8]
 8025452:	e794      	b.n	802537e <_strtol_l.constprop.0+0x1a>
 8025454:	08034aa1 	.word	0x08034aa1

08025458 <_strtol_r>:
 8025458:	f7ff bf84 	b.w	8025364 <_strtol_l.constprop.0>

0802545c <strtol>:
 802545c:	4613      	mov	r3, r2
 802545e:	460a      	mov	r2, r1
 8025460:	4601      	mov	r1, r0
 8025462:	4802      	ldr	r0, [pc, #8]	@ (802546c <strtol+0x10>)
 8025464:	6800      	ldr	r0, [r0, #0]
 8025466:	f7ff bf7d 	b.w	8025364 <_strtol_l.constprop.0>
 802546a:	bf00      	nop
 802546c:	20000430 	.word	0x20000430

08025470 <__sflush_r>:
 8025470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025474:	4605      	mov	r5, r0
 8025476:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 802547a:	0706      	lsls	r6, r0, #28
 802547c:	460c      	mov	r4, r1
 802547e:	d457      	bmi.n	8025530 <__sflush_r+0xc0>
 8025480:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8025484:	818b      	strh	r3, [r1, #12]
 8025486:	684b      	ldr	r3, [r1, #4]
 8025488:	2b00      	cmp	r3, #0
 802548a:	dc02      	bgt.n	8025492 <__sflush_r+0x22>
 802548c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 802548e:	2b00      	cmp	r3, #0
 8025490:	dd4c      	ble.n	802552c <__sflush_r+0xbc>
 8025492:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8025494:	2e00      	cmp	r6, #0
 8025496:	d049      	beq.n	802552c <__sflush_r+0xbc>
 8025498:	2300      	movs	r3, #0
 802549a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 802549e:	682f      	ldr	r7, [r5, #0]
 80254a0:	69e1      	ldr	r1, [r4, #28]
 80254a2:	602b      	str	r3, [r5, #0]
 80254a4:	d034      	beq.n	8025510 <__sflush_r+0xa0>
 80254a6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80254a8:	89a3      	ldrh	r3, [r4, #12]
 80254aa:	0759      	lsls	r1, r3, #29
 80254ac:	d505      	bpl.n	80254ba <__sflush_r+0x4a>
 80254ae:	6863      	ldr	r3, [r4, #4]
 80254b0:	1ad2      	subs	r2, r2, r3
 80254b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80254b4:	b10b      	cbz	r3, 80254ba <__sflush_r+0x4a>
 80254b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80254b8:	1ad2      	subs	r2, r2, r3
 80254ba:	2300      	movs	r3, #0
 80254bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80254be:	69e1      	ldr	r1, [r4, #28]
 80254c0:	4628      	mov	r0, r5
 80254c2:	47b0      	blx	r6
 80254c4:	1c43      	adds	r3, r0, #1
 80254c6:	d106      	bne.n	80254d6 <__sflush_r+0x66>
 80254c8:	682a      	ldr	r2, [r5, #0]
 80254ca:	2a1d      	cmp	r2, #29
 80254cc:	d848      	bhi.n	8025560 <__sflush_r+0xf0>
 80254ce:	4b2b      	ldr	r3, [pc, #172]	@ (802557c <__sflush_r+0x10c>)
 80254d0:	4113      	asrs	r3, r2
 80254d2:	07de      	lsls	r6, r3, #31
 80254d4:	d444      	bmi.n	8025560 <__sflush_r+0xf0>
 80254d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80254da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80254de:	81a2      	strh	r2, [r4, #12]
 80254e0:	2200      	movs	r2, #0
 80254e2:	6062      	str	r2, [r4, #4]
 80254e4:	04d9      	lsls	r1, r3, #19
 80254e6:	6922      	ldr	r2, [r4, #16]
 80254e8:	6022      	str	r2, [r4, #0]
 80254ea:	d504      	bpl.n	80254f6 <__sflush_r+0x86>
 80254ec:	1c42      	adds	r2, r0, #1
 80254ee:	d101      	bne.n	80254f4 <__sflush_r+0x84>
 80254f0:	682b      	ldr	r3, [r5, #0]
 80254f2:	b903      	cbnz	r3, 80254f6 <__sflush_r+0x86>
 80254f4:	6520      	str	r0, [r4, #80]	@ 0x50
 80254f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80254f8:	602f      	str	r7, [r5, #0]
 80254fa:	b1b9      	cbz	r1, 802552c <__sflush_r+0xbc>
 80254fc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8025500:	4299      	cmp	r1, r3
 8025502:	d002      	beq.n	802550a <__sflush_r+0x9a>
 8025504:	4628      	mov	r0, r5
 8025506:	f002 fd61 	bl	8027fcc <_free_r>
 802550a:	2300      	movs	r3, #0
 802550c:	6323      	str	r3, [r4, #48]	@ 0x30
 802550e:	e00d      	b.n	802552c <__sflush_r+0xbc>
 8025510:	2301      	movs	r3, #1
 8025512:	4628      	mov	r0, r5
 8025514:	47b0      	blx	r6
 8025516:	4602      	mov	r2, r0
 8025518:	1c50      	adds	r0, r2, #1
 802551a:	d1c5      	bne.n	80254a8 <__sflush_r+0x38>
 802551c:	682b      	ldr	r3, [r5, #0]
 802551e:	2b00      	cmp	r3, #0
 8025520:	d0c2      	beq.n	80254a8 <__sflush_r+0x38>
 8025522:	2b1d      	cmp	r3, #29
 8025524:	d001      	beq.n	802552a <__sflush_r+0xba>
 8025526:	2b16      	cmp	r3, #22
 8025528:	d11a      	bne.n	8025560 <__sflush_r+0xf0>
 802552a:	602f      	str	r7, [r5, #0]
 802552c:	2000      	movs	r0, #0
 802552e:	e01e      	b.n	802556e <__sflush_r+0xfe>
 8025530:	690f      	ldr	r7, [r1, #16]
 8025532:	2f00      	cmp	r7, #0
 8025534:	d0fa      	beq.n	802552c <__sflush_r+0xbc>
 8025536:	0783      	lsls	r3, r0, #30
 8025538:	680e      	ldr	r6, [r1, #0]
 802553a:	bf08      	it	eq
 802553c:	694b      	ldreq	r3, [r1, #20]
 802553e:	600f      	str	r7, [r1, #0]
 8025540:	bf18      	it	ne
 8025542:	2300      	movne	r3, #0
 8025544:	eba6 0807 	sub.w	r8, r6, r7
 8025548:	608b      	str	r3, [r1, #8]
 802554a:	f1b8 0f00 	cmp.w	r8, #0
 802554e:	dded      	ble.n	802552c <__sflush_r+0xbc>
 8025550:	69e1      	ldr	r1, [r4, #28]
 8025552:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8025554:	4643      	mov	r3, r8
 8025556:	463a      	mov	r2, r7
 8025558:	4628      	mov	r0, r5
 802555a:	47b0      	blx	r6
 802555c:	2800      	cmp	r0, #0
 802555e:	dc08      	bgt.n	8025572 <__sflush_r+0x102>
 8025560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025568:	81a3      	strh	r3, [r4, #12]
 802556a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025572:	4407      	add	r7, r0
 8025574:	eba8 0800 	sub.w	r8, r8, r0
 8025578:	e7e7      	b.n	802554a <__sflush_r+0xda>
 802557a:	bf00      	nop
 802557c:	dfbffffe 	.word	0xdfbffffe

08025580 <_fflush_r>:
 8025580:	b538      	push	{r3, r4, r5, lr}
 8025582:	460c      	mov	r4, r1
 8025584:	4605      	mov	r5, r0
 8025586:	b118      	cbz	r0, 8025590 <_fflush_r+0x10>
 8025588:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802558a:	b90b      	cbnz	r3, 8025590 <_fflush_r+0x10>
 802558c:	f000 f93a 	bl	8025804 <__sinit>
 8025590:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8025594:	b1b8      	cbz	r0, 80255c6 <_fflush_r+0x46>
 8025596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025598:	07db      	lsls	r3, r3, #31
 802559a:	d404      	bmi.n	80255a6 <_fflush_r+0x26>
 802559c:	0581      	lsls	r1, r0, #22
 802559e:	d402      	bmi.n	80255a6 <_fflush_r+0x26>
 80255a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80255a2:	f001 fe0e 	bl	80271c2 <__retarget_lock_acquire_recursive>
 80255a6:	4628      	mov	r0, r5
 80255a8:	4621      	mov	r1, r4
 80255aa:	f7ff ff61 	bl	8025470 <__sflush_r>
 80255ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80255b0:	07da      	lsls	r2, r3, #31
 80255b2:	4605      	mov	r5, r0
 80255b4:	d405      	bmi.n	80255c2 <_fflush_r+0x42>
 80255b6:	89a3      	ldrh	r3, [r4, #12]
 80255b8:	059b      	lsls	r3, r3, #22
 80255ba:	d402      	bmi.n	80255c2 <_fflush_r+0x42>
 80255bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80255be:	f001 fe02 	bl	80271c6 <__retarget_lock_release_recursive>
 80255c2:	4628      	mov	r0, r5
 80255c4:	bd38      	pop	{r3, r4, r5, pc}
 80255c6:	4605      	mov	r5, r0
 80255c8:	e7fb      	b.n	80255c2 <_fflush_r+0x42>
	...

080255cc <sprintf>:
 80255cc:	b40e      	push	{r1, r2, r3}
 80255ce:	b500      	push	{lr}
 80255d0:	b09c      	sub	sp, #112	@ 0x70
 80255d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80255d4:	9002      	str	r0, [sp, #8]
 80255d6:	9006      	str	r0, [sp, #24]
 80255d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80255dc:	4809      	ldr	r0, [pc, #36]	@ (8025604 <sprintf+0x38>)
 80255de:	9107      	str	r1, [sp, #28]
 80255e0:	9104      	str	r1, [sp, #16]
 80255e2:	4909      	ldr	r1, [pc, #36]	@ (8025608 <sprintf+0x3c>)
 80255e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80255e8:	9105      	str	r1, [sp, #20]
 80255ea:	6800      	ldr	r0, [r0, #0]
 80255ec:	9301      	str	r3, [sp, #4]
 80255ee:	a902      	add	r1, sp, #8
 80255f0:	f004 fd26 	bl	802a040 <_svfprintf_r>
 80255f4:	9b02      	ldr	r3, [sp, #8]
 80255f6:	2200      	movs	r2, #0
 80255f8:	701a      	strb	r2, [r3, #0]
 80255fa:	b01c      	add	sp, #112	@ 0x70
 80255fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8025600:	b003      	add	sp, #12
 8025602:	4770      	bx	lr
 8025604:	20000430 	.word	0x20000430
 8025608:	ffff0208 	.word	0xffff0208

0802560c <sscanf>:
 802560c:	b40e      	push	{r1, r2, r3}
 802560e:	b530      	push	{r4, r5, lr}
 8025610:	b09c      	sub	sp, #112	@ 0x70
 8025612:	ac1f      	add	r4, sp, #124	@ 0x7c
 8025614:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8025618:	f854 5b04 	ldr.w	r5, [r4], #4
 802561c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8025620:	9002      	str	r0, [sp, #8]
 8025622:	9006      	str	r0, [sp, #24]
 8025624:	f7da fe3c 	bl	80002a0 <strlen>
 8025628:	4b0b      	ldr	r3, [pc, #44]	@ (8025658 <sscanf+0x4c>)
 802562a:	9003      	str	r0, [sp, #12]
 802562c:	9007      	str	r0, [sp, #28]
 802562e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025630:	480a      	ldr	r0, [pc, #40]	@ (802565c <sscanf+0x50>)
 8025632:	9401      	str	r4, [sp, #4]
 8025634:	2300      	movs	r3, #0
 8025636:	930e      	str	r3, [sp, #56]	@ 0x38
 8025638:	9313      	str	r3, [sp, #76]	@ 0x4c
 802563a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802563e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025642:	462a      	mov	r2, r5
 8025644:	4623      	mov	r3, r4
 8025646:	a902      	add	r1, sp, #8
 8025648:	6800      	ldr	r0, [r0, #0]
 802564a:	f005 ff3b 	bl	802b4c4 <__ssvfscanf_r>
 802564e:	b01c      	add	sp, #112	@ 0x70
 8025650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025654:	b003      	add	sp, #12
 8025656:	4770      	bx	lr
 8025658:	08025683 	.word	0x08025683
 802565c:	20000430 	.word	0x20000430

08025660 <__sread>:
 8025660:	b510      	push	{r4, lr}
 8025662:	460c      	mov	r4, r1
 8025664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025668:	f001 fd52 	bl	8027110 <_read_r>
 802566c:	2800      	cmp	r0, #0
 802566e:	bfab      	itete	ge
 8025670:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8025672:	89a3      	ldrhlt	r3, [r4, #12]
 8025674:	181b      	addge	r3, r3, r0
 8025676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802567a:	bfac      	ite	ge
 802567c:	6523      	strge	r3, [r4, #80]	@ 0x50
 802567e:	81a3      	strhlt	r3, [r4, #12]
 8025680:	bd10      	pop	{r4, pc}

08025682 <__seofread>:
 8025682:	2000      	movs	r0, #0
 8025684:	4770      	bx	lr

08025686 <__swrite>:
 8025686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802568a:	461f      	mov	r7, r3
 802568c:	898b      	ldrh	r3, [r1, #12]
 802568e:	05db      	lsls	r3, r3, #23
 8025690:	4605      	mov	r5, r0
 8025692:	460c      	mov	r4, r1
 8025694:	4616      	mov	r6, r2
 8025696:	d505      	bpl.n	80256a4 <__swrite+0x1e>
 8025698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802569c:	2302      	movs	r3, #2
 802569e:	2200      	movs	r2, #0
 80256a0:	f001 fd24 	bl	80270ec <_lseek_r>
 80256a4:	89a3      	ldrh	r3, [r4, #12]
 80256a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80256aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80256ae:	81a3      	strh	r3, [r4, #12]
 80256b0:	4632      	mov	r2, r6
 80256b2:	463b      	mov	r3, r7
 80256b4:	4628      	mov	r0, r5
 80256b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80256ba:	f001 bd3b 	b.w	8027134 <_write_r>

080256be <__sseek>:
 80256be:	b510      	push	{r4, lr}
 80256c0:	460c      	mov	r4, r1
 80256c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80256c6:	f001 fd11 	bl	80270ec <_lseek_r>
 80256ca:	1c43      	adds	r3, r0, #1
 80256cc:	89a3      	ldrh	r3, [r4, #12]
 80256ce:	bf15      	itete	ne
 80256d0:	6520      	strne	r0, [r4, #80]	@ 0x50
 80256d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80256d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80256da:	81a3      	strheq	r3, [r4, #12]
 80256dc:	bf18      	it	ne
 80256de:	81a3      	strhne	r3, [r4, #12]
 80256e0:	bd10      	pop	{r4, pc}

080256e2 <__sclose>:
 80256e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80256e6:	f001 bcc5 	b.w	8027074 <_close_r>
	...

080256ec <std>:
 80256ec:	2300      	movs	r3, #0
 80256ee:	b510      	push	{r4, lr}
 80256f0:	4604      	mov	r4, r0
 80256f2:	e9c0 3300 	strd	r3, r3, [r0]
 80256f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80256fa:	6083      	str	r3, [r0, #8]
 80256fc:	8181      	strh	r1, [r0, #12]
 80256fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8025700:	81c2      	strh	r2, [r0, #14]
 8025702:	6183      	str	r3, [r0, #24]
 8025704:	4619      	mov	r1, r3
 8025706:	2208      	movs	r2, #8
 8025708:	305c      	adds	r0, #92	@ 0x5c
 802570a:	f000 fb21 	bl	8025d50 <memset>
 802570e:	4b0d      	ldr	r3, [pc, #52]	@ (8025744 <std+0x58>)
 8025710:	6223      	str	r3, [r4, #32]
 8025712:	4b0d      	ldr	r3, [pc, #52]	@ (8025748 <std+0x5c>)
 8025714:	6263      	str	r3, [r4, #36]	@ 0x24
 8025716:	4b0d      	ldr	r3, [pc, #52]	@ (802574c <std+0x60>)
 8025718:	62a3      	str	r3, [r4, #40]	@ 0x28
 802571a:	4b0d      	ldr	r3, [pc, #52]	@ (8025750 <std+0x64>)
 802571c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802571e:	4b0d      	ldr	r3, [pc, #52]	@ (8025754 <std+0x68>)
 8025720:	61e4      	str	r4, [r4, #28]
 8025722:	429c      	cmp	r4, r3
 8025724:	d006      	beq.n	8025734 <std+0x48>
 8025726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802572a:	4294      	cmp	r4, r2
 802572c:	d002      	beq.n	8025734 <std+0x48>
 802572e:	33d0      	adds	r3, #208	@ 0xd0
 8025730:	429c      	cmp	r4, r3
 8025732:	d105      	bne.n	8025740 <std+0x54>
 8025734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802573c:	f001 bd3e 	b.w	80271bc <__retarget_lock_init_recursive>
 8025740:	bd10      	pop	{r4, pc}
 8025742:	bf00      	nop
 8025744:	08025661 	.word	0x08025661
 8025748:	08025687 	.word	0x08025687
 802574c:	080256bf 	.word	0x080256bf
 8025750:	080256e3 	.word	0x080256e3
 8025754:	20018178 	.word	0x20018178

08025758 <stdio_exit_handler>:
 8025758:	4a02      	ldr	r2, [pc, #8]	@ (8025764 <stdio_exit_handler+0xc>)
 802575a:	4903      	ldr	r1, [pc, #12]	@ (8025768 <stdio_exit_handler+0x10>)
 802575c:	4803      	ldr	r0, [pc, #12]	@ (802576c <stdio_exit_handler+0x14>)
 802575e:	f000 b9ef 	b.w	8025b40 <_fwalk_sglue>
 8025762:	bf00      	nop
 8025764:	200002b0 	.word	0x200002b0
 8025768:	0802d101 	.word	0x0802d101
 802576c:	20000438 	.word	0x20000438

08025770 <cleanup_stdio>:
 8025770:	6841      	ldr	r1, [r0, #4]
 8025772:	4b0c      	ldr	r3, [pc, #48]	@ (80257a4 <cleanup_stdio+0x34>)
 8025774:	4299      	cmp	r1, r3
 8025776:	b510      	push	{r4, lr}
 8025778:	4604      	mov	r4, r0
 802577a:	d001      	beq.n	8025780 <cleanup_stdio+0x10>
 802577c:	f007 fcc0 	bl	802d100 <_fclose_r>
 8025780:	68a1      	ldr	r1, [r4, #8]
 8025782:	4b09      	ldr	r3, [pc, #36]	@ (80257a8 <cleanup_stdio+0x38>)
 8025784:	4299      	cmp	r1, r3
 8025786:	d002      	beq.n	802578e <cleanup_stdio+0x1e>
 8025788:	4620      	mov	r0, r4
 802578a:	f007 fcb9 	bl	802d100 <_fclose_r>
 802578e:	68e1      	ldr	r1, [r4, #12]
 8025790:	4b06      	ldr	r3, [pc, #24]	@ (80257ac <cleanup_stdio+0x3c>)
 8025792:	4299      	cmp	r1, r3
 8025794:	d004      	beq.n	80257a0 <cleanup_stdio+0x30>
 8025796:	4620      	mov	r0, r4
 8025798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802579c:	f007 bcb0 	b.w	802d100 <_fclose_r>
 80257a0:	bd10      	pop	{r4, pc}
 80257a2:	bf00      	nop
 80257a4:	20018178 	.word	0x20018178
 80257a8:	200181e0 	.word	0x200181e0
 80257ac:	20018248 	.word	0x20018248

080257b0 <global_stdio_init.part.0>:
 80257b0:	b510      	push	{r4, lr}
 80257b2:	4b0b      	ldr	r3, [pc, #44]	@ (80257e0 <global_stdio_init.part.0+0x30>)
 80257b4:	4c0b      	ldr	r4, [pc, #44]	@ (80257e4 <global_stdio_init.part.0+0x34>)
 80257b6:	4a0c      	ldr	r2, [pc, #48]	@ (80257e8 <global_stdio_init.part.0+0x38>)
 80257b8:	601a      	str	r2, [r3, #0]
 80257ba:	4620      	mov	r0, r4
 80257bc:	2200      	movs	r2, #0
 80257be:	2104      	movs	r1, #4
 80257c0:	f7ff ff94 	bl	80256ec <std>
 80257c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80257c8:	2201      	movs	r2, #1
 80257ca:	2109      	movs	r1, #9
 80257cc:	f7ff ff8e 	bl	80256ec <std>
 80257d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80257d4:	2202      	movs	r2, #2
 80257d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80257da:	2112      	movs	r1, #18
 80257dc:	f7ff bf86 	b.w	80256ec <std>
 80257e0:	200182b0 	.word	0x200182b0
 80257e4:	20018178 	.word	0x20018178
 80257e8:	08025759 	.word	0x08025759

080257ec <__sfp_lock_acquire>:
 80257ec:	4801      	ldr	r0, [pc, #4]	@ (80257f4 <__sfp_lock_acquire+0x8>)
 80257ee:	f001 bce8 	b.w	80271c2 <__retarget_lock_acquire_recursive>
 80257f2:	bf00      	nop
 80257f4:	200182e0 	.word	0x200182e0

080257f8 <__sfp_lock_release>:
 80257f8:	4801      	ldr	r0, [pc, #4]	@ (8025800 <__sfp_lock_release+0x8>)
 80257fa:	f001 bce4 	b.w	80271c6 <__retarget_lock_release_recursive>
 80257fe:	bf00      	nop
 8025800:	200182e0 	.word	0x200182e0

08025804 <__sinit>:
 8025804:	b510      	push	{r4, lr}
 8025806:	4604      	mov	r4, r0
 8025808:	f7ff fff0 	bl	80257ec <__sfp_lock_acquire>
 802580c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802580e:	b11b      	cbz	r3, 8025818 <__sinit+0x14>
 8025810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025814:	f7ff bff0 	b.w	80257f8 <__sfp_lock_release>
 8025818:	4b04      	ldr	r3, [pc, #16]	@ (802582c <__sinit+0x28>)
 802581a:	6363      	str	r3, [r4, #52]	@ 0x34
 802581c:	4b04      	ldr	r3, [pc, #16]	@ (8025830 <__sinit+0x2c>)
 802581e:	681b      	ldr	r3, [r3, #0]
 8025820:	2b00      	cmp	r3, #0
 8025822:	d1f5      	bne.n	8025810 <__sinit+0xc>
 8025824:	f7ff ffc4 	bl	80257b0 <global_stdio_init.part.0>
 8025828:	e7f2      	b.n	8025810 <__sinit+0xc>
 802582a:	bf00      	nop
 802582c:	08025771 	.word	0x08025771
 8025830:	200182b0 	.word	0x200182b0

08025834 <_vsnprintf_r>:
 8025834:	b530      	push	{r4, r5, lr}
 8025836:	4614      	mov	r4, r2
 8025838:	2c00      	cmp	r4, #0
 802583a:	b09b      	sub	sp, #108	@ 0x6c
 802583c:	4605      	mov	r5, r0
 802583e:	461a      	mov	r2, r3
 8025840:	da05      	bge.n	802584e <_vsnprintf_r+0x1a>
 8025842:	238b      	movs	r3, #139	@ 0x8b
 8025844:	6003      	str	r3, [r0, #0]
 8025846:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802584a:	b01b      	add	sp, #108	@ 0x6c
 802584c:	bd30      	pop	{r4, r5, pc}
 802584e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8025852:	f8ad 300c 	strh.w	r3, [sp, #12]
 8025856:	bf14      	ite	ne
 8025858:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802585c:	4623      	moveq	r3, r4
 802585e:	9302      	str	r3, [sp, #8]
 8025860:	9305      	str	r3, [sp, #20]
 8025862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8025866:	9100      	str	r1, [sp, #0]
 8025868:	9104      	str	r1, [sp, #16]
 802586a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802586e:	4669      	mov	r1, sp
 8025870:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025872:	f004 fbe5 	bl	802a040 <_svfprintf_r>
 8025876:	1c43      	adds	r3, r0, #1
 8025878:	bfbc      	itt	lt
 802587a:	238b      	movlt	r3, #139	@ 0x8b
 802587c:	602b      	strlt	r3, [r5, #0]
 802587e:	2c00      	cmp	r4, #0
 8025880:	d0e3      	beq.n	802584a <_vsnprintf_r+0x16>
 8025882:	9b00      	ldr	r3, [sp, #0]
 8025884:	2200      	movs	r2, #0
 8025886:	701a      	strb	r2, [r3, #0]
 8025888:	e7df      	b.n	802584a <_vsnprintf_r+0x16>
	...

0802588c <vsnprintf>:
 802588c:	b507      	push	{r0, r1, r2, lr}
 802588e:	9300      	str	r3, [sp, #0]
 8025890:	4613      	mov	r3, r2
 8025892:	460a      	mov	r2, r1
 8025894:	4601      	mov	r1, r0
 8025896:	4803      	ldr	r0, [pc, #12]	@ (80258a4 <vsnprintf+0x18>)
 8025898:	6800      	ldr	r0, [r0, #0]
 802589a:	f7ff ffcb 	bl	8025834 <_vsnprintf_r>
 802589e:	b003      	add	sp, #12
 80258a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80258a4:	20000430 	.word	0x20000430

080258a8 <__sfvwrite_r>:
 80258a8:	6893      	ldr	r3, [r2, #8]
 80258aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258ae:	4606      	mov	r6, r0
 80258b0:	460c      	mov	r4, r1
 80258b2:	4691      	mov	r9, r2
 80258b4:	b91b      	cbnz	r3, 80258be <__sfvwrite_r+0x16>
 80258b6:	2000      	movs	r0, #0
 80258b8:	b003      	add	sp, #12
 80258ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80258be:	898b      	ldrh	r3, [r1, #12]
 80258c0:	0718      	lsls	r0, r3, #28
 80258c2:	d550      	bpl.n	8025966 <__sfvwrite_r+0xbe>
 80258c4:	690b      	ldr	r3, [r1, #16]
 80258c6:	2b00      	cmp	r3, #0
 80258c8:	d04d      	beq.n	8025966 <__sfvwrite_r+0xbe>
 80258ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80258ce:	f8d9 8000 	ldr.w	r8, [r9]
 80258d2:	f013 0702 	ands.w	r7, r3, #2
 80258d6:	d16b      	bne.n	80259b0 <__sfvwrite_r+0x108>
 80258d8:	f013 0301 	ands.w	r3, r3, #1
 80258dc:	f000 809c 	beq.w	8025a18 <__sfvwrite_r+0x170>
 80258e0:	4638      	mov	r0, r7
 80258e2:	46ba      	mov	sl, r7
 80258e4:	46bb      	mov	fp, r7
 80258e6:	f1bb 0f00 	cmp.w	fp, #0
 80258ea:	f000 8103 	beq.w	8025af4 <__sfvwrite_r+0x24c>
 80258ee:	b950      	cbnz	r0, 8025906 <__sfvwrite_r+0x5e>
 80258f0:	465a      	mov	r2, fp
 80258f2:	210a      	movs	r1, #10
 80258f4:	4650      	mov	r0, sl
 80258f6:	f7da fc83 	bl	8000200 <memchr>
 80258fa:	2800      	cmp	r0, #0
 80258fc:	f000 8100 	beq.w	8025b00 <__sfvwrite_r+0x258>
 8025900:	3001      	adds	r0, #1
 8025902:	eba0 070a 	sub.w	r7, r0, sl
 8025906:	6820      	ldr	r0, [r4, #0]
 8025908:	6921      	ldr	r1, [r4, #16]
 802590a:	68a5      	ldr	r5, [r4, #8]
 802590c:	6963      	ldr	r3, [r4, #20]
 802590e:	455f      	cmp	r7, fp
 8025910:	463a      	mov	r2, r7
 8025912:	bf28      	it	cs
 8025914:	465a      	movcs	r2, fp
 8025916:	4288      	cmp	r0, r1
 8025918:	f240 80f5 	bls.w	8025b06 <__sfvwrite_r+0x25e>
 802591c:	441d      	add	r5, r3
 802591e:	42aa      	cmp	r2, r5
 8025920:	f340 80f1 	ble.w	8025b06 <__sfvwrite_r+0x25e>
 8025924:	4651      	mov	r1, sl
 8025926:	462a      	mov	r2, r5
 8025928:	f000 f9f8 	bl	8025d1c <memmove>
 802592c:	6823      	ldr	r3, [r4, #0]
 802592e:	442b      	add	r3, r5
 8025930:	6023      	str	r3, [r4, #0]
 8025932:	4621      	mov	r1, r4
 8025934:	4630      	mov	r0, r6
 8025936:	f7ff fe23 	bl	8025580 <_fflush_r>
 802593a:	2800      	cmp	r0, #0
 802593c:	d167      	bne.n	8025a0e <__sfvwrite_r+0x166>
 802593e:	1b7f      	subs	r7, r7, r5
 8025940:	f040 80f9 	bne.w	8025b36 <__sfvwrite_r+0x28e>
 8025944:	4621      	mov	r1, r4
 8025946:	4630      	mov	r0, r6
 8025948:	f7ff fe1a 	bl	8025580 <_fflush_r>
 802594c:	2800      	cmp	r0, #0
 802594e:	d15e      	bne.n	8025a0e <__sfvwrite_r+0x166>
 8025950:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025954:	1b5b      	subs	r3, r3, r5
 8025956:	44aa      	add	sl, r5
 8025958:	ebab 0b05 	sub.w	fp, fp, r5
 802595c:	f8c9 3008 	str.w	r3, [r9, #8]
 8025960:	2b00      	cmp	r3, #0
 8025962:	d1c0      	bne.n	80258e6 <__sfvwrite_r+0x3e>
 8025964:	e7a7      	b.n	80258b6 <__sfvwrite_r+0xe>
 8025966:	4621      	mov	r1, r4
 8025968:	4630      	mov	r0, r6
 802596a:	f000 f907 	bl	8025b7c <__swsetup_r>
 802596e:	2800      	cmp	r0, #0
 8025970:	d0ab      	beq.n	80258ca <__sfvwrite_r+0x22>
 8025972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025976:	e79f      	b.n	80258b8 <__sfvwrite_r+0x10>
 8025978:	e9d8 a500 	ldrd	sl, r5, [r8]
 802597c:	f108 0808 	add.w	r8, r8, #8
 8025980:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8025984:	69e1      	ldr	r1, [r4, #28]
 8025986:	2d00      	cmp	r5, #0
 8025988:	d0f6      	beq.n	8025978 <__sfvwrite_r+0xd0>
 802598a:	42bd      	cmp	r5, r7
 802598c:	462b      	mov	r3, r5
 802598e:	4652      	mov	r2, sl
 8025990:	bf28      	it	cs
 8025992:	463b      	movcs	r3, r7
 8025994:	4630      	mov	r0, r6
 8025996:	47d8      	blx	fp
 8025998:	2800      	cmp	r0, #0
 802599a:	dd38      	ble.n	8025a0e <__sfvwrite_r+0x166>
 802599c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80259a0:	1a1b      	subs	r3, r3, r0
 80259a2:	4482      	add	sl, r0
 80259a4:	1a2d      	subs	r5, r5, r0
 80259a6:	f8c9 3008 	str.w	r3, [r9, #8]
 80259aa:	2b00      	cmp	r3, #0
 80259ac:	d1e8      	bne.n	8025980 <__sfvwrite_r+0xd8>
 80259ae:	e782      	b.n	80258b6 <__sfvwrite_r+0xe>
 80259b0:	f04f 0a00 	mov.w	sl, #0
 80259b4:	4f61      	ldr	r7, [pc, #388]	@ (8025b3c <__sfvwrite_r+0x294>)
 80259b6:	4655      	mov	r5, sl
 80259b8:	e7e2      	b.n	8025980 <__sfvwrite_r+0xd8>
 80259ba:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80259be:	f108 0808 	add.w	r8, r8, #8
 80259c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80259c6:	6820      	ldr	r0, [r4, #0]
 80259c8:	68a2      	ldr	r2, [r4, #8]
 80259ca:	f1ba 0f00 	cmp.w	sl, #0
 80259ce:	d0f4      	beq.n	80259ba <__sfvwrite_r+0x112>
 80259d0:	0599      	lsls	r1, r3, #22
 80259d2:	d563      	bpl.n	8025a9c <__sfvwrite_r+0x1f4>
 80259d4:	4552      	cmp	r2, sl
 80259d6:	d836      	bhi.n	8025a46 <__sfvwrite_r+0x19e>
 80259d8:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80259dc:	d033      	beq.n	8025a46 <__sfvwrite_r+0x19e>
 80259de:	6921      	ldr	r1, [r4, #16]
 80259e0:	6965      	ldr	r5, [r4, #20]
 80259e2:	eba0 0b01 	sub.w	fp, r0, r1
 80259e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80259ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80259ee:	f10b 0201 	add.w	r2, fp, #1
 80259f2:	106d      	asrs	r5, r5, #1
 80259f4:	4452      	add	r2, sl
 80259f6:	4295      	cmp	r5, r2
 80259f8:	bf38      	it	cc
 80259fa:	4615      	movcc	r5, r2
 80259fc:	055b      	lsls	r3, r3, #21
 80259fe:	d53d      	bpl.n	8025a7c <__sfvwrite_r+0x1d4>
 8025a00:	4629      	mov	r1, r5
 8025a02:	4630      	mov	r0, r6
 8025a04:	f002 fbfa 	bl	80281fc <_malloc_r>
 8025a08:	b948      	cbnz	r0, 8025a1e <__sfvwrite_r+0x176>
 8025a0a:	230c      	movs	r3, #12
 8025a0c:	6033      	str	r3, [r6, #0]
 8025a0e:	89a3      	ldrh	r3, [r4, #12]
 8025a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025a14:	81a3      	strh	r3, [r4, #12]
 8025a16:	e7ac      	b.n	8025972 <__sfvwrite_r+0xca>
 8025a18:	461f      	mov	r7, r3
 8025a1a:	469a      	mov	sl, r3
 8025a1c:	e7d1      	b.n	80259c2 <__sfvwrite_r+0x11a>
 8025a1e:	465a      	mov	r2, fp
 8025a20:	6921      	ldr	r1, [r4, #16]
 8025a22:	9001      	str	r0, [sp, #4]
 8025a24:	f001 fbd0 	bl	80271c8 <memcpy>
 8025a28:	89a2      	ldrh	r2, [r4, #12]
 8025a2a:	9b01      	ldr	r3, [sp, #4]
 8025a2c:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8025a30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8025a34:	81a2      	strh	r2, [r4, #12]
 8025a36:	6123      	str	r3, [r4, #16]
 8025a38:	6165      	str	r5, [r4, #20]
 8025a3a:	445b      	add	r3, fp
 8025a3c:	eba5 050b 	sub.w	r5, r5, fp
 8025a40:	6023      	str	r3, [r4, #0]
 8025a42:	4652      	mov	r2, sl
 8025a44:	60a5      	str	r5, [r4, #8]
 8025a46:	4552      	cmp	r2, sl
 8025a48:	bf28      	it	cs
 8025a4a:	4652      	movcs	r2, sl
 8025a4c:	6820      	ldr	r0, [r4, #0]
 8025a4e:	9201      	str	r2, [sp, #4]
 8025a50:	4639      	mov	r1, r7
 8025a52:	f000 f963 	bl	8025d1c <memmove>
 8025a56:	68a3      	ldr	r3, [r4, #8]
 8025a58:	9a01      	ldr	r2, [sp, #4]
 8025a5a:	1a9b      	subs	r3, r3, r2
 8025a5c:	60a3      	str	r3, [r4, #8]
 8025a5e:	6823      	ldr	r3, [r4, #0]
 8025a60:	4413      	add	r3, r2
 8025a62:	4655      	mov	r5, sl
 8025a64:	6023      	str	r3, [r4, #0]
 8025a66:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8025a6a:	1b5b      	subs	r3, r3, r5
 8025a6c:	442f      	add	r7, r5
 8025a6e:	ebaa 0a05 	sub.w	sl, sl, r5
 8025a72:	f8c9 3008 	str.w	r3, [r9, #8]
 8025a76:	2b00      	cmp	r3, #0
 8025a78:	d1a3      	bne.n	80259c2 <__sfvwrite_r+0x11a>
 8025a7a:	e71c      	b.n	80258b6 <__sfvwrite_r+0xe>
 8025a7c:	462a      	mov	r2, r5
 8025a7e:	4630      	mov	r0, r6
 8025a80:	f007 fbcc 	bl	802d21c <_realloc_r>
 8025a84:	4603      	mov	r3, r0
 8025a86:	2800      	cmp	r0, #0
 8025a88:	d1d5      	bne.n	8025a36 <__sfvwrite_r+0x18e>
 8025a8a:	6921      	ldr	r1, [r4, #16]
 8025a8c:	4630      	mov	r0, r6
 8025a8e:	f002 fa9d 	bl	8027fcc <_free_r>
 8025a92:	89a3      	ldrh	r3, [r4, #12]
 8025a94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8025a98:	81a3      	strh	r3, [r4, #12]
 8025a9a:	e7b6      	b.n	8025a0a <__sfvwrite_r+0x162>
 8025a9c:	6923      	ldr	r3, [r4, #16]
 8025a9e:	4283      	cmp	r3, r0
 8025aa0:	d302      	bcc.n	8025aa8 <__sfvwrite_r+0x200>
 8025aa2:	6961      	ldr	r1, [r4, #20]
 8025aa4:	4551      	cmp	r1, sl
 8025aa6:	d915      	bls.n	8025ad4 <__sfvwrite_r+0x22c>
 8025aa8:	4552      	cmp	r2, sl
 8025aaa:	bf28      	it	cs
 8025aac:	4652      	movcs	r2, sl
 8025aae:	4639      	mov	r1, r7
 8025ab0:	4615      	mov	r5, r2
 8025ab2:	f000 f933 	bl	8025d1c <memmove>
 8025ab6:	68a3      	ldr	r3, [r4, #8]
 8025ab8:	6822      	ldr	r2, [r4, #0]
 8025aba:	1b5b      	subs	r3, r3, r5
 8025abc:	442a      	add	r2, r5
 8025abe:	60a3      	str	r3, [r4, #8]
 8025ac0:	6022      	str	r2, [r4, #0]
 8025ac2:	2b00      	cmp	r3, #0
 8025ac4:	d1cf      	bne.n	8025a66 <__sfvwrite_r+0x1be>
 8025ac6:	4621      	mov	r1, r4
 8025ac8:	4630      	mov	r0, r6
 8025aca:	f7ff fd59 	bl	8025580 <_fflush_r>
 8025ace:	2800      	cmp	r0, #0
 8025ad0:	d0c9      	beq.n	8025a66 <__sfvwrite_r+0x1be>
 8025ad2:	e79c      	b.n	8025a0e <__sfvwrite_r+0x166>
 8025ad4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8025ad8:	4553      	cmp	r3, sl
 8025ada:	bf28      	it	cs
 8025adc:	4653      	movcs	r3, sl
 8025ade:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8025ae0:	fb93 f3f1 	sdiv	r3, r3, r1
 8025ae4:	463a      	mov	r2, r7
 8025ae6:	434b      	muls	r3, r1
 8025ae8:	4630      	mov	r0, r6
 8025aea:	69e1      	ldr	r1, [r4, #28]
 8025aec:	47a8      	blx	r5
 8025aee:	1e05      	subs	r5, r0, #0
 8025af0:	dcb9      	bgt.n	8025a66 <__sfvwrite_r+0x1be>
 8025af2:	e78c      	b.n	8025a0e <__sfvwrite_r+0x166>
 8025af4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8025af8:	2000      	movs	r0, #0
 8025afa:	f108 0808 	add.w	r8, r8, #8
 8025afe:	e6f2      	b.n	80258e6 <__sfvwrite_r+0x3e>
 8025b00:	f10b 0701 	add.w	r7, fp, #1
 8025b04:	e6ff      	b.n	8025906 <__sfvwrite_r+0x5e>
 8025b06:	4293      	cmp	r3, r2
 8025b08:	dc08      	bgt.n	8025b1c <__sfvwrite_r+0x274>
 8025b0a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8025b0c:	69e1      	ldr	r1, [r4, #28]
 8025b0e:	4652      	mov	r2, sl
 8025b10:	4630      	mov	r0, r6
 8025b12:	47a8      	blx	r5
 8025b14:	1e05      	subs	r5, r0, #0
 8025b16:	f73f af12 	bgt.w	802593e <__sfvwrite_r+0x96>
 8025b1a:	e778      	b.n	8025a0e <__sfvwrite_r+0x166>
 8025b1c:	4651      	mov	r1, sl
 8025b1e:	9201      	str	r2, [sp, #4]
 8025b20:	f000 f8fc 	bl	8025d1c <memmove>
 8025b24:	9a01      	ldr	r2, [sp, #4]
 8025b26:	68a3      	ldr	r3, [r4, #8]
 8025b28:	1a9b      	subs	r3, r3, r2
 8025b2a:	60a3      	str	r3, [r4, #8]
 8025b2c:	6823      	ldr	r3, [r4, #0]
 8025b2e:	4413      	add	r3, r2
 8025b30:	6023      	str	r3, [r4, #0]
 8025b32:	4615      	mov	r5, r2
 8025b34:	e703      	b.n	802593e <__sfvwrite_r+0x96>
 8025b36:	2001      	movs	r0, #1
 8025b38:	e70a      	b.n	8025950 <__sfvwrite_r+0xa8>
 8025b3a:	bf00      	nop
 8025b3c:	7ffffc00 	.word	0x7ffffc00

08025b40 <_fwalk_sglue>:
 8025b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025b44:	4607      	mov	r7, r0
 8025b46:	4688      	mov	r8, r1
 8025b48:	4614      	mov	r4, r2
 8025b4a:	2600      	movs	r6, #0
 8025b4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025b50:	f1b9 0901 	subs.w	r9, r9, #1
 8025b54:	d505      	bpl.n	8025b62 <_fwalk_sglue+0x22>
 8025b56:	6824      	ldr	r4, [r4, #0]
 8025b58:	2c00      	cmp	r4, #0
 8025b5a:	d1f7      	bne.n	8025b4c <_fwalk_sglue+0xc>
 8025b5c:	4630      	mov	r0, r6
 8025b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025b62:	89ab      	ldrh	r3, [r5, #12]
 8025b64:	2b01      	cmp	r3, #1
 8025b66:	d907      	bls.n	8025b78 <_fwalk_sglue+0x38>
 8025b68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025b6c:	3301      	adds	r3, #1
 8025b6e:	d003      	beq.n	8025b78 <_fwalk_sglue+0x38>
 8025b70:	4629      	mov	r1, r5
 8025b72:	4638      	mov	r0, r7
 8025b74:	47c0      	blx	r8
 8025b76:	4306      	orrs	r6, r0
 8025b78:	3568      	adds	r5, #104	@ 0x68
 8025b7a:	e7e9      	b.n	8025b50 <_fwalk_sglue+0x10>

08025b7c <__swsetup_r>:
 8025b7c:	b538      	push	{r3, r4, r5, lr}
 8025b7e:	4b29      	ldr	r3, [pc, #164]	@ (8025c24 <__swsetup_r+0xa8>)
 8025b80:	4605      	mov	r5, r0
 8025b82:	6818      	ldr	r0, [r3, #0]
 8025b84:	460c      	mov	r4, r1
 8025b86:	b118      	cbz	r0, 8025b90 <__swsetup_r+0x14>
 8025b88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8025b8a:	b90b      	cbnz	r3, 8025b90 <__swsetup_r+0x14>
 8025b8c:	f7ff fe3a 	bl	8025804 <__sinit>
 8025b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b94:	0719      	lsls	r1, r3, #28
 8025b96:	d422      	bmi.n	8025bde <__swsetup_r+0x62>
 8025b98:	06da      	lsls	r2, r3, #27
 8025b9a:	d407      	bmi.n	8025bac <__swsetup_r+0x30>
 8025b9c:	2209      	movs	r2, #9
 8025b9e:	602a      	str	r2, [r5, #0]
 8025ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025ba4:	81a3      	strh	r3, [r4, #12]
 8025ba6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025baa:	e033      	b.n	8025c14 <__swsetup_r+0x98>
 8025bac:	0758      	lsls	r0, r3, #29
 8025bae:	d512      	bpl.n	8025bd6 <__swsetup_r+0x5a>
 8025bb0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8025bb2:	b141      	cbz	r1, 8025bc6 <__swsetup_r+0x4a>
 8025bb4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8025bb8:	4299      	cmp	r1, r3
 8025bba:	d002      	beq.n	8025bc2 <__swsetup_r+0x46>
 8025bbc:	4628      	mov	r0, r5
 8025bbe:	f002 fa05 	bl	8027fcc <_free_r>
 8025bc2:	2300      	movs	r3, #0
 8025bc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8025bc6:	89a3      	ldrh	r3, [r4, #12]
 8025bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8025bcc:	81a3      	strh	r3, [r4, #12]
 8025bce:	2300      	movs	r3, #0
 8025bd0:	6063      	str	r3, [r4, #4]
 8025bd2:	6923      	ldr	r3, [r4, #16]
 8025bd4:	6023      	str	r3, [r4, #0]
 8025bd6:	89a3      	ldrh	r3, [r4, #12]
 8025bd8:	f043 0308 	orr.w	r3, r3, #8
 8025bdc:	81a3      	strh	r3, [r4, #12]
 8025bde:	6923      	ldr	r3, [r4, #16]
 8025be0:	b94b      	cbnz	r3, 8025bf6 <__swsetup_r+0x7a>
 8025be2:	89a3      	ldrh	r3, [r4, #12]
 8025be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025bec:	d003      	beq.n	8025bf6 <__swsetup_r+0x7a>
 8025bee:	4621      	mov	r1, r4
 8025bf0:	4628      	mov	r0, r5
 8025bf2:	f005 fc2b 	bl	802b44c <__smakebuf_r>
 8025bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025bfa:	f013 0201 	ands.w	r2, r3, #1
 8025bfe:	d00a      	beq.n	8025c16 <__swsetup_r+0x9a>
 8025c00:	2200      	movs	r2, #0
 8025c02:	60a2      	str	r2, [r4, #8]
 8025c04:	6962      	ldr	r2, [r4, #20]
 8025c06:	4252      	negs	r2, r2
 8025c08:	61a2      	str	r2, [r4, #24]
 8025c0a:	6922      	ldr	r2, [r4, #16]
 8025c0c:	b942      	cbnz	r2, 8025c20 <__swsetup_r+0xa4>
 8025c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025c12:	d1c5      	bne.n	8025ba0 <__swsetup_r+0x24>
 8025c14:	bd38      	pop	{r3, r4, r5, pc}
 8025c16:	0799      	lsls	r1, r3, #30
 8025c18:	bf58      	it	pl
 8025c1a:	6962      	ldrpl	r2, [r4, #20]
 8025c1c:	60a2      	str	r2, [r4, #8]
 8025c1e:	e7f4      	b.n	8025c0a <__swsetup_r+0x8e>
 8025c20:	2000      	movs	r0, #0
 8025c22:	e7f7      	b.n	8025c14 <__swsetup_r+0x98>
 8025c24:	20000430 	.word	0x20000430

08025c28 <memcmp>:
 8025c28:	b510      	push	{r4, lr}
 8025c2a:	3901      	subs	r1, #1
 8025c2c:	4402      	add	r2, r0
 8025c2e:	4290      	cmp	r0, r2
 8025c30:	d101      	bne.n	8025c36 <memcmp+0xe>
 8025c32:	2000      	movs	r0, #0
 8025c34:	e005      	b.n	8025c42 <memcmp+0x1a>
 8025c36:	7803      	ldrb	r3, [r0, #0]
 8025c38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025c3c:	42a3      	cmp	r3, r4
 8025c3e:	d001      	beq.n	8025c44 <memcmp+0x1c>
 8025c40:	1b18      	subs	r0, r3, r4
 8025c42:	bd10      	pop	{r4, pc}
 8025c44:	3001      	adds	r0, #1
 8025c46:	e7f2      	b.n	8025c2e <memcmp+0x6>

08025c48 <__fputwc>:
 8025c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025c4c:	4680      	mov	r8, r0
 8025c4e:	460f      	mov	r7, r1
 8025c50:	4614      	mov	r4, r2
 8025c52:	f001 fa05 	bl	8027060 <__locale_mb_cur_max>
 8025c56:	2801      	cmp	r0, #1
 8025c58:	4605      	mov	r5, r0
 8025c5a:	d11b      	bne.n	8025c94 <__fputwc+0x4c>
 8025c5c:	1e7b      	subs	r3, r7, #1
 8025c5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8025c60:	d818      	bhi.n	8025c94 <__fputwc+0x4c>
 8025c62:	f88d 7004 	strb.w	r7, [sp, #4]
 8025c66:	2600      	movs	r6, #0
 8025c68:	f10d 0904 	add.w	r9, sp, #4
 8025c6c:	42ae      	cmp	r6, r5
 8025c6e:	d021      	beq.n	8025cb4 <__fputwc+0x6c>
 8025c70:	68a3      	ldr	r3, [r4, #8]
 8025c72:	f816 1009 	ldrb.w	r1, [r6, r9]
 8025c76:	3b01      	subs	r3, #1
 8025c78:	2b00      	cmp	r3, #0
 8025c7a:	60a3      	str	r3, [r4, #8]
 8025c7c:	da04      	bge.n	8025c88 <__fputwc+0x40>
 8025c7e:	69a2      	ldr	r2, [r4, #24]
 8025c80:	4293      	cmp	r3, r2
 8025c82:	db1b      	blt.n	8025cbc <__fputwc+0x74>
 8025c84:	290a      	cmp	r1, #10
 8025c86:	d019      	beq.n	8025cbc <__fputwc+0x74>
 8025c88:	6823      	ldr	r3, [r4, #0]
 8025c8a:	1c5a      	adds	r2, r3, #1
 8025c8c:	6022      	str	r2, [r4, #0]
 8025c8e:	7019      	strb	r1, [r3, #0]
 8025c90:	3601      	adds	r6, #1
 8025c92:	e7eb      	b.n	8025c6c <__fputwc+0x24>
 8025c94:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8025c98:	463a      	mov	r2, r7
 8025c9a:	a901      	add	r1, sp, #4
 8025c9c:	4640      	mov	r0, r8
 8025c9e:	f001 faa1 	bl	80271e4 <_wcrtomb_r>
 8025ca2:	1c43      	adds	r3, r0, #1
 8025ca4:	4605      	mov	r5, r0
 8025ca6:	d1de      	bne.n	8025c66 <__fputwc+0x1e>
 8025ca8:	89a3      	ldrh	r3, [r4, #12]
 8025caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025cae:	81a3      	strh	r3, [r4, #12]
 8025cb0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8025cb4:	4638      	mov	r0, r7
 8025cb6:	b003      	add	sp, #12
 8025cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025cbc:	4622      	mov	r2, r4
 8025cbe:	4640      	mov	r0, r8
 8025cc0:	f008 fb1d 	bl	802e2fe <__swbuf_r>
 8025cc4:	3001      	adds	r0, #1
 8025cc6:	d1e3      	bne.n	8025c90 <__fputwc+0x48>
 8025cc8:	e7f2      	b.n	8025cb0 <__fputwc+0x68>

08025cca <_fputwc_r>:
 8025cca:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8025ccc:	07db      	lsls	r3, r3, #31
 8025cce:	b570      	push	{r4, r5, r6, lr}
 8025cd0:	4605      	mov	r5, r0
 8025cd2:	460e      	mov	r6, r1
 8025cd4:	4614      	mov	r4, r2
 8025cd6:	d405      	bmi.n	8025ce4 <_fputwc_r+0x1a>
 8025cd8:	8993      	ldrh	r3, [r2, #12]
 8025cda:	0598      	lsls	r0, r3, #22
 8025cdc:	d402      	bmi.n	8025ce4 <_fputwc_r+0x1a>
 8025cde:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8025ce0:	f001 fa6f 	bl	80271c2 <__retarget_lock_acquire_recursive>
 8025ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ce8:	0499      	lsls	r1, r3, #18
 8025cea:	d406      	bmi.n	8025cfa <_fputwc_r+0x30>
 8025cec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8025cf0:	81a3      	strh	r3, [r4, #12]
 8025cf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025cf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8025cf8:	6663      	str	r3, [r4, #100]	@ 0x64
 8025cfa:	4622      	mov	r2, r4
 8025cfc:	4628      	mov	r0, r5
 8025cfe:	4631      	mov	r1, r6
 8025d00:	f7ff ffa2 	bl	8025c48 <__fputwc>
 8025d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025d06:	07da      	lsls	r2, r3, #31
 8025d08:	4605      	mov	r5, r0
 8025d0a:	d405      	bmi.n	8025d18 <_fputwc_r+0x4e>
 8025d0c:	89a3      	ldrh	r3, [r4, #12]
 8025d0e:	059b      	lsls	r3, r3, #22
 8025d10:	d402      	bmi.n	8025d18 <_fputwc_r+0x4e>
 8025d12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025d14:	f001 fa57 	bl	80271c6 <__retarget_lock_release_recursive>
 8025d18:	4628      	mov	r0, r5
 8025d1a:	bd70      	pop	{r4, r5, r6, pc}

08025d1c <memmove>:
 8025d1c:	4288      	cmp	r0, r1
 8025d1e:	b510      	push	{r4, lr}
 8025d20:	eb01 0402 	add.w	r4, r1, r2
 8025d24:	d902      	bls.n	8025d2c <memmove+0x10>
 8025d26:	4284      	cmp	r4, r0
 8025d28:	4623      	mov	r3, r4
 8025d2a:	d807      	bhi.n	8025d3c <memmove+0x20>
 8025d2c:	1e43      	subs	r3, r0, #1
 8025d2e:	42a1      	cmp	r1, r4
 8025d30:	d008      	beq.n	8025d44 <memmove+0x28>
 8025d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025d3a:	e7f8      	b.n	8025d2e <memmove+0x12>
 8025d3c:	4402      	add	r2, r0
 8025d3e:	4601      	mov	r1, r0
 8025d40:	428a      	cmp	r2, r1
 8025d42:	d100      	bne.n	8025d46 <memmove+0x2a>
 8025d44:	bd10      	pop	{r4, pc}
 8025d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025d4e:	e7f7      	b.n	8025d40 <memmove+0x24>

08025d50 <memset>:
 8025d50:	4402      	add	r2, r0
 8025d52:	4603      	mov	r3, r0
 8025d54:	4293      	cmp	r3, r2
 8025d56:	d100      	bne.n	8025d5a <memset+0xa>
 8025d58:	4770      	bx	lr
 8025d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8025d5e:	e7f9      	b.n	8025d54 <memset+0x4>

08025d60 <strcat>:
 8025d60:	b510      	push	{r4, lr}
 8025d62:	4602      	mov	r2, r0
 8025d64:	7814      	ldrb	r4, [r2, #0]
 8025d66:	4613      	mov	r3, r2
 8025d68:	3201      	adds	r2, #1
 8025d6a:	2c00      	cmp	r4, #0
 8025d6c:	d1fa      	bne.n	8025d64 <strcat+0x4>
 8025d6e:	3b01      	subs	r3, #1
 8025d70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025d74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025d78:	2a00      	cmp	r2, #0
 8025d7a:	d1f9      	bne.n	8025d70 <strcat+0x10>
 8025d7c:	bd10      	pop	{r4, pc}

08025d7e <strchr>:
 8025d7e:	b2c9      	uxtb	r1, r1
 8025d80:	4603      	mov	r3, r0
 8025d82:	4618      	mov	r0, r3
 8025d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025d88:	b112      	cbz	r2, 8025d90 <strchr+0x12>
 8025d8a:	428a      	cmp	r2, r1
 8025d8c:	d1f9      	bne.n	8025d82 <strchr+0x4>
 8025d8e:	4770      	bx	lr
 8025d90:	2900      	cmp	r1, #0
 8025d92:	bf18      	it	ne
 8025d94:	2000      	movne	r0, #0
 8025d96:	4770      	bx	lr

08025d98 <strcspn>:
 8025d98:	b570      	push	{r4, r5, r6, lr}
 8025d9a:	4603      	mov	r3, r0
 8025d9c:	461e      	mov	r6, r3
 8025d9e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8025da2:	b144      	cbz	r4, 8025db6 <strcspn+0x1e>
 8025da4:	1e4a      	subs	r2, r1, #1
 8025da6:	e001      	b.n	8025dac <strcspn+0x14>
 8025da8:	42a5      	cmp	r5, r4
 8025daa:	d004      	beq.n	8025db6 <strcspn+0x1e>
 8025dac:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8025db0:	2d00      	cmp	r5, #0
 8025db2:	d1f9      	bne.n	8025da8 <strcspn+0x10>
 8025db4:	e7f2      	b.n	8025d9c <strcspn+0x4>
 8025db6:	1a30      	subs	r0, r6, r0
 8025db8:	bd70      	pop	{r4, r5, r6, pc}

08025dba <strncmp>:
 8025dba:	b510      	push	{r4, lr}
 8025dbc:	b16a      	cbz	r2, 8025dda <strncmp+0x20>
 8025dbe:	3901      	subs	r1, #1
 8025dc0:	1884      	adds	r4, r0, r2
 8025dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025dc6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8025dca:	429a      	cmp	r2, r3
 8025dcc:	d103      	bne.n	8025dd6 <strncmp+0x1c>
 8025dce:	42a0      	cmp	r0, r4
 8025dd0:	d001      	beq.n	8025dd6 <strncmp+0x1c>
 8025dd2:	2a00      	cmp	r2, #0
 8025dd4:	d1f5      	bne.n	8025dc2 <strncmp+0x8>
 8025dd6:	1ad0      	subs	r0, r2, r3
 8025dd8:	bd10      	pop	{r4, pc}
 8025dda:	4610      	mov	r0, r2
 8025ddc:	e7fc      	b.n	8025dd8 <strncmp+0x1e>

08025dde <strncpy>:
 8025dde:	b510      	push	{r4, lr}
 8025de0:	3901      	subs	r1, #1
 8025de2:	4603      	mov	r3, r0
 8025de4:	b132      	cbz	r2, 8025df4 <strncpy+0x16>
 8025de6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025dea:	f803 4b01 	strb.w	r4, [r3], #1
 8025dee:	3a01      	subs	r2, #1
 8025df0:	2c00      	cmp	r4, #0
 8025df2:	d1f7      	bne.n	8025de4 <strncpy+0x6>
 8025df4:	441a      	add	r2, r3
 8025df6:	2100      	movs	r1, #0
 8025df8:	4293      	cmp	r3, r2
 8025dfa:	d100      	bne.n	8025dfe <strncpy+0x20>
 8025dfc:	bd10      	pop	{r4, pc}
 8025dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8025e02:	e7f9      	b.n	8025df8 <strncpy+0x1a>

08025e04 <strrchr>:
 8025e04:	b538      	push	{r3, r4, r5, lr}
 8025e06:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8025e0a:	4603      	mov	r3, r0
 8025e0c:	d10e      	bne.n	8025e2c <strrchr+0x28>
 8025e0e:	4621      	mov	r1, r4
 8025e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025e14:	f7ff bfb3 	b.w	8025d7e <strchr>
 8025e18:	1c43      	adds	r3, r0, #1
 8025e1a:	4605      	mov	r5, r0
 8025e1c:	4621      	mov	r1, r4
 8025e1e:	4618      	mov	r0, r3
 8025e20:	f7ff ffad 	bl	8025d7e <strchr>
 8025e24:	2800      	cmp	r0, #0
 8025e26:	d1f7      	bne.n	8025e18 <strrchr+0x14>
 8025e28:	4628      	mov	r0, r5
 8025e2a:	bd38      	pop	{r3, r4, r5, pc}
 8025e2c:	2500      	movs	r5, #0
 8025e2e:	e7f5      	b.n	8025e1c <strrchr+0x18>

08025e30 <strspn>:
 8025e30:	b570      	push	{r4, r5, r6, lr}
 8025e32:	4603      	mov	r3, r0
 8025e34:	461e      	mov	r6, r3
 8025e36:	f813 4b01 	ldrb.w	r4, [r3], #1
 8025e3a:	b13c      	cbz	r4, 8025e4c <strspn+0x1c>
 8025e3c:	1e4a      	subs	r2, r1, #1
 8025e3e:	e001      	b.n	8025e44 <strspn+0x14>
 8025e40:	42a5      	cmp	r5, r4
 8025e42:	d0f7      	beq.n	8025e34 <strspn+0x4>
 8025e44:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8025e48:	2d00      	cmp	r5, #0
 8025e4a:	d1f9      	bne.n	8025e40 <strspn+0x10>
 8025e4c:	1a30      	subs	r0, r6, r0
 8025e4e:	bd70      	pop	{r4, r5, r6, pc}

08025e50 <strstr>:
 8025e50:	780a      	ldrb	r2, [r1, #0]
 8025e52:	b570      	push	{r4, r5, r6, lr}
 8025e54:	b96a      	cbnz	r2, 8025e72 <strstr+0x22>
 8025e56:	bd70      	pop	{r4, r5, r6, pc}
 8025e58:	429a      	cmp	r2, r3
 8025e5a:	d109      	bne.n	8025e70 <strstr+0x20>
 8025e5c:	460c      	mov	r4, r1
 8025e5e:	4605      	mov	r5, r0
 8025e60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	d0f6      	beq.n	8025e56 <strstr+0x6>
 8025e68:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8025e6c:	429e      	cmp	r6, r3
 8025e6e:	d0f7      	beq.n	8025e60 <strstr+0x10>
 8025e70:	3001      	adds	r0, #1
 8025e72:	7803      	ldrb	r3, [r0, #0]
 8025e74:	2b00      	cmp	r3, #0
 8025e76:	d1ef      	bne.n	8025e58 <strstr+0x8>
 8025e78:	4618      	mov	r0, r3
 8025e7a:	e7ec      	b.n	8025e56 <strstr+0x6>

08025e7c <localtime_r>:
 8025e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e80:	460c      	mov	r4, r1
 8025e82:	4680      	mov	r8, r0
 8025e84:	f008 fab6 	bl	802e3f4 <__gettzinfo>
 8025e88:	4621      	mov	r1, r4
 8025e8a:	4605      	mov	r5, r0
 8025e8c:	4640      	mov	r0, r8
 8025e8e:	f008 fab5 	bl	802e3fc <gmtime_r>
 8025e92:	6943      	ldr	r3, [r0, #20]
 8025e94:	0799      	lsls	r1, r3, #30
 8025e96:	4604      	mov	r4, r0
 8025e98:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8025e9c:	d106      	bne.n	8025eac <localtime_r+0x30>
 8025e9e:	2264      	movs	r2, #100	@ 0x64
 8025ea0:	fb97 f3f2 	sdiv	r3, r7, r2
 8025ea4:	fb02 7313 	mls	r3, r2, r3, r7
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	d170      	bne.n	8025f8e <localtime_r+0x112>
 8025eac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8025eb0:	fb97 f3f2 	sdiv	r3, r7, r2
 8025eb4:	fb02 7313 	mls	r3, r2, r3, r7
 8025eb8:	fab3 f383 	clz	r3, r3
 8025ebc:	095b      	lsrs	r3, r3, #5
 8025ebe:	4e64      	ldr	r6, [pc, #400]	@ (8026050 <localtime_r+0x1d4>)
 8025ec0:	2230      	movs	r2, #48	@ 0x30
 8025ec2:	fb02 6603 	mla	r6, r2, r3, r6
 8025ec6:	f000 fe97 	bl	8026bf8 <__tz_lock>
 8025eca:	f000 fea1 	bl	8026c10 <_tzset_unlocked>
 8025ece:	4b61      	ldr	r3, [pc, #388]	@ (8026054 <localtime_r+0x1d8>)
 8025ed0:	681b      	ldr	r3, [r3, #0]
 8025ed2:	2b00      	cmp	r3, #0
 8025ed4:	d06a      	beq.n	8025fac <localtime_r+0x130>
 8025ed6:	686b      	ldr	r3, [r5, #4]
 8025ed8:	42bb      	cmp	r3, r7
 8025eda:	d15a      	bne.n	8025f92 <localtime_r+0x116>
 8025edc:	682f      	ldr	r7, [r5, #0]
 8025ede:	e9d8 2300 	ldrd	r2, r3, [r8]
 8025ee2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8025ee6:	2f00      	cmp	r7, #0
 8025ee8:	d15b      	bne.n	8025fa2 <localtime_r+0x126>
 8025eea:	4282      	cmp	r2, r0
 8025eec:	eb73 0101 	sbcs.w	r1, r3, r1
 8025ef0:	db5e      	blt.n	8025fb0 <localtime_r+0x134>
 8025ef2:	2301      	movs	r3, #1
 8025ef4:	6223      	str	r3, [r4, #32]
 8025ef6:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8025ef8:	6861      	ldr	r1, [r4, #4]
 8025efa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8025efe:	fb93 f0f2 	sdiv	r0, r3, r2
 8025f02:	fb02 3310 	mls	r3, r2, r0, r3
 8025f06:	223c      	movs	r2, #60	@ 0x3c
 8025f08:	fb93 f5f2 	sdiv	r5, r3, r2
 8025f0c:	fb02 3215 	mls	r2, r2, r5, r3
 8025f10:	6823      	ldr	r3, [r4, #0]
 8025f12:	1a9b      	subs	r3, r3, r2
 8025f14:	68a2      	ldr	r2, [r4, #8]
 8025f16:	6023      	str	r3, [r4, #0]
 8025f18:	1b49      	subs	r1, r1, r5
 8025f1a:	1a12      	subs	r2, r2, r0
 8025f1c:	2b3b      	cmp	r3, #59	@ 0x3b
 8025f1e:	6061      	str	r1, [r4, #4]
 8025f20:	60a2      	str	r2, [r4, #8]
 8025f22:	dd51      	ble.n	8025fc8 <localtime_r+0x14c>
 8025f24:	3101      	adds	r1, #1
 8025f26:	6061      	str	r1, [r4, #4]
 8025f28:	3b3c      	subs	r3, #60	@ 0x3c
 8025f2a:	6023      	str	r3, [r4, #0]
 8025f2c:	6863      	ldr	r3, [r4, #4]
 8025f2e:	2b3b      	cmp	r3, #59	@ 0x3b
 8025f30:	dd50      	ble.n	8025fd4 <localtime_r+0x158>
 8025f32:	3201      	adds	r2, #1
 8025f34:	60a2      	str	r2, [r4, #8]
 8025f36:	3b3c      	subs	r3, #60	@ 0x3c
 8025f38:	6063      	str	r3, [r4, #4]
 8025f3a:	68a3      	ldr	r3, [r4, #8]
 8025f3c:	2b17      	cmp	r3, #23
 8025f3e:	dd4f      	ble.n	8025fe0 <localtime_r+0x164>
 8025f40:	69e2      	ldr	r2, [r4, #28]
 8025f42:	3201      	adds	r2, #1
 8025f44:	61e2      	str	r2, [r4, #28]
 8025f46:	69a2      	ldr	r2, [r4, #24]
 8025f48:	3201      	adds	r2, #1
 8025f4a:	2a07      	cmp	r2, #7
 8025f4c:	bfa8      	it	ge
 8025f4e:	2200      	movge	r2, #0
 8025f50:	61a2      	str	r2, [r4, #24]
 8025f52:	68e2      	ldr	r2, [r4, #12]
 8025f54:	3b18      	subs	r3, #24
 8025f56:	3201      	adds	r2, #1
 8025f58:	60a3      	str	r3, [r4, #8]
 8025f5a:	6923      	ldr	r3, [r4, #16]
 8025f5c:	60e2      	str	r2, [r4, #12]
 8025f5e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025f62:	428a      	cmp	r2, r1
 8025f64:	dd0e      	ble.n	8025f84 <localtime_r+0x108>
 8025f66:	2b0b      	cmp	r3, #11
 8025f68:	eba2 0201 	sub.w	r2, r2, r1
 8025f6c:	60e2      	str	r2, [r4, #12]
 8025f6e:	f103 0201 	add.w	r2, r3, #1
 8025f72:	bf09      	itett	eq
 8025f74:	6963      	ldreq	r3, [r4, #20]
 8025f76:	6122      	strne	r2, [r4, #16]
 8025f78:	2200      	moveq	r2, #0
 8025f7a:	3301      	addeq	r3, #1
 8025f7c:	bf02      	ittt	eq
 8025f7e:	6122      	streq	r2, [r4, #16]
 8025f80:	6163      	streq	r3, [r4, #20]
 8025f82:	61e2      	streq	r2, [r4, #28]
 8025f84:	f000 fe3e 	bl	8026c04 <__tz_unlock>
 8025f88:	4620      	mov	r0, r4
 8025f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f8e:	2301      	movs	r3, #1
 8025f90:	e795      	b.n	8025ebe <localtime_r+0x42>
 8025f92:	4638      	mov	r0, r7
 8025f94:	f000 fd86 	bl	8026aa4 <__tzcalc_limits>
 8025f98:	2800      	cmp	r0, #0
 8025f9a:	d19f      	bne.n	8025edc <localtime_r+0x60>
 8025f9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8025fa0:	e004      	b.n	8025fac <localtime_r+0x130>
 8025fa2:	4282      	cmp	r2, r0
 8025fa4:	eb73 0101 	sbcs.w	r1, r3, r1
 8025fa8:	da02      	bge.n	8025fb0 <localtime_r+0x134>
 8025faa:	2300      	movs	r3, #0
 8025fac:	6223      	str	r3, [r4, #32]
 8025fae:	e009      	b.n	8025fc4 <localtime_r+0x148>
 8025fb0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8025fb4:	4282      	cmp	r2, r0
 8025fb6:	418b      	sbcs	r3, r1
 8025fb8:	bfb4      	ite	lt
 8025fba:	2301      	movlt	r3, #1
 8025fbc:	2300      	movge	r3, #0
 8025fbe:	6223      	str	r3, [r4, #32]
 8025fc0:	2b00      	cmp	r3, #0
 8025fc2:	d198      	bne.n	8025ef6 <localtime_r+0x7a>
 8025fc4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8025fc6:	e797      	b.n	8025ef8 <localtime_r+0x7c>
 8025fc8:	2b00      	cmp	r3, #0
 8025fca:	daaf      	bge.n	8025f2c <localtime_r+0xb0>
 8025fcc:	3901      	subs	r1, #1
 8025fce:	6061      	str	r1, [r4, #4]
 8025fd0:	333c      	adds	r3, #60	@ 0x3c
 8025fd2:	e7aa      	b.n	8025f2a <localtime_r+0xae>
 8025fd4:	2b00      	cmp	r3, #0
 8025fd6:	dab0      	bge.n	8025f3a <localtime_r+0xbe>
 8025fd8:	3a01      	subs	r2, #1
 8025fda:	60a2      	str	r2, [r4, #8]
 8025fdc:	333c      	adds	r3, #60	@ 0x3c
 8025fde:	e7ab      	b.n	8025f38 <localtime_r+0xbc>
 8025fe0:	2b00      	cmp	r3, #0
 8025fe2:	dacf      	bge.n	8025f84 <localtime_r+0x108>
 8025fe4:	69e2      	ldr	r2, [r4, #28]
 8025fe6:	3a01      	subs	r2, #1
 8025fe8:	61e2      	str	r2, [r4, #28]
 8025fea:	69a2      	ldr	r2, [r4, #24]
 8025fec:	3a01      	subs	r2, #1
 8025fee:	bf48      	it	mi
 8025ff0:	2206      	movmi	r2, #6
 8025ff2:	61a2      	str	r2, [r4, #24]
 8025ff4:	68e2      	ldr	r2, [r4, #12]
 8025ff6:	3318      	adds	r3, #24
 8025ff8:	3a01      	subs	r2, #1
 8025ffa:	60e2      	str	r2, [r4, #12]
 8025ffc:	60a3      	str	r3, [r4, #8]
 8025ffe:	2a00      	cmp	r2, #0
 8026000:	d1c0      	bne.n	8025f84 <localtime_r+0x108>
 8026002:	6923      	ldr	r3, [r4, #16]
 8026004:	3b01      	subs	r3, #1
 8026006:	d405      	bmi.n	8026014 <localtime_r+0x198>
 8026008:	6123      	str	r3, [r4, #16]
 802600a:	6923      	ldr	r3, [r4, #16]
 802600c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026010:	60e3      	str	r3, [r4, #12]
 8026012:	e7b7      	b.n	8025f84 <localtime_r+0x108>
 8026014:	230b      	movs	r3, #11
 8026016:	6123      	str	r3, [r4, #16]
 8026018:	6963      	ldr	r3, [r4, #20]
 802601a:	1e5a      	subs	r2, r3, #1
 802601c:	6162      	str	r2, [r4, #20]
 802601e:	0792      	lsls	r2, r2, #30
 8026020:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8026024:	d105      	bne.n	8026032 <localtime_r+0x1b6>
 8026026:	2164      	movs	r1, #100	@ 0x64
 8026028:	fb93 f2f1 	sdiv	r2, r3, r1
 802602c:	fb01 3212 	mls	r2, r1, r2, r3
 8026030:	b962      	cbnz	r2, 802604c <localtime_r+0x1d0>
 8026032:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8026036:	fb93 f1f2 	sdiv	r1, r3, r2
 802603a:	fb02 3311 	mls	r3, r2, r1, r3
 802603e:	fab3 f383 	clz	r3, r3
 8026042:	095b      	lsrs	r3, r3, #5
 8026044:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8026048:	61e3      	str	r3, [r4, #28]
 802604a:	e7de      	b.n	802600a <localtime_r+0x18e>
 802604c:	2301      	movs	r3, #1
 802604e:	e7f9      	b.n	8026044 <localtime_r+0x1c8>
 8026050:	08034758 	.word	0x08034758
 8026054:	200182d4 	.word	0x200182d4

08026058 <iso_year_adjust>:
 8026058:	6942      	ldr	r2, [r0, #20]
 802605a:	2a00      	cmp	r2, #0
 802605c:	f240 736c 	movw	r3, #1900	@ 0x76c
 8026060:	bfa8      	it	ge
 8026062:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 8026066:	4413      	add	r3, r2
 8026068:	0792      	lsls	r2, r2, #30
 802606a:	d105      	bne.n	8026078 <iso_year_adjust+0x20>
 802606c:	2164      	movs	r1, #100	@ 0x64
 802606e:	fb93 f2f1 	sdiv	r2, r3, r1
 8026072:	fb01 3212 	mls	r2, r1, r2, r3
 8026076:	b9ca      	cbnz	r2, 80260ac <iso_year_adjust+0x54>
 8026078:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802607c:	fb93 f1f2 	sdiv	r1, r3, r2
 8026080:	fb02 3311 	mls	r3, r2, r1, r3
 8026084:	fab3 f383 	clz	r3, r3
 8026088:	095b      	lsrs	r3, r3, #5
 802608a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802608e:	0040      	lsls	r0, r0, #1
 8026090:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8026094:	4418      	add	r0, r3
 8026096:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 802609a:	4298      	cmp	r0, r3
 802609c:	d027      	beq.n	80260ee <iso_year_adjust+0x96>
 802609e:	dc11      	bgt.n	80260c4 <iso_year_adjust+0x6c>
 80260a0:	2801      	cmp	r0, #1
 80260a2:	dc0a      	bgt.n	80260ba <iso_year_adjust+0x62>
 80260a4:	43c0      	mvns	r0, r0
 80260a6:	0fc0      	lsrs	r0, r0, #31
 80260a8:	4240      	negs	r0, r0
 80260aa:	4770      	bx	lr
 80260ac:	2301      	movs	r3, #1
 80260ae:	e7ec      	b.n	802608a <iso_year_adjust+0x32>
 80260b0:	4b10      	ldr	r3, [pc, #64]	@ (80260f4 <iso_year_adjust+0x9c>)
 80260b2:	40c3      	lsrs	r3, r0
 80260b4:	f343 0000 	sbfx	r0, r3, #0, #1
 80260b8:	4770      	bx	lr
 80260ba:	380a      	subs	r0, #10
 80260bc:	2817      	cmp	r0, #23
 80260be:	d9f7      	bls.n	80260b0 <iso_year_adjust+0x58>
 80260c0:	2000      	movs	r0, #0
 80260c2:	4770      	bx	lr
 80260c4:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 80260c8:	4298      	cmp	r0, r3
 80260ca:	dc06      	bgt.n	80260da <iso_year_adjust+0x82>
 80260cc:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 80260d0:	4298      	cmp	r0, r3
 80260d2:	bfd4      	ite	le
 80260d4:	2000      	movle	r0, #0
 80260d6:	2001      	movgt	r0, #1
 80260d8:	4770      	bx	lr
 80260da:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 80260de:	3802      	subs	r0, #2
 80260e0:	2815      	cmp	r0, #21
 80260e2:	d8ed      	bhi.n	80260c0 <iso_year_adjust+0x68>
 80260e4:	4b04      	ldr	r3, [pc, #16]	@ (80260f8 <iso_year_adjust+0xa0>)
 80260e6:	40c3      	lsrs	r3, r0
 80260e8:	f003 0001 	and.w	r0, r3, #1
 80260ec:	4770      	bx	lr
 80260ee:	2001      	movs	r0, #1
 80260f0:	4770      	bx	lr
 80260f2:	bf00      	nop
 80260f4:	00cc00cf 	.word	0x00cc00cf
 80260f8:	002a001f 	.word	0x002a001f

080260fc <__strftime.isra.0>:
 80260fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026100:	b08f      	sub	sp, #60	@ 0x3c
 8026102:	461e      	mov	r6, r3
 8026104:	2300      	movs	r3, #0
 8026106:	4607      	mov	r7, r0
 8026108:	460d      	mov	r5, r1
 802610a:	9302      	str	r3, [sp, #8]
 802610c:	461c      	mov	r4, r3
 802610e:	7813      	ldrb	r3, [r2, #0]
 8026110:	2b00      	cmp	r3, #0
 8026112:	f000 84ae 	beq.w	8026a72 <__strftime.isra.0+0x976>
 8026116:	2b25      	cmp	r3, #37	@ 0x25
 8026118:	d11f      	bne.n	802615a <__strftime.isra.0+0x5e>
 802611a:	f892 9001 	ldrb.w	r9, [r2, #1]
 802611e:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8026122:	d024      	beq.n	802616e <__strftime.isra.0+0x72>
 8026124:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8026128:	d021      	beq.n	802616e <__strftime.isra.0+0x72>
 802612a:	f102 0801 	add.w	r8, r2, #1
 802612e:	f04f 0900 	mov.w	r9, #0
 8026132:	f898 2000 	ldrb.w	r2, [r8]
 8026136:	3a31      	subs	r2, #49	@ 0x31
 8026138:	2a08      	cmp	r2, #8
 802613a:	d81b      	bhi.n	8026174 <__strftime.isra.0+0x78>
 802613c:	220a      	movs	r2, #10
 802613e:	4640      	mov	r0, r8
 8026140:	a906      	add	r1, sp, #24
 8026142:	f008 f88b 	bl	802e25c <strtoul>
 8026146:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802614a:	4602      	mov	r2, r0
 802614c:	f898 1000 	ldrb.w	r1, [r8]
 8026150:	2945      	cmp	r1, #69	@ 0x45
 8026152:	d111      	bne.n	8026178 <__strftime.isra.0+0x7c>
 8026154:	f108 0801 	add.w	r8, r8, #1
 8026158:	e010      	b.n	802617c <__strftime.isra.0+0x80>
 802615a:	1e69      	subs	r1, r5, #1
 802615c:	42a1      	cmp	r1, r4
 802615e:	f240 815d 	bls.w	802641c <__strftime.isra.0+0x320>
 8026162:	553b      	strb	r3, [r7, r4]
 8026164:	3201      	adds	r2, #1
 8026166:	f104 0a01 	add.w	sl, r4, #1
 802616a:	4654      	mov	r4, sl
 802616c:	e7cf      	b.n	802610e <__strftime.isra.0+0x12>
 802616e:	f102 0802 	add.w	r8, r2, #2
 8026172:	e7de      	b.n	8026132 <__strftime.isra.0+0x36>
 8026174:	2200      	movs	r2, #0
 8026176:	e7e9      	b.n	802614c <__strftime.isra.0+0x50>
 8026178:	294f      	cmp	r1, #79	@ 0x4f
 802617a:	d0eb      	beq.n	8026154 <__strftime.isra.0+0x58>
 802617c:	f898 0000 	ldrb.w	r0, [r8]
 8026180:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 8026184:	2955      	cmp	r1, #85	@ 0x55
 8026186:	f200 8149 	bhi.w	802641c <__strftime.isra.0+0x320>
 802618a:	e8df f011 	tbh	[pc, r1, lsl #1]
 802618e:	046a      	.short	0x046a
 8026190:	01470147 	.word	0x01470147
 8026194:	01470147 	.word	0x01470147
 8026198:	01470147 	.word	0x01470147
 802619c:	01470147 	.word	0x01470147
 80261a0:	01470147 	.word	0x01470147
 80261a4:	01470147 	.word	0x01470147
 80261a8:	01470147 	.word	0x01470147
 80261ac:	01470147 	.word	0x01470147
 80261b0:	01470147 	.word	0x01470147
 80261b4:	01470147 	.word	0x01470147
 80261b8:	01470147 	.word	0x01470147
 80261bc:	01470147 	.word	0x01470147
 80261c0:	01470147 	.word	0x01470147
 80261c4:	00750147 	.word	0x00750147
 80261c8:	00dc00a3 	.word	0x00dc00a3
 80261cc:	01470128 	.word	0x01470128
 80261d0:	01cb0159 	.word	0x01cb0159
 80261d4:	02590252 	.word	0x02590252
 80261d8:	01470147 	.word	0x01470147
 80261dc:	02710147 	.word	0x02710147
 80261e0:	01470147 	.word	0x01470147
 80261e4:	0147027c 	.word	0x0147027c
 80261e8:	033402ac 	.word	0x033402ac
 80261ec:	036a033e 	.word	0x036a033e
 80261f0:	03d80372 	.word	0x03d80372
 80261f4:	03ee00d8 	.word	0x03ee00d8
 80261f8:	01470440 	.word	0x01470440
 80261fc:	01470147 	.word	0x01470147
 8026200:	01470147 	.word	0x01470147
 8026204:	00560147 	.word	0x00560147
 8026208:	00ba008d 	.word	0x00ba008d
 802620c:	011d011d 	.word	0x011d011d
 8026210:	017e0147 	.word	0x017e0147
 8026214:	0147008d 	.word	0x0147008d
 8026218:	0252026a 	.word	0x0252026a
 802621c:	026e0259 	.word	0x026e0259
 8026220:	01470273 	.word	0x01470273
 8026224:	02a5027c 	.word	0x02a5027c
 8026228:	02b500d0 	.word	0x02b500d0
 802622c:	035d0336 	.word	0x035d0336
 8026230:	03cf03a4 	.word	0x03cf03a4
 8026234:	03e000d4 	.word	0x03e000d4
 8026238:	0403      	.short	0x0403
 802623a:	69b3      	ldr	r3, [r6, #24]
 802623c:	4aad      	ldr	r2, [pc, #692]	@ (80264f4 <__strftime.isra.0+0x3f8>)
 802623e:	3318      	adds	r3, #24
 8026240:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8026244:	4658      	mov	r0, fp
 8026246:	f7da f82b 	bl	80002a0 <strlen>
 802624a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802624e:	eb04 0a00 	add.w	sl, r4, r0
 8026252:	1e6b      	subs	r3, r5, #1
 8026254:	45a2      	cmp	sl, r4
 8026256:	d107      	bne.n	8026268 <__strftime.isra.0+0x16c>
 8026258:	f898 3000 	ldrb.w	r3, [r8]
 802625c:	2b00      	cmp	r3, #0
 802625e:	f000 8409 	beq.w	8026a74 <__strftime.isra.0+0x978>
 8026262:	f108 0201 	add.w	r2, r8, #1
 8026266:	e780      	b.n	802616a <__strftime.isra.0+0x6e>
 8026268:	42a3      	cmp	r3, r4
 802626a:	f240 80d7 	bls.w	802641c <__strftime.isra.0+0x320>
 802626e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8026272:	553a      	strb	r2, [r7, r4]
 8026274:	3401      	adds	r4, #1
 8026276:	e7ed      	b.n	8026254 <__strftime.isra.0+0x158>
 8026278:	69b2      	ldr	r2, [r6, #24]
 802627a:	4b9e      	ldr	r3, [pc, #632]	@ (80264f4 <__strftime.isra.0+0x3f8>)
 802627c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026280:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 8026284:	4658      	mov	r0, fp
 8026286:	f7da f80b 	bl	80002a0 <strlen>
 802628a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802628e:	eb04 0a00 	add.w	sl, r4, r0
 8026292:	1e6b      	subs	r3, r5, #1
 8026294:	4554      	cmp	r4, sl
 8026296:	d0df      	beq.n	8026258 <__strftime.isra.0+0x15c>
 8026298:	42a3      	cmp	r3, r4
 802629a:	f240 80bf 	bls.w	802641c <__strftime.isra.0+0x320>
 802629e:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 80262a2:	553a      	strb	r2, [r7, r4]
 80262a4:	3401      	adds	r4, #1
 80262a6:	e7f5      	b.n	8026294 <__strftime.isra.0+0x198>
 80262a8:	4b92      	ldr	r3, [pc, #584]	@ (80264f4 <__strftime.isra.0+0x3f8>)
 80262aa:	6932      	ldr	r2, [r6, #16]
 80262ac:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80262b0:	4658      	mov	r0, fp
 80262b2:	f7d9 fff5 	bl	80002a0 <strlen>
 80262b6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80262ba:	eb04 0a00 	add.w	sl, r4, r0
 80262be:	1e6b      	subs	r3, r5, #1
 80262c0:	45a2      	cmp	sl, r4
 80262c2:	d0c9      	beq.n	8026258 <__strftime.isra.0+0x15c>
 80262c4:	42a3      	cmp	r3, r4
 80262c6:	f240 80a9 	bls.w	802641c <__strftime.isra.0+0x320>
 80262ca:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 80262ce:	553a      	strb	r2, [r7, r4]
 80262d0:	3401      	adds	r4, #1
 80262d2:	e7f5      	b.n	80262c0 <__strftime.isra.0+0x1c4>
 80262d4:	6933      	ldr	r3, [r6, #16]
 80262d6:	4a87      	ldr	r2, [pc, #540]	@ (80264f4 <__strftime.isra.0+0x3f8>)
 80262d8:	330c      	adds	r3, #12
 80262da:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80262de:	4658      	mov	r0, fp
 80262e0:	f7d9 ffde 	bl	80002a0 <strlen>
 80262e4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80262e8:	eb04 0a00 	add.w	sl, r4, r0
 80262ec:	1e6b      	subs	r3, r5, #1
 80262ee:	45a2      	cmp	sl, r4
 80262f0:	d0b2      	beq.n	8026258 <__strftime.isra.0+0x15c>
 80262f2:	42a3      	cmp	r3, r4
 80262f4:	f240 8092 	bls.w	802641c <__strftime.isra.0+0x320>
 80262f8:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 80262fc:	553a      	strb	r2, [r7, r4]
 80262fe:	3401      	adds	r4, #1
 8026300:	e7f5      	b.n	80262ee <__strftime.isra.0+0x1f2>
 8026302:	4b7c      	ldr	r3, [pc, #496]	@ (80264f4 <__strftime.isra.0+0x3f8>)
 8026304:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 8026308:	4650      	mov	r0, sl
 802630a:	f7d9 ffc9 	bl	80002a0 <strlen>
 802630e:	f89a 3000 	ldrb.w	r3, [sl]
 8026312:	2b00      	cmp	r3, #0
 8026314:	f000 8341 	beq.w	802699a <__strftime.isra.0+0x89e>
 8026318:	4633      	mov	r3, r6
 802631a:	4652      	mov	r2, sl
 802631c:	1b29      	subs	r1, r5, r4
 802631e:	1938      	adds	r0, r7, r4
 8026320:	f7ff feec 	bl	80260fc <__strftime.isra.0>
 8026324:	2800      	cmp	r0, #0
 8026326:	dd79      	ble.n	802641c <__strftime.isra.0+0x320>
 8026328:	eb04 0a00 	add.w	sl, r4, r0
 802632c:	e794      	b.n	8026258 <__strftime.isra.0+0x15c>
 802632e:	4b71      	ldr	r3, [pc, #452]	@ (80264f4 <__strftime.isra.0+0x3f8>)
 8026330:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 8026334:	e7e8      	b.n	8026308 <__strftime.isra.0+0x20c>
 8026336:	4b6f      	ldr	r3, [pc, #444]	@ (80264f4 <__strftime.isra.0+0x3f8>)
 8026338:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 802633c:	e7e4      	b.n	8026308 <__strftime.isra.0+0x20c>
 802633e:	4b6d      	ldr	r3, [pc, #436]	@ (80264f4 <__strftime.isra.0+0x3f8>)
 8026340:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 8026344:	e7e0      	b.n	8026308 <__strftime.isra.0+0x20c>
 8026346:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802634a:	496b      	ldr	r1, [pc, #428]	@ (80264f8 <__strftime.isra.0+0x3fc>)
 802634c:	458a      	cmp	sl, r1
 802634e:	bfac      	ite	ge
 8026350:	f04f 0b00 	movge.w	fp, #0
 8026354:	f04f 0b01 	movlt.w	fp, #1
 8026358:	f1ba 0f00 	cmp.w	sl, #0
 802635c:	db12      	blt.n	8026384 <__strftime.isra.0+0x288>
 802635e:	2064      	movs	r0, #100	@ 0x64
 8026360:	fb9a f0f0 	sdiv	r0, sl, r0
 8026364:	3013      	adds	r0, #19
 8026366:	f1b9 0f00 	cmp.w	r9, #0
 802636a:	d015      	beq.n	8026398 <__strftime.isra.0+0x29c>
 802636c:	2863      	cmp	r0, #99	@ 0x63
 802636e:	dd28      	ble.n	80263c2 <__strftime.isra.0+0x2c6>
 8026370:	4b62      	ldr	r3, [pc, #392]	@ (80264fc <__strftime.isra.0+0x400>)
 8026372:	4963      	ldr	r1, [pc, #396]	@ (8026500 <__strftime.isra.0+0x404>)
 8026374:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8026378:	bf0c      	ite	eq
 802637a:	469c      	moveq	ip, r3
 802637c:	468c      	movne	ip, r1
 802637e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 802651c <__strftime.isra.0+0x420>
 8026382:	e00d      	b.n	80263a0 <__strftime.isra.0+0x2a4>
 8026384:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 8026388:	9203      	str	r2, [sp, #12]
 802638a:	f000 ff88 	bl	802729e <abs>
 802638e:	2164      	movs	r1, #100	@ 0x64
 8026390:	9a03      	ldr	r2, [sp, #12]
 8026392:	fb90 f0f1 	sdiv	r0, r0, r1
 8026396:	e7e6      	b.n	8026366 <__strftime.isra.0+0x26a>
 8026398:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8026500 <__strftime.isra.0+0x404>
 802639c:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8026520 <__strftime.isra.0+0x424>
 80263a0:	4b58      	ldr	r3, [pc, #352]	@ (8026504 <__strftime.isra.0+0x408>)
 80263a2:	9001      	str	r0, [sp, #4]
 80263a4:	2a02      	cmp	r2, #2
 80263a6:	bf2c      	ite	cs
 80263a8:	ebcb 0102 	rsbcs	r1, fp, r2
 80263ac:	f1cb 0102 	rsbcc	r1, fp, #2
 80263b0:	4a51      	ldr	r2, [pc, #324]	@ (80264f8 <__strftime.isra.0+0x3fc>)
 80263b2:	9100      	str	r1, [sp, #0]
 80263b4:	4592      	cmp	sl, r2
 80263b6:	bfa8      	it	ge
 80263b8:	4663      	movge	r3, ip
 80263ba:	4672      	mov	r2, lr
 80263bc:	1b29      	subs	r1, r5, r4
 80263be:	1938      	adds	r0, r7, r4
 80263c0:	e023      	b.n	802640a <__strftime.isra.0+0x30e>
 80263c2:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 8026500 <__strftime.isra.0+0x404>
 80263c6:	e7da      	b.n	802637e <__strftime.isra.0+0x282>
 80263c8:	494f      	ldr	r1, [pc, #316]	@ (8026508 <__strftime.isra.0+0x40c>)
 80263ca:	4a50      	ldr	r2, [pc, #320]	@ (802650c <__strftime.isra.0+0x410>)
 80263cc:	68f3      	ldr	r3, [r6, #12]
 80263ce:	2864      	cmp	r0, #100	@ 0x64
 80263d0:	bf18      	it	ne
 80263d2:	460a      	movne	r2, r1
 80263d4:	1b29      	subs	r1, r5, r4
 80263d6:	1938      	adds	r0, r7, r4
 80263d8:	f002 f986 	bl	80286e8 <sniprintf>
 80263dc:	e017      	b.n	802640e <__strftime.isra.0+0x312>
 80263de:	6970      	ldr	r0, [r6, #20]
 80263e0:	6933      	ldr	r3, [r6, #16]
 80263e2:	2800      	cmp	r0, #0
 80263e4:	f103 0a01 	add.w	sl, r3, #1
 80263e8:	eb07 0b04 	add.w	fp, r7, r4
 80263ec:	68f3      	ldr	r3, [r6, #12]
 80263ee:	eba5 0904 	sub.w	r9, r5, r4
 80263f2:	db19      	blt.n	8026428 <__strftime.isra.0+0x32c>
 80263f4:	2264      	movs	r2, #100	@ 0x64
 80263f6:	fb90 fcf2 	sdiv	ip, r0, r2
 80263fa:	fb02 001c 	mls	r0, r2, ip, r0
 80263fe:	4a44      	ldr	r2, [pc, #272]	@ (8026510 <__strftime.isra.0+0x414>)
 8026400:	e9cd 3000 	strd	r3, r0, [sp]
 8026404:	4649      	mov	r1, r9
 8026406:	4653      	mov	r3, sl
 8026408:	4658      	mov	r0, fp
 802640a:	f002 f96d 	bl	80286e8 <sniprintf>
 802640e:	2800      	cmp	r0, #0
 8026410:	db04      	blt.n	802641c <__strftime.isra.0+0x320>
 8026412:	eb00 0a04 	add.w	sl, r0, r4
 8026416:	4555      	cmp	r5, sl
 8026418:	f63f af1e 	bhi.w	8026258 <__strftime.isra.0+0x15c>
 802641c:	f04f 0a00 	mov.w	sl, #0
 8026420:	4650      	mov	r0, sl
 8026422:	b00f      	add	sp, #60	@ 0x3c
 8026424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026428:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802642c:	9303      	str	r3, [sp, #12]
 802642e:	f000 ff36 	bl	802729e <abs>
 8026432:	2264      	movs	r2, #100	@ 0x64
 8026434:	9b03      	ldr	r3, [sp, #12]
 8026436:	fb90 fcf2 	sdiv	ip, r0, r2
 802643a:	fb0c 0012 	mls	r0, ip, r2, r0
 802643e:	e7de      	b.n	80263fe <__strftime.isra.0+0x302>
 8026440:	2125      	movs	r1, #37	@ 0x25
 8026442:	f88d 1018 	strb.w	r1, [sp, #24]
 8026446:	f1b9 0f00 	cmp.w	r9, #0
 802644a:	d00b      	beq.n	8026464 <__strftime.isra.0+0x368>
 802644c:	2a05      	cmp	r2, #5
 802644e:	f88d 9019 	strb.w	r9, [sp, #25]
 8026452:	d817      	bhi.n	8026484 <__strftime.isra.0+0x388>
 8026454:	f10d 001a 	add.w	r0, sp, #26
 8026458:	492e      	ldr	r1, [pc, #184]	@ (8026514 <__strftime.isra.0+0x418>)
 802645a:	f000 fe83 	bl	8027164 <strcpy>
 802645e:	4633      	mov	r3, r6
 8026460:	aa06      	add	r2, sp, #24
 8026462:	e75b      	b.n	802631c <__strftime.isra.0+0x220>
 8026464:	232b      	movs	r3, #43	@ 0x2b
 8026466:	f88d 3019 	strb.w	r3, [sp, #25]
 802646a:	2304      	movs	r3, #4
 802646c:	4a2a      	ldr	r2, [pc, #168]	@ (8026518 <__strftime.isra.0+0x41c>)
 802646e:	211e      	movs	r1, #30
 8026470:	f10d 001a 	add.w	r0, sp, #26
 8026474:	f002 f938 	bl	80286e8 <sniprintf>
 8026478:	2800      	cmp	r0, #0
 802647a:	ddeb      	ble.n	8026454 <__strftime.isra.0+0x358>
 802647c:	f10d 031a 	add.w	r3, sp, #26
 8026480:	4418      	add	r0, r3
 8026482:	e7e9      	b.n	8026458 <__strftime.isra.0+0x35c>
 8026484:	1f93      	subs	r3, r2, #6
 8026486:	d0e5      	beq.n	8026454 <__strftime.isra.0+0x358>
 8026488:	e7f0      	b.n	802646c <__strftime.isra.0+0x370>
 802648a:	4630      	mov	r0, r6
 802648c:	f7ff fde4 	bl	8026058 <iso_year_adjust>
 8026490:	4682      	mov	sl, r0
 8026492:	6970      	ldr	r0, [r6, #20]
 8026494:	2800      	cmp	r0, #0
 8026496:	db11      	blt.n	80264bc <__strftime.isra.0+0x3c0>
 8026498:	2364      	movs	r3, #100	@ 0x64
 802649a:	fb90 f2f3 	sdiv	r2, r0, r3
 802649e:	fb03 0012 	mls	r0, r3, r2, r0
 80264a2:	2364      	movs	r3, #100	@ 0x64
 80264a4:	4482      	add	sl, r0
 80264a6:	fb9a f2f3 	sdiv	r2, sl, r3
 80264aa:	fb03 aa12 	mls	sl, r3, r2, sl
 80264ae:	449a      	add	sl, r3
 80264b0:	fbba f2f3 	udiv	r2, sl, r3
 80264b4:	fb03 a312 	mls	r3, r3, r2, sl
 80264b8:	4a14      	ldr	r2, [pc, #80]	@ (802650c <__strftime.isra.0+0x410>)
 80264ba:	e78b      	b.n	80263d4 <__strftime.isra.0+0x2d8>
 80264bc:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80264c0:	f000 feed 	bl	802729e <abs>
 80264c4:	2364      	movs	r3, #100	@ 0x64
 80264c6:	f1ba 0f00 	cmp.w	sl, #0
 80264ca:	fb90 f2f3 	sdiv	r2, r0, r3
 80264ce:	fb02 0013 	mls	r0, r2, r3, r0
 80264d2:	da07      	bge.n	80264e4 <__strftime.isra.0+0x3e8>
 80264d4:	6972      	ldr	r2, [r6, #20]
 80264d6:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 80264da:	429a      	cmp	r2, r3
 80264dc:	bfb8      	it	lt
 80264de:	f04f 0a01 	movlt.w	sl, #1
 80264e2:	e7de      	b.n	80264a2 <__strftime.isra.0+0x3a6>
 80264e4:	d0dd      	beq.n	80264a2 <__strftime.isra.0+0x3a6>
 80264e6:	6972      	ldr	r2, [r6, #20]
 80264e8:	4b03      	ldr	r3, [pc, #12]	@ (80264f8 <__strftime.isra.0+0x3fc>)
 80264ea:	429a      	cmp	r2, r3
 80264ec:	bfb8      	it	lt
 80264ee:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 80264f2:	e7d6      	b.n	80264a2 <__strftime.isra.0+0x3a6>
 80264f4:	080349a4 	.word	0x080349a4
 80264f8:	fffff894 	.word	0xfffff894
 80264fc:	080347c7 	.word	0x080347c7
 8026500:	080346e3 	.word	0x080346e3
 8026504:	080347c9 	.word	0x080347c9
 8026508:	080347cb 	.word	0x080347cb
 802650c:	080347d9 	.word	0x080347d9
 8026510:	080347cf 	.word	0x080347cf
 8026514:	080347e2 	.word	0x080347e2
 8026518:	080347de 	.word	0x080347de
 802651c:	080347bf 	.word	0x080347bf
 8026520:	080347b8 	.word	0x080347b8
 8026524:	6971      	ldr	r1, [r6, #20]
 8026526:	48bc      	ldr	r0, [pc, #752]	@ (8026818 <__strftime.isra.0+0x71c>)
 8026528:	9205      	str	r2, [sp, #20]
 802652a:	4281      	cmp	r1, r0
 802652c:	bfac      	ite	ge
 802652e:	2300      	movge	r3, #0
 8026530:	2301      	movlt	r3, #1
 8026532:	4630      	mov	r0, r6
 8026534:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8026538:	f7ff fd8e 	bl	8026058 <iso_year_adjust>
 802653c:	9904      	ldr	r1, [sp, #16]
 802653e:	9a05      	ldr	r2, [sp, #20]
 8026540:	2900      	cmp	r1, #0
 8026542:	4682      	mov	sl, r0
 8026544:	db3a      	blt.n	80265bc <__strftime.isra.0+0x4c0>
 8026546:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802654a:	fb91 fbfb 	sdiv	fp, r1, fp
 802654e:	f10b 0b13 	add.w	fp, fp, #19
 8026552:	6970      	ldr	r0, [r6, #20]
 8026554:	2800      	cmp	r0, #0
 8026556:	db3e      	blt.n	80265d6 <__strftime.isra.0+0x4da>
 8026558:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 802655c:	f1ba 0f00 	cmp.w	sl, #0
 8026560:	fb90 fefc 	sdiv	lr, r0, ip
 8026564:	fb0c 001e 	mls	r0, ip, lr, r0
 8026568:	da4f      	bge.n	802660a <__strftime.isra.0+0x50e>
 802656a:	4482      	add	sl, r0
 802656c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8026570:	d157      	bne.n	8026622 <__strftime.isra.0+0x526>
 8026572:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8026576:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 802657a:	9b03      	ldr	r3, [sp, #12]
 802657c:	2164      	movs	r1, #100	@ 0x64
 802657e:	fb01 aa0b 	mla	sl, r1, fp, sl
 8026582:	2b00      	cmp	r3, #0
 8026584:	f040 81f7 	bne.w	8026976 <__strftime.isra.0+0x87a>
 8026588:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 802658c:	d104      	bne.n	8026598 <__strftime.isra.0+0x49c>
 802658e:	f242 710f 	movw	r1, #9999	@ 0x270f
 8026592:	458a      	cmp	sl, r1
 8026594:	f200 8275 	bhi.w	8026a82 <__strftime.isra.0+0x986>
 8026598:	a906      	add	r1, sp, #24
 802659a:	2025      	movs	r0, #37	@ 0x25
 802659c:	7008      	strb	r0, [r1, #0]
 802659e:	f1b9 0f00 	cmp.w	r9, #0
 80265a2:	f040 81f3 	bne.w	802698c <__strftime.isra.0+0x890>
 80265a6:	1c48      	adds	r0, r1, #1
 80265a8:	499c      	ldr	r1, [pc, #624]	@ (802681c <__strftime.isra.0+0x720>)
 80265aa:	9203      	str	r2, [sp, #12]
 80265ac:	f000 fdda 	bl	8027164 <strcpy>
 80265b0:	9a03      	ldr	r2, [sp, #12]
 80265b2:	f8cd a000 	str.w	sl, [sp]
 80265b6:	4613      	mov	r3, r2
 80265b8:	aa06      	add	r2, sp, #24
 80265ba:	e098      	b.n	80266ee <__strftime.isra.0+0x5f2>
 80265bc:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 80265c0:	9205      	str	r2, [sp, #20]
 80265c2:	9104      	str	r1, [sp, #16]
 80265c4:	f000 fe6b 	bl	802729e <abs>
 80265c8:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80265cc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80265d0:	fb90 fbfc 	sdiv	fp, r0, ip
 80265d4:	e7bd      	b.n	8026552 <__strftime.isra.0+0x456>
 80265d6:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 80265da:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80265de:	f000 fe5e 	bl	802729e <abs>
 80265e2:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80265e6:	f1ba 0f00 	cmp.w	sl, #0
 80265ea:	fb90 fefc 	sdiv	lr, r0, ip
 80265ee:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80265f2:	fb0e 001c 	mls	r0, lr, ip, r0
 80265f6:	da08      	bge.n	802660a <__strftime.isra.0+0x50e>
 80265f8:	6971      	ldr	r1, [r6, #20]
 80265fa:	4b89      	ldr	r3, [pc, #548]	@ (8026820 <__strftime.isra.0+0x724>)
 80265fc:	4299      	cmp	r1, r3
 80265fe:	dab4      	bge.n	802656a <__strftime.isra.0+0x46e>
 8026600:	f04f 0a01 	mov.w	sl, #1
 8026604:	f8cd a00c 	str.w	sl, [sp, #12]
 8026608:	e7af      	b.n	802656a <__strftime.isra.0+0x46e>
 802660a:	f1ba 0f00 	cmp.w	sl, #0
 802660e:	d0ac      	beq.n	802656a <__strftime.isra.0+0x46e>
 8026610:	4b81      	ldr	r3, [pc, #516]	@ (8026818 <__strftime.isra.0+0x71c>)
 8026612:	4299      	cmp	r1, r3
 8026614:	9b03      	ldr	r3, [sp, #12]
 8026616:	bfbc      	itt	lt
 8026618:	2301      	movlt	r3, #1
 802661a:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 802661e:	9303      	str	r3, [sp, #12]
 8026620:	e7a3      	b.n	802656a <__strftime.isra.0+0x46e>
 8026622:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8026626:	bf04      	itt	eq
 8026628:	f10b 0b01 	addeq.w	fp, fp, #1
 802662c:	f04f 0a00 	moveq.w	sl, #0
 8026630:	e7a3      	b.n	802657a <__strftime.isra.0+0x47e>
 8026632:	497c      	ldr	r1, [pc, #496]	@ (8026824 <__strftime.isra.0+0x728>)
 8026634:	4a7c      	ldr	r2, [pc, #496]	@ (8026828 <__strftime.isra.0+0x72c>)
 8026636:	68b3      	ldr	r3, [r6, #8]
 8026638:	286b      	cmp	r0, #107	@ 0x6b
 802663a:	bf18      	it	ne
 802663c:	460a      	movne	r2, r1
 802663e:	e6c9      	b.n	80263d4 <__strftime.isra.0+0x2d8>
 8026640:	68b3      	ldr	r3, [r6, #8]
 8026642:	b163      	cbz	r3, 802665e <__strftime.isra.0+0x562>
 8026644:	2b0c      	cmp	r3, #12
 8026646:	d004      	beq.n	8026652 <__strftime.isra.0+0x556>
 8026648:	210c      	movs	r1, #12
 802664a:	fb93 f2f1 	sdiv	r2, r3, r1
 802664e:	fb01 3312 	mls	r3, r1, r2, r3
 8026652:	4975      	ldr	r1, [pc, #468]	@ (8026828 <__strftime.isra.0+0x72c>)
 8026654:	4a73      	ldr	r2, [pc, #460]	@ (8026824 <__strftime.isra.0+0x728>)
 8026656:	2849      	cmp	r0, #73	@ 0x49
 8026658:	bf18      	it	ne
 802665a:	460a      	movne	r2, r1
 802665c:	e6ba      	b.n	80263d4 <__strftime.isra.0+0x2d8>
 802665e:	230c      	movs	r3, #12
 8026660:	e7f7      	b.n	8026652 <__strftime.isra.0+0x556>
 8026662:	69f3      	ldr	r3, [r6, #28]
 8026664:	4a71      	ldr	r2, [pc, #452]	@ (802682c <__strftime.isra.0+0x730>)
 8026666:	3301      	adds	r3, #1
 8026668:	e6b4      	b.n	80263d4 <__strftime.isra.0+0x2d8>
 802666a:	6933      	ldr	r3, [r6, #16]
 802666c:	3301      	adds	r3, #1
 802666e:	e723      	b.n	80264b8 <__strftime.isra.0+0x3bc>
 8026670:	6873      	ldr	r3, [r6, #4]
 8026672:	e721      	b.n	80264b8 <__strftime.isra.0+0x3bc>
 8026674:	1e6b      	subs	r3, r5, #1
 8026676:	429c      	cmp	r4, r3
 8026678:	f4bf aed0 	bcs.w	802641c <__strftime.isra.0+0x320>
 802667c:	f104 0a01 	add.w	sl, r4, #1
 8026680:	230a      	movs	r3, #10
 8026682:	553b      	strb	r3, [r7, r4]
 8026684:	e5e8      	b.n	8026258 <__strftime.isra.0+0x15c>
 8026686:	68b3      	ldr	r3, [r6, #8]
 8026688:	2b0b      	cmp	r3, #11
 802668a:	4b69      	ldr	r3, [pc, #420]	@ (8026830 <__strftime.isra.0+0x734>)
 802668c:	bfd4      	ite	le
 802668e:	2200      	movle	r2, #0
 8026690:	2201      	movgt	r2, #1
 8026692:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8026696:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 802669a:	4658      	mov	r0, fp
 802669c:	f7d9 fe00 	bl	80002a0 <strlen>
 80266a0:	eb04 0a00 	add.w	sl, r4, r0
 80266a4:	4863      	ldr	r0, [pc, #396]	@ (8026834 <__strftime.isra.0+0x738>)
 80266a6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80266aa:	1e69      	subs	r1, r5, #1
 80266ac:	45a2      	cmp	sl, r4
 80266ae:	f43f add3 	beq.w	8026258 <__strftime.isra.0+0x15c>
 80266b2:	42a1      	cmp	r1, r4
 80266b4:	f67f aeb2 	bls.w	802641c <__strftime.isra.0+0x320>
 80266b8:	f898 2000 	ldrb.w	r2, [r8]
 80266bc:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 80266c0:	2a50      	cmp	r2, #80	@ 0x50
 80266c2:	d106      	bne.n	80266d2 <__strftime.isra.0+0x5d6>
 80266c4:	5cc2      	ldrb	r2, [r0, r3]
 80266c6:	f002 0203 	and.w	r2, r2, #3
 80266ca:	2a01      	cmp	r2, #1
 80266cc:	bf08      	it	eq
 80266ce:	3320      	addeq	r3, #32
 80266d0:	b2db      	uxtb	r3, r3
 80266d2:	553b      	strb	r3, [r7, r4]
 80266d4:	3401      	adds	r4, #1
 80266d6:	e7e9      	b.n	80266ac <__strftime.isra.0+0x5b0>
 80266d8:	2203      	movs	r2, #3
 80266da:	6933      	ldr	r3, [r6, #16]
 80266dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80266e0:	4a55      	ldr	r2, [pc, #340]	@ (8026838 <__strftime.isra.0+0x73c>)
 80266e2:	3301      	adds	r3, #1
 80266e4:	e676      	b.n	80263d4 <__strftime.isra.0+0x2d8>
 80266e6:	6873      	ldr	r3, [r6, #4]
 80266e8:	9300      	str	r3, [sp, #0]
 80266ea:	68b3      	ldr	r3, [r6, #8]
 80266ec:	4a53      	ldr	r2, [pc, #332]	@ (802683c <__strftime.isra.0+0x740>)
 80266ee:	1b29      	subs	r1, r5, r4
 80266f0:	1938      	adds	r0, r7, r4
 80266f2:	f001 fff9 	bl	80286e8 <sniprintf>
 80266f6:	e68a      	b.n	802640e <__strftime.isra.0+0x312>
 80266f8:	6a33      	ldr	r3, [r6, #32]
 80266fa:	2b00      	cmp	r3, #0
 80266fc:	db78      	blt.n	80267f0 <__strftime.isra.0+0x6f4>
 80266fe:	f000 fa7b 	bl	8026bf8 <__tz_lock>
 8026702:	9b02      	ldr	r3, [sp, #8]
 8026704:	b90b      	cbnz	r3, 802670a <__strftime.isra.0+0x60e>
 8026706:	f000 fa83 	bl	8026c10 <_tzset_unlocked>
 802670a:	f007 fe73 	bl	802e3f4 <__gettzinfo>
 802670e:	6a33      	ldr	r3, [r6, #32]
 8026710:	2b00      	cmp	r3, #0
 8026712:	bfd4      	ite	le
 8026714:	2200      	movle	r2, #0
 8026716:	2201      	movgt	r2, #1
 8026718:	2328      	movs	r3, #40	@ 0x28
 802671a:	fb02 3303 	mla	r3, r2, r3, r3
 802671e:	58c3      	ldr	r3, [r0, r3]
 8026720:	f1c3 0a00 	rsb	sl, r3, #0
 8026724:	f000 fa6e 	bl	8026c04 <__tz_unlock>
 8026728:	2301      	movs	r3, #1
 802672a:	9302      	str	r3, [sp, #8]
 802672c:	6972      	ldr	r2, [r6, #20]
 802672e:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 8026732:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8026736:	f16c 0c00 	sbc.w	ip, ip, #0
 802673a:	f1bc 0f00 	cmp.w	ip, #0
 802673e:	eba5 0104 	sub.w	r1, r5, r4
 8026742:	eb07 0004 	add.w	r0, r7, r4
 8026746:	da02      	bge.n	802674e <__strftime.isra.0+0x652>
 8026748:	3303      	adds	r3, #3
 802674a:	f14c 0c00 	adc.w	ip, ip, #0
 802674e:	089b      	lsrs	r3, r3, #2
 8026750:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8026754:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 8026758:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 802675c:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8026760:	fb9e fefb 	sdiv	lr, lr, fp
 8026764:	ebb3 030e 	subs.w	r3, r3, lr
 8026768:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 802676c:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 8026770:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 8026774:	fb9e fefb 	sdiv	lr, lr, fp
 8026778:	eb13 030e 	adds.w	r3, r3, lr
 802677c:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 8026780:	3a46      	subs	r2, #70	@ 0x46
 8026782:	f240 1e6d 	movw	lr, #365	@ 0x16d
 8026786:	fb0e f202 	mul.w	r2, lr, r2
 802678a:	189b      	adds	r3, r3, r2
 802678c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8026790:	69f2      	ldr	r2, [r6, #28]
 8026792:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8026796:	189b      	adds	r3, r3, r2
 8026798:	f04f 0e18 	mov.w	lr, #24
 802679c:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 80267a0:	fba3 230e 	umull	r2, r3, r3, lr
 80267a4:	fb0e 330c 	mla	r3, lr, ip, r3
 80267a8:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80267ac:	eb12 020c 	adds.w	r2, r2, ip
 80267b0:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 80267b4:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 80267b8:	fba2 2e0c 	umull	r2, lr, r2, ip
 80267bc:	fb0c ee03 	mla	lr, ip, r3, lr
 80267c0:	eb12 030b 	adds.w	r3, r2, fp
 80267c4:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 80267c8:	fba3 e30c 	umull	lr, r3, r3, ip
 80267cc:	fb0c 3302 	mla	r3, ip, r2, r3
 80267d0:	f8d6 c000 	ldr.w	ip, [r6]
 80267d4:	eb1e 020c 	adds.w	r2, lr, ip
 80267d8:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 80267dc:	ebb2 020a 	subs.w	r2, r2, sl
 80267e0:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80267e4:	e9cd 2300 	strd	r2, r3, [sp]
 80267e8:	4a15      	ldr	r2, [pc, #84]	@ (8026840 <__strftime.isra.0+0x744>)
 80267ea:	f001 ff7d 	bl	80286e8 <sniprintf>
 80267ee:	e60e      	b.n	802640e <__strftime.isra.0+0x312>
 80267f0:	f04f 0a00 	mov.w	sl, #0
 80267f4:	e79a      	b.n	802672c <__strftime.isra.0+0x630>
 80267f6:	6833      	ldr	r3, [r6, #0]
 80267f8:	e65e      	b.n	80264b8 <__strftime.isra.0+0x3bc>
 80267fa:	1e6b      	subs	r3, r5, #1
 80267fc:	429c      	cmp	r4, r3
 80267fe:	f4bf ae0d 	bcs.w	802641c <__strftime.isra.0+0x320>
 8026802:	f104 0a01 	add.w	sl, r4, #1
 8026806:	2309      	movs	r3, #9
 8026808:	e73b      	b.n	8026682 <__strftime.isra.0+0x586>
 802680a:	6833      	ldr	r3, [r6, #0]
 802680c:	9301      	str	r3, [sp, #4]
 802680e:	6873      	ldr	r3, [r6, #4]
 8026810:	9300      	str	r3, [sp, #0]
 8026812:	68b3      	ldr	r3, [r6, #8]
 8026814:	4a0b      	ldr	r2, [pc, #44]	@ (8026844 <__strftime.isra.0+0x748>)
 8026816:	e5d1      	b.n	80263bc <__strftime.isra.0+0x2c0>
 8026818:	fffff894 	.word	0xfffff894
 802681c:	080347ea 	.word	0x080347ea
 8026820:	fffff895 	.word	0xfffff895
 8026824:	080347d9 	.word	0x080347d9
 8026828:	080347cb 	.word	0x080347cb
 802682c:	080347ee 	.word	0x080347ee
 8026830:	080349a4 	.word	0x080349a4
 8026834:	08034aa1 	.word	0x08034aa1
 8026838:	080347f3 	.word	0x080347f3
 802683c:	08034802 	.word	0x08034802
 8026840:	080347f8 	.word	0x080347f8
 8026844:	080347fd 	.word	0x080347fd
 8026848:	1e6b      	subs	r3, r5, #1
 802684a:	429c      	cmp	r4, r3
 802684c:	f4bf ade6 	bcs.w	802641c <__strftime.isra.0+0x320>
 8026850:	69b3      	ldr	r3, [r6, #24]
 8026852:	b91b      	cbnz	r3, 802685c <__strftime.isra.0+0x760>
 8026854:	2337      	movs	r3, #55	@ 0x37
 8026856:	f104 0a01 	add.w	sl, r4, #1
 802685a:	e712      	b.n	8026682 <__strftime.isra.0+0x586>
 802685c:	3330      	adds	r3, #48	@ 0x30
 802685e:	b2db      	uxtb	r3, r3
 8026860:	e7f9      	b.n	8026856 <__strftime.isra.0+0x75a>
 8026862:	69f3      	ldr	r3, [r6, #28]
 8026864:	69b2      	ldr	r2, [r6, #24]
 8026866:	3307      	adds	r3, #7
 8026868:	1a9b      	subs	r3, r3, r2
 802686a:	2207      	movs	r2, #7
 802686c:	fb93 f3f2 	sdiv	r3, r3, r2
 8026870:	e622      	b.n	80264b8 <__strftime.isra.0+0x3bc>
 8026872:	4630      	mov	r0, r6
 8026874:	f7ff fbf0 	bl	8026058 <iso_year_adjust>
 8026878:	69b2      	ldr	r2, [r6, #24]
 802687a:	b132      	cbz	r2, 802688a <__strftime.isra.0+0x78e>
 802687c:	3a01      	subs	r2, #1
 802687e:	2800      	cmp	r0, #0
 8026880:	69f3      	ldr	r3, [r6, #28]
 8026882:	dc26      	bgt.n	80268d2 <__strftime.isra.0+0x7d6>
 8026884:	d103      	bne.n	802688e <__strftime.isra.0+0x792>
 8026886:	330a      	adds	r3, #10
 8026888:	e7ee      	b.n	8026868 <__strftime.isra.0+0x76c>
 802688a:	2206      	movs	r2, #6
 802688c:	e7f7      	b.n	802687e <__strftime.isra.0+0x782>
 802688e:	1ad2      	subs	r2, r2, r3
 8026890:	6973      	ldr	r3, [r6, #20]
 8026892:	2b00      	cmp	r3, #0
 8026894:	f240 716b 	movw	r1, #1899	@ 0x76b
 8026898:	bfa8      	it	ge
 802689a:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 802689e:	440b      	add	r3, r1
 80268a0:	0799      	lsls	r1, r3, #30
 80268a2:	d105      	bne.n	80268b0 <__strftime.isra.0+0x7b4>
 80268a4:	2064      	movs	r0, #100	@ 0x64
 80268a6:	fb93 f1f0 	sdiv	r1, r3, r0
 80268aa:	fb00 3111 	mls	r1, r0, r1, r3
 80268ae:	b971      	cbnz	r1, 80268ce <__strftime.isra.0+0x7d2>
 80268b0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80268b4:	fb93 f0f1 	sdiv	r0, r3, r1
 80268b8:	fb01 3310 	mls	r3, r1, r0, r3
 80268bc:	fab3 f383 	clz	r3, r3
 80268c0:	095b      	lsrs	r3, r3, #5
 80268c2:	1ad2      	subs	r2, r2, r3
 80268c4:	2a04      	cmp	r2, #4
 80268c6:	bfcc      	ite	gt
 80268c8:	2334      	movgt	r3, #52	@ 0x34
 80268ca:	2335      	movle	r3, #53	@ 0x35
 80268cc:	e5f4      	b.n	80264b8 <__strftime.isra.0+0x3bc>
 80268ce:	2301      	movs	r3, #1
 80268d0:	e7f7      	b.n	80268c2 <__strftime.isra.0+0x7c6>
 80268d2:	2301      	movs	r3, #1
 80268d4:	e5f0      	b.n	80264b8 <__strftime.isra.0+0x3bc>
 80268d6:	496c      	ldr	r1, [pc, #432]	@ (8026a88 <__strftime.isra.0+0x98c>)
 80268d8:	9203      	str	r2, [sp, #12]
 80268da:	a806      	add	r0, sp, #24
 80268dc:	f000 fc42 	bl	8027164 <strcpy>
 80268e0:	a806      	add	r0, sp, #24
 80268e2:	f7d9 fcdd 	bl	80002a0 <strlen>
 80268e6:	ab06      	add	r3, sp, #24
 80268e8:	eb03 0a00 	add.w	sl, r3, r0
 80268ec:	f10a 0a01 	add.w	sl, sl, #1
 80268f0:	46d3      	mov	fp, sl
 80268f2:	f1b9 0f00 	cmp.w	r9, #0
 80268f6:	d009      	beq.n	802690c <__strftime.isra.0+0x810>
 80268f8:	9a03      	ldr	r2, [sp, #12]
 80268fa:	f803 9000 	strb.w	r9, [r3, r0]
 80268fe:	2a05      	cmp	r2, #5
 8026900:	d901      	bls.n	8026906 <__strftime.isra.0+0x80a>
 8026902:	1f93      	subs	r3, r2, #6
 8026904:	d106      	bne.n	8026914 <__strftime.isra.0+0x818>
 8026906:	4961      	ldr	r1, [pc, #388]	@ (8026a8c <__strftime.isra.0+0x990>)
 8026908:	4658      	mov	r0, fp
 802690a:	e5a6      	b.n	802645a <__strftime.isra.0+0x35e>
 802690c:	aa06      	add	r2, sp, #24
 802690e:	232b      	movs	r3, #43	@ 0x2b
 8026910:	5413      	strb	r3, [r2, r0]
 8026912:	2304      	movs	r3, #4
 8026914:	a90e      	add	r1, sp, #56	@ 0x38
 8026916:	4a5e      	ldr	r2, [pc, #376]	@ (8026a90 <__strftime.isra.0+0x994>)
 8026918:	eba1 010a 	sub.w	r1, r1, sl
 802691c:	4650      	mov	r0, sl
 802691e:	f001 fee3 	bl	80286e8 <sniprintf>
 8026922:	2800      	cmp	r0, #0
 8026924:	bfc8      	it	gt
 8026926:	eb0a 0b00 	addgt.w	fp, sl, r0
 802692a:	e7ec      	b.n	8026906 <__strftime.isra.0+0x80a>
 802692c:	1e6b      	subs	r3, r5, #1
 802692e:	429c      	cmp	r4, r3
 8026930:	f4bf ad74 	bcs.w	802641c <__strftime.isra.0+0x320>
 8026934:	69b3      	ldr	r3, [r6, #24]
 8026936:	f104 0a01 	add.w	sl, r4, #1
 802693a:	3330      	adds	r3, #48	@ 0x30
 802693c:	e6a1      	b.n	8026682 <__strftime.isra.0+0x586>
 802693e:	69b2      	ldr	r2, [r6, #24]
 8026940:	b11a      	cbz	r2, 802694a <__strftime.isra.0+0x84e>
 8026942:	3a01      	subs	r2, #1
 8026944:	69f3      	ldr	r3, [r6, #28]
 8026946:	3307      	adds	r3, #7
 8026948:	e78e      	b.n	8026868 <__strftime.isra.0+0x76c>
 802694a:	2206      	movs	r2, #6
 802694c:	e7fa      	b.n	8026944 <__strftime.isra.0+0x848>
 802694e:	6970      	ldr	r0, [r6, #20]
 8026950:	2800      	cmp	r0, #0
 8026952:	db05      	blt.n	8026960 <__strftime.isra.0+0x864>
 8026954:	2364      	movs	r3, #100	@ 0x64
 8026956:	fb90 f2f3 	sdiv	r2, r0, r3
 802695a:	fb02 0313 	mls	r3, r2, r3, r0
 802695e:	e5ab      	b.n	80264b8 <__strftime.isra.0+0x3bc>
 8026960:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8026964:	f000 fc9b 	bl	802729e <abs>
 8026968:	e7f4      	b.n	8026954 <__strftime.isra.0+0x858>
 802696a:	6971      	ldr	r1, [r6, #20]
 802696c:	4849      	ldr	r0, [pc, #292]	@ (8026a94 <__strftime.isra.0+0x998>)
 802696e:	4281      	cmp	r1, r0
 8026970:	da09      	bge.n	8026986 <__strftime.isra.0+0x88a>
 8026972:	eba0 0a01 	sub.w	sl, r0, r1
 8026976:	212d      	movs	r1, #45	@ 0x2d
 8026978:	f88d 1018 	strb.w	r1, [sp, #24]
 802697c:	b102      	cbz	r2, 8026980 <__strftime.isra.0+0x884>
 802697e:	3a01      	subs	r2, #1
 8026980:	f10d 0119 	add.w	r1, sp, #25
 8026984:	e609      	b.n	802659a <__strftime.isra.0+0x49e>
 8026986:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 802698a:	e5fd      	b.n	8026588 <__strftime.isra.0+0x48c>
 802698c:	2330      	movs	r3, #48	@ 0x30
 802698e:	1c88      	adds	r0, r1, #2
 8026990:	704b      	strb	r3, [r1, #1]
 8026992:	e609      	b.n	80265a8 <__strftime.isra.0+0x4ac>
 8026994:	6a33      	ldr	r3, [r6, #32]
 8026996:	2b00      	cmp	r3, #0
 8026998:	da01      	bge.n	802699e <__strftime.isra.0+0x8a2>
 802699a:	46a2      	mov	sl, r4
 802699c:	e45c      	b.n	8026258 <__strftime.isra.0+0x15c>
 802699e:	f000 f92b 	bl	8026bf8 <__tz_lock>
 80269a2:	9b02      	ldr	r3, [sp, #8]
 80269a4:	b90b      	cbnz	r3, 80269aa <__strftime.isra.0+0x8ae>
 80269a6:	f000 f933 	bl	8026c10 <_tzset_unlocked>
 80269aa:	f007 fd23 	bl	802e3f4 <__gettzinfo>
 80269ae:	6a33      	ldr	r3, [r6, #32]
 80269b0:	2b00      	cmp	r3, #0
 80269b2:	bfd4      	ite	le
 80269b4:	2200      	movle	r2, #0
 80269b6:	2201      	movgt	r2, #1
 80269b8:	2328      	movs	r3, #40	@ 0x28
 80269ba:	fb02 3303 	mla	r3, r2, r3, r3
 80269be:	eb07 0a04 	add.w	sl, r7, r4
 80269c2:	58c3      	ldr	r3, [r0, r3]
 80269c4:	f1c3 0900 	rsb	r9, r3, #0
 80269c8:	f000 f91c 	bl	8026c04 <__tz_unlock>
 80269cc:	233c      	movs	r3, #60	@ 0x3c
 80269ce:	fb99 f0f3 	sdiv	r0, r9, r3
 80269d2:	f001 fbfe 	bl	80281d2 <labs>
 80269d6:	233c      	movs	r3, #60	@ 0x3c
 80269d8:	eba5 0b04 	sub.w	fp, r5, r4
 80269dc:	fb90 f2f3 	sdiv	r2, r0, r3
 80269e0:	fb02 0013 	mls	r0, r2, r3, r0
 80269e4:	9000      	str	r0, [sp, #0]
 80269e6:	4a2c      	ldr	r2, [pc, #176]	@ (8026a98 <__strftime.isra.0+0x99c>)
 80269e8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80269ec:	4659      	mov	r1, fp
 80269ee:	4650      	mov	r0, sl
 80269f0:	fb99 f3f3 	sdiv	r3, r9, r3
 80269f4:	f001 fe78 	bl	80286e8 <sniprintf>
 80269f8:	2800      	cmp	r0, #0
 80269fa:	f6ff ad0f 	blt.w	802641c <__strftime.isra.0+0x320>
 80269fe:	eb00 0a04 	add.w	sl, r0, r4
 8026a02:	4555      	cmp	r5, sl
 8026a04:	f67f ad0a 	bls.w	802641c <__strftime.isra.0+0x320>
 8026a08:	2301      	movs	r3, #1
 8026a0a:	9302      	str	r3, [sp, #8]
 8026a0c:	e424      	b.n	8026258 <__strftime.isra.0+0x15c>
 8026a0e:	6a33      	ldr	r3, [r6, #32]
 8026a10:	2b00      	cmp	r3, #0
 8026a12:	dbc2      	blt.n	802699a <__strftime.isra.0+0x89e>
 8026a14:	f000 f8f0 	bl	8026bf8 <__tz_lock>
 8026a18:	9b02      	ldr	r3, [sp, #8]
 8026a1a:	b90b      	cbnz	r3, 8026a20 <__strftime.isra.0+0x924>
 8026a1c:	f000 f8f8 	bl	8026c10 <_tzset_unlocked>
 8026a20:	6a33      	ldr	r3, [r6, #32]
 8026a22:	4a1e      	ldr	r2, [pc, #120]	@ (8026a9c <__strftime.isra.0+0x9a0>)
 8026a24:	2b00      	cmp	r3, #0
 8026a26:	bfd4      	ite	le
 8026a28:	2300      	movle	r3, #0
 8026a2a:	2301      	movgt	r3, #1
 8026a2c:	46a2      	mov	sl, r4
 8026a2e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8026a32:	4648      	mov	r0, r9
 8026a34:	f7d9 fc34 	bl	80002a0 <strlen>
 8026a38:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8026a3c:	4420      	add	r0, r4
 8026a3e:	1e6b      	subs	r3, r5, #1
 8026a40:	4550      	cmp	r0, sl
 8026a42:	d102      	bne.n	8026a4a <__strftime.isra.0+0x94e>
 8026a44:	f000 f8de 	bl	8026c04 <__tz_unlock>
 8026a48:	e7de      	b.n	8026a08 <__strftime.isra.0+0x90c>
 8026a4a:	4553      	cmp	r3, sl
 8026a4c:	d906      	bls.n	8026a5c <__strftime.isra.0+0x960>
 8026a4e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026a52:	f807 200a 	strb.w	r2, [r7, sl]
 8026a56:	f10a 0a01 	add.w	sl, sl, #1
 8026a5a:	e7f1      	b.n	8026a40 <__strftime.isra.0+0x944>
 8026a5c:	f000 f8d2 	bl	8026c04 <__tz_unlock>
 8026a60:	e4dc      	b.n	802641c <__strftime.isra.0+0x320>
 8026a62:	1e6b      	subs	r3, r5, #1
 8026a64:	429c      	cmp	r4, r3
 8026a66:	f4bf acd9 	bcs.w	802641c <__strftime.isra.0+0x320>
 8026a6a:	f104 0a01 	add.w	sl, r4, #1
 8026a6e:	2325      	movs	r3, #37	@ 0x25
 8026a70:	e607      	b.n	8026682 <__strftime.isra.0+0x586>
 8026a72:	46a2      	mov	sl, r4
 8026a74:	2d00      	cmp	r5, #0
 8026a76:	f43f acd3 	beq.w	8026420 <__strftime.isra.0+0x324>
 8026a7a:	2300      	movs	r3, #0
 8026a7c:	f807 300a 	strb.w	r3, [r7, sl]
 8026a80:	e4ce      	b.n	8026420 <__strftime.isra.0+0x324>
 8026a82:	4649      	mov	r1, r9
 8026a84:	e778      	b.n	8026978 <__strftime.isra.0+0x87c>
 8026a86:	bf00      	nop
 8026a88:	0803480c 	.word	0x0803480c
 8026a8c:	08034974 	.word	0x08034974
 8026a90:	080347de 	.word	0x080347de
 8026a94:	fffff894 	.word	0xfffff894
 8026a98:	08034814 	.word	0x08034814
 8026a9c:	200002bc 	.word	0x200002bc

08026aa0 <strftime>:
 8026aa0:	f7ff bb2c 	b.w	80260fc <__strftime.isra.0>

08026aa4 <__tzcalc_limits>:
 8026aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026aa8:	4604      	mov	r4, r0
 8026aaa:	f007 fca3 	bl	802e3f4 <__gettzinfo>
 8026aae:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8026ab2:	429c      	cmp	r4, r3
 8026ab4:	f340 8099 	ble.w	8026bea <__tzcalc_limits+0x146>
 8026ab8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 8026abc:	19e5      	adds	r5, r4, r7
 8026abe:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8026ac2:	f240 126d 	movw	r2, #365	@ 0x16d
 8026ac6:	10ad      	asrs	r5, r5, #2
 8026ac8:	fb02 5503 	mla	r5, r2, r3, r5
 8026acc:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8026ad0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8026ad4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8026ad8:	4f45      	ldr	r7, [pc, #276]	@ (8026bf0 <__tzcalc_limits+0x14c>)
 8026ada:	fb93 f3f2 	sdiv	r3, r3, r2
 8026ade:	441d      	add	r5, r3
 8026ae0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8026ae4:	eb04 030c 	add.w	r3, r4, ip
 8026ae8:	6044      	str	r4, [r0, #4]
 8026aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8026aee:	4601      	mov	r1, r0
 8026af0:	441d      	add	r5, r3
 8026af2:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8026af6:	7a0b      	ldrb	r3, [r1, #8]
 8026af8:	694a      	ldr	r2, [r1, #20]
 8026afa:	2b4a      	cmp	r3, #74	@ 0x4a
 8026afc:	d133      	bne.n	8026b66 <__tzcalc_limits+0xc2>
 8026afe:	07a6      	lsls	r6, r4, #30
 8026b00:	eb05 0302 	add.w	r3, r5, r2
 8026b04:	d106      	bne.n	8026b14 <__tzcalc_limits+0x70>
 8026b06:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8026b0a:	fb94 f6fe 	sdiv	r6, r4, lr
 8026b0e:	fb0e 4616 	mls	r6, lr, r6, r4
 8026b12:	b936      	cbnz	r6, 8026b22 <__tzcalc_limits+0x7e>
 8026b14:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8026b18:	fb94 f6fe 	sdiv	r6, r4, lr
 8026b1c:	fb0e 4616 	mls	r6, lr, r6, r4
 8026b20:	b9fe      	cbnz	r6, 8026b62 <__tzcalc_limits+0xbe>
 8026b22:	2a3b      	cmp	r2, #59	@ 0x3b
 8026b24:	bfd4      	ite	le
 8026b26:	2200      	movle	r2, #0
 8026b28:	2201      	movgt	r2, #1
 8026b2a:	4413      	add	r3, r2
 8026b2c:	3b01      	subs	r3, #1
 8026b2e:	698a      	ldr	r2, [r1, #24]
 8026b30:	17d6      	asrs	r6, r2, #31
 8026b32:	fbc3 2607 	smlal	r2, r6, r3, r7
 8026b36:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8026b38:	18d2      	adds	r2, r2, r3
 8026b3a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 8026b3e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8026b42:	3128      	adds	r1, #40	@ 0x28
 8026b44:	458c      	cmp	ip, r1
 8026b46:	d1d6      	bne.n	8026af6 <__tzcalc_limits+0x52>
 8026b48:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8026b4c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 8026b50:	428c      	cmp	r4, r1
 8026b52:	4193      	sbcs	r3, r2
 8026b54:	bfb4      	ite	lt
 8026b56:	2301      	movlt	r3, #1
 8026b58:	2300      	movge	r3, #0
 8026b5a:	6003      	str	r3, [r0, #0]
 8026b5c:	2001      	movs	r0, #1
 8026b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026b62:	2200      	movs	r2, #0
 8026b64:	e7e1      	b.n	8026b2a <__tzcalc_limits+0x86>
 8026b66:	2b44      	cmp	r3, #68	@ 0x44
 8026b68:	d101      	bne.n	8026b6e <__tzcalc_limits+0xca>
 8026b6a:	18ab      	adds	r3, r5, r2
 8026b6c:	e7df      	b.n	8026b2e <__tzcalc_limits+0x8a>
 8026b6e:	07a3      	lsls	r3, r4, #30
 8026b70:	d105      	bne.n	8026b7e <__tzcalc_limits+0xda>
 8026b72:	2664      	movs	r6, #100	@ 0x64
 8026b74:	fb94 f3f6 	sdiv	r3, r4, r6
 8026b78:	fb06 4313 	mls	r3, r6, r3, r4
 8026b7c:	bb7b      	cbnz	r3, 8026bde <__tzcalc_limits+0x13a>
 8026b7e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8026b82:	fb94 f6f3 	sdiv	r6, r4, r3
 8026b86:	fb03 4616 	mls	r6, r3, r6, r4
 8026b8a:	fab6 f686 	clz	r6, r6
 8026b8e:	0976      	lsrs	r6, r6, #5
 8026b90:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8026bf4 <__tzcalc_limits+0x150>
 8026b94:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8026b98:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 8026b9c:	462b      	mov	r3, r5
 8026b9e:	f04f 0800 	mov.w	r8, #0
 8026ba2:	fb0a e606 	mla	r6, sl, r6, lr
 8026ba6:	f108 0801 	add.w	r8, r8, #1
 8026baa:	45c1      	cmp	r9, r8
 8026bac:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8026bb0:	dc17      	bgt.n	8026be2 <__tzcalc_limits+0x13e>
 8026bb2:	f103 0804 	add.w	r8, r3, #4
 8026bb6:	2607      	movs	r6, #7
 8026bb8:	fb98 f6f6 	sdiv	r6, r8, r6
 8026bbc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8026bc0:	eba8 0606 	sub.w	r6, r8, r6
 8026bc4:	1b92      	subs	r2, r2, r6
 8026bc6:	690e      	ldr	r6, [r1, #16]
 8026bc8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 8026bcc:	bf48      	it	mi
 8026bce:	3207      	addmi	r2, #7
 8026bd0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8026bd4:	4432      	add	r2, r6
 8026bd6:	4572      	cmp	r2, lr
 8026bd8:	da05      	bge.n	8026be6 <__tzcalc_limits+0x142>
 8026bda:	4413      	add	r3, r2
 8026bdc:	e7a7      	b.n	8026b2e <__tzcalc_limits+0x8a>
 8026bde:	2601      	movs	r6, #1
 8026be0:	e7d6      	b.n	8026b90 <__tzcalc_limits+0xec>
 8026be2:	4473      	add	r3, lr
 8026be4:	e7df      	b.n	8026ba6 <__tzcalc_limits+0x102>
 8026be6:	3a07      	subs	r2, #7
 8026be8:	e7f5      	b.n	8026bd6 <__tzcalc_limits+0x132>
 8026bea:	2000      	movs	r0, #0
 8026bec:	e7b7      	b.n	8026b5e <__tzcalc_limits+0xba>
 8026bee:	bf00      	nop
 8026bf0:	00015180 	.word	0x00015180
 8026bf4:	08034754 	.word	0x08034754

08026bf8 <__tz_lock>:
 8026bf8:	4801      	ldr	r0, [pc, #4]	@ (8026c00 <__tz_lock+0x8>)
 8026bfa:	f000 bae1 	b.w	80271c0 <__retarget_lock_acquire>
 8026bfe:	bf00      	nop
 8026c00:	200182dc 	.word	0x200182dc

08026c04 <__tz_unlock>:
 8026c04:	4801      	ldr	r0, [pc, #4]	@ (8026c0c <__tz_unlock+0x8>)
 8026c06:	f000 badd 	b.w	80271c4 <__retarget_lock_release>
 8026c0a:	bf00      	nop
 8026c0c:	200182dc 	.word	0x200182dc

08026c10 <_tzset_unlocked>:
 8026c10:	4b01      	ldr	r3, [pc, #4]	@ (8026c18 <_tzset_unlocked+0x8>)
 8026c12:	6818      	ldr	r0, [r3, #0]
 8026c14:	f000 b802 	b.w	8026c1c <_tzset_unlocked_r>
 8026c18:	20000430 	.word	0x20000430

08026c1c <_tzset_unlocked_r>:
 8026c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c20:	b08d      	sub	sp, #52	@ 0x34
 8026c22:	4607      	mov	r7, r0
 8026c24:	f007 fbe6 	bl	802e3f4 <__gettzinfo>
 8026c28:	49bc      	ldr	r1, [pc, #752]	@ (8026f1c <_tzset_unlocked_r+0x300>)
 8026c2a:	4dbd      	ldr	r5, [pc, #756]	@ (8026f20 <_tzset_unlocked_r+0x304>)
 8026c2c:	4604      	mov	r4, r0
 8026c2e:	4638      	mov	r0, r7
 8026c30:	f001 fac8 	bl	80281c4 <_getenv_r>
 8026c34:	4606      	mov	r6, r0
 8026c36:	bb10      	cbnz	r0, 8026c7e <_tzset_unlocked_r+0x62>
 8026c38:	4bba      	ldr	r3, [pc, #744]	@ (8026f24 <_tzset_unlocked_r+0x308>)
 8026c3a:	4abb      	ldr	r2, [pc, #748]	@ (8026f28 <_tzset_unlocked_r+0x30c>)
 8026c3c:	6018      	str	r0, [r3, #0]
 8026c3e:	4bbb      	ldr	r3, [pc, #748]	@ (8026f2c <_tzset_unlocked_r+0x310>)
 8026c40:	62a0      	str	r0, [r4, #40]	@ 0x28
 8026c42:	6018      	str	r0, [r3, #0]
 8026c44:	4bba      	ldr	r3, [pc, #744]	@ (8026f30 <_tzset_unlocked_r+0x314>)
 8026c46:	6520      	str	r0, [r4, #80]	@ 0x50
 8026c48:	e9c3 2200 	strd	r2, r2, [r3]
 8026c4c:	214a      	movs	r1, #74	@ 0x4a
 8026c4e:	2200      	movs	r2, #0
 8026c50:	2300      	movs	r3, #0
 8026c52:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8026c56:	e9c4 0005 	strd	r0, r0, [r4, #20]
 8026c5a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8026c5e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8026c62:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8026c66:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8026c6a:	6828      	ldr	r0, [r5, #0]
 8026c6c:	7221      	strb	r1, [r4, #8]
 8026c6e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8026c72:	f001 fabb 	bl	80281ec <free>
 8026c76:	602e      	str	r6, [r5, #0]
 8026c78:	b00d      	add	sp, #52	@ 0x34
 8026c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c7e:	6829      	ldr	r1, [r5, #0]
 8026c80:	2900      	cmp	r1, #0
 8026c82:	f040 808e 	bne.w	8026da2 <_tzset_unlocked_r+0x186>
 8026c86:	6828      	ldr	r0, [r5, #0]
 8026c88:	f001 fab0 	bl	80281ec <free>
 8026c8c:	4630      	mov	r0, r6
 8026c8e:	f7d9 fb07 	bl	80002a0 <strlen>
 8026c92:	1c41      	adds	r1, r0, #1
 8026c94:	4638      	mov	r0, r7
 8026c96:	f001 fab1 	bl	80281fc <_malloc_r>
 8026c9a:	6028      	str	r0, [r5, #0]
 8026c9c:	2800      	cmp	r0, #0
 8026c9e:	f040 8086 	bne.w	8026dae <_tzset_unlocked_r+0x192>
 8026ca2:	4aa2      	ldr	r2, [pc, #648]	@ (8026f2c <_tzset_unlocked_r+0x310>)
 8026ca4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8026f30 <_tzset_unlocked_r+0x314>
 8026ca8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8026f24 <_tzset_unlocked_r+0x308>
 8026cac:	2300      	movs	r3, #0
 8026cae:	6013      	str	r3, [r2, #0]
 8026cb0:	4aa0      	ldr	r2, [pc, #640]	@ (8026f34 <_tzset_unlocked_r+0x318>)
 8026cb2:	f8ca 3000 	str.w	r3, [sl]
 8026cb6:	2000      	movs	r0, #0
 8026cb8:	2100      	movs	r1, #0
 8026cba:	e9c8 2200 	strd	r2, r2, [r8]
 8026cbe:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8026cc2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8026cc6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8026cca:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8026cce:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8026cd2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8026cd6:	224a      	movs	r2, #74	@ 0x4a
 8026cd8:	7222      	strb	r2, [r4, #8]
 8026cda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026cdc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8026ce0:	6523      	str	r3, [r4, #80]	@ 0x50
 8026ce2:	7833      	ldrb	r3, [r6, #0]
 8026ce4:	2b3a      	cmp	r3, #58	@ 0x3a
 8026ce6:	bf08      	it	eq
 8026ce8:	3601      	addeq	r6, #1
 8026cea:	7833      	ldrb	r3, [r6, #0]
 8026cec:	2b3c      	cmp	r3, #60	@ 0x3c
 8026cee:	d162      	bne.n	8026db6 <_tzset_unlocked_r+0x19a>
 8026cf0:	1c75      	adds	r5, r6, #1
 8026cf2:	4a91      	ldr	r2, [pc, #580]	@ (8026f38 <_tzset_unlocked_r+0x31c>)
 8026cf4:	4991      	ldr	r1, [pc, #580]	@ (8026f3c <_tzset_unlocked_r+0x320>)
 8026cf6:	ab0a      	add	r3, sp, #40	@ 0x28
 8026cf8:	4628      	mov	r0, r5
 8026cfa:	f001 fccb 	bl	8028694 <siscanf>
 8026cfe:	2800      	cmp	r0, #0
 8026d00:	ddba      	ble.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026d02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d04:	1eda      	subs	r2, r3, #3
 8026d06:	2a07      	cmp	r2, #7
 8026d08:	d8b6      	bhi.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026d0a:	5ceb      	ldrb	r3, [r5, r3]
 8026d0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8026d0e:	d1b3      	bne.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026d10:	3602      	adds	r6, #2
 8026d12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d14:	18f5      	adds	r5, r6, r3
 8026d16:	5cf3      	ldrb	r3, [r6, r3]
 8026d18:	2b2d      	cmp	r3, #45	@ 0x2d
 8026d1a:	d15a      	bne.n	8026dd2 <_tzset_unlocked_r+0x1b6>
 8026d1c:	3501      	adds	r5, #1
 8026d1e:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8026d22:	2300      	movs	r3, #0
 8026d24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026d28:	f8ad 3020 	strh.w	r3, [sp, #32]
 8026d2c:	af08      	add	r7, sp, #32
 8026d2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8026d30:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8026d34:	9303      	str	r3, [sp, #12]
 8026d36:	f10d 031e 	add.w	r3, sp, #30
 8026d3a:	9300      	str	r3, [sp, #0]
 8026d3c:	4980      	ldr	r1, [pc, #512]	@ (8026f40 <_tzset_unlocked_r+0x324>)
 8026d3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8026d40:	aa07      	add	r2, sp, #28
 8026d42:	4628      	mov	r0, r5
 8026d44:	f001 fca6 	bl	8028694 <siscanf>
 8026d48:	2800      	cmp	r0, #0
 8026d4a:	dd95      	ble.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026d4c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8026d50:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8026d54:	223c      	movs	r2, #60	@ 0x3c
 8026d56:	fb02 6603 	mla	r6, r2, r3, r6
 8026d5a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8026d5e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8026d62:	fb02 6603 	mla	r6, r2, r3, r6
 8026d66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d68:	fb09 f606 	mul.w	r6, r9, r6
 8026d6c:	eb05 0903 	add.w	r9, r5, r3
 8026d70:	5ceb      	ldrb	r3, [r5, r3]
 8026d72:	2b3c      	cmp	r3, #60	@ 0x3c
 8026d74:	f040 80ee 	bne.w	8026f54 <_tzset_unlocked_r+0x338>
 8026d78:	f109 0501 	add.w	r5, r9, #1
 8026d7c:	4a71      	ldr	r2, [pc, #452]	@ (8026f44 <_tzset_unlocked_r+0x328>)
 8026d7e:	496f      	ldr	r1, [pc, #444]	@ (8026f3c <_tzset_unlocked_r+0x320>)
 8026d80:	ab0a      	add	r3, sp, #40	@ 0x28
 8026d82:	4628      	mov	r0, r5
 8026d84:	f001 fc86 	bl	8028694 <siscanf>
 8026d88:	2800      	cmp	r0, #0
 8026d8a:	dc28      	bgt.n	8026dde <_tzset_unlocked_r+0x1c2>
 8026d8c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026d90:	2b3e      	cmp	r3, #62	@ 0x3e
 8026d92:	d124      	bne.n	8026dde <_tzset_unlocked_r+0x1c2>
 8026d94:	4b68      	ldr	r3, [pc, #416]	@ (8026f38 <_tzset_unlocked_r+0x31c>)
 8026d96:	62a6      	str	r6, [r4, #40]	@ 0x28
 8026d98:	e9c8 3300 	strd	r3, r3, [r8]
 8026d9c:	f8ca 6000 	str.w	r6, [sl]
 8026da0:	e76a      	b.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026da2:	f7d9 fa1d 	bl	80001e0 <strcmp>
 8026da6:	2800      	cmp	r0, #0
 8026da8:	f47f af6d 	bne.w	8026c86 <_tzset_unlocked_r+0x6a>
 8026dac:	e764      	b.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026dae:	4631      	mov	r1, r6
 8026db0:	f000 f9d8 	bl	8027164 <strcpy>
 8026db4:	e775      	b.n	8026ca2 <_tzset_unlocked_r+0x86>
 8026db6:	4a60      	ldr	r2, [pc, #384]	@ (8026f38 <_tzset_unlocked_r+0x31c>)
 8026db8:	4963      	ldr	r1, [pc, #396]	@ (8026f48 <_tzset_unlocked_r+0x32c>)
 8026dba:	ab0a      	add	r3, sp, #40	@ 0x28
 8026dbc:	4630      	mov	r0, r6
 8026dbe:	f001 fc69 	bl	8028694 <siscanf>
 8026dc2:	2800      	cmp	r0, #0
 8026dc4:	f77f af58 	ble.w	8026c78 <_tzset_unlocked_r+0x5c>
 8026dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026dca:	3b03      	subs	r3, #3
 8026dcc:	2b07      	cmp	r3, #7
 8026dce:	d9a0      	bls.n	8026d12 <_tzset_unlocked_r+0xf6>
 8026dd0:	e752      	b.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026dd2:	2b2b      	cmp	r3, #43	@ 0x2b
 8026dd4:	bf08      	it	eq
 8026dd6:	3501      	addeq	r5, #1
 8026dd8:	f04f 0901 	mov.w	r9, #1
 8026ddc:	e7a1      	b.n	8026d22 <_tzset_unlocked_r+0x106>
 8026dde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026de0:	1eda      	subs	r2, r3, #3
 8026de2:	2a07      	cmp	r2, #7
 8026de4:	f63f af48 	bhi.w	8026c78 <_tzset_unlocked_r+0x5c>
 8026de8:	5ceb      	ldrb	r3, [r5, r3]
 8026dea:	2b3e      	cmp	r3, #62	@ 0x3e
 8026dec:	f47f af44 	bne.w	8026c78 <_tzset_unlocked_r+0x5c>
 8026df0:	f109 0902 	add.w	r9, r9, #2
 8026df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026df6:	eb09 0503 	add.w	r5, r9, r3
 8026dfa:	f819 3003 	ldrb.w	r3, [r9, r3]
 8026dfe:	2b2d      	cmp	r3, #45	@ 0x2d
 8026e00:	f040 80b7 	bne.w	8026f72 <_tzset_unlocked_r+0x356>
 8026e04:	3501      	adds	r5, #1
 8026e06:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 8026e0a:	2300      	movs	r3, #0
 8026e0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026e10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026e14:	f8ad 3020 	strh.w	r3, [sp, #32]
 8026e18:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8026e1c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8026e20:	9301      	str	r3, [sp, #4]
 8026e22:	f10d 031e 	add.w	r3, sp, #30
 8026e26:	9300      	str	r3, [sp, #0]
 8026e28:	4945      	ldr	r1, [pc, #276]	@ (8026f40 <_tzset_unlocked_r+0x324>)
 8026e2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8026e2c:	aa07      	add	r2, sp, #28
 8026e2e:	4628      	mov	r0, r5
 8026e30:	f001 fc30 	bl	8028694 <siscanf>
 8026e34:	2800      	cmp	r0, #0
 8026e36:	f300 80a2 	bgt.w	8026f7e <_tzset_unlocked_r+0x362>
 8026e3a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8026e3e:	9304      	str	r3, [sp, #16]
 8026e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026e42:	4627      	mov	r7, r4
 8026e44:	441d      	add	r5, r3
 8026e46:	f04f 0b00 	mov.w	fp, #0
 8026e4a:	782b      	ldrb	r3, [r5, #0]
 8026e4c:	2b2c      	cmp	r3, #44	@ 0x2c
 8026e4e:	bf08      	it	eq
 8026e50:	3501      	addeq	r5, #1
 8026e52:	f895 9000 	ldrb.w	r9, [r5]
 8026e56:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8026e5a:	f040 80a3 	bne.w	8026fa4 <_tzset_unlocked_r+0x388>
 8026e5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8026e60:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8026e64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8026e68:	aa09      	add	r2, sp, #36	@ 0x24
 8026e6a:	9200      	str	r2, [sp, #0]
 8026e6c:	4937      	ldr	r1, [pc, #220]	@ (8026f4c <_tzset_unlocked_r+0x330>)
 8026e6e:	9303      	str	r3, [sp, #12]
 8026e70:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8026e74:	4628      	mov	r0, r5
 8026e76:	f001 fc0d 	bl	8028694 <siscanf>
 8026e7a:	2803      	cmp	r0, #3
 8026e7c:	f47f aefc 	bne.w	8026c78 <_tzset_unlocked_r+0x5c>
 8026e80:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8026e84:	1e4b      	subs	r3, r1, #1
 8026e86:	2b0b      	cmp	r3, #11
 8026e88:	f63f aef6 	bhi.w	8026c78 <_tzset_unlocked_r+0x5c>
 8026e8c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8026e90:	1e53      	subs	r3, r2, #1
 8026e92:	2b04      	cmp	r3, #4
 8026e94:	f63f aef0 	bhi.w	8026c78 <_tzset_unlocked_r+0x5c>
 8026e98:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8026e9c:	2b06      	cmp	r3, #6
 8026e9e:	f63f aeeb 	bhi.w	8026c78 <_tzset_unlocked_r+0x5c>
 8026ea2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8026ea6:	f887 9008 	strb.w	r9, [r7, #8]
 8026eaa:	617b      	str	r3, [r7, #20]
 8026eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026eae:	eb05 0903 	add.w	r9, r5, r3
 8026eb2:	2500      	movs	r5, #0
 8026eb4:	f04f 0302 	mov.w	r3, #2
 8026eb8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026ebc:	f8ad 501e 	strh.w	r5, [sp, #30]
 8026ec0:	f8ad 5020 	strh.w	r5, [sp, #32]
 8026ec4:	950a      	str	r5, [sp, #40]	@ 0x28
 8026ec6:	f899 3000 	ldrb.w	r3, [r9]
 8026eca:	2b2f      	cmp	r3, #47	@ 0x2f
 8026ecc:	f040 8096 	bne.w	8026ffc <_tzset_unlocked_r+0x3e0>
 8026ed0:	ab0a      	add	r3, sp, #40	@ 0x28
 8026ed2:	aa08      	add	r2, sp, #32
 8026ed4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8026ed8:	f10d 021e 	add.w	r2, sp, #30
 8026edc:	9200      	str	r2, [sp, #0]
 8026ede:	491c      	ldr	r1, [pc, #112]	@ (8026f50 <_tzset_unlocked_r+0x334>)
 8026ee0:	9303      	str	r3, [sp, #12]
 8026ee2:	aa07      	add	r2, sp, #28
 8026ee4:	4648      	mov	r0, r9
 8026ee6:	f001 fbd5 	bl	8028694 <siscanf>
 8026eea:	42a8      	cmp	r0, r5
 8026eec:	f300 8086 	bgt.w	8026ffc <_tzset_unlocked_r+0x3e0>
 8026ef0:	214a      	movs	r1, #74	@ 0x4a
 8026ef2:	2200      	movs	r2, #0
 8026ef4:	2300      	movs	r3, #0
 8026ef6:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8026efa:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8026efe:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8026f02:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8026f06:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8026f0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8026f0e:	7221      	strb	r1, [r4, #8]
 8026f10:	62a5      	str	r5, [r4, #40]	@ 0x28
 8026f12:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8026f16:	6525      	str	r5, [r4, #80]	@ 0x50
 8026f18:	e6ae      	b.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026f1a:	bf00      	nop
 8026f1c:	08034820 	.word	0x08034820
 8026f20:	200182b4 	.word	0x200182b4
 8026f24:	200182d0 	.word	0x200182d0
 8026f28:	08034823 	.word	0x08034823
 8026f2c:	200182d4 	.word	0x200182d4
 8026f30:	200002bc 	.word	0x200002bc
 8026f34:	080346e3 	.word	0x080346e3
 8026f38:	200182c4 	.word	0x200182c4
 8026f3c:	08034827 	.word	0x08034827
 8026f40:	0803485c 	.word	0x0803485c
 8026f44:	200182b8 	.word	0x200182b8
 8026f48:	0803483a 	.word	0x0803483a
 8026f4c:	08034848 	.word	0x08034848
 8026f50:	0803485b 	.word	0x0803485b
 8026f54:	4a3e      	ldr	r2, [pc, #248]	@ (8027050 <_tzset_unlocked_r+0x434>)
 8026f56:	493f      	ldr	r1, [pc, #252]	@ (8027054 <_tzset_unlocked_r+0x438>)
 8026f58:	ab0a      	add	r3, sp, #40	@ 0x28
 8026f5a:	4648      	mov	r0, r9
 8026f5c:	f001 fb9a 	bl	8028694 <siscanf>
 8026f60:	2800      	cmp	r0, #0
 8026f62:	f77f af17 	ble.w	8026d94 <_tzset_unlocked_r+0x178>
 8026f66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026f68:	3b03      	subs	r3, #3
 8026f6a:	2b07      	cmp	r3, #7
 8026f6c:	f67f af42 	bls.w	8026df4 <_tzset_unlocked_r+0x1d8>
 8026f70:	e682      	b.n	8026c78 <_tzset_unlocked_r+0x5c>
 8026f72:	2b2b      	cmp	r3, #43	@ 0x2b
 8026f74:	bf08      	it	eq
 8026f76:	3501      	addeq	r5, #1
 8026f78:	f04f 0901 	mov.w	r9, #1
 8026f7c:	e745      	b.n	8026e0a <_tzset_unlocked_r+0x1ee>
 8026f7e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026f82:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026f86:	213c      	movs	r1, #60	@ 0x3c
 8026f88:	fb01 3302 	mla	r3, r1, r2, r3
 8026f8c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8026f90:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8026f94:	fb01 3302 	mla	r3, r1, r2, r3
 8026f98:	fb09 f303 	mul.w	r3, r9, r3
 8026f9c:	e74f      	b.n	8026e3e <_tzset_unlocked_r+0x222>
 8026f9e:	f04f 0b01 	mov.w	fp, #1
 8026fa2:	e752      	b.n	8026e4a <_tzset_unlocked_r+0x22e>
 8026fa4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8026fa8:	bf06      	itte	eq
 8026faa:	3501      	addeq	r5, #1
 8026fac:	464b      	moveq	r3, r9
 8026fae:	2344      	movne	r3, #68	@ 0x44
 8026fb0:	220a      	movs	r2, #10
 8026fb2:	a90b      	add	r1, sp, #44	@ 0x2c
 8026fb4:	4628      	mov	r0, r5
 8026fb6:	9305      	str	r3, [sp, #20]
 8026fb8:	f007 f950 	bl	802e25c <strtoul>
 8026fbc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8026fc0:	9b05      	ldr	r3, [sp, #20]
 8026fc2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8026fc6:	45a9      	cmp	r9, r5
 8026fc8:	d114      	bne.n	8026ff4 <_tzset_unlocked_r+0x3d8>
 8026fca:	234d      	movs	r3, #77	@ 0x4d
 8026fcc:	f1bb 0f00 	cmp.w	fp, #0
 8026fd0:	d107      	bne.n	8026fe2 <_tzset_unlocked_r+0x3c6>
 8026fd2:	7223      	strb	r3, [r4, #8]
 8026fd4:	2103      	movs	r1, #3
 8026fd6:	2302      	movs	r3, #2
 8026fd8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8026fdc:	f8c4 b014 	str.w	fp, [r4, #20]
 8026fe0:	e767      	b.n	8026eb2 <_tzset_unlocked_r+0x296>
 8026fe2:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8026fe6:	220b      	movs	r2, #11
 8026fe8:	2301      	movs	r3, #1
 8026fea:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8026fee:	2300      	movs	r3, #0
 8026ff0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8026ff2:	e75e      	b.n	8026eb2 <_tzset_unlocked_r+0x296>
 8026ff4:	b280      	uxth	r0, r0
 8026ff6:	723b      	strb	r3, [r7, #8]
 8026ff8:	6178      	str	r0, [r7, #20]
 8026ffa:	e75a      	b.n	8026eb2 <_tzset_unlocked_r+0x296>
 8026ffc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027000:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027004:	213c      	movs	r1, #60	@ 0x3c
 8027006:	fb01 3302 	mla	r3, r1, r2, r3
 802700a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802700e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8027012:	fb01 3302 	mla	r3, r1, r2, r3
 8027016:	61bb      	str	r3, [r7, #24]
 8027018:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802701a:	3728      	adds	r7, #40	@ 0x28
 802701c:	444d      	add	r5, r9
 802701e:	f1bb 0f00 	cmp.w	fp, #0
 8027022:	d0bc      	beq.n	8026f9e <_tzset_unlocked_r+0x382>
 8027024:	9b04      	ldr	r3, [sp, #16]
 8027026:	6523      	str	r3, [r4, #80]	@ 0x50
 8027028:	4b0b      	ldr	r3, [pc, #44]	@ (8027058 <_tzset_unlocked_r+0x43c>)
 802702a:	f8c8 3000 	str.w	r3, [r8]
 802702e:	6860      	ldr	r0, [r4, #4]
 8027030:	4b07      	ldr	r3, [pc, #28]	@ (8027050 <_tzset_unlocked_r+0x434>)
 8027032:	62a6      	str	r6, [r4, #40]	@ 0x28
 8027034:	f8c8 3004 	str.w	r3, [r8, #4]
 8027038:	f7ff fd34 	bl	8026aa4 <__tzcalc_limits>
 802703c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 802703e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8027040:	f8ca 2000 	str.w	r2, [sl]
 8027044:	1a9b      	subs	r3, r3, r2
 8027046:	4a05      	ldr	r2, [pc, #20]	@ (802705c <_tzset_unlocked_r+0x440>)
 8027048:	bf18      	it	ne
 802704a:	2301      	movne	r3, #1
 802704c:	6013      	str	r3, [r2, #0]
 802704e:	e613      	b.n	8026c78 <_tzset_unlocked_r+0x5c>
 8027050:	200182b8 	.word	0x200182b8
 8027054:	0803483a 	.word	0x0803483a
 8027058:	200182c4 	.word	0x200182c4
 802705c:	200182d4 	.word	0x200182d4

08027060 <__locale_mb_cur_max>:
 8027060:	4b01      	ldr	r3, [pc, #4]	@ (8027068 <__locale_mb_cur_max+0x8>)
 8027062:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8027066:	4770      	bx	lr
 8027068:	200002c4 	.word	0x200002c4

0802706c <_localeconv_r>:
 802706c:	4800      	ldr	r0, [pc, #0]	@ (8027070 <_localeconv_r+0x4>)
 802706e:	4770      	bx	lr
 8027070:	200003b4 	.word	0x200003b4

08027074 <_close_r>:
 8027074:	b538      	push	{r3, r4, r5, lr}
 8027076:	4d06      	ldr	r5, [pc, #24]	@ (8027090 <_close_r+0x1c>)
 8027078:	2300      	movs	r3, #0
 802707a:	4604      	mov	r4, r0
 802707c:	4608      	mov	r0, r1
 802707e:	602b      	str	r3, [r5, #0]
 8027080:	f7db fbac 	bl	80027dc <_close>
 8027084:	1c43      	adds	r3, r0, #1
 8027086:	d102      	bne.n	802708e <_close_r+0x1a>
 8027088:	682b      	ldr	r3, [r5, #0]
 802708a:	b103      	cbz	r3, 802708e <_close_r+0x1a>
 802708c:	6023      	str	r3, [r4, #0]
 802708e:	bd38      	pop	{r3, r4, r5, pc}
 8027090:	200182d8 	.word	0x200182d8

08027094 <_reclaim_reent>:
 8027094:	4b14      	ldr	r3, [pc, #80]	@ (80270e8 <_reclaim_reent+0x54>)
 8027096:	681b      	ldr	r3, [r3, #0]
 8027098:	4283      	cmp	r3, r0
 802709a:	b570      	push	{r4, r5, r6, lr}
 802709c:	4604      	mov	r4, r0
 802709e:	d022      	beq.n	80270e6 <_reclaim_reent+0x52>
 80270a0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80270a2:	b153      	cbz	r3, 80270ba <_reclaim_reent+0x26>
 80270a4:	2500      	movs	r5, #0
 80270a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80270a8:	5959      	ldr	r1, [r3, r5]
 80270aa:	b9b1      	cbnz	r1, 80270da <_reclaim_reent+0x46>
 80270ac:	3504      	adds	r5, #4
 80270ae:	2d80      	cmp	r5, #128	@ 0x80
 80270b0:	d1f9      	bne.n	80270a6 <_reclaim_reent+0x12>
 80270b2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80270b4:	4620      	mov	r0, r4
 80270b6:	f000 ff89 	bl	8027fcc <_free_r>
 80270ba:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80270bc:	b111      	cbz	r1, 80270c4 <_reclaim_reent+0x30>
 80270be:	4620      	mov	r0, r4
 80270c0:	f000 ff84 	bl	8027fcc <_free_r>
 80270c4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80270c6:	b111      	cbz	r1, 80270ce <_reclaim_reent+0x3a>
 80270c8:	4620      	mov	r0, r4
 80270ca:	f000 ff7f 	bl	8027fcc <_free_r>
 80270ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80270d0:	b14b      	cbz	r3, 80270e6 <_reclaim_reent+0x52>
 80270d2:	4620      	mov	r0, r4
 80270d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80270d8:	4718      	bx	r3
 80270da:	680e      	ldr	r6, [r1, #0]
 80270dc:	4620      	mov	r0, r4
 80270de:	f000 ff75 	bl	8027fcc <_free_r>
 80270e2:	4631      	mov	r1, r6
 80270e4:	e7e1      	b.n	80270aa <_reclaim_reent+0x16>
 80270e6:	bd70      	pop	{r4, r5, r6, pc}
 80270e8:	20000430 	.word	0x20000430

080270ec <_lseek_r>:
 80270ec:	b538      	push	{r3, r4, r5, lr}
 80270ee:	4d07      	ldr	r5, [pc, #28]	@ (802710c <_lseek_r+0x20>)
 80270f0:	4604      	mov	r4, r0
 80270f2:	4608      	mov	r0, r1
 80270f4:	4611      	mov	r1, r2
 80270f6:	2200      	movs	r2, #0
 80270f8:	602a      	str	r2, [r5, #0]
 80270fa:	461a      	mov	r2, r3
 80270fc:	f7db fb95 	bl	800282a <_lseek>
 8027100:	1c43      	adds	r3, r0, #1
 8027102:	d102      	bne.n	802710a <_lseek_r+0x1e>
 8027104:	682b      	ldr	r3, [r5, #0]
 8027106:	b103      	cbz	r3, 802710a <_lseek_r+0x1e>
 8027108:	6023      	str	r3, [r4, #0]
 802710a:	bd38      	pop	{r3, r4, r5, pc}
 802710c:	200182d8 	.word	0x200182d8

08027110 <_read_r>:
 8027110:	b538      	push	{r3, r4, r5, lr}
 8027112:	4d07      	ldr	r5, [pc, #28]	@ (8027130 <_read_r+0x20>)
 8027114:	4604      	mov	r4, r0
 8027116:	4608      	mov	r0, r1
 8027118:	4611      	mov	r1, r2
 802711a:	2200      	movs	r2, #0
 802711c:	602a      	str	r2, [r5, #0]
 802711e:	461a      	mov	r2, r3
 8027120:	f7db fb23 	bl	800276a <_read>
 8027124:	1c43      	adds	r3, r0, #1
 8027126:	d102      	bne.n	802712e <_read_r+0x1e>
 8027128:	682b      	ldr	r3, [r5, #0]
 802712a:	b103      	cbz	r3, 802712e <_read_r+0x1e>
 802712c:	6023      	str	r3, [r4, #0]
 802712e:	bd38      	pop	{r3, r4, r5, pc}
 8027130:	200182d8 	.word	0x200182d8

08027134 <_write_r>:
 8027134:	b538      	push	{r3, r4, r5, lr}
 8027136:	4d07      	ldr	r5, [pc, #28]	@ (8027154 <_write_r+0x20>)
 8027138:	4604      	mov	r4, r0
 802713a:	4608      	mov	r0, r1
 802713c:	4611      	mov	r1, r2
 802713e:	2200      	movs	r2, #0
 8027140:	602a      	str	r2, [r5, #0]
 8027142:	461a      	mov	r2, r3
 8027144:	f7db fb2e 	bl	80027a4 <_write>
 8027148:	1c43      	adds	r3, r0, #1
 802714a:	d102      	bne.n	8027152 <_write_r+0x1e>
 802714c:	682b      	ldr	r3, [r5, #0]
 802714e:	b103      	cbz	r3, 8027152 <_write_r+0x1e>
 8027150:	6023      	str	r3, [r4, #0]
 8027152:	bd38      	pop	{r3, r4, r5, pc}
 8027154:	200182d8 	.word	0x200182d8

08027158 <__errno>:
 8027158:	4b01      	ldr	r3, [pc, #4]	@ (8027160 <__errno+0x8>)
 802715a:	6818      	ldr	r0, [r3, #0]
 802715c:	4770      	bx	lr
 802715e:	bf00      	nop
 8027160:	20000430 	.word	0x20000430

08027164 <strcpy>:
 8027164:	4603      	mov	r3, r0
 8027166:	f811 2b01 	ldrb.w	r2, [r1], #1
 802716a:	f803 2b01 	strb.w	r2, [r3], #1
 802716e:	2a00      	cmp	r2, #0
 8027170:	d1f9      	bne.n	8027166 <strcpy+0x2>
 8027172:	4770      	bx	lr

08027174 <__libc_init_array>:
 8027174:	b570      	push	{r4, r5, r6, lr}
 8027176:	4d0d      	ldr	r5, [pc, #52]	@ (80271ac <__libc_init_array+0x38>)
 8027178:	4c0d      	ldr	r4, [pc, #52]	@ (80271b0 <__libc_init_array+0x3c>)
 802717a:	1b64      	subs	r4, r4, r5
 802717c:	10a4      	asrs	r4, r4, #2
 802717e:	2600      	movs	r6, #0
 8027180:	42a6      	cmp	r6, r4
 8027182:	d109      	bne.n	8027198 <__libc_init_array+0x24>
 8027184:	4d0b      	ldr	r5, [pc, #44]	@ (80271b4 <__libc_init_array+0x40>)
 8027186:	4c0c      	ldr	r4, [pc, #48]	@ (80271b8 <__libc_init_array+0x44>)
 8027188:	f007 ff60 	bl	802f04c <_init>
 802718c:	1b64      	subs	r4, r4, r5
 802718e:	10a4      	asrs	r4, r4, #2
 8027190:	2600      	movs	r6, #0
 8027192:	42a6      	cmp	r6, r4
 8027194:	d105      	bne.n	80271a2 <__libc_init_array+0x2e>
 8027196:	bd70      	pop	{r4, r5, r6, pc}
 8027198:	f855 3b04 	ldr.w	r3, [r5], #4
 802719c:	4798      	blx	r3
 802719e:	3601      	adds	r6, #1
 80271a0:	e7ee      	b.n	8027180 <__libc_init_array+0xc>
 80271a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80271a6:	4798      	blx	r3
 80271a8:	3601      	adds	r6, #1
 80271aa:	e7f2      	b.n	8027192 <__libc_init_array+0x1e>
 80271ac:	08034eb0 	.word	0x08034eb0
 80271b0:	08034eb0 	.word	0x08034eb0
 80271b4:	08034eb0 	.word	0x08034eb0
 80271b8:	08034eb8 	.word	0x08034eb8

080271bc <__retarget_lock_init_recursive>:
 80271bc:	4770      	bx	lr

080271be <__retarget_lock_close_recursive>:
 80271be:	4770      	bx	lr

080271c0 <__retarget_lock_acquire>:
 80271c0:	4770      	bx	lr

080271c2 <__retarget_lock_acquire_recursive>:
 80271c2:	4770      	bx	lr

080271c4 <__retarget_lock_release>:
 80271c4:	4770      	bx	lr

080271c6 <__retarget_lock_release_recursive>:
 80271c6:	4770      	bx	lr

080271c8 <memcpy>:
 80271c8:	440a      	add	r2, r1
 80271ca:	4291      	cmp	r1, r2
 80271cc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80271d0:	d100      	bne.n	80271d4 <memcpy+0xc>
 80271d2:	4770      	bx	lr
 80271d4:	b510      	push	{r4, lr}
 80271d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80271da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80271de:	4291      	cmp	r1, r2
 80271e0:	d1f9      	bne.n	80271d6 <memcpy+0xe>
 80271e2:	bd10      	pop	{r4, pc}

080271e4 <_wcrtomb_r>:
 80271e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80271e6:	4c09      	ldr	r4, [pc, #36]	@ (802720c <_wcrtomb_r+0x28>)
 80271e8:	b085      	sub	sp, #20
 80271ea:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 80271ee:	4605      	mov	r5, r0
 80271f0:	461e      	mov	r6, r3
 80271f2:	b909      	cbnz	r1, 80271f8 <_wcrtomb_r+0x14>
 80271f4:	460a      	mov	r2, r1
 80271f6:	a901      	add	r1, sp, #4
 80271f8:	47b8      	blx	r7
 80271fa:	1c43      	adds	r3, r0, #1
 80271fc:	bf01      	itttt	eq
 80271fe:	2300      	moveq	r3, #0
 8027200:	6033      	streq	r3, [r6, #0]
 8027202:	238a      	moveq	r3, #138	@ 0x8a
 8027204:	602b      	streq	r3, [r5, #0]
 8027206:	b005      	add	sp, #20
 8027208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802720a:	bf00      	nop
 802720c:	200002c4 	.word	0x200002c4

08027210 <frexp>:
 8027210:	b570      	push	{r4, r5, r6, lr}
 8027212:	2100      	movs	r1, #0
 8027214:	ec55 4b10 	vmov	r4, r5, d0
 8027218:	6001      	str	r1, [r0, #0]
 802721a:	4915      	ldr	r1, [pc, #84]	@ (8027270 <frexp+0x60>)
 802721c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8027220:	428a      	cmp	r2, r1
 8027222:	4606      	mov	r6, r0
 8027224:	462b      	mov	r3, r5
 8027226:	d820      	bhi.n	802726a <frexp+0x5a>
 8027228:	4621      	mov	r1, r4
 802722a:	4311      	orrs	r1, r2
 802722c:	d01d      	beq.n	802726a <frexp+0x5a>
 802722e:	4911      	ldr	r1, [pc, #68]	@ (8027274 <frexp+0x64>)
 8027230:	4029      	ands	r1, r5
 8027232:	b961      	cbnz	r1, 802724e <frexp+0x3e>
 8027234:	4b10      	ldr	r3, [pc, #64]	@ (8027278 <frexp+0x68>)
 8027236:	2200      	movs	r2, #0
 8027238:	4620      	mov	r0, r4
 802723a:	4629      	mov	r1, r5
 802723c:	f7d9 f9f4 	bl	8000628 <__aeabi_dmul>
 8027240:	460b      	mov	r3, r1
 8027242:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8027246:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 802724a:	4604      	mov	r4, r0
 802724c:	6031      	str	r1, [r6, #0]
 802724e:	6831      	ldr	r1, [r6, #0]
 8027250:	1512      	asrs	r2, r2, #20
 8027252:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8027256:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 802725a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802725e:	4411      	add	r1, r2
 8027260:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8027264:	6031      	str	r1, [r6, #0]
 8027266:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 802726a:	ec45 4b10 	vmov	d0, r4, r5
 802726e:	bd70      	pop	{r4, r5, r6, pc}
 8027270:	7fefffff 	.word	0x7fefffff
 8027274:	7ff00000 	.word	0x7ff00000
 8027278:	43500000 	.word	0x43500000

0802727c <register_fini>:
 802727c:	4b02      	ldr	r3, [pc, #8]	@ (8027288 <register_fini+0xc>)
 802727e:	b113      	cbz	r3, 8027286 <register_fini+0xa>
 8027280:	4802      	ldr	r0, [pc, #8]	@ (802728c <register_fini+0x10>)
 8027282:	f000 b810 	b.w	80272a6 <atexit>
 8027286:	4770      	bx	lr
 8027288:	00000000 	.word	0x00000000
 802728c:	0802e70d 	.word	0x0802e70d

08027290 <abort>:
 8027290:	b508      	push	{r3, lr}
 8027292:	2006      	movs	r0, #6
 8027294:	f007 f8a6 	bl	802e3e4 <raise>
 8027298:	2001      	movs	r0, #1
 802729a:	f7db fa5b 	bl	8002754 <_exit>

0802729e <abs>:
 802729e:	2800      	cmp	r0, #0
 80272a0:	bfb8      	it	lt
 80272a2:	4240      	neglt	r0, r0
 80272a4:	4770      	bx	lr

080272a6 <atexit>:
 80272a6:	2300      	movs	r3, #0
 80272a8:	4601      	mov	r1, r0
 80272aa:	461a      	mov	r2, r3
 80272ac:	4618      	mov	r0, r3
 80272ae:	f007 bb01 	b.w	802e8b4 <__register_exitproc>

080272b2 <quorem>:
 80272b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272b6:	6903      	ldr	r3, [r0, #16]
 80272b8:	690c      	ldr	r4, [r1, #16]
 80272ba:	42a3      	cmp	r3, r4
 80272bc:	4607      	mov	r7, r0
 80272be:	db7e      	blt.n	80273be <quorem+0x10c>
 80272c0:	3c01      	subs	r4, #1
 80272c2:	f101 0814 	add.w	r8, r1, #20
 80272c6:	00a3      	lsls	r3, r4, #2
 80272c8:	f100 0514 	add.w	r5, r0, #20
 80272cc:	9300      	str	r3, [sp, #0]
 80272ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80272d2:	9301      	str	r3, [sp, #4]
 80272d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80272d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80272dc:	3301      	adds	r3, #1
 80272de:	429a      	cmp	r2, r3
 80272e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80272e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80272e8:	d32e      	bcc.n	8027348 <quorem+0x96>
 80272ea:	f04f 0a00 	mov.w	sl, #0
 80272ee:	46c4      	mov	ip, r8
 80272f0:	46ae      	mov	lr, r5
 80272f2:	46d3      	mov	fp, sl
 80272f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80272f8:	b298      	uxth	r0, r3
 80272fa:	fb06 a000 	mla	r0, r6, r0, sl
 80272fe:	0c02      	lsrs	r2, r0, #16
 8027300:	0c1b      	lsrs	r3, r3, #16
 8027302:	fb06 2303 	mla	r3, r6, r3, r2
 8027306:	f8de 2000 	ldr.w	r2, [lr]
 802730a:	b280      	uxth	r0, r0
 802730c:	b292      	uxth	r2, r2
 802730e:	1a12      	subs	r2, r2, r0
 8027310:	445a      	add	r2, fp
 8027312:	f8de 0000 	ldr.w	r0, [lr]
 8027316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802731a:	b29b      	uxth	r3, r3
 802731c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8027320:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8027324:	b292      	uxth	r2, r2
 8027326:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802732a:	45e1      	cmp	r9, ip
 802732c:	f84e 2b04 	str.w	r2, [lr], #4
 8027330:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8027334:	d2de      	bcs.n	80272f4 <quorem+0x42>
 8027336:	9b00      	ldr	r3, [sp, #0]
 8027338:	58eb      	ldr	r3, [r5, r3]
 802733a:	b92b      	cbnz	r3, 8027348 <quorem+0x96>
 802733c:	9b01      	ldr	r3, [sp, #4]
 802733e:	3b04      	subs	r3, #4
 8027340:	429d      	cmp	r5, r3
 8027342:	461a      	mov	r2, r3
 8027344:	d32f      	bcc.n	80273a6 <quorem+0xf4>
 8027346:	613c      	str	r4, [r7, #16]
 8027348:	4638      	mov	r0, r7
 802734a:	f005 fce3 	bl	802cd14 <__mcmp>
 802734e:	2800      	cmp	r0, #0
 8027350:	db25      	blt.n	802739e <quorem+0xec>
 8027352:	4629      	mov	r1, r5
 8027354:	2000      	movs	r0, #0
 8027356:	f858 2b04 	ldr.w	r2, [r8], #4
 802735a:	f8d1 c000 	ldr.w	ip, [r1]
 802735e:	fa1f fe82 	uxth.w	lr, r2
 8027362:	fa1f f38c 	uxth.w	r3, ip
 8027366:	eba3 030e 	sub.w	r3, r3, lr
 802736a:	4403      	add	r3, r0
 802736c:	0c12      	lsrs	r2, r2, #16
 802736e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8027372:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8027376:	b29b      	uxth	r3, r3
 8027378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802737c:	45c1      	cmp	r9, r8
 802737e:	f841 3b04 	str.w	r3, [r1], #4
 8027382:	ea4f 4022 	mov.w	r0, r2, asr #16
 8027386:	d2e6      	bcs.n	8027356 <quorem+0xa4>
 8027388:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802738c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027390:	b922      	cbnz	r2, 802739c <quorem+0xea>
 8027392:	3b04      	subs	r3, #4
 8027394:	429d      	cmp	r5, r3
 8027396:	461a      	mov	r2, r3
 8027398:	d30b      	bcc.n	80273b2 <quorem+0x100>
 802739a:	613c      	str	r4, [r7, #16]
 802739c:	3601      	adds	r6, #1
 802739e:	4630      	mov	r0, r6
 80273a0:	b003      	add	sp, #12
 80273a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273a6:	6812      	ldr	r2, [r2, #0]
 80273a8:	3b04      	subs	r3, #4
 80273aa:	2a00      	cmp	r2, #0
 80273ac:	d1cb      	bne.n	8027346 <quorem+0x94>
 80273ae:	3c01      	subs	r4, #1
 80273b0:	e7c6      	b.n	8027340 <quorem+0x8e>
 80273b2:	6812      	ldr	r2, [r2, #0]
 80273b4:	3b04      	subs	r3, #4
 80273b6:	2a00      	cmp	r2, #0
 80273b8:	d1ef      	bne.n	802739a <quorem+0xe8>
 80273ba:	3c01      	subs	r4, #1
 80273bc:	e7ea      	b.n	8027394 <quorem+0xe2>
 80273be:	2000      	movs	r0, #0
 80273c0:	e7ee      	b.n	80273a0 <quorem+0xee>
 80273c2:	0000      	movs	r0, r0
 80273c4:	0000      	movs	r0, r0
	...

080273c8 <_dtoa_r>:
 80273c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273cc:	b099      	sub	sp, #100	@ 0x64
 80273ce:	ed8d 0b02 	vstr	d0, [sp, #8]
 80273d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80273d4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80273d6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80273d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80273da:	ec55 4b10 	vmov	r4, r5, d0
 80273de:	4683      	mov	fp, r0
 80273e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80273e2:	b149      	cbz	r1, 80273f8 <_dtoa_r+0x30>
 80273e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80273e6:	604a      	str	r2, [r1, #4]
 80273e8:	2301      	movs	r3, #1
 80273ea:	4093      	lsls	r3, r2
 80273ec:	608b      	str	r3, [r1, #8]
 80273ee:	f005 fa40 	bl	802c872 <_Bfree>
 80273f2:	2300      	movs	r3, #0
 80273f4:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 80273f8:	1e2b      	subs	r3, r5, #0
 80273fa:	bfb9      	ittee	lt
 80273fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8027400:	9303      	strlt	r3, [sp, #12]
 8027402:	2300      	movge	r3, #0
 8027404:	6033      	strge	r3, [r6, #0]
 8027406:	9f03      	ldr	r7, [sp, #12]
 8027408:	4b97      	ldr	r3, [pc, #604]	@ (8027668 <_dtoa_r+0x2a0>)
 802740a:	bfbc      	itt	lt
 802740c:	2201      	movlt	r2, #1
 802740e:	6032      	strlt	r2, [r6, #0]
 8027410:	43bb      	bics	r3, r7
 8027412:	d114      	bne.n	802743e <_dtoa_r+0x76>
 8027414:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027416:	f242 730f 	movw	r3, #9999	@ 0x270f
 802741a:	6013      	str	r3, [r2, #0]
 802741c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027420:	4323      	orrs	r3, r4
 8027422:	f000 854c 	beq.w	8027ebe <_dtoa_r+0xaf6>
 8027426:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027428:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8027680 <_dtoa_r+0x2b8>
 802742c:	b11b      	cbz	r3, 8027436 <_dtoa_r+0x6e>
 802742e:	f10a 0303 	add.w	r3, sl, #3
 8027432:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027434:	6013      	str	r3, [r2, #0]
 8027436:	4650      	mov	r0, sl
 8027438:	b019      	add	sp, #100	@ 0x64
 802743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802743e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027442:	2200      	movs	r2, #0
 8027444:	ec51 0b17 	vmov	r0, r1, d7
 8027448:	2300      	movs	r3, #0
 802744a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802744e:	f7d9 fb53 	bl	8000af8 <__aeabi_dcmpeq>
 8027452:	4680      	mov	r8, r0
 8027454:	b150      	cbz	r0, 802746c <_dtoa_r+0xa4>
 8027456:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027458:	2301      	movs	r3, #1
 802745a:	6013      	str	r3, [r2, #0]
 802745c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802745e:	b113      	cbz	r3, 8027466 <_dtoa_r+0x9e>
 8027460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027462:	4b82      	ldr	r3, [pc, #520]	@ (802766c <_dtoa_r+0x2a4>)
 8027464:	6013      	str	r3, [r2, #0]
 8027466:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8027684 <_dtoa_r+0x2bc>
 802746a:	e7e4      	b.n	8027436 <_dtoa_r+0x6e>
 802746c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8027470:	aa16      	add	r2, sp, #88	@ 0x58
 8027472:	a917      	add	r1, sp, #92	@ 0x5c
 8027474:	4658      	mov	r0, fp
 8027476:	f005 fd6d 	bl	802cf54 <__d2b>
 802747a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802747e:	4681      	mov	r9, r0
 8027480:	2e00      	cmp	r6, #0
 8027482:	d077      	beq.n	8027574 <_dtoa_r+0x1ac>
 8027484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027486:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802748a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802748e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027492:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8027496:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802749a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802749e:	4619      	mov	r1, r3
 80274a0:	2200      	movs	r2, #0
 80274a2:	4b73      	ldr	r3, [pc, #460]	@ (8027670 <_dtoa_r+0x2a8>)
 80274a4:	f7d8 ff08 	bl	80002b8 <__aeabi_dsub>
 80274a8:	a369      	add	r3, pc, #420	@ (adr r3, 8027650 <_dtoa_r+0x288>)
 80274aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274ae:	f7d9 f8bb 	bl	8000628 <__aeabi_dmul>
 80274b2:	a369      	add	r3, pc, #420	@ (adr r3, 8027658 <_dtoa_r+0x290>)
 80274b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274b8:	f7d8 ff00 	bl	80002bc <__adddf3>
 80274bc:	4604      	mov	r4, r0
 80274be:	4630      	mov	r0, r6
 80274c0:	460d      	mov	r5, r1
 80274c2:	f7d9 f847 	bl	8000554 <__aeabi_i2d>
 80274c6:	a366      	add	r3, pc, #408	@ (adr r3, 8027660 <_dtoa_r+0x298>)
 80274c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274cc:	f7d9 f8ac 	bl	8000628 <__aeabi_dmul>
 80274d0:	4602      	mov	r2, r0
 80274d2:	460b      	mov	r3, r1
 80274d4:	4620      	mov	r0, r4
 80274d6:	4629      	mov	r1, r5
 80274d8:	f7d8 fef0 	bl	80002bc <__adddf3>
 80274dc:	4604      	mov	r4, r0
 80274de:	460d      	mov	r5, r1
 80274e0:	f7d9 fb52 	bl	8000b88 <__aeabi_d2iz>
 80274e4:	2200      	movs	r2, #0
 80274e6:	4607      	mov	r7, r0
 80274e8:	2300      	movs	r3, #0
 80274ea:	4620      	mov	r0, r4
 80274ec:	4629      	mov	r1, r5
 80274ee:	f7d9 fb0d 	bl	8000b0c <__aeabi_dcmplt>
 80274f2:	b140      	cbz	r0, 8027506 <_dtoa_r+0x13e>
 80274f4:	4638      	mov	r0, r7
 80274f6:	f7d9 f82d 	bl	8000554 <__aeabi_i2d>
 80274fa:	4622      	mov	r2, r4
 80274fc:	462b      	mov	r3, r5
 80274fe:	f7d9 fafb 	bl	8000af8 <__aeabi_dcmpeq>
 8027502:	b900      	cbnz	r0, 8027506 <_dtoa_r+0x13e>
 8027504:	3f01      	subs	r7, #1
 8027506:	2f16      	cmp	r7, #22
 8027508:	d851      	bhi.n	80275ae <_dtoa_r+0x1e6>
 802750a:	4b5a      	ldr	r3, [pc, #360]	@ (8027674 <_dtoa_r+0x2ac>)
 802750c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8027510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027518:	f7d9 faf8 	bl	8000b0c <__aeabi_dcmplt>
 802751c:	2800      	cmp	r0, #0
 802751e:	d048      	beq.n	80275b2 <_dtoa_r+0x1ea>
 8027520:	3f01      	subs	r7, #1
 8027522:	2300      	movs	r3, #0
 8027524:	9312      	str	r3, [sp, #72]	@ 0x48
 8027526:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027528:	1b9b      	subs	r3, r3, r6
 802752a:	1e5a      	subs	r2, r3, #1
 802752c:	bf44      	itt	mi
 802752e:	f1c3 0801 	rsbmi	r8, r3, #1
 8027532:	2300      	movmi	r3, #0
 8027534:	9208      	str	r2, [sp, #32]
 8027536:	bf54      	ite	pl
 8027538:	f04f 0800 	movpl.w	r8, #0
 802753c:	9308      	strmi	r3, [sp, #32]
 802753e:	2f00      	cmp	r7, #0
 8027540:	db39      	blt.n	80275b6 <_dtoa_r+0x1ee>
 8027542:	9b08      	ldr	r3, [sp, #32]
 8027544:	970f      	str	r7, [sp, #60]	@ 0x3c
 8027546:	443b      	add	r3, r7
 8027548:	9308      	str	r3, [sp, #32]
 802754a:	2300      	movs	r3, #0
 802754c:	930a      	str	r3, [sp, #40]	@ 0x28
 802754e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027550:	2b09      	cmp	r3, #9
 8027552:	d865      	bhi.n	8027620 <_dtoa_r+0x258>
 8027554:	2b05      	cmp	r3, #5
 8027556:	bfc4      	itt	gt
 8027558:	3b04      	subgt	r3, #4
 802755a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802755c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802755e:	f1a3 0302 	sub.w	r3, r3, #2
 8027562:	bfcc      	ite	gt
 8027564:	2400      	movgt	r4, #0
 8027566:	2401      	movle	r4, #1
 8027568:	2b03      	cmp	r3, #3
 802756a:	d864      	bhi.n	8027636 <_dtoa_r+0x26e>
 802756c:	e8df f003 	tbb	[pc, r3]
 8027570:	5635372a 	.word	0x5635372a
 8027574:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8027578:	441e      	add	r6, r3
 802757a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802757e:	2b20      	cmp	r3, #32
 8027580:	bfc1      	itttt	gt
 8027582:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8027586:	409f      	lslgt	r7, r3
 8027588:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802758c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8027590:	bfd6      	itet	le
 8027592:	f1c3 0320 	rsble	r3, r3, #32
 8027596:	ea47 0003 	orrgt.w	r0, r7, r3
 802759a:	fa04 f003 	lslle.w	r0, r4, r3
 802759e:	f7d8 ffc9 	bl	8000534 <__aeabi_ui2d>
 80275a2:	2201      	movs	r2, #1
 80275a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80275a8:	3e01      	subs	r6, #1
 80275aa:	9214      	str	r2, [sp, #80]	@ 0x50
 80275ac:	e777      	b.n	802749e <_dtoa_r+0xd6>
 80275ae:	2301      	movs	r3, #1
 80275b0:	e7b8      	b.n	8027524 <_dtoa_r+0x15c>
 80275b2:	9012      	str	r0, [sp, #72]	@ 0x48
 80275b4:	e7b7      	b.n	8027526 <_dtoa_r+0x15e>
 80275b6:	427b      	negs	r3, r7
 80275b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80275ba:	2300      	movs	r3, #0
 80275bc:	eba8 0807 	sub.w	r8, r8, r7
 80275c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80275c2:	e7c4      	b.n	802754e <_dtoa_r+0x186>
 80275c4:	2300      	movs	r3, #0
 80275c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80275c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80275ca:	2b00      	cmp	r3, #0
 80275cc:	dc36      	bgt.n	802763c <_dtoa_r+0x274>
 80275ce:	2301      	movs	r3, #1
 80275d0:	9300      	str	r3, [sp, #0]
 80275d2:	9307      	str	r3, [sp, #28]
 80275d4:	461a      	mov	r2, r3
 80275d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80275d8:	e00b      	b.n	80275f2 <_dtoa_r+0x22a>
 80275da:	2301      	movs	r3, #1
 80275dc:	e7f3      	b.n	80275c6 <_dtoa_r+0x1fe>
 80275de:	2300      	movs	r3, #0
 80275e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80275e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80275e4:	18fb      	adds	r3, r7, r3
 80275e6:	9300      	str	r3, [sp, #0]
 80275e8:	3301      	adds	r3, #1
 80275ea:	2b01      	cmp	r3, #1
 80275ec:	9307      	str	r3, [sp, #28]
 80275ee:	bfb8      	it	lt
 80275f0:	2301      	movlt	r3, #1
 80275f2:	2100      	movs	r1, #0
 80275f4:	2204      	movs	r2, #4
 80275f6:	f102 0014 	add.w	r0, r2, #20
 80275fa:	4298      	cmp	r0, r3
 80275fc:	d922      	bls.n	8027644 <_dtoa_r+0x27c>
 80275fe:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8027602:	4658      	mov	r0, fp
 8027604:	f005 f910 	bl	802c828 <_Balloc>
 8027608:	4682      	mov	sl, r0
 802760a:	2800      	cmp	r0, #0
 802760c:	d13c      	bne.n	8027688 <_dtoa_r+0x2c0>
 802760e:	4b1a      	ldr	r3, [pc, #104]	@ (8027678 <_dtoa_r+0x2b0>)
 8027610:	4602      	mov	r2, r0
 8027612:	f240 11af 	movw	r1, #431	@ 0x1af
 8027616:	4819      	ldr	r0, [pc, #100]	@ (802767c <_dtoa_r+0x2b4>)
 8027618:	f7fb fe46 	bl	80232a8 <__assert_func>
 802761c:	2301      	movs	r3, #1
 802761e:	e7df      	b.n	80275e0 <_dtoa_r+0x218>
 8027620:	2401      	movs	r4, #1
 8027622:	2300      	movs	r3, #0
 8027624:	9309      	str	r3, [sp, #36]	@ 0x24
 8027626:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802762c:	9300      	str	r3, [sp, #0]
 802762e:	9307      	str	r3, [sp, #28]
 8027630:	2200      	movs	r2, #0
 8027632:	2312      	movs	r3, #18
 8027634:	e7cf      	b.n	80275d6 <_dtoa_r+0x20e>
 8027636:	2301      	movs	r3, #1
 8027638:	930b      	str	r3, [sp, #44]	@ 0x2c
 802763a:	e7f5      	b.n	8027628 <_dtoa_r+0x260>
 802763c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802763e:	9300      	str	r3, [sp, #0]
 8027640:	9307      	str	r3, [sp, #28]
 8027642:	e7d6      	b.n	80275f2 <_dtoa_r+0x22a>
 8027644:	3101      	adds	r1, #1
 8027646:	0052      	lsls	r2, r2, #1
 8027648:	e7d5      	b.n	80275f6 <_dtoa_r+0x22e>
 802764a:	bf00      	nop
 802764c:	f3af 8000 	nop.w
 8027650:	636f4361 	.word	0x636f4361
 8027654:	3fd287a7 	.word	0x3fd287a7
 8027658:	8b60c8b3 	.word	0x8b60c8b3
 802765c:	3fc68a28 	.word	0x3fc68a28
 8027660:	509f79fb 	.word	0x509f79fb
 8027664:	3fd34413 	.word	0x3fd34413
 8027668:	7ff00000 	.word	0x7ff00000
 802766c:	08034717 	.word	0x08034717
 8027670:	3ff80000 	.word	0x3ff80000
 8027674:	08034d30 	.word	0x08034d30
 8027678:	08034bae 	.word	0x08034bae
 802767c:	08034bbf 	.word	0x08034bbf
 8027680:	08034baa 	.word	0x08034baa
 8027684:	08034716 	.word	0x08034716
 8027688:	9b07      	ldr	r3, [sp, #28]
 802768a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 802768e:	2b0e      	cmp	r3, #14
 8027690:	f200 80a4 	bhi.w	80277dc <_dtoa_r+0x414>
 8027694:	2c00      	cmp	r4, #0
 8027696:	f000 80a1 	beq.w	80277dc <_dtoa_r+0x414>
 802769a:	2f00      	cmp	r7, #0
 802769c:	dd33      	ble.n	8027706 <_dtoa_r+0x33e>
 802769e:	4bae      	ldr	r3, [pc, #696]	@ (8027958 <_dtoa_r+0x590>)
 80276a0:	f007 020f 	and.w	r2, r7, #15
 80276a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80276a8:	ed93 7b00 	vldr	d7, [r3]
 80276ac:	05f8      	lsls	r0, r7, #23
 80276ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80276b2:	ea4f 1427 	mov.w	r4, r7, asr #4
 80276b6:	d516      	bpl.n	80276e6 <_dtoa_r+0x31e>
 80276b8:	4ba8      	ldr	r3, [pc, #672]	@ (802795c <_dtoa_r+0x594>)
 80276ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80276be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80276c2:	f7d9 f8db 	bl	800087c <__aeabi_ddiv>
 80276c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80276ca:	f004 040f 	and.w	r4, r4, #15
 80276ce:	2603      	movs	r6, #3
 80276d0:	4da2      	ldr	r5, [pc, #648]	@ (802795c <_dtoa_r+0x594>)
 80276d2:	b954      	cbnz	r4, 80276ea <_dtoa_r+0x322>
 80276d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80276d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80276dc:	f7d9 f8ce 	bl	800087c <__aeabi_ddiv>
 80276e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80276e4:	e028      	b.n	8027738 <_dtoa_r+0x370>
 80276e6:	2602      	movs	r6, #2
 80276e8:	e7f2      	b.n	80276d0 <_dtoa_r+0x308>
 80276ea:	07e1      	lsls	r1, r4, #31
 80276ec:	d508      	bpl.n	8027700 <_dtoa_r+0x338>
 80276ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80276f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80276f6:	f7d8 ff97 	bl	8000628 <__aeabi_dmul>
 80276fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80276fe:	3601      	adds	r6, #1
 8027700:	1064      	asrs	r4, r4, #1
 8027702:	3508      	adds	r5, #8
 8027704:	e7e5      	b.n	80276d2 <_dtoa_r+0x30a>
 8027706:	f000 80d2 	beq.w	80278ae <_dtoa_r+0x4e6>
 802770a:	427c      	negs	r4, r7
 802770c:	4b92      	ldr	r3, [pc, #584]	@ (8027958 <_dtoa_r+0x590>)
 802770e:	4d93      	ldr	r5, [pc, #588]	@ (802795c <_dtoa_r+0x594>)
 8027710:	f004 020f 	and.w	r2, r4, #15
 8027714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027718:	e9d3 2300 	ldrd	r2, r3, [r3]
 802771c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027720:	f7d8 ff82 	bl	8000628 <__aeabi_dmul>
 8027724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027728:	1124      	asrs	r4, r4, #4
 802772a:	2300      	movs	r3, #0
 802772c:	2602      	movs	r6, #2
 802772e:	2c00      	cmp	r4, #0
 8027730:	f040 80b2 	bne.w	8027898 <_dtoa_r+0x4d0>
 8027734:	2b00      	cmp	r3, #0
 8027736:	d1d3      	bne.n	80276e0 <_dtoa_r+0x318>
 8027738:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802773a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802773e:	2b00      	cmp	r3, #0
 8027740:	f000 80b7 	beq.w	80278b2 <_dtoa_r+0x4ea>
 8027744:	4b86      	ldr	r3, [pc, #536]	@ (8027960 <_dtoa_r+0x598>)
 8027746:	2200      	movs	r2, #0
 8027748:	4620      	mov	r0, r4
 802774a:	4629      	mov	r1, r5
 802774c:	f7d9 f9de 	bl	8000b0c <__aeabi_dcmplt>
 8027750:	2800      	cmp	r0, #0
 8027752:	f000 80ae 	beq.w	80278b2 <_dtoa_r+0x4ea>
 8027756:	9b07      	ldr	r3, [sp, #28]
 8027758:	2b00      	cmp	r3, #0
 802775a:	f000 80aa 	beq.w	80278b2 <_dtoa_r+0x4ea>
 802775e:	9b00      	ldr	r3, [sp, #0]
 8027760:	2b00      	cmp	r3, #0
 8027762:	dd37      	ble.n	80277d4 <_dtoa_r+0x40c>
 8027764:	1e7b      	subs	r3, r7, #1
 8027766:	9304      	str	r3, [sp, #16]
 8027768:	4620      	mov	r0, r4
 802776a:	4b7e      	ldr	r3, [pc, #504]	@ (8027964 <_dtoa_r+0x59c>)
 802776c:	2200      	movs	r2, #0
 802776e:	4629      	mov	r1, r5
 8027770:	f7d8 ff5a 	bl	8000628 <__aeabi_dmul>
 8027774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027778:	9c00      	ldr	r4, [sp, #0]
 802777a:	3601      	adds	r6, #1
 802777c:	4630      	mov	r0, r6
 802777e:	f7d8 fee9 	bl	8000554 <__aeabi_i2d>
 8027782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027786:	f7d8 ff4f 	bl	8000628 <__aeabi_dmul>
 802778a:	4b77      	ldr	r3, [pc, #476]	@ (8027968 <_dtoa_r+0x5a0>)
 802778c:	2200      	movs	r2, #0
 802778e:	f7d8 fd95 	bl	80002bc <__adddf3>
 8027792:	4605      	mov	r5, r0
 8027794:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8027798:	2c00      	cmp	r4, #0
 802779a:	f040 808d 	bne.w	80278b8 <_dtoa_r+0x4f0>
 802779e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80277a2:	4b72      	ldr	r3, [pc, #456]	@ (802796c <_dtoa_r+0x5a4>)
 80277a4:	2200      	movs	r2, #0
 80277a6:	f7d8 fd87 	bl	80002b8 <__aeabi_dsub>
 80277aa:	4602      	mov	r2, r0
 80277ac:	460b      	mov	r3, r1
 80277ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80277b2:	462a      	mov	r2, r5
 80277b4:	4633      	mov	r3, r6
 80277b6:	f7d9 f9c7 	bl	8000b48 <__aeabi_dcmpgt>
 80277ba:	2800      	cmp	r0, #0
 80277bc:	f040 828c 	bne.w	8027cd8 <_dtoa_r+0x910>
 80277c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80277c4:	462a      	mov	r2, r5
 80277c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80277ca:	f7d9 f99f 	bl	8000b0c <__aeabi_dcmplt>
 80277ce:	2800      	cmp	r0, #0
 80277d0:	f040 8129 	bne.w	8027a26 <_dtoa_r+0x65e>
 80277d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80277d8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80277dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80277de:	2b00      	cmp	r3, #0
 80277e0:	f2c0 815b 	blt.w	8027a9a <_dtoa_r+0x6d2>
 80277e4:	2f0e      	cmp	r7, #14
 80277e6:	f300 8158 	bgt.w	8027a9a <_dtoa_r+0x6d2>
 80277ea:	4b5b      	ldr	r3, [pc, #364]	@ (8027958 <_dtoa_r+0x590>)
 80277ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80277f0:	ed93 7b00 	vldr	d7, [r3]
 80277f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80277f6:	2b00      	cmp	r3, #0
 80277f8:	ed8d 7b00 	vstr	d7, [sp]
 80277fc:	da03      	bge.n	8027806 <_dtoa_r+0x43e>
 80277fe:	9b07      	ldr	r3, [sp, #28]
 8027800:	2b00      	cmp	r3, #0
 8027802:	f340 8102 	ble.w	8027a0a <_dtoa_r+0x642>
 8027806:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802780a:	4656      	mov	r6, sl
 802780c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027810:	4620      	mov	r0, r4
 8027812:	4629      	mov	r1, r5
 8027814:	f7d9 f832 	bl	800087c <__aeabi_ddiv>
 8027818:	f7d9 f9b6 	bl	8000b88 <__aeabi_d2iz>
 802781c:	4680      	mov	r8, r0
 802781e:	f7d8 fe99 	bl	8000554 <__aeabi_i2d>
 8027822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027826:	f7d8 feff 	bl	8000628 <__aeabi_dmul>
 802782a:	4602      	mov	r2, r0
 802782c:	460b      	mov	r3, r1
 802782e:	4620      	mov	r0, r4
 8027830:	4629      	mov	r1, r5
 8027832:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8027836:	f7d8 fd3f 	bl	80002b8 <__aeabi_dsub>
 802783a:	f806 4b01 	strb.w	r4, [r6], #1
 802783e:	9d07      	ldr	r5, [sp, #28]
 8027840:	eba6 040a 	sub.w	r4, r6, sl
 8027844:	42a5      	cmp	r5, r4
 8027846:	4602      	mov	r2, r0
 8027848:	460b      	mov	r3, r1
 802784a:	f040 8118 	bne.w	8027a7e <_dtoa_r+0x6b6>
 802784e:	f7d8 fd35 	bl	80002bc <__adddf3>
 8027852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027856:	4604      	mov	r4, r0
 8027858:	460d      	mov	r5, r1
 802785a:	f7d9 f975 	bl	8000b48 <__aeabi_dcmpgt>
 802785e:	2800      	cmp	r0, #0
 8027860:	f040 80fa 	bne.w	8027a58 <_dtoa_r+0x690>
 8027864:	e9dd 2300 	ldrd	r2, r3, [sp]
 8027868:	4620      	mov	r0, r4
 802786a:	4629      	mov	r1, r5
 802786c:	f7d9 f944 	bl	8000af8 <__aeabi_dcmpeq>
 8027870:	b118      	cbz	r0, 802787a <_dtoa_r+0x4b2>
 8027872:	f018 0f01 	tst.w	r8, #1
 8027876:	f040 80ef 	bne.w	8027a58 <_dtoa_r+0x690>
 802787a:	4649      	mov	r1, r9
 802787c:	4658      	mov	r0, fp
 802787e:	f004 fff8 	bl	802c872 <_Bfree>
 8027882:	2300      	movs	r3, #0
 8027884:	7033      	strb	r3, [r6, #0]
 8027886:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027888:	3701      	adds	r7, #1
 802788a:	601f      	str	r7, [r3, #0]
 802788c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802788e:	2b00      	cmp	r3, #0
 8027890:	f43f add1 	beq.w	8027436 <_dtoa_r+0x6e>
 8027894:	601e      	str	r6, [r3, #0]
 8027896:	e5ce      	b.n	8027436 <_dtoa_r+0x6e>
 8027898:	07e2      	lsls	r2, r4, #31
 802789a:	d505      	bpl.n	80278a8 <_dtoa_r+0x4e0>
 802789c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80278a0:	f7d8 fec2 	bl	8000628 <__aeabi_dmul>
 80278a4:	3601      	adds	r6, #1
 80278a6:	2301      	movs	r3, #1
 80278a8:	1064      	asrs	r4, r4, #1
 80278aa:	3508      	adds	r5, #8
 80278ac:	e73f      	b.n	802772e <_dtoa_r+0x366>
 80278ae:	2602      	movs	r6, #2
 80278b0:	e742      	b.n	8027738 <_dtoa_r+0x370>
 80278b2:	9c07      	ldr	r4, [sp, #28]
 80278b4:	9704      	str	r7, [sp, #16]
 80278b6:	e761      	b.n	802777c <_dtoa_r+0x3b4>
 80278b8:	4b27      	ldr	r3, [pc, #156]	@ (8027958 <_dtoa_r+0x590>)
 80278ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80278bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80278c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80278c4:	4454      	add	r4, sl
 80278c6:	2900      	cmp	r1, #0
 80278c8:	d054      	beq.n	8027974 <_dtoa_r+0x5ac>
 80278ca:	4929      	ldr	r1, [pc, #164]	@ (8027970 <_dtoa_r+0x5a8>)
 80278cc:	2000      	movs	r0, #0
 80278ce:	f7d8 ffd5 	bl	800087c <__aeabi_ddiv>
 80278d2:	4633      	mov	r3, r6
 80278d4:	462a      	mov	r2, r5
 80278d6:	f7d8 fcef 	bl	80002b8 <__aeabi_dsub>
 80278da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80278de:	4656      	mov	r6, sl
 80278e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80278e4:	f7d9 f950 	bl	8000b88 <__aeabi_d2iz>
 80278e8:	4605      	mov	r5, r0
 80278ea:	f7d8 fe33 	bl	8000554 <__aeabi_i2d>
 80278ee:	4602      	mov	r2, r0
 80278f0:	460b      	mov	r3, r1
 80278f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80278f6:	f7d8 fcdf 	bl	80002b8 <__aeabi_dsub>
 80278fa:	3530      	adds	r5, #48	@ 0x30
 80278fc:	4602      	mov	r2, r0
 80278fe:	460b      	mov	r3, r1
 8027900:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8027904:	f806 5b01 	strb.w	r5, [r6], #1
 8027908:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802790c:	f7d9 f8fe 	bl	8000b0c <__aeabi_dcmplt>
 8027910:	2800      	cmp	r0, #0
 8027912:	d172      	bne.n	80279fa <_dtoa_r+0x632>
 8027914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027918:	4911      	ldr	r1, [pc, #68]	@ (8027960 <_dtoa_r+0x598>)
 802791a:	2000      	movs	r0, #0
 802791c:	f7d8 fccc 	bl	80002b8 <__aeabi_dsub>
 8027920:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8027924:	f7d9 f8f2 	bl	8000b0c <__aeabi_dcmplt>
 8027928:	2800      	cmp	r0, #0
 802792a:	f040 8096 	bne.w	8027a5a <_dtoa_r+0x692>
 802792e:	42a6      	cmp	r6, r4
 8027930:	f43f af50 	beq.w	80277d4 <_dtoa_r+0x40c>
 8027934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8027938:	4b0a      	ldr	r3, [pc, #40]	@ (8027964 <_dtoa_r+0x59c>)
 802793a:	2200      	movs	r2, #0
 802793c:	f7d8 fe74 	bl	8000628 <__aeabi_dmul>
 8027940:	4b08      	ldr	r3, [pc, #32]	@ (8027964 <_dtoa_r+0x59c>)
 8027942:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027946:	2200      	movs	r2, #0
 8027948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802794c:	f7d8 fe6c 	bl	8000628 <__aeabi_dmul>
 8027950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027954:	e7c4      	b.n	80278e0 <_dtoa_r+0x518>
 8027956:	bf00      	nop
 8027958:	08034d30 	.word	0x08034d30
 802795c:	08034d08 	.word	0x08034d08
 8027960:	3ff00000 	.word	0x3ff00000
 8027964:	40240000 	.word	0x40240000
 8027968:	401c0000 	.word	0x401c0000
 802796c:	40140000 	.word	0x40140000
 8027970:	3fe00000 	.word	0x3fe00000
 8027974:	4631      	mov	r1, r6
 8027976:	4628      	mov	r0, r5
 8027978:	f7d8 fe56 	bl	8000628 <__aeabi_dmul>
 802797c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027980:	9415      	str	r4, [sp, #84]	@ 0x54
 8027982:	4656      	mov	r6, sl
 8027984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027988:	f7d9 f8fe 	bl	8000b88 <__aeabi_d2iz>
 802798c:	4605      	mov	r5, r0
 802798e:	f7d8 fde1 	bl	8000554 <__aeabi_i2d>
 8027992:	4602      	mov	r2, r0
 8027994:	460b      	mov	r3, r1
 8027996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802799a:	f7d8 fc8d 	bl	80002b8 <__aeabi_dsub>
 802799e:	3530      	adds	r5, #48	@ 0x30
 80279a0:	f806 5b01 	strb.w	r5, [r6], #1
 80279a4:	4602      	mov	r2, r0
 80279a6:	460b      	mov	r3, r1
 80279a8:	42a6      	cmp	r6, r4
 80279aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80279ae:	f04f 0200 	mov.w	r2, #0
 80279b2:	d124      	bne.n	80279fe <_dtoa_r+0x636>
 80279b4:	4bac      	ldr	r3, [pc, #688]	@ (8027c68 <_dtoa_r+0x8a0>)
 80279b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80279ba:	f7d8 fc7f 	bl	80002bc <__adddf3>
 80279be:	4602      	mov	r2, r0
 80279c0:	460b      	mov	r3, r1
 80279c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80279c6:	f7d9 f8bf 	bl	8000b48 <__aeabi_dcmpgt>
 80279ca:	2800      	cmp	r0, #0
 80279cc:	d145      	bne.n	8027a5a <_dtoa_r+0x692>
 80279ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80279d2:	49a5      	ldr	r1, [pc, #660]	@ (8027c68 <_dtoa_r+0x8a0>)
 80279d4:	2000      	movs	r0, #0
 80279d6:	f7d8 fc6f 	bl	80002b8 <__aeabi_dsub>
 80279da:	4602      	mov	r2, r0
 80279dc:	460b      	mov	r3, r1
 80279de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80279e2:	f7d9 f893 	bl	8000b0c <__aeabi_dcmplt>
 80279e6:	2800      	cmp	r0, #0
 80279e8:	f43f aef4 	beq.w	80277d4 <_dtoa_r+0x40c>
 80279ec:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80279ee:	1e73      	subs	r3, r6, #1
 80279f0:	9315      	str	r3, [sp, #84]	@ 0x54
 80279f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80279f6:	2b30      	cmp	r3, #48	@ 0x30
 80279f8:	d0f8      	beq.n	80279ec <_dtoa_r+0x624>
 80279fa:	9f04      	ldr	r7, [sp, #16]
 80279fc:	e73d      	b.n	802787a <_dtoa_r+0x4b2>
 80279fe:	4b9b      	ldr	r3, [pc, #620]	@ (8027c6c <_dtoa_r+0x8a4>)
 8027a00:	f7d8 fe12 	bl	8000628 <__aeabi_dmul>
 8027a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8027a08:	e7bc      	b.n	8027984 <_dtoa_r+0x5bc>
 8027a0a:	d10c      	bne.n	8027a26 <_dtoa_r+0x65e>
 8027a0c:	4b98      	ldr	r3, [pc, #608]	@ (8027c70 <_dtoa_r+0x8a8>)
 8027a0e:	2200      	movs	r2, #0
 8027a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8027a14:	f7d8 fe08 	bl	8000628 <__aeabi_dmul>
 8027a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8027a1c:	f7d9 f88a 	bl	8000b34 <__aeabi_dcmpge>
 8027a20:	2800      	cmp	r0, #0
 8027a22:	f000 8157 	beq.w	8027cd4 <_dtoa_r+0x90c>
 8027a26:	2400      	movs	r4, #0
 8027a28:	4625      	mov	r5, r4
 8027a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027a2c:	43db      	mvns	r3, r3
 8027a2e:	9304      	str	r3, [sp, #16]
 8027a30:	4656      	mov	r6, sl
 8027a32:	2700      	movs	r7, #0
 8027a34:	4621      	mov	r1, r4
 8027a36:	4658      	mov	r0, fp
 8027a38:	f004 ff1b 	bl	802c872 <_Bfree>
 8027a3c:	2d00      	cmp	r5, #0
 8027a3e:	d0dc      	beq.n	80279fa <_dtoa_r+0x632>
 8027a40:	b12f      	cbz	r7, 8027a4e <_dtoa_r+0x686>
 8027a42:	42af      	cmp	r7, r5
 8027a44:	d003      	beq.n	8027a4e <_dtoa_r+0x686>
 8027a46:	4639      	mov	r1, r7
 8027a48:	4658      	mov	r0, fp
 8027a4a:	f004 ff12 	bl	802c872 <_Bfree>
 8027a4e:	4629      	mov	r1, r5
 8027a50:	4658      	mov	r0, fp
 8027a52:	f004 ff0e 	bl	802c872 <_Bfree>
 8027a56:	e7d0      	b.n	80279fa <_dtoa_r+0x632>
 8027a58:	9704      	str	r7, [sp, #16]
 8027a5a:	4633      	mov	r3, r6
 8027a5c:	461e      	mov	r6, r3
 8027a5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027a62:	2a39      	cmp	r2, #57	@ 0x39
 8027a64:	d107      	bne.n	8027a76 <_dtoa_r+0x6ae>
 8027a66:	459a      	cmp	sl, r3
 8027a68:	d1f8      	bne.n	8027a5c <_dtoa_r+0x694>
 8027a6a:	9a04      	ldr	r2, [sp, #16]
 8027a6c:	3201      	adds	r2, #1
 8027a6e:	9204      	str	r2, [sp, #16]
 8027a70:	2230      	movs	r2, #48	@ 0x30
 8027a72:	f88a 2000 	strb.w	r2, [sl]
 8027a76:	781a      	ldrb	r2, [r3, #0]
 8027a78:	3201      	adds	r2, #1
 8027a7a:	701a      	strb	r2, [r3, #0]
 8027a7c:	e7bd      	b.n	80279fa <_dtoa_r+0x632>
 8027a7e:	4b7b      	ldr	r3, [pc, #492]	@ (8027c6c <_dtoa_r+0x8a4>)
 8027a80:	2200      	movs	r2, #0
 8027a82:	f7d8 fdd1 	bl	8000628 <__aeabi_dmul>
 8027a86:	2200      	movs	r2, #0
 8027a88:	2300      	movs	r3, #0
 8027a8a:	4604      	mov	r4, r0
 8027a8c:	460d      	mov	r5, r1
 8027a8e:	f7d9 f833 	bl	8000af8 <__aeabi_dcmpeq>
 8027a92:	2800      	cmp	r0, #0
 8027a94:	f43f aeba 	beq.w	802780c <_dtoa_r+0x444>
 8027a98:	e6ef      	b.n	802787a <_dtoa_r+0x4b2>
 8027a9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027a9c:	2a00      	cmp	r2, #0
 8027a9e:	f000 80db 	beq.w	8027c58 <_dtoa_r+0x890>
 8027aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027aa4:	2a01      	cmp	r2, #1
 8027aa6:	f300 80bf 	bgt.w	8027c28 <_dtoa_r+0x860>
 8027aaa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027aac:	2a00      	cmp	r2, #0
 8027aae:	f000 80b7 	beq.w	8027c20 <_dtoa_r+0x858>
 8027ab2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8027ab6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027ab8:	4646      	mov	r6, r8
 8027aba:	9a08      	ldr	r2, [sp, #32]
 8027abc:	2101      	movs	r1, #1
 8027abe:	441a      	add	r2, r3
 8027ac0:	4658      	mov	r0, fp
 8027ac2:	4498      	add	r8, r3
 8027ac4:	9208      	str	r2, [sp, #32]
 8027ac6:	f004 ffb9 	bl	802ca3c <__i2b>
 8027aca:	4605      	mov	r5, r0
 8027acc:	b15e      	cbz	r6, 8027ae6 <_dtoa_r+0x71e>
 8027ace:	9b08      	ldr	r3, [sp, #32]
 8027ad0:	2b00      	cmp	r3, #0
 8027ad2:	dd08      	ble.n	8027ae6 <_dtoa_r+0x71e>
 8027ad4:	42b3      	cmp	r3, r6
 8027ad6:	9a08      	ldr	r2, [sp, #32]
 8027ad8:	bfa8      	it	ge
 8027ada:	4633      	movge	r3, r6
 8027adc:	eba8 0803 	sub.w	r8, r8, r3
 8027ae0:	1af6      	subs	r6, r6, r3
 8027ae2:	1ad3      	subs	r3, r2, r3
 8027ae4:	9308      	str	r3, [sp, #32]
 8027ae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027ae8:	b1f3      	cbz	r3, 8027b28 <_dtoa_r+0x760>
 8027aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027aec:	2b00      	cmp	r3, #0
 8027aee:	f000 80b7 	beq.w	8027c60 <_dtoa_r+0x898>
 8027af2:	b18c      	cbz	r4, 8027b18 <_dtoa_r+0x750>
 8027af4:	4629      	mov	r1, r5
 8027af6:	4622      	mov	r2, r4
 8027af8:	4658      	mov	r0, fp
 8027afa:	f005 f85f 	bl	802cbbc <__pow5mult>
 8027afe:	464a      	mov	r2, r9
 8027b00:	4601      	mov	r1, r0
 8027b02:	4605      	mov	r5, r0
 8027b04:	4658      	mov	r0, fp
 8027b06:	f004 ffaf 	bl	802ca68 <__multiply>
 8027b0a:	4649      	mov	r1, r9
 8027b0c:	9004      	str	r0, [sp, #16]
 8027b0e:	4658      	mov	r0, fp
 8027b10:	f004 feaf 	bl	802c872 <_Bfree>
 8027b14:	9b04      	ldr	r3, [sp, #16]
 8027b16:	4699      	mov	r9, r3
 8027b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027b1a:	1b1a      	subs	r2, r3, r4
 8027b1c:	d004      	beq.n	8027b28 <_dtoa_r+0x760>
 8027b1e:	4649      	mov	r1, r9
 8027b20:	4658      	mov	r0, fp
 8027b22:	f005 f84b 	bl	802cbbc <__pow5mult>
 8027b26:	4681      	mov	r9, r0
 8027b28:	2101      	movs	r1, #1
 8027b2a:	4658      	mov	r0, fp
 8027b2c:	f004 ff86 	bl	802ca3c <__i2b>
 8027b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027b32:	4604      	mov	r4, r0
 8027b34:	2b00      	cmp	r3, #0
 8027b36:	f000 81cc 	beq.w	8027ed2 <_dtoa_r+0xb0a>
 8027b3a:	461a      	mov	r2, r3
 8027b3c:	4601      	mov	r1, r0
 8027b3e:	4658      	mov	r0, fp
 8027b40:	f005 f83c 	bl	802cbbc <__pow5mult>
 8027b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027b46:	2b01      	cmp	r3, #1
 8027b48:	4604      	mov	r4, r0
 8027b4a:	f300 8095 	bgt.w	8027c78 <_dtoa_r+0x8b0>
 8027b4e:	9b02      	ldr	r3, [sp, #8]
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	f040 8087 	bne.w	8027c64 <_dtoa_r+0x89c>
 8027b56:	9b03      	ldr	r3, [sp, #12]
 8027b58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8027b5c:	2b00      	cmp	r3, #0
 8027b5e:	f040 8089 	bne.w	8027c74 <_dtoa_r+0x8ac>
 8027b62:	9b03      	ldr	r3, [sp, #12]
 8027b64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8027b68:	0d1b      	lsrs	r3, r3, #20
 8027b6a:	051b      	lsls	r3, r3, #20
 8027b6c:	b12b      	cbz	r3, 8027b7a <_dtoa_r+0x7b2>
 8027b6e:	9b08      	ldr	r3, [sp, #32]
 8027b70:	3301      	adds	r3, #1
 8027b72:	9308      	str	r3, [sp, #32]
 8027b74:	f108 0801 	add.w	r8, r8, #1
 8027b78:	2301      	movs	r3, #1
 8027b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8027b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027b7e:	2b00      	cmp	r3, #0
 8027b80:	f000 81ad 	beq.w	8027ede <_dtoa_r+0xb16>
 8027b84:	6923      	ldr	r3, [r4, #16]
 8027b86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8027b8a:	6918      	ldr	r0, [r3, #16]
 8027b8c:	f004 ff0a 	bl	802c9a4 <__hi0bits>
 8027b90:	f1c0 0020 	rsb	r0, r0, #32
 8027b94:	9b08      	ldr	r3, [sp, #32]
 8027b96:	4418      	add	r0, r3
 8027b98:	f010 001f 	ands.w	r0, r0, #31
 8027b9c:	d077      	beq.n	8027c8e <_dtoa_r+0x8c6>
 8027b9e:	f1c0 0320 	rsb	r3, r0, #32
 8027ba2:	2b04      	cmp	r3, #4
 8027ba4:	dd6b      	ble.n	8027c7e <_dtoa_r+0x8b6>
 8027ba6:	9b08      	ldr	r3, [sp, #32]
 8027ba8:	f1c0 001c 	rsb	r0, r0, #28
 8027bac:	4403      	add	r3, r0
 8027bae:	4480      	add	r8, r0
 8027bb0:	4406      	add	r6, r0
 8027bb2:	9308      	str	r3, [sp, #32]
 8027bb4:	f1b8 0f00 	cmp.w	r8, #0
 8027bb8:	dd05      	ble.n	8027bc6 <_dtoa_r+0x7fe>
 8027bba:	4649      	mov	r1, r9
 8027bbc:	4642      	mov	r2, r8
 8027bbe:	4658      	mov	r0, fp
 8027bc0:	f005 f83c 	bl	802cc3c <__lshift>
 8027bc4:	4681      	mov	r9, r0
 8027bc6:	9b08      	ldr	r3, [sp, #32]
 8027bc8:	2b00      	cmp	r3, #0
 8027bca:	dd05      	ble.n	8027bd8 <_dtoa_r+0x810>
 8027bcc:	4621      	mov	r1, r4
 8027bce:	461a      	mov	r2, r3
 8027bd0:	4658      	mov	r0, fp
 8027bd2:	f005 f833 	bl	802cc3c <__lshift>
 8027bd6:	4604      	mov	r4, r0
 8027bd8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027bda:	2b00      	cmp	r3, #0
 8027bdc:	d059      	beq.n	8027c92 <_dtoa_r+0x8ca>
 8027bde:	4621      	mov	r1, r4
 8027be0:	4648      	mov	r0, r9
 8027be2:	f005 f897 	bl	802cd14 <__mcmp>
 8027be6:	2800      	cmp	r0, #0
 8027be8:	da53      	bge.n	8027c92 <_dtoa_r+0x8ca>
 8027bea:	1e7b      	subs	r3, r7, #1
 8027bec:	9304      	str	r3, [sp, #16]
 8027bee:	4649      	mov	r1, r9
 8027bf0:	2300      	movs	r3, #0
 8027bf2:	220a      	movs	r2, #10
 8027bf4:	4658      	mov	r0, fp
 8027bf6:	f004 fe45 	bl	802c884 <__multadd>
 8027bfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027bfc:	4681      	mov	r9, r0
 8027bfe:	2b00      	cmp	r3, #0
 8027c00:	f000 816f 	beq.w	8027ee2 <_dtoa_r+0xb1a>
 8027c04:	2300      	movs	r3, #0
 8027c06:	4629      	mov	r1, r5
 8027c08:	220a      	movs	r2, #10
 8027c0a:	4658      	mov	r0, fp
 8027c0c:	f004 fe3a 	bl	802c884 <__multadd>
 8027c10:	9b00      	ldr	r3, [sp, #0]
 8027c12:	2b00      	cmp	r3, #0
 8027c14:	4605      	mov	r5, r0
 8027c16:	dc67      	bgt.n	8027ce8 <_dtoa_r+0x920>
 8027c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c1a:	2b02      	cmp	r3, #2
 8027c1c:	dc41      	bgt.n	8027ca2 <_dtoa_r+0x8da>
 8027c1e:	e063      	b.n	8027ce8 <_dtoa_r+0x920>
 8027c20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027c22:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8027c26:	e746      	b.n	8027ab6 <_dtoa_r+0x6ee>
 8027c28:	9b07      	ldr	r3, [sp, #28]
 8027c2a:	1e5c      	subs	r4, r3, #1
 8027c2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027c2e:	42a3      	cmp	r3, r4
 8027c30:	bfbf      	itttt	lt
 8027c32:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8027c34:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8027c36:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8027c38:	1ae3      	sublt	r3, r4, r3
 8027c3a:	bfb4      	ite	lt
 8027c3c:	18d2      	addlt	r2, r2, r3
 8027c3e:	1b1c      	subge	r4, r3, r4
 8027c40:	9b07      	ldr	r3, [sp, #28]
 8027c42:	bfbc      	itt	lt
 8027c44:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8027c46:	2400      	movlt	r4, #0
 8027c48:	2b00      	cmp	r3, #0
 8027c4a:	bfb5      	itete	lt
 8027c4c:	eba8 0603 	sublt.w	r6, r8, r3
 8027c50:	9b07      	ldrge	r3, [sp, #28]
 8027c52:	2300      	movlt	r3, #0
 8027c54:	4646      	movge	r6, r8
 8027c56:	e730      	b.n	8027aba <_dtoa_r+0x6f2>
 8027c58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027c5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027c5c:	4646      	mov	r6, r8
 8027c5e:	e735      	b.n	8027acc <_dtoa_r+0x704>
 8027c60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027c62:	e75c      	b.n	8027b1e <_dtoa_r+0x756>
 8027c64:	2300      	movs	r3, #0
 8027c66:	e788      	b.n	8027b7a <_dtoa_r+0x7b2>
 8027c68:	3fe00000 	.word	0x3fe00000
 8027c6c:	40240000 	.word	0x40240000
 8027c70:	40140000 	.word	0x40140000
 8027c74:	9b02      	ldr	r3, [sp, #8]
 8027c76:	e780      	b.n	8027b7a <_dtoa_r+0x7b2>
 8027c78:	2300      	movs	r3, #0
 8027c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8027c7c:	e782      	b.n	8027b84 <_dtoa_r+0x7bc>
 8027c7e:	d099      	beq.n	8027bb4 <_dtoa_r+0x7ec>
 8027c80:	9a08      	ldr	r2, [sp, #32]
 8027c82:	331c      	adds	r3, #28
 8027c84:	441a      	add	r2, r3
 8027c86:	4498      	add	r8, r3
 8027c88:	441e      	add	r6, r3
 8027c8a:	9208      	str	r2, [sp, #32]
 8027c8c:	e792      	b.n	8027bb4 <_dtoa_r+0x7ec>
 8027c8e:	4603      	mov	r3, r0
 8027c90:	e7f6      	b.n	8027c80 <_dtoa_r+0x8b8>
 8027c92:	9b07      	ldr	r3, [sp, #28]
 8027c94:	9704      	str	r7, [sp, #16]
 8027c96:	2b00      	cmp	r3, #0
 8027c98:	dc20      	bgt.n	8027cdc <_dtoa_r+0x914>
 8027c9a:	9300      	str	r3, [sp, #0]
 8027c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c9e:	2b02      	cmp	r3, #2
 8027ca0:	dd1e      	ble.n	8027ce0 <_dtoa_r+0x918>
 8027ca2:	9b00      	ldr	r3, [sp, #0]
 8027ca4:	2b00      	cmp	r3, #0
 8027ca6:	f47f aec0 	bne.w	8027a2a <_dtoa_r+0x662>
 8027caa:	4621      	mov	r1, r4
 8027cac:	2205      	movs	r2, #5
 8027cae:	4658      	mov	r0, fp
 8027cb0:	f004 fde8 	bl	802c884 <__multadd>
 8027cb4:	4601      	mov	r1, r0
 8027cb6:	4604      	mov	r4, r0
 8027cb8:	4648      	mov	r0, r9
 8027cba:	f005 f82b 	bl	802cd14 <__mcmp>
 8027cbe:	2800      	cmp	r0, #0
 8027cc0:	f77f aeb3 	ble.w	8027a2a <_dtoa_r+0x662>
 8027cc4:	4656      	mov	r6, sl
 8027cc6:	2331      	movs	r3, #49	@ 0x31
 8027cc8:	f806 3b01 	strb.w	r3, [r6], #1
 8027ccc:	9b04      	ldr	r3, [sp, #16]
 8027cce:	3301      	adds	r3, #1
 8027cd0:	9304      	str	r3, [sp, #16]
 8027cd2:	e6ae      	b.n	8027a32 <_dtoa_r+0x66a>
 8027cd4:	9c07      	ldr	r4, [sp, #28]
 8027cd6:	9704      	str	r7, [sp, #16]
 8027cd8:	4625      	mov	r5, r4
 8027cda:	e7f3      	b.n	8027cc4 <_dtoa_r+0x8fc>
 8027cdc:	9b07      	ldr	r3, [sp, #28]
 8027cde:	9300      	str	r3, [sp, #0]
 8027ce0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027ce2:	2b00      	cmp	r3, #0
 8027ce4:	f000 8101 	beq.w	8027eea <_dtoa_r+0xb22>
 8027ce8:	2e00      	cmp	r6, #0
 8027cea:	dd05      	ble.n	8027cf8 <_dtoa_r+0x930>
 8027cec:	4629      	mov	r1, r5
 8027cee:	4632      	mov	r2, r6
 8027cf0:	4658      	mov	r0, fp
 8027cf2:	f004 ffa3 	bl	802cc3c <__lshift>
 8027cf6:	4605      	mov	r5, r0
 8027cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027cfa:	2b00      	cmp	r3, #0
 8027cfc:	d059      	beq.n	8027db2 <_dtoa_r+0x9ea>
 8027cfe:	6869      	ldr	r1, [r5, #4]
 8027d00:	4658      	mov	r0, fp
 8027d02:	f004 fd91 	bl	802c828 <_Balloc>
 8027d06:	4606      	mov	r6, r0
 8027d08:	b920      	cbnz	r0, 8027d14 <_dtoa_r+0x94c>
 8027d0a:	4b83      	ldr	r3, [pc, #524]	@ (8027f18 <_dtoa_r+0xb50>)
 8027d0c:	4602      	mov	r2, r0
 8027d0e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8027d12:	e480      	b.n	8027616 <_dtoa_r+0x24e>
 8027d14:	692a      	ldr	r2, [r5, #16]
 8027d16:	3202      	adds	r2, #2
 8027d18:	0092      	lsls	r2, r2, #2
 8027d1a:	f105 010c 	add.w	r1, r5, #12
 8027d1e:	300c      	adds	r0, #12
 8027d20:	f7ff fa52 	bl	80271c8 <memcpy>
 8027d24:	2201      	movs	r2, #1
 8027d26:	4631      	mov	r1, r6
 8027d28:	4658      	mov	r0, fp
 8027d2a:	f004 ff87 	bl	802cc3c <__lshift>
 8027d2e:	f10a 0301 	add.w	r3, sl, #1
 8027d32:	9307      	str	r3, [sp, #28]
 8027d34:	9b00      	ldr	r3, [sp, #0]
 8027d36:	4453      	add	r3, sl
 8027d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027d3a:	9b02      	ldr	r3, [sp, #8]
 8027d3c:	f003 0301 	and.w	r3, r3, #1
 8027d40:	462f      	mov	r7, r5
 8027d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8027d44:	4605      	mov	r5, r0
 8027d46:	9b07      	ldr	r3, [sp, #28]
 8027d48:	4621      	mov	r1, r4
 8027d4a:	3b01      	subs	r3, #1
 8027d4c:	4648      	mov	r0, r9
 8027d4e:	9300      	str	r3, [sp, #0]
 8027d50:	f7ff faaf 	bl	80272b2 <quorem>
 8027d54:	4639      	mov	r1, r7
 8027d56:	9002      	str	r0, [sp, #8]
 8027d58:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8027d5c:	4648      	mov	r0, r9
 8027d5e:	f004 ffd9 	bl	802cd14 <__mcmp>
 8027d62:	462a      	mov	r2, r5
 8027d64:	9008      	str	r0, [sp, #32]
 8027d66:	4621      	mov	r1, r4
 8027d68:	4658      	mov	r0, fp
 8027d6a:	f004 ffef 	bl	802cd4c <__mdiff>
 8027d6e:	68c2      	ldr	r2, [r0, #12]
 8027d70:	4606      	mov	r6, r0
 8027d72:	bb02      	cbnz	r2, 8027db6 <_dtoa_r+0x9ee>
 8027d74:	4601      	mov	r1, r0
 8027d76:	4648      	mov	r0, r9
 8027d78:	f004 ffcc 	bl	802cd14 <__mcmp>
 8027d7c:	4602      	mov	r2, r0
 8027d7e:	4631      	mov	r1, r6
 8027d80:	4658      	mov	r0, fp
 8027d82:	920e      	str	r2, [sp, #56]	@ 0x38
 8027d84:	f004 fd75 	bl	802c872 <_Bfree>
 8027d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027d8c:	9e07      	ldr	r6, [sp, #28]
 8027d8e:	ea43 0102 	orr.w	r1, r3, r2
 8027d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027d94:	4319      	orrs	r1, r3
 8027d96:	d110      	bne.n	8027dba <_dtoa_r+0x9f2>
 8027d98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027d9c:	d029      	beq.n	8027df2 <_dtoa_r+0xa2a>
 8027d9e:	9b08      	ldr	r3, [sp, #32]
 8027da0:	2b00      	cmp	r3, #0
 8027da2:	dd02      	ble.n	8027daa <_dtoa_r+0x9e2>
 8027da4:	9b02      	ldr	r3, [sp, #8]
 8027da6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8027daa:	9b00      	ldr	r3, [sp, #0]
 8027dac:	f883 8000 	strb.w	r8, [r3]
 8027db0:	e640      	b.n	8027a34 <_dtoa_r+0x66c>
 8027db2:	4628      	mov	r0, r5
 8027db4:	e7bb      	b.n	8027d2e <_dtoa_r+0x966>
 8027db6:	2201      	movs	r2, #1
 8027db8:	e7e1      	b.n	8027d7e <_dtoa_r+0x9b6>
 8027dba:	9b08      	ldr	r3, [sp, #32]
 8027dbc:	2b00      	cmp	r3, #0
 8027dbe:	db04      	blt.n	8027dca <_dtoa_r+0xa02>
 8027dc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027dc2:	430b      	orrs	r3, r1
 8027dc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8027dc6:	430b      	orrs	r3, r1
 8027dc8:	d120      	bne.n	8027e0c <_dtoa_r+0xa44>
 8027dca:	2a00      	cmp	r2, #0
 8027dcc:	dded      	ble.n	8027daa <_dtoa_r+0x9e2>
 8027dce:	4649      	mov	r1, r9
 8027dd0:	2201      	movs	r2, #1
 8027dd2:	4658      	mov	r0, fp
 8027dd4:	f004 ff32 	bl	802cc3c <__lshift>
 8027dd8:	4621      	mov	r1, r4
 8027dda:	4681      	mov	r9, r0
 8027ddc:	f004 ff9a 	bl	802cd14 <__mcmp>
 8027de0:	2800      	cmp	r0, #0
 8027de2:	dc03      	bgt.n	8027dec <_dtoa_r+0xa24>
 8027de4:	d1e1      	bne.n	8027daa <_dtoa_r+0x9e2>
 8027de6:	f018 0f01 	tst.w	r8, #1
 8027dea:	d0de      	beq.n	8027daa <_dtoa_r+0x9e2>
 8027dec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027df0:	d1d8      	bne.n	8027da4 <_dtoa_r+0x9dc>
 8027df2:	9a00      	ldr	r2, [sp, #0]
 8027df4:	2339      	movs	r3, #57	@ 0x39
 8027df6:	7013      	strb	r3, [r2, #0]
 8027df8:	4633      	mov	r3, r6
 8027dfa:	461e      	mov	r6, r3
 8027dfc:	3b01      	subs	r3, #1
 8027dfe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8027e02:	2a39      	cmp	r2, #57	@ 0x39
 8027e04:	d052      	beq.n	8027eac <_dtoa_r+0xae4>
 8027e06:	3201      	adds	r2, #1
 8027e08:	701a      	strb	r2, [r3, #0]
 8027e0a:	e613      	b.n	8027a34 <_dtoa_r+0x66c>
 8027e0c:	2a00      	cmp	r2, #0
 8027e0e:	dd07      	ble.n	8027e20 <_dtoa_r+0xa58>
 8027e10:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027e14:	d0ed      	beq.n	8027df2 <_dtoa_r+0xa2a>
 8027e16:	9a00      	ldr	r2, [sp, #0]
 8027e18:	f108 0301 	add.w	r3, r8, #1
 8027e1c:	7013      	strb	r3, [r2, #0]
 8027e1e:	e609      	b.n	8027a34 <_dtoa_r+0x66c>
 8027e20:	9b07      	ldr	r3, [sp, #28]
 8027e22:	9a07      	ldr	r2, [sp, #28]
 8027e24:	f803 8c01 	strb.w	r8, [r3, #-1]
 8027e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027e2a:	4293      	cmp	r3, r2
 8027e2c:	d028      	beq.n	8027e80 <_dtoa_r+0xab8>
 8027e2e:	4649      	mov	r1, r9
 8027e30:	2300      	movs	r3, #0
 8027e32:	220a      	movs	r2, #10
 8027e34:	4658      	mov	r0, fp
 8027e36:	f004 fd25 	bl	802c884 <__multadd>
 8027e3a:	42af      	cmp	r7, r5
 8027e3c:	4681      	mov	r9, r0
 8027e3e:	f04f 0300 	mov.w	r3, #0
 8027e42:	f04f 020a 	mov.w	r2, #10
 8027e46:	4639      	mov	r1, r7
 8027e48:	4658      	mov	r0, fp
 8027e4a:	d107      	bne.n	8027e5c <_dtoa_r+0xa94>
 8027e4c:	f004 fd1a 	bl	802c884 <__multadd>
 8027e50:	4607      	mov	r7, r0
 8027e52:	4605      	mov	r5, r0
 8027e54:	9b07      	ldr	r3, [sp, #28]
 8027e56:	3301      	adds	r3, #1
 8027e58:	9307      	str	r3, [sp, #28]
 8027e5a:	e774      	b.n	8027d46 <_dtoa_r+0x97e>
 8027e5c:	f004 fd12 	bl	802c884 <__multadd>
 8027e60:	4629      	mov	r1, r5
 8027e62:	4607      	mov	r7, r0
 8027e64:	2300      	movs	r3, #0
 8027e66:	220a      	movs	r2, #10
 8027e68:	4658      	mov	r0, fp
 8027e6a:	f004 fd0b 	bl	802c884 <__multadd>
 8027e6e:	4605      	mov	r5, r0
 8027e70:	e7f0      	b.n	8027e54 <_dtoa_r+0xa8c>
 8027e72:	9b00      	ldr	r3, [sp, #0]
 8027e74:	2b00      	cmp	r3, #0
 8027e76:	bfcc      	ite	gt
 8027e78:	461e      	movgt	r6, r3
 8027e7a:	2601      	movle	r6, #1
 8027e7c:	4456      	add	r6, sl
 8027e7e:	2700      	movs	r7, #0
 8027e80:	4649      	mov	r1, r9
 8027e82:	2201      	movs	r2, #1
 8027e84:	4658      	mov	r0, fp
 8027e86:	f004 fed9 	bl	802cc3c <__lshift>
 8027e8a:	4621      	mov	r1, r4
 8027e8c:	4681      	mov	r9, r0
 8027e8e:	f004 ff41 	bl	802cd14 <__mcmp>
 8027e92:	2800      	cmp	r0, #0
 8027e94:	dcb0      	bgt.n	8027df8 <_dtoa_r+0xa30>
 8027e96:	d102      	bne.n	8027e9e <_dtoa_r+0xad6>
 8027e98:	f018 0f01 	tst.w	r8, #1
 8027e9c:	d1ac      	bne.n	8027df8 <_dtoa_r+0xa30>
 8027e9e:	4633      	mov	r3, r6
 8027ea0:	461e      	mov	r6, r3
 8027ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027ea6:	2a30      	cmp	r2, #48	@ 0x30
 8027ea8:	d0fa      	beq.n	8027ea0 <_dtoa_r+0xad8>
 8027eaa:	e5c3      	b.n	8027a34 <_dtoa_r+0x66c>
 8027eac:	459a      	cmp	sl, r3
 8027eae:	d1a4      	bne.n	8027dfa <_dtoa_r+0xa32>
 8027eb0:	9b04      	ldr	r3, [sp, #16]
 8027eb2:	3301      	adds	r3, #1
 8027eb4:	9304      	str	r3, [sp, #16]
 8027eb6:	2331      	movs	r3, #49	@ 0x31
 8027eb8:	f88a 3000 	strb.w	r3, [sl]
 8027ebc:	e5ba      	b.n	8027a34 <_dtoa_r+0x66c>
 8027ebe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027ec0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8027f1c <_dtoa_r+0xb54>
 8027ec4:	2b00      	cmp	r3, #0
 8027ec6:	f43f aab6 	beq.w	8027436 <_dtoa_r+0x6e>
 8027eca:	f10a 0308 	add.w	r3, sl, #8
 8027ece:	f7ff bab0 	b.w	8027432 <_dtoa_r+0x6a>
 8027ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027ed4:	2b01      	cmp	r3, #1
 8027ed6:	f77f ae3a 	ble.w	8027b4e <_dtoa_r+0x786>
 8027eda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027edc:	930a      	str	r3, [sp, #40]	@ 0x28
 8027ede:	2001      	movs	r0, #1
 8027ee0:	e658      	b.n	8027b94 <_dtoa_r+0x7cc>
 8027ee2:	9b00      	ldr	r3, [sp, #0]
 8027ee4:	2b00      	cmp	r3, #0
 8027ee6:	f77f aed9 	ble.w	8027c9c <_dtoa_r+0x8d4>
 8027eea:	4656      	mov	r6, sl
 8027eec:	4621      	mov	r1, r4
 8027eee:	4648      	mov	r0, r9
 8027ef0:	f7ff f9df 	bl	80272b2 <quorem>
 8027ef4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8027ef8:	f806 8b01 	strb.w	r8, [r6], #1
 8027efc:	9b00      	ldr	r3, [sp, #0]
 8027efe:	eba6 020a 	sub.w	r2, r6, sl
 8027f02:	4293      	cmp	r3, r2
 8027f04:	ddb5      	ble.n	8027e72 <_dtoa_r+0xaaa>
 8027f06:	4649      	mov	r1, r9
 8027f08:	2300      	movs	r3, #0
 8027f0a:	220a      	movs	r2, #10
 8027f0c:	4658      	mov	r0, fp
 8027f0e:	f004 fcb9 	bl	802c884 <__multadd>
 8027f12:	4681      	mov	r9, r0
 8027f14:	e7ea      	b.n	8027eec <_dtoa_r+0xb24>
 8027f16:	bf00      	nop
 8027f18:	08034bae 	.word	0x08034bae
 8027f1c:	08034ba1 	.word	0x08034ba1

08027f20 <_malloc_trim_r>:
 8027f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027f24:	4606      	mov	r6, r0
 8027f26:	2008      	movs	r0, #8
 8027f28:	4689      	mov	r9, r1
 8027f2a:	f006 fb53 	bl	802e5d4 <sysconf>
 8027f2e:	4f24      	ldr	r7, [pc, #144]	@ (8027fc0 <_malloc_trim_r+0xa0>)
 8027f30:	4680      	mov	r8, r0
 8027f32:	4630      	mov	r0, r6
 8027f34:	f004 fc6c 	bl	802c810 <__malloc_lock>
 8027f38:	68bb      	ldr	r3, [r7, #8]
 8027f3a:	685d      	ldr	r5, [r3, #4]
 8027f3c:	f025 0503 	bic.w	r5, r5, #3
 8027f40:	f1a5 0411 	sub.w	r4, r5, #17
 8027f44:	eba4 0409 	sub.w	r4, r4, r9
 8027f48:	4444      	add	r4, r8
 8027f4a:	fbb4 f4f8 	udiv	r4, r4, r8
 8027f4e:	3c01      	subs	r4, #1
 8027f50:	fb08 f404 	mul.w	r4, r8, r4
 8027f54:	45a0      	cmp	r8, r4
 8027f56:	dd05      	ble.n	8027f64 <_malloc_trim_r+0x44>
 8027f58:	4630      	mov	r0, r6
 8027f5a:	f004 fc5f 	bl	802c81c <__malloc_unlock>
 8027f5e:	2000      	movs	r0, #0
 8027f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027f64:	2100      	movs	r1, #0
 8027f66:	4630      	mov	r0, r6
 8027f68:	f006 fb24 	bl	802e5b4 <_sbrk_r>
 8027f6c:	68bb      	ldr	r3, [r7, #8]
 8027f6e:	442b      	add	r3, r5
 8027f70:	4298      	cmp	r0, r3
 8027f72:	d1f1      	bne.n	8027f58 <_malloc_trim_r+0x38>
 8027f74:	4261      	negs	r1, r4
 8027f76:	4630      	mov	r0, r6
 8027f78:	f006 fb1c 	bl	802e5b4 <_sbrk_r>
 8027f7c:	3001      	adds	r0, #1
 8027f7e:	d110      	bne.n	8027fa2 <_malloc_trim_r+0x82>
 8027f80:	2100      	movs	r1, #0
 8027f82:	4630      	mov	r0, r6
 8027f84:	f006 fb16 	bl	802e5b4 <_sbrk_r>
 8027f88:	68ba      	ldr	r2, [r7, #8]
 8027f8a:	1a83      	subs	r3, r0, r2
 8027f8c:	2b0f      	cmp	r3, #15
 8027f8e:	dde3      	ble.n	8027f58 <_malloc_trim_r+0x38>
 8027f90:	490c      	ldr	r1, [pc, #48]	@ (8027fc4 <_malloc_trim_r+0xa4>)
 8027f92:	6809      	ldr	r1, [r1, #0]
 8027f94:	1a40      	subs	r0, r0, r1
 8027f96:	490c      	ldr	r1, [pc, #48]	@ (8027fc8 <_malloc_trim_r+0xa8>)
 8027f98:	f043 0301 	orr.w	r3, r3, #1
 8027f9c:	6008      	str	r0, [r1, #0]
 8027f9e:	6053      	str	r3, [r2, #4]
 8027fa0:	e7da      	b.n	8027f58 <_malloc_trim_r+0x38>
 8027fa2:	68bb      	ldr	r3, [r7, #8]
 8027fa4:	4a08      	ldr	r2, [pc, #32]	@ (8027fc8 <_malloc_trim_r+0xa8>)
 8027fa6:	1b2d      	subs	r5, r5, r4
 8027fa8:	f045 0501 	orr.w	r5, r5, #1
 8027fac:	605d      	str	r5, [r3, #4]
 8027fae:	6813      	ldr	r3, [r2, #0]
 8027fb0:	4630      	mov	r0, r6
 8027fb2:	1b1b      	subs	r3, r3, r4
 8027fb4:	6013      	str	r3, [r2, #0]
 8027fb6:	f004 fc31 	bl	802c81c <__malloc_unlock>
 8027fba:	2001      	movs	r0, #1
 8027fbc:	e7d0      	b.n	8027f60 <_malloc_trim_r+0x40>
 8027fbe:	bf00      	nop
 8027fc0:	20000564 	.word	0x20000564
 8027fc4:	2000055c 	.word	0x2000055c
 8027fc8:	200182e8 	.word	0x200182e8

08027fcc <_free_r>:
 8027fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027fce:	4604      	mov	r4, r0
 8027fd0:	460f      	mov	r7, r1
 8027fd2:	2900      	cmp	r1, #0
 8027fd4:	f000 80b1 	beq.w	802813a <_free_r+0x16e>
 8027fd8:	f004 fc1a 	bl	802c810 <__malloc_lock>
 8027fdc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8027fe0:	4d56      	ldr	r5, [pc, #344]	@ (802813c <_free_r+0x170>)
 8027fe2:	f022 0001 	bic.w	r0, r2, #1
 8027fe6:	f1a7 0308 	sub.w	r3, r7, #8
 8027fea:	eb03 0c00 	add.w	ip, r3, r0
 8027fee:	68a9      	ldr	r1, [r5, #8]
 8027ff0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8027ff4:	4561      	cmp	r1, ip
 8027ff6:	f026 0603 	bic.w	r6, r6, #3
 8027ffa:	f002 0201 	and.w	r2, r2, #1
 8027ffe:	d11b      	bne.n	8028038 <_free_r+0x6c>
 8028000:	4406      	add	r6, r0
 8028002:	b93a      	cbnz	r2, 8028014 <_free_r+0x48>
 8028004:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8028008:	1a9b      	subs	r3, r3, r2
 802800a:	4416      	add	r6, r2
 802800c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8028010:	60ca      	str	r2, [r1, #12]
 8028012:	6091      	str	r1, [r2, #8]
 8028014:	f046 0201 	orr.w	r2, r6, #1
 8028018:	605a      	str	r2, [r3, #4]
 802801a:	60ab      	str	r3, [r5, #8]
 802801c:	4b48      	ldr	r3, [pc, #288]	@ (8028140 <_free_r+0x174>)
 802801e:	681b      	ldr	r3, [r3, #0]
 8028020:	42b3      	cmp	r3, r6
 8028022:	d804      	bhi.n	802802e <_free_r+0x62>
 8028024:	4b47      	ldr	r3, [pc, #284]	@ (8028144 <_free_r+0x178>)
 8028026:	4620      	mov	r0, r4
 8028028:	6819      	ldr	r1, [r3, #0]
 802802a:	f7ff ff79 	bl	8027f20 <_malloc_trim_r>
 802802e:	4620      	mov	r0, r4
 8028030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8028034:	f004 bbf2 	b.w	802c81c <__malloc_unlock>
 8028038:	f8cc 6004 	str.w	r6, [ip, #4]
 802803c:	2a00      	cmp	r2, #0
 802803e:	d138      	bne.n	80280b2 <_free_r+0xe6>
 8028040:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8028044:	1a5b      	subs	r3, r3, r1
 8028046:	4408      	add	r0, r1
 8028048:	6899      	ldr	r1, [r3, #8]
 802804a:	f105 0708 	add.w	r7, r5, #8
 802804e:	42b9      	cmp	r1, r7
 8028050:	d031      	beq.n	80280b6 <_free_r+0xea>
 8028052:	68df      	ldr	r7, [r3, #12]
 8028054:	60cf      	str	r7, [r1, #12]
 8028056:	60b9      	str	r1, [r7, #8]
 8028058:	eb0c 0106 	add.w	r1, ip, r6
 802805c:	6849      	ldr	r1, [r1, #4]
 802805e:	07c9      	lsls	r1, r1, #31
 8028060:	d40b      	bmi.n	802807a <_free_r+0xae>
 8028062:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8028066:	4430      	add	r0, r6
 8028068:	bb3a      	cbnz	r2, 80280ba <_free_r+0xee>
 802806a:	4e37      	ldr	r6, [pc, #220]	@ (8028148 <_free_r+0x17c>)
 802806c:	42b1      	cmp	r1, r6
 802806e:	d124      	bne.n	80280ba <_free_r+0xee>
 8028070:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8028074:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8028078:	2201      	movs	r2, #1
 802807a:	f040 0101 	orr.w	r1, r0, #1
 802807e:	6059      	str	r1, [r3, #4]
 8028080:	5018      	str	r0, [r3, r0]
 8028082:	2a00      	cmp	r2, #0
 8028084:	d1d3      	bne.n	802802e <_free_r+0x62>
 8028086:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 802808a:	d21b      	bcs.n	80280c4 <_free_r+0xf8>
 802808c:	08c2      	lsrs	r2, r0, #3
 802808e:	2101      	movs	r1, #1
 8028090:	0940      	lsrs	r0, r0, #5
 8028092:	4081      	lsls	r1, r0
 8028094:	6868      	ldr	r0, [r5, #4]
 8028096:	3201      	adds	r2, #1
 8028098:	4301      	orrs	r1, r0
 802809a:	6069      	str	r1, [r5, #4]
 802809c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80280a0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80280a4:	3908      	subs	r1, #8
 80280a6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80280aa:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80280ae:	60c3      	str	r3, [r0, #12]
 80280b0:	e7bd      	b.n	802802e <_free_r+0x62>
 80280b2:	2200      	movs	r2, #0
 80280b4:	e7d0      	b.n	8028058 <_free_r+0x8c>
 80280b6:	2201      	movs	r2, #1
 80280b8:	e7ce      	b.n	8028058 <_free_r+0x8c>
 80280ba:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80280be:	60ce      	str	r6, [r1, #12]
 80280c0:	60b1      	str	r1, [r6, #8]
 80280c2:	e7da      	b.n	802807a <_free_r+0xae>
 80280c4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 80280c8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80280cc:	d214      	bcs.n	80280f8 <_free_r+0x12c>
 80280ce:	0982      	lsrs	r2, r0, #6
 80280d0:	3238      	adds	r2, #56	@ 0x38
 80280d2:	1c51      	adds	r1, r2, #1
 80280d4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80280d8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80280dc:	428e      	cmp	r6, r1
 80280de:	d125      	bne.n	802812c <_free_r+0x160>
 80280e0:	2001      	movs	r0, #1
 80280e2:	1092      	asrs	r2, r2, #2
 80280e4:	fa00 f202 	lsl.w	r2, r0, r2
 80280e8:	6868      	ldr	r0, [r5, #4]
 80280ea:	4302      	orrs	r2, r0
 80280ec:	606a      	str	r2, [r5, #4]
 80280ee:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80280f2:	60b3      	str	r3, [r6, #8]
 80280f4:	60cb      	str	r3, [r1, #12]
 80280f6:	e79a      	b.n	802802e <_free_r+0x62>
 80280f8:	2a14      	cmp	r2, #20
 80280fa:	d801      	bhi.n	8028100 <_free_r+0x134>
 80280fc:	325b      	adds	r2, #91	@ 0x5b
 80280fe:	e7e8      	b.n	80280d2 <_free_r+0x106>
 8028100:	2a54      	cmp	r2, #84	@ 0x54
 8028102:	d802      	bhi.n	802810a <_free_r+0x13e>
 8028104:	0b02      	lsrs	r2, r0, #12
 8028106:	326e      	adds	r2, #110	@ 0x6e
 8028108:	e7e3      	b.n	80280d2 <_free_r+0x106>
 802810a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 802810e:	d802      	bhi.n	8028116 <_free_r+0x14a>
 8028110:	0bc2      	lsrs	r2, r0, #15
 8028112:	3277      	adds	r2, #119	@ 0x77
 8028114:	e7dd      	b.n	80280d2 <_free_r+0x106>
 8028116:	f240 5154 	movw	r1, #1364	@ 0x554
 802811a:	428a      	cmp	r2, r1
 802811c:	bf9a      	itte	ls
 802811e:	0c82      	lsrls	r2, r0, #18
 8028120:	327c      	addls	r2, #124	@ 0x7c
 8028122:	227e      	movhi	r2, #126	@ 0x7e
 8028124:	e7d5      	b.n	80280d2 <_free_r+0x106>
 8028126:	6889      	ldr	r1, [r1, #8]
 8028128:	428e      	cmp	r6, r1
 802812a:	d004      	beq.n	8028136 <_free_r+0x16a>
 802812c:	684a      	ldr	r2, [r1, #4]
 802812e:	f022 0203 	bic.w	r2, r2, #3
 8028132:	4282      	cmp	r2, r0
 8028134:	d8f7      	bhi.n	8028126 <_free_r+0x15a>
 8028136:	68ce      	ldr	r6, [r1, #12]
 8028138:	e7d9      	b.n	80280ee <_free_r+0x122>
 802813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802813c:	20000564 	.word	0x20000564
 8028140:	20000560 	.word	0x20000560
 8028144:	20018318 	.word	0x20018318
 8028148:	2000056c 	.word	0x2000056c

0802814c <_findenv_r>:
 802814c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028150:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80281c0 <_findenv_r+0x74>
 8028154:	4606      	mov	r6, r0
 8028156:	4689      	mov	r9, r1
 8028158:	4617      	mov	r7, r2
 802815a:	f006 fc31 	bl	802e9c0 <__env_lock>
 802815e:	f8da 4000 	ldr.w	r4, [sl]
 8028162:	b134      	cbz	r4, 8028172 <_findenv_r+0x26>
 8028164:	464b      	mov	r3, r9
 8028166:	4698      	mov	r8, r3
 8028168:	f813 2b01 	ldrb.w	r2, [r3], #1
 802816c:	b13a      	cbz	r2, 802817e <_findenv_r+0x32>
 802816e:	2a3d      	cmp	r2, #61	@ 0x3d
 8028170:	d1f9      	bne.n	8028166 <_findenv_r+0x1a>
 8028172:	4630      	mov	r0, r6
 8028174:	f006 fc2a 	bl	802e9cc <__env_unlock>
 8028178:	2000      	movs	r0, #0
 802817a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802817e:	eba8 0809 	sub.w	r8, r8, r9
 8028182:	46a3      	mov	fp, r4
 8028184:	f854 0b04 	ldr.w	r0, [r4], #4
 8028188:	2800      	cmp	r0, #0
 802818a:	d0f2      	beq.n	8028172 <_findenv_r+0x26>
 802818c:	4642      	mov	r2, r8
 802818e:	4649      	mov	r1, r9
 8028190:	f7fd fe13 	bl	8025dba <strncmp>
 8028194:	2800      	cmp	r0, #0
 8028196:	d1f4      	bne.n	8028182 <_findenv_r+0x36>
 8028198:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802819c:	eb03 0508 	add.w	r5, r3, r8
 80281a0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80281a4:	2b3d      	cmp	r3, #61	@ 0x3d
 80281a6:	d1ec      	bne.n	8028182 <_findenv_r+0x36>
 80281a8:	f8da 3000 	ldr.w	r3, [sl]
 80281ac:	ebab 0303 	sub.w	r3, fp, r3
 80281b0:	109b      	asrs	r3, r3, #2
 80281b2:	4630      	mov	r0, r6
 80281b4:	603b      	str	r3, [r7, #0]
 80281b6:	f006 fc09 	bl	802e9cc <__env_unlock>
 80281ba:	1c68      	adds	r0, r5, #1
 80281bc:	e7dd      	b.n	802817a <_findenv_r+0x2e>
 80281be:	bf00      	nop
 80281c0:	20000004 	.word	0x20000004

080281c4 <_getenv_r>:
 80281c4:	b507      	push	{r0, r1, r2, lr}
 80281c6:	aa01      	add	r2, sp, #4
 80281c8:	f7ff ffc0 	bl	802814c <_findenv_r>
 80281cc:	b003      	add	sp, #12
 80281ce:	f85d fb04 	ldr.w	pc, [sp], #4

080281d2 <labs>:
 80281d2:	2800      	cmp	r0, #0
 80281d4:	bfb8      	it	lt
 80281d6:	4240      	neglt	r0, r0
 80281d8:	4770      	bx	lr
	...

080281dc <malloc>:
 80281dc:	4b02      	ldr	r3, [pc, #8]	@ (80281e8 <malloc+0xc>)
 80281de:	4601      	mov	r1, r0
 80281e0:	6818      	ldr	r0, [r3, #0]
 80281e2:	f000 b80b 	b.w	80281fc <_malloc_r>
 80281e6:	bf00      	nop
 80281e8:	20000430 	.word	0x20000430

080281ec <free>:
 80281ec:	4b02      	ldr	r3, [pc, #8]	@ (80281f8 <free+0xc>)
 80281ee:	4601      	mov	r1, r0
 80281f0:	6818      	ldr	r0, [r3, #0]
 80281f2:	f7ff beeb 	b.w	8027fcc <_free_r>
 80281f6:	bf00      	nop
 80281f8:	20000430 	.word	0x20000430

080281fc <_malloc_r>:
 80281fc:	f101 030b 	add.w	r3, r1, #11
 8028200:	2b16      	cmp	r3, #22
 8028202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028206:	4605      	mov	r5, r0
 8028208:	d906      	bls.n	8028218 <_malloc_r+0x1c>
 802820a:	f033 0707 	bics.w	r7, r3, #7
 802820e:	d504      	bpl.n	802821a <_malloc_r+0x1e>
 8028210:	230c      	movs	r3, #12
 8028212:	602b      	str	r3, [r5, #0]
 8028214:	2400      	movs	r4, #0
 8028216:	e1a3      	b.n	8028560 <_malloc_r+0x364>
 8028218:	2710      	movs	r7, #16
 802821a:	42b9      	cmp	r1, r7
 802821c:	d8f8      	bhi.n	8028210 <_malloc_r+0x14>
 802821e:	4628      	mov	r0, r5
 8028220:	f004 faf6 	bl	802c810 <__malloc_lock>
 8028224:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8028228:	4eaf      	ldr	r6, [pc, #700]	@ (80284e8 <_malloc_r+0x2ec>)
 802822a:	d237      	bcs.n	802829c <_malloc_r+0xa0>
 802822c:	f107 0208 	add.w	r2, r7, #8
 8028230:	4432      	add	r2, r6
 8028232:	f1a2 0108 	sub.w	r1, r2, #8
 8028236:	6854      	ldr	r4, [r2, #4]
 8028238:	428c      	cmp	r4, r1
 802823a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 802823e:	d102      	bne.n	8028246 <_malloc_r+0x4a>
 8028240:	68d4      	ldr	r4, [r2, #12]
 8028242:	42a2      	cmp	r2, r4
 8028244:	d010      	beq.n	8028268 <_malloc_r+0x6c>
 8028246:	6863      	ldr	r3, [r4, #4]
 8028248:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 802824c:	f023 0303 	bic.w	r3, r3, #3
 8028250:	60ca      	str	r2, [r1, #12]
 8028252:	4423      	add	r3, r4
 8028254:	6091      	str	r1, [r2, #8]
 8028256:	685a      	ldr	r2, [r3, #4]
 8028258:	f042 0201 	orr.w	r2, r2, #1
 802825c:	605a      	str	r2, [r3, #4]
 802825e:	4628      	mov	r0, r5
 8028260:	f004 fadc 	bl	802c81c <__malloc_unlock>
 8028264:	3408      	adds	r4, #8
 8028266:	e17b      	b.n	8028560 <_malloc_r+0x364>
 8028268:	3302      	adds	r3, #2
 802826a:	6934      	ldr	r4, [r6, #16]
 802826c:	499f      	ldr	r1, [pc, #636]	@ (80284ec <_malloc_r+0x2f0>)
 802826e:	428c      	cmp	r4, r1
 8028270:	d077      	beq.n	8028362 <_malloc_r+0x166>
 8028272:	6862      	ldr	r2, [r4, #4]
 8028274:	f022 0c03 	bic.w	ip, r2, #3
 8028278:	ebac 0007 	sub.w	r0, ip, r7
 802827c:	280f      	cmp	r0, #15
 802827e:	dd48      	ble.n	8028312 <_malloc_r+0x116>
 8028280:	19e2      	adds	r2, r4, r7
 8028282:	f040 0301 	orr.w	r3, r0, #1
 8028286:	f047 0701 	orr.w	r7, r7, #1
 802828a:	6067      	str	r7, [r4, #4]
 802828c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8028290:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8028294:	6053      	str	r3, [r2, #4]
 8028296:	f844 000c 	str.w	r0, [r4, ip]
 802829a:	e7e0      	b.n	802825e <_malloc_r+0x62>
 802829c:	0a7b      	lsrs	r3, r7, #9
 802829e:	d02a      	beq.n	80282f6 <_malloc_r+0xfa>
 80282a0:	2b04      	cmp	r3, #4
 80282a2:	d812      	bhi.n	80282ca <_malloc_r+0xce>
 80282a4:	09bb      	lsrs	r3, r7, #6
 80282a6:	3338      	adds	r3, #56	@ 0x38
 80282a8:	1c5a      	adds	r2, r3, #1
 80282aa:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80282ae:	f1a2 0c08 	sub.w	ip, r2, #8
 80282b2:	6854      	ldr	r4, [r2, #4]
 80282b4:	4564      	cmp	r4, ip
 80282b6:	d006      	beq.n	80282c6 <_malloc_r+0xca>
 80282b8:	6862      	ldr	r2, [r4, #4]
 80282ba:	f022 0203 	bic.w	r2, r2, #3
 80282be:	1bd0      	subs	r0, r2, r7
 80282c0:	280f      	cmp	r0, #15
 80282c2:	dd1c      	ble.n	80282fe <_malloc_r+0x102>
 80282c4:	3b01      	subs	r3, #1
 80282c6:	3301      	adds	r3, #1
 80282c8:	e7cf      	b.n	802826a <_malloc_r+0x6e>
 80282ca:	2b14      	cmp	r3, #20
 80282cc:	d801      	bhi.n	80282d2 <_malloc_r+0xd6>
 80282ce:	335b      	adds	r3, #91	@ 0x5b
 80282d0:	e7ea      	b.n	80282a8 <_malloc_r+0xac>
 80282d2:	2b54      	cmp	r3, #84	@ 0x54
 80282d4:	d802      	bhi.n	80282dc <_malloc_r+0xe0>
 80282d6:	0b3b      	lsrs	r3, r7, #12
 80282d8:	336e      	adds	r3, #110	@ 0x6e
 80282da:	e7e5      	b.n	80282a8 <_malloc_r+0xac>
 80282dc:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80282e0:	d802      	bhi.n	80282e8 <_malloc_r+0xec>
 80282e2:	0bfb      	lsrs	r3, r7, #15
 80282e4:	3377      	adds	r3, #119	@ 0x77
 80282e6:	e7df      	b.n	80282a8 <_malloc_r+0xac>
 80282e8:	f240 5254 	movw	r2, #1364	@ 0x554
 80282ec:	4293      	cmp	r3, r2
 80282ee:	d804      	bhi.n	80282fa <_malloc_r+0xfe>
 80282f0:	0cbb      	lsrs	r3, r7, #18
 80282f2:	337c      	adds	r3, #124	@ 0x7c
 80282f4:	e7d8      	b.n	80282a8 <_malloc_r+0xac>
 80282f6:	233f      	movs	r3, #63	@ 0x3f
 80282f8:	e7d6      	b.n	80282a8 <_malloc_r+0xac>
 80282fa:	237e      	movs	r3, #126	@ 0x7e
 80282fc:	e7d4      	b.n	80282a8 <_malloc_r+0xac>
 80282fe:	2800      	cmp	r0, #0
 8028300:	68e1      	ldr	r1, [r4, #12]
 8028302:	db04      	blt.n	802830e <_malloc_r+0x112>
 8028304:	68a3      	ldr	r3, [r4, #8]
 8028306:	60d9      	str	r1, [r3, #12]
 8028308:	608b      	str	r3, [r1, #8]
 802830a:	18a3      	adds	r3, r4, r2
 802830c:	e7a3      	b.n	8028256 <_malloc_r+0x5a>
 802830e:	460c      	mov	r4, r1
 8028310:	e7d0      	b.n	80282b4 <_malloc_r+0xb8>
 8028312:	2800      	cmp	r0, #0
 8028314:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8028318:	db07      	blt.n	802832a <_malloc_r+0x12e>
 802831a:	44a4      	add	ip, r4
 802831c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028320:	f043 0301 	orr.w	r3, r3, #1
 8028324:	f8cc 3004 	str.w	r3, [ip, #4]
 8028328:	e799      	b.n	802825e <_malloc_r+0x62>
 802832a:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 802832e:	6870      	ldr	r0, [r6, #4]
 8028330:	f080 8095 	bcs.w	802845e <_malloc_r+0x262>
 8028334:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8028338:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 802833c:	f04f 0c01 	mov.w	ip, #1
 8028340:	3201      	adds	r2, #1
 8028342:	fa0c fc0e 	lsl.w	ip, ip, lr
 8028346:	ea4c 0000 	orr.w	r0, ip, r0
 802834a:	6070      	str	r0, [r6, #4]
 802834c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8028350:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8028354:	3808      	subs	r0, #8
 8028356:	e9c4 c002 	strd	ip, r0, [r4, #8]
 802835a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 802835e:	f8cc 400c 	str.w	r4, [ip, #12]
 8028362:	1098      	asrs	r0, r3, #2
 8028364:	2201      	movs	r2, #1
 8028366:	4082      	lsls	r2, r0
 8028368:	6870      	ldr	r0, [r6, #4]
 802836a:	4290      	cmp	r0, r2
 802836c:	d326      	bcc.n	80283bc <_malloc_r+0x1c0>
 802836e:	4210      	tst	r0, r2
 8028370:	d106      	bne.n	8028380 <_malloc_r+0x184>
 8028372:	f023 0303 	bic.w	r3, r3, #3
 8028376:	0052      	lsls	r2, r2, #1
 8028378:	4210      	tst	r0, r2
 802837a:	f103 0304 	add.w	r3, r3, #4
 802837e:	d0fa      	beq.n	8028376 <_malloc_r+0x17a>
 8028380:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8028384:	46c1      	mov	r9, r8
 8028386:	469e      	mov	lr, r3
 8028388:	f8d9 400c 	ldr.w	r4, [r9, #12]
 802838c:	454c      	cmp	r4, r9
 802838e:	f040 80b9 	bne.w	8028504 <_malloc_r+0x308>
 8028392:	f10e 0e01 	add.w	lr, lr, #1
 8028396:	f01e 0f03 	tst.w	lr, #3
 802839a:	f109 0908 	add.w	r9, r9, #8
 802839e:	d1f3      	bne.n	8028388 <_malloc_r+0x18c>
 80283a0:	0798      	lsls	r0, r3, #30
 80283a2:	f040 80e3 	bne.w	802856c <_malloc_r+0x370>
 80283a6:	6873      	ldr	r3, [r6, #4]
 80283a8:	ea23 0302 	bic.w	r3, r3, r2
 80283ac:	6073      	str	r3, [r6, #4]
 80283ae:	6870      	ldr	r0, [r6, #4]
 80283b0:	0052      	lsls	r2, r2, #1
 80283b2:	4290      	cmp	r0, r2
 80283b4:	d302      	bcc.n	80283bc <_malloc_r+0x1c0>
 80283b6:	2a00      	cmp	r2, #0
 80283b8:	f040 80e5 	bne.w	8028586 <_malloc_r+0x38a>
 80283bc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80283c0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80283c4:	f023 0903 	bic.w	r9, r3, #3
 80283c8:	45b9      	cmp	r9, r7
 80283ca:	d304      	bcc.n	80283d6 <_malloc_r+0x1da>
 80283cc:	eba9 0207 	sub.w	r2, r9, r7
 80283d0:	2a0f      	cmp	r2, #15
 80283d2:	f300 8141 	bgt.w	8028658 <_malloc_r+0x45c>
 80283d6:	4b46      	ldr	r3, [pc, #280]	@ (80284f0 <_malloc_r+0x2f4>)
 80283d8:	6819      	ldr	r1, [r3, #0]
 80283da:	3110      	adds	r1, #16
 80283dc:	4439      	add	r1, r7
 80283de:	2008      	movs	r0, #8
 80283e0:	9101      	str	r1, [sp, #4]
 80283e2:	f006 f8f7 	bl	802e5d4 <sysconf>
 80283e6:	4a43      	ldr	r2, [pc, #268]	@ (80284f4 <_malloc_r+0x2f8>)
 80283e8:	9901      	ldr	r1, [sp, #4]
 80283ea:	6813      	ldr	r3, [r2, #0]
 80283ec:	3301      	adds	r3, #1
 80283ee:	bf1f      	itttt	ne
 80283f0:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 80283f4:	1809      	addne	r1, r1, r0
 80283f6:	4243      	negne	r3, r0
 80283f8:	4019      	andne	r1, r3
 80283fa:	4680      	mov	r8, r0
 80283fc:	4628      	mov	r0, r5
 80283fe:	9101      	str	r1, [sp, #4]
 8028400:	f006 f8d8 	bl	802e5b4 <_sbrk_r>
 8028404:	1c42      	adds	r2, r0, #1
 8028406:	eb0a 0b09 	add.w	fp, sl, r9
 802840a:	4604      	mov	r4, r0
 802840c:	f000 80f7 	beq.w	80285fe <_malloc_r+0x402>
 8028410:	4583      	cmp	fp, r0
 8028412:	9901      	ldr	r1, [sp, #4]
 8028414:	4a37      	ldr	r2, [pc, #220]	@ (80284f4 <_malloc_r+0x2f8>)
 8028416:	d902      	bls.n	802841e <_malloc_r+0x222>
 8028418:	45b2      	cmp	sl, r6
 802841a:	f040 80f0 	bne.w	80285fe <_malloc_r+0x402>
 802841e:	4b36      	ldr	r3, [pc, #216]	@ (80284f8 <_malloc_r+0x2fc>)
 8028420:	6818      	ldr	r0, [r3, #0]
 8028422:	45a3      	cmp	fp, r4
 8028424:	eb00 0e01 	add.w	lr, r0, r1
 8028428:	f8c3 e000 	str.w	lr, [r3]
 802842c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8028430:	f040 80ab 	bne.w	802858a <_malloc_r+0x38e>
 8028434:	ea1b 0f0c 	tst.w	fp, ip
 8028438:	f040 80a7 	bne.w	802858a <_malloc_r+0x38e>
 802843c:	68b2      	ldr	r2, [r6, #8]
 802843e:	4449      	add	r1, r9
 8028440:	f041 0101 	orr.w	r1, r1, #1
 8028444:	6051      	str	r1, [r2, #4]
 8028446:	4a2d      	ldr	r2, [pc, #180]	@ (80284fc <_malloc_r+0x300>)
 8028448:	681b      	ldr	r3, [r3, #0]
 802844a:	6811      	ldr	r1, [r2, #0]
 802844c:	428b      	cmp	r3, r1
 802844e:	bf88      	it	hi
 8028450:	6013      	strhi	r3, [r2, #0]
 8028452:	4a2b      	ldr	r2, [pc, #172]	@ (8028500 <_malloc_r+0x304>)
 8028454:	6811      	ldr	r1, [r2, #0]
 8028456:	428b      	cmp	r3, r1
 8028458:	bf88      	it	hi
 802845a:	6013      	strhi	r3, [r2, #0]
 802845c:	e0cf      	b.n	80285fe <_malloc_r+0x402>
 802845e:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8028462:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8028466:	d218      	bcs.n	802849a <_malloc_r+0x29e>
 8028468:	ea4f 129c 	mov.w	r2, ip, lsr #6
 802846c:	3238      	adds	r2, #56	@ 0x38
 802846e:	f102 0e01 	add.w	lr, r2, #1
 8028472:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8028476:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 802847a:	45f0      	cmp	r8, lr
 802847c:	d12b      	bne.n	80284d6 <_malloc_r+0x2da>
 802847e:	1092      	asrs	r2, r2, #2
 8028480:	f04f 0c01 	mov.w	ip, #1
 8028484:	fa0c f202 	lsl.w	r2, ip, r2
 8028488:	4302      	orrs	r2, r0
 802848a:	6072      	str	r2, [r6, #4]
 802848c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8028490:	f8c8 4008 	str.w	r4, [r8, #8]
 8028494:	f8ce 400c 	str.w	r4, [lr, #12]
 8028498:	e763      	b.n	8028362 <_malloc_r+0x166>
 802849a:	2a14      	cmp	r2, #20
 802849c:	d801      	bhi.n	80284a2 <_malloc_r+0x2a6>
 802849e:	325b      	adds	r2, #91	@ 0x5b
 80284a0:	e7e5      	b.n	802846e <_malloc_r+0x272>
 80284a2:	2a54      	cmp	r2, #84	@ 0x54
 80284a4:	d803      	bhi.n	80284ae <_malloc_r+0x2b2>
 80284a6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80284aa:	326e      	adds	r2, #110	@ 0x6e
 80284ac:	e7df      	b.n	802846e <_malloc_r+0x272>
 80284ae:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80284b2:	d803      	bhi.n	80284bc <_malloc_r+0x2c0>
 80284b4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80284b8:	3277      	adds	r2, #119	@ 0x77
 80284ba:	e7d8      	b.n	802846e <_malloc_r+0x272>
 80284bc:	f240 5e54 	movw	lr, #1364	@ 0x554
 80284c0:	4572      	cmp	r2, lr
 80284c2:	bf9a      	itte	ls
 80284c4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80284c8:	327c      	addls	r2, #124	@ 0x7c
 80284ca:	227e      	movhi	r2, #126	@ 0x7e
 80284cc:	e7cf      	b.n	802846e <_malloc_r+0x272>
 80284ce:	f8de e008 	ldr.w	lr, [lr, #8]
 80284d2:	45f0      	cmp	r8, lr
 80284d4:	d005      	beq.n	80284e2 <_malloc_r+0x2e6>
 80284d6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80284da:	f022 0203 	bic.w	r2, r2, #3
 80284de:	4562      	cmp	r2, ip
 80284e0:	d8f5      	bhi.n	80284ce <_malloc_r+0x2d2>
 80284e2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80284e6:	e7d1      	b.n	802848c <_malloc_r+0x290>
 80284e8:	20000564 	.word	0x20000564
 80284ec:	2000056c 	.word	0x2000056c
 80284f0:	20018318 	.word	0x20018318
 80284f4:	2000055c 	.word	0x2000055c
 80284f8:	200182e8 	.word	0x200182e8
 80284fc:	20018314 	.word	0x20018314
 8028500:	20018310 	.word	0x20018310
 8028504:	6860      	ldr	r0, [r4, #4]
 8028506:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 802850a:	f020 0003 	bic.w	r0, r0, #3
 802850e:	eba0 0a07 	sub.w	sl, r0, r7
 8028512:	f1ba 0f0f 	cmp.w	sl, #15
 8028516:	dd12      	ble.n	802853e <_malloc_r+0x342>
 8028518:	68a3      	ldr	r3, [r4, #8]
 802851a:	19e2      	adds	r2, r4, r7
 802851c:	f047 0701 	orr.w	r7, r7, #1
 8028520:	6067      	str	r7, [r4, #4]
 8028522:	f8c3 c00c 	str.w	ip, [r3, #12]
 8028526:	f8cc 3008 	str.w	r3, [ip, #8]
 802852a:	f04a 0301 	orr.w	r3, sl, #1
 802852e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8028532:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8028536:	6053      	str	r3, [r2, #4]
 8028538:	f844 a000 	str.w	sl, [r4, r0]
 802853c:	e68f      	b.n	802825e <_malloc_r+0x62>
 802853e:	f1ba 0f00 	cmp.w	sl, #0
 8028542:	db11      	blt.n	8028568 <_malloc_r+0x36c>
 8028544:	4420      	add	r0, r4
 8028546:	6843      	ldr	r3, [r0, #4]
 8028548:	f043 0301 	orr.w	r3, r3, #1
 802854c:	6043      	str	r3, [r0, #4]
 802854e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8028552:	4628      	mov	r0, r5
 8028554:	f8c3 c00c 	str.w	ip, [r3, #12]
 8028558:	f8cc 3008 	str.w	r3, [ip, #8]
 802855c:	f004 f95e 	bl	802c81c <__malloc_unlock>
 8028560:	4620      	mov	r0, r4
 8028562:	b003      	add	sp, #12
 8028564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028568:	4664      	mov	r4, ip
 802856a:	e70f      	b.n	802838c <_malloc_r+0x190>
 802856c:	f858 0908 	ldr.w	r0, [r8], #-8
 8028570:	4540      	cmp	r0, r8
 8028572:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8028576:	f43f af13 	beq.w	80283a0 <_malloc_r+0x1a4>
 802857a:	e718      	b.n	80283ae <_malloc_r+0x1b2>
 802857c:	3304      	adds	r3, #4
 802857e:	0052      	lsls	r2, r2, #1
 8028580:	4210      	tst	r0, r2
 8028582:	d0fb      	beq.n	802857c <_malloc_r+0x380>
 8028584:	e6fc      	b.n	8028380 <_malloc_r+0x184>
 8028586:	4673      	mov	r3, lr
 8028588:	e7fa      	b.n	8028580 <_malloc_r+0x384>
 802858a:	6810      	ldr	r0, [r2, #0]
 802858c:	3001      	adds	r0, #1
 802858e:	bf1b      	ittet	ne
 8028590:	eba4 0b0b 	subne.w	fp, r4, fp
 8028594:	eb0b 020e 	addne.w	r2, fp, lr
 8028598:	6014      	streq	r4, [r2, #0]
 802859a:	601a      	strne	r2, [r3, #0]
 802859c:	f014 0b07 	ands.w	fp, r4, #7
 80285a0:	bf1a      	itte	ne
 80285a2:	f1cb 0008 	rsbne	r0, fp, #8
 80285a6:	1824      	addne	r4, r4, r0
 80285a8:	4658      	moveq	r0, fp
 80285aa:	1862      	adds	r2, r4, r1
 80285ac:	ea02 010c 	and.w	r1, r2, ip
 80285b0:	4480      	add	r8, r0
 80285b2:	eba8 0801 	sub.w	r8, r8, r1
 80285b6:	ea08 080c 	and.w	r8, r8, ip
 80285ba:	4641      	mov	r1, r8
 80285bc:	4628      	mov	r0, r5
 80285be:	9201      	str	r2, [sp, #4]
 80285c0:	f005 fff8 	bl	802e5b4 <_sbrk_r>
 80285c4:	1c43      	adds	r3, r0, #1
 80285c6:	9a01      	ldr	r2, [sp, #4]
 80285c8:	4b28      	ldr	r3, [pc, #160]	@ (802866c <_malloc_r+0x470>)
 80285ca:	d107      	bne.n	80285dc <_malloc_r+0x3e0>
 80285cc:	f1bb 0f00 	cmp.w	fp, #0
 80285d0:	d023      	beq.n	802861a <_malloc_r+0x41e>
 80285d2:	f1ab 0008 	sub.w	r0, fp, #8
 80285d6:	4410      	add	r0, r2
 80285d8:	f04f 0800 	mov.w	r8, #0
 80285dc:	681a      	ldr	r2, [r3, #0]
 80285de:	60b4      	str	r4, [r6, #8]
 80285e0:	1b00      	subs	r0, r0, r4
 80285e2:	4440      	add	r0, r8
 80285e4:	4442      	add	r2, r8
 80285e6:	f040 0001 	orr.w	r0, r0, #1
 80285ea:	45b2      	cmp	sl, r6
 80285ec:	601a      	str	r2, [r3, #0]
 80285ee:	6060      	str	r0, [r4, #4]
 80285f0:	f43f af29 	beq.w	8028446 <_malloc_r+0x24a>
 80285f4:	f1b9 0f0f 	cmp.w	r9, #15
 80285f8:	d812      	bhi.n	8028620 <_malloc_r+0x424>
 80285fa:	2301      	movs	r3, #1
 80285fc:	6063      	str	r3, [r4, #4]
 80285fe:	68b3      	ldr	r3, [r6, #8]
 8028600:	685b      	ldr	r3, [r3, #4]
 8028602:	f023 0303 	bic.w	r3, r3, #3
 8028606:	42bb      	cmp	r3, r7
 8028608:	eba3 0207 	sub.w	r2, r3, r7
 802860c:	d301      	bcc.n	8028612 <_malloc_r+0x416>
 802860e:	2a0f      	cmp	r2, #15
 8028610:	dc22      	bgt.n	8028658 <_malloc_r+0x45c>
 8028612:	4628      	mov	r0, r5
 8028614:	f004 f902 	bl	802c81c <__malloc_unlock>
 8028618:	e5fc      	b.n	8028214 <_malloc_r+0x18>
 802861a:	4610      	mov	r0, r2
 802861c:	46d8      	mov	r8, fp
 802861e:	e7dd      	b.n	80285dc <_malloc_r+0x3e0>
 8028620:	f8da 2004 	ldr.w	r2, [sl, #4]
 8028624:	f1a9 090c 	sub.w	r9, r9, #12
 8028628:	f029 0907 	bic.w	r9, r9, #7
 802862c:	f002 0201 	and.w	r2, r2, #1
 8028630:	ea42 0209 	orr.w	r2, r2, r9
 8028634:	f8ca 2004 	str.w	r2, [sl, #4]
 8028638:	2105      	movs	r1, #5
 802863a:	eb0a 0209 	add.w	r2, sl, r9
 802863e:	f1b9 0f0f 	cmp.w	r9, #15
 8028642:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8028646:	f67f aefe 	bls.w	8028446 <_malloc_r+0x24a>
 802864a:	f10a 0108 	add.w	r1, sl, #8
 802864e:	4628      	mov	r0, r5
 8028650:	f7ff fcbc 	bl	8027fcc <_free_r>
 8028654:	4b05      	ldr	r3, [pc, #20]	@ (802866c <_malloc_r+0x470>)
 8028656:	e6f6      	b.n	8028446 <_malloc_r+0x24a>
 8028658:	68b4      	ldr	r4, [r6, #8]
 802865a:	f047 0301 	orr.w	r3, r7, #1
 802865e:	4427      	add	r7, r4
 8028660:	f042 0201 	orr.w	r2, r2, #1
 8028664:	6063      	str	r3, [r4, #4]
 8028666:	60b7      	str	r7, [r6, #8]
 8028668:	607a      	str	r2, [r7, #4]
 802866a:	e5f8      	b.n	802825e <_malloc_r+0x62>
 802866c:	200182e8 	.word	0x200182e8

08028670 <__ascii_mbtowc>:
 8028670:	b082      	sub	sp, #8
 8028672:	b901      	cbnz	r1, 8028676 <__ascii_mbtowc+0x6>
 8028674:	a901      	add	r1, sp, #4
 8028676:	b142      	cbz	r2, 802868a <__ascii_mbtowc+0x1a>
 8028678:	b14b      	cbz	r3, 802868e <__ascii_mbtowc+0x1e>
 802867a:	7813      	ldrb	r3, [r2, #0]
 802867c:	600b      	str	r3, [r1, #0]
 802867e:	7812      	ldrb	r2, [r2, #0]
 8028680:	1e10      	subs	r0, r2, #0
 8028682:	bf18      	it	ne
 8028684:	2001      	movne	r0, #1
 8028686:	b002      	add	sp, #8
 8028688:	4770      	bx	lr
 802868a:	4610      	mov	r0, r2
 802868c:	e7fb      	b.n	8028686 <__ascii_mbtowc+0x16>
 802868e:	f06f 0001 	mvn.w	r0, #1
 8028692:	e7f8      	b.n	8028686 <__ascii_mbtowc+0x16>

08028694 <siscanf>:
 8028694:	b40e      	push	{r1, r2, r3}
 8028696:	b530      	push	{r4, r5, lr}
 8028698:	b09c      	sub	sp, #112	@ 0x70
 802869a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802869c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80286a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80286a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80286a8:	9002      	str	r0, [sp, #8]
 80286aa:	9006      	str	r0, [sp, #24]
 80286ac:	f7d7 fdf8 	bl	80002a0 <strlen>
 80286b0:	4b0b      	ldr	r3, [pc, #44]	@ (80286e0 <siscanf+0x4c>)
 80286b2:	9003      	str	r0, [sp, #12]
 80286b4:	9007      	str	r0, [sp, #28]
 80286b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80286b8:	480a      	ldr	r0, [pc, #40]	@ (80286e4 <siscanf+0x50>)
 80286ba:	9401      	str	r4, [sp, #4]
 80286bc:	2300      	movs	r3, #0
 80286be:	930e      	str	r3, [sp, #56]	@ 0x38
 80286c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80286c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80286c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80286ca:	462a      	mov	r2, r5
 80286cc:	4623      	mov	r3, r4
 80286ce:	a902      	add	r1, sp, #8
 80286d0:	6800      	ldr	r0, [r0, #0]
 80286d2:	f000 fd99 	bl	8029208 <__ssvfiscanf_r>
 80286d6:	b01c      	add	sp, #112	@ 0x70
 80286d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80286dc:	b003      	add	sp, #12
 80286de:	4770      	bx	lr
 80286e0:	08025683 	.word	0x08025683
 80286e4:	20000430 	.word	0x20000430

080286e8 <sniprintf>:
 80286e8:	b40c      	push	{r2, r3}
 80286ea:	b530      	push	{r4, r5, lr}
 80286ec:	4b17      	ldr	r3, [pc, #92]	@ (802874c <sniprintf+0x64>)
 80286ee:	1e0c      	subs	r4, r1, #0
 80286f0:	681d      	ldr	r5, [r3, #0]
 80286f2:	b09d      	sub	sp, #116	@ 0x74
 80286f4:	da08      	bge.n	8028708 <sniprintf+0x20>
 80286f6:	238b      	movs	r3, #139	@ 0x8b
 80286f8:	602b      	str	r3, [r5, #0]
 80286fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80286fe:	b01d      	add	sp, #116	@ 0x74
 8028700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028704:	b002      	add	sp, #8
 8028706:	4770      	bx	lr
 8028708:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802870c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8028710:	bf14      	ite	ne
 8028712:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8028716:	4623      	moveq	r3, r4
 8028718:	9304      	str	r3, [sp, #16]
 802871a:	9307      	str	r3, [sp, #28]
 802871c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028720:	9002      	str	r0, [sp, #8]
 8028722:	9006      	str	r0, [sp, #24]
 8028724:	f8ad 3016 	strh.w	r3, [sp, #22]
 8028728:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802872a:	ab21      	add	r3, sp, #132	@ 0x84
 802872c:	a902      	add	r1, sp, #8
 802872e:	4628      	mov	r0, r5
 8028730:	9301      	str	r3, [sp, #4]
 8028732:	f000 f88b 	bl	802884c <_svfiprintf_r>
 8028736:	1c43      	adds	r3, r0, #1
 8028738:	bfbc      	itt	lt
 802873a:	238b      	movlt	r3, #139	@ 0x8b
 802873c:	602b      	strlt	r3, [r5, #0]
 802873e:	2c00      	cmp	r4, #0
 8028740:	d0dd      	beq.n	80286fe <sniprintf+0x16>
 8028742:	9b02      	ldr	r3, [sp, #8]
 8028744:	2200      	movs	r2, #0
 8028746:	701a      	strb	r2, [r3, #0]
 8028748:	e7d9      	b.n	80286fe <sniprintf+0x16>
 802874a:	bf00      	nop
 802874c:	20000430 	.word	0x20000430

08028750 <__ssprint_r>:
 8028750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028754:	6893      	ldr	r3, [r2, #8]
 8028756:	f8d2 b000 	ldr.w	fp, [r2]
 802875a:	9001      	str	r0, [sp, #4]
 802875c:	460c      	mov	r4, r1
 802875e:	4617      	mov	r7, r2
 8028760:	2b00      	cmp	r3, #0
 8028762:	d157      	bne.n	8028814 <__ssprint_r+0xc4>
 8028764:	2000      	movs	r0, #0
 8028766:	2300      	movs	r3, #0
 8028768:	607b      	str	r3, [r7, #4]
 802876a:	b003      	add	sp, #12
 802876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028770:	e9db a800 	ldrd	sl, r8, [fp]
 8028774:	f10b 0b08 	add.w	fp, fp, #8
 8028778:	68a6      	ldr	r6, [r4, #8]
 802877a:	6820      	ldr	r0, [r4, #0]
 802877c:	f1b8 0f00 	cmp.w	r8, #0
 8028780:	d0f6      	beq.n	8028770 <__ssprint_r+0x20>
 8028782:	45b0      	cmp	r8, r6
 8028784:	d32e      	bcc.n	80287e4 <__ssprint_r+0x94>
 8028786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802878a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802878e:	d029      	beq.n	80287e4 <__ssprint_r+0x94>
 8028790:	6921      	ldr	r1, [r4, #16]
 8028792:	6965      	ldr	r5, [r4, #20]
 8028794:	eba0 0901 	sub.w	r9, r0, r1
 8028798:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802879c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80287a0:	f109 0001 	add.w	r0, r9, #1
 80287a4:	106d      	asrs	r5, r5, #1
 80287a6:	4440      	add	r0, r8
 80287a8:	4285      	cmp	r5, r0
 80287aa:	bf38      	it	cc
 80287ac:	4605      	movcc	r5, r0
 80287ae:	0553      	lsls	r3, r2, #21
 80287b0:	d534      	bpl.n	802881c <__ssprint_r+0xcc>
 80287b2:	9801      	ldr	r0, [sp, #4]
 80287b4:	4629      	mov	r1, r5
 80287b6:	f7ff fd21 	bl	80281fc <_malloc_r>
 80287ba:	4606      	mov	r6, r0
 80287bc:	2800      	cmp	r0, #0
 80287be:	d038      	beq.n	8028832 <__ssprint_r+0xe2>
 80287c0:	464a      	mov	r2, r9
 80287c2:	6921      	ldr	r1, [r4, #16]
 80287c4:	f7fe fd00 	bl	80271c8 <memcpy>
 80287c8:	89a2      	ldrh	r2, [r4, #12]
 80287ca:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80287ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80287d2:	81a2      	strh	r2, [r4, #12]
 80287d4:	6126      	str	r6, [r4, #16]
 80287d6:	6165      	str	r5, [r4, #20]
 80287d8:	444e      	add	r6, r9
 80287da:	eba5 0509 	sub.w	r5, r5, r9
 80287de:	6026      	str	r6, [r4, #0]
 80287e0:	60a5      	str	r5, [r4, #8]
 80287e2:	4646      	mov	r6, r8
 80287e4:	4546      	cmp	r6, r8
 80287e6:	bf28      	it	cs
 80287e8:	4646      	movcs	r6, r8
 80287ea:	4632      	mov	r2, r6
 80287ec:	4651      	mov	r1, sl
 80287ee:	6820      	ldr	r0, [r4, #0]
 80287f0:	f7fd fa94 	bl	8025d1c <memmove>
 80287f4:	68a2      	ldr	r2, [r4, #8]
 80287f6:	1b92      	subs	r2, r2, r6
 80287f8:	60a2      	str	r2, [r4, #8]
 80287fa:	6822      	ldr	r2, [r4, #0]
 80287fc:	4432      	add	r2, r6
 80287fe:	6022      	str	r2, [r4, #0]
 8028800:	68ba      	ldr	r2, [r7, #8]
 8028802:	eba2 0308 	sub.w	r3, r2, r8
 8028806:	44c2      	add	sl, r8
 8028808:	60bb      	str	r3, [r7, #8]
 802880a:	2b00      	cmp	r3, #0
 802880c:	d0aa      	beq.n	8028764 <__ssprint_r+0x14>
 802880e:	f04f 0800 	mov.w	r8, #0
 8028812:	e7b1      	b.n	8028778 <__ssprint_r+0x28>
 8028814:	f04f 0a00 	mov.w	sl, #0
 8028818:	46d0      	mov	r8, sl
 802881a:	e7ad      	b.n	8028778 <__ssprint_r+0x28>
 802881c:	9801      	ldr	r0, [sp, #4]
 802881e:	462a      	mov	r2, r5
 8028820:	f004 fcfc 	bl	802d21c <_realloc_r>
 8028824:	4606      	mov	r6, r0
 8028826:	2800      	cmp	r0, #0
 8028828:	d1d4      	bne.n	80287d4 <__ssprint_r+0x84>
 802882a:	6921      	ldr	r1, [r4, #16]
 802882c:	9801      	ldr	r0, [sp, #4]
 802882e:	f7ff fbcd 	bl	8027fcc <_free_r>
 8028832:	9a01      	ldr	r2, [sp, #4]
 8028834:	230c      	movs	r3, #12
 8028836:	6013      	str	r3, [r2, #0]
 8028838:	89a3      	ldrh	r3, [r4, #12]
 802883a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802883e:	81a3      	strh	r3, [r4, #12]
 8028840:	2300      	movs	r3, #0
 8028842:	60bb      	str	r3, [r7, #8]
 8028844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028848:	e78d      	b.n	8028766 <__ssprint_r+0x16>
	...

0802884c <_svfiprintf_r>:
 802884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028850:	461d      	mov	r5, r3
 8028852:	898b      	ldrh	r3, [r1, #12]
 8028854:	b0bb      	sub	sp, #236	@ 0xec
 8028856:	468b      	mov	fp, r1
 8028858:	0619      	lsls	r1, r3, #24
 802885a:	9001      	str	r0, [sp, #4]
 802885c:	9202      	str	r2, [sp, #8]
 802885e:	d514      	bpl.n	802888a <_svfiprintf_r+0x3e>
 8028860:	f8db 3010 	ldr.w	r3, [fp, #16]
 8028864:	b98b      	cbnz	r3, 802888a <_svfiprintf_r+0x3e>
 8028866:	2140      	movs	r1, #64	@ 0x40
 8028868:	f7ff fcc8 	bl	80281fc <_malloc_r>
 802886c:	f8cb 0000 	str.w	r0, [fp]
 8028870:	f8cb 0010 	str.w	r0, [fp, #16]
 8028874:	b930      	cbnz	r0, 8028884 <_svfiprintf_r+0x38>
 8028876:	9a01      	ldr	r2, [sp, #4]
 8028878:	230c      	movs	r3, #12
 802887a:	6013      	str	r3, [r2, #0]
 802887c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8028880:	9304      	str	r3, [sp, #16]
 8028882:	e3df      	b.n	8029044 <_svfiprintf_r+0x7f8>
 8028884:	2340      	movs	r3, #64	@ 0x40
 8028886:	f8cb 3014 	str.w	r3, [fp, #20]
 802888a:	2300      	movs	r3, #0
 802888c:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8028890:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8028894:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8028898:	ae11      	add	r6, sp, #68	@ 0x44
 802889a:	960e      	str	r6, [sp, #56]	@ 0x38
 802889c:	9304      	str	r3, [sp, #16]
 802889e:	9b02      	ldr	r3, [sp, #8]
 80288a0:	461c      	mov	r4, r3
 80288a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80288a6:	b10a      	cbz	r2, 80288ac <_svfiprintf_r+0x60>
 80288a8:	2a25      	cmp	r2, #37	@ 0x25
 80288aa:	d1f9      	bne.n	80288a0 <_svfiprintf_r+0x54>
 80288ac:	9a02      	ldr	r2, [sp, #8]
 80288ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80288b0:	1aa7      	subs	r7, r4, r2
 80288b2:	d00c      	beq.n	80288ce <_svfiprintf_r+0x82>
 80288b4:	443b      	add	r3, r7
 80288b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80288b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80288ba:	3301      	adds	r3, #1
 80288bc:	2b07      	cmp	r3, #7
 80288be:	e9c6 2700 	strd	r2, r7, [r6]
 80288c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80288c4:	dc76      	bgt.n	80289b4 <_svfiprintf_r+0x168>
 80288c6:	3608      	adds	r6, #8
 80288c8:	9b04      	ldr	r3, [sp, #16]
 80288ca:	443b      	add	r3, r7
 80288cc:	9304      	str	r3, [sp, #16]
 80288ce:	7823      	ldrb	r3, [r4, #0]
 80288d0:	2b00      	cmp	r3, #0
 80288d2:	f000 83ce 	beq.w	8029072 <_svfiprintf_r+0x826>
 80288d6:	2300      	movs	r3, #0
 80288d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80288dc:	3401      	adds	r4, #1
 80288de:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80288e2:	9200      	str	r2, [sp, #0]
 80288e4:	9303      	str	r3, [sp, #12]
 80288e6:	4699      	mov	r9, r3
 80288e8:	4622      	mov	r2, r4
 80288ea:	f812 3b01 	ldrb.w	r3, [r2], #1
 80288ee:	9202      	str	r2, [sp, #8]
 80288f0:	f1a3 0220 	sub.w	r2, r3, #32
 80288f4:	2a5a      	cmp	r2, #90	@ 0x5a
 80288f6:	f200 8318 	bhi.w	8028f2a <_svfiprintf_r+0x6de>
 80288fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 80288fe:	009a      	.short	0x009a
 8028900:	03160316 	.word	0x03160316
 8028904:	031600a2 	.word	0x031600a2
 8028908:	03160316 	.word	0x03160316
 802890c:	03160082 	.word	0x03160082
 8028910:	00a50316 	.word	0x00a50316
 8028914:	031600af 	.word	0x031600af
 8028918:	00b100ac 	.word	0x00b100ac
 802891c:	00cc0316 	.word	0x00cc0316
 8028920:	00cf00cf 	.word	0x00cf00cf
 8028924:	00cf00cf 	.word	0x00cf00cf
 8028928:	00cf00cf 	.word	0x00cf00cf
 802892c:	00cf00cf 	.word	0x00cf00cf
 8028930:	031600cf 	.word	0x031600cf
 8028934:	03160316 	.word	0x03160316
 8028938:	03160316 	.word	0x03160316
 802893c:	03160316 	.word	0x03160316
 8028940:	03160316 	.word	0x03160316
 8028944:	010600f9 	.word	0x010600f9
 8028948:	03160316 	.word	0x03160316
 802894c:	03160316 	.word	0x03160316
 8028950:	03160316 	.word	0x03160316
 8028954:	03160316 	.word	0x03160316
 8028958:	03160316 	.word	0x03160316
 802895c:	03160154 	.word	0x03160154
 8028960:	03160316 	.word	0x03160316
 8028964:	0316019b 	.word	0x0316019b
 8028968:	0316027d 	.word	0x0316027d
 802896c:	029d0316 	.word	0x029d0316
 8028970:	03160316 	.word	0x03160316
 8028974:	03160316 	.word	0x03160316
 8028978:	03160316 	.word	0x03160316
 802897c:	03160316 	.word	0x03160316
 8028980:	03160316 	.word	0x03160316
 8028984:	010800f9 	.word	0x010800f9
 8028988:	03160316 	.word	0x03160316
 802898c:	00df0316 	.word	0x00df0316
 8028990:	00f30108 	.word	0x00f30108
 8028994:	00ec0316 	.word	0x00ec0316
 8028998:	01340316 	.word	0x01340316
 802899c:	018a0156 	.word	0x018a0156
 80289a0:	031600f3 	.word	0x031600f3
 80289a4:	0098019b 	.word	0x0098019b
 80289a8:	0316027f 	.word	0x0316027f
 80289ac:	00650316 	.word	0x00650316
 80289b0:	00980316 	.word	0x00980316
 80289b4:	9801      	ldr	r0, [sp, #4]
 80289b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80289b8:	4659      	mov	r1, fp
 80289ba:	f7ff fec9 	bl	8028750 <__ssprint_r>
 80289be:	2800      	cmp	r0, #0
 80289c0:	f040 833b 	bne.w	802903a <_svfiprintf_r+0x7ee>
 80289c4:	ae11      	add	r6, sp, #68	@ 0x44
 80289c6:	e77f      	b.n	80288c8 <_svfiprintf_r+0x7c>
 80289c8:	4a99      	ldr	r2, [pc, #612]	@ (8028c30 <_svfiprintf_r+0x3e4>)
 80289ca:	9205      	str	r2, [sp, #20]
 80289cc:	f019 0220 	ands.w	r2, r9, #32
 80289d0:	f000 8234 	beq.w	8028e3c <_svfiprintf_r+0x5f0>
 80289d4:	3507      	adds	r5, #7
 80289d6:	f025 0507 	bic.w	r5, r5, #7
 80289da:	462f      	mov	r7, r5
 80289dc:	686d      	ldr	r5, [r5, #4]
 80289de:	f857 4b08 	ldr.w	r4, [r7], #8
 80289e2:	f019 0f01 	tst.w	r9, #1
 80289e6:	d009      	beq.n	80289fc <_svfiprintf_r+0x1b0>
 80289e8:	ea54 0205 	orrs.w	r2, r4, r5
 80289ec:	bf1f      	itttt	ne
 80289ee:	2230      	movne	r2, #48	@ 0x30
 80289f0:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80289f4:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80289f8:	f049 0902 	orrne.w	r9, r9, #2
 80289fc:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8028a00:	e113      	b.n	8028c2a <_svfiprintf_r+0x3de>
 8028a02:	9801      	ldr	r0, [sp, #4]
 8028a04:	f7fe fb32 	bl	802706c <_localeconv_r>
 8028a08:	6843      	ldr	r3, [r0, #4]
 8028a0a:	9308      	str	r3, [sp, #32]
 8028a0c:	4618      	mov	r0, r3
 8028a0e:	f7d7 fc47 	bl	80002a0 <strlen>
 8028a12:	9007      	str	r0, [sp, #28]
 8028a14:	9801      	ldr	r0, [sp, #4]
 8028a16:	f7fe fb29 	bl	802706c <_localeconv_r>
 8028a1a:	6883      	ldr	r3, [r0, #8]
 8028a1c:	9306      	str	r3, [sp, #24]
 8028a1e:	9b07      	ldr	r3, [sp, #28]
 8028a20:	b12b      	cbz	r3, 8028a2e <_svfiprintf_r+0x1e2>
 8028a22:	9b06      	ldr	r3, [sp, #24]
 8028a24:	b11b      	cbz	r3, 8028a2e <_svfiprintf_r+0x1e2>
 8028a26:	781b      	ldrb	r3, [r3, #0]
 8028a28:	b10b      	cbz	r3, 8028a2e <_svfiprintf_r+0x1e2>
 8028a2a:	f449 6980 	orr.w	r9, r9, #1024	@ 0x400
 8028a2e:	9c02      	ldr	r4, [sp, #8]
 8028a30:	e75a      	b.n	80288e8 <_svfiprintf_r+0x9c>
 8028a32:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8028a36:	2b00      	cmp	r3, #0
 8028a38:	d1f9      	bne.n	8028a2e <_svfiprintf_r+0x1e2>
 8028a3a:	2320      	movs	r3, #32
 8028a3c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8028a40:	e7f5      	b.n	8028a2e <_svfiprintf_r+0x1e2>
 8028a42:	f049 0901 	orr.w	r9, r9, #1
 8028a46:	e7f2      	b.n	8028a2e <_svfiprintf_r+0x1e2>
 8028a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8028a4c:	9303      	str	r3, [sp, #12]
 8028a4e:	2b00      	cmp	r3, #0
 8028a50:	daed      	bge.n	8028a2e <_svfiprintf_r+0x1e2>
 8028a52:	425b      	negs	r3, r3
 8028a54:	9303      	str	r3, [sp, #12]
 8028a56:	f049 0904 	orr.w	r9, r9, #4
 8028a5a:	e7e8      	b.n	8028a2e <_svfiprintf_r+0x1e2>
 8028a5c:	232b      	movs	r3, #43	@ 0x2b
 8028a5e:	e7ed      	b.n	8028a3c <_svfiprintf_r+0x1f0>
 8028a60:	9a02      	ldr	r2, [sp, #8]
 8028a62:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8028a68:	d111      	bne.n	8028a8e <_svfiprintf_r+0x242>
 8028a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8028a6e:	9202      	str	r2, [sp, #8]
 8028a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8028a74:	9300      	str	r3, [sp, #0]
 8028a76:	e7da      	b.n	8028a2e <_svfiprintf_r+0x1e2>
 8028a78:	9b00      	ldr	r3, [sp, #0]
 8028a7a:	fb00 1303 	mla	r3, r0, r3, r1
 8028a7e:	9300      	str	r3, [sp, #0]
 8028a80:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028a84:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8028a88:	2909      	cmp	r1, #9
 8028a8a:	d9f5      	bls.n	8028a78 <_svfiprintf_r+0x22c>
 8028a8c:	e72f      	b.n	80288ee <_svfiprintf_r+0xa2>
 8028a8e:	2100      	movs	r1, #0
 8028a90:	9100      	str	r1, [sp, #0]
 8028a92:	200a      	movs	r0, #10
 8028a94:	e7f6      	b.n	8028a84 <_svfiprintf_r+0x238>
 8028a96:	f049 0980 	orr.w	r9, r9, #128	@ 0x80
 8028a9a:	e7c8      	b.n	8028a2e <_svfiprintf_r+0x1e2>
 8028a9c:	2100      	movs	r1, #0
 8028a9e:	9a02      	ldr	r2, [sp, #8]
 8028aa0:	9103      	str	r1, [sp, #12]
 8028aa2:	200a      	movs	r0, #10
 8028aa4:	9903      	ldr	r1, [sp, #12]
 8028aa6:	3b30      	subs	r3, #48	@ 0x30
 8028aa8:	fb00 3301 	mla	r3, r0, r1, r3
 8028aac:	9303      	str	r3, [sp, #12]
 8028aae:	f812 3b01 	ldrb.w	r3, [r2], #1
 8028ab2:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8028ab6:	2909      	cmp	r1, #9
 8028ab8:	d9f4      	bls.n	8028aa4 <_svfiprintf_r+0x258>
 8028aba:	e718      	b.n	80288ee <_svfiprintf_r+0xa2>
 8028abc:	9b02      	ldr	r3, [sp, #8]
 8028abe:	781b      	ldrb	r3, [r3, #0]
 8028ac0:	2b68      	cmp	r3, #104	@ 0x68
 8028ac2:	bf01      	itttt	eq
 8028ac4:	9b02      	ldreq	r3, [sp, #8]
 8028ac6:	3301      	addeq	r3, #1
 8028ac8:	9302      	streq	r3, [sp, #8]
 8028aca:	f449 7900 	orreq.w	r9, r9, #512	@ 0x200
 8028ace:	bf18      	it	ne
 8028ad0:	f049 0940 	orrne.w	r9, r9, #64	@ 0x40
 8028ad4:	e7ab      	b.n	8028a2e <_svfiprintf_r+0x1e2>
 8028ad6:	9b02      	ldr	r3, [sp, #8]
 8028ad8:	781b      	ldrb	r3, [r3, #0]
 8028ada:	2b6c      	cmp	r3, #108	@ 0x6c
 8028adc:	d105      	bne.n	8028aea <_svfiprintf_r+0x29e>
 8028ade:	9b02      	ldr	r3, [sp, #8]
 8028ae0:	3301      	adds	r3, #1
 8028ae2:	9302      	str	r3, [sp, #8]
 8028ae4:	f049 0920 	orr.w	r9, r9, #32
 8028ae8:	e7a1      	b.n	8028a2e <_svfiprintf_r+0x1e2>
 8028aea:	f049 0910 	orr.w	r9, r9, #16
 8028aee:	e79e      	b.n	8028a2e <_svfiprintf_r+0x1e2>
 8028af0:	462f      	mov	r7, r5
 8028af2:	2400      	movs	r4, #0
 8028af4:	f857 3b04 	ldr.w	r3, [r7], #4
 8028af8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8028afc:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8028b00:	2301      	movs	r3, #1
 8028b02:	9300      	str	r3, [sp, #0]
 8028b04:	f10d 0884 	add.w	r8, sp, #132	@ 0x84
 8028b08:	e0aa      	b.n	8028c60 <_svfiprintf_r+0x414>
 8028b0a:	f049 0910 	orr.w	r9, r9, #16
 8028b0e:	f019 0f20 	tst.w	r9, #32
 8028b12:	d011      	beq.n	8028b38 <_svfiprintf_r+0x2ec>
 8028b14:	3507      	adds	r5, #7
 8028b16:	f025 0507 	bic.w	r5, r5, #7
 8028b1a:	462f      	mov	r7, r5
 8028b1c:	686d      	ldr	r5, [r5, #4]
 8028b1e:	f857 4b08 	ldr.w	r4, [r7], #8
 8028b22:	2d00      	cmp	r5, #0
 8028b24:	da06      	bge.n	8028b34 <_svfiprintf_r+0x2e8>
 8028b26:	4264      	negs	r4, r4
 8028b28:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8028b2c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8028b30:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8028b34:	2301      	movs	r3, #1
 8028b36:	e048      	b.n	8028bca <_svfiprintf_r+0x37e>
 8028b38:	462f      	mov	r7, r5
 8028b3a:	f019 0f10 	tst.w	r9, #16
 8028b3e:	f857 5b04 	ldr.w	r5, [r7], #4
 8028b42:	d002      	beq.n	8028b4a <_svfiprintf_r+0x2fe>
 8028b44:	462c      	mov	r4, r5
 8028b46:	17ed      	asrs	r5, r5, #31
 8028b48:	e7eb      	b.n	8028b22 <_svfiprintf_r+0x2d6>
 8028b4a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8028b4e:	d003      	beq.n	8028b58 <_svfiprintf_r+0x30c>
 8028b50:	b22c      	sxth	r4, r5
 8028b52:	f345 35c0 	sbfx	r5, r5, #15, #1
 8028b56:	e7e4      	b.n	8028b22 <_svfiprintf_r+0x2d6>
 8028b58:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8028b5c:	d0f2      	beq.n	8028b44 <_svfiprintf_r+0x2f8>
 8028b5e:	b26c      	sxtb	r4, r5
 8028b60:	f345 15c0 	sbfx	r5, r5, #7, #1
 8028b64:	e7dd      	b.n	8028b22 <_svfiprintf_r+0x2d6>
 8028b66:	f019 0f20 	tst.w	r9, #32
 8028b6a:	d007      	beq.n	8028b7c <_svfiprintf_r+0x330>
 8028b6c:	9a04      	ldr	r2, [sp, #16]
 8028b6e:	682b      	ldr	r3, [r5, #0]
 8028b70:	9904      	ldr	r1, [sp, #16]
 8028b72:	17d2      	asrs	r2, r2, #31
 8028b74:	e9c3 1200 	strd	r1, r2, [r3]
 8028b78:	3504      	adds	r5, #4
 8028b7a:	e690      	b.n	802889e <_svfiprintf_r+0x52>
 8028b7c:	f019 0f10 	tst.w	r9, #16
 8028b80:	d003      	beq.n	8028b8a <_svfiprintf_r+0x33e>
 8028b82:	682b      	ldr	r3, [r5, #0]
 8028b84:	9a04      	ldr	r2, [sp, #16]
 8028b86:	601a      	str	r2, [r3, #0]
 8028b88:	e7f6      	b.n	8028b78 <_svfiprintf_r+0x32c>
 8028b8a:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8028b8e:	d003      	beq.n	8028b98 <_svfiprintf_r+0x34c>
 8028b90:	682b      	ldr	r3, [r5, #0]
 8028b92:	9a04      	ldr	r2, [sp, #16]
 8028b94:	801a      	strh	r2, [r3, #0]
 8028b96:	e7ef      	b.n	8028b78 <_svfiprintf_r+0x32c>
 8028b98:	f419 7f00 	tst.w	r9, #512	@ 0x200
 8028b9c:	d0f1      	beq.n	8028b82 <_svfiprintf_r+0x336>
 8028b9e:	682b      	ldr	r3, [r5, #0]
 8028ba0:	9a04      	ldr	r2, [sp, #16]
 8028ba2:	701a      	strb	r2, [r3, #0]
 8028ba4:	e7e8      	b.n	8028b78 <_svfiprintf_r+0x32c>
 8028ba6:	f049 0910 	orr.w	r9, r9, #16
 8028baa:	f019 0320 	ands.w	r3, r9, #32
 8028bae:	d01e      	beq.n	8028bee <_svfiprintf_r+0x3a2>
 8028bb0:	3507      	adds	r5, #7
 8028bb2:	f025 0507 	bic.w	r5, r5, #7
 8028bb6:	462f      	mov	r7, r5
 8028bb8:	686d      	ldr	r5, [r5, #4]
 8028bba:	f857 4b08 	ldr.w	r4, [r7], #8
 8028bbe:	f429 6980 	bic.w	r9, r9, #1024	@ 0x400
 8028bc2:	2300      	movs	r3, #0
 8028bc4:	2200      	movs	r2, #0
 8028bc6:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8028bca:	9a00      	ldr	r2, [sp, #0]
 8028bcc:	3201      	adds	r2, #1
 8028bce:	f000 8259 	beq.w	8029084 <_svfiprintf_r+0x838>
 8028bd2:	ea54 0205 	orrs.w	r2, r4, r5
 8028bd6:	f029 0a80 	bic.w	sl, r9, #128	@ 0x80
 8028bda:	f040 8258 	bne.w	802908e <_svfiprintf_r+0x842>
 8028bde:	9a00      	ldr	r2, [sp, #0]
 8028be0:	2a00      	cmp	r2, #0
 8028be2:	f000 8199 	beq.w	8028f18 <_svfiprintf_r+0x6cc>
 8028be6:	2b01      	cmp	r3, #1
 8028be8:	f040 8254 	bne.w	8029094 <_svfiprintf_r+0x848>
 8028bec:	e13d      	b.n	8028e6a <_svfiprintf_r+0x61e>
 8028bee:	462f      	mov	r7, r5
 8028bf0:	f019 0510 	ands.w	r5, r9, #16
 8028bf4:	f857 4b04 	ldr.w	r4, [r7], #4
 8028bf8:	d001      	beq.n	8028bfe <_svfiprintf_r+0x3b2>
 8028bfa:	461d      	mov	r5, r3
 8028bfc:	e7df      	b.n	8028bbe <_svfiprintf_r+0x372>
 8028bfe:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8028c02:	d001      	beq.n	8028c08 <_svfiprintf_r+0x3bc>
 8028c04:	b2a4      	uxth	r4, r4
 8028c06:	e7da      	b.n	8028bbe <_svfiprintf_r+0x372>
 8028c08:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8028c0c:	d0d7      	beq.n	8028bbe <_svfiprintf_r+0x372>
 8028c0e:	b2e4      	uxtb	r4, r4
 8028c10:	e7f3      	b.n	8028bfa <_svfiprintf_r+0x3ae>
 8028c12:	462f      	mov	r7, r5
 8028c14:	f647 0330 	movw	r3, #30768	@ 0x7830
 8028c18:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8028c1c:	f857 4b04 	ldr.w	r4, [r7], #4
 8028c20:	4b03      	ldr	r3, [pc, #12]	@ (8028c30 <_svfiprintf_r+0x3e4>)
 8028c22:	9305      	str	r3, [sp, #20]
 8028c24:	2500      	movs	r5, #0
 8028c26:	f049 0902 	orr.w	r9, r9, #2
 8028c2a:	2302      	movs	r3, #2
 8028c2c:	e7ca      	b.n	8028bc4 <_svfiprintf_r+0x378>
 8028c2e:	bf00      	nop
 8028c30:	080346f4 	.word	0x080346f4
 8028c34:	9b00      	ldr	r3, [sp, #0]
 8028c36:	462f      	mov	r7, r5
 8028c38:	1c5a      	adds	r2, r3, #1
 8028c3a:	f04f 0500 	mov.w	r5, #0
 8028c3e:	f857 8b04 	ldr.w	r8, [r7], #4
 8028c42:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8028c46:	f000 80d2 	beq.w	8028dee <_svfiprintf_r+0x5a2>
 8028c4a:	461a      	mov	r2, r3
 8028c4c:	4629      	mov	r1, r5
 8028c4e:	4640      	mov	r0, r8
 8028c50:	f7d7 fad6 	bl	8000200 <memchr>
 8028c54:	4604      	mov	r4, r0
 8028c56:	b118      	cbz	r0, 8028c60 <_svfiprintf_r+0x414>
 8028c58:	eba0 0308 	sub.w	r3, r0, r8
 8028c5c:	9300      	str	r3, [sp, #0]
 8028c5e:	462c      	mov	r4, r5
 8028c60:	9d00      	ldr	r5, [sp, #0]
 8028c62:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8028c66:	42a5      	cmp	r5, r4
 8028c68:	bfb8      	it	lt
 8028c6a:	4625      	movlt	r5, r4
 8028c6c:	b103      	cbz	r3, 8028c70 <_svfiprintf_r+0x424>
 8028c6e:	3501      	adds	r5, #1
 8028c70:	f019 0302 	ands.w	r3, r9, #2
 8028c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c76:	bf18      	it	ne
 8028c78:	3502      	addne	r5, #2
 8028c7a:	f019 0384 	ands.w	r3, r9, #132	@ 0x84
 8028c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8028c80:	d123      	bne.n	8028cca <_svfiprintf_r+0x47e>
 8028c82:	9b03      	ldr	r3, [sp, #12]
 8028c84:	eba3 0a05 	sub.w	sl, r3, r5
 8028c88:	f1ba 0f00 	cmp.w	sl, #0
 8028c8c:	dd1d      	ble.n	8028cca <_svfiprintf_r+0x47e>
 8028c8e:	4bac      	ldr	r3, [pc, #688]	@ (8028f40 <_svfiprintf_r+0x6f4>)
 8028c90:	6033      	str	r3, [r6, #0]
 8028c92:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028c96:	f1ba 0f10 	cmp.w	sl, #16
 8028c9a:	f102 0201 	add.w	r2, r2, #1
 8028c9e:	f106 0008 	add.w	r0, r6, #8
 8028ca2:	f300 8153 	bgt.w	8028f4c <_svfiprintf_r+0x700>
 8028ca6:	eb0c 010a 	add.w	r1, ip, sl
 8028caa:	2a07      	cmp	r2, #7
 8028cac:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028cb0:	f8c6 a004 	str.w	sl, [r6, #4]
 8028cb4:	f340 815e 	ble.w	8028f74 <_svfiprintf_r+0x728>
 8028cb8:	9801      	ldr	r0, [sp, #4]
 8028cba:	aa0e      	add	r2, sp, #56	@ 0x38
 8028cbc:	4659      	mov	r1, fp
 8028cbe:	f7ff fd47 	bl	8028750 <__ssprint_r>
 8028cc2:	2800      	cmp	r0, #0
 8028cc4:	f040 81b9 	bne.w	802903a <_svfiprintf_r+0x7ee>
 8028cc8:	ae11      	add	r6, sp, #68	@ 0x44
 8028cca:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8028cce:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028cd2:	b161      	cbz	r1, 8028cee <_svfiprintf_r+0x4a2>
 8028cd4:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8028cd8:	3301      	adds	r3, #1
 8028cda:	6031      	str	r1, [r6, #0]
 8028cdc:	2101      	movs	r1, #1
 8028cde:	440a      	add	r2, r1
 8028ce0:	2b07      	cmp	r3, #7
 8028ce2:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028ce6:	6071      	str	r1, [r6, #4]
 8028ce8:	f300 8146 	bgt.w	8028f78 <_svfiprintf_r+0x72c>
 8028cec:	3608      	adds	r6, #8
 8028cee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028cf0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028cf4:	b159      	cbz	r1, 8028d0e <_svfiprintf_r+0x4c2>
 8028cf6:	a90d      	add	r1, sp, #52	@ 0x34
 8028cf8:	3301      	adds	r3, #1
 8028cfa:	6031      	str	r1, [r6, #0]
 8028cfc:	2102      	movs	r1, #2
 8028cfe:	440a      	add	r2, r1
 8028d00:	2b07      	cmp	r3, #7
 8028d02:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028d06:	6071      	str	r1, [r6, #4]
 8028d08:	f300 813f 	bgt.w	8028f8a <_svfiprintf_r+0x73e>
 8028d0c:	3608      	adds	r6, #8
 8028d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028d10:	2b80      	cmp	r3, #128	@ 0x80
 8028d12:	d123      	bne.n	8028d5c <_svfiprintf_r+0x510>
 8028d14:	9b03      	ldr	r3, [sp, #12]
 8028d16:	eba3 0a05 	sub.w	sl, r3, r5
 8028d1a:	f1ba 0f00 	cmp.w	sl, #0
 8028d1e:	dd1d      	ble.n	8028d5c <_svfiprintf_r+0x510>
 8028d20:	4b88      	ldr	r3, [pc, #544]	@ (8028f44 <_svfiprintf_r+0x6f8>)
 8028d22:	6033      	str	r3, [r6, #0]
 8028d24:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8028d28:	f1ba 0f10 	cmp.w	sl, #16
 8028d2c:	f102 0201 	add.w	r2, r2, #1
 8028d30:	f106 0008 	add.w	r0, r6, #8
 8028d34:	f300 8132 	bgt.w	8028f9c <_svfiprintf_r+0x750>
 8028d38:	eb0c 010a 	add.w	r1, ip, sl
 8028d3c:	2a07      	cmp	r2, #7
 8028d3e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028d42:	f8c6 a004 	str.w	sl, [r6, #4]
 8028d46:	f340 813d 	ble.w	8028fc4 <_svfiprintf_r+0x778>
 8028d4a:	9801      	ldr	r0, [sp, #4]
 8028d4c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d4e:	4659      	mov	r1, fp
 8028d50:	f7ff fcfe 	bl	8028750 <__ssprint_r>
 8028d54:	2800      	cmp	r0, #0
 8028d56:	f040 8170 	bne.w	802903a <_svfiprintf_r+0x7ee>
 8028d5a:	ae11      	add	r6, sp, #68	@ 0x44
 8028d5c:	9b00      	ldr	r3, [sp, #0]
 8028d5e:	1ae4      	subs	r4, r4, r3
 8028d60:	2c00      	cmp	r4, #0
 8028d62:	dd1a      	ble.n	8028d9a <_svfiprintf_r+0x54e>
 8028d64:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8028d68:	4876      	ldr	r0, [pc, #472]	@ (8028f44 <_svfiprintf_r+0x6f8>)
 8028d6a:	6030      	str	r0, [r6, #0]
 8028d6c:	2c10      	cmp	r4, #16
 8028d6e:	f103 0301 	add.w	r3, r3, #1
 8028d72:	f106 0108 	add.w	r1, r6, #8
 8028d76:	f300 8127 	bgt.w	8028fc8 <_svfiprintf_r+0x77c>
 8028d7a:	6074      	str	r4, [r6, #4]
 8028d7c:	2b07      	cmp	r3, #7
 8028d7e:	4414      	add	r4, r2
 8028d80:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8028d84:	f340 8131 	ble.w	8028fea <_svfiprintf_r+0x79e>
 8028d88:	9801      	ldr	r0, [sp, #4]
 8028d8a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028d8c:	4659      	mov	r1, fp
 8028d8e:	f7ff fcdf 	bl	8028750 <__ssprint_r>
 8028d92:	2800      	cmp	r0, #0
 8028d94:	f040 8151 	bne.w	802903a <_svfiprintf_r+0x7ee>
 8028d98:	ae11      	add	r6, sp, #68	@ 0x44
 8028d9a:	9b00      	ldr	r3, [sp, #0]
 8028d9c:	9a00      	ldr	r2, [sp, #0]
 8028d9e:	6073      	str	r3, [r6, #4]
 8028da0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028da2:	f8c6 8000 	str.w	r8, [r6]
 8028da6:	4413      	add	r3, r2
 8028da8:	9310      	str	r3, [sp, #64]	@ 0x40
 8028daa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028dac:	3301      	adds	r3, #1
 8028dae:	2b07      	cmp	r3, #7
 8028db0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028db2:	f300 811c 	bgt.w	8028fee <_svfiprintf_r+0x7a2>
 8028db6:	f106 0308 	add.w	r3, r6, #8
 8028dba:	f019 0f04 	tst.w	r9, #4
 8028dbe:	f040 811e 	bne.w	8028ffe <_svfiprintf_r+0x7b2>
 8028dc2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8028dc6:	42aa      	cmp	r2, r5
 8028dc8:	bfac      	ite	ge
 8028dca:	189b      	addge	r3, r3, r2
 8028dcc:	195b      	addlt	r3, r3, r5
 8028dce:	9304      	str	r3, [sp, #16]
 8028dd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028dd2:	b13b      	cbz	r3, 8028de4 <_svfiprintf_r+0x598>
 8028dd4:	9801      	ldr	r0, [sp, #4]
 8028dd6:	aa0e      	add	r2, sp, #56	@ 0x38
 8028dd8:	4659      	mov	r1, fp
 8028dda:	f7ff fcb9 	bl	8028750 <__ssprint_r>
 8028dde:	2800      	cmp	r0, #0
 8028de0:	f040 812b 	bne.w	802903a <_svfiprintf_r+0x7ee>
 8028de4:	2300      	movs	r3, #0
 8028de6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028de8:	463d      	mov	r5, r7
 8028dea:	ae11      	add	r6, sp, #68	@ 0x44
 8028dec:	e557      	b.n	802889e <_svfiprintf_r+0x52>
 8028dee:	4640      	mov	r0, r8
 8028df0:	f7d7 fa56 	bl	80002a0 <strlen>
 8028df4:	9000      	str	r0, [sp, #0]
 8028df6:	e732      	b.n	8028c5e <_svfiprintf_r+0x412>
 8028df8:	f049 0910 	orr.w	r9, r9, #16
 8028dfc:	f019 0320 	ands.w	r3, r9, #32
 8028e00:	d008      	beq.n	8028e14 <_svfiprintf_r+0x5c8>
 8028e02:	3507      	adds	r5, #7
 8028e04:	f025 0507 	bic.w	r5, r5, #7
 8028e08:	462f      	mov	r7, r5
 8028e0a:	686d      	ldr	r5, [r5, #4]
 8028e0c:	f857 4b08 	ldr.w	r4, [r7], #8
 8028e10:	2301      	movs	r3, #1
 8028e12:	e6d7      	b.n	8028bc4 <_svfiprintf_r+0x378>
 8028e14:	462f      	mov	r7, r5
 8028e16:	f019 0510 	ands.w	r5, r9, #16
 8028e1a:	f857 4b04 	ldr.w	r4, [r7], #4
 8028e1e:	d001      	beq.n	8028e24 <_svfiprintf_r+0x5d8>
 8028e20:	461d      	mov	r5, r3
 8028e22:	e7f5      	b.n	8028e10 <_svfiprintf_r+0x5c4>
 8028e24:	f019 0340 	ands.w	r3, r9, #64	@ 0x40
 8028e28:	d001      	beq.n	8028e2e <_svfiprintf_r+0x5e2>
 8028e2a:	b2a4      	uxth	r4, r4
 8028e2c:	e7f0      	b.n	8028e10 <_svfiprintf_r+0x5c4>
 8028e2e:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8028e32:	d0ed      	beq.n	8028e10 <_svfiprintf_r+0x5c4>
 8028e34:	b2e4      	uxtb	r4, r4
 8028e36:	e7f3      	b.n	8028e20 <_svfiprintf_r+0x5d4>
 8028e38:	4a43      	ldr	r2, [pc, #268]	@ (8028f48 <_svfiprintf_r+0x6fc>)
 8028e3a:	e5c6      	b.n	80289ca <_svfiprintf_r+0x17e>
 8028e3c:	462f      	mov	r7, r5
 8028e3e:	f019 0510 	ands.w	r5, r9, #16
 8028e42:	f857 4b04 	ldr.w	r4, [r7], #4
 8028e46:	d001      	beq.n	8028e4c <_svfiprintf_r+0x600>
 8028e48:	4615      	mov	r5, r2
 8028e4a:	e5ca      	b.n	80289e2 <_svfiprintf_r+0x196>
 8028e4c:	f019 0240 	ands.w	r2, r9, #64	@ 0x40
 8028e50:	d001      	beq.n	8028e56 <_svfiprintf_r+0x60a>
 8028e52:	b2a4      	uxth	r4, r4
 8028e54:	e5c5      	b.n	80289e2 <_svfiprintf_r+0x196>
 8028e56:	f419 7500 	ands.w	r5, r9, #512	@ 0x200
 8028e5a:	f43f adc2 	beq.w	80289e2 <_svfiprintf_r+0x196>
 8028e5e:	b2e4      	uxtb	r4, r4
 8028e60:	e7f2      	b.n	8028e48 <_svfiprintf_r+0x5fc>
 8028e62:	2c0a      	cmp	r4, #10
 8028e64:	f175 0300 	sbcs.w	r3, r5, #0
 8028e68:	d206      	bcs.n	8028e78 <_svfiprintf_r+0x62c>
 8028e6a:	3430      	adds	r4, #48	@ 0x30
 8028e6c:	b2e4      	uxtb	r4, r4
 8028e6e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8028e72:	f10d 08e7 	add.w	r8, sp, #231	@ 0xe7
 8028e76:	e129      	b.n	80290cc <_svfiprintf_r+0x880>
 8028e78:	ab3a      	add	r3, sp, #232	@ 0xe8
 8028e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8028e7c:	f40a 6380 	and.w	r3, sl, #1024	@ 0x400
 8028e80:	f04f 0900 	mov.w	r9, #0
 8028e84:	930a      	str	r3, [sp, #40]	@ 0x28
 8028e86:	220a      	movs	r2, #10
 8028e88:	2300      	movs	r3, #0
 8028e8a:	4620      	mov	r0, r4
 8028e8c:	4629      	mov	r1, r5
 8028e8e:	f7d7 ff63 	bl	8000d58 <__aeabi_uldivmod>
 8028e92:	460b      	mov	r3, r1
 8028e94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028e96:	900b      	str	r0, [sp, #44]	@ 0x2c
 8028e98:	3230      	adds	r2, #48	@ 0x30
 8028e9a:	f801 2c01 	strb.w	r2, [r1, #-1]
 8028e9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028ea0:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
 8028ea4:	f109 0901 	add.w	r9, r9, #1
 8028ea8:	b1e2      	cbz	r2, 8028ee4 <_svfiprintf_r+0x698>
 8028eaa:	9a06      	ldr	r2, [sp, #24]
 8028eac:	7812      	ldrb	r2, [r2, #0]
 8028eae:	454a      	cmp	r2, r9
 8028eb0:	d118      	bne.n	8028ee4 <_svfiprintf_r+0x698>
 8028eb2:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028eb6:	d015      	beq.n	8028ee4 <_svfiprintf_r+0x698>
 8028eb8:	2c0a      	cmp	r4, #10
 8028eba:	f175 0200 	sbcs.w	r2, r5, #0
 8028ebe:	d311      	bcc.n	8028ee4 <_svfiprintf_r+0x698>
 8028ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8028ec2:	9b07      	ldr	r3, [sp, #28]
 8028ec4:	9908      	ldr	r1, [sp, #32]
 8028ec6:	eba8 0803 	sub.w	r8, r8, r3
 8028eca:	461a      	mov	r2, r3
 8028ecc:	4640      	mov	r0, r8
 8028ece:	f7fc ff86 	bl	8025dde <strncpy>
 8028ed2:	9b06      	ldr	r3, [sp, #24]
 8028ed4:	785a      	ldrb	r2, [r3, #1]
 8028ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028ed8:	b172      	cbz	r2, 8028ef8 <_svfiprintf_r+0x6ac>
 8028eda:	9a06      	ldr	r2, [sp, #24]
 8028edc:	3201      	adds	r2, #1
 8028ede:	9206      	str	r2, [sp, #24]
 8028ee0:	f04f 0900 	mov.w	r9, #0
 8028ee4:	2c0a      	cmp	r4, #10
 8028ee6:	f175 0500 	sbcs.w	r5, r5, #0
 8028eea:	f0c0 80ef 	bcc.w	80290cc <_svfiprintf_r+0x880>
 8028eee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028ef0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8028ef4:	461d      	mov	r5, r3
 8028ef6:	e7c6      	b.n	8028e86 <_svfiprintf_r+0x63a>
 8028ef8:	4691      	mov	r9, r2
 8028efa:	e7f3      	b.n	8028ee4 <_svfiprintf_r+0x698>
 8028efc:	f004 030f 	and.w	r3, r4, #15
 8028f00:	9a05      	ldr	r2, [sp, #20]
 8028f02:	0924      	lsrs	r4, r4, #4
 8028f04:	5cd3      	ldrb	r3, [r2, r3]
 8028f06:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8028f0a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8028f0e:	092d      	lsrs	r5, r5, #4
 8028f10:	ea54 0305 	orrs.w	r3, r4, r5
 8028f14:	d1f2      	bne.n	8028efc <_svfiprintf_r+0x6b0>
 8028f16:	e0d9      	b.n	80290cc <_svfiprintf_r+0x880>
 8028f18:	b923      	cbnz	r3, 8028f24 <_svfiprintf_r+0x6d8>
 8028f1a:	f019 0f01 	tst.w	r9, #1
 8028f1e:	d001      	beq.n	8028f24 <_svfiprintf_r+0x6d8>
 8028f20:	2430      	movs	r4, #48	@ 0x30
 8028f22:	e7a4      	b.n	8028e6e <_svfiprintf_r+0x622>
 8028f24:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 8028f28:	e0d0      	b.n	80290cc <_svfiprintf_r+0x880>
 8028f2a:	2b00      	cmp	r3, #0
 8028f2c:	f000 80a1 	beq.w	8029072 <_svfiprintf_r+0x826>
 8028f30:	2400      	movs	r4, #0
 8028f32:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8028f36:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8028f3a:	462f      	mov	r7, r5
 8028f3c:	e5e0      	b.n	8028b00 <_svfiprintf_r+0x2b4>
 8028f3e:	bf00      	nop
 8028f40:	08034c27 	.word	0x08034c27
 8028f44:	08034c17 	.word	0x08034c17
 8028f48:	08034705 	.word	0x08034705
 8028f4c:	2110      	movs	r1, #16
 8028f4e:	6071      	str	r1, [r6, #4]
 8028f50:	2a07      	cmp	r2, #7
 8028f52:	4461      	add	r1, ip
 8028f54:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028f58:	dd08      	ble.n	8028f6c <_svfiprintf_r+0x720>
 8028f5a:	9801      	ldr	r0, [sp, #4]
 8028f5c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028f5e:	4659      	mov	r1, fp
 8028f60:	f7ff fbf6 	bl	8028750 <__ssprint_r>
 8028f64:	2800      	cmp	r0, #0
 8028f66:	d168      	bne.n	802903a <_svfiprintf_r+0x7ee>
 8028f68:	4b5c      	ldr	r3, [pc, #368]	@ (80290dc <_svfiprintf_r+0x890>)
 8028f6a:	a811      	add	r0, sp, #68	@ 0x44
 8028f6c:	f1aa 0a10 	sub.w	sl, sl, #16
 8028f70:	4606      	mov	r6, r0
 8028f72:	e68d      	b.n	8028c90 <_svfiprintf_r+0x444>
 8028f74:	4606      	mov	r6, r0
 8028f76:	e6a8      	b.n	8028cca <_svfiprintf_r+0x47e>
 8028f78:	9801      	ldr	r0, [sp, #4]
 8028f7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8028f7c:	4659      	mov	r1, fp
 8028f7e:	f7ff fbe7 	bl	8028750 <__ssprint_r>
 8028f82:	2800      	cmp	r0, #0
 8028f84:	d159      	bne.n	802903a <_svfiprintf_r+0x7ee>
 8028f86:	ae11      	add	r6, sp, #68	@ 0x44
 8028f88:	e6b1      	b.n	8028cee <_svfiprintf_r+0x4a2>
 8028f8a:	9801      	ldr	r0, [sp, #4]
 8028f8c:	aa0e      	add	r2, sp, #56	@ 0x38
 8028f8e:	4659      	mov	r1, fp
 8028f90:	f7ff fbde 	bl	8028750 <__ssprint_r>
 8028f94:	2800      	cmp	r0, #0
 8028f96:	d150      	bne.n	802903a <_svfiprintf_r+0x7ee>
 8028f98:	ae11      	add	r6, sp, #68	@ 0x44
 8028f9a:	e6b8      	b.n	8028d0e <_svfiprintf_r+0x4c2>
 8028f9c:	2110      	movs	r1, #16
 8028f9e:	6071      	str	r1, [r6, #4]
 8028fa0:	2a07      	cmp	r2, #7
 8028fa2:	4461      	add	r1, ip
 8028fa4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8028fa8:	dd08      	ble.n	8028fbc <_svfiprintf_r+0x770>
 8028faa:	9801      	ldr	r0, [sp, #4]
 8028fac:	aa0e      	add	r2, sp, #56	@ 0x38
 8028fae:	4659      	mov	r1, fp
 8028fb0:	f7ff fbce 	bl	8028750 <__ssprint_r>
 8028fb4:	2800      	cmp	r0, #0
 8028fb6:	d140      	bne.n	802903a <_svfiprintf_r+0x7ee>
 8028fb8:	4b49      	ldr	r3, [pc, #292]	@ (80290e0 <_svfiprintf_r+0x894>)
 8028fba:	a811      	add	r0, sp, #68	@ 0x44
 8028fbc:	f1aa 0a10 	sub.w	sl, sl, #16
 8028fc0:	4606      	mov	r6, r0
 8028fc2:	e6ae      	b.n	8028d22 <_svfiprintf_r+0x4d6>
 8028fc4:	4606      	mov	r6, r0
 8028fc6:	e6c9      	b.n	8028d5c <_svfiprintf_r+0x510>
 8028fc8:	2010      	movs	r0, #16
 8028fca:	4402      	add	r2, r0
 8028fcc:	2b07      	cmp	r3, #7
 8028fce:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8028fd2:	6070      	str	r0, [r6, #4]
 8028fd4:	dd06      	ble.n	8028fe4 <_svfiprintf_r+0x798>
 8028fd6:	9801      	ldr	r0, [sp, #4]
 8028fd8:	aa0e      	add	r2, sp, #56	@ 0x38
 8028fda:	4659      	mov	r1, fp
 8028fdc:	f7ff fbb8 	bl	8028750 <__ssprint_r>
 8028fe0:	bb58      	cbnz	r0, 802903a <_svfiprintf_r+0x7ee>
 8028fe2:	a911      	add	r1, sp, #68	@ 0x44
 8028fe4:	3c10      	subs	r4, #16
 8028fe6:	460e      	mov	r6, r1
 8028fe8:	e6bc      	b.n	8028d64 <_svfiprintf_r+0x518>
 8028fea:	460e      	mov	r6, r1
 8028fec:	e6d5      	b.n	8028d9a <_svfiprintf_r+0x54e>
 8028fee:	9801      	ldr	r0, [sp, #4]
 8028ff0:	aa0e      	add	r2, sp, #56	@ 0x38
 8028ff2:	4659      	mov	r1, fp
 8028ff4:	f7ff fbac 	bl	8028750 <__ssprint_r>
 8028ff8:	b9f8      	cbnz	r0, 802903a <_svfiprintf_r+0x7ee>
 8028ffa:	ab11      	add	r3, sp, #68	@ 0x44
 8028ffc:	e6dd      	b.n	8028dba <_svfiprintf_r+0x56e>
 8028ffe:	9a03      	ldr	r2, [sp, #12]
 8029000:	1b54      	subs	r4, r2, r5
 8029002:	2c00      	cmp	r4, #0
 8029004:	f77f aedd 	ble.w	8028dc2 <_svfiprintf_r+0x576>
 8029008:	4e34      	ldr	r6, [pc, #208]	@ (80290dc <_svfiprintf_r+0x890>)
 802900a:	f04f 0810 	mov.w	r8, #16
 802900e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8029012:	2c10      	cmp	r4, #16
 8029014:	f102 0201 	add.w	r2, r2, #1
 8029018:	601e      	str	r6, [r3, #0]
 802901a:	dc17      	bgt.n	802904c <_svfiprintf_r+0x800>
 802901c:	605c      	str	r4, [r3, #4]
 802901e:	2a07      	cmp	r2, #7
 8029020:	440c      	add	r4, r1
 8029022:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8029026:	f77f aecc 	ble.w	8028dc2 <_svfiprintf_r+0x576>
 802902a:	9801      	ldr	r0, [sp, #4]
 802902c:	aa0e      	add	r2, sp, #56	@ 0x38
 802902e:	4659      	mov	r1, fp
 8029030:	f7ff fb8e 	bl	8028750 <__ssprint_r>
 8029034:	2800      	cmp	r0, #0
 8029036:	f43f aec4 	beq.w	8028dc2 <_svfiprintf_r+0x576>
 802903a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802903e:	065b      	lsls	r3, r3, #25
 8029040:	f53f ac1c 	bmi.w	802887c <_svfiprintf_r+0x30>
 8029044:	9804      	ldr	r0, [sp, #16]
 8029046:	b03b      	add	sp, #236	@ 0xec
 8029048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802904c:	3110      	adds	r1, #16
 802904e:	2a07      	cmp	r2, #7
 8029050:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8029054:	f8c3 8004 	str.w	r8, [r3, #4]
 8029058:	dc02      	bgt.n	8029060 <_svfiprintf_r+0x814>
 802905a:	3308      	adds	r3, #8
 802905c:	3c10      	subs	r4, #16
 802905e:	e7d6      	b.n	802900e <_svfiprintf_r+0x7c2>
 8029060:	9801      	ldr	r0, [sp, #4]
 8029062:	aa0e      	add	r2, sp, #56	@ 0x38
 8029064:	4659      	mov	r1, fp
 8029066:	f7ff fb73 	bl	8028750 <__ssprint_r>
 802906a:	2800      	cmp	r0, #0
 802906c:	d1e5      	bne.n	802903a <_svfiprintf_r+0x7ee>
 802906e:	ab11      	add	r3, sp, #68	@ 0x44
 8029070:	e7f4      	b.n	802905c <_svfiprintf_r+0x810>
 8029072:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8029074:	2b00      	cmp	r3, #0
 8029076:	d0e0      	beq.n	802903a <_svfiprintf_r+0x7ee>
 8029078:	9801      	ldr	r0, [sp, #4]
 802907a:	aa0e      	add	r2, sp, #56	@ 0x38
 802907c:	4659      	mov	r1, fp
 802907e:	f7ff fb67 	bl	8028750 <__ssprint_r>
 8029082:	e7da      	b.n	802903a <_svfiprintf_r+0x7ee>
 8029084:	ea54 0205 	orrs.w	r2, r4, r5
 8029088:	46ca      	mov	sl, r9
 802908a:	f43f adac 	beq.w	8028be6 <_svfiprintf_r+0x39a>
 802908e:	2b01      	cmp	r3, #1
 8029090:	f43f aee7 	beq.w	8028e62 <_svfiprintf_r+0x616>
 8029094:	2b02      	cmp	r3, #2
 8029096:	f10d 08e8 	add.w	r8, sp, #232	@ 0xe8
 802909a:	f43f af2f 	beq.w	8028efc <_svfiprintf_r+0x6b0>
 802909e:	f004 0307 	and.w	r3, r4, #7
 80290a2:	08e4      	lsrs	r4, r4, #3
 80290a4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80290a8:	08ed      	lsrs	r5, r5, #3
 80290aa:	3330      	adds	r3, #48	@ 0x30
 80290ac:	ea54 0105 	orrs.w	r1, r4, r5
 80290b0:	4642      	mov	r2, r8
 80290b2:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80290b6:	d1f2      	bne.n	802909e <_svfiprintf_r+0x852>
 80290b8:	f01a 0f01 	tst.w	sl, #1
 80290bc:	d006      	beq.n	80290cc <_svfiprintf_r+0x880>
 80290be:	2b30      	cmp	r3, #48	@ 0x30
 80290c0:	d004      	beq.n	80290cc <_svfiprintf_r+0x880>
 80290c2:	2330      	movs	r3, #48	@ 0x30
 80290c4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80290c8:	f1a2 0802 	sub.w	r8, r2, #2
 80290cc:	ab3a      	add	r3, sp, #232	@ 0xe8
 80290ce:	eba3 0308 	sub.w	r3, r3, r8
 80290d2:	9c00      	ldr	r4, [sp, #0]
 80290d4:	9300      	str	r3, [sp, #0]
 80290d6:	46d1      	mov	r9, sl
 80290d8:	e5c2      	b.n	8028c60 <_svfiprintf_r+0x414>
 80290da:	bf00      	nop
 80290dc:	08034c27 	.word	0x08034c27
 80290e0:	08034c17 	.word	0x08034c17

080290e4 <_sungetc_r>:
 80290e4:	b538      	push	{r3, r4, r5, lr}
 80290e6:	1c4b      	adds	r3, r1, #1
 80290e8:	4614      	mov	r4, r2
 80290ea:	d103      	bne.n	80290f4 <_sungetc_r+0x10>
 80290ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80290f0:	4628      	mov	r0, r5
 80290f2:	bd38      	pop	{r3, r4, r5, pc}
 80290f4:	8993      	ldrh	r3, [r2, #12]
 80290f6:	f023 0320 	bic.w	r3, r3, #32
 80290fa:	8193      	strh	r3, [r2, #12]
 80290fc:	6853      	ldr	r3, [r2, #4]
 80290fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8029100:	b2cd      	uxtb	r5, r1
 8029102:	b18a      	cbz	r2, 8029128 <_sungetc_r+0x44>
 8029104:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8029106:	429a      	cmp	r2, r3
 8029108:	dd08      	ble.n	802911c <_sungetc_r+0x38>
 802910a:	6823      	ldr	r3, [r4, #0]
 802910c:	1e5a      	subs	r2, r3, #1
 802910e:	6022      	str	r2, [r4, #0]
 8029110:	f803 5c01 	strb.w	r5, [r3, #-1]
 8029114:	6863      	ldr	r3, [r4, #4]
 8029116:	3301      	adds	r3, #1
 8029118:	6063      	str	r3, [r4, #4]
 802911a:	e7e9      	b.n	80290f0 <_sungetc_r+0xc>
 802911c:	4621      	mov	r1, r4
 802911e:	f005 f8a7 	bl	802e270 <__submore>
 8029122:	2800      	cmp	r0, #0
 8029124:	d0f1      	beq.n	802910a <_sungetc_r+0x26>
 8029126:	e7e1      	b.n	80290ec <_sungetc_r+0x8>
 8029128:	6921      	ldr	r1, [r4, #16]
 802912a:	6822      	ldr	r2, [r4, #0]
 802912c:	b141      	cbz	r1, 8029140 <_sungetc_r+0x5c>
 802912e:	4291      	cmp	r1, r2
 8029130:	d206      	bcs.n	8029140 <_sungetc_r+0x5c>
 8029132:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8029136:	42a9      	cmp	r1, r5
 8029138:	d102      	bne.n	8029140 <_sungetc_r+0x5c>
 802913a:	3a01      	subs	r2, #1
 802913c:	6022      	str	r2, [r4, #0]
 802913e:	e7ea      	b.n	8029116 <_sungetc_r+0x32>
 8029140:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 8029144:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8029148:	6323      	str	r3, [r4, #48]	@ 0x30
 802914a:	2303      	movs	r3, #3
 802914c:	6363      	str	r3, [r4, #52]	@ 0x34
 802914e:	4623      	mov	r3, r4
 8029150:	f803 5f42 	strb.w	r5, [r3, #66]!
 8029154:	6023      	str	r3, [r4, #0]
 8029156:	2301      	movs	r3, #1
 8029158:	e7de      	b.n	8029118 <_sungetc_r+0x34>

0802915a <__ssrefill_r>:
 802915a:	b510      	push	{r4, lr}
 802915c:	460c      	mov	r4, r1
 802915e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8029160:	b169      	cbz	r1, 802917e <__ssrefill_r+0x24>
 8029162:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8029166:	4299      	cmp	r1, r3
 8029168:	d001      	beq.n	802916e <__ssrefill_r+0x14>
 802916a:	f7fe ff2f 	bl	8027fcc <_free_r>
 802916e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8029170:	6063      	str	r3, [r4, #4]
 8029172:	2000      	movs	r0, #0
 8029174:	6320      	str	r0, [r4, #48]	@ 0x30
 8029176:	b113      	cbz	r3, 802917e <__ssrefill_r+0x24>
 8029178:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 802917a:	6023      	str	r3, [r4, #0]
 802917c:	bd10      	pop	{r4, pc}
 802917e:	6923      	ldr	r3, [r4, #16]
 8029180:	6023      	str	r3, [r4, #0]
 8029182:	2300      	movs	r3, #0
 8029184:	6063      	str	r3, [r4, #4]
 8029186:	89a3      	ldrh	r3, [r4, #12]
 8029188:	f043 0320 	orr.w	r3, r3, #32
 802918c:	81a3      	strh	r3, [r4, #12]
 802918e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8029192:	e7f3      	b.n	802917c <__ssrefill_r+0x22>

08029194 <_sfread_r>:
 8029194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029198:	461f      	mov	r7, r3
 802919a:	4613      	mov	r3, r2
 802919c:	437b      	muls	r3, r7
 802919e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80291a0:	9000      	str	r0, [sp, #0]
 80291a2:	4688      	mov	r8, r1
 80291a4:	4691      	mov	r9, r2
 80291a6:	d028      	beq.n	80291fa <_sfread_r+0x66>
 80291a8:	461e      	mov	r6, r3
 80291aa:	f04f 0b00 	mov.w	fp, #0
 80291ae:	e9d4 1500 	ldrd	r1, r5, [r4]
 80291b2:	42b5      	cmp	r5, r6
 80291b4:	d30b      	bcc.n	80291ce <_sfread_r+0x3a>
 80291b6:	4632      	mov	r2, r6
 80291b8:	4640      	mov	r0, r8
 80291ba:	f7fe f805 	bl	80271c8 <memcpy>
 80291be:	6862      	ldr	r2, [r4, #4]
 80291c0:	6821      	ldr	r1, [r4, #0]
 80291c2:	1b92      	subs	r2, r2, r6
 80291c4:	4431      	add	r1, r6
 80291c6:	6062      	str	r2, [r4, #4]
 80291c8:	6021      	str	r1, [r4, #0]
 80291ca:	463b      	mov	r3, r7
 80291cc:	e015      	b.n	80291fa <_sfread_r+0x66>
 80291ce:	462a      	mov	r2, r5
 80291d0:	4640      	mov	r0, r8
 80291d2:	9301      	str	r3, [sp, #4]
 80291d4:	f7fd fff8 	bl	80271c8 <memcpy>
 80291d8:	6822      	ldr	r2, [r4, #0]
 80291da:	9800      	ldr	r0, [sp, #0]
 80291dc:	442a      	add	r2, r5
 80291de:	e9c4 2b00 	strd	r2, fp, [r4]
 80291e2:	4621      	mov	r1, r4
 80291e4:	f7ff ffb9 	bl	802915a <__ssrefill_r>
 80291e8:	44a8      	add	r8, r5
 80291ea:	9b01      	ldr	r3, [sp, #4]
 80291ec:	eba6 0a05 	sub.w	sl, r6, r5
 80291f0:	b138      	cbz	r0, 8029202 <_sfread_r+0x6e>
 80291f2:	441d      	add	r5, r3
 80291f4:	1bad      	subs	r5, r5, r6
 80291f6:	fbb5 f3f9 	udiv	r3, r5, r9
 80291fa:	4618      	mov	r0, r3
 80291fc:	b003      	add	sp, #12
 80291fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029202:	4656      	mov	r6, sl
 8029204:	e7d3      	b.n	80291ae <_sfread_r+0x1a>
	...

08029208 <__ssvfiscanf_r>:
 8029208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802920c:	b0df      	sub	sp, #380	@ 0x17c
 802920e:	af02      	add	r7, sp, #8
 8029210:	460c      	mov	r4, r1
 8029212:	623b      	str	r3, [r7, #32]
 8029214:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8029218:	6278      	str	r0, [r7, #36]	@ 0x24
 802921a:	049d      	lsls	r5, r3, #18
 802921c:	60ba      	str	r2, [r7, #8]
 802921e:	d406      	bmi.n	802922e <__ssvfiscanf_r+0x26>
 8029220:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8029224:	818b      	strh	r3, [r1, #12]
 8029226:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8029228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802922c:	664b      	str	r3, [r1, #100]	@ 0x64
 802922e:	2300      	movs	r3, #0
 8029230:	e9c7 3305 	strd	r3, r3, [r7, #20]
 8029234:	60fb      	str	r3, [r7, #12]
 8029236:	469b      	mov	fp, r3
 8029238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802923a:	61fb      	str	r3, [r7, #28]
 802923c:	e005      	b.n	802924a <__ssvfiscanf_r+0x42>
 802923e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029240:	4621      	mov	r1, r4
 8029242:	f7ff ff8a 	bl	802915a <__ssrefill_r>
 8029246:	b168      	cbz	r0, 8029264 <__ssvfiscanf_r+0x5c>
 8029248:	60bd      	str	r5, [r7, #8]
 802924a:	68bd      	ldr	r5, [r7, #8]
 802924c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8029250:	637b      	str	r3, [r7, #52]	@ 0x34
 8029252:	b333      	cbz	r3, 80292a2 <__ssvfiscanf_r+0x9a>
 8029254:	4a75      	ldr	r2, [pc, #468]	@ (802942c <__ssvfiscanf_r+0x224>)
 8029256:	5cd6      	ldrb	r6, [r2, r3]
 8029258:	f016 0608 	ands.w	r6, r6, #8
 802925c:	d011      	beq.n	8029282 <__ssvfiscanf_r+0x7a>
 802925e:	6863      	ldr	r3, [r4, #4]
 8029260:	2b00      	cmp	r3, #0
 8029262:	ddec      	ble.n	802923e <__ssvfiscanf_r+0x36>
 8029264:	6823      	ldr	r3, [r4, #0]
 8029266:	4971      	ldr	r1, [pc, #452]	@ (802942c <__ssvfiscanf_r+0x224>)
 8029268:	781a      	ldrb	r2, [r3, #0]
 802926a:	5c8a      	ldrb	r2, [r1, r2]
 802926c:	0710      	lsls	r0, r2, #28
 802926e:	d5eb      	bpl.n	8029248 <__ssvfiscanf_r+0x40>
 8029270:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029272:	3201      	adds	r2, #1
 8029274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029276:	6862      	ldr	r2, [r4, #4]
 8029278:	3301      	adds	r3, #1
 802927a:	3a01      	subs	r2, #1
 802927c:	6062      	str	r2, [r4, #4]
 802927e:	6023      	str	r3, [r4, #0]
 8029280:	e7ed      	b.n	802925e <__ssvfiscanf_r+0x56>
 8029282:	2b25      	cmp	r3, #37	@ 0x25
 8029284:	d15f      	bne.n	8029346 <__ssvfiscanf_r+0x13e>
 8029286:	62be      	str	r6, [r7, #40]	@ 0x28
 8029288:	462a      	mov	r2, r5
 802928a:	f812 3b01 	ldrb.w	r3, [r2], #1
 802928e:	60ba      	str	r2, [r7, #8]
 8029290:	2b7a      	cmp	r3, #122	@ 0x7a
 8029292:	d806      	bhi.n	80292a2 <__ssvfiscanf_r+0x9a>
 8029294:	2b42      	cmp	r3, #66	@ 0x42
 8029296:	d809      	bhi.n	80292ac <__ssvfiscanf_r+0xa4>
 8029298:	2b2a      	cmp	r3, #42	@ 0x2a
 802929a:	d079      	beq.n	8029390 <__ssvfiscanf_r+0x188>
 802929c:	d844      	bhi.n	8029328 <__ssvfiscanf_r+0x120>
 802929e:	2b25      	cmp	r3, #37	@ 0x25
 80292a0:	d050      	beq.n	8029344 <__ssvfiscanf_r+0x13c>
 80292a2:	f1bb 0f00 	cmp.w	fp, #0
 80292a6:	f000 810e 	beq.w	80294c6 <__ssvfiscanf_r+0x2be>
 80292aa:	e107      	b.n	80294bc <__ssvfiscanf_r+0x2b4>
 80292ac:	3b43      	subs	r3, #67	@ 0x43
 80292ae:	2b37      	cmp	r3, #55	@ 0x37
 80292b0:	f200 80fd 	bhi.w	80294ae <__ssvfiscanf_r+0x2a6>
 80292b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80292b8:	00a40117 	.word	0x00a40117
 80292bc:	00fb00fb 	.word	0x00fb00fb
 80292c0:	00fb00fb 	.word	0x00fb00fb
 80292c4:	00fb00fb 	.word	0x00fb00fb
 80292c8:	008e00fb 	.word	0x008e00fb
 80292cc:	00fb00fb 	.word	0x00fb00fb
 80292d0:	00fb00a8 	.word	0x00fb00a8
 80292d4:	00fb00fb 	.word	0x00fb00fb
 80292d8:	00fb00c0 	.word	0x00fb00c0
 80292dc:	00fb00fb 	.word	0x00fb00fb
 80292e0:	00b400fb 	.word	0x00b400fb
 80292e4:	00fb00fb 	.word	0x00fb00fb
 80292e8:	00fb010d 	.word	0x00fb010d
 80292ec:	00fb00fb 	.word	0x00fb00fb
 80292f0:	00fb00fb 	.word	0x00fb00fb
 80292f4:	00fb00fb 	.word	0x00fb00fb
 80292f8:	00a60119 	.word	0x00a60119
 80292fc:	00fb00fb 	.word	0x00fb00fb
 8029300:	008100fb 	.word	0x008100fb
 8029304:	008e013e 	.word	0x008e013e
 8029308:	007300fb 	.word	0x007300fb
 802930c:	01200095 	.word	0x01200095
 8029310:	011d00aa 	.word	0x011d00aa
 8029314:	00fb00fb 	.word	0x00fb00fb
 8029318:	009200c2 	.word	0x009200c2
 802931c:	00fb00b0 	.word	0x00fb00b0
 8029320:	00b400fb 	.word	0x00b400fb
 8029324:	009200fb 	.word	0x009200fb
 8029328:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 802932c:	2a09      	cmp	r2, #9
 802932e:	d8b8      	bhi.n	80292a2 <__ssvfiscanf_r+0x9a>
 8029330:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8029334:	d1b5      	bne.n	80292a2 <__ssvfiscanf_r+0x9a>
 8029336:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8029338:	220a      	movs	r2, #10
 802933a:	fb02 3301 	mla	r3, r2, r1, r3
 802933e:	3b30      	subs	r3, #48	@ 0x30
 8029340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029342:	e02a      	b.n	802939a <__ssvfiscanf_r+0x192>
 8029344:	68bd      	ldr	r5, [r7, #8]
 8029346:	6863      	ldr	r3, [r4, #4]
 8029348:	2b00      	cmp	r3, #0
 802934a:	dd0e      	ble.n	802936a <__ssvfiscanf_r+0x162>
 802934c:	6823      	ldr	r3, [r4, #0]
 802934e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8029352:	7819      	ldrb	r1, [r3, #0]
 8029354:	4291      	cmp	r1, r2
 8029356:	d1a4      	bne.n	80292a2 <__ssvfiscanf_r+0x9a>
 8029358:	3301      	adds	r3, #1
 802935a:	6862      	ldr	r2, [r4, #4]
 802935c:	6023      	str	r3, [r4, #0]
 802935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029360:	3a01      	subs	r2, #1
 8029362:	3301      	adds	r3, #1
 8029364:	6062      	str	r2, [r4, #4]
 8029366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029368:	e76e      	b.n	8029248 <__ssvfiscanf_r+0x40>
 802936a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802936c:	4621      	mov	r1, r4
 802936e:	f7ff fef4 	bl	802915a <__ssrefill_r>
 8029372:	2800      	cmp	r0, #0
 8029374:	d0ea      	beq.n	802934c <__ssvfiscanf_r+0x144>
 8029376:	69fb      	ldr	r3, [r7, #28]
 8029378:	b113      	cbz	r3, 8029380 <__ssvfiscanf_r+0x178>
 802937a:	89a3      	ldrh	r3, [r4, #12]
 802937c:	065b      	lsls	r3, r3, #25
 802937e:	d590      	bpl.n	80292a2 <__ssvfiscanf_r+0x9a>
 8029380:	f1bb 0f00 	cmp.w	fp, #0
 8029384:	f040 8654 	bne.w	802a030 <__ssvfiscanf_r+0xe28>
 8029388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802938c:	61fb      	str	r3, [r7, #28]
 802938e:	e09a      	b.n	80294c6 <__ssvfiscanf_r+0x2be>
 8029390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029392:	4333      	orrs	r3, r6
 8029394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029396:	d184      	bne.n	80292a2 <__ssvfiscanf_r+0x9a>
 8029398:	2610      	movs	r6, #16
 802939a:	68bd      	ldr	r5, [r7, #8]
 802939c:	e774      	b.n	8029288 <__ssvfiscanf_r+0x80>
 802939e:	0731      	lsls	r1, r6, #28
 80293a0:	f47f af7f 	bne.w	80292a2 <__ssvfiscanf_r+0x9a>
 80293a4:	786b      	ldrb	r3, [r5, #1]
 80293a6:	2b6c      	cmp	r3, #108	@ 0x6c
 80293a8:	d104      	bne.n	80293b4 <__ssvfiscanf_r+0x1ac>
 80293aa:	1cab      	adds	r3, r5, #2
 80293ac:	60bb      	str	r3, [r7, #8]
 80293ae:	f046 0602 	orr.w	r6, r6, #2
 80293b2:	e7f2      	b.n	802939a <__ssvfiscanf_r+0x192>
 80293b4:	f046 0601 	orr.w	r6, r6, #1
 80293b8:	e7ef      	b.n	802939a <__ssvfiscanf_r+0x192>
 80293ba:	0732      	lsls	r2, r6, #28
 80293bc:	f47f af71 	bne.w	80292a2 <__ssvfiscanf_r+0x9a>
 80293c0:	786b      	ldrb	r3, [r5, #1]
 80293c2:	2b68      	cmp	r3, #104	@ 0x68
 80293c4:	bf03      	ittte	eq
 80293c6:	1cab      	addeq	r3, r5, #2
 80293c8:	60bb      	streq	r3, [r7, #8]
 80293ca:	f046 0608 	orreq.w	r6, r6, #8
 80293ce:	f046 0604 	orrne.w	r6, r6, #4
 80293d2:	e7e2      	b.n	802939a <__ssvfiscanf_r+0x192>
 80293d4:	0733      	lsls	r3, r6, #28
 80293d6:	f47f af64 	bne.w	80292a2 <__ssvfiscanf_r+0x9a>
 80293da:	e7e8      	b.n	80293ae <__ssvfiscanf_r+0x1a6>
 80293dc:	0735      	lsls	r5, r6, #28
 80293de:	d0dc      	beq.n	802939a <__ssvfiscanf_r+0x192>
 80293e0:	e75f      	b.n	80292a2 <__ssvfiscanf_r+0x9a>
 80293e2:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 80293e6:	f47f af5c 	bne.w	80292a2 <__ssvfiscanf_r+0x9a>
 80293ea:	f1bb 0f00 	cmp.w	fp, #0
 80293ee:	d104      	bne.n	80293fa <__ssvfiscanf_r+0x1f2>
 80293f0:	b082      	sub	sp, #8
 80293f2:	f10d 0b08 	add.w	fp, sp, #8
 80293f6:	e9cb 3300 	strd	r3, r3, [fp]
 80293fa:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 80293fe:	e7cc      	b.n	802939a <__ssvfiscanf_r+0x192>
 8029400:	f046 0601 	orr.w	r6, r6, #1
 8029404:	4b0a      	ldr	r3, [pc, #40]	@ (8029430 <__ssvfiscanf_r+0x228>)
 8029406:	e008      	b.n	802941a <__ssvfiscanf_r+0x212>
 8029408:	f046 0601 	orr.w	r6, r6, #1
 802940c:	4b09      	ldr	r3, [pc, #36]	@ (8029434 <__ssvfiscanf_r+0x22c>)
 802940e:	60fb      	str	r3, [r7, #12]
 8029410:	2308      	movs	r3, #8
 8029412:	617b      	str	r3, [r7, #20]
 8029414:	2503      	movs	r5, #3
 8029416:	e012      	b.n	802943e <__ssvfiscanf_r+0x236>
 8029418:	4b06      	ldr	r3, [pc, #24]	@ (8029434 <__ssvfiscanf_r+0x22c>)
 802941a:	60fb      	str	r3, [r7, #12]
 802941c:	230a      	movs	r3, #10
 802941e:	e7f8      	b.n	8029412 <__ssvfiscanf_r+0x20a>
 8029420:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8029424:	4b03      	ldr	r3, [pc, #12]	@ (8029434 <__ssvfiscanf_r+0x22c>)
 8029426:	60fb      	str	r3, [r7, #12]
 8029428:	2310      	movs	r3, #16
 802942a:	e7f2      	b.n	8029412 <__ssvfiscanf_r+0x20a>
 802942c:	08034aa1 	.word	0x08034aa1
 8029430:	08025459 	.word	0x08025459
 8029434:	0802e259 	.word	0x0802e259
 8029438:	f046 0601 	orr.w	r6, r6, #1
 802943c:	2502      	movs	r5, #2
 802943e:	6863      	ldr	r3, [r4, #4]
 8029440:	2b00      	cmp	r3, #0
 8029442:	dd7b      	ble.n	802953c <__ssvfiscanf_r+0x334>
 8029444:	0671      	lsls	r1, r6, #25
 8029446:	d407      	bmi.n	8029458 <__ssvfiscanf_r+0x250>
 8029448:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 80297d4 <__ssvfiscanf_r+0x5cc>
 802944c:	6823      	ldr	r3, [r4, #0]
 802944e:	781a      	ldrb	r2, [r3, #0]
 8029450:	f818 2002 	ldrb.w	r2, [r8, r2]
 8029454:	0712      	lsls	r2, r2, #28
 8029456:	d479      	bmi.n	802954c <__ssvfiscanf_r+0x344>
 8029458:	2d02      	cmp	r5, #2
 802945a:	f000 836f 	beq.w	8029b3c <__ssvfiscanf_r+0x934>
 802945e:	2d03      	cmp	r5, #3
 8029460:	f000 84f6 	beq.w	8029e50 <__ssvfiscanf_r+0xc48>
 8029464:	f006 0310 	and.w	r3, r6, #16
 8029468:	2d01      	cmp	r5, #1
 802946a:	613b      	str	r3, [r7, #16]
 802946c:	f006 0501 	and.w	r5, r6, #1
 8029470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029472:	f000 81b1 	beq.w	80297d8 <__ssvfiscanf_r+0x5d0>
 8029476:	2b01      	cmp	r3, #1
 8029478:	bf38      	it	cc
 802947a:	2301      	movcc	r3, #1
 802947c:	4698      	mov	r8, r3
 802947e:	693b      	ldr	r3, [r7, #16]
 8029480:	2d00      	cmp	r5, #0
 8029482:	f000 813b 	beq.w	80296fc <__ssvfiscanf_r+0x4f4>
 8029486:	2b00      	cmp	r3, #0
 8029488:	f040 80d8 	bne.w	802963c <__ssvfiscanf_r+0x434>
 802948c:	6a3b      	ldr	r3, [r7, #32]
 802948e:	0636      	lsls	r6, r6, #24
 8029490:	f853 5b04 	ldr.w	r5, [r3], #4
 8029494:	623b      	str	r3, [r7, #32]
 8029496:	f140 80d7 	bpl.w	8029648 <__ssvfiscanf_r+0x440>
 802949a:	b145      	cbz	r5, 80294ae <__ssvfiscanf_r+0x2a6>
 802949c:	2080      	movs	r0, #128	@ 0x80
 802949e:	f7fe fe9d 	bl	80281dc <malloc>
 80294a2:	4606      	mov	r6, r0
 80294a4:	2800      	cmp	r0, #0
 80294a6:	d164      	bne.n	8029572 <__ssvfiscanf_r+0x36a>
 80294a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80294ac:	61fb      	str	r3, [r7, #28]
 80294ae:	f1bb 0f00 	cmp.w	fp, #0
 80294b2:	d008      	beq.n	80294c6 <__ssvfiscanf_r+0x2be>
 80294b4:	69fb      	ldr	r3, [r7, #28]
 80294b6:	3301      	adds	r3, #1
 80294b8:	f000 85ba 	beq.w	802a030 <__ssvfiscanf_r+0xe28>
 80294bc:	f8db 0000 	ldr.w	r0, [fp]
 80294c0:	b108      	cbz	r0, 80294c6 <__ssvfiscanf_r+0x2be>
 80294c2:	f7fe fe93 	bl	80281ec <free>
 80294c6:	69f8      	ldr	r0, [r7, #28]
 80294c8:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 80294cc:	46bd      	mov	sp, r7
 80294ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80294d2:	68b9      	ldr	r1, [r7, #8]
 80294d4:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80294d8:	f003 fe67 	bl	802d1aa <__sccl>
 80294dc:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80294e0:	60b8      	str	r0, [r7, #8]
 80294e2:	2501      	movs	r5, #1
 80294e4:	e7ab      	b.n	802943e <__ssvfiscanf_r+0x236>
 80294e6:	f046 0601 	orr.w	r6, r6, #1
 80294ea:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 80294ee:	2500      	movs	r5, #0
 80294f0:	e7a5      	b.n	802943e <__ssvfiscanf_r+0x236>
 80294f2:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 80294f6:	e795      	b.n	8029424 <__ssvfiscanf_r+0x21c>
 80294f8:	06f0      	lsls	r0, r6, #27
 80294fa:	f53f aea6 	bmi.w	802924a <__ssvfiscanf_r+0x42>
 80294fe:	6a3a      	ldr	r2, [r7, #32]
 8029500:	0731      	lsls	r1, r6, #28
 8029502:	f852 3b04 	ldr.w	r3, [r2], #4
 8029506:	623a      	str	r2, [r7, #32]
 8029508:	d502      	bpl.n	8029510 <__ssvfiscanf_r+0x308>
 802950a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802950c:	701a      	strb	r2, [r3, #0]
 802950e:	e69c      	b.n	802924a <__ssvfiscanf_r+0x42>
 8029510:	0772      	lsls	r2, r6, #29
 8029512:	d502      	bpl.n	802951a <__ssvfiscanf_r+0x312>
 8029514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029516:	801a      	strh	r2, [r3, #0]
 8029518:	e697      	b.n	802924a <__ssvfiscanf_r+0x42>
 802951a:	07f5      	lsls	r5, r6, #31
 802951c:	d502      	bpl.n	8029524 <__ssvfiscanf_r+0x31c>
 802951e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029520:	601a      	str	r2, [r3, #0]
 8029522:	e692      	b.n	802924a <__ssvfiscanf_r+0x42>
 8029524:	07b0      	lsls	r0, r6, #30
 8029526:	d5fa      	bpl.n	802951e <__ssvfiscanf_r+0x316>
 8029528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802952a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802952c:	17d2      	asrs	r2, r2, #31
 802952e:	e9c3 1200 	strd	r1, r2, [r3]
 8029532:	e68a      	b.n	802924a <__ssvfiscanf_r+0x42>
 8029534:	4ba6      	ldr	r3, [pc, #664]	@ (80297d0 <__ssvfiscanf_r+0x5c8>)
 8029536:	60fb      	str	r3, [r7, #12]
 8029538:	2300      	movs	r3, #0
 802953a:	e76a      	b.n	8029412 <__ssvfiscanf_r+0x20a>
 802953c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802953e:	4621      	mov	r1, r4
 8029540:	f7ff fe0b 	bl	802915a <__ssrefill_r>
 8029544:	2800      	cmp	r0, #0
 8029546:	f43f af7d 	beq.w	8029444 <__ssvfiscanf_r+0x23c>
 802954a:	e714      	b.n	8029376 <__ssvfiscanf_r+0x16e>
 802954c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802954e:	3201      	adds	r2, #1
 8029550:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029552:	6862      	ldr	r2, [r4, #4]
 8029554:	3a01      	subs	r2, #1
 8029556:	2a00      	cmp	r2, #0
 8029558:	6062      	str	r2, [r4, #4]
 802955a:	dd02      	ble.n	8029562 <__ssvfiscanf_r+0x35a>
 802955c:	3301      	adds	r3, #1
 802955e:	6023      	str	r3, [r4, #0]
 8029560:	e774      	b.n	802944c <__ssvfiscanf_r+0x244>
 8029562:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029564:	4621      	mov	r1, r4
 8029566:	f7ff fdf8 	bl	802915a <__ssrefill_r>
 802956a:	2800      	cmp	r0, #0
 802956c:	f43f af6e 	beq.w	802944c <__ssvfiscanf_r+0x244>
 8029570:	e701      	b.n	8029376 <__ssvfiscanf_r+0x16e>
 8029572:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029576:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802957a:	6028      	str	r0, [r5, #0]
 802957c:	4599      	cmp	r9, r3
 802957e:	d314      	bcc.n	80295aa <__ssvfiscanf_r+0x3a2>
 8029580:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8029584:	4293      	cmp	r3, r2
 8029586:	f200 8553 	bhi.w	802a030 <__ssvfiscanf_r+0xe28>
 802958a:	3308      	adds	r3, #8
 802958c:	fa1f fa83 	uxth.w	sl, r3
 8029590:	f8db 0000 	ldr.w	r0, [fp]
 8029594:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8029598:	f003 fdaa 	bl	802d0f0 <realloc>
 802959c:	2800      	cmp	r0, #0
 802959e:	f000 8547 	beq.w	802a030 <__ssvfiscanf_r+0xe28>
 80295a2:	f8cb 0000 	str.w	r0, [fp]
 80295a6:	f8ab a004 	strh.w	sl, [fp, #4]
 80295aa:	f8db 3000 	ldr.w	r3, [fp]
 80295ae:	f109 0201 	add.w	r2, r9, #1
 80295b2:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80295b6:	46aa      	mov	sl, r5
 80295b8:	f8ab 2006 	strh.w	r2, [fp, #6]
 80295bc:	4635      	mov	r5, r6
 80295be:	f04f 0920 	mov.w	r9, #32
 80295c2:	2200      	movs	r2, #0
 80295c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80295c6:	f7fd fd4b 	bl	8027060 <__locale_mb_cur_max>
 80295ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80295cc:	4290      	cmp	r0, r2
 80295ce:	f43f aed2 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 80295d2:	6821      	ldr	r1, [r4, #0]
 80295d4:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 80295d8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80295dc:	f80c 0002 	strb.w	r0, [ip, r2]
 80295e0:	1c53      	adds	r3, r2, #1
 80295e2:	6862      	ldr	r2, [r4, #4]
 80295e4:	3a01      	subs	r2, #1
 80295e6:	e9c4 1200 	strd	r1, r2, [r4]
 80295ea:	69ba      	ldr	r2, [r7, #24]
 80295ec:	2a03      	cmp	r2, #3
 80295ee:	d102      	bne.n	80295f6 <__ssvfiscanf_r+0x3ee>
 80295f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80295f2:	2a04      	cmp	r2, #4
 80295f4:	d007      	beq.n	8029606 <__ssvfiscanf_r+0x3fe>
 80295f6:	2208      	movs	r2, #8
 80295f8:	2100      	movs	r1, #0
 80295fa:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80295fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029600:	f7fc fba6 	bl	8025d50 <memset>
 8029604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029606:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 802960a:	9200      	str	r2, [sp, #0]
 802960c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802960e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029610:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8029614:	4629      	mov	r1, r5
 8029616:	f005 f925 	bl	802e864 <_mbrtowc_r>
 802961a:	4603      	mov	r3, r0
 802961c:	61b8      	str	r0, [r7, #24]
 802961e:	1c58      	adds	r0, r3, #1
 8029620:	f43f aea9 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 8029624:	461a      	mov	r2, r3
 8029626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029628:	b9b2      	cbnz	r2, 8029658 <__ssvfiscanf_r+0x450>
 802962a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802962c:	441a      	add	r2, r3
 802962e:	4613      	mov	r3, r2
 8029630:	693a      	ldr	r2, [r7, #16]
 8029632:	b172      	cbz	r2, 8029652 <__ssvfiscanf_r+0x44a>
 8029634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029636:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802963a:	e019      	b.n	8029670 <__ssvfiscanf_r+0x468>
 802963c:	f04f 0900 	mov.w	r9, #0
 8029640:	464e      	mov	r6, r9
 8029642:	46ca      	mov	sl, r9
 8029644:	464d      	mov	r5, r9
 8029646:	e7bc      	b.n	80295c2 <__ssvfiscanf_r+0x3ba>
 8029648:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802964c:	464e      	mov	r6, r9
 802964e:	46ca      	mov	sl, r9
 8029650:	e7b7      	b.n	80295c2 <__ssvfiscanf_r+0x3ba>
 8029652:	693a      	ldr	r2, [r7, #16]
 8029654:	602a      	str	r2, [r5, #0]
 8029656:	e7ed      	b.n	8029634 <__ssvfiscanf_r+0x42c>
 8029658:	69ba      	ldr	r2, [r7, #24]
 802965a:	3202      	adds	r2, #2
 802965c:	d024      	beq.n	80296a8 <__ssvfiscanf_r+0x4a0>
 802965e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029660:	441a      	add	r2, r3
 8029662:	69bb      	ldr	r3, [r7, #24]
 8029664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029666:	2b03      	cmp	r3, #3
 8029668:	d1e5      	bne.n	8029636 <__ssvfiscanf_r+0x42e>
 802966a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802966c:	2b04      	cmp	r3, #4
 802966e:	d1e2      	bne.n	8029636 <__ssvfiscanf_r+0x42e>
 8029670:	693b      	ldr	r3, [r7, #16]
 8029672:	b9bb      	cbnz	r3, 80296a4 <__ssvfiscanf_r+0x49c>
 8029674:	f1ba 0f00 	cmp.w	sl, #0
 8029678:	d013      	beq.n	80296a2 <__ssvfiscanf_r+0x49a>
 802967a:	1bab      	subs	r3, r5, r6
 802967c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8029680:	d80f      	bhi.n	80296a2 <__ssvfiscanf_r+0x49a>
 8029682:	4630      	mov	r0, r6
 8029684:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8029688:	62bb      	str	r3, [r7, #40]	@ 0x28
 802968a:	f003 fd31 	bl	802d0f0 <realloc>
 802968e:	4606      	mov	r6, r0
 8029690:	2800      	cmp	r0, #0
 8029692:	f43f af09 	beq.w	80294a8 <__ssvfiscanf_r+0x2a0>
 8029696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029698:	f8ca 0000 	str.w	r0, [sl]
 802969c:	18c5      	adds	r5, r0, r3
 802969e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80296a2:	3504      	adds	r5, #4
 80296a4:	2200      	movs	r2, #0
 80296a6:	e000      	b.n	80296aa <__ssvfiscanf_r+0x4a2>
 80296a8:	461a      	mov	r2, r3
 80296aa:	6863      	ldr	r3, [r4, #4]
 80296ac:	2b00      	cmp	r3, #0
 80296ae:	dc13      	bgt.n	80296d8 <__ssvfiscanf_r+0x4d0>
 80296b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80296b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80296b4:	4621      	mov	r1, r4
 80296b6:	f7ff fd50 	bl	802915a <__ssrefill_r>
 80296ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80296bc:	b160      	cbz	r0, 80296d8 <__ssvfiscanf_r+0x4d0>
 80296be:	2a00      	cmp	r2, #0
 80296c0:	f47f ae59 	bne.w	8029376 <__ssvfiscanf_r+0x16e>
 80296c4:	f1ba 0f00 	cmp.w	sl, #0
 80296c8:	d10b      	bne.n	80296e2 <__ssvfiscanf_r+0x4da>
 80296ca:	693b      	ldr	r3, [r7, #16]
 80296cc:	2b00      	cmp	r3, #0
 80296ce:	f47f adbc 	bne.w	802924a <__ssvfiscanf_r+0x42>
 80296d2:	69fb      	ldr	r3, [r7, #28]
 80296d4:	3301      	adds	r3, #1
 80296d6:	e5b0      	b.n	802923a <__ssvfiscanf_r+0x32>
 80296d8:	f1b8 0f00 	cmp.w	r8, #0
 80296dc:	f47f af72 	bne.w	80295c4 <__ssvfiscanf_r+0x3bc>
 80296e0:	e7f0      	b.n	80296c4 <__ssvfiscanf_r+0x4bc>
 80296e2:	1ba9      	subs	r1, r5, r6
 80296e4:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80296e8:	d9ef      	bls.n	80296ca <__ssvfiscanf_r+0x4c2>
 80296ea:	f8da 0000 	ldr.w	r0, [sl]
 80296ee:	f003 fcff 	bl	802d0f0 <realloc>
 80296f2:	2800      	cmp	r0, #0
 80296f4:	d0e9      	beq.n	80296ca <__ssvfiscanf_r+0x4c2>
 80296f6:	f8ca 0000 	str.w	r0, [sl]
 80296fa:	e7e6      	b.n	80296ca <__ssvfiscanf_r+0x4c2>
 80296fc:	b1db      	cbz	r3, 8029736 <__ssvfiscanf_r+0x52e>
 80296fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8029702:	4598      	cmp	r8, r3
 8029704:	dd10      	ble.n	8029728 <__ssvfiscanf_r+0x520>
 8029706:	441a      	add	r2, r3
 8029708:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802970a:	6022      	str	r2, [r4, #0]
 802970c:	4621      	mov	r1, r4
 802970e:	441d      	add	r5, r3
 8029710:	eba8 0803 	sub.w	r8, r8, r3
 8029714:	f7ff fd21 	bl	802915a <__ssrefill_r>
 8029718:	2800      	cmp	r0, #0
 802971a:	d0f0      	beq.n	80296fe <__ssvfiscanf_r+0x4f6>
 802971c:	2d00      	cmp	r5, #0
 802971e:	f43f ae2a 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 8029722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029724:	442b      	add	r3, r5
 8029726:	e201      	b.n	8029b2c <__ssvfiscanf_r+0x924>
 8029728:	eba3 0308 	sub.w	r3, r3, r8
 802972c:	4442      	add	r2, r8
 802972e:	4445      	add	r5, r8
 8029730:	6063      	str	r3, [r4, #4]
 8029732:	6022      	str	r2, [r4, #0]
 8029734:	e7f5      	b.n	8029722 <__ssvfiscanf_r+0x51a>
 8029736:	6a3b      	ldr	r3, [r7, #32]
 8029738:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802973c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029740:	623b      	str	r3, [r7, #32]
 8029742:	d02d      	beq.n	80297a0 <__ssvfiscanf_r+0x598>
 8029744:	2d00      	cmp	r5, #0
 8029746:	f43f adac 	beq.w	80292a2 <__ssvfiscanf_r+0x9a>
 802974a:	4640      	mov	r0, r8
 802974c:	f7fe fd46 	bl	80281dc <malloc>
 8029750:	4681      	mov	r9, r0
 8029752:	2800      	cmp	r0, #0
 8029754:	f43f ae14 	beq.w	8029380 <__ssvfiscanf_r+0x178>
 8029758:	f8bb a006 	ldrh.w	sl, [fp, #6]
 802975c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8029760:	6028      	str	r0, [r5, #0]
 8029762:	45b2      	cmp	sl, r6
 8029764:	d312      	bcc.n	802978c <__ssvfiscanf_r+0x584>
 8029766:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802976a:	429e      	cmp	r6, r3
 802976c:	f200 8460 	bhi.w	802a030 <__ssvfiscanf_r+0xe28>
 8029770:	3608      	adds	r6, #8
 8029772:	b2b6      	uxth	r6, r6
 8029774:	f8db 0000 	ldr.w	r0, [fp]
 8029778:	00b1      	lsls	r1, r6, #2
 802977a:	f003 fcb9 	bl	802d0f0 <realloc>
 802977e:	2800      	cmp	r0, #0
 8029780:	f000 8456 	beq.w	802a030 <__ssvfiscanf_r+0xe28>
 8029784:	f8cb 0000 	str.w	r0, [fp]
 8029788:	f8ab 6004 	strh.w	r6, [fp, #4]
 802978c:	f8db 3000 	ldr.w	r3, [fp]
 8029790:	f10a 0201 	add.w	r2, sl, #1
 8029794:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8029798:	462e      	mov	r6, r5
 802979a:	f8ab 2006 	strh.w	r2, [fp, #6]
 802979e:	464d      	mov	r5, r9
 80297a0:	9400      	str	r4, [sp, #0]
 80297a2:	4629      	mov	r1, r5
 80297a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80297a6:	4643      	mov	r3, r8
 80297a8:	2201      	movs	r2, #1
 80297aa:	f7ff fcf3 	bl	8029194 <_sfread_r>
 80297ae:	4605      	mov	r5, r0
 80297b0:	2800      	cmp	r0, #0
 80297b2:	f43f ade0 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 80297b6:	b13e      	cbz	r6, 80297c8 <__ssvfiscanf_r+0x5c0>
 80297b8:	4580      	cmp	r8, r0
 80297ba:	d905      	bls.n	80297c8 <__ssvfiscanf_r+0x5c0>
 80297bc:	4601      	mov	r1, r0
 80297be:	6830      	ldr	r0, [r6, #0]
 80297c0:	f003 fc96 	bl	802d0f0 <realloc>
 80297c4:	b100      	cbz	r0, 80297c8 <__ssvfiscanf_r+0x5c0>
 80297c6:	6030      	str	r0, [r6, #0]
 80297c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80297ca:	442b      	add	r3, r5
 80297cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80297ce:	e780      	b.n	80296d2 <__ssvfiscanf_r+0x4ca>
 80297d0:	08025459 	.word	0x08025459
 80297d4:	08034aa1 	.word	0x08034aa1
 80297d8:	2b00      	cmp	r3, #0
 80297da:	bf08      	it	eq
 80297dc:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 80297e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80297e2:	693b      	ldr	r3, [r7, #16]
 80297e4:	2d00      	cmp	r5, #0
 80297e6:	f000 8100 	beq.w	80299ea <__ssvfiscanf_r+0x7e2>
 80297ea:	2b00      	cmp	r3, #0
 80297ec:	f040 80a5 	bne.w	802993a <__ssvfiscanf_r+0x732>
 80297f0:	6a3b      	ldr	r3, [r7, #32]
 80297f2:	0631      	lsls	r1, r6, #24
 80297f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80297f8:	623b      	str	r3, [r7, #32]
 80297fa:	f140 80a5 	bpl.w	8029948 <__ssvfiscanf_r+0x740>
 80297fe:	2d00      	cmp	r5, #0
 8029800:	f43f ae55 	beq.w	80294ae <__ssvfiscanf_r+0x2a6>
 8029804:	2080      	movs	r0, #128	@ 0x80
 8029806:	f7fe fce9 	bl	80281dc <malloc>
 802980a:	4680      	mov	r8, r0
 802980c:	2800      	cmp	r0, #0
 802980e:	f43f ae4b 	beq.w	80294a8 <__ssvfiscanf_r+0x2a0>
 8029812:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 8029816:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802981a:	6028      	str	r0, [r5, #0]
 802981c:	429e      	cmp	r6, r3
 802981e:	d314      	bcc.n	802984a <__ssvfiscanf_r+0x642>
 8029820:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8029824:	4293      	cmp	r3, r2
 8029826:	f200 8403 	bhi.w	802a030 <__ssvfiscanf_r+0xe28>
 802982a:	3308      	adds	r3, #8
 802982c:	fa1f f983 	uxth.w	r9, r3
 8029830:	f8db 0000 	ldr.w	r0, [fp]
 8029834:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8029838:	f003 fc5a 	bl	802d0f0 <realloc>
 802983c:	2800      	cmp	r0, #0
 802983e:	f000 83f7 	beq.w	802a030 <__ssvfiscanf_r+0xe28>
 8029842:	f8cb 0000 	str.w	r0, [fp]
 8029846:	f8ab 9004 	strh.w	r9, [fp, #4]
 802984a:	f8db 3000 	ldr.w	r3, [fp]
 802984e:	1c72      	adds	r2, r6, #1
 8029850:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 8029854:	46aa      	mov	sl, r5
 8029856:	f8ab 2006 	strh.w	r2, [fp, #6]
 802985a:	4645      	mov	r5, r8
 802985c:	f04f 0920 	mov.w	r9, #32
 8029860:	2600      	movs	r6, #0
 8029862:	f7fd fbfd 	bl	8027060 <__locale_mb_cur_max>
 8029866:	4286      	cmp	r6, r0
 8029868:	f43f ad85 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 802986c:	1c73      	adds	r3, r6, #1
 802986e:	607b      	str	r3, [r7, #4]
 8029870:	6823      	ldr	r3, [r4, #0]
 8029872:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029876:	f813 2b01 	ldrb.w	r2, [r3], #1
 802987a:	558a      	strb	r2, [r1, r6]
 802987c:	6862      	ldr	r2, [r4, #4]
 802987e:	3a01      	subs	r2, #1
 8029880:	e9c4 3200 	strd	r3, r2, [r4]
 8029884:	69bb      	ldr	r3, [r7, #24]
 8029886:	2b03      	cmp	r3, #3
 8029888:	d102      	bne.n	8029890 <__ssvfiscanf_r+0x688>
 802988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802988c:	2b04      	cmp	r3, #4
 802988e:	d005      	beq.n	802989c <__ssvfiscanf_r+0x694>
 8029890:	2208      	movs	r2, #8
 8029892:	2100      	movs	r1, #0
 8029894:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8029898:	f7fc fa5a 	bl	8025d50 <memset>
 802989c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80298a0:	9300      	str	r3, [sp, #0]
 80298a2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80298a6:	687b      	ldr	r3, [r7, #4]
 80298a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80298aa:	4629      	mov	r1, r5
 80298ac:	f004 ffda 	bl	802e864 <_mbrtowc_r>
 80298b0:	1c42      	adds	r2, r0, #1
 80298b2:	61b8      	str	r0, [r7, #24]
 80298b4:	f43f ad5f 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 80298b8:	2800      	cmp	r0, #0
 80298ba:	d14a      	bne.n	8029952 <__ssvfiscanf_r+0x74a>
 80298bc:	6028      	str	r0, [r5, #0]
 80298be:	682e      	ldr	r6, [r5, #0]
 80298c0:	1c73      	adds	r3, r6, #1
 80298c2:	d056      	beq.n	8029972 <__ssvfiscanf_r+0x76a>
 80298c4:	2208      	movs	r2, #8
 80298c6:	2100      	movs	r1, #0
 80298c8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80298cc:	f7fc fa40 	bl	8025d50 <memset>
 80298d0:	4b99      	ldr	r3, [pc, #612]	@ (8029b38 <__ssvfiscanf_r+0x930>)
 80298d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80298d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80298d8:	603b      	str	r3, [r7, #0]
 80298da:	4632      	mov	r2, r6
 80298dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80298e0:	683e      	ldr	r6, [r7, #0]
 80298e2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80298e6:	47b0      	blx	r6
 80298e8:	2801      	cmp	r0, #1
 80298ea:	d144      	bne.n	8029976 <__ssvfiscanf_r+0x76e>
 80298ec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80298f0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80298f4:	5c9b      	ldrb	r3, [r3, r2]
 80298f6:	2b00      	cmp	r3, #0
 80298f8:	d148      	bne.n	802998c <__ssvfiscanf_r+0x784>
 80298fa:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 80298fe:	687b      	ldr	r3, [r7, #4]
 8029900:	2b00      	cmp	r3, #0
 8029902:	d13a      	bne.n	802997a <__ssvfiscanf_r+0x772>
 8029904:	693b      	ldr	r3, [r7, #16]
 8029906:	2b00      	cmp	r3, #0
 8029908:	f47f ac9f 	bne.w	802924a <__ssvfiscanf_r+0x42>
 802990c:	602b      	str	r3, [r5, #0]
 802990e:	f1ba 0f00 	cmp.w	sl, #0
 8029912:	f43f aede 	beq.w	80296d2 <__ssvfiscanf_r+0x4ca>
 8029916:	eba5 0108 	sub.w	r1, r5, r8
 802991a:	108b      	asrs	r3, r1, #2
 802991c:	3301      	adds	r3, #1
 802991e:	4599      	cmp	r9, r3
 8029920:	f67f aed7 	bls.w	80296d2 <__ssvfiscanf_r+0x4ca>
 8029924:	f8da 0000 	ldr.w	r0, [sl]
 8029928:	3104      	adds	r1, #4
 802992a:	f003 fbe1 	bl	802d0f0 <realloc>
 802992e:	2800      	cmp	r0, #0
 8029930:	f43f aecf 	beq.w	80296d2 <__ssvfiscanf_r+0x4ca>
 8029934:	f8ca 0000 	str.w	r0, [sl]
 8029938:	e6cb      	b.n	80296d2 <__ssvfiscanf_r+0x4ca>
 802993a:	f04f 0900 	mov.w	r9, #0
 802993e:	46c8      	mov	r8, r9
 8029940:	46ca      	mov	sl, r9
 8029942:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8029946:	e78b      	b.n	8029860 <__ssvfiscanf_r+0x658>
 8029948:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802994c:	46c8      	mov	r8, r9
 802994e:	46ca      	mov	sl, r9
 8029950:	e786      	b.n	8029860 <__ssvfiscanf_r+0x658>
 8029952:	69bb      	ldr	r3, [r7, #24]
 8029954:	3302      	adds	r3, #2
 8029956:	d1b2      	bne.n	80298be <__ssvfiscanf_r+0x6b6>
 8029958:	687e      	ldr	r6, [r7, #4]
 802995a:	6863      	ldr	r3, [r4, #4]
 802995c:	2b00      	cmp	r3, #0
 802995e:	dc3f      	bgt.n	80299e0 <__ssvfiscanf_r+0x7d8>
 8029960:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029962:	4621      	mov	r1, r4
 8029964:	f7ff fbf9 	bl	802915a <__ssrefill_r>
 8029968:	2800      	cmp	r0, #0
 802996a:	d039      	beq.n	80299e0 <__ssvfiscanf_r+0x7d8>
 802996c:	2e00      	cmp	r6, #0
 802996e:	d0c9      	beq.n	8029904 <__ssvfiscanf_r+0x6fc>
 8029970:	e501      	b.n	8029376 <__ssvfiscanf_r+0x16e>
 8029972:	4632      	mov	r2, r6
 8029974:	e7bc      	b.n	80298f0 <__ssvfiscanf_r+0x6e8>
 8029976:	2200      	movs	r2, #0
 8029978:	e7ba      	b.n	80298f0 <__ssvfiscanf_r+0x6e8>
 802997a:	687b      	ldr	r3, [r7, #4]
 802997c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802997e:	3b01      	subs	r3, #1
 8029980:	4622      	mov	r2, r4
 8029982:	5cf1      	ldrb	r1, [r6, r3]
 8029984:	607b      	str	r3, [r7, #4]
 8029986:	f7ff fbad 	bl	80290e4 <_sungetc_r>
 802998a:	e7b8      	b.n	80298fe <__ssvfiscanf_r+0x6f6>
 802998c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802998e:	687a      	ldr	r2, [r7, #4]
 8029990:	4413      	add	r3, r2
 8029992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029994:	69bb      	ldr	r3, [r7, #24]
 8029996:	2b03      	cmp	r3, #3
 8029998:	d102      	bne.n	80299a0 <__ssvfiscanf_r+0x798>
 802999a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802999c:	2b04      	cmp	r3, #4
 802999e:	d002      	beq.n	80299a6 <__ssvfiscanf_r+0x79e>
 80299a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80299a2:	3b01      	subs	r3, #1
 80299a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80299a6:	693b      	ldr	r3, [r7, #16]
 80299a8:	b9c3      	cbnz	r3, 80299dc <__ssvfiscanf_r+0x7d4>
 80299aa:	3504      	adds	r5, #4
 80299ac:	f1ba 0f00 	cmp.w	sl, #0
 80299b0:	d014      	beq.n	80299dc <__ssvfiscanf_r+0x7d4>
 80299b2:	eba5 0608 	sub.w	r6, r5, r8
 80299b6:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80299ba:	d80d      	bhi.n	80299d8 <__ssvfiscanf_r+0x7d0>
 80299bc:	4640      	mov	r0, r8
 80299be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80299c2:	f003 fb95 	bl	802d0f0 <realloc>
 80299c6:	4680      	mov	r8, r0
 80299c8:	2800      	cmp	r0, #0
 80299ca:	f43f ad6d 	beq.w	80294a8 <__ssvfiscanf_r+0x2a0>
 80299ce:	1985      	adds	r5, r0, r6
 80299d0:	f8ca 0000 	str.w	r0, [sl]
 80299d4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80299d8:	693e      	ldr	r6, [r7, #16]
 80299da:	e7be      	b.n	802995a <__ssvfiscanf_r+0x752>
 80299dc:	2600      	movs	r6, #0
 80299de:	e7bc      	b.n	802995a <__ssvfiscanf_r+0x752>
 80299e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80299e2:	2b00      	cmp	r3, #0
 80299e4:	f47f af3d 	bne.w	8029862 <__ssvfiscanf_r+0x65a>
 80299e8:	e78c      	b.n	8029904 <__ssvfiscanf_r+0x6fc>
 80299ea:	b1e3      	cbz	r3, 8029a26 <__ssvfiscanf_r+0x81e>
 80299ec:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 80299f0:	6823      	ldr	r3, [r4, #0]
 80299f2:	781a      	ldrb	r2, [r3, #0]
 80299f4:	5cb2      	ldrb	r2, [r6, r2]
 80299f6:	b91a      	cbnz	r2, 8029a00 <__ssvfiscanf_r+0x7f8>
 80299f8:	2d00      	cmp	r5, #0
 80299fa:	f47f ae92 	bne.w	8029722 <__ssvfiscanf_r+0x51a>
 80299fe:	e450      	b.n	80292a2 <__ssvfiscanf_r+0x9a>
 8029a00:	3301      	adds	r3, #1
 8029a02:	6862      	ldr	r2, [r4, #4]
 8029a04:	6023      	str	r3, [r4, #0]
 8029a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029a08:	3501      	adds	r5, #1
 8029a0a:	3a01      	subs	r2, #1
 8029a0c:	42ab      	cmp	r3, r5
 8029a0e:	6062      	str	r2, [r4, #4]
 8029a10:	f43f ae87 	beq.w	8029722 <__ssvfiscanf_r+0x51a>
 8029a14:	2a00      	cmp	r2, #0
 8029a16:	dceb      	bgt.n	80299f0 <__ssvfiscanf_r+0x7e8>
 8029a18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029a1a:	4621      	mov	r1, r4
 8029a1c:	f7ff fb9d 	bl	802915a <__ssrefill_r>
 8029a20:	2800      	cmp	r0, #0
 8029a22:	d0e5      	beq.n	80299f0 <__ssvfiscanf_r+0x7e8>
 8029a24:	e67d      	b.n	8029722 <__ssvfiscanf_r+0x51a>
 8029a26:	6a3b      	ldr	r3, [r7, #32]
 8029a28:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 8029a2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8029a30:	623b      	str	r3, [r7, #32]
 8029a32:	d07e      	beq.n	8029b32 <__ssvfiscanf_r+0x92a>
 8029a34:	2d00      	cmp	r5, #0
 8029a36:	f43f ac34 	beq.w	80292a2 <__ssvfiscanf_r+0x9a>
 8029a3a:	2020      	movs	r0, #32
 8029a3c:	f7fe fbce 	bl	80281dc <malloc>
 8029a40:	4680      	mov	r8, r0
 8029a42:	2800      	cmp	r0, #0
 8029a44:	f43f ac9c 	beq.w	8029380 <__ssvfiscanf_r+0x178>
 8029a48:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029a4c:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8029a50:	6028      	str	r0, [r5, #0]
 8029a52:	45b1      	cmp	r9, r6
 8029a54:	d312      	bcc.n	8029a7c <__ssvfiscanf_r+0x874>
 8029a56:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8029a5a:	429e      	cmp	r6, r3
 8029a5c:	f200 82e8 	bhi.w	802a030 <__ssvfiscanf_r+0xe28>
 8029a60:	3608      	adds	r6, #8
 8029a62:	b2b6      	uxth	r6, r6
 8029a64:	f8db 0000 	ldr.w	r0, [fp]
 8029a68:	00b1      	lsls	r1, r6, #2
 8029a6a:	f003 fb41 	bl	802d0f0 <realloc>
 8029a6e:	2800      	cmp	r0, #0
 8029a70:	f000 82de 	beq.w	802a030 <__ssvfiscanf_r+0xe28>
 8029a74:	f8cb 0000 	str.w	r0, [fp]
 8029a78:	f8ab 6004 	strh.w	r6, [fp, #4]
 8029a7c:	f8db 3000 	ldr.w	r3, [fp]
 8029a80:	f109 0201 	add.w	r2, r9, #1
 8029a84:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8029a88:	46aa      	mov	sl, r5
 8029a8a:	f8ab 2006 	strh.w	r2, [fp, #6]
 8029a8e:	4645      	mov	r5, r8
 8029a90:	f04f 0920 	mov.w	r9, #32
 8029a94:	462e      	mov	r6, r5
 8029a96:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 8029a9a:	6823      	ldr	r3, [r4, #0]
 8029a9c:	781a      	ldrb	r2, [r3, #0]
 8029a9e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8029aa2:	b362      	cbz	r2, 8029afe <__ssvfiscanf_r+0x8f6>
 8029aa4:	6862      	ldr	r2, [r4, #4]
 8029aa6:	3a01      	subs	r2, #1
 8029aa8:	6062      	str	r2, [r4, #4]
 8029aaa:	1c5a      	adds	r2, r3, #1
 8029aac:	6022      	str	r2, [r4, #0]
 8029aae:	781b      	ldrb	r3, [r3, #0]
 8029ab0:	f805 3b01 	strb.w	r3, [r5], #1
 8029ab4:	f1ba 0f00 	cmp.w	sl, #0
 8029ab8:	d011      	beq.n	8029ade <__ssvfiscanf_r+0x8d6>
 8029aba:	1bab      	subs	r3, r5, r6
 8029abc:	454b      	cmp	r3, r9
 8029abe:	d30e      	bcc.n	8029ade <__ssvfiscanf_r+0x8d6>
 8029ac0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029ac4:	4630      	mov	r0, r6
 8029ac6:	4649      	mov	r1, r9
 8029ac8:	613b      	str	r3, [r7, #16]
 8029aca:	f003 fb11 	bl	802d0f0 <realloc>
 8029ace:	4606      	mov	r6, r0
 8029ad0:	2800      	cmp	r0, #0
 8029ad2:	f43f ac55 	beq.w	8029380 <__ssvfiscanf_r+0x178>
 8029ad6:	693b      	ldr	r3, [r7, #16]
 8029ad8:	f8ca 0000 	str.w	r0, [sl]
 8029adc:	18c5      	adds	r5, r0, r3
 8029ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029ae0:	3b01      	subs	r3, #1
 8029ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029ae4:	d00b      	beq.n	8029afe <__ssvfiscanf_r+0x8f6>
 8029ae6:	6863      	ldr	r3, [r4, #4]
 8029ae8:	2b00      	cmp	r3, #0
 8029aea:	dcd6      	bgt.n	8029a9a <__ssvfiscanf_r+0x892>
 8029aec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029aee:	4621      	mov	r1, r4
 8029af0:	f7ff fb33 	bl	802915a <__ssrefill_r>
 8029af4:	2800      	cmp	r0, #0
 8029af6:	d0d0      	beq.n	8029a9a <__ssvfiscanf_r+0x892>
 8029af8:	42b5      	cmp	r5, r6
 8029afa:	f43f ac3c 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 8029afe:	1bae      	subs	r6, r5, r6
 8029b00:	f43f abcf 	beq.w	80292a2 <__ssvfiscanf_r+0x9a>
 8029b04:	2300      	movs	r3, #0
 8029b06:	702b      	strb	r3, [r5, #0]
 8029b08:	f1ba 0f00 	cmp.w	sl, #0
 8029b0c:	d009      	beq.n	8029b22 <__ssvfiscanf_r+0x91a>
 8029b0e:	1c71      	adds	r1, r6, #1
 8029b10:	4589      	cmp	r9, r1
 8029b12:	d906      	bls.n	8029b22 <__ssvfiscanf_r+0x91a>
 8029b14:	f8da 0000 	ldr.w	r0, [sl]
 8029b18:	f003 faea 	bl	802d0f0 <realloc>
 8029b1c:	b108      	cbz	r0, 8029b22 <__ssvfiscanf_r+0x91a>
 8029b1e:	f8ca 0000 	str.w	r0, [sl]
 8029b22:	69fb      	ldr	r3, [r7, #28]
 8029b24:	3301      	adds	r3, #1
 8029b26:	61fb      	str	r3, [r7, #28]
 8029b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8029b2a:	4433      	add	r3, r6
 8029b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029b2e:	f7ff bb8c 	b.w	802924a <__ssvfiscanf_r+0x42>
 8029b32:	46ca      	mov	sl, r9
 8029b34:	e7ae      	b.n	8029a94 <__ssvfiscanf_r+0x88c>
 8029b36:	bf00      	nop
 8029b38:	200002c4 	.word	0x200002c4
 8029b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029b3e:	2b00      	cmp	r3, #0
 8029b40:	bf08      	it	eq
 8029b42:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 8029b46:	f016 0501 	ands.w	r5, r6, #1
 8029b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029b4c:	f006 0810 	and.w	r8, r6, #16
 8029b50:	f000 80e1 	beq.w	8029d16 <__ssvfiscanf_r+0xb0e>
 8029b54:	f1b8 0f00 	cmp.w	r8, #0
 8029b58:	f040 8089 	bne.w	8029c6e <__ssvfiscanf_r+0xa66>
 8029b5c:	6a3b      	ldr	r3, [r7, #32]
 8029b5e:	0636      	lsls	r6, r6, #24
 8029b60:	f853 5b04 	ldr.w	r5, [r3], #4
 8029b64:	623b      	str	r3, [r7, #32]
 8029b66:	f140 8089 	bpl.w	8029c7c <__ssvfiscanf_r+0xa74>
 8029b6a:	2d00      	cmp	r5, #0
 8029b6c:	f43f ac9f 	beq.w	80294ae <__ssvfiscanf_r+0x2a6>
 8029b70:	2080      	movs	r0, #128	@ 0x80
 8029b72:	f7fe fb33 	bl	80281dc <malloc>
 8029b76:	4606      	mov	r6, r0
 8029b78:	2800      	cmp	r0, #0
 8029b7a:	f43f ac95 	beq.w	80294a8 <__ssvfiscanf_r+0x2a0>
 8029b7e:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029b82:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8029b86:	6028      	str	r0, [r5, #0]
 8029b88:	4599      	cmp	r9, r3
 8029b8a:	d314      	bcc.n	8029bb6 <__ssvfiscanf_r+0x9ae>
 8029b8c:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8029b90:	4293      	cmp	r3, r2
 8029b92:	f200 824d 	bhi.w	802a030 <__ssvfiscanf_r+0xe28>
 8029b96:	3308      	adds	r3, #8
 8029b98:	fa1f fa83 	uxth.w	sl, r3
 8029b9c:	f8db 0000 	ldr.w	r0, [fp]
 8029ba0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8029ba4:	f003 faa4 	bl	802d0f0 <realloc>
 8029ba8:	2800      	cmp	r0, #0
 8029baa:	f000 8241 	beq.w	802a030 <__ssvfiscanf_r+0xe28>
 8029bae:	f8cb 0000 	str.w	r0, [fp]
 8029bb2:	f8ab a004 	strh.w	sl, [fp, #4]
 8029bb6:	f8db 3000 	ldr.w	r3, [fp]
 8029bba:	f109 0201 	add.w	r2, r9, #1
 8029bbe:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8029bc2:	46aa      	mov	sl, r5
 8029bc4:	f8ab 2006 	strh.w	r2, [fp, #6]
 8029bc8:	4635      	mov	r5, r6
 8029bca:	f04f 0920 	mov.w	r9, #32
 8029bce:	2300      	movs	r3, #0
 8029bd0:	6822      	ldr	r2, [r4, #0]
 8029bd2:	499e      	ldr	r1, [pc, #632]	@ (8029e4c <__ssvfiscanf_r+0xc44>)
 8029bd4:	7812      	ldrb	r2, [r2, #0]
 8029bd6:	5c8a      	ldrb	r2, [r1, r2]
 8029bd8:	0711      	lsls	r1, r2, #28
 8029bda:	d43c      	bmi.n	8029c56 <__ssvfiscanf_r+0xa4e>
 8029bdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8029bde:	2a00      	cmp	r2, #0
 8029be0:	d039      	beq.n	8029c56 <__ssvfiscanf_r+0xa4e>
 8029be2:	613b      	str	r3, [r7, #16]
 8029be4:	f7fd fa3c 	bl	8027060 <__locale_mb_cur_max>
 8029be8:	693b      	ldr	r3, [r7, #16]
 8029bea:	4298      	cmp	r0, r3
 8029bec:	f43f abc3 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 8029bf0:	1c5a      	adds	r2, r3, #1
 8029bf2:	613a      	str	r2, [r7, #16]
 8029bf4:	6822      	ldr	r2, [r4, #0]
 8029bf6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029bfa:	f812 0b01 	ldrb.w	r0, [r2], #1
 8029bfe:	54c8      	strb	r0, [r1, r3]
 8029c00:	6863      	ldr	r3, [r4, #4]
 8029c02:	3b01      	subs	r3, #1
 8029c04:	e9c4 2300 	strd	r2, r3, [r4]
 8029c08:	69bb      	ldr	r3, [r7, #24]
 8029c0a:	2b03      	cmp	r3, #3
 8029c0c:	d102      	bne.n	8029c14 <__ssvfiscanf_r+0xa0c>
 8029c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8029c10:	2b04      	cmp	r3, #4
 8029c12:	d005      	beq.n	8029c20 <__ssvfiscanf_r+0xa18>
 8029c14:	2208      	movs	r2, #8
 8029c16:	2100      	movs	r1, #0
 8029c18:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8029c1c:	f7fc f898 	bl	8025d50 <memset>
 8029c20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8029c24:	9300      	str	r3, [sp, #0]
 8029c26:	693b      	ldr	r3, [r7, #16]
 8029c28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029c2a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8029c2e:	4629      	mov	r1, r5
 8029c30:	f004 fe18 	bl	802e864 <_mbrtowc_r>
 8029c34:	4603      	mov	r3, r0
 8029c36:	61b8      	str	r0, [r7, #24]
 8029c38:	1c58      	adds	r0, r3, #1
 8029c3a:	f43f ab9c 	beq.w	8029376 <__ssvfiscanf_r+0x16e>
 8029c3e:	bb0b      	cbnz	r3, 8029c84 <__ssvfiscanf_r+0xa7c>
 8029c40:	602b      	str	r3, [r5, #0]
 8029c42:	6828      	ldr	r0, [r5, #0]
 8029c44:	f004 fe28 	bl	802e898 <iswspace>
 8029c48:	4603      	mov	r3, r0
 8029c4a:	2800      	cmp	r0, #0
 8029c4c:	d037      	beq.n	8029cbe <__ssvfiscanf_r+0xab6>
 8029c4e:	693a      	ldr	r2, [r7, #16]
 8029c50:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029c54:	bb4a      	cbnz	r2, 8029caa <__ssvfiscanf_r+0xaa2>
 8029c56:	f1b8 0f00 	cmp.w	r8, #0
 8029c5a:	f47f aaf6 	bne.w	802924a <__ssvfiscanf_r+0x42>
 8029c5e:	f8c5 8000 	str.w	r8, [r5]
 8029c62:	f1ba 0f00 	cmp.w	sl, #0
 8029c66:	f43f ad34 	beq.w	80296d2 <__ssvfiscanf_r+0x4ca>
 8029c6a:	1ba9      	subs	r1, r5, r6
 8029c6c:	e655      	b.n	802991a <__ssvfiscanf_r+0x712>
 8029c6e:	f04f 0900 	mov.w	r9, #0
 8029c72:	464e      	mov	r6, r9
 8029c74:	46ca      	mov	sl, r9
 8029c76:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8029c7a:	e7a8      	b.n	8029bce <__ssvfiscanf_r+0x9c6>
 8029c7c:	46c1      	mov	r9, r8
 8029c7e:	4646      	mov	r6, r8
 8029c80:	46c2      	mov	sl, r8
 8029c82:	e7a4      	b.n	8029bce <__ssvfiscanf_r+0x9c6>
 8029c84:	69bb      	ldr	r3, [r7, #24]
 8029c86:	3302      	adds	r3, #2
 8029c88:	d1db      	bne.n	8029c42 <__ssvfiscanf_r+0xa3a>
 8029c8a:	693b      	ldr	r3, [r7, #16]
 8029c8c:	6862      	ldr	r2, [r4, #4]
 8029c8e:	2a00      	cmp	r2, #0
 8029c90:	dc9e      	bgt.n	8029bd0 <__ssvfiscanf_r+0x9c8>
 8029c92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029c94:	613b      	str	r3, [r7, #16]
 8029c96:	4621      	mov	r1, r4
 8029c98:	f7ff fa5f 	bl	802915a <__ssrefill_r>
 8029c9c:	693b      	ldr	r3, [r7, #16]
 8029c9e:	2800      	cmp	r0, #0
 8029ca0:	d096      	beq.n	8029bd0 <__ssvfiscanf_r+0x9c8>
 8029ca2:	2b00      	cmp	r3, #0
 8029ca4:	f47f ab67 	bne.w	8029376 <__ssvfiscanf_r+0x16e>
 8029ca8:	e7d5      	b.n	8029c56 <__ssvfiscanf_r+0xa4e>
 8029caa:	693a      	ldr	r2, [r7, #16]
 8029cac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029cae:	3a01      	subs	r2, #1
 8029cb0:	613a      	str	r2, [r7, #16]
 8029cb2:	6939      	ldr	r1, [r7, #16]
 8029cb4:	4622      	mov	r2, r4
 8029cb6:	5c59      	ldrb	r1, [r3, r1]
 8029cb8:	f7ff fa14 	bl	80290e4 <_sungetc_r>
 8029cbc:	e7c7      	b.n	8029c4e <__ssvfiscanf_r+0xa46>
 8029cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029cc0:	6939      	ldr	r1, [r7, #16]
 8029cc2:	440a      	add	r2, r1
 8029cc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8029cc6:	69ba      	ldr	r2, [r7, #24]
 8029cc8:	2a03      	cmp	r2, #3
 8029cca:	d102      	bne.n	8029cd2 <__ssvfiscanf_r+0xaca>
 8029ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8029cce:	2a04      	cmp	r2, #4
 8029cd0:	d002      	beq.n	8029cd8 <__ssvfiscanf_r+0xad0>
 8029cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8029cd4:	3a01      	subs	r2, #1
 8029cd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8029cd8:	f1b8 0f00 	cmp.w	r8, #0
 8029cdc:	d1d6      	bne.n	8029c8c <__ssvfiscanf_r+0xa84>
 8029cde:	3504      	adds	r5, #4
 8029ce0:	f1ba 0f00 	cmp.w	sl, #0
 8029ce4:	d015      	beq.n	8029d12 <__ssvfiscanf_r+0xb0a>
 8029ce6:	1bab      	subs	r3, r5, r6
 8029ce8:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8029cec:	d80f      	bhi.n	8029d0e <__ssvfiscanf_r+0xb06>
 8029cee:	4630      	mov	r0, r6
 8029cf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8029cf4:	613b      	str	r3, [r7, #16]
 8029cf6:	f003 f9fb 	bl	802d0f0 <realloc>
 8029cfa:	4606      	mov	r6, r0
 8029cfc:	2800      	cmp	r0, #0
 8029cfe:	f43f abd3 	beq.w	80294a8 <__ssvfiscanf_r+0x2a0>
 8029d02:	693b      	ldr	r3, [r7, #16]
 8029d04:	f8ca 0000 	str.w	r0, [sl]
 8029d08:	18c5      	adds	r5, r0, r3
 8029d0a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8029d0e:	4643      	mov	r3, r8
 8029d10:	e7bc      	b.n	8029c8c <__ssvfiscanf_r+0xa84>
 8029d12:	4653      	mov	r3, sl
 8029d14:	e7ba      	b.n	8029c8c <__ssvfiscanf_r+0xa84>
 8029d16:	f1b8 0f00 	cmp.w	r8, #0
 8029d1a:	d019      	beq.n	8029d50 <__ssvfiscanf_r+0xb48>
 8029d1c:	4e4b      	ldr	r6, [pc, #300]	@ (8029e4c <__ssvfiscanf_r+0xc44>)
 8029d1e:	6823      	ldr	r3, [r4, #0]
 8029d20:	781a      	ldrb	r2, [r3, #0]
 8029d22:	5cb2      	ldrb	r2, [r6, r2]
 8029d24:	0712      	lsls	r2, r2, #28
 8029d26:	f53f acfc 	bmi.w	8029722 <__ssvfiscanf_r+0x51a>
 8029d2a:	3301      	adds	r3, #1
 8029d2c:	6862      	ldr	r2, [r4, #4]
 8029d2e:	6023      	str	r3, [r4, #0]
 8029d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029d32:	3501      	adds	r5, #1
 8029d34:	3a01      	subs	r2, #1
 8029d36:	429d      	cmp	r5, r3
 8029d38:	6062      	str	r2, [r4, #4]
 8029d3a:	f43f acf2 	beq.w	8029722 <__ssvfiscanf_r+0x51a>
 8029d3e:	2a00      	cmp	r2, #0
 8029d40:	dced      	bgt.n	8029d1e <__ssvfiscanf_r+0xb16>
 8029d42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029d44:	4621      	mov	r1, r4
 8029d46:	f7ff fa08 	bl	802915a <__ssrefill_r>
 8029d4a:	2800      	cmp	r0, #0
 8029d4c:	d0e7      	beq.n	8029d1e <__ssvfiscanf_r+0xb16>
 8029d4e:	e4e8      	b.n	8029722 <__ssvfiscanf_r+0x51a>
 8029d50:	6a3b      	ldr	r3, [r7, #32]
 8029d52:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 8029d56:	f853 5b04 	ldr.w	r5, [r3], #4
 8029d5a:	623b      	str	r3, [r7, #32]
 8029d5c:	d074      	beq.n	8029e48 <__ssvfiscanf_r+0xc40>
 8029d5e:	2d00      	cmp	r5, #0
 8029d60:	f43f aa9f 	beq.w	80292a2 <__ssvfiscanf_r+0x9a>
 8029d64:	2020      	movs	r0, #32
 8029d66:	f7fe fa39 	bl	80281dc <malloc>
 8029d6a:	4680      	mov	r8, r0
 8029d6c:	2800      	cmp	r0, #0
 8029d6e:	f43f ab07 	beq.w	8029380 <__ssvfiscanf_r+0x178>
 8029d72:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 8029d76:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 8029d7a:	6028      	str	r0, [r5, #0]
 8029d7c:	45b1      	cmp	r9, r6
 8029d7e:	d312      	bcc.n	8029da6 <__ssvfiscanf_r+0xb9e>
 8029d80:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8029d84:	429e      	cmp	r6, r3
 8029d86:	f200 8153 	bhi.w	802a030 <__ssvfiscanf_r+0xe28>
 8029d8a:	3608      	adds	r6, #8
 8029d8c:	b2b6      	uxth	r6, r6
 8029d8e:	f8db 0000 	ldr.w	r0, [fp]
 8029d92:	00b1      	lsls	r1, r6, #2
 8029d94:	f003 f9ac 	bl	802d0f0 <realloc>
 8029d98:	2800      	cmp	r0, #0
 8029d9a:	f000 8149 	beq.w	802a030 <__ssvfiscanf_r+0xe28>
 8029d9e:	f8cb 0000 	str.w	r0, [fp]
 8029da2:	f8ab 6004 	strh.w	r6, [fp, #4]
 8029da6:	f8db 3000 	ldr.w	r3, [fp]
 8029daa:	f109 0201 	add.w	r2, r9, #1
 8029dae:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 8029db2:	46aa      	mov	sl, r5
 8029db4:	f8ab 2006 	strh.w	r2, [fp, #6]
 8029db8:	4645      	mov	r5, r8
 8029dba:	2620      	movs	r6, #32
 8029dbc:	46a9      	mov	r9, r5
 8029dbe:	6823      	ldr	r3, [r4, #0]
 8029dc0:	4922      	ldr	r1, [pc, #136]	@ (8029e4c <__ssvfiscanf_r+0xc44>)
 8029dc2:	781a      	ldrb	r2, [r3, #0]
 8029dc4:	5c8a      	ldrb	r2, [r1, r2]
 8029dc6:	0710      	lsls	r0, r2, #28
 8029dc8:	d428      	bmi.n	8029e1c <__ssvfiscanf_r+0xc14>
 8029dca:	6862      	ldr	r2, [r4, #4]
 8029dcc:	3a01      	subs	r2, #1
 8029dce:	6062      	str	r2, [r4, #4]
 8029dd0:	1c5a      	adds	r2, r3, #1
 8029dd2:	6022      	str	r2, [r4, #0]
 8029dd4:	781b      	ldrb	r3, [r3, #0]
 8029dd6:	f805 3b01 	strb.w	r3, [r5], #1
 8029dda:	f1ba 0f00 	cmp.w	sl, #0
 8029dde:	d010      	beq.n	8029e02 <__ssvfiscanf_r+0xbfa>
 8029de0:	eba5 0809 	sub.w	r8, r5, r9
 8029de4:	45b0      	cmp	r8, r6
 8029de6:	d30c      	bcc.n	8029e02 <__ssvfiscanf_r+0xbfa>
 8029de8:	0076      	lsls	r6, r6, #1
 8029dea:	4648      	mov	r0, r9
 8029dec:	4631      	mov	r1, r6
 8029dee:	f003 f97f 	bl	802d0f0 <realloc>
 8029df2:	4681      	mov	r9, r0
 8029df4:	2800      	cmp	r0, #0
 8029df6:	f43f aac3 	beq.w	8029380 <__ssvfiscanf_r+0x178>
 8029dfa:	eb00 0508 	add.w	r5, r0, r8
 8029dfe:	f8ca 0000 	str.w	r0, [sl]
 8029e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029e04:	3b01      	subs	r3, #1
 8029e06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029e08:	d008      	beq.n	8029e1c <__ssvfiscanf_r+0xc14>
 8029e0a:	6863      	ldr	r3, [r4, #4]
 8029e0c:	2b00      	cmp	r3, #0
 8029e0e:	dcd6      	bgt.n	8029dbe <__ssvfiscanf_r+0xbb6>
 8029e10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029e12:	4621      	mov	r1, r4
 8029e14:	f7ff f9a1 	bl	802915a <__ssrefill_r>
 8029e18:	2800      	cmp	r0, #0
 8029e1a:	d0d0      	beq.n	8029dbe <__ssvfiscanf_r+0xbb6>
 8029e1c:	2300      	movs	r3, #0
 8029e1e:	702b      	strb	r3, [r5, #0]
 8029e20:	eba5 0509 	sub.w	r5, r5, r9
 8029e24:	f1ba 0f00 	cmp.w	sl, #0
 8029e28:	f43f acce 	beq.w	80297c8 <__ssvfiscanf_r+0x5c0>
 8029e2c:	1c69      	adds	r1, r5, #1
 8029e2e:	428e      	cmp	r6, r1
 8029e30:	f67f acca 	bls.w	80297c8 <__ssvfiscanf_r+0x5c0>
 8029e34:	f8da 0000 	ldr.w	r0, [sl]
 8029e38:	f003 f95a 	bl	802d0f0 <realloc>
 8029e3c:	2800      	cmp	r0, #0
 8029e3e:	f43f acc3 	beq.w	80297c8 <__ssvfiscanf_r+0x5c0>
 8029e42:	f8ca 0000 	str.w	r0, [sl]
 8029e46:	e4bf      	b.n	80297c8 <__ssvfiscanf_r+0x5c0>
 8029e48:	46b2      	mov	sl, r6
 8029e4a:	e7b7      	b.n	8029dbc <__ssvfiscanf_r+0xbb4>
 8029e4c:	08034aa1 	.word	0x08034aa1
 8029e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029e52:	3b01      	subs	r3, #1
 8029e54:	2b26      	cmp	r3, #38	@ 0x26
 8029e56:	bf81      	itttt	hi
 8029e58:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 8029e5a:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 8029e5e:	2327      	movhi	r3, #39	@ 0x27
 8029e60:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 8029e62:	bf98      	it	ls
 8029e64:	f04f 0800 	movls.w	r8, #0
 8029e68:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 8029e6c:	f04f 0900 	mov.w	r9, #0
 8029e70:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 8029e74:	6822      	ldr	r2, [r4, #0]
 8029e76:	7813      	ldrb	r3, [r2, #0]
 8029e78:	2b39      	cmp	r3, #57	@ 0x39
 8029e7a:	d80f      	bhi.n	8029e9c <__ssvfiscanf_r+0xc94>
 8029e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8029e7e:	d91a      	bls.n	8029eb6 <__ssvfiscanf_r+0xcae>
 8029e80:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8029e84:	290e      	cmp	r1, #14
 8029e86:	d816      	bhi.n	8029eb6 <__ssvfiscanf_r+0xcae>
 8029e88:	e8df f001 	tbb	[pc, r1]
 8029e8c:	15771577 	.word	0x15771577
 8029e90:	67673e15 	.word	0x67673e15
 8029e94:	67676767 	.word	0x67676767
 8029e98:	6f67      	.short	0x6f67
 8029e9a:	6f          	.byte	0x6f
 8029e9b:	00          	.byte	0x00
 8029e9c:	2b66      	cmp	r3, #102	@ 0x66
 8029e9e:	d831      	bhi.n	8029f04 <__ssvfiscanf_r+0xcfc>
 8029ea0:	2b60      	cmp	r3, #96	@ 0x60
 8029ea2:	d803      	bhi.n	8029eac <__ssvfiscanf_r+0xca4>
 8029ea4:	2b46      	cmp	r3, #70	@ 0x46
 8029ea6:	d804      	bhi.n	8029eb2 <__ssvfiscanf_r+0xcaa>
 8029ea8:	2b40      	cmp	r3, #64	@ 0x40
 8029eaa:	d904      	bls.n	8029eb6 <__ssvfiscanf_r+0xcae>
 8029eac:	6979      	ldr	r1, [r7, #20]
 8029eae:	290a      	cmp	r1, #10
 8029eb0:	e061      	b.n	8029f76 <__ssvfiscanf_r+0xd6e>
 8029eb2:	2b58      	cmp	r3, #88	@ 0x58
 8029eb4:	d066      	beq.n	8029f84 <__ssvfiscanf_r+0xd7c>
 8029eb6:	05f1      	lsls	r1, r6, #23
 8029eb8:	d511      	bpl.n	8029ede <__ssvfiscanf_r+0xcd6>
 8029eba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029ebe:	459a      	cmp	sl, r3
 8029ec0:	d908      	bls.n	8029ed4 <__ssvfiscanf_r+0xccc>
 8029ec2:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8029ec6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029ec8:	4622      	mov	r2, r4
 8029eca:	f7ff f90b 	bl	80290e4 <_sungetc_r>
 8029ece:	f10a 38ff 	add.w	r8, sl, #4294967295	@ 0xffffffff
 8029ed2:	46c2      	mov	sl, r8
 8029ed4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029ed8:	459a      	cmp	sl, r3
 8029eda:	f43f a9e2 	beq.w	80292a2 <__ssvfiscanf_r+0x9a>
 8029ede:	f016 0210 	ands.w	r2, r6, #16
 8029ee2:	d16b      	bne.n	8029fbc <__ssvfiscanf_r+0xdb4>
 8029ee4:	697b      	ldr	r3, [r7, #20]
 8029ee6:	f88a 2000 	strb.w	r2, [sl]
 8029eea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029eec:	68fd      	ldr	r5, [r7, #12]
 8029eee:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029ef2:	47a8      	blx	r5
 8029ef4:	6a3b      	ldr	r3, [r7, #32]
 8029ef6:	06b2      	lsls	r2, r6, #26
 8029ef8:	f103 0804 	add.w	r8, r3, #4
 8029efc:	d555      	bpl.n	8029faa <__ssvfiscanf_r+0xda2>
 8029efe:	681b      	ldr	r3, [r3, #0]
 8029f00:	6018      	str	r0, [r3, #0]
 8029f02:	e057      	b.n	8029fb4 <__ssvfiscanf_r+0xdac>
 8029f04:	2b78      	cmp	r3, #120	@ 0x78
 8029f06:	e7d5      	b.n	8029eb4 <__ssvfiscanf_r+0xcac>
 8029f08:	0531      	lsls	r1, r6, #20
 8029f0a:	d509      	bpl.n	8029f20 <__ssvfiscanf_r+0xd18>
 8029f0c:	6979      	ldr	r1, [r7, #20]
 8029f0e:	b919      	cbnz	r1, 8029f18 <__ssvfiscanf_r+0xd10>
 8029f10:	2108      	movs	r1, #8
 8029f12:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8029f16:	6179      	str	r1, [r7, #20]
 8029f18:	0575      	lsls	r5, r6, #21
 8029f1a:	d506      	bpl.n	8029f2a <__ssvfiscanf_r+0xd22>
 8029f1c:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 8029f20:	4655      	mov	r5, sl
 8029f22:	f805 3b01 	strb.w	r3, [r5], #1
 8029f26:	46aa      	mov	sl, r5
 8029f28:	e00b      	b.n	8029f42 <__ssvfiscanf_r+0xd3a>
 8029f2a:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 8029f2e:	f1b8 0f00 	cmp.w	r8, #0
 8029f32:	d004      	beq.n	8029f3e <__ssvfiscanf_r+0xd36>
 8029f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029f36:	3301      	adds	r3, #1
 8029f38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8029f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029f3e:	f109 0901 	add.w	r9, r9, #1
 8029f42:	6863      	ldr	r3, [r4, #4]
 8029f44:	3b01      	subs	r3, #1
 8029f46:	2b00      	cmp	r3, #0
 8029f48:	6063      	str	r3, [r4, #4]
 8029f4a:	dd27      	ble.n	8029f9c <__ssvfiscanf_r+0xd94>
 8029f4c:	3201      	adds	r2, #1
 8029f4e:	6022      	str	r2, [r4, #0]
 8029f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8029f52:	3b01      	subs	r3, #1
 8029f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029f56:	d18d      	bne.n	8029e74 <__ssvfiscanf_r+0xc6c>
 8029f58:	e7ad      	b.n	8029eb6 <__ssvfiscanf_r+0xcae>
 8029f5a:	6978      	ldr	r0, [r7, #20]
 8029f5c:	4936      	ldr	r1, [pc, #216]	@ (802a038 <__ssvfiscanf_r+0xe30>)
 8029f5e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8029f62:	6179      	str	r1, [r7, #20]
 8029f64:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 8029f68:	e7da      	b.n	8029f20 <__ssvfiscanf_r+0xd18>
 8029f6a:	6978      	ldr	r0, [r7, #20]
 8029f6c:	4932      	ldr	r1, [pc, #200]	@ (802a038 <__ssvfiscanf_r+0xe30>)
 8029f6e:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8029f72:	6179      	str	r1, [r7, #20]
 8029f74:	2908      	cmp	r1, #8
 8029f76:	dcf5      	bgt.n	8029f64 <__ssvfiscanf_r+0xd5c>
 8029f78:	e79d      	b.n	8029eb6 <__ssvfiscanf_r+0xcae>
 8029f7a:	0630      	lsls	r0, r6, #24
 8029f7c:	d59b      	bpl.n	8029eb6 <__ssvfiscanf_r+0xcae>
 8029f7e:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8029f82:	e7cd      	b.n	8029f20 <__ssvfiscanf_r+0xd18>
 8029f84:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 8029f88:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8029f8c:	d193      	bne.n	8029eb6 <__ssvfiscanf_r+0xcae>
 8029f8e:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 8029f92:	2110      	movs	r1, #16
 8029f94:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 8029f98:	6179      	str	r1, [r7, #20]
 8029f9a:	e7c1      	b.n	8029f20 <__ssvfiscanf_r+0xd18>
 8029f9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029f9e:	4621      	mov	r1, r4
 8029fa0:	f7ff f8db 	bl	802915a <__ssrefill_r>
 8029fa4:	2800      	cmp	r0, #0
 8029fa6:	d0d3      	beq.n	8029f50 <__ssvfiscanf_r+0xd48>
 8029fa8:	e785      	b.n	8029eb6 <__ssvfiscanf_r+0xcae>
 8029faa:	0733      	lsls	r3, r6, #28
 8029fac:	d50d      	bpl.n	8029fca <__ssvfiscanf_r+0xdc2>
 8029fae:	6a3b      	ldr	r3, [r7, #32]
 8029fb0:	681b      	ldr	r3, [r3, #0]
 8029fb2:	7018      	strb	r0, [r3, #0]
 8029fb4:	69fb      	ldr	r3, [r7, #28]
 8029fb6:	3301      	adds	r3, #1
 8029fb8:	e9c7 3807 	strd	r3, r8, [r7, #28]
 8029fbc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8029fc0:	ebaa 0503 	sub.w	r5, sl, r3
 8029fc4:	444d      	add	r5, r9
 8029fc6:	f7ff bbac 	b.w	8029722 <__ssvfiscanf_r+0x51a>
 8029fca:	0775      	lsls	r5, r6, #29
 8029fcc:	d503      	bpl.n	8029fd6 <__ssvfiscanf_r+0xdce>
 8029fce:	6a3b      	ldr	r3, [r7, #32]
 8029fd0:	681b      	ldr	r3, [r3, #0]
 8029fd2:	8018      	strh	r0, [r3, #0]
 8029fd4:	e7ee      	b.n	8029fb4 <__ssvfiscanf_r+0xdac>
 8029fd6:	f016 0201 	ands.w	r2, r6, #1
 8029fda:	d001      	beq.n	8029fe0 <__ssvfiscanf_r+0xdd8>
 8029fdc:	6a3b      	ldr	r3, [r7, #32]
 8029fde:	e78e      	b.n	8029efe <__ssvfiscanf_r+0xcf6>
 8029fe0:	07b1      	lsls	r1, r6, #30
 8029fe2:	d5fb      	bpl.n	8029fdc <__ssvfiscanf_r+0xdd4>
 8029fe4:	4b15      	ldr	r3, [pc, #84]	@ (802a03c <__ssvfiscanf_r+0xe34>)
 8029fe6:	68f9      	ldr	r1, [r7, #12]
 8029fe8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8029fea:	4299      	cmp	r1, r3
 8029fec:	697b      	ldr	r3, [r7, #20]
 8029fee:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8029ff2:	d106      	bne.n	802a002 <__ssvfiscanf_r+0xdfa>
 8029ff4:	f004 fc34 	bl	802e860 <_strtoull_r>
 8029ff8:	6a3b      	ldr	r3, [r7, #32]
 8029ffa:	681b      	ldr	r3, [r3, #0]
 8029ffc:	e9c3 0100 	strd	r0, r1, [r3]
 802a000:	e7d8      	b.n	8029fb4 <__ssvfiscanf_r+0xdac>
 802a002:	f004 fb81 	bl	802e708 <_strtoll_r>
 802a006:	e7f7      	b.n	8029ff8 <__ssvfiscanf_r+0xdf0>
 802a008:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802a00c:	6818      	ldr	r0, [r3, #0]
 802a00e:	f7fe f8ed 	bl	80281ec <free>
 802a012:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802a016:	3401      	adds	r4, #1
 802a018:	601e      	str	r6, [r3, #0]
 802a01a:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 802a01e:	f8db 5000 	ldr.w	r5, [fp]
 802a022:	42a3      	cmp	r3, r4
 802a024:	dcf0      	bgt.n	802a008 <__ssvfiscanf_r+0xe00>
 802a026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a02a:	61fb      	str	r3, [r7, #28]
 802a02c:	f7ff ba46 	b.w	80294bc <__ssvfiscanf_r+0x2b4>
 802a030:	2400      	movs	r4, #0
 802a032:	4626      	mov	r6, r4
 802a034:	e7f1      	b.n	802a01a <__ssvfiscanf_r+0xe12>
 802a036:	bf00      	nop
 802a038:	08034c38 	.word	0x08034c38
 802a03c:	0802e259 	.word	0x0802e259

0802a040 <_svfprintf_r>:
 802a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a044:	b0d3      	sub	sp, #332	@ 0x14c
 802a046:	468b      	mov	fp, r1
 802a048:	4691      	mov	r9, r2
 802a04a:	461e      	mov	r6, r3
 802a04c:	9003      	str	r0, [sp, #12]
 802a04e:	f7fd f80d 	bl	802706c <_localeconv_r>
 802a052:	6803      	ldr	r3, [r0, #0]
 802a054:	9316      	str	r3, [sp, #88]	@ 0x58
 802a056:	4618      	mov	r0, r3
 802a058:	f7d6 f922 	bl	80002a0 <strlen>
 802a05c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a060:	900d      	str	r0, [sp, #52]	@ 0x34
 802a062:	061b      	lsls	r3, r3, #24
 802a064:	d515      	bpl.n	802a092 <_svfprintf_r+0x52>
 802a066:	f8db 3010 	ldr.w	r3, [fp, #16]
 802a06a:	b993      	cbnz	r3, 802a092 <_svfprintf_r+0x52>
 802a06c:	9803      	ldr	r0, [sp, #12]
 802a06e:	2140      	movs	r1, #64	@ 0x40
 802a070:	f7fe f8c4 	bl	80281fc <_malloc_r>
 802a074:	f8cb 0000 	str.w	r0, [fp]
 802a078:	f8cb 0010 	str.w	r0, [fp, #16]
 802a07c:	b930      	cbnz	r0, 802a08c <_svfprintf_r+0x4c>
 802a07e:	9a03      	ldr	r2, [sp, #12]
 802a080:	230c      	movs	r3, #12
 802a082:	6013      	str	r3, [r2, #0]
 802a084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802a088:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a08a:	e1f7      	b.n	802a47c <_svfprintf_r+0x43c>
 802a08c:	2340      	movs	r3, #64	@ 0x40
 802a08e:	f8cb 3014 	str.w	r3, [fp, #20]
 802a092:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 802a2e0 <_svfprintf_r+0x2a0>
 802a096:	2300      	movs	r3, #0
 802a098:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 802a09c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a0a0:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 802a0a4:	ac29      	add	r4, sp, #164	@ 0xa4
 802a0a6:	9426      	str	r4, [sp, #152]	@ 0x98
 802a0a8:	9304      	str	r3, [sp, #16]
 802a0aa:	9309      	str	r3, [sp, #36]	@ 0x24
 802a0ac:	9312      	str	r3, [sp, #72]	@ 0x48
 802a0ae:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a0b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a0b2:	464b      	mov	r3, r9
 802a0b4:	461d      	mov	r5, r3
 802a0b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a0ba:	b10a      	cbz	r2, 802a0c0 <_svfprintf_r+0x80>
 802a0bc:	2a25      	cmp	r2, #37	@ 0x25
 802a0be:	d1f9      	bne.n	802a0b4 <_svfprintf_r+0x74>
 802a0c0:	ebb5 0709 	subs.w	r7, r5, r9
 802a0c4:	d00d      	beq.n	802a0e2 <_svfprintf_r+0xa2>
 802a0c6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a0c8:	443b      	add	r3, r7
 802a0ca:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a0cc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a0ce:	3301      	adds	r3, #1
 802a0d0:	2b07      	cmp	r3, #7
 802a0d2:	e9c4 9700 	strd	r9, r7, [r4]
 802a0d6:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a0d8:	dc75      	bgt.n	802a1c6 <_svfprintf_r+0x186>
 802a0da:	3408      	adds	r4, #8
 802a0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802a0de:	443b      	add	r3, r7
 802a0e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a0e2:	782b      	ldrb	r3, [r5, #0]
 802a0e4:	2b00      	cmp	r3, #0
 802a0e6:	f001 8148 	beq.w	802b37a <_svfprintf_r+0x133a>
 802a0ea:	2200      	movs	r2, #0
 802a0ec:	1c6b      	adds	r3, r5, #1
 802a0ee:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802a0f2:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802a0f6:	920e      	str	r2, [sp, #56]	@ 0x38
 802a0f8:	4615      	mov	r5, r2
 802a0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a0fe:	9206      	str	r2, [sp, #24]
 802a100:	930c      	str	r3, [sp, #48]	@ 0x30
 802a102:	9b06      	ldr	r3, [sp, #24]
 802a104:	3b20      	subs	r3, #32
 802a106:	2b5a      	cmp	r3, #90	@ 0x5a
 802a108:	f200 85a4 	bhi.w	802ac54 <_svfprintf_r+0xc14>
 802a10c:	e8df f013 	tbh	[pc, r3, lsl #1]
 802a110:	05a2009d 	.word	0x05a2009d
 802a114:	00a505a2 	.word	0x00a505a2
 802a118:	05a205a2 	.word	0x05a205a2
 802a11c:	008505a2 	.word	0x008505a2
 802a120:	05a205a2 	.word	0x05a205a2
 802a124:	00b200a8 	.word	0x00b200a8
 802a128:	00af05a2 	.word	0x00af05a2
 802a12c:	05a200b4 	.word	0x05a200b4
 802a130:	00d100ce 	.word	0x00d100ce
 802a134:	00d100d1 	.word	0x00d100d1
 802a138:	00d100d1 	.word	0x00d100d1
 802a13c:	00d100d1 	.word	0x00d100d1
 802a140:	00d100d1 	.word	0x00d100d1
 802a144:	05a205a2 	.word	0x05a205a2
 802a148:	05a205a2 	.word	0x05a205a2
 802a14c:	05a205a2 	.word	0x05a205a2
 802a150:	014705a2 	.word	0x014705a2
 802a154:	010805a2 	.word	0x010805a2
 802a158:	0147011b 	.word	0x0147011b
 802a15c:	01470147 	.word	0x01470147
 802a160:	05a205a2 	.word	0x05a205a2
 802a164:	05a205a2 	.word	0x05a205a2
 802a168:	05a200e2 	.word	0x05a200e2
 802a16c:	049d05a2 	.word	0x049d05a2
 802a170:	05a205a2 	.word	0x05a205a2
 802a174:	04e705a2 	.word	0x04e705a2
 802a178:	050805a2 	.word	0x050805a2
 802a17c:	05a205a2 	.word	0x05a205a2
 802a180:	05a2052a 	.word	0x05a2052a
 802a184:	05a205a2 	.word	0x05a205a2
 802a188:	05a205a2 	.word	0x05a205a2
 802a18c:	05a205a2 	.word	0x05a205a2
 802a190:	014705a2 	.word	0x014705a2
 802a194:	010805a2 	.word	0x010805a2
 802a198:	0147011d 	.word	0x0147011d
 802a19c:	01470147 	.word	0x01470147
 802a1a0:	011d00ee 	.word	0x011d00ee
 802a1a4:	05a20102 	.word	0x05a20102
 802a1a8:	05a200fb 	.word	0x05a200fb
 802a1ac:	049f047e 	.word	0x049f047e
 802a1b0:	010204d6 	.word	0x010204d6
 802a1b4:	04e705a2 	.word	0x04e705a2
 802a1b8:	050a009b 	.word	0x050a009b
 802a1bc:	05a205a2 	.word	0x05a205a2
 802a1c0:	05a20065 	.word	0x05a20065
 802a1c4:	009b      	.short	0x009b
 802a1c6:	9803      	ldr	r0, [sp, #12]
 802a1c8:	aa26      	add	r2, sp, #152	@ 0x98
 802a1ca:	4659      	mov	r1, fp
 802a1cc:	f7fe fac0 	bl	8028750 <__ssprint_r>
 802a1d0:	2800      	cmp	r0, #0
 802a1d2:	f040 814e 	bne.w	802a472 <_svfprintf_r+0x432>
 802a1d6:	ac29      	add	r4, sp, #164	@ 0xa4
 802a1d8:	e780      	b.n	802a0dc <_svfprintf_r+0x9c>
 802a1da:	4b43      	ldr	r3, [pc, #268]	@ (802a2e8 <_svfprintf_r+0x2a8>)
 802a1dc:	9319      	str	r3, [sp, #100]	@ 0x64
 802a1de:	f015 0320 	ands.w	r3, r5, #32
 802a1e2:	f000 84c2 	beq.w	802ab6a <_svfprintf_r+0xb2a>
 802a1e6:	3607      	adds	r6, #7
 802a1e8:	f026 0307 	bic.w	r3, r6, #7
 802a1ec:	461a      	mov	r2, r3
 802a1ee:	685f      	ldr	r7, [r3, #4]
 802a1f0:	f852 6b08 	ldr.w	r6, [r2], #8
 802a1f4:	9207      	str	r2, [sp, #28]
 802a1f6:	07eb      	lsls	r3, r5, #31
 802a1f8:	d50a      	bpl.n	802a210 <_svfprintf_r+0x1d0>
 802a1fa:	ea56 0307 	orrs.w	r3, r6, r7
 802a1fe:	d007      	beq.n	802a210 <_svfprintf_r+0x1d0>
 802a200:	2330      	movs	r3, #48	@ 0x30
 802a202:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 802a206:	9b06      	ldr	r3, [sp, #24]
 802a208:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a20c:	f045 0502 	orr.w	r5, r5, #2
 802a210:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a214:	2302      	movs	r3, #2
 802a216:	f000 bc28 	b.w	802aa6a <_svfprintf_r+0xa2a>
 802a21a:	9803      	ldr	r0, [sp, #12]
 802a21c:	f7fc ff26 	bl	802706c <_localeconv_r>
 802a220:	6843      	ldr	r3, [r0, #4]
 802a222:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a224:	4618      	mov	r0, r3
 802a226:	f7d6 f83b 	bl	80002a0 <strlen>
 802a22a:	9012      	str	r0, [sp, #72]	@ 0x48
 802a22c:	9803      	ldr	r0, [sp, #12]
 802a22e:	f7fc ff1d 	bl	802706c <_localeconv_r>
 802a232:	6883      	ldr	r3, [r0, #8]
 802a234:	9309      	str	r3, [sp, #36]	@ 0x24
 802a236:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a238:	b12b      	cbz	r3, 802a246 <_svfprintf_r+0x206>
 802a23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a23c:	b11b      	cbz	r3, 802a246 <_svfprintf_r+0x206>
 802a23e:	781b      	ldrb	r3, [r3, #0]
 802a240:	b10b      	cbz	r3, 802a246 <_svfprintf_r+0x206>
 802a242:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 802a246:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a248:	e757      	b.n	802a0fa <_svfprintf_r+0xba>
 802a24a:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a24e:	2b00      	cmp	r3, #0
 802a250:	d1f9      	bne.n	802a246 <_svfprintf_r+0x206>
 802a252:	2320      	movs	r3, #32
 802a254:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a258:	e7f5      	b.n	802a246 <_svfprintf_r+0x206>
 802a25a:	f045 0501 	orr.w	r5, r5, #1
 802a25e:	e7f2      	b.n	802a246 <_svfprintf_r+0x206>
 802a260:	f856 3b04 	ldr.w	r3, [r6], #4
 802a264:	930e      	str	r3, [sp, #56]	@ 0x38
 802a266:	2b00      	cmp	r3, #0
 802a268:	daed      	bge.n	802a246 <_svfprintf_r+0x206>
 802a26a:	425b      	negs	r3, r3
 802a26c:	930e      	str	r3, [sp, #56]	@ 0x38
 802a26e:	f045 0504 	orr.w	r5, r5, #4
 802a272:	e7e8      	b.n	802a246 <_svfprintf_r+0x206>
 802a274:	232b      	movs	r3, #43	@ 0x2b
 802a276:	e7ed      	b.n	802a254 <_svfprintf_r+0x214>
 802a278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a27a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a27e:	9206      	str	r2, [sp, #24]
 802a280:	2a2a      	cmp	r2, #42	@ 0x2a
 802a282:	d10f      	bne.n	802a2a4 <_svfprintf_r+0x264>
 802a284:	f856 2b04 	ldr.w	r2, [r6], #4
 802a288:	930c      	str	r3, [sp, #48]	@ 0x30
 802a28a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 802a28e:	e7da      	b.n	802a246 <_svfprintf_r+0x206>
 802a290:	fb01 2808 	mla	r8, r1, r8, r2
 802a294:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a298:	9206      	str	r2, [sp, #24]
 802a29a:	9a06      	ldr	r2, [sp, #24]
 802a29c:	3a30      	subs	r2, #48	@ 0x30
 802a29e:	2a09      	cmp	r2, #9
 802a2a0:	d9f6      	bls.n	802a290 <_svfprintf_r+0x250>
 802a2a2:	e72d      	b.n	802a100 <_svfprintf_r+0xc0>
 802a2a4:	f04f 0800 	mov.w	r8, #0
 802a2a8:	210a      	movs	r1, #10
 802a2aa:	e7f6      	b.n	802a29a <_svfprintf_r+0x25a>
 802a2ac:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 802a2b0:	e7c9      	b.n	802a246 <_svfprintf_r+0x206>
 802a2b2:	2200      	movs	r2, #0
 802a2b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a2b6:	920e      	str	r2, [sp, #56]	@ 0x38
 802a2b8:	210a      	movs	r1, #10
 802a2ba:	9a06      	ldr	r2, [sp, #24]
 802a2bc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802a2be:	3a30      	subs	r2, #48	@ 0x30
 802a2c0:	fb01 2200 	mla	r2, r1, r0, r2
 802a2c4:	920e      	str	r2, [sp, #56]	@ 0x38
 802a2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a2ca:	9206      	str	r2, [sp, #24]
 802a2cc:	3a30      	subs	r2, #48	@ 0x30
 802a2ce:	2a09      	cmp	r2, #9
 802a2d0:	d9f3      	bls.n	802a2ba <_svfprintf_r+0x27a>
 802a2d2:	e715      	b.n	802a100 <_svfprintf_r+0xc0>
 802a2d4:	f045 0508 	orr.w	r5, r5, #8
 802a2d8:	e7b5      	b.n	802a246 <_svfprintf_r+0x206>
 802a2da:	bf00      	nop
 802a2dc:	f3af 8000 	nop.w
	...
 802a2e8:	080346f4 	.word	0x080346f4
 802a2ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a2ee:	781b      	ldrb	r3, [r3, #0]
 802a2f0:	2b68      	cmp	r3, #104	@ 0x68
 802a2f2:	bf01      	itttt	eq
 802a2f4:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 802a2f6:	3301      	addeq	r3, #1
 802a2f8:	930c      	streq	r3, [sp, #48]	@ 0x30
 802a2fa:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 802a2fe:	bf18      	it	ne
 802a300:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 802a304:	e79f      	b.n	802a246 <_svfprintf_r+0x206>
 802a306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a308:	781b      	ldrb	r3, [r3, #0]
 802a30a:	2b6c      	cmp	r3, #108	@ 0x6c
 802a30c:	d105      	bne.n	802a31a <_svfprintf_r+0x2da>
 802a30e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a310:	3301      	adds	r3, #1
 802a312:	930c      	str	r3, [sp, #48]	@ 0x30
 802a314:	f045 0520 	orr.w	r5, r5, #32
 802a318:	e795      	b.n	802a246 <_svfprintf_r+0x206>
 802a31a:	f045 0510 	orr.w	r5, r5, #16
 802a31e:	e792      	b.n	802a246 <_svfprintf_r+0x206>
 802a320:	4632      	mov	r2, r6
 802a322:	f852 3b04 	ldr.w	r3, [r2], #4
 802a326:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802a32a:	2300      	movs	r3, #0
 802a32c:	9207      	str	r2, [sp, #28]
 802a32e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a332:	469a      	mov	sl, r3
 802a334:	f04f 0801 	mov.w	r8, #1
 802a338:	9310      	str	r3, [sp, #64]	@ 0x40
 802a33a:	461f      	mov	r7, r3
 802a33c:	9308      	str	r3, [sp, #32]
 802a33e:	461e      	mov	r6, r3
 802a340:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802a344:	e1d2      	b.n	802a6ec <_svfprintf_r+0x6ac>
 802a346:	f045 0510 	orr.w	r5, r5, #16
 802a34a:	06af      	lsls	r7, r5, #26
 802a34c:	d512      	bpl.n	802a374 <_svfprintf_r+0x334>
 802a34e:	3607      	adds	r6, #7
 802a350:	f026 0307 	bic.w	r3, r6, #7
 802a354:	461a      	mov	r2, r3
 802a356:	685f      	ldr	r7, [r3, #4]
 802a358:	f852 6b08 	ldr.w	r6, [r2], #8
 802a35c:	9207      	str	r2, [sp, #28]
 802a35e:	2f00      	cmp	r7, #0
 802a360:	da06      	bge.n	802a370 <_svfprintf_r+0x330>
 802a362:	4276      	negs	r6, r6
 802a364:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 802a368:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 802a36c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a370:	2301      	movs	r3, #1
 802a372:	e37d      	b.n	802aa70 <_svfprintf_r+0xa30>
 802a374:	4633      	mov	r3, r6
 802a376:	06ee      	lsls	r6, r5, #27
 802a378:	f853 7b04 	ldr.w	r7, [r3], #4
 802a37c:	9307      	str	r3, [sp, #28]
 802a37e:	d502      	bpl.n	802a386 <_svfprintf_r+0x346>
 802a380:	463e      	mov	r6, r7
 802a382:	17ff      	asrs	r7, r7, #31
 802a384:	e7eb      	b.n	802a35e <_svfprintf_r+0x31e>
 802a386:	0668      	lsls	r0, r5, #25
 802a388:	d503      	bpl.n	802a392 <_svfprintf_r+0x352>
 802a38a:	b23e      	sxth	r6, r7
 802a38c:	f347 37c0 	sbfx	r7, r7, #15, #1
 802a390:	e7e5      	b.n	802a35e <_svfprintf_r+0x31e>
 802a392:	05a9      	lsls	r1, r5, #22
 802a394:	d5f4      	bpl.n	802a380 <_svfprintf_r+0x340>
 802a396:	b27e      	sxtb	r6, r7
 802a398:	f347 17c0 	sbfx	r7, r7, #7, #1
 802a39c:	e7df      	b.n	802a35e <_svfprintf_r+0x31e>
 802a39e:	3607      	adds	r6, #7
 802a3a0:	f026 0307 	bic.w	r3, r6, #7
 802a3a4:	ecb3 7b02 	vldmia	r3!, {d7}
 802a3a8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 802a3ac:	9307      	str	r3, [sp, #28]
 802a3ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a3b0:	931a      	str	r3, [sp, #104]	@ 0x68
 802a3b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a3b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802a3b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 802a3ba:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a3be:	4b81      	ldr	r3, [pc, #516]	@ (802a5c4 <_svfprintf_r+0x584>)
 802a3c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a3c4:	f7d6 fbca 	bl	8000b5c <__aeabi_dcmpun>
 802a3c8:	bb10      	cbnz	r0, 802a410 <_svfprintf_r+0x3d0>
 802a3ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 802a3ce:	4b7d      	ldr	r3, [pc, #500]	@ (802a5c4 <_svfprintf_r+0x584>)
 802a3d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802a3d4:	f7d6 fba4 	bl	8000b20 <__aeabi_dcmple>
 802a3d8:	b9d0      	cbnz	r0, 802a410 <_svfprintf_r+0x3d0>
 802a3da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802a3de:	2200      	movs	r2, #0
 802a3e0:	2300      	movs	r3, #0
 802a3e2:	f7d6 fb93 	bl	8000b0c <__aeabi_dcmplt>
 802a3e6:	b110      	cbz	r0, 802a3ee <_svfprintf_r+0x3ae>
 802a3e8:	232d      	movs	r3, #45	@ 0x2d
 802a3ea:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802a3ee:	4a76      	ldr	r2, [pc, #472]	@ (802a5c8 <_svfprintf_r+0x588>)
 802a3f0:	4b76      	ldr	r3, [pc, #472]	@ (802a5cc <_svfprintf_r+0x58c>)
 802a3f2:	9906      	ldr	r1, [sp, #24]
 802a3f4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 802a3f8:	2947      	cmp	r1, #71	@ 0x47
 802a3fa:	bfd4      	ite	le
 802a3fc:	4691      	movle	r9, r2
 802a3fe:	4699      	movgt	r9, r3
 802a400:	f04f 0a00 	mov.w	sl, #0
 802a404:	f04f 0803 	mov.w	r8, #3
 802a408:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802a40c:	f000 bfec 	b.w	802b3e8 <_svfprintf_r+0x13a8>
 802a410:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 802a414:	4610      	mov	r0, r2
 802a416:	4619      	mov	r1, r3
 802a418:	f7d6 fba0 	bl	8000b5c <__aeabi_dcmpun>
 802a41c:	4682      	mov	sl, r0
 802a41e:	b140      	cbz	r0, 802a432 <_svfprintf_r+0x3f2>
 802a420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a422:	4a6b      	ldr	r2, [pc, #428]	@ (802a5d0 <_svfprintf_r+0x590>)
 802a424:	2b00      	cmp	r3, #0
 802a426:	bfbc      	itt	lt
 802a428:	232d      	movlt	r3, #45	@ 0x2d
 802a42a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 802a42e:	4b69      	ldr	r3, [pc, #420]	@ (802a5d4 <_svfprintf_r+0x594>)
 802a430:	e7df      	b.n	802a3f2 <_svfprintf_r+0x3b2>
 802a432:	9b06      	ldr	r3, [sp, #24]
 802a434:	2b61      	cmp	r3, #97	@ 0x61
 802a436:	d025      	beq.n	802a484 <_svfprintf_r+0x444>
 802a438:	2b41      	cmp	r3, #65	@ 0x41
 802a43a:	d125      	bne.n	802a488 <_svfprintf_r+0x448>
 802a43c:	2358      	movs	r3, #88	@ 0x58
 802a43e:	2230      	movs	r2, #48	@ 0x30
 802a440:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 802a444:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 802a448:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 802a44c:	f045 0502 	orr.w	r5, r5, #2
 802a450:	f340 80a5 	ble.w	802a59e <_svfprintf_r+0x55e>
 802a454:	9803      	ldr	r0, [sp, #12]
 802a456:	f108 0101 	add.w	r1, r8, #1
 802a45a:	f7fd fecf 	bl	80281fc <_malloc_r>
 802a45e:	4681      	mov	r9, r0
 802a460:	2800      	cmp	r0, #0
 802a462:	f040 80a1 	bne.w	802a5a8 <_svfprintf_r+0x568>
 802a466:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a46e:	f8ab 300c 	strh.w	r3, [fp, #12]
 802a472:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 802a476:	065b      	lsls	r3, r3, #25
 802a478:	f53f ae04 	bmi.w	802a084 <_svfprintf_r+0x44>
 802a47c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a47e:	b053      	add	sp, #332	@ 0x14c
 802a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a484:	2378      	movs	r3, #120	@ 0x78
 802a486:	e7da      	b.n	802a43e <_svfprintf_r+0x3fe>
 802a488:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802a48c:	f000 808e 	beq.w	802a5ac <_svfprintf_r+0x56c>
 802a490:	9b06      	ldr	r3, [sp, #24]
 802a492:	f023 0320 	bic.w	r3, r3, #32
 802a496:	2b47      	cmp	r3, #71	@ 0x47
 802a498:	d105      	bne.n	802a4a6 <_svfprintf_r+0x466>
 802a49a:	f1b8 0f00 	cmp.w	r8, #0
 802a49e:	d102      	bne.n	802a4a6 <_svfprintf_r+0x466>
 802a4a0:	46c2      	mov	sl, r8
 802a4a2:	f04f 0801 	mov.w	r8, #1
 802a4a6:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a4aa:	9311      	str	r3, [sp, #68]	@ 0x44
 802a4ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a4ae:	2b00      	cmp	r3, #0
 802a4b0:	da7f      	bge.n	802a5b2 <_svfprintf_r+0x572>
 802a4b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a4b4:	9314      	str	r3, [sp, #80]	@ 0x50
 802a4b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802a4b8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802a4bc:	9315      	str	r3, [sp, #84]	@ 0x54
 802a4be:	232d      	movs	r3, #45	@ 0x2d
 802a4c0:	931c      	str	r3, [sp, #112]	@ 0x70
 802a4c2:	9b06      	ldr	r3, [sp, #24]
 802a4c4:	f023 0320 	bic.w	r3, r3, #32
 802a4c8:	2b41      	cmp	r3, #65	@ 0x41
 802a4ca:	9308      	str	r3, [sp, #32]
 802a4cc:	f040 81e6 	bne.w	802a89c <_svfprintf_r+0x85c>
 802a4d0:	a820      	add	r0, sp, #128	@ 0x80
 802a4d2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a4d6:	f7fc fe9b 	bl	8027210 <frexp>
 802a4da:	2200      	movs	r2, #0
 802a4dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 802a4e0:	ec51 0b10 	vmov	r0, r1, d0
 802a4e4:	f7d6 f8a0 	bl	8000628 <__aeabi_dmul>
 802a4e8:	4602      	mov	r2, r0
 802a4ea:	460b      	mov	r3, r1
 802a4ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a4f0:	2200      	movs	r2, #0
 802a4f2:	2300      	movs	r3, #0
 802a4f4:	f7d6 fb00 	bl	8000af8 <__aeabi_dcmpeq>
 802a4f8:	b108      	cbz	r0, 802a4fe <_svfprintf_r+0x4be>
 802a4fa:	2301      	movs	r3, #1
 802a4fc:	9320      	str	r3, [sp, #128]	@ 0x80
 802a4fe:	4a36      	ldr	r2, [pc, #216]	@ (802a5d8 <_svfprintf_r+0x598>)
 802a500:	4b36      	ldr	r3, [pc, #216]	@ (802a5dc <_svfprintf_r+0x59c>)
 802a502:	9906      	ldr	r1, [sp, #24]
 802a504:	2961      	cmp	r1, #97	@ 0x61
 802a506:	bf18      	it	ne
 802a508:	461a      	movne	r2, r3
 802a50a:	9210      	str	r2, [sp, #64]	@ 0x40
 802a50c:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 802a510:	464e      	mov	r6, r9
 802a512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a516:	4b32      	ldr	r3, [pc, #200]	@ (802a5e0 <_svfprintf_r+0x5a0>)
 802a518:	2200      	movs	r2, #0
 802a51a:	f7d6 f885 	bl	8000628 <__aeabi_dmul>
 802a51e:	4602      	mov	r2, r0
 802a520:	460b      	mov	r3, r1
 802a522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a526:	f7d6 fb2f 	bl	8000b88 <__aeabi_d2iz>
 802a52a:	9013      	str	r0, [sp, #76]	@ 0x4c
 802a52c:	f7d6 f812 	bl	8000554 <__aeabi_i2d>
 802a530:	4602      	mov	r2, r0
 802a532:	460b      	mov	r3, r1
 802a534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a538:	f7d5 febe 	bl	80002b8 <__aeabi_dsub>
 802a53c:	4602      	mov	r2, r0
 802a53e:	460b      	mov	r3, r1
 802a540:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802a544:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a546:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a548:	5c9b      	ldrb	r3, [r3, r2]
 802a54a:	f806 3b01 	strb.w	r3, [r6], #1
 802a54e:	1c7a      	adds	r2, r7, #1
 802a550:	d006      	beq.n	802a560 <_svfprintf_r+0x520>
 802a552:	1e7b      	subs	r3, r7, #1
 802a554:	931d      	str	r3, [sp, #116]	@ 0x74
 802a556:	2200      	movs	r2, #0
 802a558:	2300      	movs	r3, #0
 802a55a:	f7d6 facd 	bl	8000af8 <__aeabi_dcmpeq>
 802a55e:	b370      	cbz	r0, 802a5be <_svfprintf_r+0x57e>
 802a560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a564:	4b1f      	ldr	r3, [pc, #124]	@ (802a5e4 <_svfprintf_r+0x5a4>)
 802a566:	2200      	movs	r2, #0
 802a568:	f7d6 faee 	bl	8000b48 <__aeabi_dcmpgt>
 802a56c:	2800      	cmp	r0, #0
 802a56e:	d13b      	bne.n	802a5e8 <_svfprintf_r+0x5a8>
 802a570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802a574:	4b1b      	ldr	r3, [pc, #108]	@ (802a5e4 <_svfprintf_r+0x5a4>)
 802a576:	2200      	movs	r2, #0
 802a578:	f7d6 fabe 	bl	8000af8 <__aeabi_dcmpeq>
 802a57c:	b110      	cbz	r0, 802a584 <_svfprintf_r+0x544>
 802a57e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802a580:	07db      	lsls	r3, r3, #31
 802a582:	d431      	bmi.n	802a5e8 <_svfprintf_r+0x5a8>
 802a584:	4633      	mov	r3, r6
 802a586:	19f1      	adds	r1, r6, r7
 802a588:	2030      	movs	r0, #48	@ 0x30
 802a58a:	1aca      	subs	r2, r1, r3
 802a58c:	2a00      	cmp	r2, #0
 802a58e:	f280 8182 	bge.w	802a896 <_svfprintf_r+0x856>
 802a592:	1c7b      	adds	r3, r7, #1
 802a594:	3701      	adds	r7, #1
 802a596:	bfb8      	it	lt
 802a598:	2300      	movlt	r3, #0
 802a59a:	441e      	add	r6, r3
 802a59c:	e038      	b.n	802a610 <_svfprintf_r+0x5d0>
 802a59e:	f04f 0a00 	mov.w	sl, #0
 802a5a2:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 802a5a6:	e77e      	b.n	802a4a6 <_svfprintf_r+0x466>
 802a5a8:	4682      	mov	sl, r0
 802a5aa:	e77c      	b.n	802a4a6 <_svfprintf_r+0x466>
 802a5ac:	f04f 0806 	mov.w	r8, #6
 802a5b0:	e779      	b.n	802a4a6 <_svfprintf_r+0x466>
 802a5b2:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 802a5b6:	2300      	movs	r3, #0
 802a5b8:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 802a5bc:	e780      	b.n	802a4c0 <_svfprintf_r+0x480>
 802a5be:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 802a5c0:	e7a7      	b.n	802a512 <_svfprintf_r+0x4d2>
 802a5c2:	bf00      	nop
 802a5c4:	7fefffff 	.word	0x7fefffff
 802a5c8:	080346e4 	.word	0x080346e4
 802a5cc:	080346e8 	.word	0x080346e8
 802a5d0:	080346ec 	.word	0x080346ec
 802a5d4:	080346f0 	.word	0x080346f0
 802a5d8:	080346f4 	.word	0x080346f4
 802a5dc:	08034705 	.word	0x08034705
 802a5e0:	40300000 	.word	0x40300000
 802a5e4:	3fe00000 	.word	0x3fe00000
 802a5e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a5ea:	9624      	str	r6, [sp, #144]	@ 0x90
 802a5ec:	7bd9      	ldrb	r1, [r3, #15]
 802a5ee:	2030      	movs	r0, #48	@ 0x30
 802a5f0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802a5f2:	1e53      	subs	r3, r2, #1
 802a5f4:	9324      	str	r3, [sp, #144]	@ 0x90
 802a5f6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 802a5fa:	428b      	cmp	r3, r1
 802a5fc:	f000 8148 	beq.w	802a890 <_svfprintf_r+0x850>
 802a600:	2b39      	cmp	r3, #57	@ 0x39
 802a602:	bf0b      	itete	eq
 802a604:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 802a606:	3301      	addne	r3, #1
 802a608:	7a9b      	ldrbeq	r3, [r3, #10]
 802a60a:	b2db      	uxtbne	r3, r3
 802a60c:	f802 3c01 	strb.w	r3, [r2, #-1]
 802a610:	eba6 0309 	sub.w	r3, r6, r9
 802a614:	9304      	str	r3, [sp, #16]
 802a616:	9b08      	ldr	r3, [sp, #32]
 802a618:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802a61a:	2b47      	cmp	r3, #71	@ 0x47
 802a61c:	f040 8187 	bne.w	802a92e <_svfprintf_r+0x8ee>
 802a620:	1cf1      	adds	r1, r6, #3
 802a622:	db02      	blt.n	802a62a <_svfprintf_r+0x5ea>
 802a624:	4546      	cmp	r6, r8
 802a626:	f340 81a5 	ble.w	802a974 <_svfprintf_r+0x934>
 802a62a:	9b06      	ldr	r3, [sp, #24]
 802a62c:	3b02      	subs	r3, #2
 802a62e:	9306      	str	r3, [sp, #24]
 802a630:	9906      	ldr	r1, [sp, #24]
 802a632:	f89d 2018 	ldrb.w	r2, [sp, #24]
 802a636:	f021 0120 	bic.w	r1, r1, #32
 802a63a:	2941      	cmp	r1, #65	@ 0x41
 802a63c:	bf08      	it	eq
 802a63e:	320f      	addeq	r2, #15
 802a640:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 802a644:	bf06      	itte	eq
 802a646:	b2d2      	uxtbeq	r2, r2
 802a648:	2101      	moveq	r1, #1
 802a64a:	2100      	movne	r1, #0
 802a64c:	2b00      	cmp	r3, #0
 802a64e:	9320      	str	r3, [sp, #128]	@ 0x80
 802a650:	bfb8      	it	lt
 802a652:	f1c6 0301 	rsblt	r3, r6, #1
 802a656:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 802a65a:	bfb4      	ite	lt
 802a65c:	222d      	movlt	r2, #45	@ 0x2d
 802a65e:	222b      	movge	r2, #43	@ 0x2b
 802a660:	2b09      	cmp	r3, #9
 802a662:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 802a666:	f340 8178 	ble.w	802a95a <_svfprintf_r+0x91a>
 802a66a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a66e:	270a      	movs	r7, #10
 802a670:	4602      	mov	r2, r0
 802a672:	fbb3 f6f7 	udiv	r6, r3, r7
 802a676:	fb07 3116 	mls	r1, r7, r6, r3
 802a67a:	3130      	adds	r1, #48	@ 0x30
 802a67c:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a680:	4619      	mov	r1, r3
 802a682:	2963      	cmp	r1, #99	@ 0x63
 802a684:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 802a688:	4633      	mov	r3, r6
 802a68a:	dcf1      	bgt.n	802a670 <_svfprintf_r+0x630>
 802a68c:	3330      	adds	r3, #48	@ 0x30
 802a68e:	1e91      	subs	r1, r2, #2
 802a690:	f800 3c01 	strb.w	r3, [r0, #-1]
 802a694:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 802a698:	460b      	mov	r3, r1
 802a69a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 802a69e:	4283      	cmp	r3, r0
 802a6a0:	f0c0 8156 	bcc.w	802a950 <_svfprintf_r+0x910>
 802a6a4:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 802a6a8:	1a9b      	subs	r3, r3, r2
 802a6aa:	4281      	cmp	r1, r0
 802a6ac:	bf88      	it	hi
 802a6ae:	2300      	movhi	r3, #0
 802a6b0:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a6b4:	441a      	add	r2, r3
 802a6b6:	ab22      	add	r3, sp, #136	@ 0x88
 802a6b8:	1ad3      	subs	r3, r2, r3
 802a6ba:	9a04      	ldr	r2, [sp, #16]
 802a6bc:	9318      	str	r3, [sp, #96]	@ 0x60
 802a6be:	2a01      	cmp	r2, #1
 802a6c0:	eb03 0802 	add.w	r8, r3, r2
 802a6c4:	dc01      	bgt.n	802a6ca <_svfprintf_r+0x68a>
 802a6c6:	07ea      	lsls	r2, r5, #31
 802a6c8:	d501      	bpl.n	802a6ce <_svfprintf_r+0x68e>
 802a6ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a6cc:	4498      	add	r8, r3
 802a6ce:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802a6d2:	2700      	movs	r7, #0
 802a6d4:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 802a6d8:	9311      	str	r3, [sp, #68]	@ 0x44
 802a6da:	9708      	str	r7, [sp, #32]
 802a6dc:	463e      	mov	r6, r7
 802a6de:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802a6e0:	2b00      	cmp	r3, #0
 802a6e2:	f040 818f 	bne.w	802aa04 <_svfprintf_r+0x9c4>
 802a6e6:	2300      	movs	r3, #0
 802a6e8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a6ea:	9310      	str	r3, [sp, #64]	@ 0x40
 802a6ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a6ee:	4543      	cmp	r3, r8
 802a6f0:	bfb8      	it	lt
 802a6f2:	4643      	movlt	r3, r8
 802a6f4:	9311      	str	r3, [sp, #68]	@ 0x44
 802a6f6:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 802a6fa:	b113      	cbz	r3, 802a702 <_svfprintf_r+0x6c2>
 802a6fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802a6fe:	3301      	adds	r3, #1
 802a700:	9311      	str	r3, [sp, #68]	@ 0x44
 802a702:	f015 0302 	ands.w	r3, r5, #2
 802a706:	931c      	str	r3, [sp, #112]	@ 0x70
 802a708:	bf1e      	ittt	ne
 802a70a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 802a70c:	3302      	addne	r3, #2
 802a70e:	9311      	strne	r3, [sp, #68]	@ 0x44
 802a710:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 802a714:	931d      	str	r3, [sp, #116]	@ 0x74
 802a716:	d122      	bne.n	802a75e <_svfprintf_r+0x71e>
 802a718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a71a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a71c:	1a9b      	subs	r3, r3, r2
 802a71e:	2b00      	cmp	r3, #0
 802a720:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a722:	dd1c      	ble.n	802a75e <_svfprintf_r+0x71e>
 802a724:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a726:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a72a:	2810      	cmp	r0, #16
 802a72c:	489e      	ldr	r0, [pc, #632]	@ (802a9a8 <_svfprintf_r+0x968>)
 802a72e:	6020      	str	r0, [r4, #0]
 802a730:	f102 0201 	add.w	r2, r2, #1
 802a734:	f104 0108 	add.w	r1, r4, #8
 802a738:	f300 8298 	bgt.w	802ac6c <_svfprintf_r+0xc2c>
 802a73c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a73e:	6060      	str	r0, [r4, #4]
 802a740:	4403      	add	r3, r0
 802a742:	2a07      	cmp	r2, #7
 802a744:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a748:	f340 82a5 	ble.w	802ac96 <_svfprintf_r+0xc56>
 802a74c:	9803      	ldr	r0, [sp, #12]
 802a74e:	aa26      	add	r2, sp, #152	@ 0x98
 802a750:	4659      	mov	r1, fp
 802a752:	f7fd fffd 	bl	8028750 <__ssprint_r>
 802a756:	2800      	cmp	r0, #0
 802a758:	f040 85ed 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802a75c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a75e:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 802a762:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a764:	b16a      	cbz	r2, 802a782 <_svfprintf_r+0x742>
 802a766:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 802a76a:	6022      	str	r2, [r4, #0]
 802a76c:	2201      	movs	r2, #1
 802a76e:	4413      	add	r3, r2
 802a770:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a772:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a774:	6062      	str	r2, [r4, #4]
 802a776:	4413      	add	r3, r2
 802a778:	2b07      	cmp	r3, #7
 802a77a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a77c:	f300 828d 	bgt.w	802ac9a <_svfprintf_r+0xc5a>
 802a780:	3408      	adds	r4, #8
 802a782:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802a784:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a786:	b162      	cbz	r2, 802a7a2 <_svfprintf_r+0x762>
 802a788:	aa1f      	add	r2, sp, #124	@ 0x7c
 802a78a:	6022      	str	r2, [r4, #0]
 802a78c:	2202      	movs	r2, #2
 802a78e:	4413      	add	r3, r2
 802a790:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a792:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a794:	6062      	str	r2, [r4, #4]
 802a796:	3301      	adds	r3, #1
 802a798:	2b07      	cmp	r3, #7
 802a79a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a79c:	f300 8287 	bgt.w	802acae <_svfprintf_r+0xc6e>
 802a7a0:	3408      	adds	r4, #8
 802a7a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802a7a4:	2b80      	cmp	r3, #128	@ 0x80
 802a7a6:	d122      	bne.n	802a7ee <_svfprintf_r+0x7ae>
 802a7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a7aa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a7ac:	1a9b      	subs	r3, r3, r2
 802a7ae:	2b00      	cmp	r3, #0
 802a7b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a7b2:	dd1c      	ble.n	802a7ee <_svfprintf_r+0x7ae>
 802a7b4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a7b6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a7ba:	2810      	cmp	r0, #16
 802a7bc:	487b      	ldr	r0, [pc, #492]	@ (802a9ac <_svfprintf_r+0x96c>)
 802a7be:	6020      	str	r0, [r4, #0]
 802a7c0:	f102 0201 	add.w	r2, r2, #1
 802a7c4:	f104 0108 	add.w	r1, r4, #8
 802a7c8:	f300 827b 	bgt.w	802acc2 <_svfprintf_r+0xc82>
 802a7cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802a7ce:	6060      	str	r0, [r4, #4]
 802a7d0:	4403      	add	r3, r0
 802a7d2:	2a07      	cmp	r2, #7
 802a7d4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a7d8:	f340 8288 	ble.w	802acec <_svfprintf_r+0xcac>
 802a7dc:	9803      	ldr	r0, [sp, #12]
 802a7de:	aa26      	add	r2, sp, #152	@ 0x98
 802a7e0:	4659      	mov	r1, fp
 802a7e2:	f7fd ffb5 	bl	8028750 <__ssprint_r>
 802a7e6:	2800      	cmp	r0, #0
 802a7e8:	f040 85a5 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802a7ec:	ac29      	add	r4, sp, #164	@ 0xa4
 802a7ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802a7f0:	eba3 0308 	sub.w	r3, r3, r8
 802a7f4:	2b00      	cmp	r3, #0
 802a7f6:	9310      	str	r3, [sp, #64]	@ 0x40
 802a7f8:	dd1c      	ble.n	802a834 <_svfprintf_r+0x7f4>
 802a7fa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a7fc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802a800:	2810      	cmp	r0, #16
 802a802:	486a      	ldr	r0, [pc, #424]	@ (802a9ac <_svfprintf_r+0x96c>)
 802a804:	6020      	str	r0, [r4, #0]
 802a806:	f102 0201 	add.w	r2, r2, #1
 802a80a:	f104 0108 	add.w	r1, r4, #8
 802a80e:	f300 826f 	bgt.w	802acf0 <_svfprintf_r+0xcb0>
 802a812:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a814:	6060      	str	r0, [r4, #4]
 802a816:	4403      	add	r3, r0
 802a818:	2a07      	cmp	r2, #7
 802a81a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802a81e:	f340 827c 	ble.w	802ad1a <_svfprintf_r+0xcda>
 802a822:	9803      	ldr	r0, [sp, #12]
 802a824:	aa26      	add	r2, sp, #152	@ 0x98
 802a826:	4659      	mov	r1, fp
 802a828:	f7fd ff92 	bl	8028750 <__ssprint_r>
 802a82c:	2800      	cmp	r0, #0
 802a82e:	f040 8582 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802a832:	ac29      	add	r4, sp, #164	@ 0xa4
 802a834:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a836:	9310      	str	r3, [sp, #64]	@ 0x40
 802a838:	05ea      	lsls	r2, r5, #23
 802a83a:	f100 8275 	bmi.w	802ad28 <_svfprintf_r+0xce8>
 802a83e:	4443      	add	r3, r8
 802a840:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a842:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a844:	3301      	adds	r3, #1
 802a846:	2b07      	cmp	r3, #7
 802a848:	e9c4 9800 	strd	r9, r8, [r4]
 802a84c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a84e:	f300 82b1 	bgt.w	802adb4 <_svfprintf_r+0xd74>
 802a852:	3408      	adds	r4, #8
 802a854:	076a      	lsls	r2, r5, #29
 802a856:	f100 8550 	bmi.w	802b2fa <_svfprintf_r+0x12ba>
 802a85a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 802a85e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802a860:	428a      	cmp	r2, r1
 802a862:	bfac      	ite	ge
 802a864:	189b      	addge	r3, r3, r2
 802a866:	185b      	addlt	r3, r3, r1
 802a868:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a86a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a86c:	b13b      	cbz	r3, 802a87e <_svfprintf_r+0x83e>
 802a86e:	9803      	ldr	r0, [sp, #12]
 802a870:	aa26      	add	r2, sp, #152	@ 0x98
 802a872:	4659      	mov	r1, fp
 802a874:	f7fd ff6c 	bl	8028750 <__ssprint_r>
 802a878:	2800      	cmp	r0, #0
 802a87a:	f040 855c 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802a87e:	2300      	movs	r3, #0
 802a880:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a882:	f1ba 0f00 	cmp.w	sl, #0
 802a886:	f040 8572 	bne.w	802b36e <_svfprintf_r+0x132e>
 802a88a:	9e07      	ldr	r6, [sp, #28]
 802a88c:	ac29      	add	r4, sp, #164	@ 0xa4
 802a88e:	e0c6      	b.n	802aa1e <_svfprintf_r+0x9de>
 802a890:	f802 0c01 	strb.w	r0, [r2, #-1]
 802a894:	e6ac      	b.n	802a5f0 <_svfprintf_r+0x5b0>
 802a896:	f803 0b01 	strb.w	r0, [r3], #1
 802a89a:	e676      	b.n	802a58a <_svfprintf_r+0x54a>
 802a89c:	9b08      	ldr	r3, [sp, #32]
 802a89e:	2b46      	cmp	r3, #70	@ 0x46
 802a8a0:	d005      	beq.n	802a8ae <_svfprintf_r+0x86e>
 802a8a2:	2b45      	cmp	r3, #69	@ 0x45
 802a8a4:	d11a      	bne.n	802a8dc <_svfprintf_r+0x89c>
 802a8a6:	f108 0601 	add.w	r6, r8, #1
 802a8aa:	2102      	movs	r1, #2
 802a8ac:	e001      	b.n	802a8b2 <_svfprintf_r+0x872>
 802a8ae:	4646      	mov	r6, r8
 802a8b0:	2103      	movs	r1, #3
 802a8b2:	ab24      	add	r3, sp, #144	@ 0x90
 802a8b4:	9301      	str	r3, [sp, #4]
 802a8b6:	ab21      	add	r3, sp, #132	@ 0x84
 802a8b8:	9300      	str	r3, [sp, #0]
 802a8ba:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 802a8be:	ab20      	add	r3, sp, #128	@ 0x80
 802a8c0:	9803      	ldr	r0, [sp, #12]
 802a8c2:	4632      	mov	r2, r6
 802a8c4:	f7fc fd80 	bl	80273c8 <_dtoa_r>
 802a8c8:	9b08      	ldr	r3, [sp, #32]
 802a8ca:	2b47      	cmp	r3, #71	@ 0x47
 802a8cc:	4681      	mov	r9, r0
 802a8ce:	d119      	bne.n	802a904 <_svfprintf_r+0x8c4>
 802a8d0:	07e8      	lsls	r0, r5, #31
 802a8d2:	d405      	bmi.n	802a8e0 <_svfprintf_r+0x8a0>
 802a8d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a8d6:	eba3 0309 	sub.w	r3, r3, r9
 802a8da:	e69b      	b.n	802a614 <_svfprintf_r+0x5d4>
 802a8dc:	4646      	mov	r6, r8
 802a8de:	e7e4      	b.n	802a8aa <_svfprintf_r+0x86a>
 802a8e0:	eb09 0706 	add.w	r7, r9, r6
 802a8e4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a8e8:	2200      	movs	r2, #0
 802a8ea:	2300      	movs	r3, #0
 802a8ec:	f7d6 f904 	bl	8000af8 <__aeabi_dcmpeq>
 802a8f0:	b100      	cbz	r0, 802a8f4 <_svfprintf_r+0x8b4>
 802a8f2:	9724      	str	r7, [sp, #144]	@ 0x90
 802a8f4:	2230      	movs	r2, #48	@ 0x30
 802a8f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a8f8:	429f      	cmp	r7, r3
 802a8fa:	d9eb      	bls.n	802a8d4 <_svfprintf_r+0x894>
 802a8fc:	1c59      	adds	r1, r3, #1
 802a8fe:	9124      	str	r1, [sp, #144]	@ 0x90
 802a900:	701a      	strb	r2, [r3, #0]
 802a902:	e7f8      	b.n	802a8f6 <_svfprintf_r+0x8b6>
 802a904:	9b08      	ldr	r3, [sp, #32]
 802a906:	2b46      	cmp	r3, #70	@ 0x46
 802a908:	eb00 0706 	add.w	r7, r0, r6
 802a90c:	d1ea      	bne.n	802a8e4 <_svfprintf_r+0x8a4>
 802a90e:	7803      	ldrb	r3, [r0, #0]
 802a910:	2b30      	cmp	r3, #48	@ 0x30
 802a912:	d109      	bne.n	802a928 <_svfprintf_r+0x8e8>
 802a914:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 802a918:	2200      	movs	r2, #0
 802a91a:	2300      	movs	r3, #0
 802a91c:	f7d6 f8ec 	bl	8000af8 <__aeabi_dcmpeq>
 802a920:	b910      	cbnz	r0, 802a928 <_svfprintf_r+0x8e8>
 802a922:	f1c6 0601 	rsb	r6, r6, #1
 802a926:	9620      	str	r6, [sp, #128]	@ 0x80
 802a928:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802a92a:	441f      	add	r7, r3
 802a92c:	e7da      	b.n	802a8e4 <_svfprintf_r+0x8a4>
 802a92e:	9b08      	ldr	r3, [sp, #32]
 802a930:	2b46      	cmp	r3, #70	@ 0x46
 802a932:	f47f ae7d 	bne.w	802a630 <_svfprintf_r+0x5f0>
 802a936:	f005 0301 	and.w	r3, r5, #1
 802a93a:	2e00      	cmp	r6, #0
 802a93c:	ea43 0308 	orr.w	r3, r3, r8
 802a940:	dd25      	ble.n	802a98e <_svfprintf_r+0x94e>
 802a942:	b37b      	cbz	r3, 802a9a4 <_svfprintf_r+0x964>
 802a944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a946:	18f3      	adds	r3, r6, r3
 802a948:	4498      	add	r8, r3
 802a94a:	2366      	movs	r3, #102	@ 0x66
 802a94c:	9306      	str	r3, [sp, #24]
 802a94e:	e033      	b.n	802a9b8 <_svfprintf_r+0x978>
 802a950:	f813 7b01 	ldrb.w	r7, [r3], #1
 802a954:	f806 7f01 	strb.w	r7, [r6, #1]!
 802a958:	e6a1      	b.n	802a69e <_svfprintf_r+0x65e>
 802a95a:	b941      	cbnz	r1, 802a96e <_svfprintf_r+0x92e>
 802a95c:	2230      	movs	r2, #48	@ 0x30
 802a95e:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 802a962:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 802a966:	3330      	adds	r3, #48	@ 0x30
 802a968:	f802 3b01 	strb.w	r3, [r2], #1
 802a96c:	e6a3      	b.n	802a6b6 <_svfprintf_r+0x676>
 802a96e:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 802a972:	e7f8      	b.n	802a966 <_svfprintf_r+0x926>
 802a974:	9b04      	ldr	r3, [sp, #16]
 802a976:	429e      	cmp	r6, r3
 802a978:	da0d      	bge.n	802a996 <_svfprintf_r+0x956>
 802a97a:	9b04      	ldr	r3, [sp, #16]
 802a97c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802a97e:	2e00      	cmp	r6, #0
 802a980:	eb03 0802 	add.w	r8, r3, r2
 802a984:	dc0c      	bgt.n	802a9a0 <_svfprintf_r+0x960>
 802a986:	f1c6 0301 	rsb	r3, r6, #1
 802a98a:	4498      	add	r8, r3
 802a98c:	e008      	b.n	802a9a0 <_svfprintf_r+0x960>
 802a98e:	b17b      	cbz	r3, 802a9b0 <_svfprintf_r+0x970>
 802a990:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a992:	3301      	adds	r3, #1
 802a994:	e7d8      	b.n	802a948 <_svfprintf_r+0x908>
 802a996:	07eb      	lsls	r3, r5, #31
 802a998:	d521      	bpl.n	802a9de <_svfprintf_r+0x99e>
 802a99a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a99c:	eb06 0803 	add.w	r8, r6, r3
 802a9a0:	2367      	movs	r3, #103	@ 0x67
 802a9a2:	e7d3      	b.n	802a94c <_svfprintf_r+0x90c>
 802a9a4:	46b0      	mov	r8, r6
 802a9a6:	e7d0      	b.n	802a94a <_svfprintf_r+0x90a>
 802a9a8:	08034c6a 	.word	0x08034c6a
 802a9ac:	08034c5a 	.word	0x08034c5a
 802a9b0:	2366      	movs	r3, #102	@ 0x66
 802a9b2:	9306      	str	r3, [sp, #24]
 802a9b4:	f04f 0801 	mov.w	r8, #1
 802a9b8:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 802a9bc:	9308      	str	r3, [sp, #32]
 802a9be:	d01f      	beq.n	802aa00 <_svfprintf_r+0x9c0>
 802a9c0:	2700      	movs	r7, #0
 802a9c2:	2e00      	cmp	r6, #0
 802a9c4:	9708      	str	r7, [sp, #32]
 802a9c6:	f77f ae8a 	ble.w	802a6de <_svfprintf_r+0x69e>
 802a9ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9cc:	781b      	ldrb	r3, [r3, #0]
 802a9ce:	2bff      	cmp	r3, #255	@ 0xff
 802a9d0:	d107      	bne.n	802a9e2 <_svfprintf_r+0x9a2>
 802a9d2:	9b08      	ldr	r3, [sp, #32]
 802a9d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802a9d6:	443b      	add	r3, r7
 802a9d8:	fb02 8803 	mla	r8, r2, r3, r8
 802a9dc:	e67f      	b.n	802a6de <_svfprintf_r+0x69e>
 802a9de:	46b0      	mov	r8, r6
 802a9e0:	e7de      	b.n	802a9a0 <_svfprintf_r+0x960>
 802a9e2:	42b3      	cmp	r3, r6
 802a9e4:	daf5      	bge.n	802a9d2 <_svfprintf_r+0x992>
 802a9e6:	1af6      	subs	r6, r6, r3
 802a9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9ea:	785b      	ldrb	r3, [r3, #1]
 802a9ec:	b133      	cbz	r3, 802a9fc <_svfprintf_r+0x9bc>
 802a9ee:	9b08      	ldr	r3, [sp, #32]
 802a9f0:	3301      	adds	r3, #1
 802a9f2:	9308      	str	r3, [sp, #32]
 802a9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a9f6:	3301      	adds	r3, #1
 802a9f8:	9309      	str	r3, [sp, #36]	@ 0x24
 802a9fa:	e7e6      	b.n	802a9ca <_svfprintf_r+0x98a>
 802a9fc:	3701      	adds	r7, #1
 802a9fe:	e7e4      	b.n	802a9ca <_svfprintf_r+0x98a>
 802aa00:	9f08      	ldr	r7, [sp, #32]
 802aa02:	e66c      	b.n	802a6de <_svfprintf_r+0x69e>
 802aa04:	232d      	movs	r3, #45	@ 0x2d
 802aa06:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802aa0a:	e66c      	b.n	802a6e6 <_svfprintf_r+0x6a6>
 802aa0c:	06af      	lsls	r7, r5, #26
 802aa0e:	d50a      	bpl.n	802aa26 <_svfprintf_r+0x9e6>
 802aa10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa12:	6833      	ldr	r3, [r6, #0]
 802aa14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802aa16:	17d2      	asrs	r2, r2, #31
 802aa18:	e9c3 1200 	strd	r1, r2, [r3]
 802aa1c:	3604      	adds	r6, #4
 802aa1e:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 802aa22:	f7ff bb46 	b.w	802a0b2 <_svfprintf_r+0x72>
 802aa26:	06e8      	lsls	r0, r5, #27
 802aa28:	d503      	bpl.n	802aa32 <_svfprintf_r+0x9f2>
 802aa2a:	6833      	ldr	r3, [r6, #0]
 802aa2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa2e:	601a      	str	r2, [r3, #0]
 802aa30:	e7f4      	b.n	802aa1c <_svfprintf_r+0x9dc>
 802aa32:	0669      	lsls	r1, r5, #25
 802aa34:	d503      	bpl.n	802aa3e <_svfprintf_r+0x9fe>
 802aa36:	6833      	ldr	r3, [r6, #0]
 802aa38:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa3a:	801a      	strh	r2, [r3, #0]
 802aa3c:	e7ee      	b.n	802aa1c <_svfprintf_r+0x9dc>
 802aa3e:	05aa      	lsls	r2, r5, #22
 802aa40:	d5f3      	bpl.n	802aa2a <_svfprintf_r+0x9ea>
 802aa42:	6833      	ldr	r3, [r6, #0]
 802aa44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aa46:	701a      	strb	r2, [r3, #0]
 802aa48:	e7e8      	b.n	802aa1c <_svfprintf_r+0x9dc>
 802aa4a:	f045 0510 	orr.w	r5, r5, #16
 802aa4e:	f015 0320 	ands.w	r3, r5, #32
 802aa52:	d020      	beq.n	802aa96 <_svfprintf_r+0xa56>
 802aa54:	3607      	adds	r6, #7
 802aa56:	f026 0307 	bic.w	r3, r6, #7
 802aa5a:	461a      	mov	r2, r3
 802aa5c:	685f      	ldr	r7, [r3, #4]
 802aa5e:	f852 6b08 	ldr.w	r6, [r2], #8
 802aa62:	9207      	str	r2, [sp, #28]
 802aa64:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 802aa68:	2300      	movs	r3, #0
 802aa6a:	2200      	movs	r2, #0
 802aa6c:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 802aa70:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802aa74:	f000 848c 	beq.w	802b390 <_svfprintf_r+0x1350>
 802aa78:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 802aa7c:	9208      	str	r2, [sp, #32]
 802aa7e:	ea56 0207 	orrs.w	r2, r6, r7
 802aa82:	f040 848a 	bne.w	802b39a <_svfprintf_r+0x135a>
 802aa86:	f1b8 0f00 	cmp.w	r8, #0
 802aa8a:	f000 80db 	beq.w	802ac44 <_svfprintf_r+0xc04>
 802aa8e:	2b01      	cmp	r3, #1
 802aa90:	f040 8486 	bne.w	802b3a0 <_svfprintf_r+0x1360>
 802aa94:	e083      	b.n	802ab9e <_svfprintf_r+0xb5e>
 802aa96:	4632      	mov	r2, r6
 802aa98:	f015 0710 	ands.w	r7, r5, #16
 802aa9c:	f852 6b04 	ldr.w	r6, [r2], #4
 802aaa0:	9207      	str	r2, [sp, #28]
 802aaa2:	d001      	beq.n	802aaa8 <_svfprintf_r+0xa68>
 802aaa4:	461f      	mov	r7, r3
 802aaa6:	e7dd      	b.n	802aa64 <_svfprintf_r+0xa24>
 802aaa8:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802aaac:	d001      	beq.n	802aab2 <_svfprintf_r+0xa72>
 802aaae:	b2b6      	uxth	r6, r6
 802aab0:	e7d8      	b.n	802aa64 <_svfprintf_r+0xa24>
 802aab2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802aab6:	d0d5      	beq.n	802aa64 <_svfprintf_r+0xa24>
 802aab8:	b2f6      	uxtb	r6, r6
 802aaba:	e7f3      	b.n	802aaa4 <_svfprintf_r+0xa64>
 802aabc:	4633      	mov	r3, r6
 802aabe:	2278      	movs	r2, #120	@ 0x78
 802aac0:	f853 6b04 	ldr.w	r6, [r3], #4
 802aac4:	9307      	str	r3, [sp, #28]
 802aac6:	f647 0330 	movw	r3, #30768	@ 0x7830
 802aaca:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 802aace:	4b94      	ldr	r3, [pc, #592]	@ (802ad20 <_svfprintf_r+0xce0>)
 802aad0:	9319      	str	r3, [sp, #100]	@ 0x64
 802aad2:	2700      	movs	r7, #0
 802aad4:	f045 0502 	orr.w	r5, r5, #2
 802aad8:	2302      	movs	r3, #2
 802aada:	9206      	str	r2, [sp, #24]
 802aadc:	e7c5      	b.n	802aa6a <_svfprintf_r+0xa2a>
 802aade:	4633      	mov	r3, r6
 802aae0:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 802aae4:	f853 9b04 	ldr.w	r9, [r3], #4
 802aae8:	9307      	str	r3, [sp, #28]
 802aaea:	f04f 0600 	mov.w	r6, #0
 802aaee:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 802aaf2:	d00f      	beq.n	802ab14 <_svfprintf_r+0xad4>
 802aaf4:	4642      	mov	r2, r8
 802aaf6:	4631      	mov	r1, r6
 802aaf8:	4648      	mov	r0, r9
 802aafa:	f7d5 fb81 	bl	8000200 <memchr>
 802aafe:	4682      	mov	sl, r0
 802ab00:	2800      	cmp	r0, #0
 802ab02:	f43f ac81 	beq.w	802a408 <_svfprintf_r+0x3c8>
 802ab06:	eba0 0809 	sub.w	r8, r0, r9
 802ab0a:	46b2      	mov	sl, r6
 802ab0c:	9610      	str	r6, [sp, #64]	@ 0x40
 802ab0e:	4637      	mov	r7, r6
 802ab10:	9608      	str	r6, [sp, #32]
 802ab12:	e5eb      	b.n	802a6ec <_svfprintf_r+0x6ac>
 802ab14:	4648      	mov	r0, r9
 802ab16:	f7d5 fbc3 	bl	80002a0 <strlen>
 802ab1a:	46b2      	mov	sl, r6
 802ab1c:	4680      	mov	r8, r0
 802ab1e:	e473      	b.n	802a408 <_svfprintf_r+0x3c8>
 802ab20:	f045 0510 	orr.w	r5, r5, #16
 802ab24:	f015 0320 	ands.w	r3, r5, #32
 802ab28:	d009      	beq.n	802ab3e <_svfprintf_r+0xafe>
 802ab2a:	3607      	adds	r6, #7
 802ab2c:	f026 0307 	bic.w	r3, r6, #7
 802ab30:	461a      	mov	r2, r3
 802ab32:	685f      	ldr	r7, [r3, #4]
 802ab34:	f852 6b08 	ldr.w	r6, [r2], #8
 802ab38:	9207      	str	r2, [sp, #28]
 802ab3a:	2301      	movs	r3, #1
 802ab3c:	e795      	b.n	802aa6a <_svfprintf_r+0xa2a>
 802ab3e:	4632      	mov	r2, r6
 802ab40:	f015 0710 	ands.w	r7, r5, #16
 802ab44:	f852 6b04 	ldr.w	r6, [r2], #4
 802ab48:	9207      	str	r2, [sp, #28]
 802ab4a:	d001      	beq.n	802ab50 <_svfprintf_r+0xb10>
 802ab4c:	461f      	mov	r7, r3
 802ab4e:	e7f4      	b.n	802ab3a <_svfprintf_r+0xafa>
 802ab50:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802ab54:	d001      	beq.n	802ab5a <_svfprintf_r+0xb1a>
 802ab56:	b2b6      	uxth	r6, r6
 802ab58:	e7ef      	b.n	802ab3a <_svfprintf_r+0xafa>
 802ab5a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ab5e:	d0ec      	beq.n	802ab3a <_svfprintf_r+0xafa>
 802ab60:	b2f6      	uxtb	r6, r6
 802ab62:	e7f3      	b.n	802ab4c <_svfprintf_r+0xb0c>
 802ab64:	4b6f      	ldr	r3, [pc, #444]	@ (802ad24 <_svfprintf_r+0xce4>)
 802ab66:	f7ff bb39 	b.w	802a1dc <_svfprintf_r+0x19c>
 802ab6a:	4632      	mov	r2, r6
 802ab6c:	f015 0710 	ands.w	r7, r5, #16
 802ab70:	f852 6b04 	ldr.w	r6, [r2], #4
 802ab74:	9207      	str	r2, [sp, #28]
 802ab76:	d002      	beq.n	802ab7e <_svfprintf_r+0xb3e>
 802ab78:	461f      	mov	r7, r3
 802ab7a:	f7ff bb3c 	b.w	802a1f6 <_svfprintf_r+0x1b6>
 802ab7e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 802ab82:	d002      	beq.n	802ab8a <_svfprintf_r+0xb4a>
 802ab84:	b2b6      	uxth	r6, r6
 802ab86:	f7ff bb36 	b.w	802a1f6 <_svfprintf_r+0x1b6>
 802ab8a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 802ab8e:	f43f ab32 	beq.w	802a1f6 <_svfprintf_r+0x1b6>
 802ab92:	b2f6      	uxtb	r6, r6
 802ab94:	e7f0      	b.n	802ab78 <_svfprintf_r+0xb38>
 802ab96:	2e0a      	cmp	r6, #10
 802ab98:	f177 0300 	sbcs.w	r3, r7, #0
 802ab9c:	d207      	bcs.n	802abae <_svfprintf_r+0xb6e>
 802ab9e:	3630      	adds	r6, #48	@ 0x30
 802aba0:	b2f6      	uxtb	r6, r6
 802aba2:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 802aba6:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 802abaa:	f000 bc15 	b.w	802b3d8 <_svfprintf_r+0x1398>
 802abae:	2300      	movs	r3, #0
 802abb0:	9304      	str	r3, [sp, #16]
 802abb2:	9b08      	ldr	r3, [sp, #32]
 802abb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802abb8:	ad52      	add	r5, sp, #328	@ 0x148
 802abba:	9310      	str	r3, [sp, #64]	@ 0x40
 802abbc:	220a      	movs	r2, #10
 802abbe:	2300      	movs	r3, #0
 802abc0:	4630      	mov	r0, r6
 802abc2:	4639      	mov	r1, r7
 802abc4:	f7d6 f8c8 	bl	8000d58 <__aeabi_uldivmod>
 802abc8:	9b04      	ldr	r3, [sp, #16]
 802abca:	9011      	str	r0, [sp, #68]	@ 0x44
 802abcc:	3301      	adds	r3, #1
 802abce:	9304      	str	r3, [sp, #16]
 802abd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802abd2:	3230      	adds	r2, #48	@ 0x30
 802abd4:	468a      	mov	sl, r1
 802abd6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802abda:	f805 2c01 	strb.w	r2, [r5, #-1]
 802abde:	b1d3      	cbz	r3, 802ac16 <_svfprintf_r+0xbd6>
 802abe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802abe2:	9a04      	ldr	r2, [sp, #16]
 802abe4:	781b      	ldrb	r3, [r3, #0]
 802abe6:	429a      	cmp	r2, r3
 802abe8:	d115      	bne.n	802ac16 <_svfprintf_r+0xbd6>
 802abea:	2aff      	cmp	r2, #255	@ 0xff
 802abec:	d013      	beq.n	802ac16 <_svfprintf_r+0xbd6>
 802abee:	2e0a      	cmp	r6, #10
 802abf0:	f177 0300 	sbcs.w	r3, r7, #0
 802abf4:	d30f      	bcc.n	802ac16 <_svfprintf_r+0xbd6>
 802abf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802abf8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802abfa:	eba9 0903 	sub.w	r9, r9, r3
 802abfe:	461a      	mov	r2, r3
 802ac00:	4648      	mov	r0, r9
 802ac02:	f7fb f8ec 	bl	8025dde <strncpy>
 802ac06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac08:	785b      	ldrb	r3, [r3, #1]
 802ac0a:	b11b      	cbz	r3, 802ac14 <_svfprintf_r+0xbd4>
 802ac0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac0e:	3301      	adds	r3, #1
 802ac10:	9309      	str	r3, [sp, #36]	@ 0x24
 802ac12:	2300      	movs	r3, #0
 802ac14:	9304      	str	r3, [sp, #16]
 802ac16:	2e0a      	cmp	r6, #10
 802ac18:	f177 0700 	sbcs.w	r7, r7, #0
 802ac1c:	f0c0 83dc 	bcc.w	802b3d8 <_svfprintf_r+0x1398>
 802ac20:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802ac22:	4657      	mov	r7, sl
 802ac24:	464d      	mov	r5, r9
 802ac26:	e7c9      	b.n	802abbc <_svfprintf_r+0xb7c>
 802ac28:	f006 030f 	and.w	r3, r6, #15
 802ac2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802ac2e:	0936      	lsrs	r6, r6, #4
 802ac30:	5cd3      	ldrb	r3, [r2, r3]
 802ac32:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802ac36:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 802ac3a:	093f      	lsrs	r7, r7, #4
 802ac3c:	ea56 0307 	orrs.w	r3, r6, r7
 802ac40:	d1f2      	bne.n	802ac28 <_svfprintf_r+0xbe8>
 802ac42:	e3c9      	b.n	802b3d8 <_svfprintf_r+0x1398>
 802ac44:	b91b      	cbnz	r3, 802ac4e <_svfprintf_r+0xc0e>
 802ac46:	07e9      	lsls	r1, r5, #31
 802ac48:	d501      	bpl.n	802ac4e <_svfprintf_r+0xc0e>
 802ac4a:	2630      	movs	r6, #48	@ 0x30
 802ac4c:	e7a9      	b.n	802aba2 <_svfprintf_r+0xb62>
 802ac4e:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802ac52:	e3c1      	b.n	802b3d8 <_svfprintf_r+0x1398>
 802ac54:	9b06      	ldr	r3, [sp, #24]
 802ac56:	2b00      	cmp	r3, #0
 802ac58:	f000 838f 	beq.w	802b37a <_svfprintf_r+0x133a>
 802ac5c:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 802ac60:	2300      	movs	r3, #0
 802ac62:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 802ac66:	9607      	str	r6, [sp, #28]
 802ac68:	f7ff bb63 	b.w	802a332 <_svfprintf_r+0x2f2>
 802ac6c:	2010      	movs	r0, #16
 802ac6e:	4403      	add	r3, r0
 802ac70:	2a07      	cmp	r2, #7
 802ac72:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802ac76:	6060      	str	r0, [r4, #4]
 802ac78:	dd08      	ble.n	802ac8c <_svfprintf_r+0xc4c>
 802ac7a:	9803      	ldr	r0, [sp, #12]
 802ac7c:	aa26      	add	r2, sp, #152	@ 0x98
 802ac7e:	4659      	mov	r1, fp
 802ac80:	f7fd fd66 	bl	8028750 <__ssprint_r>
 802ac84:	2800      	cmp	r0, #0
 802ac86:	f040 8356 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802ac8a:	a929      	add	r1, sp, #164	@ 0xa4
 802ac8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ac8e:	3b10      	subs	r3, #16
 802ac90:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ac92:	460c      	mov	r4, r1
 802ac94:	e546      	b.n	802a724 <_svfprintf_r+0x6e4>
 802ac96:	460c      	mov	r4, r1
 802ac98:	e561      	b.n	802a75e <_svfprintf_r+0x71e>
 802ac9a:	9803      	ldr	r0, [sp, #12]
 802ac9c:	aa26      	add	r2, sp, #152	@ 0x98
 802ac9e:	4659      	mov	r1, fp
 802aca0:	f7fd fd56 	bl	8028750 <__ssprint_r>
 802aca4:	2800      	cmp	r0, #0
 802aca6:	f040 8346 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802acaa:	ac29      	add	r4, sp, #164	@ 0xa4
 802acac:	e569      	b.n	802a782 <_svfprintf_r+0x742>
 802acae:	9803      	ldr	r0, [sp, #12]
 802acb0:	aa26      	add	r2, sp, #152	@ 0x98
 802acb2:	4659      	mov	r1, fp
 802acb4:	f7fd fd4c 	bl	8028750 <__ssprint_r>
 802acb8:	2800      	cmp	r0, #0
 802acba:	f040 833c 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802acbe:	ac29      	add	r4, sp, #164	@ 0xa4
 802acc0:	e56f      	b.n	802a7a2 <_svfprintf_r+0x762>
 802acc2:	2010      	movs	r0, #16
 802acc4:	4403      	add	r3, r0
 802acc6:	2a07      	cmp	r2, #7
 802acc8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802accc:	6060      	str	r0, [r4, #4]
 802acce:	dd08      	ble.n	802ace2 <_svfprintf_r+0xca2>
 802acd0:	9803      	ldr	r0, [sp, #12]
 802acd2:	aa26      	add	r2, sp, #152	@ 0x98
 802acd4:	4659      	mov	r1, fp
 802acd6:	f7fd fd3b 	bl	8028750 <__ssprint_r>
 802acda:	2800      	cmp	r0, #0
 802acdc:	f040 832b 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802ace0:	a929      	add	r1, sp, #164	@ 0xa4
 802ace2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ace4:	3b10      	subs	r3, #16
 802ace6:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ace8:	460c      	mov	r4, r1
 802acea:	e563      	b.n	802a7b4 <_svfprintf_r+0x774>
 802acec:	460c      	mov	r4, r1
 802acee:	e57e      	b.n	802a7ee <_svfprintf_r+0x7ae>
 802acf0:	2010      	movs	r0, #16
 802acf2:	4403      	add	r3, r0
 802acf4:	2a07      	cmp	r2, #7
 802acf6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802acfa:	6060      	str	r0, [r4, #4]
 802acfc:	dd08      	ble.n	802ad10 <_svfprintf_r+0xcd0>
 802acfe:	9803      	ldr	r0, [sp, #12]
 802ad00:	aa26      	add	r2, sp, #152	@ 0x98
 802ad02:	4659      	mov	r1, fp
 802ad04:	f7fd fd24 	bl	8028750 <__ssprint_r>
 802ad08:	2800      	cmp	r0, #0
 802ad0a:	f040 8314 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802ad0e:	a929      	add	r1, sp, #164	@ 0xa4
 802ad10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ad12:	3b10      	subs	r3, #16
 802ad14:	9310      	str	r3, [sp, #64]	@ 0x40
 802ad16:	460c      	mov	r4, r1
 802ad18:	e56f      	b.n	802a7fa <_svfprintf_r+0x7ba>
 802ad1a:	460c      	mov	r4, r1
 802ad1c:	e58a      	b.n	802a834 <_svfprintf_r+0x7f4>
 802ad1e:	bf00      	nop
 802ad20:	080346f4 	.word	0x080346f4
 802ad24:	08034705 	.word	0x08034705
 802ad28:	9b06      	ldr	r3, [sp, #24]
 802ad2a:	2b65      	cmp	r3, #101	@ 0x65
 802ad2c:	f340 8246 	ble.w	802b1bc <_svfprintf_r+0x117c>
 802ad30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802ad34:	2200      	movs	r2, #0
 802ad36:	2300      	movs	r3, #0
 802ad38:	f7d5 fede 	bl	8000af8 <__aeabi_dcmpeq>
 802ad3c:	2800      	cmp	r0, #0
 802ad3e:	d06a      	beq.n	802ae16 <_svfprintf_r+0xdd6>
 802ad40:	4b73      	ldr	r3, [pc, #460]	@ (802af10 <_svfprintf_r+0xed0>)
 802ad42:	6023      	str	r3, [r4, #0]
 802ad44:	2301      	movs	r3, #1
 802ad46:	6063      	str	r3, [r4, #4]
 802ad48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ad4a:	3301      	adds	r3, #1
 802ad4c:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad4e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad50:	3301      	adds	r3, #1
 802ad52:	2b07      	cmp	r3, #7
 802ad54:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad56:	dc37      	bgt.n	802adc8 <_svfprintf_r+0xd88>
 802ad58:	3408      	adds	r4, #8
 802ad5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ad5c:	9a04      	ldr	r2, [sp, #16]
 802ad5e:	4293      	cmp	r3, r2
 802ad60:	db02      	blt.n	802ad68 <_svfprintf_r+0xd28>
 802ad62:	07ef      	lsls	r7, r5, #31
 802ad64:	f57f ad76 	bpl.w	802a854 <_svfprintf_r+0x814>
 802ad68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ad6a:	6023      	str	r3, [r4, #0]
 802ad6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ad6e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802ad70:	6063      	str	r3, [r4, #4]
 802ad72:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ad74:	4413      	add	r3, r2
 802ad76:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ad78:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ad7a:	3301      	adds	r3, #1
 802ad7c:	2b07      	cmp	r3, #7
 802ad7e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ad80:	dc2c      	bgt.n	802addc <_svfprintf_r+0xd9c>
 802ad82:	3408      	adds	r4, #8
 802ad84:	9b04      	ldr	r3, [sp, #16]
 802ad86:	1e5e      	subs	r6, r3, #1
 802ad88:	2e00      	cmp	r6, #0
 802ad8a:	f77f ad63 	ble.w	802a854 <_svfprintf_r+0x814>
 802ad8e:	4f61      	ldr	r7, [pc, #388]	@ (802af14 <_svfprintf_r+0xed4>)
 802ad90:	f04f 0810 	mov.w	r8, #16
 802ad94:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802ad98:	2e10      	cmp	r6, #16
 802ad9a:	f103 0301 	add.w	r3, r3, #1
 802ad9e:	f104 0108 	add.w	r1, r4, #8
 802ada2:	6027      	str	r7, [r4, #0]
 802ada4:	dc24      	bgt.n	802adf0 <_svfprintf_r+0xdb0>
 802ada6:	6066      	str	r6, [r4, #4]
 802ada8:	2b07      	cmp	r3, #7
 802adaa:	4416      	add	r6, r2
 802adac:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802adb0:	f340 82a0 	ble.w	802b2f4 <_svfprintf_r+0x12b4>
 802adb4:	9803      	ldr	r0, [sp, #12]
 802adb6:	aa26      	add	r2, sp, #152	@ 0x98
 802adb8:	4659      	mov	r1, fp
 802adba:	f7fd fcc9 	bl	8028750 <__ssprint_r>
 802adbe:	2800      	cmp	r0, #0
 802adc0:	f040 82b9 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802adc4:	ac29      	add	r4, sp, #164	@ 0xa4
 802adc6:	e545      	b.n	802a854 <_svfprintf_r+0x814>
 802adc8:	9803      	ldr	r0, [sp, #12]
 802adca:	aa26      	add	r2, sp, #152	@ 0x98
 802adcc:	4659      	mov	r1, fp
 802adce:	f7fd fcbf 	bl	8028750 <__ssprint_r>
 802add2:	2800      	cmp	r0, #0
 802add4:	f040 82af 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802add8:	ac29      	add	r4, sp, #164	@ 0xa4
 802adda:	e7be      	b.n	802ad5a <_svfprintf_r+0xd1a>
 802addc:	9803      	ldr	r0, [sp, #12]
 802adde:	aa26      	add	r2, sp, #152	@ 0x98
 802ade0:	4659      	mov	r1, fp
 802ade2:	f7fd fcb5 	bl	8028750 <__ssprint_r>
 802ade6:	2800      	cmp	r0, #0
 802ade8:	f040 82a5 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802adec:	ac29      	add	r4, sp, #164	@ 0xa4
 802adee:	e7c9      	b.n	802ad84 <_svfprintf_r+0xd44>
 802adf0:	3210      	adds	r2, #16
 802adf2:	2b07      	cmp	r3, #7
 802adf4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802adf8:	f8c4 8004 	str.w	r8, [r4, #4]
 802adfc:	dd08      	ble.n	802ae10 <_svfprintf_r+0xdd0>
 802adfe:	9803      	ldr	r0, [sp, #12]
 802ae00:	aa26      	add	r2, sp, #152	@ 0x98
 802ae02:	4659      	mov	r1, fp
 802ae04:	f7fd fca4 	bl	8028750 <__ssprint_r>
 802ae08:	2800      	cmp	r0, #0
 802ae0a:	f040 8294 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802ae0e:	a929      	add	r1, sp, #164	@ 0xa4
 802ae10:	3e10      	subs	r6, #16
 802ae12:	460c      	mov	r4, r1
 802ae14:	e7be      	b.n	802ad94 <_svfprintf_r+0xd54>
 802ae16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ae18:	2b00      	cmp	r3, #0
 802ae1a:	dc7d      	bgt.n	802af18 <_svfprintf_r+0xed8>
 802ae1c:	4b3c      	ldr	r3, [pc, #240]	@ (802af10 <_svfprintf_r+0xed0>)
 802ae1e:	6023      	str	r3, [r4, #0]
 802ae20:	2301      	movs	r3, #1
 802ae22:	6063      	str	r3, [r4, #4]
 802ae24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ae26:	3301      	adds	r3, #1
 802ae28:	9328      	str	r3, [sp, #160]	@ 0xa0
 802ae2a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae2c:	3301      	adds	r3, #1
 802ae2e:	2b07      	cmp	r3, #7
 802ae30:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae32:	dc46      	bgt.n	802aec2 <_svfprintf_r+0xe82>
 802ae34:	3408      	adds	r4, #8
 802ae36:	9904      	ldr	r1, [sp, #16]
 802ae38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ae3a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802ae3c:	430b      	orrs	r3, r1
 802ae3e:	f005 0101 	and.w	r1, r5, #1
 802ae42:	430b      	orrs	r3, r1
 802ae44:	f43f ad06 	beq.w	802a854 <_svfprintf_r+0x814>
 802ae48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802ae4a:	6023      	str	r3, [r4, #0]
 802ae4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ae4e:	6063      	str	r3, [r4, #4]
 802ae50:	441a      	add	r2, r3
 802ae52:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ae54:	9228      	str	r2, [sp, #160]	@ 0xa0
 802ae56:	3301      	adds	r3, #1
 802ae58:	2b07      	cmp	r3, #7
 802ae5a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802ae5c:	dc3b      	bgt.n	802aed6 <_svfprintf_r+0xe96>
 802ae5e:	f104 0308 	add.w	r3, r4, #8
 802ae62:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802ae64:	2e00      	cmp	r6, #0
 802ae66:	da1b      	bge.n	802aea0 <_svfprintf_r+0xe60>
 802ae68:	4f2a      	ldr	r7, [pc, #168]	@ (802af14 <_svfprintf_r+0xed4>)
 802ae6a:	4276      	negs	r6, r6
 802ae6c:	461a      	mov	r2, r3
 802ae6e:	2410      	movs	r4, #16
 802ae70:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 802ae74:	2e10      	cmp	r6, #16
 802ae76:	f101 0101 	add.w	r1, r1, #1
 802ae7a:	f103 0308 	add.w	r3, r3, #8
 802ae7e:	6017      	str	r7, [r2, #0]
 802ae80:	dc33      	bgt.n	802aeea <_svfprintf_r+0xeaa>
 802ae82:	6056      	str	r6, [r2, #4]
 802ae84:	2907      	cmp	r1, #7
 802ae86:	4406      	add	r6, r0
 802ae88:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 802ae8c:	dd08      	ble.n	802aea0 <_svfprintf_r+0xe60>
 802ae8e:	9803      	ldr	r0, [sp, #12]
 802ae90:	aa26      	add	r2, sp, #152	@ 0x98
 802ae92:	4659      	mov	r1, fp
 802ae94:	f7fd fc5c 	bl	8028750 <__ssprint_r>
 802ae98:	2800      	cmp	r0, #0
 802ae9a:	f040 824c 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802ae9e:	ab29      	add	r3, sp, #164	@ 0xa4
 802aea0:	9a04      	ldr	r2, [sp, #16]
 802aea2:	9904      	ldr	r1, [sp, #16]
 802aea4:	605a      	str	r2, [r3, #4]
 802aea6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 802aea8:	f8c3 9000 	str.w	r9, [r3]
 802aeac:	440a      	add	r2, r1
 802aeae:	9228      	str	r2, [sp, #160]	@ 0xa0
 802aeb0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802aeb2:	3201      	adds	r2, #1
 802aeb4:	2a07      	cmp	r2, #7
 802aeb6:	9227      	str	r2, [sp, #156]	@ 0x9c
 802aeb8:	f73f af7c 	bgt.w	802adb4 <_svfprintf_r+0xd74>
 802aebc:	f103 0408 	add.w	r4, r3, #8
 802aec0:	e4c8      	b.n	802a854 <_svfprintf_r+0x814>
 802aec2:	9803      	ldr	r0, [sp, #12]
 802aec4:	aa26      	add	r2, sp, #152	@ 0x98
 802aec6:	4659      	mov	r1, fp
 802aec8:	f7fd fc42 	bl	8028750 <__ssprint_r>
 802aecc:	2800      	cmp	r0, #0
 802aece:	f040 8232 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802aed2:	ac29      	add	r4, sp, #164	@ 0xa4
 802aed4:	e7af      	b.n	802ae36 <_svfprintf_r+0xdf6>
 802aed6:	9803      	ldr	r0, [sp, #12]
 802aed8:	aa26      	add	r2, sp, #152	@ 0x98
 802aeda:	4659      	mov	r1, fp
 802aedc:	f7fd fc38 	bl	8028750 <__ssprint_r>
 802aee0:	2800      	cmp	r0, #0
 802aee2:	f040 8228 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802aee6:	ab29      	add	r3, sp, #164	@ 0xa4
 802aee8:	e7bb      	b.n	802ae62 <_svfprintf_r+0xe22>
 802aeea:	3010      	adds	r0, #16
 802aeec:	2907      	cmp	r1, #7
 802aeee:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 802aef2:	6054      	str	r4, [r2, #4]
 802aef4:	dd08      	ble.n	802af08 <_svfprintf_r+0xec8>
 802aef6:	9803      	ldr	r0, [sp, #12]
 802aef8:	aa26      	add	r2, sp, #152	@ 0x98
 802aefa:	4659      	mov	r1, fp
 802aefc:	f7fd fc28 	bl	8028750 <__ssprint_r>
 802af00:	2800      	cmp	r0, #0
 802af02:	f040 8218 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802af06:	ab29      	add	r3, sp, #164	@ 0xa4
 802af08:	3e10      	subs	r6, #16
 802af0a:	461a      	mov	r2, r3
 802af0c:	e7b0      	b.n	802ae70 <_svfprintf_r+0xe30>
 802af0e:	bf00      	nop
 802af10:	08034716 	.word	0x08034716
 802af14:	08034c5a 	.word	0x08034c5a
 802af18:	9b04      	ldr	r3, [sp, #16]
 802af1a:	444b      	add	r3, r9
 802af1c:	9306      	str	r3, [sp, #24]
 802af1e:	9b04      	ldr	r3, [sp, #16]
 802af20:	42b3      	cmp	r3, r6
 802af22:	bfa8      	it	ge
 802af24:	4633      	movge	r3, r6
 802af26:	2b00      	cmp	r3, #0
 802af28:	4698      	mov	r8, r3
 802af2a:	dd0b      	ble.n	802af44 <_svfprintf_r+0xf04>
 802af2c:	e9c4 9300 	strd	r9, r3, [r4]
 802af30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802af32:	4443      	add	r3, r8
 802af34:	9328      	str	r3, [sp, #160]	@ 0xa0
 802af36:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802af38:	3301      	adds	r3, #1
 802af3a:	2b07      	cmp	r3, #7
 802af3c:	9327      	str	r3, [sp, #156]	@ 0x9c
 802af3e:	f300 8089 	bgt.w	802b054 <_svfprintf_r+0x1014>
 802af42:	3408      	adds	r4, #8
 802af44:	4643      	mov	r3, r8
 802af46:	2b00      	cmp	r3, #0
 802af48:	bfac      	ite	ge
 802af4a:	eba6 0808 	subge.w	r8, r6, r8
 802af4e:	46b0      	movlt	r8, r6
 802af50:	f1b8 0f00 	cmp.w	r8, #0
 802af54:	dd1b      	ble.n	802af8e <_svfprintf_r+0xf4e>
 802af56:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 802af5a:	4897      	ldr	r0, [pc, #604]	@ (802b1b8 <_svfprintf_r+0x1178>)
 802af5c:	6020      	str	r0, [r4, #0]
 802af5e:	f1b8 0f10 	cmp.w	r8, #16
 802af62:	f102 0201 	add.w	r2, r2, #1
 802af66:	f104 0108 	add.w	r1, r4, #8
 802af6a:	dc7d      	bgt.n	802b068 <_svfprintf_r+0x1028>
 802af6c:	4443      	add	r3, r8
 802af6e:	2a07      	cmp	r2, #7
 802af70:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802af74:	f8c4 8004 	str.w	r8, [r4, #4]
 802af78:	f340 808a 	ble.w	802b090 <_svfprintf_r+0x1050>
 802af7c:	9803      	ldr	r0, [sp, #12]
 802af7e:	aa26      	add	r2, sp, #152	@ 0x98
 802af80:	4659      	mov	r1, fp
 802af82:	f7fd fbe5 	bl	8028750 <__ssprint_r>
 802af86:	2800      	cmp	r0, #0
 802af88:	f040 81d5 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802af8c:	ac29      	add	r4, sp, #164	@ 0xa4
 802af8e:	eb09 0806 	add.w	r8, r9, r6
 802af92:	056e      	lsls	r6, r5, #21
 802af94:	d508      	bpl.n	802afa8 <_svfprintf_r+0xf68>
 802af96:	9b08      	ldr	r3, [sp, #32]
 802af98:	2b00      	cmp	r3, #0
 802af9a:	d17b      	bne.n	802b094 <_svfprintf_r+0x1054>
 802af9c:	2f00      	cmp	r7, #0
 802af9e:	d17b      	bne.n	802b098 <_svfprintf_r+0x1058>
 802afa0:	9b06      	ldr	r3, [sp, #24]
 802afa2:	4598      	cmp	r8, r3
 802afa4:	bf28      	it	cs
 802afa6:	4698      	movcs	r8, r3
 802afa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802afaa:	9a04      	ldr	r2, [sp, #16]
 802afac:	4293      	cmp	r3, r2
 802afae:	db01      	blt.n	802afb4 <_svfprintf_r+0xf74>
 802afb0:	07e8      	lsls	r0, r5, #31
 802afb2:	d50e      	bpl.n	802afd2 <_svfprintf_r+0xf92>
 802afb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802afb6:	6023      	str	r3, [r4, #0]
 802afb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802afba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802afbc:	6063      	str	r3, [r4, #4]
 802afbe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802afc0:	4413      	add	r3, r2
 802afc2:	9328      	str	r3, [sp, #160]	@ 0xa0
 802afc4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802afc6:	3301      	adds	r3, #1
 802afc8:	2b07      	cmp	r3, #7
 802afca:	9327      	str	r3, [sp, #156]	@ 0x9c
 802afcc:	f300 80df 	bgt.w	802b18e <_svfprintf_r+0x114e>
 802afd0:	3408      	adds	r4, #8
 802afd2:	9b04      	ldr	r3, [sp, #16]
 802afd4:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 802afd6:	1bdf      	subs	r7, r3, r7
 802afd8:	9b06      	ldr	r3, [sp, #24]
 802afda:	eba3 0308 	sub.w	r3, r3, r8
 802afde:	429f      	cmp	r7, r3
 802afe0:	bfa8      	it	ge
 802afe2:	461f      	movge	r7, r3
 802afe4:	2f00      	cmp	r7, #0
 802afe6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802afe8:	dd0a      	ble.n	802b000 <_svfprintf_r+0xfc0>
 802afea:	443b      	add	r3, r7
 802afec:	9328      	str	r3, [sp, #160]	@ 0xa0
 802afee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802aff0:	3301      	adds	r3, #1
 802aff2:	2b07      	cmp	r3, #7
 802aff4:	e9c4 8700 	strd	r8, r7, [r4]
 802aff8:	9327      	str	r3, [sp, #156]	@ 0x9c
 802affa:	f300 80d2 	bgt.w	802b1a2 <_svfprintf_r+0x1162>
 802affe:	3408      	adds	r4, #8
 802b000:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802b002:	9b04      	ldr	r3, [sp, #16]
 802b004:	2f00      	cmp	r7, #0
 802b006:	eba3 0606 	sub.w	r6, r3, r6
 802b00a:	bfa8      	it	ge
 802b00c:	1bf6      	subge	r6, r6, r7
 802b00e:	2e00      	cmp	r6, #0
 802b010:	f77f ac20 	ble.w	802a854 <_svfprintf_r+0x814>
 802b014:	4f68      	ldr	r7, [pc, #416]	@ (802b1b8 <_svfprintf_r+0x1178>)
 802b016:	f04f 0810 	mov.w	r8, #16
 802b01a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b01e:	2e10      	cmp	r6, #16
 802b020:	f103 0301 	add.w	r3, r3, #1
 802b024:	f104 0108 	add.w	r1, r4, #8
 802b028:	6027      	str	r7, [r4, #0]
 802b02a:	f77f aebc 	ble.w	802ada6 <_svfprintf_r+0xd66>
 802b02e:	3210      	adds	r2, #16
 802b030:	2b07      	cmp	r3, #7
 802b032:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b036:	f8c4 8004 	str.w	r8, [r4, #4]
 802b03a:	dd08      	ble.n	802b04e <_svfprintf_r+0x100e>
 802b03c:	9803      	ldr	r0, [sp, #12]
 802b03e:	aa26      	add	r2, sp, #152	@ 0x98
 802b040:	4659      	mov	r1, fp
 802b042:	f7fd fb85 	bl	8028750 <__ssprint_r>
 802b046:	2800      	cmp	r0, #0
 802b048:	f040 8175 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b04c:	a929      	add	r1, sp, #164	@ 0xa4
 802b04e:	3e10      	subs	r6, #16
 802b050:	460c      	mov	r4, r1
 802b052:	e7e2      	b.n	802b01a <_svfprintf_r+0xfda>
 802b054:	9803      	ldr	r0, [sp, #12]
 802b056:	aa26      	add	r2, sp, #152	@ 0x98
 802b058:	4659      	mov	r1, fp
 802b05a:	f7fd fb79 	bl	8028750 <__ssprint_r>
 802b05e:	2800      	cmp	r0, #0
 802b060:	f040 8169 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b064:	ac29      	add	r4, sp, #164	@ 0xa4
 802b066:	e76d      	b.n	802af44 <_svfprintf_r+0xf04>
 802b068:	2010      	movs	r0, #16
 802b06a:	4403      	add	r3, r0
 802b06c:	2a07      	cmp	r2, #7
 802b06e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b072:	6060      	str	r0, [r4, #4]
 802b074:	dd08      	ble.n	802b088 <_svfprintf_r+0x1048>
 802b076:	9803      	ldr	r0, [sp, #12]
 802b078:	aa26      	add	r2, sp, #152	@ 0x98
 802b07a:	4659      	mov	r1, fp
 802b07c:	f7fd fb68 	bl	8028750 <__ssprint_r>
 802b080:	2800      	cmp	r0, #0
 802b082:	f040 8158 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b086:	a929      	add	r1, sp, #164	@ 0xa4
 802b088:	f1a8 0810 	sub.w	r8, r8, #16
 802b08c:	460c      	mov	r4, r1
 802b08e:	e762      	b.n	802af56 <_svfprintf_r+0xf16>
 802b090:	460c      	mov	r4, r1
 802b092:	e77c      	b.n	802af8e <_svfprintf_r+0xf4e>
 802b094:	2f00      	cmp	r7, #0
 802b096:	d04a      	beq.n	802b12e <_svfprintf_r+0x10ee>
 802b098:	3f01      	subs	r7, #1
 802b09a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802b09c:	6023      	str	r3, [r4, #0]
 802b09e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802b0a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802b0a2:	6063      	str	r3, [r4, #4]
 802b0a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b0a6:	4413      	add	r3, r2
 802b0a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b0aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b0ac:	3301      	adds	r3, #1
 802b0ae:	2b07      	cmp	r3, #7
 802b0b0:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b0b2:	dc43      	bgt.n	802b13c <_svfprintf_r+0x10fc>
 802b0b4:	3408      	adds	r4, #8
 802b0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b0b8:	781a      	ldrb	r2, [r3, #0]
 802b0ba:	9b06      	ldr	r3, [sp, #24]
 802b0bc:	eba3 0308 	sub.w	r3, r3, r8
 802b0c0:	429a      	cmp	r2, r3
 802b0c2:	bfa8      	it	ge
 802b0c4:	461a      	movge	r2, r3
 802b0c6:	2a00      	cmp	r2, #0
 802b0c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b0ca:	4691      	mov	r9, r2
 802b0cc:	dd09      	ble.n	802b0e2 <_svfprintf_r+0x10a2>
 802b0ce:	4413      	add	r3, r2
 802b0d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b0d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b0d4:	3301      	adds	r3, #1
 802b0d6:	2b07      	cmp	r3, #7
 802b0d8:	e9c4 8200 	strd	r8, r2, [r4]
 802b0dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b0de:	dc37      	bgt.n	802b150 <_svfprintf_r+0x1110>
 802b0e0:	3408      	adds	r4, #8
 802b0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b0e4:	781e      	ldrb	r6, [r3, #0]
 802b0e6:	f1b9 0f00 	cmp.w	r9, #0
 802b0ea:	bfa8      	it	ge
 802b0ec:	eba6 0609 	subge.w	r6, r6, r9
 802b0f0:	2e00      	cmp	r6, #0
 802b0f2:	dd18      	ble.n	802b126 <_svfprintf_r+0x10e6>
 802b0f4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b0f8:	482f      	ldr	r0, [pc, #188]	@ (802b1b8 <_svfprintf_r+0x1178>)
 802b0fa:	6020      	str	r0, [r4, #0]
 802b0fc:	2e10      	cmp	r6, #16
 802b0fe:	f103 0301 	add.w	r3, r3, #1
 802b102:	f104 0108 	add.w	r1, r4, #8
 802b106:	dc2d      	bgt.n	802b164 <_svfprintf_r+0x1124>
 802b108:	6066      	str	r6, [r4, #4]
 802b10a:	2b07      	cmp	r3, #7
 802b10c:	4416      	add	r6, r2
 802b10e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 802b112:	dd3a      	ble.n	802b18a <_svfprintf_r+0x114a>
 802b114:	9803      	ldr	r0, [sp, #12]
 802b116:	aa26      	add	r2, sp, #152	@ 0x98
 802b118:	4659      	mov	r1, fp
 802b11a:	f7fd fb19 	bl	8028750 <__ssprint_r>
 802b11e:	2800      	cmp	r0, #0
 802b120:	f040 8109 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b124:	ac29      	add	r4, sp, #164	@ 0xa4
 802b126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b128:	781b      	ldrb	r3, [r3, #0]
 802b12a:	4498      	add	r8, r3
 802b12c:	e733      	b.n	802af96 <_svfprintf_r+0xf56>
 802b12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b130:	3b01      	subs	r3, #1
 802b132:	9309      	str	r3, [sp, #36]	@ 0x24
 802b134:	9b08      	ldr	r3, [sp, #32]
 802b136:	3b01      	subs	r3, #1
 802b138:	9308      	str	r3, [sp, #32]
 802b13a:	e7ae      	b.n	802b09a <_svfprintf_r+0x105a>
 802b13c:	9803      	ldr	r0, [sp, #12]
 802b13e:	aa26      	add	r2, sp, #152	@ 0x98
 802b140:	4659      	mov	r1, fp
 802b142:	f7fd fb05 	bl	8028750 <__ssprint_r>
 802b146:	2800      	cmp	r0, #0
 802b148:	f040 80f5 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b14c:	ac29      	add	r4, sp, #164	@ 0xa4
 802b14e:	e7b2      	b.n	802b0b6 <_svfprintf_r+0x1076>
 802b150:	9803      	ldr	r0, [sp, #12]
 802b152:	aa26      	add	r2, sp, #152	@ 0x98
 802b154:	4659      	mov	r1, fp
 802b156:	f7fd fafb 	bl	8028750 <__ssprint_r>
 802b15a:	2800      	cmp	r0, #0
 802b15c:	f040 80eb 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b160:	ac29      	add	r4, sp, #164	@ 0xa4
 802b162:	e7be      	b.n	802b0e2 <_svfprintf_r+0x10a2>
 802b164:	2010      	movs	r0, #16
 802b166:	4402      	add	r2, r0
 802b168:	2b07      	cmp	r3, #7
 802b16a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b16e:	6060      	str	r0, [r4, #4]
 802b170:	dd08      	ble.n	802b184 <_svfprintf_r+0x1144>
 802b172:	9803      	ldr	r0, [sp, #12]
 802b174:	aa26      	add	r2, sp, #152	@ 0x98
 802b176:	4659      	mov	r1, fp
 802b178:	f7fd faea 	bl	8028750 <__ssprint_r>
 802b17c:	2800      	cmp	r0, #0
 802b17e:	f040 80da 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b182:	a929      	add	r1, sp, #164	@ 0xa4
 802b184:	3e10      	subs	r6, #16
 802b186:	460c      	mov	r4, r1
 802b188:	e7b4      	b.n	802b0f4 <_svfprintf_r+0x10b4>
 802b18a:	460c      	mov	r4, r1
 802b18c:	e7cb      	b.n	802b126 <_svfprintf_r+0x10e6>
 802b18e:	9803      	ldr	r0, [sp, #12]
 802b190:	aa26      	add	r2, sp, #152	@ 0x98
 802b192:	4659      	mov	r1, fp
 802b194:	f7fd fadc 	bl	8028750 <__ssprint_r>
 802b198:	2800      	cmp	r0, #0
 802b19a:	f040 80cc 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b19e:	ac29      	add	r4, sp, #164	@ 0xa4
 802b1a0:	e717      	b.n	802afd2 <_svfprintf_r+0xf92>
 802b1a2:	9803      	ldr	r0, [sp, #12]
 802b1a4:	aa26      	add	r2, sp, #152	@ 0x98
 802b1a6:	4659      	mov	r1, fp
 802b1a8:	f7fd fad2 	bl	8028750 <__ssprint_r>
 802b1ac:	2800      	cmp	r0, #0
 802b1ae:	f040 80c2 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b1b2:	ac29      	add	r4, sp, #164	@ 0xa4
 802b1b4:	e724      	b.n	802b000 <_svfprintf_r+0xfc0>
 802b1b6:	bf00      	nop
 802b1b8:	08034c5a 	.word	0x08034c5a
 802b1bc:	9904      	ldr	r1, [sp, #16]
 802b1be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802b1c0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 802b1c2:	2901      	cmp	r1, #1
 802b1c4:	f103 0301 	add.w	r3, r3, #1
 802b1c8:	f102 0201 	add.w	r2, r2, #1
 802b1cc:	f104 0608 	add.w	r6, r4, #8
 802b1d0:	dc02      	bgt.n	802b1d8 <_svfprintf_r+0x1198>
 802b1d2:	07e9      	lsls	r1, r5, #31
 802b1d4:	f140 8083 	bpl.w	802b2de <_svfprintf_r+0x129e>
 802b1d8:	2101      	movs	r1, #1
 802b1da:	2a07      	cmp	r2, #7
 802b1dc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b1e0:	f8c4 9000 	str.w	r9, [r4]
 802b1e4:	6061      	str	r1, [r4, #4]
 802b1e6:	dd08      	ble.n	802b1fa <_svfprintf_r+0x11ba>
 802b1e8:	9803      	ldr	r0, [sp, #12]
 802b1ea:	aa26      	add	r2, sp, #152	@ 0x98
 802b1ec:	4659      	mov	r1, fp
 802b1ee:	f7fd faaf 	bl	8028750 <__ssprint_r>
 802b1f2:	2800      	cmp	r0, #0
 802b1f4:	f040 809f 	bne.w	802b336 <_svfprintf_r+0x12f6>
 802b1f8:	ae29      	add	r6, sp, #164	@ 0xa4
 802b1fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b1fc:	6033      	str	r3, [r6, #0]
 802b1fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802b200:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802b202:	6073      	str	r3, [r6, #4]
 802b204:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b206:	4413      	add	r3, r2
 802b208:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b20a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b20c:	3301      	adds	r3, #1
 802b20e:	2b07      	cmp	r3, #7
 802b210:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b212:	dc33      	bgt.n	802b27c <_svfprintf_r+0x123c>
 802b214:	3608      	adds	r6, #8
 802b216:	9b04      	ldr	r3, [sp, #16]
 802b218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802b21c:	1e5c      	subs	r4, r3, #1
 802b21e:	2200      	movs	r2, #0
 802b220:	2300      	movs	r3, #0
 802b222:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 802b226:	f7d5 fc67 	bl	8000af8 <__aeabi_dcmpeq>
 802b22a:	2800      	cmp	r0, #0
 802b22c:	d12f      	bne.n	802b28e <_svfprintf_r+0x124e>
 802b22e:	f109 0201 	add.w	r2, r9, #1
 802b232:	e9c6 2400 	strd	r2, r4, [r6]
 802b236:	9a04      	ldr	r2, [sp, #16]
 802b238:	f108 0301 	add.w	r3, r8, #1
 802b23c:	3f01      	subs	r7, #1
 802b23e:	4417      	add	r7, r2
 802b240:	2b07      	cmp	r3, #7
 802b242:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 802b246:	dd53      	ble.n	802b2f0 <_svfprintf_r+0x12b0>
 802b248:	9803      	ldr	r0, [sp, #12]
 802b24a:	aa26      	add	r2, sp, #152	@ 0x98
 802b24c:	4659      	mov	r1, fp
 802b24e:	f7fd fa7f 	bl	8028750 <__ssprint_r>
 802b252:	2800      	cmp	r0, #0
 802b254:	d16f      	bne.n	802b336 <_svfprintf_r+0x12f6>
 802b256:	ae29      	add	r6, sp, #164	@ 0xa4
 802b258:	ab22      	add	r3, sp, #136	@ 0x88
 802b25a:	6033      	str	r3, [r6, #0]
 802b25c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b25e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802b260:	6073      	str	r3, [r6, #4]
 802b262:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b264:	4413      	add	r3, r2
 802b266:	9328      	str	r3, [sp, #160]	@ 0xa0
 802b268:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802b26a:	3301      	adds	r3, #1
 802b26c:	2b07      	cmp	r3, #7
 802b26e:	9327      	str	r3, [sp, #156]	@ 0x9c
 802b270:	f73f ada0 	bgt.w	802adb4 <_svfprintf_r+0xd74>
 802b274:	f106 0408 	add.w	r4, r6, #8
 802b278:	f7ff baec 	b.w	802a854 <_svfprintf_r+0x814>
 802b27c:	9803      	ldr	r0, [sp, #12]
 802b27e:	aa26      	add	r2, sp, #152	@ 0x98
 802b280:	4659      	mov	r1, fp
 802b282:	f7fd fa65 	bl	8028750 <__ssprint_r>
 802b286:	2800      	cmp	r0, #0
 802b288:	d155      	bne.n	802b336 <_svfprintf_r+0x12f6>
 802b28a:	ae29      	add	r6, sp, #164	@ 0xa4
 802b28c:	e7c3      	b.n	802b216 <_svfprintf_r+0x11d6>
 802b28e:	9b04      	ldr	r3, [sp, #16]
 802b290:	2b01      	cmp	r3, #1
 802b292:	dde1      	ble.n	802b258 <_svfprintf_r+0x1218>
 802b294:	4f57      	ldr	r7, [pc, #348]	@ (802b3f4 <_svfprintf_r+0x13b4>)
 802b296:	f04f 0810 	mov.w	r8, #16
 802b29a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b29e:	2c10      	cmp	r4, #16
 802b2a0:	f103 0301 	add.w	r3, r3, #1
 802b2a4:	f106 0108 	add.w	r1, r6, #8
 802b2a8:	6037      	str	r7, [r6, #0]
 802b2aa:	dc07      	bgt.n	802b2bc <_svfprintf_r+0x127c>
 802b2ac:	6074      	str	r4, [r6, #4]
 802b2ae:	2b07      	cmp	r3, #7
 802b2b0:	4414      	add	r4, r2
 802b2b2:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 802b2b6:	dcc7      	bgt.n	802b248 <_svfprintf_r+0x1208>
 802b2b8:	460e      	mov	r6, r1
 802b2ba:	e7cd      	b.n	802b258 <_svfprintf_r+0x1218>
 802b2bc:	3210      	adds	r2, #16
 802b2be:	2b07      	cmp	r3, #7
 802b2c0:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b2c4:	f8c6 8004 	str.w	r8, [r6, #4]
 802b2c8:	dd06      	ble.n	802b2d8 <_svfprintf_r+0x1298>
 802b2ca:	9803      	ldr	r0, [sp, #12]
 802b2cc:	aa26      	add	r2, sp, #152	@ 0x98
 802b2ce:	4659      	mov	r1, fp
 802b2d0:	f7fd fa3e 	bl	8028750 <__ssprint_r>
 802b2d4:	bb78      	cbnz	r0, 802b336 <_svfprintf_r+0x12f6>
 802b2d6:	a929      	add	r1, sp, #164	@ 0xa4
 802b2d8:	3c10      	subs	r4, #16
 802b2da:	460e      	mov	r6, r1
 802b2dc:	e7dd      	b.n	802b29a <_svfprintf_r+0x125a>
 802b2de:	2101      	movs	r1, #1
 802b2e0:	2a07      	cmp	r2, #7
 802b2e2:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 802b2e6:	f8c4 9000 	str.w	r9, [r4]
 802b2ea:	6061      	str	r1, [r4, #4]
 802b2ec:	ddb4      	ble.n	802b258 <_svfprintf_r+0x1218>
 802b2ee:	e7ab      	b.n	802b248 <_svfprintf_r+0x1208>
 802b2f0:	3608      	adds	r6, #8
 802b2f2:	e7b1      	b.n	802b258 <_svfprintf_r+0x1218>
 802b2f4:	460c      	mov	r4, r1
 802b2f6:	f7ff baad 	b.w	802a854 <_svfprintf_r+0x814>
 802b2fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802b2fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802b2fe:	1a9d      	subs	r5, r3, r2
 802b300:	2d00      	cmp	r5, #0
 802b302:	f77f aaaa 	ble.w	802a85a <_svfprintf_r+0x81a>
 802b306:	4e3c      	ldr	r6, [pc, #240]	@ (802b3f8 <_svfprintf_r+0x13b8>)
 802b308:	2710      	movs	r7, #16
 802b30a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 802b30e:	2d10      	cmp	r5, #16
 802b310:	f103 0301 	add.w	r3, r3, #1
 802b314:	6026      	str	r6, [r4, #0]
 802b316:	dc18      	bgt.n	802b34a <_svfprintf_r+0x130a>
 802b318:	442a      	add	r2, r5
 802b31a:	2b07      	cmp	r3, #7
 802b31c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b320:	6065      	str	r5, [r4, #4]
 802b322:	f77f aa9a 	ble.w	802a85a <_svfprintf_r+0x81a>
 802b326:	9803      	ldr	r0, [sp, #12]
 802b328:	aa26      	add	r2, sp, #152	@ 0x98
 802b32a:	4659      	mov	r1, fp
 802b32c:	f7fd fa10 	bl	8028750 <__ssprint_r>
 802b330:	2800      	cmp	r0, #0
 802b332:	f43f aa92 	beq.w	802a85a <_svfprintf_r+0x81a>
 802b336:	f1ba 0f00 	cmp.w	sl, #0
 802b33a:	f43f a89a 	beq.w	802a472 <_svfprintf_r+0x432>
 802b33e:	9803      	ldr	r0, [sp, #12]
 802b340:	4651      	mov	r1, sl
 802b342:	f7fc fe43 	bl	8027fcc <_free_r>
 802b346:	f7ff b894 	b.w	802a472 <_svfprintf_r+0x432>
 802b34a:	3210      	adds	r2, #16
 802b34c:	2b07      	cmp	r3, #7
 802b34e:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 802b352:	6067      	str	r7, [r4, #4]
 802b354:	dc02      	bgt.n	802b35c <_svfprintf_r+0x131c>
 802b356:	3408      	adds	r4, #8
 802b358:	3d10      	subs	r5, #16
 802b35a:	e7d6      	b.n	802b30a <_svfprintf_r+0x12ca>
 802b35c:	9803      	ldr	r0, [sp, #12]
 802b35e:	aa26      	add	r2, sp, #152	@ 0x98
 802b360:	4659      	mov	r1, fp
 802b362:	f7fd f9f5 	bl	8028750 <__ssprint_r>
 802b366:	2800      	cmp	r0, #0
 802b368:	d1e5      	bne.n	802b336 <_svfprintf_r+0x12f6>
 802b36a:	ac29      	add	r4, sp, #164	@ 0xa4
 802b36c:	e7f4      	b.n	802b358 <_svfprintf_r+0x1318>
 802b36e:	9803      	ldr	r0, [sp, #12]
 802b370:	4651      	mov	r1, sl
 802b372:	f7fc fe2b 	bl	8027fcc <_free_r>
 802b376:	f7ff ba88 	b.w	802a88a <_svfprintf_r+0x84a>
 802b37a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802b37c:	2b00      	cmp	r3, #0
 802b37e:	f43f a878 	beq.w	802a472 <_svfprintf_r+0x432>
 802b382:	9803      	ldr	r0, [sp, #12]
 802b384:	aa26      	add	r2, sp, #152	@ 0x98
 802b386:	4659      	mov	r1, fp
 802b388:	f7fd f9e2 	bl	8028750 <__ssprint_r>
 802b38c:	f7ff b871 	b.w	802a472 <_svfprintf_r+0x432>
 802b390:	ea56 0207 	orrs.w	r2, r6, r7
 802b394:	9508      	str	r5, [sp, #32]
 802b396:	f43f ab7a 	beq.w	802aa8e <_svfprintf_r+0xa4e>
 802b39a:	2b01      	cmp	r3, #1
 802b39c:	f43f abfb 	beq.w	802ab96 <_svfprintf_r+0xb56>
 802b3a0:	2b02      	cmp	r3, #2
 802b3a2:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 802b3a6:	f43f ac3f 	beq.w	802ac28 <_svfprintf_r+0xbe8>
 802b3aa:	f006 0307 	and.w	r3, r6, #7
 802b3ae:	08f6      	lsrs	r6, r6, #3
 802b3b0:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 802b3b4:	08ff      	lsrs	r7, r7, #3
 802b3b6:	3330      	adds	r3, #48	@ 0x30
 802b3b8:	ea56 0107 	orrs.w	r1, r6, r7
 802b3bc:	464a      	mov	r2, r9
 802b3be:	f809 3d01 	strb.w	r3, [r9, #-1]!
 802b3c2:	d1f2      	bne.n	802b3aa <_svfprintf_r+0x136a>
 802b3c4:	9908      	ldr	r1, [sp, #32]
 802b3c6:	07c8      	lsls	r0, r1, #31
 802b3c8:	d506      	bpl.n	802b3d8 <_svfprintf_r+0x1398>
 802b3ca:	2b30      	cmp	r3, #48	@ 0x30
 802b3cc:	d004      	beq.n	802b3d8 <_svfprintf_r+0x1398>
 802b3ce:	2330      	movs	r3, #48	@ 0x30
 802b3d0:	f809 3c01 	strb.w	r3, [r9, #-1]
 802b3d4:	f1a2 0902 	sub.w	r9, r2, #2
 802b3d8:	ab52      	add	r3, sp, #328	@ 0x148
 802b3da:	9d08      	ldr	r5, [sp, #32]
 802b3dc:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 802b3e0:	f04f 0a00 	mov.w	sl, #0
 802b3e4:	eba3 0809 	sub.w	r8, r3, r9
 802b3e8:	4657      	mov	r7, sl
 802b3ea:	f8cd a020 	str.w	sl, [sp, #32]
 802b3ee:	4656      	mov	r6, sl
 802b3f0:	f7ff b97c 	b.w	802a6ec <_svfprintf_r+0x6ac>
 802b3f4:	08034c5a 	.word	0x08034c5a
 802b3f8:	08034c6a 	.word	0x08034c6a

0802b3fc <__swhatbuf_r>:
 802b3fc:	b570      	push	{r4, r5, r6, lr}
 802b3fe:	460c      	mov	r4, r1
 802b400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b404:	2900      	cmp	r1, #0
 802b406:	b096      	sub	sp, #88	@ 0x58
 802b408:	4615      	mov	r5, r2
 802b40a:	461e      	mov	r6, r3
 802b40c:	da07      	bge.n	802b41e <__swhatbuf_r+0x22>
 802b40e:	89a1      	ldrh	r1, [r4, #12]
 802b410:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 802b414:	d117      	bne.n	802b446 <__swhatbuf_r+0x4a>
 802b416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b41a:	4608      	mov	r0, r1
 802b41c:	e00f      	b.n	802b43e <__swhatbuf_r+0x42>
 802b41e:	466a      	mov	r2, sp
 802b420:	f003 f892 	bl	802e548 <_fstat_r>
 802b424:	2800      	cmp	r0, #0
 802b426:	dbf2      	blt.n	802b40e <__swhatbuf_r+0x12>
 802b428:	9901      	ldr	r1, [sp, #4]
 802b42a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b42e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b432:	4259      	negs	r1, r3
 802b434:	4159      	adcs	r1, r3
 802b436:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 802b43a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b43e:	6031      	str	r1, [r6, #0]
 802b440:	602b      	str	r3, [r5, #0]
 802b442:	b016      	add	sp, #88	@ 0x58
 802b444:	bd70      	pop	{r4, r5, r6, pc}
 802b446:	2100      	movs	r1, #0
 802b448:	2340      	movs	r3, #64	@ 0x40
 802b44a:	e7e6      	b.n	802b41a <__swhatbuf_r+0x1e>

0802b44c <__smakebuf_r>:
 802b44c:	898b      	ldrh	r3, [r1, #12]
 802b44e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b450:	079d      	lsls	r5, r3, #30
 802b452:	4606      	mov	r6, r0
 802b454:	460c      	mov	r4, r1
 802b456:	d507      	bpl.n	802b468 <__smakebuf_r+0x1c>
 802b458:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 802b45c:	6023      	str	r3, [r4, #0]
 802b45e:	6123      	str	r3, [r4, #16]
 802b460:	2301      	movs	r3, #1
 802b462:	6163      	str	r3, [r4, #20]
 802b464:	b003      	add	sp, #12
 802b466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b468:	ab01      	add	r3, sp, #4
 802b46a:	466a      	mov	r2, sp
 802b46c:	f7ff ffc6 	bl	802b3fc <__swhatbuf_r>
 802b470:	9f00      	ldr	r7, [sp, #0]
 802b472:	4605      	mov	r5, r0
 802b474:	4639      	mov	r1, r7
 802b476:	4630      	mov	r0, r6
 802b478:	f7fc fec0 	bl	80281fc <_malloc_r>
 802b47c:	b948      	cbnz	r0, 802b492 <__smakebuf_r+0x46>
 802b47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b482:	059a      	lsls	r2, r3, #22
 802b484:	d4ee      	bmi.n	802b464 <__smakebuf_r+0x18>
 802b486:	f023 0303 	bic.w	r3, r3, #3
 802b48a:	f043 0302 	orr.w	r3, r3, #2
 802b48e:	81a3      	strh	r3, [r4, #12]
 802b490:	e7e2      	b.n	802b458 <__smakebuf_r+0xc>
 802b492:	89a3      	ldrh	r3, [r4, #12]
 802b494:	6020      	str	r0, [r4, #0]
 802b496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b49a:	81a3      	strh	r3, [r4, #12]
 802b49c:	9b01      	ldr	r3, [sp, #4]
 802b49e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b4a2:	b15b      	cbz	r3, 802b4bc <__smakebuf_r+0x70>
 802b4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b4a8:	4630      	mov	r0, r6
 802b4aa:	f003 f85f 	bl	802e56c <_isatty_r>
 802b4ae:	b128      	cbz	r0, 802b4bc <__smakebuf_r+0x70>
 802b4b0:	89a3      	ldrh	r3, [r4, #12]
 802b4b2:	f023 0303 	bic.w	r3, r3, #3
 802b4b6:	f043 0301 	orr.w	r3, r3, #1
 802b4ba:	81a3      	strh	r3, [r4, #12]
 802b4bc:	89a3      	ldrh	r3, [r4, #12]
 802b4be:	431d      	orrs	r5, r3
 802b4c0:	81a5      	strh	r5, [r4, #12]
 802b4c2:	e7cf      	b.n	802b464 <__smakebuf_r+0x18>

0802b4c4 <__ssvfscanf_r>:
 802b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4c8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 802b4cc:	461d      	mov	r5, r3
 802b4ce:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 802b4d2:	af02      	add	r7, sp, #8
 802b4d4:	049e      	lsls	r6, r3, #18
 802b4d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 802b4d8:	460c      	mov	r4, r1
 802b4da:	617a      	str	r2, [r7, #20]
 802b4dc:	d406      	bmi.n	802b4ec <__ssvfscanf_r+0x28>
 802b4de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802b4e2:	818b      	strh	r3, [r1, #12]
 802b4e4:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 802b4e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802b4ea:	664b      	str	r3, [r1, #100]	@ 0x64
 802b4ec:	2300      	movs	r3, #0
 802b4ee:	e9c7 3307 	strd	r3, r3, [r7, #28]
 802b4f2:	61bb      	str	r3, [r7, #24]
 802b4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 802b4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 802b4f8:	627b      	str	r3, [r7, #36]	@ 0x24
 802b4fa:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b4fe:	f818 3b01 	ldrb.w	r3, [r8], #1
 802b502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802b504:	2b00      	cmp	r3, #0
 802b506:	f000 80d3 	beq.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802b50a:	4a84      	ldr	r2, [pc, #528]	@ (802b71c <__ssvfscanf_r+0x258>)
 802b50c:	5cd6      	ldrb	r6, [r2, r3]
 802b50e:	f016 0608 	ands.w	r6, r6, #8
 802b512:	d01b      	beq.n	802b54c <__ssvfscanf_r+0x88>
 802b514:	6863      	ldr	r3, [r4, #4]
 802b516:	2b00      	cmp	r3, #0
 802b518:	dd08      	ble.n	802b52c <__ssvfscanf_r+0x68>
 802b51a:	6823      	ldr	r3, [r4, #0]
 802b51c:	497f      	ldr	r1, [pc, #508]	@ (802b71c <__ssvfscanf_r+0x258>)
 802b51e:	781a      	ldrb	r2, [r3, #0]
 802b520:	5c8a      	ldrb	r2, [r1, r2]
 802b522:	0710      	lsls	r0, r2, #28
 802b524:	d409      	bmi.n	802b53a <__ssvfscanf_r+0x76>
 802b526:	f8c7 8014 	str.w	r8, [r7, #20]
 802b52a:	e7e6      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802b52c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b52e:	4621      	mov	r1, r4
 802b530:	f7fd fe13 	bl	802915a <__ssrefill_r>
 802b534:	2800      	cmp	r0, #0
 802b536:	d0f0      	beq.n	802b51a <__ssvfscanf_r+0x56>
 802b538:	e7f5      	b.n	802b526 <__ssvfscanf_r+0x62>
 802b53a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b53c:	3201      	adds	r2, #1
 802b53e:	633a      	str	r2, [r7, #48]	@ 0x30
 802b540:	6862      	ldr	r2, [r4, #4]
 802b542:	3301      	adds	r3, #1
 802b544:	3a01      	subs	r2, #1
 802b546:	6062      	str	r2, [r4, #4]
 802b548:	6023      	str	r3, [r4, #0]
 802b54a:	e7e3      	b.n	802b514 <__ssvfscanf_r+0x50>
 802b54c:	2b25      	cmp	r3, #37	@ 0x25
 802b54e:	d163      	bne.n	802b618 <__ssvfscanf_r+0x154>
 802b550:	62fe      	str	r6, [r7, #44]	@ 0x2c
 802b552:	4642      	mov	r2, r8
 802b554:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b558:	617a      	str	r2, [r7, #20]
 802b55a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 802b55e:	2a55      	cmp	r2, #85	@ 0x55
 802b560:	f200 816e 	bhi.w	802b840 <__ssvfscanf_r+0x37c>
 802b564:	e8df f012 	tbh	[pc, r2, lsl #1]
 802b568:	016c0056 	.word	0x016c0056
 802b56c:	016c016c 	.word	0x016c016c
 802b570:	007d016c 	.word	0x007d016c
 802b574:	016c016c 	.word	0x016c016c
 802b578:	016c016c 	.word	0x016c016c
 802b57c:	00b9016c 	.word	0x00b9016c
 802b580:	00b900b9 	.word	0x00b900b9
 802b584:	00b900b9 	.word	0x00b900b9
 802b588:	00b900b9 	.word	0x00b900b9
 802b58c:	00b900b9 	.word	0x00b900b9
 802b590:	016c00b9 	.word	0x016c00b9
 802b594:	016c016c 	.word	0x016c016c
 802b598:	016c016c 	.word	0x016c016c
 802b59c:	016c016c 	.word	0x016c016c
 802b5a0:	016c00e0 	.word	0x016c00e0
 802b5a4:	00c3010a 	.word	0x00c3010a
 802b5a8:	00e000e0 	.word	0x00e000e0
 802b5ac:	016c00e0 	.word	0x016c00e0
 802b5b0:	016c016c 	.word	0x016c016c
 802b5b4:	00a2016c 	.word	0x00a2016c
 802b5b8:	016c016c 	.word	0x016c016c
 802b5bc:	016c00c7 	.word	0x016c00c7
 802b5c0:	016c016c 	.word	0x016c016c
 802b5c4:	016c00fa 	.word	0x016c00fa
 802b5c8:	016c016c 	.word	0x016c016c
 802b5cc:	00d4016c 	.word	0x00d4016c
 802b5d0:	016c016c 	.word	0x016c016c
 802b5d4:	016c00ff 	.word	0x016c00ff
 802b5d8:	016c016c 	.word	0x016c016c
 802b5dc:	016c016c 	.word	0x016c016c
 802b5e0:	016c00e0 	.word	0x016c00e0
 802b5e4:	00c5010c 	.word	0x00c5010c
 802b5e8:	00e000e0 	.word	0x00e000e0
 802b5ec:	009400e0 	.word	0x009400e0
 802b5f0:	00a20130 	.word	0x00a20130
 802b5f4:	0085016c 	.word	0x0085016c
 802b5f8:	011400ac 	.word	0x011400ac
 802b5fc:	011100c9 	.word	0x011100c9
 802b600:	016c016c 	.word	0x016c016c
 802b604:	00a900fc 	.word	0x00a900fc
 802b608:	016c00d0 	.word	0x016c00d0
 802b60c:	00d4016c 	.word	0x00d4016c
 802b610:	00a9016c 	.word	0x00a9016c
 802b614:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b618:	6863      	ldr	r3, [r4, #4]
 802b61a:	2b00      	cmp	r3, #0
 802b61c:	dd0e      	ble.n	802b63c <__ssvfscanf_r+0x178>
 802b61e:	6823      	ldr	r3, [r4, #0]
 802b620:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802b624:	7819      	ldrb	r1, [r3, #0]
 802b626:	4291      	cmp	r1, r2
 802b628:	d142      	bne.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802b62a:	3301      	adds	r3, #1
 802b62c:	6862      	ldr	r2, [r4, #4]
 802b62e:	6023      	str	r3, [r4, #0]
 802b630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b632:	3a01      	subs	r2, #1
 802b634:	3301      	adds	r3, #1
 802b636:	6062      	str	r2, [r4, #4]
 802b638:	633b      	str	r3, [r7, #48]	@ 0x30
 802b63a:	e774      	b.n	802b526 <__ssvfscanf_r+0x62>
 802b63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b63e:	4621      	mov	r1, r4
 802b640:	f7fd fd8b 	bl	802915a <__ssrefill_r>
 802b644:	2800      	cmp	r0, #0
 802b646:	d0ea      	beq.n	802b61e <__ssvfscanf_r+0x15a>
 802b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b64a:	b113      	cbz	r3, 802b652 <__ssvfscanf_r+0x18e>
 802b64c:	89a3      	ldrh	r3, [r4, #12]
 802b64e:	065b      	lsls	r3, r3, #25
 802b650:	d52e      	bpl.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802b652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b654:	2b00      	cmp	r3, #0
 802b656:	f041 809d 	bne.w	802c794 <__ssvfscanf_r+0x12d0>
 802b65a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b65e:	627b      	str	r3, [r7, #36]	@ 0x24
 802b660:	e0f9      	b.n	802b856 <__ssvfscanf_r+0x392>
 802b662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b664:	4333      	orrs	r3, r6
 802b666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b668:	d122      	bne.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802b66a:	2610      	movs	r6, #16
 802b66c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 802b670:	e76f      	b.n	802b552 <__ssvfscanf_r+0x8e>
 802b672:	0731      	lsls	r1, r6, #28
 802b674:	d11c      	bne.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802b676:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b67a:	2b6c      	cmp	r3, #108	@ 0x6c
 802b67c:	d105      	bne.n	802b68a <__ssvfscanf_r+0x1c6>
 802b67e:	f108 0302 	add.w	r3, r8, #2
 802b682:	617b      	str	r3, [r7, #20]
 802b684:	f046 0602 	orr.w	r6, r6, #2
 802b688:	e7f0      	b.n	802b66c <__ssvfscanf_r+0x1a8>
 802b68a:	f046 0601 	orr.w	r6, r6, #1
 802b68e:	e7ed      	b.n	802b66c <__ssvfscanf_r+0x1a8>
 802b690:	0732      	lsls	r2, r6, #28
 802b692:	d10d      	bne.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802b694:	f898 3001 	ldrb.w	r3, [r8, #1]
 802b698:	2b68      	cmp	r3, #104	@ 0x68
 802b69a:	bf03      	ittte	eq
 802b69c:	f108 0302 	addeq.w	r3, r8, #2
 802b6a0:	617b      	streq	r3, [r7, #20]
 802b6a2:	f046 0608 	orreq.w	r6, r6, #8
 802b6a6:	f046 0604 	orrne.w	r6, r6, #4
 802b6aa:	e7df      	b.n	802b66c <__ssvfscanf_r+0x1a8>
 802b6ac:	0733      	lsls	r3, r6, #28
 802b6ae:	d0e9      	beq.n	802b684 <__ssvfscanf_r+0x1c0>
 802b6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b6b2:	2b00      	cmp	r3, #0
 802b6b4:	f000 80cf 	beq.w	802b856 <__ssvfscanf_r+0x392>
 802b6b8:	e0c8      	b.n	802b84c <__ssvfscanf_r+0x388>
 802b6ba:	0730      	lsls	r0, r6, #28
 802b6bc:	d0d6      	beq.n	802b66c <__ssvfscanf_r+0x1a8>
 802b6be:	e7f7      	b.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802b6c0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 802b6c4:	d1f4      	bne.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802b6c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802b6c8:	b922      	cbnz	r2, 802b6d4 <__ssvfscanf_r+0x210>
 802b6ca:	b082      	sub	sp, #8
 802b6cc:	aa02      	add	r2, sp, #8
 802b6ce:	e9c2 3300 	strd	r3, r3, [r2]
 802b6d2:	637a      	str	r2, [r7, #52]	@ 0x34
 802b6d4:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 802b6d8:	e7c8      	b.n	802b66c <__ssvfscanf_r+0x1a8>
 802b6da:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 802b6de:	d1e7      	bne.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802b6e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802b6e2:	220a      	movs	r2, #10
 802b6e4:	fb02 3301 	mla	r3, r2, r1, r3
 802b6e8:	3b30      	subs	r3, #48	@ 0x30
 802b6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b6ec:	e7be      	b.n	802b66c <__ssvfscanf_r+0x1a8>
 802b6ee:	f046 0601 	orr.w	r6, r6, #1
 802b6f2:	4b0b      	ldr	r3, [pc, #44]	@ (802b720 <__ssvfscanf_r+0x25c>)
 802b6f4:	e009      	b.n	802b70a <__ssvfscanf_r+0x246>
 802b6f6:	f046 0601 	orr.w	r6, r6, #1
 802b6fa:	4b0a      	ldr	r3, [pc, #40]	@ (802b724 <__ssvfscanf_r+0x260>)
 802b6fc:	61bb      	str	r3, [r7, #24]
 802b6fe:	2308      	movs	r3, #8
 802b700:	61fb      	str	r3, [r7, #28]
 802b702:	f04f 0803 	mov.w	r8, #3
 802b706:	e011      	b.n	802b72c <__ssvfscanf_r+0x268>
 802b708:	4b06      	ldr	r3, [pc, #24]	@ (802b724 <__ssvfscanf_r+0x260>)
 802b70a:	61bb      	str	r3, [r7, #24]
 802b70c:	230a      	movs	r3, #10
 802b70e:	e7f7      	b.n	802b700 <__ssvfscanf_r+0x23c>
 802b710:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 802b714:	4b03      	ldr	r3, [pc, #12]	@ (802b724 <__ssvfscanf_r+0x260>)
 802b716:	61bb      	str	r3, [r7, #24]
 802b718:	2310      	movs	r3, #16
 802b71a:	e7f1      	b.n	802b700 <__ssvfscanf_r+0x23c>
 802b71c:	08034aa1 	.word	0x08034aa1
 802b720:	08025459 	.word	0x08025459
 802b724:	0802e259 	.word	0x0802e259
 802b728:	f04f 0804 	mov.w	r8, #4
 802b72c:	6863      	ldr	r3, [r4, #4]
 802b72e:	2b00      	cmp	r3, #0
 802b730:	dd4e      	ble.n	802b7d0 <__ssvfscanf_r+0x30c>
 802b732:	0673      	lsls	r3, r6, #25
 802b734:	d407      	bmi.n	802b746 <__ssvfscanf_r+0x282>
 802b736:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 802ba34 <__ssvfscanf_r+0x570>
 802b73a:	6823      	ldr	r3, [r4, #0]
 802b73c:	781a      	ldrb	r2, [r3, #0]
 802b73e:	f819 2002 	ldrb.w	r2, [r9, r2]
 802b742:	0710      	lsls	r0, r2, #28
 802b744:	d44b      	bmi.n	802b7de <__ssvfscanf_r+0x31a>
 802b746:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802b74a:	f1b8 0f03 	cmp.w	r8, #3
 802b74e:	d858      	bhi.n	802b802 <__ssvfscanf_r+0x33e>
 802b750:	e8df f018 	tbh	[pc, r8, lsl #1]
 802b754:	037801c1 	.word	0x037801c1
 802b758:	05f30514 	.word	0x05f30514
 802b75c:	f046 0601 	orr.w	r6, r6, #1
 802b760:	f04f 0802 	mov.w	r8, #2
 802b764:	e7e2      	b.n	802b72c <__ssvfscanf_r+0x268>
 802b766:	6979      	ldr	r1, [r7, #20]
 802b768:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 802b76c:	f001 fd1d 	bl	802d1aa <__sccl>
 802b770:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802b774:	6178      	str	r0, [r7, #20]
 802b776:	f04f 0801 	mov.w	r8, #1
 802b77a:	e7d7      	b.n	802b72c <__ssvfscanf_r+0x268>
 802b77c:	f046 0601 	orr.w	r6, r6, #1
 802b780:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 802b784:	f04f 0800 	mov.w	r8, #0
 802b788:	e7d0      	b.n	802b72c <__ssvfscanf_r+0x268>
 802b78a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 802b78e:	e7c1      	b.n	802b714 <__ssvfscanf_r+0x250>
 802b790:	06f1      	lsls	r1, r6, #27
 802b792:	f53f aeb2 	bmi.w	802b4fa <__ssvfscanf_r+0x36>
 802b796:	0732      	lsls	r2, r6, #28
 802b798:	f855 3b04 	ldr.w	r3, [r5], #4
 802b79c:	d502      	bpl.n	802b7a4 <__ssvfscanf_r+0x2e0>
 802b79e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b7a0:	701a      	strb	r2, [r3, #0]
 802b7a2:	e6aa      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802b7a4:	0770      	lsls	r0, r6, #29
 802b7a6:	d502      	bpl.n	802b7ae <__ssvfscanf_r+0x2ea>
 802b7a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b7aa:	801a      	strh	r2, [r3, #0]
 802b7ac:	e6a5      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802b7ae:	07f1      	lsls	r1, r6, #31
 802b7b0:	d502      	bpl.n	802b7b8 <__ssvfscanf_r+0x2f4>
 802b7b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b7b4:	601a      	str	r2, [r3, #0]
 802b7b6:	e6a0      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802b7b8:	07b2      	lsls	r2, r6, #30
 802b7ba:	d5fa      	bpl.n	802b7b2 <__ssvfscanf_r+0x2ee>
 802b7bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b7be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 802b7c0:	17d2      	asrs	r2, r2, #31
 802b7c2:	e9c3 1200 	strd	r1, r2, [r3]
 802b7c6:	e698      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802b7c8:	4b99      	ldr	r3, [pc, #612]	@ (802ba30 <__ssvfscanf_r+0x56c>)
 802b7ca:	61bb      	str	r3, [r7, #24]
 802b7cc:	2300      	movs	r3, #0
 802b7ce:	e797      	b.n	802b700 <__ssvfscanf_r+0x23c>
 802b7d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b7d2:	4621      	mov	r1, r4
 802b7d4:	f7fd fcc1 	bl	802915a <__ssrefill_r>
 802b7d8:	2800      	cmp	r0, #0
 802b7da:	d0aa      	beq.n	802b732 <__ssvfscanf_r+0x26e>
 802b7dc:	e734      	b.n	802b648 <__ssvfscanf_r+0x184>
 802b7de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b7e0:	3201      	adds	r2, #1
 802b7e2:	633a      	str	r2, [r7, #48]	@ 0x30
 802b7e4:	6862      	ldr	r2, [r4, #4]
 802b7e6:	3a01      	subs	r2, #1
 802b7e8:	2a00      	cmp	r2, #0
 802b7ea:	6062      	str	r2, [r4, #4]
 802b7ec:	dd02      	ble.n	802b7f4 <__ssvfscanf_r+0x330>
 802b7ee:	3301      	adds	r3, #1
 802b7f0:	6023      	str	r3, [r4, #0]
 802b7f2:	e7a2      	b.n	802b73a <__ssvfscanf_r+0x276>
 802b7f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b7f6:	4621      	mov	r1, r4
 802b7f8:	f7fd fcaf 	bl	802915a <__ssrefill_r>
 802b7fc:	2800      	cmp	r0, #0
 802b7fe:	d09c      	beq.n	802b73a <__ssvfscanf_r+0x276>
 802b800:	e722      	b.n	802b648 <__ssvfscanf_r+0x184>
 802b802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802b804:	2b01      	cmp	r3, #1
 802b806:	bf38      	it	cc
 802b808:	2301      	movcc	r3, #1
 802b80a:	4698      	mov	r8, r3
 802b80c:	f016 0301 	ands.w	r3, r6, #1
 802b810:	f006 0b10 	and.w	fp, r6, #16
 802b814:	f000 80eb 	beq.w	802b9ee <__ssvfscanf_r+0x52a>
 802b818:	f1bb 0f00 	cmp.w	fp, #0
 802b81c:	f040 8085 	bne.w	802b92a <__ssvfscanf_r+0x466>
 802b820:	462b      	mov	r3, r5
 802b822:	0631      	lsls	r1, r6, #24
 802b824:	f853 5b04 	ldr.w	r5, [r3], #4
 802b828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802b82a:	f140 8085 	bpl.w	802b938 <__ssvfscanf_r+0x474>
 802b82e:	b13d      	cbz	r5, 802b840 <__ssvfscanf_r+0x37c>
 802b830:	2080      	movs	r0, #128	@ 0x80
 802b832:	f7fc fcd3 	bl	80281dc <malloc>
 802b836:	4606      	mov	r6, r0
 802b838:	b998      	cbnz	r0, 802b862 <__ssvfscanf_r+0x39e>
 802b83a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802b83e:	627b      	str	r3, [r7, #36]	@ 0x24
 802b840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b842:	b143      	cbz	r3, 802b856 <__ssvfscanf_r+0x392>
 802b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b846:	3301      	adds	r3, #1
 802b848:	f000 87a4 	beq.w	802c794 <__ssvfscanf_r+0x12d0>
 802b84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b84e:	6818      	ldr	r0, [r3, #0]
 802b850:	b108      	cbz	r0, 802b856 <__ssvfscanf_r+0x392>
 802b852:	f7fc fccb 	bl	80281ec <free>
 802b856:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802b858:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 802b85c:	46bd      	mov	sp, r7
 802b85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b864:	6028      	str	r0, [r5, #0]
 802b866:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802b86a:	889b      	ldrh	r3, [r3, #4]
 802b86c:	4599      	cmp	r9, r3
 802b86e:	d314      	bcc.n	802b89a <__ssvfscanf_r+0x3d6>
 802b870:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802b874:	4293      	cmp	r3, r2
 802b876:	f200 878d 	bhi.w	802c794 <__ssvfscanf_r+0x12d0>
 802b87a:	3308      	adds	r3, #8
 802b87c:	fa1f fa83 	uxth.w	sl, r3
 802b880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b882:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802b886:	6818      	ldr	r0, [r3, #0]
 802b888:	f001 fc32 	bl	802d0f0 <realloc>
 802b88c:	2800      	cmp	r0, #0
 802b88e:	f000 8781 	beq.w	802c794 <__ssvfscanf_r+0x12d0>
 802b892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b894:	6018      	str	r0, [r3, #0]
 802b896:	f8a3 a004 	strh.w	sl, [r3, #4]
 802b89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802b89c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802b89e:	681b      	ldr	r3, [r3, #0]
 802b8a0:	f109 0201 	add.w	r2, r9, #1
 802b8a4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802b8a8:	46aa      	mov	sl, r5
 802b8aa:	80ca      	strh	r2, [r1, #6]
 802b8ac:	4635      	mov	r5, r6
 802b8ae:	f04f 0920 	mov.w	r9, #32
 802b8b2:	2200      	movs	r2, #0
 802b8b4:	613a      	str	r2, [r7, #16]
 802b8b6:	f7fb fbd3 	bl	8027060 <__locale_mb_cur_max>
 802b8ba:	693a      	ldr	r2, [r7, #16]
 802b8bc:	4290      	cmp	r0, r2
 802b8be:	f43f aec3 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802b8c2:	6821      	ldr	r1, [r4, #0]
 802b8c4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 802b8c8:	f811 0b01 	ldrb.w	r0, [r1], #1
 802b8cc:	f80c 0002 	strb.w	r0, [ip, r2]
 802b8d0:	1c53      	adds	r3, r2, #1
 802b8d2:	6862      	ldr	r2, [r4, #4]
 802b8d4:	3a01      	subs	r2, #1
 802b8d6:	e9c4 1200 	strd	r1, r2, [r4]
 802b8da:	6a3a      	ldr	r2, [r7, #32]
 802b8dc:	2a03      	cmp	r2, #3
 802b8de:	d102      	bne.n	802b8e6 <__ssvfscanf_r+0x422>
 802b8e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802b8e2:	2a04      	cmp	r2, #4
 802b8e4:	d007      	beq.n	802b8f6 <__ssvfscanf_r+0x432>
 802b8e6:	2208      	movs	r2, #8
 802b8e8:	2100      	movs	r1, #0
 802b8ea:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802b8ee:	623b      	str	r3, [r7, #32]
 802b8f0:	f7fa fa2e 	bl	8025d50 <memset>
 802b8f4:	6a3b      	ldr	r3, [r7, #32]
 802b8f6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 802b8fa:	9200      	str	r2, [sp, #0]
 802b8fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b8fe:	613b      	str	r3, [r7, #16]
 802b900:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802b904:	4629      	mov	r1, r5
 802b906:	f002 ffad 	bl	802e864 <_mbrtowc_r>
 802b90a:	1c42      	adds	r2, r0, #1
 802b90c:	6238      	str	r0, [r7, #32]
 802b90e:	f43f ae9b 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802b912:	693b      	ldr	r3, [r7, #16]
 802b914:	b9b8      	cbnz	r0, 802b946 <__ssvfscanf_r+0x482>
 802b916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b918:	441a      	add	r2, r3
 802b91a:	4613      	mov	r3, r2
 802b91c:	f1bb 0f00 	cmp.w	fp, #0
 802b920:	d00e      	beq.n	802b940 <__ssvfscanf_r+0x47c>
 802b922:	633b      	str	r3, [r7, #48]	@ 0x30
 802b924:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 802b928:	e019      	b.n	802b95e <__ssvfscanf_r+0x49a>
 802b92a:	f04f 0900 	mov.w	r9, #0
 802b92e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 802b930:	464e      	mov	r6, r9
 802b932:	46ca      	mov	sl, r9
 802b934:	464d      	mov	r5, r9
 802b936:	e7bc      	b.n	802b8b2 <__ssvfscanf_r+0x3ee>
 802b938:	46d9      	mov	r9, fp
 802b93a:	465e      	mov	r6, fp
 802b93c:	46da      	mov	sl, fp
 802b93e:	e7b8      	b.n	802b8b2 <__ssvfscanf_r+0x3ee>
 802b940:	f8c5 b000 	str.w	fp, [r5]
 802b944:	e7ed      	b.n	802b922 <__ssvfscanf_r+0x45e>
 802b946:	6a3a      	ldr	r2, [r7, #32]
 802b948:	3202      	adds	r2, #2
 802b94a:	d025      	beq.n	802b998 <__ssvfscanf_r+0x4d4>
 802b94c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b94e:	441a      	add	r2, r3
 802b950:	6a3b      	ldr	r3, [r7, #32]
 802b952:	633a      	str	r2, [r7, #48]	@ 0x30
 802b954:	2b03      	cmp	r3, #3
 802b956:	d1e5      	bne.n	802b924 <__ssvfscanf_r+0x460>
 802b958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802b95a:	2b04      	cmp	r3, #4
 802b95c:	d1e2      	bne.n	802b924 <__ssvfscanf_r+0x460>
 802b95e:	f1bb 0f00 	cmp.w	fp, #0
 802b962:	d117      	bne.n	802b994 <__ssvfscanf_r+0x4d0>
 802b964:	f1ba 0f00 	cmp.w	sl, #0
 802b968:	d013      	beq.n	802b992 <__ssvfscanf_r+0x4ce>
 802b96a:	1bab      	subs	r3, r5, r6
 802b96c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 802b970:	d80f      	bhi.n	802b992 <__ssvfscanf_r+0x4ce>
 802b972:	4630      	mov	r0, r6
 802b974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802b978:	613b      	str	r3, [r7, #16]
 802b97a:	f001 fbb9 	bl	802d0f0 <realloc>
 802b97e:	4606      	mov	r6, r0
 802b980:	2800      	cmp	r0, #0
 802b982:	f43f af5a 	beq.w	802b83a <__ssvfscanf_r+0x376>
 802b986:	693b      	ldr	r3, [r7, #16]
 802b988:	f8ca 0000 	str.w	r0, [sl]
 802b98c:	18c5      	adds	r5, r0, r3
 802b98e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802b992:	3504      	adds	r5, #4
 802b994:	2200      	movs	r2, #0
 802b996:	e000      	b.n	802b99a <__ssvfscanf_r+0x4d6>
 802b998:	461a      	mov	r2, r3
 802b99a:	6863      	ldr	r3, [r4, #4]
 802b99c:	2b00      	cmp	r3, #0
 802b99e:	dc14      	bgt.n	802b9ca <__ssvfscanf_r+0x506>
 802b9a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802b9a2:	613a      	str	r2, [r7, #16]
 802b9a4:	4621      	mov	r1, r4
 802b9a6:	f7fd fbd8 	bl	802915a <__ssrefill_r>
 802b9aa:	693a      	ldr	r2, [r7, #16]
 802b9ac:	b168      	cbz	r0, 802b9ca <__ssvfscanf_r+0x506>
 802b9ae:	2a00      	cmp	r2, #0
 802b9b0:	f47f ae4a 	bne.w	802b648 <__ssvfscanf_r+0x184>
 802b9b4:	f1ba 0f00 	cmp.w	sl, #0
 802b9b8:	d10c      	bne.n	802b9d4 <__ssvfscanf_r+0x510>
 802b9ba:	f1bb 0f00 	cmp.w	fp, #0
 802b9be:	d102      	bne.n	802b9c6 <__ssvfscanf_r+0x502>
 802b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b9c2:	3301      	adds	r3, #1
 802b9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 802b9c6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 802b9c8:	e597      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802b9ca:	f1b8 0f00 	cmp.w	r8, #0
 802b9ce:	f47f af71 	bne.w	802b8b4 <__ssvfscanf_r+0x3f0>
 802b9d2:	e7ef      	b.n	802b9b4 <__ssvfscanf_r+0x4f0>
 802b9d4:	1ba9      	subs	r1, r5, r6
 802b9d6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 802b9da:	d9ee      	bls.n	802b9ba <__ssvfscanf_r+0x4f6>
 802b9dc:	f8da 0000 	ldr.w	r0, [sl]
 802b9e0:	f001 fb86 	bl	802d0f0 <realloc>
 802b9e4:	2800      	cmp	r0, #0
 802b9e6:	d0e8      	beq.n	802b9ba <__ssvfscanf_r+0x4f6>
 802b9e8:	f8ca 0000 	str.w	r0, [sl]
 802b9ec:	e7e5      	b.n	802b9ba <__ssvfscanf_r+0x4f6>
 802b9ee:	f1bb 0f00 	cmp.w	fp, #0
 802b9f2:	d021      	beq.n	802ba38 <__ssvfscanf_r+0x574>
 802b9f4:	461e      	mov	r6, r3
 802b9f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 802b9fa:	4598      	cmp	r8, r3
 802b9fc:	dd11      	ble.n	802ba22 <__ssvfscanf_r+0x55e>
 802b9fe:	441a      	add	r2, r3
 802ba00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802ba02:	6022      	str	r2, [r4, #0]
 802ba04:	4621      	mov	r1, r4
 802ba06:	441e      	add	r6, r3
 802ba08:	eba8 0803 	sub.w	r8, r8, r3
 802ba0c:	f7fd fba5 	bl	802915a <__ssrefill_r>
 802ba10:	2800      	cmp	r0, #0
 802ba12:	d0f0      	beq.n	802b9f6 <__ssvfscanf_r+0x532>
 802ba14:	2e00      	cmp	r6, #0
 802ba16:	f43f ae17 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802ba1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802ba1c:	4433      	add	r3, r6
 802ba1e:	633b      	str	r3, [r7, #48]	@ 0x30
 802ba20:	e56b      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802ba22:	eba3 0308 	sub.w	r3, r3, r8
 802ba26:	4442      	add	r2, r8
 802ba28:	4446      	add	r6, r8
 802ba2a:	6063      	str	r3, [r4, #4]
 802ba2c:	6022      	str	r2, [r4, #0]
 802ba2e:	e7f4      	b.n	802ba1a <__ssvfscanf_r+0x556>
 802ba30:	08025459 	.word	0x08025459
 802ba34:	08034aa1 	.word	0x08034aa1
 802ba38:	46a9      	mov	r9, r5
 802ba3a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802ba3e:	f859 5b04 	ldr.w	r5, [r9], #4
 802ba42:	d02c      	beq.n	802ba9e <__ssvfscanf_r+0x5da>
 802ba44:	2d00      	cmp	r5, #0
 802ba46:	f43f ae33 	beq.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802ba4a:	4640      	mov	r0, r8
 802ba4c:	f7fc fbc6 	bl	80281dc <malloc>
 802ba50:	4682      	mov	sl, r0
 802ba52:	2800      	cmp	r0, #0
 802ba54:	f43f adfd 	beq.w	802b652 <__ssvfscanf_r+0x18e>
 802ba58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba5a:	6028      	str	r0, [r5, #0]
 802ba5c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 802ba60:	889e      	ldrh	r6, [r3, #4]
 802ba62:	45b3      	cmp	fp, r6
 802ba64:	d311      	bcc.n	802ba8a <__ssvfscanf_r+0x5c6>
 802ba66:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802ba6a:	429e      	cmp	r6, r3
 802ba6c:	f200 8692 	bhi.w	802c794 <__ssvfscanf_r+0x12d0>
 802ba70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba72:	3608      	adds	r6, #8
 802ba74:	b2b6      	uxth	r6, r6
 802ba76:	6818      	ldr	r0, [r3, #0]
 802ba78:	00b1      	lsls	r1, r6, #2
 802ba7a:	f001 fb39 	bl	802d0f0 <realloc>
 802ba7e:	2800      	cmp	r0, #0
 802ba80:	f000 8688 	beq.w	802c794 <__ssvfscanf_r+0x12d0>
 802ba84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba86:	6018      	str	r0, [r3, #0]
 802ba88:	809e      	strh	r6, [r3, #4]
 802ba8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802ba8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802ba8e:	681b      	ldr	r3, [r3, #0]
 802ba90:	f10b 0201 	add.w	r2, fp, #1
 802ba94:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 802ba98:	462e      	mov	r6, r5
 802ba9a:	80ca      	strh	r2, [r1, #6]
 802ba9c:	4655      	mov	r5, sl
 802ba9e:	9400      	str	r4, [sp, #0]
 802baa0:	4629      	mov	r1, r5
 802baa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802baa4:	4643      	mov	r3, r8
 802baa6:	2201      	movs	r2, #1
 802baa8:	f7fd fb74 	bl	8029194 <_sfread_r>
 802baac:	4605      	mov	r5, r0
 802baae:	2800      	cmp	r0, #0
 802bab0:	f43f adca 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802bab4:	b13e      	cbz	r6, 802bac6 <__ssvfscanf_r+0x602>
 802bab6:	4580      	cmp	r8, r0
 802bab8:	d905      	bls.n	802bac6 <__ssvfscanf_r+0x602>
 802baba:	4601      	mov	r1, r0
 802babc:	6830      	ldr	r0, [r6, #0]
 802babe:	f001 fb17 	bl	802d0f0 <realloc>
 802bac2:	b100      	cbz	r0, 802bac6 <__ssvfscanf_r+0x602>
 802bac4:	6030      	str	r0, [r6, #0]
 802bac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bac8:	442b      	add	r3, r5
 802baca:	633b      	str	r3, [r7, #48]	@ 0x30
 802bacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bace:	3301      	adds	r3, #1
 802bad0:	627b      	str	r3, [r7, #36]	@ 0x24
 802bad2:	464d      	mov	r5, r9
 802bad4:	e511      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802bad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bad8:	2b00      	cmp	r3, #0
 802bada:	bf08      	it	eq
 802badc:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802bae0:	f016 0801 	ands.w	r8, r6, #1
 802bae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802bae6:	f006 0a10 	and.w	sl, r6, #16
 802baea:	f000 8101 	beq.w	802bcf0 <__ssvfscanf_r+0x82c>
 802baee:	f1ba 0f00 	cmp.w	sl, #0
 802baf2:	f040 80a4 	bne.w	802bc3e <__ssvfscanf_r+0x77a>
 802baf6:	462b      	mov	r3, r5
 802baf8:	f853 5b04 	ldr.w	r5, [r3], #4
 802bafc:	60fb      	str	r3, [r7, #12]
 802bafe:	0633      	lsls	r3, r6, #24
 802bb00:	f140 80a5 	bpl.w	802bc4e <__ssvfscanf_r+0x78a>
 802bb04:	2d00      	cmp	r5, #0
 802bb06:	f43f ae9b 	beq.w	802b840 <__ssvfscanf_r+0x37c>
 802bb0a:	2080      	movs	r0, #128	@ 0x80
 802bb0c:	f7fc fb66 	bl	80281dc <malloc>
 802bb10:	4680      	mov	r8, r0
 802bb12:	2800      	cmp	r0, #0
 802bb14:	f43f ae91 	beq.w	802b83a <__ssvfscanf_r+0x376>
 802bb18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb1a:	6028      	str	r0, [r5, #0]
 802bb1c:	88de      	ldrh	r6, [r3, #6]
 802bb1e:	889b      	ldrh	r3, [r3, #4]
 802bb20:	429e      	cmp	r6, r3
 802bb22:	d314      	bcc.n	802bb4e <__ssvfscanf_r+0x68a>
 802bb24:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802bb28:	4293      	cmp	r3, r2
 802bb2a:	f200 8633 	bhi.w	802c794 <__ssvfscanf_r+0x12d0>
 802bb2e:	3308      	adds	r3, #8
 802bb30:	fa1f f983 	uxth.w	r9, r3
 802bb34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb36:	ea4f 0189 	mov.w	r1, r9, lsl #2
 802bb3a:	6818      	ldr	r0, [r3, #0]
 802bb3c:	f001 fad8 	bl	802d0f0 <realloc>
 802bb40:	2800      	cmp	r0, #0
 802bb42:	f000 8627 	beq.w	802c794 <__ssvfscanf_r+0x12d0>
 802bb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb48:	6018      	str	r0, [r3, #0]
 802bb4a:	f8a3 9004 	strh.w	r9, [r3, #4]
 802bb4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bb50:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802bb52:	681b      	ldr	r3, [r3, #0]
 802bb54:	1c72      	adds	r2, r6, #1
 802bb56:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 802bb5a:	46ab      	mov	fp, r5
 802bb5c:	80ca      	strh	r2, [r1, #6]
 802bb5e:	4645      	mov	r5, r8
 802bb60:	f04f 0920 	mov.w	r9, #32
 802bb64:	2600      	movs	r6, #0
 802bb66:	f7fb fa7b 	bl	8027060 <__locale_mb_cur_max>
 802bb6a:	42b0      	cmp	r0, r6
 802bb6c:	f43f ad6c 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802bb70:	1c73      	adds	r3, r6, #1
 802bb72:	613b      	str	r3, [r7, #16]
 802bb74:	6823      	ldr	r3, [r4, #0]
 802bb76:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802bb7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802bb7e:	558a      	strb	r2, [r1, r6]
 802bb80:	6862      	ldr	r2, [r4, #4]
 802bb82:	3a01      	subs	r2, #1
 802bb84:	e9c4 3200 	strd	r3, r2, [r4]
 802bb88:	6a3b      	ldr	r3, [r7, #32]
 802bb8a:	2b03      	cmp	r3, #3
 802bb8c:	d102      	bne.n	802bb94 <__ssvfscanf_r+0x6d0>
 802bb8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802bb90:	2b04      	cmp	r3, #4
 802bb92:	d005      	beq.n	802bba0 <__ssvfscanf_r+0x6dc>
 802bb94:	2208      	movs	r2, #8
 802bb96:	2100      	movs	r1, #0
 802bb98:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 802bb9c:	f7fa f8d8 	bl	8025d50 <memset>
 802bba0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 802bba4:	9300      	str	r3, [sp, #0]
 802bba6:	693b      	ldr	r3, [r7, #16]
 802bba8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bbaa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802bbae:	4629      	mov	r1, r5
 802bbb0:	f002 fe58 	bl	802e864 <_mbrtowc_r>
 802bbb4:	1c46      	adds	r6, r0, #1
 802bbb6:	6238      	str	r0, [r7, #32]
 802bbb8:	f43f ad46 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802bbbc:	2800      	cmp	r0, #0
 802bbbe:	d14a      	bne.n	802bc56 <__ssvfscanf_r+0x792>
 802bbc0:	6028      	str	r0, [r5, #0]
 802bbc2:	682e      	ldr	r6, [r5, #0]
 802bbc4:	1c70      	adds	r0, r6, #1
 802bbc6:	d056      	beq.n	802bc76 <__ssvfscanf_r+0x7b2>
 802bbc8:	2208      	movs	r2, #8
 802bbca:	2100      	movs	r1, #0
 802bbcc:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802bbd0:	f7fa f8be 	bl	8025d50 <memset>
 802bbd4:	4b9a      	ldr	r3, [pc, #616]	@ (802be40 <__ssvfscanf_r+0x97c>)
 802bbd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bbd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802bbdc:	60bb      	str	r3, [r7, #8]
 802bbde:	4632      	mov	r2, r6
 802bbe0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802bbe4:	68be      	ldr	r6, [r7, #8]
 802bbe6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 802bbea:	47b0      	blx	r6
 802bbec:	2801      	cmp	r0, #1
 802bbee:	d144      	bne.n	802bc7a <__ssvfscanf_r+0x7b6>
 802bbf0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 802bbf4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 802bbf8:	5c9b      	ldrb	r3, [r3, r2]
 802bbfa:	2b00      	cmp	r3, #0
 802bbfc:	d148      	bne.n	802bc90 <__ssvfscanf_r+0x7cc>
 802bbfe:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 802bc02:	693b      	ldr	r3, [r7, #16]
 802bc04:	2b00      	cmp	r3, #0
 802bc06:	d13a      	bne.n	802bc7e <__ssvfscanf_r+0x7ba>
 802bc08:	f1ba 0f00 	cmp.w	sl, #0
 802bc0c:	d115      	bne.n	802bc3a <__ssvfscanf_r+0x776>
 802bc0e:	f8c5 a000 	str.w	sl, [r5]
 802bc12:	f1bb 0f00 	cmp.w	fp, #0
 802bc16:	d00d      	beq.n	802bc34 <__ssvfscanf_r+0x770>
 802bc18:	eba5 0108 	sub.w	r1, r5, r8
 802bc1c:	108b      	asrs	r3, r1, #2
 802bc1e:	3301      	adds	r3, #1
 802bc20:	4599      	cmp	r9, r3
 802bc22:	d907      	bls.n	802bc34 <__ssvfscanf_r+0x770>
 802bc24:	f8db 0000 	ldr.w	r0, [fp]
 802bc28:	3104      	adds	r1, #4
 802bc2a:	f001 fa61 	bl	802d0f0 <realloc>
 802bc2e:	b108      	cbz	r0, 802bc34 <__ssvfscanf_r+0x770>
 802bc30:	f8cb 0000 	str.w	r0, [fp]
 802bc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bc36:	3301      	adds	r3, #1
 802bc38:	627b      	str	r3, [r7, #36]	@ 0x24
 802bc3a:	68fd      	ldr	r5, [r7, #12]
 802bc3c:	e45d      	b.n	802b4fa <__ssvfscanf_r+0x36>
 802bc3e:	f04f 0900 	mov.w	r9, #0
 802bc42:	60fd      	str	r5, [r7, #12]
 802bc44:	46c8      	mov	r8, r9
 802bc46:	46cb      	mov	fp, r9
 802bc48:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802bc4c:	e78a      	b.n	802bb64 <__ssvfscanf_r+0x6a0>
 802bc4e:	46d1      	mov	r9, sl
 802bc50:	46d0      	mov	r8, sl
 802bc52:	46d3      	mov	fp, sl
 802bc54:	e786      	b.n	802bb64 <__ssvfscanf_r+0x6a0>
 802bc56:	6a3b      	ldr	r3, [r7, #32]
 802bc58:	3302      	adds	r3, #2
 802bc5a:	d1b2      	bne.n	802bbc2 <__ssvfscanf_r+0x6fe>
 802bc5c:	693e      	ldr	r6, [r7, #16]
 802bc5e:	6863      	ldr	r3, [r4, #4]
 802bc60:	2b00      	cmp	r3, #0
 802bc62:	dc40      	bgt.n	802bce6 <__ssvfscanf_r+0x822>
 802bc64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bc66:	4621      	mov	r1, r4
 802bc68:	f7fd fa77 	bl	802915a <__ssrefill_r>
 802bc6c:	2800      	cmp	r0, #0
 802bc6e:	d03a      	beq.n	802bce6 <__ssvfscanf_r+0x822>
 802bc70:	2e00      	cmp	r6, #0
 802bc72:	d0c9      	beq.n	802bc08 <__ssvfscanf_r+0x744>
 802bc74:	e4e8      	b.n	802b648 <__ssvfscanf_r+0x184>
 802bc76:	4632      	mov	r2, r6
 802bc78:	e7bc      	b.n	802bbf4 <__ssvfscanf_r+0x730>
 802bc7a:	2200      	movs	r2, #0
 802bc7c:	e7ba      	b.n	802bbf4 <__ssvfscanf_r+0x730>
 802bc7e:	693b      	ldr	r3, [r7, #16]
 802bc80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bc82:	3b01      	subs	r3, #1
 802bc84:	4622      	mov	r2, r4
 802bc86:	5cf1      	ldrb	r1, [r6, r3]
 802bc88:	613b      	str	r3, [r7, #16]
 802bc8a:	f7fd fa2b 	bl	80290e4 <_sungetc_r>
 802bc8e:	e7b8      	b.n	802bc02 <__ssvfscanf_r+0x73e>
 802bc90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bc92:	693a      	ldr	r2, [r7, #16]
 802bc94:	4413      	add	r3, r2
 802bc96:	633b      	str	r3, [r7, #48]	@ 0x30
 802bc98:	6a3b      	ldr	r3, [r7, #32]
 802bc9a:	2b03      	cmp	r3, #3
 802bc9c:	d102      	bne.n	802bca4 <__ssvfscanf_r+0x7e0>
 802bc9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802bca0:	2b04      	cmp	r3, #4
 802bca2:	d002      	beq.n	802bcaa <__ssvfscanf_r+0x7e6>
 802bca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bca6:	3b01      	subs	r3, #1
 802bca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802bcaa:	f1ba 0f00 	cmp.w	sl, #0
 802bcae:	d118      	bne.n	802bce2 <__ssvfscanf_r+0x81e>
 802bcb0:	3504      	adds	r5, #4
 802bcb2:	f1bb 0f00 	cmp.w	fp, #0
 802bcb6:	d014      	beq.n	802bce2 <__ssvfscanf_r+0x81e>
 802bcb8:	eba5 0608 	sub.w	r6, r5, r8
 802bcbc:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 802bcc0:	d80d      	bhi.n	802bcde <__ssvfscanf_r+0x81a>
 802bcc2:	4640      	mov	r0, r8
 802bcc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802bcc8:	f001 fa12 	bl	802d0f0 <realloc>
 802bccc:	4680      	mov	r8, r0
 802bcce:	2800      	cmp	r0, #0
 802bcd0:	f43f adb3 	beq.w	802b83a <__ssvfscanf_r+0x376>
 802bcd4:	1985      	adds	r5, r0, r6
 802bcd6:	f8cb 0000 	str.w	r0, [fp]
 802bcda:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802bcde:	4656      	mov	r6, sl
 802bce0:	e7bd      	b.n	802bc5e <__ssvfscanf_r+0x79a>
 802bce2:	2600      	movs	r6, #0
 802bce4:	e7bb      	b.n	802bc5e <__ssvfscanf_r+0x79a>
 802bce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bce8:	2b00      	cmp	r3, #0
 802bcea:	f47f af3c 	bne.w	802bb66 <__ssvfscanf_r+0x6a2>
 802bcee:	e78b      	b.n	802bc08 <__ssvfscanf_r+0x744>
 802bcf0:	f1ba 0f00 	cmp.w	sl, #0
 802bcf4:	d01e      	beq.n	802bd34 <__ssvfscanf_r+0x870>
 802bcf6:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 802bcfa:	6823      	ldr	r3, [r4, #0]
 802bcfc:	781a      	ldrb	r2, [r3, #0]
 802bcfe:	5cb2      	ldrb	r2, [r6, r2]
 802bd00:	b91a      	cbnz	r2, 802bd0a <__ssvfscanf_r+0x846>
 802bd02:	f1b8 0f00 	cmp.w	r8, #0
 802bd06:	d112      	bne.n	802bd2e <__ssvfscanf_r+0x86a>
 802bd08:	e4d2      	b.n	802b6b0 <__ssvfscanf_r+0x1ec>
 802bd0a:	3301      	adds	r3, #1
 802bd0c:	6862      	ldr	r2, [r4, #4]
 802bd0e:	6023      	str	r3, [r4, #0]
 802bd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bd12:	f108 0801 	add.w	r8, r8, #1
 802bd16:	3a01      	subs	r2, #1
 802bd18:	4543      	cmp	r3, r8
 802bd1a:	6062      	str	r2, [r4, #4]
 802bd1c:	d007      	beq.n	802bd2e <__ssvfscanf_r+0x86a>
 802bd1e:	2a00      	cmp	r2, #0
 802bd20:	dceb      	bgt.n	802bcfa <__ssvfscanf_r+0x836>
 802bd22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bd24:	4621      	mov	r1, r4
 802bd26:	f7fd fa18 	bl	802915a <__ssrefill_r>
 802bd2a:	2800      	cmp	r0, #0
 802bd2c:	d0e5      	beq.n	802bcfa <__ssvfscanf_r+0x836>
 802bd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bd30:	4443      	add	r3, r8
 802bd32:	e674      	b.n	802ba1e <__ssvfscanf_r+0x55a>
 802bd34:	46a9      	mov	r9, r5
 802bd36:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802bd3a:	f859 8b04 	ldr.w	r8, [r9], #4
 802bd3e:	d07d      	beq.n	802be3c <__ssvfscanf_r+0x978>
 802bd40:	f1b8 0f00 	cmp.w	r8, #0
 802bd44:	f43f acb4 	beq.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802bd48:	2020      	movs	r0, #32
 802bd4a:	f7fc fa47 	bl	80281dc <malloc>
 802bd4e:	4606      	mov	r6, r0
 802bd50:	2800      	cmp	r0, #0
 802bd52:	f43f ac7e 	beq.w	802b652 <__ssvfscanf_r+0x18e>
 802bd56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bd58:	f8c8 0000 	str.w	r0, [r8]
 802bd5c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802bd60:	889d      	ldrh	r5, [r3, #4]
 802bd62:	45aa      	cmp	sl, r5
 802bd64:	d311      	bcc.n	802bd8a <__ssvfscanf_r+0x8c6>
 802bd66:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802bd6a:	429d      	cmp	r5, r3
 802bd6c:	f200 8512 	bhi.w	802c794 <__ssvfscanf_r+0x12d0>
 802bd70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bd72:	3508      	adds	r5, #8
 802bd74:	b2ad      	uxth	r5, r5
 802bd76:	6818      	ldr	r0, [r3, #0]
 802bd78:	00a9      	lsls	r1, r5, #2
 802bd7a:	f001 f9b9 	bl	802d0f0 <realloc>
 802bd7e:	2800      	cmp	r0, #0
 802bd80:	f000 8508 	beq.w	802c794 <__ssvfscanf_r+0x12d0>
 802bd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bd86:	6018      	str	r0, [r3, #0]
 802bd88:	809d      	strh	r5, [r3, #4]
 802bd8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bd8c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802bd8e:	681b      	ldr	r3, [r3, #0]
 802bd90:	f10a 0201 	add.w	r2, sl, #1
 802bd94:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 802bd98:	80ca      	strh	r2, [r1, #6]
 802bd9a:	46c2      	mov	sl, r8
 802bd9c:	46b0      	mov	r8, r6
 802bd9e:	2620      	movs	r6, #32
 802bda0:	4645      	mov	r5, r8
 802bda2:	6823      	ldr	r3, [r4, #0]
 802bda4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 802bda8:	781a      	ldrb	r2, [r3, #0]
 802bdaa:	5c8a      	ldrb	r2, [r1, r2]
 802bdac:	b35a      	cbz	r2, 802be06 <__ssvfscanf_r+0x942>
 802bdae:	6862      	ldr	r2, [r4, #4]
 802bdb0:	3a01      	subs	r2, #1
 802bdb2:	6062      	str	r2, [r4, #4]
 802bdb4:	1c5a      	adds	r2, r3, #1
 802bdb6:	6022      	str	r2, [r4, #0]
 802bdb8:	781b      	ldrb	r3, [r3, #0]
 802bdba:	f808 3b01 	strb.w	r3, [r8], #1
 802bdbe:	f1ba 0f00 	cmp.w	sl, #0
 802bdc2:	d010      	beq.n	802bde6 <__ssvfscanf_r+0x922>
 802bdc4:	eba8 0b05 	sub.w	fp, r8, r5
 802bdc8:	45b3      	cmp	fp, r6
 802bdca:	d30c      	bcc.n	802bde6 <__ssvfscanf_r+0x922>
 802bdcc:	0076      	lsls	r6, r6, #1
 802bdce:	4628      	mov	r0, r5
 802bdd0:	4631      	mov	r1, r6
 802bdd2:	f001 f98d 	bl	802d0f0 <realloc>
 802bdd6:	4605      	mov	r5, r0
 802bdd8:	2800      	cmp	r0, #0
 802bdda:	f43f ac3a 	beq.w	802b652 <__ssvfscanf_r+0x18e>
 802bdde:	eb00 080b 	add.w	r8, r0, fp
 802bde2:	f8ca 0000 	str.w	r0, [sl]
 802bde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bde8:	3b01      	subs	r3, #1
 802bdea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802bdec:	d00b      	beq.n	802be06 <__ssvfscanf_r+0x942>
 802bdee:	6863      	ldr	r3, [r4, #4]
 802bdf0:	2b00      	cmp	r3, #0
 802bdf2:	dcd6      	bgt.n	802bda2 <__ssvfscanf_r+0x8de>
 802bdf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bdf6:	4621      	mov	r1, r4
 802bdf8:	f7fd f9af 	bl	802915a <__ssrefill_r>
 802bdfc:	2800      	cmp	r0, #0
 802bdfe:	d0d0      	beq.n	802bda2 <__ssvfscanf_r+0x8de>
 802be00:	45a8      	cmp	r8, r5
 802be02:	f43f ac21 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802be06:	ebb8 0505 	subs.w	r5, r8, r5
 802be0a:	f43f ac51 	beq.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802be0e:	2300      	movs	r3, #0
 802be10:	f888 3000 	strb.w	r3, [r8]
 802be14:	f1ba 0f00 	cmp.w	sl, #0
 802be18:	d009      	beq.n	802be2e <__ssvfscanf_r+0x96a>
 802be1a:	1c69      	adds	r1, r5, #1
 802be1c:	428e      	cmp	r6, r1
 802be1e:	d906      	bls.n	802be2e <__ssvfscanf_r+0x96a>
 802be20:	f8da 0000 	ldr.w	r0, [sl]
 802be24:	f001 f964 	bl	802d0f0 <realloc>
 802be28:	b108      	cbz	r0, 802be2e <__ssvfscanf_r+0x96a>
 802be2a:	f8ca 0000 	str.w	r0, [sl]
 802be2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802be30:	3301      	adds	r3, #1
 802be32:	627b      	str	r3, [r7, #36]	@ 0x24
 802be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802be36:	442b      	add	r3, r5
 802be38:	633b      	str	r3, [r7, #48]	@ 0x30
 802be3a:	e64a      	b.n	802bad2 <__ssvfscanf_r+0x60e>
 802be3c:	46b2      	mov	sl, r6
 802be3e:	e7af      	b.n	802bda0 <__ssvfscanf_r+0x8dc>
 802be40:	200002c4 	.word	0x200002c4
 802be44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802be46:	2b00      	cmp	r3, #0
 802be48:	bf08      	it	eq
 802be4a:	f04f 33ff 	moveq.w	r3, #4294967295	@ 0xffffffff
 802be4e:	f016 0901 	ands.w	r9, r6, #1
 802be52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802be54:	f006 0810 	and.w	r8, r6, #16
 802be58:	f000 80ef 	beq.w	802c03a <__ssvfscanf_r+0xb76>
 802be5c:	f1b8 0f00 	cmp.w	r8, #0
 802be60:	f040 8098 	bne.w	802bf94 <__ssvfscanf_r+0xad0>
 802be64:	462b      	mov	r3, r5
 802be66:	0631      	lsls	r1, r6, #24
 802be68:	f853 5b04 	ldr.w	r5, [r3], #4
 802be6c:	613b      	str	r3, [r7, #16]
 802be6e:	f140 8099 	bpl.w	802bfa4 <__ssvfscanf_r+0xae0>
 802be72:	2d00      	cmp	r5, #0
 802be74:	f43f ace4 	beq.w	802b840 <__ssvfscanf_r+0x37c>
 802be78:	2080      	movs	r0, #128	@ 0x80
 802be7a:	f7fc f9af 	bl	80281dc <malloc>
 802be7e:	4606      	mov	r6, r0
 802be80:	2800      	cmp	r0, #0
 802be82:	f43f acda 	beq.w	802b83a <__ssvfscanf_r+0x376>
 802be86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802be88:	6028      	str	r0, [r5, #0]
 802be8a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 802be8e:	889b      	ldrh	r3, [r3, #4]
 802be90:	4599      	cmp	r9, r3
 802be92:	d314      	bcc.n	802bebe <__ssvfscanf_r+0x9fa>
 802be94:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 802be98:	4293      	cmp	r3, r2
 802be9a:	f200 847b 	bhi.w	802c794 <__ssvfscanf_r+0x12d0>
 802be9e:	3308      	adds	r3, #8
 802bea0:	fa1f fa83 	uxth.w	sl, r3
 802bea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bea6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 802beaa:	6818      	ldr	r0, [r3, #0]
 802beac:	f001 f920 	bl	802d0f0 <realloc>
 802beb0:	2800      	cmp	r0, #0
 802beb2:	f000 846f 	beq.w	802c794 <__ssvfscanf_r+0x12d0>
 802beb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802beb8:	6018      	str	r0, [r3, #0]
 802beba:	f8a3 a004 	strh.w	sl, [r3, #4]
 802bebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bec0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802bec2:	681b      	ldr	r3, [r3, #0]
 802bec4:	f109 0201 	add.w	r2, r9, #1
 802bec8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 802becc:	46aa      	mov	sl, r5
 802bece:	80ca      	strh	r2, [r1, #6]
 802bed0:	4635      	mov	r5, r6
 802bed2:	f04f 0920 	mov.w	r9, #32
 802bed6:	2300      	movs	r3, #0
 802bed8:	6822      	ldr	r2, [r4, #0]
 802beda:	49a7      	ldr	r1, [pc, #668]	@ (802c178 <__ssvfscanf_r+0xcb4>)
 802bedc:	7812      	ldrb	r2, [r2, #0]
 802bede:	5c8a      	ldrb	r2, [r1, r2]
 802bee0:	0710      	lsls	r0, r2, #28
 802bee2:	d43c      	bmi.n	802bf5e <__ssvfscanf_r+0xa9a>
 802bee4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802bee6:	2a00      	cmp	r2, #0
 802bee8:	d039      	beq.n	802bf5e <__ssvfscanf_r+0xa9a>
 802beea:	60fb      	str	r3, [r7, #12]
 802beec:	f7fb f8b8 	bl	8027060 <__locale_mb_cur_max>
 802bef0:	68fb      	ldr	r3, [r7, #12]
 802bef2:	4298      	cmp	r0, r3
 802bef4:	f43f aba8 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802bef8:	6822      	ldr	r2, [r4, #0]
 802befa:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802befe:	f812 0b01 	ldrb.w	r0, [r2], #1
 802bf02:	54c8      	strb	r0, [r1, r3]
 802bf04:	f103 0b01 	add.w	fp, r3, #1
 802bf08:	6863      	ldr	r3, [r4, #4]
 802bf0a:	3b01      	subs	r3, #1
 802bf0c:	e9c4 2300 	strd	r2, r3, [r4]
 802bf10:	6a3b      	ldr	r3, [r7, #32]
 802bf12:	2b03      	cmp	r3, #3
 802bf14:	d102      	bne.n	802bf1c <__ssvfscanf_r+0xa58>
 802bf16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bf18:	2b04      	cmp	r3, #4
 802bf1a:	d005      	beq.n	802bf28 <__ssvfscanf_r+0xa64>
 802bf1c:	2208      	movs	r2, #8
 802bf1e:	2100      	movs	r1, #0
 802bf20:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 802bf24:	f7f9 ff14 	bl	8025d50 <memset>
 802bf28:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802bf2c:	9300      	str	r3, [sp, #0]
 802bf2e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 802bf32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bf34:	465b      	mov	r3, fp
 802bf36:	4629      	mov	r1, r5
 802bf38:	f002 fc94 	bl	802e864 <_mbrtowc_r>
 802bf3c:	1c42      	adds	r2, r0, #1
 802bf3e:	6238      	str	r0, [r7, #32]
 802bf40:	f43f ab82 	beq.w	802b648 <__ssvfscanf_r+0x184>
 802bf44:	bb90      	cbnz	r0, 802bfac <__ssvfscanf_r+0xae8>
 802bf46:	6028      	str	r0, [r5, #0]
 802bf48:	6828      	ldr	r0, [r5, #0]
 802bf4a:	f002 fca5 	bl	802e898 <iswspace>
 802bf4e:	4603      	mov	r3, r0
 802bf50:	2800      	cmp	r0, #0
 802bf52:	d047      	beq.n	802bfe4 <__ssvfscanf_r+0xb20>
 802bf54:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802bf58:	f1bb 0f00 	cmp.w	fp, #0
 802bf5c:	d139      	bne.n	802bfd2 <__ssvfscanf_r+0xb0e>
 802bf5e:	f1b8 0f00 	cmp.w	r8, #0
 802bf62:	d114      	bne.n	802bf8e <__ssvfscanf_r+0xaca>
 802bf64:	f8c5 8000 	str.w	r8, [r5]
 802bf68:	f1ba 0f00 	cmp.w	sl, #0
 802bf6c:	d00c      	beq.n	802bf88 <__ssvfscanf_r+0xac4>
 802bf6e:	1ba9      	subs	r1, r5, r6
 802bf70:	108b      	asrs	r3, r1, #2
 802bf72:	3301      	adds	r3, #1
 802bf74:	4599      	cmp	r9, r3
 802bf76:	d907      	bls.n	802bf88 <__ssvfscanf_r+0xac4>
 802bf78:	f8da 0000 	ldr.w	r0, [sl]
 802bf7c:	3104      	adds	r1, #4
 802bf7e:	f001 f8b7 	bl	802d0f0 <realloc>
 802bf82:	b108      	cbz	r0, 802bf88 <__ssvfscanf_r+0xac4>
 802bf84:	f8ca 0000 	str.w	r0, [sl]
 802bf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bf8a:	3301      	adds	r3, #1
 802bf8c:	627b      	str	r3, [r7, #36]	@ 0x24
 802bf8e:	693d      	ldr	r5, [r7, #16]
 802bf90:	f7ff bab3 	b.w	802b4fa <__ssvfscanf_r+0x36>
 802bf94:	f04f 0900 	mov.w	r9, #0
 802bf98:	613d      	str	r5, [r7, #16]
 802bf9a:	464e      	mov	r6, r9
 802bf9c:	46ca      	mov	sl, r9
 802bf9e:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 802bfa2:	e798      	b.n	802bed6 <__ssvfscanf_r+0xa12>
 802bfa4:	46c1      	mov	r9, r8
 802bfa6:	4646      	mov	r6, r8
 802bfa8:	46c2      	mov	sl, r8
 802bfaa:	e794      	b.n	802bed6 <__ssvfscanf_r+0xa12>
 802bfac:	6a3b      	ldr	r3, [r7, #32]
 802bfae:	3302      	adds	r3, #2
 802bfb0:	d1ca      	bne.n	802bf48 <__ssvfscanf_r+0xa84>
 802bfb2:	465b      	mov	r3, fp
 802bfb4:	6862      	ldr	r2, [r4, #4]
 802bfb6:	2a00      	cmp	r2, #0
 802bfb8:	dc8e      	bgt.n	802bed8 <__ssvfscanf_r+0xa14>
 802bfba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bfbc:	60fb      	str	r3, [r7, #12]
 802bfbe:	4621      	mov	r1, r4
 802bfc0:	f7fd f8cb 	bl	802915a <__ssrefill_r>
 802bfc4:	68fb      	ldr	r3, [r7, #12]
 802bfc6:	2800      	cmp	r0, #0
 802bfc8:	d086      	beq.n	802bed8 <__ssvfscanf_r+0xa14>
 802bfca:	2b00      	cmp	r3, #0
 802bfcc:	f47f ab3c 	bne.w	802b648 <__ssvfscanf_r+0x184>
 802bfd0:	e7c5      	b.n	802bf5e <__ssvfscanf_r+0xa9a>
 802bfd2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802bfd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802bfd8:	f813 100b 	ldrb.w	r1, [r3, fp]
 802bfdc:	4622      	mov	r2, r4
 802bfde:	f7fd f881 	bl	80290e4 <_sungetc_r>
 802bfe2:	e7b7      	b.n	802bf54 <__ssvfscanf_r+0xa90>
 802bfe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802bfe6:	445a      	add	r2, fp
 802bfe8:	633a      	str	r2, [r7, #48]	@ 0x30
 802bfea:	6a3a      	ldr	r2, [r7, #32]
 802bfec:	2a03      	cmp	r2, #3
 802bfee:	d102      	bne.n	802bff6 <__ssvfscanf_r+0xb32>
 802bff0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bff2:	2a04      	cmp	r2, #4
 802bff4:	d002      	beq.n	802bffc <__ssvfscanf_r+0xb38>
 802bff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802bff8:	3a01      	subs	r2, #1
 802bffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802bffc:	f1b8 0f00 	cmp.w	r8, #0
 802c000:	d1d8      	bne.n	802bfb4 <__ssvfscanf_r+0xaf0>
 802c002:	3504      	adds	r5, #4
 802c004:	f1ba 0f00 	cmp.w	sl, #0
 802c008:	d015      	beq.n	802c036 <__ssvfscanf_r+0xb72>
 802c00a:	eba5 0b06 	sub.w	fp, r5, r6
 802c00e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 802c012:	d80e      	bhi.n	802c032 <__ssvfscanf_r+0xb6e>
 802c014:	4630      	mov	r0, r6
 802c016:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802c01a:	f001 f869 	bl	802d0f0 <realloc>
 802c01e:	4606      	mov	r6, r0
 802c020:	2800      	cmp	r0, #0
 802c022:	f43f ac0a 	beq.w	802b83a <__ssvfscanf_r+0x376>
 802c026:	eb00 050b 	add.w	r5, r0, fp
 802c02a:	f8ca 0000 	str.w	r0, [sl]
 802c02e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802c032:	4643      	mov	r3, r8
 802c034:	e7be      	b.n	802bfb4 <__ssvfscanf_r+0xaf0>
 802c036:	4653      	mov	r3, sl
 802c038:	e7bc      	b.n	802bfb4 <__ssvfscanf_r+0xaf0>
 802c03a:	f1b8 0f00 	cmp.w	r8, #0
 802c03e:	d01a      	beq.n	802c076 <__ssvfscanf_r+0xbb2>
 802c040:	4e4d      	ldr	r6, [pc, #308]	@ (802c178 <__ssvfscanf_r+0xcb4>)
 802c042:	6823      	ldr	r3, [r4, #0]
 802c044:	781a      	ldrb	r2, [r3, #0]
 802c046:	5cb2      	ldrb	r2, [r6, r2]
 802c048:	0711      	lsls	r1, r2, #28
 802c04a:	d411      	bmi.n	802c070 <__ssvfscanf_r+0xbac>
 802c04c:	3301      	adds	r3, #1
 802c04e:	6862      	ldr	r2, [r4, #4]
 802c050:	6023      	str	r3, [r4, #0]
 802c052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c054:	f109 0901 	add.w	r9, r9, #1
 802c058:	3a01      	subs	r2, #1
 802c05a:	454b      	cmp	r3, r9
 802c05c:	6062      	str	r2, [r4, #4]
 802c05e:	d007      	beq.n	802c070 <__ssvfscanf_r+0xbac>
 802c060:	2a00      	cmp	r2, #0
 802c062:	dcee      	bgt.n	802c042 <__ssvfscanf_r+0xb7e>
 802c064:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c066:	4621      	mov	r1, r4
 802c068:	f7fd f877 	bl	802915a <__ssrefill_r>
 802c06c:	2800      	cmp	r0, #0
 802c06e:	d0e8      	beq.n	802c042 <__ssvfscanf_r+0xb7e>
 802c070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c072:	444b      	add	r3, r9
 802c074:	e4d3      	b.n	802ba1e <__ssvfscanf_r+0x55a>
 802c076:	46a8      	mov	r8, r5
 802c078:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 802c07c:	f858 5b04 	ldr.w	r5, [r8], #4
 802c080:	d077      	beq.n	802c172 <__ssvfscanf_r+0xcae>
 802c082:	2d00      	cmp	r5, #0
 802c084:	f43f ab14 	beq.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802c088:	2020      	movs	r0, #32
 802c08a:	f7fc f8a7 	bl	80281dc <malloc>
 802c08e:	4681      	mov	r9, r0
 802c090:	2800      	cmp	r0, #0
 802c092:	f43f aade 	beq.w	802b652 <__ssvfscanf_r+0x18e>
 802c096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c098:	6028      	str	r0, [r5, #0]
 802c09a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 802c09e:	889e      	ldrh	r6, [r3, #4]
 802c0a0:	45b2      	cmp	sl, r6
 802c0a2:	d311      	bcc.n	802c0c8 <__ssvfscanf_r+0xc04>
 802c0a4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 802c0a8:	429e      	cmp	r6, r3
 802c0aa:	f200 8373 	bhi.w	802c794 <__ssvfscanf_r+0x12d0>
 802c0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c0b0:	3608      	adds	r6, #8
 802c0b2:	b2b6      	uxth	r6, r6
 802c0b4:	6818      	ldr	r0, [r3, #0]
 802c0b6:	00b1      	lsls	r1, r6, #2
 802c0b8:	f001 f81a 	bl	802d0f0 <realloc>
 802c0bc:	2800      	cmp	r0, #0
 802c0be:	f000 8369 	beq.w	802c794 <__ssvfscanf_r+0x12d0>
 802c0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c0c4:	6018      	str	r0, [r3, #0]
 802c0c6:	809e      	strh	r6, [r3, #4]
 802c0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c0ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802c0cc:	681b      	ldr	r3, [r3, #0]
 802c0ce:	f10a 0201 	add.w	r2, sl, #1
 802c0d2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 802c0d6:	80ca      	strh	r2, [r1, #6]
 802c0d8:	46aa      	mov	sl, r5
 802c0da:	2620      	movs	r6, #32
 802c0dc:	464d      	mov	r5, r9
 802c0de:	46a9      	mov	r9, r5
 802c0e0:	6823      	ldr	r3, [r4, #0]
 802c0e2:	4925      	ldr	r1, [pc, #148]	@ (802c178 <__ssvfscanf_r+0xcb4>)
 802c0e4:	781a      	ldrb	r2, [r3, #0]
 802c0e6:	5c8a      	ldrb	r2, [r1, r2]
 802c0e8:	0712      	lsls	r2, r2, #28
 802c0ea:	d428      	bmi.n	802c13e <__ssvfscanf_r+0xc7a>
 802c0ec:	6862      	ldr	r2, [r4, #4]
 802c0ee:	3a01      	subs	r2, #1
 802c0f0:	6062      	str	r2, [r4, #4]
 802c0f2:	1c5a      	adds	r2, r3, #1
 802c0f4:	6022      	str	r2, [r4, #0]
 802c0f6:	781b      	ldrb	r3, [r3, #0]
 802c0f8:	f805 3b01 	strb.w	r3, [r5], #1
 802c0fc:	f1ba 0f00 	cmp.w	sl, #0
 802c100:	d010      	beq.n	802c124 <__ssvfscanf_r+0xc60>
 802c102:	eba5 0b09 	sub.w	fp, r5, r9
 802c106:	45b3      	cmp	fp, r6
 802c108:	d30c      	bcc.n	802c124 <__ssvfscanf_r+0xc60>
 802c10a:	0076      	lsls	r6, r6, #1
 802c10c:	4648      	mov	r0, r9
 802c10e:	4631      	mov	r1, r6
 802c110:	f000 ffee 	bl	802d0f0 <realloc>
 802c114:	4681      	mov	r9, r0
 802c116:	2800      	cmp	r0, #0
 802c118:	f43f aa9b 	beq.w	802b652 <__ssvfscanf_r+0x18e>
 802c11c:	eb00 050b 	add.w	r5, r0, fp
 802c120:	f8ca 0000 	str.w	r0, [sl]
 802c124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c126:	3b01      	subs	r3, #1
 802c128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802c12a:	d008      	beq.n	802c13e <__ssvfscanf_r+0xc7a>
 802c12c:	6863      	ldr	r3, [r4, #4]
 802c12e:	2b00      	cmp	r3, #0
 802c130:	dcd6      	bgt.n	802c0e0 <__ssvfscanf_r+0xc1c>
 802c132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c134:	4621      	mov	r1, r4
 802c136:	f7fd f810 	bl	802915a <__ssrefill_r>
 802c13a:	2800      	cmp	r0, #0
 802c13c:	d0d0      	beq.n	802c0e0 <__ssvfscanf_r+0xc1c>
 802c13e:	2300      	movs	r3, #0
 802c140:	702b      	strb	r3, [r5, #0]
 802c142:	eba5 0509 	sub.w	r5, r5, r9
 802c146:	f1ba 0f00 	cmp.w	sl, #0
 802c14a:	d009      	beq.n	802c160 <__ssvfscanf_r+0xc9c>
 802c14c:	1c69      	adds	r1, r5, #1
 802c14e:	428e      	cmp	r6, r1
 802c150:	d906      	bls.n	802c160 <__ssvfscanf_r+0xc9c>
 802c152:	f8da 0000 	ldr.w	r0, [sl]
 802c156:	f000 ffcb 	bl	802d0f0 <realloc>
 802c15a:	b108      	cbz	r0, 802c160 <__ssvfscanf_r+0xc9c>
 802c15c:	f8ca 0000 	str.w	r0, [sl]
 802c160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c162:	442b      	add	r3, r5
 802c164:	633b      	str	r3, [r7, #48]	@ 0x30
 802c166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c168:	3301      	adds	r3, #1
 802c16a:	627b      	str	r3, [r7, #36]	@ 0x24
 802c16c:	4645      	mov	r5, r8
 802c16e:	f7ff b9c4 	b.w	802b4fa <__ssvfscanf_r+0x36>
 802c172:	46b2      	mov	sl, r6
 802c174:	e7b3      	b.n	802c0de <__ssvfscanf_r+0xc1a>
 802c176:	bf00      	nop
 802c178:	08034aa1 	.word	0x08034aa1
 802c17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c17e:	3b01      	subs	r3, #1
 802c180:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 802c184:	bf81      	itttt	hi
 802c186:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 802c188:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 802c18c:	eb03 090c 	addhi.w	r9, r3, ip
 802c190:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802c194:	bf8c      	ite	hi
 802c196:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 802c198:	f04f 0900 	movls.w	r9, #0
 802c19c:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 802c1a0:	f04f 0a00 	mov.w	sl, #0
 802c1a4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 802c1a8:	6822      	ldr	r2, [r4, #0]
 802c1aa:	7813      	ldrb	r3, [r2, #0]
 802c1ac:	2b39      	cmp	r3, #57	@ 0x39
 802c1ae:	d80f      	bhi.n	802c1d0 <__ssvfscanf_r+0xd0c>
 802c1b0:	2b2a      	cmp	r3, #42	@ 0x2a
 802c1b2:	d91a      	bls.n	802c1ea <__ssvfscanf_r+0xd26>
 802c1b4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802c1b8:	290e      	cmp	r1, #14
 802c1ba:	d816      	bhi.n	802c1ea <__ssvfscanf_r+0xd26>
 802c1bc:	e8df f001 	tbb	[pc, r1]
 802c1c0:	15781578 	.word	0x15781578
 802c1c4:	68683f15 	.word	0x68683f15
 802c1c8:	68686868 	.word	0x68686868
 802c1cc:	7068      	.short	0x7068
 802c1ce:	70          	.byte	0x70
 802c1cf:	00          	.byte	0x00
 802c1d0:	2b66      	cmp	r3, #102	@ 0x66
 802c1d2:	d832      	bhi.n	802c23a <__ssvfscanf_r+0xd76>
 802c1d4:	2b60      	cmp	r3, #96	@ 0x60
 802c1d6:	d803      	bhi.n	802c1e0 <__ssvfscanf_r+0xd1c>
 802c1d8:	2b46      	cmp	r3, #70	@ 0x46
 802c1da:	d804      	bhi.n	802c1e6 <__ssvfscanf_r+0xd22>
 802c1dc:	2b40      	cmp	r3, #64	@ 0x40
 802c1de:	d904      	bls.n	802c1ea <__ssvfscanf_r+0xd26>
 802c1e0:	69f9      	ldr	r1, [r7, #28]
 802c1e2:	290a      	cmp	r1, #10
 802c1e4:	e062      	b.n	802c2ac <__ssvfscanf_r+0xde8>
 802c1e6:	2b58      	cmp	r3, #88	@ 0x58
 802c1e8:	d068      	beq.n	802c2bc <__ssvfscanf_r+0xdf8>
 802c1ea:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 802c1ee:	d011      	beq.n	802c214 <__ssvfscanf_r+0xd50>
 802c1f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802c1f4:	4598      	cmp	r8, r3
 802c1f6:	d908      	bls.n	802c20a <__ssvfscanf_r+0xd46>
 802c1f8:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 802c1fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c1fe:	4622      	mov	r2, r4
 802c200:	f7fc ff70 	bl	80290e4 <_sungetc_r>
 802c204:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 802c208:	46c8      	mov	r8, r9
 802c20a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802c20e:	4598      	cmp	r8, r3
 802c210:	f43f aa4e 	beq.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802c214:	f01b 0210 	ands.w	r2, fp, #16
 802c218:	d16c      	bne.n	802c2f4 <__ssvfscanf_r+0xe30>
 802c21a:	69fb      	ldr	r3, [r7, #28]
 802c21c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c21e:	69be      	ldr	r6, [r7, #24]
 802c220:	f888 2000 	strb.w	r2, [r8]
 802c224:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802c228:	47b0      	blx	r6
 802c22a:	f01b 0f20 	tst.w	fp, #32
 802c22e:	f105 0904 	add.w	r9, r5, #4
 802c232:	d056      	beq.n	802c2e2 <__ssvfscanf_r+0xe1e>
 802c234:	682b      	ldr	r3, [r5, #0]
 802c236:	6018      	str	r0, [r3, #0]
 802c238:	e058      	b.n	802c2ec <__ssvfscanf_r+0xe28>
 802c23a:	2b78      	cmp	r3, #120	@ 0x78
 802c23c:	e7d4      	b.n	802c1e8 <__ssvfscanf_r+0xd24>
 802c23e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 802c242:	d00a      	beq.n	802c25a <__ssvfscanf_r+0xd96>
 802c244:	69f9      	ldr	r1, [r7, #28]
 802c246:	b919      	cbnz	r1, 802c250 <__ssvfscanf_r+0xd8c>
 802c248:	2108      	movs	r1, #8
 802c24a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 802c24e:	61f9      	str	r1, [r7, #28]
 802c250:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 802c254:	d004      	beq.n	802c260 <__ssvfscanf_r+0xd9c>
 802c256:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 802c25a:	f808 3b01 	strb.w	r3, [r8], #1
 802c25e:	e00b      	b.n	802c278 <__ssvfscanf_r+0xdb4>
 802c260:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 802c264:	f1b9 0f00 	cmp.w	r9, #0
 802c268:	d004      	beq.n	802c274 <__ssvfscanf_r+0xdb0>
 802c26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c26c:	3301      	adds	r3, #1
 802c26e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 802c272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802c274:	f10a 0a01 	add.w	sl, sl, #1
 802c278:	6863      	ldr	r3, [r4, #4]
 802c27a:	3b01      	subs	r3, #1
 802c27c:	2b00      	cmp	r3, #0
 802c27e:	6063      	str	r3, [r4, #4]
 802c280:	dd28      	ble.n	802c2d4 <__ssvfscanf_r+0xe10>
 802c282:	3201      	adds	r2, #1
 802c284:	6022      	str	r2, [r4, #0]
 802c286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c288:	3b01      	subs	r3, #1
 802c28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802c28c:	d18c      	bne.n	802c1a8 <__ssvfscanf_r+0xce4>
 802c28e:	e7ac      	b.n	802c1ea <__ssvfscanf_r+0xd26>
 802c290:	69f8      	ldr	r0, [r7, #28]
 802c292:	499b      	ldr	r1, [pc, #620]	@ (802c500 <__ssvfscanf_r+0x103c>)
 802c294:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802c298:	61f9      	str	r1, [r7, #28]
 802c29a:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 802c29e:	e7dc      	b.n	802c25a <__ssvfscanf_r+0xd96>
 802c2a0:	69f8      	ldr	r0, [r7, #28]
 802c2a2:	4997      	ldr	r1, [pc, #604]	@ (802c500 <__ssvfscanf_r+0x103c>)
 802c2a4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 802c2a8:	61f9      	str	r1, [r7, #28]
 802c2aa:	2908      	cmp	r1, #8
 802c2ac:	dcf5      	bgt.n	802c29a <__ssvfscanf_r+0xdd6>
 802c2ae:	e79c      	b.n	802c1ea <__ssvfscanf_r+0xd26>
 802c2b0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 802c2b4:	d099      	beq.n	802c1ea <__ssvfscanf_r+0xd26>
 802c2b6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 802c2ba:	e7ce      	b.n	802c25a <__ssvfscanf_r+0xd96>
 802c2bc:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 802c2c0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802c2c4:	d191      	bne.n	802c1ea <__ssvfscanf_r+0xd26>
 802c2c6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 802c2ca:	2110      	movs	r1, #16
 802c2cc:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 802c2d0:	61f9      	str	r1, [r7, #28]
 802c2d2:	e7c2      	b.n	802c25a <__ssvfscanf_r+0xd96>
 802c2d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c2d6:	4621      	mov	r1, r4
 802c2d8:	f7fc ff3f 	bl	802915a <__ssrefill_r>
 802c2dc:	2800      	cmp	r0, #0
 802c2de:	d0d2      	beq.n	802c286 <__ssvfscanf_r+0xdc2>
 802c2e0:	e783      	b.n	802c1ea <__ssvfscanf_r+0xd26>
 802c2e2:	f01b 0f08 	tst.w	fp, #8
 802c2e6:	d00b      	beq.n	802c300 <__ssvfscanf_r+0xe3c>
 802c2e8:	682b      	ldr	r3, [r5, #0]
 802c2ea:	7018      	strb	r0, [r3, #0]
 802c2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c2ee:	3301      	adds	r3, #1
 802c2f0:	627b      	str	r3, [r7, #36]	@ 0x24
 802c2f2:	464d      	mov	r5, r9
 802c2f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 802c2f8:	eba8 0803 	sub.w	r8, r8, r3
 802c2fc:	44d0      	add	r8, sl
 802c2fe:	e516      	b.n	802bd2e <__ssvfscanf_r+0x86a>
 802c300:	f01b 0f04 	tst.w	fp, #4
 802c304:	d002      	beq.n	802c30c <__ssvfscanf_r+0xe48>
 802c306:	682b      	ldr	r3, [r5, #0]
 802c308:	8018      	strh	r0, [r3, #0]
 802c30a:	e7ef      	b.n	802c2ec <__ssvfscanf_r+0xe28>
 802c30c:	f01b 0201 	ands.w	r2, fp, #1
 802c310:	d190      	bne.n	802c234 <__ssvfscanf_r+0xd70>
 802c312:	f01b 0f02 	tst.w	fp, #2
 802c316:	d08d      	beq.n	802c234 <__ssvfscanf_r+0xd70>
 802c318:	4b7a      	ldr	r3, [pc, #488]	@ (802c504 <__ssvfscanf_r+0x1040>)
 802c31a:	69b9      	ldr	r1, [r7, #24]
 802c31c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c31e:	4299      	cmp	r1, r3
 802c320:	69fb      	ldr	r3, [r7, #28]
 802c322:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802c326:	d105      	bne.n	802c334 <__ssvfscanf_r+0xe70>
 802c328:	f002 fa9a 	bl	802e860 <_strtoull_r>
 802c32c:	682b      	ldr	r3, [r5, #0]
 802c32e:	e9c3 0100 	strd	r0, r1, [r3]
 802c332:	e7db      	b.n	802c2ec <__ssvfscanf_r+0xe28>
 802c334:	f002 f9e8 	bl	802e708 <_strtoll_r>
 802c338:	e7f8      	b.n	802c32c <__ssvfscanf_r+0xe68>
 802c33a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c33c:	f7fa fe96 	bl	802706c <_localeconv_r>
 802c340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c342:	6802      	ldr	r2, [r0, #0]
 802c344:	3b01      	subs	r3, #1
 802c346:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 802c34a:	f04f 0800 	mov.w	r8, #0
 802c34e:	bf88      	it	hi
 802c350:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 802c352:	f8c7 8010 	str.w	r8, [r7, #16]
 802c356:	e9c7 8802 	strd	r8, r8, [r7, #8]
 802c35a:	bf81      	itttt	hi
 802c35c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 802c360:	f240 115d 	movwhi	r1, #349	@ 0x15d
 802c364:	181b      	addhi	r3, r3, r0
 802c366:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 802c368:	bf98      	it	ls
 802c36a:	2300      	movls	r3, #0
 802c36c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 802c370:	46c3      	mov	fp, r8
 802c372:	46c2      	mov	sl, r8
 802c374:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 802c378:	6821      	ldr	r1, [r4, #0]
 802c37a:	6079      	str	r1, [r7, #4]
 802c37c:	7808      	ldrb	r0, [r1, #0]
 802c37e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 802c382:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 802c386:	f200 8123 	bhi.w	802c5d0 <__ssvfscanf_r+0x110c>
 802c38a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 802c38e:	0089      	.short	0x0089
 802c390:	00890121 	.word	0x00890121
 802c394:	01210121 	.word	0x01210121
 802c398:	006f004f 	.word	0x006f004f
 802c39c:	006f006f 	.word	0x006f006f
 802c3a0:	006f006f 	.word	0x006f006f
 802c3a4:	006f006f 	.word	0x006f006f
 802c3a8:	006f006f 	.word	0x006f006f
 802c3ac:	01210121 	.word	0x01210121
 802c3b0:	01210121 	.word	0x01210121
 802c3b4:	01210121 	.word	0x01210121
 802c3b8:	00af0121 	.word	0x00af0121
 802c3bc:	006d006d 	.word	0x006d006d
 802c3c0:	011e006d 	.word	0x011e006d
 802c3c4:	012100ed 	.word	0x012100ed
 802c3c8:	00d60121 	.word	0x00d60121
 802c3cc:	01210121 	.word	0x01210121
 802c3d0:	01210121 	.word	0x01210121
 802c3d4:	01210090 	.word	0x01210090
 802c3d8:	01210104 	.word	0x01210104
 802c3dc:	01210121 	.word	0x01210121
 802c3e0:	012100f8 	.word	0x012100f8
 802c3e4:	01210121 	.word	0x01210121
 802c3e8:	00fe0073 	.word	0x00fe0073
 802c3ec:	01210121 	.word	0x01210121
 802c3f0:	01210121 	.word	0x01210121
 802c3f4:	01210121 	.word	0x01210121
 802c3f8:	00af0121 	.word	0x00af0121
 802c3fc:	006d006d 	.word	0x006d006d
 802c400:	011e006d 	.word	0x011e006d
 802c404:	012100ed 	.word	0x012100ed
 802c408:	00d60121 	.word	0x00d60121
 802c40c:	01210121 	.word	0x01210121
 802c410:	01210121 	.word	0x01210121
 802c414:	01210090 	.word	0x01210090
 802c418:	01210104 	.word	0x01210104
 802c41c:	01210121 	.word	0x01210121
 802c420:	012100f8 	.word	0x012100f8
 802c424:	01210121 	.word	0x01210121
 802c428:	00fe0073 	.word	0x00fe0073
 802c42c:	05f1      	lsls	r1, r6, #23
 802c42e:	d51d      	bpl.n	802c46c <__ssvfscanf_r+0xfa8>
 802c430:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802c434:	f10a 0a01 	add.w	sl, sl, #1
 802c438:	b11b      	cbz	r3, 802c442 <__ssvfscanf_r+0xf7e>
 802c43a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802c43c:	3001      	adds	r0, #1
 802c43e:	3b01      	subs	r3, #1
 802c440:	62f8      	str	r0, [r7, #44]	@ 0x2c
 802c442:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802c444:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c446:	3001      	adds	r0, #1
 802c448:	6338      	str	r0, [r7, #48]	@ 0x30
 802c44a:	6860      	ldr	r0, [r4, #4]
 802c44c:	3801      	subs	r0, #1
 802c44e:	3901      	subs	r1, #1
 802c450:	2800      	cmp	r0, #0
 802c452:	62f9      	str	r1, [r7, #44]	@ 0x2c
 802c454:	6060      	str	r0, [r4, #4]
 802c456:	f340 80cc 	ble.w	802c5f2 <__ssvfscanf_r+0x112e>
 802c45a:	6879      	ldr	r1, [r7, #4]
 802c45c:	3101      	adds	r1, #1
 802c45e:	6021      	str	r1, [r4, #0]
 802c460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c462:	2900      	cmp	r1, #0
 802c464:	d188      	bne.n	802c378 <__ssvfscanf_r+0xeb4>
 802c466:	e052      	b.n	802c50e <__ssvfscanf_r+0x104a>
 802c468:	0531      	lsls	r1, r6, #20
 802c46a:	d550      	bpl.n	802c50e <__ssvfscanf_r+0x104a>
 802c46c:	eb1b 0c08 	adds.w	ip, fp, r8
 802c470:	d041      	beq.n	802c4f6 <__ssvfscanf_r+0x1032>
 802c472:	e04c      	b.n	802c50e <__ssvfscanf_r+0x104a>
 802c474:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 802c478:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 802c47c:	d147      	bne.n	802c50e <__ssvfscanf_r+0x104a>
 802c47e:	f1ba 0f01 	cmp.w	sl, #1
 802c482:	d144      	bne.n	802c50e <__ssvfscanf_r+0x104a>
 802c484:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802c486:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 802c48a:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 802c48e:	3901      	subs	r1, #1
 802c490:	f809 cb01 	strb.w	ip, [r9], #1
 802c494:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 802c498:	62f9      	str	r1, [r7, #44]	@ 0x2c
 802c49a:	f04f 0a00 	mov.w	sl, #0
 802c49e:	e003      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c4a0:	0631      	lsls	r1, r6, #24
 802c4a2:	d534      	bpl.n	802c50e <__ssvfscanf_r+0x104a>
 802c4a4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 802c4a8:	f809 0b01 	strb.w	r0, [r9], #1
 802c4ac:	e7c9      	b.n	802c442 <__ssvfscanf_r+0xf7e>
 802c4ae:	f1bb 0f00 	cmp.w	fp, #0
 802c4b2:	d10c      	bne.n	802c4ce <__ssvfscanf_r+0x100a>
 802c4b4:	f1ba 0f00 	cmp.w	sl, #0
 802c4b8:	d10d      	bne.n	802c4d6 <__ssvfscanf_r+0x1012>
 802c4ba:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 802c4be:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 802c4c2:	d108      	bne.n	802c4d6 <__ssvfscanf_r+0x1012>
 802c4c4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 802c4c8:	f04f 0b01 	mov.w	fp, #1
 802c4cc:	e7ec      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c4ce:	f1bb 0f02 	cmp.w	fp, #2
 802c4d2:	f000 8088 	beq.w	802c5e6 <__ssvfscanf_r+0x1122>
 802c4d6:	f1b8 0f01 	cmp.w	r8, #1
 802c4da:	d002      	beq.n	802c4e2 <__ssvfscanf_r+0x101e>
 802c4dc:	f1b8 0f04 	cmp.w	r8, #4
 802c4e0:	d115      	bne.n	802c50e <__ssvfscanf_r+0x104a>
 802c4e2:	f108 0801 	add.w	r8, r8, #1
 802c4e6:	fa5f f888 	uxtb.w	r8, r8
 802c4ea:	e7dd      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c4ec:	0531      	lsls	r1, r6, #20
 802c4ee:	d50b      	bpl.n	802c508 <__ssvfscanf_r+0x1044>
 802c4f0:	eb1b 0c08 	adds.w	ip, fp, r8
 802c4f4:	d108      	bne.n	802c508 <__ssvfscanf_r+0x1044>
 802c4f6:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 802c4fa:	46e0      	mov	r8, ip
 802c4fc:	46e3      	mov	fp, ip
 802c4fe:	e7d3      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c500:	08034c80 	.word	0x08034c80
 802c504:	0802e259 	.word	0x0802e259
 802c508:	f1bb 0f01 	cmp.w	fp, #1
 802c50c:	d06e      	beq.n	802c5ec <__ssvfscanf_r+0x1128>
 802c50e:	f1ba 0f00 	cmp.w	sl, #0
 802c512:	d001      	beq.n	802c518 <__ssvfscanf_r+0x1054>
 802c514:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 802c518:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c51c:	f1bb 0f01 	cmp.w	fp, #1
 802c520:	d873      	bhi.n	802c60a <__ssvfscanf_r+0x1146>
 802c522:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c526:	45a9      	cmp	r9, r5
 802c528:	f67f a8c2 	bls.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802c52c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c532:	4622      	mov	r2, r4
 802c534:	f7fc fdd6 	bl	80290e4 <_sungetc_r>
 802c538:	e7f5      	b.n	802c526 <__ssvfscanf_r+0x1062>
 802c53a:	f1b8 0f00 	cmp.w	r8, #0
 802c53e:	d10d      	bne.n	802c55c <__ssvfscanf_r+0x1098>
 802c540:	f1ba 0f00 	cmp.w	sl, #0
 802c544:	d1e6      	bne.n	802c514 <__ssvfscanf_r+0x1050>
 802c546:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 802c54a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 802c54e:	f040 8124 	bne.w	802c79a <__ssvfscanf_r+0x12d6>
 802c552:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 802c556:	f04f 0801 	mov.w	r8, #1
 802c55a:	e7a5      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c55c:	f1b8 0f03 	cmp.w	r8, #3
 802c560:	d0bf      	beq.n	802c4e2 <__ssvfscanf_r+0x101e>
 802c562:	f1b8 0f05 	cmp.w	r8, #5
 802c566:	e7bb      	b.n	802c4e0 <__ssvfscanf_r+0x101c>
 802c568:	0531      	lsls	r1, r6, #20
 802c56a:	d502      	bpl.n	802c572 <__ssvfscanf_r+0x10ae>
 802c56c:	eb1b 0c08 	adds.w	ip, fp, r8
 802c570:	d0c1      	beq.n	802c4f6 <__ssvfscanf_r+0x1032>
 802c572:	f1b8 0f02 	cmp.w	r8, #2
 802c576:	d1ca      	bne.n	802c50e <__ssvfscanf_r+0x104a>
 802c578:	f04f 0803 	mov.w	r8, #3
 802c57c:	e794      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c57e:	f1b8 0f06 	cmp.w	r8, #6
 802c582:	d1c4      	bne.n	802c50e <__ssvfscanf_r+0x104a>
 802c584:	f04f 0807 	mov.w	r8, #7
 802c588:	e78e      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c58a:	f1b8 0f07 	cmp.w	r8, #7
 802c58e:	d1be      	bne.n	802c50e <__ssvfscanf_r+0x104a>
 802c590:	f04f 0808 	mov.w	r8, #8
 802c594:	e788      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c596:	0531      	lsls	r1, r6, #20
 802c598:	d5b9      	bpl.n	802c50e <__ssvfscanf_r+0x104a>
 802c59a:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 802c59e:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 802c5a2:	d005      	beq.n	802c5b0 <__ssvfscanf_r+0x10ec>
 802c5a4:	0571      	lsls	r1, r6, #21
 802c5a6:	d5b2      	bpl.n	802c50e <__ssvfscanf_r+0x104a>
 802c5a8:	f1ba 0f00 	cmp.w	sl, #0
 802c5ac:	f000 80f5 	beq.w	802c79a <__ssvfscanf_r+0x12d6>
 802c5b0:	05b1      	lsls	r1, r6, #22
 802c5b2:	bf58      	it	pl
 802c5b4:	6939      	ldrpl	r1, [r7, #16]
 802c5b6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 802c5ba:	bf5c      	itt	pl
 802c5bc:	ebaa 0101 	subpl.w	r1, sl, r1
 802c5c0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 802c5c4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 802c5c8:	e767      	b.n	802c49a <__ssvfscanf_r+0xfd6>
 802c5ca:	0531      	lsls	r1, r6, #20
 802c5cc:	d5e5      	bpl.n	802c59a <__ssvfscanf_r+0x10d6>
 802c5ce:	e74d      	b.n	802c46c <__ssvfscanf_r+0xfa8>
 802c5d0:	f892 c000 	ldrb.w	ip, [r2]
 802c5d4:	4584      	cmp	ip, r0
 802c5d6:	d19a      	bne.n	802c50e <__ssvfscanf_r+0x104a>
 802c5d8:	05b1      	lsls	r1, r6, #22
 802c5da:	d598      	bpl.n	802c50e <__ssvfscanf_r+0x104a>
 802c5dc:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 802c5e0:	f8c7 a010 	str.w	sl, [r7, #16]
 802c5e4:	e760      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c5e6:	f04f 0b03 	mov.w	fp, #3
 802c5ea:	e75d      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c5ec:	f04f 0b02 	mov.w	fp, #2
 802c5f0:	e75a      	b.n	802c4a8 <__ssvfscanf_r+0xfe4>
 802c5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c5f4:	4621      	mov	r1, r4
 802c5f6:	e9c7 2300 	strd	r2, r3, [r7]
 802c5fa:	f7fc fdae 	bl	802915a <__ssrefill_r>
 802c5fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 802c602:	2800      	cmp	r0, #0
 802c604:	f43f af2c 	beq.w	802c460 <__ssvfscanf_r+0xf9c>
 802c608:	e781      	b.n	802c50e <__ssvfscanf_r+0x104a>
 802c60a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 802c60e:	2b06      	cmp	r3, #6
 802c610:	d827      	bhi.n	802c662 <__ssvfscanf_r+0x119e>
 802c612:	f1b8 0f02 	cmp.w	r8, #2
 802c616:	d834      	bhi.n	802c682 <__ssvfscanf_r+0x11be>
 802c618:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c61c:	45a9      	cmp	r9, r5
 802c61e:	f67f a847 	bls.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802c622:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c628:	4622      	mov	r2, r4
 802c62a:	f7fc fd5b 	bl	80290e4 <_sungetc_r>
 802c62e:	e7f5      	b.n	802c61c <__ssvfscanf_r+0x1158>
 802c630:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 802c634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802c638:	4622      	mov	r2, r4
 802c63a:	f7fc fd53 	bl	80290e4 <_sungetc_r>
 802c63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c640:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 802c644:	fa5f fb8b 	uxtb.w	fp, fp
 802c648:	f1bb 0f02 	cmp.w	fp, #2
 802c64c:	d1f0      	bne.n	802c630 <__ssvfscanf_r+0x116c>
 802c64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c650:	f1a8 0803 	sub.w	r8, r8, #3
 802c654:	fa5f f888 	uxtb.w	r8, r8
 802c658:	eba3 0308 	sub.w	r3, r3, r8
 802c65c:	eba9 0908 	sub.w	r9, r9, r8
 802c660:	633b      	str	r3, [r7, #48]	@ 0x30
 802c662:	05f3      	lsls	r3, r6, #23
 802c664:	d52d      	bpl.n	802c6c2 <__ssvfscanf_r+0x11fe>
 802c666:	0570      	lsls	r0, r6, #21
 802c668:	d50e      	bpl.n	802c688 <__ssvfscanf_r+0x11c4>
 802c66a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 802c66e:	45a9      	cmp	r9, r5
 802c670:	f67f a81e 	bls.w	802b6b0 <__ssvfscanf_r+0x1ec>
 802c674:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 802c678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c67a:	4622      	mov	r2, r4
 802c67c:	f7fc fd32 	bl	80290e4 <_sungetc_r>
 802c680:	e7f5      	b.n	802c66e <__ssvfscanf_r+0x11aa>
 802c682:	46c3      	mov	fp, r8
 802c684:	464b      	mov	r3, r9
 802c686:	e7db      	b.n	802c640 <__ssvfscanf_r+0x117c>
 802c688:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 802c68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c68e:	2965      	cmp	r1, #101	@ 0x65
 802c690:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
 802c694:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 802c698:	d00c      	beq.n	802c6b4 <__ssvfscanf_r+0x11f0>
 802c69a:	2945      	cmp	r1, #69	@ 0x45
 802c69c:	d00a      	beq.n	802c6b4 <__ssvfscanf_r+0x11f0>
 802c69e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c6a0:	4622      	mov	r2, r4
 802c6a2:	f7fc fd1f 	bl	80290e4 <_sungetc_r>
 802c6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c6a8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 802c6ac:	f1a9 0802 	sub.w	r8, r9, #2
 802c6b0:	f1a3 0b02 	sub.w	fp, r3, #2
 802c6b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c6b6:	4622      	mov	r2, r4
 802c6b8:	f7fc fd14 	bl	80290e4 <_sungetc_r>
 802c6bc:	46c1      	mov	r9, r8
 802c6be:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 802c6c2:	f016 0210 	ands.w	r2, r6, #16
 802c6c6:	f47e af18 	bne.w	802b4fa <__ssvfscanf_r+0x36>
 802c6ca:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 802c6ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802c6d2:	f889 2000 	strb.w	r2, [r9]
 802c6d6:	d119      	bne.n	802c70c <__ssvfscanf_r+0x1248>
 802c6d8:	693b      	ldr	r3, [r7, #16]
 802c6da:	4553      	cmp	r3, sl
 802c6dc:	eba3 020a 	sub.w	r2, r3, sl
 802c6e0:	d121      	bne.n	802c726 <__ssvfscanf_r+0x1262>
 802c6e2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 802c6e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c6e8:	2200      	movs	r2, #0
 802c6ea:	f001 fd41 	bl	802e170 <_strtod_r>
 802c6ee:	07f1      	lsls	r1, r6, #31
 802c6f0:	ec59 8b10 	vmov	r8, r9, d0
 802c6f4:	f105 0a04 	add.w	sl, r5, #4
 802c6f8:	d520      	bpl.n	802c73c <__ssvfscanf_r+0x1278>
 802c6fa:	682b      	ldr	r3, [r5, #0]
 802c6fc:	ed83 0b00 	vstr	d0, [r3]
 802c700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c702:	3301      	adds	r3, #1
 802c704:	627b      	str	r3, [r7, #36]	@ 0x24
 802c706:	4655      	mov	r5, sl
 802c708:	f7fe bef7 	b.w	802b4fa <__ssvfscanf_r+0x36>
 802c70c:	68fb      	ldr	r3, [r7, #12]
 802c70e:	2b00      	cmp	r3, #0
 802c710:	d0e7      	beq.n	802c6e2 <__ssvfscanf_r+0x121e>
 802c712:	68b9      	ldr	r1, [r7, #8]
 802c714:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802c716:	230a      	movs	r3, #10
 802c718:	3101      	adds	r1, #1
 802c71a:	f7f8 fe9d 	bl	8025458 <_strtol_r>
 802c71e:	68fb      	ldr	r3, [r7, #12]
 802c720:	f8d7 9008 	ldr.w	r9, [r7, #8]
 802c724:	1ac2      	subs	r2, r0, r3
 802c726:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 802c72a:	4599      	cmp	r9, r3
 802c72c:	bf28      	it	cs
 802c72e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 802c732:	491b      	ldr	r1, [pc, #108]	@ (802c7a0 <__ssvfscanf_r+0x12dc>)
 802c734:	4648      	mov	r0, r9
 802c736:	f7f8 ff49 	bl	80255cc <sprintf>
 802c73a:	e7d2      	b.n	802c6e2 <__ssvfscanf_r+0x121e>
 802c73c:	07b2      	lsls	r2, r6, #30
 802c73e:	682d      	ldr	r5, [r5, #0]
 802c740:	d502      	bpl.n	802c748 <__ssvfscanf_r+0x1284>
 802c742:	ed85 0b00 	vstr	d0, [r5]
 802c746:	e7db      	b.n	802c700 <__ssvfscanf_r+0x123c>
 802c748:	4642      	mov	r2, r8
 802c74a:	464b      	mov	r3, r9
 802c74c:	4640      	mov	r0, r8
 802c74e:	4649      	mov	r1, r9
 802c750:	f7d4 fa04 	bl	8000b5c <__aeabi_dcmpun>
 802c754:	b128      	cbz	r0, 802c762 <__ssvfscanf_r+0x129e>
 802c756:	4813      	ldr	r0, [pc, #76]	@ (802c7a4 <__ssvfscanf_r+0x12e0>)
 802c758:	f002 f8f6 	bl	802e948 <nanf>
 802c75c:	ed85 0a00 	vstr	s0, [r5]
 802c760:	e7ce      	b.n	802c700 <__ssvfscanf_r+0x123c>
 802c762:	4640      	mov	r0, r8
 802c764:	4649      	mov	r1, r9
 802c766:	f7d4 fa57 	bl	8000c18 <__aeabi_d2f>
 802c76a:	6028      	str	r0, [r5, #0]
 802c76c:	e7c8      	b.n	802c700 <__ssvfscanf_r+0x123c>
 802c76e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802c772:	6818      	ldr	r0, [r3, #0]
 802c774:	f7fb fd3a 	bl	80281ec <free>
 802c778:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802c77c:	3401      	adds	r4, #1
 802c77e:	601e      	str	r6, [r3, #0]
 802c780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c782:	681d      	ldr	r5, [r3, #0]
 802c784:	88db      	ldrh	r3, [r3, #6]
 802c786:	42a3      	cmp	r3, r4
 802c788:	dcf1      	bgt.n	802c76e <__ssvfscanf_r+0x12aa>
 802c78a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802c78e:	627b      	str	r3, [r7, #36]	@ 0x24
 802c790:	f7ff b85c 	b.w	802b84c <__ssvfscanf_r+0x388>
 802c794:	2400      	movs	r4, #0
 802c796:	4626      	mov	r6, r4
 802c798:	e7f2      	b.n	802c780 <__ssvfscanf_r+0x12bc>
 802c79a:	f04f 0a00 	mov.w	sl, #0
 802c79e:	e6bb      	b.n	802c518 <__ssvfscanf_r+0x1054>
 802c7a0:	08034c7a 	.word	0x08034c7a
 802c7a4:	080346e3 	.word	0x080346e3

0802c7a8 <_putc_r>:
 802c7a8:	b570      	push	{r4, r5, r6, lr}
 802c7aa:	460d      	mov	r5, r1
 802c7ac:	4614      	mov	r4, r2
 802c7ae:	4606      	mov	r6, r0
 802c7b0:	b118      	cbz	r0, 802c7ba <_putc_r+0x12>
 802c7b2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802c7b4:	b90b      	cbnz	r3, 802c7ba <_putc_r+0x12>
 802c7b6:	f7f9 f825 	bl	8025804 <__sinit>
 802c7ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c7bc:	07d8      	lsls	r0, r3, #31
 802c7be:	d405      	bmi.n	802c7cc <_putc_r+0x24>
 802c7c0:	89a3      	ldrh	r3, [r4, #12]
 802c7c2:	0599      	lsls	r1, r3, #22
 802c7c4:	d402      	bmi.n	802c7cc <_putc_r+0x24>
 802c7c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c7c8:	f7fa fcfb 	bl	80271c2 <__retarget_lock_acquire_recursive>
 802c7cc:	68a3      	ldr	r3, [r4, #8]
 802c7ce:	3b01      	subs	r3, #1
 802c7d0:	2b00      	cmp	r3, #0
 802c7d2:	60a3      	str	r3, [r4, #8]
 802c7d4:	da05      	bge.n	802c7e2 <_putc_r+0x3a>
 802c7d6:	69a2      	ldr	r2, [r4, #24]
 802c7d8:	4293      	cmp	r3, r2
 802c7da:	db12      	blt.n	802c802 <_putc_r+0x5a>
 802c7dc:	b2eb      	uxtb	r3, r5
 802c7de:	2b0a      	cmp	r3, #10
 802c7e0:	d00f      	beq.n	802c802 <_putc_r+0x5a>
 802c7e2:	6823      	ldr	r3, [r4, #0]
 802c7e4:	1c5a      	adds	r2, r3, #1
 802c7e6:	6022      	str	r2, [r4, #0]
 802c7e8:	701d      	strb	r5, [r3, #0]
 802c7ea:	b2ed      	uxtb	r5, r5
 802c7ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802c7ee:	07da      	lsls	r2, r3, #31
 802c7f0:	d405      	bmi.n	802c7fe <_putc_r+0x56>
 802c7f2:	89a3      	ldrh	r3, [r4, #12]
 802c7f4:	059b      	lsls	r3, r3, #22
 802c7f6:	d402      	bmi.n	802c7fe <_putc_r+0x56>
 802c7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802c7fa:	f7fa fce4 	bl	80271c6 <__retarget_lock_release_recursive>
 802c7fe:	4628      	mov	r0, r5
 802c800:	bd70      	pop	{r4, r5, r6, pc}
 802c802:	4629      	mov	r1, r5
 802c804:	4622      	mov	r2, r4
 802c806:	4630      	mov	r0, r6
 802c808:	f001 fd79 	bl	802e2fe <__swbuf_r>
 802c80c:	4605      	mov	r5, r0
 802c80e:	e7ed      	b.n	802c7ec <_putc_r+0x44>

0802c810 <__malloc_lock>:
 802c810:	4801      	ldr	r0, [pc, #4]	@ (802c818 <__malloc_lock+0x8>)
 802c812:	f7fa bcd6 	b.w	80271c2 <__retarget_lock_acquire_recursive>
 802c816:	bf00      	nop
 802c818:	200182de 	.word	0x200182de

0802c81c <__malloc_unlock>:
 802c81c:	4801      	ldr	r0, [pc, #4]	@ (802c824 <__malloc_unlock+0x8>)
 802c81e:	f7fa bcd2 	b.w	80271c6 <__retarget_lock_release_recursive>
 802c822:	bf00      	nop
 802c824:	200182de 	.word	0x200182de

0802c828 <_Balloc>:
 802c828:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802c82a:	b570      	push	{r4, r5, r6, lr}
 802c82c:	4605      	mov	r5, r0
 802c82e:	460c      	mov	r4, r1
 802c830:	b17b      	cbz	r3, 802c852 <_Balloc+0x2a>
 802c832:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 802c834:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 802c838:	b9a0      	cbnz	r0, 802c864 <_Balloc+0x3c>
 802c83a:	2101      	movs	r1, #1
 802c83c:	fa01 f604 	lsl.w	r6, r1, r4
 802c840:	1d72      	adds	r2, r6, #5
 802c842:	0092      	lsls	r2, r2, #2
 802c844:	4628      	mov	r0, r5
 802c846:	f002 f885 	bl	802e954 <_calloc_r>
 802c84a:	b148      	cbz	r0, 802c860 <_Balloc+0x38>
 802c84c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 802c850:	e00b      	b.n	802c86a <_Balloc+0x42>
 802c852:	2221      	movs	r2, #33	@ 0x21
 802c854:	2104      	movs	r1, #4
 802c856:	f002 f87d 	bl	802e954 <_calloc_r>
 802c85a:	6468      	str	r0, [r5, #68]	@ 0x44
 802c85c:	2800      	cmp	r0, #0
 802c85e:	d1e8      	bne.n	802c832 <_Balloc+0xa>
 802c860:	2000      	movs	r0, #0
 802c862:	bd70      	pop	{r4, r5, r6, pc}
 802c864:	6802      	ldr	r2, [r0, #0]
 802c866:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 802c86a:	2300      	movs	r3, #0
 802c86c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c870:	e7f7      	b.n	802c862 <_Balloc+0x3a>

0802c872 <_Bfree>:
 802c872:	b131      	cbz	r1, 802c882 <_Bfree+0x10>
 802c874:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 802c876:	684a      	ldr	r2, [r1, #4]
 802c878:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802c87c:	6008      	str	r0, [r1, #0]
 802c87e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802c882:	4770      	bx	lr

0802c884 <__multadd>:
 802c884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c888:	690d      	ldr	r5, [r1, #16]
 802c88a:	4607      	mov	r7, r0
 802c88c:	460c      	mov	r4, r1
 802c88e:	461e      	mov	r6, r3
 802c890:	f101 0c14 	add.w	ip, r1, #20
 802c894:	2000      	movs	r0, #0
 802c896:	f8dc 3000 	ldr.w	r3, [ip]
 802c89a:	b299      	uxth	r1, r3
 802c89c:	fb02 6101 	mla	r1, r2, r1, r6
 802c8a0:	0c1e      	lsrs	r6, r3, #16
 802c8a2:	0c0b      	lsrs	r3, r1, #16
 802c8a4:	fb02 3306 	mla	r3, r2, r6, r3
 802c8a8:	b289      	uxth	r1, r1
 802c8aa:	3001      	adds	r0, #1
 802c8ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802c8b0:	4285      	cmp	r5, r0
 802c8b2:	f84c 1b04 	str.w	r1, [ip], #4
 802c8b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802c8ba:	dcec      	bgt.n	802c896 <__multadd+0x12>
 802c8bc:	b30e      	cbz	r6, 802c902 <__multadd+0x7e>
 802c8be:	68a3      	ldr	r3, [r4, #8]
 802c8c0:	42ab      	cmp	r3, r5
 802c8c2:	dc19      	bgt.n	802c8f8 <__multadd+0x74>
 802c8c4:	6861      	ldr	r1, [r4, #4]
 802c8c6:	4638      	mov	r0, r7
 802c8c8:	3101      	adds	r1, #1
 802c8ca:	f7ff ffad 	bl	802c828 <_Balloc>
 802c8ce:	4680      	mov	r8, r0
 802c8d0:	b928      	cbnz	r0, 802c8de <__multadd+0x5a>
 802c8d2:	4602      	mov	r2, r0
 802c8d4:	4b0c      	ldr	r3, [pc, #48]	@ (802c908 <__multadd+0x84>)
 802c8d6:	480d      	ldr	r0, [pc, #52]	@ (802c90c <__multadd+0x88>)
 802c8d8:	21ba      	movs	r1, #186	@ 0xba
 802c8da:	f7f6 fce5 	bl	80232a8 <__assert_func>
 802c8de:	6922      	ldr	r2, [r4, #16]
 802c8e0:	3202      	adds	r2, #2
 802c8e2:	f104 010c 	add.w	r1, r4, #12
 802c8e6:	0092      	lsls	r2, r2, #2
 802c8e8:	300c      	adds	r0, #12
 802c8ea:	f7fa fc6d 	bl	80271c8 <memcpy>
 802c8ee:	4621      	mov	r1, r4
 802c8f0:	4638      	mov	r0, r7
 802c8f2:	f7ff ffbe 	bl	802c872 <_Bfree>
 802c8f6:	4644      	mov	r4, r8
 802c8f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c8fc:	3501      	adds	r5, #1
 802c8fe:	615e      	str	r6, [r3, #20]
 802c900:	6125      	str	r5, [r4, #16]
 802c902:	4620      	mov	r0, r4
 802c904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c908:	08034bae 	.word	0x08034bae
 802c90c:	08034ca2 	.word	0x08034ca2

0802c910 <__s2b>:
 802c910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c914:	460c      	mov	r4, r1
 802c916:	4615      	mov	r5, r2
 802c918:	461f      	mov	r7, r3
 802c91a:	2209      	movs	r2, #9
 802c91c:	3308      	adds	r3, #8
 802c91e:	4606      	mov	r6, r0
 802c920:	fb93 f3f2 	sdiv	r3, r3, r2
 802c924:	2100      	movs	r1, #0
 802c926:	2201      	movs	r2, #1
 802c928:	429a      	cmp	r2, r3
 802c92a:	db09      	blt.n	802c940 <__s2b+0x30>
 802c92c:	4630      	mov	r0, r6
 802c92e:	f7ff ff7b 	bl	802c828 <_Balloc>
 802c932:	b940      	cbnz	r0, 802c946 <__s2b+0x36>
 802c934:	4602      	mov	r2, r0
 802c936:	4b19      	ldr	r3, [pc, #100]	@ (802c99c <__s2b+0x8c>)
 802c938:	4819      	ldr	r0, [pc, #100]	@ (802c9a0 <__s2b+0x90>)
 802c93a:	21d3      	movs	r1, #211	@ 0xd3
 802c93c:	f7f6 fcb4 	bl	80232a8 <__assert_func>
 802c940:	0052      	lsls	r2, r2, #1
 802c942:	3101      	adds	r1, #1
 802c944:	e7f0      	b.n	802c928 <__s2b+0x18>
 802c946:	9b08      	ldr	r3, [sp, #32]
 802c948:	6143      	str	r3, [r0, #20]
 802c94a:	2d09      	cmp	r5, #9
 802c94c:	f04f 0301 	mov.w	r3, #1
 802c950:	6103      	str	r3, [r0, #16]
 802c952:	dd16      	ble.n	802c982 <__s2b+0x72>
 802c954:	f104 0909 	add.w	r9, r4, #9
 802c958:	46c8      	mov	r8, r9
 802c95a:	442c      	add	r4, r5
 802c95c:	f818 3b01 	ldrb.w	r3, [r8], #1
 802c960:	4601      	mov	r1, r0
 802c962:	3b30      	subs	r3, #48	@ 0x30
 802c964:	220a      	movs	r2, #10
 802c966:	4630      	mov	r0, r6
 802c968:	f7ff ff8c 	bl	802c884 <__multadd>
 802c96c:	45a0      	cmp	r8, r4
 802c96e:	d1f5      	bne.n	802c95c <__s2b+0x4c>
 802c970:	f1a5 0408 	sub.w	r4, r5, #8
 802c974:	444c      	add	r4, r9
 802c976:	1b2d      	subs	r5, r5, r4
 802c978:	1963      	adds	r3, r4, r5
 802c97a:	42bb      	cmp	r3, r7
 802c97c:	db04      	blt.n	802c988 <__s2b+0x78>
 802c97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c982:	340a      	adds	r4, #10
 802c984:	2509      	movs	r5, #9
 802c986:	e7f6      	b.n	802c976 <__s2b+0x66>
 802c988:	f814 3b01 	ldrb.w	r3, [r4], #1
 802c98c:	4601      	mov	r1, r0
 802c98e:	3b30      	subs	r3, #48	@ 0x30
 802c990:	220a      	movs	r2, #10
 802c992:	4630      	mov	r0, r6
 802c994:	f7ff ff76 	bl	802c884 <__multadd>
 802c998:	e7ee      	b.n	802c978 <__s2b+0x68>
 802c99a:	bf00      	nop
 802c99c:	08034bae 	.word	0x08034bae
 802c9a0:	08034ca2 	.word	0x08034ca2

0802c9a4 <__hi0bits>:
 802c9a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802c9a8:	4603      	mov	r3, r0
 802c9aa:	bf36      	itet	cc
 802c9ac:	0403      	lslcc	r3, r0, #16
 802c9ae:	2000      	movcs	r0, #0
 802c9b0:	2010      	movcc	r0, #16
 802c9b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802c9b6:	bf3c      	itt	cc
 802c9b8:	021b      	lslcc	r3, r3, #8
 802c9ba:	3008      	addcc	r0, #8
 802c9bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802c9c0:	bf3c      	itt	cc
 802c9c2:	011b      	lslcc	r3, r3, #4
 802c9c4:	3004      	addcc	r0, #4
 802c9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802c9ca:	bf3c      	itt	cc
 802c9cc:	009b      	lslcc	r3, r3, #2
 802c9ce:	3002      	addcc	r0, #2
 802c9d0:	2b00      	cmp	r3, #0
 802c9d2:	db05      	blt.n	802c9e0 <__hi0bits+0x3c>
 802c9d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802c9d8:	f100 0001 	add.w	r0, r0, #1
 802c9dc:	bf08      	it	eq
 802c9de:	2020      	moveq	r0, #32
 802c9e0:	4770      	bx	lr

0802c9e2 <__lo0bits>:
 802c9e2:	6803      	ldr	r3, [r0, #0]
 802c9e4:	4602      	mov	r2, r0
 802c9e6:	f013 0007 	ands.w	r0, r3, #7
 802c9ea:	d00b      	beq.n	802ca04 <__lo0bits+0x22>
 802c9ec:	07d9      	lsls	r1, r3, #31
 802c9ee:	d421      	bmi.n	802ca34 <__lo0bits+0x52>
 802c9f0:	0798      	lsls	r0, r3, #30
 802c9f2:	bf49      	itett	mi
 802c9f4:	085b      	lsrmi	r3, r3, #1
 802c9f6:	089b      	lsrpl	r3, r3, #2
 802c9f8:	2001      	movmi	r0, #1
 802c9fa:	6013      	strmi	r3, [r2, #0]
 802c9fc:	bf5c      	itt	pl
 802c9fe:	6013      	strpl	r3, [r2, #0]
 802ca00:	2002      	movpl	r0, #2
 802ca02:	4770      	bx	lr
 802ca04:	b299      	uxth	r1, r3
 802ca06:	b909      	cbnz	r1, 802ca0c <__lo0bits+0x2a>
 802ca08:	0c1b      	lsrs	r3, r3, #16
 802ca0a:	2010      	movs	r0, #16
 802ca0c:	b2d9      	uxtb	r1, r3
 802ca0e:	b909      	cbnz	r1, 802ca14 <__lo0bits+0x32>
 802ca10:	3008      	adds	r0, #8
 802ca12:	0a1b      	lsrs	r3, r3, #8
 802ca14:	0719      	lsls	r1, r3, #28
 802ca16:	bf04      	itt	eq
 802ca18:	091b      	lsreq	r3, r3, #4
 802ca1a:	3004      	addeq	r0, #4
 802ca1c:	0799      	lsls	r1, r3, #30
 802ca1e:	bf04      	itt	eq
 802ca20:	089b      	lsreq	r3, r3, #2
 802ca22:	3002      	addeq	r0, #2
 802ca24:	07d9      	lsls	r1, r3, #31
 802ca26:	d403      	bmi.n	802ca30 <__lo0bits+0x4e>
 802ca28:	085b      	lsrs	r3, r3, #1
 802ca2a:	f100 0001 	add.w	r0, r0, #1
 802ca2e:	d003      	beq.n	802ca38 <__lo0bits+0x56>
 802ca30:	6013      	str	r3, [r2, #0]
 802ca32:	4770      	bx	lr
 802ca34:	2000      	movs	r0, #0
 802ca36:	4770      	bx	lr
 802ca38:	2020      	movs	r0, #32
 802ca3a:	4770      	bx	lr

0802ca3c <__i2b>:
 802ca3c:	b510      	push	{r4, lr}
 802ca3e:	460c      	mov	r4, r1
 802ca40:	2101      	movs	r1, #1
 802ca42:	f7ff fef1 	bl	802c828 <_Balloc>
 802ca46:	4602      	mov	r2, r0
 802ca48:	b928      	cbnz	r0, 802ca56 <__i2b+0x1a>
 802ca4a:	4b05      	ldr	r3, [pc, #20]	@ (802ca60 <__i2b+0x24>)
 802ca4c:	4805      	ldr	r0, [pc, #20]	@ (802ca64 <__i2b+0x28>)
 802ca4e:	f240 1145 	movw	r1, #325	@ 0x145
 802ca52:	f7f6 fc29 	bl	80232a8 <__assert_func>
 802ca56:	2301      	movs	r3, #1
 802ca58:	6144      	str	r4, [r0, #20]
 802ca5a:	6103      	str	r3, [r0, #16]
 802ca5c:	bd10      	pop	{r4, pc}
 802ca5e:	bf00      	nop
 802ca60:	08034bae 	.word	0x08034bae
 802ca64:	08034ca2 	.word	0x08034ca2

0802ca68 <__multiply>:
 802ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ca6c:	4614      	mov	r4, r2
 802ca6e:	690a      	ldr	r2, [r1, #16]
 802ca70:	6923      	ldr	r3, [r4, #16]
 802ca72:	429a      	cmp	r2, r3
 802ca74:	bfa8      	it	ge
 802ca76:	4623      	movge	r3, r4
 802ca78:	460f      	mov	r7, r1
 802ca7a:	bfa4      	itt	ge
 802ca7c:	460c      	movge	r4, r1
 802ca7e:	461f      	movge	r7, r3
 802ca80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802ca84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802ca88:	68a3      	ldr	r3, [r4, #8]
 802ca8a:	6861      	ldr	r1, [r4, #4]
 802ca8c:	eb0a 0609 	add.w	r6, sl, r9
 802ca90:	42b3      	cmp	r3, r6
 802ca92:	b085      	sub	sp, #20
 802ca94:	bfb8      	it	lt
 802ca96:	3101      	addlt	r1, #1
 802ca98:	f7ff fec6 	bl	802c828 <_Balloc>
 802ca9c:	b930      	cbnz	r0, 802caac <__multiply+0x44>
 802ca9e:	4602      	mov	r2, r0
 802caa0:	4b44      	ldr	r3, [pc, #272]	@ (802cbb4 <__multiply+0x14c>)
 802caa2:	4845      	ldr	r0, [pc, #276]	@ (802cbb8 <__multiply+0x150>)
 802caa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802caa8:	f7f6 fbfe 	bl	80232a8 <__assert_func>
 802caac:	f100 0514 	add.w	r5, r0, #20
 802cab0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802cab4:	462b      	mov	r3, r5
 802cab6:	2200      	movs	r2, #0
 802cab8:	4543      	cmp	r3, r8
 802caba:	d321      	bcc.n	802cb00 <__multiply+0x98>
 802cabc:	f107 0114 	add.w	r1, r7, #20
 802cac0:	f104 0214 	add.w	r2, r4, #20
 802cac4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802cac8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802cacc:	9302      	str	r3, [sp, #8]
 802cace:	1b13      	subs	r3, r2, r4
 802cad0:	3b15      	subs	r3, #21
 802cad2:	f023 0303 	bic.w	r3, r3, #3
 802cad6:	3304      	adds	r3, #4
 802cad8:	f104 0715 	add.w	r7, r4, #21
 802cadc:	42ba      	cmp	r2, r7
 802cade:	bf38      	it	cc
 802cae0:	2304      	movcc	r3, #4
 802cae2:	9301      	str	r3, [sp, #4]
 802cae4:	9b02      	ldr	r3, [sp, #8]
 802cae6:	9103      	str	r1, [sp, #12]
 802cae8:	428b      	cmp	r3, r1
 802caea:	d80c      	bhi.n	802cb06 <__multiply+0x9e>
 802caec:	2e00      	cmp	r6, #0
 802caee:	dd03      	ble.n	802caf8 <__multiply+0x90>
 802caf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802caf4:	2b00      	cmp	r3, #0
 802caf6:	d05b      	beq.n	802cbb0 <__multiply+0x148>
 802caf8:	6106      	str	r6, [r0, #16]
 802cafa:	b005      	add	sp, #20
 802cafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cb00:	f843 2b04 	str.w	r2, [r3], #4
 802cb04:	e7d8      	b.n	802cab8 <__multiply+0x50>
 802cb06:	f8b1 a000 	ldrh.w	sl, [r1]
 802cb0a:	f1ba 0f00 	cmp.w	sl, #0
 802cb0e:	d024      	beq.n	802cb5a <__multiply+0xf2>
 802cb10:	f104 0e14 	add.w	lr, r4, #20
 802cb14:	46a9      	mov	r9, r5
 802cb16:	f04f 0c00 	mov.w	ip, #0
 802cb1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802cb1e:	f8d9 3000 	ldr.w	r3, [r9]
 802cb22:	fa1f fb87 	uxth.w	fp, r7
 802cb26:	b29b      	uxth	r3, r3
 802cb28:	fb0a 330b 	mla	r3, sl, fp, r3
 802cb2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802cb30:	f8d9 7000 	ldr.w	r7, [r9]
 802cb34:	4463      	add	r3, ip
 802cb36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802cb3a:	fb0a c70b 	mla	r7, sl, fp, ip
 802cb3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802cb42:	b29b      	uxth	r3, r3
 802cb44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802cb48:	4572      	cmp	r2, lr
 802cb4a:	f849 3b04 	str.w	r3, [r9], #4
 802cb4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802cb52:	d8e2      	bhi.n	802cb1a <__multiply+0xb2>
 802cb54:	9b01      	ldr	r3, [sp, #4]
 802cb56:	f845 c003 	str.w	ip, [r5, r3]
 802cb5a:	9b03      	ldr	r3, [sp, #12]
 802cb5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802cb60:	3104      	adds	r1, #4
 802cb62:	f1b9 0f00 	cmp.w	r9, #0
 802cb66:	d021      	beq.n	802cbac <__multiply+0x144>
 802cb68:	682b      	ldr	r3, [r5, #0]
 802cb6a:	f104 0c14 	add.w	ip, r4, #20
 802cb6e:	46ae      	mov	lr, r5
 802cb70:	f04f 0a00 	mov.w	sl, #0
 802cb74:	f8bc b000 	ldrh.w	fp, [ip]
 802cb78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802cb7c:	fb09 770b 	mla	r7, r9, fp, r7
 802cb80:	4457      	add	r7, sl
 802cb82:	b29b      	uxth	r3, r3
 802cb84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802cb88:	f84e 3b04 	str.w	r3, [lr], #4
 802cb8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 802cb90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802cb94:	f8be 3000 	ldrh.w	r3, [lr]
 802cb98:	fb09 330a 	mla	r3, r9, sl, r3
 802cb9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802cba0:	4562      	cmp	r2, ip
 802cba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802cba6:	d8e5      	bhi.n	802cb74 <__multiply+0x10c>
 802cba8:	9f01      	ldr	r7, [sp, #4]
 802cbaa:	51eb      	str	r3, [r5, r7]
 802cbac:	3504      	adds	r5, #4
 802cbae:	e799      	b.n	802cae4 <__multiply+0x7c>
 802cbb0:	3e01      	subs	r6, #1
 802cbb2:	e79b      	b.n	802caec <__multiply+0x84>
 802cbb4:	08034bae 	.word	0x08034bae
 802cbb8:	08034ca2 	.word	0x08034ca2

0802cbbc <__pow5mult>:
 802cbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cbc0:	4615      	mov	r5, r2
 802cbc2:	f012 0203 	ands.w	r2, r2, #3
 802cbc6:	4607      	mov	r7, r0
 802cbc8:	460e      	mov	r6, r1
 802cbca:	d007      	beq.n	802cbdc <__pow5mult+0x20>
 802cbcc:	4c1a      	ldr	r4, [pc, #104]	@ (802cc38 <__pow5mult+0x7c>)
 802cbce:	3a01      	subs	r2, #1
 802cbd0:	2300      	movs	r3, #0
 802cbd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802cbd6:	f7ff fe55 	bl	802c884 <__multadd>
 802cbda:	4606      	mov	r6, r0
 802cbdc:	10ad      	asrs	r5, r5, #2
 802cbde:	d027      	beq.n	802cc30 <__pow5mult+0x74>
 802cbe0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 802cbe2:	b944      	cbnz	r4, 802cbf6 <__pow5mult+0x3a>
 802cbe4:	f240 2171 	movw	r1, #625	@ 0x271
 802cbe8:	4638      	mov	r0, r7
 802cbea:	f7ff ff27 	bl	802ca3c <__i2b>
 802cbee:	2300      	movs	r3, #0
 802cbf0:	6438      	str	r0, [r7, #64]	@ 0x40
 802cbf2:	4604      	mov	r4, r0
 802cbf4:	6003      	str	r3, [r0, #0]
 802cbf6:	f04f 0900 	mov.w	r9, #0
 802cbfa:	07eb      	lsls	r3, r5, #31
 802cbfc:	d50a      	bpl.n	802cc14 <__pow5mult+0x58>
 802cbfe:	4631      	mov	r1, r6
 802cc00:	4622      	mov	r2, r4
 802cc02:	4638      	mov	r0, r7
 802cc04:	f7ff ff30 	bl	802ca68 <__multiply>
 802cc08:	4631      	mov	r1, r6
 802cc0a:	4680      	mov	r8, r0
 802cc0c:	4638      	mov	r0, r7
 802cc0e:	f7ff fe30 	bl	802c872 <_Bfree>
 802cc12:	4646      	mov	r6, r8
 802cc14:	106d      	asrs	r5, r5, #1
 802cc16:	d00b      	beq.n	802cc30 <__pow5mult+0x74>
 802cc18:	6820      	ldr	r0, [r4, #0]
 802cc1a:	b938      	cbnz	r0, 802cc2c <__pow5mult+0x70>
 802cc1c:	4622      	mov	r2, r4
 802cc1e:	4621      	mov	r1, r4
 802cc20:	4638      	mov	r0, r7
 802cc22:	f7ff ff21 	bl	802ca68 <__multiply>
 802cc26:	6020      	str	r0, [r4, #0]
 802cc28:	f8c0 9000 	str.w	r9, [r0]
 802cc2c:	4604      	mov	r4, r0
 802cc2e:	e7e4      	b.n	802cbfa <__pow5mult+0x3e>
 802cc30:	4630      	mov	r0, r6
 802cc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cc36:	bf00      	nop
 802cc38:	08034cfc 	.word	0x08034cfc

0802cc3c <__lshift>:
 802cc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cc40:	460c      	mov	r4, r1
 802cc42:	6849      	ldr	r1, [r1, #4]
 802cc44:	6923      	ldr	r3, [r4, #16]
 802cc46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802cc4a:	68a3      	ldr	r3, [r4, #8]
 802cc4c:	4607      	mov	r7, r0
 802cc4e:	4691      	mov	r9, r2
 802cc50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802cc54:	f108 0601 	add.w	r6, r8, #1
 802cc58:	42b3      	cmp	r3, r6
 802cc5a:	db0b      	blt.n	802cc74 <__lshift+0x38>
 802cc5c:	4638      	mov	r0, r7
 802cc5e:	f7ff fde3 	bl	802c828 <_Balloc>
 802cc62:	4605      	mov	r5, r0
 802cc64:	b948      	cbnz	r0, 802cc7a <__lshift+0x3e>
 802cc66:	4602      	mov	r2, r0
 802cc68:	4b28      	ldr	r3, [pc, #160]	@ (802cd0c <__lshift+0xd0>)
 802cc6a:	4829      	ldr	r0, [pc, #164]	@ (802cd10 <__lshift+0xd4>)
 802cc6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802cc70:	f7f6 fb1a 	bl	80232a8 <__assert_func>
 802cc74:	3101      	adds	r1, #1
 802cc76:	005b      	lsls	r3, r3, #1
 802cc78:	e7ee      	b.n	802cc58 <__lshift+0x1c>
 802cc7a:	2300      	movs	r3, #0
 802cc7c:	f100 0114 	add.w	r1, r0, #20
 802cc80:	f100 0210 	add.w	r2, r0, #16
 802cc84:	4618      	mov	r0, r3
 802cc86:	4553      	cmp	r3, sl
 802cc88:	db33      	blt.n	802ccf2 <__lshift+0xb6>
 802cc8a:	6920      	ldr	r0, [r4, #16]
 802cc8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802cc90:	f104 0314 	add.w	r3, r4, #20
 802cc94:	f019 091f 	ands.w	r9, r9, #31
 802cc98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802cc9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802cca0:	d02b      	beq.n	802ccfa <__lshift+0xbe>
 802cca2:	f1c9 0e20 	rsb	lr, r9, #32
 802cca6:	468a      	mov	sl, r1
 802cca8:	2200      	movs	r2, #0
 802ccaa:	6818      	ldr	r0, [r3, #0]
 802ccac:	fa00 f009 	lsl.w	r0, r0, r9
 802ccb0:	4310      	orrs	r0, r2
 802ccb2:	f84a 0b04 	str.w	r0, [sl], #4
 802ccb6:	f853 2b04 	ldr.w	r2, [r3], #4
 802ccba:	459c      	cmp	ip, r3
 802ccbc:	fa22 f20e 	lsr.w	r2, r2, lr
 802ccc0:	d8f3      	bhi.n	802ccaa <__lshift+0x6e>
 802ccc2:	ebac 0304 	sub.w	r3, ip, r4
 802ccc6:	3b15      	subs	r3, #21
 802ccc8:	f023 0303 	bic.w	r3, r3, #3
 802cccc:	3304      	adds	r3, #4
 802ccce:	f104 0015 	add.w	r0, r4, #21
 802ccd2:	4584      	cmp	ip, r0
 802ccd4:	bf38      	it	cc
 802ccd6:	2304      	movcc	r3, #4
 802ccd8:	50ca      	str	r2, [r1, r3]
 802ccda:	b10a      	cbz	r2, 802cce0 <__lshift+0xa4>
 802ccdc:	f108 0602 	add.w	r6, r8, #2
 802cce0:	3e01      	subs	r6, #1
 802cce2:	4638      	mov	r0, r7
 802cce4:	612e      	str	r6, [r5, #16]
 802cce6:	4621      	mov	r1, r4
 802cce8:	f7ff fdc3 	bl	802c872 <_Bfree>
 802ccec:	4628      	mov	r0, r5
 802ccee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ccf2:	f842 0f04 	str.w	r0, [r2, #4]!
 802ccf6:	3301      	adds	r3, #1
 802ccf8:	e7c5      	b.n	802cc86 <__lshift+0x4a>
 802ccfa:	3904      	subs	r1, #4
 802ccfc:	f853 2b04 	ldr.w	r2, [r3], #4
 802cd00:	f841 2f04 	str.w	r2, [r1, #4]!
 802cd04:	459c      	cmp	ip, r3
 802cd06:	d8f9      	bhi.n	802ccfc <__lshift+0xc0>
 802cd08:	e7ea      	b.n	802cce0 <__lshift+0xa4>
 802cd0a:	bf00      	nop
 802cd0c:	08034bae 	.word	0x08034bae
 802cd10:	08034ca2 	.word	0x08034ca2

0802cd14 <__mcmp>:
 802cd14:	690a      	ldr	r2, [r1, #16]
 802cd16:	4603      	mov	r3, r0
 802cd18:	6900      	ldr	r0, [r0, #16]
 802cd1a:	1a80      	subs	r0, r0, r2
 802cd1c:	b530      	push	{r4, r5, lr}
 802cd1e:	d10e      	bne.n	802cd3e <__mcmp+0x2a>
 802cd20:	3314      	adds	r3, #20
 802cd22:	3114      	adds	r1, #20
 802cd24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802cd28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802cd2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802cd30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802cd34:	4295      	cmp	r5, r2
 802cd36:	d003      	beq.n	802cd40 <__mcmp+0x2c>
 802cd38:	d205      	bcs.n	802cd46 <__mcmp+0x32>
 802cd3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802cd3e:	bd30      	pop	{r4, r5, pc}
 802cd40:	42a3      	cmp	r3, r4
 802cd42:	d3f3      	bcc.n	802cd2c <__mcmp+0x18>
 802cd44:	e7fb      	b.n	802cd3e <__mcmp+0x2a>
 802cd46:	2001      	movs	r0, #1
 802cd48:	e7f9      	b.n	802cd3e <__mcmp+0x2a>
	...

0802cd4c <__mdiff>:
 802cd4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cd50:	4689      	mov	r9, r1
 802cd52:	4606      	mov	r6, r0
 802cd54:	4611      	mov	r1, r2
 802cd56:	4648      	mov	r0, r9
 802cd58:	4614      	mov	r4, r2
 802cd5a:	f7ff ffdb 	bl	802cd14 <__mcmp>
 802cd5e:	1e05      	subs	r5, r0, #0
 802cd60:	d112      	bne.n	802cd88 <__mdiff+0x3c>
 802cd62:	4629      	mov	r1, r5
 802cd64:	4630      	mov	r0, r6
 802cd66:	f7ff fd5f 	bl	802c828 <_Balloc>
 802cd6a:	4602      	mov	r2, r0
 802cd6c:	b928      	cbnz	r0, 802cd7a <__mdiff+0x2e>
 802cd6e:	4b3f      	ldr	r3, [pc, #252]	@ (802ce6c <__mdiff+0x120>)
 802cd70:	f240 2137 	movw	r1, #567	@ 0x237
 802cd74:	483e      	ldr	r0, [pc, #248]	@ (802ce70 <__mdiff+0x124>)
 802cd76:	f7f6 fa97 	bl	80232a8 <__assert_func>
 802cd7a:	2301      	movs	r3, #1
 802cd7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802cd80:	4610      	mov	r0, r2
 802cd82:	b003      	add	sp, #12
 802cd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cd88:	bfbc      	itt	lt
 802cd8a:	464b      	movlt	r3, r9
 802cd8c:	46a1      	movlt	r9, r4
 802cd8e:	4630      	mov	r0, r6
 802cd90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802cd94:	bfba      	itte	lt
 802cd96:	461c      	movlt	r4, r3
 802cd98:	2501      	movlt	r5, #1
 802cd9a:	2500      	movge	r5, #0
 802cd9c:	f7ff fd44 	bl	802c828 <_Balloc>
 802cda0:	4602      	mov	r2, r0
 802cda2:	b918      	cbnz	r0, 802cdac <__mdiff+0x60>
 802cda4:	4b31      	ldr	r3, [pc, #196]	@ (802ce6c <__mdiff+0x120>)
 802cda6:	f240 2145 	movw	r1, #581	@ 0x245
 802cdaa:	e7e3      	b.n	802cd74 <__mdiff+0x28>
 802cdac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802cdb0:	6926      	ldr	r6, [r4, #16]
 802cdb2:	60c5      	str	r5, [r0, #12]
 802cdb4:	f109 0310 	add.w	r3, r9, #16
 802cdb8:	f109 0514 	add.w	r5, r9, #20
 802cdbc:	f104 0e14 	add.w	lr, r4, #20
 802cdc0:	f100 0b14 	add.w	fp, r0, #20
 802cdc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802cdc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802cdcc:	9301      	str	r3, [sp, #4]
 802cdce:	46d9      	mov	r9, fp
 802cdd0:	f04f 0c00 	mov.w	ip, #0
 802cdd4:	9b01      	ldr	r3, [sp, #4]
 802cdd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 802cdda:	f853 af04 	ldr.w	sl, [r3, #4]!
 802cdde:	9301      	str	r3, [sp, #4]
 802cde0:	fa1f f38a 	uxth.w	r3, sl
 802cde4:	4619      	mov	r1, r3
 802cde6:	b283      	uxth	r3, r0
 802cde8:	1acb      	subs	r3, r1, r3
 802cdea:	0c00      	lsrs	r0, r0, #16
 802cdec:	4463      	add	r3, ip
 802cdee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802cdf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802cdf6:	b29b      	uxth	r3, r3
 802cdf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802cdfc:	4576      	cmp	r6, lr
 802cdfe:	f849 3b04 	str.w	r3, [r9], #4
 802ce02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802ce06:	d8e5      	bhi.n	802cdd4 <__mdiff+0x88>
 802ce08:	1b33      	subs	r3, r6, r4
 802ce0a:	3b15      	subs	r3, #21
 802ce0c:	f023 0303 	bic.w	r3, r3, #3
 802ce10:	3415      	adds	r4, #21
 802ce12:	3304      	adds	r3, #4
 802ce14:	42a6      	cmp	r6, r4
 802ce16:	bf38      	it	cc
 802ce18:	2304      	movcc	r3, #4
 802ce1a:	441d      	add	r5, r3
 802ce1c:	445b      	add	r3, fp
 802ce1e:	461e      	mov	r6, r3
 802ce20:	462c      	mov	r4, r5
 802ce22:	4544      	cmp	r4, r8
 802ce24:	d30e      	bcc.n	802ce44 <__mdiff+0xf8>
 802ce26:	f108 0103 	add.w	r1, r8, #3
 802ce2a:	1b49      	subs	r1, r1, r5
 802ce2c:	f021 0103 	bic.w	r1, r1, #3
 802ce30:	3d03      	subs	r5, #3
 802ce32:	45a8      	cmp	r8, r5
 802ce34:	bf38      	it	cc
 802ce36:	2100      	movcc	r1, #0
 802ce38:	440b      	add	r3, r1
 802ce3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802ce3e:	b191      	cbz	r1, 802ce66 <__mdiff+0x11a>
 802ce40:	6117      	str	r7, [r2, #16]
 802ce42:	e79d      	b.n	802cd80 <__mdiff+0x34>
 802ce44:	f854 1b04 	ldr.w	r1, [r4], #4
 802ce48:	46e6      	mov	lr, ip
 802ce4a:	0c08      	lsrs	r0, r1, #16
 802ce4c:	fa1c fc81 	uxtah	ip, ip, r1
 802ce50:	4471      	add	r1, lr
 802ce52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802ce56:	b289      	uxth	r1, r1
 802ce58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802ce5c:	f846 1b04 	str.w	r1, [r6], #4
 802ce60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802ce64:	e7dd      	b.n	802ce22 <__mdiff+0xd6>
 802ce66:	3f01      	subs	r7, #1
 802ce68:	e7e7      	b.n	802ce3a <__mdiff+0xee>
 802ce6a:	bf00      	nop
 802ce6c:	08034bae 	.word	0x08034bae
 802ce70:	08034ca2 	.word	0x08034ca2

0802ce74 <__ulp>:
 802ce74:	b082      	sub	sp, #8
 802ce76:	ed8d 0b00 	vstr	d0, [sp]
 802ce7a:	9a01      	ldr	r2, [sp, #4]
 802ce7c:	4b0f      	ldr	r3, [pc, #60]	@ (802cebc <__ulp+0x48>)
 802ce7e:	4013      	ands	r3, r2
 802ce80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802ce84:	2b00      	cmp	r3, #0
 802ce86:	dc08      	bgt.n	802ce9a <__ulp+0x26>
 802ce88:	425b      	negs	r3, r3
 802ce8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802ce8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 802ce92:	da04      	bge.n	802ce9e <__ulp+0x2a>
 802ce94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802ce98:	4113      	asrs	r3, r2
 802ce9a:	2200      	movs	r2, #0
 802ce9c:	e008      	b.n	802ceb0 <__ulp+0x3c>
 802ce9e:	f1a2 0314 	sub.w	r3, r2, #20
 802cea2:	2b1e      	cmp	r3, #30
 802cea4:	bfda      	itte	le
 802cea6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802ceaa:	40da      	lsrle	r2, r3
 802ceac:	2201      	movgt	r2, #1
 802ceae:	2300      	movs	r3, #0
 802ceb0:	4619      	mov	r1, r3
 802ceb2:	4610      	mov	r0, r2
 802ceb4:	ec41 0b10 	vmov	d0, r0, r1
 802ceb8:	b002      	add	sp, #8
 802ceba:	4770      	bx	lr
 802cebc:	7ff00000 	.word	0x7ff00000

0802cec0 <__b2d>:
 802cec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cec4:	6906      	ldr	r6, [r0, #16]
 802cec6:	f100 0814 	add.w	r8, r0, #20
 802ceca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802cece:	1f37      	subs	r7, r6, #4
 802ced0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802ced4:	4610      	mov	r0, r2
 802ced6:	f7ff fd65 	bl	802c9a4 <__hi0bits>
 802ceda:	f1c0 0320 	rsb	r3, r0, #32
 802cede:	280a      	cmp	r0, #10
 802cee0:	600b      	str	r3, [r1, #0]
 802cee2:	491b      	ldr	r1, [pc, #108]	@ (802cf50 <__b2d+0x90>)
 802cee4:	dc15      	bgt.n	802cf12 <__b2d+0x52>
 802cee6:	f1c0 0c0b 	rsb	ip, r0, #11
 802ceea:	fa22 f30c 	lsr.w	r3, r2, ip
 802ceee:	45b8      	cmp	r8, r7
 802cef0:	ea43 0501 	orr.w	r5, r3, r1
 802cef4:	bf34      	ite	cc
 802cef6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802cefa:	2300      	movcs	r3, #0
 802cefc:	3015      	adds	r0, #21
 802cefe:	fa02 f000 	lsl.w	r0, r2, r0
 802cf02:	fa23 f30c 	lsr.w	r3, r3, ip
 802cf06:	4303      	orrs	r3, r0
 802cf08:	461c      	mov	r4, r3
 802cf0a:	ec45 4b10 	vmov	d0, r4, r5
 802cf0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cf12:	45b8      	cmp	r8, r7
 802cf14:	bf3a      	itte	cc
 802cf16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802cf1a:	f1a6 0708 	subcc.w	r7, r6, #8
 802cf1e:	2300      	movcs	r3, #0
 802cf20:	380b      	subs	r0, #11
 802cf22:	d012      	beq.n	802cf4a <__b2d+0x8a>
 802cf24:	f1c0 0120 	rsb	r1, r0, #32
 802cf28:	fa23 f401 	lsr.w	r4, r3, r1
 802cf2c:	4082      	lsls	r2, r0
 802cf2e:	4322      	orrs	r2, r4
 802cf30:	4547      	cmp	r7, r8
 802cf32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802cf36:	bf8c      	ite	hi
 802cf38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802cf3c:	2200      	movls	r2, #0
 802cf3e:	4083      	lsls	r3, r0
 802cf40:	40ca      	lsrs	r2, r1
 802cf42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802cf46:	4313      	orrs	r3, r2
 802cf48:	e7de      	b.n	802cf08 <__b2d+0x48>
 802cf4a:	ea42 0501 	orr.w	r5, r2, r1
 802cf4e:	e7db      	b.n	802cf08 <__b2d+0x48>
 802cf50:	3ff00000 	.word	0x3ff00000

0802cf54 <__d2b>:
 802cf54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802cf58:	460f      	mov	r7, r1
 802cf5a:	2101      	movs	r1, #1
 802cf5c:	ec59 8b10 	vmov	r8, r9, d0
 802cf60:	4616      	mov	r6, r2
 802cf62:	f7ff fc61 	bl	802c828 <_Balloc>
 802cf66:	4604      	mov	r4, r0
 802cf68:	b930      	cbnz	r0, 802cf78 <__d2b+0x24>
 802cf6a:	4602      	mov	r2, r0
 802cf6c:	4b23      	ldr	r3, [pc, #140]	@ (802cffc <__d2b+0xa8>)
 802cf6e:	4824      	ldr	r0, [pc, #144]	@ (802d000 <__d2b+0xac>)
 802cf70:	f240 310f 	movw	r1, #783	@ 0x30f
 802cf74:	f7f6 f998 	bl	80232a8 <__assert_func>
 802cf78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802cf7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802cf80:	b10d      	cbz	r5, 802cf86 <__d2b+0x32>
 802cf82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802cf86:	9301      	str	r3, [sp, #4]
 802cf88:	f1b8 0300 	subs.w	r3, r8, #0
 802cf8c:	d023      	beq.n	802cfd6 <__d2b+0x82>
 802cf8e:	4668      	mov	r0, sp
 802cf90:	9300      	str	r3, [sp, #0]
 802cf92:	f7ff fd26 	bl	802c9e2 <__lo0bits>
 802cf96:	e9dd 1200 	ldrd	r1, r2, [sp]
 802cf9a:	b1d0      	cbz	r0, 802cfd2 <__d2b+0x7e>
 802cf9c:	f1c0 0320 	rsb	r3, r0, #32
 802cfa0:	fa02 f303 	lsl.w	r3, r2, r3
 802cfa4:	430b      	orrs	r3, r1
 802cfa6:	40c2      	lsrs	r2, r0
 802cfa8:	6163      	str	r3, [r4, #20]
 802cfaa:	9201      	str	r2, [sp, #4]
 802cfac:	9b01      	ldr	r3, [sp, #4]
 802cfae:	61a3      	str	r3, [r4, #24]
 802cfb0:	2b00      	cmp	r3, #0
 802cfb2:	bf0c      	ite	eq
 802cfb4:	2201      	moveq	r2, #1
 802cfb6:	2202      	movne	r2, #2
 802cfb8:	6122      	str	r2, [r4, #16]
 802cfba:	b1a5      	cbz	r5, 802cfe6 <__d2b+0x92>
 802cfbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802cfc0:	4405      	add	r5, r0
 802cfc2:	603d      	str	r5, [r7, #0]
 802cfc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802cfc8:	6030      	str	r0, [r6, #0]
 802cfca:	4620      	mov	r0, r4
 802cfcc:	b003      	add	sp, #12
 802cfce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802cfd2:	6161      	str	r1, [r4, #20]
 802cfd4:	e7ea      	b.n	802cfac <__d2b+0x58>
 802cfd6:	a801      	add	r0, sp, #4
 802cfd8:	f7ff fd03 	bl	802c9e2 <__lo0bits>
 802cfdc:	9b01      	ldr	r3, [sp, #4]
 802cfde:	6163      	str	r3, [r4, #20]
 802cfe0:	3020      	adds	r0, #32
 802cfe2:	2201      	movs	r2, #1
 802cfe4:	e7e8      	b.n	802cfb8 <__d2b+0x64>
 802cfe6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802cfea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802cfee:	6038      	str	r0, [r7, #0]
 802cff0:	6918      	ldr	r0, [r3, #16]
 802cff2:	f7ff fcd7 	bl	802c9a4 <__hi0bits>
 802cff6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802cffa:	e7e5      	b.n	802cfc8 <__d2b+0x74>
 802cffc:	08034bae 	.word	0x08034bae
 802d000:	08034ca2 	.word	0x08034ca2

0802d004 <__ratio>:
 802d004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d008:	b085      	sub	sp, #20
 802d00a:	e9cd 1000 	strd	r1, r0, [sp]
 802d00e:	a902      	add	r1, sp, #8
 802d010:	f7ff ff56 	bl	802cec0 <__b2d>
 802d014:	9800      	ldr	r0, [sp, #0]
 802d016:	a903      	add	r1, sp, #12
 802d018:	ec55 4b10 	vmov	r4, r5, d0
 802d01c:	f7ff ff50 	bl	802cec0 <__b2d>
 802d020:	9b01      	ldr	r3, [sp, #4]
 802d022:	6919      	ldr	r1, [r3, #16]
 802d024:	9b00      	ldr	r3, [sp, #0]
 802d026:	691b      	ldr	r3, [r3, #16]
 802d028:	1ac9      	subs	r1, r1, r3
 802d02a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802d02e:	1a9b      	subs	r3, r3, r2
 802d030:	ec5b ab10 	vmov	sl, fp, d0
 802d034:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 802d038:	2b00      	cmp	r3, #0
 802d03a:	bfce      	itee	gt
 802d03c:	462a      	movgt	r2, r5
 802d03e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802d042:	465a      	movle	r2, fp
 802d044:	462f      	mov	r7, r5
 802d046:	46d9      	mov	r9, fp
 802d048:	bfcc      	ite	gt
 802d04a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802d04e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802d052:	464b      	mov	r3, r9
 802d054:	4652      	mov	r2, sl
 802d056:	4620      	mov	r0, r4
 802d058:	4639      	mov	r1, r7
 802d05a:	f7d3 fc0f 	bl	800087c <__aeabi_ddiv>
 802d05e:	ec41 0b10 	vmov	d0, r0, r1
 802d062:	b005      	add	sp, #20
 802d064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802d068 <__copybits>:
 802d068:	3901      	subs	r1, #1
 802d06a:	b570      	push	{r4, r5, r6, lr}
 802d06c:	1149      	asrs	r1, r1, #5
 802d06e:	6914      	ldr	r4, [r2, #16]
 802d070:	3101      	adds	r1, #1
 802d072:	f102 0314 	add.w	r3, r2, #20
 802d076:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802d07a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802d07e:	1f05      	subs	r5, r0, #4
 802d080:	42a3      	cmp	r3, r4
 802d082:	d30c      	bcc.n	802d09e <__copybits+0x36>
 802d084:	1aa3      	subs	r3, r4, r2
 802d086:	3b11      	subs	r3, #17
 802d088:	f023 0303 	bic.w	r3, r3, #3
 802d08c:	3211      	adds	r2, #17
 802d08e:	42a2      	cmp	r2, r4
 802d090:	bf88      	it	hi
 802d092:	2300      	movhi	r3, #0
 802d094:	4418      	add	r0, r3
 802d096:	2300      	movs	r3, #0
 802d098:	4288      	cmp	r0, r1
 802d09a:	d305      	bcc.n	802d0a8 <__copybits+0x40>
 802d09c:	bd70      	pop	{r4, r5, r6, pc}
 802d09e:	f853 6b04 	ldr.w	r6, [r3], #4
 802d0a2:	f845 6f04 	str.w	r6, [r5, #4]!
 802d0a6:	e7eb      	b.n	802d080 <__copybits+0x18>
 802d0a8:	f840 3b04 	str.w	r3, [r0], #4
 802d0ac:	e7f4      	b.n	802d098 <__copybits+0x30>

0802d0ae <__any_on>:
 802d0ae:	f100 0214 	add.w	r2, r0, #20
 802d0b2:	6900      	ldr	r0, [r0, #16]
 802d0b4:	114b      	asrs	r3, r1, #5
 802d0b6:	4298      	cmp	r0, r3
 802d0b8:	b510      	push	{r4, lr}
 802d0ba:	db11      	blt.n	802d0e0 <__any_on+0x32>
 802d0bc:	dd0a      	ble.n	802d0d4 <__any_on+0x26>
 802d0be:	f011 011f 	ands.w	r1, r1, #31
 802d0c2:	d007      	beq.n	802d0d4 <__any_on+0x26>
 802d0c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802d0c8:	fa24 f001 	lsr.w	r0, r4, r1
 802d0cc:	fa00 f101 	lsl.w	r1, r0, r1
 802d0d0:	428c      	cmp	r4, r1
 802d0d2:	d10b      	bne.n	802d0ec <__any_on+0x3e>
 802d0d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802d0d8:	4293      	cmp	r3, r2
 802d0da:	d803      	bhi.n	802d0e4 <__any_on+0x36>
 802d0dc:	2000      	movs	r0, #0
 802d0de:	bd10      	pop	{r4, pc}
 802d0e0:	4603      	mov	r3, r0
 802d0e2:	e7f7      	b.n	802d0d4 <__any_on+0x26>
 802d0e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802d0e8:	2900      	cmp	r1, #0
 802d0ea:	d0f5      	beq.n	802d0d8 <__any_on+0x2a>
 802d0ec:	2001      	movs	r0, #1
 802d0ee:	e7f6      	b.n	802d0de <__any_on+0x30>

0802d0f0 <realloc>:
 802d0f0:	4b02      	ldr	r3, [pc, #8]	@ (802d0fc <realloc+0xc>)
 802d0f2:	460a      	mov	r2, r1
 802d0f4:	4601      	mov	r1, r0
 802d0f6:	6818      	ldr	r0, [r3, #0]
 802d0f8:	f000 b890 	b.w	802d21c <_realloc_r>
 802d0fc:	20000430 	.word	0x20000430

0802d100 <_fclose_r>:
 802d100:	b570      	push	{r4, r5, r6, lr}
 802d102:	4605      	mov	r5, r0
 802d104:	460c      	mov	r4, r1
 802d106:	b1b1      	cbz	r1, 802d136 <_fclose_r+0x36>
 802d108:	b118      	cbz	r0, 802d112 <_fclose_r+0x12>
 802d10a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802d10c:	b90b      	cbnz	r3, 802d112 <_fclose_r+0x12>
 802d10e:	f7f8 fb79 	bl	8025804 <__sinit>
 802d112:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d114:	07de      	lsls	r6, r3, #31
 802d116:	d405      	bmi.n	802d124 <_fclose_r+0x24>
 802d118:	89a3      	ldrh	r3, [r4, #12]
 802d11a:	0598      	lsls	r0, r3, #22
 802d11c:	d402      	bmi.n	802d124 <_fclose_r+0x24>
 802d11e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d120:	f7fa f84f 	bl	80271c2 <__retarget_lock_acquire_recursive>
 802d124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d128:	b943      	cbnz	r3, 802d13c <_fclose_r+0x3c>
 802d12a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d12c:	07d9      	lsls	r1, r3, #31
 802d12e:	d402      	bmi.n	802d136 <_fclose_r+0x36>
 802d130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d132:	f7fa f848 	bl	80271c6 <__retarget_lock_release_recursive>
 802d136:	2600      	movs	r6, #0
 802d138:	4630      	mov	r0, r6
 802d13a:	bd70      	pop	{r4, r5, r6, pc}
 802d13c:	4621      	mov	r1, r4
 802d13e:	4628      	mov	r0, r5
 802d140:	f7f8 f996 	bl	8025470 <__sflush_r>
 802d144:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802d146:	4606      	mov	r6, r0
 802d148:	b133      	cbz	r3, 802d158 <_fclose_r+0x58>
 802d14a:	69e1      	ldr	r1, [r4, #28]
 802d14c:	4628      	mov	r0, r5
 802d14e:	4798      	blx	r3
 802d150:	2800      	cmp	r0, #0
 802d152:	bfb8      	it	lt
 802d154:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 802d158:	89a3      	ldrh	r3, [r4, #12]
 802d15a:	061a      	lsls	r2, r3, #24
 802d15c:	d503      	bpl.n	802d166 <_fclose_r+0x66>
 802d15e:	6921      	ldr	r1, [r4, #16]
 802d160:	4628      	mov	r0, r5
 802d162:	f7fa ff33 	bl	8027fcc <_free_r>
 802d166:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802d168:	b141      	cbz	r1, 802d17c <_fclose_r+0x7c>
 802d16a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802d16e:	4299      	cmp	r1, r3
 802d170:	d002      	beq.n	802d178 <_fclose_r+0x78>
 802d172:	4628      	mov	r0, r5
 802d174:	f7fa ff2a 	bl	8027fcc <_free_r>
 802d178:	2300      	movs	r3, #0
 802d17a:	6323      	str	r3, [r4, #48]	@ 0x30
 802d17c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802d17e:	b121      	cbz	r1, 802d18a <_fclose_r+0x8a>
 802d180:	4628      	mov	r0, r5
 802d182:	f7fa ff23 	bl	8027fcc <_free_r>
 802d186:	2300      	movs	r3, #0
 802d188:	6463      	str	r3, [r4, #68]	@ 0x44
 802d18a:	f7f8 fb2f 	bl	80257ec <__sfp_lock_acquire>
 802d18e:	2300      	movs	r3, #0
 802d190:	81a3      	strh	r3, [r4, #12]
 802d192:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d194:	07db      	lsls	r3, r3, #31
 802d196:	d402      	bmi.n	802d19e <_fclose_r+0x9e>
 802d198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d19a:	f7fa f814 	bl	80271c6 <__retarget_lock_release_recursive>
 802d19e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d1a0:	f7fa f80d 	bl	80271be <__retarget_lock_close_recursive>
 802d1a4:	f7f8 fb28 	bl	80257f8 <__sfp_lock_release>
 802d1a8:	e7c6      	b.n	802d138 <_fclose_r+0x38>

0802d1aa <__sccl>:
 802d1aa:	b570      	push	{r4, r5, r6, lr}
 802d1ac:	780b      	ldrb	r3, [r1, #0]
 802d1ae:	4604      	mov	r4, r0
 802d1b0:	2b5e      	cmp	r3, #94	@ 0x5e
 802d1b2:	bf0b      	itete	eq
 802d1b4:	784b      	ldrbeq	r3, [r1, #1]
 802d1b6:	1c4a      	addne	r2, r1, #1
 802d1b8:	1c8a      	addeq	r2, r1, #2
 802d1ba:	2100      	movne	r1, #0
 802d1bc:	bf08      	it	eq
 802d1be:	2101      	moveq	r1, #1
 802d1c0:	3801      	subs	r0, #1
 802d1c2:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 802d1c6:	f800 1f01 	strb.w	r1, [r0, #1]!
 802d1ca:	42a8      	cmp	r0, r5
 802d1cc:	d1fb      	bne.n	802d1c6 <__sccl+0x1c>
 802d1ce:	b90b      	cbnz	r3, 802d1d4 <__sccl+0x2a>
 802d1d0:	1e50      	subs	r0, r2, #1
 802d1d2:	bd70      	pop	{r4, r5, r6, pc}
 802d1d4:	f081 0101 	eor.w	r1, r1, #1
 802d1d8:	54e1      	strb	r1, [r4, r3]
 802d1da:	4610      	mov	r0, r2
 802d1dc:	4602      	mov	r2, r0
 802d1de:	f812 5b01 	ldrb.w	r5, [r2], #1
 802d1e2:	2d2d      	cmp	r5, #45	@ 0x2d
 802d1e4:	d005      	beq.n	802d1f2 <__sccl+0x48>
 802d1e6:	2d5d      	cmp	r5, #93	@ 0x5d
 802d1e8:	d016      	beq.n	802d218 <__sccl+0x6e>
 802d1ea:	2d00      	cmp	r5, #0
 802d1ec:	d0f1      	beq.n	802d1d2 <__sccl+0x28>
 802d1ee:	462b      	mov	r3, r5
 802d1f0:	e7f2      	b.n	802d1d8 <__sccl+0x2e>
 802d1f2:	7846      	ldrb	r6, [r0, #1]
 802d1f4:	2e5d      	cmp	r6, #93	@ 0x5d
 802d1f6:	d0fa      	beq.n	802d1ee <__sccl+0x44>
 802d1f8:	42b3      	cmp	r3, r6
 802d1fa:	dcf8      	bgt.n	802d1ee <__sccl+0x44>
 802d1fc:	3002      	adds	r0, #2
 802d1fe:	461a      	mov	r2, r3
 802d200:	3201      	adds	r2, #1
 802d202:	4296      	cmp	r6, r2
 802d204:	54a1      	strb	r1, [r4, r2]
 802d206:	dcfb      	bgt.n	802d200 <__sccl+0x56>
 802d208:	1af2      	subs	r2, r6, r3
 802d20a:	3a01      	subs	r2, #1
 802d20c:	1c5d      	adds	r5, r3, #1
 802d20e:	42b3      	cmp	r3, r6
 802d210:	bfa8      	it	ge
 802d212:	2200      	movge	r2, #0
 802d214:	18ab      	adds	r3, r5, r2
 802d216:	e7e1      	b.n	802d1dc <__sccl+0x32>
 802d218:	4610      	mov	r0, r2
 802d21a:	e7da      	b.n	802d1d2 <__sccl+0x28>

0802d21c <_realloc_r>:
 802d21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d220:	4682      	mov	sl, r0
 802d222:	4693      	mov	fp, r2
 802d224:	460c      	mov	r4, r1
 802d226:	b929      	cbnz	r1, 802d234 <_realloc_r+0x18>
 802d228:	4611      	mov	r1, r2
 802d22a:	b003      	add	sp, #12
 802d22c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d230:	f7fa bfe4 	b.w	80281fc <_malloc_r>
 802d234:	f7ff faec 	bl	802c810 <__malloc_lock>
 802d238:	f10b 080b 	add.w	r8, fp, #11
 802d23c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 802d240:	f1b8 0f16 	cmp.w	r8, #22
 802d244:	f1a4 0908 	sub.w	r9, r4, #8
 802d248:	f025 0603 	bic.w	r6, r5, #3
 802d24c:	d908      	bls.n	802d260 <_realloc_r+0x44>
 802d24e:	f038 0807 	bics.w	r8, r8, #7
 802d252:	d507      	bpl.n	802d264 <_realloc_r+0x48>
 802d254:	230c      	movs	r3, #12
 802d256:	f8ca 3000 	str.w	r3, [sl]
 802d25a:	f04f 0b00 	mov.w	fp, #0
 802d25e:	e032      	b.n	802d2c6 <_realloc_r+0xaa>
 802d260:	f04f 0810 	mov.w	r8, #16
 802d264:	45c3      	cmp	fp, r8
 802d266:	d8f5      	bhi.n	802d254 <_realloc_r+0x38>
 802d268:	4546      	cmp	r6, r8
 802d26a:	f280 8174 	bge.w	802d556 <_realloc_r+0x33a>
 802d26e:	4b9e      	ldr	r3, [pc, #632]	@ (802d4e8 <_realloc_r+0x2cc>)
 802d270:	f8d3 c008 	ldr.w	ip, [r3, #8]
 802d274:	eb09 0106 	add.w	r1, r9, r6
 802d278:	458c      	cmp	ip, r1
 802d27a:	6848      	ldr	r0, [r1, #4]
 802d27c:	d005      	beq.n	802d28a <_realloc_r+0x6e>
 802d27e:	f020 0201 	bic.w	r2, r0, #1
 802d282:	440a      	add	r2, r1
 802d284:	6852      	ldr	r2, [r2, #4]
 802d286:	07d7      	lsls	r7, r2, #31
 802d288:	d449      	bmi.n	802d31e <_realloc_r+0x102>
 802d28a:	f020 0003 	bic.w	r0, r0, #3
 802d28e:	458c      	cmp	ip, r1
 802d290:	eb06 0700 	add.w	r7, r6, r0
 802d294:	d11b      	bne.n	802d2ce <_realloc_r+0xb2>
 802d296:	f108 0210 	add.w	r2, r8, #16
 802d29a:	42ba      	cmp	r2, r7
 802d29c:	dc41      	bgt.n	802d322 <_realloc_r+0x106>
 802d29e:	eb09 0208 	add.w	r2, r9, r8
 802d2a2:	eba7 0708 	sub.w	r7, r7, r8
 802d2a6:	f047 0701 	orr.w	r7, r7, #1
 802d2aa:	609a      	str	r2, [r3, #8]
 802d2ac:	6057      	str	r7, [r2, #4]
 802d2ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802d2b2:	f003 0301 	and.w	r3, r3, #1
 802d2b6:	ea43 0308 	orr.w	r3, r3, r8
 802d2ba:	f844 3c04 	str.w	r3, [r4, #-4]
 802d2be:	4650      	mov	r0, sl
 802d2c0:	f7ff faac 	bl	802c81c <__malloc_unlock>
 802d2c4:	46a3      	mov	fp, r4
 802d2c6:	4658      	mov	r0, fp
 802d2c8:	b003      	add	sp, #12
 802d2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d2ce:	45b8      	cmp	r8, r7
 802d2d0:	dc27      	bgt.n	802d322 <_realloc_r+0x106>
 802d2d2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 802d2d6:	60d3      	str	r3, [r2, #12]
 802d2d8:	609a      	str	r2, [r3, #8]
 802d2da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802d2de:	eba7 0008 	sub.w	r0, r7, r8
 802d2e2:	280f      	cmp	r0, #15
 802d2e4:	f003 0301 	and.w	r3, r3, #1
 802d2e8:	eb09 0207 	add.w	r2, r9, r7
 802d2ec:	f240 8135 	bls.w	802d55a <_realloc_r+0x33e>
 802d2f0:	eb09 0108 	add.w	r1, r9, r8
 802d2f4:	ea48 0303 	orr.w	r3, r8, r3
 802d2f8:	f040 0001 	orr.w	r0, r0, #1
 802d2fc:	f8c9 3004 	str.w	r3, [r9, #4]
 802d300:	6048      	str	r0, [r1, #4]
 802d302:	6853      	ldr	r3, [r2, #4]
 802d304:	f043 0301 	orr.w	r3, r3, #1
 802d308:	6053      	str	r3, [r2, #4]
 802d30a:	3108      	adds	r1, #8
 802d30c:	4650      	mov	r0, sl
 802d30e:	f7fa fe5d 	bl	8027fcc <_free_r>
 802d312:	4650      	mov	r0, sl
 802d314:	f7ff fa82 	bl	802c81c <__malloc_unlock>
 802d318:	f109 0b08 	add.w	fp, r9, #8
 802d31c:	e7d3      	b.n	802d2c6 <_realloc_r+0xaa>
 802d31e:	2000      	movs	r0, #0
 802d320:	4601      	mov	r1, r0
 802d322:	07ea      	lsls	r2, r5, #31
 802d324:	f100 80c7 	bmi.w	802d4b6 <_realloc_r+0x29a>
 802d328:	f854 5c08 	ldr.w	r5, [r4, #-8]
 802d32c:	eba9 0505 	sub.w	r5, r9, r5
 802d330:	686a      	ldr	r2, [r5, #4]
 802d332:	f022 0203 	bic.w	r2, r2, #3
 802d336:	4432      	add	r2, r6
 802d338:	9201      	str	r2, [sp, #4]
 802d33a:	2900      	cmp	r1, #0
 802d33c:	f000 8086 	beq.w	802d44c <_realloc_r+0x230>
 802d340:	458c      	cmp	ip, r1
 802d342:	eb00 0702 	add.w	r7, r0, r2
 802d346:	d149      	bne.n	802d3dc <_realloc_r+0x1c0>
 802d348:	f108 0210 	add.w	r2, r8, #16
 802d34c:	42ba      	cmp	r2, r7
 802d34e:	dc7d      	bgt.n	802d44c <_realloc_r+0x230>
 802d350:	46ab      	mov	fp, r5
 802d352:	68ea      	ldr	r2, [r5, #12]
 802d354:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 802d358:	60ca      	str	r2, [r1, #12]
 802d35a:	6091      	str	r1, [r2, #8]
 802d35c:	1f32      	subs	r2, r6, #4
 802d35e:	2a24      	cmp	r2, #36	@ 0x24
 802d360:	d836      	bhi.n	802d3d0 <_realloc_r+0x1b4>
 802d362:	2a13      	cmp	r2, #19
 802d364:	d932      	bls.n	802d3cc <_realloc_r+0x1b0>
 802d366:	6821      	ldr	r1, [r4, #0]
 802d368:	60a9      	str	r1, [r5, #8]
 802d36a:	6861      	ldr	r1, [r4, #4]
 802d36c:	60e9      	str	r1, [r5, #12]
 802d36e:	2a1b      	cmp	r2, #27
 802d370:	d81a      	bhi.n	802d3a8 <_realloc_r+0x18c>
 802d372:	3408      	adds	r4, #8
 802d374:	f105 0210 	add.w	r2, r5, #16
 802d378:	6821      	ldr	r1, [r4, #0]
 802d37a:	6011      	str	r1, [r2, #0]
 802d37c:	6861      	ldr	r1, [r4, #4]
 802d37e:	6051      	str	r1, [r2, #4]
 802d380:	68a1      	ldr	r1, [r4, #8]
 802d382:	6091      	str	r1, [r2, #8]
 802d384:	eb05 0208 	add.w	r2, r5, r8
 802d388:	eba7 0708 	sub.w	r7, r7, r8
 802d38c:	f047 0701 	orr.w	r7, r7, #1
 802d390:	609a      	str	r2, [r3, #8]
 802d392:	6057      	str	r7, [r2, #4]
 802d394:	686b      	ldr	r3, [r5, #4]
 802d396:	f003 0301 	and.w	r3, r3, #1
 802d39a:	ea43 0308 	orr.w	r3, r3, r8
 802d39e:	606b      	str	r3, [r5, #4]
 802d3a0:	4650      	mov	r0, sl
 802d3a2:	f7ff fa3b 	bl	802c81c <__malloc_unlock>
 802d3a6:	e78e      	b.n	802d2c6 <_realloc_r+0xaa>
 802d3a8:	68a1      	ldr	r1, [r4, #8]
 802d3aa:	6129      	str	r1, [r5, #16]
 802d3ac:	68e1      	ldr	r1, [r4, #12]
 802d3ae:	6169      	str	r1, [r5, #20]
 802d3b0:	2a24      	cmp	r2, #36	@ 0x24
 802d3b2:	bf01      	itttt	eq
 802d3b4:	6922      	ldreq	r2, [r4, #16]
 802d3b6:	61aa      	streq	r2, [r5, #24]
 802d3b8:	6961      	ldreq	r1, [r4, #20]
 802d3ba:	61e9      	streq	r1, [r5, #28]
 802d3bc:	bf19      	ittee	ne
 802d3be:	3410      	addne	r4, #16
 802d3c0:	f105 0218 	addne.w	r2, r5, #24
 802d3c4:	f105 0220 	addeq.w	r2, r5, #32
 802d3c8:	3418      	addeq	r4, #24
 802d3ca:	e7d5      	b.n	802d378 <_realloc_r+0x15c>
 802d3cc:	465a      	mov	r2, fp
 802d3ce:	e7d3      	b.n	802d378 <_realloc_r+0x15c>
 802d3d0:	4621      	mov	r1, r4
 802d3d2:	4658      	mov	r0, fp
 802d3d4:	f7f8 fca2 	bl	8025d1c <memmove>
 802d3d8:	4b43      	ldr	r3, [pc, #268]	@ (802d4e8 <_realloc_r+0x2cc>)
 802d3da:	e7d3      	b.n	802d384 <_realloc_r+0x168>
 802d3dc:	45b8      	cmp	r8, r7
 802d3de:	dc35      	bgt.n	802d44c <_realloc_r+0x230>
 802d3e0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 802d3e4:	4628      	mov	r0, r5
 802d3e6:	60d3      	str	r3, [r2, #12]
 802d3e8:	609a      	str	r2, [r3, #8]
 802d3ea:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802d3ee:	68eb      	ldr	r3, [r5, #12]
 802d3f0:	60d3      	str	r3, [r2, #12]
 802d3f2:	609a      	str	r2, [r3, #8]
 802d3f4:	1f32      	subs	r2, r6, #4
 802d3f6:	2a24      	cmp	r2, #36	@ 0x24
 802d3f8:	d824      	bhi.n	802d444 <_realloc_r+0x228>
 802d3fa:	2a13      	cmp	r2, #19
 802d3fc:	d908      	bls.n	802d410 <_realloc_r+0x1f4>
 802d3fe:	6823      	ldr	r3, [r4, #0]
 802d400:	60ab      	str	r3, [r5, #8]
 802d402:	6863      	ldr	r3, [r4, #4]
 802d404:	60eb      	str	r3, [r5, #12]
 802d406:	2a1b      	cmp	r2, #27
 802d408:	d80a      	bhi.n	802d420 <_realloc_r+0x204>
 802d40a:	3408      	adds	r4, #8
 802d40c:	f105 0010 	add.w	r0, r5, #16
 802d410:	6823      	ldr	r3, [r4, #0]
 802d412:	6003      	str	r3, [r0, #0]
 802d414:	6863      	ldr	r3, [r4, #4]
 802d416:	6043      	str	r3, [r0, #4]
 802d418:	68a3      	ldr	r3, [r4, #8]
 802d41a:	6083      	str	r3, [r0, #8]
 802d41c:	46a9      	mov	r9, r5
 802d41e:	e75c      	b.n	802d2da <_realloc_r+0xbe>
 802d420:	68a3      	ldr	r3, [r4, #8]
 802d422:	612b      	str	r3, [r5, #16]
 802d424:	68e3      	ldr	r3, [r4, #12]
 802d426:	616b      	str	r3, [r5, #20]
 802d428:	2a24      	cmp	r2, #36	@ 0x24
 802d42a:	bf01      	itttt	eq
 802d42c:	6923      	ldreq	r3, [r4, #16]
 802d42e:	61ab      	streq	r3, [r5, #24]
 802d430:	6963      	ldreq	r3, [r4, #20]
 802d432:	61eb      	streq	r3, [r5, #28]
 802d434:	bf19      	ittee	ne
 802d436:	3410      	addne	r4, #16
 802d438:	f105 0018 	addne.w	r0, r5, #24
 802d43c:	f105 0020 	addeq.w	r0, r5, #32
 802d440:	3418      	addeq	r4, #24
 802d442:	e7e5      	b.n	802d410 <_realloc_r+0x1f4>
 802d444:	4621      	mov	r1, r4
 802d446:	f7f8 fc69 	bl	8025d1c <memmove>
 802d44a:	e7e7      	b.n	802d41c <_realloc_r+0x200>
 802d44c:	9b01      	ldr	r3, [sp, #4]
 802d44e:	4598      	cmp	r8, r3
 802d450:	dc31      	bgt.n	802d4b6 <_realloc_r+0x29a>
 802d452:	4628      	mov	r0, r5
 802d454:	68eb      	ldr	r3, [r5, #12]
 802d456:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802d45a:	60d3      	str	r3, [r2, #12]
 802d45c:	609a      	str	r2, [r3, #8]
 802d45e:	1f32      	subs	r2, r6, #4
 802d460:	2a24      	cmp	r2, #36	@ 0x24
 802d462:	d824      	bhi.n	802d4ae <_realloc_r+0x292>
 802d464:	2a13      	cmp	r2, #19
 802d466:	d908      	bls.n	802d47a <_realloc_r+0x25e>
 802d468:	6823      	ldr	r3, [r4, #0]
 802d46a:	60ab      	str	r3, [r5, #8]
 802d46c:	6863      	ldr	r3, [r4, #4]
 802d46e:	60eb      	str	r3, [r5, #12]
 802d470:	2a1b      	cmp	r2, #27
 802d472:	d80a      	bhi.n	802d48a <_realloc_r+0x26e>
 802d474:	3408      	adds	r4, #8
 802d476:	f105 0010 	add.w	r0, r5, #16
 802d47a:	6823      	ldr	r3, [r4, #0]
 802d47c:	6003      	str	r3, [r0, #0]
 802d47e:	6863      	ldr	r3, [r4, #4]
 802d480:	6043      	str	r3, [r0, #4]
 802d482:	68a3      	ldr	r3, [r4, #8]
 802d484:	6083      	str	r3, [r0, #8]
 802d486:	9f01      	ldr	r7, [sp, #4]
 802d488:	e7c8      	b.n	802d41c <_realloc_r+0x200>
 802d48a:	68a3      	ldr	r3, [r4, #8]
 802d48c:	612b      	str	r3, [r5, #16]
 802d48e:	68e3      	ldr	r3, [r4, #12]
 802d490:	616b      	str	r3, [r5, #20]
 802d492:	2a24      	cmp	r2, #36	@ 0x24
 802d494:	bf01      	itttt	eq
 802d496:	6923      	ldreq	r3, [r4, #16]
 802d498:	61ab      	streq	r3, [r5, #24]
 802d49a:	6963      	ldreq	r3, [r4, #20]
 802d49c:	61eb      	streq	r3, [r5, #28]
 802d49e:	bf19      	ittee	ne
 802d4a0:	3410      	addne	r4, #16
 802d4a2:	f105 0018 	addne.w	r0, r5, #24
 802d4a6:	f105 0020 	addeq.w	r0, r5, #32
 802d4aa:	3418      	addeq	r4, #24
 802d4ac:	e7e5      	b.n	802d47a <_realloc_r+0x25e>
 802d4ae:	4621      	mov	r1, r4
 802d4b0:	f7f8 fc34 	bl	8025d1c <memmove>
 802d4b4:	e7e7      	b.n	802d486 <_realloc_r+0x26a>
 802d4b6:	4659      	mov	r1, fp
 802d4b8:	4650      	mov	r0, sl
 802d4ba:	f7fa fe9f 	bl	80281fc <_malloc_r>
 802d4be:	4683      	mov	fp, r0
 802d4c0:	b918      	cbnz	r0, 802d4ca <_realloc_r+0x2ae>
 802d4c2:	4650      	mov	r0, sl
 802d4c4:	f7ff f9aa 	bl	802c81c <__malloc_unlock>
 802d4c8:	e6c7      	b.n	802d25a <_realloc_r+0x3e>
 802d4ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802d4ce:	f023 0301 	bic.w	r3, r3, #1
 802d4d2:	444b      	add	r3, r9
 802d4d4:	f1a0 0208 	sub.w	r2, r0, #8
 802d4d8:	4293      	cmp	r3, r2
 802d4da:	d107      	bne.n	802d4ec <_realloc_r+0x2d0>
 802d4dc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 802d4e0:	f027 0703 	bic.w	r7, r7, #3
 802d4e4:	4437      	add	r7, r6
 802d4e6:	e6f8      	b.n	802d2da <_realloc_r+0xbe>
 802d4e8:	20000564 	.word	0x20000564
 802d4ec:	1f32      	subs	r2, r6, #4
 802d4ee:	2a24      	cmp	r2, #36	@ 0x24
 802d4f0:	d82d      	bhi.n	802d54e <_realloc_r+0x332>
 802d4f2:	2a13      	cmp	r2, #19
 802d4f4:	d928      	bls.n	802d548 <_realloc_r+0x32c>
 802d4f6:	6823      	ldr	r3, [r4, #0]
 802d4f8:	6003      	str	r3, [r0, #0]
 802d4fa:	6863      	ldr	r3, [r4, #4]
 802d4fc:	6043      	str	r3, [r0, #4]
 802d4fe:	2a1b      	cmp	r2, #27
 802d500:	d80e      	bhi.n	802d520 <_realloc_r+0x304>
 802d502:	f104 0208 	add.w	r2, r4, #8
 802d506:	f100 0308 	add.w	r3, r0, #8
 802d50a:	6811      	ldr	r1, [r2, #0]
 802d50c:	6019      	str	r1, [r3, #0]
 802d50e:	6851      	ldr	r1, [r2, #4]
 802d510:	6059      	str	r1, [r3, #4]
 802d512:	6892      	ldr	r2, [r2, #8]
 802d514:	609a      	str	r2, [r3, #8]
 802d516:	4621      	mov	r1, r4
 802d518:	4650      	mov	r0, sl
 802d51a:	f7fa fd57 	bl	8027fcc <_free_r>
 802d51e:	e73f      	b.n	802d3a0 <_realloc_r+0x184>
 802d520:	68a3      	ldr	r3, [r4, #8]
 802d522:	6083      	str	r3, [r0, #8]
 802d524:	68e3      	ldr	r3, [r4, #12]
 802d526:	60c3      	str	r3, [r0, #12]
 802d528:	2a24      	cmp	r2, #36	@ 0x24
 802d52a:	bf01      	itttt	eq
 802d52c:	6923      	ldreq	r3, [r4, #16]
 802d52e:	6103      	streq	r3, [r0, #16]
 802d530:	6961      	ldreq	r1, [r4, #20]
 802d532:	6141      	streq	r1, [r0, #20]
 802d534:	bf19      	ittee	ne
 802d536:	f104 0210 	addne.w	r2, r4, #16
 802d53a:	f100 0310 	addne.w	r3, r0, #16
 802d53e:	f104 0218 	addeq.w	r2, r4, #24
 802d542:	f100 0318 	addeq.w	r3, r0, #24
 802d546:	e7e0      	b.n	802d50a <_realloc_r+0x2ee>
 802d548:	4603      	mov	r3, r0
 802d54a:	4622      	mov	r2, r4
 802d54c:	e7dd      	b.n	802d50a <_realloc_r+0x2ee>
 802d54e:	4621      	mov	r1, r4
 802d550:	f7f8 fbe4 	bl	8025d1c <memmove>
 802d554:	e7df      	b.n	802d516 <_realloc_r+0x2fa>
 802d556:	4637      	mov	r7, r6
 802d558:	e6bf      	b.n	802d2da <_realloc_r+0xbe>
 802d55a:	431f      	orrs	r7, r3
 802d55c:	f8c9 7004 	str.w	r7, [r9, #4]
 802d560:	6853      	ldr	r3, [r2, #4]
 802d562:	f043 0301 	orr.w	r3, r3, #1
 802d566:	6053      	str	r3, [r2, #4]
 802d568:	e6d3      	b.n	802d312 <_realloc_r+0xf6>
 802d56a:	bf00      	nop

0802d56c <sulp>:
 802d56c:	b570      	push	{r4, r5, r6, lr}
 802d56e:	4604      	mov	r4, r0
 802d570:	460d      	mov	r5, r1
 802d572:	ec45 4b10 	vmov	d0, r4, r5
 802d576:	4616      	mov	r6, r2
 802d578:	f7ff fc7c 	bl	802ce74 <__ulp>
 802d57c:	ec51 0b10 	vmov	r0, r1, d0
 802d580:	b17e      	cbz	r6, 802d5a2 <sulp+0x36>
 802d582:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802d586:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802d58a:	2b00      	cmp	r3, #0
 802d58c:	dd09      	ble.n	802d5a2 <sulp+0x36>
 802d58e:	051b      	lsls	r3, r3, #20
 802d590:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 802d594:	2400      	movs	r4, #0
 802d596:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802d59a:	4622      	mov	r2, r4
 802d59c:	462b      	mov	r3, r5
 802d59e:	f7d3 f843 	bl	8000628 <__aeabi_dmul>
 802d5a2:	ec41 0b10 	vmov	d0, r0, r1
 802d5a6:	bd70      	pop	{r4, r5, r6, pc}

0802d5a8 <_strtod_l>:
 802d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d5ac:	b09f      	sub	sp, #124	@ 0x7c
 802d5ae:	460c      	mov	r4, r1
 802d5b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 802d5b2:	2200      	movs	r2, #0
 802d5b4:	921a      	str	r2, [sp, #104]	@ 0x68
 802d5b6:	9005      	str	r0, [sp, #20]
 802d5b8:	f04f 0a00 	mov.w	sl, #0
 802d5bc:	f04f 0b00 	mov.w	fp, #0
 802d5c0:	460a      	mov	r2, r1
 802d5c2:	9219      	str	r2, [sp, #100]	@ 0x64
 802d5c4:	7811      	ldrb	r1, [r2, #0]
 802d5c6:	292b      	cmp	r1, #43	@ 0x2b
 802d5c8:	d04a      	beq.n	802d660 <_strtod_l+0xb8>
 802d5ca:	d838      	bhi.n	802d63e <_strtod_l+0x96>
 802d5cc:	290d      	cmp	r1, #13
 802d5ce:	d832      	bhi.n	802d636 <_strtod_l+0x8e>
 802d5d0:	2908      	cmp	r1, #8
 802d5d2:	d832      	bhi.n	802d63a <_strtod_l+0x92>
 802d5d4:	2900      	cmp	r1, #0
 802d5d6:	d03b      	beq.n	802d650 <_strtod_l+0xa8>
 802d5d8:	2200      	movs	r2, #0
 802d5da:	920b      	str	r2, [sp, #44]	@ 0x2c
 802d5dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802d5de:	782a      	ldrb	r2, [r5, #0]
 802d5e0:	2a30      	cmp	r2, #48	@ 0x30
 802d5e2:	f040 80b3 	bne.w	802d74c <_strtod_l+0x1a4>
 802d5e6:	786a      	ldrb	r2, [r5, #1]
 802d5e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802d5ec:	2a58      	cmp	r2, #88	@ 0x58
 802d5ee:	d16e      	bne.n	802d6ce <_strtod_l+0x126>
 802d5f0:	9302      	str	r3, [sp, #8]
 802d5f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d5f4:	9301      	str	r3, [sp, #4]
 802d5f6:	ab1a      	add	r3, sp, #104	@ 0x68
 802d5f8:	9300      	str	r3, [sp, #0]
 802d5fa:	4a8e      	ldr	r2, [pc, #568]	@ (802d834 <_strtod_l+0x28c>)
 802d5fc:	9805      	ldr	r0, [sp, #20]
 802d5fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 802d600:	a919      	add	r1, sp, #100	@ 0x64
 802d602:	f001 fa51 	bl	802eaa8 <__gethex>
 802d606:	f010 060f 	ands.w	r6, r0, #15
 802d60a:	4604      	mov	r4, r0
 802d60c:	d005      	beq.n	802d61a <_strtod_l+0x72>
 802d60e:	2e06      	cmp	r6, #6
 802d610:	d128      	bne.n	802d664 <_strtod_l+0xbc>
 802d612:	3501      	adds	r5, #1
 802d614:	2300      	movs	r3, #0
 802d616:	9519      	str	r5, [sp, #100]	@ 0x64
 802d618:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d61a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d61c:	2b00      	cmp	r3, #0
 802d61e:	f040 858e 	bne.w	802e13e <_strtod_l+0xb96>
 802d622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802d624:	b1cb      	cbz	r3, 802d65a <_strtod_l+0xb2>
 802d626:	4652      	mov	r2, sl
 802d628:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802d62c:	ec43 2b10 	vmov	d0, r2, r3
 802d630:	b01f      	add	sp, #124	@ 0x7c
 802d632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d636:	2920      	cmp	r1, #32
 802d638:	d1ce      	bne.n	802d5d8 <_strtod_l+0x30>
 802d63a:	3201      	adds	r2, #1
 802d63c:	e7c1      	b.n	802d5c2 <_strtod_l+0x1a>
 802d63e:	292d      	cmp	r1, #45	@ 0x2d
 802d640:	d1ca      	bne.n	802d5d8 <_strtod_l+0x30>
 802d642:	2101      	movs	r1, #1
 802d644:	910b      	str	r1, [sp, #44]	@ 0x2c
 802d646:	1c51      	adds	r1, r2, #1
 802d648:	9119      	str	r1, [sp, #100]	@ 0x64
 802d64a:	7852      	ldrb	r2, [r2, #1]
 802d64c:	2a00      	cmp	r2, #0
 802d64e:	d1c5      	bne.n	802d5dc <_strtod_l+0x34>
 802d650:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802d652:	9419      	str	r4, [sp, #100]	@ 0x64
 802d654:	2b00      	cmp	r3, #0
 802d656:	f040 8570 	bne.w	802e13a <_strtod_l+0xb92>
 802d65a:	4652      	mov	r2, sl
 802d65c:	465b      	mov	r3, fp
 802d65e:	e7e5      	b.n	802d62c <_strtod_l+0x84>
 802d660:	2100      	movs	r1, #0
 802d662:	e7ef      	b.n	802d644 <_strtod_l+0x9c>
 802d664:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802d666:	b13a      	cbz	r2, 802d678 <_strtod_l+0xd0>
 802d668:	2135      	movs	r1, #53	@ 0x35
 802d66a:	a81c      	add	r0, sp, #112	@ 0x70
 802d66c:	f7ff fcfc 	bl	802d068 <__copybits>
 802d670:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d672:	9805      	ldr	r0, [sp, #20]
 802d674:	f7ff f8fd 	bl	802c872 <_Bfree>
 802d678:	3e01      	subs	r6, #1
 802d67a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802d67c:	2e04      	cmp	r6, #4
 802d67e:	d806      	bhi.n	802d68e <_strtod_l+0xe6>
 802d680:	e8df f006 	tbb	[pc, r6]
 802d684:	201d0314 	.word	0x201d0314
 802d688:	14          	.byte	0x14
 802d689:	00          	.byte	0x00
 802d68a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802d68e:	05e1      	lsls	r1, r4, #23
 802d690:	bf48      	it	mi
 802d692:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802d696:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802d69a:	0d1b      	lsrs	r3, r3, #20
 802d69c:	051b      	lsls	r3, r3, #20
 802d69e:	2b00      	cmp	r3, #0
 802d6a0:	d1bb      	bne.n	802d61a <_strtod_l+0x72>
 802d6a2:	f7f9 fd59 	bl	8027158 <__errno>
 802d6a6:	2322      	movs	r3, #34	@ 0x22
 802d6a8:	6003      	str	r3, [r0, #0]
 802d6aa:	e7b6      	b.n	802d61a <_strtod_l+0x72>
 802d6ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 802d6b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802d6b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 802d6b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802d6bc:	e7e7      	b.n	802d68e <_strtod_l+0xe6>
 802d6be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802d83c <_strtod_l+0x294>
 802d6c2:	e7e4      	b.n	802d68e <_strtod_l+0xe6>
 802d6c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 802d6c8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802d6cc:	e7df      	b.n	802d68e <_strtod_l+0xe6>
 802d6ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d6d0:	1c5a      	adds	r2, r3, #1
 802d6d2:	9219      	str	r2, [sp, #100]	@ 0x64
 802d6d4:	785b      	ldrb	r3, [r3, #1]
 802d6d6:	2b30      	cmp	r3, #48	@ 0x30
 802d6d8:	d0f9      	beq.n	802d6ce <_strtod_l+0x126>
 802d6da:	2b00      	cmp	r3, #0
 802d6dc:	d09d      	beq.n	802d61a <_strtod_l+0x72>
 802d6de:	2301      	movs	r3, #1
 802d6e0:	9309      	str	r3, [sp, #36]	@ 0x24
 802d6e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d6e4:	930c      	str	r3, [sp, #48]	@ 0x30
 802d6e6:	2300      	movs	r3, #0
 802d6e8:	9308      	str	r3, [sp, #32]
 802d6ea:	930a      	str	r3, [sp, #40]	@ 0x28
 802d6ec:	461f      	mov	r7, r3
 802d6ee:	220a      	movs	r2, #10
 802d6f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802d6f2:	7805      	ldrb	r5, [r0, #0]
 802d6f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 802d6f8:	b2d9      	uxtb	r1, r3
 802d6fa:	2909      	cmp	r1, #9
 802d6fc:	d928      	bls.n	802d750 <_strtod_l+0x1a8>
 802d6fe:	494e      	ldr	r1, [pc, #312]	@ (802d838 <_strtod_l+0x290>)
 802d700:	2201      	movs	r2, #1
 802d702:	f7f8 fb5a 	bl	8025dba <strncmp>
 802d706:	2800      	cmp	r0, #0
 802d708:	d032      	beq.n	802d770 <_strtod_l+0x1c8>
 802d70a:	2000      	movs	r0, #0
 802d70c:	462a      	mov	r2, r5
 802d70e:	4681      	mov	r9, r0
 802d710:	463d      	mov	r5, r7
 802d712:	4603      	mov	r3, r0
 802d714:	2a65      	cmp	r2, #101	@ 0x65
 802d716:	d001      	beq.n	802d71c <_strtod_l+0x174>
 802d718:	2a45      	cmp	r2, #69	@ 0x45
 802d71a:	d114      	bne.n	802d746 <_strtod_l+0x19e>
 802d71c:	b91d      	cbnz	r5, 802d726 <_strtod_l+0x17e>
 802d71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802d720:	4302      	orrs	r2, r0
 802d722:	d095      	beq.n	802d650 <_strtod_l+0xa8>
 802d724:	2500      	movs	r5, #0
 802d726:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802d728:	1c62      	adds	r2, r4, #1
 802d72a:	9219      	str	r2, [sp, #100]	@ 0x64
 802d72c:	7862      	ldrb	r2, [r4, #1]
 802d72e:	2a2b      	cmp	r2, #43	@ 0x2b
 802d730:	d077      	beq.n	802d822 <_strtod_l+0x27a>
 802d732:	2a2d      	cmp	r2, #45	@ 0x2d
 802d734:	d07b      	beq.n	802d82e <_strtod_l+0x286>
 802d736:	f04f 0c00 	mov.w	ip, #0
 802d73a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802d73e:	2909      	cmp	r1, #9
 802d740:	f240 8082 	bls.w	802d848 <_strtod_l+0x2a0>
 802d744:	9419      	str	r4, [sp, #100]	@ 0x64
 802d746:	f04f 0800 	mov.w	r8, #0
 802d74a:	e0a2      	b.n	802d892 <_strtod_l+0x2ea>
 802d74c:	2300      	movs	r3, #0
 802d74e:	e7c7      	b.n	802d6e0 <_strtod_l+0x138>
 802d750:	2f08      	cmp	r7, #8
 802d752:	bfd5      	itete	le
 802d754:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 802d756:	9908      	ldrgt	r1, [sp, #32]
 802d758:	fb02 3301 	mlale	r3, r2, r1, r3
 802d75c:	fb02 3301 	mlagt	r3, r2, r1, r3
 802d760:	f100 0001 	add.w	r0, r0, #1
 802d764:	bfd4      	ite	le
 802d766:	930a      	strle	r3, [sp, #40]	@ 0x28
 802d768:	9308      	strgt	r3, [sp, #32]
 802d76a:	3701      	adds	r7, #1
 802d76c:	9019      	str	r0, [sp, #100]	@ 0x64
 802d76e:	e7bf      	b.n	802d6f0 <_strtod_l+0x148>
 802d770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d772:	1c5a      	adds	r2, r3, #1
 802d774:	9219      	str	r2, [sp, #100]	@ 0x64
 802d776:	785a      	ldrb	r2, [r3, #1]
 802d778:	b37f      	cbz	r7, 802d7da <_strtod_l+0x232>
 802d77a:	4681      	mov	r9, r0
 802d77c:	463d      	mov	r5, r7
 802d77e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802d782:	2b09      	cmp	r3, #9
 802d784:	d912      	bls.n	802d7ac <_strtod_l+0x204>
 802d786:	2301      	movs	r3, #1
 802d788:	e7c4      	b.n	802d714 <_strtod_l+0x16c>
 802d78a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d78c:	1c5a      	adds	r2, r3, #1
 802d78e:	9219      	str	r2, [sp, #100]	@ 0x64
 802d790:	785a      	ldrb	r2, [r3, #1]
 802d792:	3001      	adds	r0, #1
 802d794:	2a30      	cmp	r2, #48	@ 0x30
 802d796:	d0f8      	beq.n	802d78a <_strtod_l+0x1e2>
 802d798:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802d79c:	2b08      	cmp	r3, #8
 802d79e:	f200 84d3 	bhi.w	802e148 <_strtod_l+0xba0>
 802d7a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d7a4:	930c      	str	r3, [sp, #48]	@ 0x30
 802d7a6:	4681      	mov	r9, r0
 802d7a8:	2000      	movs	r0, #0
 802d7aa:	4605      	mov	r5, r0
 802d7ac:	3a30      	subs	r2, #48	@ 0x30
 802d7ae:	f100 0301 	add.w	r3, r0, #1
 802d7b2:	d02a      	beq.n	802d80a <_strtod_l+0x262>
 802d7b4:	4499      	add	r9, r3
 802d7b6:	eb00 0c05 	add.w	ip, r0, r5
 802d7ba:	462b      	mov	r3, r5
 802d7bc:	210a      	movs	r1, #10
 802d7be:	4563      	cmp	r3, ip
 802d7c0:	d10d      	bne.n	802d7de <_strtod_l+0x236>
 802d7c2:	1c69      	adds	r1, r5, #1
 802d7c4:	4401      	add	r1, r0
 802d7c6:	4428      	add	r0, r5
 802d7c8:	2808      	cmp	r0, #8
 802d7ca:	dc16      	bgt.n	802d7fa <_strtod_l+0x252>
 802d7cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802d7ce:	230a      	movs	r3, #10
 802d7d0:	fb03 2300 	mla	r3, r3, r0, r2
 802d7d4:	930a      	str	r3, [sp, #40]	@ 0x28
 802d7d6:	2300      	movs	r3, #0
 802d7d8:	e018      	b.n	802d80c <_strtod_l+0x264>
 802d7da:	4638      	mov	r0, r7
 802d7dc:	e7da      	b.n	802d794 <_strtod_l+0x1ec>
 802d7de:	2b08      	cmp	r3, #8
 802d7e0:	f103 0301 	add.w	r3, r3, #1
 802d7e4:	dc03      	bgt.n	802d7ee <_strtod_l+0x246>
 802d7e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802d7e8:	434e      	muls	r6, r1
 802d7ea:	960a      	str	r6, [sp, #40]	@ 0x28
 802d7ec:	e7e7      	b.n	802d7be <_strtod_l+0x216>
 802d7ee:	2b10      	cmp	r3, #16
 802d7f0:	bfde      	ittt	le
 802d7f2:	9e08      	ldrle	r6, [sp, #32]
 802d7f4:	434e      	mulle	r6, r1
 802d7f6:	9608      	strle	r6, [sp, #32]
 802d7f8:	e7e1      	b.n	802d7be <_strtod_l+0x216>
 802d7fa:	280f      	cmp	r0, #15
 802d7fc:	dceb      	bgt.n	802d7d6 <_strtod_l+0x22e>
 802d7fe:	9808      	ldr	r0, [sp, #32]
 802d800:	230a      	movs	r3, #10
 802d802:	fb03 2300 	mla	r3, r3, r0, r2
 802d806:	9308      	str	r3, [sp, #32]
 802d808:	e7e5      	b.n	802d7d6 <_strtod_l+0x22e>
 802d80a:	4629      	mov	r1, r5
 802d80c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d80e:	1c50      	adds	r0, r2, #1
 802d810:	9019      	str	r0, [sp, #100]	@ 0x64
 802d812:	7852      	ldrb	r2, [r2, #1]
 802d814:	4618      	mov	r0, r3
 802d816:	460d      	mov	r5, r1
 802d818:	e7b1      	b.n	802d77e <_strtod_l+0x1d6>
 802d81a:	f04f 0900 	mov.w	r9, #0
 802d81e:	2301      	movs	r3, #1
 802d820:	e77d      	b.n	802d71e <_strtod_l+0x176>
 802d822:	f04f 0c00 	mov.w	ip, #0
 802d826:	1ca2      	adds	r2, r4, #2
 802d828:	9219      	str	r2, [sp, #100]	@ 0x64
 802d82a:	78a2      	ldrb	r2, [r4, #2]
 802d82c:	e785      	b.n	802d73a <_strtod_l+0x192>
 802d82e:	f04f 0c01 	mov.w	ip, #1
 802d832:	e7f8      	b.n	802d826 <_strtod_l+0x27e>
 802d834:	08034e0c 	.word	0x08034e0c
 802d838:	08034876 	.word	0x08034876
 802d83c:	7ff00000 	.word	0x7ff00000
 802d840:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d842:	1c51      	adds	r1, r2, #1
 802d844:	9119      	str	r1, [sp, #100]	@ 0x64
 802d846:	7852      	ldrb	r2, [r2, #1]
 802d848:	2a30      	cmp	r2, #48	@ 0x30
 802d84a:	d0f9      	beq.n	802d840 <_strtod_l+0x298>
 802d84c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 802d850:	2908      	cmp	r1, #8
 802d852:	f63f af78 	bhi.w	802d746 <_strtod_l+0x19e>
 802d856:	3a30      	subs	r2, #48	@ 0x30
 802d858:	920e      	str	r2, [sp, #56]	@ 0x38
 802d85a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d85c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802d85e:	f04f 080a 	mov.w	r8, #10
 802d862:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802d864:	1c56      	adds	r6, r2, #1
 802d866:	9619      	str	r6, [sp, #100]	@ 0x64
 802d868:	7852      	ldrb	r2, [r2, #1]
 802d86a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802d86e:	f1be 0f09 	cmp.w	lr, #9
 802d872:	d939      	bls.n	802d8e8 <_strtod_l+0x340>
 802d874:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802d876:	1a76      	subs	r6, r6, r1
 802d878:	2e08      	cmp	r6, #8
 802d87a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802d87e:	dc03      	bgt.n	802d888 <_strtod_l+0x2e0>
 802d880:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802d882:	4588      	cmp	r8, r1
 802d884:	bfa8      	it	ge
 802d886:	4688      	movge	r8, r1
 802d888:	f1bc 0f00 	cmp.w	ip, #0
 802d88c:	d001      	beq.n	802d892 <_strtod_l+0x2ea>
 802d88e:	f1c8 0800 	rsb	r8, r8, #0
 802d892:	2d00      	cmp	r5, #0
 802d894:	d14e      	bne.n	802d934 <_strtod_l+0x38c>
 802d896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802d898:	4308      	orrs	r0, r1
 802d89a:	f47f aebe 	bne.w	802d61a <_strtod_l+0x72>
 802d89e:	2b00      	cmp	r3, #0
 802d8a0:	f47f aed6 	bne.w	802d650 <_strtod_l+0xa8>
 802d8a4:	2a69      	cmp	r2, #105	@ 0x69
 802d8a6:	d028      	beq.n	802d8fa <_strtod_l+0x352>
 802d8a8:	dc25      	bgt.n	802d8f6 <_strtod_l+0x34e>
 802d8aa:	2a49      	cmp	r2, #73	@ 0x49
 802d8ac:	d025      	beq.n	802d8fa <_strtod_l+0x352>
 802d8ae:	2a4e      	cmp	r2, #78	@ 0x4e
 802d8b0:	f47f aece 	bne.w	802d650 <_strtod_l+0xa8>
 802d8b4:	499b      	ldr	r1, [pc, #620]	@ (802db24 <_strtod_l+0x57c>)
 802d8b6:	a819      	add	r0, sp, #100	@ 0x64
 802d8b8:	f001 fb18 	bl	802eeec <__match>
 802d8bc:	2800      	cmp	r0, #0
 802d8be:	f43f aec7 	beq.w	802d650 <_strtod_l+0xa8>
 802d8c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d8c4:	781b      	ldrb	r3, [r3, #0]
 802d8c6:	2b28      	cmp	r3, #40	@ 0x28
 802d8c8:	d12e      	bne.n	802d928 <_strtod_l+0x380>
 802d8ca:	4997      	ldr	r1, [pc, #604]	@ (802db28 <_strtod_l+0x580>)
 802d8cc:	aa1c      	add	r2, sp, #112	@ 0x70
 802d8ce:	a819      	add	r0, sp, #100	@ 0x64
 802d8d0:	f001 fb20 	bl	802ef14 <__hexnan>
 802d8d4:	2805      	cmp	r0, #5
 802d8d6:	d127      	bne.n	802d928 <_strtod_l+0x380>
 802d8d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802d8da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802d8de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802d8e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802d8e6:	e698      	b.n	802d61a <_strtod_l+0x72>
 802d8e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802d8ea:	fb08 2101 	mla	r1, r8, r1, r2
 802d8ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802d8f2:	920e      	str	r2, [sp, #56]	@ 0x38
 802d8f4:	e7b5      	b.n	802d862 <_strtod_l+0x2ba>
 802d8f6:	2a6e      	cmp	r2, #110	@ 0x6e
 802d8f8:	e7da      	b.n	802d8b0 <_strtod_l+0x308>
 802d8fa:	498c      	ldr	r1, [pc, #560]	@ (802db2c <_strtod_l+0x584>)
 802d8fc:	a819      	add	r0, sp, #100	@ 0x64
 802d8fe:	f001 faf5 	bl	802eeec <__match>
 802d902:	2800      	cmp	r0, #0
 802d904:	f43f aea4 	beq.w	802d650 <_strtod_l+0xa8>
 802d908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d90a:	4989      	ldr	r1, [pc, #548]	@ (802db30 <_strtod_l+0x588>)
 802d90c:	3b01      	subs	r3, #1
 802d90e:	a819      	add	r0, sp, #100	@ 0x64
 802d910:	9319      	str	r3, [sp, #100]	@ 0x64
 802d912:	f001 faeb 	bl	802eeec <__match>
 802d916:	b910      	cbnz	r0, 802d91e <_strtod_l+0x376>
 802d918:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802d91a:	3301      	adds	r3, #1
 802d91c:	9319      	str	r3, [sp, #100]	@ 0x64
 802d91e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 802db40 <_strtod_l+0x598>
 802d922:	f04f 0a00 	mov.w	sl, #0
 802d926:	e678      	b.n	802d61a <_strtod_l+0x72>
 802d928:	4882      	ldr	r0, [pc, #520]	@ (802db34 <_strtod_l+0x58c>)
 802d92a:	f001 f805 	bl	802e938 <nan>
 802d92e:	ec5b ab10 	vmov	sl, fp, d0
 802d932:	e672      	b.n	802d61a <_strtod_l+0x72>
 802d934:	eba8 0309 	sub.w	r3, r8, r9
 802d938:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802d93a:	9309      	str	r3, [sp, #36]	@ 0x24
 802d93c:	2f00      	cmp	r7, #0
 802d93e:	bf08      	it	eq
 802d940:	462f      	moveq	r7, r5
 802d942:	2d10      	cmp	r5, #16
 802d944:	462c      	mov	r4, r5
 802d946:	bfa8      	it	ge
 802d948:	2410      	movge	r4, #16
 802d94a:	f7d2 fdf3 	bl	8000534 <__aeabi_ui2d>
 802d94e:	2d09      	cmp	r5, #9
 802d950:	4682      	mov	sl, r0
 802d952:	468b      	mov	fp, r1
 802d954:	dc13      	bgt.n	802d97e <_strtod_l+0x3d6>
 802d956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d958:	2b00      	cmp	r3, #0
 802d95a:	f43f ae5e 	beq.w	802d61a <_strtod_l+0x72>
 802d95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d960:	dd78      	ble.n	802da54 <_strtod_l+0x4ac>
 802d962:	2b16      	cmp	r3, #22
 802d964:	dc5f      	bgt.n	802da26 <_strtod_l+0x47e>
 802d966:	4974      	ldr	r1, [pc, #464]	@ (802db38 <_strtod_l+0x590>)
 802d968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802d96c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d970:	4652      	mov	r2, sl
 802d972:	465b      	mov	r3, fp
 802d974:	f7d2 fe58 	bl	8000628 <__aeabi_dmul>
 802d978:	4682      	mov	sl, r0
 802d97a:	468b      	mov	fp, r1
 802d97c:	e64d      	b.n	802d61a <_strtod_l+0x72>
 802d97e:	4b6e      	ldr	r3, [pc, #440]	@ (802db38 <_strtod_l+0x590>)
 802d980:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802d984:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 802d988:	f7d2 fe4e 	bl	8000628 <__aeabi_dmul>
 802d98c:	4682      	mov	sl, r0
 802d98e:	9808      	ldr	r0, [sp, #32]
 802d990:	468b      	mov	fp, r1
 802d992:	f7d2 fdcf 	bl	8000534 <__aeabi_ui2d>
 802d996:	4602      	mov	r2, r0
 802d998:	460b      	mov	r3, r1
 802d99a:	4650      	mov	r0, sl
 802d99c:	4659      	mov	r1, fp
 802d99e:	f7d2 fc8d 	bl	80002bc <__adddf3>
 802d9a2:	2d0f      	cmp	r5, #15
 802d9a4:	4682      	mov	sl, r0
 802d9a6:	468b      	mov	fp, r1
 802d9a8:	ddd5      	ble.n	802d956 <_strtod_l+0x3ae>
 802d9aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d9ac:	1b2c      	subs	r4, r5, r4
 802d9ae:	441c      	add	r4, r3
 802d9b0:	2c00      	cmp	r4, #0
 802d9b2:	f340 8096 	ble.w	802dae2 <_strtod_l+0x53a>
 802d9b6:	f014 030f 	ands.w	r3, r4, #15
 802d9ba:	d00a      	beq.n	802d9d2 <_strtod_l+0x42a>
 802d9bc:	495e      	ldr	r1, [pc, #376]	@ (802db38 <_strtod_l+0x590>)
 802d9be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802d9c2:	4652      	mov	r2, sl
 802d9c4:	465b      	mov	r3, fp
 802d9c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 802d9ca:	f7d2 fe2d 	bl	8000628 <__aeabi_dmul>
 802d9ce:	4682      	mov	sl, r0
 802d9d0:	468b      	mov	fp, r1
 802d9d2:	f034 040f 	bics.w	r4, r4, #15
 802d9d6:	d073      	beq.n	802dac0 <_strtod_l+0x518>
 802d9d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802d9dc:	dd48      	ble.n	802da70 <_strtod_l+0x4c8>
 802d9de:	2400      	movs	r4, #0
 802d9e0:	46a0      	mov	r8, r4
 802d9e2:	940a      	str	r4, [sp, #40]	@ 0x28
 802d9e4:	46a1      	mov	r9, r4
 802d9e6:	9a05      	ldr	r2, [sp, #20]
 802d9e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 802db40 <_strtod_l+0x598>
 802d9ec:	2322      	movs	r3, #34	@ 0x22
 802d9ee:	6013      	str	r3, [r2, #0]
 802d9f0:	f04f 0a00 	mov.w	sl, #0
 802d9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802d9f6:	2b00      	cmp	r3, #0
 802d9f8:	f43f ae0f 	beq.w	802d61a <_strtod_l+0x72>
 802d9fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802d9fe:	9805      	ldr	r0, [sp, #20]
 802da00:	f7fe ff37 	bl	802c872 <_Bfree>
 802da04:	9805      	ldr	r0, [sp, #20]
 802da06:	4649      	mov	r1, r9
 802da08:	f7fe ff33 	bl	802c872 <_Bfree>
 802da0c:	9805      	ldr	r0, [sp, #20]
 802da0e:	4641      	mov	r1, r8
 802da10:	f7fe ff2f 	bl	802c872 <_Bfree>
 802da14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802da16:	9805      	ldr	r0, [sp, #20]
 802da18:	f7fe ff2b 	bl	802c872 <_Bfree>
 802da1c:	9805      	ldr	r0, [sp, #20]
 802da1e:	4621      	mov	r1, r4
 802da20:	f7fe ff27 	bl	802c872 <_Bfree>
 802da24:	e5f9      	b.n	802d61a <_strtod_l+0x72>
 802da26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802da28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802da2c:	4293      	cmp	r3, r2
 802da2e:	dbbc      	blt.n	802d9aa <_strtod_l+0x402>
 802da30:	4c41      	ldr	r4, [pc, #260]	@ (802db38 <_strtod_l+0x590>)
 802da32:	f1c5 050f 	rsb	r5, r5, #15
 802da36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802da3a:	4652      	mov	r2, sl
 802da3c:	465b      	mov	r3, fp
 802da3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802da42:	f7d2 fdf1 	bl	8000628 <__aeabi_dmul>
 802da46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802da48:	1b5d      	subs	r5, r3, r5
 802da4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802da4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 802da52:	e78f      	b.n	802d974 <_strtod_l+0x3cc>
 802da54:	3316      	adds	r3, #22
 802da56:	dba8      	blt.n	802d9aa <_strtod_l+0x402>
 802da58:	4b37      	ldr	r3, [pc, #220]	@ (802db38 <_strtod_l+0x590>)
 802da5a:	eba9 0808 	sub.w	r8, r9, r8
 802da5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 802da62:	e9d8 2300 	ldrd	r2, r3, [r8]
 802da66:	4650      	mov	r0, sl
 802da68:	4659      	mov	r1, fp
 802da6a:	f7d2 ff07 	bl	800087c <__aeabi_ddiv>
 802da6e:	e783      	b.n	802d978 <_strtod_l+0x3d0>
 802da70:	4b32      	ldr	r3, [pc, #200]	@ (802db3c <_strtod_l+0x594>)
 802da72:	9308      	str	r3, [sp, #32]
 802da74:	2300      	movs	r3, #0
 802da76:	1124      	asrs	r4, r4, #4
 802da78:	4650      	mov	r0, sl
 802da7a:	4659      	mov	r1, fp
 802da7c:	461e      	mov	r6, r3
 802da7e:	2c01      	cmp	r4, #1
 802da80:	dc21      	bgt.n	802dac6 <_strtod_l+0x51e>
 802da82:	b10b      	cbz	r3, 802da88 <_strtod_l+0x4e0>
 802da84:	4682      	mov	sl, r0
 802da86:	468b      	mov	fp, r1
 802da88:	492c      	ldr	r1, [pc, #176]	@ (802db3c <_strtod_l+0x594>)
 802da8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802da8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 802da92:	4652      	mov	r2, sl
 802da94:	465b      	mov	r3, fp
 802da96:	e9d1 0100 	ldrd	r0, r1, [r1]
 802da9a:	f7d2 fdc5 	bl	8000628 <__aeabi_dmul>
 802da9e:	4b28      	ldr	r3, [pc, #160]	@ (802db40 <_strtod_l+0x598>)
 802daa0:	460a      	mov	r2, r1
 802daa2:	400b      	ands	r3, r1
 802daa4:	4927      	ldr	r1, [pc, #156]	@ (802db44 <_strtod_l+0x59c>)
 802daa6:	428b      	cmp	r3, r1
 802daa8:	4682      	mov	sl, r0
 802daaa:	d898      	bhi.n	802d9de <_strtod_l+0x436>
 802daac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 802dab0:	428b      	cmp	r3, r1
 802dab2:	bf86      	itte	hi
 802dab4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 802db48 <_strtod_l+0x5a0>
 802dab8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 802dabc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 802dac0:	2300      	movs	r3, #0
 802dac2:	9308      	str	r3, [sp, #32]
 802dac4:	e07a      	b.n	802dbbc <_strtod_l+0x614>
 802dac6:	07e2      	lsls	r2, r4, #31
 802dac8:	d505      	bpl.n	802dad6 <_strtod_l+0x52e>
 802daca:	9b08      	ldr	r3, [sp, #32]
 802dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dad0:	f7d2 fdaa 	bl	8000628 <__aeabi_dmul>
 802dad4:	2301      	movs	r3, #1
 802dad6:	9a08      	ldr	r2, [sp, #32]
 802dad8:	3208      	adds	r2, #8
 802dada:	3601      	adds	r6, #1
 802dadc:	1064      	asrs	r4, r4, #1
 802dade:	9208      	str	r2, [sp, #32]
 802dae0:	e7cd      	b.n	802da7e <_strtod_l+0x4d6>
 802dae2:	d0ed      	beq.n	802dac0 <_strtod_l+0x518>
 802dae4:	4264      	negs	r4, r4
 802dae6:	f014 020f 	ands.w	r2, r4, #15
 802daea:	d00a      	beq.n	802db02 <_strtod_l+0x55a>
 802daec:	4b12      	ldr	r3, [pc, #72]	@ (802db38 <_strtod_l+0x590>)
 802daee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802daf2:	4650      	mov	r0, sl
 802daf4:	4659      	mov	r1, fp
 802daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dafa:	f7d2 febf 	bl	800087c <__aeabi_ddiv>
 802dafe:	4682      	mov	sl, r0
 802db00:	468b      	mov	fp, r1
 802db02:	1124      	asrs	r4, r4, #4
 802db04:	d0dc      	beq.n	802dac0 <_strtod_l+0x518>
 802db06:	2c1f      	cmp	r4, #31
 802db08:	dd20      	ble.n	802db4c <_strtod_l+0x5a4>
 802db0a:	2400      	movs	r4, #0
 802db0c:	46a0      	mov	r8, r4
 802db0e:	940a      	str	r4, [sp, #40]	@ 0x28
 802db10:	46a1      	mov	r9, r4
 802db12:	9a05      	ldr	r2, [sp, #20]
 802db14:	2322      	movs	r3, #34	@ 0x22
 802db16:	f04f 0a00 	mov.w	sl, #0
 802db1a:	f04f 0b00 	mov.w	fp, #0
 802db1e:	6013      	str	r3, [r2, #0]
 802db20:	e768      	b.n	802d9f4 <_strtod_l+0x44c>
 802db22:	bf00      	nop
 802db24:	08034879 	.word	0x08034879
 802db28:	08034df8 	.word	0x08034df8
 802db2c:	080346e9 	.word	0x080346e9
 802db30:	08034ba4 	.word	0x08034ba4
 802db34:	080346e3 	.word	0x080346e3
 802db38:	08034d30 	.word	0x08034d30
 802db3c:	08034d08 	.word	0x08034d08
 802db40:	7ff00000 	.word	0x7ff00000
 802db44:	7ca00000 	.word	0x7ca00000
 802db48:	7fefffff 	.word	0x7fefffff
 802db4c:	f014 0310 	ands.w	r3, r4, #16
 802db50:	bf18      	it	ne
 802db52:	236a      	movne	r3, #106	@ 0x6a
 802db54:	4ea9      	ldr	r6, [pc, #676]	@ (802ddfc <_strtod_l+0x854>)
 802db56:	9308      	str	r3, [sp, #32]
 802db58:	4650      	mov	r0, sl
 802db5a:	4659      	mov	r1, fp
 802db5c:	2300      	movs	r3, #0
 802db5e:	07e2      	lsls	r2, r4, #31
 802db60:	d504      	bpl.n	802db6c <_strtod_l+0x5c4>
 802db62:	e9d6 2300 	ldrd	r2, r3, [r6]
 802db66:	f7d2 fd5f 	bl	8000628 <__aeabi_dmul>
 802db6a:	2301      	movs	r3, #1
 802db6c:	1064      	asrs	r4, r4, #1
 802db6e:	f106 0608 	add.w	r6, r6, #8
 802db72:	d1f4      	bne.n	802db5e <_strtod_l+0x5b6>
 802db74:	b10b      	cbz	r3, 802db7a <_strtod_l+0x5d2>
 802db76:	4682      	mov	sl, r0
 802db78:	468b      	mov	fp, r1
 802db7a:	9b08      	ldr	r3, [sp, #32]
 802db7c:	b1b3      	cbz	r3, 802dbac <_strtod_l+0x604>
 802db7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802db82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 802db86:	2b00      	cmp	r3, #0
 802db88:	4659      	mov	r1, fp
 802db8a:	dd0f      	ble.n	802dbac <_strtod_l+0x604>
 802db8c:	2b1f      	cmp	r3, #31
 802db8e:	dd55      	ble.n	802dc3c <_strtod_l+0x694>
 802db90:	2b34      	cmp	r3, #52	@ 0x34
 802db92:	bfde      	ittt	le
 802db94:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 802db98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802db9c:	4093      	lslle	r3, r2
 802db9e:	f04f 0a00 	mov.w	sl, #0
 802dba2:	bfcc      	ite	gt
 802dba4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 802dba8:	ea03 0b01 	andle.w	fp, r3, r1
 802dbac:	2200      	movs	r2, #0
 802dbae:	2300      	movs	r3, #0
 802dbb0:	4650      	mov	r0, sl
 802dbb2:	4659      	mov	r1, fp
 802dbb4:	f7d2 ffa0 	bl	8000af8 <__aeabi_dcmpeq>
 802dbb8:	2800      	cmp	r0, #0
 802dbba:	d1a6      	bne.n	802db0a <_strtod_l+0x562>
 802dbbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dbbe:	9300      	str	r3, [sp, #0]
 802dbc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802dbc2:	9805      	ldr	r0, [sp, #20]
 802dbc4:	462b      	mov	r3, r5
 802dbc6:	463a      	mov	r2, r7
 802dbc8:	f7fe fea2 	bl	802c910 <__s2b>
 802dbcc:	900a      	str	r0, [sp, #40]	@ 0x28
 802dbce:	2800      	cmp	r0, #0
 802dbd0:	f43f af05 	beq.w	802d9de <_strtod_l+0x436>
 802dbd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802dbd6:	2a00      	cmp	r2, #0
 802dbd8:	eba9 0308 	sub.w	r3, r9, r8
 802dbdc:	bfa8      	it	ge
 802dbde:	2300      	movge	r3, #0
 802dbe0:	9312      	str	r3, [sp, #72]	@ 0x48
 802dbe2:	2400      	movs	r4, #0
 802dbe4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802dbe8:	9316      	str	r3, [sp, #88]	@ 0x58
 802dbea:	46a0      	mov	r8, r4
 802dbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dbee:	9805      	ldr	r0, [sp, #20]
 802dbf0:	6859      	ldr	r1, [r3, #4]
 802dbf2:	f7fe fe19 	bl	802c828 <_Balloc>
 802dbf6:	4681      	mov	r9, r0
 802dbf8:	2800      	cmp	r0, #0
 802dbfa:	f43f aef4 	beq.w	802d9e6 <_strtod_l+0x43e>
 802dbfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802dc00:	691a      	ldr	r2, [r3, #16]
 802dc02:	3202      	adds	r2, #2
 802dc04:	f103 010c 	add.w	r1, r3, #12
 802dc08:	0092      	lsls	r2, r2, #2
 802dc0a:	300c      	adds	r0, #12
 802dc0c:	f7f9 fadc 	bl	80271c8 <memcpy>
 802dc10:	ec4b ab10 	vmov	d0, sl, fp
 802dc14:	9805      	ldr	r0, [sp, #20]
 802dc16:	aa1c      	add	r2, sp, #112	@ 0x70
 802dc18:	a91b      	add	r1, sp, #108	@ 0x6c
 802dc1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802dc1e:	f7ff f999 	bl	802cf54 <__d2b>
 802dc22:	901a      	str	r0, [sp, #104]	@ 0x68
 802dc24:	2800      	cmp	r0, #0
 802dc26:	f43f aede 	beq.w	802d9e6 <_strtod_l+0x43e>
 802dc2a:	9805      	ldr	r0, [sp, #20]
 802dc2c:	2101      	movs	r1, #1
 802dc2e:	f7fe ff05 	bl	802ca3c <__i2b>
 802dc32:	4680      	mov	r8, r0
 802dc34:	b948      	cbnz	r0, 802dc4a <_strtod_l+0x6a2>
 802dc36:	f04f 0800 	mov.w	r8, #0
 802dc3a:	e6d4      	b.n	802d9e6 <_strtod_l+0x43e>
 802dc3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802dc40:	fa02 f303 	lsl.w	r3, r2, r3
 802dc44:	ea03 0a0a 	and.w	sl, r3, sl
 802dc48:	e7b0      	b.n	802dbac <_strtod_l+0x604>
 802dc4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802dc4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802dc4e:	2d00      	cmp	r5, #0
 802dc50:	bfab      	itete	ge
 802dc52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 802dc54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 802dc56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 802dc58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 802dc5a:	bfac      	ite	ge
 802dc5c:	18ef      	addge	r7, r5, r3
 802dc5e:	1b5e      	sublt	r6, r3, r5
 802dc60:	9b08      	ldr	r3, [sp, #32]
 802dc62:	1aed      	subs	r5, r5, r3
 802dc64:	4415      	add	r5, r2
 802dc66:	4b66      	ldr	r3, [pc, #408]	@ (802de00 <_strtod_l+0x858>)
 802dc68:	3d01      	subs	r5, #1
 802dc6a:	429d      	cmp	r5, r3
 802dc6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802dc70:	da50      	bge.n	802dd14 <_strtod_l+0x76c>
 802dc72:	1b5b      	subs	r3, r3, r5
 802dc74:	2b1f      	cmp	r3, #31
 802dc76:	eba2 0203 	sub.w	r2, r2, r3
 802dc7a:	f04f 0101 	mov.w	r1, #1
 802dc7e:	dc3d      	bgt.n	802dcfc <_strtod_l+0x754>
 802dc80:	fa01 f303 	lsl.w	r3, r1, r3
 802dc84:	9313      	str	r3, [sp, #76]	@ 0x4c
 802dc86:	2300      	movs	r3, #0
 802dc88:	9310      	str	r3, [sp, #64]	@ 0x40
 802dc8a:	18bd      	adds	r5, r7, r2
 802dc8c:	9b08      	ldr	r3, [sp, #32]
 802dc8e:	42af      	cmp	r7, r5
 802dc90:	4416      	add	r6, r2
 802dc92:	441e      	add	r6, r3
 802dc94:	463b      	mov	r3, r7
 802dc96:	bfa8      	it	ge
 802dc98:	462b      	movge	r3, r5
 802dc9a:	42b3      	cmp	r3, r6
 802dc9c:	bfa8      	it	ge
 802dc9e:	4633      	movge	r3, r6
 802dca0:	2b00      	cmp	r3, #0
 802dca2:	bfc2      	ittt	gt
 802dca4:	1aed      	subgt	r5, r5, r3
 802dca6:	1af6      	subgt	r6, r6, r3
 802dca8:	1aff      	subgt	r7, r7, r3
 802dcaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802dcac:	2b00      	cmp	r3, #0
 802dcae:	dd16      	ble.n	802dcde <_strtod_l+0x736>
 802dcb0:	4641      	mov	r1, r8
 802dcb2:	9805      	ldr	r0, [sp, #20]
 802dcb4:	461a      	mov	r2, r3
 802dcb6:	f7fe ff81 	bl	802cbbc <__pow5mult>
 802dcba:	4680      	mov	r8, r0
 802dcbc:	2800      	cmp	r0, #0
 802dcbe:	d0ba      	beq.n	802dc36 <_strtod_l+0x68e>
 802dcc0:	4601      	mov	r1, r0
 802dcc2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802dcc4:	9805      	ldr	r0, [sp, #20]
 802dcc6:	f7fe fecf 	bl	802ca68 <__multiply>
 802dcca:	900e      	str	r0, [sp, #56]	@ 0x38
 802dccc:	2800      	cmp	r0, #0
 802dcce:	f43f ae8a 	beq.w	802d9e6 <_strtod_l+0x43e>
 802dcd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802dcd4:	9805      	ldr	r0, [sp, #20]
 802dcd6:	f7fe fdcc 	bl	802c872 <_Bfree>
 802dcda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dcdc:	931a      	str	r3, [sp, #104]	@ 0x68
 802dcde:	2d00      	cmp	r5, #0
 802dce0:	dc1d      	bgt.n	802dd1e <_strtod_l+0x776>
 802dce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802dce4:	2b00      	cmp	r3, #0
 802dce6:	dd23      	ble.n	802dd30 <_strtod_l+0x788>
 802dce8:	4649      	mov	r1, r9
 802dcea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802dcec:	9805      	ldr	r0, [sp, #20]
 802dcee:	f7fe ff65 	bl	802cbbc <__pow5mult>
 802dcf2:	4681      	mov	r9, r0
 802dcf4:	b9e0      	cbnz	r0, 802dd30 <_strtod_l+0x788>
 802dcf6:	f04f 0900 	mov.w	r9, #0
 802dcfa:	e674      	b.n	802d9e6 <_strtod_l+0x43e>
 802dcfc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 802dd00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802dd04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 802dd08:	35e2      	adds	r5, #226	@ 0xe2
 802dd0a:	fa01 f305 	lsl.w	r3, r1, r5
 802dd0e:	9310      	str	r3, [sp, #64]	@ 0x40
 802dd10:	9113      	str	r1, [sp, #76]	@ 0x4c
 802dd12:	e7ba      	b.n	802dc8a <_strtod_l+0x6e2>
 802dd14:	2300      	movs	r3, #0
 802dd16:	9310      	str	r3, [sp, #64]	@ 0x40
 802dd18:	2301      	movs	r3, #1
 802dd1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802dd1c:	e7b5      	b.n	802dc8a <_strtod_l+0x6e2>
 802dd1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802dd20:	9805      	ldr	r0, [sp, #20]
 802dd22:	462a      	mov	r2, r5
 802dd24:	f7fe ff8a 	bl	802cc3c <__lshift>
 802dd28:	901a      	str	r0, [sp, #104]	@ 0x68
 802dd2a:	2800      	cmp	r0, #0
 802dd2c:	d1d9      	bne.n	802dce2 <_strtod_l+0x73a>
 802dd2e:	e65a      	b.n	802d9e6 <_strtod_l+0x43e>
 802dd30:	2e00      	cmp	r6, #0
 802dd32:	dd07      	ble.n	802dd44 <_strtod_l+0x79c>
 802dd34:	4649      	mov	r1, r9
 802dd36:	9805      	ldr	r0, [sp, #20]
 802dd38:	4632      	mov	r2, r6
 802dd3a:	f7fe ff7f 	bl	802cc3c <__lshift>
 802dd3e:	4681      	mov	r9, r0
 802dd40:	2800      	cmp	r0, #0
 802dd42:	d0d8      	beq.n	802dcf6 <_strtod_l+0x74e>
 802dd44:	2f00      	cmp	r7, #0
 802dd46:	dd08      	ble.n	802dd5a <_strtod_l+0x7b2>
 802dd48:	4641      	mov	r1, r8
 802dd4a:	9805      	ldr	r0, [sp, #20]
 802dd4c:	463a      	mov	r2, r7
 802dd4e:	f7fe ff75 	bl	802cc3c <__lshift>
 802dd52:	4680      	mov	r8, r0
 802dd54:	2800      	cmp	r0, #0
 802dd56:	f43f ae46 	beq.w	802d9e6 <_strtod_l+0x43e>
 802dd5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802dd5c:	9805      	ldr	r0, [sp, #20]
 802dd5e:	464a      	mov	r2, r9
 802dd60:	f7fe fff4 	bl	802cd4c <__mdiff>
 802dd64:	4604      	mov	r4, r0
 802dd66:	2800      	cmp	r0, #0
 802dd68:	f43f ae3d 	beq.w	802d9e6 <_strtod_l+0x43e>
 802dd6c:	68c3      	ldr	r3, [r0, #12]
 802dd6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802dd70:	2300      	movs	r3, #0
 802dd72:	60c3      	str	r3, [r0, #12]
 802dd74:	4641      	mov	r1, r8
 802dd76:	f7fe ffcd 	bl	802cd14 <__mcmp>
 802dd7a:	2800      	cmp	r0, #0
 802dd7c:	da46      	bge.n	802de0c <_strtod_l+0x864>
 802dd7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dd80:	ea53 030a 	orrs.w	r3, r3, sl
 802dd84:	d16c      	bne.n	802de60 <_strtod_l+0x8b8>
 802dd86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802dd8a:	2b00      	cmp	r3, #0
 802dd8c:	d168      	bne.n	802de60 <_strtod_l+0x8b8>
 802dd8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802dd92:	0d1b      	lsrs	r3, r3, #20
 802dd94:	051b      	lsls	r3, r3, #20
 802dd96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802dd9a:	d961      	bls.n	802de60 <_strtod_l+0x8b8>
 802dd9c:	6963      	ldr	r3, [r4, #20]
 802dd9e:	b913      	cbnz	r3, 802dda6 <_strtod_l+0x7fe>
 802dda0:	6923      	ldr	r3, [r4, #16]
 802dda2:	2b01      	cmp	r3, #1
 802dda4:	dd5c      	ble.n	802de60 <_strtod_l+0x8b8>
 802dda6:	4621      	mov	r1, r4
 802dda8:	2201      	movs	r2, #1
 802ddaa:	9805      	ldr	r0, [sp, #20]
 802ddac:	f7fe ff46 	bl	802cc3c <__lshift>
 802ddb0:	4641      	mov	r1, r8
 802ddb2:	4604      	mov	r4, r0
 802ddb4:	f7fe ffae 	bl	802cd14 <__mcmp>
 802ddb8:	2800      	cmp	r0, #0
 802ddba:	dd51      	ble.n	802de60 <_strtod_l+0x8b8>
 802ddbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802ddc0:	9a08      	ldr	r2, [sp, #32]
 802ddc2:	0d1b      	lsrs	r3, r3, #20
 802ddc4:	051b      	lsls	r3, r3, #20
 802ddc6:	2a00      	cmp	r2, #0
 802ddc8:	d06b      	beq.n	802dea2 <_strtod_l+0x8fa>
 802ddca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802ddce:	d868      	bhi.n	802dea2 <_strtod_l+0x8fa>
 802ddd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802ddd4:	f67f ae9d 	bls.w	802db12 <_strtod_l+0x56a>
 802ddd8:	4b0a      	ldr	r3, [pc, #40]	@ (802de04 <_strtod_l+0x85c>)
 802ddda:	4650      	mov	r0, sl
 802dddc:	4659      	mov	r1, fp
 802ddde:	2200      	movs	r2, #0
 802dde0:	f7d2 fc22 	bl	8000628 <__aeabi_dmul>
 802dde4:	4b08      	ldr	r3, [pc, #32]	@ (802de08 <_strtod_l+0x860>)
 802dde6:	400b      	ands	r3, r1
 802dde8:	4682      	mov	sl, r0
 802ddea:	468b      	mov	fp, r1
 802ddec:	2b00      	cmp	r3, #0
 802ddee:	f47f ae05 	bne.w	802d9fc <_strtod_l+0x454>
 802ddf2:	9a05      	ldr	r2, [sp, #20]
 802ddf4:	2322      	movs	r3, #34	@ 0x22
 802ddf6:	6013      	str	r3, [r2, #0]
 802ddf8:	e600      	b.n	802d9fc <_strtod_l+0x454>
 802ddfa:	bf00      	nop
 802ddfc:	08034e20 	.word	0x08034e20
 802de00:	fffffc02 	.word	0xfffffc02
 802de04:	39500000 	.word	0x39500000
 802de08:	7ff00000 	.word	0x7ff00000
 802de0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802de10:	d165      	bne.n	802dede <_strtod_l+0x936>
 802de12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802de14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802de18:	b35a      	cbz	r2, 802de72 <_strtod_l+0x8ca>
 802de1a:	4a9f      	ldr	r2, [pc, #636]	@ (802e098 <_strtod_l+0xaf0>)
 802de1c:	4293      	cmp	r3, r2
 802de1e:	d12b      	bne.n	802de78 <_strtod_l+0x8d0>
 802de20:	9b08      	ldr	r3, [sp, #32]
 802de22:	4651      	mov	r1, sl
 802de24:	b303      	cbz	r3, 802de68 <_strtod_l+0x8c0>
 802de26:	4b9d      	ldr	r3, [pc, #628]	@ (802e09c <_strtod_l+0xaf4>)
 802de28:	465a      	mov	r2, fp
 802de2a:	4013      	ands	r3, r2
 802de2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 802de30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802de34:	d81b      	bhi.n	802de6e <_strtod_l+0x8c6>
 802de36:	0d1b      	lsrs	r3, r3, #20
 802de38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802de3c:	fa02 f303 	lsl.w	r3, r2, r3
 802de40:	4299      	cmp	r1, r3
 802de42:	d119      	bne.n	802de78 <_strtod_l+0x8d0>
 802de44:	4b96      	ldr	r3, [pc, #600]	@ (802e0a0 <_strtod_l+0xaf8>)
 802de46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802de48:	429a      	cmp	r2, r3
 802de4a:	d102      	bne.n	802de52 <_strtod_l+0x8aa>
 802de4c:	3101      	adds	r1, #1
 802de4e:	f43f adca 	beq.w	802d9e6 <_strtod_l+0x43e>
 802de52:	4b92      	ldr	r3, [pc, #584]	@ (802e09c <_strtod_l+0xaf4>)
 802de54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802de56:	401a      	ands	r2, r3
 802de58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802de5c:	f04f 0a00 	mov.w	sl, #0
 802de60:	9b08      	ldr	r3, [sp, #32]
 802de62:	2b00      	cmp	r3, #0
 802de64:	d1b8      	bne.n	802ddd8 <_strtod_l+0x830>
 802de66:	e5c9      	b.n	802d9fc <_strtod_l+0x454>
 802de68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802de6c:	e7e8      	b.n	802de40 <_strtod_l+0x898>
 802de6e:	4613      	mov	r3, r2
 802de70:	e7e6      	b.n	802de40 <_strtod_l+0x898>
 802de72:	ea53 030a 	orrs.w	r3, r3, sl
 802de76:	d0a1      	beq.n	802ddbc <_strtod_l+0x814>
 802de78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802de7a:	b1db      	cbz	r3, 802deb4 <_strtod_l+0x90c>
 802de7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802de7e:	4213      	tst	r3, r2
 802de80:	d0ee      	beq.n	802de60 <_strtod_l+0x8b8>
 802de82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802de84:	9a08      	ldr	r2, [sp, #32]
 802de86:	4650      	mov	r0, sl
 802de88:	4659      	mov	r1, fp
 802de8a:	b1bb      	cbz	r3, 802debc <_strtod_l+0x914>
 802de8c:	f7ff fb6e 	bl	802d56c <sulp>
 802de90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802de94:	ec53 2b10 	vmov	r2, r3, d0
 802de98:	f7d2 fa10 	bl	80002bc <__adddf3>
 802de9c:	4682      	mov	sl, r0
 802de9e:	468b      	mov	fp, r1
 802dea0:	e7de      	b.n	802de60 <_strtod_l+0x8b8>
 802dea2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802dea6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802deaa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802deae:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802deb2:	e7d5      	b.n	802de60 <_strtod_l+0x8b8>
 802deb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802deb6:	ea13 0f0a 	tst.w	r3, sl
 802deba:	e7e1      	b.n	802de80 <_strtod_l+0x8d8>
 802debc:	f7ff fb56 	bl	802d56c <sulp>
 802dec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802dec4:	ec53 2b10 	vmov	r2, r3, d0
 802dec8:	f7d2 f9f6 	bl	80002b8 <__aeabi_dsub>
 802decc:	2200      	movs	r2, #0
 802dece:	2300      	movs	r3, #0
 802ded0:	4682      	mov	sl, r0
 802ded2:	468b      	mov	fp, r1
 802ded4:	f7d2 fe10 	bl	8000af8 <__aeabi_dcmpeq>
 802ded8:	2800      	cmp	r0, #0
 802deda:	d0c1      	beq.n	802de60 <_strtod_l+0x8b8>
 802dedc:	e619      	b.n	802db12 <_strtod_l+0x56a>
 802dede:	4641      	mov	r1, r8
 802dee0:	4620      	mov	r0, r4
 802dee2:	f7ff f88f 	bl	802d004 <__ratio>
 802dee6:	ec57 6b10 	vmov	r6, r7, d0
 802deea:	2200      	movs	r2, #0
 802deec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802def0:	4630      	mov	r0, r6
 802def2:	4639      	mov	r1, r7
 802def4:	f7d2 fe14 	bl	8000b20 <__aeabi_dcmple>
 802def8:	2800      	cmp	r0, #0
 802defa:	d06f      	beq.n	802dfdc <_strtod_l+0xa34>
 802defc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802defe:	2b00      	cmp	r3, #0
 802df00:	d17a      	bne.n	802dff8 <_strtod_l+0xa50>
 802df02:	f1ba 0f00 	cmp.w	sl, #0
 802df06:	d158      	bne.n	802dfba <_strtod_l+0xa12>
 802df08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802df0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802df0e:	2b00      	cmp	r3, #0
 802df10:	d15a      	bne.n	802dfc8 <_strtod_l+0xa20>
 802df12:	4b64      	ldr	r3, [pc, #400]	@ (802e0a4 <_strtod_l+0xafc>)
 802df14:	2200      	movs	r2, #0
 802df16:	4630      	mov	r0, r6
 802df18:	4639      	mov	r1, r7
 802df1a:	f7d2 fdf7 	bl	8000b0c <__aeabi_dcmplt>
 802df1e:	2800      	cmp	r0, #0
 802df20:	d159      	bne.n	802dfd6 <_strtod_l+0xa2e>
 802df22:	4630      	mov	r0, r6
 802df24:	4639      	mov	r1, r7
 802df26:	4b60      	ldr	r3, [pc, #384]	@ (802e0a8 <_strtod_l+0xb00>)
 802df28:	2200      	movs	r2, #0
 802df2a:	f7d2 fb7d 	bl	8000628 <__aeabi_dmul>
 802df2e:	4606      	mov	r6, r0
 802df30:	460f      	mov	r7, r1
 802df32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 802df36:	9606      	str	r6, [sp, #24]
 802df38:	9307      	str	r3, [sp, #28]
 802df3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802df3e:	4d57      	ldr	r5, [pc, #348]	@ (802e09c <_strtod_l+0xaf4>)
 802df40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802df44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802df46:	401d      	ands	r5, r3
 802df48:	4b58      	ldr	r3, [pc, #352]	@ (802e0ac <_strtod_l+0xb04>)
 802df4a:	429d      	cmp	r5, r3
 802df4c:	f040 80b2 	bne.w	802e0b4 <_strtod_l+0xb0c>
 802df50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802df52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 802df56:	ec4b ab10 	vmov	d0, sl, fp
 802df5a:	f7fe ff8b 	bl	802ce74 <__ulp>
 802df5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802df62:	ec51 0b10 	vmov	r0, r1, d0
 802df66:	f7d2 fb5f 	bl	8000628 <__aeabi_dmul>
 802df6a:	4652      	mov	r2, sl
 802df6c:	465b      	mov	r3, fp
 802df6e:	f7d2 f9a5 	bl	80002bc <__adddf3>
 802df72:	460b      	mov	r3, r1
 802df74:	4949      	ldr	r1, [pc, #292]	@ (802e09c <_strtod_l+0xaf4>)
 802df76:	4a4e      	ldr	r2, [pc, #312]	@ (802e0b0 <_strtod_l+0xb08>)
 802df78:	4019      	ands	r1, r3
 802df7a:	4291      	cmp	r1, r2
 802df7c:	4682      	mov	sl, r0
 802df7e:	d942      	bls.n	802e006 <_strtod_l+0xa5e>
 802df80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802df82:	4b47      	ldr	r3, [pc, #284]	@ (802e0a0 <_strtod_l+0xaf8>)
 802df84:	429a      	cmp	r2, r3
 802df86:	d103      	bne.n	802df90 <_strtod_l+0x9e8>
 802df88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802df8a:	3301      	adds	r3, #1
 802df8c:	f43f ad2b 	beq.w	802d9e6 <_strtod_l+0x43e>
 802df90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 802e0a0 <_strtod_l+0xaf8>
 802df94:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 802df98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802df9a:	9805      	ldr	r0, [sp, #20]
 802df9c:	f7fe fc69 	bl	802c872 <_Bfree>
 802dfa0:	9805      	ldr	r0, [sp, #20]
 802dfa2:	4649      	mov	r1, r9
 802dfa4:	f7fe fc65 	bl	802c872 <_Bfree>
 802dfa8:	9805      	ldr	r0, [sp, #20]
 802dfaa:	4641      	mov	r1, r8
 802dfac:	f7fe fc61 	bl	802c872 <_Bfree>
 802dfb0:	9805      	ldr	r0, [sp, #20]
 802dfb2:	4621      	mov	r1, r4
 802dfb4:	f7fe fc5d 	bl	802c872 <_Bfree>
 802dfb8:	e618      	b.n	802dbec <_strtod_l+0x644>
 802dfba:	f1ba 0f01 	cmp.w	sl, #1
 802dfbe:	d103      	bne.n	802dfc8 <_strtod_l+0xa20>
 802dfc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802dfc2:	2b00      	cmp	r3, #0
 802dfc4:	f43f ada5 	beq.w	802db12 <_strtod_l+0x56a>
 802dfc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 802e078 <_strtod_l+0xad0>
 802dfcc:	4f35      	ldr	r7, [pc, #212]	@ (802e0a4 <_strtod_l+0xafc>)
 802dfce:	ed8d 7b06 	vstr	d7, [sp, #24]
 802dfd2:	2600      	movs	r6, #0
 802dfd4:	e7b1      	b.n	802df3a <_strtod_l+0x992>
 802dfd6:	4f34      	ldr	r7, [pc, #208]	@ (802e0a8 <_strtod_l+0xb00>)
 802dfd8:	2600      	movs	r6, #0
 802dfda:	e7aa      	b.n	802df32 <_strtod_l+0x98a>
 802dfdc:	4b32      	ldr	r3, [pc, #200]	@ (802e0a8 <_strtod_l+0xb00>)
 802dfde:	4630      	mov	r0, r6
 802dfe0:	4639      	mov	r1, r7
 802dfe2:	2200      	movs	r2, #0
 802dfe4:	f7d2 fb20 	bl	8000628 <__aeabi_dmul>
 802dfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802dfea:	4606      	mov	r6, r0
 802dfec:	460f      	mov	r7, r1
 802dfee:	2b00      	cmp	r3, #0
 802dff0:	d09f      	beq.n	802df32 <_strtod_l+0x98a>
 802dff2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802dff6:	e7a0      	b.n	802df3a <_strtod_l+0x992>
 802dff8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 802e080 <_strtod_l+0xad8>
 802dffc:	ed8d 7b06 	vstr	d7, [sp, #24]
 802e000:	ec57 6b17 	vmov	r6, r7, d7
 802e004:	e799      	b.n	802df3a <_strtod_l+0x992>
 802e006:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802e00a:	9b08      	ldr	r3, [sp, #32]
 802e00c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802e010:	2b00      	cmp	r3, #0
 802e012:	d1c1      	bne.n	802df98 <_strtod_l+0x9f0>
 802e014:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802e018:	0d1b      	lsrs	r3, r3, #20
 802e01a:	051b      	lsls	r3, r3, #20
 802e01c:	429d      	cmp	r5, r3
 802e01e:	d1bb      	bne.n	802df98 <_strtod_l+0x9f0>
 802e020:	4630      	mov	r0, r6
 802e022:	4639      	mov	r1, r7
 802e024:	f7d2 fec4 	bl	8000db0 <__aeabi_d2lz>
 802e028:	f7d2 fad0 	bl	80005cc <__aeabi_l2d>
 802e02c:	4602      	mov	r2, r0
 802e02e:	460b      	mov	r3, r1
 802e030:	4630      	mov	r0, r6
 802e032:	4639      	mov	r1, r7
 802e034:	f7d2 f940 	bl	80002b8 <__aeabi_dsub>
 802e038:	460b      	mov	r3, r1
 802e03a:	4602      	mov	r2, r0
 802e03c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 802e040:	f3cb 0613 	ubfx	r6, fp, #0, #20
 802e044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e046:	ea46 060a 	orr.w	r6, r6, sl
 802e04a:	431e      	orrs	r6, r3
 802e04c:	d06f      	beq.n	802e12e <_strtod_l+0xb86>
 802e04e:	a30e      	add	r3, pc, #56	@ (adr r3, 802e088 <_strtod_l+0xae0>)
 802e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e054:	f7d2 fd5a 	bl	8000b0c <__aeabi_dcmplt>
 802e058:	2800      	cmp	r0, #0
 802e05a:	f47f accf 	bne.w	802d9fc <_strtod_l+0x454>
 802e05e:	a30c      	add	r3, pc, #48	@ (adr r3, 802e090 <_strtod_l+0xae8>)
 802e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e068:	f7d2 fd6e 	bl	8000b48 <__aeabi_dcmpgt>
 802e06c:	2800      	cmp	r0, #0
 802e06e:	d093      	beq.n	802df98 <_strtod_l+0x9f0>
 802e070:	e4c4      	b.n	802d9fc <_strtod_l+0x454>
 802e072:	bf00      	nop
 802e074:	f3af 8000 	nop.w
 802e078:	00000000 	.word	0x00000000
 802e07c:	bff00000 	.word	0xbff00000
 802e080:	00000000 	.word	0x00000000
 802e084:	3ff00000 	.word	0x3ff00000
 802e088:	94a03595 	.word	0x94a03595
 802e08c:	3fdfffff 	.word	0x3fdfffff
 802e090:	35afe535 	.word	0x35afe535
 802e094:	3fe00000 	.word	0x3fe00000
 802e098:	000fffff 	.word	0x000fffff
 802e09c:	7ff00000 	.word	0x7ff00000
 802e0a0:	7fefffff 	.word	0x7fefffff
 802e0a4:	3ff00000 	.word	0x3ff00000
 802e0a8:	3fe00000 	.word	0x3fe00000
 802e0ac:	7fe00000 	.word	0x7fe00000
 802e0b0:	7c9fffff 	.word	0x7c9fffff
 802e0b4:	9b08      	ldr	r3, [sp, #32]
 802e0b6:	b323      	cbz	r3, 802e102 <_strtod_l+0xb5a>
 802e0b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802e0bc:	d821      	bhi.n	802e102 <_strtod_l+0xb5a>
 802e0be:	a328      	add	r3, pc, #160	@ (adr r3, 802e160 <_strtod_l+0xbb8>)
 802e0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0c4:	4630      	mov	r0, r6
 802e0c6:	4639      	mov	r1, r7
 802e0c8:	f7d2 fd2a 	bl	8000b20 <__aeabi_dcmple>
 802e0cc:	b1a0      	cbz	r0, 802e0f8 <_strtod_l+0xb50>
 802e0ce:	4639      	mov	r1, r7
 802e0d0:	4630      	mov	r0, r6
 802e0d2:	f7d2 fd81 	bl	8000bd8 <__aeabi_d2uiz>
 802e0d6:	2801      	cmp	r0, #1
 802e0d8:	bf38      	it	cc
 802e0da:	2001      	movcc	r0, #1
 802e0dc:	f7d2 fa2a 	bl	8000534 <__aeabi_ui2d>
 802e0e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e0e2:	4606      	mov	r6, r0
 802e0e4:	460f      	mov	r7, r1
 802e0e6:	b9fb      	cbnz	r3, 802e128 <_strtod_l+0xb80>
 802e0e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802e0ec:	9014      	str	r0, [sp, #80]	@ 0x50
 802e0ee:	9315      	str	r3, [sp, #84]	@ 0x54
 802e0f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 802e0f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802e0f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802e0fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802e0fe:	1b5b      	subs	r3, r3, r5
 802e100:	9311      	str	r3, [sp, #68]	@ 0x44
 802e102:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802e106:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802e10a:	f7fe feb3 	bl	802ce74 <__ulp>
 802e10e:	4650      	mov	r0, sl
 802e110:	ec53 2b10 	vmov	r2, r3, d0
 802e114:	4659      	mov	r1, fp
 802e116:	f7d2 fa87 	bl	8000628 <__aeabi_dmul>
 802e11a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802e11e:	f7d2 f8cd 	bl	80002bc <__adddf3>
 802e122:	4682      	mov	sl, r0
 802e124:	468b      	mov	fp, r1
 802e126:	e770      	b.n	802e00a <_strtod_l+0xa62>
 802e128:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 802e12c:	e7e0      	b.n	802e0f0 <_strtod_l+0xb48>
 802e12e:	a30e      	add	r3, pc, #56	@ (adr r3, 802e168 <_strtod_l+0xbc0>)
 802e130:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e134:	f7d2 fcea 	bl	8000b0c <__aeabi_dcmplt>
 802e138:	e798      	b.n	802e06c <_strtod_l+0xac4>
 802e13a:	2300      	movs	r3, #0
 802e13c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e13e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802e140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802e142:	6013      	str	r3, [r2, #0]
 802e144:	f7ff ba6d 	b.w	802d622 <_strtod_l+0x7a>
 802e148:	2a65      	cmp	r2, #101	@ 0x65
 802e14a:	f43f ab66 	beq.w	802d81a <_strtod_l+0x272>
 802e14e:	2a45      	cmp	r2, #69	@ 0x45
 802e150:	f43f ab63 	beq.w	802d81a <_strtod_l+0x272>
 802e154:	2301      	movs	r3, #1
 802e156:	f7ff bb9e 	b.w	802d896 <_strtod_l+0x2ee>
 802e15a:	bf00      	nop
 802e15c:	f3af 8000 	nop.w
 802e160:	ffc00000 	.word	0xffc00000
 802e164:	41dfffff 	.word	0x41dfffff
 802e168:	94a03595 	.word	0x94a03595
 802e16c:	3fcfffff 	.word	0x3fcfffff

0802e170 <_strtod_r>:
 802e170:	4b01      	ldr	r3, [pc, #4]	@ (802e178 <_strtod_r+0x8>)
 802e172:	f7ff ba19 	b.w	802d5a8 <_strtod_l>
 802e176:	bf00      	nop
 802e178:	200002c4 	.word	0x200002c4

0802e17c <_strtoul_l.constprop.0>:
 802e17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e180:	4e34      	ldr	r6, [pc, #208]	@ (802e254 <_strtoul_l.constprop.0+0xd8>)
 802e182:	4686      	mov	lr, r0
 802e184:	460d      	mov	r5, r1
 802e186:	4628      	mov	r0, r5
 802e188:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e18c:	5d37      	ldrb	r7, [r6, r4]
 802e18e:	f017 0708 	ands.w	r7, r7, #8
 802e192:	d1f8      	bne.n	802e186 <_strtoul_l.constprop.0+0xa>
 802e194:	2c2d      	cmp	r4, #45	@ 0x2d
 802e196:	d12f      	bne.n	802e1f8 <_strtoul_l.constprop.0+0x7c>
 802e198:	782c      	ldrb	r4, [r5, #0]
 802e19a:	2701      	movs	r7, #1
 802e19c:	1c85      	adds	r5, r0, #2
 802e19e:	f033 0010 	bics.w	r0, r3, #16
 802e1a2:	d109      	bne.n	802e1b8 <_strtoul_l.constprop.0+0x3c>
 802e1a4:	2c30      	cmp	r4, #48	@ 0x30
 802e1a6:	d12c      	bne.n	802e202 <_strtoul_l.constprop.0+0x86>
 802e1a8:	7828      	ldrb	r0, [r5, #0]
 802e1aa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802e1ae:	2858      	cmp	r0, #88	@ 0x58
 802e1b0:	d127      	bne.n	802e202 <_strtoul_l.constprop.0+0x86>
 802e1b2:	786c      	ldrb	r4, [r5, #1]
 802e1b4:	2310      	movs	r3, #16
 802e1b6:	3502      	adds	r5, #2
 802e1b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 802e1bc:	2600      	movs	r6, #0
 802e1be:	fbb8 f8f3 	udiv	r8, r8, r3
 802e1c2:	fb03 f908 	mul.w	r9, r3, r8
 802e1c6:	ea6f 0909 	mvn.w	r9, r9
 802e1ca:	4630      	mov	r0, r6
 802e1cc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802e1d0:	f1bc 0f09 	cmp.w	ip, #9
 802e1d4:	d81c      	bhi.n	802e210 <_strtoul_l.constprop.0+0x94>
 802e1d6:	4664      	mov	r4, ip
 802e1d8:	42a3      	cmp	r3, r4
 802e1da:	dd2a      	ble.n	802e232 <_strtoul_l.constprop.0+0xb6>
 802e1dc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 802e1e0:	d007      	beq.n	802e1f2 <_strtoul_l.constprop.0+0x76>
 802e1e2:	4580      	cmp	r8, r0
 802e1e4:	d322      	bcc.n	802e22c <_strtoul_l.constprop.0+0xb0>
 802e1e6:	d101      	bne.n	802e1ec <_strtoul_l.constprop.0+0x70>
 802e1e8:	45a1      	cmp	r9, r4
 802e1ea:	db1f      	blt.n	802e22c <_strtoul_l.constprop.0+0xb0>
 802e1ec:	fb00 4003 	mla	r0, r0, r3, r4
 802e1f0:	2601      	movs	r6, #1
 802e1f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e1f6:	e7e9      	b.n	802e1cc <_strtoul_l.constprop.0+0x50>
 802e1f8:	2c2b      	cmp	r4, #43	@ 0x2b
 802e1fa:	bf04      	itt	eq
 802e1fc:	782c      	ldrbeq	r4, [r5, #0]
 802e1fe:	1c85      	addeq	r5, r0, #2
 802e200:	e7cd      	b.n	802e19e <_strtoul_l.constprop.0+0x22>
 802e202:	2b00      	cmp	r3, #0
 802e204:	d1d8      	bne.n	802e1b8 <_strtoul_l.constprop.0+0x3c>
 802e206:	2c30      	cmp	r4, #48	@ 0x30
 802e208:	bf0c      	ite	eq
 802e20a:	2308      	moveq	r3, #8
 802e20c:	230a      	movne	r3, #10
 802e20e:	e7d3      	b.n	802e1b8 <_strtoul_l.constprop.0+0x3c>
 802e210:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802e214:	f1bc 0f19 	cmp.w	ip, #25
 802e218:	d801      	bhi.n	802e21e <_strtoul_l.constprop.0+0xa2>
 802e21a:	3c37      	subs	r4, #55	@ 0x37
 802e21c:	e7dc      	b.n	802e1d8 <_strtoul_l.constprop.0+0x5c>
 802e21e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802e222:	f1bc 0f19 	cmp.w	ip, #25
 802e226:	d804      	bhi.n	802e232 <_strtoul_l.constprop.0+0xb6>
 802e228:	3c57      	subs	r4, #87	@ 0x57
 802e22a:	e7d5      	b.n	802e1d8 <_strtoul_l.constprop.0+0x5c>
 802e22c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 802e230:	e7df      	b.n	802e1f2 <_strtoul_l.constprop.0+0x76>
 802e232:	1c73      	adds	r3, r6, #1
 802e234:	d106      	bne.n	802e244 <_strtoul_l.constprop.0+0xc8>
 802e236:	2322      	movs	r3, #34	@ 0x22
 802e238:	f8ce 3000 	str.w	r3, [lr]
 802e23c:	4630      	mov	r0, r6
 802e23e:	b932      	cbnz	r2, 802e24e <_strtoul_l.constprop.0+0xd2>
 802e240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802e244:	b107      	cbz	r7, 802e248 <_strtoul_l.constprop.0+0xcc>
 802e246:	4240      	negs	r0, r0
 802e248:	2a00      	cmp	r2, #0
 802e24a:	d0f9      	beq.n	802e240 <_strtoul_l.constprop.0+0xc4>
 802e24c:	b106      	cbz	r6, 802e250 <_strtoul_l.constprop.0+0xd4>
 802e24e:	1e69      	subs	r1, r5, #1
 802e250:	6011      	str	r1, [r2, #0]
 802e252:	e7f5      	b.n	802e240 <_strtoul_l.constprop.0+0xc4>
 802e254:	08034aa1 	.word	0x08034aa1

0802e258 <_strtoul_r>:
 802e258:	f7ff bf90 	b.w	802e17c <_strtoul_l.constprop.0>

0802e25c <strtoul>:
 802e25c:	4613      	mov	r3, r2
 802e25e:	460a      	mov	r2, r1
 802e260:	4601      	mov	r1, r0
 802e262:	4802      	ldr	r0, [pc, #8]	@ (802e26c <strtoul+0x10>)
 802e264:	6800      	ldr	r0, [r0, #0]
 802e266:	f7ff bf89 	b.w	802e17c <_strtoul_l.constprop.0>
 802e26a:	bf00      	nop
 802e26c:	20000430 	.word	0x20000430

0802e270 <__submore>:
 802e270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e274:	460c      	mov	r4, r1
 802e276:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 802e278:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 802e27c:	4299      	cmp	r1, r3
 802e27e:	d11d      	bne.n	802e2bc <__submore+0x4c>
 802e280:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802e284:	f7f9 ffba 	bl	80281fc <_malloc_r>
 802e288:	b918      	cbnz	r0, 802e292 <__submore+0x22>
 802e28a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802e296:	6363      	str	r3, [r4, #52]	@ 0x34
 802e298:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 802e29c:	6320      	str	r0, [r4, #48]	@ 0x30
 802e29e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 802e2a2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 802e2a6:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 802e2aa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 802e2ae:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 802e2b2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802e2b6:	6020      	str	r0, [r4, #0]
 802e2b8:	2000      	movs	r0, #0
 802e2ba:	e7e8      	b.n	802e28e <__submore+0x1e>
 802e2bc:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 802e2be:	0077      	lsls	r7, r6, #1
 802e2c0:	463a      	mov	r2, r7
 802e2c2:	f7fe ffab 	bl	802d21c <_realloc_r>
 802e2c6:	4605      	mov	r5, r0
 802e2c8:	2800      	cmp	r0, #0
 802e2ca:	d0de      	beq.n	802e28a <__submore+0x1a>
 802e2cc:	eb00 0806 	add.w	r8, r0, r6
 802e2d0:	4601      	mov	r1, r0
 802e2d2:	4632      	mov	r2, r6
 802e2d4:	4640      	mov	r0, r8
 802e2d6:	f7f8 ff77 	bl	80271c8 <memcpy>
 802e2da:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 802e2de:	f8c4 8000 	str.w	r8, [r4]
 802e2e2:	e7e9      	b.n	802e2b8 <__submore+0x48>

0802e2e4 <__ascii_wctomb>:
 802e2e4:	4603      	mov	r3, r0
 802e2e6:	4608      	mov	r0, r1
 802e2e8:	b141      	cbz	r1, 802e2fc <__ascii_wctomb+0x18>
 802e2ea:	2aff      	cmp	r2, #255	@ 0xff
 802e2ec:	d904      	bls.n	802e2f8 <__ascii_wctomb+0x14>
 802e2ee:	228a      	movs	r2, #138	@ 0x8a
 802e2f0:	601a      	str	r2, [r3, #0]
 802e2f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e2f6:	4770      	bx	lr
 802e2f8:	700a      	strb	r2, [r1, #0]
 802e2fa:	2001      	movs	r0, #1
 802e2fc:	4770      	bx	lr

0802e2fe <__swbuf_r>:
 802e2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e300:	460e      	mov	r6, r1
 802e302:	4614      	mov	r4, r2
 802e304:	4605      	mov	r5, r0
 802e306:	b118      	cbz	r0, 802e310 <__swbuf_r+0x12>
 802e308:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 802e30a:	b90b      	cbnz	r3, 802e310 <__swbuf_r+0x12>
 802e30c:	f7f7 fa7a 	bl	8025804 <__sinit>
 802e310:	69a3      	ldr	r3, [r4, #24]
 802e312:	60a3      	str	r3, [r4, #8]
 802e314:	89a3      	ldrh	r3, [r4, #12]
 802e316:	0719      	lsls	r1, r3, #28
 802e318:	d501      	bpl.n	802e31e <__swbuf_r+0x20>
 802e31a:	6923      	ldr	r3, [r4, #16]
 802e31c:	b943      	cbnz	r3, 802e330 <__swbuf_r+0x32>
 802e31e:	4621      	mov	r1, r4
 802e320:	4628      	mov	r0, r5
 802e322:	f7f7 fc2b 	bl	8025b7c <__swsetup_r>
 802e326:	b118      	cbz	r0, 802e330 <__swbuf_r+0x32>
 802e328:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802e32c:	4638      	mov	r0, r7
 802e32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e334:	b2f6      	uxtb	r6, r6
 802e336:	049a      	lsls	r2, r3, #18
 802e338:	4637      	mov	r7, r6
 802e33a:	d406      	bmi.n	802e34a <__swbuf_r+0x4c>
 802e33c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 802e340:	81a3      	strh	r3, [r4, #12]
 802e342:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802e344:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 802e348:	6663      	str	r3, [r4, #100]	@ 0x64
 802e34a:	6823      	ldr	r3, [r4, #0]
 802e34c:	6922      	ldr	r2, [r4, #16]
 802e34e:	1a98      	subs	r0, r3, r2
 802e350:	6963      	ldr	r3, [r4, #20]
 802e352:	4283      	cmp	r3, r0
 802e354:	dc05      	bgt.n	802e362 <__swbuf_r+0x64>
 802e356:	4621      	mov	r1, r4
 802e358:	4628      	mov	r0, r5
 802e35a:	f7f7 f911 	bl	8025580 <_fflush_r>
 802e35e:	2800      	cmp	r0, #0
 802e360:	d1e2      	bne.n	802e328 <__swbuf_r+0x2a>
 802e362:	68a3      	ldr	r3, [r4, #8]
 802e364:	3b01      	subs	r3, #1
 802e366:	60a3      	str	r3, [r4, #8]
 802e368:	6823      	ldr	r3, [r4, #0]
 802e36a:	1c5a      	adds	r2, r3, #1
 802e36c:	6022      	str	r2, [r4, #0]
 802e36e:	701e      	strb	r6, [r3, #0]
 802e370:	6962      	ldr	r2, [r4, #20]
 802e372:	1c43      	adds	r3, r0, #1
 802e374:	429a      	cmp	r2, r3
 802e376:	d004      	beq.n	802e382 <__swbuf_r+0x84>
 802e378:	89a3      	ldrh	r3, [r4, #12]
 802e37a:	07db      	lsls	r3, r3, #31
 802e37c:	d5d6      	bpl.n	802e32c <__swbuf_r+0x2e>
 802e37e:	2e0a      	cmp	r6, #10
 802e380:	d1d4      	bne.n	802e32c <__swbuf_r+0x2e>
 802e382:	4621      	mov	r1, r4
 802e384:	4628      	mov	r0, r5
 802e386:	f7f7 f8fb 	bl	8025580 <_fflush_r>
 802e38a:	2800      	cmp	r0, #0
 802e38c:	d0ce      	beq.n	802e32c <__swbuf_r+0x2e>
 802e38e:	e7cb      	b.n	802e328 <__swbuf_r+0x2a>

0802e390 <_raise_r>:
 802e390:	291f      	cmp	r1, #31
 802e392:	b538      	push	{r3, r4, r5, lr}
 802e394:	4605      	mov	r5, r0
 802e396:	460c      	mov	r4, r1
 802e398:	d904      	bls.n	802e3a4 <_raise_r+0x14>
 802e39a:	2316      	movs	r3, #22
 802e39c:	6003      	str	r3, [r0, #0]
 802e39e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e3a2:	bd38      	pop	{r3, r4, r5, pc}
 802e3a4:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 802e3a8:	b112      	cbz	r2, 802e3b0 <_raise_r+0x20>
 802e3aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e3ae:	b94b      	cbnz	r3, 802e3c4 <_raise_r+0x34>
 802e3b0:	4628      	mov	r0, r5
 802e3b2:	f000 f8fd 	bl	802e5b0 <_getpid_r>
 802e3b6:	4622      	mov	r2, r4
 802e3b8:	4601      	mov	r1, r0
 802e3ba:	4628      	mov	r0, r5
 802e3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e3c0:	f000 b8e4 	b.w	802e58c <_kill_r>
 802e3c4:	2b01      	cmp	r3, #1
 802e3c6:	d00a      	beq.n	802e3de <_raise_r+0x4e>
 802e3c8:	1c59      	adds	r1, r3, #1
 802e3ca:	d103      	bne.n	802e3d4 <_raise_r+0x44>
 802e3cc:	2316      	movs	r3, #22
 802e3ce:	6003      	str	r3, [r0, #0]
 802e3d0:	2001      	movs	r0, #1
 802e3d2:	e7e6      	b.n	802e3a2 <_raise_r+0x12>
 802e3d4:	2100      	movs	r1, #0
 802e3d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802e3da:	4620      	mov	r0, r4
 802e3dc:	4798      	blx	r3
 802e3de:	2000      	movs	r0, #0
 802e3e0:	e7df      	b.n	802e3a2 <_raise_r+0x12>
	...

0802e3e4 <raise>:
 802e3e4:	4b02      	ldr	r3, [pc, #8]	@ (802e3f0 <raise+0xc>)
 802e3e6:	4601      	mov	r1, r0
 802e3e8:	6818      	ldr	r0, [r3, #0]
 802e3ea:	f7ff bfd1 	b.w	802e390 <_raise_r>
 802e3ee:	bf00      	nop
 802e3f0:	20000430 	.word	0x20000430

0802e3f4 <__gettzinfo>:
 802e3f4:	4800      	ldr	r0, [pc, #0]	@ (802e3f8 <__gettzinfo+0x4>)
 802e3f6:	4770      	bx	lr
 802e3f8:	20000970 	.word	0x20000970

0802e3fc <gmtime_r>:
 802e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e400:	4a4d      	ldr	r2, [pc, #308]	@ (802e538 <gmtime_r+0x13c>)
 802e402:	460c      	mov	r4, r1
 802e404:	2300      	movs	r3, #0
 802e406:	e9d0 0100 	ldrd	r0, r1, [r0]
 802e40a:	f7d2 fc55 	bl	8000cb8 <__aeabi_ldivmod>
 802e40e:	2a00      	cmp	r2, #0
 802e410:	bfbc      	itt	lt
 802e412:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 802e416:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 802e41a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 802e41e:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 802e422:	fbb2 f3f1 	udiv	r3, r2, r1
 802e426:	fb01 2213 	mls	r2, r1, r3, r2
 802e42a:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 802e42e:	bfac      	ite	ge
 802e430:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 802e434:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 802e438:	60a3      	str	r3, [r4, #8]
 802e43a:	fbb2 f3f1 	udiv	r3, r2, r1
 802e43e:	fb01 2213 	mls	r2, r1, r3, r2
 802e442:	6063      	str	r3, [r4, #4]
 802e444:	6022      	str	r2, [r4, #0]
 802e446:	1cc3      	adds	r3, r0, #3
 802e448:	2207      	movs	r2, #7
 802e44a:	fb93 f2f2 	sdiv	r2, r3, r2
 802e44e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802e452:	1a9b      	subs	r3, r3, r2
 802e454:	bf48      	it	mi
 802e456:	3307      	addmi	r3, #7
 802e458:	2800      	cmp	r0, #0
 802e45a:	61a3      	str	r3, [r4, #24]
 802e45c:	bfb8      	it	lt
 802e45e:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 802e462:	4936      	ldr	r1, [pc, #216]	@ (802e53c <gmtime_r+0x140>)
 802e464:	bfae      	itee	ge
 802e466:	fb90 f1f1 	sdivge	r1, r0, r1
 802e46a:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 802e46e:	fb93 f1f1 	sdivlt	r1, r3, r1
 802e472:	4b33      	ldr	r3, [pc, #204]	@ (802e540 <gmtime_r+0x144>)
 802e474:	fb03 0001 	mla	r0, r3, r1, r0
 802e478:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 802e47c:	fbb0 f3f3 	udiv	r3, r0, r3
 802e480:	4403      	add	r3, r0
 802e482:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 802e486:	fbb0 f2fc 	udiv	r2, r0, ip
 802e48a:	1a9b      	subs	r3, r3, r2
 802e48c:	f240 176d 	movw	r7, #365	@ 0x16d
 802e490:	4a2c      	ldr	r2, [pc, #176]	@ (802e544 <gmtime_r+0x148>)
 802e492:	fbb0 f2f2 	udiv	r2, r0, r2
 802e496:	2664      	movs	r6, #100	@ 0x64
 802e498:	1a9b      	subs	r3, r3, r2
 802e49a:	fbb3 f2f7 	udiv	r2, r3, r7
 802e49e:	fbb3 f3fc 	udiv	r3, r3, ip
 802e4a2:	fbb2 f5f6 	udiv	r5, r2, r6
 802e4a6:	1aeb      	subs	r3, r5, r3
 802e4a8:	4403      	add	r3, r0
 802e4aa:	fb07 3312 	mls	r3, r7, r2, r3
 802e4ae:	2099      	movs	r0, #153	@ 0x99
 802e4b0:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 802e4b4:	3702      	adds	r7, #2
 802e4b6:	f103 0e01 	add.w	lr, r3, #1
 802e4ba:	fbb7 fcf0 	udiv	ip, r7, r0
 802e4be:	fb00 f00c 	mul.w	r0, r0, ip
 802e4c2:	3002      	adds	r0, #2
 802e4c4:	f04f 0805 	mov.w	r8, #5
 802e4c8:	fbb0 f0f8 	udiv	r0, r0, r8
 802e4cc:	ebae 0000 	sub.w	r0, lr, r0
 802e4d0:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 802e4d4:	4577      	cmp	r7, lr
 802e4d6:	bf8c      	ite	hi
 802e4d8:	f06f 0709 	mvnhi.w	r7, #9
 802e4dc:	2702      	movls	r7, #2
 802e4de:	4467      	add	r7, ip
 802e4e0:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 802e4e4:	fb0c 2101 	mla	r1, ip, r1, r2
 802e4e8:	2f01      	cmp	r7, #1
 802e4ea:	bf98      	it	ls
 802e4ec:	3101      	addls	r1, #1
 802e4ee:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 802e4f2:	d30c      	bcc.n	802e50e <gmtime_r+0x112>
 802e4f4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 802e4f8:	61e3      	str	r3, [r4, #28]
 802e4fa:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 802e4fe:	2300      	movs	r3, #0
 802e500:	60e0      	str	r0, [r4, #12]
 802e502:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802e506:	6223      	str	r3, [r4, #32]
 802e508:	4620      	mov	r0, r4
 802e50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e50e:	f012 0f03 	tst.w	r2, #3
 802e512:	d102      	bne.n	802e51a <gmtime_r+0x11e>
 802e514:	fb06 2515 	mls	r5, r6, r5, r2
 802e518:	b95d      	cbnz	r5, 802e532 <gmtime_r+0x136>
 802e51a:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 802e51e:	fbb2 f6f5 	udiv	r6, r2, r5
 802e522:	fb05 2216 	mls	r2, r5, r6, r2
 802e526:	fab2 f282 	clz	r2, r2
 802e52a:	0952      	lsrs	r2, r2, #5
 802e52c:	333b      	adds	r3, #59	@ 0x3b
 802e52e:	4413      	add	r3, r2
 802e530:	e7e2      	b.n	802e4f8 <gmtime_r+0xfc>
 802e532:	2201      	movs	r2, #1
 802e534:	e7fa      	b.n	802e52c <gmtime_r+0x130>
 802e536:	bf00      	nop
 802e538:	00015180 	.word	0x00015180
 802e53c:	00023ab1 	.word	0x00023ab1
 802e540:	fffdc54f 	.word	0xfffdc54f
 802e544:	00023ab0 	.word	0x00023ab0

0802e548 <_fstat_r>:
 802e548:	b538      	push	{r3, r4, r5, lr}
 802e54a:	4d07      	ldr	r5, [pc, #28]	@ (802e568 <_fstat_r+0x20>)
 802e54c:	2300      	movs	r3, #0
 802e54e:	4604      	mov	r4, r0
 802e550:	4608      	mov	r0, r1
 802e552:	4611      	mov	r1, r2
 802e554:	602b      	str	r3, [r5, #0]
 802e556:	f7d4 f94d 	bl	80027f4 <_fstat>
 802e55a:	1c43      	adds	r3, r0, #1
 802e55c:	d102      	bne.n	802e564 <_fstat_r+0x1c>
 802e55e:	682b      	ldr	r3, [r5, #0]
 802e560:	b103      	cbz	r3, 802e564 <_fstat_r+0x1c>
 802e562:	6023      	str	r3, [r4, #0]
 802e564:	bd38      	pop	{r3, r4, r5, pc}
 802e566:	bf00      	nop
 802e568:	200182d8 	.word	0x200182d8

0802e56c <_isatty_r>:
 802e56c:	b538      	push	{r3, r4, r5, lr}
 802e56e:	4d06      	ldr	r5, [pc, #24]	@ (802e588 <_isatty_r+0x1c>)
 802e570:	2300      	movs	r3, #0
 802e572:	4604      	mov	r4, r0
 802e574:	4608      	mov	r0, r1
 802e576:	602b      	str	r3, [r5, #0]
 802e578:	f7d4 f94c 	bl	8002814 <_isatty>
 802e57c:	1c43      	adds	r3, r0, #1
 802e57e:	d102      	bne.n	802e586 <_isatty_r+0x1a>
 802e580:	682b      	ldr	r3, [r5, #0]
 802e582:	b103      	cbz	r3, 802e586 <_isatty_r+0x1a>
 802e584:	6023      	str	r3, [r4, #0]
 802e586:	bd38      	pop	{r3, r4, r5, pc}
 802e588:	200182d8 	.word	0x200182d8

0802e58c <_kill_r>:
 802e58c:	b538      	push	{r3, r4, r5, lr}
 802e58e:	4d07      	ldr	r5, [pc, #28]	@ (802e5ac <_kill_r+0x20>)
 802e590:	2300      	movs	r3, #0
 802e592:	4604      	mov	r4, r0
 802e594:	4608      	mov	r0, r1
 802e596:	4611      	mov	r1, r2
 802e598:	602b      	str	r3, [r5, #0]
 802e59a:	f7d4 f8cb 	bl	8002734 <_kill>
 802e59e:	1c43      	adds	r3, r0, #1
 802e5a0:	d102      	bne.n	802e5a8 <_kill_r+0x1c>
 802e5a2:	682b      	ldr	r3, [r5, #0]
 802e5a4:	b103      	cbz	r3, 802e5a8 <_kill_r+0x1c>
 802e5a6:	6023      	str	r3, [r4, #0]
 802e5a8:	bd38      	pop	{r3, r4, r5, pc}
 802e5aa:	bf00      	nop
 802e5ac:	200182d8 	.word	0x200182d8

0802e5b0 <_getpid_r>:
 802e5b0:	f7d4 b8b8 	b.w	8002724 <_getpid>

0802e5b4 <_sbrk_r>:
 802e5b4:	b538      	push	{r3, r4, r5, lr}
 802e5b6:	4d06      	ldr	r5, [pc, #24]	@ (802e5d0 <_sbrk_r+0x1c>)
 802e5b8:	2300      	movs	r3, #0
 802e5ba:	4604      	mov	r4, r0
 802e5bc:	4608      	mov	r0, r1
 802e5be:	602b      	str	r3, [r5, #0]
 802e5c0:	f7d4 f940 	bl	8002844 <_sbrk>
 802e5c4:	1c43      	adds	r3, r0, #1
 802e5c6:	d102      	bne.n	802e5ce <_sbrk_r+0x1a>
 802e5c8:	682b      	ldr	r3, [r5, #0]
 802e5ca:	b103      	cbz	r3, 802e5ce <_sbrk_r+0x1a>
 802e5cc:	6023      	str	r3, [r4, #0]
 802e5ce:	bd38      	pop	{r3, r4, r5, pc}
 802e5d0:	200182d8 	.word	0x200182d8

0802e5d4 <sysconf>:
 802e5d4:	2808      	cmp	r0, #8
 802e5d6:	b508      	push	{r3, lr}
 802e5d8:	d006      	beq.n	802e5e8 <sysconf+0x14>
 802e5da:	f7f8 fdbd 	bl	8027158 <__errno>
 802e5de:	2316      	movs	r3, #22
 802e5e0:	6003      	str	r3, [r0, #0]
 802e5e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e5e6:	bd08      	pop	{r3, pc}
 802e5e8:	2080      	movs	r0, #128	@ 0x80
 802e5ea:	e7fc      	b.n	802e5e6 <sysconf+0x12>

0802e5ec <_strtoll_l.constprop.0>:
 802e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e5f0:	b085      	sub	sp, #20
 802e5f2:	4690      	mov	r8, r2
 802e5f4:	4a43      	ldr	r2, [pc, #268]	@ (802e704 <_strtoll_l.constprop.0+0x118>)
 802e5f6:	9002      	str	r0, [sp, #8]
 802e5f8:	4689      	mov	r9, r1
 802e5fa:	461e      	mov	r6, r3
 802e5fc:	460d      	mov	r5, r1
 802e5fe:	462b      	mov	r3, r5
 802e600:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e604:	5d17      	ldrb	r7, [r2, r4]
 802e606:	f017 0708 	ands.w	r7, r7, #8
 802e60a:	d1f8      	bne.n	802e5fe <_strtoll_l.constprop.0+0x12>
 802e60c:	2c2d      	cmp	r4, #45	@ 0x2d
 802e60e:	d149      	bne.n	802e6a4 <_strtoll_l.constprop.0+0xb8>
 802e610:	782c      	ldrb	r4, [r5, #0]
 802e612:	2701      	movs	r7, #1
 802e614:	1c9d      	adds	r5, r3, #2
 802e616:	f036 0310 	bics.w	r3, r6, #16
 802e61a:	d109      	bne.n	802e630 <_strtoll_l.constprop.0+0x44>
 802e61c:	2c30      	cmp	r4, #48	@ 0x30
 802e61e:	d146      	bne.n	802e6ae <_strtoll_l.constprop.0+0xc2>
 802e620:	782b      	ldrb	r3, [r5, #0]
 802e622:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e626:	2b58      	cmp	r3, #88	@ 0x58
 802e628:	d141      	bne.n	802e6ae <_strtoll_l.constprop.0+0xc2>
 802e62a:	786c      	ldrb	r4, [r5, #1]
 802e62c:	2610      	movs	r6, #16
 802e62e:	3502      	adds	r5, #2
 802e630:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 802e634:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 802e638:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 802e63c:	17f3      	asrs	r3, r6, #31
 802e63e:	4632      	mov	r2, r6
 802e640:	4658      	mov	r0, fp
 802e642:	4651      	mov	r1, sl
 802e644:	9303      	str	r3, [sp, #12]
 802e646:	f7d2 fb87 	bl	8000d58 <__aeabi_uldivmod>
 802e64a:	9201      	str	r2, [sp, #4]
 802e64c:	2200      	movs	r2, #0
 802e64e:	468e      	mov	lr, r1
 802e650:	4684      	mov	ip, r0
 802e652:	4611      	mov	r1, r2
 802e654:	4610      	mov	r0, r2
 802e656:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 802e65a:	2b09      	cmp	r3, #9
 802e65c:	d905      	bls.n	802e66a <_strtoll_l.constprop.0+0x7e>
 802e65e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 802e662:	2b19      	cmp	r3, #25
 802e664:	d82a      	bhi.n	802e6bc <_strtoll_l.constprop.0+0xd0>
 802e666:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 802e66a:	429e      	cmp	r6, r3
 802e66c:	dd30      	ble.n	802e6d0 <_strtoll_l.constprop.0+0xe4>
 802e66e:	1c54      	adds	r4, r2, #1
 802e670:	d015      	beq.n	802e69e <_strtoll_l.constprop.0+0xb2>
 802e672:	4584      	cmp	ip, r0
 802e674:	eb7e 0201 	sbcs.w	r2, lr, r1
 802e678:	d327      	bcc.n	802e6ca <_strtoll_l.constprop.0+0xde>
 802e67a:	458e      	cmp	lr, r1
 802e67c:	bf08      	it	eq
 802e67e:	4584      	cmpeq	ip, r0
 802e680:	d102      	bne.n	802e688 <_strtoll_l.constprop.0+0x9c>
 802e682:	9a01      	ldr	r2, [sp, #4]
 802e684:	429a      	cmp	r2, r3
 802e686:	db20      	blt.n	802e6ca <_strtoll_l.constprop.0+0xde>
 802e688:	9a03      	ldr	r2, [sp, #12]
 802e68a:	4371      	muls	r1, r6
 802e68c:	fb00 1102 	mla	r1, r0, r2, r1
 802e690:	fba6 0200 	umull	r0, r2, r6, r0
 802e694:	440a      	add	r2, r1
 802e696:	1818      	adds	r0, r3, r0
 802e698:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 802e69c:	2201      	movs	r2, #1
 802e69e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e6a2:	e7d8      	b.n	802e656 <_strtoll_l.constprop.0+0x6a>
 802e6a4:	2c2b      	cmp	r4, #43	@ 0x2b
 802e6a6:	bf04      	itt	eq
 802e6a8:	782c      	ldrbeq	r4, [r5, #0]
 802e6aa:	1c9d      	addeq	r5, r3, #2
 802e6ac:	e7b3      	b.n	802e616 <_strtoll_l.constprop.0+0x2a>
 802e6ae:	2e00      	cmp	r6, #0
 802e6b0:	d1be      	bne.n	802e630 <_strtoll_l.constprop.0+0x44>
 802e6b2:	2c30      	cmp	r4, #48	@ 0x30
 802e6b4:	bf0c      	ite	eq
 802e6b6:	2608      	moveq	r6, #8
 802e6b8:	260a      	movne	r6, #10
 802e6ba:	e7b9      	b.n	802e630 <_strtoll_l.constprop.0+0x44>
 802e6bc:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 802e6c0:	2b19      	cmp	r3, #25
 802e6c2:	d805      	bhi.n	802e6d0 <_strtoll_l.constprop.0+0xe4>
 802e6c4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 802e6c8:	e7cf      	b.n	802e66a <_strtoll_l.constprop.0+0x7e>
 802e6ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802e6ce:	e7e6      	b.n	802e69e <_strtoll_l.constprop.0+0xb2>
 802e6d0:	1c53      	adds	r3, r2, #1
 802e6d2:	d10a      	bne.n	802e6ea <_strtoll_l.constprop.0+0xfe>
 802e6d4:	9a02      	ldr	r2, [sp, #8]
 802e6d6:	2322      	movs	r3, #34	@ 0x22
 802e6d8:	6013      	str	r3, [r2, #0]
 802e6da:	4658      	mov	r0, fp
 802e6dc:	4651      	mov	r1, sl
 802e6de:	f1b8 0f00 	cmp.w	r8, #0
 802e6e2:	d10a      	bne.n	802e6fa <_strtoll_l.constprop.0+0x10e>
 802e6e4:	b005      	add	sp, #20
 802e6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e6ea:	b117      	cbz	r7, 802e6f2 <_strtoll_l.constprop.0+0x106>
 802e6ec:	4240      	negs	r0, r0
 802e6ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802e6f2:	f1b8 0f00 	cmp.w	r8, #0
 802e6f6:	d0f5      	beq.n	802e6e4 <_strtoll_l.constprop.0+0xf8>
 802e6f8:	b10a      	cbz	r2, 802e6fe <_strtoll_l.constprop.0+0x112>
 802e6fa:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 802e6fe:	f8c8 9000 	str.w	r9, [r8]
 802e702:	e7ef      	b.n	802e6e4 <_strtoll_l.constprop.0+0xf8>
 802e704:	08034aa1 	.word	0x08034aa1

0802e708 <_strtoll_r>:
 802e708:	f7ff bf70 	b.w	802e5ec <_strtoll_l.constprop.0>

0802e70c <__libc_fini_array>:
 802e70c:	b538      	push	{r3, r4, r5, lr}
 802e70e:	4d07      	ldr	r5, [pc, #28]	@ (802e72c <__libc_fini_array+0x20>)
 802e710:	4c07      	ldr	r4, [pc, #28]	@ (802e730 <__libc_fini_array+0x24>)
 802e712:	1b64      	subs	r4, r4, r5
 802e714:	10a4      	asrs	r4, r4, #2
 802e716:	b91c      	cbnz	r4, 802e720 <__libc_fini_array+0x14>
 802e718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e71c:	f000 bc9c 	b.w	802f058 <_fini>
 802e720:	3c01      	subs	r4, #1
 802e722:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802e726:	4798      	blx	r3
 802e728:	e7f5      	b.n	802e716 <__libc_fini_array+0xa>
 802e72a:	bf00      	nop
 802e72c:	08034eb8 	.word	0x08034eb8
 802e730:	08034ebc 	.word	0x08034ebc

0802e734 <_strtoull_l.constprop.0>:
 802e734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e738:	4691      	mov	r9, r2
 802e73a:	4a48      	ldr	r2, [pc, #288]	@ (802e85c <_strtoull_l.constprop.0+0x128>)
 802e73c:	9001      	str	r0, [sp, #4]
 802e73e:	468a      	mov	sl, r1
 802e740:	461e      	mov	r6, r3
 802e742:	460d      	mov	r5, r1
 802e744:	462b      	mov	r3, r5
 802e746:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e74a:	5d17      	ldrb	r7, [r2, r4]
 802e74c:	f017 0708 	ands.w	r7, r7, #8
 802e750:	d1f8      	bne.n	802e744 <_strtoull_l.constprop.0+0x10>
 802e752:	2c2d      	cmp	r4, #45	@ 0x2d
 802e754:	d14a      	bne.n	802e7ec <_strtoull_l.constprop.0+0xb8>
 802e756:	782c      	ldrb	r4, [r5, #0]
 802e758:	2701      	movs	r7, #1
 802e75a:	1c9d      	adds	r5, r3, #2
 802e75c:	f036 0310 	bics.w	r3, r6, #16
 802e760:	d109      	bne.n	802e776 <_strtoull_l.constprop.0+0x42>
 802e762:	2c30      	cmp	r4, #48	@ 0x30
 802e764:	d147      	bne.n	802e7f6 <_strtoull_l.constprop.0+0xc2>
 802e766:	782b      	ldrb	r3, [r5, #0]
 802e768:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802e76c:	2b58      	cmp	r3, #88	@ 0x58
 802e76e:	d142      	bne.n	802e7f6 <_strtoull_l.constprop.0+0xc2>
 802e770:	786c      	ldrb	r4, [r5, #1]
 802e772:	2610      	movs	r6, #16
 802e774:	3502      	adds	r5, #2
 802e776:	ea4f 7be6 	mov.w	fp, r6, asr #31
 802e77a:	4632      	mov	r2, r6
 802e77c:	465b      	mov	r3, fp
 802e77e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e782:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802e786:	f7d2 fae7 	bl	8000d58 <__aeabi_uldivmod>
 802e78a:	4632      	mov	r2, r6
 802e78c:	9000      	str	r0, [sp, #0]
 802e78e:	4688      	mov	r8, r1
 802e790:	465b      	mov	r3, fp
 802e792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e796:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802e79a:	f7d2 fadd 	bl	8000d58 <__aeabi_uldivmod>
 802e79e:	2300      	movs	r3, #0
 802e7a0:	4618      	mov	r0, r3
 802e7a2:	4619      	mov	r1, r3
 802e7a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802e7a8:	f1bc 0f09 	cmp.w	ip, #9
 802e7ac:	d82a      	bhi.n	802e804 <_strtoull_l.constprop.0+0xd0>
 802e7ae:	4664      	mov	r4, ip
 802e7b0:	42a6      	cmp	r6, r4
 802e7b2:	dd38      	ble.n	802e826 <_strtoull_l.constprop.0+0xf2>
 802e7b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802e7b8:	d015      	beq.n	802e7e6 <_strtoull_l.constprop.0+0xb2>
 802e7ba:	9b00      	ldr	r3, [sp, #0]
 802e7bc:	4283      	cmp	r3, r0
 802e7be:	eb78 0301 	sbcs.w	r3, r8, r1
 802e7c2:	d32d      	bcc.n	802e820 <_strtoull_l.constprop.0+0xec>
 802e7c4:	9b00      	ldr	r3, [sp, #0]
 802e7c6:	4588      	cmp	r8, r1
 802e7c8:	bf08      	it	eq
 802e7ca:	4283      	cmpeq	r3, r0
 802e7cc:	d101      	bne.n	802e7d2 <_strtoull_l.constprop.0+0x9e>
 802e7ce:	42a2      	cmp	r2, r4
 802e7d0:	db26      	blt.n	802e820 <_strtoull_l.constprop.0+0xec>
 802e7d2:	4371      	muls	r1, r6
 802e7d4:	fb00 110b 	mla	r1, r0, fp, r1
 802e7d8:	fba6 0300 	umull	r0, r3, r6, r0
 802e7dc:	4419      	add	r1, r3
 802e7de:	1820      	adds	r0, r4, r0
 802e7e0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802e7e4:	2301      	movs	r3, #1
 802e7e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 802e7ea:	e7db      	b.n	802e7a4 <_strtoull_l.constprop.0+0x70>
 802e7ec:	2c2b      	cmp	r4, #43	@ 0x2b
 802e7ee:	bf04      	itt	eq
 802e7f0:	782c      	ldrbeq	r4, [r5, #0]
 802e7f2:	1c9d      	addeq	r5, r3, #2
 802e7f4:	e7b2      	b.n	802e75c <_strtoull_l.constprop.0+0x28>
 802e7f6:	2e00      	cmp	r6, #0
 802e7f8:	d1bd      	bne.n	802e776 <_strtoull_l.constprop.0+0x42>
 802e7fa:	2c30      	cmp	r4, #48	@ 0x30
 802e7fc:	bf0c      	ite	eq
 802e7fe:	2608      	moveq	r6, #8
 802e800:	260a      	movne	r6, #10
 802e802:	e7b8      	b.n	802e776 <_strtoull_l.constprop.0+0x42>
 802e804:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802e808:	f1bc 0f19 	cmp.w	ip, #25
 802e80c:	d801      	bhi.n	802e812 <_strtoull_l.constprop.0+0xde>
 802e80e:	3c37      	subs	r4, #55	@ 0x37
 802e810:	e7ce      	b.n	802e7b0 <_strtoull_l.constprop.0+0x7c>
 802e812:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802e816:	f1bc 0f19 	cmp.w	ip, #25
 802e81a:	d804      	bhi.n	802e826 <_strtoull_l.constprop.0+0xf2>
 802e81c:	3c57      	subs	r4, #87	@ 0x57
 802e81e:	e7c7      	b.n	802e7b0 <_strtoull_l.constprop.0+0x7c>
 802e820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802e824:	e7df      	b.n	802e7e6 <_strtoull_l.constprop.0+0xb2>
 802e826:	1c5a      	adds	r2, r3, #1
 802e828:	d10a      	bne.n	802e840 <_strtoull_l.constprop.0+0x10c>
 802e82a:	9901      	ldr	r1, [sp, #4]
 802e82c:	2222      	movs	r2, #34	@ 0x22
 802e82e:	600a      	str	r2, [r1, #0]
 802e830:	4618      	mov	r0, r3
 802e832:	4619      	mov	r1, r3
 802e834:	f1b9 0f00 	cmp.w	r9, #0
 802e838:	d10a      	bne.n	802e850 <_strtoull_l.constprop.0+0x11c>
 802e83a:	b003      	add	sp, #12
 802e83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e840:	b117      	cbz	r7, 802e848 <_strtoull_l.constprop.0+0x114>
 802e842:	4240      	negs	r0, r0
 802e844:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802e848:	f1b9 0f00 	cmp.w	r9, #0
 802e84c:	d0f5      	beq.n	802e83a <_strtoull_l.constprop.0+0x106>
 802e84e:	b10b      	cbz	r3, 802e854 <_strtoull_l.constprop.0+0x120>
 802e850:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 802e854:	f8c9 a000 	str.w	sl, [r9]
 802e858:	e7ef      	b.n	802e83a <_strtoull_l.constprop.0+0x106>
 802e85a:	bf00      	nop
 802e85c:	08034aa1 	.word	0x08034aa1

0802e860 <_strtoull_r>:
 802e860:	f7ff bf68 	b.w	802e734 <_strtoull_l.constprop.0>

0802e864 <_mbrtowc_r>:
 802e864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802e866:	4c0a      	ldr	r4, [pc, #40]	@ (802e890 <_mbrtowc_r+0x2c>)
 802e868:	9e08      	ldr	r6, [sp, #32]
 802e86a:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 802e86e:	9600      	str	r6, [sp, #0]
 802e870:	4605      	mov	r5, r0
 802e872:	4614      	mov	r4, r2
 802e874:	b912      	cbnz	r2, 802e87c <_mbrtowc_r+0x18>
 802e876:	4a07      	ldr	r2, [pc, #28]	@ (802e894 <_mbrtowc_r+0x30>)
 802e878:	2301      	movs	r3, #1
 802e87a:	4621      	mov	r1, r4
 802e87c:	47b8      	blx	r7
 802e87e:	1c43      	adds	r3, r0, #1
 802e880:	bf01      	itttt	eq
 802e882:	2300      	moveq	r3, #0
 802e884:	6033      	streq	r3, [r6, #0]
 802e886:	238a      	moveq	r3, #138	@ 0x8a
 802e888:	602b      	streq	r3, [r5, #0]
 802e88a:	b003      	add	sp, #12
 802e88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e88e:	bf00      	nop
 802e890:	200002c4 	.word	0x200002c4
 802e894:	080346e3 	.word	0x080346e3

0802e898 <iswspace>:
 802e898:	2100      	movs	r1, #0
 802e89a:	f000 b801 	b.w	802e8a0 <iswspace_l>
	...

0802e8a0 <iswspace_l>:
 802e8a0:	28ff      	cmp	r0, #255	@ 0xff
 802e8a2:	bf9d      	ittte	ls
 802e8a4:	4b02      	ldrls	r3, [pc, #8]	@ (802e8b0 <iswspace_l+0x10>)
 802e8a6:	5c18      	ldrbls	r0, [r3, r0]
 802e8a8:	f000 0008 	andls.w	r0, r0, #8
 802e8ac:	2000      	movhi	r0, #0
 802e8ae:	4770      	bx	lr
 802e8b0:	08034aa1 	.word	0x08034aa1

0802e8b4 <__register_exitproc>:
 802e8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e8b8:	f8df a074 	ldr.w	sl, [pc, #116]	@ 802e930 <__register_exitproc+0x7c>
 802e8bc:	4606      	mov	r6, r0
 802e8be:	f8da 0000 	ldr.w	r0, [sl]
 802e8c2:	4698      	mov	r8, r3
 802e8c4:	460f      	mov	r7, r1
 802e8c6:	4691      	mov	r9, r2
 802e8c8:	f7f8 fc7b 	bl	80271c2 <__retarget_lock_acquire_recursive>
 802e8cc:	4b16      	ldr	r3, [pc, #88]	@ (802e928 <__register_exitproc+0x74>)
 802e8ce:	681c      	ldr	r4, [r3, #0]
 802e8d0:	b90c      	cbnz	r4, 802e8d6 <__register_exitproc+0x22>
 802e8d2:	4c16      	ldr	r4, [pc, #88]	@ (802e92c <__register_exitproc+0x78>)
 802e8d4:	601c      	str	r4, [r3, #0]
 802e8d6:	6865      	ldr	r5, [r4, #4]
 802e8d8:	f8da 0000 	ldr.w	r0, [sl]
 802e8dc:	2d1f      	cmp	r5, #31
 802e8de:	dd05      	ble.n	802e8ec <__register_exitproc+0x38>
 802e8e0:	f7f8 fc71 	bl	80271c6 <__retarget_lock_release_recursive>
 802e8e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802e8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e8ec:	b19e      	cbz	r6, 802e916 <__register_exitproc+0x62>
 802e8ee:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 802e8f2:	2201      	movs	r2, #1
 802e8f4:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 802e8f8:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 802e8fc:	40aa      	lsls	r2, r5
 802e8fe:	4313      	orrs	r3, r2
 802e900:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 802e904:	2e02      	cmp	r6, #2
 802e906:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 802e90a:	bf02      	ittt	eq
 802e90c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 802e910:	4313      	orreq	r3, r2
 802e912:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 802e916:	1c6b      	adds	r3, r5, #1
 802e918:	3502      	adds	r5, #2
 802e91a:	6063      	str	r3, [r4, #4]
 802e91c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 802e920:	f7f8 fc51 	bl	80271c6 <__retarget_lock_release_recursive>
 802e924:	2000      	movs	r0, #0
 802e926:	e7df      	b.n	802e8e8 <__register_exitproc+0x34>
 802e928:	200182e4 	.word	0x200182e4
 802e92c:	2001831c 	.word	0x2001831c
 802e930:	20000558 	.word	0x20000558
 802e934:	00000000 	.word	0x00000000

0802e938 <nan>:
 802e938:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 802e940 <nan+0x8>
 802e93c:	4770      	bx	lr
 802e93e:	bf00      	nop
 802e940:	00000000 	.word	0x00000000
 802e944:	7ff80000 	.word	0x7ff80000

0802e948 <nanf>:
 802e948:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802e950 <nanf+0x8>
 802e94c:	4770      	bx	lr
 802e94e:	bf00      	nop
 802e950:	7fc00000 	.word	0x7fc00000

0802e954 <_calloc_r>:
 802e954:	b538      	push	{r3, r4, r5, lr}
 802e956:	fba1 1502 	umull	r1, r5, r1, r2
 802e95a:	b935      	cbnz	r5, 802e96a <_calloc_r+0x16>
 802e95c:	f7f9 fc4e 	bl	80281fc <_malloc_r>
 802e960:	4604      	mov	r4, r0
 802e962:	b938      	cbnz	r0, 802e974 <_calloc_r+0x20>
 802e964:	2400      	movs	r4, #0
 802e966:	4620      	mov	r0, r4
 802e968:	bd38      	pop	{r3, r4, r5, pc}
 802e96a:	f7f8 fbf5 	bl	8027158 <__errno>
 802e96e:	230c      	movs	r3, #12
 802e970:	6003      	str	r3, [r0, #0]
 802e972:	e7f7      	b.n	802e964 <_calloc_r+0x10>
 802e974:	f850 2c04 	ldr.w	r2, [r0, #-4]
 802e978:	f022 0203 	bic.w	r2, r2, #3
 802e97c:	3a04      	subs	r2, #4
 802e97e:	2a24      	cmp	r2, #36	@ 0x24
 802e980:	d819      	bhi.n	802e9b6 <_calloc_r+0x62>
 802e982:	2a13      	cmp	r2, #19
 802e984:	d915      	bls.n	802e9b2 <_calloc_r+0x5e>
 802e986:	2a1b      	cmp	r2, #27
 802e988:	e9c0 5500 	strd	r5, r5, [r0]
 802e98c:	d806      	bhi.n	802e99c <_calloc_r+0x48>
 802e98e:	f100 0308 	add.w	r3, r0, #8
 802e992:	2200      	movs	r2, #0
 802e994:	e9c3 2200 	strd	r2, r2, [r3]
 802e998:	609a      	str	r2, [r3, #8]
 802e99a:	e7e4      	b.n	802e966 <_calloc_r+0x12>
 802e99c:	2a24      	cmp	r2, #36	@ 0x24
 802e99e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802e9a2:	bf11      	iteee	ne
 802e9a4:	f100 0310 	addne.w	r3, r0, #16
 802e9a8:	6105      	streq	r5, [r0, #16]
 802e9aa:	f100 0318 	addeq.w	r3, r0, #24
 802e9ae:	6145      	streq	r5, [r0, #20]
 802e9b0:	e7ef      	b.n	802e992 <_calloc_r+0x3e>
 802e9b2:	4603      	mov	r3, r0
 802e9b4:	e7ed      	b.n	802e992 <_calloc_r+0x3e>
 802e9b6:	4629      	mov	r1, r5
 802e9b8:	f7f7 f9ca 	bl	8025d50 <memset>
 802e9bc:	e7d3      	b.n	802e966 <_calloc_r+0x12>
	...

0802e9c0 <__env_lock>:
 802e9c0:	4801      	ldr	r0, [pc, #4]	@ (802e9c8 <__env_lock+0x8>)
 802e9c2:	f7f8 bbfe 	b.w	80271c2 <__retarget_lock_acquire_recursive>
 802e9c6:	bf00      	nop
 802e9c8:	200182dd 	.word	0x200182dd

0802e9cc <__env_unlock>:
 802e9cc:	4801      	ldr	r0, [pc, #4]	@ (802e9d4 <__env_unlock+0x8>)
 802e9ce:	f7f8 bbfa 	b.w	80271c6 <__retarget_lock_release_recursive>
 802e9d2:	bf00      	nop
 802e9d4:	200182dd 	.word	0x200182dd

0802e9d8 <rshift>:
 802e9d8:	6903      	ldr	r3, [r0, #16]
 802e9da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802e9de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802e9e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 802e9e6:	f100 0414 	add.w	r4, r0, #20
 802e9ea:	dd45      	ble.n	802ea78 <rshift+0xa0>
 802e9ec:	f011 011f 	ands.w	r1, r1, #31
 802e9f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802e9f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802e9f8:	d10c      	bne.n	802ea14 <rshift+0x3c>
 802e9fa:	f100 0710 	add.w	r7, r0, #16
 802e9fe:	4629      	mov	r1, r5
 802ea00:	42b1      	cmp	r1, r6
 802ea02:	d334      	bcc.n	802ea6e <rshift+0x96>
 802ea04:	1a9b      	subs	r3, r3, r2
 802ea06:	009b      	lsls	r3, r3, #2
 802ea08:	1eea      	subs	r2, r5, #3
 802ea0a:	4296      	cmp	r6, r2
 802ea0c:	bf38      	it	cc
 802ea0e:	2300      	movcc	r3, #0
 802ea10:	4423      	add	r3, r4
 802ea12:	e015      	b.n	802ea40 <rshift+0x68>
 802ea14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 802ea18:	f1c1 0820 	rsb	r8, r1, #32
 802ea1c:	40cf      	lsrs	r7, r1
 802ea1e:	f105 0e04 	add.w	lr, r5, #4
 802ea22:	46a1      	mov	r9, r4
 802ea24:	4576      	cmp	r6, lr
 802ea26:	46f4      	mov	ip, lr
 802ea28:	d815      	bhi.n	802ea56 <rshift+0x7e>
 802ea2a:	1a9a      	subs	r2, r3, r2
 802ea2c:	0092      	lsls	r2, r2, #2
 802ea2e:	3a04      	subs	r2, #4
 802ea30:	3501      	adds	r5, #1
 802ea32:	42ae      	cmp	r6, r5
 802ea34:	bf38      	it	cc
 802ea36:	2200      	movcc	r2, #0
 802ea38:	18a3      	adds	r3, r4, r2
 802ea3a:	50a7      	str	r7, [r4, r2]
 802ea3c:	b107      	cbz	r7, 802ea40 <rshift+0x68>
 802ea3e:	3304      	adds	r3, #4
 802ea40:	1b1a      	subs	r2, r3, r4
 802ea42:	42a3      	cmp	r3, r4
 802ea44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 802ea48:	bf08      	it	eq
 802ea4a:	2300      	moveq	r3, #0
 802ea4c:	6102      	str	r2, [r0, #16]
 802ea4e:	bf08      	it	eq
 802ea50:	6143      	streq	r3, [r0, #20]
 802ea52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ea56:	f8dc c000 	ldr.w	ip, [ip]
 802ea5a:	fa0c fc08 	lsl.w	ip, ip, r8
 802ea5e:	ea4c 0707 	orr.w	r7, ip, r7
 802ea62:	f849 7b04 	str.w	r7, [r9], #4
 802ea66:	f85e 7b04 	ldr.w	r7, [lr], #4
 802ea6a:	40cf      	lsrs	r7, r1
 802ea6c:	e7da      	b.n	802ea24 <rshift+0x4c>
 802ea6e:	f851 cb04 	ldr.w	ip, [r1], #4
 802ea72:	f847 cf04 	str.w	ip, [r7, #4]!
 802ea76:	e7c3      	b.n	802ea00 <rshift+0x28>
 802ea78:	4623      	mov	r3, r4
 802ea7a:	e7e1      	b.n	802ea40 <rshift+0x68>

0802ea7c <__hexdig_fun>:
 802ea7c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 802ea80:	2b09      	cmp	r3, #9
 802ea82:	d802      	bhi.n	802ea8a <__hexdig_fun+0xe>
 802ea84:	3820      	subs	r0, #32
 802ea86:	b2c0      	uxtb	r0, r0
 802ea88:	4770      	bx	lr
 802ea8a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802ea8e:	2b05      	cmp	r3, #5
 802ea90:	d801      	bhi.n	802ea96 <__hexdig_fun+0x1a>
 802ea92:	3847      	subs	r0, #71	@ 0x47
 802ea94:	e7f7      	b.n	802ea86 <__hexdig_fun+0xa>
 802ea96:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802ea9a:	2b05      	cmp	r3, #5
 802ea9c:	d801      	bhi.n	802eaa2 <__hexdig_fun+0x26>
 802ea9e:	3827      	subs	r0, #39	@ 0x27
 802eaa0:	e7f1      	b.n	802ea86 <__hexdig_fun+0xa>
 802eaa2:	2000      	movs	r0, #0
 802eaa4:	4770      	bx	lr
	...

0802eaa8 <__gethex>:
 802eaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eaac:	b085      	sub	sp, #20
 802eaae:	468a      	mov	sl, r1
 802eab0:	9302      	str	r3, [sp, #8]
 802eab2:	680b      	ldr	r3, [r1, #0]
 802eab4:	9001      	str	r0, [sp, #4]
 802eab6:	4690      	mov	r8, r2
 802eab8:	1c9c      	adds	r4, r3, #2
 802eaba:	46a1      	mov	r9, r4
 802eabc:	f814 0b01 	ldrb.w	r0, [r4], #1
 802eac0:	2830      	cmp	r0, #48	@ 0x30
 802eac2:	d0fa      	beq.n	802eaba <__gethex+0x12>
 802eac4:	eba9 0303 	sub.w	r3, r9, r3
 802eac8:	f1a3 0b02 	sub.w	fp, r3, #2
 802eacc:	f7ff ffd6 	bl	802ea7c <__hexdig_fun>
 802ead0:	4605      	mov	r5, r0
 802ead2:	2800      	cmp	r0, #0
 802ead4:	d168      	bne.n	802eba8 <__gethex+0x100>
 802ead6:	49a0      	ldr	r1, [pc, #640]	@ (802ed58 <__gethex+0x2b0>)
 802ead8:	2201      	movs	r2, #1
 802eada:	4648      	mov	r0, r9
 802eadc:	f7f7 f96d 	bl	8025dba <strncmp>
 802eae0:	4607      	mov	r7, r0
 802eae2:	2800      	cmp	r0, #0
 802eae4:	d167      	bne.n	802ebb6 <__gethex+0x10e>
 802eae6:	f899 0001 	ldrb.w	r0, [r9, #1]
 802eaea:	4626      	mov	r6, r4
 802eaec:	f7ff ffc6 	bl	802ea7c <__hexdig_fun>
 802eaf0:	2800      	cmp	r0, #0
 802eaf2:	d062      	beq.n	802ebba <__gethex+0x112>
 802eaf4:	4623      	mov	r3, r4
 802eaf6:	7818      	ldrb	r0, [r3, #0]
 802eaf8:	2830      	cmp	r0, #48	@ 0x30
 802eafa:	4699      	mov	r9, r3
 802eafc:	f103 0301 	add.w	r3, r3, #1
 802eb00:	d0f9      	beq.n	802eaf6 <__gethex+0x4e>
 802eb02:	f7ff ffbb 	bl	802ea7c <__hexdig_fun>
 802eb06:	fab0 f580 	clz	r5, r0
 802eb0a:	096d      	lsrs	r5, r5, #5
 802eb0c:	f04f 0b01 	mov.w	fp, #1
 802eb10:	464a      	mov	r2, r9
 802eb12:	4616      	mov	r6, r2
 802eb14:	3201      	adds	r2, #1
 802eb16:	7830      	ldrb	r0, [r6, #0]
 802eb18:	f7ff ffb0 	bl	802ea7c <__hexdig_fun>
 802eb1c:	2800      	cmp	r0, #0
 802eb1e:	d1f8      	bne.n	802eb12 <__gethex+0x6a>
 802eb20:	498d      	ldr	r1, [pc, #564]	@ (802ed58 <__gethex+0x2b0>)
 802eb22:	2201      	movs	r2, #1
 802eb24:	4630      	mov	r0, r6
 802eb26:	f7f7 f948 	bl	8025dba <strncmp>
 802eb2a:	2800      	cmp	r0, #0
 802eb2c:	d13f      	bne.n	802ebae <__gethex+0x106>
 802eb2e:	b944      	cbnz	r4, 802eb42 <__gethex+0x9a>
 802eb30:	1c74      	adds	r4, r6, #1
 802eb32:	4622      	mov	r2, r4
 802eb34:	4616      	mov	r6, r2
 802eb36:	3201      	adds	r2, #1
 802eb38:	7830      	ldrb	r0, [r6, #0]
 802eb3a:	f7ff ff9f 	bl	802ea7c <__hexdig_fun>
 802eb3e:	2800      	cmp	r0, #0
 802eb40:	d1f8      	bne.n	802eb34 <__gethex+0x8c>
 802eb42:	1ba4      	subs	r4, r4, r6
 802eb44:	00a7      	lsls	r7, r4, #2
 802eb46:	7833      	ldrb	r3, [r6, #0]
 802eb48:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802eb4c:	2b50      	cmp	r3, #80	@ 0x50
 802eb4e:	d13e      	bne.n	802ebce <__gethex+0x126>
 802eb50:	7873      	ldrb	r3, [r6, #1]
 802eb52:	2b2b      	cmp	r3, #43	@ 0x2b
 802eb54:	d033      	beq.n	802ebbe <__gethex+0x116>
 802eb56:	2b2d      	cmp	r3, #45	@ 0x2d
 802eb58:	d034      	beq.n	802ebc4 <__gethex+0x11c>
 802eb5a:	1c71      	adds	r1, r6, #1
 802eb5c:	2400      	movs	r4, #0
 802eb5e:	7808      	ldrb	r0, [r1, #0]
 802eb60:	f7ff ff8c 	bl	802ea7c <__hexdig_fun>
 802eb64:	1e43      	subs	r3, r0, #1
 802eb66:	b2db      	uxtb	r3, r3
 802eb68:	2b18      	cmp	r3, #24
 802eb6a:	d830      	bhi.n	802ebce <__gethex+0x126>
 802eb6c:	f1a0 0210 	sub.w	r2, r0, #16
 802eb70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 802eb74:	f7ff ff82 	bl	802ea7c <__hexdig_fun>
 802eb78:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 802eb7c:	fa5f fc8c 	uxtb.w	ip, ip
 802eb80:	f1bc 0f18 	cmp.w	ip, #24
 802eb84:	f04f 030a 	mov.w	r3, #10
 802eb88:	d91e      	bls.n	802ebc8 <__gethex+0x120>
 802eb8a:	b104      	cbz	r4, 802eb8e <__gethex+0xe6>
 802eb8c:	4252      	negs	r2, r2
 802eb8e:	4417      	add	r7, r2
 802eb90:	f8ca 1000 	str.w	r1, [sl]
 802eb94:	b1ed      	cbz	r5, 802ebd2 <__gethex+0x12a>
 802eb96:	f1bb 0f00 	cmp.w	fp, #0
 802eb9a:	bf0c      	ite	eq
 802eb9c:	2506      	moveq	r5, #6
 802eb9e:	2500      	movne	r5, #0
 802eba0:	4628      	mov	r0, r5
 802eba2:	b005      	add	sp, #20
 802eba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802eba8:	2500      	movs	r5, #0
 802ebaa:	462c      	mov	r4, r5
 802ebac:	e7b0      	b.n	802eb10 <__gethex+0x68>
 802ebae:	2c00      	cmp	r4, #0
 802ebb0:	d1c7      	bne.n	802eb42 <__gethex+0x9a>
 802ebb2:	4627      	mov	r7, r4
 802ebb4:	e7c7      	b.n	802eb46 <__gethex+0x9e>
 802ebb6:	464e      	mov	r6, r9
 802ebb8:	462f      	mov	r7, r5
 802ebba:	2501      	movs	r5, #1
 802ebbc:	e7c3      	b.n	802eb46 <__gethex+0x9e>
 802ebbe:	2400      	movs	r4, #0
 802ebc0:	1cb1      	adds	r1, r6, #2
 802ebc2:	e7cc      	b.n	802eb5e <__gethex+0xb6>
 802ebc4:	2401      	movs	r4, #1
 802ebc6:	e7fb      	b.n	802ebc0 <__gethex+0x118>
 802ebc8:	fb03 0002 	mla	r0, r3, r2, r0
 802ebcc:	e7ce      	b.n	802eb6c <__gethex+0xc4>
 802ebce:	4631      	mov	r1, r6
 802ebd0:	e7de      	b.n	802eb90 <__gethex+0xe8>
 802ebd2:	eba6 0309 	sub.w	r3, r6, r9
 802ebd6:	3b01      	subs	r3, #1
 802ebd8:	4629      	mov	r1, r5
 802ebda:	2b07      	cmp	r3, #7
 802ebdc:	dc0a      	bgt.n	802ebf4 <__gethex+0x14c>
 802ebde:	9801      	ldr	r0, [sp, #4]
 802ebe0:	f7fd fe22 	bl	802c828 <_Balloc>
 802ebe4:	4604      	mov	r4, r0
 802ebe6:	b940      	cbnz	r0, 802ebfa <__gethex+0x152>
 802ebe8:	4b5c      	ldr	r3, [pc, #368]	@ (802ed5c <__gethex+0x2b4>)
 802ebea:	4602      	mov	r2, r0
 802ebec:	21e4      	movs	r1, #228	@ 0xe4
 802ebee:	485c      	ldr	r0, [pc, #368]	@ (802ed60 <__gethex+0x2b8>)
 802ebf0:	f7f4 fb5a 	bl	80232a8 <__assert_func>
 802ebf4:	3101      	adds	r1, #1
 802ebf6:	105b      	asrs	r3, r3, #1
 802ebf8:	e7ef      	b.n	802ebda <__gethex+0x132>
 802ebfa:	f100 0a14 	add.w	sl, r0, #20
 802ebfe:	2300      	movs	r3, #0
 802ec00:	4655      	mov	r5, sl
 802ec02:	469b      	mov	fp, r3
 802ec04:	45b1      	cmp	r9, r6
 802ec06:	d337      	bcc.n	802ec78 <__gethex+0x1d0>
 802ec08:	f845 bb04 	str.w	fp, [r5], #4
 802ec0c:	eba5 050a 	sub.w	r5, r5, sl
 802ec10:	10ad      	asrs	r5, r5, #2
 802ec12:	6125      	str	r5, [r4, #16]
 802ec14:	4658      	mov	r0, fp
 802ec16:	f7fd fec5 	bl	802c9a4 <__hi0bits>
 802ec1a:	016d      	lsls	r5, r5, #5
 802ec1c:	f8d8 6000 	ldr.w	r6, [r8]
 802ec20:	1a2d      	subs	r5, r5, r0
 802ec22:	42b5      	cmp	r5, r6
 802ec24:	dd54      	ble.n	802ecd0 <__gethex+0x228>
 802ec26:	1bad      	subs	r5, r5, r6
 802ec28:	4629      	mov	r1, r5
 802ec2a:	4620      	mov	r0, r4
 802ec2c:	f7fe fa3f 	bl	802d0ae <__any_on>
 802ec30:	4681      	mov	r9, r0
 802ec32:	b178      	cbz	r0, 802ec54 <__gethex+0x1ac>
 802ec34:	1e6b      	subs	r3, r5, #1
 802ec36:	1159      	asrs	r1, r3, #5
 802ec38:	f003 021f 	and.w	r2, r3, #31
 802ec3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802ec40:	f04f 0901 	mov.w	r9, #1
 802ec44:	fa09 f202 	lsl.w	r2, r9, r2
 802ec48:	420a      	tst	r2, r1
 802ec4a:	d003      	beq.n	802ec54 <__gethex+0x1ac>
 802ec4c:	454b      	cmp	r3, r9
 802ec4e:	dc36      	bgt.n	802ecbe <__gethex+0x216>
 802ec50:	f04f 0902 	mov.w	r9, #2
 802ec54:	4629      	mov	r1, r5
 802ec56:	4620      	mov	r0, r4
 802ec58:	f7ff febe 	bl	802e9d8 <rshift>
 802ec5c:	442f      	add	r7, r5
 802ec5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802ec62:	42bb      	cmp	r3, r7
 802ec64:	da42      	bge.n	802ecec <__gethex+0x244>
 802ec66:	9801      	ldr	r0, [sp, #4]
 802ec68:	4621      	mov	r1, r4
 802ec6a:	f7fd fe02 	bl	802c872 <_Bfree>
 802ec6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ec70:	2300      	movs	r3, #0
 802ec72:	6013      	str	r3, [r2, #0]
 802ec74:	25a3      	movs	r5, #163	@ 0xa3
 802ec76:	e793      	b.n	802eba0 <__gethex+0xf8>
 802ec78:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802ec7c:	2a2e      	cmp	r2, #46	@ 0x2e
 802ec7e:	d012      	beq.n	802eca6 <__gethex+0x1fe>
 802ec80:	2b20      	cmp	r3, #32
 802ec82:	d104      	bne.n	802ec8e <__gethex+0x1e6>
 802ec84:	f845 bb04 	str.w	fp, [r5], #4
 802ec88:	f04f 0b00 	mov.w	fp, #0
 802ec8c:	465b      	mov	r3, fp
 802ec8e:	7830      	ldrb	r0, [r6, #0]
 802ec90:	9303      	str	r3, [sp, #12]
 802ec92:	f7ff fef3 	bl	802ea7c <__hexdig_fun>
 802ec96:	9b03      	ldr	r3, [sp, #12]
 802ec98:	f000 000f 	and.w	r0, r0, #15
 802ec9c:	4098      	lsls	r0, r3
 802ec9e:	ea4b 0b00 	orr.w	fp, fp, r0
 802eca2:	3304      	adds	r3, #4
 802eca4:	e7ae      	b.n	802ec04 <__gethex+0x15c>
 802eca6:	45b1      	cmp	r9, r6
 802eca8:	d8ea      	bhi.n	802ec80 <__gethex+0x1d8>
 802ecaa:	492b      	ldr	r1, [pc, #172]	@ (802ed58 <__gethex+0x2b0>)
 802ecac:	9303      	str	r3, [sp, #12]
 802ecae:	2201      	movs	r2, #1
 802ecb0:	4630      	mov	r0, r6
 802ecb2:	f7f7 f882 	bl	8025dba <strncmp>
 802ecb6:	9b03      	ldr	r3, [sp, #12]
 802ecb8:	2800      	cmp	r0, #0
 802ecba:	d1e1      	bne.n	802ec80 <__gethex+0x1d8>
 802ecbc:	e7a2      	b.n	802ec04 <__gethex+0x15c>
 802ecbe:	1ea9      	subs	r1, r5, #2
 802ecc0:	4620      	mov	r0, r4
 802ecc2:	f7fe f9f4 	bl	802d0ae <__any_on>
 802ecc6:	2800      	cmp	r0, #0
 802ecc8:	d0c2      	beq.n	802ec50 <__gethex+0x1a8>
 802ecca:	f04f 0903 	mov.w	r9, #3
 802ecce:	e7c1      	b.n	802ec54 <__gethex+0x1ac>
 802ecd0:	da09      	bge.n	802ece6 <__gethex+0x23e>
 802ecd2:	1b75      	subs	r5, r6, r5
 802ecd4:	4621      	mov	r1, r4
 802ecd6:	9801      	ldr	r0, [sp, #4]
 802ecd8:	462a      	mov	r2, r5
 802ecda:	f7fd ffaf 	bl	802cc3c <__lshift>
 802ecde:	1b7f      	subs	r7, r7, r5
 802ece0:	4604      	mov	r4, r0
 802ece2:	f100 0a14 	add.w	sl, r0, #20
 802ece6:	f04f 0900 	mov.w	r9, #0
 802ecea:	e7b8      	b.n	802ec5e <__gethex+0x1b6>
 802ecec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802ecf0:	42bd      	cmp	r5, r7
 802ecf2:	dd6f      	ble.n	802edd4 <__gethex+0x32c>
 802ecf4:	1bed      	subs	r5, r5, r7
 802ecf6:	42ae      	cmp	r6, r5
 802ecf8:	dc34      	bgt.n	802ed64 <__gethex+0x2bc>
 802ecfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802ecfe:	2b02      	cmp	r3, #2
 802ed00:	d022      	beq.n	802ed48 <__gethex+0x2a0>
 802ed02:	2b03      	cmp	r3, #3
 802ed04:	d024      	beq.n	802ed50 <__gethex+0x2a8>
 802ed06:	2b01      	cmp	r3, #1
 802ed08:	d115      	bne.n	802ed36 <__gethex+0x28e>
 802ed0a:	42ae      	cmp	r6, r5
 802ed0c:	d113      	bne.n	802ed36 <__gethex+0x28e>
 802ed0e:	2e01      	cmp	r6, #1
 802ed10:	d10b      	bne.n	802ed2a <__gethex+0x282>
 802ed12:	9a02      	ldr	r2, [sp, #8]
 802ed14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802ed18:	6013      	str	r3, [r2, #0]
 802ed1a:	2301      	movs	r3, #1
 802ed1c:	6123      	str	r3, [r4, #16]
 802ed1e:	f8ca 3000 	str.w	r3, [sl]
 802ed22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ed24:	2562      	movs	r5, #98	@ 0x62
 802ed26:	601c      	str	r4, [r3, #0]
 802ed28:	e73a      	b.n	802eba0 <__gethex+0xf8>
 802ed2a:	1e71      	subs	r1, r6, #1
 802ed2c:	4620      	mov	r0, r4
 802ed2e:	f7fe f9be 	bl	802d0ae <__any_on>
 802ed32:	2800      	cmp	r0, #0
 802ed34:	d1ed      	bne.n	802ed12 <__gethex+0x26a>
 802ed36:	9801      	ldr	r0, [sp, #4]
 802ed38:	4621      	mov	r1, r4
 802ed3a:	f7fd fd9a 	bl	802c872 <_Bfree>
 802ed3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ed40:	2300      	movs	r3, #0
 802ed42:	6013      	str	r3, [r2, #0]
 802ed44:	2550      	movs	r5, #80	@ 0x50
 802ed46:	e72b      	b.n	802eba0 <__gethex+0xf8>
 802ed48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ed4a:	2b00      	cmp	r3, #0
 802ed4c:	d1f3      	bne.n	802ed36 <__gethex+0x28e>
 802ed4e:	e7e0      	b.n	802ed12 <__gethex+0x26a>
 802ed50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ed52:	2b00      	cmp	r3, #0
 802ed54:	d1dd      	bne.n	802ed12 <__gethex+0x26a>
 802ed56:	e7ee      	b.n	802ed36 <__gethex+0x28e>
 802ed58:	08034876 	.word	0x08034876
 802ed5c:	08034bae 	.word	0x08034bae
 802ed60:	08034e48 	.word	0x08034e48
 802ed64:	1e6f      	subs	r7, r5, #1
 802ed66:	f1b9 0f00 	cmp.w	r9, #0
 802ed6a:	d130      	bne.n	802edce <__gethex+0x326>
 802ed6c:	b127      	cbz	r7, 802ed78 <__gethex+0x2d0>
 802ed6e:	4639      	mov	r1, r7
 802ed70:	4620      	mov	r0, r4
 802ed72:	f7fe f99c 	bl	802d0ae <__any_on>
 802ed76:	4681      	mov	r9, r0
 802ed78:	117a      	asrs	r2, r7, #5
 802ed7a:	2301      	movs	r3, #1
 802ed7c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 802ed80:	f007 071f 	and.w	r7, r7, #31
 802ed84:	40bb      	lsls	r3, r7
 802ed86:	4213      	tst	r3, r2
 802ed88:	4629      	mov	r1, r5
 802ed8a:	4620      	mov	r0, r4
 802ed8c:	bf18      	it	ne
 802ed8e:	f049 0902 	orrne.w	r9, r9, #2
 802ed92:	f7ff fe21 	bl	802e9d8 <rshift>
 802ed96:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802ed9a:	1b76      	subs	r6, r6, r5
 802ed9c:	2502      	movs	r5, #2
 802ed9e:	f1b9 0f00 	cmp.w	r9, #0
 802eda2:	d047      	beq.n	802ee34 <__gethex+0x38c>
 802eda4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802eda8:	2b02      	cmp	r3, #2
 802edaa:	d015      	beq.n	802edd8 <__gethex+0x330>
 802edac:	2b03      	cmp	r3, #3
 802edae:	d017      	beq.n	802ede0 <__gethex+0x338>
 802edb0:	2b01      	cmp	r3, #1
 802edb2:	d109      	bne.n	802edc8 <__gethex+0x320>
 802edb4:	f019 0f02 	tst.w	r9, #2
 802edb8:	d006      	beq.n	802edc8 <__gethex+0x320>
 802edba:	f8da 3000 	ldr.w	r3, [sl]
 802edbe:	ea49 0903 	orr.w	r9, r9, r3
 802edc2:	f019 0f01 	tst.w	r9, #1
 802edc6:	d10e      	bne.n	802ede6 <__gethex+0x33e>
 802edc8:	f045 0510 	orr.w	r5, r5, #16
 802edcc:	e032      	b.n	802ee34 <__gethex+0x38c>
 802edce:	f04f 0901 	mov.w	r9, #1
 802edd2:	e7d1      	b.n	802ed78 <__gethex+0x2d0>
 802edd4:	2501      	movs	r5, #1
 802edd6:	e7e2      	b.n	802ed9e <__gethex+0x2f6>
 802edd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802edda:	f1c3 0301 	rsb	r3, r3, #1
 802edde:	930f      	str	r3, [sp, #60]	@ 0x3c
 802ede0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ede2:	2b00      	cmp	r3, #0
 802ede4:	d0f0      	beq.n	802edc8 <__gethex+0x320>
 802ede6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802edea:	f104 0314 	add.w	r3, r4, #20
 802edee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 802edf2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802edf6:	f04f 0c00 	mov.w	ip, #0
 802edfa:	4618      	mov	r0, r3
 802edfc:	f853 2b04 	ldr.w	r2, [r3], #4
 802ee00:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 802ee04:	d01b      	beq.n	802ee3e <__gethex+0x396>
 802ee06:	3201      	adds	r2, #1
 802ee08:	6002      	str	r2, [r0, #0]
 802ee0a:	2d02      	cmp	r5, #2
 802ee0c:	f104 0314 	add.w	r3, r4, #20
 802ee10:	d13c      	bne.n	802ee8c <__gethex+0x3e4>
 802ee12:	f8d8 2000 	ldr.w	r2, [r8]
 802ee16:	3a01      	subs	r2, #1
 802ee18:	42b2      	cmp	r2, r6
 802ee1a:	d109      	bne.n	802ee30 <__gethex+0x388>
 802ee1c:	1171      	asrs	r1, r6, #5
 802ee1e:	2201      	movs	r2, #1
 802ee20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802ee24:	f006 061f 	and.w	r6, r6, #31
 802ee28:	fa02 f606 	lsl.w	r6, r2, r6
 802ee2c:	421e      	tst	r6, r3
 802ee2e:	d13a      	bne.n	802eea6 <__gethex+0x3fe>
 802ee30:	f045 0520 	orr.w	r5, r5, #32
 802ee34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ee36:	601c      	str	r4, [r3, #0]
 802ee38:	9b02      	ldr	r3, [sp, #8]
 802ee3a:	601f      	str	r7, [r3, #0]
 802ee3c:	e6b0      	b.n	802eba0 <__gethex+0xf8>
 802ee3e:	4299      	cmp	r1, r3
 802ee40:	f843 cc04 	str.w	ip, [r3, #-4]
 802ee44:	d8d9      	bhi.n	802edfa <__gethex+0x352>
 802ee46:	68a3      	ldr	r3, [r4, #8]
 802ee48:	459b      	cmp	fp, r3
 802ee4a:	db17      	blt.n	802ee7c <__gethex+0x3d4>
 802ee4c:	6861      	ldr	r1, [r4, #4]
 802ee4e:	9801      	ldr	r0, [sp, #4]
 802ee50:	3101      	adds	r1, #1
 802ee52:	f7fd fce9 	bl	802c828 <_Balloc>
 802ee56:	4681      	mov	r9, r0
 802ee58:	b918      	cbnz	r0, 802ee62 <__gethex+0x3ba>
 802ee5a:	4b1a      	ldr	r3, [pc, #104]	@ (802eec4 <__gethex+0x41c>)
 802ee5c:	4602      	mov	r2, r0
 802ee5e:	2184      	movs	r1, #132	@ 0x84
 802ee60:	e6c5      	b.n	802ebee <__gethex+0x146>
 802ee62:	6922      	ldr	r2, [r4, #16]
 802ee64:	3202      	adds	r2, #2
 802ee66:	f104 010c 	add.w	r1, r4, #12
 802ee6a:	0092      	lsls	r2, r2, #2
 802ee6c:	300c      	adds	r0, #12
 802ee6e:	f7f8 f9ab 	bl	80271c8 <memcpy>
 802ee72:	4621      	mov	r1, r4
 802ee74:	9801      	ldr	r0, [sp, #4]
 802ee76:	f7fd fcfc 	bl	802c872 <_Bfree>
 802ee7a:	464c      	mov	r4, r9
 802ee7c:	6923      	ldr	r3, [r4, #16]
 802ee7e:	1c5a      	adds	r2, r3, #1
 802ee80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802ee84:	6122      	str	r2, [r4, #16]
 802ee86:	2201      	movs	r2, #1
 802ee88:	615a      	str	r2, [r3, #20]
 802ee8a:	e7be      	b.n	802ee0a <__gethex+0x362>
 802ee8c:	6922      	ldr	r2, [r4, #16]
 802ee8e:	455a      	cmp	r2, fp
 802ee90:	dd0b      	ble.n	802eeaa <__gethex+0x402>
 802ee92:	2101      	movs	r1, #1
 802ee94:	4620      	mov	r0, r4
 802ee96:	f7ff fd9f 	bl	802e9d8 <rshift>
 802ee9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802ee9e:	3701      	adds	r7, #1
 802eea0:	42bb      	cmp	r3, r7
 802eea2:	f6ff aee0 	blt.w	802ec66 <__gethex+0x1be>
 802eea6:	2501      	movs	r5, #1
 802eea8:	e7c2      	b.n	802ee30 <__gethex+0x388>
 802eeaa:	f016 061f 	ands.w	r6, r6, #31
 802eeae:	d0fa      	beq.n	802eea6 <__gethex+0x3fe>
 802eeb0:	4453      	add	r3, sl
 802eeb2:	f1c6 0620 	rsb	r6, r6, #32
 802eeb6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802eeba:	f7fd fd73 	bl	802c9a4 <__hi0bits>
 802eebe:	42b0      	cmp	r0, r6
 802eec0:	dbe7      	blt.n	802ee92 <__gethex+0x3ea>
 802eec2:	e7f0      	b.n	802eea6 <__gethex+0x3fe>
 802eec4:	08034bae 	.word	0x08034bae

0802eec8 <L_shift>:
 802eec8:	f1c2 0208 	rsb	r2, r2, #8
 802eecc:	0092      	lsls	r2, r2, #2
 802eece:	b570      	push	{r4, r5, r6, lr}
 802eed0:	f1c2 0620 	rsb	r6, r2, #32
 802eed4:	6843      	ldr	r3, [r0, #4]
 802eed6:	6804      	ldr	r4, [r0, #0]
 802eed8:	fa03 f506 	lsl.w	r5, r3, r6
 802eedc:	432c      	orrs	r4, r5
 802eede:	40d3      	lsrs	r3, r2
 802eee0:	6004      	str	r4, [r0, #0]
 802eee2:	f840 3f04 	str.w	r3, [r0, #4]!
 802eee6:	4288      	cmp	r0, r1
 802eee8:	d3f4      	bcc.n	802eed4 <L_shift+0xc>
 802eeea:	bd70      	pop	{r4, r5, r6, pc}

0802eeec <__match>:
 802eeec:	b530      	push	{r4, r5, lr}
 802eeee:	6803      	ldr	r3, [r0, #0]
 802eef0:	3301      	adds	r3, #1
 802eef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802eef6:	b914      	cbnz	r4, 802eefe <__match+0x12>
 802eef8:	6003      	str	r3, [r0, #0]
 802eefa:	2001      	movs	r0, #1
 802eefc:	bd30      	pop	{r4, r5, pc}
 802eefe:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ef02:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802ef06:	2d19      	cmp	r5, #25
 802ef08:	bf98      	it	ls
 802ef0a:	3220      	addls	r2, #32
 802ef0c:	42a2      	cmp	r2, r4
 802ef0e:	d0f0      	beq.n	802eef2 <__match+0x6>
 802ef10:	2000      	movs	r0, #0
 802ef12:	e7f3      	b.n	802eefc <__match+0x10>

0802ef14 <__hexnan>:
 802ef14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ef18:	680b      	ldr	r3, [r1, #0]
 802ef1a:	6801      	ldr	r1, [r0, #0]
 802ef1c:	115e      	asrs	r6, r3, #5
 802ef1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802ef22:	f013 031f 	ands.w	r3, r3, #31
 802ef26:	b087      	sub	sp, #28
 802ef28:	bf18      	it	ne
 802ef2a:	3604      	addne	r6, #4
 802ef2c:	2500      	movs	r5, #0
 802ef2e:	1f37      	subs	r7, r6, #4
 802ef30:	4682      	mov	sl, r0
 802ef32:	4690      	mov	r8, r2
 802ef34:	9301      	str	r3, [sp, #4]
 802ef36:	f846 5c04 	str.w	r5, [r6, #-4]
 802ef3a:	46b9      	mov	r9, r7
 802ef3c:	463c      	mov	r4, r7
 802ef3e:	9502      	str	r5, [sp, #8]
 802ef40:	46ab      	mov	fp, r5
 802ef42:	784a      	ldrb	r2, [r1, #1]
 802ef44:	1c4b      	adds	r3, r1, #1
 802ef46:	9303      	str	r3, [sp, #12]
 802ef48:	b342      	cbz	r2, 802ef9c <__hexnan+0x88>
 802ef4a:	4610      	mov	r0, r2
 802ef4c:	9105      	str	r1, [sp, #20]
 802ef4e:	9204      	str	r2, [sp, #16]
 802ef50:	f7ff fd94 	bl	802ea7c <__hexdig_fun>
 802ef54:	2800      	cmp	r0, #0
 802ef56:	d151      	bne.n	802effc <__hexnan+0xe8>
 802ef58:	9a04      	ldr	r2, [sp, #16]
 802ef5a:	9905      	ldr	r1, [sp, #20]
 802ef5c:	2a20      	cmp	r2, #32
 802ef5e:	d818      	bhi.n	802ef92 <__hexnan+0x7e>
 802ef60:	9b02      	ldr	r3, [sp, #8]
 802ef62:	459b      	cmp	fp, r3
 802ef64:	dd13      	ble.n	802ef8e <__hexnan+0x7a>
 802ef66:	454c      	cmp	r4, r9
 802ef68:	d206      	bcs.n	802ef78 <__hexnan+0x64>
 802ef6a:	2d07      	cmp	r5, #7
 802ef6c:	dc04      	bgt.n	802ef78 <__hexnan+0x64>
 802ef6e:	462a      	mov	r2, r5
 802ef70:	4649      	mov	r1, r9
 802ef72:	4620      	mov	r0, r4
 802ef74:	f7ff ffa8 	bl	802eec8 <L_shift>
 802ef78:	4544      	cmp	r4, r8
 802ef7a:	d952      	bls.n	802f022 <__hexnan+0x10e>
 802ef7c:	2300      	movs	r3, #0
 802ef7e:	f1a4 0904 	sub.w	r9, r4, #4
 802ef82:	f844 3c04 	str.w	r3, [r4, #-4]
 802ef86:	f8cd b008 	str.w	fp, [sp, #8]
 802ef8a:	464c      	mov	r4, r9
 802ef8c:	461d      	mov	r5, r3
 802ef8e:	9903      	ldr	r1, [sp, #12]
 802ef90:	e7d7      	b.n	802ef42 <__hexnan+0x2e>
 802ef92:	2a29      	cmp	r2, #41	@ 0x29
 802ef94:	d157      	bne.n	802f046 <__hexnan+0x132>
 802ef96:	3102      	adds	r1, #2
 802ef98:	f8ca 1000 	str.w	r1, [sl]
 802ef9c:	f1bb 0f00 	cmp.w	fp, #0
 802efa0:	d051      	beq.n	802f046 <__hexnan+0x132>
 802efa2:	454c      	cmp	r4, r9
 802efa4:	d206      	bcs.n	802efb4 <__hexnan+0xa0>
 802efa6:	2d07      	cmp	r5, #7
 802efa8:	dc04      	bgt.n	802efb4 <__hexnan+0xa0>
 802efaa:	462a      	mov	r2, r5
 802efac:	4649      	mov	r1, r9
 802efae:	4620      	mov	r0, r4
 802efb0:	f7ff ff8a 	bl	802eec8 <L_shift>
 802efb4:	4544      	cmp	r4, r8
 802efb6:	d936      	bls.n	802f026 <__hexnan+0x112>
 802efb8:	f1a8 0204 	sub.w	r2, r8, #4
 802efbc:	4623      	mov	r3, r4
 802efbe:	f853 1b04 	ldr.w	r1, [r3], #4
 802efc2:	f842 1f04 	str.w	r1, [r2, #4]!
 802efc6:	429f      	cmp	r7, r3
 802efc8:	d2f9      	bcs.n	802efbe <__hexnan+0xaa>
 802efca:	1b3b      	subs	r3, r7, r4
 802efcc:	f023 0303 	bic.w	r3, r3, #3
 802efd0:	3304      	adds	r3, #4
 802efd2:	3401      	adds	r4, #1
 802efd4:	3e03      	subs	r6, #3
 802efd6:	42b4      	cmp	r4, r6
 802efd8:	bf88      	it	hi
 802efda:	2304      	movhi	r3, #4
 802efdc:	4443      	add	r3, r8
 802efde:	2200      	movs	r2, #0
 802efe0:	f843 2b04 	str.w	r2, [r3], #4
 802efe4:	429f      	cmp	r7, r3
 802efe6:	d2fb      	bcs.n	802efe0 <__hexnan+0xcc>
 802efe8:	683b      	ldr	r3, [r7, #0]
 802efea:	b91b      	cbnz	r3, 802eff4 <__hexnan+0xe0>
 802efec:	4547      	cmp	r7, r8
 802efee:	d128      	bne.n	802f042 <__hexnan+0x12e>
 802eff0:	2301      	movs	r3, #1
 802eff2:	603b      	str	r3, [r7, #0]
 802eff4:	2005      	movs	r0, #5
 802eff6:	b007      	add	sp, #28
 802eff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802effc:	3501      	adds	r5, #1
 802effe:	2d08      	cmp	r5, #8
 802f000:	f10b 0b01 	add.w	fp, fp, #1
 802f004:	dd06      	ble.n	802f014 <__hexnan+0x100>
 802f006:	4544      	cmp	r4, r8
 802f008:	d9c1      	bls.n	802ef8e <__hexnan+0x7a>
 802f00a:	2300      	movs	r3, #0
 802f00c:	f844 3c04 	str.w	r3, [r4, #-4]
 802f010:	2501      	movs	r5, #1
 802f012:	3c04      	subs	r4, #4
 802f014:	6822      	ldr	r2, [r4, #0]
 802f016:	f000 000f 	and.w	r0, r0, #15
 802f01a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802f01e:	6020      	str	r0, [r4, #0]
 802f020:	e7b5      	b.n	802ef8e <__hexnan+0x7a>
 802f022:	2508      	movs	r5, #8
 802f024:	e7b3      	b.n	802ef8e <__hexnan+0x7a>
 802f026:	9b01      	ldr	r3, [sp, #4]
 802f028:	2b00      	cmp	r3, #0
 802f02a:	d0dd      	beq.n	802efe8 <__hexnan+0xd4>
 802f02c:	f1c3 0320 	rsb	r3, r3, #32
 802f030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802f034:	40da      	lsrs	r2, r3
 802f036:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802f03a:	4013      	ands	r3, r2
 802f03c:	f846 3c04 	str.w	r3, [r6, #-4]
 802f040:	e7d2      	b.n	802efe8 <__hexnan+0xd4>
 802f042:	3f04      	subs	r7, #4
 802f044:	e7d0      	b.n	802efe8 <__hexnan+0xd4>
 802f046:	2004      	movs	r0, #4
 802f048:	e7d5      	b.n	802eff6 <__hexnan+0xe2>
	...

0802f04c <_init>:
 802f04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f04e:	bf00      	nop
 802f050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f052:	bc08      	pop	{r3}
 802f054:	469e      	mov	lr, r3
 802f056:	4770      	bx	lr

0802f058 <_fini>:
 802f058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f05a:	bf00      	nop
 802f05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f05e:	bc08      	pop	{r3}
 802f060:	469e      	mov	lr, r3
 802f062:	4770      	bx	lr
